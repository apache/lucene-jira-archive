diff --git a/lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler.java b/lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler.java
index 465d43c..9c6adca 100644
--- a/lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler.java
+++ b/lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler.java
@@ -80,6 +80,12 @@ public final class JavascriptCompiler {
       super(parent);
     }
 
+    @Override
+    protected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {
+      System.out.println("Loading class <" + name + "> , using Loader" + this);
+      return super.loadClass(name, resolve);
+    }
+
     public Class<? extends Expression> define(String className, byte[] bytecode) {
       return defineClass(className, bytecode, 0, bytecode.length).asSubclass(Expression.class);
     }
diff --git a/lucene/expressions/src/test/org/apache/lucene/expressions/js/TestJavascriptCompiler.java b/lucene/expressions/src/test/org/apache/lucene/expressions/js/TestJavascriptCompiler.java
index 9941865..3ee3da1 100644
--- a/lucene/expressions/src/test/org/apache/lucene/expressions/js/TestJavascriptCompiler.java
+++ b/lucene/expressions/src/test/org/apache/lucene/expressions/js/TestJavascriptCompiler.java
@@ -195,4 +195,18 @@ public class TestJavascriptCompiler extends LuceneTestCase {
     x = JavascriptCompiler.compile("foo['\\\\'][\"\\\\\"]");
     assertEquals("foo['\\\\']['\\\\']", x.variables[0]);
   }
+
+  public void testClassLoading() throws Exception {
+    String expr = " 1 + abs(-2)";
+
+    // Explicitly load Math class using the App class loader
+    System.out.println(java.lang.Math.abs(-2));
+
+    Expression compiled = JavascriptCompiler.compile(expr);
+    System.out.println(compiled.evaluate(null));
+
+    // now compile the same expr again
+    Expression compiledAgain = JavascriptCompiler.compile(expr);
+    System.out.println(compiledAgain.evaluate(null));
+  }
 }
