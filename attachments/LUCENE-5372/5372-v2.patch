diff --git a/lucene/analysis/common/README.txt b/lucene/analysis/common/README.txt
index f4338a4..79b23f6 100644
--- a/lucene/analysis/common/README.txt
+++ b/lucene/analysis/common/README.txt
@@ -7,7 +7,7 @@ together with classes integrating them with the Lucene search engine.
 A few changes has been made to the static Snowball code and compiled stemmers:
 
  * Class SnowballProgram is made abstract and contains new abstract method stem() to avoid reflection in Lucene filter class SnowballFilter.
- * All use of StringBuffers has been refactored to StringBuilder for speed.
+ * All use of StringBuilders has been refactored to StringBuilder for speed.
  * Snowball BSD license header has been added to the Java classes to avoid having RAT adding new ASL headers.
 
 
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/PatternParser.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/PatternParser.java
index d658977..3cf35cb 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/PatternParser.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/PatternParser.java
@@ -131,7 +131,7 @@ public class PatternParser extends DefaultHandler {
     }
   }
 
-  protected String readToken(StringBuffer chars) {
+  protected String readToken(StringBuilder chars) {
     String word;
     boolean space = false;
     int i;
@@ -344,7 +344,7 @@ public class PatternParser extends DefaultHandler {
   @SuppressWarnings("unchecked")
   @Override
   public void characters(char ch[], int start, int length) {
-    StringBuffer chars = new StringBuffer(length);
+    StringBuilder chars = new StringBuilder(length);
     chars.append(ch, start, length);
     String word = readToken(chars);
     while (word != null) {
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/snowball/package.html b/lucene/analysis/common/src/java/org/apache/lucene/analysis/snowball/package.html
index d8b3471..59ea87c 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/snowball/package.html
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/snowball/package.html
@@ -30,7 +30,7 @@ A few changes has been made to the static Snowball code and compiled stemmers:
 </p>
 <ul>
   <li>Class SnowballProgram is made abstract and contains new abstract method stem() to avoid reflection in Lucene filter class SnowballFilter.</li>
-  <li>All use of StringBuffers has been refactored to StringBuilder for speed.</li>
+  <li>All use of StringBuilders has been refactored to StringBuilder for speed.</li>
   <li>Snowball BSD license header has been added to the Java classes to avoid having RAT adding ASL headers.</li>
 </ul>
 <p>
diff --git a/lucene/analysis/common/src/java/org/tartarus/snowball/Among.java b/lucene/analysis/common/src/java/org/tartarus/snowball/Among.java
index 1d4756e..f0f8071 100644
--- a/lucene/analysis/common/src/java/org/tartarus/snowball/Among.java
+++ b/lucene/analysis/common/src/java/org/tartarus/snowball/Among.java
@@ -37,8 +37,8 @@ import java.lang.reflect.Method;
  * This is the rev 502 of the Snowball SVN trunk,
  * but modified:
  * made abstract and introduced abstract method stem to avoid expensive reflection in filter class.
- * refactored StringBuffers to StringBuilder
- * uses char[] as buffer instead of StringBuffer/StringBuilder
+ * refactored StringBuilders to StringBuilder
+ * uses char[] as buffer instead of StringBuilder/StringBuilder
  * eq_s,eq_s_b,insert,replace_s take CharSequence like eq_v and eq_v_b
  * reflection calls (Lovins, etc) use EMPTY_ARGS/EMPTY_PARAMS
  */
diff --git a/lucene/analysis/common/src/java/org/tartarus/snowball/SnowballProgram.java b/lucene/analysis/common/src/java/org/tartarus/snowball/SnowballProgram.java
index dbce73b..a574768 100644
--- a/lucene/analysis/common/src/java/org/tartarus/snowball/SnowballProgram.java
+++ b/lucene/analysis/common/src/java/org/tartarus/snowball/SnowballProgram.java
@@ -41,8 +41,8 @@ import org.apache.lucene.util.RamUsageEstimator;
  * This is the rev 502 of the Snowball SVN trunk,
  * but modified:
  * made abstract and introduced abstract method stem to avoid expensive reflection in filter class.
- * refactored StringBuffers to StringBuilder
- * uses char[] as buffer instead of StringBuffer/StringBuilder
+ * refactored StringBuilders to StringBuilder
+ * uses char[] as buffer instead of StringBuilder/StringBuilder
  * eq_s,eq_s_b,insert,replace_s take CharSequence like eq_v and eq_v_b
  * reflection calls (Lovins, etc) use EMPTY_ARGS/EMPTY_PARAMS
  */
@@ -459,7 +459,7 @@ public abstract class SnowballProgram {
       if (c_bra <= ket) ket += adjustment;
     }
 
-    /* Copy the slice into the supplied StringBuffer */
+    /* Copy the slice into the supplied StringBuilder */
     protected StringBuilder slice_to(StringBuilder s)
     {
       slice_check();
diff --git a/lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseIterationMarkCharFilter.java b/lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseIterationMarkCharFilter.java
index 4df3812..6ac7044 100644
--- a/lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseIterationMarkCharFilter.java
+++ b/lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseIterationMarkCharFilter.java
@@ -209,7 +209,7 @@ public class TestJapaneseIterationMarkCharFilter extends BaseTokenStreamTestCase
   }
 
   private String readFully(Reader stream) throws IOException {
-    StringBuffer buffer = new StringBuffer();
+    StringBuilder buffer = new StringBuilder();
     int ch;
     while ((ch = stream.read()) != -1) {
       buffer.append((char) ch);
diff --git a/lucene/analysis/stempel/src/java/org/egothor/stemmer/Diff.java b/lucene/analysis/stempel/src/java/org/egothor/stemmer/Diff.java
index 0a0d13a..b46e6b7 100644
--- a/lucene/analysis/stempel/src/java/org/egothor/stemmer/Diff.java
+++ b/lucene/analysis/stempel/src/java/org/egothor/stemmer/Diff.java
@@ -134,7 +134,7 @@ public class Diff {
              */
             // String s = orig.toString();
             // s = s.substring( 0, pos ) + s.substring( o + 1 );
-            // orig = new StringBuffer( s );
+            // orig = new StringBuilder( s );
             dest.delete(pos, o + 1);        
             break;
           case 'I':
@@ -231,7 +231,7 @@ public class Diff {
     }
     
     // read the patch string
-    StringBuffer result = new StringBuffer();
+    StringBuilder result = new StringBuilder();
     final char base = 'a' - 1;
     char deletes = base;
     char equals = base;
diff --git a/lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/CharTermAttributeImpl.java b/lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/CharTermAttributeImpl.java
index 784330a..c54df93 100644
--- a/lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/CharTermAttributeImpl.java
+++ b/lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/CharTermAttributeImpl.java
@@ -144,8 +144,8 @@ public class CharTermAttributeImpl extends AttributeImpl implements CharTermAttr
       } else if (csq instanceof CharBuffer && ((CharBuffer) csq).hasArray()) {
         final CharBuffer cb = (CharBuffer) csq;
         System.arraycopy(cb.array(), cb.arrayOffset() + cb.position() + start, termBuffer, termLength, len);
-      } else if (csq instanceof StringBuffer) {
-        ((StringBuffer) csq).getChars(start, end, termBuffer, termLength);
+      } else if (csq instanceof StringBuilder) {
+        ((StringBuilder) csq).getChars(start, end, termBuffer, termLength);
       } else {
         while (start < end)
           termBuffer[termLength++] = csq.charAt(start++);
diff --git a/lucene/core/src/test/org/apache/lucene/analysis/tokenattributes/TestCharTermAttributeImpl.java b/lucene/core/src/test/org/apache/lucene/analysis/tokenattributes/TestCharTermAttributeImpl.java
index f1cfafe..e1ea277 100644
--- a/lucene/core/src/test/org/apache/lucene/analysis/tokenattributes/TestCharTermAttributeImpl.java
+++ b/lucene/core/src/test/org/apache/lucene/analysis/tokenattributes/TestCharTermAttributeImpl.java
@@ -176,7 +176,7 @@ public class TestCharTermAttributeImpl extends LuceneTestCase {
     assertEquals("1234567890123412345678901234", t.toString());
     t.append((CharSequence) new StringBuilder("0123456789"), 5, 7);
     assertEquals("123456789012341234567890123456", t.toString());
-    t.append((CharSequence) new StringBuffer(t));
+    t.append((CharSequence) new StringBuilder(t));
     assertEquals("123456789012341234567890123456123456789012341234567890123456", t.toString());
     // very wierd, to test if a subSlice is wrapped correct :)
     CharBuffer buf = CharBuffer.wrap("0123456789".toCharArray(), 3, 5);
@@ -213,7 +213,7 @@ public class TestCharTermAttributeImpl extends LuceneTestCase {
     assertEquals("0123456789012345678901234567890123456789012345678934567890123456789012345678901234567890123456789", t.toString());
     t.setEmpty().append((CharSequence) new StringBuilder("01234567890123456789"), 5, 17);
     assertEquals((CharSequence) "567890123456", t.toString());
-    t.append(new StringBuffer(t));
+    t.append(new StringBuilder(t));
     assertEquals((CharSequence) "567890123456567890123456", t.toString());
     // very wierd, to test if a subSlice is wrapped correct :)
     CharBuffer buf = CharBuffer.wrap("012345678901234567890123456789".toCharArray(), 3, 15);
@@ -300,7 +300,7 @@ public class TestCharTermAttributeImpl extends LuceneTestCase {
       csq[j++] = cta;
       csq[j++] = testString;
       csq[j++] = new StringBuilder(sb);
-      csq[j++] = new StringBuffer(sb);
+      csq[j++] = new StringBuilder(sb);
       csq[j++] = CharBuffer.wrap(testString.toCharArray());
       csq[j++] = new CharSequence() {
         public char charAt(int i) { return testString.charAt(i); }
diff --git a/lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2.java b/lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2.java
index 9ce0b06..af6fcbb 100644
--- a/lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2.java
@@ -740,7 +740,7 @@ public class TestStressIndexing2 extends LuceneTestCase {
       if (r.nextBoolean())
         return getUTF8String(nTokens);
 
-      // avoid StringBuffer because it adds extra synchronization.
+      // avoid StringBuilder because it adds extra synchronization.
       char[] arr = new char[nTokens*2];
       for (int i=0; i<nTokens; i++) {
         arr[i*2] = (char)('A' + r.nextInt(10));
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/collections/ArrayHashMap.java b/lucene/facet/src/java/org/apache/lucene/facet/collections/ArrayHashMap.java
index 93fe9e1..2867558 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/collections/ArrayHashMap.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/collections/ArrayHashMap.java
@@ -508,7 +508,7 @@ public class ArrayHashMap<K,V> implements Iterable<V> {
 
   @Override
   public String toString() {
-    StringBuffer sb = new StringBuffer();
+    StringBuilder sb = new StringBuilder();
     sb.append('{');
     Iterator<K> keyIterator = keyIterator();
     while (keyIterator.hasNext()) {
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/collections/FloatToObjectMap.java b/lucene/facet/src/java/org/apache/lucene/facet/collections/FloatToObjectMap.java
index da5c4f8..d271b78 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/collections/FloatToObjectMap.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/collections/FloatToObjectMap.java
@@ -584,7 +584,7 @@ public class FloatToObjectMap<T> implements Iterable<T> {
 
   @Override
   public String toString() {
-    StringBuffer sb = new StringBuffer();
+    StringBuilder sb = new StringBuilder();
     sb.append('{');
     FloatIterator keyIterator = keyIterator();
     while (keyIterator.hasNext()) {
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/collections/IntArray.java b/lucene/facet/src/java/org/apache/lucene/facet/collections/IntArray.java
index 9cb6e1c..bfba1c2 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/collections/IntArray.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/collections/IntArray.java
@@ -232,11 +232,22 @@ public class IntArray {
    */
   @Override
   public String toString() {
-    String s = "(" + size + ") ";
-    for (int i = 0; i < size; ++i) {
-      s += "" + data[i] + ", ";
+    // 2 parenthesis, size ints, 1 comma and space for size - 1 numbers
+    // The maximum string length is Integer.MIN_VALUE = 11 chars
+    StringBuilder sb = new StringBuilder(2 + 2 * (size - 1) + size * 11);
+    sb.append("(");
+
+    if(size > 0) {
+      sb.append(data[0]);
     }
-    return s;
+
+    for(int i = 1; i < size; i++) {
+      sb.append(", ");
+      sb.append(data[i]);
+    }
+    sb.append(")");
+
+    return sb.toString();
   }
 
   /**
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/collections/IntHashSet.java b/lucene/facet/src/java/org/apache/lucene/facet/collections/IntHashSet.java
index 3d5a817..c7db549 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/collections/IntHashSet.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/collections/IntHashSet.java
@@ -511,7 +511,7 @@ public class IntHashSet {
    */
   @Override
   public String toString() {
-    StringBuffer sb = new StringBuffer();
+    StringBuilder sb = new StringBuilder();
     sb.append('{');
     IntIterator iterator = iterator();
     while (iterator.hasNext()) {
@@ -527,10 +527,10 @@ public class IntHashSet {
 
   public String toHashString() {
     String string = "\n";
-    StringBuffer sb = new StringBuffer();
+    StringBuilder sb = new StringBuilder();
 
     for (int i = 0; i < this.baseHash.length; i++) {
-      StringBuffer sb2 = new StringBuffer();
+      StringBuilder sb2 = new StringBuilder();
       boolean shouldAppend = false;
       sb2.append(i + ".\t");
       for (int index = baseHash[i]; index != 0; index = next[index]) {
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/collections/IntToDoubleMap.java b/lucene/facet/src/java/org/apache/lucene/facet/collections/IntToDoubleMap.java
index b787ab6..1c0ecdf 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/collections/IntToDoubleMap.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/collections/IntToDoubleMap.java
@@ -584,7 +584,7 @@ public class IntToDoubleMap {
 
   @Override
   public String toString() {
-    StringBuffer sb = new StringBuffer();
+    StringBuilder sb = new StringBuilder();
     sb.append('{');
     IntIterator keyIterator = keyIterator();
     while (keyIterator.hasNext()) {
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/collections/IntToFloatMap.java b/lucene/facet/src/java/org/apache/lucene/facet/collections/IntToFloatMap.java
index 3e9d7ae..65401d8 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/collections/IntToFloatMap.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/collections/IntToFloatMap.java
@@ -584,7 +584,7 @@ public class IntToFloatMap {
 
   @Override
   public String toString() {
-    StringBuffer sb = new StringBuffer();
+    StringBuilder sb = new StringBuilder();
     sb.append('{');
     IntIterator keyIterator = keyIterator();
     while (keyIterator.hasNext()) {
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/collections/IntToIntMap.java b/lucene/facet/src/java/org/apache/lucene/facet/collections/IntToIntMap.java
index f2f27fc..e4922c5 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/collections/IntToIntMap.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/collections/IntToIntMap.java
@@ -574,7 +574,7 @@ public class IntToIntMap {
 
   @Override
   public String toString() {
-    StringBuffer sb = new StringBuffer();
+    StringBuilder sb = new StringBuilder();
     sb.append('{');
     IntIterator keyIterator = keyIterator();
     while (keyIterator.hasNext()) {
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/collections/IntToObjectMap.java b/lucene/facet/src/java/org/apache/lucene/facet/collections/IntToObjectMap.java
index 9db16ec..58c692d 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/collections/IntToObjectMap.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/collections/IntToObjectMap.java
@@ -584,7 +584,7 @@ public class IntToObjectMap<T> implements Iterable<T> {
 
   @Override
   public String toString() {
-    StringBuffer sb = new StringBuffer();
+    StringBuilder sb = new StringBuilder();
     sb.append('{');
     IntIterator keyIterator = keyIterator();
     while (keyIterator.hasNext()) {
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/collections/ObjectToFloatMap.java b/lucene/facet/src/java/org/apache/lucene/facet/collections/ObjectToFloatMap.java
index 7c7a95c..0e82f91 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/collections/ObjectToFloatMap.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/collections/ObjectToFloatMap.java
@@ -579,7 +579,7 @@ public class ObjectToFloatMap<K> {
 
   @Override
   public String toString() {
-    StringBuffer sb = new StringBuffer();
+    StringBuilder sb = new StringBuilder();
     sb.append('{');
     Iterator<K> keyIterator = keyIterator();
     while (keyIterator.hasNext()) {
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/collections/ObjectToIntMap.java b/lucene/facet/src/java/org/apache/lucene/facet/collections/ObjectToIntMap.java
index a7ce7a6..1e9cf5b 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/collections/ObjectToIntMap.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/collections/ObjectToIntMap.java
@@ -578,7 +578,7 @@ public class ObjectToIntMap<K> {
 
   @Override
   public String toString() {
-    StringBuffer sb = new StringBuffer();
+    StringBuilder sb = new StringBuilder();
     sb.append('{');
     Iterator<K> keyIterator = keyIterator();
     while (keyIterator.hasNext()) {
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/ParseException.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/ParseException.java
index 7ba0d3c..3c02be3 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/ParseException.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/ParseException.java
@@ -89,7 +89,7 @@ public class ParseException extends Exception {
                            int[][] expectedTokenSequences,
                            String[] tokenImage) {
     String eol = System.getProperty("line.separator", "\n");
-    StringBuffer expected = new StringBuffer();
+    StringBuilder expected = new StringBuilder();
     int maxSize = 0;
     for (int i = 0; i < expectedTokenSequences.length; i++) {
       if (maxSize < expectedTokenSequences[i].length) {
@@ -139,7 +139,7 @@ public class ParseException extends Exception {
    * string literal.
    */
   static String add_escapes(String str) {
-      StringBuffer retval = new StringBuffer();
+      StringBuilder retval = new StringBuilder();
       char ch;
       for (int i = 0; i < str.length(); i++) {
         switch (str.charAt(i))
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/TokenMgrError.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/TokenMgrError.java
index 51712a7..ad111d0 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/TokenMgrError.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/TokenMgrError.java
@@ -48,7 +48,7 @@ public class TokenMgrError extends Error
    * equivalents in the given string
    */
   protected static final String addEscapes(String str) {
-    StringBuffer retval = new StringBuffer();
+    StringBuilder retval = new StringBuilder();
     char ch;
     for (int i = 0; i < str.length(); i++) {
       switch (str.charAt(i))
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/ParseException.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/ParseException.java
index 4d87b83..07ebe1b 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/ParseException.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/ParseException.java
@@ -92,7 +92,7 @@ public class ParseException extends QueryNodeParseException {
                            int[][] expectedTokenSequences,
                            String[] tokenImage) {
     String eol = System.getProperty("line.separator", "\n");
-    StringBuffer expected = new StringBuffer();
+    StringBuilder expected = new StringBuilder();
     int maxSize = 0;
     for (int i = 0; i < expectedTokenSequences.length; i++) {
       if (maxSize < expectedTokenSequences[i].length) {
@@ -142,7 +142,7 @@ public class ParseException extends QueryNodeParseException {
    * string literal.
    */
   static String add_escapes(String str) {
-      StringBuffer retval = new StringBuffer();
+      StringBuilder retval = new StringBuilder();
       char ch;
       for (int i = 0; i < str.length(); i++) {
         switch (str.charAt(i))
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/TokenMgrError.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/TokenMgrError.java
index 9207c0f..e24a62b 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/TokenMgrError.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/TokenMgrError.java
@@ -48,7 +48,7 @@ public class TokenMgrError extends Error
    * equivalents in the given string
    */
   protected static final String addEscapes(String str) {
-    StringBuffer retval = new StringBuffer();
+    StringBuilder retval = new StringBuilder();
     char ch;
     for (int i = 0; i < str.length(); i++) {
       switch (str.charAt(i))
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/ParseException.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/ParseException.java
index a163111..d49bc79 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/ParseException.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/ParseException.java
@@ -89,7 +89,7 @@ public class ParseException extends Exception {
                            int[][] expectedTokenSequences,
                            String[] tokenImage) {
     String eol = System.getProperty("line.separator", "\n");
-    StringBuffer expected = new StringBuffer();
+    StringBuilder expected = new StringBuilder();
     int maxSize = 0;
     for (int i = 0; i < expectedTokenSequences.length; i++) {
       if (maxSize < expectedTokenSequences[i].length) {
@@ -139,7 +139,7 @@ public class ParseException extends Exception {
    * string literal.
    */
   static String add_escapes(String str) {
-      StringBuffer retval = new StringBuffer();
+      StringBuilder retval = new StringBuilder();
       char ch;
       for (int i = 0; i < str.length(); i++) {
         switch (str.charAt(i))
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/TokenMgrError.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/TokenMgrError.java
index c79fc21..8b8727d 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/TokenMgrError.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/TokenMgrError.java
@@ -48,7 +48,7 @@ public class TokenMgrError extends Error
    * equivalents in the given string
    */
   protected static final String addEscapes(String str) {
-    StringBuffer retval = new StringBuffer();
+    StringBuilder retval = new StringBuilder();
     char ch;
     for (int i = 0; i < str.length(); i++) {
       switch (str.charAt(i))
diff --git a/lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie.java b/lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie.java
index c61d344..3ec84fe 100644
--- a/lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie.java
+++ b/lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie.java
@@ -419,7 +419,7 @@ public class JaspellTernarySearchTrie {
    *@return The <code>String</code> that indexes the node argument.
    */
   protected String getKey(TSTNode node) {
-    StringBuffer getKeyBuffer = new StringBuffer();
+    StringBuilder getKeyBuffer = new StringBuilder();
     getKeyBuffer.setLength(0);
     getKeyBuffer.append("" + node.splitchar);
     TSTNode currentNode;
diff --git a/solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.java b/solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.java
index 99806bb..1c4d021 100644
--- a/solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.java
+++ b/solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.java
@@ -293,7 +293,7 @@ public class MailEntityProcessor extends EntityProcessorBase {
 
   private void logConfig() {
     if (!LOG.isInfoEnabled()) return;
-    StringBuffer config = new StringBuffer();
+    StringBuilder config = new StringBuilder();
     config.append("user : ").append(user).append(System.getProperty("line.separator"));
     config.append("pwd : ").append(password).append(System.getProperty("line.separator"));
     config.append("protocol : ").append(protocol).append(System.getProperty("line.separator"));
diff --git a/solr/contrib/langid/src/java/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessor.java b/solr/contrib/langid/src/java/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessor.java
index c998ec4..f035f0c 100644
--- a/solr/contrib/langid/src/java/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessor.java
+++ b/solr/contrib/langid/src/java/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessor.java
@@ -287,7 +287,7 @@ public abstract class LanguageIdentifierUpdateProcessor extends UpdateRequestPro
    * Concatenates content from multiple fields
    */
   protected String concatFields(SolrInputDocument doc, String[] fields) {
-    StringBuffer sb = new StringBuffer();
+    StringBuilder sb = new StringBuilder();
     for (String fieldName : inputFields) {
       log.debug("Appending field "+fieldName);
       if (doc.containsKey(fieldName)) {
diff --git a/solr/core/src/java/org/apache/solr/handler/SnapPuller.java b/solr/core/src/java/org/apache/solr/handler/SnapPuller.java
index 12ca0dd..26934a3 100644
--- a/solr/core/src/java/org/apache/solr/handler/SnapPuller.java
+++ b/solr/core/src/java/org/apache/solr/handler/SnapPuller.java
@@ -574,7 +574,7 @@ public class SnapPuller {
       if (props.containsKey(TIMES_INDEX_REPLICATED)) {
         indexCount = Integer.valueOf(props.getProperty(TIMES_INDEX_REPLICATED)) + 1;
       }
-      StringBuffer sb = readToStringBuffer(replicationTime, props.getProperty(INDEX_REPLICATED_AT_LIST));
+      StringBuilder sb = readToStringBuilder(replicationTime, props.getProperty(INDEX_REPLICATED_AT_LIST));
       props.setProperty(INDEX_REPLICATED_AT_LIST, sb.toString());
       props.setProperty(INDEX_REPLICATED_AT, String.valueOf(replicationTime));
       props.setProperty(PREVIOUS_CYCLE_TIME_TAKEN, String.valueOf(replicationTimeTaken));
@@ -596,7 +596,7 @@ public class SnapPuller {
         }
         props.setProperty(TIMES_FAILED, String.valueOf(numFailures));
         props.setProperty(REPLICATION_FAILED_AT, String.valueOf(replicationTime));
-        sb = readToStringBuffer(replicationTime, props.getProperty(REPLICATION_FAILED_AT_LIST));
+        sb = readToStringBuilder(replicationTime, props.getProperty(REPLICATION_FAILED_AT_LIST));
         props.setProperty(REPLICATION_FAILED_AT_LIST, sb.toString());
       }
 
@@ -639,8 +639,8 @@ public class SnapPuller {
     return bytesDownloaded;
   }
 
-  private StringBuffer readToStringBuffer(long replicationTime, String str) {
-    StringBuffer sb = new StringBuffer();
+  private StringBuilder readToStringBuilder(long replicationTime, String str) {
+    StringBuilder sb = new StringBuilder();
     List<String> l = new ArrayList<String>();
     if (str != null && str.length() != 0) {
       String[] ss = str.split(",");
diff --git a/solr/core/src/java/org/apache/solr/internal/csv/CharBuffer.java b/solr/core/src/java/org/apache/solr/internal/csv/CharBuffer.java
index f8f1f9c..797c7b3 100644
--- a/solr/core/src/java/org/apache/solr/internal/csv/CharBuffer.java
+++ b/solr/core/src/java/org/apache/solr/internal/csv/CharBuffer.java
@@ -19,7 +19,7 @@
 package org.apache.solr.internal.csv;
 
 /**
- * A simple StringBuffer replacement that aims to 
+ * A simple StringBuilder replacement that aims to
  * reduce copying as much as possible. The buffer
  * grows as necessary.
  * This class is not thread safe.
@@ -106,9 +106,9 @@ public class CharBuffer {
     /**
      * Appends <code>sb</code> to the end of this CharBuffer.
      * This method involves copying the new data once!
-     * @param sb the StringBuffer to append or null
+     * @param sb the StringBuilder to append or null
      */
-    public void append(final StringBuffer sb) {
+    public void append(final StringBuilder sb) {
         if (sb == null) {
             return;
         }
@@ -188,17 +188,17 @@ public class CharBuffer {
    }
 
     /**
-     * Converts the contents of the buffer into a StringBuffer.
+     * Converts the contents of the buffer into a StringBuilder.
      * This method involves copying the new data once!
      */
-    public StringBuffer toStringBuffer() {
-        StringBuffer sb = new StringBuffer(length);
+    public StringBuilder toStringBuilder() {
+        StringBuilder sb = new StringBuilder(length);
         sb.append(c, 0, length);
         return sb;
     }
     
     /**
-     * Converts the contents of the buffer into a StringBuffer.
+     * Converts the contents of the buffer into a StringBuilder.
      * This method involves copying the new data once!
      */
     @Override
diff --git a/solr/core/src/java/org/apache/solr/internal/csv/writer/CSVWriter.java b/solr/core/src/java/org/apache/solr/internal/csv/writer/CSVWriter.java
index f252def..2bb2a4e 100644
--- a/solr/core/src/java/org/apache/solr/internal/csv/writer/CSVWriter.java
+++ b/solr/core/src/java/org/apache/solr/internal/csv/writer/CSVWriter.java
@@ -46,7 +46,7 @@ public class CSVWriter {
     public void writeRecord(Map map) {
         CSVField[] fields = config.getFields();
         try {
-            StringBuffer sb = new StringBuffer();
+            StringBuilder sb = new StringBuilder();
             for (int i = 0; i < fields.length; i++) {
                 Object o = map.get(fields[i].getName());
                 if (o != null) {
@@ -83,7 +83,7 @@ public class CSVWriter {
                 if (field.overrideFill()) {
                     fillPattern = field.getFill();
                 }
-                StringBuffer sb = new StringBuffer();
+                StringBuilder sb = new StringBuilder();
                 int fillSize = (field.getSize() - value.length());
                 char[] fill = new char[fillSize];
                 Arrays.fill(fill, config.getFillChar());
diff --git a/solr/core/src/java/org/apache/solr/parser/ParseException.java b/solr/core/src/java/org/apache/solr/parser/ParseException.java
index df19104..7732a7d 100644
--- a/solr/core/src/java/org/apache/solr/parser/ParseException.java
+++ b/solr/core/src/java/org/apache/solr/parser/ParseException.java
@@ -89,7 +89,7 @@ public class ParseException extends Exception {
                            int[][] expectedTokenSequences,
                            String[] tokenImage) {
     String eol = System.getProperty("line.separator", "\n");
-    StringBuffer expected = new StringBuffer();
+    StringBuilder expected = new StringBuilder();
     int maxSize = 0;
     for (int i = 0; i < expectedTokenSequences.length; i++) {
       if (maxSize < expectedTokenSequences[i].length) {
@@ -139,7 +139,7 @@ public class ParseException extends Exception {
    * string literal.
    */
   static String add_escapes(String str) {
-      StringBuffer retval = new StringBuffer();
+      StringBuilder retval = new StringBuilder();
       char ch;
       for (int i = 0; i < str.length(); i++) {
         switch (str.charAt(i))
diff --git a/solr/core/src/java/org/apache/solr/parser/TokenMgrError.java b/solr/core/src/java/org/apache/solr/parser/TokenMgrError.java
index f164095..8bf55b6 100644
--- a/solr/core/src/java/org/apache/solr/parser/TokenMgrError.java
+++ b/solr/core/src/java/org/apache/solr/parser/TokenMgrError.java
@@ -48,7 +48,7 @@ public class TokenMgrError extends Error
    * equivalents in the given string
    */
   protected static final String addEscapes(String str) {
-    StringBuffer retval = new StringBuffer();
+    StringBuilder retval = new StringBuilder();
     char ch;
     for (int i = 0; i < str.length(); i++) {
       switch (str.charAt(i))
diff --git a/solr/core/src/java/org/apache/solr/util/SimplePostTool.java b/solr/core/src/java/org/apache/solr/util/SimplePostTool.java
index f27aac3..edfe9c7 100644
--- a/solr/core/src/java/org/apache/solr/util/SimplePostTool.java
+++ b/solr/core/src/java/org/apache/solr/util/SimplePostTool.java
@@ -947,7 +947,7 @@ public class SimplePostTool {
   public static String getXP(Node n, String xpath, boolean concatAll)
       throws XPathExpressionException {
     NodeList nodes = getNodesFromXP(n, xpath);
-    StringBuffer sb = new StringBuffer();
+    StringBuilder sb = new StringBuilder();
     if (nodes.getLength() > 0) {
       for(int i = 0; i < nodes.getLength() ; i++) {
         sb.append(nodes.item(i).getNodeValue() + " ");
diff --git a/solr/core/src/test/org/apache/solr/TestRandomDVFaceting.java b/solr/core/src/test/org/apache/solr/TestRandomDVFaceting.java
index 19ea854..13a927f 100644
--- a/solr/core/src/test/org/apache/solr/TestRandomDVFaceting.java
+++ b/solr/core/src/test/org/apache/solr/TestRandomDVFaceting.java
@@ -96,7 +96,7 @@ public class TestRandomDVFaceting extends SolrTestCaseJ4 {
     }
     if (ids.size() == 0) return;
 
-    StringBuffer sb = new StringBuffer("id:(");
+    StringBuilder sb = new StringBuilder("id:(");
     for (String id : ids) {
       sb.append(id).append(' ');
       model.remove(id);
diff --git a/solr/core/src/test/org/apache/solr/TestRandomFaceting.java b/solr/core/src/test/org/apache/solr/TestRandomFaceting.java
index 2f06b47..04307a7 100644
--- a/solr/core/src/test/org/apache/solr/TestRandomFaceting.java
+++ b/solr/core/src/test/org/apache/solr/TestRandomFaceting.java
@@ -95,7 +95,7 @@ public class TestRandomFaceting extends SolrTestCaseJ4 {
     }
     if (ids.size() == 0) return;
 
-    StringBuffer sb = new StringBuffer("id:(");
+    StringBuilder sb = new StringBuilder("id:(");
     for (String id : ids) {
       sb.append(id).append(' ');
       model.remove(id);
diff --git a/solr/core/src/test/org/apache/solr/internal/csv/CSVPrinterTest.java b/solr/core/src/test/org/apache/solr/internal/csv/CSVPrinterTest.java
index 195e0c6..d06bb78 100644
--- a/solr/core/src/test/org/apache/solr/internal/csv/CSVPrinterTest.java
+++ b/solr/core/src/test/org/apache/solr/internal/csv/CSVPrinterTest.java
@@ -156,7 +156,7 @@ public class CSVPrinterTest extends TestCase {
   }
 
   public static String printable(String s) {
-    StringBuffer sb = new StringBuffer();
+    StringBuilder sb = new StringBuilder();
     for (int i=0; i<s.length(); i++) {
       char ch = s.charAt(i);
       if (ch<=' ' || ch>=128) {
diff --git a/solr/core/src/test/org/apache/solr/internal/csv/CharBufferTest.java b/solr/core/src/test/org/apache/solr/internal/csv/CharBufferTest.java
index d1ccce1..934234a 100644
--- a/solr/core/src/test/org/apache/solr/internal/csv/CharBufferTest.java
+++ b/solr/core/src/test/org/apache/solr/internal/csv/CharBufferTest.java
@@ -70,9 +70,9 @@ public class CharBufferTest extends TestCase {
         }
     }
     
-    public void testAppendStringBuffer() {
+    public void testAppendStringBuilder() {
         CharBuffer cb = new CharBuffer(1);
-        StringBuffer abcd = new StringBuffer("abcd");
+        StringBuilder abcd = new StringBuilder("abcd");
         String expected = "";
         for (int i=0; i<10; i++) {
             cb.append(abcd);
@@ -149,7 +149,7 @@ public class CharBufferTest extends TestCase {
     public void testAppendNull() throws Exception {
         CharBuffer buffer = new CharBuffer(8);
         
-        buffer.append((StringBuffer)null);
+        buffer.append((StringBuilder)null);
         assertEquals("", buffer.toString());
         
         buffer.append((String)null);
diff --git a/solr/core/src/test/org/apache/solr/internal/csv/writer/CSVConfigGuesserTest.java b/solr/core/src/test/org/apache/solr/internal/csv/writer/CSVConfigGuesserTest.java
index 9360b3d..37ad252 100644
--- a/solr/core/src/test/org/apache/solr/internal/csv/writer/CSVConfigGuesserTest.java
+++ b/solr/core/src/test/org/apache/solr/internal/csv/writer/CSVConfigGuesserTest.java
@@ -54,7 +54,7 @@ public class CSVConfigGuesserTest extends TestCase {
         field.setSize(4);
         expected.addField(field);
         expected.addField(field);
-        StringBuffer sb = new StringBuffer();
+        StringBuilder sb = new StringBuilder();
         sb.append("1234;abcd;1234\n");
         sb.append("abcd;1234;abcd");
         ByteArrayInputStream in = new ByteArrayInputStream(sb.toString().getBytes("UTF-8"));
@@ -77,7 +77,7 @@ public class CSVConfigGuesserTest extends TestCase {
         expected.setFill(CSVConfig.FILLRIGHT);
         expected.setIgnoreValueDelimiter(false);
 //        expected.setFixedWidth(false);
-        StringBuffer sb = new StringBuffer();
+        StringBuilder sb = new StringBuilder();
         sb.append("1,2,3,4\n");
         sb.append("abcd,1234,abcd,1234");
         ByteArrayInputStream in = new ByteArrayInputStream(sb.toString().getBytes("UTF-8"));
diff --git a/solr/core/src/test/org/apache/solr/update/SoftAutoCommitTest.java b/solr/core/src/test/org/apache/solr/update/SoftAutoCommitTest.java
index 8ca9f3e..5147b7e 100644
--- a/solr/core/src/test/org/apache/solr/update/SoftAutoCommitTest.java
+++ b/solr/core/src/test/org/apache/solr/update/SoftAutoCommitTest.java
@@ -351,7 +351,7 @@ class MockEventListener implements SolrEventListener {
   public final BlockingQueue<Long> searcher = new LinkedBlockingQueue<Long>(1000);
 
   // if non enpty, then at least one offer failed (queues full)
-  private StringBuffer fail = new StringBuffer();
+  private StringBuilder fail = new StringBuilder();
 
   public MockEventListener() { /* NOOP */ }
   
diff --git a/solr/solrj/src/java/org/apache/solr/common/util/Base64.java b/solr/solrj/src/java/org/apache/solr/common/util/Base64.java
index 5c4f356..8cc3381 100644
--- a/solr/solrj/src/java/org/apache/solr/common/util/Base64.java
+++ b/solr/solrj/src/java/org/apache/solr/common/util/Base64.java
@@ -57,7 +57,7 @@ public class Base64 {
     int numFullGroups = aLen / 3;
     int numBytesInPartialGroup = aLen - 3 * numFullGroups;
     int resultLen = 4 * ((aLen + 2) / 3);
-    StringBuffer result = new StringBuffer(resultLen);
+    StringBuilder result = new StringBuilder(resultLen);
     char[] intToAlpha = intToBase64;
 
     // Translate all full groups from byte array elements to Base64
