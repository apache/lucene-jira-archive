Index: src/test/org/apache/lucene/search/TestFuzzyQuery.java
===================================================================
--- src/test/org/apache/lucene/search/TestFuzzyQuery.java	(revision 966727)
+++ src/test/org/apache/lucene/search/TestFuzzyQuery.java	(working copy)
@@ -29,6 +29,7 @@
 import org.apache.lucene.index.RandomIndexWriter;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.queryParser.QueryParser;
+import org.apache.lucene.search.BooleanClause.Occur;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.MockRAMDirectory;
 import org.apache.lucene.store.RAMDirectory;
@@ -388,6 +389,61 @@
     index.close();
   }
 
+	/**
+	 * LUCENE-329: Tests fuzzy query results are as expected when misspellings of
+	 * the exact term have a high IDF (the exact match should be favoured). Also
+	 * checks that IDF is not ignored completely (documents matching the term with
+	 * fewer occurrences in the index should be higher).
+	 */
+  public void testFuzzyIdfScoring() throws Exception {
+    RAMDirectory directory = new RAMDirectory();
+    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), directory, 
+        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));
+    addDoc("jones", writer);
+    addDoc("jones", writer);
+    addDoc("jones", writer);
+    addDoc("jones", writer);
+    addDoc("joness", writer);
+    // add docs with higher IDF...
+    addDoc("smith", writer);
+    addDoc("smith", writer);
+    addDoc("smith", writer);
+    addDoc("smiith", writer);
+
+    IndexReader reader = writer.getReader();
+    IndexSearcher searcher = new IndexSearcher(reader);
+    writer.close();
+
+    BooleanQuery bq = new BooleanQuery();
+
+		FuzzyQuery smithQuery = new FuzzyQuery(new Term("field", "smith"),
+				FuzzyQuery.defaultMinSimilarity, 0);
+//		smithQuery.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite());
+		bq.add(smithQuery, Occur.SHOULD);
+
+		FuzzyQuery jonesQuery = new FuzzyQuery(new Term("field", "jones"),
+				FuzzyQuery.defaultMinSimilarity, 0);
+//		jonesQuery.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite());
+		bq.add(jonesQuery, Occur.SHOULD);
+
+		ScoreDoc[] hits = searcher.search(bq, null, 1000).scoreDocs;
+		assertEquals(9, hits.length);
+		
+		// smith results should be higher than jones because of its higher IDF
+    assertEquals("smith", reader.document(hits[0].doc).get("field"));
+    assertEquals("smith", reader.document(hits[1].doc).get("field"));
+    assertEquals("smith", reader.document(hits[2].doc).get("field"));
+    assertEquals("jones", reader.document(hits[3].doc).get("field"));
+    assertEquals("jones", reader.document(hits[4].doc).get("field"));
+    assertEquals("jones", reader.document(hits[5].doc).get("field"));
+    assertEquals("jones", reader.document(hits[6].doc).get("field"));
+    // the "fuzzy" results should appear at the bottom of the results
+    
+    searcher.close();
+    reader.close();
+    directory.close();
+  }
+
   private void addDoc(String text, RandomIndexWriter writer) throws IOException {
     Document doc = new Document();
     doc.add(new Field("field", text, Field.Store.YES, Field.Index.ANALYZED));
