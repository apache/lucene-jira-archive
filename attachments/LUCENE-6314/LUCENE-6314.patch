Index: lucene/core/src/java/org/apache/lucene/search/BooleanQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/BooleanQuery.java	(revision 1662995)
+++ lucene/core/src/java/org/apache/lucene/search/BooleanQuery.java	(working copy)
@@ -261,11 +261,7 @@
 
     for (int i = 0 ; i < clauses.size(); i++) {
       BooleanClause c = clauses.get(i);
-      if (c.isProhibited()) {
-        buffer.append("-");
-      } else if (c.isRequired()) {
-        buffer.append("+");
-      }
+      buffer.append(c.getOccur().toString());
 
       Query subQuery = c.getQuery();
       if (subQuery != null) {
Index: lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery.java	(revision 1662995)
+++ lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery.java	(working copy)
@@ -741,4 +741,13 @@
     w.close();
     dir.close();
   }
+  
+  public void testToString() {
+    BooleanQuery bq = new BooleanQuery();
+    bq.add(new TermQuery(new Term("field", "a")), Occur.SHOULD);
+    bq.add(new TermQuery(new Term("field", "b")), Occur.MUST);
+    bq.add(new TermQuery(new Term("field", "c")), Occur.MUST_NOT);
+    bq.add(new TermQuery(new Term("field", "d")), Occur.FILTER);
+    assertEquals("a +b -c #d", bq.toString("field"));
+  }
 }
