diff --git a/lucene/queries/src/test/org/apache/lucene/queries/TestCrash.java b/lucene/queries/src/test/org/apache/lucene/queries/TestCrash.java
new file mode 100644
index 00000000000..200a0782468
--- /dev/null
+++ b/lucene/queries/src/test/org/apache/lucene/queries/TestCrash.java
@@ -0,0 +1,64 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.lucene.queries;
+
+import org.apache.lucene.document.Document;
+import org.apache.lucene.document.Field;
+import org.apache.lucene.document.TextField;
+import org.apache.lucene.index.DirectoryReader;
+import org.apache.lucene.index.IndexWriter;
+import org.apache.lucene.index.IndexWriterConfig;
+import org.apache.lucene.index.Term;
+import org.apache.lucene.queries.function.FunctionScoreQuery;
+import org.apache.lucene.search.*;
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.store.FSDirectory;
+import org.apache.lucene.util.LuceneTestCase;
+
+import java.io.IOException;
+import java.nio.file.Paths;
+
+// nocommit: rename/move class once root cause is identified
+public class TestCrash extends LuceneTestCase {
+
+  // nocommit: rename/move class once root cause is identified
+  public void testCrash() throws Exception {
+		try (Directory dir =  newDirectory()) {
+			IndexWriter indexWriter = new IndexWriter(dir, new IndexWriterConfig());
+			Document doc = new Document();
+			doc.add(new TextField("ExampleText", "periodic function", Field.Store.NO));
+			doc.add(new TextField("ExampleText", "plot of the original function", Field.Store.NO));
+			indexWriter.addDocument(doc);
+			indexWriter.commit();
+			indexWriter.close();
+      
+      try (DirectoryReader reader = DirectoryReader.open(dir)) {
+        Query q;
+        
+        BooleanQuery.Builder bq = new BooleanQuery.Builder();
+        bq.add(new TermQuery(new Term("ExampleText", "function")), BooleanClause.Occur.SHOULD);
+        bq.add(new TermQuery(new Term("ExampleText", "plot")), BooleanClause.Occur.SHOULD);
+        q = bq.build();
+        
+        q = FunctionScoreQuery.boostByQuery(q, new PhraseQuery(1, "ExampleText", "function", "plot"), 2);
+        q = FunctionScoreQuery.boostByValue(q, DoubleValuesSource.SCORES);
+        
+        assertEquals(1, new IndexSearcher(reader).search(q, 10).totalHits.value);
+      }
+    }
+  }
+}
