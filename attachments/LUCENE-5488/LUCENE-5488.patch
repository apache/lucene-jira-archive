diff --git a/lucene/core/src/java/org/apache/lucene/search/FilteredQuery.java b/lucene/core/src/java/org/apache/lucene/search/FilteredQuery.java
index e65561a..5dadaf7 100644
--- a/lucene/core/src/java/org/apache/lucene/search/FilteredQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/FilteredQuery.java
@@ -102,18 +102,32 @@ public class FilteredQuery extends Query {
         Explanation inner = weight.explain (ir, i);
         Filter f = FilteredQuery.this.filter;
         DocIdSet docIdSet = f.getDocIdSet(ir, ir.reader().getLiveDocs());
-        DocIdSetIterator docIdSetIterator = docIdSet == null ? DocIdSetIterator.empty() : docIdSet.iterator();
-        if (docIdSetIterator == null) {
-          docIdSetIterator = DocIdSetIterator.empty();
-        }
-        if (docIdSetIterator.advance(i) == i) {
-          return inner;
-        } else {
-          Explanation result = new Explanation
-            (0.0f, "failure to match filter: " + f.toString());
-          result.addDetail(inner);
-          return result;
+        Explanation result = null;
+        if (docIdSet != null) {
+          Bits bits = docIdSet.bits();
+          if (bits != null) {
+            if (bits.get(i)) {
+              result = inner;
+            } else {
+              result = new Explanation
+                  (0.0f, "failure to match filter: " + f.toString());
+              result.addDetail(inner);
+            }
+          } else {
+            DocIdSetIterator docIdSetIterator = docIdSet == null ? DocIdSetIterator.empty() : docIdSet.iterator();
+            if (docIdSetIterator == null) {
+              docIdSetIterator = DocIdSetIterator.empty();
+            }
+            if (docIdSetIterator.advance(i) == i) {
+              result = inner;
+            } else {
+              result = new Explanation
+                  (0.0f, "failure to match filter: " + f.toString());
+              result.addDetail(inner);
+            }
+          }
         }
+        return result;
       }
 
       // return this query
diff --git a/lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts.java b/lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts.java
index 0dc324b..ee8e77e 100644
--- a/lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts.java
+++ b/lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts.java
@@ -58,12 +58,15 @@ import org.apache.lucene.queries.function.valuesource.LongFieldSource;
 import org.apache.lucene.search.CachingWrapperFilter;
 import org.apache.lucene.search.DocIdSet;
 import org.apache.lucene.search.DocIdSetIterator;
+import org.apache.lucene.search.Explanation;
 import org.apache.lucene.search.Filter;
+import org.apache.lucene.search.FilteredQuery;
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.MatchAllDocsQuery;
 import org.apache.lucene.search.NumericRangeFilter;
 import org.apache.lucene.search.NumericRangeQuery;
 import org.apache.lucene.search.QueryWrapperFilter;
+import org.apache.lucene.search.TopDocs;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.FixedBitSet;
 import org.apache.lucene.util.IOUtils;
@@ -72,6 +75,38 @@ import org.apache.lucene.util.TestUtil;
 
 public class TestRangeFacetCounts extends FacetTestCase {
 
+  // Fixes bug in FilteredQuery#explain(). See LUCENE-5488
+  public void testLongRangeFilter() throws Exception {
+    Directory d = newDirectory();
+    RandomIndexWriter w = new RandomIndexWriter(random(), d);
+    Document doc = new Document();
+    NumericDocValuesField field = new NumericDocValuesField("field", 0L);
+    doc.add(field);
+    for(long l=0;l<100;l++) {
+      field.setLongValue(l);
+      w.addDocument(doc);
+    }
+    IndexReader r = w.getReader();
+    w.close();
+    
+    LongRange range = new LongRange("range", 10, true, 20, false);
+    Filter rangeFilter = range.getFilter(new LongFieldSource("field")); 
+    
+    IndexSearcher s = newSearcher(r);
+    
+    FilteredQuery query = new FilteredQuery(new MatchAllDocsQuery(), rangeFilter, FilteredQuery.QUERY_FIRST_FILTER_STRATEGY);
+    
+    TopDocs td = s.search(query, 5);
+    
+    assertEquals(10, td.totalHits);
+    
+    Explanation expl = s.explain(query, 11);
+    assertNotNull(expl);
+    
+    r.close();
+    d.close();
+  }
+  
   public void testBasicLong() throws Exception {
     Directory d = newDirectory();
     RandomIndexWriter w = new RandomIndexWriter(random(), d);
