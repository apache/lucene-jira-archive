Index: lucene/CHANGES.txt
===================================================================
--- lucene/CHANGES.txt	(revision 1597314)
+++ lucene/CHANGES.txt	(working copy)
@@ -102,6 +102,9 @@
 * LUCENE-5694: Don't score() subscorers in DisjunctionSumScorer or 
   DisjunctionMaxScorer unless score() is called.  (Robert Muir)
 
+* LUCENE-5705: Increase the default maxMergeCount from 2 to 8 in
+  ConcurrentMergeScheduler. (Shawn Heisey)
+
 Bug fixes
 
 * LUCENE-5673: MMapDirectory: Work around a "bug" in the JDK that throws
Index: lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java	(revision 1597314)
+++ lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java	(working copy)
@@ -58,7 +58,7 @@
   public static final int DEFAULT_MAX_THREAD_COUNT = 1;
   
   /** Default {@code maxMergeCount}. */
-  public static final int DEFAULT_MAX_MERGE_COUNT = 2;
+  public static final int DEFAULT_MAX_MERGE_COUNT = 8;
 
   // Max number of merge threads allowed to be running at
   // once.  When there are more merges then this, we
@@ -96,8 +96,15 @@
    *       add/updateDocument) will block until a merge thread
    *       has completed.  Note that we will only run the
    *       smallest <code>maxThreadCount</code> merges at a time.
+   *       If the number of threads that are started is a primary
+   *       concern, this value can be set lower than the default
+   *       of 8.
    * @param maxThreadCount the max # simultaneous merge threads that should
-   *       be running at once.  This must be &lt;= <code>maxMergeCount</code>
+   *       be running at once.  This must be &lt;= <code>maxMergeCount</code>.
+   *       Most setups should use the default value of 1 here.
+   *       If the index is on Solid State Disk and there are
+   *       plenty of CPU cores available, it is usually safe to
+   *       run more threads simultaneously.
    */
   public void setMaxMergesAndThreads(int maxMergeCount, int maxThreadCount) {
     if (maxThreadCount < 1) {
