diff --git a/buildSrc/src/main/java/org/apache/lucene/gradle/MissingDoclet.java b/buildSrc/src/main/java/org/apache/lucene/gradle/MissingDoclet.java
new file mode 100644
index 00000000000..fce6142a938
--- /dev/null
+++ b/buildSrc/src/main/java/org/apache/lucene/gradle/MissingDoclet.java
@@ -0,0 +1,97 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.lucene.gradle;
+
+import java.util.Locale;
+
+import javax.lang.model.element.Element;
+import javax.lang.model.element.ElementKind;
+import javax.tools.Diagnostic;
+
+import com.sun.source.util.DocTrees;
+
+import jdk.javadoc.doclet.DocletEnvironment;
+import jdk.javadoc.doclet.Reporter;
+import jdk.javadoc.doclet.StandardDoclet;
+
+public class MissingDoclet extends StandardDoclet {
+  Reporter reporter;
+  DocTrees docTrees;
+
+  @Override
+  public void init(Locale locale, Reporter reporter) {
+    this.reporter = reporter;
+    super.init(locale, reporter);
+  }
+
+  @Override
+  public boolean run(DocletEnvironment docEnv) {
+    this.docTrees = docEnv.getDocTrees();
+    for (var element : docEnv.getIncludedElements()) {
+      switch(element.getKind()) {
+        case CLASS:
+        case INTERFACE:
+        case ENUM:
+        case ANNOTATION_TYPE:
+          checkComment(element);
+          break;
+        case PACKAGE:
+          checkComment(element);
+          break;
+        default:
+          error(element, "I don't know how to analyze " + element.getKind() + " yet.");
+      }
+    }
+
+    return super.run(docEnv);
+  }
+  
+  private void checkComment(Element element) {
+    var tree = docTrees.getDocCommentTree(element);
+    if (tree == null) {
+      error(element, "javadocs are missing");
+    } else {
+      var normalized = tree.getFirstSentence().get(0).toString()
+                       .replace('\u00A0', ' ')
+                       .trim()
+                       .toLowerCase(Locale.ROOT);
+      if (normalized.isEmpty()) {
+        error(element, "blank javadoc comment");
+      } else if (normalized.startsWith("licensed to the apache software foundation") ||
+                 normalized.startsWith("copyright 2004 the apache software foundation")) {
+        error(element, "comment is really a license");
+      }
+    }
+  }
+  
+  /** logs a new error for the particular element */
+  private void error(Element element, String message) {
+    var fullMessage = new StringBuilder();
+    if (element.getKind() == ElementKind.PACKAGE) {
+      // for packages, we don't have filename + line number, fully qualify
+      fullMessage.append(element.toString());
+    } else {
+      // for anything else, use a simple name
+      fullMessage.append(element.getSimpleName());
+    }
+    fullMessage.append(" (");
+    fullMessage.append(element.getKind().toString().toLowerCase(Locale.ROOT));
+    fullMessage.append("): ");
+    fullMessage.append(message);
+    reporter.print(Diagnostic.Kind.ERROR, element, fullMessage.toString());
+  }
+}
diff --git a/gradle/defaults-javadoc.gradle b/gradle/defaults-javadoc.gradle
index 383edbfb440..466d84bf7cc 100644
--- a/gradle/defaults-javadoc.gradle
+++ b/gradle/defaults-javadoc.gradle
@@ -15,6 +15,8 @@
  * limitations under the License.
  */
 
+import org.apache.lucene.gradle.MissingDoclet;
+
 // Configure javadoc defaults.
 
 allprojects {
@@ -46,6 +48,9 @@ allprojects {
       opts.addStringOption("-release", "11")
       opts.addBooleanOption('Xdoclint:all,-missing,-accessibility', true)
 
+      opts.doclet = MissingDoclet.class.getName()
+      opts.docletpath = [ rootProject.file("buildSrc/build/classes/java/main") ]
+
       def libName = project.path.startsWith(":lucene") ? "Lucene" : "Solr"
       opts.overview = file("src/java/overview.html").toString()
       opts.docTitle = "${libName} ${project.version} ${project.name} API"
