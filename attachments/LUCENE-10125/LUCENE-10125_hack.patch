diff --git a/lucene/core/src/java/org/apache/lucene/store/OutputStreamDataOutput.java b/lucene/core/src/java/org/apache/lucene/store/OutputStreamDataOutput.java
index 8b737e0f410..fb3aa4da184 100644
--- a/lucene/core/src/java/org/apache/lucene/store/OutputStreamDataOutput.java
+++ b/lucene/core/src/java/org/apache/lucene/store/OutputStreamDataOutput.java
@@ -23,6 +23,8 @@ public class OutputStreamDataOutput extends DataOutput implements Closeable {
   private final OutputStream os;
 
   public OutputStreamDataOutput(OutputStream os) {
+    // TODO: we could wrap the stream with private class to optimize writes
+    // similar to OutputStreamIndexOutput? what uses this?
     this.os = os;
   }
 
diff --git a/lucene/core/src/java/org/apache/lucene/store/OutputStreamIndexOutput.java b/lucene/core/src/java/org/apache/lucene/store/OutputStreamIndexOutput.java
index 6ddd4176562..5ae62059090 100644
--- a/lucene/core/src/java/org/apache/lucene/store/OutputStreamIndexOutput.java
+++ b/lucene/core/src/java/org/apache/lucene/store/OutputStreamIndexOutput.java
@@ -21,12 +21,13 @@ import java.io.IOException;
 import java.io.OutputStream;
 import java.util.zip.CRC32;
 import java.util.zip.CheckedOutputStream;
+import org.apache.lucene.util.BitUtil;
 
 /** Implementation class for buffered {@link IndexOutput} that writes to an {@link OutputStream}. */
 public class OutputStreamIndexOutput extends IndexOutput {
 
   private final CRC32 crc = new CRC32();
-  private final BufferedOutputStream os;
+  private final MyBufferedOutputStream os;
 
   private long bytesWritten = 0L;
   private boolean flushedOnClose = false;
@@ -40,7 +41,7 @@ public class OutputStreamIndexOutput extends IndexOutput {
   public OutputStreamIndexOutput(
       String resourceDescription, String name, OutputStream out, int bufferSize) {
     super(resourceDescription, name);
-    this.os = new BufferedOutputStream(new CheckedOutputStream(out, crc), bufferSize);
+    this.os = new MyBufferedOutputStream(new CheckedOutputStream(out, crc), bufferSize);
   }
 
   @Override
@@ -55,6 +56,21 @@ public class OutputStreamIndexOutput extends IndexOutput {
     bytesWritten += length;
   }
 
+  @Override
+  public void writeLong(long v) throws IOException {
+    byte[] buffer = os.getBuffer();
+
+    // if there isn't enough room to shove a long, fall back to superclass
+    // TODO: let's just require bufferSize >= 8? Then we could just force a flush instead.
+    if (os.getCount() + Long.BYTES >= buffer.length) {
+      super.writeLong(v);
+    } else {
+      BitUtil.VH_LE_LONG.set(buffer, os.getCount(), v);
+      os.setCount(os.getCount() + Long.BYTES);
+      bytesWritten += Long.BYTES;
+    }
+  }
+
   @Override
   public void close() throws IOException {
     try (final OutputStream o = os) {
@@ -81,4 +97,23 @@ public class OutputStreamIndexOutput extends IndexOutput {
     os.flush();
     return crc.getValue();
   }
+
+  private static class MyBufferedOutputStream extends BufferedOutputStream {
+
+    MyBufferedOutputStream(OutputStream out, int size) {
+      super(out, size);
+    }
+
+    byte[] getBuffer() {
+      return buf;
+    }
+
+    int getCount() {
+      return count;
+    }
+
+    void setCount(int i) {
+      count = i;
+    }
+  }
 }
