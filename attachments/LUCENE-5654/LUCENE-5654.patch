Index: lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/BinaryDictionary.java
===================================================================
--- lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/BinaryDictionary.java	(revision 1593139)
+++ lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/BinaryDictionary.java	(working copy)
@@ -54,12 +54,12 @@
   
   protected BinaryDictionary() throws IOException {
     InputStream mapIS = null, dictIS = null, posIS = null;
-    IOException priorE = null;
     int[] targetMapOffsets = null, targetMap = null;
     String[] posDict = null;
     String[] inflFormDict = null;
     String[] inflTypeDict = null;
     ByteBuffer buffer = null;
+    boolean success = false;
     try {
       mapIS = getResource(TARGETMAP_FILENAME_SUFFIX);
       mapIS = new BufferedInputStream(mapIS);
@@ -117,10 +117,13 @@
       }
       dictIS.close(); dictIS = null;
       buffer = tmpBuffer.asReadOnlyBuffer();
-    } catch (IOException ioe) {
-      priorE = ioe;
+      success = true;
     } finally {
-      IOUtils.closeWhileHandlingException(priorE, mapIS, posIS, dictIS);
+      if (success) {
+        IOUtils.close(mapIS, posIS, dictIS);
+      } else {
+        IOUtils.closeWhileHandlingException(mapIS, posIS, dictIS);
+      }
     }
     
     this.targetMap = targetMap;
Index: lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/CharacterDefinition.java
===================================================================
--- lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/CharacterDefinition.java	(revision 1593139)
+++ lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/CharacterDefinition.java	(working copy)
@@ -62,8 +62,8 @@
   public static final byte KANJINUMERIC = (byte) CharacterClass.KANJINUMERIC.ordinal();
   
   private CharacterDefinition() throws IOException {
-    IOException priorE = null;
     InputStream is = null;
+    boolean success = false;
     try {
       is = BinaryDictionary.getClassResource(getClass(), FILENAME_SUFFIX);
       is = new BufferedInputStream(is);
@@ -75,10 +75,13 @@
         invokeMap[i] = (b & 0x01) != 0;
         groupMap[i] = (b & 0x02) != 0;
       }
-    } catch (IOException ioe) {
-      priorE = ioe;
+      success = true;
     } finally {
-      IOUtils.closeWhileHandlingException(priorE, is);
+      if (success) {
+        IOUtils.close(is);
+      } else {
+        IOUtils.closeWhileHandlingException(is);
+      }
     }
   }
   
Index: lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/ConnectionCosts.java
===================================================================
--- lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/ConnectionCosts.java	(revision 1593139)
+++ lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/ConnectionCosts.java	(working copy)
@@ -39,9 +39,9 @@
   private final short[][] costs; // array is backward IDs first since get is called using the same backward ID consecutively. maybe doesn't matter.
   
   private ConnectionCosts() throws IOException {
-    IOException priorE = null;
     InputStream is = null;
     short[][] costs = null;
+    boolean success = false;
     try {
       is = BinaryDictionary.getClassResource(getClass(), FILENAME_SUFFIX);
       is = new BufferedInputStream(is);
@@ -58,10 +58,13 @@
           a[i] = (short)accum;
         }
       }
-    } catch (IOException ioe) {
-      priorE = ioe;
+      success = true;
     } finally {
-      IOUtils.closeWhileHandlingException(priorE, is);
+      if (success) {
+        IOUtils.close(is);
+      } else {
+        IOUtils.closeWhileHandlingException(is);
+      }
     }
     
     this.costs = costs;
Index: lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/TokenInfoDictionary.java
===================================================================
--- lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/TokenInfoDictionary.java	(revision 1593139)
+++ lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/TokenInfoDictionary.java	(working copy)
@@ -38,17 +38,20 @@
   
   private TokenInfoDictionary() throws IOException {
     super();
-    IOException priorE = null;
     InputStream is = null;
     FST<Long> fst = null;
+    boolean success = false;
     try {
       is = getResource(FST_FILENAME_SUFFIX);
       is = new BufferedInputStream(is);
       fst = new FST<>(new InputStreamDataInput(is), PositiveIntOutputs.getSingleton());
-    } catch (IOException ioe) {
-      priorE = ioe;
+      success = true;
     } finally {
-      IOUtils.closeWhileHandlingException(priorE, is);
+      if (success) {
+        IOUtils.close(is);
+      } else {
+        IOUtils.closeWhileHandlingException(is);
+      }
     }
     // TODO: some way to configure?
     this.fst = new TokenInfoFST(fst, true);
Index: lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsWriter.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsWriter.java	(revision 1593139)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsWriter.java	(working copy)
@@ -219,7 +219,7 @@
   @Override
   public void close() throws IOException {
     if (blockOut != null) {
-      IOException ioe = null;
+      boolean success = false;
       try {
         final long blockDirStart = blockOut.getFilePointer();
         
@@ -247,10 +247,13 @@
         writeTrailer(blockOut, blockDirStart);
         CodecUtil.writeFooter(indexOut);
         CodecUtil.writeFooter(blockOut);
-      } catch (IOException ioe2) {
-        ioe = ioe2;
+        success = true;
       } finally {
-        IOUtils.closeWhileHandlingException(ioe, blockOut, indexOut, postingsWriter);
+        if (success) {
+          IOUtils.close(blockOut, indexOut, postingsWriter);
+        } else {
+          IOUtils.closeWhileHandlingException(blockOut, indexOut, postingsWriter);
+        }
         blockOut = null;
       }
     }
Index: lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsWriter.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsWriter.java	(revision 1593139)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsWriter.java	(working copy)
@@ -198,7 +198,7 @@
   @Override
   public void close() throws IOException {
     if (out != null) {
-      IOException ioe = null;
+      boolean success = false;
       try {
         // write field summary
         final long dirStart = out.getFilePointer();
@@ -217,10 +217,13 @@
         }
         writeTrailer(out, dirStart);
         CodecUtil.writeFooter(out);
-      } catch (IOException ioe2) {
-        ioe = ioe2;
+        success = true;
       } finally {
-        IOUtils.closeWhileHandlingException(ioe, out, postingsWriter);
+        if (success) {
+          IOUtils.close(out, postingsWriter);
+        } else {
+          IOUtils.closeWhileHandlingException(out, postingsWriter);
+        }
         out = null;
       }
     }
Index: lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.java	(revision 1593139)
+++ lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.java	(working copy)
@@ -1119,7 +1119,7 @@
   @Override
   public void close() throws IOException {
 
-    IOException ioe = null;
+    boolean success = false;
     try {
       
       final long dirStart = out.getFilePointer();
@@ -1148,10 +1148,13 @@
       CodecUtil.writeFooter(out);
       writeIndexTrailer(indexOut, indexDirStart);
       CodecUtil.writeFooter(indexOut);
-    } catch (IOException ioe2) {
-      ioe = ioe2;
+      success = true;
     } finally {
-      IOUtils.closeWhileHandlingException(ioe, out, indexOut, postingsWriter);
+      if (success) {
+        IOUtils.close(out, indexOut, postingsWriter);
+      } else {
+        IOUtils.closeWhileHandlingException(out, indexOut, postingsWriter);
+      }
     }
   }
 
Index: lucene/core/src/java/org/apache/lucene/index/IndexWriter.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/IndexWriter.java	(revision 1593139)
+++ lucene/core/src/java/org/apache/lucene/index/IndexWriter.java	(working copy)
@@ -4498,30 +4498,26 @@
     // Now merge all added files
     Collection<String> files = info.files();
     CompoundFileDirectory cfsDir = new CompoundFileDirectory(directory, fileName, context, true);
-    IOException prior = null;
+    boolean success = false;
     try {
       for (String file : files) {
         directory.copy(cfsDir, file, file, context);
         checkAbort.work(directory.fileLength(file));
       }
-    } catch(IOException ex) {
-      prior = ex;
+      success = true;
     } finally {
-      boolean success = false;
-      try {
-        IOUtils.closeWhileHandlingException(prior, cfsDir);
-        success = true;
-      } finally {
-        if (!success) {
-          try {
-            directory.deleteFile(fileName);
-          } catch (Throwable t) {
-          }
-          try {
-            directory.deleteFile(IndexFileNames.segmentFileName(info.name, "", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));
-          } catch (Throwable t) {
-          }
+      if (success) {
+        IOUtils.close(cfsDir);
+      } else {
+        IOUtils.closeWhileHandlingException(cfsDir);
+        try {
+          directory.deleteFile(fileName);
+        } catch (Throwable t) {
         }
+        try {
+          directory.deleteFile(IndexFileNames.segmentFileName(info.name, "", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));
+        } catch (Throwable t) {
+        }
       }
     }
 
Index: lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader.java	(revision 1593139)
+++ lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader.java	(working copy)
@@ -59,11 +59,9 @@
           try {
             readers[i] = new SegmentReader(sis.info(i), IOContext.READ);
             success = true;
-          } catch(IOException ex) {
-            prior = ex;
           } finally {
             if (!success) {
-              IOUtils.closeWhileHandlingException(prior, readers);
+              IOUtils.closeWhileHandlingException(readers);
             }
           }
         }
Index: lucene/core/src/java/org/apache/lucene/store/CompoundFileDirectory.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/store/CompoundFileDirectory.java	(revision 1593139)
+++ lucene/core/src/java/org/apache/lucene/store/CompoundFileDirectory.java	(working copy)
@@ -123,8 +123,9 @@
 
   /** Helper method that reads CFS entries from an input stream */
   private final Map<String, FileEntry> readEntries(Directory dir, String name) throws IOException {
-    IOException priorE = null;
     ChecksumIndexInput entriesStream = null;
+    Map<String,FileEntry> mapping = null;
+    boolean success = false;
     try {
       final String entriesFileName = IndexFileNames.segmentFileName(
                                             IndexFileNames.stripExtension(name), "",
@@ -132,7 +133,7 @@
       entriesStream = dir.openChecksumInput(entriesFileName, IOContext.READONCE);
       version = CodecUtil.checkHeader(entriesStream, CompoundFileWriter.ENTRY_CODEC, CompoundFileWriter.VERSION_START, CompoundFileWriter.VERSION_CURRENT);
       final int numEntries = entriesStream.readVInt();
-      final Map<String, FileEntry> mapping = new HashMap<>(numEntries);
+      mapping = new HashMap<>(numEntries);
       for (int i = 0; i < numEntries; i++) {
         final FileEntry fileEntry = new FileEntry();
         final String id = entriesStream.readString();
@@ -148,14 +149,15 @@
       } else {
         CodecUtil.checkEOF(entriesStream);
       }
-      return mapping;
-    } catch (IOException ioe) {
-      priorE = ioe;
+      success = true;
     } finally {
-      IOUtils.closeWhileHandlingException(priorE, entriesStream);
+      if (success) {
+        IOUtils.close(entriesStream);
+      } else {
+        IOUtils.closeWhileHandlingException(entriesStream);
+      }
     }
-    // this is needed until Java 7's real try-with-resources:
-    throw new AssertionError("impossible to get here");
+    return mapping;
   }
   
   public Directory getDirectory() {
Index: lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter.java	(revision 1593139)
+++ lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter.java	(working copy)
@@ -129,10 +129,10 @@
     if (closed) {
       return;
     }
-    IOException priorException = null;
     IndexOutput entryTableOut = null;
     // TODO this code should clean up after itself
     // (remove partial .cfs/.cfe)
+    boolean success = false;
     try {
       if (!pendingEntries.isEmpty() || outputTaken.get()) {
         throw new IllegalStateException("CFS has pending open files");
@@ -142,18 +142,25 @@
       getOutput();
       assert dataOut != null;
       CodecUtil.writeFooter(dataOut);
-    } catch (IOException e) {
-      priorException = e;
+      success = true;
     } finally {
-      IOUtils.closeWhileHandlingException(priorException, dataOut);
+      if (success) {
+        IOUtils.close(dataOut);
+      } else {
+        IOUtils.closeWhileHandlingException(dataOut);
+      }
     }
+    success = false;
     try {
       entryTableOut = directory.createOutput(entryTableName, IOContext.DEFAULT);
       writeEntryTable(entries.values(), entryTableOut);
-    } catch (IOException e) {
-      priorException = e;
+      success = true;
     } finally {
-      IOUtils.closeWhileHandlingException(priorException, entryTableOut);
+      if (success) {
+        IOUtils.close(entryTableOut);
+      } else {
+        IOUtils.closeWhileHandlingException(entryTableOut);
+      }
     }
   }
 
Index: lucene/core/src/java/org/apache/lucene/store/Directory.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/store/Directory.java	(revision 1593139)
+++ lucene/core/src/java/org/apache/lucene/store/Directory.java	(working copy)
@@ -181,24 +181,20 @@
   public void copy(Directory to, String src, String dest, IOContext context) throws IOException {
     IndexOutput os = null;
     IndexInput is = null;
-    IOException priorException = null;
+    boolean success = false;
     try {
       os = to.createOutput(dest, context);
       is = openInput(src, context);
       os.copyBytes(is, is.length());
-    } catch (IOException ioe) {
-      priorException = ioe;
+      success = true;
     } finally {
-      boolean success = false;
-      try {
-        IOUtils.closeWhileHandlingException(priorException, os, is);
-        success = true;
-      } finally {
-        if (!success) {
-          try {
-            to.deleteFile(dest);
-          } catch (Throwable t) {
-          }
+      if (success) {
+        IOUtils.close(os, is);
+      } else {
+        IOUtils.closeWhileHandlingException(os, is);
+        try {
+          to.deleteFile(dest);
+        } catch (Throwable t) {
         }
       }
     }
Index: lucene/core/src/java/org/apache/lucene/store/FSDirectory.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/store/FSDirectory.java	(revision 1593139)
+++ lucene/core/src/java/org/apache/lucene/store/FSDirectory.java	(working copy)
@@ -378,14 +378,17 @@
       parent.onIndexOutputClosed(name);
       // only close the file if it has not been closed yet
       if (isOpen) {
-        IOException priorE = null;
+        boolean success = false;
         try {
           super.close();
-        } catch (IOException ioe) {
-          priorE = ioe;
+          success = true;
         } finally {
           isOpen = false;
-          IOUtils.closeWhileHandlingException(priorE, file);
+          if (success) {
+            IOUtils.close(file);
+          } else {
+            IOUtils.closeWhileHandlingException(file);
+          }
         }
       }
     }
Index: lucene/core/src/java/org/apache/lucene/util/IOUtils.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/IOUtils.java	(revision 1593139)
+++ lucene/core/src/java/org/apache/lucene/util/IOUtils.java	(working copy)
@@ -59,76 +59,6 @@
   private IOUtils() {} // no instance
 
   /**
-   * <p>Closes all given <tt>Closeable</tt>s, suppressing all thrown exceptions. Some of the <tt>Closeable</tt>s
-   * may be null, they are ignored. After everything is closed, method either throws <tt>priorException</tt>,
-   * if one is supplied, or the first of suppressed exceptions, or completes normally.</p>
-   * <p>Sample usage:<br/>
-   * <pre class="prettyprint">
-   * Closeable resource1 = null, resource2 = null, resource3 = null;
-   * ExpectedException priorE = null;
-   * try {
-   *   resource1 = ...; resource2 = ...; resource3 = ...; // Acquisition may throw ExpectedException
-   *   ..do..stuff.. // May throw ExpectedException
-   * } catch (ExpectedException e) {
-   *   priorE = e;
-   * } finally {
-   *   closeWhileHandlingException(priorE, resource1, resource2, resource3);
-   * }
-   * </pre>
-   * </p>
-   * @param priorException  <tt>null</tt> or an exception that will be rethrown after method completion
-   * @param objects         objects to call <tt>close()</tt> on
-   */
-  public static <E extends Exception> void closeWhileHandlingException(E priorException, Closeable... objects) throws E, IOException {
-    Throwable th = null;
-
-    for (Closeable object : objects) {
-      try {
-        if (object != null) {
-          object.close();
-        }
-      } catch (Throwable t) {
-        addSuppressed((priorException == null) ? th : priorException, t);
-        if (th == null) {
-          th = t;
-        }
-      }
-    }
-
-    if (priorException != null) {
-      throw priorException;
-    } else {
-      reThrow(th);
-    }
-  }
-
-  /**
-   * Closes all given <tt>Closeable</tt>s, suppressing all thrown exceptions. 
-   * @see #closeWhileHandlingException(Exception, Closeable...) */
-  public static <E extends Exception> void closeWhileHandlingException(E priorException, Iterable<? extends Closeable> objects) throws E, IOException {
-    Throwable th = null;
-
-    for (Closeable object : objects) {
-      try {
-        if (object != null) {
-          object.close();
-        }
-      } catch (Throwable t) {
-        addSuppressed((priorException == null) ? th : priorException, t);
-        if (th == null) {
-          th = t;
-        }
-      }
-    }
-
-    if (priorException != null) {
-      throw priorException;
-    } else {
-      reThrow(th);
-    }
-  }
-
-  /**
    * Closes all given <tt>Closeable</tt>s.  Some of the
    * <tt>Closeable</tt>s may be null; they are
    * ignored.  After everything is closed, the method either
Index: lucene/core/src/java/org/apache/lucene/util/SPIClassIterator.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/SPIClassIterator.java	(revision 1593139)
+++ lucene/core/src/java/org/apache/lucene/util/SPIClassIterator.java	(working copy)
@@ -90,7 +90,7 @@
       final URL url = profilesEnum.nextElement();
       try {
         final InputStream in = url.openStream();
-        IOException priorE = null;
+        boolean success = false;
         try {
           final BufferedReader reader = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8));
           String line;
@@ -104,10 +104,13 @@
               lines.add(line);
             }
           }
-        } catch (IOException ioe) {
-          priorE = ioe;
+          success = true;
         } finally {
-          IOUtils.closeWhileHandlingException(priorE, in);
+          if (success) {
+            IOUtils.close(in);
+          } else {
+            IOUtils.closeWhileHandlingException(in);
+          }
         }
       } catch (IOException ioe) {
         throw new ServiceConfigurationError("Error loading SPI class list from URL: " + url, ioe);
Index: lucene/core/src/test/org/apache/lucene/util/TestIOUtils.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/util/TestIOUtils.java	(revision 1593139)
+++ lucene/core/src/test/org/apache/lucene/util/TestIOUtils.java	(working copy)
@@ -1,91 +0,0 @@
-package org.apache.lucene.util;
-
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import java.io.Closeable;
-import java.io.IOException;
-import java.io.PrintWriter;
-import java.io.StringWriter;
-
-public class TestIOUtils extends LuceneTestCase {
-
-  static final class BrokenCloseable implements Closeable {
-    final int i;
-    
-    public BrokenCloseable(int i) {
-      this.i = i;
-    }
-  
-    @Override
-    public void close() throws IOException {
-      throw new IOException("TEST-IO-EXCEPTION-" + i);
-    }
-  }
-
-  static final class TestException extends Exception {
-    public TestException() {
-      super("BASE-EXCEPTION");
-    }
-  }
-
-  public void testSuppressedExceptions() {
-    // test with prior exception
-    try {
-      final TestException t = new TestException();
-      IOUtils.closeWhileHandlingException(t, new BrokenCloseable(1), new BrokenCloseable(2));
-    } catch (TestException e1) {
-      assertEquals("BASE-EXCEPTION", e1.getMessage());
-      final StringWriter sw = new StringWriter();
-      final PrintWriter pw = new PrintWriter(sw);
-      e1.printStackTrace(pw);
-      pw.flush();
-      final String trace = sw.toString();
-      if (VERBOSE) {
-        System.out.println("TestIOUtils.testSuppressedExceptions: Thrown Exception stack trace:");
-        System.out.println(trace);
-      }
-      assertTrue("Stack trace does not contain first suppressed Exception: " + trace,
-        trace.contains("java.io.IOException: TEST-IO-EXCEPTION-1"));
-      assertTrue("Stack trace does not contain second suppressed Exception: " + trace,
-        trace.contains("java.io.IOException: TEST-IO-EXCEPTION-2"));
-    } catch (IOException e2) {
-      fail("IOException should not be thrown here");
-    }
-    
-    // test without prior exception
-    try {
-      IOUtils.closeWhileHandlingException((TestException) null, new BrokenCloseable(1), new BrokenCloseable(2));
-    } catch (TestException e1) {
-      fail("TestException should not be thrown here");
-    } catch (IOException e2) {
-      assertEquals("TEST-IO-EXCEPTION-1", e2.getMessage());
-      final StringWriter sw = new StringWriter();
-      final PrintWriter pw = new PrintWriter(sw);
-      e2.printStackTrace(pw);
-      pw.flush();
-      final String trace = sw.toString();
-      if (VERBOSE) {
-        System.out.println("TestIOUtils.testSuppressedExceptions: Thrown Exception stack trace:");
-        System.out.println(trace);
-      }
-      assertTrue("Stack trace does not contain suppressed Exception: " + trace,
-        trace.contains("java.io.IOException: TEST-IO-EXCEPTION-2"));
-    }
-  }
-  
-}
Index: solr/core/src/java/org/apache/solr/store/hdfs/HdfsDirectory.java
===================================================================
--- solr/core/src/java/org/apache/solr/store/hdfs/HdfsDirectory.java	(revision 1593139)
+++ solr/core/src/java/org/apache/solr/store/hdfs/HdfsDirectory.java	(working copy)
@@ -243,13 +243,16 @@
     
     @Override
     public void close() throws IOException {
-      IOException priorE = null;
+      boolean success = false;
       try {
         super.close();
-      } catch (IOException ioe) {
-        priorE = ioe;
+        success = true;
       } finally {
-        IOUtils.closeWhileHandlingException(priorE, writer);
+        if (success) {
+          IOUtils.close(writer);
+        } else {
+          IOUtils.closeWhileHandlingException(writer);
+        }
       }
     }
 
