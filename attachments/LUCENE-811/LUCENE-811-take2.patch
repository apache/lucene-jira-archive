Index: src/java/org/apache/lucene/index/IndexReader.java
===================================================================
--- src/java/org/apache/lucene/index/IndexReader.java   (revision 510617)
+++ src/java/org/apache/lucene/index/IndexReader.java   (working copy)
@@ -157,7 +157,7 @@

     return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {

-      public Object doBody(String segmentFileName) throws CorruptIndexException, IOException {
+      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {

         SegmentInfos infos = new SegmentInfos();
         infos.read(directory, segmentFileName);
Index: src/java/org/apache/lucene/index/IndexFileNames.java
===================================================================
--- src/java/org/apache/lucene/index/IndexFileNames.java        (revision 510617)
+++ src/java/org/apache/lucene/index/IndexFileNames.java        (working copy)
@@ -71,7 +71,7 @@
    * @param extension -- extension of the filename (including .)
    * @param gen -- generation
    */
-  public static final String fileNameFromGeneration(String base, String extension, long gen) {
+  static final String fileNameFromGeneration(String base, String extension, long gen) {
     if (gen == -1) {
       return null;
     } else if (gen == 0) {
Index: src/java/org/apache/lucene/index/SegmentInfos.java
===================================================================
--- src/java/org/apache/lucene/index/SegmentInfos.java  (revision 510617)
+++ src/java/org/apache/lucene/index/SegmentInfos.java  (working copy)
@@ -27,7 +27,7 @@
 import java.io.PrintStream;
 import java.util.Vector;

-public final class SegmentInfos extends Vector {
+final class SegmentInfos extends Vector {

   /** The file format version, a negative number. */
   /* Works since counter, the old 1st entry, is always >= 0 */
@@ -235,7 +235,7 @@

     new FindSegmentsFile(directory) {

-      public Object doBody(String segmentFileName) throws CorruptIndexException, IOException {
+      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {
         read(directory, segmentFileName);
         return null;
       }
@@ -315,7 +315,7 @@
     throws CorruptIndexException, IOException {

     return ((Long) new FindSegmentsFile(directory) {
-        public Object doBody(String segmentFileName) throws CorruptIndexException, IOException {
+        protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {

           IndexInput input = directory.openInput(segmentFileName);

@@ -630,5 +630,6 @@
      * during the processing that could have been caused by
      * a writer committing.
      */
-    protected abstract Object doBody(String segmentFileName) throws CorruptIndexException, IOException;}
+    protected abstract Object doBody(String segmentFileName) throws CorruptIndexException, IOException;
+  }
 }
Index: src/java/org/apache/lucene/index/SegmentInfo.java
===================================================================
--- src/java/org/apache/lucene/index/SegmentInfo.java   (revision 510617)
+++ src/java/org/apache/lucene/index/SegmentInfo.java   (working copy)
@@ -94,7 +94,7 @@
    * @param format format of the segments info file
    * @param input input handle to read segment info from
    */
-  public SegmentInfo(Directory dir, int format, IndexInput input) throws IOException {
+  SegmentInfo(Directory dir, int format, IndexInput input) throws IOException {
     this.dir = dir;
     name = input.readString();
     docCount = input.readInt();
Index: src/java/org/apache/lucene/index/IndexFileNameFilter.java
===================================================================
--- src/java/org/apache/lucene/index/IndexFileNameFilter.java   (revision 510617)
+++ src/java/org/apache/lucene/index/IndexFileNameFilter.java   (working copy)
@@ -68,7 +68,7 @@
    * files that pass the above "accept" (ie, are already
    * known to be a Lucene index file).
    */
-  public boolean isCFSFile(String name) {
+  boolean isCFSFile(String name) {
     int i = name.lastIndexOf('.');
     if (i != -1) {
       String extension = name.substring(1+i);
