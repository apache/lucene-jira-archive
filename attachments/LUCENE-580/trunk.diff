Index: src/java/org/apache/lucene/analysis/TokenStreamFactory.java
===================================================================
--- src/java/org/apache/lucene/analysis/TokenStreamFactory.java	(revision 0)
+++ src/java/org/apache/lucene/analysis/TokenStreamFactory.java	(revision 0)
@@ -0,0 +1,31 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.lucene.analysis;
+
+import java.io.IOException;
+
+/**
+ * @author karl wettin <mailto:karl.wettin@gmail.com>
+ *         Date: 2007-apr-25
+ *         Time: 09:02:50
+ */
+public interface TokenStreamFactory {
+
+  public abstract TokenStream factory() throws IOException;
+
+}
Index: src/java/org/apache/lucene/index/DocumentWriter.java
===================================================================
--- src/java/org/apache/lucene/index/DocumentWriter.java	(revision 532225)
+++ src/java/org/apache/lucene/index/DocumentWriter.java	(working copy)
@@ -163,17 +163,22 @@
           length++;
         } else 
         {
-          Reader reader;			  // find or make Reader
-          if (field.readerValue() != null)
-            reader = field.readerValue();
-          else if (field.stringValue() != null)
-            reader = new StringReader(field.stringValue());
-          else
-            throw new IllegalArgumentException
-                    ("field must have either String or Reader value");
+          TokenStream stream;
+          if (field.tokenStreamFactoryValue() != null) {
+            stream = field.tokenStreamFactoryValue().factory();
+          } else {
+            Reader reader;			  // find or make Reader
+            if (field.readerValue() != null)
+              reader = field.readerValue();
+            else if (field.stringValue() != null)
+              reader = new StringReader(field.stringValue());
+            else
+              throw new IllegalArgumentException
+                      ("field must have either String or Reader value");
 
-          // Tokenize field and add to postingTable
-          TokenStream stream = analyzer.tokenStream(fieldName, reader);
+            // Tokenize field and add to postingTable
+            stream = analyzer.tokenStream(fieldName, reader);
+          }
           try {
             Token lastToken = null;
             for (Token t = stream.next(); t != null; t = stream.next()) {
Index: src/java/org/apache/lucene/document/Fieldable.java
===================================================================
--- src/java/org/apache/lucene/document/Fieldable.java	(revision 532225)
+++ src/java/org/apache/lucene/document/Fieldable.java	(working copy)
@@ -16,6 +16,8 @@
  * limitations under the License.
  */
 
+import org.apache.lucene.analysis.TokenStreamFactory;
+
 import java.io.Reader;
 import java.io.Serializable;
 
@@ -60,19 +62,24 @@
    */
   String name();
 
-  /** The value of the field as a String, or null.  If null, the Reader value
-   * or binary value is used.  Exactly one of stringValue(), readerValue(), and
-   * binaryValue() must be set. */
+  /** The value of the field as a TokenStreamFactory, or null.
+   * If null, the String value, Reader value or binary value is used.
+   * Exactly one of stringValue(), tokenStreamValue(), readerValue(), and binaryValue() must be set. */
+  TokenStreamFactory tokenStreamFactoryValue();
+
+  /** The value of the field as a String, or null.
+   * If null, the TokenStreamFactory value, Reader value or binary value is used.
+   * Exactly one of stringValue(), tokenStreamValue(), readerValue(), and binaryValue() must be set. */
   String stringValue();
 
-  /** The value of the field as a Reader, or null.  If null, the String value
-   * or binary value is  used.  Exactly one of stringValue(), readerValue(),
-   * and binaryValue() must be set. */
+  /** The value of the field as a Reader, or null.
+   * If null, the String value, TokenStreamFactory value or binary value is used.
+   * Exactly one of stringValue(), tokenStreamValue(), readerValue(), and binaryValue() must be set. */
   Reader readerValue();
 
-  /** The value of the field in Binary, or null.  If null, the Reader or
-   * String value is used.  Exactly one of stringValue(), readerValue() and
-   * binaryValue() must be set. */
+  /** The value of the field in Binary, or null.
+   * If null, the String value, Reader value or TokenStreamFactory value is used.  
+   * Exactly one of stringValue(), tokenStreamValue(), readerValue(), and binaryValue() must be set. */
   byte[] binaryValue();
 
   /** True iff the value of the field is to be stored in the index for return
Index: src/java/org/apache/lucene/document/CachedPreAnalyzedField.java
===================================================================
--- src/java/org/apache/lucene/document/CachedPreAnalyzedField.java	(revision 0)
+++ src/java/org/apache/lucene/document/CachedPreAnalyzedField.java	(revision 0)
@@ -0,0 +1,71 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.lucene.document;
+
+import org.apache.lucene.analysis.TokenStreamFactory;
+import org.apache.lucene.analysis.TokenStream;
+import org.apache.lucene.analysis.Token;
+
+import java.io.IOException;
+import java.util.List;
+import java.util.ArrayList;
+
+/**
+ * @author karl wettin <mailto:karl.wettin@gmail.com>
+ *         Date: 2007-apr-25
+ *         Time: 09:08:17
+ */
+public class CachedPreAnalyzedField implements TokenStreamFactory {
+
+  private List/*<Token>*/ tokensCache;
+
+  public CachedPreAnalyzedField(TokenStream tokenStream) throws IOException {
+    this(tokenStream, 1000);
+  }
+
+  public CachedPreAnalyzedField(TokenStream tokenStream, int initalBufferSize) throws IOException {
+    if (tokenStream == null) {
+      throw new NullPointerException("tokenStream must not be null!");
+    }    
+    tokensCache = new ArrayList/*<Token>*/(initalBufferSize);
+    Token token;
+    while ((token = tokenStream.next()) != null) {
+      tokensCache.add(token);
+    }
+  }
+
+  public TokenStream factory() throws IOException {
+    return new TokenCacheStream();
+  }
+
+
+  public List/*<Token>*/ getTokensCache() {
+    return tokensCache;
+  }
+
+  public class TokenCacheStream extends TokenStream {
+    private int cursor = -1;
+
+    public Token next() throws IOException {
+      if (++cursor > tokensCache.size()) {
+        return (Token) tokensCache.get(cursor);
+      }
+      return null;
+    }
+  }
+}
Index: src/java/org/apache/lucene/document/Field.java
===================================================================
--- src/java/org/apache/lucene/document/Field.java	(revision 532225)
+++ src/java/org/apache/lucene/document/Field.java	(working copy)
@@ -19,6 +19,7 @@
 
 import org.apache.lucene.index.IndexWriter;   // for javadoc
 import org.apache.lucene.util.Parameter;
+import org.apache.lucene.analysis.TokenStreamFactory;
 
 import java.io.Reader;
 import java.io.Serializable;
@@ -133,7 +134,11 @@
     public static final TermVector WITH_POSITIONS_OFFSETS = new TermVector("WITH_POSITIONS_OFFSETS");
   }
   
-  
+  /** The value of the field as a TokenStreamFactory, or null.
+   * If null, the String value, Reader value or binary value is used.
+   * Exactly one of stringValue(), tokenStreamValue(), readerValue(), and binaryValue() must be set. */
+  public TokenStreamFactory tokenStreamFactoryValue() { return fieldsData instanceof TokenStreamFactory ? (TokenStreamFactory)fieldsData : null; }
+
   /** The value of the field as a String, or null.  If null, the Reader value
    * or binary value is used.  Exactly one of stringValue(), readerValue(), and
    * binaryValue() must be set. */
@@ -236,7 +241,48 @@
     setStoreTermVector(termVector);
   }
 
+    /**
+   * Create a tokenized and indexed field that is not stored. Term vectors will
+   * not be stored.
+   *
+   * @param name The name of the field
+   * @param tokenStreamFactory The token stream factory with the content
+   * @throws NullPointerException if name or tokenStreamFactory is <code>null</code>
+   */
+  public Field(String name, TokenStreamFactory tokenStreamFactory) {
+    this(name, tokenStreamFactory, TermVector.NO);
+  }
+
   /**
+   * Create a tokenized and indexed field that is not stored, optionally with
+   * storing term vectors.
+   *
+   * @param name The name of the field
+   * @param tokenStreamFactory The token stream factory with the content
+   * @param termVector Whether term vector should be stored
+   * @throws NullPointerException if name or tokenStreamFactory is <code>null</code>
+   */
+  public Field(String name, TokenStreamFactory tokenStreamFactory, TermVector termVector) {
+    if (name == null)
+      throw new NullPointerException("name cannot be null");
+    if (tokenStreamFactory == null)
+      throw new NullPointerException("factory cannot be null");
+
+    this.name = name.intern();        // field names are interned
+    this.fieldsData = tokenStreamFactory;
+
+    this.isStored = false;
+    this.isCompressed = false;
+
+    this.isIndexed = true;
+    this.isTokenized = true;
+
+    this.isBinary = false;
+
+    setStoreTermVector(termVector);
+  }
+
+  /**
    * Create a tokenized and indexed field that is not stored. Term vectors will
    * not be stored.  The Reader is read only when the Document is added to the index,
    * i.e. you may not close the Reader until {@link IndexWriter#addDocument(Document)}
Index: src/java/org/apache/lucene/document/SimplePreAnalyzedField.java
===================================================================
--- src/java/org/apache/lucene/document/SimplePreAnalyzedField.java	(revision 0)
+++ src/java/org/apache/lucene/document/SimplePreAnalyzedField.java	(revision 0)
@@ -0,0 +1,50 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.lucene.document;
+
+import org.apache.lucene.analysis.TokenStreamFactory;
+import org.apache.lucene.analysis.TokenStream;
+
+import java.io.IOException;
+
+/**
+ * @author karl wettin <mailto:karl.wettin@gmail.com>
+ *         Date: 2007-apr-25
+ *         Time: 09:04:34
+ */
+public class SimplePreAnalyzedField implements TokenStreamFactory {
+
+  private TokenStream tokenStream;
+
+  public SimplePreAnalyzedField(TokenStream tokenStream) {
+    if (tokenStream == null) {
+      throw new NullPointerException("tokenStream must not be null!");
+    }
+    this.tokenStream = tokenStream;
+  }
+
+  public TokenStream factory() throws IOException {
+    if (tokenStream == null) {
+      throw new IOException("Token stream buffer has been exhaused.");
+    }
+    TokenStream ret = tokenStream;
+    tokenStream = null;
+    return ret;
+
+  }
+}
