diff --git a/lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/KoreanTokenizer.java b/lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/KoreanTokenizer.java
index b5c310a169a..3efccaf575e 100644
--- a/lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/KoreanTokenizer.java
+++ b/lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/KoreanTokenizer.java
@@ -754,6 +754,7 @@ public final class KoreanTokenizer extends Tokenizer {
           unknownWordLength = 1;
           UnicodeScript scriptCode = UnicodeScript.of(firstCharacter);
           final boolean isPunct = isPunctuation(firstCharacter);
+          final boolean isDigit = Character.isDigit(firstCharacter);
           for (int posAhead = pos + 1; unknownWordLength < MAX_UNKNOWN_WORD_LENGTH; posAhead++) {
             int next = buffer.get(posAhead);
             if (next == -1) {
@@ -768,8 +769,11 @@ public final class KoreanTokenizer extends Tokenizer {
                 || chType == Character.NON_SPACING_MARK;
 
             if (sameScript
-                && isPunctuation(ch, chType) == isPunct
-                && characterDefinition.isGroup(ch)) {
+                  // split on punctuation
+                  && isPunctuation(ch, chType) == isPunct
+                  // split on digit
+                  && Character.isDigit(ch) == isDigit
+                  && characterDefinition.isGroup(ch)) {
               unknownWordLength++;
             } else {
               break;
diff --git a/lucene/analysis/nori/src/test/org/apache/lucene/analysis/ko/TestKoreanTokenizer.java b/lucene/analysis/nori/src/test/org/apache/lucene/analysis/ko/TestKoreanTokenizer.java
index 2e9639ce6b9..a9c5bb771c6 100644
--- a/lucene/analysis/nori/src/test/org/apache/lucene/analysis/ko/TestKoreanTokenizer.java
+++ b/lucene/analysis/nori/src/test/org/apache/lucene/analysis/ko/TestKoreanTokenizer.java
@@ -108,6 +108,22 @@ public class TestKoreanTokenizer extends BaseTokenStreamTestCase {
     };
   }
 
+  public void testSeparateNumber() throws IOException {
+    assertAnalyzesTo(analyzer, "44사이즈",
+        new String[]{"44", "사이즈"},
+        new int[]{0, 2},
+        new int[]{2, 5},
+        new int[]{1, 1}
+    );
+
+    assertAnalyzesTo(analyzer, "９.９사이즈",
+        new String[]{"９", "９", "사이즈"},
+        new int[]{0, 2, 3},
+        new int[]{1, 3, 6},
+        new int[]{1, 1, 1}
+    );
+  }
+
   public void testSpaces() throws IOException {
     assertAnalyzesTo(analyzer, "화학        이외의         것",
         new String[]{"화학", "이외", "의", "것"},
