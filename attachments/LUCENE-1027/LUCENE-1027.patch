Index: conf/micro-standard-flush-by-ram.alg
===================================================================
--- conf/micro-standard-flush-by-ram.alg	(revision 0)
+++ conf/micro-standard-flush-by-ram.alg	(revision 0)
@@ -0,0 +1,77 @@
+#/**
+# * Licensed to the Apache Software Foundation (ASF) under one or more
+# * contributor license agreements.  See the NOTICE file distributed with
+# * this work for additional information regarding copyright ownership.
+# * The ASF licenses this file to You under the Apache License, Version 2.0
+# * (the "License"); you may not use this file except in compliance with
+# * the License.  You may obtain a copy of the License at
+# *
+# *     http://www.apache.org/licenses/LICENSE-2.0
+# *
+# * Unless required by applicable law or agreed to in writing, software
+# * distributed under the License is distributed on an "AS IS" BASIS,
+# * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# * See the License for the specific language governing permissions and
+# * limitations under the License.
+# */
+# -------------------------------------------------------------------------------------
+# multi val params are iterated by NewRound's, added to reports, start with column name.
+
+#merge.factor=mrg:10:100:10:100
+#max.buffered=buf:10:10:100:100
+ram.flush.mb=ram:32:40:48:56
+compound=true
+
+analyzer=org.apache.lucene.analysis.standard.StandardAnalyzer
+directory=FSDirectory
+#directory=RamDirectory
+
+doc.stored=true
+doc.tokenized=true
+doc.term.vector=false
+doc.add.log.step=500
+
+docs.dir=reuters-out
+#docs.dir=reuters-111
+
+#doc.maker=org.apache.lucene.benchmark.byTask.feeds.SimpleDocMaker
+doc.maker=org.apache.lucene.benchmark.byTask.feeds.ReutersDocMaker
+
+#query.maker=org.apache.lucene.benchmark.byTask.feeds.SimpleQueryMaker
+query.maker=org.apache.lucene.benchmark.byTask.feeds.ReutersQueryMaker
+
+# task at this depth or less would print when they start
+task.max.depth.log=2
+
+log.queries=true
+# -------------------------------------------------------------------------------------
+
+{ "Rounds"
+
+    ResetSystemErase
+
+    { "Populate"
+        CreateIndex
+        { "MAddDocs" AddDoc > : 2000
+        Optimize
+        CloseIndex
+    }
+
+    OpenReader  
+    { "SearchSameRdr" Search > : 5000
+    CloseReader 
+                
+    { "WarmNewRdr" Warm > : 50
+                
+    { "SrchNewRdr" Search > : 500
+                
+    { "SrchTrvNewRdr" SearchTrav(1000) > : 300
+                
+    { "SrchTrvRetNewRdr" SearchTravRet(2000) > : 100
+                
+    NewRound
+
+} : 4
+
+RepSumByName
+RepSumByPrefRound MAddDocs
Index: src/java/org/apache/lucene/benchmark/byTask/utils/Config.java
===================================================================
--- src/java/org/apache/lucene/benchmark/byTask/utils/Config.java	(revision 583668)
+++ src/java/org/apache/lucene/benchmark/byTask/utils/Config.java	(working copy)
@@ -255,7 +255,13 @@
           int n1 = (roundNumber-1)%ai.length;
           int n2 = roundNumber%ai.length;
           sb.append("  ").append(name).append(":").append(ai[n1]).append("-->").append(ai[n2]);
-        } else {
+        } else if (a instanceof double[]){
+          double ad[] = (double[]) a;
+          int n1 = (roundNumber-1)%ad.length;
+          int n2 = roundNumber%ad.length;
+          sb.append("  ").append(name).append(":").append(ad[n1]).append("-->").append(ad[n2]);
+        }
+        else {
           boolean ab[] = (boolean[]) a;
           int n1 = (roundNumber-1)%ab.length;
           int n2 = roundNumber%ab.length;
@@ -366,7 +372,13 @@
           int ai[] = (int[]) a;
           int n = roundNum % ai.length;
           sb.append(Format.format(ai[n],template));
-        } else {
+        }
+        else if (a instanceof double[]) {
+          double ad[] = (double[]) a;
+          int n = roundNum % ad.length;
+          sb.append(Format.format(2, (float) ad[n],template));
+        }
+        else {
           boolean ab[] = (boolean[]) a;
           int n = roundNum % ab.length;
           sb.append(Format.formatPaddLeft(""+ab[n],template));
