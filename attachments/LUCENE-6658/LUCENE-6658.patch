Index: lucene/backward-codecs/src/test/org/apache/lucene/index/empty.4.10.4.zip
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: lucene/backward-codecs/src/test/org/apache/lucene/index/empty.4.10.4.zip
===================================================================
--- lucene/backward-codecs/src/test/org/apache/lucene/index/empty.4.10.4.zip	(revision 0)
+++ lucene/backward-codecs/src/test/org/apache/lucene/index/empty.4.10.4.zip	(working copy)

Property changes on: lucene/backward-codecs/src/test/org/apache/lucene/index/empty.4.10.4.zip
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility.java
===================================================================
--- lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility.java	(revision 1689336)
+++ lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility.java	(working copy)
@@ -1104,6 +1104,7 @@
     for (SegmentCommitInfo si : infos) {
       assertEquals(Version.LATEST, si.info.getVersion());
     }
+    assertEquals(Version.LATEST, infos.getCommitLuceneVersion());
     return infos.size();
   }
   
@@ -1243,6 +1244,20 @@
     }
   }
 
+  public static final String emptyIndex = "empty.4.10.4.zip";
+
+  public void testUpgradeEmptyOldIndex() throws Exception {
+    Path oldIndexDir = createTempDir("emptyIndex");
+    TestUtil.unzip(getDataInputStream(emptyIndex), oldIndexDir);
+    Directory dir = newFSDirectory(oldIndexDir);
+
+    newIndexUpgrader(dir).upgrade();
+
+    checkAllSegmentsUpgraded(dir);
+    
+    dir.close();
+  }
+
   public static final String moreTermsIndex = "moreterms.4.0.0.zip";
 
   public void testMoreTerms() throws Exception {
Index: lucene/core/src/java/org/apache/lucene/index/IndexUpgrader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/IndexUpgrader.java	(revision 1689336)
+++ lucene/core/src/java/org/apache/lucene/index/IndexUpgrader.java	(working copy)
@@ -29,6 +29,7 @@
 import java.nio.file.Paths;
 import java.nio.file.Path;
 import java.util.Collection;
+import java.util.Collections;
 
 /**
   * This is an easy-to-use tool that upgrades all segments of an index from previous Lucene versions
@@ -52,6 +53,8 @@
   * documents.
   */
 public final class IndexUpgrader {
+  
+  private static final String LOG_PREFIX = "IndexUpgrader";
 
   @SuppressForbidden(reason = "System.out required: command line tool")
   private static void printUsage() {
@@ -162,18 +165,22 @@
     iwc.setMergePolicy(new UpgradeIndexMergePolicy(iwc.getMergePolicy()));
     iwc.setIndexDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());
     
-    final IndexWriter w = new IndexWriter(dir, iwc);
-    try {
+    try (final IndexWriter w = new IndexWriter(dir, iwc)) {
       InfoStream infoStream = iwc.getInfoStream();
-      if (infoStream.isEnabled("IndexUpgrader")) {
-        infoStream.message("IndexUpgrader", "Upgrading all pre-" + Version.LATEST + " segments of index directory '" + dir + "' to version " + Version.LATEST + "...");
+      if (infoStream.isEnabled(LOG_PREFIX)) {
+        infoStream.message(LOG_PREFIX, "Upgrading all pre-" + Version.LATEST + " segments of index directory '" + dir + "' to version " + Version.LATEST + "...");
       }
       w.forceMerge(1);
-      if (infoStream.isEnabled("IndexUpgrader")) {
-        infoStream.message("IndexUpgrader", "All segments upgraded to version " + Version.LATEST);
+      if (infoStream.isEnabled(LOG_PREFIX)) {
+        infoStream.message(LOG_PREFIX, "All segments upgraded to version " + Version.LATEST);
+        infoStream.message(LOG_PREFIX, "Enforcing commit to rewrite all index metadata...");
       }
-    } finally {
-      w.close();
+      w.setCommitData(w.getCommitData()); // fake change to enforce a commit (e.g. if index has no segments)
+      assert w.hasUncommittedChanges();
+      w.commit();
+      if (infoStream.isEnabled(LOG_PREFIX)) {
+        infoStream.message(LOG_PREFIX, "Committed upgraded metadata to index.");
+      }
     }
   }
   
