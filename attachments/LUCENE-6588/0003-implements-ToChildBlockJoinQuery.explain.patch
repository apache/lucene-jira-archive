From 45ed3c5674a9b6c42ad6669dc57a98eee86e000a Mon Sep 17 00:00:00 2001
Date: Fri, 19 Jun 2015 14:03:34 +0200
Subject: [PATCH] implements ToChildBlockJoinQuery.explain()

---
 .../lucene/search/join/ToChildBlockJoinQuery.java  | 20 +++++++++---
 .../apache/lucene/search/join/TestBlockJoin.java   | 37 ++++++++++++++++++++++
 2 files changed, 53 insertions(+), 4 deletions(-)

diff --git a/lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.java b/lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.java
index 3bb3ffb..2407cae 100644
--- a/lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.java
+++ b/lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.java
@@ -20,6 +20,7 @@ package org.apache.lucene.search.join;
 import java.io.IOException;
 import java.util.Collection;
 import java.util.Collections;
+import java.util.Locale;
 import java.util.Set;
 
 import org.apache.lucene.index.IndexReader;
@@ -142,10 +143,17 @@ public class ToChildBlockJoinQuery extends Query {
     }
 
     @Override
-    public Explanation explain(LeafReaderContext reader, int doc) throws IOException {
-      // TODO
-      throw new UnsupportedOperationException(getClass().getName() +
-                                              " cannot explain match on parent document");
+    public Explanation explain(LeafReaderContext context, int doc) throws IOException {
+      ToChildBlockJoinScorer scorer = (ToChildBlockJoinScorer) scorer(context, context.reader().getLiveDocs());
+      if (scorer != null && scorer.advance(doc) == doc) {
+        int parentDoc = scorer.getParentDoc();
+        return Explanation.match(
+          scorer.score(), 
+          String.format(Locale.ROOT, "Score based on parent document %d", parentDoc + context.docBase), 
+          parentWeight.explain(context, parentDoc)
+        );
+      }
+      return Explanation.noMatch("Not a match");
     }
   }
 
@@ -324,6 +332,10 @@ public class ToChildBlockJoinQuery extends Query {
     public long cost() {
       return parentScorer.cost();
     }
+    
+    int getParentDoc() {
+      return parentDoc;
+    }
   }
 
   @Override
diff --git a/lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java b/lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java
index 64a29e5..e0beab0 100644
--- a/lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java
+++ b/lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java
@@ -1590,4 +1590,41 @@ public class TestBlockJoin extends LuceneTestCase {
     r.close();
     dir.close();
   }
+  
+  public void testToChildBlockJoinQueryExplain() throws Exception {
+    final Directory dir = newDirectory();
+    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);
+
+    final List<Document> docs = new ArrayList<>();
+    docs.add(makeJob("java", 2007));
+    docs.add(makeJob("python", 2010));
+    docs.add(makeResume("Lisa", "United Kingdom"));
+    w.addDocuments(docs);
+
+    docs.clear();
+    docs.add(makeJob("java", 2006));
+    docs.add(makeJob("ruby", 2005));
+    docs.add(makeResume("Frank", "United States"));
+    w.addDocuments(docs);
+    w.deleteDocuments(new Term("skill", "java")); // delete the first child of every parent
+
+    IndexReader r = w.getReader();
+    w.close();
+    IndexSearcher s = newSearcher(r);
+
+    // Create a filter that defines "parent" documents in the index - in this case resumes
+    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term("docType", "resume"))));
+    Query parentQuery = new PrefixQuery(new Term("country", "United"));
+    
+    ToChildBlockJoinQuery toChildQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);
+    
+    TopDocs hits = s.search(toChildQuery, 10);
+    assertEquals(hits.scoreDocs.length, 2);
+    for (int i = 0; i < hits.scoreDocs.length; i++) {
+      assertEquals(hits.scoreDocs[i].score, s.explain(toChildQuery, hits.scoreDocs[i].doc).getValue(), 0.01);
+    }
+    
+    r.close();
+    dir.close();
+  }
 }
-- 
1.9.5.github.0

