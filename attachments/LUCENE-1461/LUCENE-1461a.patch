Index: src/java/org/apache/lucene/search/RangeMultiFilter.java
===================================================================
--- src/java/org/apache/lucene/search/RangeMultiFilter.java	(revision 0)
+++ src/java/org/apache/lucene/search/RangeMultiFilter.java	(revision 0)
@@ -0,0 +1,116 @@
+package org.apache.lucene.search;
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.IOException;
+import java.util.Arrays;
+
+import org.apache.lucene.index.IndexReader;
+
+public class RangeMultiFilter extends Filter {
+  private String field;
+  private String lowerVal;
+  private String upperVal;
+  private boolean includeLower;
+  private boolean includeUpper;
+  
+  public RangeMultiFilter(
+        String field, 
+        String lowerVal,
+        String upperVal,
+        boolean includeLower,
+        boolean includeUpper) {
+    this.field = field;
+    this.lowerVal = lowerVal;
+    this.upperVal = upperVal;
+    this.includeLower = includeLower;
+    this.includeUpper = includeUpper;
+  }
+  
+  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {
+    return new RangeMultiFilterDocIdSet(FieldCache.DEFAULT.getStringIndex(reader, field));
+  }
+  
+  protected class RangeMultiFilterDocIdSet extends DocIdSet {
+    private int inclusiveLowerPoint;
+    private int inclusiveUpperPoint;
+    private FieldCache.StringIndex fcsi;
+    
+    public RangeMultiFilterDocIdSet(FieldCache.StringIndex fcsi) {
+      this.fcsi = fcsi;
+      initialize();
+    }
+    
+    private void initialize() {
+      int lowerPoint = Arrays.binarySearch(fcsi.lookup, lowerVal);
+      if (includeLower && lowerPoint >= 0) {
+        inclusiveLowerPoint = lowerPoint;
+      } else if (lowerPoint >= 0) {
+        inclusiveLowerPoint = lowerPoint+1;
+      } else {
+        inclusiveLowerPoint = -lowerPoint-1;
+      }
+      int upperPoint = Arrays.binarySearch(fcsi.lookup, upperVal);
+      if (includeUpper && upperPoint >= 0) {
+        inclusiveUpperPoint = upperPoint;
+      } else if (upperPoint >= 0) {
+        inclusiveUpperPoint = upperPoint - 1;
+      } else {
+        inclusiveUpperPoint = -upperPoint - 2;
+      }
+    }
+    
+    public DocIdSetIterator iterator() {
+      return new RangeMultiFilterIterator();
+    }
+    
+    protected class RangeMultiFilterIterator extends DocIdSetIterator {
+      private int doc = -1;
+      
+      public int doc() {
+        return doc;
+      }
+
+      public boolean next() {
+        try {
+          do {
+            doc++;
+          } while (fcsi.order[doc] > inclusiveUpperPoint 
+                  || fcsi.order[doc] < inclusiveLowerPoint);
+          return true;
+        } catch (ArrayIndexOutOfBoundsException e) {
+          doc = Integer.MAX_VALUE;
+          return false;
+          }
+      }
+
+      public boolean skipTo(int target) {
+        try {
+          doc = target;
+          while (fcsi.order[doc] > inclusiveUpperPoint 
+                || fcsi.order[doc] < inclusiveLowerPoint) { 
+            doc++;
+          }
+          return true;
+        } catch (ArrayIndexOutOfBoundsException e) {
+          doc = Integer.MAX_VALUE;
+          return false;
+        }
+      }
+    }
+  }
+}
