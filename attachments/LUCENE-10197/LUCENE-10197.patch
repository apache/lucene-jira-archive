diff --git a/lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter.java b/lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter.java
index da3b80974bc..2ee0102973b 100644
--- a/lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter.java
+++ b/lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter.java
@@ -143,6 +143,93 @@ public class UnifiedHighlighter {
 
   private int cacheFieldValCharsThreshold = DEFAULT_CACHE_CHARS_THRESHOLD;
 
+  /**
+   * Builder for UnifiedHighlighter.
+   */
+  public static class Builder {
+    private final IndexSearcher searcher;
+    private final Analyzer indexAnalyzer;
+    private boolean handleMtq = true;
+    private boolean highlightPhrasesStrictly = true;
+    private boolean passageRelevancyOverSpeed = true;
+    private int maxLength = DEFAULT_MAX_LENGTH;
+    private Supplier<BreakIterator> breakIterator = () -> BreakIterator.getSentenceInstance(Locale.ROOT);
+    private Predicate<String> fieldMatcher;
+    private PassageScorer scorer = new PassageScorer();
+    private PassageFormatter formatter = new DefaultPassageFormatter();
+    private int maxNoHighlightPassages = -1;
+    private int cacheFieldValCharsThreshold = DEFAULT_CACHE_CHARS_THRESHOLD;
+
+    public Builder(IndexSearcher searcher, Analyzer indexAnalyzer) {
+      this.searcher = searcher;
+      this.indexAnalyzer = indexAnalyzer;
+    }
+
+    public Builder withHandleMultiTermQuery(boolean value) {
+      this.handleMtq = value;
+      return this;
+    }
+
+    public Builder withHighlightPhrasesStrictly(boolean value) {
+      this.highlightPhrasesStrictly = value;
+      return this;
+    }
+
+    public Builder withPassageRelevancyOverSpeed(boolean value) {
+      this.passageRelevancyOverSpeed = value;
+      return this;
+    }
+
+    public Builder withMaxLength(int value) {
+      this.maxLength = value;
+      return this;
+    }
+
+    public Builder withBreakIterator(Supplier<BreakIterator> value) {
+      this.breakIterator = value;
+      return this;
+    }
+
+    public Builder withFieldMatcher(Predicate<String> value) {
+      this.fieldMatcher = value;
+      return this;
+    }
+
+    public Builder withScorer(PassageScorer value) {
+      this.scorer = value;
+      return this;
+    }
+
+    public Builder withFormatter(PassageFormatter value) {
+      this.formatter = value;
+      return this;
+    }
+
+    public Builder withMaxNoHighlightPassages(int value) {
+      this.maxNoHighlightPassages = value;
+      return this;
+    }
+
+    public Builder withCacheFieldValCharsThreshold(int value) {
+      this.cacheFieldValCharsThreshold = value;
+      return this;
+    }
+
+    public UnifiedHighlighter build() {
+      UnifiedHighlighter uh = new UnifiedHighlighter(this.searcher, this.indexAnalyzer);
+      uh.setBreakIterator(this.breakIterator);
+      uh.setCacheFieldValCharsThreshold(this.cacheFieldValCharsThreshold);
+      uh.setFieldMatcher(this.fieldMatcher);
+      uh.setFormatter(this.formatter);
+      uh.setHandleMultiTermQuery(this.handleMtq);
+      uh.setHighlightPhrasesStrictly(this.highlightPhrasesStrictly);
+      uh.setMaxLength(this.maxLength);
+      uh.setMaxNoHighlightPassages(this.maxNoHighlightPassages);
+      uh.setScorer(this.scorer);
+      return uh;
+    }
+  }
+
   /** Extracts matching terms after rewriting against an empty index */
   protected static Set<Term> extractTerms(Query query) throws IOException {
     Set<Term> queryTerms = new HashSet<>();
diff --git a/lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighter.java b/lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighter.java
index 12c22599866..a974b7c2886 100644
--- a/lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighter.java
+++ b/lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighter.java
@@ -460,6 +460,39 @@ public class TestUnifiedHighlighter extends LuceneTestCase {
     ir.close();
   }
 
+  public void testUnifiedHighlighterBuilderDefaults() throws Exception {
+    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);
+    Document document = new Document();
+    document.add(new Field("body", "test body", fieldType));
+    iw.addDocument(document);
+    IndexReader ir = iw.getReader();
+    iw.close();
+    IndexSearcher searcher = newSearcher(ir);
+    UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, indexAnalyzer);
+    UnifiedHighlighter highlighterUsingBuilder = new UnifiedHighlighter.Builder(searcher, indexAnalyzer).build();
+    assertTrue(highlighter.getFieldMatcher("body").test("body"));
+    assertTrue(highlighterUsingBuilder.getFieldMatcher("body").test("body"));
+    assertEquals(highlighter.getFlags("body").size(), highlighterUsingBuilder.getFlags("body").size());
+    assertEquals(highlighter.getMaxLength(), highlighterUsingBuilder.getMaxLength());
+    ir.close();
+  }
+
+  public void testUnifiedHighlighterBuilder() throws Exception {
+    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);
+    Document document = new Document();
+    document.add(new Field("body", "test body", fieldType));
+    iw.addDocument(document);
+    IndexReader ir = iw.getReader();
+    iw.close();
+    IndexSearcher searcher = newSearcher(ir);
+    UnifiedHighlighter uh = new UnifiedHighlighter.Builder(searcher, indexAnalyzer)
+        .withHandleMultiTermQuery(false)
+        .build();
+    assertTrue(uh.getFieldMatcher("body").test("body"));
+    assertFalse(uh.getFlags("body").contains(HighlightFlag.WEIGHT_MATCHES));
+    ir.close();
+  }
+
   public void testHighlighterDefaultFlags() throws Exception {
     RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);
     Document document = new Document();
