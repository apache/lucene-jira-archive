diff --git a/lucene/core/src/java/org/apache/lucene/index/IndexWriter.java b/lucene/core/src/java/org/apache/lucene/index/IndexWriter.java
index 509eadbb21..837a442c49 100644
--- a/lucene/core/src/java/org/apache/lucene/index/IndexWriter.java
+++ b/lucene/core/src/java/org/apache/lucene/index/IndexWriter.java
@@ -4383,8 +4383,9 @@ public class IndexWriter implements Closeable, TwoPhaseCommit, Accountable,
       // Let the merge wrap readers
       List<CodecReader> mergeReaders = new ArrayList<>();
       int numSoftDeleted = 0;
-      for (SegmentReader reader : merge.readers) {
-        CodecReader wrappedReader = merge.wrapForMerge(reader);
+      for (int i = 0; i < merge.readers.size(); i++) {
+        SegmentReader reader = merge.readers.get(i);
+        CodecReader wrappedReader = merge.wrapForMerge(reader, merge.hardLiveDocs.get(i));
         validateMergeReader(wrappedReader);
         mergeReaders.add(wrappedReader);
         if (softDeletesEnabled) {
diff --git a/lucene/core/src/java/org/apache/lucene/index/MergePolicy.java b/lucene/core/src/java/org/apache/lucene/index/MergePolicy.java
index d552d74ba4..3ff1a54998 100644
--- a/lucene/core/src/java/org/apache/lucene/index/MergePolicy.java
+++ b/lucene/core/src/java/org/apache/lucene/index/MergePolicy.java
@@ -260,6 +260,18 @@ public abstract class MergePolicy {
       return reader;
     }
 
+    /**
+     * Wrap the reader in order to add/remove information to the merged segment.
+     * A soft-deletes merge policy should override this method instead of {@link #wrapForMerge(CodecReader)}
+     *
+     * @param reader       the reader
+     * @param hardLiveDocs the hard liveDocs of the reader
+     *                     soft-deleted documents are considered live in this bit set.
+     */
+    public CodecReader wrapForMerge(CodecReader reader, Bits hardLiveDocs) throws IOException {
+      return wrapForMerge(reader);
+    }
+
     /**
      * Expert: Sets the {@link SegmentCommitInfo} of the merged segment.
      * Allows sub-classes to e.g. set diagnostics properties.
diff --git a/lucene/core/src/java/org/apache/lucene/index/SoftDeletesRetentionMergePolicy.java b/lucene/core/src/java/org/apache/lucene/index/SoftDeletesRetentionMergePolicy.java
index 515068c207..5ee4930fc1 100644
--- a/lucene/core/src/java/org/apache/lucene/index/SoftDeletesRetentionMergePolicy.java
+++ b/lucene/core/src/java/org/apache/lucene/index/SoftDeletesRetentionMergePolicy.java
@@ -55,13 +55,13 @@ public final class SoftDeletesRetentionMergePolicy extends OneMergeWrappingMerge
   public SoftDeletesRetentionMergePolicy(String field, Supplier<Query> retentionQuerySupplier, MergePolicy in) {
     super(in, toWrap -> new MergePolicy.OneMerge(toWrap.segments) {
       @Override
-      public CodecReader wrapForMerge(CodecReader reader) throws IOException {
-        CodecReader wrapped = toWrap.wrapForMerge(reader);
+      public CodecReader wrapForMerge(CodecReader reader, Bits hardLiveDocs) throws IOException {
+        CodecReader wrapped = toWrap.wrapForMerge(reader, hardLiveDocs);
         Bits liveDocs = reader.getLiveDocs();
         if (liveDocs == null) { // no deletes - just keep going
           return wrapped;
         }
-        return applyRetentionQuery(field, retentionQuerySupplier.get(), wrapped);
+        return applyRetentionQuery(field, retentionQuerySupplier.get(), wrapped, hardLiveDocs);
       }
     });
     Objects.requireNonNull(field, "field must not be null");
@@ -84,7 +84,8 @@ public final class SoftDeletesRetentionMergePolicy extends OneMergeWrappingMerge
   }
 
   // pkg private for testing
-  static CodecReader applyRetentionQuery(String softDeleteField, Query retentionQuery, CodecReader reader) throws IOException {
+  static CodecReader applyRetentionQuery(String softDeleteField, Query retentionQuery,
+                                         CodecReader reader, Bits hardLiveDocs) throws IOException {
     Bits liveDocs = reader.getLiveDocs();
     if (liveDocs == null) { // no deletes - just keep going
       return reader;
@@ -92,7 +93,7 @@ public final class SoftDeletesRetentionMergePolicy extends OneMergeWrappingMerge
     CodecReader wrappedReader = wrapLiveDocs(reader, new Bits() { // only search deleted
       @Override
       public boolean get(int index) {
-        return liveDocs.get(index) == false;
+        return hardLiveDocs.get(index) && liveDocs.get(index) == false;
       }
 
       @Override
@@ -108,10 +109,13 @@ public final class SoftDeletesRetentionMergePolicy extends OneMergeWrappingMerge
       FixedBitSet cloneLiveDocs = cloneLiveDocs(liveDocs);
       DocIdSetIterator iterator = scorer.iterator();
       int numExtraLiveDocs = 0;
-      while (iterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {
-        if (cloneLiveDocs.getAndSet(iterator.docID()) == false) {
-          // if we bring one back to live we need to account for it
-          numExtraLiveDocs++;
+      int docId;
+      while ((docId = iterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {
+        if (hardLiveDocs == null || hardLiveDocs.get(docId)) {
+          if (cloneLiveDocs.getAndSet(iterator.docID()) == false) {
+            // if we bring one back to live we need to account for it
+            numExtraLiveDocs++;
+          }
         }
       }
       assert reader.numDocs() + numExtraLiveDocs <= reader.maxDoc() : "numDocs: " + reader.numDocs() + " numExtraLiveDocs: " + numExtraLiveDocs + " maxDoc: " + reader.maxDoc();
diff --git a/lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesRetentionMergePolicy.java b/lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesRetentionMergePolicy.java
index be1f7ac16a..2262b96713 100644
--- a/lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesRetentionMergePolicy.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesRetentionMergePolicy.java
@@ -569,6 +569,44 @@ public class TestSoftDeletesRetentionMergePolicy extends LuceneTestCase {
     IOUtils.close(writer, dir);
   }
 
+  public void testMergeSoftDeleteAndHardDelete() throws Exception {
+    Directory dir = newDirectory();
+    String softDelete = "soft_delete";
+    IndexWriterConfig config = newIndexWriterConfig()
+        .setSoftDeletesField(softDelete)
+        .setMergePolicy(new SoftDeletesRetentionMergePolicy(softDelete,
+            MatchAllDocsQuery::new, new LogDocMergePolicy()));
+    config.setReaderPooling(true);
+    IndexWriter writer = new IndexWriter(dir, config);
+    Document d = new Document();
+    d.add(new StringField("id", "0", Field.Store.YES));
+    writer.addDocument(d);
+    d = new Document();
+    d.add(new StringField("id", "1", Field.Store.YES));
+    d.add(new NumericDocValuesField(softDelete, 1));
+    writer.addDocument(d);
+    try (DirectoryReader reader = writer.getReader()) {
+      assertEquals(2, reader.maxDoc());
+      assertEquals(1, reader.numDocs());
+    }
+    while (true) {
+      try (DirectoryReader reader = writer.getReader()) {
+        TopDocs topDocs = new IndexSearcher(new NoDeletesWrapper(reader)).search(new TermQuery(new Term("id", "1")), 1);
+        assertEquals(1, topDocs.totalHits);
+        if (writer.tryDeleteDocument(reader, topDocs.scoreDocs[0].doc) > 0) {
+          break;
+        }
+      }
+    }
+    writer.forceMerge(1);
+    assertEquals(1, writer.segmentInfos.size());
+    SegmentCommitInfo si = writer.segmentInfos.info(0);
+    assertEquals(0, si.getSoftDelCount()); // hard-delete should supersede the soft-delete
+    assertEquals(0, si.getDelCount());
+    assertEquals(1, si.info.maxDoc());
+    IOUtils.close(writer, dir);
+  }
+
   static void doUpdate(Term doc, IndexWriter writer, Field... fields) throws IOException {
     long seqId = -1;
     do { // retry if we just committing a merge
