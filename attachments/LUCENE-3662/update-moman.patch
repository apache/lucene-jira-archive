Index: lucene/common-build.xml
===================================================================
--- lucene/common-build.xml	(revision 1221503)
+++ lucene/common-build.xml	(working copy)
@@ -194,7 +194,7 @@
   
   <property name="hg.exe" value="hg" />
   <property name="moman.url" value="https://bitbucket.org/jpbarrette/moman" />
-  <property name="moman.rev" value="115" />
+  <property name="moman.rev" value="119" />
   <property name="python.exe" value="python" />
 
   <property name="gpg.exe" value="gpg" />
Index: lucene/src/java/org/apache/lucene/util/automaton/createLevAutomata.py
===================================================================
--- lucene/src/java/org/apache/lucene/util/automaton/createLevAutomata.py	(revision 1221503)
+++ lucene/src/java/org/apache/lucene/util/automaton/createLevAutomata.py	(working copy)
@@ -105,7 +105,7 @@
 
   n = int(sys.argv[1])
 
-  tables = genTransitions(n)
+  tables = genTransitions(n, False)
 
   stateMap = {}
 
Index: lucene/src/java/org/apache/lucene/util/automaton/Lev1ParametricDescription.java
===================================================================
--- lucene/src/java/org/apache/lucene/util/automaton/Lev1ParametricDescription.java	(revision 1221503)
+++ lucene/src/java/org/apache/lucene/util/automaton/Lev1ParametricDescription.java	(working copy)
@@ -37,26 +37,26 @@
     assert offset >= 0;
     
     if (position == w) {
-      if (state < 2) {
-        final int loc = vector * 2 + state;
+      if (state < 1) {
+        final int loc = vector * 1 + state;
         offset += unpack(offsetIncrs0, loc, 1);
         state = unpack(toStates0, loc, 2)-1;
       }
     } else if (position == w-1) {
-      if (state < 3) {
-        final int loc = vector * 3 + state;
+      if (state < 2) {
+        final int loc = vector * 2 + state;
         offset += unpack(offsetIncrs1, loc, 1);
         state = unpack(toStates1, loc, 2)-1;
       }
     } else if (position == w-2) {
-      if (state < 5) {
-        final int loc = vector * 5 + state;
+      if (state < 4) {
+        final int loc = vector * 4 + state;
         offset += unpack(offsetIncrs2, loc, 2);
         state = unpack(toStates2, loc, 3)-1;
       }
     } else {
-      if (state < 5) {
-        final int loc = vector * 5 + state;
+      if (state < 4) {
+        final int loc = vector * 4 + state;
         offset += unpack(offsetIncrs3, loc, 2);
         state = unpack(toStates3, loc, 3)-1;
       }
@@ -71,7 +71,7 @@
     }
   }
     
-  // 1 vectors; 2 states per vector; array length = 2
+  // 1 vectors; 1 states per vector; array length = 1
   private final static long[] toStates0 = new long[] /*2 bits per value */ {
     0x2L
   };
@@ -79,36 +79,36 @@
     0x0L
   };
     
-  // 2 vectors; 3 states per vector; array length = 6
+  // 2 vectors; 2 states per vector; array length = 4
   private final static long[] toStates1 = new long[] /*2 bits per value */ {
-    0xa43L
+    0x93L
   };
   private final static long[] offsetIncrs1 = new long[] /*1 bits per value */ {
-    0x38L
+    0xcL
   };
     
-  // 4 vectors; 5 states per vector; array length = 20
+  // 4 vectors; 4 states per vector; array length = 16
   private final static long[] toStates2 = new long[] /*3 bits per value */ {
-    0x4da292442420003L
+    0x4d1491085003L
   };
   private final static long[] offsetIncrs2 = new long[] /*2 bits per value */ {
-    0x5555528000L
+    0x55552000L
   };
     
-  // 8 vectors; 5 states per vector; array length = 40
+  // 8 vectors; 4 states per vector; array length = 32
   private final static long[] toStates3 = new long[] /*3 bits per value */ {
-    0x14d0812112018003L,0xb1a29b46d48a49L
+    0x1491485085403003L,0x8d14d189L
   };
   private final static long[] offsetIncrs3 = new long[] /*2 bits per value */ {
-    0x555555e80a0f0000L,0x5555L
+    0x55555555e020c000L
   };
   
   // state map
   //   0 -> [(0, 0)]
   //   1 -> [(0, 1)]
   //   2 -> [(0, 1), (1, 1)]
-  //   3 -> [(0, 1), (1, 1), (2, 1)]
-  //   4 -> [(0, 1), (2, 1)]
+  //   3 -> [(0, 1), (2, 1)]
+  //   4 -> [(0, 1), (1, 1), (2, 1)]
   
   
   public Lev1ParametricDescription(int w) {
Index: lucene/src/java/org/apache/lucene/util/automaton/Lev2ParametricDescription.java
===================================================================
--- lucene/src/java/org/apache/lucene/util/automaton/Lev2ParametricDescription.java	(revision 1221503)
+++ lucene/src/java/org/apache/lucene/util/automaton/Lev2ParametricDescription.java	(working copy)
@@ -37,38 +37,38 @@
     assert offset >= 0;
     
     if (position == w) {
-      if (state < 3) {
-        final int loc = vector * 3 + state;
+      if (state < 2) {
+        final int loc = vector * 2 + state;
         offset += unpack(offsetIncrs0, loc, 1);
         state = unpack(toStates0, loc, 2)-1;
       }
     } else if (position == w-1) {
-      if (state < 5) {
-        final int loc = vector * 5 + state;
+      if (state < 4) {
+        final int loc = vector * 4 + state;
         offset += unpack(offsetIncrs1, loc, 1);
         state = unpack(toStates1, loc, 3)-1;
       }
     } else if (position == w-2) {
-      if (state < 11) {
-        final int loc = vector * 11 + state;
+      if (state < 10) {
+        final int loc = vector * 10 + state;
         offset += unpack(offsetIncrs2, loc, 2);
         state = unpack(toStates2, loc, 4)-1;
       }
     } else if (position == w-3) {
-      if (state < 21) {
-        final int loc = vector * 21 + state;
+      if (state < 20) {
+        final int loc = vector * 20 + state;
         offset += unpack(offsetIncrs3, loc, 2);
         state = unpack(toStates3, loc, 5)-1;
       }
     } else if (position == w-4) {
-      if (state < 30) {
-        final int loc = vector * 30 + state;
+      if (state < 29) {
+        final int loc = vector * 29 + state;
         offset += unpack(offsetIncrs4, loc, 3);
         state = unpack(toStates4, loc, 5)-1;
       }
     } else {
-      if (state < 30) {
-        final int loc = vector * 30 + state;
+      if (state < 29) {
+        final int loc = vector * 29 + state;
         offset += unpack(offsetIncrs5, loc, 3);
         state = unpack(toStates5, loc, 5)-1;
       }
@@ -83,135 +83,134 @@
     }
   }
     
-  // 1 vectors; 3 states per vector; array length = 3
+  // 1 vectors; 2 states per vector; array length = 2
   private final static long[] toStates0 = new long[] /*2 bits per value */ {
-    0x23L
+    0x3L
   };
   private final static long[] offsetIncrs0 = new long[] /*1 bits per value */ {
     0x0L
   };
     
-  // 2 vectors; 5 states per vector; array length = 10
+  // 2 vectors; 4 states per vector; array length = 8
   private final static long[] toStates1 = new long[] /*3 bits per value */ {
-    0x1a68c105L
+    0x6d1b44L
   };
   private final static long[] offsetIncrs1 = new long[] /*1 bits per value */ {
-    0x3e0L
+    0xf0L
   };
     
-  // 4 vectors; 11 states per vector; array length = 44
+  // 4 vectors; 10 states per vector; array length = 40
   private final static long[] toStates2 = new long[] /*4 bits per value */ {
-    0x6280b80804280405L,0x2323432321608282L,0x523434543213L
+    0x226a090a0520a504L,0x212323523321260aL,0x54235543L
   };
   private final static long[] offsetIncrs2 = new long[] /*2 bits per value */ {
-    0x5555502220000800L,0x555555L
+    0x55555580a0000800L,0x5555L
   };
     
-  // 8 vectors; 21 states per vector; array length = 168
+  // 8 vectors; 20 states per vector; array length = 160
   private final static long[] toStates3 = new long[] /*5 bits per value */ {
-    0x40300c0108801005L,0x80202a8208801000L,0x4021006280a0288dL,0x30482184802d8414L,
-    0x5990240880010460L,0x191a28118330900L,0x310c413204c1104L,0x8625084811c4710dL,
-    0xa92a398e2188231aL,0x104e351c4a508ca4L,0x21208511c8341483L,0xe6290620946a1910L,
-    0xd47221423216a4a0L,0x28L
+    0x380e014a051404L,0x6071412009451140L,0x9c51344004c53134L,0x3846028a23280910L,
+    0x32809014ca128420L,0xa138a204cb513862L,0x4710d4218c41114cL,0xc411206340c4211cL,
+    0x1d0212d0b41cc238L,0x10d4520c41420e34L,0x11288340ca511ca4L,0x4512d4941cc520c4L,
+    0x4288341dL
   };
   private final static long[] offsetIncrs3 = new long[] /*2 bits per value */ {
-    0x33300030c2000800L,0x32828088800c3cfL,0x5555550cace32320L,0x5555555555555555L,
-    0x5555555555555555L,0x5555L
+    0xccc0030c0000800L,0x20ca080a00f0ccL,0x55555555e0ca08ceL,0x5555555555555555L,
+    0x5555555555555555L
   };
     
-  // 16 vectors; 30 states per vector; array length = 480
+  // 16 vectors; 29 states per vector; array length = 464
   private final static long[] toStates4 = new long[] /*5 bits per value */ {
-    0x80300c0108801005L,0x88210802000L,0x44200401400000L,0x7ae3b88621185c07L,
-    0x101500042100404L,0x20803140501446cL,0x40100420006c2122L,0x490140511b004054L,
-    0x8401f2e3c086411L,0x120861200b100822L,0x641102400081180cL,0x4802c40100001088L,
-    0x8c21195607048418L,0x1421014245bc3f2L,0x23450230661200b1L,0x2108664118240803L,
-    0x8c1984802c802004L,0xbc3e28c41150d140L,0xc4120102209421dL,0x7884c11c4710d031L,
-    0x210842109031bc62L,0xd21484360c431044L,0x9c265293a3a6e741L,0x1cc710c41109ce70L,
-    0x1bce27a846525495L,0x3105425094a108c7L,0x6f735e95254731c4L,0x9ee7a9c234a9393aL,
-    0x144720d0520c4150L,0x211051bc646084c2L,0x3614831048220842L,0x93a460e742351488L,
-    0xc4120a2e70a24656L,0x284642d4941cc520L,0x4094a210c51bce46L,0xb525073148310502L,
-    0x24356939460f7358L,0x4098e7aaL
+    0x380e014a051404L,0xaa015452940L,0x3802a80a28080000L,0x28c21eee3b8842e0L,
+    0x181c504802008420L,0x5714ad1001314c4dL,0xa0900420080018c4L,0xf0510a62989a3038L,
+    0x1442288032147cb8L,0x3846028a2328090L,0x108aa028ca2a842L,0xc052846501201080L,
+    0x8c235b63da102e0aL,0x88ca024081084812L,0x328ae288132d44e1L,0x480a50084218c4aL,
+    0x8a40a65a89c31194L,0x8a22a043214d6d8fL,0x1c4710d4218c4102L,0x1094e15063a0c421L,
+    0x21b8431882210842L,0x6c846308b18c789eL,0x8e31044c1318c13aL,0x8e874084b42d0730L,
+    0x890812042319143L,0x4631685a0e611c62L,0xca3046ad20f8c1fL,0xca410d4520c41151L,
+    0x954e13883a0ca511L,0x1b8a418822294422L,0xc9ca308b5ac79642L,0x831044d2b18d2ba6L,
+    0xe875144b52507314L,0x894a120a53190e20L,0x6b16a4a0e6290620L,0xca34a6ad2728c1eeL,
+    0x1394L
   };
   private final static long[] offsetIncrs4 = new long[] /*3 bits per value */ {
-    0xc0602000010000L,0xa000040000000001L,0x248204041248L,0xb0180c06c3618618L,
-    0x238d861860001861L,0x41040061c6e06041L,0x4004900c2402400L,0x409489001041001L,
-    0x4184184004148124L,0x1041b4980c24c3L,0xd26040938d061061L,0x2492492492494146L,
+    0x20c0600000010000L,0x2400008000000001L,0x6000041240948041L,0xb0c06db018600618L,
+    0xe01039030c300001L,0x100120000dc7036L,0x480492080612L,0x2249440409408009L,
+    0x184804186800025L,0x20c34000120d26daL,0x490946936d010250L,0x2492492492492492L,
     0x9249249249249249L,0x4924924924924924L,0x2492492492492492L,0x9249249249249249L,
     0x4924924924924924L,0x2492492492492492L,0x9249249249249249L,0x4924924924924924L,
-    0x2492492492492492L,0x9249249249249249L,0x24924924L
+    0x2492492492492492L,0x249249249249L
   };
     
-  // 32 vectors; 30 states per vector; array length = 960
+  // 32 vectors; 29 states per vector; array length = 928
   private final static long[] toStates5 = new long[] /*5 bits per value */ {
-    0x80300c0108801005L,0x88210802000L,0x42200401400000L,0xa088201000300c03L,
-    0x100510842108428L,0x2188461701c01108L,0x108401011eb8eeL,0x85c0700442004014L,
-    0x88267ae3b886211L,0x1446c01015108842L,0xc212202080314050L,0x405440100420006L,
-    0x10201c50140511b0L,0x942528423b08888L,0x240501446c010155L,0x21007cb8f0219045L,
-    0x511b004054402088L,0x2e3c086411490140L,0x200b50904428823fL,0x400081180c120861L,
-    0x100001088641102L,0x46030482184802c4L,0x9ce8990840980030L,0x21061200b709c210L,
-    0xf0fca308465581c1L,0x802c405084050916L,0xc211956070484184L,0x9e4209ee65bc3f28L,
-    0x3450230661200b70L,0x1086641182408032L,0xc1984802c8020042L,0x86098201c8d1408L,
-    0xb88a22529ce399L,0x1045434502306612L,0x4088250876f0f8a3L,0xd1408c1984802c80L,
-    0xee3dbc3e28c41150L,0xd0310c4188984429L,0xbc627884c11c4710L,0x1044210842109031L,
-    0x21704711c4340c43L,0xbdef7bdf0c7a18b4L,0x85210d8310c41ef7L,0x994a4e8e9b9d074L,
-    0x60c4310442739c27L,0x3a3a6e741d214843L,0x41ef77bdf77de529L,0x8465254951cc710cL,
-    0x94a108c71bce27aL,0x5254731c43105425L,0xdb1c7a38b4a15949L,0xc710c41cf73dce7bL,
-    0xe4e9bdcd7a54951cL,0x5427b9ea708d2a4L,0x735e95254731c431L,0xbd677db4a9393a6fL,
-    0x4720d0520c41cf75L,0x1051bc646084c214L,0x1483104822084221L,0x193821708511c834L,
-    0x1bf6fdef6f7f147aL,0xd08d45220d8520c4L,0x9c289195a4e91839L,0x488361483104828bL,
-    0xe5693a460e742351L,0x520c41bf71bdf717L,0xe46284642d4941ccL,0x5024094a210c51bcL,
-    0x590b525073148310L,0xce6f7b147a3938a1L,0x941cc520c41f77ddL,0xd5a4e5183dcd62d4L,
-    0x48310502639ea890L,0x460f7358b5250731L,0xf779bd6717b56939L
+    0x380e014a051404L,0xaa015452940L,0x1c02940a28080000L,0x35c0528aa2800070L,
+    0x5014501042108421L,0x3ddc771085c07005L,0xa020040108405184L,0xee210b80e00aa028L,
+    0x14452944e3087bb8L,0x4c5313460714121L,0x200063115c52b440L,0x6268c0e282401080L,
+    0xce2538aa6880098aL,0x81c5048484090211L,0xe5c782885314c4d1L,0x900a211440190a3L,
+    0x510a62989a3038aL,0x905514472147cb8fL,0x3846028a23280912L,0x108aa028ca2a8420L,
+    0x514465012010800L,0xc07194a50840708cL,0x8ca0244c6084c635L,0x6c7b4205c1580a50L,
+    0x481021090251846bL,0x840b82b014a11940L,0x852d18e308d6d8f6L,0xcb51386232809151L,
+    0x863128ca2b8a204L,0x70c4650120294021L,0x27194a71440996a2L,0xca0244d6890c61ceL,
+    0xc7c520532d44e188L,0x814511502190a6b6L,0x40a65a89c3119404L,0x555187214d6d8f8aL,
+    0x4710d4218c41139aL,0x94e15063a0c4211cL,0xa843188221084210L,0xc8c7918842388e21L,
+    0x3107bdef7bdeef82L,0x116318f13c437086L,0x9826318274d908c6L,0x31e27886e10c6208L,
+    0xd6bbc9b2118c22c6L,0xb41cc238c41eebbaL,0xc6450e3a1d0212d0L,0x8471882242048108L,
+    0x9c793a0425a16839L,0x107bef77ddedac8cL,0xfa318b42d07308e3L,0x8865182356907c60L,
+    0x1685a0e611c6208aL,0xebb6ad20f8c1f463L,0x10d4520c41ee7dacL,0xe13883a0ca511ca4L,
+    0xa418822294422954L,0x79194a2394821a8L,0x7b7bf7b7bef82e1L,0x6b58f2c843714831L,
+    0x5631a574d9394611L,0xe59086e29062089aL,0x2fc9b2728c22d6b1L,0x1cc520c41ee2fad6L,
+    0x43883a1d4512d494L,0x41882252848294c6L,0x793a8a25a928398aL,0x7bbdf7d7bdac8e10L,
+    0x358b525073148310L,0x651a5356939460f7L,0xa4a0e629062089caL,0xf6ad2728c1ee6b16L,
+    0xef37ace2L
   };
   private final static long[] offsetIncrs5 = new long[] /*3 bits per value */ {
-    0xc0602000010000L,0x8000040000000001L,0xb6db6d4030180L,0x810104922800010L,
-    0x248a000040000092L,0x618000b649654041L,0x861b0180c06c3618L,0x301b0d861860001L,
-    0x61861800075d6ed6L,0x1871b8181048e3L,0xe56041238d861860L,0x40240041040075c6L,
-    0x4100104004900c2L,0x55b5240309009001L,0x1025224004104005L,0x10410010520490L,
-    0x55495240409489L,0x4980c24c34184184L,0x30d061061001041bL,0x184005556d260309L,
-    0x51b4981024e34184L,0x40938d0610610010L,0x492492495546d260L,0x2492492492492492L,
+    0x20c0600000010000L,0x8000000001L,0x40002db6da906030L,0x9204a4020920000L,
+    0x2010490000200002L,0x18618000b2c92a5L,0x6c301b6c0618L,0x5dadb6030c00c30cL,
+    0x2072061860002b7L,0x30c300001b8e06dcL,0xadc72b6e010390L,0x4920806120100120L,
+    0x3090080090000480L,0x48002a56a49040L,0x129124a20204a04L,0x2510102502002400L,
+    0x1201061a000a9489L,0xd000048349b6806L,0xa55a4db403090083L,0xda0204a041868002L,
+    0x5020c34000128d26L,0x9249a946936d0102L,0x4924924924924924L,0x2492492492492492L,
     0x9249249249249249L,0x4924924924924924L,0x2492492492492492L,0x9249249249249249L,
     0x4924924924924924L,0x2492492492492492L,0x9249249249249249L,0x4924924924924924L,
     0x2492492492492492L,0x9249249249249249L,0x4924924924924924L,0x2492492492492492L,
     0x9249249249249249L,0x4924924924924924L,0x2492492492492492L,0x9249249249249249L,
-    0x4924924924924924L,0x2492492492492492L,0x9249249249249249L,0x4924924924924924L,
-    0x2492492492492492L
+    0x4924924924924924L,0x2492492492492492L,0x9249249249249249L,0x24924924L
   };
   
   // state map
   //   0 -> [(0, 0)]
   //   1 -> [(0, 2)]
   //   2 -> [(0, 1)]
-  //   3 -> [(0, 2), (1, 2)]
-  //   4 -> [(0, 1), (1, 1)]
+  //   3 -> [(0, 1), (1, 1)]
+  //   4 -> [(0, 2), (1, 2)]
   //   5 -> [(0, 2), (2, 1)]
   //   6 -> [(0, 1), (2, 2)]
-  //   7 -> [(0, 2), (1, 2), (2, 2)]
-  //   8 -> [(0, 1), (2, 1)]
-  //   9 -> [(0, 2), (2, 2)]
-  //   10 -> [(0, 1), (1, 1), (2, 1)]
-  //   11 -> [(0, 2), (1, 2), (2, 2), (3, 2)]
-  //   12 -> [(0, 2), (2, 1), (3, 1)]
-  //   13 -> [(0, 2), (3, 2)]
-  //   14 -> [(0, 2), (2, 2), (3, 2)]
-  //   15 -> [(0, 2), (1, 2), (3, 1)]
-  //   16 -> [(0, 2), (1, 2), (3, 2)]
-  //   17 -> [(0, 1), (2, 2), (3, 2)]
-  //   18 -> [(0, 2), (3, 1)]
-  //   19 -> [(0, 1), (3, 2)]
-  //   20 -> [(0, 1), (1, 1), (3, 2)]
+  //   7 -> [(0, 2), (2, 2)]
+  //   8 -> [(0, 1), (1, 1), (2, 1)]
+  //   9 -> [(0, 2), (1, 2), (2, 2)]
+  //   10 -> [(0, 1), (2, 1)]
+  //   11 -> [(0, 2), (3, 2)]
+  //   12 -> [(0, 2), (1, 2), (3, 2)]
+  //   13 -> [(0, 2), (1, 2), (2, 2), (3, 2)]
+  //   14 -> [(0, 1), (2, 2), (3, 2)]
+  //   15 -> [(0, 2), (3, 1)]
+  //   16 -> [(0, 1), (3, 2)]
+  //   17 -> [(0, 1), (1, 1), (3, 2)]
+  //   18 -> [(0, 2), (1, 2), (3, 1)]
+  //   19 -> [(0, 2), (2, 2), (3, 2)]
+  //   20 -> [(0, 2), (2, 1), (3, 1)]
   //   21 -> [(0, 2), (2, 1), (4, 2)]
   //   22 -> [(0, 2), (1, 2), (4, 2)]
   //   23 -> [(0, 2), (1, 2), (3, 2), (4, 2)]
-  //   24 -> [(0, 2), (2, 2), (4, 2)]
-  //   25 -> [(0, 2), (2, 2), (3, 2), (4, 2)]
-  //   26 -> [(0, 2), (3, 2), (4, 2)]
+  //   24 -> [(0, 2), (2, 2), (3, 2), (4, 2)]
+  //   25 -> [(0, 2), (3, 2), (4, 2)]
+  //   26 -> [(0, 2), (1, 2), (2, 2), (4, 2)]
   //   27 -> [(0, 2), (1, 2), (2, 2), (3, 2), (4, 2)]
   //   28 -> [(0, 2), (4, 2)]
-  //   29 -> [(0, 2), (1, 2), (2, 2), (4, 2)]
+  //   29 -> [(0, 2), (2, 2), (4, 2)]
   
   
   public Lev2ParametricDescription(int w) {
-    super(w, 2, new int[] {0,2,1,1,0,-1,0,0,-1,0,-1,-1,-2,-1,-1,-2,-1,-1,-2,-1,-1,-2,-2,-2,-2,-2,-2,-2,-2,-2});
+    super(w, 2, new int[] {0,2,1,0,1,-1,0,0,-1,0,-1,-1,-1,-1,-1,-2,-1,-1,-2,-1,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2});
   }
 }
