Index: lucene/common-build.xml
===================================================================
--- lucene/common-build.xml	(revision 1221503)
+++ lucene/common-build.xml	(working copy)
@@ -194,7 +194,7 @@
   
   <property name="hg.exe" value="hg" />
   <property name="moman.url" value="https://bitbucket.org/jpbarrette/moman" />
-  <property name="moman.rev" value="115" />
+  <property name="moman.rev" value="119" />
   <property name="python.exe" value="python" />
 
   <property name="gpg.exe" value="gpg" />
Index: lucene/src/java/org/apache/lucene/util/automaton/createLevAutomata.py
===================================================================
--- lucene/src/java/org/apache/lucene/util/automaton/createLevAutomata.py	(revision 1221503)
+++ lucene/src/java/org/apache/lucene/util/automaton/createLevAutomata.py	(working copy)
@@ -105,7 +105,7 @@
 
   n = int(sys.argv[1])
 
-  tables = genTransitions(n)
+  tables = genTransitions(n, False)
 
   stateMap = {}
 
@@ -201,9 +201,9 @@
       byAction = {}
       for s, (toS, offset) in l:
         state = str(s)
-        if state == '[]':
+        #if state == '[]':
           # don't waste code on the null state
-          continue
+        #  continue
         
         toState = str(toS)
         if state not in stateMap:
@@ -222,10 +222,10 @@
         byAction[tup].append((fromStateDesc, stateMap[state]))
 
       if numCasesPerVector is None:
-        numCasesPerVector = len(l)-1
+        numCasesPerVector = len(l)
       else:
         # we require this to be uniform... empirically it seems to be!
-        assert numCasesPerVector == len(l)-1
+        assert numCasesPerVector == len(l)
 
       if MODE == 'array':
 
Index: lucene/src/java/org/apache/lucene/util/automaton/Lev1ParametricDescription.java
===================================================================
--- lucene/src/java/org/apache/lucene/util/automaton/Lev1ParametricDescription.java	(revision 1221503)
+++ lucene/src/java/org/apache/lucene/util/automaton/Lev1ParametricDescription.java	(working copy)
@@ -89,26 +89,26 @@
     
   // 4 vectors; 5 states per vector; array length = 20
   private final static long[] toStates2 = new long[] /*3 bits per value */ {
-    0x4da292442420003L
+    0x69a292450428003L
   };
   private final static long[] offsetIncrs2 = new long[] /*2 bits per value */ {
-    0x5555528000L
+    0x5555588000L
   };
     
   // 8 vectors; 5 states per vector; array length = 40
   private final static long[] toStates3 = new long[] /*3 bits per value */ {
-    0x14d0812112018003L,0xb1a29b46d48a49L
+    0x1690a82152018003L,0xb1a2d346448a49L
   };
   private final static long[] offsetIncrs3 = new long[] /*2 bits per value */ {
-    0x555555e80a0f0000L,0x5555L
+    0x555555b8220f0000L,0x5555L
   };
   
   // state map
   //   0 -> [(0, 0)]
   //   1 -> [(0, 1)]
   //   2 -> [(0, 1), (1, 1)]
-  //   3 -> [(0, 1), (1, 1), (2, 1)]
-  //   4 -> [(0, 1), (2, 1)]
+  //   3 -> [(0, 1), (2, 1)]
+  //   4 -> [(0, 1), (1, 1), (2, 1)]
   
   
   public Lev1ParametricDescription(int w) {
Index: lucene/src/java/org/apache/lucene/util/automaton/Lev2ParametricDescription.java
===================================================================
--- lucene/src/java/org/apache/lucene/util/automaton/Lev2ParametricDescription.java	(revision 1221503)
+++ lucene/src/java/org/apache/lucene/util/automaton/Lev2ParametricDescription.java	(working copy)
@@ -93,7 +93,7 @@
     
   // 2 vectors; 5 states per vector; array length = 10
   private final static long[] toStates1 = new long[] /*3 bits per value */ {
-    0x1a68c105L
+    0x13688b44L
   };
   private final static long[] offsetIncrs1 = new long[] /*1 bits per value */ {
     0x3e0L
@@ -101,41 +101,41 @@
     
   // 4 vectors; 11 states per vector; array length = 44
   private final static long[] toStates2 = new long[] /*4 bits per value */ {
-    0x6280b80804280405L,0x2323432321608282L,0x523434543213L
+    0x26a09a0a0520a504L,0x2323523321a260a2L,0x354235543213L
   };
   private final static long[] offsetIncrs2 = new long[] /*2 bits per value */ {
-    0x5555502220000800L,0x555555L
+    0x5555520280000800L,0x555555L
   };
     
   // 8 vectors; 21 states per vector; array length = 168
   private final static long[] toStates3 = new long[] /*5 bits per value */ {
-    0x40300c0108801005L,0x80202a8208801000L,0x4021006280a0288dL,0x30482184802d8414L,
-    0x5990240880010460L,0x191a28118330900L,0x310c413204c1104L,0x8625084811c4710dL,
-    0xa92a398e2188231aL,0x104e351c4a508ca4L,0x21208511c8341483L,0xe6290620946a1910L,
-    0xd47221423216a4a0L,0x28L
+    0x380e014a051404L,0xe28245009451140L,0x8a26880098a6268cL,0x180a288ca0246213L,
+    0x494053284a1080e1L,0x510265a89c311940L,0x4218c41188a6509cL,0x6340c4211c4710dL,
+    0xa168398471882a12L,0x104c841c683a0425L,0x3294472904351483L,0xe6290620a84a20d0L,
+    0x1441a0ea2896a4a0L,0x32L
   };
   private final static long[] offsetIncrs3 = new long[] /*2 bits per value */ {
-    0x33300030c2000800L,0x32828088800c3cfL,0x5555550cace32320L,0x5555555555555555L,
+    0x33300230c0000800L,0x220ca080a00fc330L,0x555555f832823380L,0x5555555555555555L,
     0x5555555555555555L,0x5555L
   };
     
   // 16 vectors; 30 states per vector; array length = 480
   private final static long[] toStates4 = new long[] /*5 bits per value */ {
-    0x80300c0108801005L,0x88210802000L,0x44200401400000L,0x7ae3b88621185c07L,
-    0x101500042100404L,0x20803140501446cL,0x40100420006c2122L,0x490140511b004054L,
-    0x8401f2e3c086411L,0x120861200b100822L,0x641102400081180cL,0x4802c40100001088L,
-    0x8c21195607048418L,0x1421014245bc3f2L,0x23450230661200b1L,0x2108664118240803L,
-    0x8c1984802c802004L,0xbc3e28c41150d140L,0xc4120102209421dL,0x7884c11c4710d031L,
-    0x210842109031bc62L,0xd21484360c431044L,0x9c265293a3a6e741L,0x1cc710c41109ce70L,
-    0x1bce27a846525495L,0x3105425094a108c7L,0x6f735e95254731c4L,0x9ee7a9c234a9393aL,
-    0x144720d0520c4150L,0x211051bc646084c2L,0x3614831048220842L,0x93a460e742351488L,
-    0xc4120a2e70a24656L,0x284642d4941cc520L,0x4094a210c51bce46L,0xb525073148310502L,
-    0x24356939460f7358L,0x4098e7aaL
+    0x380e014a051404L,0xaa015452940L,0x55014501000000L,0x1843ddc771085c07L,
+    0x7141200040108405L,0x52b44004c5313460L,0x401080200063115cL,0x85314c4d181c5048L,
+    0x1440190a3e5c7828L,0x28a232809100a21L,0xa028ca2a84203846L,0xca0240010800108aL,
+    0xc7b4205c1580a508L,0x1021090251846b6L,0x4cb513862328090L,0x210863128ca2b8a2L,
+    0x4e188ca024402940L,0xa6b6c7c520532d4L,0x8c41101451150219L,0xa0c4211c4710d421L,
+    0x2108421094e15063L,0x8f13c43708631044L,0x18274d908c611631L,0x1cc238c411098263L,
+    0x450e3a1d0212d0b4L,0x31050242048108c6L,0xfa318b42d07308eL,0xa8865182356907c6L,
+    0x1ca410d4520c4140L,0x2954e13883a0ca51L,0x3714831044229442L,0x93946116b58f2c84L,
+    0xc41109a5631a574dL,0x1d4512d4941cc520L,0x52848294c643883aL,0xb525073148310502L,
+    0xa5356939460f7358L,0x409ca651L
   };
   private final static long[] offsetIncrs4 = new long[] /*3 bits per value */ {
-    0xc0602000010000L,0xa000040000000001L,0x248204041248L,0xb0180c06c3618618L,
-    0x238d861860001861L,0x41040061c6e06041L,0x4004900c2402400L,0x409489001041001L,
-    0x4184184004148124L,0x1041b4980c24c3L,0xd26040938d061061L,0x2492492492494146L,
+    0x20c0600000010000L,0x2000040000000001L,0x209204a40209L,0x301b6c0618018618L,
+    0x207206186000186cL,0x1200061b8e06dc0L,0x480492080612010L,0xa20204a040048000L,
+    0x1061a0000129124L,0x1848349b680612L,0xd26da0204a041868L,0x2492492492496128L,
     0x9249249249249249L,0x4924924924924924L,0x2492492492492492L,0x9249249249249249L,
     0x4924924924924924L,0x2492492492492492L,0x9249249249249249L,0x4924924924924924L,
     0x2492492492492492L,0x9249249249249249L,0x24924924L
@@ -143,33 +143,33 @@
     
   // 32 vectors; 30 states per vector; array length = 960
   private final static long[] toStates5 = new long[] /*5 bits per value */ {
-    0x80300c0108801005L,0x88210802000L,0x42200401400000L,0xa088201000300c03L,
-    0x100510842108428L,0x2188461701c01108L,0x108401011eb8eeL,0x85c0700442004014L,
-    0x88267ae3b886211L,0x1446c01015108842L,0xc212202080314050L,0x405440100420006L,
-    0x10201c50140511b0L,0x942528423b08888L,0x240501446c010155L,0x21007cb8f0219045L,
-    0x511b004054402088L,0x2e3c086411490140L,0x200b50904428823fL,0x400081180c120861L,
-    0x100001088641102L,0x46030482184802c4L,0x9ce8990840980030L,0x21061200b709c210L,
-    0xf0fca308465581c1L,0x802c405084050916L,0xc211956070484184L,0x9e4209ee65bc3f28L,
-    0x3450230661200b70L,0x1086641182408032L,0xc1984802c8020042L,0x86098201c8d1408L,
-    0xb88a22529ce399L,0x1045434502306612L,0x4088250876f0f8a3L,0xd1408c1984802c80L,
-    0xee3dbc3e28c41150L,0xd0310c4188984429L,0xbc627884c11c4710L,0x1044210842109031L,
-    0x21704711c4340c43L,0xbdef7bdf0c7a18b4L,0x85210d8310c41ef7L,0x994a4e8e9b9d074L,
-    0x60c4310442739c27L,0x3a3a6e741d214843L,0x41ef77bdf77de529L,0x8465254951cc710cL,
-    0x94a108c71bce27aL,0x5254731c43105425L,0xdb1c7a38b4a15949L,0xc710c41cf73dce7bL,
-    0xe4e9bdcd7a54951cL,0x5427b9ea708d2a4L,0x735e95254731c431L,0xbd677db4a9393a6fL,
-    0x4720d0520c41cf75L,0x1051bc646084c214L,0x1483104822084221L,0x193821708511c834L,
-    0x1bf6fdef6f7f147aL,0xd08d45220d8520c4L,0x9c289195a4e91839L,0x488361483104828bL,
-    0xe5693a460e742351L,0x520c41bf71bdf717L,0xe46284642d4941ccL,0x5024094a210c51bcL,
-    0x590b525073148310L,0xce6f7b147a3938a1L,0x941cc520c41f77ddL,0xd5a4e5183dcd62d4L,
-    0x48310502639ea890L,0x460f7358b5250731L,0xf779bd6717b56939L
+    0x380e014a051404L,0xaa015452940L,0x8052814501000000L,0xb80a515450000e03L,
+    0x5140410842108426L,0x71dc421701c01540L,0x100421014610f7L,0x85c0700550145010L,
+    0x94a271843ddc7710L,0x1346071412108a22L,0x3115c52b44004c53L,0xc504840108020006L,
+    0x54d1001314c4d181L,0x9081204239c4a71L,0x14c5313460714124L,0x51006428f971e0a2L,
+    0x4d181c5048402884L,0xa3e5c782885314cL,0x2809409482a8a239L,0x2a84203846028a23L,
+    0x10800108aa028caL,0xe1180a288ca0240L,0x98c6b80e3294a108L,0x2942328091098c10L,
+    0x11adb1ed08170560L,0xa024004084240946L,0x7b4205c1580a508cL,0xa8c2968c71846b6cL,
+    0x4cb5138623280910L,0x10863128ca2b8a20L,0xe188ca0244029402L,0x4e3294e288132d44L,
+    0x809409ad1218c39cL,0xf14814cb51386232L,0x514454086429adb1L,0x32d44e188ca02440L,
+    0x8c390a6b6c7c5205L,0xd4218c41409cd2aaL,0x5063a0c4211c4710L,0x10442108421094e1L,
+    0x31084711c4350863L,0xbdef7bddf05918f2L,0xc4f10dc218c41ef7L,0x9d3642318458c63L,
+    0x70863104426098c6L,0x8c6116318f13c43L,0x41ef75dd6b5de4d9L,0xd0212d0b41cc238cL,
+    0x2048108c6450e3a1L,0x42d07308e3105024L,0xdb591938f274084bL,0xc238c41f77deefbbL,
+    0x1f183e8c62d0b41cL,0x502a2194608d5a4L,0xa318b42d07308e31L,0xed675db56907c60fL,
+    0xa410d4520c41f773L,0x54e13883a0ca511cL,0x1483104422944229L,0x20f2329447290435L,
+    0x1ef6f7ef6f7df05cL,0xad63cb210dc520c4L,0x58c695d364e51845L,0xc843714831044269L,
+    0xe4d93946116b58f2L,0x520c41ef717d6b17L,0x83a1d4512d4941ccL,0x50252848294c6438L,
+    0x144b525073148310L,0xefaf7b591c20f275L,0x941cc520c41f777bL,0xd5a4e5183dcd62d4L,
+    0x4831050272994694L,0x460f7358b5250731L,0xf779bd6717b56939L
   };
   private final static long[] offsetIncrs5 = new long[] /*3 bits per value */ {
-    0xc0602000010000L,0x8000040000000001L,0xb6db6d4030180L,0x810104922800010L,
-    0x248a000040000092L,0x618000b649654041L,0x861b0180c06c3618L,0x301b0d861860001L,
-    0x61861800075d6ed6L,0x1871b8181048e3L,0xe56041238d861860L,0x40240041040075c6L,
-    0x4100104004900c2L,0x55b5240309009001L,0x1025224004104005L,0x10410010520490L,
-    0x55495240409489L,0x4980c24c34184184L,0x30d061061001041bL,0x184005556d260309L,
-    0x51b4981024e34184L,0x40938d0610610010L,0x492492495546d260L,0x2492492492492492L,
+    0x20c0600000010000L,0x40000000001L,0xb6db6d4830180L,0x4812900824800010L,
+    0x2092000040000082L,0x618000b659254a40L,0x86c301b6c0618018L,0xdb01860061860001L,
+    0x81861800075baed6L,0x186e381b70081cL,0xe56dc02072061860L,0x61201001200075b8L,
+    0x480000480492080L,0x52b5248201848040L,0x880812810012000bL,0x4004800004a4492L,
+    0xb529124a20204aL,0x49b68061201061a0L,0x8480418680018483L,0x1a000752ad26da01L,
+    0x4a349b6808128106L,0xa0204a0418680018L,0x492492497528d26dL,0x2492492492492492L,
     0x9249249249249249L,0x4924924924924924L,0x2492492492492492L,0x9249249249249249L,
     0x4924924924924924L,0x2492492492492492L,0x9249249249249249L,0x4924924924924924L,
     0x2492492492492492L,0x9249249249249249L,0x4924924924924924L,0x2492492492492492L,
@@ -182,36 +182,36 @@
   //   0 -> [(0, 0)]
   //   1 -> [(0, 2)]
   //   2 -> [(0, 1)]
-  //   3 -> [(0, 2), (1, 2)]
-  //   4 -> [(0, 1), (1, 1)]
+  //   3 -> [(0, 1), (1, 1)]
+  //   4 -> [(0, 2), (1, 2)]
   //   5 -> [(0, 2), (2, 1)]
   //   6 -> [(0, 1), (2, 2)]
-  //   7 -> [(0, 2), (1, 2), (2, 2)]
-  //   8 -> [(0, 1), (2, 1)]
-  //   9 -> [(0, 2), (2, 2)]
-  //   10 -> [(0, 1), (1, 1), (2, 1)]
-  //   11 -> [(0, 2), (1, 2), (2, 2), (3, 2)]
-  //   12 -> [(0, 2), (2, 1), (3, 1)]
-  //   13 -> [(0, 2), (3, 2)]
-  //   14 -> [(0, 2), (2, 2), (3, 2)]
-  //   15 -> [(0, 2), (1, 2), (3, 1)]
-  //   16 -> [(0, 2), (1, 2), (3, 2)]
-  //   17 -> [(0, 1), (2, 2), (3, 2)]
-  //   18 -> [(0, 2), (3, 1)]
-  //   19 -> [(0, 1), (3, 2)]
-  //   20 -> [(0, 1), (1, 1), (3, 2)]
+  //   7 -> [(0, 2), (2, 2)]
+  //   8 -> [(0, 1), (1, 1), (2, 1)]
+  //   9 -> [(0, 2), (1, 2), (2, 2)]
+  //   10 -> [(0, 1), (2, 1)]
+  //   11 -> [(0, 2), (3, 2)]
+  //   12 -> [(0, 2), (1, 2), (3, 2)]
+  //   13 -> [(0, 2), (1, 2), (2, 2), (3, 2)]
+  //   14 -> [(0, 1), (2, 2), (3, 2)]
+  //   15 -> [(0, 2), (3, 1)]
+  //   16 -> [(0, 1), (3, 2)]
+  //   17 -> [(0, 1), (1, 1), (3, 2)]
+  //   18 -> [(0, 2), (1, 2), (3, 1)]
+  //   19 -> [(0, 2), (2, 2), (3, 2)]
+  //   20 -> [(0, 2), (2, 1), (3, 1)]
   //   21 -> [(0, 2), (2, 1), (4, 2)]
   //   22 -> [(0, 2), (1, 2), (4, 2)]
   //   23 -> [(0, 2), (1, 2), (3, 2), (4, 2)]
-  //   24 -> [(0, 2), (2, 2), (4, 2)]
-  //   25 -> [(0, 2), (2, 2), (3, 2), (4, 2)]
-  //   26 -> [(0, 2), (3, 2), (4, 2)]
+  //   24 -> [(0, 2), (2, 2), (3, 2), (4, 2)]
+  //   25 -> [(0, 2), (3, 2), (4, 2)]
+  //   26 -> [(0, 2), (1, 2), (2, 2), (4, 2)]
   //   27 -> [(0, 2), (1, 2), (2, 2), (3, 2), (4, 2)]
   //   28 -> [(0, 2), (4, 2)]
-  //   29 -> [(0, 2), (1, 2), (2, 2), (4, 2)]
+  //   29 -> [(0, 2), (2, 2), (4, 2)]
   
   
   public Lev2ParametricDescription(int w) {
-    super(w, 2, new int[] {0,2,1,1,0,-1,0,0,-1,0,-1,-1,-2,-1,-1,-2,-1,-1,-2,-1,-1,-2,-2,-2,-2,-2,-2,-2,-2,-2});
+    super(w, 2, new int[] {0,2,1,0,1,-1,0,0,-1,0,-1,-1,-1,-1,-1,-2,-1,-1,-2,-1,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2});
   }
 }
