Index: lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java	(revision 1c7777cc558c2fec0a7c145e2b2194790ff2ad6a)
+++ lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java	(revision )
@@ -50,6 +50,7 @@
 import org.apache.lucene.search.BooleanClause;
 import org.apache.lucene.search.BooleanQuery;
 import org.apache.lucene.search.BoostQuery;
+import org.apache.lucene.search.CheckHits;
 import org.apache.lucene.search.DocIdSetIterator;
 import org.apache.lucene.search.Explanation;
 import org.apache.lucene.search.FieldDoc;
@@ -231,6 +232,8 @@
 
     ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);
 
+    CheckHits.checkHitCollector(random(), fullQuery.build(), "country", s, new int[] {2});
+
     s.search(fullQuery.build(), c);
     
     TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);
@@ -1757,6 +1760,5 @@
     r.close();
     dir.close();
   }
-
-  
+
 }
Index: lucene/test-framework/src/java/org/apache/lucene/search/CheckHits.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/search/CheckHits.java	(revision 1c7777cc558c2fec0a7c145e2b2194790ff2ad6a)
+++ lucene/test-framework/src/java/org/apache/lucene/search/CheckHits.java	(revision )
@@ -346,6 +346,10 @@
     if (expl.getDescription().endsWith("computed from:")) {
       return; // something more complicated.
     }
+    String descr = expl.getDescription().toLowerCase(Locale.ROOT);
+    if (descr.startsWith("score based on child doc range")) {
+      Assert.assertTrue("Child doc explanations are missing", detail.length > 0);
+    }
     if (detail.length > 0) {
       if (detail.length==1) {
         // simple containment, unless it's a freq of: (which lets a query explain how the freq is calculated), 
@@ -357,7 +361,6 @@
         // - end with one of: "product of:", "sum of:", "max of:", or
         // - have "max plus <x> times others" (where <x> is float).
         float x = 0;
-        String descr = expl.getDescription().toLowerCase(Locale.ROOT);
         boolean productOf = descr.endsWith("product of:");
         boolean sumOf = descr.endsWith("sum of:");
         boolean maxOf = descr.endsWith("max of:");
