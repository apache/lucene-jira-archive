Index: lucene/core/src/java/org/apache/lucene/search/ScoringRewrite.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/ScoringRewrite.java	(revision 1328214)
+++ lucene/core/src/java/org/apache/lucene/search/ScoringRewrite.java	(working copy)
@@ -47,7 +47,7 @@
    *  BooleanQuery.TooManyClauses} if the number of terms
    *  exceeds {@link BooleanQuery#getMaxClauseCount}.
    *
-   *  @see #setRewriteMethod */
+   *  @see MultiTermQuery#setRewriteMethod */
   public final static ScoringRewrite<BooleanQuery> SCORING_BOOLEAN_QUERY_REWRITE = new ScoringRewrite<BooleanQuery>() {
     @Override
     protected BooleanQuery getTopLevelQuery() {
@@ -83,7 +83,7 @@
    *  BooleanQuery.TooManyClauses} if the number of terms
    *  exceeds {@link BooleanQuery#getMaxClauseCount}.
    *
-   *  @see #setRewriteMethod */
+   *  @see MultiTermQuery#setRewriteMethod */
   public final static RewriteMethod CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE = new RewriteMethod() {
     @Override
     public Query rewrite(IndexReader reader, MultiTermQuery query) throws IOException {
Index: lucene/core/src/java/org/apache/lucene/search/BoostAttribute.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/BoostAttribute.java	(revision 1328214)
+++ lucene/core/src/java/org/apache/lucene/search/BoostAttribute.java	(working copy)
@@ -20,6 +20,7 @@
 import org.apache.lucene.util.Attribute;
 import org.apache.lucene.util.AttributeSource; // javadocs only
 import org.apache.lucene.index.TermsEnum; // javadocs only
+import org.apache.lucene.index.Terms; // javadocs only
 
 /** Add this {@link Attribute} to a {@link TermsEnum} returned by {@link MultiTermQuery#getTermsEnum(Terms,AttributeSource)}
  * and update the boost on each returned term. This enables to control the boost factor
Index: lucene/core/src/java/org/apache/lucene/search/FieldValueHitQueue.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/FieldValueHitQueue.java	(revision 1328214)
+++ lucene/core/src/java/org/apache/lucene/search/FieldValueHitQueue.java	(working copy)
@@ -66,10 +66,10 @@
     }
 
     /**
-     * Returns whether <code>a</code> is less relevant than <code>b</code>.
-     * @param a ScoreDoc
-     * @param b ScoreDoc
-     * @return <code>true</code> if document <code>a</code> should be sorted after document <code>b</code>.
+     * Returns whether <code>hitA</code> is less relevant than <code>hitB</code>.
+     * @param hitA Entry
+     * @param hitB Entry
+     * @return <code>true</code> if document <code>hitA</code> should be sorted after document <code>hitB</code>.
      */
     @Override
     protected boolean lessThan(final Entry hitA, final Entry hitB) {
@@ -201,7 +201,7 @@
    * 
    * @param entry The Entry used to create a FieldDoc
    * @return The newly created FieldDoc
-   * @see Searchable#search(Weight,Filter,int,Sort)
+   * @see IndexSearcher#search(Query,Filter,int,Sort)
    */
   FieldDoc fillFields(final Entry entry) {
     final int n = comparators.length;
Index: lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery.java	(revision 1328214)
+++ lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery.java	(working copy)
@@ -34,6 +34,7 @@
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.NumericUtils;
 import org.apache.lucene.util.ToStringUtils;
+import org.apache.lucene.index.Term; // for javadocs
 
 /**
  * <p>A {@link Query} that matches numeric values within a
Index: lucene/core/src/java/org/apache/lucene/search/ConstantScoreAutoRewrite.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/ConstantScoreAutoRewrite.java	(revision 1328214)
+++ lucene/core/src/java/org/apache/lucene/search/ConstantScoreAutoRewrite.java	(working copy)
@@ -47,7 +47,7 @@
 
   /** If the number of terms in this query is equal to or
    *  larger than this setting then {@link
-   *  #CONSTANT_SCORE_FILTER_REWRITE} is used. */
+   *  MultiTermQuery#CONSTANT_SCORE_FILTER_REWRITE} is used. */
   public void setTermCountCutoff(int count) {
     termCountCutoff = count;
   }
@@ -60,7 +60,7 @@
   /** If the number of documents to be visited in the
    *  postings exceeds this specified percentage of the
    *  maxDoc() for the index, then {@link
-   *  #CONSTANT_SCORE_FILTER_REWRITE} is used.
+   *  MultiTermQuery#CONSTANT_SCORE_FILTER_REWRITE} is used.
    *  @param percent 0.0 to 100.0 */
   public void setDocCountPercent(double percent) {
     docCountPercent = percent;
Index: lucene/core/src/java/org/apache/lucene/search/MaxNonCompetitiveBoostAttribute.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/MaxNonCompetitiveBoostAttribute.java	(revision 1328214)
+++ lucene/core/src/java/org/apache/lucene/search/MaxNonCompetitiveBoostAttribute.java	(working copy)
@@ -20,6 +20,7 @@
 import org.apache.lucene.util.Attribute;
 import org.apache.lucene.util.AttributeSource; // javadocs only
 import org.apache.lucene.util.BytesRef;
+import org.apache.lucene.index.Terms; // javadocs only
 
 /** Add this {@link Attribute} to a fresh {@link AttributeSource} before calling
  * {@link MultiTermQuery#getTermsEnum(Terms,AttributeSource)}.
Index: lucene/core/src/java/org/apache/lucene/search/similarities/SimilarityBase.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/similarities/SimilarityBase.java	(revision 1328214)
+++ lucene/core/src/java/org/apache/lucene/search/similarities/SimilarityBase.java	(working copy)
@@ -268,8 +268,8 @@
   
   /** Delegates the {@link #score(int, int)} and
    * {@link #explain(int, Explanation)} methods to
-   * {@link SimilarityBase#score(BasicStats, float, int)} and
-   * {@link SimilarityBase#explain(BasicStats, int, Explanation, int)},
+   * {@link SimilarityBase#score(BasicStats, float, float)} and
+   * {@link SimilarityBase#explain(BasicStats, int, Explanation, float)},
    * respectively.
    */
   private class BasicExactDocScorer extends ExactSimScorer {
@@ -295,10 +295,10 @@
     }
   }
   
-  /** Delegates the {@link #score(int, int)} and
+  /** Delegates the {@link #score(int, float)} and
    * {@link #explain(int, Explanation)} methods to
-   * {@link SimilarityBase#score(BasicStats, float, int)} and
-   * {@link SimilarityBase#explain(BasicStats, int, Explanation, int)},
+   * {@link SimilarityBase#score(BasicStats, float, float)} and
+   * {@link SimilarityBase#explain(BasicStats, int, Explanation, float)},
    * respectively.
    */
   private class BasicSloppyDocScorer extends SloppySimScorer {
Index: lucene/core/src/java/org/apache/lucene/search/IndexSearcher.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/IndexSearcher.java	(revision 1328214)
+++ lucene/core/src/java/org/apache/lucene/search/IndexSearcher.java	(working copy)
@@ -46,6 +46,7 @@
 import org.apache.lucene.util.ReaderUtil;
 import org.apache.lucene.util.TermContext;
 import org.apache.lucene.util.ThreadInterruptedException;
+import org.apache.lucene.index.IndexWriter; // javadocs
 
 /** Implements search over a single IndexReader.
  *
Index: lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum.java	(revision 1328214)
+++ lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum.java	(working copy)
@@ -405,12 +405,8 @@
      * <code>minSimilarity</code>.
      * <p>
      * After calling the constructor the enumeration is already pointing to the first 
-     * valid term if such a term exists. 
-     * 
-     * @param reader Delivers terms.
-     * @param term Pattern term.
-     * @param minSimilarity Minimum required similarity for terms from the reader. Default value is 0.5f.
-     * @param prefixLength Length of required common prefix. Default value is 0.
+     * valid term if such a term exists.
+     *
      * @throws IOException
      */
     public LinearFuzzyTermsEnum() throws IOException {
Index: lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread.java	(revision 1328214)
+++ lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread.java	(working copy)
@@ -40,7 +40,7 @@
 public class DocumentsWriterPerThread {
 
   /**
-   * The IndexingChain must define the {@link #getChain(DocumentsWriter)} method
+   * The IndexingChain must define the {@link #getChain(DocumentsWriterPerThread)} method
    * which returns the DocConsumer that the DocumentsWriter calls to process the
    * documents.
    */
Index: lucene/core/src/java/org/apache/lucene/index/FieldInvertState.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/FieldInvertState.java	(revision 1328214)
+++ lucene/core/src/java/org/apache/lucene/index/FieldInvertState.java	(working copy)
@@ -50,8 +50,7 @@
   }
 
   /**
-   * Re-initialize the state, using this boost value.
-   * @param docBoost boost value to use.
+   * Re-initialize the state
    */
   void reset() {
     position = 0;
Index: lucene/core/src/java/org/apache/lucene/index/IndexWriter.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/IndexWriter.java	(revision 1328214)
+++ lucene/core/src/java/org/apache/lucene/index/IndexWriter.java	(working copy)
@@ -292,7 +292,7 @@
    * learn, improve and iterate.</p>
    *
    * <p>The resulting reader supports {@link
-   * IndexReader#reopen}, but that call will simply forward
+   * DirectoryReader#openIfChanged}, but that call will simply forward
    * back to this method (though this may change in the
    * future).</p>
    *
@@ -303,7 +303,7 @@
    * file descriptors, CPU time) will be consumed.</p>
    *
    * <p>For lower latency on reopening a reader, you should
-   * call {@link #setMergedSegmentWarmer} to
+   * call {@link IndexWriterConfig#setMergedSegmentWarmer} to
    * pre-warm a newly merged segment before it's committed
    * to the index.  This is important for minimizing
    * index-to-search delay after a large merge.  </p>
@@ -1948,11 +1948,11 @@
   /**
    * Prepares the {@link SegmentInfo} for the new flushed segment and persists
    * the deleted documents {@link MutableBits}. Use
-   * {@link #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)} to
+   * {@link #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes, FrozenBufferedDeletes)} to
    * publish the returned {@link SegmentInfo} together with its segment private
    * delete packet.
    * 
-   * @see #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)
+   * @see #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes, FrozenBufferedDeletes)
    */
   SegmentInfo prepareFlushedSegment(FlushedSegment flushedSegment) throws IOException {
     assert flushedSegment != null;
Index: lucene/core/src/java/org/apache/lucene/document/Field.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/document/Field.java	(revision 1328214)
+++ lucene/core/src/java/org/apache/lucene/document/Field.java	(working copy)
@@ -32,6 +32,7 @@
 import org.apache.lucene.index.IndexableFieldType;
 import org.apache.lucene.index.Norm;
 import org.apache.lucene.util.BytesRef;
+import org.apache.lucene.index.FieldInvertState; // javadocs
 
 /**
  * Expert: directly creata a field for a document.  Most
