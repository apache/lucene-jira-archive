Index: lucene/src/test/org/apache/lucene/search/TestBoolean2.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestBoolean2.java	(revision 1142601)
+++ lucene/src/test/org/apache/lucene/search/TestBoolean2.java	(working copy)
@@ -26,8 +26,6 @@
 import org.apache.lucene.index.RandomIndexWriter;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.index.IndexReader;
-import org.apache.lucene.queryParser.ParseException;
-import org.apache.lucene.queryParser.QueryParser;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.MockDirectoryWrapper;
 import org.apache.lucene.store.RAMDirectory;
@@ -117,16 +115,10 @@
     "w1 w3 xx w2 yy w3"
   };
 
-  public Query makeQuery(String queryText) throws ParseException {
-    Query q = (new QueryParser(TEST_VERSION_CURRENT, field, new MockAnalyzer(random))).parse(queryText);
-    return q;
-  }
-
-  public void queriesTest(String queryText, int[] expDocNrs) throws Exception {
+  public void queriesTest(Query query, int[] expDocNrs) throws Exception {
 //System.out.println();
 //System.out.println("Query: " + queryText);
 
-    Query query = makeQuery(queryText);
     TopScoreDocCollector collector = TopScoreDocCollector.create(1000, false);
     searcher.search(query, null, collector);
     ScoreDoc[] hits1 = collector.topDocs().scoreDocs;
@@ -143,70 +135,97 @@
 
   @Test
   public void testQueries01() throws Exception {
-    String queryText = "+w3 +xx";
+    BooleanQuery q = new BooleanQuery();
+    q.add(new TermQuery(new Term(field, "w3")), BooleanClause.Occur.MUST);
+    q.add(new TermQuery(new Term(field, "xx")), BooleanClause.Occur.MUST);
     int[] expDocNrs = {2,3};
-    queriesTest(queryText, expDocNrs);
+    queriesTest(q, expDocNrs);
   }
 
   @Test
   public void testQueries02() throws Exception {
-    String queryText = "+w3 xx";
+    BooleanQuery q = new BooleanQuery();
+    q.add(new TermQuery(new Term(field, "w3")), BooleanClause.Occur.MUST);
+    q.add(new TermQuery(new Term(field, "xx")), BooleanClause.Occur.SHOULD);
     int[] expDocNrs = {2,3,1,0};
-    queriesTest(queryText, expDocNrs);
+    queriesTest(q, expDocNrs);
   }
 
   @Test
   public void testQueries03() throws Exception {
-    String queryText = "w3 xx";
+    BooleanQuery q = new BooleanQuery();
+    q.add(new TermQuery(new Term(field, "w3")), BooleanClause.Occur.SHOULD);
+    q.add(new TermQuery(new Term(field, "xx")), BooleanClause.Occur.SHOULD);
     int[] expDocNrs = {2,3,1,0};
-    queriesTest(queryText, expDocNrs);
+    queriesTest(q, expDocNrs);
   }
 
   @Test
   public void testQueries04() throws Exception {
-    String queryText = "w3 -xx";
+    BooleanQuery q = new BooleanQuery();
+    q.add(new TermQuery(new Term(field, "w3")), BooleanClause.Occur.SHOULD);
+    q.add(new TermQuery(new Term(field, "xx")), BooleanClause.Occur.MUST_NOT);
     int[] expDocNrs = {1,0};
-    queriesTest(queryText, expDocNrs);
+    queriesTest(q, expDocNrs);
   }
 
   @Test
   public void testQueries05() throws Exception {
-    String queryText = "+w3 -xx";
+    BooleanQuery q = new BooleanQuery();
+    q.add(new TermQuery(new Term(field, "w3")), BooleanClause.Occur.MUST);
+    q.add(new TermQuery(new Term(field, "xx")), BooleanClause.Occur.MUST_NOT);
     int[] expDocNrs = {1,0};
-    queriesTest(queryText, expDocNrs);
+    queriesTest(q, expDocNrs);
   }
 
   @Test
   public void testQueries06() throws Exception {
-    String queryText = "+w3 -xx -w5";
+    BooleanQuery q = new BooleanQuery();
+    q.add(new TermQuery(new Term(field, "w3")), BooleanClause.Occur.MUST);
+    q.add(new TermQuery(new Term(field, "xx")), BooleanClause.Occur.MUST_NOT);
+    q.add(new TermQuery(new Term(field, "w5")), BooleanClause.Occur.MUST_NOT);
     int[] expDocNrs = {1};
-    queriesTest(queryText, expDocNrs);
+    queriesTest(q, expDocNrs);
   }
 
   @Test
   public void testQueries07() throws Exception {
-    String queryText = "-w3 -xx -w5";
+    BooleanQuery q = new BooleanQuery();
+    q.add(new TermQuery(new Term(field, "w3")), BooleanClause.Occur.MUST_NOT);
+    q.add(new TermQuery(new Term(field, "xx")), BooleanClause.Occur.MUST_NOT);
+    q.add(new TermQuery(new Term(field, "w5")), BooleanClause.Occur.MUST_NOT);
     int[] expDocNrs = {};
-    queriesTest(queryText, expDocNrs);
+    queriesTest(q, expDocNrs);
   }
 
   @Test
   public void testQueries08() throws Exception {
-    String queryText = "+w3 xx -w5";
+    BooleanQuery q = new BooleanQuery();
+    q.add(new TermQuery(new Term(field, "w3")), BooleanClause.Occur.MUST);
+    q.add(new TermQuery(new Term(field, "xx")), BooleanClause.Occur.SHOULD);
+    q.add(new TermQuery(new Term(field, "w5")), BooleanClause.Occur.MUST_NOT);
     int[] expDocNrs = {2,3,1};
-    queriesTest(queryText, expDocNrs);
+    queriesTest(q, expDocNrs);
   }
 
   @Test
   public void testQueries09() throws Exception {
-    String queryText = "+w3 +xx +w2 zz";
+    BooleanQuery q = new BooleanQuery();
+    q.add(new TermQuery(new Term(field, "w3")), BooleanClause.Occur.MUST);
+    q.add(new TermQuery(new Term(field, "xx")), BooleanClause.Occur.MUST);
+    q.add(new TermQuery(new Term(field, "w2")), BooleanClause.Occur.MUST);
+    q.add(new TermQuery(new Term(field, "zz")), BooleanClause.Occur.SHOULD);
     int[] expDocNrs = {2, 3};
-    queriesTest(queryText, expDocNrs);
+    queriesTest(q, expDocNrs);
   }
 
   @Test
   public void testQueries10() throws Exception {
-    String queryText = "+w3 +xx +w2 zz";
+    BooleanQuery q = new BooleanQuery();
+    q.add(new TermQuery(new Term(field, "w3")), BooleanClause.Occur.MUST);
+    q.add(new TermQuery(new Term(field, "xx")), BooleanClause.Occur.MUST);
+    q.add(new TermQuery(new Term(field, "w2")), BooleanClause.Occur.MUST);
+    q.add(new TermQuery(new Term(field, "zz")), BooleanClause.Occur.SHOULD);
     int[] expDocNrs = {2, 3};
     SimilarityProvider oldSimilarity = searcher.getSimilarityProvider();
     try {
@@ -216,7 +235,7 @@
           return overlap / ((float)maxOverlap - 1);
         }
       });
-      queriesTest(queryText, expDocNrs);
+      queriesTest(q, expDocNrs);
     } finally {
       searcher.setSimilarityProvider(oldSimilarity);
     }
