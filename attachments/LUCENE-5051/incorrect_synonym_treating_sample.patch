Index: solr/example/solr/collection1/conf/schema.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!--\n Licensed to the Apache Software Foundation (ASF) under one or more\n contributor license agreements.  See the NOTICE file distributed with\n this work for additional information regarding copyright ownership.\n The ASF licenses this file to You under the Apache License, Version 2.0\n (the \"License\"); you may not use this file except in compliance with\n the License.  You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n-->\n\n<!--  \n This is the Solr schema file. This file should be named \"schema.xml\" and\n should be in the conf directory under the solr home\n (i.e. ./solr/conf/schema.xml by default) \n or located where the classloader for the Solr webapp can find it.\n\n This example schema is the recommended starting point for users.\n It should be kept correct and concise, usable out-of-the-box.\n\n For more information, on how to customize this file, please see\n http://wiki.apache.org/solr/SchemaXml\n\n PERFORMANCE NOTE: this schema includes many optional features and should not\n be used for benchmarking.  To improve performance one could\n  - set stored=\"false\" for all fields possible (esp large fields) when you\n    only need to search on the field but don't need to return the original\n    value.\n  - set indexed=\"false\" if you don't need to search on the field, but only\n    return the field as a result of searching on other indexed fields.\n  - remove all unneeded copyField statements\n  - for best index size and searching performance, set \"index\" to false\n    for all general text fields, use copyField to copy them to the\n    catchall \"text\" field, and use that for searching.\n  - For maximum indexing performance, use the StreamingUpdateSolrServer\n    java client.\n  - Remember to run the JVM in server mode, and use a higher logging level\n    that avoids logging every request\n-->\n\n<schema name=\"example\" version=\"1.5\">\n  <!-- attribute \"name\" is the name of this schema and is only used for display purposes.\n       version=\"x.y\" is Solr's version number for the schema syntax and \n       semantics.  It should not normally be changed by applications.\n\n       1.0: multiValued attribute did not exist, all fields are multiValued \n            by nature\n       1.1: multiValued attribute introduced, false by default \n       1.2: omitTermFreqAndPositions attribute introduced, true by default \n            except for text fields.\n       1.3: removed optional field compress feature\n       1.4: autoGeneratePhraseQueries attribute introduced to drive QueryParser\n            behavior when a single string produces multiple tokens.  Defaults \n            to off for version >= 1.4\n       1.5: omitNorms defaults to true for primitive field types \n            (int, float, boolean, string...)\n     -->\n\n <fields>\n   <!-- Valid attributes for fields:\n     name: mandatory - the name for the field\n     type: mandatory - the name of a field type from the \n       <types> fieldType section\n     indexed: true if this field should be indexed (searchable or sortable)\n     stored: true if this field should be retrievable\n     docValues: true if this field should have doc values. Doc values are\n       useful for faceting, grouping, sorting and function queries. Although not\n       required, doc values will make the index faster to load, more\n       NRT-friendly and more memory-efficient. They however come with some\n       limitations: they are currently only supported by StrField, UUIDField\n       and all Trie*Fields, and depending on the field type, they might\n       require the field to be single-valued, be required or have a default\n       value (check the documentation of the field type you're interested in\n       for more information)\n     multiValued: true if this field may contain multiple values per document\n     omitNorms: (expert) set to true to omit the norms associated with\n       this field (this disables length normalization and index-time\n       boosting for the field, and saves some memory).  Only full-text\n       fields or fields that need an index-time boost need norms.\n       Norms are omitted for primitive (non-analyzed) types by default.\n     termVectors: [false] set to true to store the term vector for a\n       given field.\n       When using MoreLikeThis, fields used for similarity should be\n       stored for best performance.\n     termPositions: Store position information with the term vector.  \n       This will increase storage costs.\n     termOffsets: Store offset information with the term vector. This \n       will increase storage costs.\n     required: The field is required.  It will throw an error if the\n       value does not exist\n     default: a value that should be used if no value is specified\n       when adding a document.\n   -->\n\n   <!-- field names should consist of alphanumeric or underscore characters only and\n      not start with a digit.  This is not currently strictly enforced,\n      but other field names will not have first class support from all components\n      and back compatibility is not guaranteed.  Names with both leading and\n      trailing underscores (e.g. _version_) are reserved.\n   -->\n        \n   <field name=\"id\" type=\"string\" indexed=\"true\" stored=\"true\" required=\"true\" multiValued=\"false\" /> \n   <field name=\"sku\" type=\"text_en_splitting_tight\" indexed=\"true\" stored=\"true\" omitNorms=\"true\"/>\n   <field name=\"name\" type=\"text_general\" indexed=\"true\" stored=\"true\"/>\n   <field name=\"manu\" type=\"text_general\" indexed=\"true\" stored=\"true\" omitNorms=\"true\"/>\n   <field name=\"cat\" type=\"string\" indexed=\"true\" stored=\"true\" multiValued=\"true\"/>\n   <field name=\"features\" type=\"text_general\" indexed=\"true\" stored=\"true\" multiValued=\"true\"/>\n   <field name=\"includes\" type=\"text_general\" indexed=\"true\" stored=\"true\" termVectors=\"true\" termPositions=\"true\" termOffsets=\"true\" />\n\n   <field name=\"weight\" type=\"float\" indexed=\"true\" stored=\"true\"/>\n   <field name=\"price\"  type=\"float\" indexed=\"true\" stored=\"true\"/>\n   <field name=\"popularity\" type=\"int\" indexed=\"true\" stored=\"true\" />\n   <field name=\"inStock\" type=\"boolean\" indexed=\"true\" stored=\"true\" />\n\n   <field name=\"store\" type=\"location\" indexed=\"true\" stored=\"true\"/>\n\n   <!-- Common metadata fields, named specifically to match up with\n     SolrCell metadata when parsing rich documents such as Word, PDF.\n     Some fields are multiValued only because Tika currently may return\n     multiple values for them. Some metadata is parsed from the documents,\n     but there are some which come from the client context:\n       \"content_type\": From the HTTP headers of incoming stream\n       \"resourcename\": From SolrCell request param resource.name\n   -->\n   <field name=\"title\" type=\"text_general\" indexed=\"true\" stored=\"true\" multiValued=\"true\"/>\n   <field name=\"subject\" type=\"text_general\" indexed=\"true\" stored=\"true\"/>\n   <field name=\"description\" type=\"text_general\" indexed=\"true\" stored=\"true\"/>\n   <field name=\"comments\" type=\"text_general\" indexed=\"true\" stored=\"true\"/>\n   <field name=\"author\" type=\"text_general\" indexed=\"true\" stored=\"true\"/>\n   <field name=\"keywords\" type=\"text_general\" indexed=\"true\" stored=\"true\"/>\n   <field name=\"category\" type=\"text_general\" indexed=\"true\" stored=\"true\"/>\n   <field name=\"resourcename\" type=\"text_general\" indexed=\"true\" stored=\"true\"/>\n   <field name=\"url\" type=\"text_general\" indexed=\"true\" stored=\"true\"/>\n   <field name=\"content_type\" type=\"string\" indexed=\"true\" stored=\"true\" multiValued=\"true\"/>\n   <field name=\"last_modified\" type=\"date\" indexed=\"true\" stored=\"true\"/>\n   <field name=\"links\" type=\"string\" indexed=\"true\" stored=\"true\" multiValued=\"true\"/>\n\n   <!-- Main body of document extracted by SolrCell.\n        NOTE: This field is not indexed by default, since it is also copied to \"text\"\n        using copyField below. This is to save space. Use this field for returning and\n        highlighting document content. Use the \"text\" field to search the content. -->\n   <field name=\"content\" type=\"text_general\" indexed=\"false\" stored=\"true\" multiValued=\"true\"/>\n   \n\n   <!-- catchall field, containing all other searchable text fields (implemented\n        via copyField further on in this schema  -->\n   <field name=\"text\" type=\"text_general\" indexed=\"true\" stored=\"false\" multiValued=\"true\"/>\n\n   <!-- catchall text field that indexes tokens both normally and in reverse for efficient\n        leading wildcard queries. -->\n   <field name=\"text_rev\" type=\"text_general_rev\" indexed=\"true\" stored=\"false\" multiValued=\"true\"/>\n\n   <!-- non-tokenized version of manufacturer to make it easier to sort or group\n        results by manufacturer.  copied from \"manu\" via copyField -->\n   <field name=\"manu_exact\" type=\"string\" indexed=\"true\" stored=\"false\"/>\n\n   <field name=\"payloads\" type=\"payloads\" indexed=\"true\" stored=\"true\"/>\n\n   <field name=\"_version_\" type=\"long\" indexed=\"true\" stored=\"true\"/>\n\n   <!--\n     Some fields such as popularity and manu_exact could be modified to\n     leverage doc values:\n     <field name=\"popularity\" type=\"int\" indexed=\"true\" stored=\"true\" docValues=\"true\" default=\"0\" />\n     <field name=\"manu_exact\" type=\"string\" indexed=\"false\" stored=\"false\" docValues=\"true\" default=\"\" />\n\n     Although it would make indexing slightly slower and the index bigger, it\n     would also make the index faster to load, more memory-efficient and more\n     NRT-friendly.\n     -->\n\n   <!-- Dynamic field definitions allow using convention over configuration\n       for fields via the specification of patterns to match field names. \n       EXAMPLE:  name=\"*_i\" will match any field ending in _i (like myid_i, z_i)\n       RESTRICTION: the glob-like pattern in the name attribute must have\n       a \"*\" only at the start or the end.  -->\n   \n   <dynamicField name=\"*_i\"  type=\"int\"    indexed=\"true\"  stored=\"true\"/>\n   <dynamicField name=\"*_is\" type=\"int\"    indexed=\"true\"  stored=\"true\"  multiValued=\"true\"/>\n   <dynamicField name=\"*_s\"  type=\"string\"  indexed=\"true\"  stored=\"true\" />\n   <dynamicField name=\"*_ss\" type=\"string\"  indexed=\"true\"  stored=\"true\" multiValued=\"true\"/>\n   <dynamicField name=\"*_l\"  type=\"long\"   indexed=\"true\"  stored=\"true\"/>\n   <dynamicField name=\"*_ls\" type=\"long\"   indexed=\"true\"  stored=\"true\"  multiValued=\"true\"/>\n   <dynamicField name=\"*_t\"  type=\"text_general\"    indexed=\"true\"  stored=\"true\"/>\n   <dynamicField name=\"*_txt\" type=\"text_general\"   indexed=\"true\"  stored=\"true\" multiValued=\"true\"/>\n   <dynamicField name=\"*_en\"  type=\"text_en\"    indexed=\"true\"  stored=\"true\" multiValued=\"true\"/>\n   <dynamicField name=\"*_b\"  type=\"boolean\" indexed=\"true\" stored=\"true\"/>\n   <dynamicField name=\"*_bs\" type=\"boolean\" indexed=\"true\" stored=\"true\"  multiValued=\"true\"/>\n   <dynamicField name=\"*_f\"  type=\"float\"  indexed=\"true\"  stored=\"true\"/>\n   <dynamicField name=\"*_fs\" type=\"float\"  indexed=\"true\"  stored=\"true\"  multiValued=\"true\"/>\n   <dynamicField name=\"*_d\"  type=\"double\" indexed=\"true\"  stored=\"true\"/>\n   <dynamicField name=\"*_ds\" type=\"double\" indexed=\"true\"  stored=\"true\"  multiValued=\"true\"/>\n\n   <!-- Type used to index the lat and lon components for the \"location\" FieldType -->\n   <dynamicField name=\"*_coordinate\"  type=\"tdouble\" indexed=\"true\"  stored=\"false\" />\n\n   <dynamicField name=\"*_dt\"  type=\"date\"    indexed=\"true\"  stored=\"true\"/>\n   <dynamicField name=\"*_dts\" type=\"date\"    indexed=\"true\"  stored=\"true\" multiValued=\"true\"/>\n   <dynamicField name=\"*_p\"  type=\"location\" indexed=\"true\" stored=\"true\"/>\n\n   <!-- some trie-coded dynamic fields for faster range queries -->\n   <dynamicField name=\"*_ti\" type=\"tint\"    indexed=\"true\"  stored=\"true\"/>\n   <dynamicField name=\"*_tl\" type=\"tlong\"   indexed=\"true\"  stored=\"true\"/>\n   <dynamicField name=\"*_tf\" type=\"tfloat\"  indexed=\"true\"  stored=\"true\"/>\n   <dynamicField name=\"*_td\" type=\"tdouble\" indexed=\"true\"  stored=\"true\"/>\n   <dynamicField name=\"*_tdt\" type=\"tdate\"  indexed=\"true\"  stored=\"true\"/>\n\n   <dynamicField name=\"*_pi\"  type=\"pint\"    indexed=\"true\"  stored=\"true\"/>\n   <dynamicField name=\"*_c\"   type=\"currency\" indexed=\"true\"  stored=\"true\"/>\n\n   <dynamicField name=\"ignored_*\" type=\"ignored\" multiValued=\"true\"/>\n   <dynamicField name=\"attr_*\" type=\"text_general\" indexed=\"true\" stored=\"true\" multiValued=\"true\"/>\n\n   <dynamicField name=\"random_*\" type=\"random\" />\n\n   <!-- uncomment the following to ignore any fields that don't already match an existing \n        field name or dynamic field, rather than reporting them as an error. \n        alternately, change the type=\"ignored\" to some other type e.g. \"text\" if you want \n        unknown fields indexed and/or stored by default --> \n   <!--dynamicField name=\"*\" type=\"ignored\" multiValued=\"true\" /-->\n   \n </fields>\n\n\n <!-- Field to use to determine and enforce document uniqueness. \n      Unless this field is marked with required=\"false\", it will be a required field\n   -->\n <uniqueKey>id</uniqueKey>\n\n <!-- DEPRECATED: The defaultSearchField is consulted by various query parsers when\n  parsing a query string that isn't explicit about the field.  Machine (non-user)\n  generated queries are best made explicit, or they can use the \"df\" request parameter\n  which takes precedence over this.\n  Note: Un-commenting defaultSearchField will be insufficient if your request handler\n  in solrconfig.xml defines \"df\", which takes precedence. That would need to be removed.\n <defaultSearchField>text</defaultSearchField> -->\n\n <!-- DEPRECATED: The defaultOperator (AND|OR) is consulted by various query parsers\n  when parsing a query string to determine if a clause of the query should be marked as\n  required or optional, assuming the clause isn't already marked by some operator.\n  The default is OR, which is generally assumed so it is not a good idea to change it\n  globally here.  The \"q.op\" request parameter takes precedence over this.\n <solrQueryParser defaultOperator=\"OR\"/> -->\n\n  <!-- copyField commands copy one field to another at the time a document\n        is added to the index.  It's used either to index the same field differently,\n        or to add multiple fields to the same field for easier/faster searching.  -->\n\n   <copyField source=\"cat\" dest=\"text\"/>\n   <copyField source=\"name\" dest=\"text\"/>\n   <copyField source=\"manu\" dest=\"text\"/>\n   <copyField source=\"features\" dest=\"text\"/>\n   <copyField source=\"includes\" dest=\"text\"/>\n   <copyField source=\"manu\" dest=\"manu_exact\"/>\n\n   <!-- Copy the price into a currency enabled field (default USD) -->\n   <copyField source=\"price\" dest=\"price_c\"/>\n\n   <!-- Text fields from SolrCell to search by default in our catch-all field -->\n   <copyField source=\"title\" dest=\"text\"/>\n   <copyField source=\"author\" dest=\"text\"/>\n   <copyField source=\"description\" dest=\"text\"/>\n   <copyField source=\"keywords\" dest=\"text\"/>\n   <copyField source=\"content\" dest=\"text\"/>\n   <copyField source=\"content_type\" dest=\"text\"/>\n   <copyField source=\"resourcename\" dest=\"text\"/>\n   <copyField source=\"url\" dest=\"text\"/>\n\n   <!-- Create a string version of author for faceting -->\n   <copyField source=\"author\" dest=\"author_s\"/>\n\t\n   <!-- Above, multiple source fields are copied to the [text] field. \n\t  Another way to map multiple source fields to the same \n\t  destination field is to use the dynamic field syntax. \n\t  copyField also supports a maxChars to copy setting.  -->\n\t   \n   <!-- <copyField source=\"*_t\" dest=\"text\" maxChars=\"3000\"/> -->\n\n   <!-- copy name to alphaNameSort, a field designed for sorting by name -->\n   <!-- <copyField source=\"name\" dest=\"alphaNameSort\"/> -->\n \n  <types>\n    <!-- field type definitions. The \"name\" attribute is\n       just a label to be used by field definitions.  The \"class\"\n       attribute and any other attributes determine the real\n       behavior of the fieldType.\n         Class names starting with \"solr\" refer to java classes in a\n       standard package such as org.apache.solr.analysis\n    -->\n\n    <!-- The StrField type is not analyzed, but indexed/stored verbatim.\n       It supports doc values but in that case the field needs to be\n       single-valued and either required or have a default value.\n      -->\n    <fieldType name=\"string\" class=\"solr.StrField\" sortMissingLast=\"true\" />\n\n    <!-- boolean type: \"true\" or \"false\" -->\n    <fieldType name=\"boolean\" class=\"solr.BoolField\" sortMissingLast=\"true\"/>\n\n    <!-- sortMissingLast and sortMissingFirst attributes are optional attributes are\n         currently supported on types that are sorted internally as strings\n         and on numeric types.\n\t     This includes \"string\",\"boolean\", and, as of 3.5 (and 4.x),\n\t     int, float, long, date, double, including the \"Trie\" variants.\n       - If sortMissingLast=\"true\", then a sort on this field will cause documents\n         without the field to come after documents with the field,\n         regardless of the requested sort order (asc or desc).\n       - If sortMissingFirst=\"true\", then a sort on this field will cause documents\n         without the field to come before documents with the field,\n         regardless of the requested sort order.\n       - If sortMissingLast=\"false\" and sortMissingFirst=\"false\" (the default),\n         then default lucene sorting will be used which places docs without the\n         field first in an ascending sort and last in a descending sort.\n    -->    \n\n    <!--\n      Default numeric field types. For faster range queries, consider the tint/tfloat/tlong/tdouble types.\n\n      These fields support doc values, but they require the field to be\n      single-valued and either be required or have a default value.\n    -->\n    <fieldType name=\"int\" class=\"solr.TrieIntField\" precisionStep=\"0\" positionIncrementGap=\"0\"/>\n    <fieldType name=\"float\" class=\"solr.TrieFloatField\" precisionStep=\"0\" positionIncrementGap=\"0\"/>\n    <fieldType name=\"long\" class=\"solr.TrieLongField\" precisionStep=\"0\" positionIncrementGap=\"0\"/>\n    <fieldType name=\"double\" class=\"solr.TrieDoubleField\" precisionStep=\"0\" positionIncrementGap=\"0\"/>\n\n    <!--\n     Numeric field types that index each value at various levels of precision\n     to accelerate range queries when the number of values between the range\n     endpoints is large. See the javadoc for NumericRangeQuery for internal\n     implementation details.\n\n     Smaller precisionStep values (specified in bits) will lead to more tokens\n     indexed per value, slightly larger index size, and faster range queries.\n     A precisionStep of 0 disables indexing at different precision levels.\n    -->\n    <fieldType name=\"tint\" class=\"solr.TrieIntField\" precisionStep=\"8\" positionIncrementGap=\"0\"/>\n    <fieldType name=\"tfloat\" class=\"solr.TrieFloatField\" precisionStep=\"8\" positionIncrementGap=\"0\"/>\n    <fieldType name=\"tlong\" class=\"solr.TrieLongField\" precisionStep=\"8\" positionIncrementGap=\"0\"/>\n    <fieldType name=\"tdouble\" class=\"solr.TrieDoubleField\" precisionStep=\"8\" positionIncrementGap=\"0\"/>\n\n    <!-- The format for this date field is of the form 1995-12-31T23:59:59Z, and\n         is a more restricted form of the canonical representation of dateTime\n         http://www.w3.org/TR/xmlschema-2/#dateTime    \n         The trailing \"Z\" designates UTC time and is mandatory.\n         Optional fractional seconds are allowed: 1995-12-31T23:59:59.999Z\n         All other components are mandatory.\n\n         Expressions can also be used to denote calculations that should be\n         performed relative to \"NOW\" to determine the value, ie...\n\n               NOW/HOUR\n                  ... Round to the start of the current hour\n               NOW-1DAY\n                  ... Exactly 1 day prior to now\n               NOW/DAY+6MONTHS+3DAYS\n                  ... 6 months and 3 days in the future from the start of\n                      the current day\n                      \n         Consult the DateField javadocs for more information.\n\n         Note: For faster range queries, consider the tdate type\n      -->\n    <fieldType name=\"date\" class=\"solr.TrieDateField\" precisionStep=\"0\" positionIncrementGap=\"0\"/>\n\n    <!-- A Trie based date field for faster date range queries and date faceting. -->\n    <fieldType name=\"tdate\" class=\"solr.TrieDateField\" precisionStep=\"6\" positionIncrementGap=\"0\"/>\n\n\n    <!--Binary data type. The data should be sent/retrieved in as Base64 encoded Strings -->\n    <fieldtype name=\"binary\" class=\"solr.BinaryField\"/>\n\n    <!--\n      Note:\n      These should only be used for compatibility with existing indexes (created with lucene or older Solr versions).\n      Use Trie based fields instead. As of Solr 3.5 and 4.x, Trie based fields support sortMissingFirst/Last\n      \n      Plain numeric field types that store and index the text\n      value verbatim (and hence don't correctly support range queries, since the\n      lexicographic ordering isn't equal to the numeric ordering)\n    -->\n    <fieldType name=\"pint\" class=\"solr.IntField\"/>\n    <fieldType name=\"plong\" class=\"solr.LongField\"/>\n    <fieldType name=\"pfloat\" class=\"solr.FloatField\"/>\n    <fieldType name=\"pdouble\" class=\"solr.DoubleField\"/>\n    <fieldType name=\"pdate\" class=\"solr.DateField\" sortMissingLast=\"true\"/>\n\n    <!-- The \"RandomSortField\" is not used to store or search any\n         data.  You can declare fields of this type it in your schema\n         to generate pseudo-random orderings of your docs for sorting \n         or function purposes.  The ordering is generated based on the field\n         name and the version of the index. As long as the index version\n         remains unchanged, and the same field name is reused,\n         the ordering of the docs will be consistent.  \n         If you want different psuedo-random orderings of documents,\n         for the same version of the index, use a dynamicField and\n         change the field name in the request.\n     -->\n    <fieldType name=\"random\" class=\"solr.RandomSortField\" indexed=\"true\" />\n\n    <!-- solr.TextField allows the specification of custom text analyzers\n         specified as a tokenizer and a list of token filters. Different\n         analyzers may be specified for indexing and querying.\n\n         The optional positionIncrementGap puts space between multiple fields of\n         this type on the same document, with the purpose of preventing false phrase\n         matching across fields.\n\n         For more info on customizing your analyzer chain, please see\n         http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters\n     -->\n\n    <!-- One can also specify an existing Analyzer class that has a\n         default constructor via the class attribute on the analyzer element.\n         Example:\n    <fieldType name=\"text_greek\" class=\"solr.TextField\">\n      <analyzer class=\"org.apache.lucene.analysis.el.GreekAnalyzer\"/>\n    </fieldType>\n    -->\n\n    <!-- A text field that only splits on whitespace for exact matching of words -->\n    <fieldType name=\"text_ws\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer>\n        <tokenizer class=\"solr.WhitespaceTokenizerFactory\"/>\n      </analyzer>\n    </fieldType>\n\n    <!-- A general text field that has reasonable, generic\n         cross-language defaults: it tokenizes with StandardTokenizer,\n\t removes stop words from case-insensitive \"stopwords.txt\"\n\t (empty by default), and down cases.  At query time only, it\n\t also applies synonyms. -->\n    <fieldType name=\"text_general\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer type=\"index\">\n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n        <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"stopwords.txt\" enablePositionIncrements=\"true\" />\n        <!-- in this example, we will only use synonyms at query time\n        <filter class=\"solr.SynonymFilterFactory\" synonyms=\"index_synonyms.txt\" ignoreCase=\"true\" expand=\"false\"/>\n        -->\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n      </analyzer>\n      <analyzer type=\"query\">\n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n        <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"stopwords.txt\" enablePositionIncrements=\"true\" />\n        <filter class=\"solr.SynonymFilterFactory\" synonyms=\"synonyms.txt\" ignoreCase=\"true\" expand=\"true\"/>\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n      </analyzer>\n    </fieldType>\n\n    <!-- A text field with defaults appropriate for English: it\n         tokenizes with StandardTokenizer, removes English stop words\n         (lang/stopwords_en.txt), down cases, protects words from protwords.txt, and\n         finally applies Porter's stemming.  The query time analyzer\n         also applies synonyms from synonyms.txt. -->\n    <fieldType name=\"text_en\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer type=\"index\">\n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n        <!-- in this example, we will only use synonyms at query time\n        <filter class=\"solr.SynonymFilterFactory\" synonyms=\"index_synonyms.txt\" ignoreCase=\"true\" expand=\"false\"/>\n        -->\n        <!-- Case insensitive stop word removal.\n          add enablePositionIncrements=true in both the index and query\n          analyzers to leave a 'gap' for more accurate phrase queries.\n        -->\n        <filter class=\"solr.StopFilterFactory\"\n                ignoreCase=\"true\"\n                words=\"lang/stopwords_en.txt\"\n                enablePositionIncrements=\"true\"\n                />\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n\t<filter class=\"solr.EnglishPossessiveFilterFactory\"/>\n        <filter class=\"solr.KeywordMarkerFilterFactory\" protected=\"protwords.txt\"/>\n\t<!-- Optionally you may want to use this less aggressive stemmer instead of PorterStemFilterFactory:\n        <filter class=\"solr.EnglishMinimalStemFilterFactory\"/>\n\t-->\n        <filter class=\"solr.PorterStemFilterFactory\"/>\n      </analyzer>\n      <analyzer type=\"query\">\n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n        <filter class=\"solr.SynonymFilterFactory\" synonyms=\"synonyms.txt\" ignoreCase=\"true\" expand=\"true\"/>\n        <filter class=\"solr.StopFilterFactory\"\n                ignoreCase=\"true\"\n                words=\"lang/stopwords_en.txt\"\n                enablePositionIncrements=\"true\"\n                />\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n\t<filter class=\"solr.EnglishPossessiveFilterFactory\"/>\n        <filter class=\"solr.KeywordMarkerFilterFactory\" protected=\"protwords.txt\"/>\n\t<!-- Optionally you may want to use this less aggressive stemmer instead of PorterStemFilterFactory:\n        <filter class=\"solr.EnglishMinimalStemFilterFactory\"/>\n\t-->\n        <filter class=\"solr.PorterStemFilterFactory\"/>\n      </analyzer>\n    </fieldType>\n\n    <!-- A text field with defaults appropriate for English, plus\n\t aggressive word-splitting and autophrase features enabled.\n\t This field is just like text_en, except it adds\n\t WordDelimiterFilter to enable splitting and matching of\n\t words on case-change, alpha numeric boundaries, and\n\t non-alphanumeric chars.  This means certain compound word\n\t cases will work, for example query \"wi fi\" will match\n\t document \"WiFi\" or \"wi-fi\".\n        -->\n    <fieldType name=\"text_en_splitting\" class=\"solr.TextField\" positionIncrementGap=\"100\" autoGeneratePhraseQueries=\"true\">\n      <analyzer type=\"index\">\n        <tokenizer class=\"solr.WhitespaceTokenizerFactory\"/>\n        <!-- in this example, we will only use synonyms at query time\n        <filter class=\"solr.SynonymFilterFactory\" synonyms=\"index_synonyms.txt\" ignoreCase=\"true\" expand=\"false\"/>\n        -->\n        <!-- Case insensitive stop word removal.\n          add enablePositionIncrements=true in both the index and query\n          analyzers to leave a 'gap' for more accurate phrase queries.\n        -->\n        <filter class=\"solr.StopFilterFactory\"\n                ignoreCase=\"true\"\n                words=\"lang/stopwords_en.txt\"\n                enablePositionIncrements=\"true\"\n                />\n        <filter class=\"solr.WordDelimiterFilterFactory\" generateWordParts=\"1\" generateNumberParts=\"1\" catenateWords=\"1\" catenateNumbers=\"1\" catenateAll=\"0\" splitOnCaseChange=\"1\"/>\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n        <filter class=\"solr.KeywordMarkerFilterFactory\" protected=\"protwords.txt\"/>\n        <filter class=\"solr.PorterStemFilterFactory\"/>\n      </analyzer>\n      <analyzer type=\"query\">\n        <tokenizer class=\"solr.WhitespaceTokenizerFactory\"/>\n        <filter class=\"solr.SynonymFilterFactory\" synonyms=\"synonyms.txt\" ignoreCase=\"true\" expand=\"true\"/>\n        <filter class=\"solr.StopFilterFactory\"\n                ignoreCase=\"true\"\n                words=\"lang/stopwords_en.txt\"\n                enablePositionIncrements=\"true\"\n                />\n        <filter class=\"solr.WordDelimiterFilterFactory\" generateWordParts=\"1\" generateNumberParts=\"1\" catenateWords=\"0\" catenateNumbers=\"0\" catenateAll=\"0\" splitOnCaseChange=\"1\"/>\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n        <filter class=\"solr.KeywordMarkerFilterFactory\" protected=\"protwords.txt\"/>\n        <filter class=\"solr.PorterStemFilterFactory\"/>\n      </analyzer>\n    </fieldType>\n\n    <!-- Less flexible matching, but less false matches.  Probably not ideal for product names,\n         but may be good for SKUs.  Can insert dashes in the wrong place and still match. -->\n    <fieldType name=\"text_en_splitting_tight\" class=\"solr.TextField\" positionIncrementGap=\"100\" autoGeneratePhraseQueries=\"true\">\n      <analyzer>\n        <tokenizer class=\"solr.WhitespaceTokenizerFactory\"/>\n        <filter class=\"solr.SynonymFilterFactory\" synonyms=\"synonyms.txt\" ignoreCase=\"true\" expand=\"false\"/>\n        <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"lang/stopwords_en.txt\"/>\n        <filter class=\"solr.WordDelimiterFilterFactory\" generateWordParts=\"0\" generateNumberParts=\"0\" catenateWords=\"1\" catenateNumbers=\"1\" catenateAll=\"0\"/>\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n        <filter class=\"solr.KeywordMarkerFilterFactory\" protected=\"protwords.txt\"/>\n        <filter class=\"solr.EnglishMinimalStemFilterFactory\"/>\n        <!-- this filter can remove any duplicate tokens that appear at the same position - sometimes\n             possible with WordDelimiterFilter in conjuncton with stemming. -->\n        <filter class=\"solr.RemoveDuplicatesTokenFilterFactory\"/>\n      </analyzer>\n    </fieldType>\n\n    <!-- Just like text_general except it reverses the characters of\n\t each token, to enable more efficient leading wildcard queries. -->\n    <fieldType name=\"text_general_rev\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer type=\"index\">\n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n        <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"stopwords.txt\" enablePositionIncrements=\"true\" />\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n        <filter class=\"solr.ReversedWildcardFilterFactory\" withOriginal=\"true\"\n           maxPosAsterisk=\"3\" maxPosQuestion=\"2\" maxFractionAsterisk=\"0.33\"/>\n      </analyzer>\n      <analyzer type=\"query\">\n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n        <filter class=\"solr.SynonymFilterFactory\" synonyms=\"synonyms.txt\" ignoreCase=\"true\" expand=\"true\"/>\n        <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"stopwords.txt\" enablePositionIncrements=\"true\" />\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n      </analyzer>\n    </fieldType>\n\n    <!-- charFilter + WhitespaceTokenizer  -->\n    <!--\n    <fieldType name=\"text_char_norm\" class=\"solr.TextField\" positionIncrementGap=\"100\" >\n      <analyzer>\n        <charFilter class=\"solr.MappingCharFilterFactory\" mapping=\"mapping-ISOLatin1Accent.txt\"/>\n        <tokenizer class=\"solr.WhitespaceTokenizerFactory\"/>\n      </analyzer>\n    </fieldType>\n    -->\n\n    <!-- This is an example of using the KeywordTokenizer along\n         With various TokenFilterFactories to produce a sortable field\n         that does not include some properties of the source text\n      -->\n    <fieldType name=\"alphaOnlySort\" class=\"solr.TextField\" sortMissingLast=\"true\" omitNorms=\"true\">\n      <analyzer>\n        <!-- KeywordTokenizer does no actual tokenizing, so the entire\n             input string is preserved as a single token\n          -->\n        <tokenizer class=\"solr.KeywordTokenizerFactory\"/>\n        <!-- The LowerCase TokenFilter does what you expect, which can be\n             when you want your sorting to be case insensitive\n          -->\n        <filter class=\"solr.LowerCaseFilterFactory\" />\n        <!-- The TrimFilter removes any leading or trailing whitespace -->\n        <filter class=\"solr.TrimFilterFactory\" />\n        <!-- The PatternReplaceFilter gives you the flexibility to use\n             Java Regular expression to replace any sequence of characters\n             matching a pattern with an arbitrary replacement string, \n             which may include back references to portions of the original\n             string matched by the pattern.\n             \n             See the Java Regular Expression documentation for more\n             information on pattern and replacement string syntax.\n             \n             http://java.sun.com/j2se/1.6.0/docs/api/java/util/regex/package-summary.html\n          -->\n        <filter class=\"solr.PatternReplaceFilterFactory\"\n                pattern=\"([^a-z])\" replacement=\"\" replace=\"all\"\n        />\n      </analyzer>\n    </fieldType>\n    \n    <fieldtype name=\"phonetic\" stored=\"false\" indexed=\"true\" class=\"solr.TextField\" >\n      <analyzer>\n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n        <filter class=\"solr.DoubleMetaphoneFilterFactory\" inject=\"false\"/>\n      </analyzer>\n    </fieldtype>\n\n    <fieldtype name=\"payloads\" stored=\"false\" indexed=\"true\" class=\"solr.TextField\" >\n      <analyzer>\n        <tokenizer class=\"solr.WhitespaceTokenizerFactory\"/>\n        <!--\n        The DelimitedPayloadTokenFilter can put payloads on tokens... for example,\n        a token of \"foo|1.4\"  would be indexed as \"foo\" with a payload of 1.4f\n        Attributes of the DelimitedPayloadTokenFilterFactory : \n         \"delimiter\" - a one character delimiter. Default is | (pipe)\n\t \"encoder\" - how to encode the following value into a playload\n\t    float -> org.apache.lucene.analysis.payloads.FloatEncoder,\n\t    integer -> o.a.l.a.p.IntegerEncoder\n\t    identity -> o.a.l.a.p.IdentityEncoder\n            Fully Qualified class name implementing PayloadEncoder, Encoder must have a no arg constructor.\n         -->\n        <filter class=\"solr.DelimitedPayloadTokenFilterFactory\" encoder=\"float\"/>\n      </analyzer>\n    </fieldtype>\n\n    <!-- lowercases the entire field value, keeping it as a single token.  -->\n    <fieldType name=\"lowercase\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer>\n        <tokenizer class=\"solr.KeywordTokenizerFactory\"/>\n        <filter class=\"solr.LowerCaseFilterFactory\" />\n      </analyzer>\n    </fieldType>\n\n    <!-- \n      Example of using PathHierarchyTokenizerFactory at index time, so\n      queries for paths match documents at that path, or in descendent paths\n    -->\n    <fieldType name=\"descendent_path\" class=\"solr.TextField\">\n      <analyzer type=\"index\">\n\t<tokenizer class=\"solr.PathHierarchyTokenizerFactory\" delimiter=\"/\" />\n      </analyzer>\n      <analyzer type=\"query\">\n\t<tokenizer class=\"solr.KeywordTokenizerFactory\" />\n      </analyzer>\n    </fieldType>\n    <!-- \n      Example of using PathHierarchyTokenizerFactory at query time, so\n      queries for paths match documents at that path, or in ancestor paths\n    -->\n    <fieldType name=\"ancestor_path\" class=\"solr.TextField\">\n      <analyzer type=\"index\">\n\t<tokenizer class=\"solr.KeywordTokenizerFactory\" />\n      </analyzer>\n      <analyzer type=\"query\">\n\t<tokenizer class=\"solr.PathHierarchyTokenizerFactory\" delimiter=\"/\" />\n      </analyzer>\n    </fieldType>\n\n    <!-- since fields of this type are by default not stored or indexed,\n         any data added to them will be ignored outright.  --> \n    <fieldtype name=\"ignored\" stored=\"false\" indexed=\"false\" multiValued=\"true\" class=\"solr.StrField\" />\n\n    <!-- This point type indexes the coordinates as separate fields (subFields)\n      If subFieldType is defined, it references a type, and a dynamic field\n      definition is created matching *___<typename>.  Alternately, if \n      subFieldSuffix is defined, that is used to create the subFields.\n      Example: if subFieldType=\"double\", then the coordinates would be\n        indexed in fields myloc_0___double,myloc_1___double.\n      Example: if subFieldSuffix=\"_d\" then the coordinates would be indexed\n        in fields myloc_0_d,myloc_1_d\n      The subFields are an implementation detail of the fieldType, and end\n      users normally should not need to know about them.\n     -->\n    <fieldType name=\"point\" class=\"solr.PointType\" dimension=\"2\" subFieldSuffix=\"_d\"/>\n\n    <!-- A specialized field for geospatial search. If indexed, this fieldType must not be multivalued. -->\n    <fieldType name=\"location\" class=\"solr.LatLonType\" subFieldSuffix=\"_coordinate\"/>\n\n    <!-- An alternative geospatial field type new to Solr 4.  It supports multiValued and polygon shapes.\n      For more information about this and other Spatial fields new to Solr 4, see:\n      http://wiki.apache.org/solr/SolrAdaptersForLuceneSpatial4\n    -->\n    <fieldType name=\"location_rpt\" class=\"solr.SpatialRecursivePrefixTreeFieldType\"\n        geo=\"true\" distErrPct=\"0.025\" maxDistErr=\"0.000009\" units=\"degrees\" />\n\n   <!-- Money/currency field type. See http://wiki.apache.org/solr/MoneyFieldType\n        Parameters:\n          defaultCurrency: Specifies the default currency if none specified. Defaults to \"USD\"\n          precisionStep:   Specifies the precisionStep for the TrieLong field used for the amount\n          providerClass:   Lets you plug in other exchange provider backend:\n                           solr.FileExchangeRateProvider is the default and takes one parameter:\n                             currencyConfig: name of an xml file holding exchange rates\n                           solr.OpenExchangeRatesOrgProvider uses rates from openexchangerates.org:\n                             ratesFileLocation: URL or path to rates JSON file (default latest.json on the web)\n                             refreshInterval: Number of minutes between each rates fetch (default: 1440, min: 60)\n   -->\n    <fieldType name=\"currency\" class=\"solr.CurrencyField\" precisionStep=\"8\" defaultCurrency=\"USD\" currencyConfig=\"currency.xml\" />\n             \n\n\n   <!-- some examples for different languages (generally ordered by ISO code) -->\n\n    <!-- Arabic -->\n    <fieldType name=\"text_ar\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer> \n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n        <!-- for any non-arabic -->\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n        <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"lang/stopwords_ar.txt\" enablePositionIncrements=\"true\"/>\n        <!-- normalizes ﻯ to ﻱ, etc -->\n        <filter class=\"solr.ArabicNormalizationFilterFactory\"/>\n        <filter class=\"solr.ArabicStemFilterFactory\"/>\n      </analyzer>\n    </fieldType>\n\n    <!-- Bulgarian -->\n    <fieldType name=\"text_bg\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer> \n        <tokenizer class=\"solr.StandardTokenizerFactory\"/> \n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n        <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"lang/stopwords_bg.txt\" enablePositionIncrements=\"true\"/>\n        <filter class=\"solr.BulgarianStemFilterFactory\"/>       \n      </analyzer>\n    </fieldType>\n    \n    <!-- Catalan -->\n    <fieldType name=\"text_ca\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer> \n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n        <!-- removes l', etc -->\n        <filter class=\"solr.ElisionFilterFactory\" ignoreCase=\"true\" articles=\"lang/contractions_ca.txt\"/>\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n        <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"lang/stopwords_ca.txt\" enablePositionIncrements=\"true\"/>\n        <filter class=\"solr.SnowballPorterFilterFactory\" language=\"Catalan\"/>       \n      </analyzer>\n    </fieldType>\n    \n    <!-- CJK bigram (see text_ja for a Japanese configuration using morphological analysis) -->\n    <fieldType name=\"text_cjk\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer>\n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n        <!-- normalize width before bigram, as e.g. half-width dakuten combine  -->\n        <filter class=\"solr.CJKWidthFilterFactory\"/>\n        <!-- for any non-CJK -->\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n        <filter class=\"solr.CJKBigramFilterFactory\"/>\n      </analyzer>\n    </fieldType>\n\n    <!-- Czech -->\n    <fieldType name=\"text_cz\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer> \n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n        <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"lang/stopwords_cz.txt\" enablePositionIncrements=\"true\"/>\n        <filter class=\"solr.CzechStemFilterFactory\"/>       \n      </analyzer>\n    </fieldType>\n    \n    <!-- Danish -->\n    <fieldType name=\"text_da\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer> \n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n        <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"lang/stopwords_da.txt\" format=\"snowball\" enablePositionIncrements=\"true\"/>\n        <filter class=\"solr.SnowballPorterFilterFactory\" language=\"Danish\"/>       \n      </analyzer>\n    </fieldType>\n    \n    <!-- German -->\n    <fieldType name=\"text_de\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer> \n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n        <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"lang/stopwords_de.txt\" format=\"snowball\" enablePositionIncrements=\"true\"/>\n        <filter class=\"solr.GermanNormalizationFilterFactory\"/>\n        <filter class=\"solr.GermanLightStemFilterFactory\"/>\n        <!-- less aggressive: <filter class=\"solr.GermanMinimalStemFilterFactory\"/> -->\n        <!-- more aggressive: <filter class=\"solr.SnowballPorterFilterFactory\" language=\"German2\"/> -->\n      </analyzer>\n    </fieldType>\n    \n    <!-- Greek -->\n    <fieldType name=\"text_el\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer> \n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n        <!-- greek specific lowercase for sigma -->\n        <filter class=\"solr.GreekLowerCaseFilterFactory\"/>\n        <filter class=\"solr.StopFilterFactory\" ignoreCase=\"false\" words=\"lang/stopwords_el.txt\" enablePositionIncrements=\"true\"/>\n        <filter class=\"solr.GreekStemFilterFactory\"/>\n      </analyzer>\n    </fieldType>\n    \n    <!-- Spanish -->\n    <fieldType name=\"text_es\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer> \n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n        <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"lang/stopwords_es.txt\" format=\"snowball\" enablePositionIncrements=\"true\"/>\n        <filter class=\"solr.SpanishLightStemFilterFactory\"/>\n        <!-- more aggressive: <filter class=\"solr.SnowballPorterFilterFactory\" language=\"Spanish\"/> -->\n      </analyzer>\n    </fieldType>\n    \n    <!-- Basque -->\n    <fieldType name=\"text_eu\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer> \n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n        <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"lang/stopwords_eu.txt\" enablePositionIncrements=\"true\"/>\n        <filter class=\"solr.SnowballPorterFilterFactory\" language=\"Basque\"/>\n      </analyzer>\n    </fieldType>\n    \n    <!-- Persian -->\n    <fieldType name=\"text_fa\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer>\n        <!-- for ZWNJ -->\n        <charFilter class=\"solr.PersianCharFilterFactory\"/>\n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n        <filter class=\"solr.ArabicNormalizationFilterFactory\"/>\n        <filter class=\"solr.PersianNormalizationFilterFactory\"/>\n        <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"lang/stopwords_fa.txt\" enablePositionIncrements=\"true\"/>\n      </analyzer>\n    </fieldType>\n    \n    <!-- Finnish -->\n    <fieldType name=\"text_fi\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer> \n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n        <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"lang/stopwords_fi.txt\" format=\"snowball\" enablePositionIncrements=\"true\"/>\n        <filter class=\"solr.SnowballPorterFilterFactory\" language=\"Finnish\"/>\n        <!-- less aggressive: <filter class=\"solr.FinnishLightStemFilterFactory\"/> -->\n      </analyzer>\n    </fieldType>\n    \n    <!-- French -->\n    <fieldType name=\"text_fr\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer> \n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n        <!-- removes l', etc -->\n        <filter class=\"solr.ElisionFilterFactory\" ignoreCase=\"true\" articles=\"lang/contractions_fr.txt\"/>\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n        <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"lang/stopwords_fr.txt\" format=\"snowball\" enablePositionIncrements=\"true\"/>\n        <filter class=\"solr.FrenchLightStemFilterFactory\"/>\n        <!-- less aggressive: <filter class=\"solr.FrenchMinimalStemFilterFactory\"/> -->\n        <!-- more aggressive: <filter class=\"solr.SnowballPorterFilterFactory\" language=\"French\"/> -->\n      </analyzer>\n    </fieldType>\n    \n    <!-- Irish -->\n    <fieldType name=\"text_ga\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer> \n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n        <!-- removes d', etc -->\n        <filter class=\"solr.ElisionFilterFactory\" ignoreCase=\"true\" articles=\"lang/contractions_ga.txt\"/>\n        <!-- removes n-, etc. position increments is intentionally false! -->\n        <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"lang/hyphenations_ga.txt\" enablePositionIncrements=\"false\"/>\n        <filter class=\"solr.IrishLowerCaseFilterFactory\"/>\n        <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"lang/stopwords_ga.txt\" enablePositionIncrements=\"true\"/>\n        <filter class=\"solr.SnowballPorterFilterFactory\" language=\"Irish\"/>\n      </analyzer>\n    </fieldType>\n    \n    <!-- Galician -->\n    <fieldType name=\"text_gl\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer> \n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n        <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"lang/stopwords_gl.txt\" enablePositionIncrements=\"true\"/>\n        <filter class=\"solr.GalicianStemFilterFactory\"/>\n        <!-- less aggressive: <filter class=\"solr.GalicianMinimalStemFilterFactory\"/> -->\n      </analyzer>\n    </fieldType>\n    \n    <!-- Hindi -->\n    <fieldType name=\"text_hi\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer> \n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n        <!-- normalizes unicode representation -->\n        <filter class=\"solr.IndicNormalizationFilterFactory\"/>\n        <!-- normalizes variation in spelling -->\n        <filter class=\"solr.HindiNormalizationFilterFactory\"/>\n        <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"lang/stopwords_hi.txt\" enablePositionIncrements=\"true\"/>\n        <filter class=\"solr.HindiStemFilterFactory\"/>\n      </analyzer>\n    </fieldType>\n    \n    <!-- Hungarian -->\n    <fieldType name=\"text_hu\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer> \n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n        <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"lang/stopwords_hu.txt\" format=\"snowball\" enablePositionIncrements=\"true\"/>\n        <filter class=\"solr.SnowballPorterFilterFactory\" language=\"Hungarian\"/>\n        <!-- less aggressive: <filter class=\"solr.HungarianLightStemFilterFactory\"/> -->   \n      </analyzer>\n    </fieldType>\n    \n    <!-- Armenian -->\n    <fieldType name=\"text_hy\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer> \n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n        <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"lang/stopwords_hy.txt\" enablePositionIncrements=\"true\"/>\n        <filter class=\"solr.SnowballPorterFilterFactory\" language=\"Armenian\"/>\n      </analyzer>\n    </fieldType>\n    \n    <!-- Indonesian -->\n    <fieldType name=\"text_id\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer> \n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n        <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"lang/stopwords_id.txt\" enablePositionIncrements=\"true\"/>\n        <!-- for a less aggressive approach (only inflectional suffixes), set stemDerivational to false -->\n        <filter class=\"solr.IndonesianStemFilterFactory\" stemDerivational=\"true\"/>\n      </analyzer>\n    </fieldType>\n    \n    <!-- Italian -->\n    <fieldType name=\"text_it\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer> \n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n        <!-- removes l', etc -->\n        <filter class=\"solr.ElisionFilterFactory\" ignoreCase=\"true\" articles=\"lang/contractions_it.txt\"/>\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n        <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"lang/stopwords_it.txt\" format=\"snowball\" enablePositionIncrements=\"true\"/>\n        <filter class=\"solr.ItalianLightStemFilterFactory\"/>\n        <!-- more aggressive: <filter class=\"solr.SnowballPorterFilterFactory\" language=\"Italian\"/> -->\n      </analyzer>\n    </fieldType>\n    \n    <!-- Japanese using morphological analysis (see text_cjk for a configuration using bigramming)\n\n         NOTE: If you want to optimize search for precision, use default operator AND in your query\n         parser config with <solrQueryParser defaultOperator=\"AND\"/> further down in this file.  Use \n         OR if you would like to optimize for recall (default).\n    -->\n    <fieldType name=\"text_ja\" class=\"solr.TextField\" positionIncrementGap=\"100\" autoGeneratePhraseQueries=\"false\">\n      <analyzer>\n      <!-- Kuromoji Japanese morphological analyzer/tokenizer (JapaneseTokenizer)\n\n           Kuromoji has a search mode (default) that does segmentation useful for search.  A heuristic\n           is used to segment compounds into its parts and the compound itself is kept as synonym.\n\n           Valid values for attribute mode are:\n              normal: regular segmentation\n              search: segmentation useful for search with synonyms compounds (default)\n            extended: same as search mode, but unigrams unknown words (experimental)\n\n           For some applications it might be good to use search mode for indexing and normal mode for\n           queries to reduce recall and prevent parts of compounds from being matched and highlighted.\n           Use <analyzer type=\"index\"> and <analyzer type=\"query\"> for this and mode normal in query.\n\n           Kuromoji also has a convenient user dictionary feature that allows overriding the statistical\n           model with your own entries for segmentation, part-of-speech tags and readings without a need\n           to specify weights.  Notice that user dictionaries have not been subject to extensive testing.\n\n           User dictionary attributes are:\n                     userDictionary: user dictionary filename\n             userDictionaryEncoding: user dictionary encoding (default is UTF-8)\n\n           See lang/userdict_ja.txt for a sample user dictionary file.\n\n           Punctuation characters are discarded by default.  Use discardPunctuation=\"false\" to keep them.\n\n           See http://wiki.apache.org/solr/JapaneseLanguageSupport for more on Japanese language support.\n        -->\n        <tokenizer class=\"solr.JapaneseTokenizerFactory\" mode=\"search\"/>\n        <!--<tokenizer class=\"solr.JapaneseTokenizerFactory\" mode=\"search\" userDictionary=\"lang/userdict_ja.txt\"/>-->\n        <!-- Reduces inflected verbs and adjectives to their base/dictionary forms (辞書形) -->\n        <filter class=\"solr.JapaneseBaseFormFilterFactory\"/>\n        <!-- Removes tokens with certain part-of-speech tags -->\n        <filter class=\"solr.JapanesePartOfSpeechStopFilterFactory\" tags=\"lang/stoptags_ja.txt\" enablePositionIncrements=\"true\"/>\n        <!-- Normalizes full-width romaji to half-width and half-width kana to full-width (Unicode NFKC subset) -->\n        <filter class=\"solr.CJKWidthFilterFactory\"/>\n        <!-- Removes common tokens typically not useful for search, but have a negative effect on ranking -->\n        <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"lang/stopwords_ja.txt\" enablePositionIncrements=\"true\" />\n        <!-- Normalizes common katakana spelling variations by removing any last long sound character (U+30FC) -->\n        <filter class=\"solr.JapaneseKatakanaStemFilterFactory\" minimumLength=\"4\"/>\n        <!-- Lower-cases romaji characters -->\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n      </analyzer>\n    </fieldType>\n    \n    <!-- Latvian -->\n    <fieldType name=\"text_lv\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer> \n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n        <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"lang/stopwords_lv.txt\" enablePositionIncrements=\"true\"/>\n        <filter class=\"solr.LatvianStemFilterFactory\"/>\n      </analyzer>\n    </fieldType>\n    \n    <!-- Dutch -->\n    <fieldType name=\"text_nl\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer> \n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n        <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"lang/stopwords_nl.txt\" format=\"snowball\" enablePositionIncrements=\"true\"/>\n        <filter class=\"solr.StemmerOverrideFilterFactory\" dictionary=\"lang/stemdict_nl.txt\" ignoreCase=\"false\"/>\n        <filter class=\"solr.SnowballPorterFilterFactory\" language=\"Dutch\"/>\n      </analyzer>\n    </fieldType>\n    \n    <!-- Norwegian -->\n    <fieldType name=\"text_no\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer> \n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n        <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"lang/stopwords_no.txt\" format=\"snowball\" enablePositionIncrements=\"true\"/>\n        <filter class=\"solr.SnowballPorterFilterFactory\" language=\"Norwegian\"/>\n        <!-- less aggressive: <filter class=\"solr.NorwegianLightStemFilterFactory\"/> -->\n        <!-- singular/plural: <filter class=\"solr.NorwegianMinimalStemFilterFactory\"/> -->\n      </analyzer>\n    </fieldType>\n    \n    <!-- Portuguese -->\n    <fieldType name=\"text_pt\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer> \n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n        <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"lang/stopwords_pt.txt\" format=\"snowball\" enablePositionIncrements=\"true\"/>\n        <filter class=\"solr.PortugueseLightStemFilterFactory\"/>\n        <!-- less aggressive: <filter class=\"solr.PortugueseMinimalStemFilterFactory\"/> -->\n        <!-- more aggressive: <filter class=\"solr.SnowballPorterFilterFactory\" language=\"Portuguese\"/> -->\n        <!-- most aggressive: <filter class=\"solr.PortugueseStemFilterFactory\"/> -->\n      </analyzer>\n    </fieldType>\n    \n    <!-- Romanian -->\n    <fieldType name=\"text_ro\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer> \n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n        <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"lang/stopwords_ro.txt\" enablePositionIncrements=\"true\"/>\n        <filter class=\"solr.SnowballPorterFilterFactory\" language=\"Romanian\"/>\n      </analyzer>\n    </fieldType>\n    \n    <!-- Russian -->\n    <fieldType name=\"text_ru\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer> \n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n        <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"lang/stopwords_ru.txt\" format=\"snowball\" enablePositionIncrements=\"true\"/>\n        <filter class=\"solr.SnowballPorterFilterFactory\" language=\"Russian\"/>\n        <!-- less aggressive: <filter class=\"solr.RussianLightStemFilterFactory\"/> -->\n      </analyzer>\n    </fieldType>\n    \n    <!-- Swedish -->\n    <fieldType name=\"text_sv\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer> \n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n        <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"lang/stopwords_sv.txt\" format=\"snowball\" enablePositionIncrements=\"true\"/>\n        <filter class=\"solr.SnowballPorterFilterFactory\" language=\"Swedish\"/>\n        <!-- less aggressive: <filter class=\"solr.SwedishLightStemFilterFactory\"/> -->\n      </analyzer>\n    </fieldType>\n    \n    <!-- Thai -->\n    <fieldType name=\"text_th\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer> \n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n        <filter class=\"solr.ThaiWordFilterFactory\"/>\n        <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"lang/stopwords_th.txt\" enablePositionIncrements=\"true\"/>\n      </analyzer>\n    </fieldType>\n    \n    <!-- Turkish -->\n    <fieldType name=\"text_tr\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer> \n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n        <filter class=\"solr.TurkishLowerCaseFilterFactory\"/>\n        <filter class=\"solr.StopFilterFactory\" ignoreCase=\"false\" words=\"lang/stopwords_tr.txt\" enablePositionIncrements=\"true\"/>\n        <filter class=\"solr.SnowballPorterFilterFactory\" language=\"Turkish\"/>\n      </analyzer>\n    </fieldType>\n\n </types>\n  \n  <!-- Similarity is the scoring routine for each document vs. a query.\n       A custom Similarity or SimilarityFactory may be specified here, but \n       the default is fine for most applications.  \n       For more info: http://wiki.apache.org/solr/SchemaXml#Similarity\n    -->\n  <!--\n     <similarity class=\"com.example.solr.CustomSimilarityFactory\">\n       <str name=\"paramkey\">param value</str>\n     </similarity>\n    -->\n\n</schema>\n
===================================================================
--- solr/example/solr/collection1/conf/schema.xml	(revision b2f1c0b604504ac51d917540d57b9859bccd0b17)
+++ solr/example/solr/collection1/conf/schema.xml	(revision )
@@ -109,6 +109,7 @@
    <field name="id" type="string" indexed="true" stored="true" required="true" multiValued="false" /> 
    <field name="sku" type="text_en_splitting_tight" indexed="true" stored="true" omitNorms="true"/>
    <field name="name" type="text_general" indexed="true" stored="true"/>
+   <field name="name_syn" type="text_en_splitting" indexed="true" stored="true"/>
    <field name="manu" type="text_general" indexed="true" stored="true" omitNorms="true"/>
    <field name="cat" type="string" indexed="true" stored="true" multiValued="true"/>
    <field name="features" type="text_general" indexed="true" stored="true" multiValued="true"/>
Index: solr/example/solr/collection1/conf/synonyms.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n#-----------------------------------------------------------------------\n#some test synonym mappings unlikely to appear in real input text\naaafoo => aaabar\nbbbfoo => bbbfoo bbbbar\ncccfoo => cccbar cccbaz\nfooaaa,baraaa,bazaaa\n\n# Some synonym groups specific to this example\nGB,gib,gigabyte,gigabytes\nMB,mib,megabyte,megabytes\nTelevision, Televisions, TV, TVs\n#notice we use \"gib\" instead of \"GiB\" so any WordDelimiterFilter coming\n#after us won't split it into two words.\n\n# Synonym mappings can be used for spelling correction too\npixima => pixma\n\n
===================================================================
--- solr/example/solr/collection1/conf/synonyms.txt	(revision b2f1c0b604504ac51d917540d57b9859bccd0b17)
+++ solr/example/solr/collection1/conf/synonyms.txt	(revision )
@@ -27,3 +27,5 @@
 # Synonym mappings can be used for spelling correction too
 pixima => pixma
 
+
+wi.fi.,wireless.network
