Index: src/java/org/apache/lucene/document/NumericField.java
===================================================================
--- src/java/org/apache/lucene/document/NumericField.java	(revision 962932)
+++ src/java/org/apache/lucene/document/NumericField.java	(working copy)
@@ -237,8 +237,20 @@
     fieldsData = Long.valueOf(value);
     return this;
   }
-  
+
   /**
+   * Initializes the field with the supplied <code>long</code> value.
+   * @param value the numeric value, must not be null
+   * @return this instance, because of this you can use it the following way:
+   * <code>document.add(new NumericField(name, precisionStep).setLongValue(value))</code>
+   */
+  public NumericField setLongValue(final Long value) {
+    tokenStream.setLongValue(value.longValue());
+    fieldsData = value;
+    return this;
+  }
+
+  /**
    * Initializes the field with the supplied <code>int</code> value.
    * @param value the numeric value
    * @return this instance, because of this you can use it the following way:
@@ -249,8 +261,20 @@
     fieldsData = Integer.valueOf(value);
     return this;
   }
-  
+
   /**
+   * Initializes the field with the supplied <code>int</code> value.
+   * @param value the numeric value, must not be null
+   * @return this instance, because of this you can use it the following way:
+   * <code>document.add(new NumericField(name, precisionStep).setIntValue(value))</code>
+   */
+  public NumericField setIntValue(final Integer value) {
+    tokenStream.setIntValue(value.intValue());
+    fieldsData = value;
+    return this;
+  }
+
+  /**
    * Initializes the field with the supplied <code>double</code> value.
    * @param value the numeric value
    * @return this instance, because of this you can use it the following way:
@@ -261,8 +285,20 @@
     fieldsData = Double.valueOf(value);
     return this;
   }
-  
+
   /**
+   * Initializes the field with the supplied <code>double</code> value.
+   * @param value the numeric value, must not be null
+   * @return this instance, because of this you can use it the following way:
+   * <code>document.add(new NumericField(name, precisionStep).setDoubleValue(value))</code>
+   */
+  public NumericField setDoubleValue(final Double value) {
+    tokenStream.setDoubleValue(value.doubleValue());
+    fieldsData = value;
+    return this;
+  }
+
+  /**
    * Initializes the field with the supplied <code>float</code> value.
    * @param value the numeric value
    * @return this instance, because of this you can use it the following way:
@@ -274,4 +310,16 @@
     return this;
   }
 
+  /**
+   * Initializes the field with the supplied <code>float</code> value.
+   * @param value the numeric value, must not be null
+   * @return this instance, because of this you can use it the following way:
+   * <code>document.add(new NumericField(name, precisionStep).setFloatValue(value))</code>
+   */
+  public NumericField setFloatValue(final Float value) {
+    tokenStream.setFloatValue(value.floatValue());
+    fieldsData = value;
+    return this;
+  }
+
 }
