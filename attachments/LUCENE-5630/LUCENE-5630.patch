Index: lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AnalysisSPILoader.java
===================================================================
--- lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AnalysisSPILoader.java	(revision 1589854)
+++ lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AnalysisSPILoader.java	(working copy)
@@ -120,7 +120,7 @@
       return service;
     } else {
       throw new IllegalArgumentException("A SPI class of type "+clazz.getName()+" with name '"+name+"' does not exist. "+
-          "You need to add the corresponding JAR file supporting this SPI to your classpath."+
+          "You need to add the corresponding JAR file supporting this SPI to your classpath. "+
           "The current classpath supports the following names: "+availableServices());
     }
   }
Index: lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAllAnalyzersHaveFactories.java
===================================================================
--- lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAllAnalyzersHaveFactories.java	(revision 1589854)
+++ lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAllAnalyzersHaveFactories.java	(working copy)
@@ -125,6 +125,7 @@
         String clazzName = c.getSimpleName();
         assertTrue(clazzName.endsWith("Tokenizer"));
         String simpleName = clazzName.substring(0, clazzName.length() - 9);
+        assertNotNull(TokenizerFactory.lookupClass(simpleName));
         TokenizerFactory instance = null;
         try {
           instance = TokenizerFactory.forName(simpleName, args);
@@ -134,7 +135,8 @@
           }
           assertSame(c, instance.create().getClass());
         } catch (IllegalArgumentException e) {
-          if (!e.getMessage().contains("SPI") || e.getMessage().contains("does not exist")) {
+          if (e.getCause() instanceof NoSuchMethodException) {
+            // there is no corresponding ctor available
             throw e;
           }
           // TODO: For now pass because some factories have not yet a default config that always works
@@ -143,6 +145,7 @@
         String clazzName = c.getSimpleName();
         assertTrue(clazzName.endsWith("Filter"));
         String simpleName = clazzName.substring(0, clazzName.length() - (clazzName.endsWith("TokenFilter") ? 11 : 6));
+        assertNotNull(TokenFilterFactory.lookupClass(simpleName));
         TokenFilterFactory instance = null; 
         try {
           instance = TokenFilterFactory.forName(simpleName, args);
@@ -156,7 +159,8 @@
             assertSame(c, createdClazz);
           }
         } catch (IllegalArgumentException e) {
-          if (!e.getMessage().contains("SPI") || e.getMessage().contains("does not exist")) {
+          if (e.getCause() instanceof NoSuchMethodException) {
+            // there is no corresponding ctor available
             throw e;
           }
           // TODO: For now pass because some factories have not yet a default config that always works
@@ -165,6 +169,7 @@
         String clazzName = c.getSimpleName();
         assertTrue(clazzName.endsWith("CharFilter"));
         String simpleName = clazzName.substring(0, clazzName.length() - 10);
+        assertNotNull(CharFilterFactory.lookupClass(simpleName));
         CharFilterFactory instance = null;
         try {
           instance = CharFilterFactory.forName(simpleName, args);
@@ -178,7 +183,8 @@
             assertSame(c, createdClazz);
           }
         } catch (IllegalArgumentException e) {
-          if (!e.getMessage().contains("SPI") || e.getMessage().contains("does not exist")) {
+          if (e.getCause() instanceof NoSuchMethodException) {
+            // there is no corresponding ctor available
             throw e;
           }
           // TODO: For now pass because some factories have not yet a default config that always works
