Index: lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/SlopQueryNode.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/SlopQueryNode.java	(date 1436204317000)
+++ lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/SlopQueryNode.java	(revision )
@@ -55,7 +55,10 @@
   }
 
   public QueryNode getChild() {
+    if (getChildren() != null && !getChildren().isEmpty())
-    return getChildren().get(0);
+      return getChildren().get(0);
+
+    return null;
   }
 
   public int getValue() {
@@ -73,10 +76,15 @@
 
   @Override
   public String toString() {
+    if (getChild() != null) {
-    return "<slop value='" + getValueString() + "'>" + "\n"
-        + getChild().toString() + "\n</slop>";
-  }
+      return "<slop value='" + getValueString() + "'>" + "\n"
+          + getChild().toString() + "\n</slop>";
+    }
 
+    return "<slop value='" + getValueString() + "'>" + "\n"
+        + "null" + "\n</slop>";
+  }
+
   @Override
   public CharSequence toQueryString(EscapeQuerySyntax escapeSyntaxParser) {
     if (getChild() == null)
@@ -98,7 +106,7 @@
   public CharSequence getField() {
     QueryNode child = getChild();
 
-    if (child instanceof FieldableNode) {
+    if (child != null && child instanceof FieldableNode) {
       return ((FieldableNode) child).getField();
     }
 
Index: lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/BoostQueryNode.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/BoostQueryNode.java	(date 1436204317000)
+++ lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/BoostQueryNode.java	(revision )
@@ -96,8 +96,10 @@
 
   @Override
   public String toString() {
+    QueryNode q = getChild();
+    String s = (q != null) ? q.toString() : "null";
     return "<boost value='" + getValueString() + "'>" + "\n"
-        + getChild().toString() + "\n</boost>";
+        + s + "\n</boost>";
   }
 
   @Override
Index: lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode.java	(date 1436204317000)
+++ lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode.java	(revision )
@@ -106,7 +106,10 @@
   }
 
   public QueryNode getChild() {
+    if (getChildren() != null && !getChildren().isEmpty())
-    return getChildren().get(0);
+      return getChildren().get(0);
+
+    return null;
   }
 
   public Modifier getModifier() {
@@ -115,10 +118,15 @@
 
   @Override
   public String toString() {
+    if (getChild() != null) {
-    return "<modifier operation='" + this.modifier.toString() + "'>" + "\n"
-        + getChild().toString() + "\n</modifier>";
-  }
+      return "<modifier operation='" + this.modifier.toString() + "'>" + "\n"
+          + getChild().toString() + "\n</modifier>";
+    }
 
+    return "<modifier operation='" + this.modifier.toString() + "'>" + "\n"
+        + "null" + "\n</modifier>";
+  }
+
   @Override
   public CharSequence toQueryString(EscapeQuerySyntax escapeSyntaxParser) {
     if (getChild() == null)
@@ -127,7 +135,7 @@
     String leftParenthensis = "";
     String rightParenthensis = "";
 
-    if (getChild() != null && getChild() instanceof ModifierQueryNode) {
+    if (getChild() instanceof ModifierQueryNode) {
       leftParenthensis = "(";
       rightParenthensis = ")";
     }
Index: lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/GroupQueryNode.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/GroupQueryNode.java	(date 1436204317000)
+++ lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/GroupQueryNode.java	(revision )
@@ -49,12 +49,18 @@
   }
 
   public QueryNode getChild() {
+    if (getChildren() != null && !getChildren().isEmpty())
-    return getChildren().get(0);
+      return getChildren().get(0);
+
+    return null;
   }
 
   @Override
   public String toString() {
+    if (getChild() != null)
-    return "<group>" + "\n" + getChild().toString() + "\n</group>";
+      return "<group>" + "\n" + getChild().toString() + "\n</group>";
+
+    return "<group>" + "\n" + "null" + "\n</group>";
   }
 
   @Override
Index: lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/PhraseSlopQueryNode.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/PhraseSlopQueryNode.java	(date 1436204317000)
+++ lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/PhraseSlopQueryNode.java	(revision )
@@ -46,7 +46,10 @@
   }
 
   public QueryNode getChild() {
+    if (getChildren() != null && !getChildren().isEmpty())
-    return getChildren().get(0);
+      return getChildren().get(0);
+
+    return null;
   }
 
   public int getValue() {
@@ -64,10 +67,15 @@
 
   @Override
   public String toString() {
+    if (getChild() != null) {
-    return "<phraseslop value='" + getValueString() + "'>" + "\n"
-        + getChild().toString() + "\n</phraseslop>";
-  }
+      return "<phraseslop value='" + getValueString() + "'>" + "\n"
+          + getChild().toString() + "\n</phraseslop>";
+    }
 
+    return "<phraseslop value='" + getValueString() + "'>" + "\n"
+        + "null" + "\n</phraseslop>";
+  }
+
   @Override
   public CharSequence toQueryString(EscapeQuerySyntax escapeSyntaxParser) {
     if (getChild() == null)
@@ -89,7 +97,7 @@
   public CharSequence getField() {
     QueryNode child = getChild();
 
-    if (child instanceof FieldableNode) {
+    if (child != null && child instanceof FieldableNode) {
       return ((FieldableNode) child).getField();
     }
 
Index: lucene/analysis/stempel/src/java/org/egothor/stemmer/Trie.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/analysis/stempel/src/java/org/egothor/stemmer/Trie.java	(date 1436204317000)
+++ lucene/analysis/stempel/src/java/org/egothor/stemmer/Trie.java	(revision )
@@ -129,59 +129,63 @@
   public CharSequence[] getAll(CharSequence key) {
     int res[] = new int[key.length()];
     int resc = 0;
-    Row now = getRow(root);
     int w;
     StrEnum e = new StrEnum(key, forward);
     boolean br = false;
+    Row now = getRow(root);
-    
+
+    if (now != null) {
-    for (int i = 0; i < key.length() - 1; i++) {
-      Character ch = new Character(e.next());
-      w = now.getCmd(ch);
-      if (w >= 0) {
-        int n = w;
-        for (int j = 0; j < resc; j++) {
-          if (n == res[j]) {
-            n = -1;
-            break;
-          }
-        }
-        if (n >= 0) {
-          res[resc++] = n;
-        }
-      }
-      w = now.getRef(ch);
-      if (w >= 0) {
-        now = getRow(w);
-      } else {
-        br = true;
-        break;
-      }
-    }
-    if (br == false) {
-      w = now.getCmd(new Character(e.next()));
-      if (w >= 0) {
-        int n = w;
-        for (int j = 0; j < resc; j++) {
-          if (n == res[j]) {
-            n = -1;
-            break;
-          }
-        }
-        if (n >= 0) {
-          res[resc++] = n;
-        }
-      }
-    }
-    
-    if (resc < 1) {
-      return null;
-    }
-    CharSequence R[] = new CharSequence[resc];
-    for (int j = 0; j < resc; j++) {
-      R[j] = cmds.get(res[j]);
-    }
-    return R;
+      for (int i = 0; i < key.length() - 1; i++) {
+        Character ch = new Character(e.next());
+        w = now.getCmd(ch);
+        if (w >= 0) {
+          int n = w;
+          for (int j = 0; j < resc; j++) {
+            if (n == res[j]) {
+              n = -1;
+              break;
+            }
+          }
+          if (n >= 0) {
+            res[resc++] = n;
+          }
+        }
+        w = now.getRef(ch);
+        if (w >= 0) {
+          now = getRow(w);
+        } else {
+          br = true;
+          break;
+        }
+      }
+      if (br == false) {
+        w = now.getCmd(new Character(e.next()));
+        if (w >= 0) {
+          int n = w;
+          for (int j = 0; j < resc; j++) {
+            if (n == res[j]) {
+              n = -1;
+              break;
+            }
+          }
+          if (n >= 0) {
+            res[resc++] = n;
+          }
+        }
+      }
+
+      if (resc < 1) {
+        return null;
+      }
+      CharSequence R[] = new CharSequence[resc];
+      for (int j = 0; j < resc; j++) {
+        R[j] = cmds.get(res[j]);
+      }
+      return R;
+    } else {
+      return null;
-  }
+    }
+  }
   
   /**
    * Return the number of cells in this Trie object.
@@ -226,41 +230,43 @@
    * @return the associated element
    */
   public CharSequence getFully(CharSequence key) {
-    Row now = getRow(root);
     int w;
     Cell c;
     int cmd = -1;
     StrEnum e = new StrEnum(key, forward);
     Character ch = null;
     Character aux = null;
+    Row now = getRow(root);
-    
+
+    if (now != null) {
-    for (int i = 0; i < key.length();) {
+      for (int i = 0; i < key.length(); ) {
-      ch = new Character(e.next());
-      i++;
-      
-      c = now.at(ch);
-      if (c == null) {
-        return null;
-      }
-      
-      cmd = c.cmd;
-      
-      for (int skip = c.skip; skip > 0; skip--) {
-        if (i < key.length()) {
-          aux = new Character(e.next());
-        } else {
-          return null;
-        }
-        i++;
-      }
-      
-      w = now.getRef(ch);
-      if (w >= 0) {
-        now = getRow(w);
-      } else if (i < key.length()) {
-        return null;
-      }
-    }
+        ch = new Character(e.next());
+        i++;
+
+        c = now.at(ch);
+        if (c == null) {
+          return null;
+        }
+
+        cmd = c.cmd;
+
+        for (int skip = c.skip; skip > 0; skip--) {
+          if (i < key.length()) {
+            aux = new Character(e.next());
+          } else {
+            return null;
+          }
+          i++;
+        }
+
+        w = now.getRef(ch);
+        if (w >= 0) {
+          now = getRow(w);
+        } else if (i < key.length()) {
+          return null;
+        }
+      }
+    }
     return (cmd == -1) ? null : cmds.get(cmd);
   }
   
@@ -272,27 +278,31 @@
    * @return the last on path element
    */
   public CharSequence getLastOnPath(CharSequence key) {
-    Row now = getRow(root);
     int w;
     CharSequence last = null;
     StrEnum e = new StrEnum(key, forward);
+    Row now = getRow(root);
-    
+
+    if (now != null) {
-    for (int i = 0; i < key.length() - 1; i++) {
-      Character ch = new Character(e.next());
-      w = now.getCmd(ch);
-      if (w >= 0) {
-        last = cmds.get(w);
-      }
-      w = now.getRef(ch);
-      if (w >= 0) {
-        now = getRow(w);
-      } else {
-        return last;
-      }
-    }
-    w = now.getCmd(new Character(e.next()));
-    return (w >= 0) ? cmds.get(w) : last;
+      for (int i = 0; i < key.length() - 1; i++) {
+        Character ch = new Character(e.next());
+        w = now.getCmd(ch);
+        if (w >= 0) {
+          last = cmds.get(w);
+        }
+        w = now.getRef(ch);
+        if (w >= 0) {
+          now = getRow(w);
+        } else {
+          return last;
+        }
+      }
+      w = now.getCmd(new Character(e.next()));
+      return (w >= 0) ? cmds.get(w) : last;
+    } else {
+      return null;
-  }
+    }
+  }
   
   /**
    * Return the Row at the given index.
@@ -349,21 +359,22 @@
     Row r = getRow(node);
     
     StrEnum e = new StrEnum(key, forward);
-    
+    if (r != null) {
-    for (int i = 0; i < e.length() - 1; i++) {
-      Character ch = new Character(e.next());
-      node = r.getRef(ch);
-      if (node >= 0) {
-        r = getRow(node);
-      } else {
-        node = rows.size();
-        Row n;
-        rows.add(n = new Row());
-        r.setRef(ch, node);
-        r = n;
-      }
-    }
-    r.setCmd(new Character(e.next()), id_cmd);
+      for (int i = 0; i < e.length() - 1; i++) {
+        Character ch = new Character(e.next());
+        node = r.getRef(ch);
+        if (node >= 0) {
+          r = getRow(node);
+        } else {
+          node = rows.size();
+          Row n;
+          rows.add(n = new Row());
+          r.setRef(ch, node);
+          r = n;
+        }
+      }
+      r.setCmd(new Character(e.next()), id_cmd);
+    }
   }
   
   /**
