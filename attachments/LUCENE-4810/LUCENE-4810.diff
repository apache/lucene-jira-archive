*** EdgeNGramTokenFilter.java-4.0-orig	2013-02-28 13:59:05.000000000 -0800
--- EdgeNGramTokenFilter.java	2013-03-01 15:42:55.000000000 -0800
***************
*** 21,26 ****
--- 21,27 ----
  import org.apache.lucene.analysis.TokenStream;
  import org.apache.lucene.analysis.tokenattributes.OffsetAttribute;
  import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
+ import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute;
  
  import java.io.IOException;
  
***************
*** 73,81 ****
--- 74,84 ----
    private int tokStart;
    private int tokEnd; // only used if the length changed before this filter
    private boolean hasIllegalOffsets; // only if the length changed before this filter
+   private int savePosIncr;
    
    private final CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);
    private final OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);
+   private final PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);
  
    /**
     * Creates EdgeNGramTokenFilter that can generate n-grams in the sizes of the given range
***************
*** 132,137 ****
--- 135,141 ----
            // if length by start + end offsets doesn't match the term text then assume
            // this is a synonym and don't adjust the offsets.
            hasIllegalOffsets = (tokStart + curTermLength) != tokEnd;
+ 	  savePosIncr = posIncrAtt.getPositionIncrement();
          }
        }
        if (curGramSize <= maxGram) {
***************
*** 146,151 ****
--- 150,161 ----
            } else {
              offsetAtt.setOffset(tokStart + start, tokStart + end);
            }
+ 	  // first ngram gets increment, others don't
+ 	  if (curGramSize == minGram) {
+ 	    posIncrAtt.setPositionIncrement(savePosIncr);
+ 	  } else {
+ 	    posIncrAtt.setPositionIncrement(0);
+ 	  }
            termAtt.copyBuffer(curTermBuffer, start, curGramSize);
            curGramSize++;
            return true;
