Index: lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewLocaleTask.java
===================================================================
--- lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewLocaleTask.java	(revision 1579346)
+++ lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewLocaleTask.java	(working copy)
@@ -65,7 +65,7 @@
     getRunData().setLocale(locale);
     System.out.println("Changed Locale to: " + 
         (locale == null ? "null" : 
-        (locale.getDisplayName().length() == 0) ? "root locale" : locale));
+        (locale.getDisplayName(Locale.ENGLISH).length() == 0) ? "root locale" : locale));
     return 1;
   }
   
Index: lucene/common-build.xml
===================================================================
--- lucene/common-build.xml	(revision 1579346)
+++ lucene/common-build.xml	(working copy)
@@ -2181,7 +2181,7 @@
 
   <!-- GROOVY scripting engine for ANT tasks -->
   <target name="resolve-groovy" unless="groovy.loaded" depends="ivy-availability-check,ivy-configure">
-    <ivy:cachepath organisation="org.codehaus.groovy" module="groovy-all" revision="2.2.1"
+    <ivy:cachepath organisation="org.codehaus.groovy" module="groovy-all" revision="2.2.2"
       inline="true" conf="default" type="jar" transitive="true" pathid="groovy.classpath"/>
     <taskdef name="groovy"
       classname="org.codehaus.groovy.ant.Groovy"
@@ -2196,7 +2196,7 @@
   <property name="forbidden-rue-excludes" value=""/>
   
   <target name="-install-forbidden-apis" unless="forbidden-apis.loaded" depends="ivy-availability-check,ivy-configure">
-    <ivy:cachepath organisation="de.thetaphi" module="forbiddenapis" revision="1.4"
+    <ivy:cachepath organisation="de.thetaphi" module="forbiddenapis" revision="1.4.1"
       inline="true" conf="default" transitive="true" pathid="forbidden-apis.classpath"/>
     <taskdef name="forbidden-apis" classname="de.thetaphi.forbiddenapis.AntTask" classpathref="forbidden-apis.classpath"/>
     <property name="forbidden-apis.loaded" value="true"/>
@@ -2251,7 +2251,7 @@
   <!-- PEGDOWN macro: Before using depend on the target "resolve-pegdown,resolve-groovy" -->
   
   <target name="resolve-pegdown" unless="pegdown.loaded" depends="ivy-availability-check,ivy-configure">
-    <ivy:cachepath organisation="org.pegdown" module="pegdown" revision="1.4.1"
+    <ivy:cachepath organisation="org.pegdown" module="pegdown" revision="1.4.2"
       inline="true" conf="default" transitive="true" pathid="pegdown.classpath"/>
     <property name="pegdown.loaded" value="true"/>
   </target>
Index: lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil.java
===================================================================
--- lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil.java	(revision 1579346)
+++ lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil.java	(working copy)
@@ -460,8 +460,8 @@
         assertEquals(expectedTopDocs.getMaxScore(), actualTopDocs.getMaxScore(), 0.0f);
         for (int i = 0; i < expectedTopDocs.scoreDocs.length; i++) {
           if (VERBOSE) {
-            System.out.printf("Expected doc: %d | Actual doc: %d\n", expectedTopDocs.scoreDocs[i].doc, actualTopDocs.scoreDocs[i].doc);
-            System.out.printf("Expected score: %f | Actual score: %f\n", expectedTopDocs.scoreDocs[i].score, actualTopDocs.scoreDocs[i].score);
+            System.out.printf(Locale.ENGLISH, "Expected doc: %d | Actual doc: %d\n", expectedTopDocs.scoreDocs[i].doc, actualTopDocs.scoreDocs[i].doc);
+            System.out.printf(Locale.ENGLISH, "Expected score: %f | Actual score: %f\n", expectedTopDocs.scoreDocs[i].score, actualTopDocs.scoreDocs[i].score);
           }
           assertEquals(expectedTopDocs.scoreDocs[i].doc, actualTopDocs.scoreDocs[i].doc);
           assertEquals(expectedTopDocs.scoreDocs[i].score, actualTopDocs.scoreDocs[i].score, 0.0f);
Index: lucene/misc/src/java/org/apache/lucene/misc/GetTermInfo.java
===================================================================
--- lucene/misc/src/java/org/apache/lucene/misc/GetTermInfo.java	(revision 1579346)
+++ lucene/misc/src/java/org/apache/lucene/misc/GetTermInfo.java	(working copy)
@@ -18,6 +18,7 @@
  */
 
 import java.io.File;
+import java.util.Locale;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.FSDirectory;
 import org.apache.lucene.index.DirectoryReader;
@@ -49,7 +50,7 @@
   
   public static void getTermInfo(Directory dir, Term term) throws Exception {
     IndexReader reader = DirectoryReader.open(dir);
-    System.out.printf("%s:%s \t totalTF = %,d \t doc freq = %,d \n",
+    System.out.printf(Locale.ROOT, "%s:%s \t totalTF = %,d \t doc freq = %,d \n",
          term.field(), term.text(), reader.totalTermFreq(term), reader.docFreq(term)); 
   }
    
Index: lucene/misc/src/java/org/apache/lucene/misc/HighFreqTerms.java
===================================================================
--- lucene/misc/src/java/org/apache/lucene/misc/HighFreqTerms.java	(revision 1579346)
+++ lucene/misc/src/java/org/apache/lucene/misc/HighFreqTerms.java	(working copy)
@@ -31,6 +31,7 @@
 import java.io.File;
 import java.io.IOException;
 import java.util.Comparator;
+import java.util.Locale;
 
 /**
  * <code>HighFreqTerms</code> class extracts the top n most frequent terms
@@ -76,7 +77,7 @@
     TermStats[] terms = getHighFreqTerms(reader, numTerms, field, comparator);
 
     for (int i = 0; i < terms.length; i++) {
-      System.out.printf("%s:%s \t totalTF = %,d \t docFreq = %,d \n",
+      System.out.printf(Locale.ROOT, "%s:%s \t totalTF = %,d \t docFreq = %,d \n",
             terms[i].field, terms[i].termtext.utf8ToString(), terms[i].totalTermFreq, terms[i].docFreq);
     }
     reader.close();
Index: solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SimplePropertiesWriter.java
===================================================================
--- solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SimplePropertiesWriter.java	(revision 1579346)
+++ solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SimplePropertiesWriter.java	(working copy)
@@ -90,7 +90,7 @@
     if(params.get(LOCALE) != null) {
       String localeStr = params.get(LOCALE);
       for (Locale l : Locale.getAvailableLocales()) {
-        if(localeStr.equals(l.getDisplayName())) {
+        if(localeStr.equals(l.getDisplayName(Locale.ROOT))) {
           locale = l;
           break;
         }
Index: solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/SolrRecordWriter.java
===================================================================
--- solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/SolrRecordWriter.java	(revision 1579346)
+++ solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/SolrRecordWriter.java	(working copy)
@@ -238,7 +238,7 @@
         } catch (InterruptedException e) {
           exitValue = "interrupted";
         }
-        System.err.format("Exit value of 'ls -lR' is %s%n", exitValue);
+        System.err.format(Locale.ENGLISH, "Exit value of 'ls -lR' is %s%n", exitValue);
       }
       if (unpackedDir.getName().equals(SolrOutputFormat.getZipName(conf))) {
         LOG.info("Using this unpacked directory as solr home: {}", unpackedDir);
