Index: src/java/org/apache/lucene/store/ChecksumIndexOutput.java
===================================================================
--- src/java/org/apache/lucene/store/ChecksumIndexOutput.java	(revision 899916)
+++ src/java/org/apache/lucene/store/ChecksumIndexOutput.java	(working copy)
@@ -22,7 +22,10 @@
 import java.util.zip.Checksum;
 
 /** Writes bytes through to a primary IndexOutput, computing
- *  checksum.  Note that you cannot use seek().*/
+ *  checksum.  Note that you cannot use seek().
+ *
+ * @lucene.internal
+ */
 public class ChecksumIndexOutput extends IndexOutput {
   IndexOutput main;
   Checksum digest;
Index: src/java/org/apache/lucene/store/ChecksumIndexInput.java
===================================================================
--- src/java/org/apache/lucene/store/ChecksumIndexInput.java	(revision 899916)
+++ src/java/org/apache/lucene/store/ChecksumIndexInput.java	(working copy)
@@ -22,7 +22,10 @@
 import java.util.zip.Checksum;
 
 /** Writes bytes through to a primary IndexOutput, computing
- *  checksum as it goes. Note that you cannot use seek(). */
+ *  checksum as it goes. Note that you cannot use seek().
+ *
+ * @lucene.internal
+ */
 public class ChecksumIndexInput extends IndexInput {
   IndexInput main;
   Checksum digest;
Index: src/java/org/apache/lucene/util/StringHelper.java
===================================================================
--- src/java/org/apache/lucene/util/StringHelper.java	(revision 899916)
+++ src/java/org/apache/lucene/util/StringHelper.java	(working copy)
@@ -20,6 +20,8 @@
 
 /**
  * Methods for manipulating strings.
+ *
+ * @lucene.internal
  */
 public abstract class StringHelper {
   /**
Index: src/java/org/apache/lucene/util/BitUtil.java
===================================================================
--- src/java/org/apache/lucene/util/BitUtil.java	(revision 899916)
+++ src/java/org/apache/lucene/util/BitUtil.java	(working copy)
@@ -18,6 +18,7 @@
 package org.apache.lucene.util; // from org.apache.solr.util rev 555343
 
 /**  A variety of high efficiency bit twiddling routines.
+ * @lucene.internal
  */
 public class BitUtil {
 
Index: src/java/org/apache/lucene/util/CharacterUtils.java
===================================================================
--- src/java/org/apache/lucene/util/CharacterUtils.java	(revision 899916)
+++ src/java/org/apache/lucene/util/CharacterUtils.java	(working copy)
@@ -21,6 +21,7 @@
  * {@link CharacterUtils} provides a unified interface to Character-related
  * operations to implement backwards compatible character operations based on a
  * {@link Version} instance.
+ * @lucene.internal
  */
 public abstract class CharacterUtils {
   private static final Java4CharacterUtils JAVA_4 = new Java4CharacterUtils();
Index: src/java/org/apache/lucene/util/Parameter.java
===================================================================
--- src/java/org/apache/lucene/util/Parameter.java	(revision 899916)
+++ src/java/org/apache/lucene/util/Parameter.java	(working copy)
@@ -26,6 +26,7 @@
 /**
  * A serializable Enum class.
  * @deprecated Use Java 5 enum, will be removed in a later Lucene 3.x release.
+ * @lucene.internal
  */
 @Deprecated
 @SuppressWarnings("serial")
Index: src/java/org/apache/lucene/util/cache/SimpleLRUCache.java
===================================================================
--- src/java/org/apache/lucene/util/cache/SimpleLRUCache.java	(revision 899916)
+++ src/java/org/apache/lucene/util/cache/SimpleLRUCache.java	(working copy)
@@ -27,6 +27,8 @@
  *
  * @deprecated Lucene's internal use of this class has now
  * switched to {@link DoubleBarrelLRUCache}.
+ *
+ * @lucene.internal
  */
 @Deprecated
 public class SimpleLRUCache<K,V> extends SimpleMapCache<K,V> {
Index: src/java/org/apache/lucene/util/cache/Cache.java
===================================================================
--- src/java/org/apache/lucene/util/cache/Cache.java	(revision 899916)
+++ src/java/org/apache/lucene/util/cache/Cache.java	(working copy)
@@ -21,6 +21,8 @@
 
 /**
  * Base class for cache implementations.
+ *
+ * @lucene.internal
  */
 public abstract class Cache<K,V> implements Closeable {
   
Index: src/java/org/apache/lucene/util/cache/SimpleMapCache.java
===================================================================
--- src/java/org/apache/lucene/util/cache/SimpleMapCache.java	(revision 899916)
+++ src/java/org/apache/lucene/util/cache/SimpleMapCache.java	(working copy)
@@ -28,6 +28,8 @@
  *
  * @deprecated Lucene's internal use of this class has now
  * switched to {@link DoubleBarrelLRUCache}.
+ *
+ * @lucene.internal
  */
 @Deprecated
 public class SimpleMapCache<K,V> extends Cache<K,V> {
Index: src/java/org/apache/lucene/util/SimpleStringInterner.java
===================================================================
--- src/java/org/apache/lucene/util/SimpleStringInterner.java	(revision 899916)
+++ src/java/org/apache/lucene/util/SimpleStringInterner.java	(working copy)
@@ -19,7 +19,10 @@
 
 /**
  * Simple lockless and memory barrier free String intern cache that is guaranteed
- * to return the same String instance as String.intern() does.
+ * to return the same String instance as String.intern()
+ * does.
+ *
+ * @lucene.internal
  */
 public class SimpleStringInterner extends StringInterner {
 
Index: src/java/org/apache/lucene/util/VirtualMethod.java
===================================================================
--- src/java/org/apache/lucene/util/VirtualMethod.java	(revision 899916)
+++ src/java/org/apache/lucene/util/VirtualMethod.java	(working copy)
@@ -54,6 +54,8 @@
  * The one with the larger distance should be used preferable.
  * This way also more complicated method rename scenarios can be handled
  * (think of 2.9 {@code TokenStream} deprecations).</p>
+ *
+ * @lucene.internal
  */
 public final class VirtualMethod<C> {
 
Index: src/java/org/apache/lucene/util/ToStringUtils.java
===================================================================
--- src/java/org/apache/lucene/util/ToStringUtils.java	(revision 899916)
+++ src/java/org/apache/lucene/util/ToStringUtils.java	(working copy)
@@ -19,6 +19,8 @@
 
 /**
  * Helper methods to ease implementing {@link Object#toString()}.
+ *
+ * @lucene.internal
  */
 public class ToStringUtils {
   /** for printing boost only if not 1.0 */ 
Index: src/java/org/apache/lucene/util/CloseableThreadLocal.java
===================================================================
--- src/java/org/apache/lucene/util/CloseableThreadLocal.java	(revision 899916)
+++ src/java/org/apache/lucene/util/CloseableThreadLocal.java	(working copy)
@@ -48,6 +48,8 @@
  *  {@link #close} takes care of all
  *  threads.  You should not call {@link #close} until all
  *  threads are done using the instance.
+ *
+ * @lucene.internal
  */
 
 public class CloseableThreadLocal<T> implements Closeable {
Index: src/java/org/apache/lucene/util/ReaderUtil.java
===================================================================
--- src/java/org/apache/lucene/util/ReaderUtil.java	(revision 899916)
+++ src/java/org/apache/lucene/util/ReaderUtil.java	(working copy)
@@ -25,6 +25,7 @@
 /**
  * Common util methods for dealing with {@link IndexReader}s.
  *
+ * @lucene.internal
  */
 public class ReaderUtil {
 
Index: src/java/org/apache/lucene/util/MapOfSets.java
===================================================================
--- src/java/org/apache/lucene/util/MapOfSets.java	(revision 899916)
+++ src/java/org/apache/lucene/util/MapOfSets.java	(working copy)
@@ -25,6 +25,7 @@
 
 /**
  * Helper class for keeping Lists of Objects associated with keys. <b>WARNING: THIS CLASS IS NOT THREAD SAFE</b>
+ * @lucene.internal
  */
 public class MapOfSets<K, V> {
 
Index: src/java/org/apache/lucene/util/DummyConcurrentLock.java
===================================================================
--- src/java/org/apache/lucene/util/DummyConcurrentLock.java	(revision 899916)
+++ src/java/org/apache/lucene/util/DummyConcurrentLock.java	(working copy)
@@ -24,6 +24,7 @@
 
 /**
  * A dummy lock as a replacement for {@link ReentrantLock} to disable locking
+ * @lucene.internal
  */
 public final class DummyConcurrentLock implements Lock {
 
Index: src/java/org/apache/lucene/util/IndexableBinaryStringTools.java
===================================================================
--- src/java/org/apache/lucene/util/IndexableBinaryStringTools.java	(revision 899916)
+++ src/java/org/apache/lucene/util/IndexableBinaryStringTools.java	(working copy)
@@ -50,6 +50,8 @@
  * WARNING: This means that the deprecated Buffer-based methods 
  * only work correctly with buffers that have an offset of 0. For example, they
  * will not correctly interpret buffers returned by {@link ByteBuffer#slice}.  
+ *
+ * @lucene.experimental
  */
 public class IndexableBinaryStringTools {
 
Index: src/java/org/apache/lucene/util/ArrayUtil.java
===================================================================
--- src/java/org/apache/lucene/util/ArrayUtil.java	(revision 899916)
+++ src/java/org/apache/lucene/util/ArrayUtil.java	(working copy)
@@ -19,6 +19,8 @@
 
 /**
  * Methods for manipulating arrays.
+ *
+ * @lucene.internal
  */
 public final class ArrayUtil {
   /*
Index: src/java/org/apache/lucene/util/UnicodeUtil.java
===================================================================
--- src/java/org/apache/lucene/util/UnicodeUtil.java	(revision 899916)
+++ src/java/org/apache/lucene/util/UnicodeUtil.java	(working copy)
@@ -56,6 +56,8 @@
  *
  * <p><b>WARNING</b>: This API is a new and experimental and
  * may suddenly change. </p>
+ *
+ * @lucene.internal
  */
 
 final public class UnicodeUtil {
Index: src/java/org/apache/lucene/util/PriorityQueue.java
===================================================================
--- src/java/org/apache/lucene/util/PriorityQueue.java	(revision 899916)
+++ src/java/org/apache/lucene/util/PriorityQueue.java	(working copy)
@@ -23,7 +23,8 @@
  *
  * <p><b>NOTE</b>: This class pre-allocates a full array of
  * length <code>maxSize+1</code>, in {@link #initialize}.
-  * 
+ * 
+ * @lucene.internal
 */
 public abstract class PriorityQueue<T> {
   private int size;
Index: src/java/org/apache/lucene/util/ScorerDocQueue.java
===================================================================
--- src/java/org/apache/lucene/util/ScorerDocQueue.java	(revision 899916)
+++ src/java/org/apache/lucene/util/ScorerDocQueue.java	(working copy)
@@ -27,6 +27,8 @@
 /** A ScorerDocQueue maintains a partial ordering of its Scorers such that the
   least Scorer can always be found in constant time.  Put()'s and pop()'s
   require log(size) time. The ordering is by Scorer.doc().
+ *
+ * @lucene.internal
  */
 public class ScorerDocQueue {  // later: SpansQueue for spans with doc and term positions
   private final HeapedScorerDoc[] heap;
Index: src/java/org/apache/lucene/util/English.java
===================================================================
--- src/java/org/apache/lucene/util/English.java	(revision 899916)
+++ src/java/org/apache/lucene/util/English.java	(working copy)
@@ -17,7 +17,9 @@
  * limitations under the License.
  */
 
-
+/**
+ * @lucene.internal
+ */ 
 public class English {
 
   public static String longToEnglish(long i) {
Index: src/java/org/apache/lucene/util/RamUsageEstimator.java
===================================================================
--- src/java/org/apache/lucene/util/RamUsageEstimator.java	(revision 899916)
+++ src/java/org/apache/lucene/util/RamUsageEstimator.java	(working copy)
@@ -33,6 +33,8 @@
  * If checkIntered, all Strings checked will be interned, but those
  * that were not already interned will be released for GC when the
  * estimate is complete.
+ *
+ * @lucene.internal
  */
 public final class RamUsageEstimator {
   private MemoryModel memoryModel;
Index: src/java/org/apache/lucene/util/SmallFloat.java
===================================================================
--- src/java/org/apache/lucene/util/SmallFloat.java	(revision 899916)
+++ src/java/org/apache/lucene/util/SmallFloat.java	(working copy)
@@ -17,6 +17,8 @@
 
 
 /** Floating point numbers smaller than 32 bits.
+ *
+ * @lucene.internal
  */
 public class SmallFloat {
 
