Index: lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomPlaneTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomPlaneTest.java	(revision 2ad63b2d753a45e4d897fd43dfe6d144bd12aaad)
+++ lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomPlaneTest.java	(revision )
@@ -51,6 +51,32 @@
     }
   }
 
+  @Test
+  @Repeat(iterations = 10)
+  public void testPlaneThreePointsAccuracy() {
+    PlanetModel planetModel = randomPlanetModel();
+    for (int i= 0; i < 1000; i++) {
+      GeoPoint point1 = randomGeoPoint(planetModel);
+      double dist = random().nextDouble() * Math.PI - Vector.MINIMUM_ANGULAR_RESOLUTION;
+      double bearing = random().nextDouble() * 2 * Math.PI;
+      GeoPoint point2 = planetModel.surfacePointOnBearing(point1, dist, bearing );
+      dist = random().nextDouble() * Vector.MINIMUM_ANGULAR_RESOLUTION + Vector.MINIMUM_ANGULAR_RESOLUTION;
+      bearing = random().nextDouble() * 2 * Math.PI;
+      GeoPoint point3 = planetModel.surfacePointOnBearing(point1, dist, bearing );
+      GeoPoint check = randomGeoPoint(planetModel);
+      SidedPlane plane  = SidedPlane.constructNormalizedThreePointSidedPlane(check, point1, point2, point3);
+      String msg = planetModel + " point 1: " + point1 + ", point 2: " + point2 + ", point 3: " + point3 + " , check: " + check;
+      if (plane == null) {
+        fail(msg);
+      }
+      assertTrue(plane.evaluate(check) + " " + msg, plane.isWithin(check));
+      assertTrue(plane.evaluate(point1) + " " +msg, plane.isWithin(point3));
+      assertTrue(plane.evaluate(point2) + " " +msg, plane.isWithin(point2));
+      assertTrue(plane.evaluate(point3) + " " +msg, plane.isWithin(point1));
+    }
+  }
+
+
 
   @Test
   @Repeat(iterations = 10)
