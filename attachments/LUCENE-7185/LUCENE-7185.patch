diff --git a/lucene/sandbox/src/java/org/apache/lucene/document/LatLonGrid.java b/lucene/sandbox/src/java/org/apache/lucene/document/LatLonGrid.java
index 5d594c6..9b4e981 100644
--- a/lucene/sandbox/src/java/org/apache/lucene/document/LatLonGrid.java
+++ b/lucene/sandbox/src/java/org/apache/lucene/document/LatLonGrid.java
@@ -74,11 +74,17 @@ final class LatLonGrid {
     }
     long latitudeRange = maxLat - (long) minLat;
     long longitudeRange = maxLon - (long) minLon;
-    // we spill over the edge of the bounding box in each direction a bit,
-    // but it prevents edge case bugs.
-    latPerCell = latitudeRange / (GRID_SIZE - 1);
-    lonPerCell = longitudeRange / (GRID_SIZE - 1);
-    fill(polygons, 0, GRID_SIZE, 0, GRID_SIZE);
+
+    if (latitudeRange < GRID_SIZE || longitudeRange < GRID_SIZE) {
+      // don't complicate fill right now if you pass e.g. emptyish stuff: make an "empty grid"
+      latPerCell = lonPerCell = Long.MAX_VALUE;
+    } else {
+      // we spill over the edge of the bounding box in each direction a bit,
+      // but it prevents edge case bugs.
+      latPerCell = latitudeRange / (GRID_SIZE - 1);
+      lonPerCell = longitudeRange / (GRID_SIZE - 1);
+      fill(polygons, 0, GRID_SIZE, 0, GRID_SIZE);
+    }
   }
   
   /** fills a 2D range of grid cells [minLatIndex .. maxLatIndex) X [minLonIndex .. maxLonIndex) */
diff --git a/lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil.java b/lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil.java
index 0d241f6..36f27ec 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil.java
@@ -20,21 +20,61 @@ import java.util.ArrayList;
 import java.util.List;
 import java.util.Random;
 
+import org.apache.lucene.util.NumericUtils;
 import org.apache.lucene.util.SloppyMath;
+import org.apache.lucene.util.TestUtil;
 
 import com.carrotsearch.randomizedtesting.RandomizedContext;
 
 /** static methods for testing geo */
 public class GeoTestUtil {
 
+  private static final long LATITUDE_MIN_SORTABLE = NumericUtils.doubleToSortableLong(-90);
+  private static final long LATITUDE_MAX_SORTABLE = NumericUtils.doubleToSortableLong(90);
+
   /** returns next pseudorandom latitude (anywhere) */
   public static double nextLatitude() {
-    return -90 + 180.0 * random().nextDouble();
+    int surpriseMe = random().nextInt(17);
+    if (surpriseMe == 0) {
+      // random bitpattern in range
+      return NumericUtils.sortableLongToDouble(TestUtil.nextLong(random(), LATITUDE_MIN_SORTABLE, LATITUDE_MAX_SORTABLE));
+    } else if (surpriseMe == 1) {
+      // edge case
+      return -90.0;
+    } else if (surpriseMe == 2) {
+      // edge case
+      return 90.0;
+    } else if (surpriseMe == 3) {
+      // may trigger divide by zero
+      return 0.0;
+    } else {
+      // distributed ~ evenly
+      return -90 + 180.0 * random().nextDouble();
+    }
   }
 
+  private static final long LONGITUDE_MIN_SORTABLE = NumericUtils.doubleToSortableLong(-180);
+  private static final long LONGITUDE_MAX_SORTABLE = NumericUtils.doubleToSortableLong(180);
+
   /** returns next pseudorandom longitude (anywhere) */
   public static double nextLongitude() {
-    return -180 + 360.0 * random().nextDouble();
+    int surpriseMe = random().nextInt(17);
+    if (surpriseMe == 0) {
+      // random bitpattern in range
+      return NumericUtils.sortableLongToDouble(TestUtil.nextLong(random(), LONGITUDE_MIN_SORTABLE, LONGITUDE_MAX_SORTABLE));
+    } else if (surpriseMe == 1) {
+      // edge case
+      return -180.0;
+    } else if (surpriseMe == 2) {
+      // edge case
+      return 180.0;
+    } else if (surpriseMe == 3) {
+      // may trigger divide by 0
+      return 0.0;
+    } else {
+      // distributed ~ evenly
+      return -180 + 360.0 * random().nextDouble();
+    }
   }
 
   /** returns next pseudorandom latitude, kinda close to {@code otherLatitude} */
