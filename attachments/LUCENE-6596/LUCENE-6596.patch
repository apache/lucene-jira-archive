diff --git a/lucene/core/src/java/org/apache/lucene/search/spans/NearSpansUnordered.java b/lucene/core/src/java/org/apache/lucene/search/spans/NearSpansUnordered.java
index 07a3cae..f69b670 100644
--- a/lucene/core/src/java/org/apache/lucene/search/spans/NearSpansUnordered.java
+++ b/lucene/core/src/java/org/apache/lucene/search/spans/NearSpansUnordered.java
@@ -192,7 +192,11 @@ public class NearSpansUnordered extends ConjunctionSpans {
 
   private boolean atMatch() {
     assert minPositionCell().docID() == maxEndPositionCell.docID();
-    return (maxEndPositionCell.endPosition() - minPositionCell().startPosition() - totalSpanLength) <= allowedSlop;
+    return slop() <= allowedSlop;
+  }
+
+  private int slop() {
+    return maxEndPositionCell.endPosition() - minPositionCell().startPosition() - totalSpanLength;
   }
 
   @Override
@@ -255,7 +259,8 @@ public class NearSpansUnordered extends ConjunctionSpans {
 
   @Override
   public int width() {
-    return maxEndPositionCell.startPosition() - minPositionCell().startPosition();
+    int s = slop();
+    return s < 0 ? 0 : s;
   }
 
   @Override
diff --git a/lucene/core/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered.java b/lucene/core/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered.java
index 611f42a..34e541f 100644
--- a/lucene/core/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered.java
+++ b/lucene/core/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered.java
@@ -88,19 +88,19 @@ public class TestNearSpansOrdered extends LuceneTestCase {
     return makeQuery("w1","w2","w3",1,true);
   }
 
-  protected SpanNearQuery makeOverlappedQuery(
-      String sqt1, String sqt2, boolean sqOrdered,
-      String t3, boolean ordered) {
+  protected SpanNearQuery makeNestedQuery(
+      String sqt1, String sqt2, boolean sqOrdered, int sqSlop,
+      String t3, boolean ordered, int slop) {
     return new SpanNearQuery(
       new SpanQuery[] {
         new SpanNearQuery(new SpanQuery[] {
           new SpanTermQuery(new Term(FIELD, sqt1)),
             new SpanTermQuery(new Term(FIELD, sqt2)) },
-            1,
+            sqSlop,
             sqOrdered
           ),
           new SpanTermQuery(new Term(FIELD, t3)) },
-          0,
+          slop,
           ordered);
   }
   
@@ -198,17 +198,17 @@ public class TestNearSpansOrdered extends LuceneTestCase {
   }
 
   public void testOverlappedOrderedSpan() throws Exception {
-    SpanNearQuery q = makeOverlappedQuery("w5", "w3", false, "w4", true);
+    SpanNearQuery q = makeNestedQuery("w5", "w3", false, 1, "w4", true, 0);
     CheckHits.checkHits(random(), q, FIELD, searcher, new int[] {});
   }
   
   public void testOverlappedNonOrderedSpan() throws Exception {
-    SpanNearQuery q = makeOverlappedQuery("w3", "w5", true, "w4", false);
+    SpanNearQuery q = makeNestedQuery("w3", "w5", true, 1, "w4", false, 0);
     CheckHits.checkHits(random(), q, FIELD, searcher, new int[] {0});
   }
 
   public void testNonOverlappedOrderedSpan() throws Exception {
-    SpanNearQuery q = makeOverlappedQuery("w3", "w4", true, "w5", true);
+    SpanNearQuery q = makeNestedQuery("w3", "w4", true, 1, "w5", true, 0);
     CheckHits.checkHits(random(), q, FIELD, searcher, new int[] {0});
   }
 
@@ -291,14 +291,42 @@ public class TestNearSpansOrdered extends LuceneTestCase {
     assertFinished(spans);
   }
 
-  /*
-    protected String[] docFields = {
-    "w1 w2 w3 w4 w5",
-    "w1 w3 w2 w3 zz",
-    "w1 xx w2 yy w3",
-    "w1 w3 xx w2 yy w3 zz",
-    "t1 t2 t2 t1",
-    "g x x g g x x x g g x x g"
-  };
-   */
+  public void testSameWidthOrderedUnorderedFlat() throws Exception {
+    SpanNearQuery ordered = makeQuery("w1", "w3", "w5", 2, true);
+    Spans oSpans = MultiSpansWrapper.wrap(searcher.getIndexReader(), ordered);
+    SpanNearQuery unordered = makeQuery("w1", "w3", "w5", 2, false);
+    Spans uSpans = MultiSpansWrapper.wrap(searcher.getIndexReader(), unordered);
+    assertNext(oSpans,0,0,5);
+    assertNext(uSpans,0,0,5);
+    assertEquals(2, oSpans.width());
+    assertEquals(2, uSpans.width());
+    assertFinished(oSpans);
+    assertFinished(uSpans);
+  }
+
+  public void testSameWidthOrderedUnorderedNested1() throws Exception {
+    SpanNearQuery ordered = makeNestedQuery("w1", "w3", true, 2, "w5", true, 2);
+    Spans oSpans = MultiSpansWrapper.wrap(searcher.getIndexReader(), ordered);
+    SpanNearQuery unordered = makeNestedQuery("w1", "w3", false, 2, "w5", false, 2);
+    Spans uSpans = MultiSpansWrapper.wrap(searcher.getIndexReader(), unordered);
+    assertNext(oSpans,0,0,5);
+    assertNext(uSpans,0,0,5);
+    assertEquals(1, oSpans.width());
+    assertEquals(1, uSpans.width());
+    assertFinished(oSpans);
+    assertFinished(uSpans);
+  }
+
+  public void testSameWidthOrderedUnorderedNested2() throws Exception {
+    SpanNearQuery mixed1 = makeNestedQuery("w3", "w5", true, 2, "w1", false, 2);
+    Spans mSpans = MultiSpansWrapper.wrap(searcher.getIndexReader(), mixed1);
+    SpanNearQuery unordered = makeNestedQuery("w3", "w5", false, 2, "w1", false, 2);
+    Spans uSpans = MultiSpansWrapper.wrap(searcher.getIndexReader(), unordered);
+    assertNext(mSpans,0,0,5);
+    assertNext(uSpans,0,0,5);
+    assertEquals(1, mSpans.width());
+    assertEquals(1, uSpans.width());
+    assertFinished(mSpans);
+    assertFinished(uSpans);
+  }
 }
