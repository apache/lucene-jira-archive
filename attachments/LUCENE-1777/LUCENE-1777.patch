Index: contrib/spatial/src/java/org/apache/lucene/spatial/tier/projections/CartesianTierPlotter.java
===================================================================
--- contrib/spatial/src/java/org/apache/lucene/spatial/tier/projections/CartesianTierPlotter.java	(révision 800245)
+++ contrib/spatial/src/java/org/apache/lucene/spatial/tier/projections/CartesianTierPlotter.java	(copie de travail)
@@ -138,7 +138,7 @@
    * @param longitude
    * @return
    */
-  public int bestFit(int miles){
+  public int bestFit(double miles){
     
     //28,892 a rough circumference of the earth
     int circ = 28892;
Index: contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceQueryBuilder.java
===================================================================
--- contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceQueryBuilder.java	(révision 800245)
+++ contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceQueryBuilder.java	(copie de travail)
@@ -58,7 +58,7 @@
     
     
     CartesianPolyFilterBuilder cpf = new CartesianPolyFilterBuilder(tierFieldPrefix);
-    cartesianFilter = cpf.getBoundingArea(lat, lng, (int)miles);
+    cartesianFilter = cpf.getBoundingArea(lat, lng, miles);
 
     /* create precise distance filter */
     if( needPrecise)
@@ -85,7 +85,7 @@
     this.needPrecision = needPrecise;
     
     CartesianPolyFilterBuilder cpf = new CartesianPolyFilterBuilder(tierFieldPrefix);
-    cartesianFilter = cpf.getBoundingArea(lat, lng, (int)miles);
+    cartesianFilter = cpf.getBoundingArea(lat, lng, miles);
 
     /* create precise distance filter */
     if( needPrecise)
Index: contrib/spatial/src/java/org/apache/lucene/spatial/tier/CartesianPolyFilterBuilder.java
===================================================================
--- contrib/spatial/src/java/org/apache/lucene/spatial/tier/CartesianPolyFilterBuilder.java	(révision 800245)
+++ contrib/spatial/src/java/org/apache/lucene/spatial/tier/CartesianPolyFilterBuilder.java	(copie de travail)
@@ -42,7 +42,7 @@
     this.tierPrefix = tierPrefix;
   }
   
-  public Shape getBoxShape(double latitude, double longitude, int miles)
+  public Shape getBoxShape(double latitude, double longitude, double miles)
   {  
     Rectangle box = DistanceUtils.getInstance().getBoundary(latitude, longitude, miles);
     
@@ -104,7 +104,7 @@
     return shape;
   }
   
-  public Filter getBoundingArea(double latitude, double longitude, int miles) 
+  public Filter getBoundingArea(double latitude, double longitude, double miles) 
   {
     Shape shape = getBoxShape(latitude, longitude, miles);
     return new CartesianShapeFilter(shape, shape.getTierId());
