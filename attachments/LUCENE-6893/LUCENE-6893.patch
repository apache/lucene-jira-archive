diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CorePlusExtensionsParser.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CorePlusExtensionsParser.java
index 88536a5..d36a03e 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CorePlusExtensionsParser.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CorePlusExtensionsParser.java
@@ -2,7 +2,7 @@ package org.apache.lucene.queryparser.xml;
 
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.queryparser.classic.QueryParser;
-import org.apache.lucene.queryparser.xml.builders.*;
+import org.apache.lucene.queryparser.xml.builders.FuzzyLikeThisQueryBuilder;
 
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
@@ -26,7 +26,7 @@ import org.apache.lucene.queryparser.xml.builders.*;
  * Lucene's <code>sandbox</code> and <code>queries</code>
  * modules in addition to core queries.
  */
-public class CorePlusExtensionsParser extends CoreParser {
+public class CorePlusExtensionsParser extends CorePlusQueriesParser {
 
   /**
    * Construct an XML parser that uses a single instance QueryParser for handling
@@ -49,9 +49,6 @@ public class CorePlusExtensionsParser extends CoreParser {
 
   private CorePlusExtensionsParser(String defaultField, Analyzer analyzer, QueryParser parser) {
     super(defaultField, analyzer, parser);
-    String fields[] = {"contents"};
-    queryFactory.addBuilder("LikeThisQuery", new LikeThisQueryBuilder(analyzer, fields));
-    queryFactory.addBuilder("BoostingQuery", new BoostingQueryBuilder(queryFactory));
     queryFactory.addBuilder("FuzzyLikeThisQuery", new FuzzyLikeThisQueryBuilder(analyzer));
 
   }
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CorePlusQueriesParser.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CorePlusQueriesParser.java
new file mode 100644
index 0000000..023334d
--- /dev/null
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CorePlusQueriesParser.java
@@ -0,0 +1,57 @@
+package org.apache.lucene.queryparser.xml;
+
+import org.apache.lucene.analysis.Analyzer;
+import org.apache.lucene.queryparser.classic.QueryParser;
+import org.apache.lucene.queryparser.xml.builders.LikeThisQueryBuilder;
+import org.apache.lucene.queryparser.xml.builders.BoostingQueryBuilder;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/**
+ * Assembles a QueryBuilder which uses Query objects from
+ * Lucene's <code>queries</code> module in addition to core queries.
+ */
+public class CorePlusQueriesParser extends CoreParser {
+
+  /**
+   * Construct an XML parser that uses a single instance QueryParser for handling
+   * UserQuery tags - all parse operations are synchronized on this parser
+   *
+   * @param parser A QueryParser which will be synchronized on during parse calls.
+   */
+  public CorePlusQueriesParser(Analyzer analyzer, QueryParser parser) {
+    this(null, analyzer, parser);
+  }
+
+  /**
+   * Constructs an XML parser that creates a QueryParser for each UserQuery request.
+   *
+   * @param defaultField The default field name used by QueryParsers constructed for UserQuery tags
+   */
+  public CorePlusQueriesParser(String defaultField, Analyzer analyzer) {
+    this(defaultField, analyzer, null);
+  }
+
+  protected CorePlusQueriesParser(String defaultField, Analyzer analyzer, QueryParser parser) {
+    super(defaultField, analyzer, parser);
+    String fields[] = {"contents"};
+    queryFactory.addBuilder("LikeThisQuery", new LikeThisQueryBuilder(analyzer, fields));
+    queryFactory.addBuilder("BoostingQuery", new BoostingQueryBuilder(queryFactory));
+
+  }
+}
