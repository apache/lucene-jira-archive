Index: lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/ASCIIFoldingFilterFactory.java
===================================================================
--- lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/ASCIIFoldingFilterFactory.java	(revision 1592914)
+++ lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/ASCIIFoldingFilterFactory.java	(working copy)
@@ -17,15 +17,15 @@
  * limitations under the License.
  */
 
-import java.util.Map;
-
+import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.util.AbstractAnalysisFactory;
 import org.apache.lucene.analysis.util.MultiTermAwareComponent;
 import org.apache.lucene.analysis.util.TokenFilterFactory;
-import org.apache.lucene.analysis.miscellaneous.ASCIIFoldingFilter;
-import org.apache.lucene.analysis.TokenStream;
 
-/** 
+import java.util.HashMap;
+import java.util.Map;
+
+/**
  * Factory for {@link ASCIIFoldingFilter}.
  * <pre class="prettyprint">
  * &lt;fieldType name="text_ascii" class="solr.TextField" positionIncrementGap="100"&gt;
@@ -37,7 +37,7 @@
  */
 public class ASCIIFoldingFilterFactory extends TokenFilterFactory implements MultiTermAwareComponent {
   private final boolean preserveOriginal;
-  
+
   /** Creates a new ASCIIFoldingFilterFactory */
   public ASCIIFoldingFilterFactory(Map<String,String> args) {
     super(args);
@@ -46,7 +46,7 @@
       throw new IllegalArgumentException("Unknown parameters: " + args);
     }
   }
-  
+
   @Override
   public ASCIIFoldingFilter create(TokenStream input) {
     return new ASCIIFoldingFilter(input, preserveOriginal);
@@ -54,7 +54,12 @@
 
   @Override
   public AbstractAnalysisFactory getMultiTermComponent() {
-    return this;
+    if (preserveOriginal) {
+      Map<String, String> args = new HashMap<>(1);
+      args.put("preserveOriginal", "false");
+      return new ASCIIFoldingFilterFactory(args);
+    } else
+      return this;
   }
 }
 
Index: lucene/expressions/src/java/org/apache/lucene/expressions/ExpressionComparator.java
===================================================================
--- lucene/expressions/src/java/org/apache/lucene/expressions/ExpressionComparator.java	(revision 1592914)
+++ lucene/expressions/src/java/org/apache/lucene/expressions/ExpressionComparator.java	(working copy)
@@ -48,7 +48,7 @@
     // TODO: might be cleaner to lazy-init 'source' and set scorer after?
     assert readerContext != null;
     try {
-      Map<String,Object> context = new HashMap<>();
+      Map<Object,Object> context = new HashMap<>();
       assert scorer != null;
       context.put("scorer", scorer);
       scores = source.getValues(context, readerContext);
Index: lucene/expressions/src/java/org/apache/lucene/expressions/ExpressionRescorer.java
===================================================================
--- lucene/expressions/src/java/org/apache/lucene/expressions/ExpressionRescorer.java	(revision 1592914)
+++ lucene/expressions/src/java/org/apache/lucene/expressions/ExpressionRescorer.java	(working copy)
@@ -116,7 +116,7 @@
     int subReader = ReaderUtil.subIndex(docID, leaves);
     AtomicReaderContext readerContext = leaves.get(subReader);
     int docIDInSegment = docID - readerContext.docBase;
-    Map<String,Object> context = new HashMap<>();
+    Map<Object, Object> context = new HashMap<>();
 
     FakeScorer fakeScorer = new FakeScorer();
     fakeScorer.score = firstPassExplanation.getValue();
Index: lucene/expressions/src/java/org/apache/lucene/expressions/ExpressionValueSource.java
===================================================================
--- lucene/expressions/src/java/org/apache/lucene/expressions/ExpressionValueSource.java	(revision 1592914)
+++ lucene/expressions/src/java/org/apache/lucene/expressions/ExpressionValueSource.java	(working copy)
@@ -58,7 +58,7 @@
   }
 
   @Override
-  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
     Map<String, FunctionValues> valuesCache = (Map<String, FunctionValues>)context.get("valuesCache");
     if (valuesCache == null) {
       valuesCache = new HashMap<>();
Index: lucene/expressions/src/java/org/apache/lucene/expressions/ScoreValueSource.java
===================================================================
--- lucene/expressions/src/java/org/apache/lucene/expressions/ScoreValueSource.java	(revision 1592914)
+++ lucene/expressions/src/java/org/apache/lucene/expressions/ScoreValueSource.java	(working copy)
@@ -29,14 +29,13 @@
  * A {@link ValueSource} which uses the {@link Scorer} passed through
  * the context map by {@link ExpressionComparator}.
  */
-@SuppressWarnings({"rawtypes"})
 class ScoreValueSource extends ValueSource {
 
   /**
    * <code>context</code> must contain a key "scorer" which is a {@link Scorer}.
    */
   @Override
-  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
     Scorer v = (Scorer) context.get("scorer");
     if (v == null) {
       throw new IllegalStateException("Expressions referencing the score can only be used for sorting");
Index: lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionValueSource.java
===================================================================
--- lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionValueSource.java	(revision 1592914)
+++ lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionValueSource.java	(working copy)
@@ -88,7 +88,7 @@
     
     assertEquals(1, reader.leaves().size());
     AtomicReaderContext leaf = reader.leaves().get(0);
-    FunctionValues values = vs.getValues(new HashMap<String,Object>(), leaf);
+    FunctionValues values = vs.getValues(new HashMap<>(), leaf);
     
     assertEquals(10, values.doubleVal(0), 0);
     assertEquals(10, values.floatVal(0), 0);
@@ -126,7 +126,7 @@
     
     assertEquals(1, reader.leaves().size());
     AtomicReaderContext leaf = reader.leaves().get(0);
-    FunctionValues values = vs.getValues(new HashMap<String,Object>(), leaf);
+    FunctionValues values = vs.getValues(new HashMap<>(), leaf);
     
     // everything
     ValueSourceScorer scorer = values.getRangeScorer(leaf.reader(), "4", "40", true, true);
Index: lucene/facet/src/java/org/apache/lucene/facet/taxonomy/TaxonomyFacetSumValueSource.java
===================================================================
--- lucene/facet/src/java/org/apache/lucene/facet/taxonomy/TaxonomyFacetSumValueSource.java	(revision 1592914)
+++ lucene/facet/src/java/org/apache/lucene/facet/taxonomy/TaxonomyFacetSumValueSource.java	(working copy)
@@ -86,7 +86,7 @@
 
   private final void sumValues(List<MatchingDocs> matchingDocs, boolean keepScores, ValueSource valueSource) throws IOException {
     final FakeScorer scorer = new FakeScorer();
-    Map<String, Scorer> context = new HashMap<>();
+    Map<Object, Object> context = new HashMap<>();
     if (keepScores) {
       context.put("scorer", scorer);
     }
@@ -127,7 +127,7 @@
     }
 
     @Override
-    public FunctionValues getValues(@SuppressWarnings("rawtypes") Map context, AtomicReaderContext readerContext) throws IOException {
+    public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
       final Scorer scorer = (Scorer) context.get("scorer");
       if (scorer == null) {
         throw new IllegalStateException("scores are missing; be sure to pass keepScores=true to FacetsCollector");
Index: lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts.java
===================================================================
--- lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts.java	(revision 1592914)
+++ lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts.java	(working copy)
@@ -873,9 +873,8 @@
     writer.forceMerge(1);
 
     final ValueSource vs = new ValueSource() {
-        @SuppressWarnings("rawtypes")
         @Override
-        public FunctionValues getValues(Map ignored, AtomicReaderContext ignored2) {
+        public FunctionValues getValues(Map<Object, Object> ignored, AtomicReaderContext ignored2) {
           return new DoubleDocValues(null) {
             @Override
             public double doubleVal(int doc) {
Index: lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetSumValueSource.java
===================================================================
--- lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetSumValueSource.java	(revision 1592914)
+++ lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetSumValueSource.java	(working copy)
@@ -329,7 +329,7 @@
 
     ValueSource valueSource = new ValueSource() {
       @Override
-      public FunctionValues getValues(@SuppressWarnings("rawtypes") Map context, AtomicReaderContext readerContext) throws IOException {
+      public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
         final Scorer scorer = (Scorer) context.get("scorer");
         assert scorer != null;
         return new DoubleDocValues(this) {
Index: lucene/grouping/src/java/org/apache/lucene/search/grouping/GroupingSearch.java
===================================================================
--- lucene/grouping/src/java/org/apache/lucene/search/grouping/GroupingSearch.java	(revision 1592914)
+++ lucene/grouping/src/java/org/apache/lucene/search/grouping/GroupingSearch.java	(working copy)
@@ -55,7 +55,7 @@
 
   private final String groupField;
   private final ValueSource groupFunction;
-  private final Map<?, ?> valueSourceContext;
+  private final Map<Object, Object> valueSourceContext;
   private final Filter groupEndDocs;
 
   private Sort groupSort = Sort.RELEVANCE;
@@ -94,7 +94,7 @@
    * @param groupFunction      The function to group by specified as {@link ValueSource}
    * @param valueSourceContext The context of the specified groupFunction
    */
-  public GroupingSearch(ValueSource groupFunction, Map<?, ?> valueSourceContext) {
+  public GroupingSearch(ValueSource groupFunction, Map<Object, Object> valueSourceContext) {
     this(null, groupFunction, valueSourceContext, null);
   }
 
@@ -108,7 +108,7 @@
     this(null, null, null, groupEndDocs);
   }
 
-  private GroupingSearch(String groupField, ValueSource groupFunction, Map<?, ?> valueSourceContext, Filter groupEndDocs) {
+  private GroupingSearch(String groupField, ValueSource groupFunction, Map<Object, Object> valueSourceContext, Filter groupEndDocs) {
     this.groupField = groupField;
     this.groupFunction = groupFunction;
     this.valueSourceContext = valueSourceContext;
Index: lucene/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionAllGroupHeadsCollector.java
===================================================================
--- lucene/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionAllGroupHeadsCollector.java	(revision 1592914)
+++ lucene/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionAllGroupHeadsCollector.java	(working copy)
@@ -42,7 +42,7 @@
 public class FunctionAllGroupHeadsCollector extends AbstractAllGroupHeadsCollector<FunctionAllGroupHeadsCollector.GroupHead> {
 
   private final ValueSource groupBy;
-  private final Map<?, ?> vsContext;
+  private final Map<Object, Object> vsContext;
   private final Map<MutableValue, GroupHead> groups;
   private final Sort sortWithinGroup;
 
@@ -58,7 +58,7 @@
    * @param vsContext The ValueSource context
    * @param sortWithinGroup The sort within a group
    */
-  public FunctionAllGroupHeadsCollector(ValueSource groupBy, Map<?, ?> vsContext, Sort sortWithinGroup) {
+  public FunctionAllGroupHeadsCollector(ValueSource groupBy, Map<Object, Object> vsContext, Sort sortWithinGroup) {
     super(sortWithinGroup.getSort().length);
     groups = new HashMap<>();
     this.sortWithinGroup = sortWithinGroup;
Index: lucene/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionAllGroupsCollector.java
===================================================================
--- lucene/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionAllGroupsCollector.java	(revision 1592914)
+++ lucene/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionAllGroupsCollector.java	(working copy)
@@ -44,7 +44,7 @@
  */
 public class FunctionAllGroupsCollector extends AbstractAllGroupsCollector<MutableValue> {
 
-  private final Map<?, ?> vsContext;
+  private final Map<Object, Object> vsContext;
   private final ValueSource groupBy;
   private final SortedSet<MutableValue> groups = new TreeSet<>();
 
@@ -57,7 +57,7 @@
    * @param groupBy The {@link ValueSource} to group by
    * @param vsContext The ValueSource context
    */
-  public FunctionAllGroupsCollector(ValueSource groupBy, Map<?, ?> vsContext) {
+  public FunctionAllGroupsCollector(ValueSource groupBy, Map<Object, Object> vsContext) {
     this.vsContext = vsContext;
     this.groupBy = groupBy;
   }
Index: lucene/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionDistinctValuesCollector.java
===================================================================
--- lucene/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionDistinctValuesCollector.java	(revision 1592914)
+++ lucene/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionDistinctValuesCollector.java	(working copy)
@@ -35,7 +35,7 @@
  */
 public class FunctionDistinctValuesCollector extends AbstractDistinctValuesCollector<FunctionDistinctValuesCollector.GroupCount> {
 
-  private final Map<?, ?> vsContext;
+  private final Map<Object, Object> vsContext;
   private final ValueSource groupSource;
   private final ValueSource countSource;
   private final Map<MutableValue, GroupCount> groupMap;
@@ -45,7 +45,7 @@
   private MutableValue groupMval;
   private MutableValue countMval;
 
-  public FunctionDistinctValuesCollector(Map<?, ?> vsContext, ValueSource groupSource, ValueSource countSource, Collection<SearchGroup<MutableValue>> groups) {
+  public FunctionDistinctValuesCollector(Map<Object, Object> vsContext, ValueSource groupSource, ValueSource countSource, Collection<SearchGroup<MutableValue>> groups) {
     this.vsContext = vsContext;
     this.groupSource = groupSource;
     this.countSource = countSource;
@@ -72,7 +72,7 @@
 
   @Override
   protected void doSetNextReader(AtomicReaderContext context) throws IOException {
-    FunctionValues values = groupSource.getValues(vsContext, context);
+    FunctionValues values = groupSource .getValues(vsContext, context);
     groupFiller = values.getValueFiller();
     groupMval = groupFiller.getValue();
     values = countSource.getValues(vsContext, context);
Index: lucene/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionFirstPassGroupingCollector.java
===================================================================
--- lucene/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionFirstPassGroupingCollector.java	(revision 1592914)
+++ lucene/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionFirstPassGroupingCollector.java	(working copy)
@@ -37,7 +37,7 @@
 public class FunctionFirstPassGroupingCollector extends AbstractFirstPassGroupingCollector<MutableValue> {
 
   private final ValueSource groupByVS;
-  private final Map<?, ?> vsContext;
+  private final Map<Object, Object> vsContext;
 
   private FunctionValues.ValueFiller filler;
   private MutableValue mval;
@@ -56,7 +56,7 @@
    * @param topNGroups How many top groups to keep.
    * @throws IOException When I/O related errors occur
    */
-  public FunctionFirstPassGroupingCollector(ValueSource groupByVS, Map<?, ?> vsContext, Sort groupSort, int topNGroups) throws IOException {
+  public FunctionFirstPassGroupingCollector(ValueSource groupByVS, Map<Object, Object> vsContext, Sort groupSort, int topNGroups) throws IOException {
     super(groupSort, topNGroups);
     this.groupByVS = groupByVS;
     this.vsContext = vsContext;
Index: lucene/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionSecondPassGroupingCollector.java
===================================================================
--- lucene/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionSecondPassGroupingCollector.java	(revision 1592914)
+++ lucene/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionSecondPassGroupingCollector.java	(working copy)
@@ -40,7 +40,7 @@
 public class FunctionSecondPassGroupingCollector extends AbstractSecondPassGroupingCollector<MutableValue> {
 
   private final ValueSource groupByVS;
-  private final Map<?, ?> vsContext;
+  private final Map<Object, Object> vsContext;
 
   private FunctionValues.ValueFiller filler;
   private MutableValue mval;
@@ -59,7 +59,7 @@
    * @param vsContext The value source context
    * @throws IOException IOException When I/O related errors occur
    */
-  public FunctionSecondPassGroupingCollector(Collection<SearchGroup<MutableValue>> searchGroups, Sort groupSort, Sort withinGroupSort, int maxDocsPerGroup, boolean getScores, boolean getMaxScores, boolean fillSortFields, ValueSource groupByVS, Map<?, ?> vsContext) throws IOException {
+  public FunctionSecondPassGroupingCollector(Collection<SearchGroup<MutableValue>> searchGroups, Sort groupSort, Sort withinGroupSort, int maxDocsPerGroup, boolean getScores, boolean getMaxScores, boolean fillSortFields, ValueSource groupByVS, Map<Object, Object> vsContext) throws IOException {
     super(searchGroups, groupSort, withinGroupSort, maxDocsPerGroup, getScores, getMaxScores, fillSortFields);
     this.groupByVS = groupByVS;
     this.vsContext = vsContext;
Index: lucene/queries/src/java/org/apache/lucene/queries/function/BoostedQuery.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/function/BoostedQuery.java	(revision 1592914)
+++ lucene/queries/src/java/org/apache/lucene/queries/function/BoostedQuery.java	(working copy)
@@ -69,7 +69,7 @@
   private class BoostedWeight extends Weight {
     final IndexSearcher searcher;
     Weight qWeight;
-    Map fcontext;
+    Map<Object, Object> fcontext;
 
     public BoostedWeight(IndexSearcher searcher) throws IOException {
       this.searcher = searcher;
Index: lucene/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.java	(revision 1592914)
+++ lucene/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.java	(working copy)
@@ -64,7 +64,7 @@
     protected final IndexSearcher searcher;
     protected float queryNorm;
     protected float queryWeight;
-    protected final Map context;
+    protected final Map<Object, Object> context;
 
     public FunctionWeight(IndexSearcher searcher) throws IOException {
       this.searcher = searcher;
Index: lucene/queries/src/java/org/apache/lucene/queries/function/ValueSource.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/function/ValueSource.java	(revision 1592914)
+++ lucene/queries/src/java/org/apache/lucene/queries/function/ValueSource.java	(working copy)
@@ -40,7 +40,7 @@
    * Gets the values for this reader and the context that was previously
    * passed to createWeight()
    */
-  public abstract FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException;
+  public abstract FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException;
 
   @Override
   public abstract boolean equals(Object o);
@@ -64,14 +64,14 @@
    * weight info in the context. The context object will be passed to getValues()
    * where this info can be retrieved.
    */
-  public void createWeight(Map context, IndexSearcher searcher) throws IOException {
+  public void createWeight(Map<Object, Object> context, IndexSearcher searcher) throws IOException {
   }
 
   /**
    * Returns a new non-threadsafe context map.
    */
-  public static Map newContext(IndexSearcher searcher) {
-    Map context = new IdentityHashMap();
+  public static Map<Object, Object> newContext(IndexSearcher searcher) {
+    Map<Object, Object> context = new IdentityHashMap<>();
     context.put("searcher", searcher);
     return context;
   }
@@ -101,16 +101,16 @@
 
     @Override
     public SortField rewrite(IndexSearcher searcher) throws IOException {
-      Map context = newContext(searcher);
+      Map<Object, Object> context = newContext(searcher);
       createWeight(context, searcher);
       return new SortField(getField(), new ValueSourceComparatorSource(context), getReverse());
     }
   }
 
   class ValueSourceComparatorSource extends FieldComparatorSource {
-    private final Map context;
+    private final Map<Object,Object> context;
 
-    public ValueSourceComparatorSource(Map context) {
+    public ValueSourceComparatorSource(Map<Object,Object> context) {
       this.context = context;
     }
 
@@ -130,10 +130,10 @@
     private final double[] values;
     private FunctionValues docVals;
     private double bottom;
-    private final Map fcontext;
+    private final Map<Object, Object> fcontext;
     private double topValue;
 
-    ValueSourceComparator(Map fcontext, int numHits) {
+    ValueSourceComparator(Map<Object, Object> fcontext, int numHits) {
       this.fcontext = fcontext;
       values = new double[numHits];
     }
Index: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/BytesRefFieldSource.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/BytesRefFieldSource.java	(revision 1592914)
+++ lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/BytesRefFieldSource.java	(working copy)
@@ -40,7 +40,7 @@
   }
 
   @Override
-  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
     final FieldInfo fieldInfo = readerContext.reader().getFieldInfos().fieldInfo(field);
     // To be sorted or not to be sorted, that is the question
     // TODO: do it cleaner?
Index: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ConstValueSource.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ConstValueSource.java	(revision 1592914)
+++ lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ConstValueSource.java	(working copy)
@@ -42,7 +42,7 @@
   }
 
   @Override
-  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
     return new FloatDocValues(this) {
       @Override
       public float floatVal(int doc) {
Index: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DefFunction.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DefFunction.java	(revision 1592914)
+++ lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DefFunction.java	(working copy)
@@ -45,7 +45,7 @@
 
 
   @Override
-  public FunctionValues getValues(Map fcontext, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map<Object, Object> fcontext, AtomicReaderContext readerContext) throws IOException {
 
 
     return new Values(valsArr(sources, fcontext, readerContext)) {
Index: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DocFreqValueSource.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DocFreqValueSource.java	(revision 1592914)
+++ lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DocFreqValueSource.java	(working copy)
@@ -146,14 +146,14 @@
   }
 
   @Override
-  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
     IndexSearcher searcher = (IndexSearcher)context.get("searcher");
     int docfreq = searcher.getIndexReader().docFreq(new Term(indexedField, indexedBytes));
     return new ConstIntDocValues(docfreq, this);
   }
 
   @Override
-  public void createWeight(Map context, IndexSearcher searcher) throws IOException {
+  public void createWeight(Map<Object, Object> context, IndexSearcher searcher) throws IOException {
     context.put("searcher",searcher);
   }
 
Index: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DoubleConstValueSource.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DoubleConstValueSource.java	(revision 1592914)
+++ lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DoubleConstValueSource.java	(working copy)
@@ -44,7 +44,7 @@
   }
 
   @Override
-  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
     return new DoubleDocValues(this) {
       @Override
       public float floatVal(int doc) {
Index: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DoubleFieldSource.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DoubleFieldSource.java	(revision 1592914)
+++ lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DoubleFieldSource.java	(working copy)
@@ -53,7 +53,7 @@
   }
 
   @Override
-  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
     final FieldCache.Doubles arr = cache.getDoubles(readerContext.reader(), field, parser, true);
     final Bits valid = cache.getDocsWithField(readerContext.reader(), field);
     return new DoubleDocValues(this) {
Index: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DualFloatFunction.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DualFloatFunction.java	(revision 1592914)
+++ lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DualFloatFunction.java	(working copy)
@@ -52,7 +52,7 @@
   }
 
   @Override
-  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
     final FunctionValues aVals =  a.getValues(context, readerContext);
     final FunctionValues bVals =  b.getValues(context, readerContext);
     return new FloatDocValues(this) {
@@ -69,7 +69,7 @@
   }
 
   @Override
-  public void createWeight(Map context, IndexSearcher searcher) throws IOException {
+  public void createWeight(Map<Object, Object> context, IndexSearcher searcher) throws IOException {
     a.createWeight(context,searcher);
     b.createWeight(context,searcher);
   }
Index: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/EnumFieldSource.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/EnumFieldSource.java	(revision 1592914)
+++ lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/EnumFieldSource.java	(working copy)
@@ -97,7 +97,7 @@
 
 
   @Override
-  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
     final FieldCache.Ints arr = cache.getInts(readerContext.reader(), field, parser, true);
     final Bits valid = cache.getDocsWithField(readerContext.reader(), field);
 
Index: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/FloatFieldSource.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/FloatFieldSource.java	(revision 1592914)
+++ lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/FloatFieldSource.java	(working copy)
@@ -51,7 +51,7 @@
   }
 
   @Override
-  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
     final FieldCache.Floats arr = cache.getFloats(readerContext.reader(), field, parser, true);
     final Bits valid = cache.getDocsWithField(readerContext.reader(), field);
 
Index: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IDFValueSource.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IDFValueSource.java	(revision 1592914)
+++ lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IDFValueSource.java	(working copy)
@@ -46,7 +46,7 @@
   }
 
   @Override
-  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
     IndexSearcher searcher = (IndexSearcher)context.get("searcher");
     TFIDFSimilarity sim = asTFIDF(searcher.getSimilarity(), field);
     if (sim == null) {
Index: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IfFunction.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IfFunction.java	(revision 1592914)
+++ lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IfFunction.java	(working copy)
@@ -47,7 +47,7 @@
   }
 
   @Override
-  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
     final FunctionValues ifVals = ifSource.getValues(context, readerContext);
     final FunctionValues trueVals = trueSource.getValues(context, readerContext);
     final FunctionValues falseVals = falseSource.getValues(context, readerContext);
@@ -146,7 +146,7 @@
   }
 
   @Override
-  public void createWeight(Map context, IndexSearcher searcher) throws IOException {
+  public void createWeight(Map<Object, Object> context, IndexSearcher searcher) throws IOException {
     ifSource.createWeight(context, searcher);
     trueSource.createWeight(context, searcher);
     falseSource.createWeight(context, searcher);
Index: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IntFieldSource.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IntFieldSource.java	(revision 1592914)
+++ lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IntFieldSource.java	(working copy)
@@ -53,7 +53,7 @@
 
 
   @Override
-  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
     final FieldCache.Ints arr = cache.getInts(readerContext.reader(), field, parser, true);
     final Bits valid = cache.getDocsWithField(readerContext.reader(), field);
     
Index: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource.java	(revision 1592914)
+++ lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource.java	(working copy)
@@ -54,7 +54,7 @@
   }
 
   @Override
-  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException
+  public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException
   {
     final BinaryDocValues terms = cache.getTerms(readerContext.reader(), field, false, PackedInts.FAST);
     final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader();
Index: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/LinearFloatFunction.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/LinearFloatFunction.java	(revision 1592914)
+++ lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/LinearFloatFunction.java	(working copy)
@@ -51,7 +51,7 @@
   }
 
   @Override
-  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
     final FunctionValues vals =  source.getValues(context, readerContext);
     return new FloatDocValues(this) {
       @Override
@@ -66,7 +66,7 @@
   }
 
   @Override
-  public void createWeight(Map context, IndexSearcher searcher) throws IOException {
+  public void createWeight(Map<Object, Object> context, IndexSearcher searcher) throws IOException {
     source.createWeight(context, searcher);
   }
 
Index: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/LiteralValueSource.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/LiteralValueSource.java	(revision 1592914)
+++ lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/LiteralValueSource.java	(working copy)
@@ -45,7 +45,7 @@
   }
 
   @Override
-  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
 
     return new StrDocValues(this) {
       @Override
Index: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/LongFieldSource.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/LongFieldSource.java	(revision 1592914)
+++ lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/LongFieldSource.java	(working copy)
@@ -65,7 +65,7 @@
   }
 
   @Override
-  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
     final FieldCache.Longs arr = cache.getLongs(readerContext.reader(), field, parser, true);
     final Bits valid = cache.getDocsWithField(readerContext.reader(), field);
     
Index: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MaxDocValueSource.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MaxDocValueSource.java	(revision 1592914)
+++ lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MaxDocValueSource.java	(working copy)
@@ -41,12 +41,12 @@
   }
 
   @Override
-  public void createWeight(Map context, IndexSearcher searcher) throws IOException {
+  public void createWeight(Map<Object, Object> context, IndexSearcher searcher) throws IOException {
     context.put("searcher",searcher);
   }
 
   @Override
-  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
     IndexSearcher searcher = (IndexSearcher)context.get("searcher");
     return new ConstIntDocValues(searcher.getIndexReader().maxDoc(), this);
   }
Index: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiBoolFunction.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiBoolFunction.java	(revision 1592914)
+++ lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiBoolFunction.java	(working copy)
@@ -43,7 +43,7 @@
   protected abstract boolean func(int doc, FunctionValues[] vals);
 
   @Override
-  public BoolDocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public BoolDocValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
     final FunctionValues[] vals =  new FunctionValues[sources.size()];
     int i=0;
     for (ValueSource source : sources) {
@@ -103,7 +103,7 @@
   }
 
   @Override
-  public void createWeight(Map context, IndexSearcher searcher) throws IOException {
+  public void createWeight(Map<Object, Object> context, IndexSearcher searcher) throws IOException {
     for (ValueSource source : sources) {
       source.createWeight(context, searcher);
     }
Index: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFloatFunction.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFloatFunction.java	(revision 1592914)
+++ lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFloatFunction.java	(working copy)
@@ -59,7 +59,7 @@
   }
 
   @Override
-  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
     final FunctionValues[] valsArr = new FunctionValues[sources.length];
     for (int i=0; i<sources.length; i++) {
       valsArr[i] = sources[i].getValues(context, readerContext);
@@ -90,7 +90,7 @@
   }
 
   @Override
-  public void createWeight(Map context, IndexSearcher searcher) throws IOException {
+  public void createWeight(Map<Object, Object> context, IndexSearcher searcher) throws IOException {
     for (ValueSource source : sources)
       source.createWeight(context, searcher);
   }
Index: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFunction.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFunction.java	(revision 1592914)
+++ lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFunction.java	(working copy)
@@ -61,7 +61,7 @@
     return sb.toString();
   }
 
-  public static FunctionValues[] valsArr(List<ValueSource> sources, Map fcontext, AtomicReaderContext readerContext) throws IOException {
+  public static FunctionValues[] valsArr(List<ValueSource> sources, Map<Object, Object> fcontext, AtomicReaderContext readerContext) throws IOException {
     final FunctionValues[] valsArr = new FunctionValues[sources.size()];
     int i=0;
     for (ValueSource source : sources) {
@@ -107,7 +107,7 @@
   }
 
   @Override
-  public void createWeight(Map context, IndexSearcher searcher) throws IOException {
+  public void createWeight(Map<Object, Object> context, IndexSearcher searcher) throws IOException {
     for (ValueSource source : sources)
       source.createWeight(context, searcher);
   }
Index: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NormValueSource.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NormValueSource.java	(revision 1592914)
+++ lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NormValueSource.java	(working copy)
@@ -51,12 +51,12 @@
   }
 
   @Override
-  public void createWeight(Map context, IndexSearcher searcher) throws IOException {
+  public void createWeight(Map<Object, Object> context, IndexSearcher searcher) throws IOException {
     context.put("searcher",searcher);
   }
 
   @Override
-  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
     IndexSearcher searcher = (IndexSearcher)context.get("searcher");
     final TFIDFSimilarity similarity = IDFValueSource.asTFIDF(searcher.getSimilarity(), field);
     if (similarity == null) {
Index: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NumDocsValueSource.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NumDocsValueSource.java	(revision 1592914)
+++ lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NumDocsValueSource.java	(working copy)
@@ -41,7 +41,7 @@
   }
 
   @Override
-  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
     // Searcher has no numdocs so we must use the reader instead
     return new ConstIntDocValues(ReaderUtil.getTopLevelContext(readerContext).reader().numDocs(), this);
   }
Index: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/OrdFieldSource.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/OrdFieldSource.java	(revision 1592914)
+++ lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/OrdFieldSource.java	(working copy)
@@ -67,7 +67,7 @@
 
   // TODO: this is trappy? perhaps this query instead should make you pass a slow reader yourself?
   @Override
-  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
     final int off = readerContext.docBase;
     final IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();
     final AtomicReader r = SlowCompositeReaderWrapper.wrap(topReader);
Index: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/QueryValueSource.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/QueryValueSource.java	(revision 1592914)
+++ lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/QueryValueSource.java	(working copy)
@@ -51,7 +51,7 @@
   }
 
   @Override
-  public FunctionValues getValues(Map fcontext, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map<Object, Object> fcontext, AtomicReaderContext readerContext) throws IOException {
     return new QueryDocValues(this, readerContext, fcontext);
   }
 
@@ -68,7 +68,7 @@
   }
 
   @Override
-  public void createWeight(Map context, IndexSearcher searcher) throws IOException {
+  public void createWeight(Map<Object, Object> context, IndexSearcher searcher) throws IOException {
     Weight w = searcher.createNormalizedWeight(q);
     context.put(this, w);
   }
@@ -80,7 +80,7 @@
   final Bits acceptDocs;
   final Weight weight;
   final float defVal;
-  final Map fcontext;
+  final Map<Object, Object> fcontext;
   final Query q;
 
   Scorer scorer;
@@ -92,7 +92,7 @@
   int lastDocRequested=Integer.MAX_VALUE;
   
 
-  public QueryDocValues(QueryValueSource vs, AtomicReaderContext readerContext, Map fcontext) throws IOException {
+  public QueryDocValues(QueryValueSource vs, AtomicReaderContext readerContext, Map<Object, Object> fcontext) throws IOException {
     super(vs);
 
     this.readerContext = readerContext;
Index: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/RangeMapFloatFunction.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/RangeMapFloatFunction.java	(revision 1592914)
+++ lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/RangeMapFloatFunction.java	(working copy)
@@ -59,7 +59,7 @@
   }
 
   @Override
-  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
     final FunctionValues vals =  source.getValues(context, readerContext);
     final FunctionValues targets = target.getValues(context, readerContext);
     final FunctionValues defaults = (this.defaultVal == null) ? null : defaultVal.getValues(context, readerContext);
@@ -77,7 +77,7 @@
   }
 
   @Override
-  public void createWeight(Map context, IndexSearcher searcher) throws IOException {
+  public void createWeight(Map<Object, Object> context, IndexSearcher searcher) throws IOException {
     source.createWeight(context, searcher);
   }
 
Index: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ReciprocalFloatFunction.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ReciprocalFloatFunction.java	(revision 1592914)
+++ lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ReciprocalFloatFunction.java	(working copy)
@@ -61,7 +61,7 @@
   }
 
   @Override
-  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
     final FunctionValues vals = source.getValues(context, readerContext);
     return new FloatDocValues(this) {
       @Override
@@ -78,7 +78,7 @@
   }
 
   @Override
-  public void createWeight(Map context, IndexSearcher searcher) throws IOException {
+  public void createWeight(Map<Object, Object> context, IndexSearcher searcher) throws IOException {
     source.createWeight(context, searcher);
   }
 
Index: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ReverseOrdFieldSource.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ReverseOrdFieldSource.java	(revision 1592914)
+++ lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ReverseOrdFieldSource.java	(working copy)
@@ -67,7 +67,7 @@
 
   // TODO: this is trappy? perhaps this query instead should make you pass a slow reader yourself?
   @Override
-  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
     final IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();
     final AtomicReader r = SlowCompositeReaderWrapper.wrap(topReader);
     final int off = readerContext.docBase;
Index: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction.java	(revision 1592914)
+++ lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction.java	(working copy)
@@ -27,6 +27,7 @@
 import java.io.IOException;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 
 /**
  * Scales values to be between min and max.
@@ -60,7 +61,7 @@
     float maxVal;
   }
 
-  private ScaleInfo createScaleInfo(Map context, AtomicReaderContext readerContext) throws IOException {
+  private ScaleInfo createScaleInfo(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
     final List<AtomicReaderContext> leaves = ReaderUtil.getTopLevelContext(readerContext).leaves();
 
     float minVal = Float.POSITIVE_INFINITY;
@@ -99,7 +100,7 @@
   }
 
   @Override
-  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
 
     ScaleInfo scaleInfo = (ScaleInfo)context.get(ScaleFloatFunction.this);
     if (scaleInfo == null) {
@@ -128,7 +129,7 @@
   }
 
   @Override
-  public void createWeight(Map context, IndexSearcher searcher) throws IOException {
+  public void createWeight(Map<Object, Object> context, IndexSearcher searcher) throws IOException {
     source.createWeight(context, searcher);
   }
 
Index: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/SimpleBoolFunction.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/SimpleBoolFunction.java	(revision 1592914)
+++ lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/SimpleBoolFunction.java	(working copy)
@@ -45,7 +45,7 @@
   protected abstract boolean func(int doc, FunctionValues vals);
 
   @Override
-  public BoolDocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public BoolDocValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
     final FunctionValues vals =  source.getValues(context, readerContext);
     return new BoolDocValues(this) {
       @Override
@@ -77,7 +77,7 @@
   }
 
   @Override
-  public void createWeight(Map context, IndexSearcher searcher) throws IOException {
+  public void createWeight(Map<Object, Object> context, IndexSearcher searcher) throws IOException {
     source.createWeight(context, searcher);
   }
 }
Index: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/SimpleFloatFunction.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/SimpleFloatFunction.java	(revision 1592914)
+++ lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/SimpleFloatFunction.java	(working copy)
@@ -35,7 +35,7 @@
   protected abstract float func(int doc, FunctionValues vals);
 
   @Override
-  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
     final FunctionValues vals =  source.getValues(context, readerContext);
     return new FloatDocValues(this) {
       @Override
Index: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/SingleFunction.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/SingleFunction.java	(revision 1592914)
+++ lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/SingleFunction.java	(working copy)
@@ -53,7 +53,7 @@
   }
 
   @Override
-  public void createWeight(Map context, IndexSearcher searcher) throws IOException {
+  public void createWeight(Map<Object, Object> context, IndexSearcher searcher) throws IOException {
     source.createWeight(context, searcher);
   }
 }
\ No newline at end of file
Index: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/SumTotalTermFreqValueSource.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/SumTotalTermFreqValueSource.java	(revision 1592914)
+++ lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/SumTotalTermFreqValueSource.java	(working copy)
@@ -53,12 +53,12 @@
   }
 
   @Override
-  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
     return (FunctionValues)context.get(this);
   }
 
   @Override
-  public void createWeight(Map context, IndexSearcher searcher) throws IOException {
+  public void createWeight(Map<Object, Object> context, IndexSearcher searcher) throws IOException {
     long sumTotalTermFreq = 0;
     for (AtomicReaderContext readerContext : searcher.getTopReaderContext().leaves()) {
       Fields fields = readerContext.reader().fields();
Index: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/TFValueSource.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/TFValueSource.java	(revision 1592914)
+++ lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/TFValueSource.java	(working copy)
@@ -46,7 +46,7 @@
   }
 
   @Override
-  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
     Fields fields = readerContext.reader().fields();
     final Terms terms = fields.terms(indexedField);
     IndexSearcher searcher = (IndexSearcher)context.get("searcher");
Index: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/TermFreqValueSource.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/TermFreqValueSource.java	(revision 1592914)
+++ lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/TermFreqValueSource.java	(working copy)
@@ -44,7 +44,7 @@
   }
 
   @Override
-  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
     Fields fields = readerContext.reader().fields();
     final Terms terms = fields.terms(indexedField);
 
Index: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/TotalTermFreqValueSource.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/TotalTermFreqValueSource.java	(revision 1592914)
+++ lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/TotalTermFreqValueSource.java	(working copy)
@@ -58,12 +58,12 @@
   }
 
   @Override
-  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
     return (FunctionValues)context.get(this);
   }
 
   @Override
-  public void createWeight(Map context, IndexSearcher searcher) throws IOException {
+  public void createWeight(Map<Object, Object> context, IndexSearcher searcher) throws IOException {
     long totalTermFreq = 0;
     for (AtomicReaderContext readerContext : searcher.getTopReaderContext().leaves()) {
       long val = readerContext.reader().totalTermFreq(new Term(indexedField, indexedBytes));
Index: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/VectorValueSource.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/VectorValueSource.java	(revision 1592914)
+++ lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/VectorValueSource.java	(working copy)
@@ -53,7 +53,7 @@
   }
 
   @Override
-  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
     int size = sources.size();
 
     // special-case x,y and lat,lon since it's so common
@@ -180,7 +180,7 @@
   }
 
   @Override
-  public void createWeight(Map context, IndexSearcher searcher) throws IOException {
+  public void createWeight(Map<Object, Object> context, IndexSearcher searcher) throws IOException {
     for (ValueSource source : sources)
       source.createWeight(context, searcher);
   }
Index: lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxSimilarityValueSource.java
===================================================================
--- lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxSimilarityValueSource.java	(revision 1592914)
+++ lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxSimilarityValueSource.java	(working copy)
@@ -62,7 +62,7 @@
    * @return the values
    */
   @Override
-  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
     AtomicReader reader = readerContext.reader();
     final FieldCache.Doubles minX = FieldCache.DEFAULT.getDoubles(reader, strategy.field_minX, true);
     final FieldCache.Doubles minY = FieldCache.DEFAULT.getDoubles(reader, strategy.field_minY, true);
Index: lucene/spatial/src/java/org/apache/lucene/spatial/serialized/SerializedDVStrategy.java
===================================================================
--- lucene/spatial/src/java/org/apache/lucene/spatial/serialized/SerializedDVStrategy.java	(revision 1592914)
+++ lucene/spatial/src/java/org/apache/lucene/spatial/serialized/SerializedDVStrategy.java	(working copy)
@@ -206,7 +206,7 @@
     }
 
     @Override
-    public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+    public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
       final BinaryDocValues docValues = readerContext.reader().getBinaryDocValues(fieldName);
 
       return new FunctionValues() {
Index: lucene/spatial/src/java/org/apache/lucene/spatial/util/CachingDoubleValueSource.java
===================================================================
--- lucene/spatial/src/java/org/apache/lucene/spatial/util/CachingDoubleValueSource.java	(revision 1592914)
+++ lucene/spatial/src/java/org/apache/lucene/spatial/util/CachingDoubleValueSource.java	(working copy)
@@ -47,7 +47,7 @@
   }
 
   @Override
-  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
     final int base = readerContext.docBase;
     final FunctionValues vals = source.getValues(context,readerContext);
     return new FunctionValues() {
Index: lucene/spatial/src/java/org/apache/lucene/spatial/util/DistanceToShapeValueSource.java
===================================================================
--- lucene/spatial/src/java/org/apache/lucene/spatial/util/DistanceToShapeValueSource.java	(revision 1592914)
+++ lucene/spatial/src/java/org/apache/lucene/spatial/util/DistanceToShapeValueSource.java	(working copy)
@@ -63,12 +63,12 @@
   }
 
   @Override
-  public void createWeight(Map context, IndexSearcher searcher) throws IOException {
+  public void createWeight(Map<Object, Object> context, IndexSearcher searcher) throws IOException {
     shapeValueSource.createWeight(context, searcher);
   }
 
   @Override
-  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
     final FunctionValues shapeValues = shapeValueSource.getValues(context, readerContext);
 
     return new DoubleDocValues(this) {
Index: lucene/spatial/src/java/org/apache/lucene/spatial/util/ShapeFieldCacheDistanceValueSource.java
===================================================================
--- lucene/spatial/src/java/org/apache/lucene/spatial/util/ShapeFieldCacheDistanceValueSource.java	(revision 1592914)
+++ lucene/spatial/src/java/org/apache/lucene/spatial/util/ShapeFieldCacheDistanceValueSource.java	(working copy)
@@ -57,7 +57,7 @@
   }
 
   @Override
-  public FunctionValues getValues(Map context, final AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map<Object, Object> context, final AtomicReaderContext readerContext) throws IOException {
     return new FunctionValues() {
       private final ShapeFieldCache<Point> cache =
           provider.getCache(readerContext.reader());
Index: lucene/spatial/src/java/org/apache/lucene/spatial/util/ShapePredicateValueSource.java
===================================================================
--- lucene/spatial/src/java/org/apache/lucene/spatial/util/ShapePredicateValueSource.java	(revision 1592914)
+++ lucene/spatial/src/java/org/apache/lucene/spatial/util/ShapePredicateValueSource.java	(working copy)
@@ -59,12 +59,12 @@
   }
 
   @Override
-  public void createWeight(Map context, IndexSearcher searcher) throws IOException {
+  public void createWeight(Map<Object, Object> context, IndexSearcher searcher) throws IOException {
     shapeValuesource.createWeight(context, searcher);
   }
 
   @Override
-  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
     final FunctionValues shapeValues = shapeValuesource.getValues(context, readerContext);
 
     return new BoolDocValues(this) {
Index: lucene/spatial/src/java/org/apache/lucene/spatial/vector/DistanceValueSource.java
===================================================================
--- lucene/spatial/src/java/org/apache/lucene/spatial/vector/DistanceValueSource.java	(revision 1592914)
+++ lucene/spatial/src/java/org/apache/lucene/spatial/vector/DistanceValueSource.java	(working copy)
@@ -62,7 +62,7 @@
    * Returns the FunctionValues used by the function query.
    */
   @Override
-  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
     AtomicReader reader = readerContext.reader();
 
     final FieldCache.Doubles ptX = FieldCache.DEFAULT.getDoubles(reader, strategy.getFieldNameX(), true);
Index: lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentValueSourceDictionary.java
===================================================================
--- lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentValueSourceDictionary.java	(revision 1592914)
+++ lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentValueSourceDictionary.java	(working copy)
@@ -126,7 +126,7 @@
       }
       starts[leaves.size()] = reader.maxDoc();
       currentWeightValues = (leaves.size() > 0) 
-          ? weightsValueSource.getValues(new HashMap<String, Object>(), leaves.get(currentLeafIndex))
+          ? weightsValueSource.getValues(new HashMap<>(), leaves.get(currentLeafIndex))
           : null;
     }
     
@@ -143,7 +143,7 @@
       if (subIndex != currentLeafIndex) {
         currentLeafIndex = subIndex;
         try {
-          currentWeightValues = weightsValueSource.getValues(new HashMap<String, Object>(), leaves.get(currentLeafIndex));
+          currentWeightValues = weightsValueSource.getValues(new HashMap<>(), leaves.get(currentLeafIndex));
         } catch (IOException e) {
           throw new RuntimeException();
         }
Index: solr/core/src/java/org/apache/solr/analytics/util/valuesource/ConstDateSource.java
===================================================================
--- solr/core/src/java/org/apache/solr/analytics/util/valuesource/ConstDateSource.java	(revision 1592914)
+++ solr/core/src/java/org/apache/solr/analytics/util/valuesource/ConstDateSource.java	(working copy)
@@ -55,7 +55,7 @@
   }
   
   @Override
-  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
     return new FloatDocValues(this) {
       @Override
       public float floatVal(int doc) {
Index: solr/core/src/java/org/apache/solr/analytics/util/valuesource/ConstDoubleSource.java
===================================================================
--- solr/core/src/java/org/apache/solr/analytics/util/valuesource/ConstDoubleSource.java	(revision 1592914)
+++ solr/core/src/java/org/apache/solr/analytics/util/valuesource/ConstDoubleSource.java	(working copy)
@@ -48,7 +48,7 @@
   }
 
   @Override
-  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
     return new DoubleDocValues(this) {
       @Override
       public double doubleVal(int doc) {
Index: solr/core/src/java/org/apache/solr/analytics/util/valuesource/DateFieldSource.java
===================================================================
--- solr/core/src/java/org/apache/solr/analytics/util/valuesource/DateFieldSource.java	(revision 1592914)
+++ solr/core/src/java/org/apache/solr/analytics/util/valuesource/DateFieldSource.java	(working copy)
@@ -61,7 +61,7 @@
   }
 
   @Override
-  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
     final FieldCache.Longs arr = cache.getLongs(readerContext.reader(), field, parser, true);
     final Bits valid = cache.getDocsWithField(readerContext.reader(), field);
     return new LongDocValues(this) {
Index: solr/core/src/java/org/apache/solr/analytics/util/valuesource/DualDoubleFunction.java
===================================================================
--- solr/core/src/java/org/apache/solr/analytics/util/valuesource/DualDoubleFunction.java	(revision 1592914)
+++ solr/core/src/java/org/apache/solr/analytics/util/valuesource/DualDoubleFunction.java	(working copy)
@@ -70,7 +70,7 @@
   }
 
   @Override
-  public void createWeight(Map context, IndexSearcher searcher) throws IOException {
+  public void createWeight(Map<Object, Object> context, IndexSearcher searcher) throws IOException {
     a.createWeight(context,searcher);
     b.createWeight(context,searcher);
   }
Index: solr/core/src/java/org/apache/solr/analytics/util/valuesource/FilterFieldSource.java
===================================================================
--- solr/core/src/java/org/apache/solr/analytics/util/valuesource/FilterFieldSource.java	(revision 1592914)
+++ solr/core/src/java/org/apache/solr/analytics/util/valuesource/FilterFieldSource.java	(working copy)
@@ -57,7 +57,7 @@
   }
 
   @Override
-  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
     final FunctionValues vals =  source.getValues(context, readerContext);
     return new FunctionValues() {
 
Index: solr/core/src/java/org/apache/solr/analytics/util/valuesource/MultiDateFunction.java
===================================================================
--- solr/core/src/java/org/apache/solr/analytics/util/valuesource/MultiDateFunction.java	(revision 1592914)
+++ solr/core/src/java/org/apache/solr/analytics/util/valuesource/MultiDateFunction.java	(working copy)
@@ -60,7 +60,7 @@
   }
 
   @Override
-  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
     final FunctionValues[] valsArr = new FunctionValues[sources.length];
     for (int i=0; i<sources.length; i++) {
       valsArr[i] = sources[i].getValues(context, readerContext);
Index: solr/core/src/java/org/apache/solr/analytics/util/valuesource/MultiDoubleFunction.java
===================================================================
--- solr/core/src/java/org/apache/solr/analytics/util/valuesource/MultiDoubleFunction.java	(revision 1592914)
+++ solr/core/src/java/org/apache/solr/analytics/util/valuesource/MultiDoubleFunction.java	(working copy)
@@ -100,7 +100,7 @@
   }
 
   @Override
-  public void createWeight(Map context, IndexSearcher searcher) throws IOException {
+  public void createWeight(Map<Object, Object> context, IndexSearcher searcher) throws IOException {
     for (ValueSource source : sources)
       source.createWeight(context, searcher);
   }
Index: solr/core/src/java/org/apache/solr/analytics/util/valuesource/MultiStringFunction.java
===================================================================
--- solr/core/src/java/org/apache/solr/analytics/util/valuesource/MultiStringFunction.java	(revision 1592914)
+++ solr/core/src/java/org/apache/solr/analytics/util/valuesource/MultiStringFunction.java	(working copy)
@@ -61,7 +61,7 @@
   }
 
   @Override
-  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
     final FunctionValues[] valsArr = new FunctionValues[sources.length];
     for (int i=0; i<sources.length; i++) {
       valsArr[i] = sources[i].getValues(context, readerContext);
Index: solr/core/src/java/org/apache/solr/analytics/util/valuesource/SingleDoubleFunction.java
===================================================================
--- solr/core/src/java/org/apache/solr/analytics/util/valuesource/SingleDoubleFunction.java	(revision 1592914)
+++ solr/core/src/java/org/apache/solr/analytics/util/valuesource/SingleDoubleFunction.java	(working copy)
@@ -45,7 +45,7 @@
   abstract double func(int doc, FunctionValues vals);
 
   @Override
-  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
     final FunctionValues vals =  source.getValues(context, readerContext);
     return new DoubleDocValues(this) {
       @Override
Index: solr/core/src/java/org/apache/solr/analytics/util/valuesource/SingleStringFunction.java
===================================================================
--- solr/core/src/java/org/apache/solr/analytics/util/valuesource/SingleStringFunction.java	(revision 1592914)
+++ solr/core/src/java/org/apache/solr/analytics/util/valuesource/SingleStringFunction.java	(working copy)
@@ -48,7 +48,7 @@
   abstract CharSequence func(int doc, FunctionValues vals);
 
   @Override
-  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
     final FunctionValues vals =  source.getValues(context, readerContext);
     return new StrDocValues(this) {
       @Override
Index: solr/core/src/java/org/apache/solr/schema/BoolField.java
===================================================================
--- solr/core/src/java/org/apache/solr/schema/BoolField.java	(revision 1592914)
+++ solr/core/src/java/org/apache/solr/schema/BoolField.java	(working copy)
@@ -178,7 +178,7 @@
 
 
   @Override
-  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
     final SortedDocValues sindex = FieldCache.DEFAULT.getTermsIndex(readerContext.reader(), field);
 
     // figure out what ord maps to true
Index: solr/core/src/java/org/apache/solr/schema/CurrencyField.java
===================================================================
--- solr/core/src/java/org/apache/solr/schema/CurrencyField.java	(revision 1592914)
+++ solr/core/src/java/org/apache/solr/schema/CurrencyField.java	(working copy)
@@ -379,7 +379,7 @@
     }
 
     @Override
-    public FunctionValues getValues(Map context, AtomicReaderContext reader) 
+    public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext reader)
       throws IOException {
       final FunctionValues amounts = source.getValues(context, reader);
       // the target digits & currency of our source, 
@@ -492,7 +492,7 @@
     public Currency getTargetCurrency() { return targetCurrency; }
 
     @Override
-    public FunctionValues getValues(Map context, AtomicReaderContext reader) throws IOException {
+    public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext reader) throws IOException {
       final FunctionValues amounts = amountValues.getValues(context, reader);
       final FunctionValues currencies = currencyValues.getValues(context, reader);
 
Index: solr/core/src/java/org/apache/solr/schema/RandomSortField.java
===================================================================
--- solr/core/src/java/org/apache/solr/schema/RandomSortField.java	(revision 1592914)
+++ solr/core/src/java/org/apache/solr/schema/RandomSortField.java	(working copy)
@@ -171,7 +171,7 @@
     }
 
     @Override
-    public FunctionValues getValues(Map context, final AtomicReaderContext readerContext) throws IOException {
+    public FunctionValues getValues(Map<Object, Object> context, final AtomicReaderContext readerContext) throws IOException {
       return new IntDocValues(this) {
           private final int seed = getSeed(field, readerContext);
           @Override
Index: solr/core/src/java/org/apache/solr/schema/StrFieldSource.java
===================================================================
--- solr/core/src/java/org/apache/solr/schema/StrFieldSource.java	(revision 1592914)
+++ solr/core/src/java/org/apache/solr/schema/StrFieldSource.java	(working copy)
@@ -37,7 +37,7 @@
   }
 
   @Override
-  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
     return new DocTermsIndexDocValues(this, readerContext, field) {
 
       @Override
Index: solr/core/src/java/org/apache/solr/search/ValueSourceParser.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/ValueSourceParser.java	(revision 1592914)
+++ solr/core/src/java/org/apache/solr/search/ValueSourceParser.java	(working copy)
@@ -1266,7 +1266,7 @@
   }
   
   @Override
-  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
     if (context.get(this) == null) {
       SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();
       throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "testfunc: unweighted value source detected.  delegate="+source + " request=" + (requestInfo==null ? "null" : requestInfo.getReq()));
@@ -1290,7 +1290,7 @@
   }
 
   @Override
-  public void createWeight(Map context, IndexSearcher searcher) throws IOException {
+  public void createWeight(Map<Object, Object> context, IndexSearcher searcher) throws IOException {
     context.put(this, this);
   }
 
Index: solr/core/src/java/org/apache/solr/search/function/CollapseScoreFunction.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/function/CollapseScoreFunction.java	(revision 1592914)
+++ solr/core/src/java/org/apache/solr/search/function/CollapseScoreFunction.java	(working copy)
@@ -42,7 +42,7 @@
     return 1213241257;
   }
 
-  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
     return new CollapseScoreFunctionValues(context);
   }
 
Index: solr/core/src/java/org/apache/solr/search/function/FileFloatSource.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/function/FileFloatSource.java	(revision 1592914)
+++ solr/core/src/java/org/apache/solr/search/function/FileFloatSource.java	(working copy)
@@ -77,7 +77,7 @@
   }
 
   @Override
-  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
     final int off = readerContext.docBase;
     IndexReaderContext topLevelContext = ReaderUtil.getTopLevelContext(readerContext);
 
Index: solr/core/src/java/org/apache/solr/search/function/distance/GeohashFunction.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/function/distance/GeohashFunction.java	(revision 1592914)
+++ solr/core/src/java/org/apache/solr/search/function/distance/GeohashFunction.java	(working copy)
@@ -46,7 +46,7 @@
   }
 
   @Override
-  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
     final FunctionValues latDV = lat.getValues(context, readerContext);
     final FunctionValues lonDV = lon.getValues(context, readerContext);
 
Index: solr/core/src/java/org/apache/solr/search/function/distance/GeohashHaversineFunction.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/function/distance/GeohashHaversineFunction.java	(revision 1592914)
+++ solr/core/src/java/org/apache/solr/search/function/distance/GeohashHaversineFunction.java	(working copy)
@@ -98,7 +98,7 @@
   }
 
   @Override
-  public void createWeight(Map context, IndexSearcher searcher) throws IOException {
+  public void createWeight(Map<Object, Object> context, IndexSearcher searcher) throws IOException {
     geoHash1.createWeight(context, searcher);
     geoHash2.createWeight(context, searcher);
   }
Index: solr/core/src/java/org/apache/solr/search/function/distance/HaversineConstFunction.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/function/distance/HaversineConstFunction.java	(revision 1592914)
+++ solr/core/src/java/org/apache/solr/search/function/distance/HaversineConstFunction.java	(working copy)
@@ -85,7 +85,7 @@
   }
 
   @Override
-  public void createWeight(Map context, IndexSearcher searcher) throws IOException {
+  public void createWeight(Map<Object, Object> context, IndexSearcher searcher) throws IOException {
     latSource.createWeight(context, searcher);
     lonSource.createWeight(context, searcher);
   }
Index: solr/core/src/java/org/apache/solr/search/function/distance/HaversineFunction.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/function/distance/HaversineFunction.java	(revision 1592914)
+++ solr/core/src/java/org/apache/solr/search/function/distance/HaversineFunction.java	(working copy)
@@ -115,7 +115,7 @@
   }
 
   @Override
-  public void createWeight(Map context, IndexSearcher searcher) throws IOException {
+  public void createWeight(Map<Object, Object> context, IndexSearcher searcher) throws IOException {
     p1.createWeight(context, searcher);
     p2.createWeight(context, searcher);
 
Index: solr/core/src/java/org/apache/solr/search/function/distance/StringDistanceFunction.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/function/distance/StringDistanceFunction.java	(revision 1592914)
+++ solr/core/src/java/org/apache/solr/search/function/distance/StringDistanceFunction.java	(working copy)
@@ -44,7 +44,7 @@
   }
 
   @Override
-  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
     final FunctionValues str1DV = str1.getValues(context, readerContext);
     final FunctionValues str2DV = str2.getValues(context, readerContext);
     return new FloatDocValues(this) {
Index: solr/core/src/java/org/apache/solr/search/function/distance/VectorDistanceFunction.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/function/distance/VectorDistanceFunction.java	(revision 1592914)
+++ solr/core/src/java/org/apache/solr/search/function/distance/VectorDistanceFunction.java	(working copy)
@@ -150,7 +150,7 @@
   }
 
   @Override
-  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
 
     final FunctionValues vals1 = source1.getValues(context, readerContext);
 
@@ -178,7 +178,7 @@
   }
 
   @Override
-  public void createWeight(Map context, IndexSearcher searcher) throws IOException {
+  public void createWeight(Map<Object, Object> context, IndexSearcher searcher) throws IOException {
     source1.createWeight(context, searcher);
     source2.createWeight(context, searcher);
   }
Index: solr/core/src/test/org/apache/solr/core/CountUsageValueSourceParser.java
===================================================================
--- solr/core/src/test/org/apache/solr/core/CountUsageValueSourceParser.java	(revision 1592914)
+++ solr/core/src/test/org/apache/solr/core/CountUsageValueSourceParser.java	(working copy)
@@ -74,7 +74,7 @@
       this.counter = counter;
     }
     @Override
-    public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+    public FunctionValues getValues(Map<Object, Object> context, AtomicReaderContext readerContext) throws IOException {
       return new DoubleDocValues(this) {
         @Override
         public double doubleVal(int doc) {
