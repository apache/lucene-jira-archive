Index: src/test/org/apache/lucene/index/TestFieldsReader.java
===================================================================
--- src/test/org/apache/lucene/index/TestFieldsReader.java	(revision 416038)
+++ src/test/org/apache/lucene/index/TestFieldsReader.java	(working copy)
@@ -97,26 +97,26 @@
     SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(loadFieldNames, lazyFieldNames);
     Document doc = reader.doc(0, fieldSelector);
     assertTrue("doc is null and it shouldn't be", doc != null);
-    Fieldable field = doc.getField(DocHelper.LAZY_FIELD_KEY);
+    Fieldable field = doc.getFieldable(DocHelper.LAZY_FIELD_KEY);
     assertTrue("field is null and it shouldn't be", field != null);
     assertTrue("field is not lazy and it should be", field.isLazy());
     String value = field.stringValue();
     assertTrue("value is null and it shouldn't be", value != null);
     assertTrue(value + " is not equal to " + DocHelper.LAZY_FIELD_TEXT, value.equals(DocHelper.LAZY_FIELD_TEXT) == true);
-    field = doc.getField(DocHelper.TEXT_FIELD_1_KEY);
+    field = doc.getFieldable(DocHelper.TEXT_FIELD_1_KEY);
     assertTrue("field is null and it shouldn't be", field != null);
     assertTrue("Field is lazy and it should not be", field.isLazy() == false);
-    field = doc.getField(DocHelper.TEXT_FIELD_UTF1_KEY);
+    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF1_KEY);
     assertTrue("field is null and it shouldn't be", field != null);
     assertTrue("Field is lazy and it should not be", field.isLazy() == false);
     assertTrue(field.stringValue() + " is not equal to " + DocHelper.FIELD_UTF1_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF1_TEXT) == true);
 
-    field = doc.getField(DocHelper.TEXT_FIELD_UTF2_KEY);
+    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF2_KEY);
     assertTrue("field is null and it shouldn't be", field != null);
     assertTrue("Field is lazy and it should not be", field.isLazy() == true);
     assertTrue(field.stringValue() + " is not equal to " + DocHelper.FIELD_UTF2_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF2_TEXT) == true);
 
-    field = doc.getField(DocHelper.LAZY_FIELD_BINARY_KEY);
+    field = doc.getFieldable(DocHelper.LAZY_FIELD_BINARY_KEY);
     assertTrue("field is null and it shouldn't be", field != null);
     byte [] bytes = field.binaryValue();
     assertTrue("bytes is null and it shouldn't be", bytes != null);
@@ -182,7 +182,7 @@
       Document doc;
       doc = reader.doc(0, null);//Load all of them
       assertTrue("doc is null and it shouldn't be", doc != null);
-      Fieldable field = doc.getField(DocHelper.LARGE_LAZY_FIELD_KEY);
+      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);
       assertTrue("field is lazy", field.isLazy() == false);
       String value;
       long start;
@@ -201,7 +201,7 @@
       System.gc();
       reader = new FieldsReader(tmpDir, "test", fieldInfos);
       doc = reader.doc(0, fieldSelector);
-      field = doc.getField(DocHelper.LARGE_LAZY_FIELD_KEY);
+      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);
       assertTrue("field is not lazy", field.isLazy() == true);
       start = System.currentTimeMillis();
       //On my machine this took around 50 - 70ms
Index: src/java/org/apache/lucene/document/Document.java
===================================================================
--- src/java/org/apache/lucene/document/Document.java	(revision 416038)
+++ src/java/org/apache/lucene/document/Document.java	(working copy)
@@ -129,16 +129,31 @@
   /** Returns a field with the given name if any exist in this document, or
    * null.  If multiple fields exists with this name, this method returns the
    * first value added.
+   * Do not use this method with lazy loaded fields.
    */
-  public final Fieldable getField(String name) {
+  public final Field getField(String name) {
     for (int i = 0; i < fields.size(); i++) {
-      Fieldable field = (Fieldable)fields.get(i);
+      Field field = (Field)fields.get(i);
       if (field.name().equals(name))
-	return field;
+        return field;
     }
     return null;
   }
 
+
+ /** Returns a field with the given name if any exist in this document, or
+   * null.  If multiple fields exists with this name, this method returns the
+   * first value added.
+   */
+ public Fieldable getFieldable(String name) {
+   for (int i = 0; i < fields.size(); i++) {
+     Fieldable field = (Fieldable)fields.get(i);
+     if (field.name().equals(name))
+       return field;
+   }
+   return null;
+ }
+
   /** Returns the string value of the field with the given name if any exist in
    * this document, or null.  If multiple fields exist with this name, this
    * method returns the first value added. If only binary fields with this name
@@ -159,13 +174,37 @@
   }
 
   /**
+   * Returns an array of {@link Field}s with the given name.
+   * This method can return <code>null</code>.
+   * Do not use with lazy loaded fields.
+   *
+   * @param name the name of the field
+   * @return a <code>Field[]</code> array
+   */
+   public final Field[] getFields(String name) {
+     List result = new ArrayList();
+     for (int i = 0; i < fields.size(); i++) {
+       Field field = (Field)fields.get(i);
+       if (field.name().equals(name)) {
+         result.add(field);
+       }
+     }
+
+     if (result.size() == 0)
+       return null;
+
+     return (Field[])result.toArray(new Field[result.size()]);
+   }
+
+
+  /**
    * Returns an array of {@link Fieldable}s with the given name.
    * This method can return <code>null</code>.
    *
    * @param name the name of the field
    * @return a <code>Fieldable[]</code> array
    */
-   public final Fieldable[] getFields(String name) {
+   public Fieldable[] getFielables(String name) {
      List result = new ArrayList();
      for (int i = 0; i < fields.size(); i++) {
        Fieldable field = (Fieldable)fields.get(i);
@@ -180,6 +219,7 @@
      return (Fieldable[])result.toArray(new Fieldable[result.size()]);
    }
 
+
   /**
    * Returns an array of values of the field specified as the method parameter.
    * This method can return <code>null</code>.
