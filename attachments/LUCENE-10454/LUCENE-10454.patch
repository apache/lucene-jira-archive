diff --git a/lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighter.java b/lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighter.java
index 482644d4243..07d6ba83076 100644
--- a/lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighter.java
+++ b/lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighter.java
@@ -42,6 +42,8 @@ import org.apache.lucene.search.BooleanQuery;
 import org.apache.lucene.search.DocIdSetIterator;
 import org.apache.lucene.search.FuzzyQuery;
 import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.MatchAllDocsQuery;
+import org.apache.lucene.search.MatchNoDocsQuery;
 import org.apache.lucene.search.PhraseQuery;
 import org.apache.lucene.search.PrefixQuery;
 import org.apache.lucene.search.Query;
@@ -648,6 +650,70 @@ public class TestUnifiedHighlighter extends LuceneTestCase {
     ir.close();
   }
 
+  public void testRewriteToMatchNone() throws Exception {
+    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);
+
+    Field body =
+        new Field(
+            "body", "This sentence has both terms.  This sentence has only terms.", fieldType);
+    Document document = new Document();
+    document.add(body);
+    iw.addDocument(document);
+    IndexReader ir = iw.getReader();
+    iw.close();
+    IndexSearcher searcher = newSearcher(ir);
+
+    BooleanQuery query =
+        new BooleanQuery.Builder()
+            .add(new TermQuery(new Term("body", "both")), BooleanClause.Occur.MUST)
+            .add(new SometimesMatchNoDocsQuery(), BooleanClause.Occur.MUST)
+            .build();
+
+    TopDocs topDocs = searcher.search(query, 10);
+    assertEquals(1, topDocs.totalHits.value);
+    UnifiedHighlighter highlighter =
+        new UnifiedHighlighter.Builder(searcher, indexAnalyzer)
+            .withWeightMatches(false)
+            .withMaxLength(Integer.MAX_VALUE - 1)
+            .build();
+    String[] snippets = highlighter.highlight("body", query, topDocs, 2);
+    assertEquals(1, snippets.length);
+    assertTrue(snippets[0].contains("<b>both</b>"));
+    ir.close();
+  }
+
+  private static class SometimesMatchNoDocsQuery extends Query {
+
+    @Override
+    public Query rewrite(IndexReader reader) throws IOException {
+      if (reader.maxDoc() == 0) {
+        return new MatchNoDocsQuery();
+      } else {
+        return new MatchAllDocsQuery();
+      }
+    }
+
+    @Override
+    public void visit(QueryVisitor visitor) {
+      visitor.visitLeaf(this);
+    }
+
+    @Override
+    public String toString(String field) {
+      return "SometimesMatchNoneQuery";
+    }
+
+    @Override
+    public boolean equals(Object o) {
+      return sameClassAs(o);
+    }
+
+    @Override
+    public int hashCode() {
+      return classHash();
+    }
+  }
+
   public void testHighlightAllText() throws Exception {
     RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);
 
