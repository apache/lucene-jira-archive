Index: lucene/CHANGES.txt
===================================================================
--- lucene/CHANGES.txt	(revision 1661229)
+++ lucene/CHANGES.txt	(working copy)
@@ -137,6 +137,9 @@
 * LUCENE-6266: Remove unnecessary Directory params from SegmentInfo.toString, 
   SegmentInfos.files/toString, and SegmentCommitInfo.toString. (Robert Muir)
 
+* LUCENE-6272: Scorer extends DocSetIdIterator rather than Scorer (Alan
+  Woodward)
+
 Other
 
 * LUCENE-6248: Remove unused odd constants from StandardSyntaxParser.jj
Index: lucene/core/src/java/org/apache/lucene/search/CachingCollector.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/CachingCollector.java	(revision 1661229)
+++ lucene/core/src/java/org/apache/lucene/search/CachingCollector.java	(working copy)
@@ -24,7 +24,6 @@
 
 import org.apache.lucene.index.LeafReaderContext;
 import org.apache.lucene.util.ArrayUtil;
-import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.RamUsageEstimator;
 
 /**
@@ -75,26 +74,6 @@
     public final int freq() { throw new UnsupportedOperationException(); }
 
     @Override
-    public int nextPosition() throws IOException {
-      throw new UnsupportedOperationException();
-    }
-
-    @Override
-    public int startOffset() throws IOException {
-      throw new UnsupportedOperationException();
-    }
-
-    @Override
-    public int endOffset() throws IOException {
-      throw new UnsupportedOperationException();
-    }
-
-    @Override
-    public BytesRef getPayload() throws IOException {
-      throw new UnsupportedOperationException();
-    }
-
-    @Override
     public final int nextDoc() { throw new UnsupportedOperationException(); }
 
     @Override
Index: lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer.java	(revision 1661229)
+++ lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer.java	(working copy)
@@ -22,8 +22,6 @@
 import java.util.Collection;
 import java.util.List;
 
-import org.apache.lucene.util.BytesRef;
-
 /** Scorer for conjunctions, sets of queries, all of which are required. */
 class ConjunctionScorer extends Scorer {
 
@@ -80,26 +78,6 @@
   }
 
   @Override
-  public int nextPosition() throws IOException {
-    return -1;
-  }
-
-  @Override
-  public int startOffset() throws IOException {
-    return -1;
-  }
-
-  @Override
-  public int endOffset() throws IOException {
-    return -1;
-  }
-
-  @Override
-  public BytesRef getPayload() throws IOException {
-    return null;
-  }
-
-  @Override
   public long cost() {
     return disi.cost();
   }
Index: lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery.java	(revision 1661229)
+++ lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery.java	(working copy)
@@ -26,7 +26,6 @@
 import org.apache.lucene.index.LeafReaderContext;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.util.Bits;
-import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.ToStringUtils;
 
 /**
@@ -236,26 +235,6 @@
     }
 
     @Override
-    public int nextPosition() throws IOException {
-      return -1;
-    }
-
-    @Override
-    public int startOffset() throws IOException {
-      return -1;
-    }
-
-    @Override
-    public int endOffset() throws IOException {
-      return -1;
-    }
-
-    @Override
-    public BytesRef getPayload() throws IOException {
-      return null;
-    }
-
-    @Override
     public int advance(int target) throws IOException {
       return docIdSetIterator.advance(target);
     }
Index: lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer.java	(revision 1661229)
+++ lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer.java	(working copy)
@@ -23,7 +23,6 @@
 import java.util.List;
 
 import org.apache.lucene.search.ScorerPriorityQueue.ScorerWrapper;
-import org.apache.lucene.util.BytesRef;
 
 /**
  * Base class for Scorers that score disjunctions.
@@ -232,23 +231,4 @@
     return children;
   }
 
-  @Override
-  public int nextPosition() throws IOException {
-    return -1;
-  }
-
-  @Override
-  public int startOffset() throws IOException {
-    return -1;
-  }
-
-  @Override
-  public int endOffset() throws IOException {
-    return -1;
-  }
-
-  @Override
-  public BytesRef getPayload() throws IOException {
-    return null;
-  }
 }
Index: lucene/core/src/java/org/apache/lucene/search/DocValuesRangeQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/DocValuesRangeQuery.java	(revision 1661229)
+++ lucene/core/src/java/org/apache/lucene/search/DocValuesRangeQuery.java	(working copy)
@@ -349,26 +349,6 @@
     }
 
     @Override
-    public int nextPosition() throws IOException {
-      return -1;
-    }
-
-    @Override
-    public int startOffset() throws IOException {
-      return -1;
-    }
-
-    @Override
-    public int endOffset() throws IOException {
-      return -1;
-    }
-
-    @Override
-    public BytesRef getPayload() throws IOException {
-      return null;
-    }
-
-    @Override
     public int docID() {
       return disi.docID();
     }
Index: lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer.java	(revision 1661229)
+++ lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer.java	(working copy)
@@ -23,7 +23,6 @@
 
 import org.apache.lucene.index.PostingsEnum;
 import org.apache.lucene.search.similarities.Similarity;
-import org.apache.lucene.util.BytesRef;
 
 final class ExactPhraseScorer extends Scorer {
 
@@ -107,26 +106,6 @@
   }
 
   @Override
-  public int nextPosition() throws IOException {
-    return -1;
-  }
-
-  @Override
-  public int startOffset() throws IOException {
-    return -1;
-  }
-
-  @Override
-  public int endOffset() throws IOException {
-    return -1;
-  }
-
-  @Override
-  public BytesRef getPayload() throws IOException {
-    return null;
-  }
-
-  @Override
   public int docID() {
     return conjunction.docID();
   }
Index: lucene/core/src/java/org/apache/lucene/search/FakeScorer.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/FakeScorer.java	(revision 1661229)
+++ lucene/core/src/java/org/apache/lucene/search/FakeScorer.java	(working copy)
@@ -17,11 +17,8 @@
  * limitations under the License.
  */
 
-import java.io.IOException;
 import java.util.Collection;
 
-import org.apache.lucene.util.BytesRef;
-
 /** Used by {@link BulkScorer}s that need to pass a {@link
  *  Scorer} to {@link LeafCollector#setScorer}. */
 final class FakeScorer extends Scorer {
@@ -49,26 +46,6 @@
   }
 
   @Override
-  public int nextPosition() throws IOException {
-    throw new UnsupportedOperationException("FakeScorer doesn't support nextPosition()");
-  }
-
-  @Override
-  public int startOffset() throws IOException {
-    throw new UnsupportedOperationException("FakeScorer doesn't support startOffset()");
-  }
-
-  @Override
-  public int endOffset() throws IOException {
-    throw new UnsupportedOperationException("FakeScorer doesn't support endOffset()");
-  }
-
-  @Override
-  public BytesRef getPayload() throws IOException {
-    throw new UnsupportedOperationException("FakeScorer doesn't support getPayload()");
-  }
-
-  @Override
   public int nextDoc() {
     throw new UnsupportedOperationException("FakeScorer doesn't support nextDoc()");
   }
Index: lucene/core/src/java/org/apache/lucene/search/FieldValueQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/FieldValueQuery.java	(revision 1661229)
+++ lucene/core/src/java/org/apache/lucene/search/FieldValueQuery.java	(working copy)
@@ -24,7 +24,6 @@
 import org.apache.lucene.index.LeafReaderContext;
 import org.apache.lucene.util.Bits;
 import org.apache.lucene.util.Bits.MatchNoBits;
-import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.ToStringUtils;
 
 /**
@@ -156,31 +155,11 @@
           }
 
           @Override
-          public int startOffset() throws IOException {
-            return -1;
-          }
-
-          @Override
-          public int nextPosition() throws IOException {
-            return -1;
-          }
-
-          @Override
-          public BytesRef getPayload() throws IOException {
-            return null;
-          }
-
-          @Override
           public int freq() throws IOException {
             return 1;
           }
 
           @Override
-          public int endOffset() throws IOException {
-            return -1;
-          }
-
-          @Override
           public float score() throws IOException {
             return queryWeight;
           }
Index: lucene/core/src/java/org/apache/lucene/search/Filter.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/Filter.java	(revision 1661229)
+++ lucene/core/src/java/org/apache/lucene/search/Filter.java	(working copy)
@@ -21,7 +21,6 @@
 
 import org.apache.lucene.index.LeafReaderContext;
 import org.apache.lucene.util.Bits;
-import org.apache.lucene.util.BytesRef;
 
 /**
  *  Convenient base class for building queries that only perform matching, but
@@ -124,26 +123,6 @@
           }
 
           @Override
-          public int nextPosition() throws IOException {
-            return -1;
-          }
-
-          @Override
-          public int startOffset() throws IOException {
-            return -1;
-          }
-
-          @Override
-          public int endOffset() throws IOException {
-            return -1;
-          }
-
-          @Override
-          public BytesRef getPayload() throws IOException {
-            return null;
-          }
-
-          @Override
           public int docID() {
             return iterator.docID();
           }
Index: lucene/core/src/java/org/apache/lucene/search/FilterScorer.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/FilterScorer.java	(revision 1661229)
+++ lucene/core/src/java/org/apache/lucene/search/FilterScorer.java	(working copy)
@@ -19,9 +19,6 @@
 
 import java.io.IOException;
 
-import org.apache.lucene.util.AttributeSource;
-import org.apache.lucene.util.BytesRef;
-
 /** 
  * A {@code FilterScorer} contains another {@code Scorer}, which it
  * uses as its basic source of data, possibly transforming the data along the
@@ -75,11 +72,6 @@
   }
 
   @Override
-  public int nextPosition() throws IOException {
-    return in.nextPosition();
-  }
-
-  @Override
   public int advance(int target) throws IOException {
     return in.advance(target);
   }
@@ -89,23 +81,4 @@
     return in.cost();
   }
 
-  @Override
-  public int startOffset() throws IOException {
-    return in.startOffset();
-  }
-
-  @Override
-  public int endOffset() throws IOException {
-    return in.endOffset();
-  }
-
-  @Override
-  public BytesRef getPayload() throws IOException {
-    return in.getPayload();
-  }
-
-  @Override
-  public AttributeSource attributes() {
-    return in.attributes();
-  }
 }
Index: lucene/core/src/java/org/apache/lucene/search/MatchAllDocsQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/MatchAllDocsQuery.java	(revision 1661229)
+++ lucene/core/src/java/org/apache/lucene/search/MatchAllDocsQuery.java	(working copy)
@@ -24,7 +24,6 @@
 import org.apache.lucene.index.LeafReaderContext;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.util.Bits;
-import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.ToStringUtils;
 
 /**
@@ -74,26 +73,6 @@
     }
 
     @Override
-    public int nextPosition() throws IOException {
-      return -1;
-    }
-
-    @Override
-    public int startOffset() throws IOException {
-      return -1;
-    }
-
-    @Override
-    public int endOffset() throws IOException {
-      return -1;
-    }
-
-    @Override
-    public BytesRef getPayload() throws IOException {
-      return null;
-    }
-
-    @Override
     public int advance(int target) throws IOException {
       doc = target-1;
       return nextDoc();
Index: lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer.java	(revision 1661229)
+++ lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer.java	(working copy)
@@ -24,7 +24,6 @@
 import java.util.List;
 
 import org.apache.lucene.search.ScorerPriorityQueue.ScorerWrapper;
-import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.PriorityQueue;
 
 import static org.apache.lucene.search.ScorerPriorityQueue.leftNode;
@@ -230,26 +229,6 @@
     }
   }
 
-  @Override
-  public int nextPosition() throws IOException {
-    return -1;
-  }
-
-  @Override
-  public int startOffset() throws IOException {
-    return -1;
-  }
-
-  @Override
-  public int endOffset() throws IOException {
-    return -1;
-  }
-
-  @Override
-  public BytesRef getPayload() throws IOException {
-    return null;
-  }
-
   /** Advance tail to the lead until there is a match. */
   private int doNext() throws IOException {
     while (freq < minShouldMatch) {
Index: lucene/core/src/java/org/apache/lucene/search/ReqOptSumScorer.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/ReqOptSumScorer.java	(revision 1661229)
+++ lucene/core/src/java/org/apache/lucene/search/ReqOptSumScorer.java	(working copy)
@@ -20,8 +20,6 @@
 import java.util.ArrayList;
 import java.util.Collection;
 
-import org.apache.lucene.util.BytesRef;
-
 /** A Scorer for queries with a required part and an optional part.
  * Delays skipTo() on the optional part until a score() is needed.
  * <br>
@@ -100,26 +98,6 @@
   }
 
   @Override
-  public int nextPosition() throws IOException {
-    return -1;
-  }
-
-  @Override
-  public int startOffset() throws IOException {
-    return -1;
-  }
-
-  @Override
-  public int endOffset() throws IOException {
-    return -1;
-  }
-
-  @Override
-  public BytesRef getPayload() throws IOException {
-    return null;
-  }
-
-  @Override
   public Collection<ChildScorer> getChildren() {
     ArrayList<ChildScorer> children = new ArrayList<>(2);
     children.add(new ChildScorer(reqScorer, "MUST"));
Index: lucene/core/src/java/org/apache/lucene/search/Scorer.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/Scorer.java	(revision 1661229)
+++ lucene/core/src/java/org/apache/lucene/search/Scorer.java	(working copy)
@@ -21,8 +21,6 @@
 import java.util.Collection;
 import java.util.Collections;
 
-import org.apache.lucene.index.PostingsEnum;
-
 /**
  * Expert: Common scoring functionality for different types of queries.
  *
@@ -41,7 +39,7 @@
  * TopScoreDocCollector}) will not properly collect hits
  * with these scores.
  */
-public abstract class Scorer extends PostingsEnum {
+public abstract class Scorer extends DocIdSetIterator {
   /** the Scorer's parent Weight. in some cases this may be null */
   // TODO can we clean this up?
   protected final Weight weight;
@@ -61,6 +59,9 @@
    */
   public abstract float score() throws IOException;
 
+  /** Returns the freq of this Scorer on the current document */
+  public abstract int freq() throws IOException;
+
   /** returns parent Weight
    * @lucene.experimental
    */
Index: lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer.java	(revision 1661229)
+++ lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer.java	(working copy)
@@ -27,7 +27,6 @@
 
 import org.apache.lucene.index.Term;
 import org.apache.lucene.search.similarities.Similarity;
-import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.FixedBitSet;
 
 final class SloppyPhraseScorer extends Scorer {
@@ -529,26 +528,6 @@
     return numMatches;
   }
 
-  @Override
-  public int nextPosition() throws IOException {
-    return -1;
-  }
-
-  @Override
-  public int startOffset() throws IOException {
-    return -1;
-  }
-
-  @Override
-  public int endOffset() throws IOException {
-    return -1;
-  }
-
-  @Override
-  public BytesRef getPayload() throws IOException {
-    return null;
-  }
-
   float sloppyFreq() {
     return sloppyFreq;
   }
Index: lucene/core/src/java/org/apache/lucene/search/TermScorer.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/TermScorer.java	(revision 1661229)
+++ lucene/core/src/java/org/apache/lucene/search/TermScorer.java	(working copy)
@@ -21,7 +21,6 @@
 
 import org.apache.lucene.index.PostingsEnum;
 import org.apache.lucene.search.similarities.Similarity;
-import org.apache.lucene.util.BytesRef;
 
 /** Expert: A <code>Scorer</code> for documents matching a <code>Term</code>.
  */
@@ -56,26 +55,6 @@
     return postingsEnum.freq();
   }
 
-  @Override
-  public int nextPosition() throws IOException {
-    return postingsEnum.nextPosition();
-  }
-
-  @Override
-  public int startOffset() throws IOException {
-    return postingsEnum.startOffset();
-  }
-
-  @Override
-  public int endOffset() throws IOException {
-    return postingsEnum.endOffset();
-  }
-
-  @Override
-  public BytesRef getPayload() throws IOException {
-    return postingsEnum.getPayload();
-  }
-
   /**
    * Advances to the next document matching the query. <br>
    *
Index: lucene/core/src/java/org/apache/lucene/search/spans/SpanScorer.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/spans/SpanScorer.java	(revision 1661229)
+++ lucene/core/src/java/org/apache/lucene/search/spans/SpanScorer.java	(working copy)
@@ -22,7 +22,6 @@
 import org.apache.lucene.search.Scorer;
 import org.apache.lucene.search.Weight;
 import org.apache.lucene.search.similarities.Similarity;
-import org.apache.lucene.util.BytesRef;
 
 /**
  * Public for extension only.
@@ -98,26 +97,6 @@
     return numMatches;
   }
 
-  @Override
-  public int nextPosition() throws IOException {
-    throw new UnsupportedOperationException("SpanQueries do not support nextPosition() iteration");
-  }
-
-  @Override
-  public int startOffset() throws IOException {
-    throw new UnsupportedOperationException();
-  }
-
-  @Override
-  public int endOffset() throws IOException {
-    throw new UnsupportedOperationException();
-  }
-
-  @Override
-  public BytesRef getPayload() throws IOException {
-    throw new UnsupportedOperationException();
-  }
-
   /** Returns the intermediate "sloppy freq" adjusted for edit distance 
    *  @lucene.internal */
   // only public so .payloads can see it.
Index: lucene/core/src/test/org/apache/lucene/search/JustCompileSearch.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/JustCompileSearch.java	(revision 1661229)
+++ lucene/core/src/test/org/apache/lucene/search/JustCompileSearch.java	(working copy)
@@ -23,7 +23,6 @@
 import org.apache.lucene.index.LeafReaderContext;
 import org.apache.lucene.search.similarities.Similarity;
 import org.apache.lucene.util.Bits;
-import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.PriorityQueue;
 
 /**
@@ -200,26 +199,6 @@
     }
 
     @Override
-    public int nextPosition() throws IOException {
-      throw new UnsupportedOperationException(UNSUPPORTED_MSG);
-    }
-
-    @Override
-    public int startOffset() throws IOException {
-      throw new UnsupportedOperationException(UNSUPPORTED_MSG);
-    }
-
-    @Override
-    public int endOffset() throws IOException {
-      throw new UnsupportedOperationException(UNSUPPORTED_MSG);
-    }
-
-    @Override
-    public BytesRef getPayload() throws IOException {
-      throw new UnsupportedOperationException(UNSUPPORTED_MSG);
-    }
-
-    @Override
     public int docID() {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
Index: lucene/core/src/test/org/apache/lucene/search/TestCachingCollector.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestCachingCollector.java	(revision 1661229)
+++ lucene/core/src/test/org/apache/lucene/search/TestCachingCollector.java	(working copy)
@@ -19,7 +19,6 @@
 
 import java.io.IOException;
 
-import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.LuceneTestCase;
 
 public class TestCachingCollector extends LuceneTestCase {
@@ -39,26 +38,6 @@
     public int freq() throws IOException { return 0; }
 
     @Override
-    public int nextPosition() throws IOException {
-      return -1;
-    }
-
-    @Override
-    public int startOffset() throws IOException {
-      return -1;
-    }
-
-    @Override
-    public int endOffset() throws IOException {
-      return -1;
-    }
-
-    @Override
-    public BytesRef getPayload() throws IOException {
-      return null;
-    }
-
-    @Override
     public int docID() { return 0; }
 
     @Override
Index: lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI.java	(revision 1661229)
+++ lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI.java	(working copy)
@@ -21,7 +21,6 @@
 import java.util.Arrays;
 
 import org.apache.lucene.util.BitDocIdSet;
-import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.FixedBitSet;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.TestUtil;
@@ -105,26 +104,6 @@
         return 0;
       }
 
-      @Override
-      public int nextPosition() throws IOException {
-        return 0;
-      }
-
-      @Override
-      public int startOffset() throws IOException {
-        return 0;
-      }
-
-      @Override
-      public int endOffset() throws IOException {
-        return 0;
-      }
-
-      @Override
-      public BytesRef getPayload() throws IOException {
-        return null;
-      }
-
     };
   }
 
Index: lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.java	(revision 1661229)
+++ lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.java	(working copy)
@@ -356,26 +356,6 @@
     }
 
     @Override
-    public int nextPosition() throws IOException {
-      return -1;
-    }
-
-    @Override
-    public int startOffset() throws IOException {
-      return -1;
-    }
-
-    @Override
-    public int endOffset() throws IOException {
-      return -1;
-    }
-
-    @Override
-    public BytesRef getPayload() throws IOException {
-      return null;
-    }
-
-    @Override
     public int docID() {
       return currentDoc;
     }
Index: lucene/core/src/test/org/apache/lucene/search/TestPositiveScoresOnlyCollector.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestPositiveScoresOnlyCollector.java	(revision 1661229)
+++ lucene/core/src/test/org/apache/lucene/search/TestPositiveScoresOnlyCollector.java	(working copy)
@@ -17,14 +17,11 @@
  * limitations under the License.
  */
 
-import java.io.IOException;
-
 import org.apache.lucene.document.Document;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.RandomIndexWriter;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.store.Directory;
-import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.LuceneTestCase;
 
 public class TestPositiveScoresOnlyCollector extends LuceneTestCase {
@@ -44,26 +41,6 @@
       return 1;
     }
 
-    @Override
-    public int nextPosition() throws IOException {
-      return -1;
-    }
-
-    @Override
-    public int startOffset() throws IOException {
-      return -1;
-    }
-
-    @Override
-    public int endOffset() throws IOException {
-      return -1;
-    }
-
-    @Override
-    public BytesRef getPayload() throws IOException {
-      return null;
-    }
-
     @Override public int docID() { return idx; }
 
     @Override public int nextDoc() {
Index: lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.java	(revision 1661229)
+++ lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.java	(working copy)
@@ -36,7 +36,6 @@
 import org.apache.lucene.search.spans.SpanTermQuery;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.Bits;
-import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.TestUtil;
 
@@ -455,26 +454,6 @@
             }
 
             @Override
-            public int nextPosition() throws IOException {
-              return -1;
-            }
-
-            @Override
-            public int startOffset() throws IOException {
-              return -1;
-            }
-
-            @Override
-            public int endOffset() throws IOException {
-              return -1;
-            }
-
-            @Override
-            public BytesRef getPayload() throws IOException {
-              return null;
-            }
-
-            @Override
             public long cost() {
               return 1;
             }
Index: lucene/core/src/test/org/apache/lucene/search/TestScoreCachingWrappingScorer.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestScoreCachingWrappingScorer.java	(revision 1661229)
+++ lucene/core/src/test/org/apache/lucene/search/TestScoreCachingWrappingScorer.java	(working copy)
@@ -23,7 +23,6 @@
 import org.apache.lucene.index.RandomIndexWriter;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.store.Directory;
-import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.LuceneTestCase;
 
 public class TestScoreCachingWrappingScorer extends LuceneTestCase {
@@ -48,26 +47,6 @@
       return 1;
     }
 
-    @Override
-    public int nextPosition() throws IOException {
-      return -1;
-    }
-
-    @Override
-    public int startOffset() throws IOException {
-      return -1;
-    }
-
-    @Override
-    public int endOffset() throws IOException {
-      return -1;
-    }
-
-    @Override
-    public BytesRef getPayload() throws IOException {
-      return null;
-    }
-
     @Override public int docID() { return doc; }
 
     @Override public int nextDoc() {
Index: lucene/expressions/src/java/org/apache/lucene/expressions/FakeScorer.java
===================================================================
--- lucene/expressions/src/java/org/apache/lucene/expressions/FakeScorer.java	(revision 1661229)
+++ lucene/expressions/src/java/org/apache/lucene/expressions/FakeScorer.java	(working copy)
@@ -20,7 +20,6 @@
 import java.io.IOException;
 
 import org.apache.lucene.search.Scorer;
-import org.apache.lucene.util.BytesRef;
 
 class FakeScorer extends Scorer {
 
@@ -58,26 +57,6 @@
   }
 
   @Override
-  public int nextPosition() throws IOException {
-    throw new UnsupportedOperationException();
-  }
-
-  @Override
-  public int startOffset() throws IOException {
-    throw new UnsupportedOperationException();
-  }
-
-  @Override
-  public int endOffset() throws IOException {
-    throw new UnsupportedOperationException();
-  }
-
-  @Override
-  public BytesRef getPayload() throws IOException {
-    throw new UnsupportedOperationException();
-  }
-
-  @Override
   public float score() throws IOException {
     return score;
   }
Index: lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysScorer.java
===================================================================
--- lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysScorer.java	(revision 1661229)
+++ lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysScorer.java	(working copy)
@@ -21,8 +21,8 @@
 import java.util.Collection;
 import java.util.Collections;
 
+import org.apache.lucene.index.LeafReaderContext;
 import org.apache.lucene.index.PostingsEnum;
-import org.apache.lucene.index.LeafReaderContext;
 import org.apache.lucene.search.BulkScorer;
 import org.apache.lucene.search.Collector;
 import org.apache.lucene.search.DocIdSetIterator;
@@ -30,7 +30,6 @@
 import org.apache.lucene.search.Scorer;
 import org.apache.lucene.search.Weight;
 import org.apache.lucene.util.Bits;
-import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.FixedBitSet;
 
 class DrillSidewaysScorer extends BulkScorer {
@@ -654,26 +653,6 @@
     }
 
     @Override
-    public int nextPosition() throws IOException {
-      throw new UnsupportedOperationException("FakeScorer doesn't support nextPosition()");
-    }
-
-    @Override
-    public int startOffset() throws IOException {
-      throw new UnsupportedOperationException();
-    }
-
-    @Override
-    public int endOffset() throws IOException {
-      throw new UnsupportedOperationException();
-    }
-
-    @Override
-    public BytesRef getPayload() throws IOException {
-      throw new UnsupportedOperationException();
-    }
-
-    @Override
     public int nextDoc() {
       throw new UnsupportedOperationException("FakeScorer doesn't support nextDoc()");
     }
Index: lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FakeScorer.java
===================================================================
--- lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FakeScorer.java	(revision 1661229)
+++ lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FakeScorer.java	(working copy)
@@ -20,7 +20,6 @@
 import java.io.IOException;
 
 import org.apache.lucene.search.Scorer;
-import org.apache.lucene.util.BytesRef;
 
 class FakeScorer extends Scorer {
 
@@ -58,26 +57,6 @@
   }
 
   @Override
-  public int nextPosition() throws IOException {
-    throw new UnsupportedOperationException();
-  }
-
-  @Override
-  public int startOffset() throws IOException {
-    throw new UnsupportedOperationException();
-  }
-
-  @Override
-  public int endOffset() throws IOException {
-    throw new UnsupportedOperationException();
-  }
-
-  @Override
-  public BytesRef getPayload() throws IOException {
-    throw new UnsupportedOperationException();
-  }
-
-  @Override
   public float score() throws IOException {
     return score;
   }
Index: lucene/grouping/src/java/org/apache/lucene/search/grouping/FakeScorer.java
===================================================================
--- lucene/grouping/src/java/org/apache/lucene/search/grouping/FakeScorer.java	(revision 1661229)
+++ lucene/grouping/src/java/org/apache/lucene/search/grouping/FakeScorer.java	(working copy)
@@ -20,7 +20,6 @@
 import java.io.IOException;
 
 import org.apache.lucene.search.Scorer;
-import org.apache.lucene.util.BytesRef;
 
 class FakeScorer extends Scorer {
 
@@ -58,26 +57,6 @@
   }
 
   @Override
-  public int nextPosition() throws IOException {
-    throw new UnsupportedOperationException();
-  }
-
-  @Override
-  public int startOffset() throws IOException {
-    throw new UnsupportedOperationException();
-  }
-
-  @Override
-  public int endOffset() throws IOException {
-    throw new UnsupportedOperationException();
-  }
-
-  @Override
-  public BytesRef getPayload() throws IOException {
-    throw new UnsupportedOperationException();
-  }
-
-  @Override
   public float score() throws IOException {
     return score;
   }
Index: lucene/join/src/java/org/apache/lucene/search/join/FakeScorer.java
===================================================================
--- lucene/join/src/java/org/apache/lucene/search/join/FakeScorer.java	(revision 1661229)
+++ lucene/join/src/java/org/apache/lucene/search/join/FakeScorer.java	(working copy)
@@ -20,7 +20,6 @@
 import java.io.IOException;
 
 import org.apache.lucene.search.Scorer;
-import org.apache.lucene.util.BytesRef;
 
 class FakeScorer extends Scorer {
 
@@ -58,26 +57,6 @@
   }
 
   @Override
-  public int nextPosition() throws IOException {
-    throw new UnsupportedOperationException();
-  }
-
-  @Override
-  public int startOffset() throws IOException {
-    throw new UnsupportedOperationException();
-  }
-
-  @Override
-  public int endOffset() throws IOException {
-    throw new UnsupportedOperationException();
-  }
-
-  @Override
-  public BytesRef getPayload() throws IOException {
-    throw new UnsupportedOperationException();
-  }
-
-  @Override
   public float score() throws IOException {
     return score;
   }
Index: lucene/join/src/java/org/apache/lucene/search/join/TermsIncludingScoreQuery.java
===================================================================
--- lucene/join/src/java/org/apache/lucene/search/join/TermsIncludingScoreQuery.java	(revision 1661229)
+++ lucene/join/src/java/org/apache/lucene/search/join/TermsIncludingScoreQuery.java	(working copy)
@@ -21,9 +21,9 @@
 import java.util.Locale;
 import java.util.Set;
 
-import org.apache.lucene.index.PostingsEnum;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.LeafReaderContext;
+import org.apache.lucene.index.PostingsEnum;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.index.Terms;
 import org.apache.lucene.index.TermsEnum;
@@ -225,26 +225,6 @@
     }
 
     @Override
-    public int nextPosition() throws IOException {
-      return -1;
-    }
-
-    @Override
-    public int startOffset() throws IOException {
-      return -1;
-    }
-
-    @Override
-    public int endOffset() throws IOException {
-      return -1;
-    }
-
-    @Override
-    public BytesRef getPayload() throws IOException {
-      return null;
-    }
-
-    @Override
     public int docID() {
       return currentDoc;
     }
Index: lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.java
===================================================================
--- lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.java	(revision 1661229)
+++ lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.java	(working copy)
@@ -33,7 +33,6 @@
 import org.apache.lucene.util.BitDocIdSet;
 import org.apache.lucene.util.BitSet;
 import org.apache.lucene.util.Bits;
-import org.apache.lucene.util.BytesRef;
 
 /**
  * Just like {@link ToParentBlockJoinQuery}, except this
@@ -265,26 +264,6 @@
     }
 
     @Override
-    public int nextPosition() throws IOException {
-      return -1;
-    }
-
-    @Override
-    public int startOffset() throws IOException {
-      return -1;
-    }
-
-    @Override
-    public int endOffset() throws IOException {
-      return -1;
-    }
-
-    @Override
-    public BytesRef getPayload() throws IOException {
-      return null;
-    }
-
-    @Override
     public int advance(int childTarget) throws IOException {
       
       //System.out.println("Q.advance childTarget=" + childTarget);
Index: lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.java
===================================================================
--- lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.java	(revision 1661229)
+++ lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.java	(working copy)
@@ -39,7 +39,6 @@
 import org.apache.lucene.util.BitDocIdSet;
 import org.apache.lucene.util.BitSet;
 import org.apache.lucene.util.Bits;
-import org.apache.lucene.util.BytesRef;
 
 /**
  * This query requires that you index
@@ -366,26 +365,6 @@
     }
 
     @Override
-    public int nextPosition() throws IOException {
-      return -1;
-    }
-
-    @Override
-    public int startOffset() throws IOException {
-      return -1;
-    }
-
-    @Override
-    public int endOffset() throws IOException {
-      return -1;
-    }
-
-    @Override
-    public BytesRef getPayload() throws IOException {
-      return null;
-    }
-
-    @Override
     public int advance(int parentTarget) throws IOException {
 
       //System.out.println("Q.advance parentTarget=" + parentTarget);
Index: lucene/misc/src/java/org/apache/lucene/index/Sorter.java
===================================================================
--- lucene/misc/src/java/org/apache/lucene/index/Sorter.java	(revision 1661229)
+++ lucene/misc/src/java/org/apache/lucene/index/Sorter.java	(working copy)
@@ -24,7 +24,6 @@
 import org.apache.lucene.search.Scorer;
 import org.apache.lucene.search.Sort;
 import org.apache.lucene.search.SortField;
-import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.TimSorter;
 import org.apache.lucene.util.packed.PackedInts;
 import org.apache.lucene.util.packed.PackedLongValues;
@@ -291,26 +290,6 @@
     }
 
     @Override
-    public int nextPosition() throws IOException {
-      throw new UnsupportedOperationException();
-    }
-
-    @Override
-    public int startOffset() throws IOException {
-      throw new UnsupportedOperationException();
-    }
-
-    @Override
-    public int endOffset() throws IOException {
-      throw new UnsupportedOperationException();
-    }
-
-    @Override
-    public BytesRef getPayload() throws IOException {
-      throw new UnsupportedOperationException();
-    }
-
-    @Override
     public float score() throws IOException {
       return score;
     }
Index: lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.java	(revision 1661229)
+++ lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.java	(working copy)
@@ -35,7 +35,6 @@
 import org.apache.lucene.search.Scorer;
 import org.apache.lucene.search.Weight;
 import org.apache.lucene.util.Bits;
-import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.ToStringUtils;
 
 /**
@@ -326,26 +325,6 @@
     }
 
     @Override
-    public int nextPosition() throws IOException {
-      return subQueryScorer.nextPosition();
-    }
-
-    @Override
-    public int startOffset() throws IOException {
-      return subQueryScorer.startOffset();
-    }
-
-    @Override
-    public int endOffset() throws IOException {
-      return subQueryScorer.endOffset();
-    }
-
-    @Override
-    public BytesRef getPayload() throws IOException {
-      return subQueryScorer.getPayload();
-    }
-
-    @Override
     public Collection<ChildScorer> getChildren() {
       return Collections.singleton(new ChildScorer(subQueryScorer, "CUSTOM"));
     }
Index: lucene/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.java	(revision 1661229)
+++ lucene/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.java	(working copy)
@@ -31,7 +31,6 @@
 import org.apache.lucene.search.Scorer;
 import org.apache.lucene.search.Weight;
 import org.apache.lucene.util.Bits;
-import org.apache.lucene.util.BytesRef;
 
 
 /**
@@ -168,26 +167,6 @@
       return 1;
     }
 
-    @Override
-    public int nextPosition() throws IOException {
-      return -1;
-    }
-
-    @Override
-    public int startOffset() throws IOException {
-      return -1;
-    }
-
-    @Override
-    public int endOffset() throws IOException {
-      return -1;
-    }
-
-    @Override
-    public BytesRef getPayload() throws IOException {
-      return null;
-    }
-
     public Explanation explain(int doc) throws IOException {
       float sc = qWeight * vals.floatVal(doc);
 
Index: lucene/queries/src/java/org/apache/lucene/queries/function/ValueSourceScorer.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/function/ValueSourceScorer.java	(revision 1661229)
+++ lucene/queries/src/java/org/apache/lucene/queries/function/ValueSourceScorer.java	(working copy)
@@ -23,7 +23,6 @@
 import org.apache.lucene.index.MultiFields;
 import org.apache.lucene.search.Scorer;
 import org.apache.lucene.util.Bits;
-import org.apache.lucene.util.BytesRef;
 
 /**
  * {@link Scorer} which returns the result of {@link FunctionValues#floatVal(int)} as
@@ -94,26 +93,6 @@
   }
 
   @Override
-  public int nextPosition() throws IOException {
-    return -1;
-  }
-
-  @Override
-  public int startOffset() throws IOException {
-    return -1;
-  }
-
-  @Override
-  public int endOffset() throws IOException {
-    return -1;
-  }
-
-  @Override
-  public BytesRef getPayload() throws IOException {
-    return null;
-  }
-
-  @Override
   public long cost() {
     return maxDoc;
   }
Index: lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonScorer.java
===================================================================
--- lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonScorer.java	(revision 1661229)
+++ lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonScorer.java	(working copy)
@@ -326,26 +326,6 @@
   }
 
   @Override
-  public int nextPosition() throws IOException {
-    return -1; // TODO can we get positional information out of this Scorer?
-  }
-
-  @Override
-  public int startOffset() throws IOException {
-    return -1;
-  }
-
-  @Override
-  public int endOffset() throws IOException {
-    return -1;
-  }
-
-  @Override
-  public BytesRef getPayload() throws IOException {
-    return null;
-  }
-
-  @Override
   public int docID() {
     return docID;
   }
Index: lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer.java	(revision 1661229)
+++ lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer.java	(working copy)
@@ -25,12 +25,11 @@
 import java.util.Random;
 import java.util.WeakHashMap;
 
-import org.apache.lucene.index.AssertingLeafReader;
-import org.apache.lucene.util.BytesRef;
-
 /** Wraps a Scorer with additional checks */
 public class AssertingScorer extends Scorer {
 
+  static enum IteratorState { START, ITERATING, FINISHED };
+
   // we need to track scorers using a weak hash map because otherwise we
   // could loose references because of eg.
   // AssertingScorer.score(Collector) which needs to delegate to work correctly
@@ -64,13 +63,14 @@
 
   final Random random;
   final Scorer in;
-  final AssertingLeafReader.AssertingPostingsEnum docsEnumIn;
 
+  IteratorState state = IteratorState.START;
+  int doc = -1;
+
   private AssertingScorer(Random random, Scorer in) {
     super(in.weight);
     this.random = random;
     this.in = in;
-    this.docsEnumIn = new AssertingLeafReader.AssertingPostingsEnum(in);
   }
 
   public Scorer getIn() {
@@ -112,30 +112,6 @@
   }
 
   @Override
-  public int nextPosition() throws IOException {
-    assert iterating();
-    return in.nextPosition();
-  }
-
-  @Override
-  public int startOffset() throws IOException {
-    assert iterating();
-    return in.startOffset();
-  }
-
-  @Override
-  public int endOffset() throws IOException {
-    assert iterating();
-    return in.endOffset();
-  }
-
-  @Override
-  public BytesRef getPayload() throws IOException {
-    assert iterating();
-    return in.getPayload();
-  }
-
-  @Override
   public int docID() {
     return in.docID();
   }
@@ -142,12 +118,31 @@
 
   @Override
   public int nextDoc() throws IOException {
-    return docsEnumIn.nextDoc();
+    assert state != IteratorState.FINISHED : "nextDoc() called after NO_MORE_DOCS";
+    int nextDoc = in.nextDoc();
+    assert nextDoc > doc : "backwards nextDoc from " + doc + " to " + nextDoc + " " + in;
+    if (nextDoc == DocIdSetIterator.NO_MORE_DOCS) {
+      state = IteratorState.FINISHED;
+    } else {
+      state = IteratorState.ITERATING;
+    }
+    assert in.docID() == nextDoc;
+    return doc = nextDoc;
   }
 
   @Override
   public int advance(int target) throws IOException {
-    return docsEnumIn.advance(target);
+    assert state != IteratorState.FINISHED : "advance() called after NO_MORE_DOCS";
+    assert target > doc : "target must be > docID(), got " + target + " <= " + doc;
+    int advanced = in.advance(target);
+    assert advanced >= target : "backwards advance from: " + target + " to: " + advanced;
+    if (advanced == DocIdSetIterator.NO_MORE_DOCS) {
+      state = IteratorState.FINISHED;
+    } else {
+      state = IteratorState.ITERATING;
+    }
+    assert in.docID() == advanced;
+    return doc = advanced;
   }
 
   @Override
Index: lucene/test-framework/src/java/org/apache/lucene/search/BulkScorerWrapperScorer.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/search/BulkScorerWrapperScorer.java	(revision 1661229)
+++ lucene/test-framework/src/java/org/apache/lucene/search/BulkScorerWrapperScorer.java	(working copy)
@@ -20,8 +20,6 @@
 import java.io.IOException;
 import java.util.Arrays;
 
-import org.apache.lucene.util.BytesRef;
-
 /**
  * A {@link BulkScorer}-backed scorer.
  */
@@ -81,26 +79,6 @@
   }
 
   @Override
-  public int nextPosition() throws IOException {
-    return -1;
-  }
-
-  @Override
-  public int startOffset() throws IOException {
-    return -1;
-  }
-
-  @Override
-  public int endOffset() throws IOException {
-    return -1;
-  }
-
-  @Override
-  public BytesRef getPayload() throws IOException {
-    return null;
-  }
-
-  @Override
   public int docID() {
     return doc;
   }
Index: lucene/test-framework/src/java/org/apache/lucene/search/RandomApproximationQuery.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/search/RandomApproximationQuery.java	(revision 1661229)
+++ lucene/test-framework/src/java/org/apache/lucene/search/RandomApproximationQuery.java	(working copy)
@@ -1,6 +1,13 @@
 package org.apache.lucene.search;
 
 import java.io.IOException;
+import java.util.Random;
+
+import com.carrotsearch.randomizedtesting.generators.RandomInts;
+import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.LeafReaderContext;
+import org.apache.lucene.util.Bits;
+
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
@@ -17,15 +24,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-import java.util.Random;
 
-import org.apache.lucene.index.IndexReader;
-import org.apache.lucene.index.LeafReaderContext;
-import org.apache.lucene.util.Bits;
-import org.apache.lucene.util.BytesRef;
-
-import com.carrotsearch.randomizedtesting.generators.RandomInts;
-
 /**
  * A {@link Query} that adds random approximations to its scorers.
  */
@@ -143,26 +142,6 @@
     }
 
     @Override
-    public int nextPosition() throws IOException {
-      return scorer.nextPosition();
-    }
-
-    @Override
-    public int startOffset() throws IOException {
-      return scorer.startOffset();
-    }
-
-    @Override
-    public int endOffset() throws IOException {
-      return scorer.endOffset();
-    }
-
-    @Override
-    public BytesRef getPayload() throws IOException {
-      return scorer.getPayload();
-    }
-
-    @Override
     public int docID() {
       return scorer.docID();
     }
Index: solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java
===================================================================
--- solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java	(revision 1661229)
+++ solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java	(working copy)
@@ -1350,26 +1350,6 @@
     }
 
     @Override
-    public int nextPosition() throws IOException {
-      throw new UnsupportedOperationException();
-    }
-
-    @Override
-    public int startOffset() throws IOException {
-      throw new UnsupportedOperationException();
-    }
-
-    @Override
-    public int endOffset() throws IOException {
-      throw new UnsupportedOperationException();
-    }
-
-    @Override
-    public BytesRef getPayload() throws IOException {
-      throw new UnsupportedOperationException();
-    }
-
-    @Override
     public int nextDoc() throws IOException {
       throw new UnsupportedOperationException();
     }
Index: solr/core/src/java/org/apache/solr/schema/LatLonType.java
===================================================================
--- solr/core/src/java/org/apache/solr/schema/LatLonType.java	(revision 1661229)
+++ solr/core/src/java/org/apache/solr/schema/LatLonType.java	(working copy)
@@ -44,7 +44,6 @@
 import org.apache.lucene.search.Weight;
 import org.apache.lucene.uninverting.UninvertingReader.Type;
 import org.apache.lucene.util.Bits;
-import org.apache.lucene.util.BytesRef;
 import org.apache.solr.common.SolrException;
 import org.apache.solr.response.TextResponseWriter;
 import org.apache.solr.search.DelegatingCollector;
@@ -483,26 +482,6 @@
     }
 
     @Override
-    public int nextPosition() throws IOException {
-      return -1;
-    }
-
-    @Override
-    public int startOffset() throws IOException {
-      return -1;
-    }
-
-    @Override
-    public int endOffset() throws IOException {
-      return -1;
-    }
-
-    @Override
-    public BytesRef getPayload() throws IOException {
-      return null;
-    }
-
-    @Override
     public long cost() {
       return maxDoc;
     }
Index: solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.java	(revision 1661229)
+++ solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.java	(working copy)
@@ -365,26 +365,6 @@
       return 0;
     }
 
-    @Override
-    public int nextPosition() throws IOException {
-      return -1;
-    }
-
-    @Override
-    public int startOffset() throws IOException {
-      return -1;
-    }
-
-    @Override
-    public int endOffset() throws IOException {
-      return -1;
-    }
-
-    @Override
-    public BytesRef getPayload() throws IOException {
-      return null;
-    }
-
     public int advance(int i) {
       return -1;
     }
Index: solr/core/src/java/org/apache/solr/search/JoinQParserPlugin.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/JoinQParserPlugin.java	(revision 1661229)
+++ solr/core/src/java/org/apache/solr/search/JoinQParserPlugin.java	(working copy)
@@ -623,26 +623,6 @@
     }
 
     @Override
-    public int nextPosition() throws IOException {
-      return -1;
-    }
-
-    @Override
-    public int startOffset() throws IOException {
-      return -1;
-    }
-
-    @Override
-    public int endOffset() throws IOException {
-      return -1;
-    }
-
-    @Override
-    public BytesRef getPayload() throws IOException {
-      return null;
-    }
-
-    @Override
     public int advance(int target) throws IOException {
       return iter.advance(target);
     }
Index: solr/core/src/java/org/apache/solr/search/SolrConstantScoreQuery.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/SolrConstantScoreQuery.java	(revision 1661229)
+++ solr/core/src/java/org/apache/solr/search/SolrConstantScoreQuery.java	(working copy)
@@ -18,7 +18,6 @@
 import org.apache.lucene.search.Scorer;
 import org.apache.lucene.search.Weight;
 import org.apache.lucene.util.Bits;
-import org.apache.lucene.util.BytesRef;
 import org.apache.solr.common.SolrException;
 
 /*
@@ -199,26 +198,6 @@
     }
 
     @Override
-    public int nextPosition() throws IOException {
-      return -1;
-    }
-
-    @Override
-    public int startOffset() throws IOException {
-      return -1;
-    }
-
-    @Override
-    public int endOffset() throws IOException {
-      return -1;
-    }
-
-    @Override
-    public BytesRef getPayload() throws IOException {
-      return null;
-    }
-
-    @Override
     public int advance(int target) throws IOException {
       return docIdSetIterator.advance(target);
     }
Index: solr/core/src/test/org/apache/solr/search/TestRankQueryPlugin.java
===================================================================
--- solr/core/src/test/org/apache/solr/search/TestRankQueryPlugin.java	(revision 1661229)
+++ solr/core/src/test/org/apache/solr/search/TestRankQueryPlugin.java	(working copy)
@@ -35,9 +35,9 @@
 import org.apache.lucene.index.ReaderUtil;
 import org.apache.lucene.search.FieldComparator;
 import org.apache.lucene.search.IndexSearcher;
-import org.apache.lucene.search.Query;
 import org.apache.lucene.search.LeafCollector;
 import org.apache.lucene.search.LeafFieldComparator;
+import org.apache.lucene.search.Query;
 import org.apache.lucene.search.ScoreDoc;
 import org.apache.lucene.search.Scorer;
 import org.apache.lucene.search.Sort;
@@ -45,7 +45,6 @@
 import org.apache.lucene.search.TopDocs;
 import org.apache.lucene.search.TopDocsCollector;
 import org.apache.lucene.search.Weight;
-import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.InPlaceMergeSorter;
 import org.apache.lucene.util.PriorityQueue;
 import org.apache.solr.client.solrj.SolrServerException;
@@ -478,26 +477,6 @@
       }
 
       @Override
-      public int nextPosition() throws IOException {
-        return -1;
-      }
-
-      @Override
-      public int startOffset() throws IOException {
-        return -1;
-      }
-
-      @Override
-      public int endOffset() throws IOException {
-        return -1;
-      }
-
-      @Override
-      public BytesRef getPayload() throws IOException {
-        return null;
-      }
-
-      @Override
       public int nextDoc() throws IOException {
         throw new UnsupportedOperationException();
       }
