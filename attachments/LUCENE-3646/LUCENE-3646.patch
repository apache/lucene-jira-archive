Index: solr/core/src/java/org/apache/solr/request/SimpleFacets.java
===================================================================
--- solr/core/src/java/org/apache/solr/request/SimpleFacets.java	(revision 1213937)
+++ solr/core/src/java/org/apache/solr/request/SimpleFacets.java	(working copy)
@@ -408,7 +408,7 @@
     FieldType ft = searcher.getSchema().getFieldType(fieldName);
     NamedList<Integer> res = new NamedList<Integer>();
 
-    FieldCache.DocTermsIndex si = FieldCache.DEFAULT.getTermsIndex(searcher.getIndexReader(), fieldName);
+    FieldCache.DocTermsIndex si = FieldCache.DEFAULT.getTermsIndex(new SlowMultiReaderWrapper(searcher.getIndexReader()), fieldName);
 
     final BytesRef prefixRef;
     if (prefix == null) {
Index: solr/core/src/java/org/apache/solr/request/UnInvertedField.java
===================================================================
--- solr/core/src/java/org/apache/solr/request/UnInvertedField.java	(revision 1213937)
+++ solr/core/src/java/org/apache/solr/request/UnInvertedField.java	(working copy)
@@ -19,6 +19,7 @@
 
 import org.apache.lucene.search.FieldCache;
 import org.apache.lucene.index.DocTermOrds;
+import org.apache.lucene.index.SlowMultiReaderWrapper;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.index.TermsEnum;
 import org.apache.lucene.search.TermQuery;
@@ -484,7 +485,7 @@
     for (String f : facet) {
       SchemaField facet_sf = searcher.getSchema().getField(f);
       try {
-        si = FieldCache.DEFAULT.getTermsIndex(searcher.getIndexReader(), f);
+        si = FieldCache.DEFAULT.getTermsIndex(new SlowMultiReaderWrapper(searcher.getIndexReader()), f);
       }
       catch (IOException e) {
         throw new RuntimeException("failed to open field cache for: " + f, e);
Index: solr/core/src/java/org/apache/solr/handler/component/StatsComponent.java
===================================================================
--- solr/core/src/java/org/apache/solr/handler/component/StatsComponent.java	(revision 1213937)
+++ solr/core/src/java/org/apache/solr/handler/component/StatsComponent.java	(working copy)
@@ -23,6 +23,7 @@
 import java.util.List;
 import java.util.Map;
 
+import org.apache.lucene.index.SlowMultiReaderWrapper;
 import org.apache.lucene.search.FieldCache;
 import org.apache.lucene.util.BytesRef;
 import org.apache.solr.common.SolrException;
@@ -246,12 +247,13 @@
     return res;
   }
   
+  // why does this use a top-level field cache?
   public NamedList<?> getFieldCacheStats(String fieldName, String[] facet ) {
     SchemaField sf = searcher.getSchema().getField(fieldName);
     
     FieldCache.DocTermsIndex si;
     try {
-      si = FieldCache.DEFAULT.getTermsIndex(searcher.getIndexReader(), fieldName);
+      si = FieldCache.DEFAULT.getTermsIndex(new SlowMultiReaderWrapper(searcher.getIndexReader()), fieldName);
     } 
     catch (IOException e) {
       throw new RuntimeException( "failed to open field cache for: "+fieldName, e );
@@ -273,7 +275,7 @@
           + "[" + facetFieldType + "]");
         }
       try {
-        facetTermsIndex = FieldCache.DEFAULT.getTermsIndex(searcher.getIndexReader(), facetField);
+        facetTermsIndex = FieldCache.DEFAULT.getTermsIndex(new SlowMultiReaderWrapper(searcher.getIndexReader()), facetField);
       }
       catch (IOException e) {
         throw new RuntimeException( "failed to open field cache for: "
Index: modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic.java
===================================================================
--- modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic.java	(revision 1213937)
+++ modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic.java	(working copy)
@@ -51,6 +51,7 @@
 import org.apache.lucene.index.MultiFields;
 import org.apache.lucene.index.SegmentInfos;
 import org.apache.lucene.index.SerialMergeScheduler;
+import org.apache.lucene.index.SlowMultiReaderWrapper;
 import org.apache.lucene.index.Terms;
 import org.apache.lucene.index.TermsEnum;
 import org.apache.lucene.search.FieldCache.DocTermsIndex;
@@ -332,7 +333,7 @@
     Benchmark benchmark = execBenchmark(algLines);
 
     IndexReader r = IndexReader.open(benchmark.getRunData().getDirectory());
-    DocTermsIndex idx = FieldCache.DEFAULT.getTermsIndex(r, "country");
+    DocTermsIndex idx = FieldCache.DEFAULT.getTermsIndex(new SlowMultiReaderWrapper(r), "country");
     final int maxDoc = r.maxDoc();
     assertEquals(1000, maxDoc);
     BytesRef br = new BytesRef();
Index: modules/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest.java
===================================================================
--- modules/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest.java	(revision 1213937)
+++ modules/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest.java	(working copy)
@@ -276,7 +276,7 @@
       w.close();
 
       // NOTE: intentional but temporary field cache insanity!
-      final int[] docIdToFieldId = FieldCache.DEFAULT.getInts(r, "id", false);
+      final int[] docIdToFieldId = FieldCache.DEFAULT.getInts(new SlowMultiReaderWrapper(r), "id", false);
       final int[] fieldIdToDocID = new int[numDocs];
       for (int i = 0; i < docIdToFieldId.length; i++) {
         int fieldId = docIdToFieldId[i];
Index: modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping.java
===================================================================
--- modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping.java	(revision 1213937)
+++ modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping.java	(working copy)
@@ -768,7 +768,7 @@
       w.close();
 
       // NOTE: intentional but temporary field cache insanity!
-      final int[] docIDToID = FieldCache.DEFAULT.getInts(r, "id", false);
+      final int[] docIDToID = FieldCache.DEFAULT.getInts(new SlowMultiReaderWrapper(r), "id", false);
       IndexReader rBlocks = null;
       Directory dirBlocks = null;
 
@@ -801,7 +801,7 @@
         dirBlocks = newDirectory();
         rBlocks = getDocBlockReader(dirBlocks, groupDocs);
         final Filter lastDocInBlock = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term("groupend", "x"))));
-        final int[] docIDToIDBlocks = FieldCache.DEFAULT.getInts(rBlocks, "id", false);
+        final int[] docIDToIDBlocks = FieldCache.DEFAULT.getInts(new SlowMultiReaderWrapper(rBlocks), "id", false);
 
         final IndexSearcher sBlocks = newSearcher(rBlocks);
         final ShardState shardsBlocks = new ShardState(sBlocks);
Index: modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ReverseOrdFieldSource.java
===================================================================
--- modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ReverseOrdFieldSource.java	(revision 1213937)
+++ modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ReverseOrdFieldSource.java	(working copy)
@@ -19,6 +19,7 @@
 
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
+import org.apache.lucene.index.SlowMultiReaderWrapper;
 import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.queries.function.docvalues.IntDocValues;
@@ -61,12 +62,13 @@
     return "rord("+field+')';
   }
 
+  // TODO: this is trappy? perhaps this query instead should make you pass a slow reader yourself?
   @Override
   public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
     final IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader;
     final int off = readerContext.docBase;
 
-    final FieldCache.DocTermsIndex sindex = FieldCache.DEFAULT.getTermsIndex(topReader, field);
+    final FieldCache.DocTermsIndex sindex = FieldCache.DEFAULT.getTermsIndex(new SlowMultiReaderWrapper(topReader), field);
     final int end = sindex.numOrd();
 
     return new IntDocValues(this) {
Index: modules/queries/src/java/org/apache/lucene/queries/function/valuesource/OrdFieldSource.java
===================================================================
--- modules/queries/src/java/org/apache/lucene/queries/function/valuesource/OrdFieldSource.java	(revision 1213937)
+++ modules/queries/src/java/org/apache/lucene/queries/function/valuesource/OrdFieldSource.java	(working copy)
@@ -19,6 +19,7 @@
 
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
+import org.apache.lucene.index.SlowMultiReaderWrapper;
 import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.queries.function.docvalues.IntDocValues;
@@ -61,11 +62,12 @@
   }
 
 
+  // TODO: this is trappy? perhaps this query instead should make you pass a slow reader yourself?
   @Override
   public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
     final int off = readerContext.docBase;
     final IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader;
-    final FieldCache.DocTermsIndex sindex = FieldCache.DEFAULT.getTermsIndex(topReader, field);
+    final FieldCache.DocTermsIndex sindex = FieldCache.DEFAULT.getTermsIndex(new SlowMultiReaderWrapper(topReader), field);
     return new IntDocValues(this) {
       protected String toTerm(String readableValue) {
         return readableValue;
Index: lucene/src/test/org/apache/lucene/search/TestFieldCache.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestFieldCache.java	(revision 1213937)
+++ lucene/src/test/org/apache/lucene/search/TestFieldCache.java	(working copy)
@@ -39,7 +39,8 @@
 import org.apache.lucene.util._TestUtil;
 
 public class TestFieldCache extends LuceneTestCase {
-  protected IndexReader reader;
+  private SlowMultiReaderWrapper reader;
+  private IndexReader r;
   private int NUM_DOCS;
   private int NUM_ORDS;
   private String[] unicodeStrings;
@@ -97,13 +98,14 @@
       }
       writer.addDocument(doc);
     }
-    reader = writer.getReader();
+    r = writer.getReader();
+    reader = new SlowMultiReaderWrapper(r);
     writer.close();
   }
 
   @Override
   public void tearDown() throws Exception {
-    reader.close();
+    r.close();
     directory.close();
     super.tearDown();
   }
@@ -289,8 +291,9 @@
     Directory dir = newDirectory();
     IndexWriter writer= new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(500));
     IndexReader r = IndexReader.open(writer, true);
-    FieldCache.DEFAULT.getTerms(r, "foobar");
-    FieldCache.DEFAULT.getTermsIndex(r, "foobar");
+    SlowMultiReaderWrapper reader = new SlowMultiReaderWrapper(r);
+    FieldCache.DEFAULT.getTerms(reader, "foobar");
+    FieldCache.DEFAULT.getTermsIndex(reader, "foobar");
     writer.close();
     r.close();
     dir.close();
Index: lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility.java
===================================================================
--- lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility.java	(revision 1213937)
+++ lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility.java	(working copy)
@@ -649,12 +649,12 @@
       assertEquals("wrong number of hits", 34, hits.length);
       
       // check decoding into field cache
-      int[] fci = FieldCache.DEFAULT.getInts(searcher.getIndexReader(), "trieInt", false);
+      int[] fci = FieldCache.DEFAULT.getInts(new SlowMultiReaderWrapper(searcher.getIndexReader()), "trieInt", false);
       for (int val : fci) {
         assertTrue("value in id bounds", val >= 0 && val < 35);
       }
       
-      long[] fcl = FieldCache.DEFAULT.getLongs(searcher.getIndexReader(), "trieLong", false);
+      long[] fcl = FieldCache.DEFAULT.getLongs(new SlowMultiReaderWrapper(searcher.getIndexReader()), "trieLong", false);
       for (long val : fcl) {
         assertTrue("value in id bounds", val >= 0L && val < 35L);
       }
Index: lucene/src/test/org/apache/lucene/index/TestDocTermOrds.java
===================================================================
--- lucene/src/test/org/apache/lucene/index/TestDocTermOrds.java	(revision 1213937)
+++ lucene/src/test/org/apache/lucene/index/TestDocTermOrds.java	(working copy)
@@ -169,7 +169,7 @@
     if (VERBOSE) {
       System.out.println("TEST: top reader");
     }
-    verify(r, idToOrds, termsArray, null);
+    verify(new SlowMultiReaderWrapper(r), idToOrds, termsArray, null);
 
     FieldCache.DEFAULT.purge(r);
 
@@ -287,7 +287,7 @@
       if (VERBOSE) {
         System.out.println("TEST: top reader");
       }
-      verify(r, idToOrdsPrefix, termsArray, prefixRef);
+      verify(new SlowMultiReaderWrapper(r), idToOrdsPrefix, termsArray, prefixRef);
     }
 
     FieldCache.DEFAULT.purge(r);
Index: lucene/src/test/org/apache/lucene/index/TestTermsEnum.java
===================================================================
--- lucene/src/test/org/apache/lucene/index/TestTermsEnum.java	(revision 1213937)
+++ lucene/src/test/org/apache/lucene/index/TestTermsEnum.java	(working copy)
@@ -232,7 +232,7 @@
     w.close();
 
     // NOTE: intentional insanity!!
-    final int[] docIDToID = FieldCache.DEFAULT.getInts(r, "id", false);
+    final int[] docIDToID = FieldCache.DEFAULT.getInts(new SlowMultiReaderWrapper(r), "id", false);
 
     for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {
 
Index: lucene/src/test/org/apache/lucene/index/TestIndexWriter.java
===================================================================
--- lucene/src/test/org/apache/lucene/index/TestIndexWriter.java	(revision 1213937)
+++ lucene/src/test/org/apache/lucene/index/TestIndexWriter.java	(working copy)
@@ -1874,7 +1874,7 @@
     w.close();
     assertEquals(1, reader.docFreq(new Term("content", bigTerm)));
 
-    FieldCache.DocTermsIndex dti = FieldCache.DEFAULT.getTermsIndex(reader, "content", random.nextBoolean());
+    FieldCache.DocTermsIndex dti = FieldCache.DEFAULT.getTermsIndex(new SlowMultiReaderWrapper(reader), "content", random.nextBoolean());
     assertEquals(5, dti.numOrd());                // +1 for null ord
     assertEquals(4, dti.size());
     assertEquals(bigTermBytesRef, dti.lookup(3, new BytesRef()));
Index: lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker.java
===================================================================
--- lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker.java	(revision 1213937)
+++ lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker.java	(working copy)
@@ -23,6 +23,7 @@
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.MultiReader;
 import org.apache.lucene.index.IndexWriter;
+import org.apache.lucene.index.SlowMultiReaderWrapper;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.FieldCacheSanityChecker.Insanity;
 import org.apache.lucene.util.FieldCacheSanityChecker.InsanityType;
@@ -87,12 +88,12 @@
     FieldCache cache = FieldCache.DEFAULT;
     cache.purgeAllCaches();
 
-    cache.getDoubles(readerA, "theDouble", false);
-    cache.getDoubles(readerA, "theDouble", FieldCache.DEFAULT_DOUBLE_PARSER, false);
-    cache.getDoubles(readerB, "theDouble", FieldCache.DEFAULT_DOUBLE_PARSER, false);
+    cache.getDoubles(new SlowMultiReaderWrapper(readerA), "theDouble", false);
+    cache.getDoubles(new SlowMultiReaderWrapper(readerA), "theDouble", FieldCache.DEFAULT_DOUBLE_PARSER, false);
+    cache.getDoubles(new SlowMultiReaderWrapper(readerB), "theDouble", FieldCache.DEFAULT_DOUBLE_PARSER, false);
 
-    cache.getInts(readerX, "theInt", false);
-    cache.getInts(readerX, "theInt", FieldCache.DEFAULT_INT_PARSER, false);
+    cache.getInts(new SlowMultiReaderWrapper(readerX), "theInt", false);
+    cache.getInts(new SlowMultiReaderWrapper(readerX), "theInt", FieldCache.DEFAULT_INT_PARSER, false);
 
     // // // 
 
@@ -110,9 +111,9 @@
     FieldCache cache = FieldCache.DEFAULT;
     cache.purgeAllCaches();
 
-    cache.getInts(readerX, "theInt", FieldCache.DEFAULT_INT_PARSER, false);
-    cache.getTerms(readerX, "theInt");
-    cache.getBytes(readerX, "theByte", false);
+    cache.getInts(new SlowMultiReaderWrapper(readerX), "theInt", FieldCache.DEFAULT_INT_PARSER, false);
+    cache.getTerms(new SlowMultiReaderWrapper(readerX), "theInt");
+    cache.getBytes(new SlowMultiReaderWrapper(readerX), "theByte", false);
 
     // // // 
 
@@ -134,11 +135,11 @@
     FieldCache cache = FieldCache.DEFAULT;
     cache.purgeAllCaches();
 
-    cache.getTerms(readerA, "theString");
-    cache.getTerms(readerB, "theString");
-    cache.getTerms(readerX, "theString");
+    cache.getTerms(new SlowMultiReaderWrapper(readerA), "theString");
+    cache.getTerms(new SlowMultiReaderWrapper(readerB), "theString");
+    cache.getTerms(new SlowMultiReaderWrapper(readerX), "theString");
 
-    cache.getBytes(readerX, "theByte", false);
+    cache.getBytes(new SlowMultiReaderWrapper(readerX), "theByte", false);
 
 
     // // // 
Index: lucene/src/java/org/apache/lucene/search/FieldCacheImpl.java
===================================================================
--- lucene/src/java/org/apache/lucene/search/FieldCacheImpl.java	(revision 1213937)
+++ lucene/src/java/org/apache/lucene/search/FieldCacheImpl.java	(working copy)
@@ -30,7 +30,6 @@
 import org.apache.lucene.index.DocsAndPositionsEnum;
 import org.apache.lucene.index.DocsEnum;
 import org.apache.lucene.index.IndexReader;
-import org.apache.lucene.index.MultiFields;
 import org.apache.lucene.index.OrdTermState;
 import org.apache.lucene.index.SegmentReader;
 import org.apache.lucene.index.TermState;
@@ -154,12 +153,29 @@
       FieldCache.DEFAULT.purge(owner);
     }
   };
+  
+  protected void initReader(IndexReader reader) {
+    if (reader instanceof SegmentReader) {
+      ((SegmentReader) reader).addCoreClosedListener(purgeCore);
+    } else if (reader.getSequentialSubReaders() != null) {
+      throw new UnsupportedOperationException("Please use SlowMultiReaderWrapper, if you really need a top level FieldCache");
+    } else {
+      // we have a slow reader of some sort, try to register a purge event
+      // rather than relying on gc:
+      Object key = reader.getCoreCacheKey();
+      if (key instanceof IndexReader) {
+        ((IndexReader)key).addReaderClosedListener(new IndexReader.ReaderClosedListener() {
+          @Override
+          public void onClose(IndexReader reader) {
+            FieldCache.DEFAULT.purge(reader);
+          }
+        }); 
+      }
+    }
+  }
 
   /** Expert: Internal cache. */
   abstract static class Cache {
-    Cache() {
-      this.wrapper = null;
-    }
 
     Cache(FieldCacheImpl wrapper) {
       this.wrapper = wrapper;
@@ -190,16 +206,7 @@
           // First time this reader is using FieldCache
           innerCache = new HashMap<Entry,Object>();
           readerCache.put(readerKey, innerCache);
-          if (reader instanceof SegmentReader) {
-            ((SegmentReader) reader).addCoreClosedListener(purgeCore);
-          } else {
-            reader.addReaderClosedListener(new IndexReader.ReaderClosedListener() {
-              @Override
-              public void onClose(IndexReader reader) {
-                FieldCache.DEFAULT.purge(reader);
-              }
-            });
-          }
+          wrapper.initReader(reader);
         }
         if (innerCache.get(key) == null) {
           innerCache.put(key, value);
@@ -220,16 +227,7 @@
           // First time this reader is using FieldCache
           innerCache = new HashMap<Entry,Object>();
           readerCache.put(readerKey, innerCache);
-          if (reader instanceof SegmentReader) {
-            ((SegmentReader) reader).addCoreClosedListener(purgeCore);
-          } else {
-            reader.addReaderClosedListener(new IndexReader.ReaderClosedListener() {
-              @Override
-              public void onClose(IndexReader reader) {
-                FieldCache.DEFAULT.purge(reader);
-              }
-            });           
-          }
+          wrapper.initReader(reader);
           value = null;
         } else {
           value = innerCache.get(key);
@@ -341,7 +339,7 @@
       }
       final int maxDoc = reader.maxDoc();
       final byte[] retArray = new byte[maxDoc];
-      Terms terms = MultiFields.getTerms(reader, field);
+      Terms terms = reader.terms(field);
       FixedBitSet docsWithField = null;
       if (terms != null) {
         if (setDocsWithField) {
@@ -414,7 +412,7 @@
       }
       final int maxDoc = reader.maxDoc();
       final short[] retArray = new short[maxDoc];
-      Terms terms = MultiFields.getTerms(reader, field);
+      Terms terms = reader.terms(field);
       FixedBitSet docsWithField = null;
       if (terms != null) {
         if (setDocsWithField) {
@@ -513,7 +511,7 @@
       final int maxDoc = reader.maxDoc();
       int[] retArray = null;
 
-      Terms terms = MultiFields.getTerms(reader, field);
+      Terms terms = reader.terms(field);
       FixedBitSet docsWithField = null;
       if (terms != null) {
         if (setDocsWithField) {
@@ -585,7 +583,7 @@
     throws IOException {
       final String field = entryKey.field;      
       FixedBitSet res = null;
-      Terms terms = MultiFields.getTerms(reader, field);
+      Terms terms = reader.terms(field);
       final int maxDoc = reader.maxDoc();
       if (terms != null) {
         final int termsDocCount = terms.getDocCount();
@@ -663,7 +661,7 @@
       final int maxDoc = reader.maxDoc();
       float[] retArray = null;
 
-      Terms terms = MultiFields.getTerms(reader, field);
+      Terms terms = reader.terms(field);
       FixedBitSet docsWithField = null;
       if (terms != null) {
         if (setDocsWithField) {
@@ -751,7 +749,7 @@
       final int maxDoc = reader.maxDoc();
       long[] retArray = null;
 
-      Terms terms = MultiFields.getTerms(reader, field);
+      Terms terms = reader.terms(field);
       FixedBitSet docsWithField = null;
       if (terms != null) {
         if (setDocsWithField) {
@@ -840,7 +838,7 @@
       final int maxDoc = reader.maxDoc();
       double[] retArray = null;
 
-      Terms terms = MultiFields.getTerms(reader, field);
+      Terms terms = reader.terms(field);
       FixedBitSet docsWithField = null;
       if (terms != null) {
         if (setDocsWithField) {
@@ -1088,7 +1086,7 @@
     protected Object createValue(IndexReader reader, Entry entryKey, boolean setDocsWithField /* ignored */)
         throws IOException {
 
-      Terms terms = MultiFields.getTerms(reader, entryKey.field);
+      Terms terms = reader.terms(entryKey.field);
 
       final boolean fasterButMoreRAM = ((Boolean) entryKey.custom).booleanValue();
 
@@ -1233,7 +1231,7 @@
     protected Object createValue(IndexReader reader, Entry entryKey, boolean setDocsWithField /* ignored */)
         throws IOException {
 
-      Terms terms = MultiFields.getTerms(reader, entryKey.field);
+      Terms terms = reader.terms(entryKey.field);
 
       final boolean fasterButMoreRAM = ((Boolean) entryKey.custom).booleanValue();
 
