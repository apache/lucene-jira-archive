Index: src/test/org/apache/lucene/spatial3d/geom/GeoCircleTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/org/apache/lucene/spatial3d/geom/GeoCircleTest.java	(date 1506453002000)
+++ src/test/org/apache/lucene/spatial3d/geom/GeoCircleTest.java	(revision )
@@ -481,5 +481,15 @@
     double surfaceDistance = planetModel.surfaceDistance(center, point);
     assertTrue(planetModel.toString() + " " + Double.toString(surfaceDistance - radius) + " " + Double.toString(radius), surfaceDistance - radius < Vector.MINIMUM_ANGULAR_RESOLUTION);
   }
+
+  @Test
+  public void exactCircleLargeTest(){
+    GeoCircle circle = GeoCircleFactory.makeExactGeoCircle(new PlanetModel(0.5, 0.7), 0.25 * Math.PI,  0,0.35 * Math.PI, 1e-12);
+    assertTrue(circle != null);
+    circle = GeoCircleFactory.makeExactGeoCircle(PlanetModel.WGS84, 0.25 * Math.PI,  0,0.9996 * Math.PI, 1e-12);
+    assertTrue(circle != null);
+  }
+
+
   
 }
Index: src/test/org/apache/lucene/spatial3d/geom/RandomGeo3dShapeGenerator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/org/apache/lucene/spatial3d/geom/RandomGeo3dShapeGenerator.java	(date 1506453002000)
+++ src/test/org/apache/lucene/spatial3d/geom/RandomGeo3dShapeGenerator.java	(revision )
@@ -55,6 +55,7 @@
   final protected static int COLLECTION = 8;
   final protected static int POINT = 9;
   final protected static int LINE = 10;
+  final protected static int EXACT_CIRCLE = 11;
 
   /* Helper shapes for generating constraints whch are just three sided polygons */
   final protected static int CONVEX_SIMPLE_POLYGON = 500;
@@ -87,7 +88,7 @@
    * @return a random generated shape code
    */
   public int randomShapeType(){
-    return random().nextInt(11);
+    return random().nextInt(12);
   }
 
   /**
@@ -100,7 +101,7 @@
    * @return a random generated polygon code
    */
   public int randomGeoAreaShapeType(){
-    return random().nextInt(11);
+    return random().nextInt(12);
   }
 
   /**
@@ -284,6 +285,9 @@
       case CONCAVE_SIMPLE_POLYGON: {
         return concaveSimplePolygon(planetModel, constraints);
       }
+      case EXACT_CIRCLE: {
+        return exactCircle(planetModel, constraints);
+      }
       default:
         throw new IllegalStateException("Unexpected shape type");
     }
@@ -349,6 +353,38 @@
     }
     return null;
   }
+
+  /**
+   * Method that returns a random generated a GeoCircle under given constraints. Returns
+   * NULL if it cannot build the GeoCircle under the given constraints.
+   *
+   * @param planetModel The planet model.
+   * @param constraints The given constraints.
+   * @return The random generated GeoCircle.
+   */
+  private GeoCircle exactCircle(PlanetModel planetModel , Constraints constraints) {
+    int iterations=0;
+    while (iterations < MAX_SHAPE_ITERATIONS) {
+      iterations++;
+      final GeoPoint center = randomGeoPoint(planetModel, constraints);
+      if (center == null){
+        continue;
+      }
+      final double radius = randomCutoffAngle();
+      final int pow = random().nextInt(10) +3;
+      final double accuracy = random().nextDouble() * Math.pow(10, (-1) * pow);
+      try {
+        GeoCircle circle = GeoCircleFactory.makeExactGeoCircle(planetModel, center.getLatitude(), center.getLongitude(), radius, accuracy);
+        if (!constraints.valid(circle)) {
+          continue;
+        }
+        return circle;
+      } catch (IllegalArgumentException e) {
+        continue;
+      }
+    }
+    return null;
+  }
 
   /**
    * Method that returns a random generated a GeoBBox under given constraints. Returns
