diff --git a/lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis.java b/lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis.java
index 9afa68708a..aad538d2fa 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis.java
@@ -415,16 +415,28 @@ public final class MoreLikeThis {
   }
 
   /**
-   * Set the maximum percentage in which words may still appear. Words that appear
-   * in more than this many percent of all docs will be ignored.
+   * Set the maximum document frequency threshold based on the number of documents
+   * in the index: terms that appear in more than the given percentage of all documents
+   * will be ignored.
+   *
+   * This method calls {@link #setMaxDocFreq(int)} internally (both conditions cannot
+   * be used at the same time).
    *
    * @param maxPercentage the maximum percentage of documents (0-100) that a term may appear
-   * in to be still considered relevant
+   * in to be still considered relevant.
    */
   public void setMaxDocFreqPct(int maxPercentage) {
-    this.maxDocFreq = maxPercentage * ir.numDocs() / 100;
+    setMaxDocFreq(computeMaxDocFreqPct(maxPercentage, ir.numDocs()));
   }
 
+  // Package-scope for tests.
+  static int computeMaxDocFreqPct(int maxPercentage, int numDocs) {
+    if (maxPercentage < 0 || maxPercentage > 100) {
+      throw new IllegalArgumentException("The argument must be within [0, 100]: "
+          + maxPercentage);
+    }
+    return Math.toIntExact((long) maxPercentage * numDocs / 100);
+  }
 
   /**
    * Returns whether to boost terms in query based on "score" or not. The default is
diff --git a/lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis.java b/lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis.java
index 32a610bf8a..c469f1520b 100644
--- a/lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis.java
+++ b/lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis.java
@@ -194,6 +194,12 @@ public class TestMoreLikeThis extends LuceneTestCase {
     analyzer.close();
   }
 
+  public void testSetMaxDocFreqPct() {
+    assertEquals(Integer.MAX_VALUE, MoreLikeThis.computeMaxDocFreqPct(100, Integer.MAX_VALUE));
+    expectThrows(IllegalArgumentException.class, () -> MoreLikeThis.computeMaxDocFreqPct(101, 0));
+    expectThrows(IllegalArgumentException.class, () -> MoreLikeThis.computeMaxDocFreqPct(-1, 0));
+  }
+
   public void testTopN() throws Exception {
     int numDocs = 100;
     int topN = 25;
