diff --git a/lucene/core/src/java/org/apache/lucene/document/RangeFieldQuery.java b/lucene/core/src/java/org/apache/lucene/document/RangeFieldQuery.java
index ab83969de6f..20ac14e4092 100644
--- a/lucene/core/src/java/org/apache/lucene/document/RangeFieldQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/document/RangeFieldQuery.java
@@ -534,6 +534,11 @@ public abstract class RangeFieldQuery extends Query {
             public long cost() {
               return reader.maxDoc();
             }
+
+            @Override
+            public long preciseCost() {
+              return reader.maxDoc();
+            }
           };
         } else {
           return new ScorerSupplier() {
diff --git a/lucene/core/src/java/org/apache/lucene/document/SpatialQuery.java b/lucene/core/src/java/org/apache/lucene/document/SpatialQuery.java
index c6170ecad62..4dec1fec3be 100644
--- a/lucene/core/src/java/org/apache/lucene/document/SpatialQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/document/SpatialQuery.java
@@ -176,6 +176,11 @@ abstract class SpatialQuery extends Query {
             public long cost() {
               return reader.maxDoc();
             }
+
+            @Override
+            public long preciseCost() {
+              return reader.maxDoc();
+            }
           };
         } else {
           if (queryRelation != QueryRelation.INTERSECTS
diff --git a/lucene/core/src/java/org/apache/lucene/search/IndexOrDocValuesQuery.java b/lucene/core/src/java/org/apache/lucene/search/IndexOrDocValuesQuery.java
index 9ba52eb674f..5583b1353c4 100644
--- a/lucene/core/src/java/org/apache/lucene/search/IndexOrDocValuesQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/IndexOrDocValuesQuery.java
@@ -20,6 +20,7 @@ import java.io.IOException;
 import org.apache.lucene.document.LongPoint;
 import org.apache.lucene.document.SortedNumericDocValuesField;
 import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.LeafReader;
 import org.apache.lucene.index.LeafReaderContext;
 
 /**
@@ -162,6 +163,28 @@ public final class IndexOrDocValuesQuery extends Query {
         if (indexScorerSupplier == null || dvScorerSupplier == null) {
           return null;
         }
+        LeafReader reader = context.reader();
+        if (indexScorerSupplier.preciseCost() == reader.maxDoc()
+            || dvScorerSupplier.preciseCost() == reader.maxDoc()) {
+          final Weight weight = this;
+          return new ScorerSupplier() {
+            @Override
+            public Scorer get(long leadCost) {
+              return new ConstantScoreScorer(
+                  weight, boost, scoreMode, DocIdSetIterator.all(reader.maxDoc()));
+            }
+
+            @Override
+            public long cost() {
+              return reader.maxDoc();
+            }
+
+            @Override
+            public long preciseCost() {
+              return reader.maxDoc();
+            }
+          };
+        }
         return new ScorerSupplier() {
           @Override
           public Scorer get(long leadCost) throws IOException {
diff --git a/lucene/core/src/java/org/apache/lucene/search/PointRangeQuery.java b/lucene/core/src/java/org/apache/lucene/search/PointRangeQuery.java
index aeb474422a9..1171b700089 100644
--- a/lucene/core/src/java/org/apache/lucene/search/PointRangeQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/PointRangeQuery.java
@@ -327,6 +327,11 @@ public abstract class PointRangeQuery extends Query {
             public long cost() {
               return reader.maxDoc();
             }
+
+            @Override
+            public long preciseCost() {
+              return reader.maxDoc();
+            }
           };
         } else {
           return new ScorerSupplier() {
diff --git a/lucene/core/src/java/org/apache/lucene/search/ScorerSupplier.java b/lucene/core/src/java/org/apache/lucene/search/ScorerSupplier.java
index e6af2d6b13c..4b6e8047ff6 100644
--- a/lucene/core/src/java/org/apache/lucene/search/ScorerSupplier.java
+++ b/lucene/core/src/java/org/apache/lucene/search/ScorerSupplier.java
@@ -17,10 +17,11 @@
 package org.apache.lucene.search;
 
 import java.io.IOException;
+import org.apache.lucene.index.LeafReader;
 
 /**
- * A supplier of {@link Scorer}. This allows to get an estimate of the cost before building the
- * {@link Scorer}.
+ * A supplier of {@link Scorer}. This allows to get an estimate or precise of the cost before
+ * building the {@link Scorer}.
  */
 public abstract class ScorerSupplier {
 
@@ -42,4 +43,12 @@ public abstract class ScorerSupplier {
    * @see DocIdSetIterator#cost
    */
   public abstract long cost();
+
+  /**
+   * Get a precise cost of the {@link Scorer} , this should not be a costly operation such as {@link
+   * LeafReader#maxDoc()}
+   */
+  public long preciseCost() {
+    return -1;
+  }
 }
diff --git a/lucene/sandbox/src/java/org/apache/lucene/sandbox/search/MultiRangeQuery.java b/lucene/sandbox/src/java/org/apache/lucene/sandbox/search/MultiRangeQuery.java
index ae07d34d706..e02cd2d07be 100644
--- a/lucene/sandbox/src/java/org/apache/lucene/sandbox/search/MultiRangeQuery.java
+++ b/lucene/sandbox/src/java/org/apache/lucene/sandbox/search/MultiRangeQuery.java
@@ -273,6 +273,11 @@ public abstract class MultiRangeQuery extends Query {
             public long cost() {
               return reader.maxDoc();
             }
+
+            @Override
+            public long preciseCost() {
+              return reader.maxDoc();
+            }
           };
         } else {
           return new ScorerSupplier() {
