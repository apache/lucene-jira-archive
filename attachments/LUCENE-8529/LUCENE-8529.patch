diff --git a/lucene/suggest/src/java/org/apache/lucene/search/suggest/document/SuggestScoreDocPriorityQueue.java b/lucene/suggest/src/java/org/apache/lucene/search/suggest/document/SuggestScoreDocPriorityQueue.java
index b395a3f784..9927cdd306 100644
--- a/lucene/suggest/src/java/org/apache/lucene/search/suggest/document/SuggestScoreDocPriorityQueue.java
+++ b/lucene/suggest/src/java/org/apache/lucene/search/suggest/document/SuggestScoreDocPriorityQueue.java
@@ -16,6 +16,7 @@
  */
 package org.apache.lucene.search.suggest.document;
 
+import org.apache.lucene.search.suggest.Lookup;
 import org.apache.lucene.search.suggest.document.TopSuggestDocs.SuggestScoreDoc;
 import org.apache.lucene.util.PriorityQueue;
 
@@ -35,8 +36,10 @@ final class SuggestScoreDocPriorityQueue extends PriorityQueue<SuggestScoreDoc>
   @Override
   protected boolean lessThan(SuggestScoreDoc a, SuggestScoreDoc b) {
     if (a.score == b.score) {
+      // tie break by completion key
+      int cmp = Lookup.CHARSEQUENCE_COMPARATOR.compare(a.key, b.key);
       // prefer smaller doc id, in case of a tie
-      return a.doc > b.doc;
+      return cmp != 0 ? cmp > 0 : a.doc > b.doc;
     }
     return a.score < b.score;
   }
diff --git a/lucene/suggest/src/java/org/apache/lucene/search/suggest/document/TopSuggestDocsCollector.java b/lucene/suggest/src/java/org/apache/lucene/search/suggest/document/TopSuggestDocsCollector.java
index 6a7f1eaef4..d25dbd4ba9 100644
--- a/lucene/suggest/src/java/org/apache/lucene/search/suggest/document/TopSuggestDocsCollector.java
+++ b/lucene/suggest/src/java/org/apache/lucene/search/suggest/document/TopSuggestDocsCollector.java
@@ -28,6 +28,7 @@ import org.apache.lucene.search.CollectionTerminatedException;
 import org.apache.lucene.search.ScoreMode;
 import org.apache.lucene.search.SimpleCollector;
 import org.apache.lucene.search.TotalHits;
+import org.apache.lucene.search.suggest.Lookup;
 
 import static org.apache.lucene.search.suggest.document.TopSuggestDocs.SuggestScoreDoc;
 
@@ -148,18 +149,19 @@ public class TopSuggestDocsCollector extends SimpleCollector {
       // numSegments), but typically numSegments is smallish and num is smallish so this won't matter much in practice:
 
       Collections.sort(pendingResults,
-                       new Comparator<SuggestScoreDoc>() {
-                         @Override
-                         public int compare(SuggestScoreDoc a, SuggestScoreDoc b) {
-                           // sort by higher score
-                           int cmp = Float.compare(b.score, a.score);
-                           if (cmp == 0) {
-                             // tie break by lower docID:
-                             cmp = Integer.compare(a.doc, b.doc);
-                           }
-                           return cmp;
-                         }
-                       });
+          (a, b) -> {
+            // sort by higher score
+            int cmp = Float.compare(b.score, a.score);
+            if (cmp == 0) {
+              // tie break by completion key
+              cmp = Lookup.CHARSEQUENCE_COMPARATOR.compare(a.key, b.key);
+              if (cmp == 0) {
+                // prefer smaller doc id, in case of a tie
+                cmp = Integer.compare(a.doc, b.doc);
+              }
+            }
+            return cmp;
+          });
 
       List<SuggestScoreDoc> hits = new ArrayList<>();
       
diff --git a/lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestFuzzyCompletionQuery.java b/lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestFuzzyCompletionQuery.java
index 40c3f88118..ae93de4462 100644
--- a/lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestFuzzyCompletionQuery.java
+++ b/lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestFuzzyCompletionQuery.java
@@ -103,8 +103,8 @@ public class TestFuzzyCompletionQuery extends LuceneTestCase {
     CompletionQuery query =  new ContextQuery(new FuzzyCompletionQuery(analyzer, new Term("suggest_field", "sugge")));
     TopSuggestDocs suggest = suggestIndexSearcher.suggest(query, 5, false);
     assertSuggestions(suggest,
-        new Entry("suggestion", "type4", 4),
         new Entry("suggdestion", "type4", 4),
+        new Entry("suggestion", "type4", 4),
         new Entry("sugdgestion", "type3", 3),
         new Entry("sudggestion", "type2", 2),
         new Entry("sduggestion", "type1", 1)
diff --git a/lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestSuggestField.java b/lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestSuggestField.java
index 4b8cab36a0..9e40df7db2 100644
--- a/lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestSuggestField.java
+++ b/lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestSuggestField.java
@@ -53,6 +53,7 @@ import org.apache.lucene.index.Term;
 import org.apache.lucene.search.ScoreDoc;
 import org.apache.lucene.search.TopDocs;
 import org.apache.lucene.search.suggest.BitsProducer;
+import org.apache.lucene.search.suggest.Lookup;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.OutputStreamDataOutput;
 import org.apache.lucene.util.Bits;
@@ -342,18 +343,19 @@ public class TestSuggestField extends LuceneTestCase {
         }
       }
       Collections.sort(expected,
-                       new Comparator<Entry>() {
-                         @Override
-                         public int compare(Entry a, Entry b) {
-                           // sort by higher score:
-                           int cmp = Float.compare(b.value, a.value);
-                           if (cmp == 0) {
-                             // tie break by smaller docID:
-                             cmp = Integer.compare(a.id, b.id);
-                           }
-                           return cmp;
-                         }
-                       });
+          (a, b) -> {
+            // sort by higher score:
+            int cmp = Float.compare(b.value, a.value);
+            if (cmp == 0) {
+              // tie break by completion key
+              cmp = Lookup.CHARSEQUENCE_COMPARATOR.compare(a.output, b.output);
+              if (cmp == 0) {
+                // prefer smaller doc id, in case of a tie
+                cmp = Integer.compare(a.id, b.id);
+              }
+            }
+            return cmp;
+          });
 
       boolean dedup = random().nextBoolean();
       if (dedup) {
