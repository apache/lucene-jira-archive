Index: contrib/queryparser/src/java/org/apache/lucene/messages/NLSException.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/messages/NLSException.java	(revision 813177)
+++ contrib/queryparser/src/java/org/apache/lucene/messages/NLSException.java	(working copy)
@@ -1,34 +0,0 @@
-package org.apache.lucene.messages;
-
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * Interface that exceptions should implement to support lazy loading of messages.
- * 
- * For Native Language Support (NLS), system of software internationalization.
- * 
- * This Interface should be implemented by all exceptions that require
- * translation
- * 
- */
-public interface NLSException {
-  /**
-   * @return a instance of a class that implements the Message interface
-   */
-  public Message getMessageObject();
-}
Index: contrib/queryparser/src/java/org/apache/lucene/messages/Message.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/messages/Message.java	(revision 813177)
+++ contrib/queryparser/src/java/org/apache/lucene/messages/Message.java	(working copy)
@@ -1,37 +0,0 @@
-package org.apache.lucene.messages;
-
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import java.io.Serializable;
-import java.util.Locale;
-
-/**
- * Message Interface for a lazy loading.
- * For Native Language Support (NLS), system of software internationalization.
- */
-public interface Message extends Serializable {
-
-  public String getKey();
-
-  public Object[] getArguments();
-
-  public String getLocalizedMessage();
-
-  public String getLocalizedMessage(Locale locale);
-
-}
Index: contrib/queryparser/src/java/org/apache/lucene/messages/MessageImpl.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/messages/MessageImpl.java	(revision 813177)
+++ contrib/queryparser/src/java/org/apache/lucene/messages/MessageImpl.java	(working copy)
@@ -1,71 +0,0 @@
-package org.apache.lucene.messages;
-
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import java.util.Locale;
-
-/**
- * Default implementation of Message interface.
- * For Native Language Support (NLS), system of software internationalization.
- */
-public class MessageImpl implements Message {
-
-  private static final long serialVersionUID = -3077643314630884523L;
-
-  private String key;
-
-  private Object[] arguments = new Object[0];
-
-  public MessageImpl(String key) {
-    this.key = key;
-
-  }
-
-  public MessageImpl(String key, Object... args) {
-    this(key);
-    this.arguments = args;
-  }
-
-  public Object[] getArguments() {
-    return this.arguments;
-  }
-
-  public String getKey() {
-    return this.key;
-  }
-
-  public String getLocalizedMessage() {
-    return getLocalizedMessage(Locale.getDefault());
-  }
-
-  public String getLocalizedMessage(Locale locale) {
-    return NLS.getLocalizedMessage(getKey(), locale, getArguments());
-  }
-
-  public String toString() {
-    Object[] args = getArguments();
-    String argsString = "";
-    if (args != null) {
-      for (int i = 0; i < args.length; i++) {
-        argsString += args[i] + (i < args.length ? "" : ", ");
-      }
-    }
-    return getKey() + " " + argsString;
-  }
-
-}
Index: contrib/queryparser/src/java/org/apache/lucene/messages/NLS.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/messages/NLS.java	(revision 813177)
+++ contrib/queryparser/src/java/org/apache/lucene/messages/NLS.java	(working copy)
@@ -1,208 +0,0 @@
-package org.apache.lucene.messages;
-
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import java.lang.reflect.Field;
-import java.lang.reflect.Modifier;
-import java.security.AccessController;
-import java.security.PrivilegedAction;
-import java.text.MessageFormat;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.Locale;
-import java.util.Map;
-import java.util.MissingResourceException;
-import java.util.ResourceBundle;
-
-/**
- * MessageBundles classes extend this class, to implement a bundle.
- * 
- * For Native Language Support (NLS), system of software internationalization.
- * 
- * This interface is similar to the NLS class in eclipse.osgi.util.NLS class -
- * initializeMessages() method resets the values of all static strings, should
- * only be called by classes that extend from NLS (see TestMessages.java for
- * reference) - performs validation of all message in a bundle, at class load
- * time - performs per message validation at runtime - see NLSTest.java for
- * usage reference
- * 
- * MessageBundle classes may subclass this type.
- */
-public class NLS {
-
-  private static Map<String, Class<Object>> bundles = new HashMap<String, Class<Object>>(
-      0);
-
-  protected NLS() {
-    // Do not instantiate
-  }
-
-  public static String getLocalizedMessage(String key) {
-    return getLocalizedMessage(key, Locale.getDefault());
-  }
-
-  public static String getLocalizedMessage(String key, Locale locale) {
-    Object message = getResourceBundleObject(key, locale);
-    if (message == null) {
-      return "Message with key:" + key + " and locale: " + locale
-          + " not found.";
-    }
-    return message.toString();
-  }
-
-  public static String getLocalizedMessage(String key, Locale locale,
-      Object... args) {
-    String str = getLocalizedMessage(key, locale);
-
-    if (args.length > 0) {
-      str = MessageFormat.format(str, args);
-    }
-
-    return str;
-  }
-
-  public static String getLocalizedMessage(String key, Object... args) {
-    return getLocalizedMessage(key, Locale.getDefault(), args);
-  }
-
-  /**
-   * Initialize a given class with the message bundle Keys Should be called from
-   * a class that extends NLS in a static block at class load time.
-   * 
-   * @param bundleName
-   *          Property file with that contains the message bundle
-   * @param clazz
-   *          where constants will reside
-   */
-  @SuppressWarnings("unchecked")
-  protected static void initializeMessages(String bundleName, Class clazz) {
-    try {
-      load(clazz);
-      if (!bundles.containsKey(bundleName))
-        bundles.put(bundleName, clazz);
-    } catch (Throwable e) {
-      // ignore all errors and exceptions
-      // because this function is supposed to be called at class load time.
-    }
-  }
-
-  private static Object getResourceBundleObject(String messageKey, Locale locale) {
-
-    // slow resource checking
-    // need to loop thru all registered resource bundles
-    for (Iterator<String> it = bundles.keySet().iterator(); it.hasNext();) {
-      Class<Object> clazz = bundles.get(it.next());
-      ResourceBundle resourceBundle = ResourceBundle.getBundle(clazz.getName(),
-          locale);
-      if (resourceBundle != null) {
-        try {
-          Object obj = resourceBundle.getObject(messageKey);
-          if (obj != null)
-            return obj;
-        } catch (MissingResourceException e) {
-          // just continue it might be on the next resource bundle
-        }
-      }
-    }
-    // if resource is not found
-    return null;
-  }
-
-  /**
-   * @param clazz
-   */
-  private static void load(Class<Object> clazz) {
-    final Field[] fieldArray = clazz.getDeclaredFields();
-
-    boolean isFieldAccessible = (clazz.getModifiers() & Modifier.PUBLIC) != 0;
-
-    // build a map of field names to Field objects
-    final int len = fieldArray.length;
-    Map<String, Field> fields = new HashMap<String, Field>(len * 2);
-    for (int i = 0; i < len; i++) {
-      fields.put(fieldArray[i].getName(), fieldArray[i]);
-      loadfieldValue(fieldArray[i], isFieldAccessible, clazz);
-    }
-  }
-
-  /**
-   * @param field
-   * @param isFieldAccessible
-   */
-  private static void loadfieldValue(Field field, boolean isFieldAccessible,
-      Class<Object> clazz) {
-    int MOD_EXPECTED = Modifier.PUBLIC | Modifier.STATIC;
-    int MOD_MASK = MOD_EXPECTED | Modifier.FINAL;
-    if ((field.getModifiers() & MOD_MASK) != MOD_EXPECTED)
-      return;
-
-    // Set a value for this empty field.
-    if (!isFieldAccessible)
-      makeAccessible(field);
-    try {
-      field.set(null, field.getName());
-      validateMessage(field.getName(), clazz);
-    } catch (IllegalArgumentException e) {
-      // should not happen
-    } catch (IllegalAccessException e) {
-      // should not happen
-    }
-  }
-
-  /**
-   * @param key
-   *          - Message Key
-   */
-  private static void validateMessage(String key, Class<Object> clazz) {
-    // Test if the message is present in the resource bundle
-    try {
-      ResourceBundle resourceBundle = ResourceBundle.getBundle(clazz.getName(),
-          Locale.getDefault());
-      if (resourceBundle != null) {
-        Object obj = resourceBundle.getObject(key);
-        if (obj == null)
-          System.err.println("WARN: Message with key:" + key + " and locale: "
-              + Locale.getDefault() + " not found.");
-      }
-    } catch (MissingResourceException e) {
-      System.err.println("WARN: Message with key:" + key + " and locale: "
-          + Locale.getDefault() + " not found.");
-    } catch (Throwable e) {
-      // ignore all other errors and exceptions
-      // since this code is just a test to see if the message is present on the
-      // system
-    }
-  }
-
-  /*
-   * Make a class field accessible
-   */
-  @SuppressWarnings("unchecked")
-  private static void makeAccessible(final Field field) {
-    if (System.getSecurityManager() == null) {
-      field.setAccessible(true);
-    } else {
-      AccessController.doPrivileged(new PrivilegedAction() {
-        public Object run() {
-          field.setAccessible(true);
-          return null;
-        }
-      });
-    }
-  }
-}
Index: contrib/queryparser/src/java/org/apache/lucene/messages/package.html
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/messages/package.html	(revision 813177)
+++ contrib/queryparser/src/java/org/apache/lucene/messages/package.html	(working copy)
@@ -1,99 +0,0 @@
-<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
-<!--
- Licensed to the Apache Software Foundation (ASF) under one or more
- contributor license agreements.  See the NOTICE file distributed with
- this work for additional information regarding copyright ownership.
- The ASF licenses this file to You under the Apache License, Version 2.0
- (the "License"); you may not use this file except in compliance with
- the License.  You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing, software
- distributed under the License is distributed on an "AS IS" BASIS,
- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- See the License for the specific language governing permissions and
- limitations under the License.
--->
-<html>
-<head>
-   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
-</head>
-<body>
-
-For Native Language Support (NLS), system of software internationalization.
-
-<h2>NLS message API</h2>
-<p>
-This utility API, adds support for NLS messages in the apache code.
-It is currently used by the lucene "New Flexible Query PArser".
-</p>
-<p>
-Features:
-    <ol>
-        <li>Message reference in the code, using static Strings</li>
-        <li>Message resource validation at class load time, for easier debugging</li>
-        <li>Allows for message IDs to be re-factored using eclipse or other code re-factor tools</li>
-        <li>Allows for reference count on messages, just like code</li>
-		<li>Lazy loading of Message Strings</li>        
-        <li>Normal loading Message Strings</li>                  
-    </ol>
-</p>
-
-<br/>
-<br/>
-<p>
-Lazy loading of Message Strings
-
-<pre>
-	public class MessagesTestBundle extends NLS {
-	
-	  private static final String BUNDLE_NAME = MessagesTestBundle.class.getName();
-	
-	  private MessagesTestBundle() {
-	    // should never be instantiated
-	  }
-	
-	  static {
-	    // register all string ids with NLS class and initialize static string
-	    // values
-	    NLS.initializeMessages(BUNDLE_NAME, MessagesTestBundle.class);
-	  }
-	
-	  // static string must match the strings in the property files.
-	  public static String Q0001E_INVALID_SYNTAX;
-	  public static String Q0004E_INVALID_SYNTAX_ESCAPE_UNICODE_TRUNCATION;
-	
-	  // this message is missing from the properties file
-	  public static String Q0005E_MESSAGE_NOT_IN_BUNDLE;
-	}
-
-    // Create a message reference
-    Message invalidSyntax = new MessageImpl(MessagesTestBundle.Q0001E_INVALID_SYNTAX, "XXX");
-    
-    // Do other stuff in the code...
-    // when is time to display the message to the user or log the message on a file
-    // the message is loaded from the correct bundle
-    
-    String message1 = invalidSyntax.getLocalizedMessage();
-    String message2 = invalidSyntax.getLocalizedMessage(Locale.JAPANESE);
-</pre>
-</p>
-
-<br/>
-<br/>
-<p>
-Normal loading of Message Strings
-
-<pre>
-	String message1 = NLS.getLocalizedMessage(MessagesTestBundle.Q0004E_INVALID_SYNTAX_ESCAPE_UNICODE_TRUNCATION);
-	String message2 = NLS.getLocalizedMessage(MessagesTestBundle.Q0004E_INVALID_SYNTAX_ESCAPE_UNICODE_TRUNCATION, Locale.JAPANESE);
-</pre>
-</p>
-
-<p>
-The org.apache.lucene.messages.TestNLS junit contains several other examples.
-The TestNLS java code is available from the Apache Lucene code repository.
-</p>
-</body>
-</html>
Index: contrib/queryparser/src/test/org/apache/lucene/messages/MessagesTestBundle.java
===================================================================
--- contrib/queryparser/src/test/org/apache/lucene/messages/MessagesTestBundle.java	(revision 813177)
+++ contrib/queryparser/src/test/org/apache/lucene/messages/MessagesTestBundle.java	(working copy)
@@ -1,40 +0,0 @@
-package org.apache.lucene.messages;
-
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements. See the NOTICE file distributed with this
- * work for additional information regarding copyright ownership. The ASF
- * licenses this file to You under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- * http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-
-public class MessagesTestBundle extends NLS {
-
-  private static final String BUNDLE_NAME = MessagesTestBundle.class.getName();
-
-  private MessagesTestBundle() {
-    // should never be instantiated
-  }
-
-  static {
-    // register all string ids with NLS class and initialize static string
-    // values
-    NLS.initializeMessages(BUNDLE_NAME, MessagesTestBundle.class);
-  }
-
-  // static string must match the strings in the property files.
-  public static String Q0001E_INVALID_SYNTAX;
-  public static String Q0004E_INVALID_SYNTAX_ESCAPE_UNICODE_TRUNCATION;
-
-  // this message is missing from the properties file
-  public static String Q0005E_MESSAGE_NOT_IN_BUNDLE;
-}
Index: contrib/queryparser/src/test/org/apache/lucene/messages/MessagesTestBundle.properties
===================================================================
--- contrib/queryparser/src/test/org/apache/lucene/messages/MessagesTestBundle.properties	(revision 813177)
+++ contrib/queryparser/src/test/org/apache/lucene/messages/MessagesTestBundle.properties	(working copy)
@@ -1,3 +0,0 @@
-Q0001E_INVALID_SYNTAX = Syntax Error: {0}
-
-Q0004E_INVALID_SYNTAX_ESCAPE_UNICODE_TRUNCATION = Truncated unicode escape sequence.
Index: contrib/queryparser/src/test/org/apache/lucene/messages/MessagesTestBundle_ja.properties
===================================================================
--- contrib/queryparser/src/test/org/apache/lucene/messages/MessagesTestBundle_ja.properties	(revision 813177)
+++ contrib/queryparser/src/test/org/apache/lucene/messages/MessagesTestBundle_ja.properties	(working copy)
@@ -1,3 +0,0 @@
-Q0001E_INVALID_SYNTAX = \u69cb\u6587\u30a8\u30e9\u30fc: {0}
-
-Q0004E_INVALID_SYNTAX_ESCAPE_UNICODE_TRUNCATION = \u5207\u308a\u6368\u3066\u3089\u308c\u305f\u30e6\u30cb\u30b3\u30fc\u30c9\u30fb\u30a8\u30b9\u30b1\u30fc\u30d7\u30fb\u30b7\u30fc\u30b1\u30f3\u30b9\u3002
Index: contrib/queryparser/src/test/org/apache/lucene/messages/TestNLS.java
===================================================================
--- contrib/queryparser/src/test/org/apache/lucene/messages/TestNLS.java	(revision 813177)
+++ contrib/queryparser/src/test/org/apache/lucene/messages/TestNLS.java	(working copy)
@@ -1,81 +0,0 @@
-package org.apache.lucene.messages;
-
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import java.util.Locale;
-
-import junit.framework.TestCase;
-
-/**
- */
-public class TestNLS extends TestCase {
-  public void testMessageLoading() {
-    Message invalidSyntax = new MessageImpl(
-        MessagesTestBundle.Q0001E_INVALID_SYNTAX, "XXX");
-    assertEquals("Syntax Error: XXX", invalidSyntax.getLocalizedMessage());
-  }
-
-  public void testMessageLoading_ja() {
-    Message invalidSyntax = new MessageImpl(
-        MessagesTestBundle.Q0001E_INVALID_SYNTAX, "XXX");
-    assertEquals("構文エラー: XXX", invalidSyntax
-        .getLocalizedMessage(Locale.JAPANESE));
-  }
-
-  public void testNLSLoading() {
-    String message = NLS
-        .getLocalizedMessage(MessagesTestBundle.Q0004E_INVALID_SYNTAX_ESCAPE_UNICODE_TRUNCATION);
-    assertEquals("Truncated unicode escape sequence.", message);
-
-    message = NLS.getLocalizedMessage(MessagesTestBundle.Q0001E_INVALID_SYNTAX,
-        "XXX");
-    assertEquals("Syntax Error: XXX", message);
-  }
-
-  public void testNLSLoading_ja() {
-    String message = NLS.getLocalizedMessage(
-        MessagesTestBundle.Q0004E_INVALID_SYNTAX_ESCAPE_UNICODE_TRUNCATION,
-        Locale.JAPANESE);
-    assertEquals("切り捨てられたユニコード・エスケープ・シーケンス。", message);
-
-    message = NLS.getLocalizedMessage(MessagesTestBundle.Q0001E_INVALID_SYNTAX,
-        Locale.JAPANESE, "XXX");
-    assertEquals("構文エラー: XXX", message);
-  }
-
-  public void testNLSLoading_xx_XX() {
-    Locale locale = new Locale("xx", "XX", "");
-    String message = NLS.getLocalizedMessage(
-        MessagesTestBundle.Q0004E_INVALID_SYNTAX_ESCAPE_UNICODE_TRUNCATION,
-        locale);
-    assertEquals("Truncated unicode escape sequence.", message);
-
-    message = NLS.getLocalizedMessage(MessagesTestBundle.Q0001E_INVALID_SYNTAX,
-        locale, "XXX");
-    assertEquals("Syntax Error: XXX", message);
-  }
-
-  public void testMissingMessage() {
-    Locale locale = Locale.ENGLISH;
-    String message = NLS.getLocalizedMessage(
-        MessagesTestBundle.Q0005E_MESSAGE_NOT_IN_BUNDLE, locale);
-
-    assertEquals("Message with key:Q0005E_MESSAGE_NOT_IN_BUNDLE and locale: "
-        + locale.toString() + " not found.", message);
-  }
-}
Index: src/java/org/apache/lucene/messages/Message.java
===================================================================
--- src/java/org/apache/lucene/messages/Message.java	(revision 0)
+++ src/java/org/apache/lucene/messages/Message.java	(revision 0)
@@ -0,0 +1,37 @@
+package org.apache.lucene.messages;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.Serializable;
+import java.util.Locale;
+
+/**
+ * Message Interface for a lazy loading.
+ * For Native Language Support (NLS), system of software internationalization.
+ */
+public interface Message extends Serializable {
+
+  public String getKey();
+
+  public Object[] getArguments();
+
+  public String getLocalizedMessage();
+
+  public String getLocalizedMessage(Locale locale);
+
+}
Index: src/java/org/apache/lucene/messages/MessageImpl.java
===================================================================
--- src/java/org/apache/lucene/messages/MessageImpl.java	(revision 0)
+++ src/java/org/apache/lucene/messages/MessageImpl.java	(revision 0)
@@ -0,0 +1,99 @@
+package org.apache.lucene.messages;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.util.Locale;
+
+/**
+ * Default implementation of Message interface.
+ * For Native Language Support (NLS), system of software internationalization.
+ */
+public class MessageImpl implements Message {
+
+  private static final long serialVersionUID = -3077643314630884523L;
+
+  private String key;
+
+  private Object[] arguments = new Object[0];
+
+  public MessageImpl(String key) {
+    this.key = key;
+
+  }
+
+  // jdk 1.4 compatible methods
+  // @Deprecated
+  public MessageImpl(String key, Object arg) {
+    this(key);
+    this.arguments = new Object[1];
+    this.arguments[0] = arg;
+  }
+
+  // jdk 1.4 compatible methods
+  // @Deprecated
+  public MessageImpl(String key, Object arg0, Object arg1) {
+    this(key);
+    this.arguments = new Object[2];
+    this.arguments[0] = arg0;
+    this.arguments[1] = arg1;
+  }
+
+  // jdk 1.4 compatible methods
+  // @Deprecated
+  public MessageImpl(String key, Object arg0, Object arg1, Object arg2) {
+    this(key);
+    this.arguments = new Object[3];
+    this.arguments[0] = arg0;
+    this.arguments[1] = arg1;
+    this.arguments[2] = arg2;
+  }
+
+//  uncomment this method in lucene 3.0
+//  public MessageImpl(String key, Object... args) {
+//    this(key);
+//    this.arguments = args;
+//  }
+
+  public Object[] getArguments() {
+    return this.arguments;
+  }
+
+  public String getKey() {
+    return this.key;
+  }
+
+  public String getLocalizedMessage() {
+    return getLocalizedMessage(Locale.getDefault());
+  }
+
+  public String getLocalizedMessage(Locale locale) {
+    return NLS.getLocalizedMessage(getKey(), locale, getArguments());
+  }
+
+  public String toString() {
+    Object[] args = getArguments();
+    String argsString = "";
+    if (args != null) {
+      for (int i = 0; i < args.length; i++) {
+        argsString += args[i] + (i < args.length ? "" : ", ");
+      }
+    }
+    return getKey() + " " + argsString;
+  }
+
+}
Index: src/java/org/apache/lucene/messages/NLS.java
===================================================================
--- src/java/org/apache/lucene/messages/NLS.java	(revision 0)
+++ src/java/org/apache/lucene/messages/NLS.java	(revision 0)
@@ -0,0 +1,275 @@
+package org.apache.lucene.messages;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.lang.reflect.Field;
+import java.lang.reflect.Modifier;
+import java.security.AccessController;
+import java.security.PrivilegedAction;
+import java.text.MessageFormat;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Locale;
+import java.util.Map;
+import java.util.MissingResourceException;
+import java.util.ResourceBundle;
+
+/**
+ * MessageBundles classes extend this class, to implement a bundle.
+ * 
+ * For Native Language Support (NLS), system of software internationalization.
+ * 
+ * This interface is similar to the NLS class in eclipse.osgi.util.NLS class -
+ * initializeMessages() method resets the values of all static strings, should
+ * only be called by classes that extend from NLS (see TestMessages.java for
+ * reference) - performs validation of all message in a bundle, at class load
+ * time - performs per message validation at runtime - see NLSTest.java for
+ * usage reference
+ * 
+ * MessageBundle classes may subclass this type.
+ */
+public class NLS {
+
+  private static Map bundles = new HashMap();
+
+  protected NLS() {
+    // Do not instantiate
+  }
+
+  public static String getLocalizedMessage(String key) {
+    return getLocalizedMessage(key, Locale.getDefault());
+  }
+
+  public static String getLocalizedMessage(String key, Locale locale) {
+    Object message = getResourceBundleObject(key, locale);
+    if (message == null) {
+      return "Message with key:" + key + " and locale: " + locale
+          + " not found.";
+    }
+    return message.toString();
+  }
+
+// uncomment this method in lucene 3.0
+//  public static String getLocalizedMessage(String key, Locale locale,
+//      Object... args) {
+//    String str = getLocalizedMessage(key, locale);
+//
+//    if (args.length > 0) {
+//      str = MessageFormat.format(str, args);
+//    }
+//
+//    return str;
+//  }
+
+// uncomment this method in lucene 3.0
+//  public static String getLocalizedMessage(String key, Object... args) {
+//    return getLocalizedMessage(key, Locale.getDefault(), args);
+//  }
+
+  // jdk 1.4 compatible methods
+  // @Deprecated
+  public static String getLocalizedMessage(String key, Locale locale,
+      Object[] args) {
+    String str = getLocalizedMessage(key, locale);
+
+    if (args.length > 0) {
+      str = MessageFormat.format(str, args);
+    }
+
+    return str;
+  }
+
+  // jdk 1.4 compatible methods
+  // @Deprecated
+  public static String getLocalizedMessage(String key, Locale locale,
+      Object arg0, Object arg1, Object arg2) {
+    Object[] args = new Object[3];
+    args[0] = arg0;
+    args[1] = arg1;
+    args[2] = arg2;
+    return getLocalizedMessage(key, locale, args);
+  }
+
+  // jdk 1.4 compatible methods
+  // @Deprecated
+  public static String getLocalizedMessage(String key, Locale locale,
+      Object arg0, Object arg1) {
+    Object[] args = new Object[2];
+    args[0] = arg0;
+    args[1] = arg1;
+    return getLocalizedMessage(key, locale, args);
+  }
+
+  // jdk 1.4 compatible methods
+  // @Deprecated
+  public static String getLocalizedMessage(String key, Locale locale, Object arg0) {
+    Object[] args = new Object[1];
+    args[0] = arg0;
+    return getLocalizedMessage(key, locale, args);
+  }
+
+  // jdk 1.4 compatible methods
+  // @Deprecated
+  public static String getLocalizedMessage(String key, Object arg0, Object arg1, Object arg2) {
+    Object[] args = new Object[3];
+    args[0] = arg0;
+    args[1] = arg1;
+    args[2] = arg2;
+    return getLocalizedMessage(key, Locale.getDefault(), args);
+  }
+
+  // jdk 1.4 compatible methods
+  // @Deprecated
+  public static String getLocalizedMessage(String key, Object arg0, Object arg1) {
+    Object[] args = new Object[2];
+    args[0] = arg0;
+    args[1] = arg1;
+    return getLocalizedMessage(key, Locale.getDefault(), args);
+  }
+
+  // jdk 1.4 compatible methods
+  // @Deprecated
+  public static String getLocalizedMessage(String key, Object arg0) {
+    Object[] args = new Object[1];
+    args[0] = arg0;
+    return getLocalizedMessage(key, Locale.getDefault(), args);
+  }
+  
+  /**
+   * Initialize a given class with the message bundle Keys Should be called from
+   * a class that extends NLS in a static block at class load time.
+   * 
+   * @param bundleName
+   *          Property file with that contains the message bundle
+   * @param clazz
+   *          where constants will reside
+   */
+  protected static void initializeMessages(String bundleName, Class clazz) {
+    try {
+      load(clazz);
+      if (!bundles.containsKey(bundleName))
+        bundles.put(bundleName, clazz);
+    } catch (Throwable e) {
+      // ignore all errors and exceptions
+      // because this function is supposed to be called at class load time.
+    }
+  }
+
+  private static Object getResourceBundleObject(String messageKey, Locale locale) {
+
+    // slow resource checking
+    // need to loop thru all registered resource bundles
+    for (Iterator it = bundles.keySet().iterator(); it.hasNext();) {
+      Class clazz = (Class)bundles.get(it.next());
+      ResourceBundle resourceBundle = ResourceBundle.getBundle(clazz.getName(), locale);
+      if (resourceBundle != null) {
+        try {
+          Object obj = resourceBundle.getObject(messageKey);
+          if (obj != null)
+            return obj;
+        } catch (MissingResourceException e) {
+          // just continue it might be on the next resource bundle
+        }
+      }
+    }
+    // if resource is not found
+    return null;
+  }
+
+  /**
+   * @param clazz
+   */
+  private static void load(Class clazz) {
+    final Field[] fieldArray = clazz.getDeclaredFields();
+
+    boolean isFieldAccessible = (clazz.getModifiers() & Modifier.PUBLIC) != 0;
+
+    // build a map of field names to Field objects
+    final int len = fieldArray.length;
+    Map fields = new HashMap(len * 2);
+    for (int i = 0; i < len; i++) {
+      fields.put(fieldArray[i].getName(), fieldArray[i]);
+      loadfieldValue(fieldArray[i], isFieldAccessible, clazz);
+    }
+  }
+
+  /**
+   * @param field
+   * @param isFieldAccessible
+   */
+  private static void loadfieldValue(Field field, boolean isFieldAccessible,
+      Class clazz) {
+    int MOD_EXPECTED = Modifier.PUBLIC | Modifier.STATIC;
+    int MOD_MASK = MOD_EXPECTED | Modifier.FINAL;
+    if ((field.getModifiers() & MOD_MASK) != MOD_EXPECTED)
+      return;
+
+    // Set a value for this empty field.
+    if (!isFieldAccessible)
+      makeAccessible(field);
+    try {
+      field.set(null, field.getName());
+      validateMessage(field.getName(), clazz);
+    } catch (IllegalArgumentException e) {
+      // should not happen
+    } catch (IllegalAccessException e) {
+      // should not happen
+    }
+  }
+
+  /**
+   * @param key
+   *          - Message Key
+   */
+  private static void validateMessage(String key, Class clazz) {
+    // Test if the message is present in the resource bundle
+    try {
+      ResourceBundle resourceBundle = ResourceBundle.getBundle(clazz.getName(), Locale.getDefault());
+      
+      if (resourceBundle != null) {
+        Object obj = resourceBundle.getObject(key);
+        if (obj == null)
+          System.err.println("WARN: Message with key:" + key + " and locale: "
+              + Locale.getDefault() + " not found.");
+      }
+    } catch (MissingResourceException e) {
+      System.err.println("WARN: Message with key:" + key + " and locale: "
+          + Locale.getDefault());
+    } catch (Throwable e) {
+      // ignore all other errors and exceptions
+      // since this code is just a test to see if the message is present on the
+      // system
+    }
+  }
+
+  /*
+   * Make a class field accessible
+   */
+  private static void makeAccessible(final Field field) {
+    if (System.getSecurityManager() == null) {
+      field.setAccessible(true);
+    } else {
+      AccessController.doPrivileged(new PrivilegedAction() {
+        public Object run() {
+          field.setAccessible(true);
+          return null;
+        }
+      });
+    }
+  }
+}
Index: src/java/org/apache/lucene/messages/NLSException.java
===================================================================
--- src/java/org/apache/lucene/messages/NLSException.java	(revision 0)
+++ src/java/org/apache/lucene/messages/NLSException.java	(revision 0)
@@ -0,0 +1,34 @@
+package org.apache.lucene.messages;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/**
+ * Interface that exceptions should implement to support lazy loading of messages.
+ * 
+ * For Native Language Support (NLS), system of software internationalization.
+ * 
+ * This Interface should be implemented by all exceptions that require
+ * translation
+ * 
+ */
+public interface NLSException {
+  /**
+   * @return a instance of a class that implements the Message interface
+   */
+  public Message getMessageObject();
+}
Index: src/java/org/apache/lucene/messages/package.html
===================================================================
--- src/java/org/apache/lucene/messages/package.html	(revision 0)
+++ src/java/org/apache/lucene/messages/package.html	(revision 0)
@@ -0,0 +1,99 @@
+<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
+<!--
+ Licensed to the Apache Software Foundation (ASF) under one or more
+ contributor license agreements.  See the NOTICE file distributed with
+ this work for additional information regarding copyright ownership.
+ The ASF licenses this file to You under the Apache License, Version 2.0
+ (the "License"); you may not use this file except in compliance with
+ the License.  You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+ Unless required by applicable law or agreed to in writing, software
+ distributed under the License is distributed on an "AS IS" BASIS,
+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ See the License for the specific language governing permissions and
+ limitations under the License.
+-->
+<html>
+<head>
+   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
+</head>
+<body>
+
+For Native Language Support (NLS), system of software internationalization.
+
+<h2>NLS message API</h2>
+<p>
+This utility API, adds support for NLS messages in the apache code.
+It is currently used by the lucene "New Flexible Query PArser".
+</p>
+<p>
+Features:
+    <ol>
+        <li>Message reference in the code, using static Strings</li>
+        <li>Message resource validation at class load time, for easier debugging</li>
+        <li>Allows for message IDs to be re-factored using eclipse or other code re-factor tools</li>
+        <li>Allows for reference count on messages, just like code</li>
+		<li>Lazy loading of Message Strings</li>        
+        <li>Normal loading Message Strings</li>                  
+    </ol>
+</p>
+
+<br/>
+<br/>
+<p>
+Lazy loading of Message Strings
+
+<pre>
+	public class MessagesTestBundle extends NLS {
+	
+	  private static final String BUNDLE_NAME = MessagesTestBundle.class.getName();
+	
+	  private MessagesTestBundle() {
+	    // should never be instantiated
+	  }
+	
+	  static {
+	    // register all string ids with NLS class and initialize static string
+	    // values
+	    NLS.initializeMessages(BUNDLE_NAME, MessagesTestBundle.class);
+	  }
+	
+	  // static string must match the strings in the property files.
+	  public static String Q0001E_INVALID_SYNTAX;
+	  public static String Q0004E_INVALID_SYNTAX_ESCAPE_UNICODE_TRUNCATION;
+	
+	  // this message is missing from the properties file
+	  public static String Q0005E_MESSAGE_NOT_IN_BUNDLE;
+	}
+
+    // Create a message reference
+    Message invalidSyntax = new MessageImpl(MessagesTestBundle.Q0001E_INVALID_SYNTAX, "XXX");
+    
+    // Do other stuff in the code...
+    // when is time to display the message to the user or log the message on a file
+    // the message is loaded from the correct bundle
+    
+    String message1 = invalidSyntax.getLocalizedMessage();
+    String message2 = invalidSyntax.getLocalizedMessage(Locale.JAPANESE);
+</pre>
+</p>
+
+<br/>
+<br/>
+<p>
+Normal loading of Message Strings
+
+<pre>
+	String message1 = NLS.getLocalizedMessage(MessagesTestBundle.Q0004E_INVALID_SYNTAX_ESCAPE_UNICODE_TRUNCATION);
+	String message2 = NLS.getLocalizedMessage(MessagesTestBundle.Q0004E_INVALID_SYNTAX_ESCAPE_UNICODE_TRUNCATION, Locale.JAPANESE);
+</pre>
+</p>
+
+<p>
+The org.apache.lucene.messages.TestNLS junit contains several other examples.
+The TestNLS java code is available from the Apache Lucene code repository.
+</p>
+</body>
+</html>
Index: src/test/org/apache/lucene/messages/MessagesTestBundle.java
===================================================================
--- src/test/org/apache/lucene/messages/MessagesTestBundle.java	(revision 0)
+++ src/test/org/apache/lucene/messages/MessagesTestBundle.java	(revision 0)
@@ -0,0 +1,40 @@
+package org.apache.lucene.messages;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements. See the NOTICE file distributed with this
+ * work for additional information regarding copyright ownership. The ASF
+ * licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+public class MessagesTestBundle extends NLS {
+
+  private static final String BUNDLE_NAME = MessagesTestBundle.class.getName();
+
+  private MessagesTestBundle() {
+    // should never be instantiated
+  }
+
+  static {
+    // register all string ids with NLS class and initialize static string
+    // values
+    NLS.initializeMessages(BUNDLE_NAME, MessagesTestBundle.class);
+  }
+
+  // static string must match the strings in the property files.
+  public static String Q0001E_INVALID_SYNTAX;
+  public static String Q0004E_INVALID_SYNTAX_ESCAPE_UNICODE_TRUNCATION;
+
+  // this message is missing from the properties file
+  public static String Q0005E_MESSAGE_NOT_IN_BUNDLE;
+}
Index: src/test/org/apache/lucene/messages/MessagesTestBundle.properties
===================================================================
--- src/test/org/apache/lucene/messages/MessagesTestBundle.properties	(revision 0)
+++ src/test/org/apache/lucene/messages/MessagesTestBundle.properties	(revision 0)
@@ -0,0 +1,3 @@
+Q0001E_INVALID_SYNTAX = Syntax Error: {0}
+
+Q0004E_INVALID_SYNTAX_ESCAPE_UNICODE_TRUNCATION = Truncated unicode escape sequence.
Index: src/test/org/apache/lucene/messages/MessagesTestBundle_ja.properties
===================================================================
--- src/test/org/apache/lucene/messages/MessagesTestBundle_ja.properties	(revision 0)
+++ src/test/org/apache/lucene/messages/MessagesTestBundle_ja.properties	(revision 0)
@@ -0,0 +1,3 @@
+Q0001E_INVALID_SYNTAX = \u69cb\u6587\u30a8\u30e9\u30fc: {0}
+
+Q0004E_INVALID_SYNTAX_ESCAPE_UNICODE_TRUNCATION = \u5207\u308a\u6368\u3066\u3089\u308c\u305f\u30e6\u30cb\u30b3\u30fc\u30c9\u30fb\u30a8\u30b9\u30b1\u30fc\u30d7\u30fb\u30b7\u30fc\u30b1\u30f3\u30b9\u3002
Index: src/test/org/apache/lucene/messages/TestNLS.java
===================================================================
--- src/test/org/apache/lucene/messages/TestNLS.java	(revision 0)
+++ src/test/org/apache/lucene/messages/TestNLS.java	(revision 0)
@@ -0,0 +1,81 @@
+package org.apache.lucene.messages;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.util.Locale;
+
+import junit.framework.TestCase;
+
+/**
+ */
+public class TestNLS extends TestCase {
+  public void testMessageLoading() {
+    Message invalidSyntax = new MessageImpl(
+        MessagesTestBundle.Q0001E_INVALID_SYNTAX, "XXX");
+    assertEquals("Syntax Error: XXX", invalidSyntax.getLocalizedMessage());
+  }
+
+  public void testMessageLoading_ja() {
+    Message invalidSyntax = new MessageImpl(
+        MessagesTestBundle.Q0001E_INVALID_SYNTAX, "XXX");
+    assertEquals("構文エラー: XXX", invalidSyntax
+        .getLocalizedMessage(Locale.JAPANESE));
+  }
+
+  public void testNLSLoading() {
+    String message = NLS
+        .getLocalizedMessage(MessagesTestBundle.Q0004E_INVALID_SYNTAX_ESCAPE_UNICODE_TRUNCATION);
+    assertEquals("Truncated unicode escape sequence.", message);
+
+    message = NLS.getLocalizedMessage(MessagesTestBundle.Q0001E_INVALID_SYNTAX,
+        "XXX");
+    assertEquals("Syntax Error: XXX", message);
+  }
+
+  public void testNLSLoading_ja() {
+    String message = NLS.getLocalizedMessage(
+        MessagesTestBundle.Q0004E_INVALID_SYNTAX_ESCAPE_UNICODE_TRUNCATION,
+        Locale.JAPANESE);
+    assertEquals("切り捨てられたユニコード・エスケープ・シーケンス。", message);
+
+    message = NLS.getLocalizedMessage(MessagesTestBundle.Q0001E_INVALID_SYNTAX,
+        Locale.JAPANESE, "XXX");
+    assertEquals("構文エラー: XXX", message);
+  }
+
+  public void testNLSLoading_xx_XX() {
+    Locale locale = new Locale("xx", "XX", "");
+    String message = NLS.getLocalizedMessage(
+        MessagesTestBundle.Q0004E_INVALID_SYNTAX_ESCAPE_UNICODE_TRUNCATION,
+        locale);
+    assertEquals("Truncated unicode escape sequence.", message);
+
+    message = NLS.getLocalizedMessage(MessagesTestBundle.Q0001E_INVALID_SYNTAX,
+        locale, "XXX");
+    assertEquals("Syntax Error: XXX", message);
+  }
+
+  public void testMissingMessage() {
+    Locale locale = Locale.ENGLISH;
+    String message = NLS.getLocalizedMessage(
+        MessagesTestBundle.Q0005E_MESSAGE_NOT_IN_BUNDLE, locale);
+
+    assertEquals("Message with key:Q0005E_MESSAGE_NOT_IN_BUNDLE and locale: "
+        + locale.toString() + " not found.", message);
+  }
+}
