Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/core/QueryNodeParseException.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/core/QueryNodeParseException.java	(revision 813186)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/core/QueryNodeParseException.java	(working copy)
@@ -58,7 +58,7 @@
   public void setQuery(CharSequence query) {
     this.query = query;
     this.message = new MessageImpl(
-        QueryParserMessages.INVALID_SYNTAX_CANNOT_PARSE, query, "");
+        QueryParserMessages.INVALID_SYNTAX_CANNOT_PARSE, new Object[] {query, ""});
   }
 
   public CharSequence getQuery() {
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/core/builders/QueryTreeBuilder.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/core/builders/QueryTreeBuilder.java	(revision 813186)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/core/builders/QueryTreeBuilder.java	(working copy)
@@ -175,9 +175,9 @@
     if (builder == null) {
 
       throw new QueryNodeException(new MessageImpl(
-          QueryParserMessages.LUCENE_QUERY_CONVERSION_ERROR, node
+          QueryParserMessages.LUCENE_QUERY_CONVERSION_ERROR, new Object[]{node
               .toQueryString(new EscapeQuerySyntaxImpl()), node.getClass()
-              .getName()));
+              .getName()}));
 
     }
 
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/BoostQueryNode.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/BoostQueryNode.java	(revision 813186)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/BoostQueryNode.java	(working copy)
@@ -51,7 +51,7 @@
   public BoostQueryNode(QueryNode query, float value) throws QueryNodeException {
     if (query == null) {
       throw new QueryNodeError(new MessageImpl(
-          QueryParserMessages.NODE_ACTION_NOT_SUPPORTED, "query", "null"));
+          QueryParserMessages.NODE_ACTION_NOT_SUPPORTED, new Object[]{"query", "null"}));
     }
 
     this.value = value;
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/GroupQueryNode.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/GroupQueryNode.java	(revision 813186)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/GroupQueryNode.java	(working copy)
@@ -42,7 +42,7 @@
   public GroupQueryNode(QueryNode query) {
     if (query == null) {
       throw new QueryNodeError(new MessageImpl(
-          QueryParserMessages.PARAMETER_VALUE_NOT_SUPPORTED, "query", "null"));
+          QueryParserMessages.PARAMETER_VALUE_NOT_SUPPORTED, new Object[]{"query", "null"}));
     }
 
     allocate();
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/ModifierQueryNode.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/ModifierQueryNode.java	(revision 813186)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/ModifierQueryNode.java	(working copy)
@@ -94,7 +94,7 @@
   public ModifierQueryNode(QueryNode query, Modifier mod) {
     if (query == null) {
       throw new QueryNodeError(new MessageImpl(
-          QueryParserMessages.PARAMETER_VALUE_NOT_SUPPORTED, "query", "null"));
+          QueryParserMessages.PARAMETER_VALUE_NOT_SUPPORTED, new Object[]{"query", "null"}));
     }
 
     allocate();
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/PhraseSlopQueryNode.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/PhraseSlopQueryNode.java	(revision 813186)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/PhraseSlopQueryNode.java	(working copy)
@@ -40,7 +40,7 @@
       throws QueryNodeException {
     if (query == null) {
       throw new QueryNodeError(new MessageImpl(
-          QueryParserMessages.NODE_ACTION_NOT_SUPPORTED, "query", "null"));
+          QueryParserMessages.NODE_ACTION_NOT_SUPPORTED, new Object[]{"query", "null"}));
     }
 
     this.value = value;
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/ProximityQueryNode.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/ProximityQueryNode.java	(revision 813186)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/ProximityQueryNode.java	(working copy)
@@ -109,8 +109,8 @@
     if (type == Type.NUMBER) {
       if (distance <= 0) {
         throw new QueryNodeError(new MessageImpl(
-            QueryParserMessages.PARAMETER_VALUE_NOT_SUPPORTED, "distance",
-            distance));
+            QueryParserMessages.PARAMETER_VALUE_NOT_SUPPORTED, new Object[]{"distance",
+            distance}));
 
       } else {
         this.distance = distance;
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/SlopQueryNode.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/SlopQueryNode.java	(revision 813186)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/SlopQueryNode.java	(working copy)
@@ -47,7 +47,7 @@
   public SlopQueryNode(QueryNode query, int value) {
     if (query == null) {
       throw new QueryNodeError(new MessageImpl(
-          QueryParserMessages.NODE_ACTION_NOT_SUPPORTED, "query", "null"));
+          QueryParserMessages.NODE_ACTION_NOT_SUPPORTED, new Object[]{"query", "null"}));
     }
 
     this.value = value;
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/builders/BooleanQueryNodeBuilder.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/builders/BooleanQueryNodeBuilder.java	(revision 813186)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/builders/BooleanQueryNodeBuilder.java	(working copy)
@@ -67,9 +67,9 @@
           } catch (TooManyClauses ex) {
 
             throw new QueryNodeException(new MessageImpl(
-                QueryParserMessages.TOO_MANY_BOOLEAN_CLAUSES, BooleanQuery
+                QueryParserMessages.TOO_MANY_BOOLEAN_CLAUSES, new Object[]{BooleanQuery
                     .getMaxClauseCount(), queryNode
-                    .toQueryString(new EscapeQuerySyntaxImpl())), ex);
+                    .toQueryString(new EscapeQuerySyntaxImpl())}), ex);
 
           }
 
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/builders/MatchAllDocsQueryNodeBuilder.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/builders/MatchAllDocsQueryNodeBuilder.java	(revision 813186)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/builders/MatchAllDocsQueryNodeBuilder.java	(working copy)
@@ -40,9 +40,9 @@
     // validates node
     if (!(queryNode instanceof MatchAllDocsQueryNode)) {
       throw new QueryNodeException(new MessageImpl(
-          QueryParserMessages.LUCENE_QUERY_CONVERSION_ERROR, queryNode
+          QueryParserMessages.LUCENE_QUERY_CONVERSION_ERROR, new Object[]{queryNode
               .toQueryString(new EscapeQuerySyntaxImpl()), queryNode.getClass()
-              .getName()));
+              .getName()}));
     }
 
     return new MatchAllDocsQuery();
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/builders/MatchNoDocsQueryNodeBuilder.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/builders/MatchNoDocsQueryNodeBuilder.java	(revision 813186)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/builders/MatchNoDocsQueryNodeBuilder.java	(working copy)
@@ -40,9 +40,9 @@
     // validates node
     if (!(queryNode instanceof MatchNoDocsQueryNode)) {
       throw new QueryNodeException(new MessageImpl(
-          QueryParserMessages.LUCENE_QUERY_CONVERSION_ERROR, queryNode
+          QueryParserMessages.LUCENE_QUERY_CONVERSION_ERROR, new Object[]{queryNode
               .toQueryString(new EscapeQuerySyntaxImpl()), queryNode.getClass()
-              .getName()));
+              .getName()}));
     }
 
     return new BooleanQuery();
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/builders/StandardBooleanQueryNodeBuilder.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/builders/StandardBooleanQueryNodeBuilder.java	(revision 813186)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/builders/StandardBooleanQueryNodeBuilder.java	(working copy)
@@ -68,9 +68,9 @@
           } catch (TooManyClauses ex) {
 
             throw new QueryNodeException(new MessageImpl(
-                QueryParserMessages.TOO_MANY_BOOLEAN_CLAUSES, BooleanQuery
+                QueryParserMessages.TOO_MANY_BOOLEAN_CLAUSES, new Object[]{BooleanQuery
                     .getMaxClauseCount(), queryNode
-                    .toQueryString(new EscapeQuerySyntaxImpl())), ex);
+                    .toQueryString(new EscapeQuerySyntaxImpl())}), ex);
 
           }
 
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/EscapeQuerySyntaxImpl.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/EscapeQuerySyntaxImpl.java	(revision 813186)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/EscapeQuerySyntaxImpl.java	(working copy)
@@ -289,7 +289,7 @@
       return c - 'A' + 10;
     } else {
       throw new ParseException(new MessageImpl(
-          QueryParserMessages.INVALID_SYNTAX_ESCAPE_NONE_HEX_UNICODE, c));
+          QueryParserMessages.INVALID_SYNTAX_ESCAPE_NONE_HEX_UNICODE, new Object[]{c}));
     }
   }
 
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/ParseException.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/ParseException.java	(revision 813186)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/ParseException.java	(working copy)
@@ -47,8 +47,8 @@
    */
   public ParseException(Token currentTokenVal,
       int[][] expectedTokenSequencesVal, String[] tokenImageVal) {
-    super(new MessageImpl(QueryParserMessages.INVALID_SYNTAX, initialise(
-        currentTokenVal, expectedTokenSequencesVal, tokenImageVal)));
+    super(new MessageImpl(QueryParserMessages.INVALID_SYNTAX, new Object[]{initialise(
+        currentTokenVal, expectedTokenSequencesVal, tokenImageVal)}));
     this.currentToken = currentTokenVal;
     this.expectedTokenSequences = expectedTokenSequencesVal;
     this.tokenImage = tokenImageVal;
@@ -59,7 +59,7 @@
   }
 
   public ParseException() {
-    super(new MessageImpl(QueryParserMessages.INVALID_SYNTAX, "Error"));
+    super(new MessageImpl(QueryParserMessages.INVALID_SYNTAX, new Object[]{"Error"}));
   }
 
   /**
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParser.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParser.java	(revision 813186)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParser.java	(working copy)
@@ -68,7 +68,7 @@
             throw tme;
       }
       catch (Error tme) {
-          Message message = new MessageImpl(QueryParserMessages.INVALID_SYNTAX_CANNOT_PARSE, query, tme.getMessage());
+          Message message = new MessageImpl(QueryParserMessages.INVALID_SYNTAX_CANNOT_PARSE, new Object[]{query, tme.getMessage()});
           QueryNodeParseException e = new QueryNodeParseException(tme);
             e.setQuery(query);
             e.setNonLocalizedMessage(message);
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/AllowLeadingWildcardProcessor.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/AllowLeadingWildcardProcessor.java	(revision 813186)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/AllowLeadingWildcardProcessor.java	(working copy)
@@ -74,8 +74,8 @@
           case '*':
           case '?':
             throw new QueryNodeException(new MessageImpl(
-                QueryParserMessages.LEADING_WILDCARD_NOT_ALLOWED, node
-                    .toQueryString(new EscapeQuerySyntaxImpl())));    
+                QueryParserMessages.LEADING_WILDCARD_NOT_ALLOWED, new Object[]{node
+                    .toQueryString(new EscapeQuerySyntaxImpl())}));    
         }
       }
 
Index: src/java/org/apache/lucene/messages/MessageImpl.java
===================================================================
--- src/java/org/apache/lucene/messages/MessageImpl.java	(revision 813186)
+++ src/java/org/apache/lucene/messages/MessageImpl.java	(working copy)
@@ -36,7 +36,7 @@
 
   }
 
-  public MessageImpl(String key, Object... args) {
+  public MessageImpl(String key, Object[] args) {
     this(key);
     this.arguments = args;
   }
Index: src/java/org/apache/lucene/messages/NLS.java
===================================================================
--- src/java/org/apache/lucene/messages/NLS.java	(revision 813186)
+++ src/java/org/apache/lucene/messages/NLS.java	(working copy)
@@ -45,7 +45,7 @@
  */
 public class NLS {
 
-  private static Map<String, Class<Object>> bundles = new HashMap<String, Class<Object>>(
+  private static Map/*<String, Class<Object>>*/ bundles = new HashMap/*<String, Class<Object>>*/(
       0);
 
   protected NLS() {
@@ -66,7 +66,7 @@
   }
 
   public static String getLocalizedMessage(String key, Locale locale,
-      Object... args) {
+      Object[] args) {
     String str = getLocalizedMessage(key, locale);
 
     if (args.length > 0) {
@@ -76,7 +76,7 @@
     return str;
   }
 
-  public static String getLocalizedMessage(String key, Object... args) {
+  public static String getLocalizedMessage(String key, Object[] args) {
     return getLocalizedMessage(key, Locale.getDefault(), args);
   }
 
@@ -89,7 +89,7 @@
    * @param clazz
    *          where constants will reside
    */
-  @SuppressWarnings("unchecked")
+  //@SuppressWarnings("unchecked")
   protected static void initializeMessages(String bundleName, Class clazz) {
     try {
       load(clazz);
@@ -105,8 +105,8 @@
 
     // slow resource checking
     // need to loop thru all registered resource bundles
-    for (Iterator<String> it = bundles.keySet().iterator(); it.hasNext();) {
-      Class<Object> clazz = bundles.get(it.next());
+    for (Iterator/*<String>*/ it = bundles.keySet().iterator(); it.hasNext();) {
+      Class/*<Object>*/ clazz = (Class) bundles.get((String)it.next());
       ResourceBundle resourceBundle = ResourceBundle.getBundle(clazz.getName(),
           locale);
       if (resourceBundle != null) {
@@ -126,14 +126,14 @@
   /**
    * @param clazz
    */
-  private static void load(Class<Object> clazz) {
+  private static void load(Class/*<Object>*/ clazz) {
     final Field[] fieldArray = clazz.getDeclaredFields();
 
     boolean isFieldAccessible = (clazz.getModifiers() & Modifier.PUBLIC) != 0;
 
     // build a map of field names to Field objects
     final int len = fieldArray.length;
-    Map<String, Field> fields = new HashMap<String, Field>(len * 2);
+    Map/*<String, Field>*/ fields = new HashMap/*<String, Field>*/(len * 2);
     for (int i = 0; i < len; i++) {
       fields.put(fieldArray[i].getName(), fieldArray[i]);
       loadfieldValue(fieldArray[i], isFieldAccessible, clazz);
@@ -145,7 +145,7 @@
    * @param isFieldAccessible
    */
   private static void loadfieldValue(Field field, boolean isFieldAccessible,
-      Class<Object> clazz) {
+      Class/*<Object>*/ clazz) {
     int MOD_EXPECTED = Modifier.PUBLIC | Modifier.STATIC;
     int MOD_MASK = MOD_EXPECTED | Modifier.FINAL;
     if ((field.getModifiers() & MOD_MASK) != MOD_EXPECTED)
@@ -168,7 +168,7 @@
    * @param key
    *          - Message Key
    */
-  private static void validateMessage(String key, Class<Object> clazz) {
+  private static void validateMessage(String key, Class/*<Object>*/ clazz) {
     // Test if the message is present in the resource bundle
     try {
       ResourceBundle resourceBundle = ResourceBundle.getBundle(clazz.getName(),
@@ -192,7 +192,7 @@
   /*
    * Make a class field accessible
    */
-  @SuppressWarnings("unchecked")
+  //@SuppressWarnings("unchecked")
   private static void makeAccessible(final Field field) {
     if (System.getSecurityManager() == null) {
       field.setAccessible(true);
Index: src/test/org/apache/lucene/messages/TestNLS.java
===================================================================
--- src/test/org/apache/lucene/messages/TestNLS.java	(revision 813186)
+++ src/test/org/apache/lucene/messages/TestNLS.java	(working copy)
@@ -26,13 +26,13 @@
 public class TestNLS extends TestCase {
   public void testMessageLoading() {
     Message invalidSyntax = new MessageImpl(
-        MessagesTestBundle.Q0001E_INVALID_SYNTAX, "XXX");
+        MessagesTestBundle.Q0001E_INVALID_SYNTAX, new Object[]{"XXX"});
     assertEquals("Syntax Error: XXX", invalidSyntax.getLocalizedMessage());
   }
 
   public void testMessageLoading_ja() {
     Message invalidSyntax = new MessageImpl(
-        MessagesTestBundle.Q0001E_INVALID_SYNTAX, "XXX");
+        MessagesTestBundle.Q0001E_INVALID_SYNTAX, new Object[]{"XXX"});
     assertEquals("構文エラー: XXX", invalidSyntax
         .getLocalizedMessage(Locale.JAPANESE));
   }
@@ -43,7 +43,7 @@
     assertEquals("Truncated unicode escape sequence.", message);
 
     message = NLS.getLocalizedMessage(MessagesTestBundle.Q0001E_INVALID_SYNTAX,
-        "XXX");
+        new Object[]{"XXX"});
     assertEquals("Syntax Error: XXX", message);
   }
 
@@ -54,7 +54,7 @@
     assertEquals("切り捨てられたユニコード・エスケープ・シーケンス。", message);
 
     message = NLS.getLocalizedMessage(MessagesTestBundle.Q0001E_INVALID_SYNTAX,
-        Locale.JAPANESE, "XXX");
+        Locale.JAPANESE, new Object[]{"XXX"});
     assertEquals("構文エラー: XXX", message);
   }
 
@@ -66,7 +66,7 @@
     assertEquals("Truncated unicode escape sequence.", message);
 
     message = NLS.getLocalizedMessage(MessagesTestBundle.Q0001E_INVALID_SYNTAX,
-        locale, "XXX");
+        locale, new Object[]{"XXX"});
     assertEquals("Syntax Error: XXX", message);
   }
 
