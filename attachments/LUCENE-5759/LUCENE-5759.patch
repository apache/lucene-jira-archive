Index: lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesConsumer.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesConsumer.java	(revision 1602540)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesConsumer.java	(working copy)
@@ -146,7 +146,7 @@
         ++count;
         if (count % BLOCK_SIZE == 0) {
           final long blockDelta = currentBlockMax - currentBlockMin;
-          final int blockDeltaRequired = blockDelta < 0 ? 64 : PackedInts.bitsRequired(blockDelta);
+          final int blockDeltaRequired = PackedInts.unsignedBitsRequired(blockDelta);
           final int blockBPV = PackedInts.fastestFormatAndBits(BLOCK_SIZE, blockDeltaRequired, acceptableOverheadRatio).bitsPerValue;
           blockSum += blockBPV;
           currentBlockMax = Long.MIN_VALUE;
Index: lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer.java	(revision 1602540)
+++ lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer.java	(working copy)
@@ -145,7 +145,7 @@
 
     final int format;
     if (uniqueValues != null
-        && (delta < 0L || PackedInts.bitsRequired(uniqueValues.size() - 1) < PackedInts.bitsRequired(delta))
+        && (PackedInts.bitsRequired(uniqueValues.size() - 1) < PackedInts.unsignedBitsRequired(delta))
         && count <= Integer.MAX_VALUE) {
       format = TABLE_COMPRESSED;
     } else if (gcd != 0 && gcd != 1) {
Index: lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesConsumer.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesConsumer.java	(revision 1602540)
+++ lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesConsumer.java	(working copy)
@@ -148,14 +148,17 @@
     }
     
     final long delta = maxValue - minValue;
-    final int deltaBitsRequired = delta < 0 ? 64 : DirectWriter.bitsRequired(delta);
+    final int deltaBitsRequired = DirectWriter.unsignedBitsRequired(delta);
+    final int tableBitsRequired = uniqueValues == null
+        ? Integer.MAX_VALUE
+        : DirectWriter.bitsRequired(uniqueValues.size() - 1);
 
     final int format;
-    if (uniqueValues != null && DirectWriter.bitsRequired(uniqueValues.size() - 1) < deltaBitsRequired) {
+    if (uniqueValues != null && tableBitsRequired < deltaBitsRequired) {
       format = TABLE_COMPRESSED;
     } else if (gcd != 0 && gcd != 1) {
       final long gcdDelta = (maxValue - minValue) / gcd;
-      final long gcdBitsRequired = gcdDelta < 0 ? 64 : DirectWriter.bitsRequired(gcdDelta);
+      final long gcdBitsRequired = DirectWriter.unsignedBitsRequired(gcdDelta);
       format = gcdBitsRequired < deltaBitsRequired ? GCD_COMPRESSED : DELTA_COMPRESSED;
     } else {
       format = DELTA_COMPRESSED;
@@ -177,7 +180,7 @@
         meta.writeLong(minValue);
         meta.writeLong(gcd);
         final long maxDelta = (maxValue - minValue) / gcd;
-        final int bits = maxDelta < 0 ? 64 : DirectWriter.bitsRequired(maxDelta);
+        final int bits = DirectWriter.unsignedBitsRequired(maxDelta);
         meta.writeVInt(bits);
         final DirectWriter quotientWriter = DirectWriter.getInstance(data, count, bits);
         for (Number nv : values) {
@@ -206,9 +209,8 @@
           meta.writeLong(decode[i]);
           encode.put(decode[i], i);
         }
-        final int bitsRequired = DirectWriter.bitsRequired(uniqueValues.size() - 1);
-        meta.writeVInt(bitsRequired);
-        final DirectWriter ordsWriter = DirectWriter.getInstance(data, count, bitsRequired);
+        meta.writeVInt(tableBitsRequired);
+        final DirectWriter ordsWriter = DirectWriter.getInstance(data, count, tableBitsRequired);
         for (Number nv : values) {
           ordsWriter.add(encode.get(nv == null ? 0 : nv.longValue()));
         }
Index: lucene/core/src/java/org/apache/lucene/util/packed/AppendingDeltaPackedLongBuffer.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/packed/AppendingDeltaPackedLongBuffer.java	(revision 1602540)
+++ lucene/core/src/java/org/apache/lucene/util/packed/AppendingDeltaPackedLongBuffer.java	(working copy)
@@ -104,7 +104,7 @@
       values[valuesOff] = new PackedInts.NullReader(pendingOff);
     } else {
       // build a new packed reader
-      final int bitsRequired = delta < 0 ? 64 : PackedInts.bitsRequired(delta);
+      final int bitsRequired = PackedInts.unsignedBitsRequired(delta);
       for (int i = 0; i < pendingOff; ++i) {
         pending[i] -= minValue;
       }
Index: lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedWriter.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedWriter.java	(revision 1602540)
+++ lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedWriter.java	(working copy)
@@ -76,7 +76,7 @@
     }
 
     final long delta = max - min;
-    int bitsRequired = delta < 0 ? 64 : delta == 0L ? 0 : PackedInts.bitsRequired(delta);
+    int bitsRequired = delta == 0 ? 0 : PackedInts.unsignedBitsRequired(delta);
     if (bitsRequired == 64) {
       // no need to delta-encode
       min = 0L;
Index: lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked.java	(revision 1602540)
+++ lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked.java	(working copy)
@@ -221,7 +221,7 @@
     int bitsLeft = 8;
     for (int i = 0; i < byteValueCount * iterations; ++i) {
       final long v = values[valuesOffset++];
-      assert bitsPerValue == 64 || PackedInts.bitsRequired(v) <= bitsPerValue;
+      assert PackedInts.unsignedBitsRequired(v) <= bitsPerValue;
       if (bitsPerValue < bitsLeft) {
         // just buffer
         nextBlock |= v << (bitsLeft - bitsPerValue);
Index: lucene/core/src/java/org/apache/lucene/util/packed/DirectWriter.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/packed/DirectWriter.java	(revision 1602540)
+++ lucene/core/src/java/org/apache/lucene/util/packed/DirectWriter.java	(working copy)
@@ -111,17 +111,14 @@
   }
   
   /** 
-   * Returns how many bits are required to hold values up
-   * to and including maxValue
+   * Round a number of bits per value to the next amount of bits per value that
+   * is supported by this writer.
    * 
-   * @param maxValue the maximum value that should be representable.
-   * @return the amount of bits needed to represent values from 0 to maxValue.
+   * @param bitsRequired the amount of bits required
+   * @return the next number of bits per value that is gte the provided value
+   *         and supported by this writer
    */
-  public static int bitsRequired(long maxValue) {
-    if (maxValue < 0) {
-      throw new IllegalArgumentException("maxValue must be non-negative (got: " + maxValue + ")");
-    }
-    int bitsRequired = Math.max(1, 64 - Long.numberOfLeadingZeros(maxValue));
+  private static int roundBits(int bitsRequired) {
     int index = Arrays.binarySearch(SUPPORTED_BITS_PER_VALUE, bitsRequired);
     if (index < 0) {
       return SUPPORTED_BITS_PER_VALUE[-index-1];
@@ -129,7 +126,31 @@
       return bitsRequired;
     }
   }
-  
+
+  /**
+   * Returns how many bits are required to hold values up
+   * to and including maxValue
+   *
+   * @param maxValue the maximum value that should be representable.
+   * @return the amount of bits needed to represent values from 0 to maxValue.
+   * @see PackedInts#bitsRequired(long)
+   */
+  public static int bitsRequired(long maxValue) {
+    return roundBits(PackedInts.bitsRequired(maxValue));
+  }
+
+  /**
+   * Returns how many bits are required to hold values up
+   * to and including maxValue, interpreted as an unsigned value.
+   *
+   * @param maxValue the maximum value that should be representable.
+   * @return the amount of bits needed to represent values from 0 to maxValue.
+   * @see PackedInts#unsignedBitsRequired(long)
+   */
+  public static int unsignedBitsRequired(long maxValue) {
+    return roundBits(PackedInts.unsignedBitsRequired(maxValue));
+  }
+
   final static int SUPPORTED_BITS_PER_VALUE[] = new int[] {
     1, 2, 4, 8, 12, 16, 20, 24, 28, 32, 40, 48, 56, 64
   };
Index: lucene/core/src/java/org/apache/lucene/util/packed/GrowableWriter.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/packed/GrowableWriter.java	(revision 1602540)
+++ lucene/core/src/java/org/apache/lucene/util/packed/GrowableWriter.java	(working copy)
@@ -74,7 +74,7 @@
     if ((value & currentMask) == value) {
       return;
     }
-    final int bitsRequired = value < 0 ? 64 : PackedInts.bitsRequired(value);
+    final int bitsRequired = PackedInts.unsignedBitsRequired(value);
     assert bitsRequired > current.getBitsPerValue();
     final int valueCount = size();
     PackedInts.Mutable next = PackedInts.getMutable(valueCount, bitsRequired, acceptableOverheadRatio);
Index: lucene/core/src/java/org/apache/lucene/util/packed/MonotonicAppendingLongBuffer.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/packed/MonotonicAppendingLongBuffer.java	(revision 1602540)
+++ lucene/core/src/java/org/apache/lucene/util/packed/MonotonicAppendingLongBuffer.java	(working copy)
@@ -125,7 +125,7 @@
     if (maxDelta == 0) {
       values[valuesOff] = new PackedInts.NullReader(pendingOff);
     } else {
-      final int bitsRequired = maxDelta < 0 ? 64 : PackedInts.bitsRequired(maxDelta);
+      final int bitsRequired = PackedInts.unsignedBitsRequired(maxDelta);
       final PackedInts.Mutable mutable = PackedInts.getMutable(pendingOff, bitsRequired, acceptableOverheadRatio);
       for (int i = 0; i < pendingOff; ) {
         i += mutable.set(i, pending, i, pendingOff - i);
Index: lucene/core/src/java/org/apache/lucene/util/packed/Packed64.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/packed/Packed64.java	(revision 1602540)
+++ lucene/core/src/java/org/apache/lucene/util/packed/Packed64.java	(working copy)
@@ -254,7 +254,7 @@
 
   @Override
   public void fill(int fromIndex, int toIndex, long val) {
-    assert PackedInts.bitsRequired(val) <= getBitsPerValue();
+    assert PackedInts.unsignedBitsRequired(val) <= getBitsPerValue();
     assert fromIndex <= toIndex;
 
     // minimum number of values that use an exact number of full blocks
Index: lucene/core/src/java/org/apache/lucene/util/packed/Packed64SingleBlock.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/packed/Packed64SingleBlock.java	(revision 1602540)
+++ lucene/core/src/java/org/apache/lucene/util/packed/Packed64SingleBlock.java	(working copy)
@@ -159,7 +159,7 @@
   public void fill(int fromIndex, int toIndex, long val) {
     assert fromIndex >= 0;
     assert fromIndex <= toIndex;
-    assert PackedInts.bitsRequired(val) <= bitsPerValue;
+    assert PackedInts.unsignedBitsRequired(val) <= bitsPerValue;
 
     final int valuesPerBlock = 64 / bitsPerValue;
     if (toIndex - fromIndex <= valuesPerBlock << 1) {
Index: lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.java	(revision 1602540)
+++ lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.java	(working copy)
@@ -1131,6 +1131,7 @@
 
   /** Returns how many bits are required to hold values up
    *  to and including maxValue
+   *  NOTE: This method returns at least 1.
    * @param maxValue the maximum value that should be representable.
    * @return the amount of bits needed to represent values from 0 to maxValue.
    * @lucene.internal
@@ -1139,9 +1140,18 @@
     if (maxValue < 0) {
       throw new IllegalArgumentException("maxValue must be non-negative (got: " + maxValue + ")");
     }
-    return Math.max(1, 64 - Long.numberOfLeadingZeros(maxValue));
+    return unsignedBitsRequired(maxValue);
   }
 
+  /** Returns how many bits are required to store <code>bits</code>,
+   * interpreted as an unsigned value.
+   * NOTE: This method returns at least 1.
+   * @lucene.internal
+   */
+  public static int unsignedBitsRequired(long bits) {
+    return Math.max(1, 64 - Long.numberOfLeadingZeros(bits));
+  }
+
   /**
    * Calculates the maximum unsigned long that can be expressed with the given
    * number of bits.
Index: lucene/core/src/java/org/apache/lucene/util/packed/PackedWriter.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/packed/PackedWriter.java	(revision 1602540)
+++ lucene/core/src/java/org/apache/lucene/util/packed/PackedWriter.java	(working copy)
@@ -56,7 +56,7 @@
 
   @Override
   public void add(long v) throws IOException {
-    assert bitsPerValue == 64 || (v >= 0 && v <= PackedInts.maxValue(bitsPerValue)) : bitsPerValue;
+    assert PackedInts.unsignedBitsRequired(v) <= bitsPerValue;
     assert !finished;
     if (valueCount != -1 && written >= valueCount) {
       throw new EOFException("Writing past end of stream");
Index: lucene/core/src/test/org/apache/lucene/util/packed/TestDirectPacked.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/util/packed/TestDirectPacked.java	(revision 1602540)
+++ lucene/core/src/test/org/apache/lucene/util/packed/TestDirectPacked.java	(working copy)
@@ -25,7 +25,6 @@
 import org.apache.lucene.store.IOContext;
 import org.apache.lucene.store.IndexInput;
 import org.apache.lucene.store.IndexOutput;
-import org.apache.lucene.store.MMapDirectory;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.packed.DirectReader;
 import org.apache.lucene.util.packed.DirectWriter;
Index: lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts.java	(revision 1602540)
+++ lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts.java	(working copy)
@@ -70,6 +70,9 @@
     assertEquals(61, PackedInts.bitsRequired(0x1FFFFFFFFFFFFFFFL));
     assertEquals(62, PackedInts.bitsRequired(0x3FFFFFFFFFFFFFFFL));
     assertEquals(63, PackedInts.bitsRequired(0x7FFFFFFFFFFFFFFFL));
+    assertEquals(64, PackedInts.unsignedBitsRequired(-1));
+    assertEquals(64, PackedInts.unsignedBitsRequired(Long.MIN_VALUE));
+    assertEquals(1, PackedInts.bitsRequired(0));
   }
 
   public void testMaxValues() {
