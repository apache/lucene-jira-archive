Index: lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java	(revision 1349584)
+++ lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java	(working copy)
@@ -1521,6 +1521,41 @@
     dir.close();
   }
   
+  public void testIllegalGappedPositions() throws Exception {
+    Directory dir = newDirectory();
+    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new GapAnalyzer(Integer.MAX_VALUE, 0)));
+    Document doc = new Document();
+    doc.add(new TextField("foo", "bar", Field.Store.NO));
+    doc.add(new TextField("foo", "baz", Field.Store.NO));
+    try {
+      iw.addDocument(doc);
+      fail();
+    } catch (IllegalArgumentException expected) {
+      // expected exception
+    }
+    iw.close();
+    dir.close();
+  }
+  
+  public void testNegativeGappedPositions() throws Exception {
+    Directory dir = newDirectory();
+    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new GapAnalyzer(-2, 0)));
+    Document doc = new Document();
+    doc.add(new TextField("foo", "bar bar", Field.Store.NO));
+    doc.add(new TextField("foo", "bar", Field.Store.NO));
+    try {
+      iw.addDocument(doc);
+      fail();
+    } catch (IllegalArgumentException expected) {
+      // expected exception
+    }
+    iw.close();
+    dir.close();
+  }
+  
+  // TODO: test analyzer throws exception from getPositionIncrementGap and getOffsetGap
+  // TODO: use crazy gap offsets like TestPostingsOffsets but only with term vectors and see what happens.
+  
   public void testLegalbutVeryLargePositions() throws Exception {
     Directory dir = newDirectory();
     IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, null));
@@ -1539,4 +1574,29 @@
     iw.close();
     dir.close();
   }
+  
+  static class GapAnalyzer extends Analyzer {
+    final int positionGap;
+    final int offsetGap;
+    
+    GapAnalyzer(int positionGap, int offsetGap) {
+      this.positionGap = positionGap;
+      this.offsetGap = offsetGap;
+    }
+    
+    @Override
+    protected TokenStreamComponents createComponents(String fieldName, Reader reader) {
+      return new TokenStreamComponents(new MockTokenizer(reader));
+    }
+
+    @Override
+    public int getPositionIncrementGap(String fieldName) {
+      return positionGap;
+    }
+
+    @Override
+    public int getOffsetGap(IndexableField field) {
+      return offsetGap;
+    }
+  }
 }
Index: lucene/core/src/test/org/apache/lucene/index/TestPostingsOffsets.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestPostingsOffsets.java	(revision 1349584)
+++ lucene/core/src/test/org/apache/lucene/index/TestPostingsOffsets.java	(working copy)
@@ -35,6 +35,7 @@
 import org.apache.lucene.document.StringField;
 import org.apache.lucene.document.TextField;
 import org.apache.lucene.index.FieldInfo.IndexOptions;
+import org.apache.lucene.index.TestIndexWriterExceptions.GapAnalyzer;
 import org.apache.lucene.search.DocIdSetIterator;
 import org.apache.lucene.search.FieldCache;
 import org.apache.lucene.store.Directory;
@@ -436,6 +437,48 @@
       // expected
     }
   }
+  
+  public void testIllegalGappedOffsets() throws Exception {
+    Directory dir = newDirectory();
+    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new GapAnalyzer(0, Integer.MAX_VALUE)));
+    Document doc = new Document();
+    FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);
+    customType.setStoreTermVectors(true);
+    customType.setStoreTermVectorPositions(true);
+    customType.setStoreTermVectorOffsets(true);    
+    customType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);
+    doc.add(new Field("foo", "bar", customType));
+    doc.add(new Field("foo", "baz", customType));
+    try {
+      iw.addDocument(doc);
+      fail();
+    } catch (IllegalArgumentException expected) {
+      // expected exception
+    }
+    iw.close();
+    dir.close();
+  }
+  
+  public void testNegativeGappedOffsets() throws Exception {
+    Directory dir = newDirectory();
+    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new GapAnalyzer(0, -5)));
+    Document doc = new Document();
+    FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);
+    customType.setStoreTermVectors(true);
+    customType.setStoreTermVectorPositions(true);
+    customType.setStoreTermVectorOffsets(true);    
+    customType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);
+    doc.add(new Field("foo", "bar bar", customType));
+    doc.add(new Field("foo", "bar", customType));
+    try {
+      iw.addDocument(doc);
+      fail();
+    } catch (IllegalArgumentException expected) {
+      // expected exception
+    }
+    iw.close();
+    dir.close();
+  }
   // TODO: more tests with other possibilities
   
   private void checkTokens(Token[] tokens) throws IOException {
