Index: src/java/org/apache/lucene/index/FieldInfos.java
===================================================================
--- src/java/org/apache/lucene/index/FieldInfos.java	(revision 915518)
+++ src/java/org/apache/lucene/index/FieldInfos.java	(working copy)
@@ -32,8 +32,8 @@
  *  of this class are thread-safe for multiple readers, but only one thread can
  *  be adding documents at a time, with no other reader or writer threads
  *  accessing this object.
+ *  @lucene.experimental
  */
-// nocommit -- made this public:
 public final class FieldInfos {
 
   // Used internally (ie not written to *.fnm files) for pre-2.9 files
@@ -121,7 +121,6 @@
   }
 
   /** Returns true if any fields do not omitTermFreqAndPositions */
-  // nocommit -- made public
   public boolean hasProx() {
     final int numFields = byNumber.size();
     for(int i=0;i<numFields;i++) {
Index: src/java/org/apache/lucene/index/Term.java
===================================================================
--- src/java/org/apache/lucene/index/Term.java	(revision 915518)
+++ src/java/org/apache/lucene/index/Term.java	(working copy)
@@ -49,7 +49,7 @@
     this(fld, "", true);
   }
 
-  // nocommit -- made public
+  /** @lucene.experimental */
   public Term(String fld, String txt, boolean intern) {
     field = intern ? StringHelper.intern(fld) : fld;	  // field names are interned
     text = txt;					          // unless already known to be
Index: src/java/org/apache/lucene/index/FieldInfo.java
===================================================================
--- src/java/org/apache/lucene/index/FieldInfo.java	(revision 915518)
+++ src/java/org/apache/lucene/index/FieldInfo.java	(working copy)
@@ -17,13 +17,10 @@
  * limitations under the License.
  */
 
-// nocommit -- made this public:
+/** @lucene.experimental */
 public final class FieldInfo {
-  // nocommit -- made this public
   public String name;
-  // nocommit -- made this public
   public boolean isIndexed;
-  // nocommit -- made this public
   public int number;
 
   // true if term vector for this field should be stored
@@ -31,12 +28,9 @@
   boolean storeOffsetWithTermVector;
   boolean storePositionWithTermVector;
 
-  // nocommit -- made this public
   public boolean omitNorms; // omit norms associated with indexed fields  
-  // nocommit -- made this public
   public boolean omitTermFreqAndPositions;
 
-  // nocommit -- made public
   public boolean storePayloads; // whether this field stores payloads together with term positions
 
   FieldInfo(String na, boolean tk, int nu, boolean storeTermVector, 
Index: src/java/org/apache/lucene/index/SegmentWriteState.java
===================================================================
--- src/java/org/apache/lucene/index/SegmentWriteState.java	(revision 915518)
+++ src/java/org/apache/lucene/index/SegmentWriteState.java	(working copy)
@@ -28,20 +28,16 @@
  * This class is not meant for public usage; it's only
  * public in order to expose access across packages.  It's
  * used internally when updating the index.
+ * @lucene.experimental
  */
 public class SegmentWriteState {
   DocumentsWriter docWriter;
-  // nocommit -- made public
   public Directory directory;
-  // nocommit -- made public
   public String segmentName;
-  // nocommit -- made public
   public FieldInfos fieldInfos;
   String docStoreSegmentName;
-  // nocommit -- made public
   public int numDocs;
   int numDocsInStore;
-  // nocommit -- made public
   public Collection<String> flushedFiles;
 
   // Actual codec used
@@ -52,7 +48,6 @@
    * faster, while larger values use less memory and make searching slightly
    * slower.  Searching is typically not dominated by dictionary lookup, so
    * tweaking this is rarely useful.*/
-  // nocommit -- made public
   public int termIndexInterval;
 
   /** Expert: The fraction of {@link TermDocs} entries stored in skip tables,
@@ -60,13 +55,11 @@
    * smaller indexes, greater acceleration, but fewer accelerable cases, while
    * smaller values result in bigger indexes, less acceleration and more
    * accelerable cases. More detailed experiments would be useful here. */
-  // nocommit -- made public
   public int skipInterval = 16;
   
   /** Expert: The maximum number of skip levels. Smaller values result in 
    * slightly smaller indexes, but slower skipping in big posting lists.
    */
-  // nocommit -- made public
   public int maxSkipLevels = 10;
 
   public SegmentWriteState(DocumentsWriter docWriter, Directory directory, String segmentName, FieldInfos fieldInfos,
Index: src/java/org/apache/lucene/index/codecs/MergeState.java
===================================================================
--- src/java/org/apache/lucene/index/codecs/MergeState.java	(revision 915518)
+++ src/java/org/apache/lucene/index/codecs/MergeState.java	(working copy)
@@ -25,8 +25,7 @@
 
 /** Holds common state used during segment merging
  *
- * <p>This API is experimental and subject to suddenly
- * change.</p> */
+ * @lucene.experimental */
 public class MergeState {
   public FieldInfos fieldInfos;
   public List<IndexReader> readers;               // Readers being merged
Index: src/java/org/apache/lucene/index/codecs/Codecs.java
===================================================================
--- src/java/org/apache/lucene/index/codecs/Codecs.java	(revision 915518)
+++ src/java/org/apache/lucene/index/codecs/Codecs.java	(working copy)
@@ -32,7 +32,8 @@
  *  this, instantiate it, and register your codecs, then
  *  pass this instance to IndexReader/IndexWriter (via
  *  package private APIs) to use different codecs when
- *  reading & writing segments. */
+ *  reading & writing segments. 
+ *  @lucene.experimental */
 
 public abstract class Codecs {
 
Index: src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec.java
===================================================================
--- src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec.java	(revision 915518)
+++ src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec.java	(working copy)
@@ -45,7 +45,8 @@
  *  writing the non-inlined terms.
  *
  *  Currently in only inlines docFreq=1 terms, and
- *  otherwise uses the normal "standard" codec. */
+ *  otherwise uses the normal "standard" codec. 
+ *  @lucene.experimental */
 
 public class PulsingCodec extends Codec {
 
Index: src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsWriterImpl.java
===================================================================
--- src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsWriterImpl.java	(revision 915518)
+++ src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsWriterImpl.java	(working copy)
@@ -33,7 +33,7 @@
 // positions would not be inlined.  Though this is
 // presumably rare in practice...
 
-//nocommit: public 
+/** @lucene.experimental */
 public final class PulsingPostingsWriterImpl extends StandardPostingsWriter {
 
   final static String CODEC = "PulsedPostings";
Index: src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl.java
===================================================================
--- src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl.java	(revision 915518)
+++ src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl.java	(working copy)
@@ -32,7 +32,8 @@
 import org.apache.lucene.util.BytesRef;
 
 /** Concrete class that reads the current doc/freq/skip
- *  postings format */
+ *  postings format 
+ *  @lucene.experimental */
 
 // nocommit -- should we switch "hasProx" higher up?  and
 // create two separate docs readers, one that also reads
Index: src/java/org/apache/lucene/index/codecs/MultiLevelSkipListWriter.java
===================================================================
--- src/java/org/apache/lucene/index/codecs/MultiLevelSkipListWriter.java	(revision 915518)
+++ src/java/org/apache/lucene/index/codecs/MultiLevelSkipListWriter.java	(working copy)
@@ -44,10 +44,9 @@
  * 
  * While this class takes care of writing the different skip levels,
  * subclasses must define the actual format of the skip data.
- * 
+ * @lucene.experimental
  */
 
-// nocommit -- made public
 public abstract class MultiLevelSkipListWriter {
   // number of levels in this skip list
   protected int numberOfSkipLevels;
@@ -103,7 +102,6 @@
    * @param df the current document frequency 
    * @throws IOException
    */
-  // nocommit -- made public
   public void bufferSkip(int df) throws IOException {
     int numLevels;
    
@@ -135,7 +133,6 @@
    * @param output the IndexOutput the skip lists shall be written to 
    * @return the pointer the skip list starts
    */
-  // nocommit -- made public
   public long writeSkip(IndexOutput output) throws IOException {
     long skipPointer = output.getFilePointer();
     //System.out.println("skipper.writeSkip fp=" + skipPointer);
Index: src/java/org/apache/lucene/index/codecs/TermsConsumer.java
===================================================================
--- src/java/org/apache/lucene/index/codecs/TermsConsumer.java	(revision 915518)
+++ src/java/org/apache/lucene/index/codecs/TermsConsumer.java	(working copy)
@@ -26,7 +26,7 @@
 import org.apache.lucene.util.BytesRef;
 
 /**
- * NOTE: this API is experimental and will likely change
+ * @lucene.experimental
  */
 
 public abstract class TermsConsumer {
Index: src/java/org/apache/lucene/index/codecs/FieldsProducer.java
===================================================================
--- src/java/org/apache/lucene/index/codecs/FieldsProducer.java	(revision 915518)
+++ src/java/org/apache/lucene/index/codecs/FieldsProducer.java	(working copy)
@@ -27,7 +27,7 @@
  *  actually do "something" with the postings (write it into
  *  the index in a specific format).
  *
- * NOTE: this API is experimental and will likely change
+ * @lucene.experimental
  */
 
 public abstract class FieldsProducer extends Fields implements Closeable {
Index: src/java/org/apache/lucene/index/codecs/Codec.java
===================================================================
--- src/java/org/apache/lucene/index/codecs/Codec.java	(revision 915518)
+++ src/java/org/apache/lucene/index/codecs/Codec.java	(working copy)
@@ -28,6 +28,7 @@
 import org.apache.lucene.store.IndexInput;
 import org.apache.lucene.store.IndexOutput;
 
+/** @lucene.experimental */
 public abstract class Codec {
 
   public static boolean DEBUG = false;
Index: src/java/org/apache/lucene/index/codecs/standard/StandardTermsIndexWriter.java
===================================================================
--- src/java/org/apache/lucene/index/codecs/standard/StandardTermsIndexWriter.java	(revision 915518)
+++ src/java/org/apache/lucene/index/codecs/standard/StandardTermsIndexWriter.java	(working copy)
@@ -22,6 +22,7 @@
 import org.apache.lucene.util.BytesRef;
 import java.io.IOException;
 
+/** @lucene.experimental */
 public abstract class StandardTermsIndexWriter {
 
   public abstract void setTermsOutput(IndexOutput out);
Index: src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader.java
===================================================================
--- src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader.java	(revision 915518)
+++ src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader.java	(working copy)
@@ -57,6 +57,7 @@
 
 import org.apache.lucene.index.IndexFileNames;
 
+/** @lucene.experimental */
 public class SimpleStandardTermsIndexReader extends StandardTermsIndexReader {
 
   final private int totalIndexInterval;
Index: src/java/org/apache/lucene/index/codecs/standard/StandardTermsDictReader.java
===================================================================
--- src/java/org/apache/lucene/index/codecs/standard/StandardTermsDictReader.java	(revision 915518)
+++ src/java/org/apache/lucene/index/codecs/standard/StandardTermsDictReader.java	(working copy)
@@ -50,7 +50,8 @@
  *
  * <p>This class also interacts with an instance of {@link
  * StandardTermsIndexReader}, to abstract away the specific
- * implementation of the terms dict index. */
+ * implementation of the terms dict index. 
+ * @lucene.experimental */
 
 public class StandardTermsDictReader extends FieldsProducer {
   // Open input to the main terms dict file (_X.tis)
Index: src/java/org/apache/lucene/index/codecs/standard/DefaultSkipListWriter.java
===================================================================
--- src/java/org/apache/lucene/index/codecs/standard/DefaultSkipListWriter.java	(revision 915518)
+++ src/java/org/apache/lucene/index/codecs/standard/DefaultSkipListWriter.java	(working copy)
@@ -28,9 +28,8 @@
 /**
  * Implements the skip list writer for the default posting list format
  * that stores positions and payloads.
- *
+ * @lucene.experimental
  */
-// nocommit -- made public
 public class DefaultSkipListWriter extends MultiLevelSkipListWriter {
   private int[] lastSkipDoc;
   private int[] lastSkipPayloadLength;
@@ -47,7 +46,6 @@
   private long curFreqPointer;
   private long curProxPointer;
 
-  // nocommit made public
   public DefaultSkipListWriter(int skipInterval, int numberOfSkipLevels, int docCount, IndexOutput freqOutput, IndexOutput proxOutput) {
     super(skipInterval, numberOfSkipLevels, docCount);
     this.freqOutput = freqOutput;
@@ -72,7 +70,6 @@
   /**
    * Sets the values for the current skip data. 
    */
-  // nocommit -- made public
   public void setSkipData(int doc, boolean storePayloads, int payloadLength) {
     this.curDoc = doc;
     this.curStorePayloads = storePayloads;
@@ -82,7 +79,6 @@
       this.curProxPointer = proxOutput.getFilePointer();
   }
 
-  // nocommit -- made public
   @Override
   public void resetSkip() {
     super.resetSkip();
Index: src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriterImpl.java
===================================================================
--- src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriterImpl.java	(revision 915518)
+++ src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriterImpl.java	(working copy)
@@ -30,6 +30,7 @@
 import org.apache.lucene.index.codecs.Codec;
 import org.apache.lucene.util.BytesRef;
 
+/** @lucene.experimental */
 public final class StandardPostingsWriterImpl extends StandardPostingsWriter {
   final static String CODEC = "StandardPostingsWriterImpl";
   
Index: src/java/org/apache/lucene/index/codecs/standard/TermState.java
===================================================================
--- src/java/org/apache/lucene/index/codecs/standard/TermState.java	(revision 915518)
+++ src/java/org/apache/lucene/index/codecs/standard/TermState.java	(working copy)
@@ -21,6 +21,7 @@
  * Holds all state required for {@link StandardDocsProducer}
  * to produce a {@link DocsEnum} without re-seeking the
  * terms dict.
+ * @lucene.experimental
  */
 
 public class TermState implements Cloneable {
Index: src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.java
===================================================================
--- src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.java	(revision 915518)
+++ src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.java	(working copy)
@@ -32,7 +32,8 @@
  *  IndexInput (termsIn) where this class may read any
  *  previously stored data that it had written in its
  *  corresponding {@link StandardPostingsWriter} at indexing
- *  time. */
+ *  time. 
+ *  @lucene.experimental */
 
 public abstract class StandardPostingsReader implements Closeable {
 
Index: src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexWriter.java
===================================================================
--- src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexWriter.java	(revision 915518)
+++ src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexWriter.java	(working copy)
@@ -29,6 +29,7 @@
 import java.util.ArrayList;
 import java.io.IOException;
 
+/** @lucene.experimental */
 public class SimpleStandardTermsIndexWriter extends StandardTermsIndexWriter {
   final private IndexOutput out;
 
Index: src/java/org/apache/lucene/index/codecs/standard/StandardTermsDictWriter.java
===================================================================
--- src/java/org/apache/lucene/index/codecs/standard/StandardTermsDictWriter.java	(revision 915518)
+++ src/java/org/apache/lucene/index/codecs/standard/StandardTermsDictWriter.java	(working copy)
@@ -40,6 +40,7 @@
  * has its own section in the file.  Fields are written in
  * UTF16 string comparison order.  Within each field, each
  * term's text is written in UTF16 string comparison order.
+ * @lucene.experimental
  */
 
 public class StandardTermsDictWriter extends FieldsConsumer {
Index: src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter.java
===================================================================
--- src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter.java	(revision 915518)
+++ src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter.java	(working copy)
@@ -25,7 +25,7 @@
 import org.apache.lucene.index.codecs.PostingsConsumer;
 
 /**
- * NOTE: this API is experimental and will likely change
+ * @lucene.experimental
  */
 
 public abstract class StandardPostingsWriter extends PostingsConsumer implements Closeable {
Index: src/java/org/apache/lucene/index/codecs/standard/StandardTermsIndexReader.java
===================================================================
--- src/java/org/apache/lucene/index/codecs/standard/StandardTermsIndexReader.java	(revision 915518)
+++ src/java/org/apache/lucene/index/codecs/standard/StandardTermsIndexReader.java	(working copy)
@@ -35,7 +35,8 @@
  * indexed terms (many pairs of CharSequence text + long
  * fileOffset), and then this reader must be able to
  * retrieve the nearest index term to a provided term
- * text. */
+ * text. 
+ * @lucene.experimental */
 
 public abstract class StandardTermsIndexReader {
 
Index: src/java/org/apache/lucene/index/codecs/standard/DefaultSkipListReader.java
===================================================================
--- src/java/org/apache/lucene/index/codecs/standard/DefaultSkipListReader.java	(revision 915518)
+++ src/java/org/apache/lucene/index/codecs/standard/DefaultSkipListReader.java	(working copy)
@@ -26,9 +26,8 @@
 /**
  * Implements the skip list reader for the default posting list format
  * that stores positions and payloads.
- *
+ * @lucene.experimental
  */
-// nocommit -- made public
 public class DefaultSkipListReader extends MultiLevelSkipListReader {
   private boolean currentFieldStoresPayloads;
   private long freqPointer[];
@@ -40,7 +39,6 @@
   private int lastPayloadLength;
                            
 
-  // nocommit -- made public
   public DefaultSkipListReader(IndexInput skipStream, int maxSkipLevels, int skipInterval) {
     super(skipStream, maxSkipLevels, skipInterval);
     freqPointer = new long[maxSkipLevels];
@@ -48,7 +46,6 @@
     payloadLength = new int[maxSkipLevels];
   }
 
-  // nocommit -- made public
   public void init(long skipPointer, long freqBasePointer, long proxBasePointer, int df, boolean storesPayloads) {
     super.init(skipPointer, df);
     this.currentFieldStoresPayloads = storesPayloads;
@@ -62,14 +59,12 @@
 
   /** Returns the freq pointer of the doc to which the last call of 
    * {@link MultiLevelSkipListReader#skipTo(int)} has skipped.  */
-  // nocommit made public
   public long getFreqPointer() {
     return lastFreqPointer;
   }
 
   /** Returns the prox pointer of the doc to which the last call of 
    * {@link MultiLevelSkipListReader#skipTo(int)} has skipped.  */
-  // nocommit made public
   public long getProxPointer() {
     return lastProxPointer;
   }
@@ -77,7 +72,6 @@
   /** Returns the payload length of the payload stored just before 
    * the doc to which the last call of {@link MultiLevelSkipListReader#skipTo(int)} 
    * has skipped.  */
-  // nocommit made public
   public int getPayloadLength() {
     return lastPayloadLength;
   }
Index: src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReaderImpl.java
===================================================================
--- src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReaderImpl.java	(revision 915518)
+++ src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReaderImpl.java	(working copy)
@@ -32,7 +32,8 @@
 import org.apache.lucene.util.BytesRef;
 
 /** Concrete class that reads the current doc/freq/skip
- *  postings format. */
+ *  postings format. 
+ *  @lucene.experimental */
 
 // nocommit -- should we switch "hasProx" higher up?  and
 // create two separate docs readers, one that also reads
Index: src/java/org/apache/lucene/index/codecs/standard/StandardCodec.java
===================================================================
--- src/java/org/apache/lucene/index/codecs/standard/StandardCodec.java	(revision 915518)
+++ src/java/org/apache/lucene/index/codecs/standard/StandardCodec.java	(working copy)
@@ -29,7 +29,8 @@
 import org.apache.lucene.index.codecs.FieldsProducer;
 import org.apache.lucene.store.Directory;
 
-/** Default codec. */
+/** Default codec. 
+ *  @lucene.experimental */
 public class StandardCodec extends Codec {
 
   public StandardCodec() {
Index: src/java/org/apache/lucene/index/codecs/PostingsConsumer.java
===================================================================
--- src/java/org/apache/lucene/index/codecs/PostingsConsumer.java	(revision 915518)
+++ src/java/org/apache/lucene/index/codecs/PostingsConsumer.java	(working copy)
@@ -24,7 +24,7 @@
 import org.apache.lucene.util.BytesRef;
 
 /**
- * NOTE: this API is experimental and will likely change
+ * @lucene.experimental
  */
 
 public abstract class PostingsConsumer {
Index: src/java/org/apache/lucene/index/codecs/FieldsConsumer.java
===================================================================
--- src/java/org/apache/lucene/index/codecs/FieldsConsumer.java	(revision 915518)
+++ src/java/org/apache/lucene/index/codecs/FieldsConsumer.java	(working copy)
@@ -29,7 +29,7 @@
  *  actually do "something" with the postings (write it into
  *  the index in a specific format).
  *
- * NOTE: this API is experimental and will likely change
+ * @lucene.experimental
  */
 public abstract class FieldsConsumer {
 
Index: src/java/org/apache/lucene/index/codecs/preflex/SegmentTermEnum.java
===================================================================
--- src/java/org/apache/lucene/index/codecs/preflex/SegmentTermEnum.java	(revision 915518)
+++ src/java/org/apache/lucene/index/codecs/preflex/SegmentTermEnum.java	(working copy)
@@ -26,7 +26,8 @@
 
 /**
  * @deprecated No longer used with flex indexing, except for
- * reading old segments */
+ * reading old segments 
+ * @lucene.experimental */
 
 @Deprecated
 public final class SegmentTermEnum extends TermEnum implements Cloneable {
Index: src/java/org/apache/lucene/index/codecs/preflex/SegmentTermPositions.java
===================================================================
--- src/java/org/apache/lucene/index/codecs/preflex/SegmentTermPositions.java	(revision 915518)
+++ src/java/org/apache/lucene/index/codecs/preflex/SegmentTermPositions.java	(working copy)
@@ -23,8 +23,8 @@
 import org.apache.lucene.index.Term;
 import org.apache.lucene.index.TermPositions;
 import org.apache.lucene.store.IndexInput;
-import org.apache.lucene.util.Bits;
 
+/** @lucene.experimental */
 public final class SegmentTermPositions
 extends SegmentTermDocs implements TermPositions {
   private IndexInput proxStream;
@@ -50,7 +50,6 @@
   }
   */
 
-  // nocommit -- public
   public SegmentTermPositions(IndexInput freqStream, IndexInput proxStream, TermInfosReader tis, FieldInfos fieldInfos) {
     super(freqStream, tis, fieldInfos);
     this.proxStreamOrig = proxStream;  // the proxStream will be cloned lazily when nextPosition() is called for the first time
Index: src/java/org/apache/lucene/index/codecs/preflex/PreFlexCodec.java
===================================================================
--- src/java/org/apache/lucene/index/codecs/preflex/PreFlexCodec.java	(revision 915518)
+++ src/java/org/apache/lucene/index/codecs/preflex/PreFlexCodec.java	(working copy)
@@ -34,6 +34,7 @@
  *
  * @deprecated This is only used to read indexes created
  * before 3.1.
+ * @lucene.experimental
  */
 @Deprecated
 public class PreFlexCodec extends Codec {
Index: src/java/org/apache/lucene/index/codecs/preflex/SegmentTermDocs.java
===================================================================
--- src/java/org/apache/lucene/index/codecs/preflex/SegmentTermDocs.java	(revision 915518)
+++ src/java/org/apache/lucene/index/codecs/preflex/SegmentTermDocs.java	(working copy)
@@ -28,7 +28,8 @@
 import org.apache.lucene.store.IndexInput;
 import org.apache.lucene.util.Bits;
 
-/** @deprecated */
+/** @deprecated 
+ *  @lucene.experimental */
 @Deprecated
 public class SegmentTermDocs implements TermDocs {
   //protected SegmentReader parent;
@@ -66,7 +67,6 @@
   }
   */
 
-  // nocommit -- SR needs public
   public SegmentTermDocs(IndexInput freqStream, TermInfosReader tis, FieldInfos fieldInfos) {
     this.freqStream = (IndexInput) freqStream.clone();
     this.tis = tis;
Index: src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader.java
===================================================================
--- src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader.java	(revision 915518)
+++ src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader.java	(working copy)
@@ -31,8 +31,9 @@
  * Directory.  Pairs are accessed either by Term or by ordinal position the
  * set
  * @deprecated This class has been replaced by
- * FormatPostingsTermsDictReader, except for reading old segments. */
-// nocommit -- public
+ * FormatPostingsTermsDictReader, except for reading old segments. 
+ * @lucene.experimental
+ */
 @Deprecated
 public final class TermInfosReader {
   private final Directory directory;
Index: src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.java
===================================================================
--- src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.java	(revision 915518)
+++ src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.java	(working copy)
@@ -40,16 +40,14 @@
 import org.apache.lucene.util.Bits;
 import org.apache.lucene.util.BytesRef;
 
-/** Exposes flex API on a pre-flex index, as a codec. */
+/** Exposes flex API on a pre-flex index, as a codec. 
+ * @lucene.experimental */
 public class PreFlexFields extends FieldsProducer {
 
-  // nocommit -- needed public by SegmentReader
   public TermInfosReader tis;
   public final TermInfosReader tisNoIndex;
 
-  // nocomit -- needed public by SR
   public final IndexInput freqStream;
-  // nocomit -- needed public by SR
   public final IndexInput proxStream;
   final private FieldInfos fieldInfos;
   private final SegmentInfo si;
Index: src/java/org/apache/lucene/index/codecs/intblock/SimpleIntBlockFactory.java
===================================================================
--- src/java/org/apache/lucene/index/codecs/intblock/SimpleIntBlockFactory.java	(revision 915518)
+++ src/java/org/apache/lucene/index/codecs/intblock/SimpleIntBlockFactory.java	(working copy)
@@ -24,6 +24,7 @@
 
 import java.io.IOException;
 
+/** @lucene.experimental */
 public class SimpleIntBlockFactory extends IntStreamFactory {
   private final int blockSize;
   public SimpleIntBlockFactory(int blockSize) {
Index: src/java/org/apache/lucene/index/codecs/MultiLevelSkipListReader.java
===================================================================
--- src/java/org/apache/lucene/index/codecs/MultiLevelSkipListReader.java	(revision 915518)
+++ src/java/org/apache/lucene/index/codecs/MultiLevelSkipListReader.java	(working copy)
@@ -31,9 +31,9 @@
  * 
  * Subclasses must implement the abstract method {@link #readSkipData(int, IndexInput)}
  * which defines the actual format of the skip data.
+ * @lucene.experimental
  */
 
-// nocommit -- made public
 public abstract class MultiLevelSkipListReader {
   // the maximum number of skip levels possible for this index
   protected int maxNumberOfSkipLevels; 
@@ -85,7 +85,6 @@
   
   /** Returns the id of the doc to which the last call of {@link #skipTo(int)}
    *  has skipped.  */
-  // nocommit made public
   public int getDoc() {
     return lastDoc;
   }
@@ -94,7 +93,6 @@
   /** Skips entries to the first beyond the current whose document number is
    *  greater than or equal to <i>target</i>. Returns the current doc count. 
    */
-  // nocommit made public
   public int skipTo(int target) throws IOException {
     if (!haveSkipped) {
       // first time, load skip levels
@@ -162,7 +160,6 @@
     }
   }
 
-  // nocommit -- made public
   public void close() throws IOException {
     for (int i = 1; i < skipStream.length; i++) {
       if (skipStream[i] != null) {
@@ -172,7 +169,6 @@
   }
 
   /** initializes the reader */
-  // nocommit -- made public
   public void init(long skipPointer, int df) {
     this.skipPointer[0] = skipPointer;
     this.docCount = df;
