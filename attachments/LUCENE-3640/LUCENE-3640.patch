Index: solr/core/src/test/org/apache/solr/search/TestSort.java
===================================================================
--- solr/core/src/test/org/apache/solr/search/TestSort.java	(revision 1213115)
+++ solr/core/src/test/org/apache/solr/search/TestSort.java	(working copy)
@@ -302,7 +302,6 @@
           assertEquals(id, collectedDocs.get(j).doc);
         }
       }
-      searcher.close();
       reader.close();
     }
     dir.close();
Index: solr/core/src/test/org/apache/solr/handler/TestReplicationHandler.java
===================================================================
--- solr/core/src/test/org/apache/solr/handler/TestReplicationHandler.java	(revision 1213115)
+++ solr/core/src/test/org/apache/solr/handler/TestReplicationHandler.java	(working copy)
@@ -861,7 +861,6 @@
       TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);
       assertEquals(nDocs, hits.totalHits);
       reader.close();
-      searcher.close();
       dir.close();
     }
     if(snapDir[0].exists()) {
Index: solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java	(revision 1213115)
+++ solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java	(working copy)
@@ -17,6 +17,7 @@
 
 package org.apache.solr.search;
 
+import java.io.Closeable;
 import java.io.IOException;
 import java.net.URL;
 import java.util.*;
@@ -63,7 +64,7 @@
  *
  * @since solr 0.9
  */
-public class SolrIndexSearcher extends IndexSearcher implements SolrInfoMBean {
+public class SolrIndexSearcher extends IndexSearcher implements Closeable,SolrInfoMBean {
 
   // These should *only* be used for debugging or monitoring purposes
   public static final AtomicLong numOpens = new AtomicLong();
@@ -220,7 +221,6 @@
    *
    * In particular, the underlying reader and any cache's in use are closed.
    */
-  @Override
   public void close() throws IOException {
     if (cachingEnabled) {
       StringBuilder sb = new StringBuilder();
Index: modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker.java
===================================================================
--- modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker.java	(revision 1213115)
+++ modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker.java	(working copy)
@@ -639,7 +639,6 @@
       closed = true;
       if (searcher != null) {
         searcher.getIndexReader().close();
-        searcher.close();
       }
       searcher = null;
     }
@@ -655,12 +654,10 @@
     synchronized (searcherLock) {
       if(closed){
         indexSearcher.getIndexReader().close();
-        indexSearcher.close();
         throw new AlreadyClosedException("Spellchecker has been closed");
       }
       if (searcher != null) {
         searcher.getIndexReader().close();
-        searcher.close();
       }
       // set the spellindex in the sync block - ensure consistency.
       searcher = indexSearcher;
Index: modules/facet/src/test/org/apache/lucene/facet/FacetTestUtils.java
===================================================================
--- modules/facet/src/test/org/apache/lucene/facet/FacetTestUtils.java	(revision 1213115)
+++ modules/facet/src/test/org/apache/lucene/facet/FacetTestUtils.java	(working copy)
@@ -138,7 +138,6 @@
     public IndexSearcher indexSearcher;
 
     public void close() throws IOException {
-      indexSearcher.close();
       indexReader.close();
       taxReader.close();
     }
Index: modules/facet/src/test/org/apache/lucene/facet/FacetTestBase.java
===================================================================
--- modules/facet/src/test/org/apache/lucene/facet/FacetTestBase.java	(revision 1213115)
+++ modules/facet/src/test/org/apache/lucene/facet/FacetTestBase.java	(working copy)
@@ -231,7 +231,7 @@
   /** Close all indexes */
   protected void closeAll() throws Exception {
     // close and nullify everything
-    IOUtils.close(taxoReader, indexReader, searcher);
+    IOUtils.close(taxoReader, indexReader);
     taxoReader = null;
     indexReader = null;
     searcher = null;
Index: modules/facet/src/test/org/apache/lucene/facet/search/association/AssociationsFacetRequestTest.java
===================================================================
--- modules/facet/src/test/org/apache/lucene/facet/search/association/AssociationsFacetRequestTest.java	(revision 1213115)
+++ modules/facet/src/test/org/apache/lucene/facet/search/association/AssociationsFacetRequestTest.java	(working copy)
@@ -126,7 +126,6 @@
     assertEquals("Wrong count for category 'a'!",200, (int) res.get(0).getFacetResultNode().getValue());
     assertEquals("Wrong count for category 'b'!",150, (int) res.get(1).getFacetResultNode().getValue());
     
-    searcher.close();
     taxo.close();
   }
   
@@ -152,7 +151,6 @@
     assertEquals("Wrong count for category 'a'!",50f, (float) res.get(0).getFacetResultNode().getValue(), 0.00001);
     assertEquals("Wrong count for category 'b'!",10f, (float) res.get(1).getFacetResultNode().getValue(), 0.00001);
     
-    searcher.close();
     taxo.close();
   }  
     
@@ -182,7 +180,6 @@
     } catch (RuntimeException e) {
       // ok - expected
     }
-    searcher.close();
     taxo.close();
   }  
 
Index: modules/facet/src/test/org/apache/lucene/facet/search/DrillDownTest.java
===================================================================
--- modules/facet/src/test/org/apache/lucene/facet/search/DrillDownTest.java	(revision 1213115)
+++ modules/facet/src/test/org/apache/lucene/facet/search/DrillDownTest.java	(working copy)
@@ -149,8 +149,6 @@
     Query q4 = DrillDown.query(defaultParams, fooQuery, new CategoryPath("b"));
     docs = searcher.search(q4, 100);
     assertEquals(10, docs.totalHits);
-    
-    searcher.close();
   }
   
   @Test
@@ -172,8 +170,6 @@
     Query q4 = DrillDown.query(fooQuery, new CategoryPath("b"));
     docs = searcher.search(q4, 100);
     assertEquals(10, docs.totalHits);
-    
-    searcher.close();
   }
   
   @AfterClass
Index: modules/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists.java
===================================================================
--- modules/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists.java	(revision 1213115)
+++ modules/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists.java	(working copy)
@@ -94,7 +94,6 @@
 
     tr.close();
     ir.close();
-    searcher.close();
     iw.close();
     tw.close();
     IOUtils.close(dirs[0]);
@@ -135,7 +134,6 @@
 
     tr.close();
     ir.close();
-    searcher.close();
     iw.close();
     tw.close();
     IOUtils.close(dirs[0]);
@@ -179,7 +177,6 @@
 
     tr.close();
     ir.close();
-    searcher.close();
     iw.close();
     tw.close();
     IOUtils.close(dirs[0]);
@@ -225,7 +222,6 @@
     assertPostingListExists("$composers", "Composers", ir);
     tr.close();
     ir.close();
-    searcher.close();
     iw.close();
     tw.close();
     IOUtils.close(dirs[0]);
@@ -270,7 +266,6 @@
 
     tr.close();
     ir.close();
-    searcher.close();
     iw.close();
     tw.close();
     IOUtils.close(dirs[0]);
Index: modules/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils.java
===================================================================
--- modules/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils.java	(revision 1213115)
+++ modules/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils.java	(working copy)
@@ -144,7 +144,6 @@
       Query q = new TermQuery(new Term(DocumentFactory.field, DocumentFactory.alphaTxt));
       IndexSearcher searcher = newSearcher(reader);
       searcher.search(q, collector);
-      searcher.close();
 
       ScoredDocIDs scoredDocIds = collector.getScoredDocIDs();
       OpenBitSet resultSet = new OpenBitSetDISI(scoredDocIds.getDocIDs().iterator(), reader.maxDoc());
Index: modules/queryparser/src/test/org/apache/lucene/queryparser/surround/query/BooleanQueryTst.java
===================================================================
--- modules/queryparser/src/test/org/apache/lucene/queryparser/surround/query/BooleanQueryTst.java	(revision 1213115)
+++ modules/queryparser/src/test/org/apache/lucene/queryparser/surround/query/BooleanQueryTst.java	(working copy)
@@ -127,7 +127,6 @@
     try {
       searcher.search(query, tc);
     } finally {
-      searcher.close();
       reader.close();
     }
     tc.checkNrHits();
Index: modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser.java
===================================================================
--- modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser.java	(revision 1213115)
+++ modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser.java	(working copy)
@@ -295,7 +295,6 @@
     IndexSearcher is = new IndexSearcher(ir);
     ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;
     assertEquals(1, hits.length);
-    is.close();
     ir.close();
     ramDir.close();
   }
Index: modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper.java
===================================================================
--- modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper.java	(revision 1213115)
+++ modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper.java	(working copy)
@@ -333,7 +333,6 @@
     IndexSearcher is = new IndexSearcher(ir);
     ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;
     assertEquals(1, hits.length);
-    is.close();
     ir.close();
     ramDir.close();
   }
Index: modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper.java
===================================================================
--- modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper.java	(revision 1213115)
+++ modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper.java	(working copy)
@@ -1269,7 +1269,6 @@
     Query q = new StandardQueryParser(new CannedAnalyzer()).parse("\"a\"", "field");
     assertTrue(q instanceof MultiPhraseQuery);
     assertEquals(1, s.search(q, 10).totalHits);
-    s.close();
     r.close();
     w.close();
     dir.close();
Index: modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestNumericQueryParser.java
===================================================================
--- modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestNumericQueryParser.java	(revision 1213115)
+++ modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestNumericQueryParser.java	(working copy)
@@ -488,7 +488,6 @@
   
   @AfterClass
   public static void afterClass() throws Exception {
-    searcher.close();
     searcher = null;
     reader.close();
     reader = null;
Index: modules/queryparser/src/test/org/apache/lucene/queryparser/xml/TestQueryTemplateManager.java
===================================================================
--- modules/queryparser/src/test/org/apache/lucene/queryparser/xml/TestQueryTemplateManager.java	(revision 1213115)
+++ modules/queryparser/src/test/org/apache/lucene/queryparser/xml/TestQueryTemplateManager.java	(working copy)
@@ -159,7 +159,6 @@
 
   @Override
   public void tearDown() throws Exception {
-    searcher.close();
     reader.close();
     dir.close();
     super.tearDown();
Index: modules/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser.java
===================================================================
--- modules/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser.java	(revision 1213115)
+++ modules/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser.java	(working copy)
@@ -84,7 +84,6 @@
   @AfterClass
   public static void afterClass() throws Exception {
     reader.close();
-    searcher.close();
     dir.close();
     reader = null;
     searcher = null;
Index: modules/queryparser/src/test/org/apache/lucene/queryparser/complexPhrase/TestComplexPhraseQuery.java
===================================================================
--- modules/queryparser/src/test/org/apache/lucene/queryparser/complexPhrase/TestComplexPhraseQuery.java	(revision 1213115)
+++ modules/queryparser/src/test/org/apache/lucene/queryparser/complexPhrase/TestComplexPhraseQuery.java	(working copy)
@@ -128,7 +128,6 @@
 
   @Override
   public void tearDown() throws Exception {
-    searcher.close();
     reader.close();
     rd.close();
     super.tearDown();
Index: modules/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase.java
===================================================================
--- modules/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase.java	(revision 1213115)
+++ modules/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase.java	(working copy)
@@ -1095,7 +1095,6 @@
     QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, "f", a);
     Query q = qp.parse("\"wizard of ozzy\"");
     assertEquals(1, s.search(q, 1).totalHits);
-    s.close();
     r.close();
     dir.close();
   }
Index: modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest.java
===================================================================
--- modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest.java	(revision 1213115)
+++ modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest.java	(working copy)
@@ -80,7 +80,6 @@
   
   @Override
   public void tearDown() throws Exception {
-    searcher.close();
     reader.close();
     directory.close();
     super.tearDown();
Index: modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestKeywordAnalyzer.java
===================================================================
--- modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestKeywordAnalyzer.java	(revision 1213115)
+++ modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestKeywordAnalyzer.java	(working copy)
@@ -63,7 +63,6 @@
   
   @Override
   public void tearDown() throws Exception {
-    searcher.close();
     reader.close();
     directory.close();
     super.tearDown();
Index: modules/benchmark/src/test/org/apache/lucene/benchmark/quality/TestQualityRun.java
===================================================================
--- modules/benchmark/src/test/org/apache/lucene/benchmark/quality/TestQualityRun.java	(revision 1213115)
+++ modules/benchmark/src/test/org/apache/lucene/benchmark/quality/TestQualityRun.java	(working copy)
@@ -135,7 +135,6 @@
       assertTrue("avg p_at_"+j+" should be hurt: "+avg.getPrecisionAt(j), 1.0 > avg.getPrecisionAt(j));
     }
     
-    searcher.close();
     reader.close();
     dir.close();
   }
Index: modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest.java
===================================================================
--- modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest.java	(revision 1213115)
+++ modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest.java	(working copy)
@@ -92,7 +92,6 @@
     IndexSearcher searcher = new IndexSearcher(reader);
     TopDocs td = searcher.search(new TermQuery(new Term("key", "value")), 10);
     assertEquals(numExpectedResults, td.totalHits);
-    searcher.close();
     reader.close();
   }
   
Index: modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest.java
===================================================================
--- modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest.java	(revision 1213115)
+++ modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest.java	(working copy)
@@ -160,7 +160,7 @@
       }
       assertEquals("Wrong field value", storedField, searcher.doc(0).get(storedField));
     } finally {
-      IOUtils.close(searcher, reader, runData);
+      IOUtils.close(reader, runData);
     }
 
   }
Index: modules/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver.java
===================================================================
--- modules/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver.java	(revision 1213115)
+++ modules/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver.java	(working copy)
@@ -88,7 +88,6 @@
     // print an avarage sum of the results
     QualityStats avg = QualityStats.average(stats);
     avg.log("SUMMARY", 2, logger, "  ");
-    searcher.close();
     reader.close();
     dir.close();
   }
Index: modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask.java
===================================================================
--- modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask.java	(revision 1213115)
+++ modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask.java	(working copy)
@@ -179,7 +179,6 @@
     }
 
     if (closeSearcher) {
-      searcher.close();
       reader.close();
     } else {
       // Release our +1 ref from above
Index: modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData.java
===================================================================
--- modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData.java	(revision 1213115)
+++ modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData.java	(working copy)
@@ -126,7 +126,7 @@
   }
   
   public void close() throws IOException {
-    IOUtils.close(indexWriter, indexReader, indexSearcher, directory, 
+    IOUtils.close(indexWriter, indexReader, directory, 
                   taxonomyWriter, taxonomyReader, taxonomyDir, 
                   docMaker, facetSource);
   }
Index: modules/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest.java
===================================================================
--- modules/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest.java	(revision 1213115)
+++ modules/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest.java	(working copy)
@@ -364,7 +364,6 @@
             assertEquals(expectedGroupHeads[i], actualGroupHeads[i]);
           }
         }
-        s.close();
       } finally {
         FieldCache.DEFAULT.purge(r);
       }
Index: modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping.java
===================================================================
--- modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping.java	(revision 1213115)
+++ modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping.java	(working copy)
@@ -1139,8 +1139,6 @@
           assertEquals(docIDToIDBlocks, expectedGroups, groupsResultBlocks, false, true, true, getScores, false);
           assertEquals(docIDToIDBlocks, expectedGroups, topGroupsBlockShards, false, false, fillFields, getScores, false);
         }
-        s.close();
-        sBlocks.close();
       } finally {
         FieldCache.DEFAULT.purge(r);
         if (rBlocks != null) {
Index: modules/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java
===================================================================
--- modules/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java	(revision 1213115)
+++ modules/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java	(working copy)
@@ -131,7 +131,6 @@
     Document parentDoc = s.doc(group.groupValue);
     assertEquals("Lisa", parentDoc.get("name"));
 
-    s.close();
     r.close();
     dir.close();
   }
@@ -149,7 +148,6 @@
     bq.setBoost(2f); // we boost the BQ
     bq.add(q, BooleanClause.Occur.MUST);
     s.search(bq, 10);
-    s.close();
     r.close();
     dir.close();
   }
@@ -460,9 +458,7 @@
       }
     }
 
-    s.close();
     r.close();
-    joinS.close();
     joinR.close();
     dir.close();
     joinDir.close();
@@ -594,7 +590,6 @@
     assertEquals("Lisa", parentDoc.get("name"));
 
 
-    s.close();
     r.close();
     dir.close();
   }
@@ -619,7 +614,6 @@
     Weight weight = s.createNormalizedWeight(q);
     DocIdSetIterator disi = weight.scorer(ReaderUtil.leaves(s.getIndexReader().getTopReaderContext())[0], true, true, null);
     assertEquals(1, disi.advance(1));
-    s.close();
     r.close();
     dir.close();
   }
@@ -654,7 +648,6 @@
     Weight weight = s.createNormalizedWeight(q);
     DocIdSetIterator disi = weight.scorer(ReaderUtil.leaves(s.getIndexReader().getTopReaderContext())[0], true, true, null);
     assertEquals(2, disi.advance(0));
-    s.close();
     r.close();
     dir.close();
   }
Index: modules/queries/src/test/org/apache/lucene/queries/ChainedFilterTest.java
===================================================================
--- modules/queries/src/test/org/apache/lucene/queries/ChainedFilterTest.java	(revision 1213115)
+++ modules/queries/src/test/org/apache/lucene/queries/ChainedFilterTest.java	(working copy)
@@ -94,7 +94,6 @@
 
   @Override
   public void tearDown() throws Exception {
-    searcher.close();
     reader.close();
     directory.close();
     super.tearDown();
@@ -211,7 +210,6 @@
   
     // throws java.lang.ClassCastException: org.apache.lucene.util.OpenBitSet cannot be cast to java.util.BitSet
     searcher.search(new MatchAllDocsQuery(), cf, 1);
-    searcher.close();
     reader.close();
     dir.close();
   }
Index: modules/queries/src/test/org/apache/lucene/queries/function/TestOrdValues.java
===================================================================
--- modules/queries/src/test/org/apache/lucene/queries/function/TestOrdValues.java	(revision 1213115)
+++ modules/queries/src/test/org/apache/lucene/queries/function/TestOrdValues.java	(working copy)
@@ -92,7 +92,6 @@
       }
       prevID = resID;
     }
-    s.close();
     r.close();
   }
 
@@ -139,7 +138,6 @@
               : id2String(i + 1);     // reverse  ==> smaller values first
       assertTrue("id of result " + i + " shuould be " + expectedId + " != " + score, expectedId.equals(id));
     }
-    s.close();
     r.close();
   }
   
Index: modules/queries/src/test/org/apache/lucene/queries/function/TestFieldScoreQuery.java
===================================================================
--- modules/queries/src/test/org/apache/lucene/queries/function/TestFieldScoreQuery.java	(revision 1213115)
+++ modules/queries/src/test/org/apache/lucene/queries/function/TestFieldScoreQuery.java	(working copy)
@@ -95,7 +95,6 @@
       assertTrue("res id "+resID+" should be < prev res id "+prevID, resID.compareTo(prevID)<0);
       prevID = resID;
     }
-    s.close();
     r.close();
   }
 
@@ -143,7 +142,6 @@
       float expectedScore = expectedFieldScore(id); // "ID7" --> 7.0
       assertEquals("score of " + id + " shuould be " + expectedScore + " != " + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);
     }
-    s.close();
     r.close();
   }
 
Index: modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery.java
===================================================================
--- modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery.java	(revision 1213115)
+++ modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery.java	(working copy)
@@ -208,7 +208,6 @@
       final float score = hits.scoreDocs[i].score;
       assertEquals("doc=" + doc, (float) 1+(4*doc) % N_DOCS, score, 0.0001);
     }
-    s.close();
     r.close();
   }
   
@@ -232,7 +231,6 @@
     assertEquals(s.search(q,1).totalHits, s.search(original,1).totalHits);
     assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);
     
-    s.close();
     r.close();
   }
   
@@ -290,7 +288,6 @@
     verifyResults(boost, s, 
         h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,
         q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);
-    s.close();
     r.close();
   }
 
Index: modules/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis.java
===================================================================
--- modules/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis.java	(revision 1213115)
+++ modules/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis.java	(working copy)
@@ -59,7 +59,6 @@
   @Override
   public void tearDown() throws Exception {
     reader.close();
-    searcher.close();
     directory.close();
     super.tearDown();
   }
Index: lucene/src/test/org/apache/lucene/TestExternalCodecs.java
===================================================================
--- lucene/src/test/org/apache/lucene/TestExternalCodecs.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/TestExternalCodecs.java	(working copy)
@@ -96,7 +96,6 @@
     assertEquals(NUM_DOCS-1, s.search(new TermQuery(new Term("field1", "standard")), 1).totalHits);
     assertEquals(NUM_DOCS-1, s.search(new TermQuery(new Term("field2", "pulsing")), 1).totalHits);
     r.close();
-    s.close();
 
     if (VERBOSE) {
       System.out.println("\nTEST: now delete 2nd doc");
@@ -114,7 +113,6 @@
     assertEquals(0, s.search(new TermQuery(new Term("id", "44")), 1).totalHits);
 
     r.close();
-    s.close();
 
     w.close();
 
Index: lucene/src/test/org/apache/lucene/TestSearch.java
===================================================================
--- lucene/src/test/org/apache/lucene/TestSearch.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/TestSearch.java	(working copy)
@@ -122,7 +122,6 @@
           out.println(i + " " + hits[i].score + " " + d.get("contents"));
         }
       }
-      searcher.close();
       reader.close();
       directory.close();
   }
Index: lucene/src/test/org/apache/lucene/store/TestRAMDirectory.java
===================================================================
--- lucene/src/test/org/apache/lucene/store/TestRAMDirectory.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/store/TestRAMDirectory.java	(working copy)
@@ -90,7 +90,6 @@
 
     // cleanup
     reader.close();
-    searcher.close();
   }
   
   private final int numThreads = 10;
Index: lucene/src/test/org/apache/lucene/store/TestWindowsMMap.java
===================================================================
--- lucene/src/test/org/apache/lucene/store/TestWindowsMMap.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/store/TestWindowsMMap.java	(working copy)
@@ -90,7 +90,6 @@
       writer.addDocument(doc);
     }
     
-    searcher.close();
     reader.close();
     writer.close();
     rmDir(dirPath);
Index: lucene/src/test/org/apache/lucene/store/TestLockFactory.java
===================================================================
--- lucene/src/test/org/apache/lucene/store/TestLockFactory.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/store/TestLockFactory.java	(working copy)
@@ -363,7 +363,6 @@
                 }
                 // System.out.println(hits.length() + " total results");
                 try {
-                  searcher.close();
                   reader.close();
                 } catch (IOException e) {
                   hitException = true;
Index: lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput.java
===================================================================
--- lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput.java	(working copy)
@@ -274,7 +274,6 @@
         assertEquals(36, hits.length);
         
         reader.close();
-        searcher.close();
         
         dir.tweakBufferSizes();
         writer.deleteDocuments(new Term("id", "4"));
@@ -292,7 +291,6 @@
         dir.tweakBufferSizes();
         assertEquals(35, hits.length);
         writer.close();
-        searcher.close();
         reader.close();
       } finally {
         _TestUtil.rmDir(indexDir);
Index: lucene/src/test/org/apache/lucene/TestDemo.java
===================================================================
--- lucene/src/test/org/apache/lucene/TestDemo.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/TestDemo.java	(working copy)
@@ -73,7 +73,6 @@
     phraseQuery.add(new Term("fieldname", "be"));
     assertEquals(1, isearcher.search(phraseQuery, null, 1).totalHits);
 
-    isearcher.close();
     ireader.close();
     directory.close();
   }
Index: lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2.java	(working copy)
@@ -139,7 +139,6 @@
         assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);
       }
     }
-    searcher.close();
     r.close();
     dir.close();
   }
Index: lucene/src/test/org/apache/lucene/search/TestTimeLimitingCollector.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestTimeLimitingCollector.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestTimeLimitingCollector.java	(working copy)
@@ -107,7 +107,6 @@
 
   @Override
   public void tearDown() throws Exception {
-    searcher.close();
     reader.close();
     directory.close();
     counterThread.stopTimer();
Index: lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter.java	(working copy)
@@ -179,7 +179,6 @@
     writer.addDocument(doc);
 
     reader = refreshReader(reader);
-    searcher.close();
     searcher = newSearcher(reader, false);
 
     TopDocs docs = searcher.search(new MatchAllDocsQuery(), 1);
@@ -205,7 +204,6 @@
 
     writer.addDocument(doc);
     reader = refreshReader(reader);
-    searcher.close();
     searcher = newSearcher(reader, false);
         
     docs = searcher.search(new MatchAllDocsQuery(), filter, 1);
@@ -227,7 +225,6 @@
     writer.deleteDocuments(new Term("id", "1"));
 
     reader = refreshReader(reader);
-    searcher.close();
     searcher = newSearcher(reader, false);
 
     docs = searcher.search(new MatchAllDocsQuery(), filter, 1);
@@ -245,7 +242,6 @@
     assertTrue(oldReader != null);
     assertTrue(oldReader2 != null);
 
-    searcher.close();
     reader.close();
     writer.close();
     dir.close();
Index: lucene/src/test/org/apache/lucene/search/TestPrefixFilter.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestPrefixFilter.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestPrefixFilter.java	(working copy)
@@ -101,7 +101,6 @@
     assertEquals(0, hits.length);
     
     writer.close();
-    searcher.close();
     reader.close();
     directory.close();
   }
Index: lucene/src/test/org/apache/lucene/search/TestAutomatonQueryUnicode.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestAutomatonQueryUnicode.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestAutomatonQueryUnicode.java	(working copy)
@@ -86,7 +86,6 @@
 
   @Override
   public void tearDown() throws Exception {
-    searcher.close();
     reader.close();
     directory.close();
     super.tearDown();
Index: lucene/src/test/org/apache/lucene/search/TestBooleanQuery.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestBooleanQuery.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestBooleanQuery.java	(working copy)
@@ -140,7 +140,6 @@
     dmq.add(pq);
     assertEquals(1, s.search(dmq, 10).totalHits);
     
-    s.close();
     r.close();
     w.close();
     dir.close();
Index: lucene/src/test/org/apache/lucene/search/TestSort.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestSort.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestSort.java	(working copy)
@@ -334,9 +334,6 @@
     full.reader.close();
     searchX.reader.close();
     searchY.reader.close();
-    full.close();
-    searchX.close();
-    searchY.close();
     for (Directory dir : dirs)
       dir.close();
     super.tearDown();
@@ -559,7 +556,6 @@
     }
     assertFalse("Found sort results out of order", fail);
     searcher.getIndexReader().close();
-    searcher.close();
   }
   
   /** 
@@ -816,7 +812,6 @@
                   new SortField ("string", SortField.Type.STRING),
                   new SortField ("float", SortField.Type.FLOAT, true) );
     assertMatches (parallelSearcher, queryG, sort, "ZYXW");
-    parallelSearcher.close();
     exec.shutdown();
     exec.awaitTermination(1000, TimeUnit.MILLISECONDS);
   }
@@ -855,7 +850,6 @@
                                        new IndexReader[] {searchX.getIndexReader(),
                                                           searchY.getIndexReader()}), exec);
     runMultiSorts(searcher, false);
-    searcher.close();
     exec.shutdown();
     exec.awaitTermination(1000, TimeUnit.MILLISECONDS);
   }
@@ -1284,7 +1278,6 @@
     // null sorts first
     assertEquals(1, hits.scoreDocs[0].doc);
     assertEquals(0, hits.scoreDocs[1].doc);
-    s.close();
     r.close();
     dir.close();
   }
@@ -1308,7 +1301,6 @@
     IndexReader reader = IndexReader.open(indexStore);
     IndexSearcher searcher = new IndexSearcher(reader);
     searcher.search(new MatchAllDocsQuery(), null, 500, sort);
-    searcher.close();
     reader.close();
     indexStore.close();
   }
@@ -1329,7 +1321,6 @@
     TotalHitCountCollector c = new TotalHitCountCollector();
     searcher.search(new MatchAllDocsQuery(), null, c);
     assertEquals(5, c.getTotalHits());
-    searcher.close();
     reader.close();
     indexStore.close();
   }
Index: lucene/src/test/org/apache/lucene/search/TestWildcardRandom.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestWildcardRandom.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestWildcardRandom.java	(working copy)
@@ -100,7 +100,6 @@
 
   @Override
   public void tearDown() throws Exception {
-    searcher.close();
     reader.close();
     dir.close();
     super.tearDown();
Index: lucene/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery.java	(working copy)
@@ -129,7 +129,6 @@
 
   @AfterClass
   public static void afterClass() throws Exception {
-    searcher.close();
     searcher = null;
     reader.close();
     reader = null;
Index: lucene/src/test/org/apache/lucene/search/payloads/TestPayloadTermQuery.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/payloads/TestPayloadTermQuery.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/payloads/TestPayloadTermQuery.java	(working copy)
@@ -141,7 +141,6 @@
 
   @AfterClass
   public static void afterClass() throws Exception {
-    searcher.close();
     searcher = null;
     reader.close();
     reader = null;
@@ -271,7 +270,6 @@
     while (spans.next()) {
       count++;
     }
-    theSearcher.close();
     reader.close();
   }
 
Index: lucene/src/test/org/apache/lucene/search/TestDocValuesScoring.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestDocValuesScoring.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestDocValuesScoring.java	(working copy)
@@ -133,9 +133,6 @@
     
     assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score, SCORE_EPSILON);
 
-    
-    searcher1.close();
-    searcher2.close();
     ir.close();
     dir.close();
   }
Index: lucene/src/test/org/apache/lucene/search/TestQueryWrapperFilter.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestQueryWrapperFilter.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestQueryWrapperFilter.java	(working copy)
@@ -81,7 +81,6 @@
     assertEquals(0, hits.totalHits);
     hits = searcher.search(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf), 10);
     assertEquals(0, hits.totalHits);
-    searcher.close();
     reader.close();
     dir.close();
   }
@@ -148,7 +147,6 @@
       assertEquals(1, td.totalHits);
     }
     
-    searcher.close();
     reader.close();
     dir.close();
   }
Index: lucene/src/test/org/apache/lucene/search/TestTermVectors.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestTermVectors.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestTermVectors.java	(working copy)
@@ -79,7 +79,6 @@
   
   @Override
   public void tearDown() throws Exception {
-    searcher.close();
     reader.close();
     directory.close();
     super.tearDown();
Index: lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery.java	(working copy)
@@ -73,7 +73,6 @@
       TopDocs nrTopDocs = searcher.search(tq, 1);
       assertEquals("Returned count for NumericRangeQuery and TermRangeQuery must be equal", trTopDocs.totalHits, nrTopDocs.totalHits );
     }
-    searcher.close();
     reader.close();
     directory.close();
   }
Index: lucene/src/test/org/apache/lucene/search/TestTopDocsCollector.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestTopDocsCollector.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestTopDocsCollector.java	(working copy)
@@ -98,7 +98,6 @@
     IndexSearcher searcher = newSearcher(reader);
     TopDocsCollector<ScoreDoc> tdc = new MyTopsDocCollector(numResults);
     searcher.search(q, tdc);
-    searcher.close();
     return tdc;
   }
   
Index: lucene/src/test/org/apache/lucene/search/TestTermScorer.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestTermScorer.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestTermScorer.java	(working copy)
@@ -65,7 +65,6 @@
   
   @Override
   public void tearDown() throws Exception {
-    indexSearcher.close();
     indexReader.close();
     directory.close();
     super.tearDown();
Index: lucene/src/test/org/apache/lucene/search/TestPhrasePrefixQuery.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestPhrasePrefixQuery.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestPhrasePrefixQuery.java	(working copy)
@@ -93,7 +93,6 @@
     
     result = searcher.search(query2, null, 1000).scoreDocs;
     assertEquals(0, result.length);
-    searcher.close();
     reader.close();
     indexStore.close();
   }
Index: lucene/src/test/org/apache/lucene/search/TestAutomatonQuery.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestAutomatonQuery.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestAutomatonQuery.java	(working copy)
@@ -67,7 +67,6 @@
   
   @Override
   public void tearDown() throws Exception {
-    searcher.close();
     reader.close();
     directory.close();
     super.tearDown();
Index: lucene/src/test/org/apache/lucene/search/TestConstantScoreQuery.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestConstantScoreQuery.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestConstantScoreQuery.java	(working copy)
@@ -125,7 +125,6 @@
       checkHits(searcher, bq, csq1.getBoost() + csq2.getBoost(), bucketScorerClass, null);
       checkHits(searcher, csqbq, csqbq.getBoost(), ConstantScoreQuery.ConstantScorer.class.getName(), bucketScorerClass);
     } finally {
-      if (searcher != null) searcher.close();
       if (reader != null) reader.close();
       if (directory != null) directory.close();
     }
Index: lucene/src/test/org/apache/lucene/search/TestRegexpRandom2.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestRegexpRandom2.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestRegexpRandom2.java	(working copy)
@@ -95,8 +95,6 @@
   @Override
   public void tearDown() throws Exception {
     reader.close();
-    searcher1.close();
-    searcher2.close();
     dir.close();
     super.tearDown();
   }
Index: lucene/src/test/org/apache/lucene/search/TestFilteredSearch.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestFilteredSearch.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestFilteredSearch.java	(working copy)
@@ -82,7 +82,6 @@
       IndexSearcher indexSearcher = new IndexSearcher(reader);
       ScoreDoc[] hits = indexSearcher.search(booleanQuery, filter, 1000).scoreDocs;
       assertEquals("Number of matched documents", 1, hits.length);
-      indexSearcher.close();
       reader.close();
     }
     catch (IOException e) {
Index: lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery.java	(working copy)
@@ -163,7 +163,6 @@
   
   @Override
   public void tearDown() throws Exception {
-    s.close();
     r.close();
     index.close();
     super.tearDown();
Index: lucene/src/test/org/apache/lucene/search/TestSearchAfter.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestSearchAfter.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestSearchAfter.java	(working copy)
@@ -54,7 +54,6 @@
 
   @Override
   public void tearDown() throws Exception {
-    searcher.close();
     reader.close();
     dir.close();
     super.tearDown();
Index: lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter.java	(working copy)
@@ -122,7 +122,6 @@
 
     result = search.search(q,FieldCacheRangeFilter.newStringRange("id",medIP,medIP,T,T), numDocs).scoreDocs;
     assertEquals("med,med,T,T", 1, result.length);
-    search.close();
   }
 
   @Test
@@ -185,7 +184,6 @@
     assertEquals("max,max,T,T", 1, result.length);
     result = search.search(q,FieldCacheRangeFilter.newStringRange("rand",maxRP,null,T,F), numDocs).scoreDocs;
     assertEquals("max,nul,T,T", 1, result.length);
-    search.close();
   }
   
   // byte-ranges cannot be tested, because all ranges are too big for bytes, need an extra range for that
@@ -278,7 +276,6 @@
     assertEquals("overflow special case", 0, result.length);
     result = search.search(q,FieldCacheRangeFilter.newShortRange("id",maxIdO,minIdO,T,T), numDocs).scoreDocs;
     assertEquals("inverse range", 0, result.length);
-    search.close();
   }
   
   @Test
@@ -370,7 +367,6 @@
     assertEquals("overflow special case", 0, result.length);
     result = search.search(q,FieldCacheRangeFilter.newIntRange("id",maxIdO,minIdO,T,T), numDocs).scoreDocs;
     assertEquals("inverse range", 0, result.length);
-    search.close();
   }
   
   @Test
@@ -462,7 +458,6 @@
     assertEquals("overflow special case", 0, result.length);
     result = search.search(q,FieldCacheRangeFilter.newLongRange("id",maxIdO,minIdO,T,T), numDocs).scoreDocs;
     assertEquals("inverse range", 0, result.length);
-    search.close();
   }
   
   // float and double tests are a bit minimalistic, but its complicated, because missing precision
@@ -494,7 +489,6 @@
     assertEquals("infinity special case", 0, result.length);
     result = search.search(q,FieldCacheRangeFilter.newFloatRange("id",null,Float.valueOf(Float.NEGATIVE_INFINITY),F,F), numDocs).scoreDocs;
     assertEquals("infinity special case", 0, result.length);
-    search.close();
   }
   
   @Test
@@ -524,7 +518,6 @@
     assertEquals("infinity special case", 0, result.length);
     result = search.search(q,FieldCacheRangeFilter.newDoubleRange("id",null, Double.valueOf(Double.NEGATIVE_INFINITY),F,F), numDocs).scoreDocs;
     assertEquals("infinity special case", 0, result.length);
-    search.close();
   }
   
   // test using a sparse index (with deleted docs).
@@ -565,7 +558,6 @@
 
     result = search.search(q,FieldCacheRangeFilter.newByteRange("id",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;
     assertEquals("find all", 11, result.length);
-    search.close();
     reader.close();
     dir.close();
   }
Index: lucene/src/test/org/apache/lucene/search/TestRegexpRandom.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestRegexpRandom.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestRegexpRandom.java	(working copy)
@@ -95,7 +95,6 @@
 
   @Override
   public void tearDown() throws Exception {
-    searcher.close();
     reader.close();
     dir.close();
     super.tearDown();
Index: lucene/src/test/org/apache/lucene/search/TestTopScoreDocCollector.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestTopScoreDocCollector.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestTopScoreDocCollector.java	(working copy)
@@ -61,7 +61,6 @@
       }
     }
     writer.close();
-    searcher.close();
     reader.close();
     dir.close();
   }
Index: lucene/src/test/org/apache/lucene/search/TestPrefixRandom.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestPrefixRandom.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestPrefixRandom.java	(working copy)
@@ -75,7 +75,6 @@
   @Override
   public void tearDown() throws Exception {
     reader.close();
-    searcher.close();
     dir.close();
     super.tearDown();
   }
Index: lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32.java	(working copy)
@@ -96,7 +96,6 @@
   
   @AfterClass
   public static void afterClass() throws Exception {
-    searcher.close();
     searcher = null;
     reader.close();
     reader = null;
@@ -335,7 +334,6 @@
     topDocs = s.search(q, 10);
     assertEquals("Score doc count", TestNumericUtils.FLOAT_NANs.length,  topDocs.scoreDocs.length );
 
-    s.close();
     r.close();
     dir.close();
   }
Index: lucene/src/test/org/apache/lucene/search/similarities/TestSimilarityBase.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/similarities/TestSimilarityBase.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/similarities/TestSimilarityBase.java	(working copy)
@@ -577,7 +577,6 @@
   
   @Override
   public void tearDown() throws Exception {
-    searcher.close();
     reader.close();
     dir.close();
     super.tearDown();
Index: lucene/src/test/org/apache/lucene/search/similarities/TestSimilarity2.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/similarities/TestSimilarity2.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/similarities/TestSimilarity2.java	(working copy)
@@ -91,7 +91,6 @@
       is.setSimilarityProvider(simProvider);
       assertEquals(0, is.search(new TermQuery(new Term("foo", "bar")), 10).totalHits);
     }
-    is.close();
     ir.close();
     dir.close();
   }
@@ -114,7 +113,6 @@
       query.add(new TermQuery(new Term("bar", "baz")), BooleanClause.Occur.SHOULD);
       assertEquals(1, is.search(query, 10).totalHits);
     }
-    is.close();
     ir.close();
     dir.close();
   }
@@ -137,7 +135,6 @@
       query.add(new TermQuery(new Term("foo", "baz")), BooleanClause.Occur.SHOULD);
       assertEquals(1, is.search(query, 10).totalHits);
     }
-    is.close();
     ir.close();
     dir.close();
   }
@@ -162,7 +159,6 @@
       query.add(new TermQuery(new Term("foo", "bar")), BooleanClause.Occur.SHOULD);
       assertEquals(1, is.search(query, 10).totalHits);
     }
-    is.close();
     ir.close();
     dir.close();
   }
@@ -188,7 +184,6 @@
       query.add(new TermQuery(new Term("foo", "bar")), BooleanClause.Occur.SHOULD);
       assertEquals(1, is.search(query, 10).totalHits);
     }
-    is.close();
     ir.close();
     dir.close();
   }
@@ -215,7 +210,6 @@
       query.add(new TermQuery(new Term("foo", "bar")), BooleanClause.Occur.SHOULD);
       assertEquals(1, is.search(query, 10).totalHits);
     }
-    is.close();
     ir.close();
     dir.close();
   }
@@ -247,7 +241,6 @@
       assertTrue(score >= 0.0f);
       assertFalse("inf score for " + simProvider, Float.isInfinite(score));
     }
-    is.close();
     ir.close();
     dir.close();
   }
Index: lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery.java	(working copy)
@@ -142,7 +142,6 @@
     }
     
     writer.close();
-    searcher.close();
     reader.close();
     indexStore.close();
   }
@@ -162,7 +161,6 @@
     q.add(new Term("body", "chocolate"));
     q.add(new Term[] {new Term("body", "pie"), new Term("body", "tart")});
     assertEquals(2, searcher.search(q, 1).totalHits);
-    searcher.close();
     r.close();
     indexStore.close();
   }
@@ -205,7 +203,6 @@
     searcher.explain(q, 0);
     
     writer.close();
-    searcher.close();
     reader.close();
     indexStore.close();
   }
@@ -233,7 +230,6 @@
     ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;
     assertEquals("Wrong number of hits", 0, hits.length);
     writer.close();
-    searcher.close();
     reader.close();
     indexStore.close();
   }
@@ -256,7 +252,6 @@
     searcher.explain(q, 0);
     
     writer.close();
-    searcher.close();
     reader.close();
     indexStore.close();
   }
@@ -330,7 +325,6 @@
     assertEquals(10f * 10f, weight.getValueForNormalization(), 0.001f);
 
     writer.close();
-    searcher.close();
     reader.close();
     indexStore.close();
   }
Index: lucene/src/test/org/apache/lucene/search/TestPrefixQuery.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestPrefixQuery.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestPrefixQuery.java	(working copy)
@@ -61,7 +61,6 @@
     hits = searcher.search(query, null, 1000).scoreDocs;
     assertEquals("everything", 3, hits.length);
     writer.close();
-    searcher.close();
     reader.close();
     directory.close();
   }
Index: lucene/src/test/org/apache/lucene/search/TestFilteredQuery.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestFilteredQuery.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestFilteredQuery.java	(working copy)
@@ -104,7 +104,6 @@
 
   @Override
   public void tearDown() throws Exception {
-    searcher.close();
     reader.close();
     directory.close();
     super.tearDown();
Index: lucene/src/test/org/apache/lucene/search/TestNot.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestNot.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestNot.java	(working copy)
@@ -51,7 +51,6 @@
     ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;
     assertEquals(0, hits.length);
     writer.close();
-    searcher.close();
     reader.close();
     store.close();
   }
Index: lucene/src/test/org/apache/lucene/search/TestPhraseQuery.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestPhraseQuery.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestPhraseQuery.java	(working copy)
@@ -98,7 +98,6 @@
 
   @AfterClass
   public static void afterClass() throws Exception {
-    searcher.close();
     searcher = null;
     reader.close();
     reader = null;
@@ -249,7 +248,6 @@
     QueryUtils.check(random, query,searcher);
 
 
-    searcher.close();
     reader.close();
     directory.close();
   }
@@ -289,7 +287,6 @@
     QueryUtils.check(random, termQuery,searcher);
 
     
-    searcher.close();
     reader.close();
     
     writer = new RandomIndexWriter(random, directory, 
@@ -336,7 +333,6 @@
     QueryUtils.check(random, booleanQuery,searcher);
 
     
-    searcher.close();
     reader.close();
     directory.close();
   }
@@ -380,7 +376,6 @@
     assertEquals(0.31, hits[2].score, 0.01);
     assertEquals(2, hits[2].doc);
     QueryUtils.check(random, query,searcher);
-    searcher.close();
     reader.close();
     directory.close();
   }
@@ -695,7 +690,6 @@
     }
 
     reader.close();
-    s.close();
     dir.close();
   }
 }
Index: lucene/src/test/org/apache/lucene/search/TestPositionIncrement.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestPositionIncrement.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestPositionIncrement.java	(working copy)
@@ -196,7 +196,6 @@
     hits = searcher.search(q, null, 1000).scoreDocs;
     assertEquals(0, hits.length);
     
-    searcher.close();
     reader.close();
     store.close();
   }
Index: lucene/src/test/org/apache/lucene/search/TestTermRangeQuery.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestTermRangeQuery.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestTermRangeQuery.java	(working copy)
@@ -59,7 +59,6 @@
     IndexSearcher searcher = new IndexSearcher(reader);
     ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;
     assertEquals("A,B,C,D, only B in range", 1, hits.length);
-    searcher.close();
     reader.close();
 
     initializeIndex(new String[] {"A", "B", "D"});
@@ -67,7 +66,6 @@
     searcher = new IndexSearcher(reader);
     hits = searcher.search(query, null, 1000).scoreDocs;
     assertEquals("A,B,D, only B in range", 1, hits.length);
-    searcher.close();
     reader.close();
 
     addDoc("C");
@@ -75,7 +73,6 @@
     searcher = new IndexSearcher(reader);
     hits = searcher.search(query, null, 1000).scoreDocs;
     assertEquals("C added, still only B in range", 1, hits.length);
-    searcher.close();
     reader.close();
   }
   
@@ -87,7 +84,6 @@
     IndexSearcher searcher = new IndexSearcher(reader);
     ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;
     assertEquals("A,B,C,D - A,B,C in range", 3, hits.length);
-    searcher.close();
     reader.close();
 
     initializeIndex(new String[]{"A", "B", "D"});
@@ -95,7 +91,6 @@
     searcher = new IndexSearcher(reader);
     hits = searcher.search(query, null, 1000).scoreDocs;
     assertEquals("A,B,D - A and B in range", 2, hits.length);
-    searcher.close();
     reader.close();
 
     addDoc("C");
@@ -103,7 +98,6 @@
     searcher = new IndexSearcher(reader);
     hits = searcher.search(query, null, 1000).scoreDocs;
     assertEquals("C added - A, B, C in range", 3, hits.length);
-    searcher.close();
     reader.close();
   }
   
@@ -125,7 +119,6 @@
     query = TermRangeQuery.newStringRange("content", "B", null, true, false);
     assertTrue(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);
     assertEquals(3, searcher.search(query, null, 1000).scoreDocs.length);
-    searcher.close();
     reader.close();
   }
 
@@ -146,7 +139,6 @@
     } finally {
       BooleanQuery.setMaxClauseCount(savedClauseCount);
     }
-    searcher.close();
     reader.close();
   }
   
@@ -292,7 +284,6 @@
     // until Lucene-38 is fixed, use this assert:
     //assertEquals("A,B,<empty string>,C,D => A, B & <empty string> are in range", 2, hits.length());
 
-    searcher.close();
     reader.close();
     initializeIndex(new String[] {"A", "B", "", "D"}, analyzer);
     reader = IndexReader.open(dir);
@@ -302,7 +293,6 @@
     assertEquals("A,B,<empty string>,D => A, B & <empty string> are in range", 3, numHits);
     // until Lucene-38 is fixed, use this assert:
     //assertEquals("A,B,<empty string>,D => A, B & <empty string> are in range", 2, hits.length());
-    searcher.close();
     reader.close();
     addDoc("C");
     reader = IndexReader.open(dir);
@@ -312,7 +302,6 @@
     assertEquals("C added, still A, B & <empty string> are in range", 3, numHits);
     // until Lucene-38 is fixed, use this assert
     //assertEquals("C added, still A, B & <empty string> are in range", 2, hits.length());
-    searcher.close();
     reader.close();
   }
 
@@ -329,7 +318,6 @@
     assertEquals("A,B,<empty string>,C,D => A,B,<empty string>,C in range", 4, numHits);
     // until Lucene-38 is fixed, use this assert
     //assertEquals("A,B,<empty string>,C,D => A,B,<empty string>,C in range", 3, hits.length());
-    searcher.close();
     reader.close();
     initializeIndex(new String[]{"A", "B", "", "D"}, analyzer);
     reader = IndexReader.open(dir);
@@ -339,7 +327,6 @@
     assertEquals("A,B,<empty string>,D - A, B and <empty string> in range", 3, numHits);
     // until Lucene-38 is fixed, use this assert
     //assertEquals("A,B,<empty string>,D => A, B and <empty string> in range", 2, hits.length());
-    searcher.close();
     reader.close();
     addDoc("C");
     reader = IndexReader.open(dir);
@@ -349,7 +336,6 @@
     assertEquals("C added => A,B,<empty string>,C in range", 4, numHits);
     // until Lucene-38 is fixed, use this assert
     //assertEquals("C added => A,B,<empty string>,C in range", 3, hits.length());
-     searcher.close();
      reader.close();
   }
 }
Index: lucene/src/test/org/apache/lucene/search/TestSearchWithThreads.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestSearchWithThreads.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestSearchWithThreads.java	(working copy)
@@ -108,7 +108,6 @@
     
     if (VERBOSE) System.out.println(NUM_SEARCH_THREADS + " threads did " + netSearch.get() + " searches");
 
-    s.close();
     r.close();
     dir.close();
   }
Index: lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery.java	(working copy)
@@ -149,7 +149,6 @@
 
     //QueryUtils.check(query,searcher);
     writer.close();
-    searcher.close();
     reader.close();
     ramDir.close();
 
@@ -262,7 +261,6 @@
     assertEquals(3, is.search(pq, 4).totalHits);
     pq.setSlop(2);
     assertEquals(4, is.search(pq, 4).totalHits);
-    is.close();
     ir.close();
     dir.close();
   }
@@ -286,7 +284,6 @@
     pq.add(new Term("lyrics", "drug"), 3);
     pq.setSlop(1);
     assertSaneScoring(pq, is);
-    is.close();
     ir.close();
     dir.close();
   }
@@ -341,7 +338,6 @@
      pq.add(new Term("lyrics", "drug"), 3);
      pq.setSlop(5);
      assertSaneScoring(pq, is);
-     is.close();
      ir.close();
      dir.close();
   }
Index: lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch.java	(working copy)
@@ -73,7 +73,6 @@
     
     @AfterClass
     public static void afterClass() throws Exception {
-      s.close();
       s = null;
       r.close();
       r = null;
Index: lucene/src/test/org/apache/lucene/search/TestBooleanOr.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestBooleanOr.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestBooleanOr.java	(working copy)
@@ -158,7 +158,6 @@
 
   @Override
   public void tearDown() throws Exception {
-    searcher.close();
     reader.close();
     dir.close();
     super.tearDown();
Index: lucene/src/test/org/apache/lucene/search/TestDateSort.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestDateSort.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestDateSort.java	(working copy)
@@ -88,7 +88,6 @@
       String text = document.get(TEXT_FIELD);
       actualOrder[i] = text;
     }
-    searcher.close();
 
     // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).
     String[] expectedOrder = new String[5];
Index: lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore.java	(working copy)
@@ -161,7 +161,6 @@
           result[i].score, SCORE_COMP_THRESH);
     }
 
-    search.close();
   }
 
   @Test
@@ -247,7 +246,6 @@
     Assert.assertEquals(0, hits[0].doc);
     Assert.assertEquals(1, hits[1].doc);
     assertTrue(hits[0].score > hits[1].score);
-    search.close();
   }
 
   @Test
@@ -278,8 +276,6 @@
       assertEquals("mismatch in docid for hit#" + i, expected[i].doc,
           actual[i].doc);
     }
-
-    search.close();
   }
 
   @Test
@@ -412,8 +408,6 @@
 
     result = search.search(csrq("id", medIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;
     assertEquals("med,med,T,T", 1, result.length);
-    
-    search.close();
   }
 
   @Test
@@ -476,7 +470,5 @@
     assertEquals("max,max,T,T", 1, result.length);
     result = search.search(csrq("rand", maxRP, null, T, F), null, numDocs).scoreDocs;
     assertEquals("max,nul,T,T", 1, result.length);
-
-    search.close();
   }
 }
Index: lucene/src/test/org/apache/lucene/search/TestBooleanScorer.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestBooleanScorer.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestBooleanScorer.java	(working copy)
@@ -62,7 +62,6 @@
     IndexSearcher indexSearcher = newSearcher(ir);
     ScoreDoc[] hits = indexSearcher.search(query, null, 1000).scoreDocs;
     assertEquals("Number of matched documents", 2, hits.length);
-    indexSearcher.close();
     ir.close();
     directory.close();
   }
@@ -122,7 +121,6 @@
 
     assertEquals("should have only 1 hit", 1, hits.size());
     assertEquals("hit should have been docID=3000", 3000, hits.get(0).intValue());
-    searcher.close();
     ir.close();
     directory.close();
   }
@@ -176,7 +174,6 @@
 
     assertEquals(1, count[0]);
     
-    s.close();
     r.close();
     d.close();
   }
Index: lucene/src/test/org/apache/lucene/search/TestDocIdSet.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestDocIdSet.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestDocIdSet.java	(working copy)
@@ -121,7 +121,6 @@
     };
     
     Assert.assertEquals(0, searcher.search(new MatchAllDocsQuery(), f, 10).totalHits);
-    searcher.close();
     reader.close();
     dir.close();
   }
Index: lucene/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered.java	(working copy)
@@ -43,7 +43,6 @@
 
   @Override
   public void tearDown() throws Exception {
-    searcher.close();
     reader.close();
     directory.close();
     super.tearDown();
Index: lucene/src/test/org/apache/lucene/search/spans/TestSpanFirstQuery.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/spans/TestSpanFirstQuery.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/spans/TestSpanFirstQuery.java	(working copy)
@@ -60,7 +60,6 @@
     assertEquals(1, searcher.search(sfq, 10).totalHits);
     
     writer.close();
-    searcher.close();
     reader.close();
     dir.close();
   }
Index: lucene/src/test/org/apache/lucene/search/spans/TestBasics.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/spans/TestBasics.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/spans/TestBasics.java	(working copy)
@@ -125,7 +125,6 @@
 
   @AfterClass
   public static void afterClass() throws Exception {
-    searcher.close();
     reader.close();
     directory.close();
     searcher = null;
Index: lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery.java	(working copy)
@@ -119,7 +119,6 @@
 
   @AfterClass
   public static void afterClass() throws Exception {
-    searcher.close();
     searcher = null;
     reader.close();
     reader = null;
Index: lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced.java	(working copy)
@@ -74,7 +74,6 @@
   
   @Override
   public void tearDown() throws Exception {
-    searcher.close();
     reader.close();
     mDirectory.close();
     mDirectory = null;
Index: lucene/src/test/org/apache/lucene/search/spans/TestSpans.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/spans/TestSpans.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/spans/TestSpans.java	(working copy)
@@ -68,7 +68,6 @@
   
   @Override
   public void tearDown() throws Exception {
-    searcher.close();
     reader.close();
     directory.close();
     super.tearDown();
@@ -505,7 +504,6 @@
                  searcher.search(createSpan(0, true,                                 
                                             new SpanQuery[] {createSpan(4, false, "chased", "cat"),
                                                              createSpan("ate")}), 10).totalHits);
-    searcher.close();
     reader.close();
     dir.close();
   }
Index: lucene/src/test/org/apache/lucene/search/spans/TestSpanMultiTermQueryWrapper.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/spans/TestSpanMultiTermQueryWrapper.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/spans/TestSpanMultiTermQueryWrapper.java	(working copy)
@@ -59,7 +59,6 @@
   
   @Override
   public void tearDown() throws Exception {
-    searcher.close();
     reader.close();
     directory.close();
     super.tearDown();
Index: lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced2.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced2.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced2.java	(working copy)
@@ -65,7 +65,6 @@
   
   @Override
   public void tearDown() throws Exception {
-    searcher2.close();
     reader2.close();
     super.tearDown();
   }
Index: lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans.java	(working copy)
@@ -174,7 +174,6 @@
     spans = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), nestedSpanNearQuery);
     assertTrue("spans is null and it shouldn't be", spans != null);
     checkSpans(spans, 2, new int[]{3,3});
-    searcher.close();
     closeIndexReader.close();
     directory.close();
   }
@@ -207,7 +206,6 @@
 
     assertTrue("spans is null and it shouldn't be", spans != null);
     checkSpans(spans, 1, new int[]{3});
-    searcher.close();
     closeIndexReader.close();
     directory.close();
   }
@@ -245,7 +243,6 @@
     spans = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), nestedSpanNearQuery);
     assertTrue("spans is null and it shouldn't be", spans != null);
     checkSpans(spans, 2, new int[]{8, 8});
-    searcher.close();
     closeIndexReader.close();
     directory.close();
   }
@@ -284,7 +281,6 @@
     assertEquals(2, payloadSet.size());
     assertTrue(payloadSet.contains("a:Noise:10"));
     assertTrue(payloadSet.contains("k:Noise:11"));
-    is.close();
     reader.close();
     directory.close();
   }
@@ -321,7 +317,6 @@
     assertEquals(2, payloadSet.size());
     assertTrue(payloadSet.contains("a:Noise:10"));
     assertTrue(payloadSet.contains("k:Noise:11"));
-    is.close();
     reader.close();
     directory.close();
   }
@@ -364,7 +359,6 @@
     }
     assertTrue(payloadSet.contains("a:Noise:10"));
     assertTrue(payloadSet.contains("k:Noise:11"));
-    is.close();
     reader.close();
     directory.close();
   }
@@ -391,7 +385,6 @@
       if(VERBOSE)
         System.out.println(new String(bytes));
     }
-    searcher.close();
     reader.close();
     directory.close();
   }
Index: lucene/src/test/org/apache/lucene/search/TestSubScorerFreqs.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestSubScorerFreqs.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestSubScorerFreqs.java	(working copy)
@@ -61,7 +61,6 @@
   @AfterClass
   public static void finish() throws Exception {
     s.getIndexReader().close();
-    s.close();
     s = null;
     dir.close();
     dir = null;
Index: lucene/src/test/org/apache/lucene/search/TestScoreCachingWrappingScorer.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestScoreCachingWrappingScorer.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestScoreCachingWrappingScorer.java	(working copy)
@@ -119,7 +119,6 @@
     for (int i = 0; i < scores.length; i++) {
       assertEquals(scores[i], scc.mscores[i], 0f);
     }
-    searcher.close();
     ir.close();
     directory.close();
   }
Index: lucene/src/test/org/apache/lucene/search/TestFieldValueFilter.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestFieldValueFilter.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestFieldValueFilter.java	(working copy)
@@ -58,7 +58,6 @@
     }
     
     reader.close();
-    searcher.close();
     directory.close();
   }
   
@@ -86,7 +85,6 @@
     }
     
     reader.close();
-    searcher.close();
     directory.close();
   }
 
Index: lucene/src/test/org/apache/lucene/search/TestWildcard.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestWildcard.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestWildcard.java	(working copy)
@@ -97,7 +97,6 @@
       q = searcher.rewrite(wq);
       assertTrue(q instanceof ConstantScoreQuery);
       assertEquals(q.getBoost(), wq.getBoost(), 0.1);
-      searcher.close();
       reader.close();
       indexStore.close();
   }
@@ -116,7 +115,6 @@
     Query q = searcher.rewrite(wq);
     assertTrue(q instanceof BooleanQuery);
     assertEquals(0, ((BooleanQuery) q).clauses().size());
-    searcher.close();
     reader.close();
     indexStore.close();
   }
@@ -140,7 +138,6 @@
     assertMatches(searcher, wq, 2);
     assertFalse(wq.getTermsEnum(terms) instanceof PrefixTermsEnum);
     assertFalse(wq.getTermsEnum(terms).getClass().getSimpleName().contains("AutomatonTermsEnum"));
-    searcher.close();
     reader.close();
     indexStore.close();
   }
@@ -181,7 +178,6 @@
     assertMatches(searcher, new WildcardQuery(new Term("body", "*tall")), 0);
     assertMatches(searcher, new WildcardQuery(new Term("body", "*tal")), 1);
     assertMatches(searcher, new WildcardQuery(new Term("body", "*tal*")), 2);
-    searcher.close();
     reader.close();
     indexStore.close();
   }
@@ -210,7 +206,6 @@
     assertMatches(searcher, query4, 3);
     assertMatches(searcher, query5, 0);
     assertMatches(searcher, query6, 1); // Query: 'meta??' matches 'metals' not 'metal'
-    searcher.close();
     reader.close();
     indexStore.close();
   }
@@ -244,7 +239,6 @@
     WildcardQuery atEnd = new WildcardQuery(new Term("field", "foo\\"));
     assertMatches(searcher, atEnd, 1);
     
-    searcher.close();
     reader.close();
     indexStore.close();
   }
@@ -399,7 +393,6 @@
       }
     }
 
-    searcher.close();
     reader.close();
     dir.close();
   }
Index: lucene/src/test/org/apache/lucene/search/TestTopDocsMerge.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestTopDocsMerge.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestTopDocsMerge.java	(working copy)
@@ -238,7 +238,6 @@
 
       _TestUtil.assertEquals(topHits, mergedHits);
     }
-    searcher.close();
     reader.close();
     dir.close();
   }
Index: lucene/src/test/org/apache/lucene/search/TestBoolean2.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestBoolean2.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestBoolean2.java	(working copy)
@@ -101,12 +101,10 @@
 
   @AfterClass
   public static void afterClass() throws Exception {
-    searcher.close();
     reader.close();
     littleReader.close();
     dir2.close();
     directory.close();
-    bigSearcher.close();
     searcher = null;
     reader = null;
     littleReader = null;
Index: lucene/src/test/org/apache/lucene/search/TestExplanations.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestExplanations.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestExplanations.java	(working copy)
@@ -61,7 +61,6 @@
   
   @AfterClass
   public static void afterClassTestExplanations() throws Exception {
-    searcher.close();
     searcher = null;
     reader.close();
     reader = null;
Index: lucene/src/test/org/apache/lucene/search/TestScorerPerf.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestScorerPerf.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestScorerPerf.java	(working copy)
@@ -323,7 +323,6 @@
     sets=randBitSets(atLeast(1000), atLeast(10));
     doConjunctions(atLeast(10000), atLeast(5));
     doNestedConjunctions(atLeast(10000), atLeast(3), atLeast(3));
-    s.close();
     r.close();
     d.close();
   }
Index: lucene/src/test/org/apache/lucene/search/TestFuzzyQuery.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestFuzzyQuery.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestFuzzyQuery.java	(working copy)
@@ -185,7 +185,6 @@
     hits = searcher.search(query, null, 1000).scoreDocs;
     assertEquals(0, hits.length);
 
-    searcher.close();
     reader.close();
     directory.close();
   }
@@ -275,7 +274,6 @@
       // expecting exception
     }
 
-    searcher.close();
     reader.close();
     directory.close();
   }
@@ -312,7 +310,6 @@
     FuzzyQuery fq = new FuzzyQuery(new Term("field", "z123456"), 1f, 0, 2);
     TopDocs docs = searcher.search(fq, 2);
     assertEquals(5, docs.totalHits); // 5 docs, from the a and b's
-    searcher.close();
     mr.close();
     ir1.close();
     ir2.close();
@@ -353,7 +350,6 @@
     hits = searcher.search(query, null, 1000).scoreDocs;
     assertEquals(0, hits.length);
     
-    searcher.close();
     reader.close();
     directory.close();
   }
@@ -378,7 +374,6 @@
     assertEquals("Lucene", reader.document(hits[0].doc).get("field"));
     assertEquals("Lucene", reader.document(hits[1].doc).get("field"));
     assertEquals("Lucenne", reader.document(hits[2].doc).get("field"));
-    searcher.close();
     reader.close();
     directory.close();
   }
@@ -416,7 +411,6 @@
     ScoreDoc[] hits = searcher.search(q, 10).scoreDocs;
     assertEquals(1, hits.length);
     assertEquals("Giga byte", searcher.doc(hits[0].doc).get("field"));
-    searcher.close();
     r.close();
     index.close();
   }
@@ -457,7 +451,6 @@
     assertEquals("test", searcher.doc(hits[0].doc).get("field"));
     assertEquals("foobar", searcher.doc(hits[1].doc).get("field"));
     
-    searcher.close();
     reader.close();
     index.close();
   }
Index: lucene/src/test/org/apache/lucene/search/TestRegexpQuery.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestRegexpQuery.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestRegexpQuery.java	(working copy)
@@ -59,7 +59,6 @@
   
   @Override
   public void tearDown() throws Exception {
-    searcher.close();
     reader.close();
     directory.close();
     super.tearDown();
Index: lucene/src/test/org/apache/lucene/search/TestDateFilter.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestDateFilter.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestDateFilter.java	(working copy)
@@ -97,7 +97,6 @@
     
     result = searcher.search(query2, df2, 1000).scoreDocs;
     assertEquals(0, result.length);
-    searcher.close();
     reader.close();
     indexStore.close();
   }
@@ -164,7 +163,6 @@
     
     result = searcher.search(query2, df2, 1000).scoreDocs;
     assertEquals(0, result.length);
-    searcher.close();
     reader.close();
     indexStore.close();
   }
Index: lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery.java	(working copy)
@@ -70,7 +70,6 @@
     assertEquals(1, hits.length);
 
     iw.deleteDocuments(new Term("key", "one"));
-    is.close();
     ir.close();
     ir = IndexReader.open(iw, true);
     is = newSearcher(ir);
@@ -79,7 +78,6 @@
     assertEquals(2, hits.length);
 
     iw.close();
-    is.close();
     ir.close();
     dir.close();
   }
Index: lucene/src/test/org/apache/lucene/search/TestSimilarity.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestSimilarity.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestSimilarity.java	(working copy)
@@ -169,7 +169,6 @@
       }
     });
 
-    searcher.close();
     reader.close();
     store.close();
   }
Index: lucene/src/test/org/apache/lucene/search/TestSimilarityProvider.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestSimilarityProvider.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestSimilarityProvider.java	(working copy)
@@ -67,7 +67,6 @@
   
   @Override
   public void tearDown() throws Exception {
-    searcher.close();
     reader.close();
     directory.close();
     super.tearDown();
Index: lucene/src/test/org/apache/lucene/search/TestPrefixInBooleanQuery.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestPrefixInBooleanQuery.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestPrefixInBooleanQuery.java	(working copy)
@@ -76,7 +76,6 @@
   
   @AfterClass
   public static void afterClass() throws Exception {
-    searcher.close();
     searcher = null;
     reader.close();
     reader = null;
Index: lucene/src/test/org/apache/lucene/search/TestElevationComparator.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestElevationComparator.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestElevationComparator.java	(working copy)
@@ -61,7 +61,6 @@
     runTest(searcher, true);
     runTest(searcher, false);
 
-    searcher.close();
     r.close();
     directory.close();
   }
Index: lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64.java	(working copy)
@@ -99,7 +99,6 @@
   
   @AfterClass
   public static void afterClass() throws Exception {
-    searcher.close();
     searcher = null;
     reader.close();
     reader = null;
@@ -354,7 +353,6 @@
     topDocs = s.search(q, 10);
     assertEquals("Score doc count", TestNumericUtils.DOUBLE_NANs.length,  topDocs.scoreDocs.length );
 
-    s.close();
     r.close();
     dir.close();
   }
Index: lucene/src/test/org/apache/lucene/search/TestFieldCacheTermsFilter.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestFieldCacheTermsFilter.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestFieldCacheTermsFilter.java	(working copy)
@@ -68,7 +68,6 @@
     results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;
     assertEquals("Must match 2", 2, results.length);
 
-    searcher.close();
     reader.close();
     rd.close();
   }
Index: lucene/src/test/org/apache/lucene/search/TestTermRangeFilter.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestTermRangeFilter.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestTermRangeFilter.java	(working copy)
@@ -134,8 +134,6 @@
     result = search.search(q, TermRangeFilter.newStringRange("id", medIP, medIP, T, T),
         numDocs).scoreDocs;
     assertEquals("med,med,T,T", 1, result.length);
-    
-    search.close();
   }
   
   @Test
@@ -212,7 +210,5 @@
     result = search.search(q, TermRangeFilter.newStringRange("rand", maxRP, null, T, F),
         numDocs).scoreDocs;
     assertEquals("max,nul,T,T", 1, result.length);
-    
-    search.close();
   }
 }
Index: lucene/src/test/org/apache/lucene/search/TestPositiveScoresOnlyCollector.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestPositiveScoresOnlyCollector.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/search/TestPositiveScoresOnlyCollector.java	(working copy)
@@ -89,7 +89,6 @@
     for (int i = 0; i < sd.length; i++) {
       assertTrue("only positive scores should return: " + sd[i].score, sd[i].score > 0);
     }
-    searcher.close();
     ir.close();
     directory.close();
   }
Index: lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit.java
===================================================================
--- lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit.java	(working copy)
@@ -55,7 +55,6 @@
       IndexSearcher searcher = new IndexSearcher(reader);
       ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;
       assertEquals("first number of hits", 14, hits.length);
-      searcher.close();
       reader.close();
 
       reader = IndexReader.open(dir);
@@ -69,7 +68,6 @@
         searcher = new IndexSearcher(r);
         hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;
         assertEquals("reader incorrectly sees changes from writer", 14, hits.length);
-        searcher.close();
         r.close();
         assertTrue("reader should have still been current", reader.isCurrent());
       }
@@ -82,7 +80,6 @@
       searcher = new IndexSearcher(r);
       hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;
       assertEquals("reader did not see changes after writer was closed", 47, hits.length);
-      searcher.close();
       r.close();
       reader.close();
       dir.close();
@@ -109,7 +106,6 @@
     IndexSearcher searcher = new IndexSearcher(reader);
     ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;
     assertEquals("first number of hits", 14, hits.length);
-    searcher.close();
     reader.close();
 
     writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))
@@ -124,7 +120,6 @@
     searcher = new IndexSearcher(reader);
     hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;
     assertEquals("reader incorrectly sees changes from writer", 14, hits.length);
-    searcher.close();
     reader.close();
 
     // Now, close the writer:
@@ -136,7 +131,6 @@
     searcher = new IndexSearcher(reader);
     hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;
     assertEquals("saw changes after writer.abort", 14, hits.length);
-    searcher.close();
     reader.close();
 
     // Now make sure we can re-open the index, add docs,
@@ -156,7 +150,6 @@
       searcher = new IndexSearcher(r);
       hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;
       assertEquals("reader incorrectly sees changes from writer", 14, hits.length);
-      searcher.close();
       r.close();
     }
 
@@ -165,7 +158,6 @@
     searcher = new IndexSearcher(r);
     hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;
     assertEquals("didn't see changes after close", 218, hits.length);
-    searcher.close();
     r.close();
 
     dir.close();
Index: lucene/src/test/org/apache/lucene/index/TestIndexWriterOnDiskFull.java
===================================================================
--- lucene/src/test/org/apache/lucene/index/TestIndexWriterOnDiskFull.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/index/TestIndexWriterOnDiskFull.java	(working copy)
@@ -195,7 +195,6 @@
     IndexSearcher searcher = newSearcher(reader);
     ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;
     assertEquals("first number of hits", 57, hits.length);
-    searcher.close();
     reader.close();
     
     // Iterate with larger and larger amounts of free
@@ -395,7 +394,6 @@
             }
           }
           
-          searcher.close();
           reader.close();
           if (VERBOSE) {
             System.out.println("  count is " + result);
Index: lucene/src/test/org/apache/lucene/index/TestNRTThreads.java
===================================================================
--- lucene/src/test/org/apache/lucene/index/TestNRTThreads.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/index/TestNRTThreads.java	(working copy)
@@ -100,7 +100,6 @@
     if (s != fixedSearcher) {
       // Final searcher:
       s.getIndexReader().close();
-      s.close();
     }
   }
 
Index: lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility.java
===================================================================
--- lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility.java	(working copy)
@@ -336,7 +336,6 @@
     hits = searcher.search(new TermQuery(new Term("utf8", "ab\ud917\udc17cd")), null, 1000).scoreDocs;
     assertEquals(34, hits.length);
 
-    searcher.close();
     reader.close();
     dir.close();
   }
@@ -374,7 +373,6 @@
     Document d = searcher.getIndexReader().document(hits[0].doc);
     assertEquals("wrong first document", "21", d.get("id"));
     doTestHits(hits, 44, searcher.getIndexReader());
-    searcher.close();
     reader.close();
 
     // fully merge
@@ -389,7 +387,6 @@
     d = searcher.doc(hits[0].doc);
     doTestHits(hits, 44, searcher.getIndexReader());
     assertEquals("wrong first document", "21", d.get("id"));
-    searcher.close();
     reader.close();
 
     dir.close();
@@ -406,7 +403,6 @@
     assertEquals("wrong number of hits", 34, hits.length);
     Document d = searcher.doc(hits[0].doc);
     assertEquals("wrong first document", "21", d.get("id"));
-    searcher.close();
     reader.close();
 
     // fully merge
@@ -419,7 +415,6 @@
     hits = searcher.search(new TermQuery(new Term("content", "aaa")), null, 1000).scoreDocs;
     assertEquals("wrong number of hits", 34, hits.length);
     doTestHits(hits, 34, searcher.getIndexReader());
-    searcher.close();
     reader.close();
 
     dir.close();
@@ -664,7 +659,6 @@
         assertTrue("value in id bounds", val >= 0L && val < 35L);
       }
       
-      searcher.close();
       reader.close();
       dir.close();
       _TestUtil.rmDir(oldIndexDir);
Index: lucene/src/test/org/apache/lucene/index/TestForTooMuchCloning.java
===================================================================
--- lucene/src/test/org/apache/lucene/index/TestForTooMuchCloning.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/index/TestForTooMuchCloning.java	(working copy)
@@ -75,7 +75,6 @@
     final int queryCloneCount = dir.getInputCloneCount() - cloneCount;
     //System.out.println("query clone count=" + queryCloneCount);
     assertTrue("too many calls to IndexInput.clone during TermRangeQuery: " + queryCloneCount, queryCloneCount < 50);
-    s.close();
     r.close();
     dir.close();
   }
Index: lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete.java
===================================================================
--- lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete.java	(working copy)
@@ -403,7 +403,6 @@
     IndexReader reader = IndexReader.open(dir);
     IndexSearcher searcher = new IndexSearcher(reader);
     int hitCount = searcher.search(new TermQuery(term), null, 1000).totalHits;
-    searcher.close();
     reader.close();
     return hitCount;
   }
@@ -612,7 +611,6 @@
                  + result2 + " instead of expected " + START_COUNT + " or " + END_COUNT);
           }
         }
-        searcher.close();
         newReader.close();
         if (result2 == END_COUNT) {
           break;
Index: lucene/src/test/org/apache/lucene/index/TestTermsEnum2.java
===================================================================
--- lucene/src/test/org/apache/lucene/index/TestTermsEnum2.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/index/TestTermsEnum2.java	(working copy)
@@ -84,7 +84,6 @@
   }
   
   public void tearDown() throws Exception {
-    searcher.close();
     reader.close();
     dir.close();
     super.tearDown();
Index: lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen.java
===================================================================
--- lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen.java	(working copy)
@@ -515,7 +515,6 @@
                 if (hits.length > 0) {
                   searcher.doc(hits[0].doc);
                 }
-                searcher.close();
                 if (refreshed != r) {
                   refreshed.close();
                 }
Index: lucene/src/test/org/apache/lucene/index/TestStressIndexing.java
===================================================================
--- lucene/src/test/org/apache/lucene/index/TestStressIndexing.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/index/TestStressIndexing.java	(working copy)
@@ -105,7 +105,6 @@
       for (int i=0; i<100; i++) {
         IndexReader ir = IndexReader.open(directory);
         IndexSearcher is = new IndexSearcher(ir);
-        is.close();
         ir.close();
       }
       count += 100;
Index: lucene/src/test/org/apache/lucene/index/codecs/lucene3x/TestTermInfosReaderIndex.java
===================================================================
--- lucene/src/test/org/apache/lucene/index/codecs/lucene3x/TestTermInfosReaderIndex.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/index/codecs/lucene3x/TestTermInfosReaderIndex.java	(working copy)
@@ -136,7 +136,6 @@
       TopDocs topDocs = searcher.search(query, 10);
       assertTrue(topDocs.totalHits > 0);
     }
-    searcher.close();
   }
 
   private List<Term> sample(IndexReader reader, int size) throws IOException {
Index: lucene/src/test/org/apache/lucene/index/codecs/perfield/TestPerFieldPostingsFormat.java
===================================================================
--- lucene/src/test/org/apache/lucene/index/codecs/perfield/TestPerFieldPostingsFormat.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/index/codecs/perfield/TestPerFieldPostingsFormat.java	(working copy)
@@ -194,7 +194,6 @@
     IndexSearcher searcher = newSearcher(reader);
     TopDocs search = searcher.search(new TermQuery(t), num + 10);
     assertEquals(num, search.totalHits);
-    searcher.close();
     reader.close();
 
   }
Index: lucene/src/test/org/apache/lucene/index/TestDeletionPolicy.java
===================================================================
--- lucene/src/test/org/apache/lucene/index/TestDeletionPolicy.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/index/TestDeletionPolicy.java	(working copy)
@@ -660,7 +660,6 @@
         ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;
         assertEquals(16, hits.length);
         reader.close();
-        searcher.close();
 
         writer = new IndexWriter(dir, newIndexWriterConfig(
             TEST_VERSION_CURRENT, new MockAnalyzer(random))
@@ -685,7 +684,6 @@
       dir.deleteFile(IndexFileNames.SEGMENTS_GEN);
       int expectedCount = 0;
       
-      searcher.close();
       rwReader.close();
 
       for(int i=0;i<N+1;i++) {
@@ -697,7 +695,6 @@
           searcher = newSearcher(reader);
           hits = searcher.search(query, null, 1000).scoreDocs;
           assertEquals(expectedCount, hits.length);
-          searcher.close();
           if (expectedCount == 0) {
             expectedCount = 16;
           } else if (expectedCount == 16) {
Index: lucene/src/test/org/apache/lucene/index/TestCrashCausesCorruptIndex.java
===================================================================
--- lucene/src/test/org/apache/lucene/index/TestCrashCausesCorruptIndex.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/index/TestCrashCausesCorruptIndex.java	(working copy)
@@ -126,7 +126,6 @@
     TopDocs topDocs = indexSearcher.search(new TermQuery(new Term(TEXT_FIELD, "fleas")), 10);
     assertNotNull(topDocs);
     assertEquals(expectedTotalHits, topDocs.totalHits);
-    indexSearcher.close();
     indexReader.close();
     realDirectory.close();
   }
Index: lucene/src/test/org/apache/lucene/index/TestOmitTf.java
===================================================================
--- lucene/src/test/org/apache/lucene/index/TestOmitTf.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/index/TestOmitTf.java	(working copy)
@@ -400,8 +400,7 @@
                       }
                     });
     assertEquals(15, CountingHitCollector.getCount());
-        
-    searcher.close(); 
+         
     reader.close();
     dir.close();
   }
Index: lucene/src/test/org/apache/lucene/index/TestIndexWriterReader.java
===================================================================
--- lucene/src/test/org/apache/lucene/index/TestIndexWriterReader.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/index/TestIndexWriterReader.java	(working copy)
@@ -695,7 +695,6 @@
     Query q = new TermQuery(new Term("indexname", "test"));
     IndexSearcher searcher = newSearcher(r);
     assertEquals(100, searcher.search(q, 10).totalHits);
-    searcher.close();
     try {
       IndexReader.openIfChanged(r);
       fail("failed to hit AlreadyClosedException");
@@ -761,7 +760,6 @@
       Query q = new TermQuery(new Term("indexname", "test"));
       IndexSearcher searcher = newSearcher(r);
       final int count = searcher.search(q, 10).totalHits;
-      searcher.close();
       assertTrue(count >= lastCount);
       lastCount = count;
     }
@@ -778,7 +776,6 @@
     Query q = new TermQuery(new Term("indexname", "test"));
     IndexSearcher searcher = newSearcher(r);
     final int count = searcher.search(q, 10).totalHits;
-    searcher.close();
     assertTrue(count >= lastCount);
 
     assertEquals(0, excs.size());
@@ -850,7 +847,6 @@
       Query q = new TermQuery(new Term("indexname", "test"));
       IndexSearcher searcher = newSearcher(r);
       sum += searcher.search(q, 10).totalHits;
-      searcher.close();
     }
 
     for(int i=0;i<numThreads;i++) {
@@ -865,7 +861,6 @@
     Query q = new TermQuery(new Term("indexname", "test"));
     IndexSearcher searcher = newSearcher(r);
     sum += searcher.search(q, 10).totalHits;
-    searcher.close();
     assertTrue("no documents found at all", sum > 0);
 
     assertEquals(0, excs.size());
@@ -954,7 +949,6 @@
                 TopDocs hits = s.search(new TermQuery(new Term("foo", "bar")), 10);
                 assertEquals(20, hits.totalHits);
                 didWarm.set(true);
-                s.close();
               }
             }).
             setMergePolicy(newLogMergePolicy(10))
Index: lucene/src/test/org/apache/lucene/index/TestBinaryTerms.java
===================================================================
--- lucene/src/test/org/apache/lucene/index/TestBinaryTerms.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/index/TestBinaryTerms.java	(working copy)
@@ -70,7 +70,6 @@
       assertEquals("" + i, is.doc(docs.scoreDocs[0].doc).get("id"));
     }
     
-    is.close();
     ir.close();
     dir.close();
   }
Index: lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping.java
===================================================================
--- lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping.java	(working copy)
@@ -138,9 +138,7 @@
         // test whether only the minimum amount of seeks()
         // are performed
         performTest(5);
-        searcher.close();
         performTest(10);
-        searcher.close();
     }
     
     public void testSeek() throws IOException {
Index: lucene/src/test/org/apache/lucene/index/TestIndexWriter.java
===================================================================
--- lucene/src/test/org/apache/lucene/index/TestIndexWriter.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/index/TestIndexWriter.java	(working copy)
@@ -456,7 +456,6 @@
       IndexSearcher searcher = new IndexSearcher(reader);
       ScoreDoc[] hits = searcher.search(new TermQuery(new Term("field", "aaa")), null, 1000).scoreDocs;
       assertEquals(300, hits.length);
-      searcher.close();
       reader.close();
 
       dir.close();
@@ -488,7 +487,6 @@
       IndexSearcher searcher = new IndexSearcher(reader);
       ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;
       assertEquals(10, hits.length);
-      searcher.close();
       reader.close();
 
       writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))
@@ -511,7 +509,6 @@
       searcher = new IndexSearcher(reader);
       hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;
       assertEquals(27, hits.length);
-      searcher.close();
       reader.close();
 
       reader = IndexReader.open(dir);
@@ -590,7 +587,6 @@
       IndexSearcher searcher = new IndexSearcher(reader);
       ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;
       assertEquals("did not get right number of hits", 100, hits.length);
-      searcher.close();
       reader.close();
 
       writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))
@@ -1013,7 +1009,6 @@
     assertEquals(0, tps.nextPosition());
     w.close();
 
-    s.close();
     r.close();
     dir.close();
   }
@@ -1708,7 +1703,6 @@
             assertEquals("doc " + testID + ", field f" + fieldCount + " is wrong", docExp.get("f"+i),  doc.get("f"+i));
           }
         }
-        s.close();
         r.close();
         w.forceMerge(1);
       }
Index: lucene/src/test/org/apache/lucene/index/TestCodecs.java
===================================================================
--- lucene/src/test/org/apache/lucene/index/TestCodecs.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/index/TestCodecs.java	(working copy)
@@ -393,7 +393,6 @@
       return searcher.search(q, null, n).scoreDocs;
     }
     finally {
-      searcher.close();
       reader.close();
     }
   }
Index: lucene/src/test/org/apache/lucene/index/TestParallelReader.java
===================================================================
--- lucene/src/test/org/apache/lucene/index/TestParallelReader.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/index/TestParallelReader.java	(working copy)
@@ -46,9 +46,7 @@
   @Override
   public void tearDown() throws Exception {
     single.getIndexReader().close();
-    single.close();
     parallel.getIndexReader().close();
-    parallel.close();
     dir.close();
     dir1.close();
     dir2.close();
Index: lucene/src/test/org/apache/lucene/index/TestReaderClosed.java
===================================================================
--- lucene/src/test/org/apache/lucene/index/TestReaderClosed.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/index/TestReaderClosed.java	(working copy)
@@ -61,7 +61,6 @@
   public void test() throws Exception {
     TermRangeQuery query = TermRangeQuery.newStringRange("field", "a", "z", true, true);
     searcher.search(query, 5);
-    searcher.close();
     reader.close();
     try {
       searcher.search(query, 5);
Index: lucene/src/test/org/apache/lucene/TestSearchForDuplicates.java
===================================================================
--- lucene/src/test/org/apache/lucene/TestSearchForDuplicates.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/TestSearchForDuplicates.java	(working copy)
@@ -115,8 +115,6 @@
       printHits(out, hits, searcher);
       checkHits(hits, MAX_DOCS, searcher);
 
-      searcher.close();
-
       // try a new search with OR
       searcher = new IndexSearcher(reader);
       hits = null;
@@ -130,7 +128,6 @@
       printHits(out, hits, searcher);
       checkHits(hits, MAX_DOCS, searcher);
 
-      searcher.close();
       reader.close();
       directory.close();
   }
Index: lucene/src/test/org/apache/lucene/document/TestDocument.java
===================================================================
--- lucene/src/test/org/apache/lucene/document/TestDocument.java	(revision 1213115)
+++ lucene/src/test/org/apache/lucene/document/TestDocument.java	(working copy)
@@ -174,7 +174,6 @@
     
     doAssert(searcher.doc(hits[0].doc), true);
     writer.close();
-    searcher.close();
     reader.close();
     dir.close();
   }
@@ -270,7 +269,6 @@
       else fail("unexpected id field");
     }
     writer.close();
-    searcher.close();
     reader.close();
     dir.close();
     assertEquals("did not see all IDs", 7, result);
Index: lucene/src/java/org/apache/lucene/search/IndexSearcher.java
===================================================================
--- lucene/src/java/org/apache/lucene/search/IndexSearcher.java	(revision 1213115)
+++ lucene/src/java/org/apache/lucene/search/IndexSearcher.java	(working copy)
@@ -42,8 +42,6 @@
 import org.apache.lucene.search.similarities.DefaultSimilarityProvider;
 import org.apache.lucene.search.similarities.SimilarityProvider;
 import org.apache.lucene.store.NIOFSDirectory;    // javadoc
-import org.apache.lucene.util.Bits;
-import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.ReaderUtil;
 import org.apache.lucene.util.TermContext;
 import org.apache.lucene.util.ThreadInterruptedException;
@@ -73,7 +71,7 @@
  * synchronize on the <code>IndexSearcher</code> instance;
  * use your own (non-Lucene) objects instead.</p>
  */
-public class IndexSearcher implements Closeable {
+public class IndexSearcher {
   final IndexReader reader; // package private for testing!
   
   // NOTE: these members might change in incompatible ways
@@ -198,10 +196,6 @@
   public SimilarityProvider getSimilarityProvider() {
     return similarityProvider;
   }
-
-  @Override
-  public void close() throws IOException {
-  }
   
   /** @lucene.internal */
   protected Query wrapFilter(Query query, Filter filter) {
Index: lucene/src/test-framework/java/org/apache/lucene/analysis/CollationTestBase.java
===================================================================
--- lucene/src/test-framework/java/org/apache/lucene/analysis/CollationTestBase.java	(revision 1213115)
+++ lucene/src/test-framework/java/org/apache/lucene/analysis/CollationTestBase.java	(working copy)
@@ -102,7 +102,6 @@
       (query, new TermRangeFilter("content", secondBeg, secondEnd, true, true), 1).scoreDocs;
     assertEquals("The index Term should be included.", 1, result.length);
 
-    searcher.close();
     reader.close();
   }
  
@@ -131,7 +130,6 @@
     query = new TermRangeQuery("content", secondBeg, secondEnd, true, true);
     hits = searcher.search(query, null, 1000).scoreDocs;
     assertEquals("The index Term should be included.", 1, hits.length);
-    searcher.close();
     reader.close();
   }
 
@@ -164,7 +162,6 @@
       ("content", secondBeg, secondEnd, true, true);
     result = search.search(csrq, null, 1000).scoreDocs;
     assertEquals("The index Term should be included.", 1, result.length);
-    search.close();
   }
   
   // Test using various international locales with accented characters (which
@@ -240,7 +237,6 @@
 
     sort.setSort(new SortField("Denmark", SortField.Type.STRING));
     assertMatches(searcher, queryY, sort, dkResult);
-    searcher.close();
     reader.close();
   }
     
Index: lucene/src/test-framework/java/org/apache/lucene/search/CheckHits.java
===================================================================
--- lucene/src/test-framework/java/org/apache/lucene/search/CheckHits.java	(revision 1213115)
+++ lucene/src/test-framework/java/org/apache/lucene/search/CheckHits.java	(working copy)
@@ -116,7 +116,6 @@
                           query.toString(defaultFieldName),
                           correct, actual);
       FieldCache.DEFAULT.purge(s.getIndexReader()); // our wrapping can create insanity otherwise
-      s.close();
     }
   }
 
Index: lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils.java
===================================================================
--- lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils.java	(revision 1213115)
+++ lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils.java	(working copy)
@@ -115,13 +115,10 @@
           IndexSearcher wrapped;
           check(random, q1, wrapped = wrapUnderlyingReader(random, s, -1), false);
           FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // // our wrapping can create insanity otherwise
-          wrapped.close();
           check(random, q1, wrapped = wrapUnderlyingReader(random, s,  0), false);
           FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // // our wrapping can create insanity otherwise
-          wrapped.close();
           check(random, q1, wrapped = wrapUnderlyingReader(random, s, +1), false);
           FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // // our wrapping can create insanity otherwise
-          wrapped.close();
         }
         checkExplanations(q1,s);
         
@@ -309,7 +306,6 @@
                 Assert.assertFalse("query's last doc was "+ lastDoc[0] +" but skipTo("+(lastDoc[0]+1)+") got to "+scorer.docID(),more);
               }
               leafPtr++;
-              indexSearcher.close();
             }
             lastReader[0] = context.reader;
             assert readerContextArray[leafPtr].reader == context.reader;
@@ -335,7 +331,6 @@
             boolean more = scorer.advance(lastDoc[0] + 1) != DocIdSetIterator.NO_MORE_DOCS;
             Assert.assertFalse("query's last doc was "+ lastDoc[0] +" but skipTo("+(lastDoc[0]+1)+") got to "+scorer.docID(),more);
           }
-          indexSearcher.close();
         }
       }
   }
@@ -394,7 +389,6 @@
             boolean more = scorer.advance(lastDoc[0] + 1) != DocIdSetIterator.NO_MORE_DOCS;
             Assert.assertFalse("query's last doc was "+ lastDoc[0] +" but skipTo("+(lastDoc[0]+1)+") got to "+scorer.docID(),more);
           }
-          indexSearcher.close();
           leafPtr++;
         }
 
@@ -419,7 +413,6 @@
         boolean more = scorer.advance(lastDoc[0] + 1) != DocIdSetIterator.NO_MORE_DOCS;
         Assert.assertFalse("query's last doc was "+ lastDoc[0] +" but skipTo("+(lastDoc[0]+1)+") got to "+scorer.docID(),more);
       }
-      indexSearcher.close();
     }
   }
 }
Index: lucene/src/test-framework/java/org/apache/lucene/index/ThreadedIndexingAndSearchingTestCase.java
===================================================================
--- lucene/src/test-framework/java/org/apache/lucene/index/ThreadedIndexingAndSearchingTestCase.java	(revision 1213115)
+++ lucene/src/test-framework/java/org/apache/lucene/index/ThreadedIndexingAndSearchingTestCase.java	(working copy)
@@ -472,7 +472,6 @@
 
         IndexSearcher searcher = newSearcher(reader);
         sum += searcher.search(new TermQuery(new Term("body", "united")), 10).totalHits;
-        searcher.close();
 
         if (VERBOSE) {
           System.out.println("TEST: warm visited " + sum + " fields");
Index: lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase.java
===================================================================
--- lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase.java	(revision 1213115)
+++ lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase.java	(working copy)
@@ -37,6 +37,7 @@
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.FieldType;
 import org.apache.lucene.index.*;
+import org.apache.lucene.index.IndexReader.ReaderFinishedListener;
 import org.apache.lucene.index.codecs.Codec;
 import org.apache.lucene.index.codecs.PostingsFormat;
 import org.apache.lucene.index.codecs.appending.AppendingCodec;
@@ -731,7 +732,8 @@
           rogueThreads.put(t, true);
           rogueCount++;
           if (t.getName().startsWith("LuceneTestCase")) {
-            System.err.println("PLEASE CLOSE YOUR INDEXSEARCHERS IN YOUR TEST!!!!");
+            // TODO: should we fail here now? really test should be failing?
+            System.err.println("PLEASE CLOSE YOUR INDEXREADERS IN YOUR TEST!!!!");
             continue;
           } else {
             // wait on the thread to die of natural causes
@@ -1228,23 +1230,25 @@
       final ExecutorService ex = (random.nextBoolean()) ? null
           : Executors.newFixedThreadPool(threads = _TestUtil.nextInt(random, 1, 8),
                       new NamedThreadFactory("LuceneTestCase"));
-      if (ex != null && VERBOSE) {
+      if (ex != null) {
+       if (VERBOSE) {
         System.out.println("NOTE: newSearcher using ExecutorService with " + threads + " threads");
+       }
+       final IndexReader r0 = r;
+       r.addReaderFinishedListener(new ReaderFinishedListener() {
+         @Override
+         public void finished(IndexReader reader) {
+           // readerFinishedListener bogusly calls us with other random readers
+           // so we must check that its *actually* the one we registered it on.
+           if (reader == r0) {
+             shutdownExecutorService(ex);
+           }
+         }
+       });
       }
-      IndexSearcher ret = random.nextBoolean() ? 
-        new AssertingIndexSearcher(random, r, ex) {
-          @Override
-          public void close() throws IOException {
-            super.close();
-            shutdownExecutorService(ex);
-          }
-        } : new AssertingIndexSearcher(random, r.getTopReaderContext(), ex) {
-          @Override
-          public void close() throws IOException {
-            super.close();
-            shutdownExecutorService(ex);
-          }
-        };
+      IndexSearcher ret = random.nextBoolean() 
+          ? new AssertingIndexSearcher(random, r, ex)
+          : new AssertingIndexSearcher(random, r.getTopReaderContext(), ex);
       ret.setSimilarityProvider(similarityProvider);
       return ret;
     }
Index: lucene/contrib/demo/src/java/org/apache/lucene/demo/SearchFiles.java
===================================================================
--- lucene/contrib/demo/src/java/org/apache/lucene/demo/SearchFiles.java	(revision 1213115)
+++ lucene/contrib/demo/src/java/org/apache/lucene/demo/SearchFiles.java	(working copy)
@@ -131,7 +131,6 @@
         break;
       }
     }
-    searcher.close();
     reader.close();
   }
 
Index: lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian.java
===================================================================
--- lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian.java	(revision 1213115)
+++ lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian.java	(working copy)
@@ -260,7 +260,6 @@
       assertTrue(geo_distance >= lastDistance);
       lastDistance = geo_distance;
     }
-    searcher.close();
     reader.close();
   }
 
@@ -332,7 +331,6 @@
       assertTrue(geo_distance >= lastDistance);
       lastDistance = geo_distance;
     }
-    searcher.close();
     reader.close();
   }
   
@@ -404,7 +402,6 @@
         lastDistance = geo_distance;
       }
     }
-    searcher.close();
     reader.close();
   }
   
@@ -476,7 +473,6 @@
 	      
       }
     }
-    searcher.close();
     reader.close();
   }
 }
Index: lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest.java
===================================================================
--- lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest.java	(revision 1213115)
+++ lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest.java	(working copy)
@@ -69,7 +69,6 @@
   @Override
   public void tearDown() throws Exception {
     reader.close();
-    searcher.close();
     directory.close();
     super.tearDown();
   }
Index: lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/FuzzyLikeThisQueryTest.java
===================================================================
--- lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/FuzzyLikeThisQueryTest.java	(revision 1213115)
+++ lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/FuzzyLikeThisQueryTest.java	(working copy)
@@ -60,7 +60,6 @@
 
   @Override
   public void tearDown() throws Exception {
-    searcher.close();
     reader.close();
     directory.close();
     super.tearDown();
Index: lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/regex/TestRegexQuery.java
===================================================================
--- lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/regex/TestRegexQuery.java	(revision 1213115)
+++ lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/regex/TestRegexQuery.java	(working copy)
@@ -56,7 +56,6 @@
 
   @Override
   public void tearDown() throws Exception {
-    searcher.close();
     reader.close();
     directory.close();
     super.tearDown();
Index: lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/regex/TestSpanRegexQuery.java
===================================================================
--- lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/regex/TestSpanRegexQuery.java	(revision 1213115)
+++ lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/regex/TestSpanRegexQuery.java	(working copy)
@@ -80,7 +80,6 @@
     // true);
     int numHits = searcher.search(sfq, null, 1000).totalHits;
     assertEquals(1, numHits);
-    searcher.close();
     reader.close();
     directory.close();
   }
Index: lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowCollationMethods.java
===================================================================
--- lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowCollationMethods.java	(revision 1213115)
+++ lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowCollationMethods.java	(working copy)
@@ -71,7 +71,6 @@
   
   @AfterClass
   public static void afterClass() throws Exception {
-    searcher.close();
     reader.close();
     dir.close();
     collator = null;
Index: lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterPhraseTest.java
===================================================================
--- lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterPhraseTest.java	(revision 1213115)
+++ lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterPhraseTest.java	(working copy)
@@ -72,26 +72,21 @@
     try {
       assertEquals(1, indexReader.numDocs());
       final IndexSearcher indexSearcher = newSearcher(indexReader);
-      try {
-        final PhraseQuery phraseQuery = new PhraseQuery();
-        phraseQuery.add(new Term(FIELD, "fox"));
-        phraseQuery.add(new Term(FIELD, "jumped"));
-        phraseQuery.setSlop(0);
-        TopDocs hits = indexSearcher.search(phraseQuery, 1);
-        assertEquals(1, hits.totalHits);
-        final Highlighter highlighter = new Highlighter(
-            new SimpleHTMLFormatter(), new SimpleHTMLEncoder(),
-            new QueryScorer(phraseQuery));
+      final PhraseQuery phraseQuery = new PhraseQuery();
+      phraseQuery.add(new Term(FIELD, "fox"));
+      phraseQuery.add(new Term(FIELD, "jumped"));
+      phraseQuery.setSlop(0);
+      TopDocs hits = indexSearcher.search(phraseQuery, 1);
+      assertEquals(1, hits.totalHits);
+      final Highlighter highlighter = new Highlighter(
+          new SimpleHTMLFormatter(), new SimpleHTMLEncoder(),
+          new QueryScorer(phraseQuery));
 
-        final TokenStream tokenStream = TokenSources
-            .getTokenStream(indexReader.getTermVector(
-                0, FIELD), false);
-        assertEquals(highlighter.getBestFragment(new TokenStreamConcurrent(),
-            TEXT), highlighter.getBestFragment(tokenStream, TEXT));
-
-      } finally {
-        indexSearcher.close();
-      }
+      final TokenStream tokenStream = TokenSources
+          .getTokenStream(indexReader.getTermVector(
+              0, FIELD), false);
+      assertEquals(highlighter.getBestFragment(new TokenStreamConcurrent(),
+          TEXT), highlighter.getBestFragment(tokenStream, TEXT));
     } finally {
       indexReader.close();
       directory.close();
@@ -120,52 +115,48 @@
     try {
       assertEquals(1, indexReader.numDocs());
       final IndexSearcher indexSearcher = newSearcher(indexReader);
-      try {
-        final Query phraseQuery = new SpanNearQuery(new SpanQuery[] {
-            new SpanTermQuery(new Term(FIELD, "fox")),
-            new SpanTermQuery(new Term(FIELD, "jumped")) }, 0, true);
-        final FixedBitSet bitset = new FixedBitSet(indexReader.maxDoc());
-        indexSearcher.search(phraseQuery, new Collector() {
-          private int baseDoc;
+      final Query phraseQuery = new SpanNearQuery(new SpanQuery[] {
+          new SpanTermQuery(new Term(FIELD, "fox")),
+          new SpanTermQuery(new Term(FIELD, "jumped")) }, 0, true);
+      final FixedBitSet bitset = new FixedBitSet(indexReader.maxDoc());
+      indexSearcher.search(phraseQuery, new Collector() {
+        private int baseDoc;
 
-          @Override
-          public boolean acceptsDocsOutOfOrder() {
-            return true;
-          }
+        @Override
+        public boolean acceptsDocsOutOfOrder() {
+          return true;
+        }
 
-          @Override
-          public void collect(int i) throws IOException {
-            bitset.set(this.baseDoc + i);
-          }
+        @Override
+        public void collect(int i) throws IOException {
+          bitset.set(this.baseDoc + i);
+        }
 
-          @Override
-          public void setNextReader(AtomicReaderContext context)
-              throws IOException {
-            this.baseDoc = context.docBase;
-          }
+        @Override
+        public void setNextReader(AtomicReaderContext context)
+            throws IOException {
+          this.baseDoc = context.docBase;
+        }
 
-          @Override
-          public void setScorer(org.apache.lucene.search.Scorer scorer)
-              throws IOException {
-            // Do Nothing
-          }
-        });
-        assertEquals(1, bitset.cardinality());
-        final int maxDoc = indexReader.maxDoc();
-        final Highlighter highlighter = new Highlighter(
-            new SimpleHTMLFormatter(), new SimpleHTMLEncoder(),
-            new QueryScorer(phraseQuery));
-        for (int position = bitset.nextSetBit(0); position >= 0 && position < maxDoc-1; position = bitset
-            .nextSetBit(position + 1)) {
-          assertEquals(0, position);
-          final TokenStream tokenStream = TokenSources.getTokenStream(
-              indexReader.getTermVector(position,
-                  FIELD), false);
-          assertEquals(highlighter.getBestFragment(new TokenStreamConcurrent(),
-              TEXT), highlighter.getBestFragment(tokenStream, TEXT));
+        @Override
+        public void setScorer(org.apache.lucene.search.Scorer scorer)
+            throws IOException {
+          // Do Nothing
         }
-      } finally {
-        indexSearcher.close();
+      });
+      assertEquals(1, bitset.cardinality());
+      final int maxDoc = indexReader.maxDoc();
+      final Highlighter highlighter = new Highlighter(
+          new SimpleHTMLFormatter(), new SimpleHTMLEncoder(),
+          new QueryScorer(phraseQuery));
+      for (int position = bitset.nextSetBit(0); position >= 0 && position < maxDoc-1; position = bitset
+          .nextSetBit(position + 1)) {
+        assertEquals(0, position);
+        final TokenStream tokenStream = TokenSources.getTokenStream(
+            indexReader.getTermVector(position,
+                FIELD), false);
+        assertEquals(highlighter.getBestFragment(new TokenStreamConcurrent(),
+            TEXT), highlighter.getBestFragment(tokenStream, TEXT));
       }
     } finally {
       indexReader.close();
@@ -195,25 +186,21 @@
     try {
       assertEquals(1, indexReader.numDocs());
       final IndexSearcher indexSearcher = newSearcher(indexReader);
-      try {
-        final PhraseQuery phraseQuery = new PhraseQuery();
-        phraseQuery.add(new Term(FIELD, "did"));
-        phraseQuery.add(new Term(FIELD, "jump"));
-        phraseQuery.setSlop(0);
-        TopDocs hits = indexSearcher.search(phraseQuery, 1);
-        assertEquals(0, hits.totalHits);
-        final Highlighter highlighter = new Highlighter(
-            new SimpleHTMLFormatter(), new SimpleHTMLEncoder(),
-            new QueryScorer(phraseQuery));
-        final TokenStream tokenStream = TokenSources
-            .getTokenStream(indexReader.getTermVector(
-                0, FIELD), false);
-        assertEquals(
-            highlighter.getBestFragment(new TokenStreamSparse(), TEXT),
-            highlighter.getBestFragment(tokenStream, TEXT));
-      } finally {
-        indexSearcher.close();
-      }
+      final PhraseQuery phraseQuery = new PhraseQuery();
+      phraseQuery.add(new Term(FIELD, "did"));
+      phraseQuery.add(new Term(FIELD, "jump"));
+      phraseQuery.setSlop(0);
+      TopDocs hits = indexSearcher.search(phraseQuery, 1);
+      assertEquals(0, hits.totalHits);
+      final Highlighter highlighter = new Highlighter(
+          new SimpleHTMLFormatter(), new SimpleHTMLEncoder(),
+          new QueryScorer(phraseQuery));
+      final TokenStream tokenStream = TokenSources
+          .getTokenStream(indexReader.getTermVector(
+              0, FIELD), false);
+      assertEquals(
+          highlighter.getBestFragment(new TokenStreamSparse(), TEXT),
+          highlighter.getBestFragment(tokenStream, TEXT));
     } finally {
       indexReader.close();
       directory.close();
@@ -241,23 +228,19 @@
     try {
       assertEquals(1, indexReader.numDocs());
       final IndexSearcher indexSearcher = newSearcher(indexReader);
-      try {
-        final PhraseQuery phraseQuery = new PhraseQuery();
-        phraseQuery.add(new Term(FIELD, "did"));
-        phraseQuery.add(new Term(FIELD, "jump"));
-        phraseQuery.setSlop(1);
-        TopDocs hits = indexSearcher.search(phraseQuery, 1);
-        assertEquals(1, hits.totalHits);
-        final Highlighter highlighter = new Highlighter(
-            new SimpleHTMLFormatter(), new SimpleHTMLEncoder(),
-            new QueryScorer(phraseQuery));
-        final TokenStream tokenStream = TokenSources.getTokenStream(
-            indexReader.getTermVector(0, FIELD), true);
-        assertEquals("the fox <B>did</B> not <B>jump</B>", highlighter
-            .getBestFragment(tokenStream, TEXT));
-      } finally {
-        indexSearcher.close();
-      }
+      final PhraseQuery phraseQuery = new PhraseQuery();
+      phraseQuery.add(new Term(FIELD, "did"));
+      phraseQuery.add(new Term(FIELD, "jump"));
+      phraseQuery.setSlop(1);
+      TopDocs hits = indexSearcher.search(phraseQuery, 1);
+      assertEquals(1, hits.totalHits);
+      final Highlighter highlighter = new Highlighter(
+          new SimpleHTMLFormatter(), new SimpleHTMLEncoder(),
+          new QueryScorer(phraseQuery));
+      final TokenStream tokenStream = TokenSources.getTokenStream(
+          indexReader.getTermVector(0, FIELD), true);
+      assertEquals("the fox <B>did</B> not <B>jump</B>", highlighter
+          .getBestFragment(tokenStream, TEXT));
     } finally {
       indexReader.close();
       directory.close();
@@ -285,25 +268,21 @@
     try {
       assertEquals(1, indexReader.numDocs());
       final IndexSearcher indexSearcher = newSearcher(indexReader);
-      try {
-        final Query phraseQuery = new SpanNearQuery(new SpanQuery[] {
-            new SpanTermQuery(new Term(FIELD, "did")),
-            new SpanTermQuery(new Term(FIELD, "jump")) }, 0, true);
+      final Query phraseQuery = new SpanNearQuery(new SpanQuery[] {
+          new SpanTermQuery(new Term(FIELD, "did")),
+          new SpanTermQuery(new Term(FIELD, "jump")) }, 0, true);
 
-        TopDocs hits = indexSearcher.search(phraseQuery, 1);
-        assertEquals(0, hits.totalHits);
-        final Highlighter highlighter = new Highlighter(
-            new SimpleHTMLFormatter(), new SimpleHTMLEncoder(),
-            new QueryScorer(phraseQuery));
-        final TokenStream tokenStream = TokenSources
-            .getTokenStream(indexReader.getTermVector(
-                0, FIELD), false);
-        assertEquals(
-            highlighter.getBestFragment(new TokenStreamSparse(), TEXT),
-            highlighter.getBestFragment(tokenStream, TEXT));
-      } finally {
-        indexSearcher.close();
-      }
+      TopDocs hits = indexSearcher.search(phraseQuery, 1);
+      assertEquals(0, hits.totalHits);
+      final Highlighter highlighter = new Highlighter(
+          new SimpleHTMLFormatter(), new SimpleHTMLEncoder(),
+          new QueryScorer(phraseQuery));
+      final TokenStream tokenStream = TokenSources
+          .getTokenStream(indexReader.getTermVector(
+              0, FIELD), false);
+      assertEquals(
+          highlighter.getBestFragment(new TokenStreamSparse(), TEXT),
+          highlighter.getBestFragment(tokenStream, TEXT));
     } finally {
       indexReader.close();
       directory.close();
Index: lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/TokenSourcesTest.java
===================================================================
--- lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/TokenSourcesTest.java	(revision 1213115)
+++ lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/TokenSourcesTest.java	(working copy)
@@ -114,31 +114,27 @@
       indexWriter.close();
     }
     final IndexReader indexReader = IndexReader.open(directory);
+    assertEquals(1, indexReader.numDocs());
+    final IndexSearcher indexSearcher = newSearcher(indexReader);
     try {
-      assertEquals(1, indexReader.numDocs());
-      final IndexSearcher indexSearcher = newSearcher(indexReader);
-      try {
-        final DisjunctionMaxQuery query = new DisjunctionMaxQuery(1);
-        query.add(new SpanTermQuery(new Term(FIELD, "{fox}")));
-        query.add(new SpanTermQuery(new Term(FIELD, "fox")));
+      final DisjunctionMaxQuery query = new DisjunctionMaxQuery(1);
+      query.add(new SpanTermQuery(new Term(FIELD, "{fox}")));
+      query.add(new SpanTermQuery(new Term(FIELD, "fox")));
         // final Query phraseQuery = new SpanNearQuery(new SpanQuery[] {
         // new SpanTermQuery(new Term(FIELD, "{fox}")),
         // new SpanTermQuery(new Term(FIELD, "fox")) }, 0, true);
 
-        TopDocs hits = indexSearcher.search(query, 1);
-        assertEquals(1, hits.totalHits);
-        final Highlighter highlighter = new Highlighter(
-            new SimpleHTMLFormatter(), new SimpleHTMLEncoder(),
-            new QueryScorer(query));
-        final TokenStream tokenStream = TokenSources
-            .getTokenStream(
-                indexReader.getTermVector(0, FIELD),
-                false);
-        assertEquals("<B>the fox</B> did not jump",
-            highlighter.getBestFragment(tokenStream, TEXT));
-      } finally {
-        indexSearcher.close();
-      }
+      TopDocs hits = indexSearcher.search(query, 1);
+      assertEquals(1, hits.totalHits);
+      final Highlighter highlighter = new Highlighter(
+          new SimpleHTMLFormatter(), new SimpleHTMLEncoder(),
+          new QueryScorer(query));
+      final TokenStream tokenStream = TokenSources
+          .getTokenStream(
+              indexReader.getTermVector(0, FIELD),
+              false);
+      assertEquals("<B>the fox</B> did not jump",
+          highlighter.getBestFragment(tokenStream, TEXT));
     } finally {
       indexReader.close();
       directory.close();
@@ -166,28 +162,24 @@
     try {
       assertEquals(1, indexReader.numDocs());
       final IndexSearcher indexSearcher = newSearcher(indexReader);
-      try {
-        final DisjunctionMaxQuery query = new DisjunctionMaxQuery(1);
-        query.add(new SpanTermQuery(new Term(FIELD, "{fox}")));
-        query.add(new SpanTermQuery(new Term(FIELD, "fox")));
-        // final Query phraseQuery = new SpanNearQuery(new SpanQuery[] {
-        // new SpanTermQuery(new Term(FIELD, "{fox}")),
-        // new SpanTermQuery(new Term(FIELD, "fox")) }, 0, true);
+      final DisjunctionMaxQuery query = new DisjunctionMaxQuery(1);
+      query.add(new SpanTermQuery(new Term(FIELD, "{fox}")));
+      query.add(new SpanTermQuery(new Term(FIELD, "fox")));
+      // final Query phraseQuery = new SpanNearQuery(new SpanQuery[] {
+      // new SpanTermQuery(new Term(FIELD, "{fox}")),
+      // new SpanTermQuery(new Term(FIELD, "fox")) }, 0, true);
 
-        TopDocs hits = indexSearcher.search(query, 1);
-        assertEquals(1, hits.totalHits);
-        final Highlighter highlighter = new Highlighter(
-            new SimpleHTMLFormatter(), new SimpleHTMLEncoder(),
-            new QueryScorer(query));
-        final TokenStream tokenStream = TokenSources
-            .getTokenStream(
-                indexReader.getTermVector(0, FIELD),
-                false);
-        assertEquals("<B>the fox</B> did not jump",
-            highlighter.getBestFragment(tokenStream, TEXT));
-      } finally {
-        indexSearcher.close();
-      }
+      TopDocs hits = indexSearcher.search(query, 1);
+      assertEquals(1, hits.totalHits);
+      final Highlighter highlighter = new Highlighter(
+          new SimpleHTMLFormatter(), new SimpleHTMLEncoder(),
+          new QueryScorer(query));
+      final TokenStream tokenStream = TokenSources
+          .getTokenStream(
+              indexReader.getTermVector(0, FIELD),
+              false);
+      assertEquals("<B>the fox</B> did not jump",
+          highlighter.getBestFragment(tokenStream, TEXT));
     } finally {
       indexReader.close();
       directory.close();
@@ -214,28 +206,24 @@
     try {
       assertEquals(1, indexReader.numDocs());
       final IndexSearcher indexSearcher = newSearcher(indexReader);
-      try {
-        // final DisjunctionMaxQuery query = new DisjunctionMaxQuery(1);
-        // query.add(new SpanTermQuery(new Term(FIELD, "{fox}")));
-        // query.add(new SpanTermQuery(new Term(FIELD, "fox")));
-        final Query phraseQuery = new SpanNearQuery(new SpanQuery[] {
-            new SpanTermQuery(new Term(FIELD, "the")),
-            new SpanTermQuery(new Term(FIELD, "fox"))}, 0, true);
+      // final DisjunctionMaxQuery query = new DisjunctionMaxQuery(1);
+      // query.add(new SpanTermQuery(new Term(FIELD, "{fox}")));
+      // query.add(new SpanTermQuery(new Term(FIELD, "fox")));
+      final Query phraseQuery = new SpanNearQuery(new SpanQuery[] {
+          new SpanTermQuery(new Term(FIELD, "the")),
+          new SpanTermQuery(new Term(FIELD, "fox"))}, 0, true);
 
-        TopDocs hits = indexSearcher.search(phraseQuery, 1);
-        assertEquals(1, hits.totalHits);
-        final Highlighter highlighter = new Highlighter(
-            new SimpleHTMLFormatter(), new SimpleHTMLEncoder(),
-            new QueryScorer(phraseQuery));
-        final TokenStream tokenStream = TokenSources
-            .getTokenStream(
-                indexReader.getTermVector(0, FIELD),
-                false);
-        assertEquals("<B>the fox</B> did not jump",
-            highlighter.getBestFragment(tokenStream, TEXT));
-      } finally {
-        indexSearcher.close();
-      }
+      TopDocs hits = indexSearcher.search(phraseQuery, 1);
+      assertEquals(1, hits.totalHits);
+      final Highlighter highlighter = new Highlighter(
+          new SimpleHTMLFormatter(), new SimpleHTMLEncoder(),
+          new QueryScorer(phraseQuery));
+      final TokenStream tokenStream = TokenSources
+          .getTokenStream(
+              indexReader.getTermVector(0, FIELD),
+              false);
+      assertEquals("<B>the fox</B> did not jump",
+          highlighter.getBestFragment(tokenStream, TEXT));
     } finally {
       indexReader.close();
       directory.close();
@@ -263,28 +251,24 @@
     try {
       assertEquals(1, indexReader.numDocs());
       final IndexSearcher indexSearcher = newSearcher(indexReader);
-      try {
-        // final DisjunctionMaxQuery query = new DisjunctionMaxQuery(1);
-        // query.add(new SpanTermQuery(new Term(FIELD, "the")));
-        // query.add(new SpanTermQuery(new Term(FIELD, "fox")));
-        final Query phraseQuery = new SpanNearQuery(new SpanQuery[] {
-            new SpanTermQuery(new Term(FIELD, "the")),
-            new SpanTermQuery(new Term(FIELD, "fox"))}, 0, true);
+      // final DisjunctionMaxQuery query = new DisjunctionMaxQuery(1);
+      // query.add(new SpanTermQuery(new Term(FIELD, "the")));
+      // query.add(new SpanTermQuery(new Term(FIELD, "fox")));
+      final Query phraseQuery = new SpanNearQuery(new SpanQuery[] {
+          new SpanTermQuery(new Term(FIELD, "the")),
+          new SpanTermQuery(new Term(FIELD, "fox"))}, 0, true);
 
-        TopDocs hits = indexSearcher.search(phraseQuery, 1);
-        assertEquals(1, hits.totalHits);
-        final Highlighter highlighter = new Highlighter(
-            new SimpleHTMLFormatter(), new SimpleHTMLEncoder(),
-            new QueryScorer(phraseQuery));
-        final TokenStream tokenStream = TokenSources
-            .getTokenStream(
-                indexReader.getTermVector(0, FIELD),
-                false);
-        assertEquals("<B>the fox</B> did not jump",
-            highlighter.getBestFragment(tokenStream, TEXT));
-      } finally {
-        indexSearcher.close();
-      }
+      TopDocs hits = indexSearcher.search(phraseQuery, 1);
+      assertEquals(1, hits.totalHits);
+      final Highlighter highlighter = new Highlighter(
+          new SimpleHTMLFormatter(), new SimpleHTMLEncoder(),
+          new QueryScorer(phraseQuery));
+      final TokenStream tokenStream = TokenSources
+          .getTokenStream(
+              indexReader.getTermVector(0, FIELD),
+              false);
+      assertEquals("<B>the fox</B> did not jump",
+          highlighter.getBestFragment(tokenStream, TEXT));
     } finally {
       indexReader.close();
       directory.close();
Index: lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java
===================================================================
--- lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java	(revision 1213115)
+++ lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java	(working copy)
@@ -109,7 +109,6 @@
 
       if (VERBOSE) System.out.println(fragment);
     }
-    searcher.close();
   }
   
   public void testHighlightingWithDefaultField() throws Exception {
@@ -1271,7 +1270,6 @@
       public void run() throws Exception {
         numHighlights = 0;
         // test to show how rewritten query can still be used
-        if (searcher != null) searcher.close();
         searcher = new IndexSearcher(reader);
         Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true);
         
@@ -1664,7 +1662,6 @@
       if (VERBOSE) System.out.println("result:" +  result);
       assertEquals("more <B>random</B> words for second field", result);
     }
-    searcher.close();
     reader.close();
   }
 
@@ -1703,7 +1700,6 @@
   }
 
   public void doSearching(Query unReWrittenQuery) throws Exception {
-    if (searcher != null) searcher.close();
     searcher = new IndexSearcher(reader);
     // for any multi-term queries to work (prefix, wildcard, range,fuzzy etc)
     // you must use a rewritten query!
@@ -1769,7 +1765,6 @@
 
   @Override
   public void tearDown() throws Exception {
-    if (searcher != null) searcher.close();
     reader.close();
     dir.close();
     ramDir.close();
Index: lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest.java
===================================================================
--- lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest.java	(revision 1213115)
+++ lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest.java	(working copy)
@@ -143,9 +143,7 @@
       TopDocs memDocs = mem.search(qp.parse(query), 1);
       assertEquals(ramDocs.totalHits, memDocs.totalHits);
     }
-    ram.close();
     reader.close();
-    mem.close();
   }
   
   /**
