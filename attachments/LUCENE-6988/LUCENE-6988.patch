Index: lucene/core/src/java/org/apache/lucene/codecs/StoredFieldsWriter.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/StoredFieldsWriter.java	(revision 1726209)
+++ lucene/core/src/java/org/apache/lucene/codecs/StoredFieldsWriter.java	(working copy)
@@ -225,7 +225,7 @@
     }
 
     @Override
-    public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) throws IOException {
+    public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) {
       return null;
     }
 
Index: lucene/core/src/java/org/apache/lucene/document/Field.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/document/Field.java	(revision 1726209)
+++ lucene/core/src/java/org/apache/lucene/document/Field.java	(working copy)
@@ -28,7 +28,6 @@
 import org.apache.lucene.analysis.tokenattributes.OffsetAttribute;
 import org.apache.lucene.index.IndexOptions;
 import org.apache.lucene.index.IndexableField;
-import org.apache.lucene.index.IndexableField;
 import org.apache.lucene.index.IndexableFieldType;
 import org.apache.lucene.util.BytesRef;
 
@@ -497,7 +496,7 @@
   }
 
   @Override
-  public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) throws IOException {
+  public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) {
     if (fieldType().indexOptions() == IndexOptions.NONE) {
       // Not indexed
       return null;
Index: lucene/core/src/java/org/apache/lucene/index/IndexableField.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/IndexableField.java	(revision 1726209)
+++ lucene/core/src/java/org/apache/lucene/index/IndexableField.java	(working copy)
@@ -17,13 +17,12 @@
  * limitations under the License.
  */
 
-import java.io.IOException;
 import java.io.Reader;
 
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.TokenStream;
-import org.apache.lucene.search.similarities.ClassicSimilarity; // javadocs
-import org.apache.lucene.search.similarities.Similarity; // javadocs
+import org.apache.lucene.search.similarities.ClassicSimilarity;
+import org.apache.lucene.search.similarities.Similarity;
 import org.apache.lucene.util.BytesRef;
 
 // TODO: how to handle versioning here...?
@@ -55,9 +54,8 @@
    *              check.
    * @return TokenStream value for indexing the document.  Should always return
    *         a non-null value if the field is to be indexed
-   * @throws IOException Can be thrown while creating the TokenStream
    */
-  public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) throws IOException;
+  public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse);
 
   /** 
    * Returns the field's index-time boost.
Index: lucene/core/src/test/org/apache/lucene/index/TestFieldReuse.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestFieldReuse.java	(revision 1726209)
+++ lucene/core/src/test/org/apache/lucene/index/TestFieldReuse.java	(working copy)
@@ -117,7 +117,7 @@
     }
     
     @Override
-    public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) throws IOException {
+    public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) {
       lastSeen = reuse;
       return lastReturned = new CannedTokenStream(new Token("unimportant", 0, 10));
     }
Index: lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java	(revision 1726209)
+++ lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java	(working copy)
@@ -1786,7 +1786,7 @@
         }
 
         @Override
-        public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) throws IOException {
+        public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) {
           return null;
         }
       });
Index: lucene/core/src/test/org/apache/lucene/index/TestIndexableField.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestIndexableField.java	(revision 1726209)
+++ lucene/core/src/test/org/apache/lucene/index/TestIndexableField.java	(working copy)
@@ -17,7 +17,6 @@
  * limitations under the License.
  */
 
-import java.io.IOException;
 import java.io.Reader;
 import java.io.StringReader;
 import java.util.Collections;
@@ -159,7 +158,7 @@
     }
 
     @Override
-    public TokenStream tokenStream(Analyzer analyzer, TokenStream previous) throws IOException {
+    public TokenStream tokenStream(Analyzer analyzer, TokenStream previous) {
       return readerValue() != null ? analyzer.tokenStream(name(), readerValue()) :
         analyzer.tokenStream(name(), new StringReader(stringValue()));
     }
Index: lucene/misc/src/java/org/apache/lucene/document/LazyDocument.java
===================================================================
--- lucene/misc/src/java/org/apache/lucene/document/LazyDocument.java	(revision 1726209)
+++ lucene/misc/src/java/org/apache/lucene/document/LazyDocument.java	(working copy)
@@ -191,7 +191,7 @@
     }
 
     @Override
-    public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) throws IOException {
+    public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) {
       return getRealValue().tokenStream(analyzer, reuse);
     }
   }
Index: lucene/sandbox/src/test/org/apache/lucene/codecs/idversion/StringAndPayloadField.java
===================================================================
--- lucene/sandbox/src/test/org/apache/lucene/codecs/idversion/StringAndPayloadField.java	(revision 1726209)
+++ lucene/sandbox/src/test/org/apache/lucene/codecs/idversion/StringAndPayloadField.java	(working copy)
@@ -17,8 +17,6 @@
  * limitations under the License.
  */
 
-import java.io.IOException;
-
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
@@ -50,7 +48,7 @@
   }
 
   @Override
-  public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) throws IOException {
+  public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) {
     SingleTokenWithPayloadTokenStream ts;
     if (reuse instanceof SingleTokenWithPayloadTokenStream) {
       ts = (SingleTokenWithPayloadTokenStream) reuse;
Index: lucene/suggest/src/java/org/apache/lucene/search/suggest/document/SuggestField.java
===================================================================
--- lucene/suggest/src/java/org/apache/lucene/search/suggest/document/SuggestField.java	(revision 1726209)
+++ lucene/suggest/src/java/org/apache/lucene/search/suggest/document/SuggestField.java	(working copy)
@@ -100,7 +100,7 @@
   }
 
   @Override
-  public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) throws IOException {
+  public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) {
     CompletionTokenStream completionStream = wrapTokenStream(super.tokenStream(analyzer, reuse));
     completionStream.setPayload(buildSuggestPayload());
     return completionStream;
@@ -126,7 +126,7 @@
     return TYPE;
   }
 
-  private BytesRef buildSuggestPayload() throws IOException {
+  private BytesRef buildSuggestPayload() {
     ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
     try (OutputStreamDataOutput output = new OutputStreamDataOutput(byteArrayOutputStream)) {
       output.writeVInt(surfaceForm.length);
@@ -133,6 +133,8 @@
       output.writeBytes(surfaceForm.bytes, surfaceForm.offset, surfaceForm.length);
       output.writeVInt(weight + 1);
       output.writeByte(type());
+    } catch (IOException e) {
+      throw new RuntimeException(e); // not possible, it's a ByteArrayOutputStream!
     }
     return new BytesRef(byteArrayOutputStream.toByteArray());
   }
