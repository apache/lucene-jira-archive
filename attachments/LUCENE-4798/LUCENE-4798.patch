Index: lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighterRanking.java
===================================================================
--- lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighterRanking.java	(revision 1449821)
+++ lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighterRanking.java	(working copy)
@@ -166,6 +166,7 @@
         assertTrue(p.getStartOffset() >= 0);
         assertTrue(p.getStartOffset() <= content.length());
         // we use a very simple analyzer. so we can assert the matches are correct
+        int lastMatchStart = -1;
         for (int i = 0; i < p.getNumMatches(); i++) {
           Term term = p.getMatchTerms()[i];
           assertEquals("body", term.field());
@@ -173,6 +174,9 @@
           assertTrue(matchStart >= 0);
           int matchEnd = p.getMatchEnds()[i];
           assertTrue(matchEnd >= 0);
+          // always moving forward
+          assertTrue(matchStart >= lastMatchStart);
+          lastMatchStart = matchStart;
           // single character terms
           assertEquals(matchStart+1, matchEnd);
           // and the offsets must be correct...
Index: lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter.java
===================================================================
--- lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter.java	(revision 1449821)
+++ lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter.java	(working copy)
@@ -19,6 +19,7 @@
 
 import java.util.Map;
 
+import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.MockAnalyzer;
 import org.apache.lucene.analysis.MockTokenizer;
 import org.apache.lucene.document.Document;
@@ -34,6 +35,7 @@
 import org.apache.lucene.search.BooleanClause;
 import org.apache.lucene.search.BooleanQuery;
 import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.PhraseQuery;
 import org.apache.lucene.search.Query;
 import org.apache.lucene.search.Sort;
 import org.apache.lucene.search.TermQuery;
@@ -272,4 +274,40 @@
     ir.close();
     dir.close();
   }
+  
+  public void testBuddhism() throws Exception {
+    String text = "This eight-volume set brings together seminal papers in Buddhist studies from a vast " +
+    		          "range of academic disciplines published over the last forty years. With a new introduction " + 
+                  "by the editor, this collection is a unique and unrivalled research resource for both " + 
+    		          "student and scholar. Coverage includes: - Buddhist origins; early history of Buddhism in " + 
+                  "South and Southeast Asia - early Buddhist Schools and Doctrinal History; Theravada Doctrine " + 
+    		          "- the Origins and nature of Mahayana Buddhism; some Mahayana religious topics - Abhidharma " + 
+                  "and Madhyamaka - Yogacara, the Epistemological tradition, and Tathagatagarbha - Tantric " + 
+    		          "Buddhism (Including China and Japan); Buddhism in Nepal and Tibet - Buddhism in South and " + 
+                  "Southeast Asia, and - Buddhism in China, East Asia, and Japan.";
+    Directory dir = newDirectory();
+    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);
+    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, analyzer);
+    
+    FieldType positionsType = new FieldType(TextField.TYPE_STORED);
+    positionsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);
+    Field body = new Field("body", text, positionsType);
+    Document document = new Document();
+    document.add(body);
+    iw.addDocument(document);
+    IndexReader ir = iw.getReader();
+    iw.close();
+    IndexSearcher searcher = newSearcher(ir);
+    PhraseQuery query = new PhraseQuery();
+    query.add(new Term("body", "buddhist"));
+    query.add(new Term("body", "origins"));
+    TopDocs topDocs = searcher.search(query, 10);
+    assertEquals(1, topDocs.totalHits);
+    PostingsHighlighter highlighter = new PostingsHighlighter();
+    String snippets[] = highlighter.highlight("body", query, searcher, topDocs, 2);
+    assertEquals(1, snippets.length);
+    assertTrue(snippets[0].contains("<b>Buddhist</b> <b>origins</b>"));
+    ir.close();
+    dir.close();
+  }
 }
Index: lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/Passage.java
===================================================================
--- lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/Passage.java	(revision 1449821)
+++ lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/Passage.java	(working copy)
@@ -20,6 +20,7 @@
 import org.apache.lucene.index.Term;
 import org.apache.lucene.util.ArrayUtil;
 import org.apache.lucene.util.RamUsageEstimator;
+import org.apache.lucene.util.SorterTemplate;
 
 /**
  * Represents a passage (typically a sentence of the document). 
@@ -53,6 +54,45 @@
     numMatches++;
   }
   
+  void sort() {
+    final int starts[] = matchStarts;
+    final int ends[] = matchEnds;
+    final Term terms[] = matchTerms;
+    new SorterTemplate() {
+      @Override
+      protected void swap(int i, int j) {
+        int temp = starts[i];
+        starts[i] = starts[j];
+        starts[j] = temp;
+        
+        temp = ends[i];
+        ends[i] = ends[j];
+        ends[j] = temp;
+        
+        Term tempTerm = terms[i];
+        terms[i] = terms[j];
+        terms[j] = tempTerm;
+      }
+
+      @Override
+      protected int compare(int i, int j) {
+        return Integer.compare(starts[i], starts[j]);
+      }
+
+      @Override
+      protected void setPivot(int i) {
+        pivot = starts[i];
+      }
+
+      @Override
+      protected int comparePivot(int j) {
+        return Integer.compare(pivot, starts[j]);
+      }
+      
+      int pivot;
+    }.mergeSort(0, numMatches-1);
+  }
+  
   void reset() {
     startOffset = endOffset = -1;
     score = 0.0f;
Index: lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter.java
===================================================================
--- lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter.java	(revision 1449821)
+++ lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter.java	(working copy)
@@ -399,6 +399,9 @@
         if (start >= contentLength) {
           Passage passages[] = new Passage[passageQueue.size()];
           passageQueue.toArray(passages);
+          for (Passage p : passages) {
+            p.sort();
+          }
           // sort in ascending order
           Arrays.sort(passages, new Comparator<Passage>() {
             @Override
