diff --git a/gradle/java/javac.gradle b/gradle/java/javac.gradle
index 78c5fb40a9e..a152919e16d 100644
--- a/gradle/java/javac.gradle
+++ b/gradle/java/javac.gradle
@@ -16,6 +16,15 @@
  */
 
 // Configure Java project defaults.
+java {
+  toolchain {
+    languageVersion = JavaLanguageVersion.of(11)
+  }
+}
+
+tasks.withType( JavaCompile ).configureEach {
+  options.forkOptions.jvmArgs.addAll( ['--add-opens', 'jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED'] )
+}
 
 allprojects {
   plugins.withType(JavaPlugin) {
diff --git a/gradle/testing/alternative-jdk-support.gradle b/gradle/testing/alternative-jdk-support.gradle
index 2b252afe3f0..fe4027e00ea 100644
--- a/gradle/testing/alternative-jdk-support.gradle
+++ b/gradle/testing/alternative-jdk-support.gradle
@@ -18,60 +18,60 @@
 // This adds support for compiling and testing against a different Java runtime.
 // This is the only way to build against JVMs not yet supported by Gradle itself.
 
-JavaInstallationRegistry registry = extensions.getByType(JavaInstallationRegistry)
-
-JavaInstallation currentJvm = registry.installationForCurrentVirtualMachine.get()
-
-JavaInstallation altJvm = {
-  def runtimeJavaHome = propertyOrDefault("runtime.java.home", System.getenv('RUNTIME_JAVA_HOME'))
-  if (!runtimeJavaHome) {
-    return currentJvm
-  } else {
-    return registry.installationForDirectory(
-        layout.projectDirectory.dir(runtimeJavaHome)).get()
-  }
-}()
-
-// Set up root project's property.
-rootProject.ext.runtimeJava = altJvm
-rootProject.ext.runtimeJavaVersion = altJvm.javaVersion
-
-if (!currentJvm.javaExecutable.equals(altJvm.javaExecutable)) {
-  // Set up java toolchain tasks to use the alternative Java.
-  // This is a related Gradle issue for the future:
-  // https://github.com/gradle/gradle/issues/1652
-
-  configure(rootProject) {
-    task altJvmWarning() {
-      doFirst {
-        logger.warn("""NOTE: Alternative java toolchain will be used for compilation and tests:
-  Project will use Java ${altJvm.javaVersion} from: ${altJvm.installationDirectory}
-  Gradle runs with Java ${currentJvm.javaVersion} from: ${currentJvm.installationDirectory}
-""")
-      }
-    }
-  }
-
-  // Set up toolchain-dependent tasks to use the alternative JVM.
-  allprojects {
-    // Any tests
-    tasks.withType(Test) {
-      dependsOn ":altJvmWarning"
-      executable = altJvm.javaExecutable
-    }
-
-    // Any javac compilation tasks
-    tasks.withType(JavaCompile) {
-      dependsOn ":altJvmWarning"
-      options.fork = true
-      options.forkOptions.javaHome = altJvm.installationDirectory.asFile
-    }
-
-    // Javadoc compilation.
-    def javadocExecutable = altJvm.jdk.get().javadocExecutable.asFile
-    tasks.matching { it.name == "renderJavadoc" || it.name == "renderSiteJavadoc" }.all {
-      dependsOn ":altJvmWarning"
-      executable = javadocExecutable
-    }
-  }
-}
+//JavaInstallationRegistry registry = extensions.getByType(JavaInstallationRegistry)
+//
+//JavaInstallation currentJvm = registry.installationForCurrentVirtualMachine.get()
+//
+//JavaInstallation altJvm = {
+//  def runtimeJavaHome = propertyOrDefault("runtime.java.home", System.getenv('RUNTIME_JAVA_HOME'))
+//  if (!runtimeJavaHome) {
+//    return currentJvm
+//  } else {
+//    return registry.installationForDirectory(
+//        layout.projectDirectory.dir(runtimeJavaHome)).get()
+//  }
+//}()
+//
+//// Set up root project's property.
+//rootProject.ext.runtimeJava = altJvm
+rootProject.ext.runtimeJavaVersion = JavaVersion.VERSION_11
+//
+//if (!currentJvm.javaExecutable.equals(altJvm.javaExecutable)) {
+//  // Set up java toolchain tasks to use the alternative Java.
+//  // This is a related Gradle issue for the future:
+//  // https://github.com/gradle/gradle/issues/1652
+//
+//  configure(rootProject) {
+//    task altJvmWarning() {
+//      doFirst {
+//        logger.warn("""NOTE: Alternative java toolchain will be used for compilation and tests:
+//  Project will use Java ${altJvm.javaVersion} from: ${altJvm.installationDirectory}
+//  Gradle runs with Java ${currentJvm.javaVersion} from: ${currentJvm.installationDirectory}
+//""")
+//      }
+//    }
+//  }
+//
+//  // Set up toolchain-dependent tasks to use the alternative JVM.
+//  allprojects {
+//    // Any tests
+//    tasks.withType(Test) {
+//      dependsOn ":altJvmWarning"
+//      executable = altJvm.javaExecutable
+//    }
+//
+//    // Any javac compilation tasks
+//    tasks.withType(JavaCompile) {
+//      dependsOn ":altJvmWarning"
+//      options.fork = true
+//      options.forkOptions.javaHome = altJvm.installationDirectory.asFile
+//    }
+//
+//    // Javadoc compilation.
+//    def javadocExecutable = altJvm.jdk.get().javadocExecutable.asFile
+//    tasks.matching { it.name == "renderJavadoc" || it.name == "renderSiteJavadoc" }.all {
+//      dependsOn ":altJvmWarning"
+//      executable = javadocExecutable
+//    }
+//  }
+//}
diff --git a/gradle/validation/check-environment.gradle b/gradle/validation/check-environment.gradle
index 46b2f8616d6..f38c28e9a7b 100644
--- a/gradle/validation/check-environment.gradle
+++ b/gradle/validation/check-environment.gradle
@@ -22,7 +22,7 @@ import org.gradle.util.GradleVersion
 
 configure(rootProject) {
   ext {
-    expectedGradleVersion = '6.8.3'
+    expectedGradleVersion = '7.0.2'
     minJavaVersion = JavaVersion.VERSION_11
   }
 
diff --git a/gradle/wrapper/gradle-wrapper.jar.version b/gradle/wrapper/gradle-wrapper.jar.version
index 021c9405b1d..2f963cd6d1c 100644
--- a/gradle/wrapper/gradle-wrapper.jar.version
+++ b/gradle/wrapper/gradle-wrapper.jar.version
@@ -1 +1 @@
-6.8.3
+7.0.2
\ No newline at end of file
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 8cf6eb5ad22..29e41345763 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,5 +1,5 @@
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-6.8.3-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-7.0.2-all.zip
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
