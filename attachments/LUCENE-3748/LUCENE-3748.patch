Index: solr/core/src/java/org/apache/solr/analysis/EnglishPossessiveFilterFactory.java
===================================================================
--- solr/core/src/java/org/apache/solr/analysis/EnglishPossessiveFilterFactory.java	(revision 1239940)
+++ solr/core/src/java/org/apache/solr/analysis/EnglishPossessiveFilterFactory.java	(working copy)
@@ -17,6 +17,8 @@
  * limitations under the License.
  */
 
+import java.util.Map;
+
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.en.EnglishPossessiveFilter;
 
@@ -33,7 +35,14 @@
  *
  */
 public class EnglishPossessiveFilterFactory extends BaseTokenFilterFactory {
+  
+  @Override
+  public void init(Map<String,String> args) {
+    super.init(args);
+    assureMatchVersion();
+  }
+  
   public TokenStream create(TokenStream input) {
-    return new EnglishPossessiveFilter(input);
+    return new EnglishPossessiveFilter(luceneMatchVersion, input);
   }
 }
Index: modules/analysis/common/src/test/org/apache/lucene/analysis/en/TestEnglishAnalyzer.java
===================================================================
--- modules/analysis/common/src/test/org/apache/lucene/analysis/en/TestEnglishAnalyzer.java	(revision 1239940)
+++ modules/analysis/common/src/test/org/apache/lucene/analysis/en/TestEnglishAnalyzer.java	(working copy)
@@ -41,6 +41,8 @@
     assertAnalyzesTo(a, "the", new String[] {});
     // possessive removal
     checkOneTermReuse(a, "steven's", "steven");
+    checkOneTermReuse(a, "steven\u2019s", "steven");
+    checkOneTermReuse(a, "steven\uFF07s", "steven");
   }
   
   /** test use of exclusion set */
Index: modules/analysis/common/src/java/org/apache/lucene/analysis/en/EnglishAnalyzer.java
===================================================================
--- modules/analysis/common/src/java/org/apache/lucene/analysis/en/EnglishAnalyzer.java	(revision 1239940)
+++ modules/analysis/common/src/java/org/apache/lucene/analysis/en/EnglishAnalyzer.java	(working copy)
@@ -106,7 +106,7 @@
     TokenStream result = new StandardFilter(matchVersion, source);
     // prior to this we get the classic behavior, standardfilter does it for us.
     if (matchVersion.onOrAfter(Version.LUCENE_31))
-      result = new EnglishPossessiveFilter(result);
+      result = new EnglishPossessiveFilter(matchVersion, result);
     result = new LowerCaseFilter(matchVersion, result);
     result = new StopFilter(matchVersion, result, stopwords);
     if(!stemExclusionSet.isEmpty())
Index: modules/analysis/common/src/java/org/apache/lucene/analysis/en/EnglishPossessiveFilter.java
===================================================================
--- modules/analysis/common/src/java/org/apache/lucene/analysis/en/EnglishPossessiveFilter.java	(revision 1239940)
+++ modules/analysis/common/src/java/org/apache/lucene/analysis/en/EnglishPossessiveFilter.java	(working copy)
@@ -22,15 +22,34 @@
 import org.apache.lucene.analysis.TokenFilter;
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
+import org.apache.lucene.util.Version;
 
 /**
  * TokenFilter that removes possessives (trailing 's) from words.
+ * <a name="version"/>
+ * <p>You must specify the required {@link Version}
+ * compatibility when creating EnglishPossessiveFilter:
+ * <ul>
+ *    <li> As of 3.6, U+2019 RIGHT SINGLE QUOTATION MARK and 
+ *         U+FF07 FULLWIDTH APOSTROPHE are also treated as
+ *         quotation marks.
+ * </ul>
  */
 public final class EnglishPossessiveFilter extends TokenFilter {
   private final CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);
+  private Version matchVersion;
 
+  /**
+   * @deprecated Use {@link #EnglishPossessiveFilter(Version, TokenStream)} instead.
+   */
+  @Deprecated
   public EnglishPossessiveFilter(TokenStream input) {
+    this(Version.LUCENE_35, input);
+  }
+
+  public EnglishPossessiveFilter(Version version, TokenStream input) {
     super(input);
+    this.matchVersion = version;
   }
 
   @Override
@@ -42,10 +61,12 @@
     final char[] buffer = termAtt.buffer();
     final int bufferLength = termAtt.length();
     
-    if (bufferLength >= 2 &&
-        buffer[bufferLength-2] == '\'' &&
-        (buffer[bufferLength-1] == 's' || buffer[bufferLength-1] == 'S'))
+    if (bufferLength >= 2 && 
+        (buffer[bufferLength-2] == '\'' || 
+         (matchVersion.onOrAfter(Version.LUCENE_36) && (buffer[bufferLength-2] == '\u2019' || buffer[bufferLength-2] == '\uFF07'))) &&
+        (buffer[bufferLength-1] == 's' || buffer[bufferLength-1] == 'S')) {
       termAtt.setLength(bufferLength - 2); // Strip last 2 characters off
+    }
 
     return true;
   }
Index: lucene/contrib/CHANGES.txt
===================================================================
--- lucene/contrib/CHANGES.txt	(revision 1239940)
+++ lucene/contrib/CHANGES.txt	(working copy)
@@ -210,6 +210,9 @@
  * LUCENE-3719: FVH: slow performance on very large queries.
    (Igor Motov via Koji Sekiguchi)
 
+ * LUCENE-3748: EnglishPossessiveFilter did not work with Unicode right 
+   single quotation mark (U+2019).  (David Croley via Robert Muir)
+
 Documentation
 
  * LUCENE-3599: Javadocs for DistanceUtils.haversine() were incorrectly
