Index: src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.java	(date 1523327887000)
+++ src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.java	(revision )
@@ -1024,7 +1024,8 @@
       final GeoPoint[] planeCrossings = plane.findIntersections(planetModel, edge.plane, bound1, bound2, edge.startPlane, edge.endPlane);
       if (planeCrossings != null && planeCrossings.length == 0) {
         // Sometimes on the hairy edge an intersection will be missed.  This check finds those.
-        if (!plane.evaluateIsZero(edge.startPoint) && !plane.evaluateIsZero(edge.endPoint)) {
+        if (Math.abs(plane.evaluate(edge.startPoint)) > Plane.MINIMUM_PLANE_OFFSET  &&
+            Math.abs(plane.evaluate(edge.endPoint)) > Plane.MINIMUM_PLANE_OFFSET) {
           return true;
         }
       }
@@ -1035,9 +1036,17 @@
       
       if (aboveCrossings != null) {
         aboveCrossingCount += aboveCrossings.length;
+      } else if (belowCrossings != null && belowCrossings.length > 0) {
+        if (abovePlane.evaluateIsZero(edge.startPlane) || abovePlane.evaluateIsZero(edge.endPlane)) {
+          aboveCrossingCount++;
+        }
       }
       if (belowCrossings != null) {
         belowCrossingCount += belowCrossings.length;
+      }  else if (aboveCrossings != null && aboveCrossings.length > 0) {
+        if (belowPlane.evaluateIsZero(edge.startPlane) || belowPlane.evaluateIsZero(edge.endPlane)) {
+          belowCrossingCount++;
+        }
       }
 
       return true;
@@ -1284,8 +1293,10 @@
         if (testPointCrossings != null && testPointCrossings.length == 0) {
           // As a last resort, see if the edge endpoints are on either plane.  This is sometimes necessary because the
           // intersection computation logic might not detect near-miss edges otherwise.
-          if (!travelPlane.evaluateIsZero(edge.startPoint) && !travelPlane.evaluateIsZero(edge.endPoint) &&
-            !testPointPlane.evaluateIsZero(edge.startPoint) && !testPointPlane.evaluateIsZero(edge.endPoint)) {
+          if (Math.abs(travelPlane.evaluate(edge.startPoint)) > Plane.MINIMUM_PLANE_OFFSET  &&
+              Math.abs(travelPlane.evaluate(edge.endPoint)) > Plane.MINIMUM_PLANE_OFFSET &&
+              Math.abs(testPointPlane.evaluate(edge.startPoint)) > Plane.MINIMUM_PLANE_OFFSET &&
+              Math.abs(testPointPlane.evaluate(edge.endPoint)) > Plane.MINIMUM_PLANE_OFFSET) {
             return true;
           }
         }
@@ -1316,33 +1327,52 @@
       // It may appear in both lists.  Use a hash for this right now.
       final Set<GeoPoint> countingHash = new HashSet<>(2);
       
-      if (travelInnerCrossings != null) {
+      if (travelInnerCrossings != null && travelInnerCrossings.length > 0) {
         for (final GeoPoint crossing : travelInnerCrossings) {
           //System.out.println("  Travel inner point "+crossing+"; edgeplane="+edge.plane.evaluate(crossing)+"; travelInsidePlane="+travelInsidePlane.evaluate(crossing)+"; edgestartplane="+edge.startPlane.evaluate(crossing)+"; edgeendplane="+edge.endPlane.evaluate(crossing));
           countingHash.add(crossing);
         }
+      } else if (travelOuterCrossings != null && travelOuterCrossings.length > 0) {
+        if (travelInsidePlane.evaluateIsZero(edge.endPoint) || travelInsidePlane.evaluateIsZero(edge.startPoint)) {
+            countingHash.add(edge.endPoint);
+        }
       }
-      if (testPointInnerCrossings != null) {
+
+      if (testPointInnerCrossings != null && testPointInnerCrossings.length > 0) {
         for (final GeoPoint crossing : testPointInnerCrossings) {
           //System.out.println("  Test point inner point "+crossing+"; edgeplane="+edge.plane.evaluate(crossing)+"; testPointInsidePlane="+testPointInsidePlane.evaluate(crossing)+"; edgestartplane="+edge.startPlane.evaluate(crossing)+"; edgeendplane="+edge.endPlane.evaluate(crossing));
           countingHash.add(crossing);
         }
+      } else if (testPointOuterCrossings != null && testPointOuterCrossings.length > 0) {
+        if (testPointInsidePlane.evaluateIsZero(edge.endPoint) || testPointInsidePlane.evaluateIsZero(edge.startPoint)) {
+          countingHash.add(edge.endPoint);
+        }
       }
       //System.out.println(" Edge added "+countingHash.size()+" to innerCrossingCount");
       innerCrossingCount += countingHash.size();
       
       countingHash.clear();
-      if (travelOuterCrossings != null) {
+
+      if (travelOuterCrossings != null && travelOuterCrossings.length > 0) {
         for (final GeoPoint crossing : travelOuterCrossings) {
           //System.out.println("  Travel outer point "+crossing+"; edgeplane="+edge.plane.evaluate(crossing)+"; travelOutsidePlane="+travelOutsidePlane.evaluate(crossing)+"; edgestartplane="+edge.startPlane.evaluate(crossing)+"; edgeendplane="+edge.endPlane.evaluate(crossing));
           countingHash.add(crossing);
         }
+      } else if (travelInnerCrossings != null && travelInnerCrossings.length > 0){
+        if (travelOutsidePlane.evaluateIsZero(edge.endPoint) || travelOutsidePlane.evaluateIsZero(edge.startPoint)) {
+          countingHash.add(edge.endPoint);
+        }
       }
-      if (testPointOuterCrossings != null) {
+
+      if (testPointOuterCrossings != null && testPointOuterCrossings.length > 0) {
         for (final GeoPoint crossing : testPointOuterCrossings) {
           //System.out.println("  Test point outer point "+crossing+"; edgeplane="+edge.plane.evaluate(crossing)+"; testPointOutsidePlane="+testPointOutsidePlane.evaluate(crossing)+"; edgestartplane="+edge.startPlane.evaluate(crossing)+"; edgeendplane="+edge.endPlane.evaluate(crossing));
           countingHash.add(crossing);
         }
+      } else if (testPointInnerCrossings != null && testPointInnerCrossings.length > 0) {
+        if (testPointOutsidePlane.evaluateIsZero(edge.endPoint) || testPointOutsidePlane.evaluateIsZero(edge.startPoint)) {
+          countingHash.add(edge.endPoint);
+        }
       }
       //System.out.println(" Edge added "+countingHash.size()+" to outerCrossingCount");
       outerCrossingCount += countingHash.size();
