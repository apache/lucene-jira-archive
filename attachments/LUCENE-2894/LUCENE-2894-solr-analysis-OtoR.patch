Index: solr/src/java/org/apache/solr/analysis/PortugueseMinimalStemFilterFactory.java
===================================================================
--- solr/src/java/org/apache/solr/analysis/PortugueseMinimalStemFilterFactory.java	(revision 1073191)
+++ solr/src/java/org/apache/solr/analysis/PortugueseMinimalStemFilterFactory.java	(working copy)
@@ -20,7 +20,17 @@
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.pt.PortugueseMinimalStemFilter;
 
-/** Factory for {@link PortugueseMinimalStemFilter} */
+/** 
+ * Factory for {@link PortugueseMinimalStemFilter}.
+ * <pre class="prettyprint" >
+ * &lt;fieldType name="text_ptminstem" class="solr.TextField" positionIncrementGap="100"&gt;
+ *   &lt;analyzer&gt;
+ *     &lt;tokenizer class="solr.WhitespaceTokenizerFactory"/&gt;
+ *     &lt;filter class="solr.PortugueseMinimalStemFilterFactory"/&gt;
+ *   &lt;/analyzer&gt;
+ * &lt;/fieldType&gt;</pre>
+ * @version $Id$
+ */
 public class PortugueseMinimalStemFilterFactory extends BaseTokenFilterFactory {
   public TokenStream create(TokenStream input) {
     return new PortugueseMinimalStemFilter(input);
Index: solr/src/java/org/apache/solr/analysis/PatternTokenizerFactory.java
===================================================================
--- solr/src/java/org/apache/solr/analysis/PatternTokenizerFactory.java	(revision 1073191)
+++ solr/src/java/org/apache/solr/analysis/PatternTokenizerFactory.java	(working copy)
@@ -28,6 +28,7 @@
 
 
 /**
+ * Factory for {@link PatternTokenizer}.
  * This tokenizer uses regex pattern matching to construct distinct tokens
  * for the input stream.  It takes two arguments:  "pattern" and "group".
  * <p/>
@@ -52,6 +53,13 @@
  * </p>
  * <p>NOTE: This Tokenizer does not output tokens that are of zero length.</p>
  *
+ * <pre class="prettyprint" >
+ * &lt;fieldType name="text_ptn" class="solr.TextField" positionIncrementGap="100"&gt;
+ *   &lt;analyzer&gt;
+ *     &lt;tokenizer class="solr.PatternTokenizerFactory" pattern="\'([^\']+)\'" group="1"/&gt;
+ *   &lt;/analyzer&gt;
+ * &lt;/fieldType&gt;</pre> 
+ * 
  * @see PatternTokenizer
  * @since solr1.2
  * @version $Id$
Index: solr/src/java/org/apache/solr/analysis/PersianNormalizationFilterFactory.java
===================================================================
--- solr/src/java/org/apache/solr/analysis/PersianNormalizationFilterFactory.java	(revision 1073191)
+++ solr/src/java/org/apache/solr/analysis/PersianNormalizationFilterFactory.java	(working copy)
@@ -22,7 +22,17 @@
 import org.apache.lucene.analysis.fa.PersianNormalizationFilter;
 import org.apache.lucene.analysis.TokenStream;
 
-/** Factory for {@link PersianNormalizationFilter} */
+/** 
+ * Factory for {@link PersianNormalizationFilter}.
+ * <pre class="prettyprint" >
+ * &lt;fieldType name="text_fanormal" class="solr.TextField" positionIncrementGap="100"&gt;
+ *   &lt;analyzer&gt;
+ *     &lt;tokenizer class="solr.WhitespaceTokenizerFactory"/&gt;
+ *     &lt;filter class="solr.PersianNormalizationFilterFactory"/&gt;
+ *   &lt;/analyzer&gt;
+ * &lt;/fieldType&gt;</pre>
+ * @version $Id$
+ */
 public class PersianNormalizationFilterFactory extends BaseTokenFilterFactory {
   public PersianNormalizationFilter create(TokenStream input) {
     return new PersianNormalizationFilter(input);
Index: solr/src/java/org/apache/solr/analysis/PatternReplaceFilterFactory.java
===================================================================
--- solr/src/java/org/apache/solr/analysis/PatternReplaceFilterFactory.java	(revision 1073191)
+++ solr/src/java/org/apache/solr/analysis/PatternReplaceFilterFactory.java	(working copy)
@@ -24,6 +24,14 @@
 import java.util.regex.PatternSyntaxException;
 
 /**
+ * Factory for {@link PatternReplaceFilter}. 
+ * <pre class="prettyprint" >
+ * &lt;fieldType name="text_ptnreplace" class="solr.TextField" positionIncrementGap="100"&gt;
+ *   &lt;analyzer&gt;
+ *     &lt;tokenizer class="solr.KeywordTokenizerFactory"/&gt;
+ *     &lt;filter class="solr.PatternReplaceFilterFactory" pattern="([^a-z])" replacement="" replace="all"/&gt;
+ *   &lt;/analyzer&gt;
+ * &lt;/fieldType&gt;</pre>
  * @version $Id$
  * @see PatternReplaceFilter
  */
Index: solr/src/java/org/apache/solr/analysis/ReversedWildcardFilterFactory.java
===================================================================
--- solr/src/java/org/apache/solr/analysis/ReversedWildcardFilterFactory.java	(revision 1073191)
+++ solr/src/java/org/apache/solr/analysis/ReversedWildcardFilterFactory.java	(working copy)
@@ -48,6 +48,15 @@
  * </ul>
  * Note 1: This filter always reverses input tokens during indexing.
  * Note 2: Query tokens without wildcard characters will never be reversed.
+ * <pre class="prettyprint" >
+ * &lt;fieldType name="text_rvswc" class="solr.TextField" positionIncrementGap="100"&gt;
+ *   &lt;analyzer&gt;
+ *     &lt;tokenizer class="solr.WhitespaceTokenizerFactory"/&gt;
+ *     &lt;filter class="solr.ReversedWildcardFilterFactory" withOriginal="true"
+  *             maxPosAsterisk="2" maxPosQuestion="1" minTrailing="2" maxFractionAsterisk="0"/&gt;
+ *   &lt;/analyzer&gt;
+ * &lt;/fieldType&gt;</pre>
+ * @version $Id$
  */
 public class ReversedWildcardFilterFactory extends BaseTokenFilterFactory {
   
Index: solr/src/java/org/apache/solr/analysis/PositionFilterFactory.java
===================================================================
--- solr/src/java/org/apache/solr/analysis/PositionFilterFactory.java	(revision 1073191)
+++ solr/src/java/org/apache/solr/analysis/PositionFilterFactory.java	(working copy)
@@ -23,9 +23,16 @@
 import java.util.Map;
 
 /**
+ * Factory for {@link PositionFilter}.
  * Set the positionIncrement of all tokens to the "positionIncrement", except the first return token which retains its
  * original positionIncrement value. The default positionIncrement value is zero.
- *
+ * <pre class="prettyprint" >
+ * &lt;fieldType name="text_position" class="solr.TextField" positionIncrementGap="100"&gt;
+ *   &lt;analyzer&gt;
+ *     &lt;tokenizer class="solr.WhitespaceTokenizerFactory"/&gt;
+ *     &lt;filter class="solr.PositionFilterFactory" positionIncrement="0"/&gt;
+ *   &lt;/analyzer&gt;
+ * &lt;/fieldType&gt;</pre>
  * @version $Id$
  * @see org.apache.lucene.analysis.position.PositionFilter
  * @since solr 1.4
Index: solr/src/java/org/apache/solr/analysis/PathHierarchyTokenizerFactory.java
===================================================================
--- solr/src/java/org/apache/solr/analysis/PathHierarchyTokenizerFactory.java	(revision 1073191)
+++ solr/src/java/org/apache/solr/analysis/PathHierarchyTokenizerFactory.java	(working copy)
@@ -24,6 +24,13 @@
 
 
 /**
+ * Factory for {@link PathHierarchyTokenizer}. 
+ * <pre class="prettyprint" >
+ * &lt;fieldType name="text_path" class="solr.TextField" positionIncrementGap="100"&gt;
+ *   &lt;analyzer&gt;
+ *     &lt;tokenizer class="solr.PathHierarchyTokenizerFactory" delimiter="\" replace="/"/&gt;
+ *   &lt;/analyzer&gt;
+ * &lt;/fieldType&gt;</pre> 
  * @version $Id$
  */
 public class PathHierarchyTokenizerFactory extends BaseTokenizerFactory {
Index: solr/src/java/org/apache/solr/analysis/PortugueseLightStemFilterFactory.java
===================================================================
--- solr/src/java/org/apache/solr/analysis/PortugueseLightStemFilterFactory.java	(revision 1073191)
+++ solr/src/java/org/apache/solr/analysis/PortugueseLightStemFilterFactory.java	(working copy)
@@ -20,7 +20,17 @@
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.pt.PortugueseLightStemFilter;
 
-/** Factory for {@link PortugueseLightStemFilter} */
+/** 
+ * Factory for {@link PortugueseLightStemFilter}.
+ * <pre class="prettyprint" >
+ * &lt;fieldType name="text_ptlgtstem" class="solr.TextField" positionIncrementGap="100"&gt;
+ *   &lt;analyzer&gt;
+ *     &lt;tokenizer class="solr.WhitespaceTokenizerFactory"/&gt;
+ *     &lt;filter class="solr.PortugueseLightStemFilterFactory"/&gt;
+ *   &lt;/analyzer&gt;
+ * &lt;/fieldType&gt;</pre>
+ * @version $Id$
+ */
 public class PortugueseLightStemFilterFactory extends BaseTokenFilterFactory {
   public TokenStream create(TokenStream input) {
     return new PortugueseLightStemFilter(input);
Index: solr/src/java/org/apache/solr/analysis/PortugueseStemFilterFactory.java
===================================================================
--- solr/src/java/org/apache/solr/analysis/PortugueseStemFilterFactory.java	(revision 1073191)
+++ solr/src/java/org/apache/solr/analysis/PortugueseStemFilterFactory.java	(working copy)
@@ -20,7 +20,17 @@
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.pt.PortugueseStemFilter;
 
-/** Factory for {@link PortugueseStemFilter} */
+/** 
+ * Factory for {@link PortugueseStemFilter}. 
+ * <pre class="prettyprint" >
+ * &lt;fieldType name="text_ptstem" class="solr.TextField" positionIncrementGap="100"&gt;
+ *   &lt;analyzer&gt;
+ *     &lt;tokenizer class="solr.WhitespaceTokenizerFactory"/&gt;
+ *     &lt;filter class="solr.PortugueseStemFilterFactory"/&gt;
+ *   &lt;/analyzer&gt;
+ * &lt;/fieldType&gt;</pre>
+ * @version $Id$
+ */
 public class PortugueseStemFilterFactory extends BaseTokenFilterFactory {
   public TokenStream create(TokenStream input) {
     return new PortugueseStemFilter(input);
Index: solr/src/java/org/apache/solr/analysis/PorterStemFilterFactory.java
===================================================================
--- solr/src/java/org/apache/solr/analysis/PorterStemFilterFactory.java	(revision 1073191)
+++ solr/src/java/org/apache/solr/analysis/PorterStemFilterFactory.java	(working copy)
@@ -21,6 +21,15 @@
 import org.apache.lucene.analysis.en.PorterStemFilter;
 
 /**
+ * Factory for {@link PorterStemFilter}.
+ * <pre class="prettyprint" >
+ * &lt;fieldType name="text_porterstem" class="solr.TextField" positionIncrementGap="100"&gt;
+ *   &lt;analyzer&gt;
+ *     &lt;tokenizer class="solr.WhitespaceTokenizerFactory"/&gt;
+ *     &lt;tokenizer class="solr.LowerCaseTokenizerFactory"/&gt;
+ *     &lt;filter class="solr.PorterStemFilterFactory"/&gt;
+ *   &lt;/analyzer&gt;
+ * &lt;/fieldType&gt;</pre>
  * @version $Id$
  */
 public class PorterStemFilterFactory extends BaseTokenFilterFactory {
Index: solr/src/java/org/apache/solr/analysis/PatternReplaceCharFilterFactory.java
===================================================================
--- solr/src/java/org/apache/solr/analysis/PatternReplaceCharFilterFactory.java	(revision 1073191)
+++ solr/src/java/org/apache/solr/analysis/PatternReplaceCharFilterFactory.java	(working copy)
@@ -25,7 +25,15 @@
 import org.apache.lucene.analysis.pattern.PatternReplaceCharFilter;
 
 /**
- * 
+ * Factory for {@link PatternReplaceCharFilter}. 
+ * <pre class="prettyprint" >
+ * &lt;fieldType name="text_ptnreplace" class="solr.TextField" positionIncrementGap="100"&gt;
+ *   &lt;analyzer&gt;
+ *     &lt;charFilter class="solr.PatternReplaceCharFilterFactory" pattern="([^a-z])" replacement=""
+ *                 maxBlockChars="10000" blockDelimiters="|"/&gt;
+ *     &lt;tokenizer class="solr.KeywordTokenizerFactory"/&gt;
+ *   &lt;/analyzer&gt;
+ * &lt;/fieldType&gt;</pre>
  * @version $Id$
  * @since Solr 1.5
  */
Index: solr/src/java/org/apache/solr/analysis/RemoveDuplicatesTokenFilterFactory.java
===================================================================
--- solr/src/java/org/apache/solr/analysis/RemoveDuplicatesTokenFilterFactory.java	(revision 1073191)
+++ solr/src/java/org/apache/solr/analysis/RemoveDuplicatesTokenFilterFactory.java	(working copy)
@@ -21,6 +21,14 @@
 import org.apache.lucene.analysis.miscellaneous.RemoveDuplicatesTokenFilter;
 
 /**
+ * Factory for {@link RemoveDuplicatesTokenFilter}.
+ * <pre class="prettyprint" >
+ * &lt;fieldType name="text_rmdup" class="solr.TextField" positionIncrementGap="100"&gt;
+ *   &lt;analyzer&gt;
+ *     &lt;tokenizer class="solr.WhitespaceTokenizerFactory"/&gt;
+ *     &lt;filter class="solr.RemoveDuplicatesTokenFilterFactory"/&gt;
+ *   &lt;/analyzer&gt;
+ * &lt;/fieldType&gt;</pre>
  * @version $Id$
  */
 public class RemoveDuplicatesTokenFilterFactory extends BaseTokenFilterFactory {
Index: solr/src/java/org/apache/solr/analysis/ReverseStringFilterFactory.java
===================================================================
--- solr/src/java/org/apache/solr/analysis/ReverseStringFilterFactory.java	(revision 1073191)
+++ solr/src/java/org/apache/solr/analysis/ReverseStringFilterFactory.java	(working copy)
@@ -21,8 +21,15 @@
 import org.apache.lucene.analysis.reverse.ReverseStringFilter;
 
 /**
+ * Factory for {@link ReverseStringFilter}.
  * A FilterFactory which reverses the input.
- *
+ * <pre class="prettyprint" >
+ * &lt;fieldType name="text_rvsstr" class="solr.TextField" positionIncrementGap="100"&gt;
+ *   &lt;analyzer&gt;
+ *     &lt;tokenizer class="solr.WhitespaceTokenizerFactory"/&gt;
+ *     &lt;filter class="solr.ReverseStringFilterFactory"/&gt;
+ *   &lt;/analyzer&gt;
+ * &lt;/fieldType&gt;</pre>
  * @version $Id$
  * @since solr 1.4
  */
Index: solr/src/java/org/apache/solr/analysis/RussianLightStemFilterFactory.java
===================================================================
--- solr/src/java/org/apache/solr/analysis/RussianLightStemFilterFactory.java	(revision 1073191)
+++ solr/src/java/org/apache/solr/analysis/RussianLightStemFilterFactory.java	(working copy)
@@ -20,7 +20,17 @@
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.ru.RussianLightStemFilter;
 
-/** Factory for {@link RussianLightStemFilter} */
+/** 
+ * Factory for {@link RussianLightStemFilter}.
+ * <pre class="prettyprint" >
+ * &lt;fieldType name="text_rulgtstem" class="solr.TextField" positionIncrementGap="100"&gt;
+ *   &lt;analyzer&gt;
+ *     &lt;tokenizer class="solr.WhitespaceTokenizerFactory"/&gt;
+ *     &lt;filter class="solr.RussianLightStemFilterFactory"/&gt;
+ *   &lt;/analyzer&gt;
+ * &lt;/fieldType&gt;</pre>
+ * @version $Id$
+ */
 public class RussianLightStemFilterFactory extends BaseTokenFilterFactory {
   public TokenStream create(TokenStream input) {
     return new RussianLightStemFilter(input);
Index: solr/src/java/org/apache/solr/analysis/PhoneticFilterFactory.java
===================================================================
--- solr/src/java/org/apache/solr/analysis/PhoneticFilterFactory.java	(revision 1073191)
+++ solr/src/java/org/apache/solr/analysis/PhoneticFilterFactory.java	(working copy)
@@ -33,6 +33,8 @@
 import org.apache.solr.common.SolrException;
 
 /**
+ * Factory for {@link PhoneticFilter}.
+ * 
  * Create tokens based on phonetic encoders
  * 
  * http://jakarta.apache.org/commons/codec/api-release/org/apache/commons/codec/language/package-summary.html
@@ -41,6 +43,14 @@
  *  "encoder" required, one of "DoubleMetaphone", "Metaphone", "Soundex", "RefinedSoundex"
  * 
  * "inject" (default=true) add tokens to the stream with the offset=0
+ *
+ * <pre class="prettyprint" >
+ * &lt;fieldType name="text_phonetic" class="solr.TextField" positionIncrementGap="100"&gt;
+ *   &lt;analyzer&gt;
+ *     &lt;tokenizer class="solr.WhitespaceTokenizerFactory"/&gt;
+ *     &lt;filter class="solr.PhoneticFilterFactory" encoder="DoubleMetaphone" inject="true"/&gt;
+ *   &lt;/analyzer&gt;
+ * &lt;/fieldType&gt;</pre>
  * 
  * @version $Id$
  * @see PhoneticFilter
Index: solr/src/java/org/apache/solr/analysis/PersianCharFilterFactory.java
===================================================================
--- solr/src/java/org/apache/solr/analysis/PersianCharFilterFactory.java	(revision 1073191)
+++ solr/src/java/org/apache/solr/analysis/PersianCharFilterFactory.java	(working copy)
@@ -21,7 +21,15 @@
 import org.apache.lucene.analysis.fa.PersianCharFilter;
 
 /**
- * Factory for {@link PersianCharFilter}
+ * Factory for {@link PersianCharFilter}.
+ * <pre class="prettyprint" >
+ * &lt;fieldType name="text_fa" class="solr.TextField" positionIncrementGap="100"&gt;
+ *   &lt;analyzer&gt;
+ *     &lt;charFilter class="solr.PersianCharFilterFactory"/&gt;
+ *     &lt;tokenizer class="solr.WhitespaceTokenizerFactory"/&gt;
+ *   &lt;/analyzer&gt;
+ * &lt;/fieldType&gt;</pre>
+ * @version $Id$
  */
 public class PersianCharFilterFactory extends BaseCharFilterFactory {
 
