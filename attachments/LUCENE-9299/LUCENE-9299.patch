From 0e44641503a01b9409c3cbd75082d19b46f7f42c Mon Sep 17 00:00:00 2001
From: Stamatis Zampetakis <zabetak@gmail.com>
Date: Wed, 1 Apr 2020 10:38:28 +0200
Subject: [PATCH] LUCENE-9299: ClausesCheckVisitor fails to throw
 TooManyClauses exception when the clauses in a query exceeds the limit by 1

---
 lucene/CHANGES.txt                            |  3 ++
 .../apache/lucene/search/IndexSearcher.java   |  4 +--
 .../lucene/search/TestMaxClauseLimit.java     | 32 +++++++++++++++----
 3 files changed, 30 insertions(+), 9 deletions(-)

diff --git a/lucene/CHANGES.txt b/lucene/CHANGES.txt
index 1facd2026be..e6263b0d6ed 100644
--- a/lucene/CHANGES.txt
+++ b/lucene/CHANGES.txt
@@ -99,6 +99,9 @@ Bug fixes
 * LUCENE-9117: RamUsageEstimator hangs with AOT compilation. Removed any attempt to 
   estimate Long.valueOf cache size. (Cleber Muramoto, Dawid Weiss)
 
+* LUCENE-9299: ClausesCheckVisitor fails to throw TooManyClauses exception when
+  the clauses in a query exceeds the limit by 1 (Stamatis Zampetakis via )
+
 Other
 
 * LUCENE-8768: Fix Javadocs build in Java 11. (Namgyu Kim)
diff --git a/lucene/core/src/java/org/apache/lucene/search/IndexSearcher.java b/lucene/core/src/java/org/apache/lucene/search/IndexSearcher.java
index f658de09e72..9a7a90aa44e 100644
--- a/lucene/core/src/java/org/apache/lucene/search/IndexSearcher.java
+++ b/lucene/core/src/java/org/apache/lucene/search/IndexSearcher.java
@@ -782,7 +782,7 @@ public class IndexSearcher {
 
       @Override
       public void visitLeaf(Query query) {
-        if (numClauses > maxClauseCount) {
+        if (numClauses >= maxClauseCount) {
           throw new TooManyClauses();
         }
         ++numClauses;
@@ -790,7 +790,7 @@ public class IndexSearcher {
 
       @Override
       public void consumeTerms(Query query, Term... terms) {
-        if (numClauses > maxClauseCount) {
+        if (numClauses >= maxClauseCount) {
           throw new TooManyClauses();
         }
         ++numClauses;
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestMaxClauseLimit.java b/lucene/core/src/test/org/apache/lucene/search/TestMaxClauseLimit.java
index e586e28167f..cff6a396462 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestMaxClauseLimit.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestMaxClauseLimit.java
@@ -25,14 +25,10 @@ import org.apache.lucene.index.Term;
 import org.apache.lucene.util.LuceneTestCase;
 
 public class TestMaxClauseLimit extends LuceneTestCase {
-  public void testFlattenInnerDisjunctionsWithMoreThan1024Terms() throws IOException {
+  public void testFlattenInnerDisjunctionsWithOneTermOverLimit() throws IOException {
     IndexSearcher searcher = newSearcher(new MultiReader());
-
-    BooleanQuery.Builder builder1024 = new BooleanQuery.Builder();
-    for(int i = 0; i < 1024; i++) {
-      builder1024.add(new TermQuery(new Term("foo", "bar-" + i)), BooleanClause.Occur.SHOULD);
-    }
-    Query inner = builder1024.build();
+    int termsNumber = IndexSearcher.getMaxClauseCount();
+    Query inner = createBooleanTermQuery(BooleanClause.Occur.SHOULD, termsNumber);
     Query query = new BooleanQuery.Builder()
         .add(inner, BooleanClause.Occur.SHOULD)
         .add(new TermQuery(new Term("foo", "baz")), BooleanClause.Occur.SHOULD)
@@ -43,6 +39,28 @@ public class TestMaxClauseLimit extends LuceneTestCase {
     });
   }
 
+  public void testConjunctiveQueryWithOneTermOverLimit() throws IOException {
+    IndexSearcher searcher = newSearcher(new MultiReader());
+    int termsNumber = IndexSearcher.getMaxClauseCount();
+    Query queryMaxClauses = createBooleanTermQuery(BooleanClause.Occur.MUST, termsNumber);
+    Query queryMaxClausesPlusOne = new BooleanQuery.Builder()
+            .add(queryMaxClauses, BooleanClause.Occur.MUST)
+            .add(new TermQuery(new Term("foo", "baz-" + termsNumber)), BooleanClause.Occur.MUST)
+            .build();
+
+    expectThrows(IndexSearcher.TooManyClauses.class, () -> {
+      searcher.rewrite(queryMaxClausesPlusOne);
+    });
+  }
+
+  private Query createBooleanTermQuery(BooleanClause.Occur occur, int termsNumber) {
+    BooleanQuery.Builder builder = new BooleanQuery.Builder();
+    for (int i = 0; i < termsNumber; i++) {
+      builder.add(new TermQuery(new Term("foo", "bar-" + i)), occur);
+    }
+    return builder.build();
+  }
+
   public void testLargeTermsNestedFirst() throws IOException {
     IndexSearcher searcher = newSearcher(new MultiReader());
     BooleanQuery.Builder nestedBuilder = new BooleanQuery.Builder();
-- 
2.20.1

