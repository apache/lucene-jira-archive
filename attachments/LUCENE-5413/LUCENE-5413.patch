Index: lucene/core/src/test/org/apache/lucene/codecs/lucene3x/TestLucene3xPostingsFormat.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/codecs/lucene3x/TestLucene3xPostingsFormat.java	(revision 1560409)
+++ lucene/core/src/test/org/apache/lucene/codecs/lucene3x/TestLucene3xPostingsFormat.java	(working copy)
@@ -31,7 +31,7 @@
   /** we will manually instantiate preflex-rw here */
   @BeforeClass
   public static void beforeClass3xPostingsFormat() {
-    LuceneTestCase.PREFLEX_IMPERSONATION_IS_ACTIVE = true;
+    LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;
   }
 
   @Override
Index: lucene/core/src/test/org/apache/lucene/codecs/lucene3x/TestLucene3xStoredFieldsFormat.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/codecs/lucene3x/TestLucene3xStoredFieldsFormat.java	(revision 1560409)
+++ lucene/core/src/test/org/apache/lucene/codecs/lucene3x/TestLucene3xStoredFieldsFormat.java	(working copy)
@@ -27,7 +27,7 @@
 
   @Override
   public void setUp() throws Exception {
-    LuceneTestCase.PREFLEX_IMPERSONATION_IS_ACTIVE = true;
+    LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;
     super.setUp();
   }
 
Index: lucene/core/src/test/org/apache/lucene/codecs/lucene3x/TestLucene3xTermVectorsFormat.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/codecs/lucene3x/TestLucene3xTermVectorsFormat.java	(revision 1560409)
+++ lucene/core/src/test/org/apache/lucene/codecs/lucene3x/TestLucene3xTermVectorsFormat.java	(working copy)
@@ -28,7 +28,7 @@
 
   @Override
   public void setUp() throws Exception {
-    LuceneTestCase.PREFLEX_IMPERSONATION_IS_ACTIVE = true;
+    LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;
     super.setUp();
   }
 
Index: lucene/core/src/test/org/apache/lucene/codecs/lucene3x/TestSurrogates.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/codecs/lucene3x/TestSurrogates.java	(revision 1560409)
+++ lucene/core/src/test/org/apache/lucene/codecs/lucene3x/TestSurrogates.java	(working copy)
@@ -34,7 +34,7 @@
   /** we will manually instantiate preflex-rw here */
   @BeforeClass
   public static void beforeClass() {
-    LuceneTestCase.PREFLEX_IMPERSONATION_IS_ACTIVE = true;
+    LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;
   }
 
   private static String makeDifficultRandomUnicodeString(Random r) {
Index: lucene/core/src/test/org/apache/lucene/codecs/lucene3x/TestTermInfosReaderIndex.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/codecs/lucene3x/TestTermInfosReaderIndex.java	(revision 1560409)
+++ lucene/core/src/test/org/apache/lucene/codecs/lucene3x/TestTermInfosReaderIndex.java	(working copy)
@@ -71,7 +71,7 @@
   @BeforeClass
   public static void beforeClass() throws Exception {
     // NOTE: turn off compound file, this test will open some index files directly.
-    LuceneTestCase.PREFLEX_IMPERSONATION_IS_ACTIVE = true;
+    LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;
     IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, 
         new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)).setUseCompoundFile(false);
     
Index: lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility.java	(revision 1560421)
+++ lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility.java	(working copy)
@@ -208,7 +208,6 @@
   @BeforeClass
   public static void beforeClass() throws Exception {
     assertFalse("test infra is broken!", LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE);
-    assertFalse("test infra is broken!", LuceneTestCase.PREFLEX_IMPERSONATION_IS_ACTIVE);
     List<String> names = new ArrayList<String>(oldNames.length + oldSingleSegmentNames.length);
     names.addAll(Arrays.asList(oldNames));
     names.addAll(Arrays.asList(oldSingleSegmentNames));
Index: lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility3x.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility3x.java	(revision 1560421)
+++ lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility3x.java	(working copy)
@@ -146,7 +146,6 @@
   @BeforeClass
   public static void beforeClass() throws Exception {
     assertFalse("test infra is broken!", LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE);
-    assertFalse("test infra is broken!", LuceneTestCase.PREFLEX_IMPERSONATION_IS_ACTIVE);
     List<String> names = new ArrayList<String>(oldNames.length + oldSingleSegmentNames.length);
     names.addAll(Arrays.asList(oldNames));
     names.addAll(Arrays.asList(oldSingleSegmentNames));
Index: lucene/core/src/test/org/apache/lucene/index/TestBagOfPostings.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestBagOfPostings.java	(revision 1560409)
+++ lucene/core/src/test/org/apache/lucene/index/TestBagOfPostings.java	(working copy)
@@ -26,6 +26,7 @@
 import java.util.concurrent.CountDownLatch;
 
 import org.apache.lucene.analysis.MockAnalyzer;
+import org.apache.lucene.codecs.lucene3x.Lucene3xCodec;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.store.Directory;
@@ -129,7 +130,7 @@
     Terms terms = air.terms("field");
     // numTerms-1 because there cannot be a term 0 with 0 postings:
     assertEquals(numTerms-1, air.fields().getUniqueTermCount());
-    if (!PREFLEX_IMPERSONATION_IS_ACTIVE) {
+    if (iwc.getCodec() instanceof Lucene3xCodec == false) {
       assertEquals(numTerms-1, terms.size());
     }
     TermsEnum termsEnum = terms.iterator(null);
Index: lucene/core/src/test/org/apache/lucene/index/TestIndexableField.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestIndexableField.java	(revision 1560409)
+++ lucene/core/src/test/org/apache/lucene/index/TestIndexableField.java	(working copy)
@@ -24,6 +24,8 @@
 
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.TokenStream;
+import org.apache.lucene.codecs.Codec;
+import org.apache.lucene.codecs.lucene3x.Lucene3xCodec;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.index.FieldInfo.DocValuesType;
@@ -76,7 +78,7 @@
       
       @Override
       public boolean storeTermVectorPayloads() {
-        if (PREFLEX_IMPERSONATION_IS_ACTIVE) {
+        if (Codec.getDefault() instanceof Lucene3xCodec) {
           return false; // 3.x doesnt support
         } else {
           return storeTermVectors() && counter % 10 != 9;
Index: lucene/core/src/test/org/apache/lucene/index/TestStoredFieldsFormat.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestStoredFieldsFormat.java	(revision 1560409)
+++ lucene/core/src/test/org/apache/lucene/index/TestStoredFieldsFormat.java	(working copy)
@@ -20,6 +20,7 @@
 import java.io.IOException;
 
 import org.apache.lucene.codecs.Codec;
+import org.apache.lucene.codecs.lucene3x.Lucene3xCodec;
 import org.apache.lucene.util.LuceneTestCase;
 
 /**
@@ -36,7 +37,7 @@
   
   @Override
   public void testWriteReadMerge() throws IOException {
-    assumeFalse("impersonation isnt good enough", LuceneTestCase.PREFLEX_IMPERSONATION_IS_ACTIVE);
+    assumeFalse("impersonation isnt good enough", getCodec() instanceof Lucene3xCodec);
     // this test tries to switch up between the codec and another codec.
     // for 3.x: we currently cannot take an index with existing 4.x segments
     // and merge into newly formed 3.x segments.
Index: lucene/core/src/test/org/apache/lucene/index/TestTermVectorsFormat.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestTermVectorsFormat.java	(revision 1560409)
+++ lucene/core/src/test/org/apache/lucene/index/TestTermVectorsFormat.java	(working copy)
@@ -21,6 +21,7 @@
 import java.util.Set;
 
 import org.apache.lucene.codecs.Codec;
+import org.apache.lucene.codecs.lucene3x.Lucene3xCodec;
 
 /**
  * Tests with the default randomized codec. Not really redundant with
@@ -36,7 +37,7 @@
 
   @Override
   protected Set<Options> validOptions() {
-    if (PREFLEX_IMPERSONATION_IS_ACTIVE) {
+    if (getCodec() instanceof Lucene3xCodec) {
       // payloads are not supported on vectors in 3.x indexes
       return EnumSet.range(Options.NONE, Options.POSITIONS_AND_OFFSETS);
     } else {
Index: lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.java	(revision 1560409)
+++ lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.java	(working copy)
@@ -549,7 +549,7 @@
         ft.setStoreTermVectors(true);
         ft.setStoreTermVectorOffsets(random.nextBoolean());
         ft.setStoreTermVectorPositions(random.nextBoolean());
-        if (ft.storeTermVectorPositions() && !PREFLEX_IMPERSONATION_IS_ACTIVE) {
+        if (ft.storeTermVectorPositions() && !OLD_FORMAT_IMPERSONATION_IS_ACTIVE) {
           ft.setStoreTermVectorPayloads(random.nextBoolean());
         }
       }
Index: lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/PreFlexRWCodec.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/PreFlexRWCodec.java	(revision 1560409)
+++ lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/PreFlexRWCodec.java	(working copy)
@@ -41,7 +41,7 @@
   
   @Override
   public PostingsFormat postingsFormat() {
-    if (LuceneTestCase.PREFLEX_IMPERSONATION_IS_ACTIVE) {
+    if (LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE) {
       return postings;
     } else {
       return super.postingsFormat();
@@ -50,7 +50,7 @@
 
   @Override
   public NormsFormat normsFormat() {
-    if (LuceneTestCase.PREFLEX_IMPERSONATION_IS_ACTIVE) {
+    if (LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE) {
       return norms;
     } else {
       return super.normsFormat();
@@ -59,7 +59,7 @@
 
   @Override
   public SegmentInfoFormat segmentInfoFormat() {
-    if (LuceneTestCase.PREFLEX_IMPERSONATION_IS_ACTIVE) {
+    if (LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE) {
       return segmentInfos ;
     } else {
       return super.segmentInfoFormat();
@@ -68,7 +68,7 @@
 
   @Override
   public FieldInfosFormat fieldInfosFormat() {
-    if (LuceneTestCase.PREFLEX_IMPERSONATION_IS_ACTIVE) {
+    if (LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE) {
       return fieldInfos;
     } else {
       return super.fieldInfosFormat();
@@ -77,7 +77,7 @@
 
   @Override
   public TermVectorsFormat termVectorsFormat() {
-    if (LuceneTestCase.PREFLEX_IMPERSONATION_IS_ACTIVE) {
+    if (LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE) {
       return termVectors;
     } else {
       return super.termVectorsFormat();
@@ -86,7 +86,7 @@
 
   @Override
   public StoredFieldsFormat storedFieldsFormat() {
-    if (LuceneTestCase.PREFLEX_IMPERSONATION_IS_ACTIVE) {
+    if (LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE) {
       return storedFields;
     } else {
       return super.storedFieldsFormat();
Index: lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.java	(revision 1560421)
+++ lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.java	(working copy)
@@ -334,13 +334,7 @@
   // Fields initialized in class or instance rules.
   // -----------------------------------------------------------------
 
-  // TODO: why do we have this? This should just use the OLD_FORMAT_IMPERSONATION...
   /**
-   * @lucene.internal
-   */
-  public static boolean PREFLEX_IMPERSONATION_IS_ACTIVE;
-
-  /**
    * When {@code true}, Codecs for old Lucene version will support writing
    * indexes in that format. Defaults to {@code false}, can be disabled by
    * specific tests on demand.
@@ -1103,7 +1097,7 @@
       if (!newType.storeTermVectorPositions()) {
         newType.setStoreTermVectorPositions(random.nextBoolean());
         
-        if (newType.storeTermVectorPositions() && !newType.storeTermVectorPayloads() && !PREFLEX_IMPERSONATION_IS_ACTIVE) {
+        if (newType.storeTermVectorPositions() && !newType.storeTermVectorPayloads() && !OLD_FORMAT_IMPERSONATION_IS_ACTIVE) {
           newType.setStoreTermVectorPayloads(random.nextBoolean());
         }
       }
Index: lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv.java	(revision 1560421)
+++ lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv.java	(working copy)
@@ -155,7 +155,6 @@
     }
     
     // set back to default
-    LuceneTestCase.PREFLEX_IMPERSONATION_IS_ACTIVE = false;
     LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = false;
     
     savedCodec = Codec.getDefault();
@@ -167,7 +166,7 @@
                                           !shouldAvoidCodec("Lucene3x"))) { // preflex-only setup
       codec = Codec.forName("Lucene3x");
       assert (codec instanceof PreFlexRWCodec) : "fix your classpath to have tests-framework.jar before lucene-core.jar";
-      LuceneTestCase.PREFLEX_IMPERSONATION_IS_ACTIVE = true;
+      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;
     } else if ("Lucene40".equals(TEST_CODEC) || ("random".equals(TEST_CODEC) &&
                                                  "random".equals(TEST_POSTINGSFORMAT) &&
                                                   randomVal == 0 &&
