Index: lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.java
===================================================================
--- lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.java	(revision 1609300)
+++ lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.java	(working copy)
@@ -644,13 +644,6 @@
 
       int startTermsBPV;
 
-      final int termCountHardLimit;
-      if (maxDoc == Integer.MAX_VALUE) {
-        termCountHardLimit = Integer.MAX_VALUE;
-      } else {
-        termCountHardLimit = maxDoc+1;
-      }
-
       // TODO: use Uninvert?
       if (terms != null) {
         // Try for coarse estimate for number of bits; this
@@ -658,11 +651,8 @@
         // is fine -- GrowableWriter will reallocate as needed
         long numUniqueTerms = terms.size();
         if (numUniqueTerms != -1L) {
-          if (numUniqueTerms > termCountHardLimit) {
-            // app is misusing the API (there is more than
-            // one term per doc); in this case we make best
-            // effort to load what we can (see LUCENE-2142)
-            numUniqueTerms = termCountHardLimit;
+          if (numUniqueTerms > maxDoc) {
+            throw new IllegalStateException("Type mismatch: " + key.field + " was indexed with multiple values per document, use SORTED_SET instead");
           }
 
           startTermsBPV = PackedInts.bitsRequired(numUniqueTerms);
@@ -689,8 +679,8 @@
           if (term == null) {
             break;
           }
-          if (termOrd >= termCountHardLimit) {
-            break;
+          if (termOrd >= maxDoc) {
+            throw new IllegalStateException("Type mismatch: " + key.field + " was indexed with multiple values per document, use SORTED_SET instead");
           }
 
           termOrdToBytesOffset.add(bytes.copyUsingLengthPrefix(term));
Index: lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader.java
===================================================================
--- lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader.java	(revision 1609300)
+++ lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader.java	(working copy)
@@ -234,8 +234,6 @@
         case FLOAT: return FieldCache.DEFAULT.getNumerics(in, field, FieldCache.NUMERIC_UTILS_FLOAT_PARSER, true);
         case LONG: return FieldCache.DEFAULT.getNumerics(in, field, FieldCache.NUMERIC_UTILS_LONG_PARSER, true);
         case DOUBLE: return FieldCache.DEFAULT.getNumerics(in, field, FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, true);
-        default:
-          throw new IllegalStateException("Type mismatch: " + field + " was indexed as " + v);
       }
     }
     return super.getNumericDocValues(field);
@@ -246,8 +244,6 @@
     Type v = mapping.get(field);
     if (v == Type.BINARY) {
       return FieldCache.DEFAULT.getTerms(in, field, true);
-    } else if (v != null && v != Type.SORTED) {
-      throw new IllegalStateException("Type mismatch: " + field + " was indexed as " + v);
     } else {
       return in.getBinaryDocValues(field);
     }
@@ -258,8 +254,6 @@
     Type v = mapping.get(field);
     if (v == Type.SORTED) {
       return FieldCache.DEFAULT.getTermsIndex(in, field);
-    } else if (v != null) {
-      throw new IllegalStateException("Type mismatch: " + field + " was indexed as " + v);
     } else {
       return in.getSortedDocValues(field);
     }
@@ -278,10 +272,6 @@
           return FieldCache.DEFAULT.getDocTermOrds(in, field, FieldCache.INT64_TERM_PREFIX);
         case SORTED_SET_BINARY:
           return FieldCache.DEFAULT.getDocTermOrds(in, field, null);
-        default:
-          if (v != Type.SORTED) {
-            throw new IllegalStateException("Type mismatch: " + field + " was indexed as " + v);
-          }
       }
     }
     return in.getSortedSetDocValues(field);
Index: lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort.java
===================================================================
--- lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort.java	(revision 1609300)
+++ lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort.java	(working copy)
@@ -49,6 +49,7 @@
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.uninverting.UninvertingReader.Type;
 import org.apache.lucene.util.LuceneTestCase;
+import org.apache.lucene.util.TestUtil;
 
 /*
  * Tests sorting (but with fieldcache instead of docvalues)
@@ -77,7 +78,7 @@
     // 'bar' comes before 'foo'
     assertEquals("bar", searcher.doc(td.scoreDocs[0].doc).get("value"));
     assertEquals("foo", searcher.doc(td.scoreDocs[1].doc).get("value"));
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -107,7 +108,7 @@
     assertNull(searcher.doc(td.scoreDocs[0].doc).get("value"));
     assertEquals("bar", searcher.doc(td.scoreDocs[1].doc).get("value"));
     assertEquals("foo", searcher.doc(td.scoreDocs[2].doc).get("value"));
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -134,7 +135,7 @@
     // 'foo' comes after 'bar' in reverse order
     assertEquals("foo", searcher.doc(td.scoreDocs[0].doc).get("value"));
     assertEquals("bar", searcher.doc(td.scoreDocs[1].doc).get("value"));
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -161,7 +162,7 @@
     // 'bar' comes before 'foo'
     assertEquals("bar", searcher.doc(td.scoreDocs[0].doc).get("value"));
     assertEquals("foo", searcher.doc(td.scoreDocs[1].doc).get("value"));
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -191,7 +192,7 @@
     assertNull(searcher.doc(td.scoreDocs[0].doc).get("value"));
     assertEquals("bar", searcher.doc(td.scoreDocs[1].doc).get("value"));
     assertEquals("foo", searcher.doc(td.scoreDocs[2].doc).get("value"));
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -223,7 +224,7 @@
     assertNull(searcher.doc(td.scoreDocs[0].doc).get("value"));
     assertEquals("bar", searcher.doc(td.scoreDocs[1].doc).get("value"));
     assertEquals("foo", searcher.doc(td.scoreDocs[2].doc).get("value"));
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -255,7 +256,7 @@
     assertEquals("bar", searcher.doc(td.scoreDocs[1].doc).get("value"));
     // null comes last
     assertNull(searcher.doc(td.scoreDocs[2].doc).get("value"));
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -288,7 +289,7 @@
     assertEquals("foo", searcher.doc(td.scoreDocs[1].doc).get("value"));
     // null comes last
     assertNull(searcher.doc(td.scoreDocs[2].doc).get("value"));
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -321,7 +322,7 @@
     assertNull(searcher.doc(td.scoreDocs[0].doc).get("value"));
     assertEquals("foo", searcher.doc(td.scoreDocs[1].doc).get("value"));
     assertEquals("bar", searcher.doc(td.scoreDocs[2].doc).get("value"));
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -348,7 +349,7 @@
     // 'foo' comes after 'bar' in reverse order
     assertEquals("foo", searcher.doc(td.scoreDocs[0].doc).get("value"));
     assertEquals("bar", searcher.doc(td.scoreDocs[1].doc).get("value"));
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -374,7 +375,7 @@
     // docid 0, then docid 1
     assertEquals(0, td.scoreDocs[0].doc);
     assertEquals(1, td.scoreDocs[1].doc);
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -400,7 +401,7 @@
     // docid 1, then docid 0
     assertEquals(1, td.scoreDocs[0].doc);
     assertEquals(0, td.scoreDocs[1].doc);
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -430,7 +431,7 @@
     for (int i = 0; i < actual.scoreDocs.length; i++) {
       assertEquals(actual.scoreDocs[i].doc, expected.scoreDocs[i].doc);
     }
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -459,7 +460,7 @@
     assertEquals(expected.totalHits, actual.totalHits);
     assertEquals(actual.scoreDocs[0].doc, expected.scoreDocs[1].doc);
     assertEquals(actual.scoreDocs[1].doc, expected.scoreDocs[0].doc);
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -490,7 +491,7 @@
     assertEquals("-1", searcher.doc(td.scoreDocs[0].doc).get("value"));
     assertEquals("4", searcher.doc(td.scoreDocs[1].doc).get("value"));
     assertEquals("300000", searcher.doc(td.scoreDocs[2].doc).get("value"));
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -520,7 +521,7 @@
     assertEquals("-1", searcher.doc(td.scoreDocs[0].doc).get("value"));
     assertNull(searcher.doc(td.scoreDocs[1].doc).get("value"));
     assertEquals("4", searcher.doc(td.scoreDocs[2].doc).get("value"));
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -552,7 +553,7 @@
     assertEquals("-1", searcher.doc(td.scoreDocs[0].doc).get("value"));
     assertEquals("4", searcher.doc(td.scoreDocs[1].doc).get("value"));
     assertNull(searcher.doc(td.scoreDocs[2].doc).get("value"));
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -583,7 +584,7 @@
     assertEquals("300000", searcher.doc(td.scoreDocs[0].doc).get("value"));
     assertEquals("4", searcher.doc(td.scoreDocs[1].doc).get("value"));
     assertEquals("-1", searcher.doc(td.scoreDocs[2].doc).get("value"));
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -614,7 +615,7 @@
     assertEquals("-1", searcher.doc(td.scoreDocs[0].doc).get("value"));
     assertEquals("4", searcher.doc(td.scoreDocs[1].doc).get("value"));
     assertEquals("3000000000", searcher.doc(td.scoreDocs[2].doc).get("value"));
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -644,7 +645,7 @@
     assertEquals("-1", searcher.doc(td.scoreDocs[0].doc).get("value"));
     assertNull(searcher.doc(td.scoreDocs[1].doc).get("value"));
     assertEquals("4", searcher.doc(td.scoreDocs[2].doc).get("value"));
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -676,7 +677,7 @@
     assertEquals("-1", searcher.doc(td.scoreDocs[0].doc).get("value"));
     assertEquals("4", searcher.doc(td.scoreDocs[1].doc).get("value"));
     assertNull(searcher.doc(td.scoreDocs[2].doc).get("value"));
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -707,7 +708,7 @@
     assertEquals("3000000000", searcher.doc(td.scoreDocs[0].doc).get("value"));
     assertEquals("4", searcher.doc(td.scoreDocs[1].doc).get("value"));
     assertEquals("-1", searcher.doc(td.scoreDocs[2].doc).get("value"));
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -738,7 +739,7 @@
     assertEquals("-1.3", searcher.doc(td.scoreDocs[0].doc).get("value"));
     assertEquals("4.2", searcher.doc(td.scoreDocs[1].doc).get("value"));
     assertEquals("30.1", searcher.doc(td.scoreDocs[2].doc).get("value"));
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -768,7 +769,7 @@
     assertEquals("-1.3", searcher.doc(td.scoreDocs[0].doc).get("value"));
     assertNull(searcher.doc(td.scoreDocs[1].doc).get("value"));
     assertEquals("4.2", searcher.doc(td.scoreDocs[2].doc).get("value"));
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -800,7 +801,7 @@
     assertEquals("-1.3", searcher.doc(td.scoreDocs[0].doc).get("value"));
     assertEquals("4.2", searcher.doc(td.scoreDocs[1].doc).get("value"));
     assertNull(searcher.doc(td.scoreDocs[2].doc).get("value"));
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -831,7 +832,7 @@
     assertEquals("30.1", searcher.doc(td.scoreDocs[0].doc).get("value"));
     assertEquals("4.2", searcher.doc(td.scoreDocs[1].doc).get("value"));
     assertEquals("-1.3", searcher.doc(td.scoreDocs[2].doc).get("value"));
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -866,7 +867,7 @@
     assertEquals("4.2333333333332", searcher.doc(td.scoreDocs[1].doc).get("value"));
     assertEquals("4.2333333333333", searcher.doc(td.scoreDocs[2].doc).get("value"));
     assertEquals("30.1", searcher.doc(td.scoreDocs[3].doc).get("value"));
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -899,7 +900,7 @@
     // check sign bits
     assertEquals(1, Double.doubleToLongBits(v0) >>> 63);
     assertEquals(0, Double.doubleToLongBits(v1) >>> 63);
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -933,7 +934,7 @@
     assertNull(searcher.doc(td.scoreDocs[1].doc).get("value"));
     assertEquals("4.2333333333332", searcher.doc(td.scoreDocs[2].doc).get("value"));
     assertEquals("4.2333333333333", searcher.doc(td.scoreDocs[3].doc).get("value"));
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -969,7 +970,7 @@
     assertEquals("4.2333333333332", searcher.doc(td.scoreDocs[1].doc).get("value"));
     assertEquals("4.2333333333333", searcher.doc(td.scoreDocs[2].doc).get("value"));
     assertNull(searcher.doc(td.scoreDocs[3].doc).get("value"));
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -1004,7 +1005,7 @@
     assertEquals("4.2333333333333", searcher.doc(td.scoreDocs[1].doc).get("value"));
     assertEquals("4.2333333333332", searcher.doc(td.scoreDocs[2].doc).get("value"));
     assertEquals("-1.3", searcher.doc(td.scoreDocs[3].doc).get("value"));
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -1031,11 +1032,12 @@
     // null sorts first
     assertEquals(1, hits.scoreDocs[0].doc);
     assertEquals(0, hits.scoreDocs[1].doc);
+    TestUtil.checkReader(r);
     r.close();
     dir.close();
   }
   
-  /** test that we don't throw exception on multi-valued field (LUCENE-2142) */
+  /** test that we throw exception on multi-valued field, creates corrupt reader, use SORTED_SET instead */
   public void testMultiValuedField() throws IOException {
     Directory indexStore = newDirectory();
     IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(
@@ -1051,14 +1053,13 @@
     Sort sort = new Sort(
         new SortField("string", SortField.Type.STRING),
         SortField.FIELD_DOC);
-    // this should not throw AIOOBE or RuntimeEx
     IndexReader reader = UninvertingReader.wrap(DirectoryReader.open(indexStore),
                          Collections.singletonMap("string", Type.SORTED));
-    // NOTE: we can't wrap this with newSearcher, because when the API is abused in this way,
-    // the number of ords can exceed the number of documents, and AssertingAtomicReader will get angry,
-    // rightfully so (its a broken dv)
     IndexSearcher searcher = new IndexSearcher(reader);
-    searcher.search(new MatchAllDocsQuery(), null, 500, sort);
+    try {
+      searcher.search(new MatchAllDocsQuery(), null, 500, sort);
+      fail("didn't get expected exception");
+    } catch (IllegalStateException expected) {}
     reader.close();
     indexStore.close();
   }
@@ -1094,6 +1095,7 @@
     assertEquals(maxScore, s.search(q, null, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);
     assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField("id", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);
     assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField("id", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);
+    TestUtil.checkReader(r);
     r.close();
     d.close();
   }
@@ -1145,7 +1147,7 @@
     TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);
     assertEquals(1, td.totalHits);
     assertEquals("foo", searcher.doc(td.scoreDocs[0].doc).get("value"));
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -1170,7 +1172,7 @@
     
     assertEquals(expected.totalHits, actual.totalHits);
     assertEquals(expected.scoreDocs[0].score, actual.scoreDocs[0].score, 0F);
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -1204,7 +1206,7 @@
     // 'bar' comes before 'foo'
     assertEquals("bar", searcher.doc(td.scoreDocs[0].doc).get("value"));
     assertEquals("foo", searcher.doc(td.scoreDocs[1].doc).get("value"));
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -1231,7 +1233,7 @@
     assertEquals(2, td.totalHits);
     assertEquals(1, td.scoreDocs[0].doc);
     assertEquals(0, td.scoreDocs[1].doc);
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
Index: lucene/misc/src/test/org/apache/lucene/uninverting/TestNumericTerms32.java
===================================================================
--- lucene/misc/src/test/org/apache/lucene/uninverting/TestNumericTerms32.java	(revision 1609300)
+++ lucene/misc/src/test/org/apache/lucene/uninverting/TestNumericTerms32.java	(working copy)
@@ -108,6 +108,7 @@
   @AfterClass
   public static void afterClass() throws Exception {
     searcher = null;
+    TestUtil.checkReader(reader);
     reader.close();
     reader = null;
     directory.close();
Index: lucene/misc/src/test/org/apache/lucene/uninverting/TestNumericTerms64.java
===================================================================
--- lucene/misc/src/test/org/apache/lucene/uninverting/TestNumericTerms64.java	(revision 1609300)
+++ lucene/misc/src/test/org/apache/lucene/uninverting/TestNumericTerms64.java	(working copy)
@@ -113,6 +113,7 @@
   @AfterClass
   public static void afterClass() throws Exception {
     searcher = null;
+    TestUtil.checkReader(reader);
     reader.close();
     reader = null;
     directory.close();
Index: lucene/misc/src/test/org/apache/lucene/uninverting/TestUninvertingReader.java
===================================================================
--- lucene/misc/src/test/org/apache/lucene/uninverting/TestUninvertingReader.java	(revision 1609300)
+++ lucene/misc/src/test/org/apache/lucene/uninverting/TestUninvertingReader.java	(working copy)
@@ -19,8 +19,6 @@
 
 import java.io.IOException;
 import java.util.Collections;
-import java.util.EnumSet;
-import java.util.Set;
 
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
@@ -28,7 +26,6 @@
 import org.apache.lucene.document.LongField;
 import org.apache.lucene.index.AtomicReader;
 import org.apache.lucene.index.DirectoryReader;
-import org.apache.lucene.index.FieldInfo.DocValuesType;
 import org.apache.lucene.index.IndexWriter;
 import org.apache.lucene.index.SortedSetDocValues;
 import org.apache.lucene.store.Directory;
@@ -36,6 +33,7 @@
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.NumericUtils;
+import org.apache.lucene.util.TestUtil;
 
 public class TestUninvertingReader extends LuceneTestCase {
   
@@ -58,9 +56,7 @@
     DirectoryReader ir = UninvertingReader.wrap(DirectoryReader.open(dir), 
                          Collections.singletonMap("foo", Type.SORTED_SET_INTEGER));
     AtomicReader ar = ir.leaves().get(0).reader();
-    assertNoSilentInsanity(ar, "foo", DocValuesType.SORTED_SET);
     SortedSetDocValues v = ar.getSortedSetDocValues("foo");
-    assertNoSilentInsanity(ar, "foo", DocValuesType.SORTED_SET);
     assertEquals(2, v.getValueCount());
     
     v.setDocument(0);
@@ -77,7 +73,7 @@
     
     value = v.lookupOrd(1);
     assertEquals(5, NumericUtils.prefixCodedToInt(value));
-    
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -102,9 +98,7 @@
                          Collections.singletonMap("foo", Type.SORTED_SET_FLOAT));
     AtomicReader ar = ir.leaves().get(0).reader();
     
-    assertNoSilentInsanity(ar, "foo", DocValuesType.SORTED_SET);
     SortedSetDocValues v = ar.getSortedSetDocValues("foo");
-    assertNoSilentInsanity(ar, "foo", DocValuesType.SORTED_SET);
     assertEquals(2, v.getValueCount());
     
     v.setDocument(0);
@@ -121,7 +115,7 @@
     
     value = v.lookupOrd(1);
     assertEquals(Float.floatToRawIntBits(5f), NumericUtils.prefixCodedToInt(value));
-    
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -145,9 +139,7 @@
     DirectoryReader ir = UninvertingReader.wrap(DirectoryReader.open(dir), 
         Collections.singletonMap("foo", Type.SORTED_SET_LONG));
     AtomicReader ar = ir.leaves().get(0).reader();
-    assertNoSilentInsanity(ar, "foo", DocValuesType.SORTED_SET);
     SortedSetDocValues v = ar.getSortedSetDocValues("foo");
-    assertNoSilentInsanity(ar, "foo", DocValuesType.SORTED_SET);
     assertEquals(2, v.getValueCount());
     
     v.setDocument(0);
@@ -164,7 +156,7 @@
     
     value = v.lookupOrd(1);
     assertEquals(5, NumericUtils.prefixCodedToLong(value));
-    
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -188,9 +180,7 @@
     DirectoryReader ir = UninvertingReader.wrap(DirectoryReader.open(dir), 
         Collections.singletonMap("foo", Type.SORTED_SET_DOUBLE));
     AtomicReader ar = ir.leaves().get(0).reader();
-    assertNoSilentInsanity(ar, "foo", DocValuesType.SORTED_SET);
     SortedSetDocValues v = ar.getSortedSetDocValues("foo");
-    assertNoSilentInsanity(ar, "foo", DocValuesType.SORTED_SET);
     assertEquals(2, v.getValueCount());
     
     v.setDocument(0);
@@ -207,42 +197,8 @@
     
     value = v.lookupOrd(1);
     assertEquals(Double.doubleToRawLongBits(5d), NumericUtils.prefixCodedToLong(value));
-    
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
-  
-  private void assertNoSilentInsanity(AtomicReader reader, String field, DocValuesType type) throws IOException {
-    Set<DocValuesType> insaneTypes = EnumSet.allOf(DocValuesType.class);
-    insaneTypes.remove(type);
-    
-    for (DocValuesType t : insaneTypes) {
-      tryToBeInsane(reader, field, type, t);
-    }
-  }
-  
-  private void tryToBeInsane(AtomicReader reader, String field, DocValuesType actualType, DocValuesType insaneType) throws IOException {
-    try {
-      switch(insaneType) {
-        case NUMERIC:
-          reader.getNumericDocValues(field);
-          break;
-        case SORTED:
-          reader.getSortedDocValues(field);
-          break;
-        case BINARY:
-          reader.getBinaryDocValues(field);
-          break;
-        case SORTED_SET:
-          reader.getSortedSetDocValues(field);
-          break;
-        case SORTED_NUMERIC:
-          // not supported
-          return;
-        default:
-          throw new AssertionError();
-      }
-      fail("didn't get expected exception: actual=" + actualType + ",insane=" + insaneType);
-    } catch (IllegalStateException expected) {}
-  }
 }
