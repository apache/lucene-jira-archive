Index: lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest.java	(date 1517197684000)
+++ lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest.java	(revision )
@@ -91,7 +91,22 @@
     }
 
   }
-  
+
+  @Test
+  public void testPolygonPointFiltering2() {
+    //all coplanar
+    GeoPoint point1 = new GeoPoint(PlanetModel.SPHERE, 1.1264101919629863, -0.9108307879480759);
+    GeoPoint point2 = new GeoPoint(PlanetModel.SPHERE, 1.1264147298190414, -0.9108309624810013);
+    GeoPoint point3 = new GeoPoint(PlanetModel.SPHERE, 1.1264056541069312, -0.9108306134151508);
+    final List<GeoPoint> originalPoints = new ArrayList<>();
+    originalPoints.add(point1);
+    originalPoints.add(point2);
+    originalPoints.add(point3);
+    final List<GeoPoint> filteredPoints = GeoPolygonFactory.filterEdges(GeoPolygonFactory.filterPoints(originalPoints), 0.0);
+    assertEquals(null, filteredPoints);
+  }
+
+
   @Test
   public void testPolygonClockwise() {
     GeoPolygon c;
@@ -1050,5 +1065,18 @@
     }
   }
 
+  @Test
+  public void testLUCENE8140() throws Exception {
+    //POINT(15.426026 68.35078) is coplanar
+    //"POLYGON((15.426411 68.35069,15.4261 68.35078,15.426026 68.35078,15.425868 68.35078,15.425745 68.350746,15.426411 68.35069))";
+    List<GeoPoint> points = new ArrayList<>();
+    points.add(new GeoPoint(PlanetModel.SPHERE, Geo3DUtil.fromDegrees(68.35069), Geo3DUtil.fromDegrees(15.426411)));
+    points.add(new GeoPoint(PlanetModel.SPHERE, Geo3DUtil.fromDegrees(68.35078), Geo3DUtil.fromDegrees(15.4261)));
+    points.add(new GeoPoint(PlanetModel.SPHERE, Geo3DUtil.fromDegrees(68.35078), Geo3DUtil.fromDegrees(15.426026)));
+    points.add(new GeoPoint(PlanetModel.SPHERE, Geo3DUtil.fromDegrees(68.35078), Geo3DUtil.fromDegrees(15.425868)));
+    points.add(new GeoPoint(PlanetModel.SPHERE, Geo3DUtil.fromDegrees(68.350746), Geo3DUtil.fromDegrees(15.426411)));
+    assertTrue(GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points) != null);
+  }
+
 
 }
