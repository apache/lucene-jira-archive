diff --git a/lucene/core/src/java/org/apache/lucene/search/ImpactsDISI.java b/lucene/core/src/java/org/apache/lucene/search/ImpactsDISI.java
index 0f978edd94b..eba4e747de3 100644
--- a/lucene/core/src/java/org/apache/lucene/search/ImpactsDISI.java
+++ b/lucene/core/src/java/org/apache/lucene/search/ImpactsDISI.java
@@ -21,6 +21,7 @@ import java.io.IOException;
 import org.apache.lucene.index.Impacts;
 import org.apache.lucene.index.ImpactsEnum;
 import org.apache.lucene.index.ImpactsSource;
+import org.apache.lucene.index.SlowImpactsEnum;
 import org.apache.lucene.search.similarities.Similarity.SimScorer;
 
 /**
@@ -40,7 +41,7 @@ public final class ImpactsDISI extends DocIdSetIterator {
   private float maxScore = Float.MAX_VALUE;
 
   /**
-   * Sole constructor.
+   * Main constructor.
    * @param in            wrapped iterator
    * @param impactsSource source of impacts
    * @param scorer        scorer
@@ -52,6 +53,15 @@ public final class ImpactsDISI extends DocIdSetIterator {
     this.globalMaxScore = scorer.score(Float.MAX_VALUE, 1L);
   }
 
+  /**
+   * Secondary constructor.
+   * @param slowImpactsEnum wrapped iterator and source of impacts
+   * @param scorer          scorer
+   */
+  ImpactsDISI(SlowImpactsEnum slowImpactsEnum, SimScorer scorer) {
+    this(slowImpactsEnum, slowImpactsEnum, scorer);
+  }
+
   /**
    * Set the minimum competitive score.
    * @see Scorer#setMinCompetitiveScore(float)
diff --git a/lucene/core/src/java/org/apache/lucene/search/TermScorer.java b/lucene/core/src/java/org/apache/lucene/search/TermScorer.java
index 7d3f6e3d1f2..90d990ca8a8 100644
--- a/lucene/core/src/java/org/apache/lucene/search/TermScorer.java
+++ b/lucene/core/src/java/org/apache/lucene/search/TermScorer.java
@@ -27,8 +27,6 @@ import org.apache.lucene.index.SlowImpactsEnum;
  */
 final class TermScorer extends Scorer {
   private final PostingsEnum postingsEnum;
-  private final ImpactsEnum impactsEnum;
-  private final DocIdSetIterator iterator;
   private final LeafSimScorer docScorer;
   private final ImpactsDISI impactsDisi;
 
@@ -36,11 +34,9 @@ final class TermScorer extends Scorer {
    * Construct a {@link TermScorer} that will iterate all documents.
    */
   TermScorer(Weight weight, PostingsEnum postingsEnum, LeafSimScorer docScorer) {
-    super(weight);
-    iterator = this.postingsEnum = postingsEnum;
-    impactsEnum = new SlowImpactsEnum(postingsEnum);
-    impactsDisi = new ImpactsDISI(impactsEnum, impactsEnum, docScorer.getSimScorer());
-    this.docScorer = docScorer;
+    this(weight, docScorer,
+        postingsEnum,
+        new ImpactsDISI(new SlowImpactsEnum(postingsEnum), docScorer.getSimScorer()));
   }
 
   /**
@@ -48,11 +44,23 @@ final class TermScorer extends Scorer {
    * non-competitive documents.
    */
   TermScorer(Weight weight, ImpactsEnum impactsEnum, LeafSimScorer docScorer) {
+    this(weight, docScorer,
+        impactsEnum,
+        new ImpactsDISI(impactsEnum, impactsEnum, docScorer.getSimScorer()));
+  }
+
+  /**
+   * @param weight The scorer's <code>Weight</code>.
+   * @param docScorer The scorer's <code>LeafSimScorer</code>.
+   * @param postingsEnum The scorer's <code>PostingsEnum</code>.
+   * @param impactsDisi The scorer's <code>ImpactsDISI</code>.
+   */
+  private TermScorer(Weight weight, LeafSimScorer docScorer,
+      PostingsEnum postingsEnum, ImpactsDISI impactsDisi) {
     super(weight);
-    postingsEnum = this.impactsEnum = impactsEnum;
-    impactsDisi = new ImpactsDISI(impactsEnum, impactsEnum, docScorer.getSimScorer());
-    iterator = impactsDisi;
     this.docScorer = docScorer;
+    this.postingsEnum = postingsEnum;
+    this.impactsDisi = impactsDisi;
   }
 
   @Override
@@ -66,7 +74,7 @@ final class TermScorer extends Scorer {
 
   @Override
   public DocIdSetIterator iterator() {
-    return iterator;
+    return impactsDisi;
   }
 
   @Override
