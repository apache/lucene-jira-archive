diff --git a/lucene/CHANGES.txt b/lucene/CHANGES.txt
index bcecbc9957d..bc1e314624e 100644
--- a/lucene/CHANGES.txt
+++ b/lucene/CHANGES.txt
@@ -92,6 +92,10 @@ API Changes
   methods.  This decouples normalization from tokenization entirely.
   (Mayya Sharipova, Alan Woodward)
 
+Bug Fixes
+
+* LUCENE-8587: Self comparison bug in GeoComplexPolygon.equals method. (Zsolt Gyulavari)
+
 Changes in Runtime Behavior
 
 * LUCENE-8333: Switch MoreLikeThis.setMaxDocFreqPct to use maxDoc instead of
diff --git a/lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.java b/lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.java
index 41e2529bb2e..4b9ce1093dc 100644
--- a/lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.java
+++ b/lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.java
@@ -1777,7 +1777,7 @@ public boolean equals(Object o) {
       return false;
     final GeoComplexPolygon other = (GeoComplexPolygon) o;
     return super.equals(other) && testPoint1InSet == other.testPoint1InSet
-        && testPoint1.equals(testPoint1)
+        && testPoint1.equals(other.testPoint1)
         && pointsList.equals(other.pointsList);
   }
 
diff --git a/lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest.java b/lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest.java
index f2388a9bc1a..ad447974070 100755
--- a/lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest.java
+++ b/lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest.java
@@ -17,6 +17,7 @@
 package org.apache.lucene.spatial3d.geom;
 
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.List;
 import java.util.BitSet;
 import java.util.Collections;
@@ -1929,4 +1930,29 @@ public void testLUCENE8512() {
     assertTrue(polygon.isWithin(point) == largePolygon.isWithin(point));
 
   }
+
+  @Test
+  public void testEquals() {
+    GeoPoint testPoint = new GeoPoint(PlanetModel.WGS84, 1.3005550159098878, -2.4043250791032897);
+    GeoPoint testPointSame = new GeoPoint(PlanetModel.WGS84, 1.3005550159098878, -2.4043250791032897);
+    GeoPoint testPointOther = new GeoPoint(PlanetModel.WGS84, 1.300555015909, -2.4043250791032897);
+
+    GeoPoint point1 = new GeoPoint(PlanetModel.WGS84, 0.972005250702484, -1.9776473855435277);
+    GeoPoint point2 = new GeoPoint(PlanetModel.WGS84, 0.5530477484903267, 2.5300578442038137);
+    GeoPoint point3 = new GeoPoint(PlanetModel.WGS84, 1.5185372097372358, -0.33848566616392867);
+
+    List<List<GeoPoint>> shapes = Arrays.asList(Arrays.asList(point1, point2, point3));
+    List<List<GeoPoint>> shapesSame = Arrays.asList(Arrays.asList(point1, point2, point3));
+    List<List<GeoPoint>> shapesOther = Arrays.asList(Arrays.asList(point1, point3, point2));
+    GeoComplexPolygon baseline = new GeoComplexPolygon(PlanetModel.WGS84, shapes, testPoint, false);
+
+    assertTrue("equals should return true for equivalent parameters",
+        baseline.equals(new GeoComplexPolygon(PlanetModel.WGS84, shapesSame, testPointSame, false)));
+    assertFalse("equals should return false for different points list",
+        baseline.equals(new GeoComplexPolygon(PlanetModel.WGS84, shapesOther, testPointSame, false)));
+    assertFalse("equals should return false for different testPoint",
+        baseline.equals(new GeoComplexPolygon(PlanetModel.WGS84, shapesSame, testPointOther, false)));
+    assertFalse("equals should return false for different testPointInSet",
+        baseline.equals(new GeoComplexPolygon(PlanetModel.WGS84, shapesSame, testPointSame, true)));
+  }
 }
