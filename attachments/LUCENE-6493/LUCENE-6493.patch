diff --git a/lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis.java b/lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis.java
index 0257fb4..29d69ee 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis.java
@@ -223,6 +223,15 @@ public final class MoreLikeThis {
    * @see #setMaxQueryTerms
    */
   public static final int DEFAULT_MAX_QUERY_TERMS = 25;
+  
+  /**
+   * The minimum number of the optional BooleanClauses which must be satisfied
+   * or if 0 then this has no effect.
+   * 
+   * @see #getMinNumShouldMatch
+   * @see #setMinNumShouldMatch
+   */
+  public static final int DEFAULT_MIN_NUM_SHOULD_MATCH = 0;
 
   /**
    * Analyzer that will be used to parse the doc.
@@ -275,6 +284,11 @@ public final class MoreLikeThis {
   private int maxQueryTerms = DEFAULT_MAX_QUERY_TERMS;
 
   /**
+   * The minimum number of the optional BooleanClauses which must be satisfied
+   */
+  private int minNumShouldMatch = DEFAULT_MIN_NUM_SHOULD_MATCH;
+
+  /**
    * For idf() calculations.
    */
   private TFIDFSimilarity similarity;// = new DefaultSimilarity();
@@ -564,6 +578,13 @@ public final class MoreLikeThis {
     maxNumTokensParsed = i;
   }
 
+  public int getMinNumShouldMatch() {
+    return this.minNumShouldMatch;
+  }
+
+  public void setMinNumShouldMatch(int minNumShouldMatch) {
+    this.minNumShouldMatch = minNumShouldMatch;
+  }
 
   /**
    * Return a query that will return docs like the passed lucene document ID.
@@ -614,6 +635,11 @@ public final class MoreLikeThis {
    */
   private Query createQuery(PriorityQueue<ScoreTerm> q) {
     BooleanQuery query = new BooleanQuery();
+
+    if(this.minNumShouldMatch > 0) {
+      query.setMinimumNumberShouldMatch(this.minNumShouldMatch);
+    }
+
     ScoreTerm scoreTerm;
     float bestScore = -1;
 
diff --git a/lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis.java b/lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis.java
index 34ff601..08a3c56 100644
--- a/lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis.java
+++ b/lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis.java
@@ -38,6 +38,7 @@ import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.Query;
 import org.apache.lucene.search.QueryUtils;
 import org.apache.lucene.search.TermQuery;
+import org.apache.lucene.search.TopDocs;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.LuceneTestCase;
 
@@ -57,6 +58,7 @@ public class TestMoreLikeThis extends LuceneTestCase {
     addDoc(writer, "lucene release");
     addDoc(writer, "apache");
     addDoc(writer, "apache lucene");
+    addDoc(writer, "apache lucene release");
 
     reader = writer.getReader();
     writer.close();
@@ -178,6 +180,26 @@ public class TestMoreLikeThis extends LuceneTestCase {
     analyzer.close();
   }
 
+  // LUCENE-6493
+  public void testMinNumShouldMatch() throws Exception {
+    MoreLikeThis mlt = new MoreLikeThis(reader);
+    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);
+    mlt.setAnalyzer(analyzer);
+    mlt.setMinDocFreq(1);
+    mlt.setMinTermFreq(1);
+    mlt.setMinWordLen(1);
+    mlt.setMinNumShouldMatch(3);
+    mlt.setFieldNames(new String[] {"text"});
+
+    BooleanQuery query = (BooleanQuery) mlt.like("text", new StringReader("apache lucene release"));
+    
+    IndexSearcher is = new IndexSearcher(reader);
+    TopDocs docs = is.search(query, 5);
+    assertEquals(1, docs.totalHits);
+    
+    analyzer.close();
+  }
+  
   // just basic equals/hashcode etc
   public void testMoreLikeThisQuery() throws Exception {
     Analyzer analyzer = new MockAnalyzer(random());
