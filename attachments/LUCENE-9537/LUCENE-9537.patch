diff --git a/lucene/core/src/java/org/apache/lucene/document/FeatureQuery.java b/lucene/core/src/java/org/apache/lucene/document/FeatureQuery.java
index bc693444e0a..741c645a0de 100644
--- a/lucene/core/src/java/org/apache/lucene/document/FeatureQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/document/FeatureQuery.java
@@ -135,6 +135,11 @@ final class FeatureQuery extends Query {
           public float score() throws IOException {
             return scorer.score(impacts.freq(), 1L);
           }
+          
+  		  @Override
+  		  public float smoothingScore(int docId) throws IOException {
+  			return 0;
+  		  }
 
           @Override
           public DocIdSetIterator iterator() {
@@ -155,6 +160,7 @@ final class FeatureQuery extends Query {
           public void setMinCompetitiveScore(float minScore) {
             impactsDisi.setMinCompetitiveScore(minScore);
           }
+
         };
       }
 
diff --git a/lucene/core/src/java/org/apache/lucene/document/LatLonPointDistanceFeatureQuery.java b/lucene/core/src/java/org/apache/lucene/document/LatLonPointDistanceFeatureQuery.java
index 846b35343e4..f8fe6cfb2a2 100644
--- a/lucene/core/src/java/org/apache/lucene/document/LatLonPointDistanceFeatureQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/document/LatLonPointDistanceFeatureQuery.java
@@ -313,6 +313,11 @@ final class LatLonPointDistanceFeatureQuery extends Query {
       }
       return score(getDistanceFromEncoded(docValues.longValue()));
     }
+    
+	@Override
+	public float smoothingScore(int docId) throws IOException {
+		return 0;
+	}
 
     @Override
     public DocIdSetIterator iterator() {
diff --git a/lucene/core/src/java/org/apache/lucene/document/LongDistanceFeatureQuery.java b/lucene/core/src/java/org/apache/lucene/document/LongDistanceFeatureQuery.java
index 0b4c365bf95..970387165f9 100644
--- a/lucene/core/src/java/org/apache/lucene/document/LongDistanceFeatureQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/document/LongDistanceFeatureQuery.java
@@ -256,6 +256,11 @@ final class LongDistanceFeatureQuery extends Query {
     private float score(double distance) {
       return (float) (boost * (pivotDistance / (pivotDistance + distance)));
     }
+    
+	@Override
+	public float smoothingScore(int docId) {
+		return 0;
+	}
 
     /**
      * Inverting the score computation is very hard due to all potential
diff --git a/lucene/core/src/java/org/apache/lucene/search/BlockMaxConjunctionScorer.java b/lucene/core/src/java/org/apache/lucene/search/BlockMaxConjunctionScorer.java
index 898a07dd1b9..84d47f47e29 100644
--- a/lucene/core/src/java/org/apache/lucene/search/BlockMaxConjunctionScorer.java
+++ b/lucene/core/src/java/org/apache/lucene/search/BlockMaxConjunctionScorer.java
@@ -208,6 +208,11 @@ final class BlockMaxConjunctionScorer extends Scorer {
     }
     return (float) score;
   }
+  
+  @Override
+  public float smoothingScore(int docId) throws IOException {
+	return 0;
+  }
 
   @Override
   public int advanceShallow(int target) throws IOException {
diff --git a/lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier.java b/lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier.java
index 78eac0307d6..5a72cfbacd2 100644
--- a/lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier.java
+++ b/lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier.java
@@ -148,6 +148,10 @@ final class Boolean2ScorerSupplier extends ScorerSupplier {
           public float score() throws IOException {
             return 0f;
           }
+      	  @Override
+      	  public float smoothingScore(int docId) throws IOException {
+    		return 0f;
+      	  }
           @Override
           public float getMaxScore(int upTo) throws IOException {
             return 0f;
diff --git a/lucene/core/src/java/org/apache/lucene/search/CachingCollector.java b/lucene/core/src/java/org/apache/lucene/search/CachingCollector.java
index bc1c185a9b1..05c1acf5296 100644
--- a/lucene/core/src/java/org/apache/lucene/search/CachingCollector.java
+++ b/lucene/core/src/java/org/apache/lucene/search/CachingCollector.java
@@ -58,6 +58,9 @@ public abstract class CachingCollector extends FilterCollector {
 
     @Override
     public final float score() { return score; }
+    
+	@Override
+	public float smoothingScore(int docId) { return 0; }
 
     @Override
     public int docID() {
diff --git a/lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer.java b/lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer.java
index 7ba4aa31436..f425110dec4 100644
--- a/lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer.java
+++ b/lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer.java
@@ -60,6 +60,11 @@ class ConjunctionScorer extends Scorer {
     }
     return (float) sum;
   }
+  
+  @Override
+  public float smoothingScore(int docId) throws IOException {
+	return 0f;
+  }
 
   @Override
   public float getMaxScore(int upTo) throws IOException {
diff --git a/lucene/core/src/java/org/apache/lucene/search/ConstantScoreScorer.java b/lucene/core/src/java/org/apache/lucene/search/ConstantScoreScorer.java
index 17c8362053c..b39ddd8f048 100644
--- a/lucene/core/src/java/org/apache/lucene/search/ConstantScoreScorer.java
+++ b/lucene/core/src/java/org/apache/lucene/search/ConstantScoreScorer.java
@@ -136,5 +136,10 @@ public final class ConstantScoreScorer extends Scorer {
   public float score() throws IOException {
     return score;
   }
+  
+  @Override
+  public float smoothingScore(int docId) throws IOException {
+	return 0;
+  }
 
 }
diff --git a/lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer.java b/lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer.java
index 63d0285ca95..a4b9abd7c4e 100644
--- a/lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer.java
+++ b/lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer.java
@@ -74,6 +74,11 @@ final class DisjunctionMaxScorer extends DisjunctionScorer {
     }
     return (float) (scoreMax + otherScoreSum * tieBreakerMultiplier);
   }
+  
+  @Override
+  public float smoothingScore(int docId) throws IOException {
+	return 0;
+  }
 
   @Override
   public int advanceShallow(int target) throws IOException {
diff --git a/lucene/core/src/java/org/apache/lucene/search/DisjunctionSumScorer.java b/lucene/core/src/java/org/apache/lucene/search/DisjunctionSumScorer.java
index 18835ed8de2..6225c9e6a86 100644
--- a/lucene/core/src/java/org/apache/lucene/search/DisjunctionSumScorer.java
+++ b/lucene/core/src/java/org/apache/lucene/search/DisjunctionSumScorer.java
@@ -41,6 +41,11 @@ final class DisjunctionSumScorer extends DisjunctionScorer {
     }
     return (float)score;
   }
+  
+  @Override
+  public float smoothingScore(int docId) throws IOException {
+	return 0;
+  }
 
   @Override
   public float getMaxScore(int upTo) throws IOException {
diff --git a/lucene/core/src/java/org/apache/lucene/search/FilterScorable.java b/lucene/core/src/java/org/apache/lucene/search/FilterScorable.java
index c2e68c1c231..1422870828b 100644
--- a/lucene/core/src/java/org/apache/lucene/search/FilterScorable.java
+++ b/lucene/core/src/java/org/apache/lucene/search/FilterScorable.java
@@ -45,6 +45,11 @@ public class FilterScorable extends Scorable {
   public float score() throws IOException {
     return in.score();
   }
+  
+  @Override
+  public float smoothingScore(int docId) throws IOException {
+  	return 0;
+  }
 
   @Override
   public int docID() {
@@ -55,4 +60,5 @@ public class FilterScorable extends Scorable {
   public Collection<ChildScorable> getChildren() throws IOException {
     return Collections.singletonList(new ChildScorable(in, "FILTER"));
   }
+
 }
diff --git a/lucene/core/src/java/org/apache/lucene/search/FilterScorer.java b/lucene/core/src/java/org/apache/lucene/search/FilterScorer.java
index 7bcb1ce4a64..97ecd6281d6 100644
--- a/lucene/core/src/java/org/apache/lucene/search/FilterScorer.java
+++ b/lucene/core/src/java/org/apache/lucene/search/FilterScorer.java
@@ -58,6 +58,11 @@ public abstract class FilterScorer extends Scorer {
   public float score() throws IOException {
     return in.score();
   }
+  
+  @Override
+  public float smoothingScore(int docId) throws IOException {
+    return 0;
+  }
 
   // Leave maxScore abstract on purpose since the goal of this Filter class is
   // to change the way the score is computed.
diff --git a/lucene/core/src/java/org/apache/lucene/search/IndriAndQuery.java b/lucene/core/src/java/org/apache/lucene/search/IndriAndQuery.java
new file mode 100644
index 00000000000..cdd47e0937b
--- /dev/null
+++ b/lucene/core/src/java/org/apache/lucene/search/IndriAndQuery.java
@@ -0,0 +1,21 @@
+package org.apache.lucene.search;
+
+import java.io.IOException;
+import java.util.List;
+
+/** A Query that matches documents matching combinations of {@link TermQuery}s 
+ * or other IndriAndQuerys.
+ */
+public class IndriAndQuery extends IndriQuery {
+
+    public IndriAndQuery(List<BooleanClause> clauses) {
+    	super(clauses);
+    }
+
+    @Override
+    public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {
+		IndriAndQuery query = this;
+		return new IndriAndWeight(query, searcher, ScoreMode.TOP_SCORES, boost);
+    }
+
+}
diff --git a/lucene/core/src/java/org/apache/lucene/search/IndriAndScorer.java b/lucene/core/src/java/org/apache/lucene/search/IndriAndScorer.java
new file mode 100644
index 00000000000..bd2aba2d1ff
--- /dev/null
+++ b/lucene/core/src/java/org/apache/lucene/search/IndriAndScorer.java
@@ -0,0 +1,55 @@
+package org.apache.lucene.search;
+
+import java.io.IOException;
+import java.util.List;
+
+/**
+ * Combines scores of subscorers.  If a subscorer does not contain the docId,
+ * a smoothing score is calculated for that document/subscorer combination.
+ *
+ */
+public class IndriAndScorer extends IndriDisjunctionScorer {
+
+	protected IndriAndScorer(Weight weight, List<Scorer> subScorers, ScoreMode scoreMode, float boost)
+			throws IOException {
+		super(weight, subScorers, scoreMode, boost);
+	}
+
+	@Override
+	public float score(List<Scorer> subScorers) throws IOException {
+		int docId = this.docID();
+		return scoreDoc(subScorers, docId);
+	}
+
+	@Override
+	public float smoothingScore(List<Scorer> subScorers, int docId) throws IOException {
+		return scoreDoc(subScorers, docId);
+	}
+
+	private float scoreDoc(List<Scorer> subScorers, int docId) throws IOException {
+		double score = 0;
+		double boostSum = 0.0;
+		for (Scorer scorer : subScorers) {
+			if (scorer instanceof IndriScorer) {
+				IndriScorer indriScorer = (IndriScorer) scorer;
+				int scorerDocId = indriScorer.docID();
+				if (docId == scorerDocId) {
+					double tempScore = indriScorer.score();
+					tempScore *= indriScorer.getBoost();
+					score += tempScore;
+				} else {
+					float smoothingScore = indriScorer.smoothingScore(docId);
+					smoothingScore *= indriScorer.getBoost();
+					score += smoothingScore;
+				}
+				boostSum += indriScorer.getBoost();
+			}
+		}
+		if (boostSum == 0) {
+			return 0;
+		} else {
+			return (float) (score / boostSum);
+		}
+	}
+
+}
diff --git a/lucene/core/src/java/org/apache/lucene/search/IndriAndWeight.java b/lucene/core/src/java/org/apache/lucene/search/IndriAndWeight.java
new file mode 100644
index 00000000000..24175a493be
--- /dev/null
+++ b/lucene/core/src/java/org/apache/lucene/search/IndriAndWeight.java
@@ -0,0 +1,104 @@
+package org.apache.lucene.search;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+
+import org.apache.lucene.index.LeafReaderContext;
+
+/**
+ * The Weight for IndriAndQuery, used to
+ * normalize, score and explain these queries.
+ */
+public class IndriAndWeight extends Weight {
+
+	private final IndriAndQuery query;
+	private final ArrayList<Weight> weights;
+	private final ScoreMode scoreMode;
+	private final float boost;
+
+	public IndriAndWeight(IndriAndQuery query, IndexSearcher searcher, ScoreMode scoreMode, float boost)
+			throws IOException {
+		super(query);
+		this.query = query;
+		this.boost = boost;
+		this.scoreMode = scoreMode;
+		weights = new ArrayList<>();
+		for (BooleanClause c : query) {
+			Weight w = searcher.createWeight(c.getQuery(), scoreMode, 1.0f);
+			weights.add(w);
+		}
+	}
+
+	private Scorer getScorer(LeafReaderContext context) throws IOException {
+		List<Scorer> subScorers = new ArrayList<>();
+
+		for (Weight w : weights) {
+			Scorer scorer = w.scorer(context);
+			if (scorer != null) {
+				subScorers.add(scorer);
+			}
+		}
+
+		if (subScorers.isEmpty()) {
+			return null;
+		}
+		Scorer scorer = subScorers.get(0);
+		if (subScorers.size() > 1) {
+			scorer = new IndriAndScorer(this, subScorers, scoreMode, boost);
+		}
+		return scorer;
+	}
+
+	@Override
+	public Scorer scorer(LeafReaderContext context) throws IOException {
+		return getScorer(context);
+	}
+
+	@Override
+	public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {
+		Scorer scorer = getScorer(context);
+		if (scorer != null) {
+			BulkScorer bulkScorer = new DefaultBulkScorer(scorer);
+			return bulkScorer;
+		}
+		return null;
+	}
+
+	@Override
+	public boolean isCacheable(LeafReaderContext ctx) {
+		for (Weight w : weights) {
+		    if (w.isCacheable(ctx) == false)
+			return false;
+		}
+		return true;
+	}
+
+	@Override
+	public Explanation explain(LeafReaderContext context, int doc) throws IOException {
+		List<Explanation> subs = new ArrayList<>();
+		boolean fail = false;
+		Iterator<BooleanClause> cIter = query.iterator();
+		for (Iterator<Weight> wIter = weights.iterator(); wIter.hasNext();) {
+			Weight w = wIter.next();
+			BooleanClause c = cIter.next();
+			Explanation e = w.explain(context, doc);
+			if (e.isMatch()) {
+				subs.add(e);
+			} else if (c.isRequired()) {
+				subs.add(Explanation.noMatch("no match on required clause (" + c.getQuery().toString() + ")", e));
+				fail = true;
+			}
+		}
+		if (fail) {
+			return Explanation.noMatch("Failure to meet condition(s) of required/prohibited clause(s)", subs);
+		} else {
+			Scorer scorer = scorer(context);
+			int advanced = scorer.iterator().advance(doc);
+			assert advanced == doc;
+			return Explanation.match(scorer.score(), "sum of:", subs);
+		}
+	}
+
+}
diff --git a/lucene/core/src/java/org/apache/lucene/search/IndriDisjunctionScorer.java b/lucene/core/src/java/org/apache/lucene/search/IndriDisjunctionScorer.java
new file mode 100644
index 00000000000..cf91837340c
--- /dev/null
+++ b/lucene/core/src/java/org/apache/lucene/search/IndriDisjunctionScorer.java
@@ -0,0 +1,63 @@
+package org.apache.lucene.search;
+
+import java.io.IOException;
+import java.util.List;
+
+/**
+ * The Indri implemenation of a disjunction scorer which stores the subscorers
+ * for for the child queries.  The score and smoothingScore methods use the 
+ * list of all subscorers and not just the matches so that a smoothingScore
+ * can be calculated if there is not an exact match.
+ *
+ */
+abstract public class IndriDisjunctionScorer extends IndriScorer {
+
+	private final List<Scorer> subScorersList;
+	private final DisiPriorityQueue subScorers;
+	private final DocIdSetIterator approximation;
+
+	protected IndriDisjunctionScorer(Weight weight, List<Scorer> subScorersList, ScoreMode scoreMode, float boost) {
+		super(weight, boost);
+		this.subScorersList = subScorersList;
+		this.subScorers = new DisiPriorityQueue(subScorersList.size());
+		for (Scorer scorer : subScorersList) {
+			final DisiWrapper w = new DisiWrapper(scorer);
+			this.subScorers.add(w);
+		}
+		this.approximation = new DisjunctionDISIApproximation(this.subScorers);
+	}
+
+	@Override
+	public DocIdSetIterator iterator() {
+		return approximation;
+	}
+
+	@Override
+	public float getMaxScore(int upTo) throws IOException {
+		return 0;
+	}
+
+	public List<Scorer> getSubMatches() throws IOException {
+		return subScorersList;
+	}
+
+	abstract float score(List<Scorer> subScorers) throws IOException;
+
+	abstract public float smoothingScore(List<Scorer> subScorers, int docId) throws IOException;
+
+	@Override
+	public float score() throws IOException {
+		return score(getSubMatches());
+	}
+
+	@Override
+	public float smoothingScore(int docId) throws IOException {
+		return smoothingScore(getSubMatches(), docId);
+	}
+
+	@Override
+	public int docID() {
+		return subScorers.top().doc;
+	}
+
+}
diff --git a/lucene/core/src/java/org/apache/lucene/search/IndriQuery.java b/lucene/core/src/java/org/apache/lucene/search/IndriQuery.java
new file mode 100644
index 00000000000..75eb036a6c1
--- /dev/null
+++ b/lucene/core/src/java/org/apache/lucene/search/IndriQuery.java
@@ -0,0 +1,82 @@
+package org.apache.lucene.search;
+
+import java.io.IOException;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Objects;
+
+/**
+ * A Basic abstract query that all IndriQueries can extend to implement toString,
+ * equals, getClauses, and iterator.
+ *
+ */
+public abstract class IndriQuery extends Query implements Iterable<BooleanClause> {
+
+	private List<BooleanClause> clauses;
+
+	public IndriQuery(List<BooleanClause> clauses) {
+		this.clauses = clauses;
+	}
+
+	@Override
+	public abstract Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException;
+
+	@Override
+	public String toString(String field) {
+		StringBuilder buffer = new StringBuilder();
+
+		int i = 0;
+		for (BooleanClause c : this) {
+			buffer.append(c.getOccur().toString());
+
+			Query subQuery = c.getQuery();
+			if (subQuery instanceof BooleanQuery) { // wrap sub-bools in parens
+				buffer.append("(");
+				buffer.append(subQuery.toString(field));
+				buffer.append(")");
+			} else {
+				buffer.append(subQuery.toString(field));
+			}
+
+			if (i != clauses.size() - 1) {
+				buffer.append(" ");
+			}
+			i += 1;
+		}
+
+		return buffer.toString();
+	}
+
+	@Override
+	public boolean equals(Object o) {
+		return sameClassAs(o) && equalsTo(getClass().cast(o));
+	}
+
+	@Override
+	public void visit(QueryVisitor visitor) {
+		visitor.visitLeaf(this);
+	}
+
+	private boolean equalsTo(IndriQuery other) {
+		return clauses.equals(other.clauses);
+	}
+
+	@Override
+	public int hashCode() {
+		int hashCode = Objects.hash(clauses);
+		if (hashCode == 0) {
+			hashCode = 1;
+		}
+		return hashCode;
+	}
+
+	@Override
+	public Iterator<BooleanClause> iterator() {
+		return clauses.iterator();
+	}
+
+	public List<BooleanClause> getClauses() {
+		return this.clauses;
+	}
+
+}
diff --git a/lucene/core/src/java/org/apache/lucene/search/IndriScorer.java b/lucene/core/src/java/org/apache/lucene/search/IndriScorer.java
new file mode 100644
index 00000000000..05542a00c8a
--- /dev/null
+++ b/lucene/core/src/java/org/apache/lucene/search/IndriScorer.java
@@ -0,0 +1,41 @@
+package org.apache.lucene.search;
+
+import java.io.IOException;
+
+import org.apache.lucene.search.DocIdSetIterator;
+import org.apache.lucene.search.Scorer;
+import org.apache.lucene.search.Weight;
+
+/**
+ * The Indri parent scorer that stores the boost so that 
+ * IndriScorers can use the boost outside of the term.
+ *
+ */
+abstract public class IndriScorer extends Scorer {
+
+	private float boost;
+
+	protected IndriScorer(Weight weight, float boost) {
+		super(weight);
+		this.boost = boost;
+	}
+
+	@Override
+	abstract public DocIdSetIterator iterator();
+
+	@Override
+	abstract public float getMaxScore(int upTo) throws IOException;
+
+	@Override
+	abstract public float score() throws IOException;
+
+	abstract public float smoothingScore(int docId) throws IOException;
+
+	@Override
+	abstract public int docID();
+
+	public float getBoost() {
+		return this.boost;
+	}
+
+}
diff --git a/lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer.java b/lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer.java
index 9a95da456f0..05f9aec54ba 100644
--- a/lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer.java
+++ b/lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer.java
@@ -324,6 +324,11 @@ final class MinShouldMatchSumScorer extends Scorer {
     }
     return (float) score;
   }
+  
+  @Override
+  public float smoothingScore(int docId) throws IOException {
+	return 0;
+  }
 
   @Override
   public float getMaxScore(int upTo) throws IOException {
diff --git a/lucene/core/src/java/org/apache/lucene/search/PhraseScorer.java b/lucene/core/src/java/org/apache/lucene/search/PhraseScorer.java
index 2bcf7378664..24ed4371c12 100644
--- a/lucene/core/src/java/org/apache/lucene/search/PhraseScorer.java
+++ b/lucene/core/src/java/org/apache/lucene/search/PhraseScorer.java
@@ -81,6 +81,11 @@ class PhraseScorer extends Scorer {
     return simScorer.score(docID(), freq);
   }
 
+  @Override
+  public float smoothingScore(int docId) throws IOException {
+	return 0;
+  }
+  
   @Override
   public DocIdSetIterator iterator() {
     return TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator());
diff --git a/lucene/core/src/java/org/apache/lucene/search/ReqExclScorer.java b/lucene/core/src/java/org/apache/lucene/search/ReqExclScorer.java
index 90b11aaa890..ce3da56018d 100644
--- a/lucene/core/src/java/org/apache/lucene/search/ReqExclScorer.java
+++ b/lucene/core/src/java/org/apache/lucene/search/ReqExclScorer.java
@@ -75,6 +75,11 @@ class ReqExclScorer extends Scorer {
   public float score() throws IOException {
     return reqScorer.score(); // reqScorer may be null when next() or skipTo() already return false
   }
+  
+  @Override
+  public float smoothingScore(int docId) throws IOException {
+	return reqScorer.smoothingScore(docId);
+  }
 
   @Override
   public int advanceShallow(int target) throws IOException {
diff --git a/lucene/core/src/java/org/apache/lucene/search/ReqOptSumScorer.java b/lucene/core/src/java/org/apache/lucene/search/ReqOptSumScorer.java
index fe9afc0c16f..8a81b890197 100644
--- a/lucene/core/src/java/org/apache/lucene/search/ReqOptSumScorer.java
+++ b/lucene/core/src/java/org/apache/lucene/search/ReqOptSumScorer.java
@@ -268,6 +268,11 @@ class ReqOptSumScorer extends Scorer {
 
     return score;
   }
+  
+  @Override
+  public float smoothingScore(int docId) throws IOException {
+	return reqScorer.smoothingScore(docId);
+  }
 
   @Override
   public int advanceShallow(int target) throws IOException {
diff --git a/lucene/core/src/java/org/apache/lucene/search/Scorable.java b/lucene/core/src/java/org/apache/lucene/search/Scorable.java
index 1fdda0de9bb..fd9dbe334f3 100644
--- a/lucene/core/src/java/org/apache/lucene/search/Scorable.java
+++ b/lucene/core/src/java/org/apache/lucene/search/Scorable.java
@@ -30,6 +30,13 @@ public abstract class Scorable {
    * Returns the score of the current document matching the query.
    */
   public abstract float score() throws IOException;
+  
+  /**
+   * Returns the smoothing score of the current document matching the query. 
+   * This score is used when the query/term does not appear in the document.  
+   * This can return 0 or a smoothing score.
+   */
+  public abstract float smoothingScore(int docId) throws IOException;
 
   /**
    * Returns the doc ID that is currently being scored.
diff --git a/lucene/core/src/java/org/apache/lucene/search/ScoreAndDoc.java b/lucene/core/src/java/org/apache/lucene/search/ScoreAndDoc.java
index f9610f8da99..87fd012c4d0 100644
--- a/lucene/core/src/java/org/apache/lucene/search/ScoreAndDoc.java
+++ b/lucene/core/src/java/org/apache/lucene/search/ScoreAndDoc.java
@@ -16,20 +16,26 @@
  */
 package org.apache.lucene.search;
 
-
-/** Used by {@link BulkScorer}s that need to pass a {@link
- *  Scorable} to {@link LeafCollector#setScorer}. */
+/**
+ * Used by {@link BulkScorer}s that need to pass a {@link Scorable} to
+ * {@link LeafCollector#setScorer}.
+ */
 final class ScoreAndDoc extends Scorable {
-  float score;
-  int doc = -1;
+	float score;
+	int doc = -1;
+
+	@Override
+	public int docID() {
+		return doc;
+	}
 
-  @Override
-  public int docID() {
-    return doc;
-  }
+	@Override
+	public float score() {
+		return score;
+	}
 
-  @Override
-  public float score() {
-    return score;
-  }
+	@Override
+	public float smoothingScore(int docId) {
+		return 0;
+	}
 }
diff --git a/lucene/core/src/java/org/apache/lucene/search/ScoreCachingWrappingScorer.java b/lucene/core/src/java/org/apache/lucene/search/ScoreCachingWrappingScorer.java
index f68f25d8ed1..56687b643bd 100644
--- a/lucene/core/src/java/org/apache/lucene/search/ScoreCachingWrappingScorer.java
+++ b/lucene/core/src/java/org/apache/lucene/search/ScoreCachingWrappingScorer.java
@@ -53,6 +53,11 @@ public final class ScoreCachingWrappingScorer extends Scorable {
 
     return curScore;
   }
+  
+  @Override
+  public float smoothingScore(int docId) throws IOException {
+  	return 0;
+  }
 
   @Override
   public void setMinCompetitiveScore(float minScore) throws IOException {
@@ -68,4 +73,5 @@ public final class ScoreCachingWrappingScorer extends Scorable {
   public Collection<ChildScorable> getChildren() {
     return Collections.singleton(new ChildScorable(in, "CACHED"));
   }
+
 }
diff --git a/lucene/core/src/java/org/apache/lucene/search/SynonymQuery.java b/lucene/core/src/java/org/apache/lucene/search/SynonymQuery.java
index ef7e3a2645b..1ee6be1297f 100644
--- a/lucene/core/src/java/org/apache/lucene/search/SynonymQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/SynonymQuery.java
@@ -538,6 +538,11 @@ public final class SynonymQuery extends Query {
     public float score() throws IOException {
       return simScorer.score(iterator.docID(), freq());
     }
+    
+    @Override
+    public float smoothingScore(int docId) throws IOException {
+    	return 0;
+    }
 
     @Override
     public DocIdSetIterator iterator() {
@@ -599,6 +604,11 @@ public final class SynonymQuery extends Query {
       assert docID() != DocIdSetIterator.NO_MORE_DOCS;
       return docScorer.score(in.docID(), freq());
     }
+    
+    @Override
+    public float smoothingScore(int docId) throws IOException {
+    	return 0;
+    }
 
     @Override
     public float getMaxScore(int upTo) throws IOException {
diff --git a/lucene/core/src/java/org/apache/lucene/search/TermScorer.java b/lucene/core/src/java/org/apache/lucene/search/TermScorer.java
index 7d3f6e3d1f2..2cc0af2047a 100644
--- a/lucene/core/src/java/org/apache/lucene/search/TermScorer.java
+++ b/lucene/core/src/java/org/apache/lucene/search/TermScorer.java
@@ -74,6 +74,11 @@ final class TermScorer extends Scorer {
     assert docID() != DocIdSetIterator.NO_MORE_DOCS;
     return docScorer.score(postingsEnum.docID(), postingsEnum.freq());
   }
+  
+  @Override
+  public float smoothingScore(int docId) throws IOException {
+	return docScorer.score(docId, 0);
+  }
 
   @Override
   public int advanceShallow(int target) throws IOException {
diff --git a/lucene/core/src/java/org/apache/lucene/search/WANDScorer.java b/lucene/core/src/java/org/apache/lucene/search/WANDScorer.java
index 61529593740..b182572c420 100644
--- a/lucene/core/src/java/org/apache/lucene/search/WANDScorer.java
+++ b/lucene/core/src/java/org/apache/lucene/search/WANDScorer.java
@@ -472,6 +472,11 @@ final class WANDScorer extends Scorer {
     }
     return (float) score;
   }
+  
+  @Override
+  public float smoothingScore(int docId) throws IOException {
+  	return 0;
+  }
 
   @Override
   public int advanceShallow(int target) throws IOException {
diff --git a/lucene/core/src/java/org/apache/lucene/search/similarities/IndriDirichletSimilarity.java b/lucene/core/src/java/org/apache/lucene/search/similarities/IndriDirichletSimilarity.java
new file mode 100644
index 00000000000..7e498fa5ada
--- /dev/null
+++ b/lucene/core/src/java/org/apache/lucene/search/similarities/IndriDirichletSimilarity.java
@@ -0,0 +1,110 @@
+/*
+ * ===============================================================================================
+ * Copyright (c) 2019 Carnegie Mellon University and University of Massachusetts. All Rights
+ * Reserved.
+ *
+ * Use of the Lemur Toolkit for Language Modeling and Information Retrieval is subject to the terms
+ * of the software license set forth in the LICENSE file included with this software, and also
+ * available at http://www.lemurproject.org/license.html
+ *
+ * ================================================================================================
+ */
+package org.apache.lucene.search.similarities;
+
+import java.util.List;
+import java.util.Locale;
+
+import org.apache.lucene.search.Explanation;
+import org.apache.lucene.search.similarities.BasicStats;
+import org.apache.lucene.search.similarities.LMSimilarity;
+
+/**
+ * Bayesian smoothing using Dirichlet priors as implemented in the Indri Search
+ * engine (http://www.lemurproject.org/indri.php).  
+ * Indri Dirichelet Smoothing!
+ *                 tf_E + mu*P(t|D)
+ * P(t|E)= ------------------------
+ *          documentLength + documentMu
+ *                  mu*P(t|C) + tf_D
+ * where P(t|D)= ---------------------
+ *                  doclen + mu
+ */
+public class IndriDirichletSimilarity extends LMSimilarity {
+
+	/** The &mu; parameter. */
+	private final float mu;
+
+	/** Instantiates the similarity with the provided &mu; parameter. */
+	public IndriDirichletSimilarity(CollectionModel collectionModel, float mu) {
+		super(collectionModel);
+		this.mu = mu;
+	}
+
+	/** Instantiates the similarity with the provided &mu; parameter. */
+	public IndriDirichletSimilarity(float mu) {
+		this.mu = mu;
+	}
+
+	/** Instantiates the similarity with the default &mu; value of 2000. */
+	public IndriDirichletSimilarity(CollectionModel collectionModel) {
+		this(collectionModel, 2000);
+	}
+
+	/** Instantiates the similarity with the default &mu; value of 2000. */
+	public IndriDirichletSimilarity() {
+		this(new IndriCollectionModel(), 2000);
+	}
+
+	@Override
+	protected double score(BasicStats stats, double freq, double docLen) {
+		double collectionProbability = ((LMStats) stats).getCollectionProbability();
+		double score = (freq + (mu * collectionProbability)) / (docLen + mu);
+		return (Math.log(score));
+	}
+
+	@Override
+	protected void explain(List<Explanation> subs, BasicStats stats, double freq, double docLen) {
+		if (stats.getBoost() != 1.0f) {
+			subs.add(Explanation.match(stats.getBoost(), "boost"));
+		}
+
+		subs.add(Explanation.match(mu, "mu"));
+		double collectionProbability = ((LMStats) stats).getCollectionProbability();
+		Explanation weightExpl = Explanation
+				.match((float) Math.log((freq + (mu * collectionProbability)) / (docLen + mu)), "term weight");
+		subs.add(weightExpl);
+		subs.add(Explanation.match((float) Math.log(mu / (docLen + mu)), "document norm"));
+		super.explain(subs, stats, freq, docLen);
+	}
+
+	/** Returns the &mu; parameter. */
+	public float getMu() {
+		return mu;
+	}
+
+	public String getName() {
+		return String.format(Locale.ROOT, "IndriDirichlet(%f)", getMu());
+	}
+
+	/**
+	 * Models {@code p(w|C)} as the number of occurrences of the term in the
+	 * collection, divided by the total number of tokens {@code + 1}.
+	 */
+	public static class IndriCollectionModel implements CollectionModel {
+
+		/** Sole constructor: parameter-free */
+		public IndriCollectionModel() {
+		}
+
+		@Override
+		public double computeProbability(BasicStats stats) {
+			return ((double) stats.getTotalTermFreq()) / ((double) stats.getNumberOfFieldTokens());
+		}
+
+		@Override
+		public String getName() {
+			return null;
+		}
+	}
+
+}
diff --git a/lucene/core/src/java/org/apache/lucene/search/spans/SpanScorer.java b/lucene/core/src/java/org/apache/lucene/search/spans/SpanScorer.java
index 666f163742a..3b0e76e407c 100644
--- a/lucene/core/src/java/org/apache/lucene/search/spans/SpanScorer.java
+++ b/lucene/core/src/java/org/apache/lucene/search/spans/SpanScorer.java
@@ -133,6 +133,11 @@ public class SpanScorer extends Scorer {
     ensureFreq();
     return scoreCurrentDoc();
   }
+  
+  @Override
+  public float smoothingScore(int docId) throws IOException {
+	return 0;
+  }
 
   @Override
   public float getMaxScore(int upTo) throws IOException {
diff --git a/lucene/core/src/test/org/apache/lucene/search/JustCompileSearch.java b/lucene/core/src/test/org/apache/lucene/search/JustCompileSearch.java
index 1029326b03f..4419d5066e8 100644
--- a/lucene/core/src/test/org/apache/lucene/search/JustCompileSearch.java
+++ b/lucene/core/src/test/org/apache/lucene/search/JustCompileSearch.java
@@ -177,6 +177,11 @@ final class JustCompileSearch {
     public float score() {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
+    
+    @Override
+    public float smoothingScore(int docId) throws IOException {
+    	throw new UnsupportedOperationException(UNSUPPORTED_MSG);
+    }
 
     @Override
     public float getMaxScore(int upTo) throws IOException {
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestBoolean2ScorerSupplier.java b/lucene/core/src/test/org/apache/lucene/search/TestBoolean2ScorerSupplier.java
index 45555f21a09..7b05468fe78 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestBoolean2ScorerSupplier.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestBoolean2ScorerSupplier.java
@@ -71,6 +71,11 @@ public class TestBoolean2ScorerSupplier extends LuceneTestCase {
     public float score() throws IOException {
       return 1;
     }
+    
+    @Override
+    public float smoothingScore(int docId) throws IOException {
+    	return 0;
+    }
 
     @Override
     public float getMaxScore(int upTo) throws IOException {
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestCachingCollector.java b/lucene/core/src/test/org/apache/lucene/search/TestCachingCollector.java
index 877c4965bf2..9851e063740 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestCachingCollector.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestCachingCollector.java
@@ -29,6 +29,9 @@ public class TestCachingCollector extends LuceneTestCase {
     
     @Override
     public float score() { return 0; }
+    
+	@Override
+	public float smoothingScore(int docId) { return 0; }
 
     @Override
     public int docID() { return 0; }
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI.java b/lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI.java
index 43cfbe68fe8..739679c5b6c 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI.java
@@ -168,6 +168,11 @@ public class TestConjunctionDISI extends LuceneTestCase {
       public float score() throws IOException {
         return 0;
       }
+      
+      @Override
+      public float smoothingScore(int docId) throws IOException {
+      	return 0;
+      }
 
       @Override
       public float getMaxScore(int upTo) throws IOException {
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestDisjunctionScoreBlockBoundaryPropagator.java b/lucene/core/src/test/org/apache/lucene/search/TestDisjunctionScoreBlockBoundaryPropagator.java
index 423e002eaef..49672d236a9 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestDisjunctionScoreBlockBoundaryPropagator.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestDisjunctionScoreBlockBoundaryPropagator.java
@@ -68,6 +68,11 @@ public class TestDisjunctionScoreBlockBoundaryPropagator extends LuceneTestCase
     public float score() {
       throw new UnsupportedOperationException();
     }
+    
+    @Override
+    public float smoothingScore(int docId) throws IOException {
+    	throw new UnsupportedOperationException();
+    }
 
     @Override
     public DocIdSetIterator iterator() {
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestMaxScoreSumPropagator.java b/lucene/core/src/test/org/apache/lucene/search/TestMaxScoreSumPropagator.java
index 9da8d1d86dc..9aeda2cdd60 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestMaxScoreSumPropagator.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestMaxScoreSumPropagator.java
@@ -72,6 +72,11 @@ public class TestMaxScoreSumPropagator extends LuceneTestCase {
     public float score() {
       throw new UnsupportedOperationException();
     }
+    
+    @Override
+    public float smoothingScore(int docId) {
+      throw new UnsupportedOperationException();
+    }
 
     @Override
     public DocIdSetIterator iterator() {
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.java b/lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.java
index f0906f1a0d9..91c903e5a08 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.java
@@ -344,6 +344,11 @@ public class TestMinShouldMatch2 extends LuceneTestCase {
       assert score != 0 : currentMatched;
       return (float)score;
     }
+    
+    @Override
+    public float smoothingScore(int docId) throws IOException {
+      return 0f;
+    }
 
     @Override
     public float getMaxScore(int upTo) throws IOException {
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestMultiCollector.java b/lucene/core/src/test/org/apache/lucene/search/TestMultiCollector.java
index f1adc1b2c93..59125aac2af 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestMultiCollector.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestMultiCollector.java
@@ -184,11 +184,17 @@ public class TestMultiCollector extends LuceneTestCase {
       public float score() {
         return 0;
       }
+      
+  	  @Override
+  	  public float smoothingScore(int docId) throws IOException {
+  		return 0;
+  	  }
 
       @Override
       public void setMinCompetitiveScore(float minScore) {
         throw new AssertionError();
       }
+
     };
 
     Collector collector = new SimpleCollector() {
@@ -384,6 +390,11 @@ public class TestMultiCollector extends LuceneTestCase {
         return 0;
       }
       
+  	  @Override
+  	  public float smoothingScore(int docId) throws IOException {
+  		return 0;
+  	  }
+      
       @Override
       public int docID() {
         return 0;
@@ -393,6 +404,7 @@ public class TestMultiCollector extends LuceneTestCase {
       public void setMinCompetitiveScore(float minScore) throws IOException {
         minCompetitiveScore[0] = minScore;
       }
+
     };
     Scorable s0 = new MultiCollector.MinCompetitiveScoreAwareScorable(scorer, 0, currentMinScores);
     Scorable s1 = new MultiCollector.MinCompetitiveScoreAwareScorable(scorer, 1, currentMinScores);
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestPositiveScoresOnlyCollector.java b/lucene/core/src/test/org/apache/lucene/search/TestPositiveScoresOnlyCollector.java
index 2213b9986f6..08570e61e42 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestPositiveScoresOnlyCollector.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestPositiveScoresOnlyCollector.java
@@ -38,6 +38,10 @@ public class TestPositiveScoresOnlyCollector extends LuceneTestCase {
     @Override public float score() {
       return idx == scores.length ? Float.NaN : scores[idx];
     }
+    
+    @Override public float smoothingScore(int docId) {
+        return 0;
+      }
 
     @Override
     public float getMaxScore(int upTo) throws IOException {
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.java b/lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.java
index e603fad1fb1..6b0d51e079e 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.java
@@ -566,6 +566,11 @@ public class TestQueryRescorer extends LuceneTestCase {
                 return 1f / (1 + num);
               }
             }
+            
+            @Override
+            public float smoothingScore(int docId) throws IOException {
+            	return 0;
+            }
 
             @Override
             public float getMaxScore(int upTo) throws IOException {
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestScoreCachingWrappingScorer.java b/lucene/core/src/test/org/apache/lucene/search/TestScoreCachingWrappingScorer.java
index c3da803a02e..44e4f577304 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestScoreCachingWrappingScorer.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestScoreCachingWrappingScorer.java
@@ -43,6 +43,10 @@ public class TestScoreCachingWrappingScorer extends LuceneTestCase {
       return idx == scores.length ? Float.NaN : scores[idx++];
     }
     
+    @Override public float smoothingScore(int docId) {
+        return 0;
+      }
+    
     @Override
     public float getMaxScore(int upTo) throws IOException {
       return Float.POSITIVE_INFINITY;
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestTopDocsCollector.java b/lucene/core/src/test/org/apache/lucene/search/TestTopDocsCollector.java
index cf5102aae4f..9f7f6b54e27 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestTopDocsCollector.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestTopDocsCollector.java
@@ -270,6 +270,11 @@ public class TestTopDocsCollector extends LuceneTestCase {
     public float score() throws IOException {
       return score;
     }
+
+	@Override
+	public float smoothingScore(int docId) throws IOException {
+		return 0;
+	}
   }
 
   public void testSetMinCompetitiveScore() throws Exception {
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector.java b/lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector.java
index 460bf1ac53b..02ce0623a3e 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector.java
@@ -279,6 +279,11 @@ public class TestTopFieldCollector extends LuceneTestCase {
     public float score() throws IOException {
       return score;
     }
+
+	@Override
+	public float smoothingScore(int docId) throws IOException {
+		return 0;
+	}
   }
 
   public void testSetMinCompetitiveScore() throws Exception {
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysScorer.java b/lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysScorer.java
index ddace0dee25..78104d49e4e 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysScorer.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysScorer.java
@@ -591,6 +591,11 @@ class DrillSidewaysScorer extends BulkScorer {
     public float score() {
       return collectScore;
     }
+    
+	@Override
+	public float smoothingScore() {
+		return 0;
+	}
 
     @Override
     public Collection<ChildScorable> getChildren() {
diff --git a/lucene/grouping/src/java/org/apache/lucene/search/grouping/BlockGroupingCollector.java b/lucene/grouping/src/java/org/apache/lucene/search/grouping/BlockGroupingCollector.java
index bbeb2ee204b..e39854d5fde 100644
--- a/lucene/grouping/src/java/org/apache/lucene/search/grouping/BlockGroupingCollector.java
+++ b/lucene/grouping/src/java/org/apache/lucene/search/grouping/BlockGroupingCollector.java
@@ -514,5 +514,10 @@ public class BlockGroupingCollector extends SimpleCollector {
       return score;
     }
 
+	@Override
+	public float smoothingScore() {
+		return 0;
+	}
+
   }
 }
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/ValueSource.java b/lucene/queries/src/java/org/apache/lucene/queries/function/ValueSource.java
index 0b3421da4b4..da7db6d637a 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/ValueSource.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/ValueSource.java
@@ -100,6 +100,11 @@ public abstract class ValueSource {
     public float score() {
       return score;
     }
+
+	@Override
+	public float smoothingScore() {
+		return 0;
+	}
   }
 
   /**
diff --git a/lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer.java b/lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer.java
index 01477f39640..13774486d94 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer.java
@@ -105,6 +105,11 @@ public class AssertingScorer extends Scorer {
     assert Float.compare(score, 0f) >= 0 : score;
     return score;
   }
+  
+  @Override
+  public float smoothingScore(int docId) throws IOException {
+  	return 0;
+  }
 
   @Override
   public Collection<ChildScorable> getChildren() {
diff --git a/lucene/test-framework/src/java/org/apache/lucene/search/BlockScoreQueryWrapper.java b/lucene/test-framework/src/java/org/apache/lucene/search/BlockScoreQueryWrapper.java
index cfebc6a2687..60df4707e1d 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/search/BlockScoreQueryWrapper.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/search/BlockScoreQueryWrapper.java
@@ -126,6 +126,11 @@ public final class BlockScoreQueryWrapper extends Query {
           public float score() throws IOException {
             return scores[i];
           }
+          
+          @Override
+          public float smoothingScore(int docId) throws IOException {
+          	return 0;
+          }
 
           @Override
           public DocIdSetIterator iterator() {
diff --git a/lucene/test-framework/src/java/org/apache/lucene/search/BulkScorerWrapperScorer.java b/lucene/test-framework/src/java/org/apache/lucene/search/BulkScorerWrapperScorer.java
index 198ca308b99..bdacaefed8d 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/search/BulkScorerWrapperScorer.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/search/BulkScorerWrapperScorer.java
@@ -68,6 +68,11 @@ public class BulkScorerWrapperScorer extends Scorer {
   public float score() throws IOException {
     return scores[i];
   }
+  
+  @Override
+  public float smoothingScore(int docId) throws IOException {
+  	return 0;
+  }
 
   @Override
   public float getMaxScore(int upTo) throws IOException {
diff --git a/lucene/test-framework/src/java/org/apache/lucene/search/RandomApproximationQuery.java b/lucene/test-framework/src/java/org/apache/lucene/search/RandomApproximationQuery.java
index 445a39a1b2c..4a96b1975c9 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/search/RandomApproximationQuery.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/search/RandomApproximationQuery.java
@@ -112,6 +112,11 @@ public class RandomApproximationQuery extends Query {
     public float score() throws IOException {
       return scorer.score();
     }
+    
+    @Override
+    public float smoothingScore(int docId) throws IOException {
+    	return 0;
+    }
 
     @Override
     public int advanceShallow(int target) throws IOException {
diff --git a/solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java b/solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java
index 853da1c3a38..20fe91538ef 100644
--- a/solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java
+++ b/solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java
@@ -1559,5 +1559,10 @@ public class QueryComponent extends SearchComponent
     public float score() throws IOException {
       return score;
     }
+
+	@Override
+	public float smoothingScore(int docId) throws IOException {
+		return 0;
+	}
   }
 }
diff --git a/solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.java b/solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.java
index 9a1e740bd8f..5d364c02e74 100644
--- a/solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.java
+++ b/solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.java
@@ -536,10 +536,16 @@ public class CollapsingQParserPlugin extends QParserPlugin {
     public float score() {
       return score;
     }
+    
+	@Override
+	public float smoothingScore(int docId) {
+		return 0;
+	}
 
     public int docID() {
       return docId;
     }
+
   }
 
 
diff --git a/solr/core/src/test/org/apache/solr/search/MaxScoreCollectorTest.java b/solr/core/src/test/org/apache/solr/search/MaxScoreCollectorTest.java
index a5fb41ec2ea..4d2d155ac7a 100644
--- a/solr/core/src/test/org/apache/solr/search/MaxScoreCollectorTest.java
+++ b/solr/core/src/test/org/apache/solr/search/MaxScoreCollectorTest.java
@@ -75,6 +75,11 @@ public class MaxScoreCollectorTest extends SolrTestCase {
     public float score() throws IOException {
       return nextScore;
     }
+    
+	@Override
+	public float smoothingScore() throws IOException {
+		return 0;
+	}
 
     @Override
     public int docID() {
diff --git a/solr/core/src/test/org/apache/solr/search/RankQueryTestPlugin.java b/solr/core/src/test/org/apache/solr/search/RankQueryTestPlugin.java
index 120847bf3f0..b049f936413 100644
--- a/solr/core/src/test/org/apache/solr/search/RankQueryTestPlugin.java
+++ b/solr/core/src/test/org/apache/solr/search/RankQueryTestPlugin.java
@@ -460,6 +460,11 @@ public class RankQueryTestPlugin extends QParserPlugin {
       public float score() {
         return score;
       }
+
+      @Override
+      public float smoothingScore() {
+		return 0;
+      }
     }
 
     @SuppressWarnings({"unchecked"})
