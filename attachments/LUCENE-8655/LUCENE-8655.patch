From 8ce5bb7478aa4926cf80080d48cbf8717fcfde89 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Quaire=20Ge=CC=81rald?= <gquaire@jouve.com>
Date: Wed, 30 Jan 2019 18:57:19 +0100
Subject: [PATCH] LUCENE-8655: Cherry-pick the patch from banch7_x

---
 lucene/CHANGES.txt                                 |  3 +++
 .../queries/function/FunctionScoreQuery.java       |  7 ++++++
 .../queries/function/TestFunctionScoreQuery.java   | 26 ++++++++++++++++++++++
 3 files changed, 36 insertions(+)

diff --git a/lucene/CHANGES.txt b/lucene/CHANGES.txt
index 9c2d634..b630903 100644
--- a/lucene/CHANGES.txt
+++ b/lucene/CHANGES.txt
@@ -380,6 +380,9 @@ Test Framework
 
 Other
 
+* LUCENE-8655: Add a getter in  FunctionScoreQuery class in order to access to the underlying "valueSource".
+  (Gérald Quaire)
+
 * LUCENE-8573: BKDWriter now uses FutureArrays#mismatch to compute shared prefixes.
   (Christoph Büscher via Adrien Grand)
 
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/FunctionScoreQuery.java b/lucene/queries/src/java/org/apache/lucene/queries/function/FunctionScoreQuery.java
index 38b9732..5268a43 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/FunctionScoreQuery.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/FunctionScoreQuery.java
@@ -65,6 +65,13 @@ public final class FunctionScoreQuery extends Query {
   }
 
   /**
+   * @return the underlying value source
+   */
+  public DoubleValuesSource getSource() {
+    return source;
+  }
+
+  /**
    * Returns a FunctionScoreQuery where the scores of a wrapped query are multiplied by
    * the value of a DoubleValuesSource.
    *
diff --git a/lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery.java b/lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery.java
index 3d3f54e..018d40b 100644
--- a/lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery.java
+++ b/lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery.java
@@ -43,6 +43,8 @@ import org.apache.lucene.store.Directory;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 
+import java.text.ParseException;
+
 public class TestFunctionScoreQuery extends FunctionTestSetup {
 
   static IndexReader reader;
@@ -220,4 +222,28 @@ public class TestFunctionScoreQuery extends FunctionTestSetup {
     reader.close();
     dir.close();
   }
+
+  // check access to the score source of a functionScoreQuery
+  public void testAccessToValueSource() throws Exception {
+
+    Query q1 = new FunctionScoreQuery(new TermQuery(new Term(TEXT_FIELD, "a")), DoubleValuesSource.constant(31));
+    Query q2 = new FunctionScoreQuery(((FunctionScoreQuery) q1).getWrappedQuery(),((FunctionScoreQuery) q1).getSource());
+    QueryUtils.check(q2);
+    QueryUtils.checkEqual(q2, q1);
+
+    Query q3 = new FunctionScoreQuery(new TermQuery(new Term(TEXT_FIELD, "first")),
+            DoubleValuesSource.fromIntField(INT_FIELD));
+    Query q4 = new FunctionScoreQuery(((FunctionScoreQuery) q3).getWrappedQuery(),((FunctionScoreQuery) q3).getSource());
+    QueryUtils.checkEqual(q3, q4);
+
+    SimpleBindings bindings = new SimpleBindings();
+    bindings.add("score", DoubleValuesSource.SCORES);
+    Expression expr = JavascriptCompiler.compile("ln(score + 4)");
+    Query q5 = new FunctionScoreQuery(new TermQuery(new Term(TEXT_FIELD, "text")), expr.getDoubleValuesSource(bindings));
+    Query q6 = new FunctionScoreQuery(((FunctionScoreQuery) q5).getWrappedQuery(),((FunctionScoreQuery) q5).getSource());
+    QueryUtils.checkEqual(q5, q6);
+
+
+  }
+
 }
-- 
2.7.4

