diff --git a/lucene/luke/build.gradle b/lucene/luke/build.gradle
index 6e32b1b35a5..3168ba817c4 100644
--- a/lucene/luke/build.gradle
+++ b/lucene/luke/build.gradle
@@ -19,6 +19,14 @@ apply plugin: 'java-library'
 
 description = 'Luke - Lucene Toolbox'
 
+ext {
+  standaloneDistDir = file("$buildDir/${archivesBaseName}-${project.version}")
+}
+
+configurations {
+  standalone
+}
+
 dependencies {
   api project(':lucene:core')
 
@@ -33,3 +41,88 @@ dependencies {
 
   testImplementation project(':lucene:test-framework')
 }
+
+// Configure main class name for all JARs.
+tasks.withType(Jar) {
+  manifest {
+    attributes("Main-Class": "org.apache.lucene.luke.app.desktop.LukeMain")
+  }
+}
+
+// Configure the default JAR without any class path information
+// (this may actually be wrong - perhaps we should add the
+// "distribution" paths here.
+jar {
+  manifest {
+  }
+}
+
+// Configure "stand-alone" JAR with proper dependency classpath links.
+task standaloneJar(type: Jar) {
+  dependsOn classes
+
+  archiveFileName = "${archivesBaseName}-${project.version}-standalone.jar"
+
+  from(sourceSets.main.output)
+
+  // manifest attributes are resolved eagerly and we can't access runtimeClasspath
+  // at configuration time so push it until execution.
+  doFirst {
+    manifest {
+      attributes("Class-Path": configurations.runtimeClasspath.collect {
+        "lib/${it.getName()}"
+      }.join(' '))
+    }
+  }
+}
+
+task standaloneAssemble(type: Sync) {
+  from standaloneJar
+  from(configurations.runtimeClasspath, {
+    into "lib"
+  })
+
+  into standaloneDistDir
+
+  doLast {
+    logger.lifecycle("Standalone Luke distribution assembled. You can run it with:\n"
+        + "java -jar " + file("${standaloneDistDir}/${standaloneJar.archiveFileName.get()}"))
+  }
+}
+
+// Create a standalone package bundle.
+task standalonePackage(type: Tar) {
+  from standaloneAssemble
+
+  into "${archivesBaseName}-${project.version}/"
+
+  compression = Compression.GZIP
+  archiveFileName = "${archivesBaseName}-${project.version}-standalone.tgz"
+}
+
+// Create a set of artifacts for standalone distribution in a specific
+// exported configuration so that it can be pulled in by other projects.
+artifacts {
+  standalone standaloneDistDir, {
+    builtBy standaloneAssemble
+  }
+}
+
+// Utility to launch Luke (and fork it from the build).
+task run() {
+  dependsOn standaloneAssemble
+  description "Launches (spawns) Luke directly from the build process."
+  group "Utility launchers"
+
+  doFirst {
+    logger.lifecycle("Launching Luke ${project.version} right now...")
+    ant.exec(
+        executable: 'java',
+        spawn: true,
+        vmlauncher: false
+    ) {
+      arg(value: '-jar')
+      arg(value: file("${standaloneDistDir}/${standaloneJar.archiveFileName.get()}").absolutePath)
+    }
+  }
+}
diff --git a/solr/packaging/build.gradle b/solr/packaging/build.gradle
index 55b78ca0182..3e222af7bfb 100644
--- a/solr/packaging/build.gradle
+++ b/solr/packaging/build.gradle
@@ -37,6 +37,7 @@ configurations {
   contrib
   example
   server
+  luke
 }
 
 dependencies {
@@ -64,6 +65,8 @@ dependencies {
 
   example project(path: ":solr:example", configuration: "packaging")
   server project(path: ":solr:server", configuration: "packaging")
+
+  luke project(path: ":lucene:luke", configuration: "standalone")
 }
 
 task toDir(type: Sync) {
@@ -76,6 +79,10 @@ task toDir(type: Sync) {
     include "README.md"
   })
 
+  from(configurations.luke, {
+    into "tools/luke"
+  })
+
   from(project(":lucene").projectDir, {
     include "CHANGES.txt"
     rename { file -> 'LUCENE_CHANGES.txt' }
