Index: lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.java	(révision 1464650)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.java	(copie de travail)
@@ -416,15 +416,12 @@
     }
 
     @Override
-    public int advance(int target) {
+    public int advance(int target) throws IOException {
       // TODO: we could make more efficient version, but, it
       // should be rare that this will matter in practice
       // since usually apps will not store "big" fields in
       // this codec!
-      //System.out.println("advance start docID=" + docID + " target=" + target);
-      while(nextDoc() < target) {
-      }
-      return docID;
+      return slowAdvance(target);
     }
 
     @Override
@@ -607,16 +604,12 @@
     }
 
     @Override
-    public int advance(int target) {
+    public int advance(int target) throws IOException {
       // TODO: we could make more efficient version, but, it
       // should be rare that this will matter in practice
       // since usually apps will not store "big" fields in
       // this codec!
-      //System.out.println("advance target=" + target);
-      while(nextDoc() < target) {
-      }
-      //System.out.println("  return " + docID);
-      return docID;
+      return slowAdvance(target);
     }
 
     @Override
Index: lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.java	(révision 1464650)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.java	(copie de travail)
@@ -1481,12 +1481,10 @@
     }
 
     @Override
-    public int advance(int target) {
+    public int advance(int target) throws IOException {
       // Linear scan, but this is low-freq term so it won't
       // be costly:
-      while(nextDoc() < target) {
-      }
-      return docID();
+      return slowAdvance(target);
     }
     
     @Override
@@ -1551,12 +1549,10 @@
     }
 
     @Override
-    public int advance(int target) {
+    public int advance(int target) throws IOException {
       // Linear scan, but this is low-freq term so it won't
       // be costly:
-      while(nextDoc() < target) {
-      }
-      return docID();
+      return slowAdvance(target);
     }
     
     @Override
@@ -1637,12 +1633,10 @@
     }
 
     @Override
-    public int advance(int target) {
+    public int advance(int target) throws IOException {
       // Linear scan, but this is low-freq term so it won't
       // be costly:
-      while(nextDoc() < target) {
-      }
-      return docID();
+      return slowAdvance(target);
     }
     
     @Override
@@ -1783,12 +1777,8 @@
     }
 
     @Override
-    public int advance(int target) {
-      // Linear scan, but this is low-freq term so it won't
-      // be costly:
-      while (nextDoc() < target) {
-      }
-      return docID;
+    public int advance(int target) throws IOException {
+      return slowAdvance(target);
     }
 
     @Override
Index: lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader.java	(révision 1464650)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader.java	(copie de travail)
@@ -362,12 +362,7 @@
 
     @Override
     public int advance(int target) throws IOException {
-      int doc;
-      while((doc=nextDoc()) != NO_MORE_DOCS) {
-        if (doc >= target)
-          return doc;
-      }
-      return docID = NO_MORE_DOCS;
+      return docID = slowAdvance(target);
     }
     
     @Override
@@ -474,13 +469,7 @@
 
     @Override
     public int advance(int target) throws IOException {
-      int doc;
-      while((doc=nextDoc()) != NO_MORE_DOCS) {
-        if (doc >= target) {
-          return docID = doc;
-        }
-      }
-      return docID = NO_MORE_DOCS;
+      return docID = slowAdvance(target);
     }
 
     @Override
Index: lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader.java	(révision 1464650)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader.java	(copie de travail)
@@ -430,12 +430,8 @@
     }
 
     @Override
-    public int advance(int target) {
-      if (!didNext && target == 0) {
-        return nextDoc();
-      } else {
-        return (doc = NO_MORE_DOCS);
-      }
+    public int advance(int target) throws IOException {
+      return slowAdvance(target);
     }
 
     public void reset(Bits liveDocs, int freq) {
@@ -487,12 +483,8 @@
     }
 
     @Override
-    public int advance(int target) {
-      if (!didNext && target == 0) {
-        return nextDoc();
-      } else {
-        return (doc = NO_MORE_DOCS);
-      }
+    public int advance(int target) throws IOException {
+      return slowAdvance(target);
     }
 
     public void reset(Bits liveDocs, int[] positions, int[] startOffsets, int[] endOffsets, BytesRef payloads[]) {
Index: lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.java	(révision 1464650)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.java	(copie de travail)
@@ -315,8 +315,7 @@
     @Override
     public int advance(int target) throws IOException {
       // Naive -- better to index skip data
-      while(nextDoc() < target);
-      return docID;
+      return slowAdvance(target);
     }
     
     @Override
@@ -422,8 +421,7 @@
     @Override
     public int advance(int target) throws IOException {
       // Naive -- better to index skip data
-      while(nextDoc() < target);
-      return docID;
+      return slowAdvance(target);
     }
 
     @Override
Index: lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.java
===================================================================
--- lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.java	(révision 1464650)
+++ lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.java	(copie de travail)
@@ -243,10 +243,7 @@
         public int advance(int target) throws IOException {
           //for this small set this is likely faster vs. a binary search
           // into the sorted array
-          int doc;
-          while ((doc = nextDoc()) < target) {
-          }
-          return doc;
+          return slowAdvance(target);
         }
 
         @Override
Index: lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java
===================================================================
--- lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java	(révision 1464650)
+++ lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java	(copie de travail)
@@ -63,7 +63,6 @@
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.BytesRefHash.DirectBytesStartArray;
 import org.apache.lucene.util.BytesRefHash;
-import org.apache.lucene.util.Constants; // for javadocs
 import org.apache.lucene.util.Counter;
 import org.apache.lucene.util.IntBlockPool.SliceReader;
 import org.apache.lucene.util.IntBlockPool.SliceWriter;
@@ -1012,8 +1011,8 @@
       }
 
       @Override
-      public int advance(int target) {
-        return nextDoc();
+      public int advance(int target) throws IOException {
+        return slowAdvance(target);
       }
 
       @Override
@@ -1068,8 +1067,8 @@
       }
 
       @Override
-      public int advance(int target) {
-        return nextDoc();
+      public int advance(int target) throws IOException {
+        return slowAdvance(target);
       }
 
       @Override
@@ -1133,7 +1132,7 @@
     @Override
     public int numDocs() {
       if (DEBUG) System.err.println("MemoryIndexReader.numDocs");
-      return fields.size() > 0 ? 1 : 0;
+      return 1;
     }
   
     @Override
@@ -1147,12 +1146,6 @@
       if (DEBUG) System.err.println("MemoryIndexReader.document");
       // no-op: there are no stored fields
     }
-    
-    @Override
-    public boolean hasDeletions() {
-      if (DEBUG) System.err.println("MemoryIndexReader.hasDeletions");
-      return false;
-    }
   
     @Override
     protected void doClose() {
Index: lucene/CHANGES.txt
===================================================================
--- lucene/CHANGES.txt	(révision 1464650)
+++ lucene/CHANGES.txt	(copie de travail)
@@ -65,6 +65,11 @@
   interface. IndexDeletionPolicy, MergeScheduler and InfoStream now implement
   Cloneable. (Adrien Grand)
 
+* LUCENE-4874: FilterAtomicReader and related classes (FilterTerms,
+  FilterDocsEnum, ...) don't forward anymore to the filtered instance when the
+  method has a default implementation through other abstract methods.
+  (Adrien Grand, Robert Muir)
+
 New Features
 
 * LUCENE-4815: DrillSideways now allows more than one FacetRequest per
Index: lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader.java
===================================================================
--- lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader.java	(révision 1464650)
+++ lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader.java	(copie de travail)
@@ -394,8 +394,7 @@
     public int advance(final int target) throws IOException {
       // need to support it for checkIndex, but in practice it won't be called, so
       // don't bother to implement efficiently for now.
-      while (nextDoc() < target) {}
-      return docID();
+      return slowAdvance(target);
     }
     
     @Override
@@ -555,8 +554,7 @@
     public int advance(final int target) throws IOException {
       // need to support it for checkIndex, but in practice it won't be called, so
       // don't bother to implement efficiently for now.
-      while (nextDoc() < target) {}
-      return docID();
+      return slowAdvance(target);
     }
     
     @Override
Index: lucene/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.java
===================================================================
--- lucene/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.java	(révision 1464650)
+++ lucene/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.java	(copie de travail)
@@ -246,11 +246,6 @@
     }
 
     @Override
-    public boolean hasDeletions() {
-      return (in.maxDoc() != this.numDocs());
-    }
-
-    @Override
     public Bits getLiveDocs() {
       return liveDocs;
     }
Index: lucene/misc/src/java/org/apache/lucene/index/PKIndexSplitter.java
===================================================================
--- lucene/misc/src/java/org/apache/lucene/index/PKIndexSplitter.java	(révision 1464650)
+++ lucene/misc/src/java/org/apache/lucene/index/PKIndexSplitter.java	(copie de travail)
@@ -161,11 +161,6 @@
     }
     
     @Override
-    public boolean hasDeletions() {
-      return (in.maxDoc() != numDocs);
-    }
-    
-    @Override
     public Bits getLiveDocs() {
       return liveDocs;
     }
Index: lucene/test-framework/src/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat.java	(révision 1464650)
+++ lucene/test-framework/src/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat.java	(copie de travail)
@@ -400,11 +400,8 @@
     }
 
     @Override
-    public int advance(int targetDocID) {
-      do {
-        nextDoc();
-      } while (upto < ramTerm.docs.size() && current.docID < targetDocID);
-      return NO_MORE_DOCS;
+    public int advance(int targetDocID) throws IOException {
+      return slowAdvance(targetDocID);
     }
 
     // TODO: override bulk read, for better perf
@@ -453,11 +450,8 @@
     }
 
     @Override
-    public int advance(int targetDocID) {
-      do {
-        nextDoc();
-      } while (upto < ramTerm.docs.size() && current.docID < targetDocID);
-      return NO_MORE_DOCS;
+    public int advance(int targetDocID) throws IOException {
+      return slowAdvance(targetDocID);
     }
 
     // TODO: override bulk read, for better perf
Index: lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase.java	(révision 1464650)
+++ lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase.java	(copie de travail)
@@ -275,10 +275,8 @@
     }
 
     @Override
-    public int advance(int target) {
-      while(nextDoc() < target) {
-      }
-      return docID;
+    public int advance(int target) throws IOException {
+      return slowAdvance(target);
     }
     
     @Override
Index: lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.java	(révision 1464650)
+++ lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.java	(copie de travail)
@@ -84,7 +84,7 @@
 
     @Override
     public TermsEnum intersect(CompiledAutomaton automaton, BytesRef bytes) throws IOException {
-      TermsEnum termsEnum = super.intersect(automaton, bytes);
+      TermsEnum termsEnum = in.intersect(automaton, bytes);
       assert termsEnum != null;
       assert bytes == null || bytes.isValid();
       return new AssertingTermsEnum(termsEnum);
Index: lucene/core/src/test/org/apache/lucene/search/TestDocIdSet.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestDocIdSet.java	(révision 1464650)
+++ lucene/core/src/test/org/apache/lucene/search/TestDocIdSet.java	(copie de travail)
@@ -17,6 +17,7 @@
  * limitations under the License.
  */
 
+import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Iterator;
@@ -55,9 +56,8 @@
             }
 
             @Override
-            public int advance(int target) {
-              while (nextDoc() < target) {}
-              return docid;
+            public int advance(int target) throws IOException {
+              return slowAdvance(target);
             }
             
             @Override
Index: lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader.java	(révision 1464650)
+++ lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader.java	(copie de travail)
@@ -21,12 +21,13 @@
 import java.io.IOException;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
+
 import org.apache.lucene.analysis.MockAnalyzer;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.search.DocIdSetIterator;
+import org.apache.lucene.store.BaseDirectoryWrapper;
 import org.apache.lucene.store.Directory;
-import org.apache.lucene.store.BaseDirectoryWrapper;
 import org.apache.lucene.util.Bits;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.LuceneTestCase;
@@ -159,21 +160,27 @@
     directory.close();
     target.close();
   }
-  
-  private void checkOverrideMethods(Class<?> clazz) {
-    boolean fail = false;
-    for (Method m : clazz.getMethods()) {
-      int mods = m.getModifiers();
-      if (Modifier.isStatic(mods) || Modifier.isFinal(mods) || m.isSynthetic()) {
+
+  private static void checkOverrideMethods(Class<?> clazz) throws NoSuchMethodException, SecurityException {
+    final Class<?> superClazz = clazz.getSuperclass();
+    for (Method m : superClazz.getMethods()) {
+      final int mods = m.getModifiers();
+      if (Modifier.isStatic(mods) || Modifier.isAbstract(mods) || Modifier.isFinal(mods) || m.isSynthetic()
+          || m.getName().equals("attributes")) {
         continue;
       }
-      Class<?> declaringClass = m.getDeclaringClass();
-      if (declaringClass != clazz && declaringClass != Object.class) {
-        System.err.println("method is not overridden by "+clazz.getName()+": " + m.toGenericString());
-        fail = true;
+      // The point of these checks is to ensure that methods that have a default
+      // impl through other methods are not overridden. This makes the number of
+      // methods to override to have a working impl minimal and prevents from some
+      // traps: for example, think about having getCoreCacheKey delegate to the
+      // filtered impl by default
+      final Method subM = clazz.getMethod(m.getName(), m.getParameterTypes());
+      if (subM.getDeclaringClass() == clazz
+          && m.getDeclaringClass() != Object.class
+          && m.getDeclaringClass() != subM.getDeclaringClass()) {
+        fail(clazz + " overrides " + m + " although it has a default impl");
       }
     }
-    assertFalse(clazz.getName()+" does not override some methods; see log above", fail);
   }
 
   public void testOverrideMethods() throws Exception {
Index: lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsReader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsReader.java	(révision 1464650)
+++ lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsReader.java	(copie de travail)
@@ -1030,11 +1030,7 @@
 
     @Override
     public int advance(int target) throws IOException {
-      if (doc == -1 && target == 0 && (liveDocs == null || liveDocs.get(0))) {
-        return (doc = 0);
-      } else {
-        return (doc = NO_MORE_DOCS);
-      }
+      return slowAdvance(target);
     }
 
     @Override
Index: lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.java	(révision 1464650)
+++ lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.java	(copie de travail)
@@ -605,12 +605,8 @@
     }
 
     @Override
-    public int advance(int target) {
-      if (!didNext && target == 0) {
-        return nextDoc();
-      } else {
-        return (doc = NO_MORE_DOCS);
-      }
+    public int advance(int target) throws IOException {
+      return slowAdvance(target);
     }
 
     public void reset(Bits liveDocs, int freq) {
@@ -664,12 +660,8 @@
     }
 
     @Override
-    public int advance(int target) {
-      if (!didNext && target == 0) {
-        return nextDoc();
-      } else {
-        return (doc = NO_MORE_DOCS);
-      }
+    public int advance(int target) throws IOException {
+      return slowAdvance(target);
     }
 
     public void reset(Bits liveDocs, int[] positions, int[] startOffsets, int[] endOffsets, int[] payloadLengths, byte[] payloadBytes) {
Index: lucene/core/src/java/org/apache/lucene/search/DocIdSetIterator.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/DocIdSetIterator.java	(révision 1464650)
+++ lucene/core/src/java/org/apache/lucene/search/DocIdSetIterator.java	(copie de travail)
@@ -93,6 +93,18 @@
    */
   public abstract int advance(int target) throws IOException;
 
+  /** Slow (linear) implementation of {@link #advance} relying on
+   *  {@link #nextDoc()} to advance beyond the target position. */
+  protected final int slowAdvance(int target) throws IOException {
+    assert docID() == NO_MORE_DOCS // can happen when the enum is not positioned yet
+        || docID() < target;
+    int doc;
+    do {
+      doc = nextDoc();
+    } while (doc < target);
+    return doc;
+  }
+
   /**
    * Returns the estimated cost of this {@link DocIdSetIterator}.
    * <p>
Index: lucene/core/src/java/org/apache/lucene/index/ParallelAtomicReader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/ParallelAtomicReader.java	(révision 1464650)
+++ lucene/core/src/java/org/apache/lucene/index/ParallelAtomicReader.java	(copie de travail)
@@ -214,12 +214,6 @@
   }
   
   @Override
-  public boolean hasDeletions() {
-    ensureOpen();
-    return hasDeletions;
-  }
-  
-  @Override
   public void document(int docID, StoredFieldVisitor visitor) throws IOException {
     ensureOpen();
     for (final AtomicReader reader: storedFieldsReaders) {
Index: lucene/core/src/java/org/apache/lucene/index/SegmentReader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/SegmentReader.java	(révision 1464650)
+++ lucene/core/src/java/org/apache/lucene/index/SegmentReader.java	(copie de travail)
@@ -114,12 +114,6 @@
   }
 
   @Override
-  public boolean hasDeletions() {
-    // Don't call ensureOpen() here (it could affect performance)
-    return liveDocs != null;
-  }
-
-  @Override
   public FieldInfos getFieldInfos() {
     ensureOpen();
     return core.fieldInfos;
Index: lucene/core/src/java/org/apache/lucene/index/FilterAtomicReader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/FilterAtomicReader.java	(révision 1464650)
+++ lucene/core/src/java/org/apache/lucene/index/FilterAtomicReader.java	(copie de travail)
@@ -17,15 +17,16 @@
  * limitations under the License.
  */
 
+import java.io.IOException;
+import java.util.Comparator;
+import java.util.Iterator;
+
+import org.apache.lucene.search.CachingWrapperFilter;
+import org.apache.lucene.search.FieldCache;
 import org.apache.lucene.util.AttributeSource;
 import org.apache.lucene.util.Bits;
 import org.apache.lucene.util.BytesRef;
-import org.apache.lucene.util.automaton.CompiledAutomaton;
 
-import java.io.IOException;
-import java.util.Comparator;
-import java.util.Iterator;
-
 /**  A <code>FilterAtomicReader</code> contains another AtomicReader, which it
  * uses as its basic source of data, possibly transforming the data along the
  * way or providing additional functionality. The class
@@ -34,6 +35,15 @@
  * contained index reader. Subclasses of <code>FilterAtomicReader</code> may
  * further override some of these methods and may also provide additional
  * methods and fields.
+ * <p><b>NOTE</b>: If you override {@link #getLiveDocs()}, you will likely need
+ * to override {@link #numDocs()} as well and vice-versa.
+ * <p><b>NOTE</b>: If this {@link FilterAtomicReader} does not change the
+ * content the contained reader, you could consider overriding
+ * {@link #getCoreCacheKey()} so that {@link FieldCache} and
+ * {@link CachingWrapperFilter} share the same entries for this atomic reader
+ * and the wrapped one. {@link #getCombinedCoreAndDeletesKey()} could be
+ * overridden as well if the {@link #getLiveDocs() live docs} are not changed
+ * either.
  */
 public class FilterAtomicReader extends AtomicReader {
 
@@ -67,8 +77,11 @@
     }
   }
 
-  /** Base class for filtering {@link Terms}
-   *  implementations. */
+  /** Base class for filtering {@link Terms} implementations.
+   * <p><b>NOTE</b>: If the order of terms and documents is not changed, and if
+   * these terms are going to be intersected with automata, you could consider
+   * overriding {@link #intersect} for better performance.
+   */
   public static class FilterTerms extends Terms {
     /** The underlying Terms instance. */
     protected final Terms in;
@@ -85,7 +98,7 @@
     public TermsEnum iterator(TermsEnum reuse) throws IOException {
       return in.iterator(reuse);
     }
-
+    
     @Override
     public Comparator<BytesRef> getComparator() {
       return in.getComparator();
@@ -110,11 +123,6 @@
     public int getDocCount() throws IOException {
       return in.getDocCount();
     }
-    
-    @Override
-    public TermsEnum intersect(CompiledAutomaton automaton, BytesRef bytes) throws java.io.IOException {
-      return in.intersect(automaton, bytes);
-    }
 
     @Override
     public boolean hasOffsets() {
@@ -144,8 +152,8 @@
     public FilterTermsEnum(TermsEnum in) { this.in = in; }
 
     @Override
-    public boolean seekExact(BytesRef text, boolean useCache) throws IOException {
-      return in.seekExact(text, useCache);
+    public AttributeSource attributes() {
+      return in.attributes();
     }
 
     @Override
@@ -197,21 +205,6 @@
     public Comparator<BytesRef> getComparator() {
       return in.getComparator();
     }
-
-    @Override
-    public void seekExact(BytesRef term, TermState state) throws IOException {
-      in.seekExact(term, state);
-    }
-
-    @Override
-    public TermState termState() throws IOException {
-      return in.termState();
-    }
-    
-    @Override
-    public AttributeSource attributes() {
-      return in.attributes();
-    }
   }
 
   /** Base class for filtering {@link DocsEnum} implementations. */
@@ -228,6 +221,11 @@
     }
 
     @Override
+    public AttributeSource attributes() {
+      return in.attributes();
+    }
+
+    @Override
     public int docID() {
       return in.docID();
     }
@@ -246,11 +244,6 @@
     public int advance(int target) throws IOException {
       return in.advance(target);
     }
-    
-    @Override
-    public AttributeSource attributes() {
-      return in.attributes();
-    }
 
     @Override
     public long cost() {
@@ -272,6 +265,11 @@
     }
 
     @Override
+    public AttributeSource attributes() {
+      return in.attributes();
+    }
+
+    @Override
     public int docID() {
       return in.docID();
     }
@@ -312,11 +310,6 @@
     }
     
     @Override
-    public AttributeSource attributes() {
-      return in.attributes();
-    }
-    
-    @Override
     public long cost() {
       return in.cost();
     }
@@ -373,12 +366,6 @@
   }
 
   @Override
-  public boolean hasDeletions() {
-    ensureOpen();
-    return in.hasDeletions();
-  }
-
-  @Override
   protected void doClose() throws IOException {
     in.close();
   }
@@ -389,25 +376,7 @@
     return in.fields();
   }
 
-  /** {@inheritDoc}
-   * <p>If the subclass of FilteredIndexReader modifies the
-   *  contents (but not liveDocs) of the index, you must override this
-   *  method to provide a different key. */
   @Override
-  public Object getCoreCacheKey() {
-    return in.getCoreCacheKey();
-  }
-
-  /** {@inheritDoc}
-   * <p>If the subclass of FilteredIndexReader modifies the
-   *  liveDocs, you must override this
-   *  method to provide a different key. */
-  @Override
-  public Object getCombinedCoreAndDeletesKey() {
-    return in.getCombinedCoreAndDeletesKey();
-  }
-
-  @Override
   public String toString() {
     final StringBuilder buffer = new StringBuilder("FilterAtomicReader(");
     buffer.append(in);
@@ -444,4 +413,5 @@
     ensureOpen();
     return in.getNormValues(field);
   }
+
 }
Index: lucene/core/src/java/org/apache/lucene/index/TermsEnum.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/TermsEnum.java	(révision 1464650)
+++ lucene/core/src/java/org/apache/lucene/index/TermsEnum.java	(copie de travail)
@@ -213,6 +213,7 @@
     return new TermState() {
       @Override
       public void copyFrom(TermState other) {
+        throw new UnsupportedOperationException();
       }
     };
   }
Index: lucene/core/src/java/org/apache/lucene/index/IndexReader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/IndexReader.java	(révision 1464650)
+++ lucene/core/src/java/org/apache/lucene/index/IndexReader.java	(copie de travail)
@@ -22,15 +22,14 @@
 import java.util.Collections;
 import java.util.LinkedHashSet;
 import java.util.List;
+import java.util.Set;
 import java.util.WeakHashMap;
-import java.util.Set;
 import java.util.concurrent.atomic.AtomicInteger;
 
-import org.apache.lucene.document.Document;
 import org.apache.lucene.document.DocumentStoredFieldVisitor;
-import org.apache.lucene.search.SearcherManager; // javadocs
 import org.apache.lucene.store.AlreadyClosedException;
 import org.apache.lucene.util.Bits;
+// javadocs
 
 /** IndexReader is an abstract class, providing an interface for accessing an
  index.  Search of an index is done entirely through this abstract interface,
@@ -361,8 +360,12 @@
     return visitor.getDocument();
   }
 
-  /** Returns true if any documents have been deleted */
-  public abstract boolean hasDeletions();
+  /** Returns true if any documents have been deleted. Implementers should
+   *  consider overriding this method if {@link #maxDoc()} or {@link #numDocs()}
+   *  are not constant-time operations. */
+  public boolean hasDeletions() {
+    return numDeletedDocs() > 0;
+  }
 
   /**
    * Closes files associated with this index.
Index: lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper.java	(révision 1464650)
+++ lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper.java	(copie de travail)
@@ -219,12 +219,6 @@
     ensureOpen();
     return MultiFields.getMergedFieldInfos(in);
   }
-  
-  @Override
-  public boolean hasDeletions() {
-    ensureOpen();
-    return liveDocs != null;
-  }
 
   @Override
   public Object getCoreCacheKey() {
Index: lucene/core/src/java/org/apache/lucene/index/BaseCompositeReader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/BaseCompositeReader.java	(révision 1464650)
+++ lucene/core/src/java/org/apache/lucene/index/BaseCompositeReader.java	(copie de travail)
@@ -51,7 +51,6 @@
   private final int[] starts;       // 1st docno for each reader
   private final int maxDoc;
   private final int numDocs;
-  private final boolean hasDeletions;
 
   /** List view solely for {@link #getSequentialSubReaders()},
    * for effectiveness the array is used internally. */
@@ -70,7 +69,6 @@
     this.subReadersList = Collections.unmodifiableList(Arrays.asList(subReaders));
     starts = new int[subReaders.length + 1];    // build starts array
     int maxDoc = 0, numDocs = 0;
-    boolean hasDeletions = false;
     for (int i = 0; i < subReaders.length; i++) {
       starts[i] = maxDoc;
       final IndexReader r = subReaders[i];
@@ -79,15 +77,11 @@
         throw new IllegalArgumentException("Too many documents, composite IndexReaders cannot exceed " + Integer.MAX_VALUE);
       }
       numDocs += r.numDocs();    // compute numDocs
-      if (r.hasDeletions()) {
-        hasDeletions = true;
-      }
       r.registerParentReader(this);
     }
     starts[subReaders.length] = maxDoc;
     this.maxDoc = maxDoc;
     this.numDocs = numDocs;
-    this.hasDeletions = hasDeletions;
   }
 
   @Override
@@ -117,12 +111,6 @@
   }
 
   @Override
-  public final boolean hasDeletions() {
-    // Don't call ensureOpen() here (it could affect performance)
-    return hasDeletions;
-  }
-
-  @Override
   public final int docFreq(Term term) throws IOException {
     ensureOpen();
     int total = 0;          // sum freqs in subreaders
Index: solr/core/src/test/org/apache/solr/search/TestDocSet.java
===================================================================
--- solr/core/src/test/org/apache/solr/search/TestDocSet.java	(révision 1464650)
+++ solr/core/src/test/org/apache/solr/search/TestDocSet.java	(copie de travail)
@@ -364,11 +364,6 @@
       }
 
       @Override
-      public boolean hasDeletions() {
-        return false;
-      }
-
-      @Override
       public FieldInfos getFieldInfos() {
         return new FieldInfos(new FieldInfo[0]);
       }
Index: solr/core/src/java/org/apache/solr/update/SolrIndexSplitter.java
===================================================================
--- solr/core/src/java/org/apache/solr/update/SolrIndexSplitter.java	(révision 1464650)
+++ solr/core/src/java/org/apache/solr/update/SolrIndexSplitter.java	(copie de travail)
@@ -184,11 +184,6 @@
     }
 
     @Override
-    public boolean hasDeletions() {
-      return (in.maxDoc() != numDocs);
-    }
-
-    @Override
     public Bits getLiveDocs() {
       return liveDocs;
     }
