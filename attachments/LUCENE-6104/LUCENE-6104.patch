Index: lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.java	(revision 1644266)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.java	(working copy)
@@ -854,7 +854,7 @@
   }
   
   @Override
-  public Iterable<? extends Accountable> getChildResources() {
+  public Iterable<Accountable> getChildResources() {
     List<Accountable> resources = new ArrayList<>();
     if (indexReader != null) {
       resources.add(Accountables.namedAccountable("term index", indexReader));
Index: lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexReader.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexReader.java	(revision 1644266)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexReader.java	(working copy)
@@ -262,7 +262,7 @@
     }
 
     @Override
-    public Iterable<? extends Accountable> getChildResources() {
+    public Iterable<Accountable> getChildResources() {
       List<Accountable> resources = new ArrayList<>();
       if (termOffsets != null) {
         resources.add(Accountables.namedAccountable("term lengths", termOffsets));
@@ -303,7 +303,7 @@
   }
 
   @Override
-  public Iterable<? extends Accountable> getChildResources() {
+  public Iterable<Accountable> getChildResources() {
     return Accountables.namedAccountables("field", fields);
   }
 
Index: lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexReader.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexReader.java	(revision 1644266)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexReader.java	(working copy)
@@ -165,7 +165,7 @@
     }
 
     @Override
-    public Iterable<? extends Accountable> getChildResources() {
+    public Iterable<Accountable> getChildResources() {
       if (fst == null) {
         return Collections.emptyList();
       } else {
@@ -208,7 +208,7 @@
   }
 
   @Override
-  public Iterable<? extends Accountable> getChildResources() {
+  public Iterable<Accountable> getChildResources() {
     return Accountables.namedAccountables("field", fields);
   }
 
Index: lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsReader.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsReader.java	(revision 1644266)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsReader.java	(working copy)
@@ -234,7 +234,7 @@
   }
   
   @Override
-  public Iterable<? extends Accountable> getChildResources() {
+  public Iterable<Accountable> getChildResources() {
     List<Accountable> resources = new ArrayList<>();
     resources.addAll(Accountables.namedAccountables("field", fields));
     resources.add(Accountables.namedAccountable("delegate", postingsReader));
Index: lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsFieldReader.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsFieldReader.java	(revision 1644266)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsFieldReader.java	(working copy)
@@ -174,7 +174,7 @@
   }
 
   @Override
-  public Iterable<? extends Accountable> getChildResources() {
+  public Iterable<Accountable> getChildResources() {
     if (index == null) {
       return Collections.emptyList();
     } else {
Index: lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.java	(revision 1644266)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.java	(working copy)
@@ -407,7 +407,7 @@
     }
 
     @Override
-    public Iterable<? extends Accountable> getChildResources() {
+    public Iterable<Accountable> getChildResources() {
       List<Accountable> resources = new ArrayList<>();
       resources.addAll(Accountables.namedAccountables("field", bloomsByFieldName));
       if (delegateFieldsProducer != null) {
Index: lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer.java	(revision 1644266)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer.java	(working copy)
@@ -259,7 +259,7 @@
   }
   
   @Override
-  public synchronized Iterable<? extends Accountable> getChildResources() {
+  public synchronized Iterable<Accountable> getChildResources() {
     List<Accountable> resources = new ArrayList<>();
     resources.addAll(Accountables.namedAccountables("numeric field", numericInstances));
     resources.addAll(Accountables.namedAccountables("binary field", binaryInstances));
@@ -661,7 +661,7 @@
     }
     
     @Override
-    public Iterable<? extends Accountable> getChildResources() {
+    public Iterable<Accountable> getChildResources() {
       List<Accountable> resources = new ArrayList<>();
       if (address != null) {
         resources.add(Accountables.namedAccountable("addresses", RamUsageEstimator.sizeOf(address)));
@@ -700,7 +700,7 @@
     }
 
     @Override
-    public Iterable<? extends Accountable> getChildResources() {
+    public Iterable<Accountable> getChildResources() {
       return docToOrd.getChildResources();
     }
     
@@ -724,7 +724,7 @@
     }
     
     @Override
-    public Iterable<? extends Accountable> getChildResources() {
+    public Iterable<Accountable> getChildResources() {
       List<Accountable> resources = new ArrayList<>();
       if (docToAddress != null) {
         resources.add(Accountables.namedAccountable("addresses", docToAddress));
@@ -753,7 +753,7 @@
     }
 
     @Override
-    public Iterable<? extends Accountable> getChildResources() {
+    public Iterable<Accountable> getChildResources() {
       List<Accountable> resources = new ArrayList<>();
       if (docToOrdAddress != null) {
         resources.add(Accountables.namedAccountable("addresses", docToOrdAddress));
Index: lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.java	(revision 1644266)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.java	(working copy)
@@ -162,7 +162,7 @@
     }
     
     @Override
-    public Iterable<? extends Accountable> getChildResources() {
+    public Iterable<Accountable> getChildResources() {
       return Accountables.namedAccountables("field", fields);
     }
 
Index: lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsReader.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsReader.java	(revision 1644266)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsReader.java	(working copy)
@@ -288,7 +288,7 @@
     }
 
     @Override
-    public Iterable<? extends Accountable> getChildResources() {
+    public Iterable<Accountable> getChildResources() {
       if (index == null) {
         return Collections.emptyList();
       } else {
@@ -865,7 +865,7 @@
   }
   
   @Override
-  public Iterable<? extends Accountable> getChildResources() {
+  public Iterable<Accountable> getChildResources() {
     List<Accountable> resources = new ArrayList<>();
     resources.addAll(Accountables.namedAccountables("field", fields));
     resources.add(Accountables.namedAccountable("delegate", postingsReader));
Index: lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader.java	(revision 1644266)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader.java	(working copy)
@@ -191,7 +191,7 @@
     }
 
     @Override
-    public Iterable<? extends Accountable> getChildResources() {
+    public Iterable<Accountable> getChildResources() {
       if (dict == null) {
         return Collections.emptyList();
       } else {
@@ -763,7 +763,7 @@
   }
   
   @Override
-  public Iterable<? extends Accountable> getChildResources() {
+  public Iterable<Accountable> getChildResources() {
     List<Accountable> resources = new ArrayList<>();
     resources.addAll(Accountables.namedAccountables("field", fields));
     resources.add(Accountables.namedAccountable("delegate", postingsReader));
Index: lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer.java	(revision 1644266)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer.java	(working copy)
@@ -296,7 +296,7 @@
   }
   
   @Override
-  public synchronized Iterable<? extends Accountable> getChildResources() {
+  public synchronized Iterable<Accountable> getChildResources() {
     List<Accountable> resources = new ArrayList<>();
     resources.addAll(Accountables.namedAccountables("numeric field", numericInfo));
     resources.addAll(Accountables.namedAccountables("pagedbytes field", pagedBytesInstances));
@@ -799,7 +799,7 @@
     }
     
     @Override
-    public Iterable<? extends Accountable> getChildResources() {
+    public Iterable<Accountable> getChildResources() {
       List<Accountable> resources = new ArrayList<>();
       if (addresses != null) {
         resources.add(Accountables.namedAccountable("addresses", addresses));
Index: lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.java	(revision 1644266)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.java	(working copy)
@@ -958,7 +958,7 @@
     }
     
     @Override
-    public Iterable<? extends Accountable> getChildResources() {
+    public Iterable<Accountable> getChildResources() {
       if (fst == null) {
         return Collections.emptyList();
       } else {
@@ -1033,7 +1033,7 @@
       }
 
       @Override
-      public Iterable<? extends Accountable> getChildResources() {
+      public Iterable<Accountable> getChildResources() {
         return Accountables.namedAccountables("field", fields);
       }
 
Index: lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.java	(revision 1644266)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.java	(working copy)
@@ -595,7 +595,7 @@
     }
 
     @Override
-    public Iterable<? extends Accountable> getChildResources() {
+    public Iterable<Accountable> getChildResources() {
       if (fst == null) {
         return Collections.emptyList();
       } else {
@@ -700,7 +700,7 @@
   }
 
   @Override
-  public synchronized Iterable<? extends Accountable> getChildResources() {
+  public synchronized Iterable<Accountable> getChildResources() {
     return Accountables.namedAccountables("field", termsCache);
   }
 
Index: lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextNormsFormat.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextNormsFormat.java	(revision 1644266)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextNormsFormat.java	(working copy)
@@ -82,7 +82,7 @@
     }
     
     @Override
-    public Iterable<? extends Accountable> getChildResources() {
+    public Iterable<Accountable> getChildResources() {
       return impl.getChildResources();
     }
 
Index: lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsReader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsReader.java	(revision 1644266)
+++ lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsReader.java	(working copy)
@@ -281,7 +281,7 @@
   }
 
   @Override
-  public Iterable<? extends Accountable> getChildResources() {
+  public Iterable<Accountable> getChildResources() {
     List<Accountable> resources = new ArrayList<>();
     resources.addAll(Accountables.namedAccountables("field", fields));
     resources.add(Accountables.namedAccountable("delegate", postingsReader));
Index: lucene/core/src/java/org/apache/lucene/codecs/blocktree/FieldReader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/blocktree/FieldReader.java	(revision 1644266)
+++ lucene/core/src/java/org/apache/lucene/codecs/blocktree/FieldReader.java	(working copy)
@@ -186,7 +186,7 @@
   }
 
   @Override
-  public Iterable<? extends Accountable> getChildResources() {
+  public Iterable<Accountable> getChildResources() {
     if (index == null) {
       return Collections.emptyList();
     } else {
Index: lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader.java	(revision 1644266)
+++ lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader.java	(working copy)
@@ -22,6 +22,7 @@
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Collections;
 import java.util.List;
 
 import org.apache.lucene.index.CorruptIndexException;
@@ -188,7 +189,7 @@
   }
 
   @Override
-  public Iterable<? extends Accountable> getChildResources() {
+  public Iterable<Accountable> getChildResources() {
     List<Accountable> resources = new ArrayList<>();
     
     long docBaseDeltaBytes = RamUsageEstimator.shallowSizeOf(docBasesDeltas);
@@ -203,7 +204,7 @@
     }
     resources.add(Accountables.namedAccountable("start pointer deltas", startPointerDeltaBytes));
     
-    return resources;
+    return Collections.unmodifiableList(resources);
   }
 
   @Override
Index: lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.java	(revision 1644266)
+++ lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.java	(working copy)
@@ -524,7 +524,7 @@
   }
   
   @Override
-  public Iterable<? extends Accountable> getChildResources() {
+  public Iterable<Accountable> getChildResources() {
     return Collections.singleton(Accountables.namedAccountable("stored field index", indexReader));
   }
 
Index: lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsReader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsReader.java	(revision 1644266)
+++ lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsReader.java	(working copy)
@@ -1074,7 +1074,7 @@
   }
   
   @Override
-  public Iterable<? extends Accountable> getChildResources() {
+  public Iterable<Accountable> getChildResources() {
     return Collections.singleton(Accountables.namedAccountable("term vector index", indexReader));
   }
   
Index: lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer.java	(revision 1644266)
+++ lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer.java	(working copy)
@@ -382,7 +382,7 @@
   }
   
   @Override
-  public synchronized Iterable<? extends Accountable> getChildResources() {
+  public synchronized Iterable<Accountable> getChildResources() {
     List<Accountable> resources = new ArrayList<>();
     resources.addAll(Accountables.namedAccountables("addresses field", addressInstances));
     resources.addAll(Accountables.namedAccountables("ord index field", ordIndexInstances));
@@ -872,7 +872,7 @@
     }
     
     @Override
-    public Iterable<? extends Accountable> getChildResources() {
+    public Iterable<Accountable> getChildResources() {
       List<Accountable> resources = new ArrayList<>();
       resources.add(Accountables.namedAccountable("term bytes", terms));
       resources.add(Accountables.namedAccountable("term addresses", termAddresses));
Index: lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsProducer.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsProducer.java	(revision 1644266)
+++ lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsProducer.java	(working copy)
@@ -18,7 +18,10 @@
  */
 
 import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Collections;
 import java.util.HashMap;
+import java.util.List;
 import java.util.Map;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicLong;
@@ -61,8 +64,7 @@
   private final IndexInput data;
   
   // ram instances we have already loaded
-  final Map<String,NumericDocValues> instances = new HashMap<>();
-  final Map<String,Accountable> instancesInfo = new HashMap<>();
+  final Map<String,Norms> instances = new HashMap<>();
   
   private final AtomicLong ramBytesUsed;
   private final AtomicInteger activeCount = new AtomicInteger();
@@ -76,7 +78,6 @@
     norms.putAll(original.norms);
     data = original.data.clone();
     instances.putAll(original.instances);
-    instancesInfo.putAll(original.instancesInfo);
     ramBytesUsed = new AtomicLong(original.ramBytesUsed.get());
     activeCount.set(original.activeCount.get());
     maxDoc = original.maxDoc;
@@ -168,15 +169,13 @@
 
   @Override
   public synchronized NumericDocValues getNorms(FieldInfo field) throws IOException {
-    NumericDocValues instance = instances.get(field.name);
+    Norms instance = instances.get(field.name);
     if (instance == null) {
-      LoadedNorms loaded = loadNorms(norms.get(field.name));
-      instance = loaded.norms;
+      instance = loadNorms(norms.get(field.name));
       if (!merging) {
         instances.put(field.name, instance);
         activeCount.incrementAndGet();
-        ramBytesUsed.addAndGet(loaded.ramBytesUsed);
-        instancesInfo.put(field.name, loaded.info);
+        ramBytesUsed.addAndGet(instance.ramBytesUsed());
       }
     }
     return instance;
@@ -188,8 +187,8 @@
   }
   
   @Override
-  public synchronized Iterable<? extends Accountable> getChildResources() {
-    return Accountables.namedAccountables("field", instancesInfo);
+  public synchronized Iterable<Accountable> getChildResources() {
+    return Accountables.namedAccountables("field", instances);
   }
   
   @Override
@@ -197,34 +196,47 @@
     CodecUtil.checksumEntireFile(data);
   }
 
-  private LoadedNorms loadNorms(NormsEntry entry) throws IOException {
-    LoadedNorms instance = new LoadedNorms();
+  private Norms loadNorms(NormsEntry entry) throws IOException {
     switch(entry.format) {
       case CONST_COMPRESSED: {
         final long v = entry.offset;
-        instance.info = Accountables.namedAccountable("constant", 8);
-        instance.ramBytesUsed = 8;
-        instance.norms = new NumericDocValues() {
+        return new Norms() {
           @Override
           public long get(int docID) {
             return v;
           }
+
+          @Override
+          public long ramBytesUsed() {
+            return 8;
+          }
+
+          @Override
+          public String toString() {
+            return "constant";
+          }
         };
-        break;
       }
       case UNCOMPRESSED: {
         data.seek(entry.offset);
         final byte bytes[] = new byte[entry.count];
         data.readBytes(bytes, 0, bytes.length);
-        instance.info = Accountables.namedAccountable("byte array", bytes.length);
-        instance.ramBytesUsed = RamUsageEstimator.sizeOf(bytes);
-        instance.norms = new NumericDocValues() {
+        return new Norms() {
           @Override
           public long get(int docID) {
             return bytes[docID];
           }
+
+          @Override
+          public long ramBytesUsed() {
+            return bytes.length;
+          }
+
+          @Override
+          public String toString() {
+            return "byte array";
+          }
         };
-        break;
       }
       case DELTA_COMPRESSED: {
         data.seek(entry.offset);
@@ -231,10 +243,27 @@
         int packedIntsVersion = data.readVInt();
         int blockSize = data.readVInt();
         final BlockPackedReader reader = new BlockPackedReader(data, packedIntsVersion, blockSize, entry.count, false);
-        instance.info = Accountables.namedAccountable("delta compressed", reader);
-        instance.ramBytesUsed = reader.ramBytesUsed();
-        instance.norms = reader;
-        break;
+        return new Norms() {
+          @Override
+          public long get(int docID) {
+            return reader.get(docID);
+          }
+
+          @Override
+          public long ramBytesUsed() {
+            return reader.ramBytesUsed();
+          }
+
+          @Override
+          public Iterable<Accountable> getChildResources() {
+            return Collections.singleton(reader);
+          }
+
+          @Override
+          public String toString() {
+            return "delta compressed";
+          }
+        };
       }
       case TABLE_COMPRESSED: {
         data.seek(entry.offset);
@@ -256,15 +285,27 @@
         }
 
         final PackedInts.Reader ordsReader = PackedInts.getReaderNoHeader(data, PackedInts.Format.byId(formatID), packedIntsVersion, entry.count, bitsPerValue);
-        instance.info = Accountables.namedAccountable("table compressed", ordsReader);
-        instance.ramBytesUsed = RamUsageEstimator.sizeOf(decode) + ordsReader.ramBytesUsed();
-        instance.norms = new NumericDocValues() {
+        return new Norms() {
           @Override
           public long get(int docID) {
             return decode[(int)ordsReader.get(docID)];
           }
+          
+          @Override
+          public long ramBytesUsed() {
+            return RamUsageEstimator.sizeOf(decode) + ordsReader.ramBytesUsed();
+          }
+
+          @Override
+          public Iterable<Accountable> getChildResources() {
+            return Collections.singleton(ordsReader);
+          }
+
+          @Override
+          public String toString() {
+            return "table compressed";
+          }
         };
-        break;
       }
       case INDIRECT: {
         data.seek(entry.offset);
@@ -272,12 +313,9 @@
         int packedIntsVersion = data.readVInt();
         int blockSize = data.readVInt();
         final MonotonicBlockPackedReader live = MonotonicBlockPackedReader.of(data, packedIntsVersion, blockSize, entry.count, false);
-        LoadedNorms nestedInstance = loadNorms(entry.nested);
-        instance.ramBytesUsed = live.ramBytesUsed() + nestedInstance.ramBytesUsed;
-        instance.info = Accountables.namedAccountable("indirect -> " + nestedInstance.info, instance.ramBytesUsed);
-        final NumericDocValues values = nestedInstance.norms;
+        final Norms nestedInstance = loadNorms(entry.nested);
         final int upperBound = entry.count-1;
-        instance.norms = new NumericDocValues() {
+        return new Norms() {
           @Override
           public long get(int docID) {
             int low = 0;
@@ -291,13 +329,30 @@
               } else if (doc > docID) {
                 high = mid - 1;
               } else {
-                return values.get(mid);
+                return nestedInstance.get(mid);
               }
             }
             return common;
           }
+
+          @Override
+          public long ramBytesUsed() {
+            return live.ramBytesUsed() + nestedInstance.ramBytesUsed();
+          }
+
+          @Override
+          public Iterable<Accountable> getChildResources() {
+            List<Accountable> children = new ArrayList<>();
+            children.add(Accountables.namedAccountable("keys", live));
+            children.add(Accountables.namedAccountable("values", nestedInstance));
+            return Collections.unmodifiableList(children);
+          }
+
+          @Override
+          public String toString() {
+            return "indirect";
+          }
         };
-        break;
       }
       case PATCHED_BITSET: {
         data.seek(entry.offset);
@@ -310,21 +365,35 @@
           int doc = (int) live.get(i);
           set.set(doc);
         }
-        LoadedNorms nestedInstance = loadNorms(entry.nested);
-        instance.ramBytesUsed = set.ramBytesUsed() + nestedInstance.ramBytesUsed;
-        instance.info = Accountables.namedAccountable("patched bitset -> " + nestedInstance.info, instance.ramBytesUsed);
-        final NumericDocValues values = nestedInstance.norms;
-        instance.norms = new NumericDocValues() {
+        Norms nestedInstance = loadNorms(entry.nested);
+        return new Norms() {
           @Override
           public long get(int docID) {
             if (set.get(docID)) {
-              return values.get(docID);
+              return nestedInstance.get(docID);
             } else {
               return common;
             }
           }
+          
+          @Override
+          public long ramBytesUsed() {
+            return set.ramBytesUsed() + nestedInstance.ramBytesUsed();
+          }
+
+          @Override
+          public Iterable<Accountable> getChildResources() {
+            List<Accountable> children = new ArrayList<>();
+            children.add(Accountables.namedAccountable("keys", set));
+            children.add(Accountables.namedAccountable("values", nestedInstance));
+            return Collections.unmodifiableList(children);
+          }
+
+          @Override
+          public String toString() {
+            return "patched bitset";
+          }
         };
-        break;
       }
       case PATCHED_TABLE: {
         data.seek(entry.offset);
@@ -344,11 +413,9 @@
         }
         
         final PackedInts.Reader ordsReader = PackedInts.getReaderNoHeader(data, PackedInts.Format.byId(formatID), packedIntsVersion, entry.count, bitsPerValue);
-        final LoadedNorms nestedInstance = loadNorms(entry.nested);
-        instance.ramBytesUsed = RamUsageEstimator.sizeOf(decode) + ordsReader.ramBytesUsed() + nestedInstance.ramBytesUsed;
-        instance.info = Accountables.namedAccountable("patched table -> " + nestedInstance.info, instance.ramBytesUsed);
-        final NumericDocValues values = nestedInstance.norms;
-        instance.norms = new NumericDocValues() {
+        final Norms nestedInstance = loadNorms(entry.nested);
+        
+        return new Norms() {
           @Override
           public long get(int docID) {
             int ord = (int)ordsReader.get(docID);
@@ -356,16 +423,32 @@
               // doing a try/catch here eliminates a seemingly unavoidable branch in hotspot...
               return decode[ord];
             } catch (IndexOutOfBoundsException e) {
-              return values.get(docID);
+              return nestedInstance.get(docID);
             }
           }
+
+          @Override
+          public long ramBytesUsed() {
+            return RamUsageEstimator.sizeOf(decode) + ordsReader.ramBytesUsed() + nestedInstance.ramBytesUsed();
+          }
+
+          @Override
+          public Iterable<Accountable> getChildResources() {
+            List<Accountable> children = new ArrayList<>();
+            children.add(Accountables.namedAccountable("common", ordsReader));
+            children.add(Accountables.namedAccountable("uncommon", nestedInstance));
+            return Collections.unmodifiableList(children);
+          }
+
+          @Override
+          public String toString() {
+            return "patched table";
+          }
         };
-        break;
       }
       default:
         throw new AssertionError();
     }
-    return instance;
   }
 
   @Override
@@ -380,10 +463,7 @@
     NormsEntry nested;
   }
   
-  static class LoadedNorms {
-    NumericDocValues norms;
-    long ramBytesUsed;
-    Accountable info;
+  static abstract class Norms extends NumericDocValues implements Accountable {
   }
 
   @Override
Index: lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat.java	(revision 1644266)
+++ lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat.java	(working copy)
@@ -330,7 +330,7 @@
     }
     
     @Override
-    public Iterable<? extends Accountable> getChildResources() {
+    public Iterable<Accountable> getChildResources() {
       return Accountables.namedAccountables("format", formats);
     }
 
Index: lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldPostingsFormat.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldPostingsFormat.java	(revision 1644266)
+++ lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldPostingsFormat.java	(working copy)
@@ -302,7 +302,7 @@
     }
     
     @Override
-    public Iterable<? extends Accountable> getChildResources() {
+    public Iterable<Accountable> getChildResources() {
       return Accountables.namedAccountables("format", formats);
     }
 
Index: lucene/core/src/java/org/apache/lucene/index/MultiDocValues.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/MultiDocValues.java	(revision 1644266)
+++ lucene/core/src/java/org/apache/lucene/index/MultiDocValues.java	(working copy)
@@ -638,7 +638,7 @@
     }
 
     @Override
-    public Iterable<? extends Accountable> getChildResources() {
+    public Iterable<Accountable> getChildResources() {
       List<Accountable> resources = new ArrayList<>();
       resources.add(Accountables.namedAccountable("global ord deltas", globalOrdDeltas));
       resources.add(Accountables.namedAccountable("first segments", firstSegments));
Index: lucene/core/src/java/org/apache/lucene/index/SegmentDocValuesProducer.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/SegmentDocValuesProducer.java	(revision 1644266)
+++ lucene/core/src/java/org/apache/lucene/index/SegmentDocValuesProducer.java	(working copy)
@@ -159,7 +159,7 @@
   }
 
   @Override
-  public Iterable<? extends Accountable> getChildResources() {
+  public Iterable<Accountable> getChildResources() {
     List<Accountable> resources = new ArrayList<>();
     for (Accountable producer : dvProducers) {
       resources.add(Accountables.namedAccountable("delegate", producer));
Index: lucene/core/src/java/org/apache/lucene/index/SegmentReader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/SegmentReader.java	(revision 1644266)
+++ lucene/core/src/java/org/apache/lucene/index/SegmentReader.java	(working copy)
@@ -500,7 +500,7 @@
   }
   
   @Override
-  public Iterable<? extends Accountable> getChildResources() {
+  public Iterable<Accountable> getChildResources() {
     ensureOpen();
     List<Accountable> resources = new ArrayList<>();
     resources.add(Accountables.namedAccountable("postings", core.fields));
Index: lucene/core/src/java/org/apache/lucene/search/CachingWrapperFilter.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/CachingWrapperFilter.java	(revision 1644266)
+++ lucene/core/src/java/org/apache/lucene/search/CachingWrapperFilter.java	(working copy)
@@ -159,7 +159,7 @@
   }
 
   @Override
-  public Iterable<? extends Accountable> getChildResources() {
+  public Iterable<Accountable> getChildResources() {
     // Sync to pull the current set of values:
     synchronized (cache) {
       // no need to clone, Accountable#namedAccountables already copies the data
Index: lucene/core/src/java/org/apache/lucene/search/FilteredDocIdSet.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/FilteredDocIdSet.java	(revision 1644266)
+++ lucene/core/src/java/org/apache/lucene/search/FilteredDocIdSet.java	(working copy)
@@ -70,7 +70,7 @@
   }
   
   @Override
-  public Iterable<? extends Accountable> getChildResources() {
+  public Iterable<Accountable> getChildResources() {
     return _innerSet.getChildResources();
   }
 
Index: lucene/core/src/java/org/apache/lucene/search/LRUFilterCache.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/LRUFilterCache.java	(revision 1644266)
+++ lucene/core/src/java/org/apache/lucene/search/LRUFilterCache.java	(working copy)
@@ -225,7 +225,7 @@
   }
 
   @Override
-  public Iterable<? extends Accountable> getChildResources() {
+  public Iterable<Accountable> getChildResources() {
     synchronized (this) {
       return Accountables.namedAccountables("segment", cache);
     }
Index: lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory.java	(revision 1644266)
+++ lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory.java	(working copy)
@@ -260,7 +260,7 @@
   }
   
   @Override
-  public Iterable<? extends Accountable> getChildResources() {
+  public Iterable<Accountable> getChildResources() {
     return Collections.singleton(Accountables.namedAccountable("cache", cache));
   }
 }
Index: lucene/core/src/java/org/apache/lucene/store/RAMDirectory.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/store/RAMDirectory.java	(revision 1644266)
+++ lucene/core/src/java/org/apache/lucene/store/RAMDirectory.java	(working copy)
@@ -143,7 +143,7 @@
   }
   
   @Override
-  public Iterable<? extends Accountable> getChildResources() {
+  public Iterable<Accountable> getChildResources() {
     return Accountables.namedAccountables("file", fileMap);
   }
   
Index: lucene/core/src/java/org/apache/lucene/store/RAMOutputStream.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/store/RAMOutputStream.java	(revision 1644266)
+++ lucene/core/src/java/org/apache/lucene/store/RAMOutputStream.java	(working copy)
@@ -193,7 +193,7 @@
   }
   
   @Override
-  public Iterable<? extends Accountable> getChildResources() {
+  public Iterable<Accountable> getChildResources() {
     return Collections.singleton(Accountables.namedAccountable("file", file));
   }
 
Index: lucene/core/src/java/org/apache/lucene/util/Accountable.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/Accountable.java	(revision 1644266)
+++ lucene/core/src/java/org/apache/lucene/util/Accountable.java	(working copy)
@@ -36,7 +36,7 @@
    * The result should be a point-in-time snapshot (to avoid race conditions).
    * @see Accountables
    */
-  default Iterable<? extends Accountable> getChildResources() {
+  default Iterable<Accountable> getChildResources() {
     return Collections.emptyList();
   }
 
Index: lucene/core/src/java/org/apache/lucene/util/Accountables.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/Accountables.java	(revision 1644266)
+++ lucene/core/src/java/org/apache/lucene/util/Accountables.java	(working copy)
@@ -128,8 +128,8 @@
       }
 
       @Override
-      public Iterable<? extends Accountable> getChildResources() {
-        return children;
+      public Iterable<Accountable> getChildResources() {
+        return (Iterable<Accountable>) children;
       }
 
       @Override
Index: lucene/core/src/java/org/apache/lucene/util/fst/FST.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/fst/FST.java	(revision 1644266)
+++ lucene/core/src/java/org/apache/lucene/util/fst/FST.java	(working copy)
@@ -448,7 +448,7 @@
   }
 
   @Override
-  public Iterable<? extends Accountable> getChildResources() {
+  public Iterable<Accountable> getChildResources() {
     List<Accountable> resources = new ArrayList<>();
     if (packed) {
       resources.add(Accountables.namedAccountable("node ref to address", nodeRefToAddress));
Index: lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CachedOrdinalsReader.java
===================================================================
--- lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CachedOrdinalsReader.java	(revision 1644266)
+++ lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CachedOrdinalsReader.java	(working copy)
@@ -161,7 +161,7 @@
   }
   
   @Override
-  public synchronized Iterable<? extends Accountable> getChildResources() {
+  public synchronized Iterable<Accountable> getChildResources() {
     return Accountables.namedAccountables("segment", ordsCache);
   }
 }
Index: lucene/join/src/java/org/apache/lucene/search/join/BitDocIdSetCachingWrapperFilter.java
===================================================================
--- lucene/join/src/java/org/apache/lucene/search/join/BitDocIdSetCachingWrapperFilter.java	(revision 1644266)
+++ lucene/join/src/java/org/apache/lucene/search/join/BitDocIdSetCachingWrapperFilter.java	(working copy)
@@ -90,7 +90,7 @@
   }
 
   @Override
-  public Iterable<? extends Accountable> getChildResources() {
+  public Iterable<Accountable> getChildResources() {
     return filter.getChildResources();
   }
 
Index: lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.java
===================================================================
--- lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.java	(revision 1644266)
+++ lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.java	(working copy)
@@ -603,7 +603,7 @@
     }
     
     @Override
-    public Iterable<? extends Accountable> getChildResources() {
+    public Iterable<Accountable> getChildResources() {
       List<Accountable> resources = new ArrayList<>();
       resources.add(Accountables.namedAccountable("term bytes", bytes));
       resources.add(Accountables.namedAccountable("ord -> term", termOrdToBytesOffset));
@@ -746,7 +746,7 @@
     }
 
     @Override
-    public Iterable<? extends Accountable> getChildResources() {
+    public Iterable<Accountable> getChildResources() {
       List<Accountable> resources = new ArrayList<>();
       resources.add(Accountables.namedAccountable("term bytes", bytes));
       resources.add(Accountables.namedAccountable("addresses", docToOffset));
Index: lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsReader.java
===================================================================
--- lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsReader.java	(revision 1644266)
+++ lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsReader.java	(working copy)
@@ -232,7 +232,7 @@
   }
   
   @Override
-  public Iterable<? extends Accountable> getChildResources() {
+  public Iterable<Accountable> getChildResources() {
     List<Accountable> resources = new ArrayList<>();
     resources.addAll(Accountables.namedAccountables("field", fields));
     resources.add(Accountables.namedAccountable("delegate", postingsReader));
Index: lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionFieldReader.java
===================================================================
--- lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionFieldReader.java	(revision 1644266)
+++ lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionFieldReader.java	(working copy)
@@ -163,7 +163,7 @@
   }
   
   @Override
-  public Iterable<? extends Accountable> getChildResources() {
+  public Iterable<Accountable> getChildResources() {
     if (index == null) {
       return Collections.emptyList();
     } else {
Index: lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester.java
===================================================================
--- lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester.java	(revision 1644266)
+++ lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester.java	(working copy)
@@ -730,7 +730,7 @@
   }
 
   @Override
-  public Iterable<? extends Accountable> getChildResources() {
+  public Iterable<Accountable> getChildResources() {
     List<Accountable> resources = new ArrayList<>();
     try {
       if (searcherMgr != null) {
Index: lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester.java
===================================================================
--- lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester.java	(revision 1644266)
+++ lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester.java	(working copy)
@@ -262,7 +262,7 @@
   }
 
   @Override
-  public Iterable<? extends Accountable> getChildResources() {
+  public Iterable<Accountable> getChildResources() {
     if (fst == null) {
       return Collections.emptyList();
     } else {
Index: lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester.java
===================================================================
--- lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester.java	(revision 1644266)
+++ lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester.java	(working copy)
@@ -213,7 +213,7 @@
   }
 
   @Override
-  public Iterable<? extends Accountable> getChildResources() {
+  public Iterable<Accountable> getChildResources() {
     if (fst == null) {
       return Collections.emptyList();
     } else {
Index: lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionLookup.java
===================================================================
--- lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionLookup.java	(revision 1644266)
+++ lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionLookup.java	(working copy)
@@ -315,7 +315,7 @@
   }
 
   @Override
-  public Iterable<? extends Accountable> getChildResources() {
+  public Iterable<Accountable> getChildResources() {
     List<Accountable> resources = new ArrayList<>();
     if (normalCompletion != null) {
       resources.add(Accountables.namedAccountable("fst", normalCompletion.getFST()));
Index: lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup.java
===================================================================
--- lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup.java	(revision 1644266)
+++ lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup.java	(working copy)
@@ -301,7 +301,7 @@
   }
   
   @Override
-  public Iterable<? extends Accountable> getChildResources() {
+  public Iterable<Accountable> getChildResources() {
     if (fst == null) {
       return Collections.emptyList();
     } else {
Index: lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingDocValuesFormat.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingDocValuesFormat.java	(revision 1644266)
+++ lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingDocValuesFormat.java	(working copy)
@@ -290,8 +290,8 @@
     }
 
     @Override
-    public Iterable<? extends Accountable> getChildResources() {
-      Iterable<? extends Accountable> res = in.getChildResources();
+    public Iterable<Accountable> getChildResources() {
+      Iterable<Accountable> res = in.getChildResources();
       TestUtil.checkIterator(res.iterator());
       return res;
     }
Index: lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingNormsFormat.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingNormsFormat.java	(revision 1644266)
+++ lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingNormsFormat.java	(working copy)
@@ -112,8 +112,8 @@
     }
     
     @Override
-    public Iterable<? extends Accountable> getChildResources() {
-      Iterable<? extends Accountable> res = in.getChildResources();
+    public Iterable<Accountable> getChildResources() {
+      Iterable<Accountable> res = in.getChildResources();
       TestUtil.checkIterator(res.iterator());
       return res;
     }
Index: lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPostingsFormat.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPostingsFormat.java	(revision 1644266)
+++ lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPostingsFormat.java	(working copy)
@@ -100,8 +100,8 @@
     }
     
     @Override
-    public Iterable<? extends Accountable> getChildResources() {
-      Iterable<? extends Accountable> res = in.getChildResources();
+    public Iterable<Accountable> getChildResources() {
+      Iterable<Accountable> res = in.getChildResources();
       TestUtil.checkIterator(res.iterator());
       return res;
     }
Index: lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingStoredFieldsFormat.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingStoredFieldsFormat.java	(revision 1644266)
+++ lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingStoredFieldsFormat.java	(working copy)
@@ -85,8 +85,8 @@
     }
 
     @Override
-    public Iterable<? extends Accountable> getChildResources() {
-      Iterable<? extends Accountable> res = in.getChildResources();
+    public Iterable<Accountable> getChildResources() {
+      Iterable<Accountable> res = in.getChildResources();
       TestUtil.checkIterator(res.iterator());
       return res;
     }
Index: lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingTermVectorsFormat.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingTermVectorsFormat.java	(revision 1644266)
+++ lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingTermVectorsFormat.java	(working copy)
@@ -84,8 +84,8 @@
     }
     
     @Override
-    public Iterable<? extends Accountable> getChildResources() {
-      Iterable<? extends Accountable> res = in.getChildResources();
+    public Iterable<Accountable> getChildResources() {
+      Iterable<Accountable> res = in.getChildResources();
       TestUtil.checkIterator(res.iterator());
       return res;
     }
Index: lucene/test-framework/src/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat.java	(revision 1644266)
+++ lucene/test-framework/src/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat.java	(working copy)
@@ -98,7 +98,7 @@
     }
     
     @Override
-    public Iterable<? extends Accountable> getChildResources() {
+    public Iterable<Accountable> getChildResources() {
       return Accountables.namedAccountables("field", fieldToTerms);
     }
 
Index: lucene/test-framework/src/java/org/apache/lucene/util/BaseBitSetTestCase.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/util/BaseBitSetTestCase.java	(revision 1644266)
+++ lucene/test-framework/src/java/org/apache/lucene/util/BaseBitSetTestCase.java	(working copy)
@@ -241,7 +241,7 @@
     }
 
     @Override
-    public Iterable<? extends Accountable> getChildResources() {
+    public Iterable<Accountable> getChildResources() {
       return Collections.emptyList();
     }
 
Index: solr/core/src/java/org/apache/solr/handler/component/SuggestComponent.java
===================================================================
--- solr/core/src/java/org/apache/solr/handler/component/SuggestComponent.java	(revision 1644266)
+++ solr/core/src/java/org/apache/solr/handler/component/SuggestComponent.java	(working copy)
@@ -342,7 +342,7 @@
   }
   
   @Override
-  public Iterable<? extends Accountable> getChildResources() {
+  public Iterable<Accountable> getChildResources() {
     return Accountables.namedAccountables("field", suggesters);
   }
   
Index: solr/core/src/java/org/apache/solr/spelling/suggest/SolrSuggester.java
===================================================================
--- solr/core/src/java/org/apache/solr/spelling/suggest/SolrSuggester.java	(revision 1644266)
+++ solr/core/src/java/org/apache/solr/spelling/suggest/SolrSuggester.java	(working copy)
@@ -213,7 +213,7 @@
   }
   
   @Override
-  public Iterable<? extends Accountable> getChildResources() {
+  public Iterable<Accountable> getChildResources() {
     return lookup.getChildResources();
   }
   
