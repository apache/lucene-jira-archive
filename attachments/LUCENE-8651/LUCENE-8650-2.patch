From f26e978fa7c766e92d5f575de587f1d197427209 Mon Sep 17 00:00:00 2001
From: Dan Meehl <dmeehl@kmwllc.com>
Date: Fri, 18 Jan 2019 16:35:28 -0500
Subject: [PATCH] Patch 2: Integration tests

---
 .../lucene/analysis/core/KeywordTokenStream.java   | 79 ++++++++++++++++++++++
 .../conf/schema-concat-token-stream.xml            | 40 +++++++++++
 .../solr/analysis/ConcatTokenFilterFactory.java    | 47 +++++++++++++
 .../TestConcatenatingTokenStreamIntegration.java   | 51 ++++++++++++++
 4 files changed, 217 insertions(+)
 create mode 100644 lucene/analysis/common/src/java/org/apache/lucene/analysis/core/KeywordTokenStream.java
 create mode 100644 solr/core/src/test-files/solr/collection1/conf/schema-concat-token-stream.xml
 create mode 100644 solr/core/src/test/org/apache/solr/analysis/ConcatTokenFilterFactory.java
 create mode 100644 solr/core/src/test/org/apache/solr/analysis/TestConcatenatingTokenStreamIntegration.java

diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/core/KeywordTokenStream.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/core/KeywordTokenStream.java
new file mode 100644
index 0000000..d81a2df
--- /dev/null
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/core/KeywordTokenStream.java
@@ -0,0 +1,79 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.lucene.analysis.core;
+
+
+import java.io.IOException;
+import org.apache.lucene.analysis.TokenStream;
+import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
+import org.apache.lucene.analysis.tokenattributes.OffsetAttribute;
+import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute;
+import org.apache.lucene.util.AttributeFactory;
+
+/**
+ * Emits the entire input as a single token.
+ */
+public final class KeywordTokenStream extends TokenStream {
+  private int finalOffset;
+  private int finalPosInc;
+
+  private final String value;
+  private boolean used = true;
+  private final CharTermAttribute termAttribute = addAttribute(CharTermAttribute.class);
+  private final OffsetAttribute offsetAttribute = addAttribute(OffsetAttribute.class);
+  private final PositionIncrementAttribute posIncrAttribute = addAttribute(PositionIncrementAttribute.class);
+
+  public KeywordTokenStream(String value) {
+    this(TokenStream.DEFAULT_TOKEN_ATTRIBUTE_FACTORY, value);
+  }
+
+  public KeywordTokenStream(AttributeFactory attributeFactory, String value) {
+    this(attributeFactory, value, 1, value.length());
+  }
+
+  public KeywordTokenStream(AttributeFactory attributeFactory, String value, int finalPosInc, int finalOffset) {
+    super(attributeFactory);
+    this.value = value;
+    this.finalOffset = finalOffset;
+    this.finalPosInc = finalPosInc;
+  }
+
+  @Override
+  public void reset() {
+    used = false;
+  }
+
+  @Override
+  public boolean incrementToken() {
+    if (used) {
+      return false;
+    }
+    clearAttributes();
+    termAttribute.append(value);
+    offsetAttribute.setOffset(0, finalOffset);
+//    posIncrAttribute.setPositionIncrement(finalPosInc);
+    used = true;
+    return true;
+  }
+
+  @Override
+  public void end() throws IOException {
+    super.end();
+    offsetAttribute.setOffset(0, finalOffset);
+    posIncrAttribute.setPositionIncrement(finalPosInc);
+  }
+}
diff --git a/solr/core/src/test-files/solr/collection1/conf/schema-concat-token-stream.xml b/solr/core/src/test-files/solr/collection1/conf/schema-concat-token-stream.xml
new file mode 100644
index 0000000..1035917
--- /dev/null
+++ b/solr/core/src/test-files/solr/collection1/conf/schema-concat-token-stream.xml
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file
+  distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under
+  the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may
+  obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to
+  in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
+  ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under
+  the License. -->
+
+<schema name="default" version="1.5">
+
+  <!-- If you remove this field, you must _also_ disable the update log in solrconfig.xml or Solr won't start. _version_
+    and update log are required for SolrCloud -->
+  <field name="_version_" type="long" indexed="true" stored="true" />
+  <field name="id" type="string" indexed="true" stored="true" required="true" multiValued="false" />
+  <field name="text" type="text_general" indexed="true" stored="true" multiValued="true" />
+  <field name="content" type="text_general" indexed="true" stored="true" multiValued="true" />
+  <copyField source="text" dest="content" />
+
+  <!-- ======================= -->
+  <!-- Field Type Declarations -->
+  <!-- ======================= -->
+  <!-- The StrField type is not analyzed, but indexed/stored verbatim. It supports doc values but in that case the field
+    needs to be single-valued and either required or have a default value. -->
+  <fieldType name="string" class="solr.StrField" sortMissingLast="true" />
+
+  <fieldType name="text_general" class="solr.TextField" positionIncrementGap="100">
+    <analyzer type="index">
+      <tokenizer class="solr.StandardTokenizerFactory" />
+      <filter class="solr.LowerCaseFilterFactory" />
+      <filter class="org.apache.solr.analysis.ConcatTokenFilterFactory" />
+    </analyzer>
+    <analyzer type="query">
+      <tokenizer class="solr.StandardTokenizerFactory" />
+      <filter class="solr.LowerCaseFilterFactory" />
+    </analyzer>
+  </fieldType>
+
+  <fieldType name="long" class="solr.TrieLongField" precisionStep="8" positionIncrementGap="0" />
+</schema>
diff --git a/solr/core/src/test/org/apache/solr/analysis/ConcatTokenFilterFactory.java b/solr/core/src/test/org/apache/solr/analysis/ConcatTokenFilterFactory.java
new file mode 100644
index 0000000..139f4d1
--- /dev/null
+++ b/solr/core/src/test/org/apache/solr/analysis/ConcatTokenFilterFactory.java
@@ -0,0 +1,47 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.solr.analysis;
+
+import java.util.Map;
+import org.apache.lucene.analysis.TokenStream;
+import org.apache.lucene.analysis.core.KeywordTokenStream;
+import org.apache.lucene.analysis.miscellaneous.ConcatenatingTokenStream;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
+
+
+/**
+ * Constructs a filter factory to test ConcatenatingTokenStream
+ */
+public class ConcatTokenFilterFactory extends TokenFilterFactory {
+
+  public ConcatTokenFilterFactory(Map<String, String> args) {
+    super(args);
+  }
+
+  @Override
+  public TokenStream create(TokenStream input) {
+    KeywordTokenStream endTokenStream = new KeywordTokenStream(input.getAttributeFactory(), "test");
+
+    // IllegalArgumentException: startOffset must be non-negative, and endOffset must be >= startOffset, and offsets must not go backwards
+    //TokenStream stream = new ConcatenatingTokenStream(input);
+
+    // content from input is not searchable
+    TokenStream stream = new ConcatenatingTokenStream(input, endTokenStream);
+
+    return stream;
+  }
+}
diff --git a/solr/core/src/test/org/apache/solr/analysis/TestConcatenatingTokenStreamIntegration.java b/solr/core/src/test/org/apache/solr/analysis/TestConcatenatingTokenStreamIntegration.java
new file mode 100644
index 0000000..17350d7
--- /dev/null
+++ b/solr/core/src/test/org/apache/solr/analysis/TestConcatenatingTokenStreamIntegration.java
@@ -0,0 +1,51 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.solr.analysis;
+
+import org.apache.solr.SolrTestCaseJ4;
+import org.apache.solr.request.SolrQueryRequest;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+public class TestConcatenatingTokenStreamIntegration extends SolrTestCaseJ4 {
+  private static final boolean DEBUG = true;
+
+
+  @BeforeClass
+  public static void beforeTests() throws Exception {
+    initCore("solrconfig-minimal.xml", "schema-concat-token-stream.xml");
+  }
+
+  @Test
+  public void test() throws Exception {
+    assertU(adoc("id", "1", "text", "All work and no play makes Jack a dull boy", "content", "abc 123"));
+    assertU(commit());
+
+    SolrQueryRequest req = req("q", "content:play");
+
+    if (DEBUG) {
+      String response = h.query(req);
+      System.out.println(response);
+      System.out.println("INDEX:");
+      System.out.println(h.query(req("q", "*:*")));
+    } else {
+      assertQ(req,
+          "/response/result[count(doc) = 1]",
+          "/response/result/doc/str[@name='id'][text()='1']");
+    }
+  }
+}
-- 
2.7.4

