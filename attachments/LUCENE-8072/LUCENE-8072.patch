diff --git a/lucene/core/src/java/org/apache/lucene/search/similarities/AxiomaticF1EXP.java b/lucene/core/src/java/org/apache/lucene/search/similarities/AxiomaticF1EXP.java
index 0619b4e..bdf1a8f 100644
--- a/lucene/core/src/java/org/apache/lucene/search/similarities/AxiomaticF1EXP.java
+++ b/lucene/core/src/java/org/apache/lucene/search/similarities/AxiomaticF1EXP.java
@@ -58,7 +58,7 @@ public class AxiomaticF1EXP extends Axiomatic {
   @Override
   protected double tf(BasicStats stats, double freq, double docLen) {
     if (freq <= 0.0) return 0.0;
-    return 1 + Math.log(1 + Math.log(freq));
+    return 1 + Math.log1p(Math.log(freq));
   }
 
   /**
diff --git a/lucene/core/src/java/org/apache/lucene/search/similarities/AxiomaticF1LOG.java b/lucene/core/src/java/org/apache/lucene/search/similarities/AxiomaticF1LOG.java
index f7a02da..d803d9c 100644
--- a/lucene/core/src/java/org/apache/lucene/search/similarities/AxiomaticF1LOG.java
+++ b/lucene/core/src/java/org/apache/lucene/search/similarities/AxiomaticF1LOG.java
@@ -51,7 +51,7 @@ public class AxiomaticF1LOG extends Axiomatic {
   @Override
   protected double tf(BasicStats stats, double freq, double docLen) {
     if (freq <= 0.0) return 0.0;
-    return 1 + Math.log(1 + Math.log(freq));
+    return 1 + Math.log1p(Math.log(freq));
   }
 
   /**
@@ -75,7 +75,10 @@ public class AxiomaticF1LOG extends Axiomatic {
    */
   @Override
   protected double idf(BasicStats stats, double freq, double docLen) {
-    return Math.log((stats.getNumberOfDocuments() + 1.0) / stats.getDocFreq());
+    long N = stats.getNumberOfDocuments();
+    long n = stats.getDocFreq();
+    // (N+1)/n = 1 + (N-n+1)/n
+    return Math.log1p((N - n + 1.0) / n);
   }
 
   /**
diff --git a/lucene/core/src/java/org/apache/lucene/search/similarities/AxiomaticF2LOG.java b/lucene/core/src/java/org/apache/lucene/search/similarities/AxiomaticF2LOG.java
index 2fc5e11..e3b8906 100644
--- a/lucene/core/src/java/org/apache/lucene/search/similarities/AxiomaticF2LOG.java
+++ b/lucene/core/src/java/org/apache/lucene/search/similarities/AxiomaticF2LOG.java
@@ -73,7 +73,10 @@ public class AxiomaticF2LOG extends Axiomatic {
    */
   @Override
   protected double idf(BasicStats stats, double freq, double docLen) {
-    return Math.log((stats.getNumberOfDocuments() + 1.0) / stats.getDocFreq());
+    long N = stats.getNumberOfDocuments();
+    long n = stats.getDocFreq();
+    // (N + 1) / n = 1 + (N - n + 1) / n
+    return Math.log1p((N - n + 1.0) / n);
   }
 
   /**
diff --git a/lucene/core/src/java/org/apache/lucene/search/similarities/AxiomaticF3LOG.java b/lucene/core/src/java/org/apache/lucene/search/similarities/AxiomaticF3LOG.java
index 22a50b1..ca60586 100644
--- a/lucene/core/src/java/org/apache/lucene/search/similarities/AxiomaticF3LOG.java
+++ b/lucene/core/src/java/org/apache/lucene/search/similarities/AxiomaticF3LOG.java
@@ -46,7 +46,7 @@ public class AxiomaticF3LOG extends Axiomatic {
   @Override
   protected double tf(BasicStats stats, double freq, double docLen) {
     if (freq <= 0.0) return 0.0;
-    return 1 + Math.log(1 + Math.log(freq));
+    return 1 + Math.log1p(Math.log(freq));
   }
 
   /**
@@ -70,7 +70,10 @@ public class AxiomaticF3LOG extends Axiomatic {
    */
   @Override
   protected double idf(BasicStats stats, double freq, double docLen) {
-    return Math.log((stats.getNumberOfDocuments() + 1.0) / stats.getDocFreq());
+    long N = stats.getNumberOfDocuments();
+    long n = stats.getDocFreq();
+    // (N + 1) / n = 1 + (N - n + 1) / n
+    return Math.log1p((N - n + 1.0) / n);
   }
 
   /**
diff --git a/lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity.java b/lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity.java
index 9810d3d..861dacb 100644
--- a/lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity.java
+++ b/lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity.java
@@ -70,7 +70,7 @@ public class BM25Similarity extends Similarity {
   
   /** Implemented as <code>log(1 + (docCount - docFreq + 0.5)/(docFreq + 0.5))</code>. */
   protected float idf(long docFreq, long docCount) {
-    return (float) Math.log(1 + (docCount - docFreq + 0.5D)/(docFreq + 0.5D));
+    return (float) Math.log1p((docCount - docFreq + 0.5D)/(docFreq + 0.5D));
   }
   
   /** The default implementation returns <code>1</code> */
@@ -175,6 +175,10 @@ public class BM25Similarity extends Similarity {
     return Explanation.match((float) idf, "idf, sum of:", details);
   }
 
+  private double norm(double k1, double b, double dl, double avgdl) {
+    return k1 * ((1 - b) + b * dl / avgdl);
+  }
+
   @Override
   public final SimWeight computeWeight(float boost, CollectionStatistics collectionStats, TermStatistics... termStats) {
     Explanation idf = termStats.length == 1 ? idfExplain(collectionStats, termStats[0]) : idfExplain(collectionStats, termStats);
@@ -182,7 +186,7 @@ public class BM25Similarity extends Similarity {
 
     float[] cache = new float[256];
     for (int i = 0; i < cache.length; i++) {
-      cache[i] = k1 * ((1 - b) + b * LENGTH_TABLE[i] / avgdl);
+      cache[i] = (float) norm(k1, b, LENGTH_TABLE[i], avgdl);
     }
     return new BM25Stats(collectionStats.field(), boost, k1, idf, avgdl, cache);
   }
@@ -255,7 +259,7 @@ public class BM25Similarity extends Similarity {
           subs.add(Explanation.match(doclen, "dl, length of field"));
         }
         subs.add(Explanation.match(stats.avgdl, "avgdl, average length of field"));
-        float normValue = k1 * ((1 - b) + b * doclen / stats.avgdl);
+        float normValue = (float) norm(k1, b, doclen, stats.avgdl);
         return Explanation.match(
             (float) (freq.getValue() / (freq.getValue() + (double) normValue)),
             "tf, computed as freq / (freq + k1 * (1 - b + b * dl / avgdl)) from:", subs);
diff --git a/lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelD.java b/lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelD.java
index 70b004b..6c8f324 100644
--- a/lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelD.java
+++ b/lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelD.java
@@ -18,6 +18,7 @@ package org.apache.lucene.search.similarities;
 
 
 import static org.apache.lucene.search.similarities.SimilarityBase.log2;
+import static org.apache.lucene.search.similarities.SimilarityBase.log21p;
 
 /**
  * Implements the approximation of the binomial model with the divergence
@@ -46,7 +47,7 @@ public class BasicModelD extends BasicModel {
     double nphi = 1 - phi;
     double p = 1.0 / (stats.getNumberOfDocuments() + 1);
     double D = phi * log2(phi / p) + nphi * log2(nphi / (1 - p));
-    return D * F + 0.5 * log2(1 + 2 * Math.PI * tfn * nphi);
+    return D * F + 0.5 * log21p(2 * Math.PI * tfn * nphi);
   }
   
   @Override
diff --git a/lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelG.java b/lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelG.java
index 2f8cb43..cff7db9 100644
--- a/lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelG.java
+++ b/lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelG.java
@@ -17,7 +17,7 @@
 package org.apache.lucene.search.similarities;
 
 
-import static org.apache.lucene.search.similarities.SimilarityBase.log2;
+import static org.apache.lucene.search.similarities.SimilarityBase.log21p;
 
 /**
  * Geometric as limiting form of the Bose-Einstein model.  The formula used in Lucene differs
@@ -37,7 +37,7 @@ public class BasicModelG extends BasicModel {
     double N = stats.getNumberOfDocuments();
     double lambda = F / (N + F);
     // -log(1 / (lambda + 1)) -> log(lambda + 1)
-    return log2(lambda + 1) + tfn * log2((1 + lambda) / lambda);
+    return log21p(lambda) + tfn * log21p(1 / lambda);
   }
 
   @Override
diff --git a/lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelIF.java b/lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelIF.java
index 5b7350b..a4a5a57 100644
--- a/lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelIF.java
+++ b/lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelIF.java
@@ -17,7 +17,7 @@
 package org.apache.lucene.search.similarities;
 
 
-import static org.apache.lucene.search.similarities.SimilarityBase.log2;
+import static org.apache.lucene.search.similarities.SimilarityBase.log21p;
 
 /**
  * An approximation of the <em>I(n<sub>e</sub>)</em> model.
@@ -32,7 +32,7 @@ public class BasicModelIF extends BasicModel {
   public final double score(BasicStats stats, double tfn) {
     long N = stats.getNumberOfDocuments();
     long F = stats.getTotalTermFreq();
-    return tfn * log2(1 + (N + 1) / (F + 0.5));
+    return tfn * log21p((N + 1) / (F + 0.5));
   }
 
   @Override
diff --git a/lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelIn.java b/lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelIn.java
index a09eedb..36096e3 100644
--- a/lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelIn.java
+++ b/lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelIn.java
@@ -18,7 +18,7 @@ package org.apache.lucene.search.similarities;
 
 
 import org.apache.lucene.search.Explanation;
-import static org.apache.lucene.search.similarities.SimilarityBase.log2;
+import static org.apache.lucene.search.similarities.SimilarityBase.log21p;
 
 /**
  * The basic tf-idf model of randomness.
@@ -33,7 +33,8 @@ public class BasicModelIn extends BasicModel {
   public final double score(BasicStats stats, double tfn) {
     long N = stats.getNumberOfDocuments();
     long n = stats.getDocFreq();
-    return tfn * log2((N + 1) / (n + 0.5));
+    // (N+1)/(n+0.5) = 1 + (N-n+0.5)/(n+0.5)
+    return tfn * log21p((N - n + 0.5) / (n + 0.5));
   }
   
   @Override
diff --git a/lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelIne.java b/lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelIne.java
index b4e830d..f47bb27 100644
--- a/lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelIne.java
+++ b/lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelIne.java
@@ -17,7 +17,7 @@
 package org.apache.lucene.search.similarities;
 
 
-import static org.apache.lucene.search.similarities.SimilarityBase.log2;
+import static org.apache.lucene.search.similarities.SimilarityBase.log21p;
 
 /**
  * Tf-idf model of randomness, based on a mixture of Poisson and inverse
@@ -34,7 +34,8 @@ public class BasicModelIne extends BasicModel {
     long N = stats.getNumberOfDocuments();
     long F = stats.getTotalTermFreq();
     double ne = N * (1 - Math.pow((N - 1) / (double)N, F));
-    return tfn * log2((N + 1) / (ne + 0.5));
+    // (N+1)/(ne+0.5) = 1 + (N - ne + 0.5) / (ne + 0.5)
+    return tfn * log21p((N - ne + 0.5) / (ne + 0.5));
   }
 
   @Override
diff --git a/lucene/core/src/java/org/apache/lucene/search/similarities/ClassicSimilarity.java b/lucene/core/src/java/org/apache/lucene/search/similarities/ClassicSimilarity.java
index 2b37e4f..d27f5b8 100644
--- a/lucene/core/src/java/org/apache/lucene/search/similarities/ClassicSimilarity.java
+++ b/lucene/core/src/java/org/apache/lucene/search/similarities/ClassicSimilarity.java
@@ -59,7 +59,8 @@ public class ClassicSimilarity extends TFIDFSimilarity {
   /** Implemented as <code>log((docCount+1)/(docFreq+1)) + 1</code>. */
   @Override
   public float idf(long docFreq, long docCount) {
-    return (float)(Math.log((docCount+1)/(double)(docFreq+1)) + 1.0);
+    // (docCount+1)/(docFreq+1) = 1 + (docCount - docFreq) / (docFreq + 1)
+    return (float)(Math.log1p((docCount - docFreq) / (1.0 + docFreq)) + 1.0);
   }
 
   @Override
diff --git a/lucene/core/src/java/org/apache/lucene/search/similarities/DFISimilarity.java b/lucene/core/src/java/org/apache/lucene/search/similarities/DFISimilarity.java
index 8b7e43a..037f9ff 100644
--- a/lucene/core/src/java/org/apache/lucene/search/similarities/DFISimilarity.java
+++ b/lucene/core/src/java/org/apache/lucene/search/similarities/DFISimilarity.java
@@ -59,7 +59,7 @@ public class DFISimilarity extends SimilarityBase {
 
     final double measure = independence.score(freq, expected);
 
-    return stats.getBoost() * log2(measure + 1);
+    return stats.getBoost() * log21p(measure);
   }
 
   /**
diff --git a/lucene/core/src/java/org/apache/lucene/search/similarities/LMDirichletSimilarity.java b/lucene/core/src/java/org/apache/lucene/search/similarities/LMDirichletSimilarity.java
index a901bad..68389ba 100644
--- a/lucene/core/src/java/org/apache/lucene/search/similarities/LMDirichletSimilarity.java
+++ b/lucene/core/src/java/org/apache/lucene/search/similarities/LMDirichletSimilarity.java
@@ -70,7 +70,7 @@ public class LMDirichletSimilarity extends LMSimilarity {
   
   @Override
   protected double score(BasicStats stats, double freq, double docLen) {
-    double score = stats.getBoost() * (Math.log(1 + freq /
+    double score = stats.getBoost() * (Math.log1p(freq /
         (mu * ((LMStats)stats).getCollectionProbability())) +
         Math.log(mu / (docLen + mu)));
     return score > 0.0d ? score : 0.0d;
diff --git a/lucene/core/src/java/org/apache/lucene/search/similarities/LMJelinekMercerSimilarity.java b/lucene/core/src/java/org/apache/lucene/search/similarities/LMJelinekMercerSimilarity.java
index 2799e3a..f0d173e 100644
--- a/lucene/core/src/java/org/apache/lucene/search/similarities/LMJelinekMercerSimilarity.java
+++ b/lucene/core/src/java/org/apache/lucene/search/similarities/LMJelinekMercerSimilarity.java
@@ -61,7 +61,7 @@ public class LMJelinekMercerSimilarity extends LMSimilarity {
   @Override
   protected double score(BasicStats stats, double freq, double docLen) {
     return stats.getBoost() *
-            Math.log(1 +
+            Math.log1p(
             ((1 - lambda) * freq / docLen) /
             (lambda * ((LMStats)stats).getCollectionProbability()));
   }
diff --git a/lucene/core/src/java/org/apache/lucene/search/similarities/NormalizationH2.java b/lucene/core/src/java/org/apache/lucene/search/similarities/NormalizationH2.java
index 24fb74e..2dcc83b 100644
--- a/lucene/core/src/java/org/apache/lucene/search/similarities/NormalizationH2.java
+++ b/lucene/core/src/java/org/apache/lucene/search/similarities/NormalizationH2.java
@@ -17,7 +17,7 @@
 package org.apache.lucene.search.similarities;
 
 
-import static org.apache.lucene.search.similarities.SimilarityBase.log2;
+import static org.apache.lucene.search.similarities.SimilarityBase.log21p;
 
 /**
  * Normalization model in which the term frequency is inversely related to the
@@ -54,7 +54,7 @@ public class NormalizationH2 extends Normalization {
   
   @Override
   public final double tfn(BasicStats stats, double tf, double len) {
-    return tf * log2(1 + c * stats.getAvgFieldLength() / len);
+    return tf * log21p(c * stats.getAvgFieldLength() / len);
   }
 
   @Override
diff --git a/lucene/core/src/java/org/apache/lucene/search/similarities/SimilarityBase.java b/lucene/core/src/java/org/apache/lucene/search/similarities/SimilarityBase.java
index 380673a..fb34c7b 100644
--- a/lucene/core/src/java/org/apache/lucene/search/similarities/SimilarityBase.java
+++ b/lucene/core/src/java/org/apache/lucene/search/similarities/SimilarityBase.java
@@ -217,7 +217,13 @@ public abstract class SimilarityBase extends Similarity {
     // Put this to a 'util' class if we need more of these.
     return Math.log(x) / LOG_2;
   }
-  
+
+  /** Returns the base two logarithm of {@code 1+x}. */
+  public static double log21p(double x) {
+    // Put this to a 'util' class if we need more of these.
+    return Math.log1p(x) / LOG_2;
+  }
+
   // --------------------------------- Classes ---------------------------------
   
   /** Delegates the {@link #score(int, float)} and
