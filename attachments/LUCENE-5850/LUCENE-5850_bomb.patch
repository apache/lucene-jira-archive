Index: lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer.java	(revision 1613935)
+++ lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer.java	(working copy)
@@ -58,6 +58,7 @@
 import org.apache.lucene.util.IOUtils;
 import org.apache.lucene.util.LongValues;
 import org.apache.lucene.util.RamUsageEstimator;
+import org.apache.lucene.util.StringHelper;
 import org.apache.lucene.util.Version;
 import org.apache.lucene.util.packed.BlockPackedReader;
 import org.apache.lucene.util.packed.MonotonicBlockPackedReader;
@@ -90,13 +91,8 @@
   /** expert: instantiates a new reader */
   @SuppressWarnings("deprecation")
   protected Lucene45DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {
-    Version ver;
-    try {
-      ver = Version.parseLeniently(state.segmentInfo.getVersion());
-    } catch (IllegalArgumentException e) {
-      ver = null;
-    }
-    lenientFieldInfoCheck = ver == null || !ver.onOrAfter(Version.LUCENE_4_9);
+    String ver = state.segmentInfo.getVersion();
+    lenientFieldInfoCheck = StringHelper.getVersionComparator().compare(ver, "4.9.0") < 0;
     String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);
     // read in the entries from the metadata file.
     ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context);
Index: lucene/core/src/java/org/apache/lucene/index/SegmentReader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/SegmentReader.java	(revision 1613935)
+++ lucene/core/src/java/org/apache/lucene/index/SegmentReader.java	(working copy)
@@ -41,6 +41,7 @@
 import org.apache.lucene.util.CloseableThreadLocal;
 import org.apache.lucene.util.IOUtils;
 import org.apache.lucene.util.RamUsageEstimator;
+import org.apache.lucene.util.StringHelper;
 import org.apache.lucene.util.Version;
 
 /**
@@ -199,15 +200,8 @@
       return;
     }
 
-    Version ver;
-    try {
-      ver = Version.parseLeniently(si.info.getVersion());
-    } catch (IllegalArgumentException e) {
-      // happened in TestBackwardsCompatibility on a 4.0.0.2 index (no matching
-      // Version constant), anyway it's a pre-4.9 index.
-      ver = null;
-    }
-    if (ver != null && ver.onOrAfter(Version.LUCENE_4_9)) {
+    String ver = si.info.getVersion();
+    if (ver != null && StringHelper.getVersionComparator().compare(ver, "4.9.0") >= 0) {
       DocValuesProducer baseProducer = null;
       for (FieldInfo fi : fieldInfos) {
         if (!fi.hasDocValues()) continue;
