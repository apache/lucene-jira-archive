Index: lucene/src/java/org/apache/lucene/index/DirectoryReader.java
===================================================================
--- lucene/src/java/org/apache/lucene/index/DirectoryReader.java	(revision 1180119)
+++ lucene/src/java/org/apache/lucene/index/DirectoryReader.java	(working copy)
@@ -48,20 +48,20 @@
 
   IndexWriter writer;
 
-  private IndexDeletionPolicy deletionPolicy;
-  private Lock writeLock;
-  private final SegmentInfos segmentInfos;
-  private boolean stale;
-  private final int termInfosIndexDivisor;
+  protected IndexDeletionPolicy deletionPolicy;
+  protected Lock writeLock;
+  protected final SegmentInfos segmentInfos;
+  protected boolean stale;
+  protected final int termInfosIndexDivisor;
 
-  private boolean rollbackHasChanges;
+  protected boolean rollbackHasChanges;
 
-  private SegmentReader[] subReaders;
-  private int[] starts;                           // 1st docno for each segment
-  private Map<String,byte[]> normsCache = new HashMap<String,byte[]>();
-  private int maxDoc = 0;
-  private int numDocs = -1;
-  private boolean hasDeletions = false;
+  protected SegmentReader[] subReaders;
+  protected int[] starts;                           // 1st docno for each segment
+  protected Map<String,byte[]> normsCache = new HashMap<String,byte[]>();
+  protected int maxDoc = 0;
+  protected int numDocs = -1;
+  protected boolean hasDeletions = false;
 
   // Max version in index as of when we opened; this can be
   // > our current segmentInfos version in case we were
@@ -386,24 +386,24 @@
   }
 
   @Override
-  protected final IndexReader doOpenIfChanged() throws CorruptIndexException, IOException {
+  protected IndexReader doOpenIfChanged() throws CorruptIndexException, IOException {
     // Preserve current readOnly
     return doOpenIfChanged(readOnly, null);
   }
 
   @Override
-  protected final IndexReader doOpenIfChanged(boolean openReadOnly) throws CorruptIndexException, IOException {
+  protected IndexReader doOpenIfChanged(boolean openReadOnly) throws CorruptIndexException, IOException {
     return doOpenIfChanged(openReadOnly, null);
   }
 
   @Override
-  protected final IndexReader doOpenIfChanged(final IndexCommit commit) throws CorruptIndexException, IOException {
+  protected IndexReader doOpenIfChanged(final IndexCommit commit) throws CorruptIndexException, IOException {
     return doOpenIfChanged(true, commit);
   }
 
   // NOTE: always returns a non-null result (ie new reader)
   // but that could change someday
-  private final IndexReader doOpenFromWriter(boolean openReadOnly, IndexCommit commit) throws CorruptIndexException, IOException {
+  protected IndexReader doOpenFromWriter(boolean openReadOnly, IndexCommit commit) throws CorruptIndexException, IOException {
     assert readOnly;
 
     if (!openReadOnly) {
@@ -422,7 +422,7 @@
     return reader;
   }
 
-  private IndexReader doOpenIfChanged(final boolean openReadOnly, IndexCommit commit) throws CorruptIndexException, IOException {
+  protected IndexReader doOpenIfChanged(final boolean openReadOnly, IndexCommit commit) throws CorruptIndexException, IOException {
     ensureOpen();
 
     assert commit == null || openReadOnly;
@@ -436,7 +436,7 @@
     }
   }
 
-  private synchronized IndexReader doOpenNoWriter(final boolean openReadOnly, IndexCommit commit) throws CorruptIndexException, IOException {
+  protected synchronized IndexReader doOpenNoWriter(final boolean openReadOnly, IndexCommit commit) throws CorruptIndexException, IOException {
 
     if (commit == null) {
       if (hasChanges) {
@@ -485,7 +485,7 @@
     }.run(commit);
   }
 
-  private synchronized DirectoryReader doOpenIfChanged(SegmentInfos infos, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {
+  protected synchronized DirectoryReader doOpenIfChanged(SegmentInfos infos, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {
     DirectoryReader reader;
     if (openReadOnly) {
       reader = new ReadOnlyDirectoryReader(directory, infos, subReaders, starts, normsCache, doClone, termInfosIndexDivisor, readerFinishedListeners);
@@ -601,7 +601,7 @@
     numDocs = -1;                                 // invalidate cache
   }
 
-  private int readerIndex(int n) {    // find reader for doc n:
+  protected int readerIndex(int n) {    // find reader for doc n:
     return readerIndex(n, this.starts, this.subReaders.length);
   }
   
@@ -1009,7 +1009,7 @@
     return commits;
   }
 
-  private static final class ReaderCommit extends IndexCommit {
+  protected static final class ReaderCommit extends IndexCommit {
     private String segmentsFileName;
     Collection<String> files;
     Directory dir;
