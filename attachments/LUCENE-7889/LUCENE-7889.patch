diff --git a/lucene/grouping/src/java/org/apache/lucene/search/grouping/DoubleRange.java b/lucene/grouping/src/java/org/apache/lucene/search/grouping/DoubleRange.java
new file mode 100644
index 0000000..ec03a4d
--- /dev/null
+++ b/lucene/grouping/src/java/org/apache/lucene/search/grouping/DoubleRange.java
@@ -0,0 +1,50 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.lucene.search.grouping;
+
+import java.util.Objects;
+
+public class DoubleRange {
+
+  public double min;
+  public double max;
+
+  public DoubleRange(double min, double max) {
+    this.min = min;
+    this.max = max;
+  }
+
+  @Override
+  public String toString() {
+    return "DoubleRange(" + min + ", " + max + ")";
+  }
+
+  @Override
+  public boolean equals(Object o) {
+    if (this == o) return true;
+    if (o == null || getClass() != o.getClass()) return false;
+    DoubleRange that = (DoubleRange) o;
+    return Double.compare(that.min, min) == 0 &&
+        Double.compare(that.max, max) == 0;
+  }
+
+  @Override
+  public int hashCode() {
+    return Objects.hash(min, max);
+  }
+}
diff --git a/lucene/grouping/src/java/org/apache/lucene/search/grouping/DoubleRangeFactory.java b/lucene/grouping/src/java/org/apache/lucene/search/grouping/DoubleRangeFactory.java
new file mode 100644
index 0000000..5451e13
--- /dev/null
+++ b/lucene/grouping/src/java/org/apache/lucene/search/grouping/DoubleRangeFactory.java
@@ -0,0 +1,51 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.lucene.search.grouping;
+
+public class DoubleRangeFactory {
+
+  private final double min;
+  private final double width;
+  private final double max;
+
+  public DoubleRangeFactory(double min, double width, double max) {
+    this.min = min;
+    this.width = width;
+    this.max = max;
+  }
+
+  public DoubleRange getRange(double value, DoubleRange reuse) {
+    if (reuse == null)
+      reuse = new DoubleRange(Double.MIN_VALUE, Double.MAX_VALUE);
+    if (value < min) {
+      reuse.max = min;
+      reuse.min = Double.MIN_VALUE;
+      return reuse;
+    }
+    if (value >= max) {
+      reuse.min = max;
+      reuse.max = Double.MAX_VALUE;
+      return reuse;
+    }
+    double bucket = Math.floor((value - min) / width);
+    reuse.min = min + (bucket * width);
+    reuse.max = reuse.min + width;
+    return reuse;
+  }
+
+}
diff --git a/lucene/grouping/src/java/org/apache/lucene/search/grouping/DoubleRangeGroupSelector.java b/lucene/grouping/src/java/org/apache/lucene/search/grouping/DoubleRangeGroupSelector.java
new file mode 100644
index 0000000..cbe19fa
--- /dev/null
+++ b/lucene/grouping/src/java/org/apache/lucene/search/grouping/DoubleRangeGroupSelector.java
@@ -0,0 +1,92 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.lucene.search.grouping;
+
+import java.io.IOException;
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.Set;
+
+import org.apache.lucene.index.LeafReaderContext;
+import org.apache.lucene.search.DoubleValues;
+import org.apache.lucene.search.DoubleValuesSource;
+import org.apache.lucene.search.Scorer;
+
+public class DoubleRangeGroupSelector extends GroupSelector<DoubleRange> {
+
+  private final DoubleValuesSource source;
+  private final DoubleRangeFactory rangeFactory;
+
+  private Set<DoubleRange> inSecondPass;
+  private boolean includeEmpty = true;
+  private boolean positioned;
+  private DoubleRange current;
+
+  private LeafReaderContext context;
+  private DoubleValues values;
+
+  public DoubleRangeGroupSelector(DoubleValuesSource source, DoubleRangeFactory rangeFactory) {
+    this.source = source;
+    this.rangeFactory = rangeFactory;
+  }
+
+  @Override
+  public void setNextReader(LeafReaderContext readerContext) throws IOException {
+    this.context = readerContext;
+  }
+
+  @Override
+  public void setScorer(Scorer scorer) throws IOException {
+    this.values = source.getValues(context, DoubleValuesSource.fromScorer(scorer));
+  }
+
+  @Override
+  public State advanceTo(int doc) throws IOException {
+    positioned = values.advanceExact(doc);
+    if (positioned == false) {
+      return includeEmpty ? State.ACCEPT : State.SKIP;
+    }
+    this.current = rangeFactory.getRange(values.doubleValue(), this.current);
+    if (inSecondPass == null) {
+      return State.ACCEPT;
+    }
+    return inSecondPass.contains(this.current) ? State.ACCEPT : State.SKIP;
+  }
+
+  @Override
+  public DoubleRange currentValue() throws IOException {
+    return positioned ? this.current : null;
+  }
+
+  @Override
+  public DoubleRange copyValue() throws IOException {
+    return positioned ? new DoubleRange(this.current.min, this.current.max) : null;
+  }
+
+  @Override
+  public void setGroups(Collection<SearchGroup<DoubleRange>> searchGroups) {
+    inSecondPass = new HashSet<>();
+    includeEmpty = false;
+    for (SearchGroup<DoubleRange> group : searchGroups) {
+      if (group.groupValue == null)
+        includeEmpty = true;
+      else
+        inSecondPass.add(group.groupValue);
+    }
+  }
+}
diff --git a/lucene/grouping/src/java/org/apache/lucene/search/grouping/FirstPassGroupingCollector.java b/lucene/grouping/src/java/org/apache/lucene/search/grouping/FirstPassGroupingCollector.java
index bd47adb..38ebc7e 100644
--- a/lucene/grouping/src/java/org/apache/lucene/search/grouping/FirstPassGroupingCollector.java
+++ b/lucene/grouping/src/java/org/apache/lucene/search/grouping/FirstPassGroupingCollector.java
@@ -153,6 +153,7 @@ public class FirstPassGroupingCollector<T> extends SimpleCollector {
 
   @Override
   public void setScorer(Scorer scorer) throws IOException {
+    groupSelector.setScorer(scorer);
     for (LeafFieldComparator comparator : leafComparators) {
       comparator.setScorer(scorer);
     }
diff --git a/lucene/grouping/src/java/org/apache/lucene/search/grouping/GroupSelector.java b/lucene/grouping/src/java/org/apache/lucene/search/grouping/GroupSelector.java
index dbb0932..119d17d 100644
--- a/lucene/grouping/src/java/org/apache/lucene/search/grouping/GroupSelector.java
+++ b/lucene/grouping/src/java/org/apache/lucene/search/grouping/GroupSelector.java
@@ -21,6 +21,7 @@ import java.io.IOException;
 import java.util.Collection;
 
 import org.apache.lucene.index.LeafReaderContext;
+import org.apache.lucene.search.Scorer;
 
 /**
  * Defines a group, for use by grouping collectors
@@ -44,6 +45,11 @@ public abstract class GroupSelector<T> {
   public abstract void setNextReader(LeafReaderContext readerContext) throws IOException;
 
   /**
+   * Set the current Scorer
+   */
+  public abstract void setScorer(Scorer scorer) throws IOException;
+
+  /**
    * Advance the GroupSelector's iterator to the given document
    */
   public abstract State advanceTo(int doc) throws IOException;
@@ -53,12 +59,12 @@ public abstract class GroupSelector<T> {
    *
    * N.B. this object may be reused, for a persistent version use {@link #copyValue()}
    */
-  public abstract T currentValue();
+  public abstract T currentValue() throws IOException;
 
   /**
    * @return a copy of the group value of the current document
    */
-  public abstract T copyValue();
+  public abstract T copyValue() throws IOException;
 
   /**
    * Set a restriction on the group values returned by this selector
diff --git a/lucene/grouping/src/java/org/apache/lucene/search/grouping/SecondPassGroupingCollector.java b/lucene/grouping/src/java/org/apache/lucene/search/grouping/SecondPassGroupingCollector.java
index c54c8ee..8e65f05 100644
--- a/lucene/grouping/src/java/org/apache/lucene/search/grouping/SecondPassGroupingCollector.java
+++ b/lucene/grouping/src/java/org/apache/lucene/search/grouping/SecondPassGroupingCollector.java
@@ -77,6 +77,7 @@ public class SecondPassGroupingCollector<T> extends SimpleCollector {
 
   @Override
   public void setScorer(Scorer scorer) throws IOException {
+    groupSelector.setScorer(scorer);
     groupReducer.setScorer(scorer);
   }
 
diff --git a/lucene/grouping/src/java/org/apache/lucene/search/grouping/TermGroupSelector.java b/lucene/grouping/src/java/org/apache/lucene/search/grouping/TermGroupSelector.java
index 5b8f77c..f56a8af 100644
--- a/lucene/grouping/src/java/org/apache/lucene/search/grouping/TermGroupSelector.java
+++ b/lucene/grouping/src/java/org/apache/lucene/search/grouping/TermGroupSelector.java
@@ -25,6 +25,7 @@ import java.util.Map;
 import org.apache.lucene.index.DocValues;
 import org.apache.lucene.index.LeafReaderContext;
 import org.apache.lucene.index.SortedDocValues;
+import org.apache.lucene.search.Scorer;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.BytesRefHash;
 
@@ -65,6 +66,11 @@ public class TermGroupSelector extends GroupSelector<BytesRef> {
   }
 
   @Override
+  public void setScorer(Scorer scorer) throws IOException {
+
+  }
+
+  @Override
   public State advanceTo(int doc) throws IOException {
     if (this.docValues.advanceExact(doc) == false) {
       groupId = -1;
diff --git a/lucene/grouping/src/java/org/apache/lucene/search/grouping/ValueSourceGroupSelector.java b/lucene/grouping/src/java/org/apache/lucene/search/grouping/ValueSourceGroupSelector.java
index 2490160..86a3ab0 100644
--- a/lucene/grouping/src/java/org/apache/lucene/search/grouping/ValueSourceGroupSelector.java
+++ b/lucene/grouping/src/java/org/apache/lucene/search/grouping/ValueSourceGroupSelector.java
@@ -26,6 +26,7 @@ import java.util.Set;
 import org.apache.lucene.index.LeafReaderContext;
 import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
+import org.apache.lucene.search.Scorer;
 import org.apache.lucene.util.mutable.MutableValue;
 
 /**
@@ -57,6 +58,11 @@ public class ValueSourceGroupSelector extends GroupSelector<MutableValue> {
   }
 
   @Override
+  public void setScorer(Scorer scorer) throws IOException {
+
+  }
+
+  @Override
   public State advanceTo(int doc) throws IOException {
     this.filler.fillValue(doc);
     if (secondPassGroups != null) {
@@ -67,7 +73,7 @@ public class ValueSourceGroupSelector extends GroupSelector<MutableValue> {
   }
 
   @Override
-  public MutableValue currentValue() {
+  public MutableValue currentValue() throws IOException {
     return filler.getValue();
   }
 
diff --git a/lucene/grouping/src/test/org/apache/lucene/search/grouping/TestDoubleRangeFactory.java b/lucene/grouping/src/test/org/apache/lucene/search/grouping/TestDoubleRangeFactory.java
new file mode 100644
index 0000000..d6e05c3
--- /dev/null
+++ b/lucene/grouping/src/test/org/apache/lucene/search/grouping/TestDoubleRangeFactory.java
@@ -0,0 +1,39 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.lucene.search.grouping;
+
+import org.apache.lucene.util.LuceneTestCase;
+
+public class TestDoubleRangeFactory extends LuceneTestCase {
+
+  public void test() {
+
+    DoubleRangeFactory factory = new DoubleRangeFactory(10, 10, 50);
+    DoubleRange scratch = new DoubleRange(0, 0);
+
+    assertEquals(new DoubleRange(Double.MIN_VALUE, 10), factory.getRange(4, scratch));
+    assertEquals(new DoubleRange(10, 20), factory.getRange(10, scratch));
+    assertEquals(new DoubleRange(20, 30), factory.getRange(20, scratch));
+    assertEquals(new DoubleRange(10, 20), factory.getRange(15, scratch));
+    assertEquals(new DoubleRange(30, 40), factory.getRange(35, scratch));
+    assertEquals(new DoubleRange(50, Double.MAX_VALUE), factory.getRange(50, scratch));
+    assertEquals(new DoubleRange(50, Double.MAX_VALUE), factory.getRange(500, scratch));
+
+  }
+
+}
diff --git a/lucene/grouping/src/test/org/apache/lucene/search/grouping/TestDoubleRangeGrouping.java b/lucene/grouping/src/test/org/apache/lucene/search/grouping/TestDoubleRangeGrouping.java
new file mode 100644
index 0000000..bec97ef
--- /dev/null
+++ b/lucene/grouping/src/test/org/apache/lucene/search/grouping/TestDoubleRangeGrouping.java
@@ -0,0 +1,154 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.lucene.search.grouping;
+
+import org.apache.lucene.analysis.MockAnalyzer;
+import org.apache.lucene.document.Document;
+import org.apache.lucene.document.DoubleDocValuesField;
+import org.apache.lucene.document.Field;
+import org.apache.lucene.document.FieldType;
+import org.apache.lucene.document.TextField;
+import org.apache.lucene.index.RandomIndexWriter;
+import org.apache.lucene.index.Term;
+import org.apache.lucene.search.DoubleValuesSource;
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.Sort;
+import org.apache.lucene.search.TermQuery;
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.util.LuceneTestCase;
+
+public class TestDoubleRangeGrouping extends LuceneTestCase {
+
+  public void testBasic() throws Exception {
+
+    String groupField = "popularity";
+
+    FieldType customType = new FieldType();
+    customType.setStored(true);
+
+    Directory dir = newDirectory();
+    RandomIndexWriter w = new RandomIndexWriter(
+        random(),
+        dir,
+        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));
+    // 0
+    Document doc = new Document();
+    doc.add(new DoubleDocValuesField(groupField, 10));
+    doc.add(new TextField("content", "random text", Field.Store.YES));
+    doc.add(new Field("id", "1", customType));
+    w.addDocument(doc);
+
+    // 1
+    doc = new Document();
+    doc.add(new DoubleDocValuesField(groupField, 15));
+    doc.add(new TextField("content", "some more random text", Field.Store.YES));
+    doc.add(new Field("id", "2", customType));
+    w.addDocument(doc);
+
+    // 2
+    doc = new Document();
+    doc.add(new DoubleDocValuesField(groupField, 10));
+    doc.add(new TextField("content", "some more random textual data", Field.Store.YES));
+    doc.add(new Field("id", "3", customType));
+    w.addDocument(doc);
+
+    // 3
+    doc = new Document();
+    doc.add(new DoubleDocValuesField(groupField, 20));
+    doc.add(new TextField("content", "some random text", Field.Store.YES));
+    doc.add(new Field("id", "4", customType));
+    w.addDocument(doc);
+
+    // 4
+    doc = new Document();
+    doc.add(new DoubleDocValuesField(groupField, 30));
+    doc.add(new TextField("content", "some more random text", Field.Store.YES));
+    doc.add(new Field("id", "5", customType));
+    w.addDocument(doc);
+
+    // 5
+    doc = new Document();
+    doc.add(new DoubleDocValuesField(groupField, 30));
+    doc.add(new TextField("content", "random", Field.Store.YES));
+    doc.add(new Field("id", "6", customType));
+    w.addDocument(doc);
+
+    // 6 -- no popularity field
+    doc = new Document();
+    doc.add(new TextField("content", "random word stuck in alot of other text", Field.Store.YES));
+    doc.add(new Field("id", "6", customType));
+    w.addDocument(doc);
+
+    IndexSearcher indexSearcher = newSearcher(w.getReader());
+    w.close();
+
+    final Sort groupSort = Sort.RELEVANCE;
+    final DoubleRangeFactory factory = new DoubleRangeFactory(0, 10, 100);
+    final GroupSelector<DoubleRange> selector
+        = new DoubleRangeGroupSelector(DoubleValuesSource.fromDoubleField(groupField), factory);
+
+    final FirstPassGroupingCollector<DoubleRange> c1
+        = new FirstPassGroupingCollector<>(selector, groupSort, 10);
+    indexSearcher.search(new TermQuery(new Term("content", "random")), c1);
+
+    final TopGroupsCollector<DoubleRange> c2
+        = new TopGroupsCollector<>(selector, c1.getTopGroups(0, true), groupSort, Sort.RELEVANCE, 5, true, true, true);
+    indexSearcher.search(new TermQuery(new Term("content", "random")), c2);
+
+    final TopGroups<DoubleRange> groups = c2.getTopGroups(0);
+    assertFalse(Float.isNaN(groups.maxScore));
+
+    assertEquals(7, groups.totalHitCount);
+    assertEquals(7, groups.totalGroupedHitCount);
+    assertEquals(4, groups.groups.length);
+
+    // relevance order: 5, 0, 3, 4, 1, 2, 6
+
+    // the later a document is added the higher this docId
+    // value
+    GroupDocs<DoubleRange> group = groups.groups[0];
+    assertEquals(new DoubleRange(30, 40), group.groupValue);
+    assertEquals(2, group.scoreDocs.length);
+    assertEquals(5, group.scoreDocs[0].doc);
+    assertEquals(4, group.scoreDocs[1].doc);
+    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);
+
+    group = groups.groups[1];
+    assertEquals(new DoubleRange(10, 20), group.groupValue);
+    assertEquals(3, group.scoreDocs.length);
+    assertEquals(0, group.scoreDocs[0].doc);
+    assertEquals(1, group.scoreDocs[1].doc);
+    assertEquals(2, group.scoreDocs[2].doc);
+    assertTrue(group.scoreDocs[0].score >= group.scoreDocs[1].score);
+    assertTrue(group.scoreDocs[1].score >= group.scoreDocs[2].score);
+
+    group = groups.groups[2];
+    assertEquals(new DoubleRange(20, 30), group.groupValue);
+    assertEquals(1, group.scoreDocs.length);
+    assertEquals(3, group.scoreDocs[0].doc);
+
+    group = groups.groups[3];
+    assertEquals(null, group.groupValue);
+    assertEquals(1, group.scoreDocs.length);
+    assertEquals(6, group.scoreDocs[0].doc);
+
+    indexSearcher.getIndexReader().close();
+    dir.close();
+  }
+
+}
