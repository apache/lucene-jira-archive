diff --git a/lucene/core/src/test/org/apache/lucene/index/TestIndexSorting.java b/lucene/core/src/test/org/apache/lucene/index/TestIndexSorting.java
index 26c4b95..eb74ab7 100644
--- a/lucene/core/src/test/org/apache/lucene/index/TestIndexSorting.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestIndexSorting.java
@@ -141,7 +141,12 @@ public class TestIndexSorting extends LuceneTestCase {
     Sort indexSort = new Sort(sortField,
         new SortField("id", SortField.Type.INT));
     iwc.setIndexSort(indexSort);
-    iwc.setMergePolicy(newLogMergePolicy());
+    LogMergePolicy policy = newLogMergePolicy();
+    // make sure that merge factor is always > 2
+    if (policy.getMergeFactor() <= 2) {
+      policy.setMergeFactor(3);
+    }
+    iwc.setMergePolicy(policy);
 
     // add already sorted documents
     codec.numCalls = 0;
diff --git a/lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy.java b/lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy.java
index f32e4d3..b1cc0ee 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy.java
@@ -156,7 +156,7 @@ public class MockRandomMergePolicy extends MergePolicy {
         if (LuceneTestCase.VERBOSE) {
           System.out.println("NOTE: MockRandomMergePolicy now swaps in a SlowCodecReaderWrapper for merging reader=" + reader);
         }
-        return SlowCodecReaderWrapper.wrap(new FilterLeafReader(reader) {});
+        return SlowCodecReaderWrapper.wrap(new FilterLeafReader(new MergeReaderWrapper(reader)) {});
       } else if (thingToDo == 1) {
         // renumber fields
         // NOTE: currently this only "blocks" bulk merges just by
@@ -165,7 +165,7 @@ public class MockRandomMergePolicy extends MergePolicy {
         if (LuceneTestCase.VERBOSE) {
           System.out.println("NOTE: MockRandomMergePolicy now swaps in a MismatchedLeafReader for merging reader=" + reader);
         }
-        return SlowCodecReaderWrapper.wrap(new MismatchedLeafReader(reader, r));
+        return SlowCodecReaderWrapper.wrap(new MismatchedLeafReader(new MergeReaderWrapper(reader), r));
       } else {
         // otherwise, reader is unchanged
         return reader;
