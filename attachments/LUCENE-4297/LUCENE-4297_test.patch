Index: lucene/core/src/test/org/apache/lucene/search/TestBoolean2.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestBoolean2.java	(revision 1370367)
+++ lucene/core/src/test/org/apache/lucene/search/TestBoolean2.java	(working copy)
@@ -258,39 +258,53 @@
     int tot=0;
 
     BooleanQuery q1 = null;
+    final Similarity oldSimilarity = searcher.getSimilarity();
     try {
 
       // increase number of iterations for more complete testing
       int num = atLeast(10);
       for (int i=0; i<num; i++) {
-        int level = random().nextInt(3);
-        q1 = randBoolQuery(new Random(random().nextLong()), random().nextBoolean(), level, field, vals, null);
-        
-        // Can't sort by relevance since floating point numbers may not quite
-        // match up.
-        Sort sort = Sort.INDEXORDER;
-
-        QueryUtils.check(random(), q1,searcher);
-
-        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,
-            false, true, true, true);
-
-        searcher.search(q1, null, collector);
-        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;
-
-        collector = TopFieldCollector.create(sort, 1000,
-            false, true, true, false);
-        
-        searcher.search(q1, null, collector);
-        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;
-        tot+=hits2.length;
-        CheckHits.checkEqual(q1, hits1, hits2);
-
-        BooleanQuery q3 = new BooleanQuery();
-        q3.add(q1, BooleanClause.Occur.SHOULD);
-        q3.add(new PrefixQuery(new Term("field2", "b")), BooleanClause.Occur.SHOULD);
-        TopDocs hits4 = bigSearcher.search(q3, 1);
-        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);
+        try {
+          if (true /* nocommit */|| random().nextInt(3) == 0) {
+            searcher.setSimilarity(new DefaultSimilarity() {
+              @Override
+              public float coord(int overlap, int maxOverlap) {
+                return overlap / ((float)maxOverlap + 1);
+              }
+            });
+          }
+          int level = random().nextInt(3);
+          q1 = randBoolQuery(new Random(random().nextLong()), random().nextBoolean(), level, field, vals, null);
+          
+          // Can't sort by relevance since floating point numbers may not quite
+          // match up.
+          Sort sort = Sort.INDEXORDER;
+          
+          QueryUtils.check(random(), q1,searcher);
+          
+          TopFieldCollector collector = TopFieldCollector.create(sort, 1000,
+              false, true, true, true);
+          
+          searcher.search(q1, null, collector);
+          ScoreDoc[] hits1 = collector.topDocs().scoreDocs;
+          
+          collector = TopFieldCollector.create(sort, 1000,
+              false, true, true, false);
+          
+          searcher.search(q1, null, collector);
+          ScoreDoc[] hits2 = collector.topDocs().scoreDocs;
+          tot+=hits2.length;
+          CheckHits.checkEqual(q1, hits1, hits2);
+          
+          BooleanQuery q3 = new BooleanQuery();
+          q3.add(q1, BooleanClause.Occur.SHOULD);
+          q3.add(new PrefixQuery(new Term("field2", "b")), BooleanClause.Occur.SHOULD);
+          TopDocs hits4 = bigSearcher.search(q3, 1);
+          assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);
+        } finally {
+          // restore sim
+          searcher.setSimilarity(oldSimilarity);
+        }
       }
 
     } catch (Exception e) {
@@ -321,6 +335,14 @@
       Query q;
       if (qType < 3) {
         q = new TermQuery(new Term(field, vals[rnd.nextInt(vals.length)]));
+      } else if (qType < 4) {
+        Term t1 = new Term(field, vals[rnd.nextInt(vals.length)]);
+        Term t2 = new Term(field, vals[rnd.nextInt(vals.length)]);
+        PhraseQuery pq = new PhraseQuery();
+        pq.add(t1);
+        pq.add(t2);
+        pq.setSlop(10); // increase possibility of matching
+        q = pq;
       } else if (qType < 7) {
         q = new WildcardQuery(new Term(field, "w*"));
       } else {
