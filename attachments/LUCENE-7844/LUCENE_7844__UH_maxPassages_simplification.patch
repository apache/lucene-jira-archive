Index: solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter.java	(revision 872ed81cc971646c10fdb27b23ffe6ca7decd91a)
+++ solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter.java	(revision )
@@ -137,13 +137,8 @@
     // query-time parameters
     String[] fieldNames = getHighlightFields(query, req, defaultFields);
 
-    int maxPassages[] = new int[fieldNames.length];
-    for (int i = 0; i < fieldNames.length; i++) {
-      maxPassages[i] = params.getFieldInt(fieldNames[i], HighlightParams.SNIPPETS, 1);
-    }
-
     UnifiedHighlighter highlighter = getHighlighter(req);
-    Map<String, String[]> snippets = highlighter.highlightFields(fieldNames, query, docIDs, maxPassages);
+    Map<String, String[]> snippets = highlighter.highlightFields(fieldNames, query, docIDs, 1);
     return encodeSnippets(keys, fieldNames, snippets);
   }
 
@@ -253,6 +248,11 @@
       loadFieldValuesTimer.pause(); // state of PAUSED now with about zero time. Will fail if state isn't STARTED.
     }
 
+    @Override
+    protected Integer getMaxPassageCount(String field) {
+      return params.getFieldInt(field, HighlightParams.SNIPPETS); // otherwise defaults to 1
+    }
+
     @Override
     protected OffsetSource getOffsetSource(String field) {
       String sourceStr = params.getFieldParam(field, HighlightParams.OFFSET_SOURCE);
Index: lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/visibility/TestUnifiedHighlighterExtensibility.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/visibility/TestUnifiedHighlighterExtensibility.java	(revision 872ed81cc971646c10fdb27b23ffe6ca7decd91a)
+++ lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/visibility/TestUnifiedHighlighterExtensibility.java	(revision )
@@ -92,8 +92,8 @@
     UnifiedHighlighter uh = new UnifiedHighlighter(null, new MockAnalyzer(random())){
 
       @Override
-      protected Map<String, Object[]> highlightFieldsAsObjects(String[] fieldsIn, Query query, int[] docIdsIn, int[] maxPassagesIn) throws IOException {
-        return super.highlightFieldsAsObjects(fieldsIn, query, docIdsIn, maxPassagesIn);
+      protected Map<String, Object[]> highlightFieldsAsObjects(String[] fieldsIn, Query query, int[] docIdsIn, int maxPassages) throws IOException {
+        return super.highlightFieldsAsObjects(fieldsIn, query, docIdsIn, maxPassages);
       }
 
       @Override
Index: lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighter.java	(revision 872ed81cc971646c10fdb27b23ffe6ca7decd91a)
+++ lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighter.java	(revision )
@@ -108,7 +108,7 @@
     Query query = new TermQuery(new Term("body", "highlighting"));
     TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);
     assertEquals(2, topDocs.totalHits);
-    String snippets[] = highlighter.highlight("body", query, topDocs);
+    String[] snippets = highlighter.highlight("body", query, topDocs);
     assertEquals(2, snippets.length);
     assertEquals("Just a test <b>highlighting</b> from postings. ", snippets[0]);
     assertEquals("<b>Highlighting</b> the first term. ", snippets[1]);
@@ -172,8 +172,7 @@
 
     UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, indexAnalyzer);
     highlighter.setMaxLength(maxLength);
-    String snippets[] = highlighter.highlight("body", query, topDocs);
-
+    String[] snippets = highlighter.highlight("body", query, topDocs);
 
     ir.close();
     return snippets;
@@ -198,7 +197,7 @@
     Query query = new TermQuery(new Term("body", "test"));
     TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);
     assertEquals(1, topDocs.totalHits);
-    String snippets[] = highlighter.highlight("body", query, topDocs);
+    String[] snippets = highlighter.highlight("body", query, topDocs);
     assertEquals(1, snippets.length);
     assertEquals("This is a <b>test</b>", snippets[0]);
 
@@ -226,7 +225,7 @@
     Query query = new TermQuery(new Term("body", "test"));
     TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);
     assertEquals(2, topDocs.totalHits);
-    String snippets[] = highlighter.highlight("body", query, topDocs);
+    String[] snippets = highlighter.highlight("body", query, topDocs);
     assertEquals(2, snippets.length);
     assertEquals("This is a <b>test</b>.", snippets[0]);
     assertEquals("<b>Test</b> a one sentence document.", snippets[1]);
@@ -256,7 +255,7 @@
     Query query = new TermQuery(new Term("body", "field"));
     TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);
     assertEquals(1, topDocs.totalHits);
-    String snippets[] = highlighter.highlight("body", query, topDocs, 10);
+    String[] snippets = highlighter.highlight("body", query, topDocs, 10);
     assertEquals(1, snippets.length);
     String highlightedValue = "This is a multivalued <b>field</b>. Sentencetwo <b>field</b>.";
     assertEquals(highlightedValue + "... " + highlightedValue, snippets[0]);
@@ -324,7 +323,7 @@
         .build();
     TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);
     assertEquals(2, topDocs.totalHits);
-    String snippets[] = highlighter.highlight("body", query, topDocs);
+    String[] snippets = highlighter.highlight("body", query, topDocs);
     assertEquals(2, snippets.length);
     assertEquals("<b>Just</b> a test <b>highlighting</b> from postings. ", snippets[0]);
     assertEquals("<b>Highlighting</b> the <b>first</b> term. ", snippets[1]);
@@ -352,7 +351,7 @@
     Query query = new TermQuery(new Term("body", "test"));
     TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);
     assertEquals(2, topDocs.totalHits);
-    String snippets[] = highlighter.highlight("body", query, topDocs, 2);
+    String[] snippets = highlighter.highlight("body", query, topDocs, 2);
     assertEquals(2, snippets.length);
     assertEquals("This is a <b>test</b>. Just a <b>test</b> highlighting from postings. ", snippets[0]);
     assertEquals("This <b>test</b> is another <b>test</b>. ... <b>Test</b> <b>test</b> <b>test</b> <b>test</b>.", snippets[1]);
@@ -387,7 +386,7 @@
     assertEquals(1, topDocs.totalHits);
     UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, indexAnalyzer);
     highlighter.setHighlightPhrasesStrictly(false);
-    String snippets[] = highlighter.highlight("body", query, topDocs, 2);
+    String[] snippets = highlighter.highlight("body", query, topDocs, 2);
     assertEquals(1, snippets.length);
     assertTrue(snippets[0].contains("<b>Buddhist</b> <b>origins</b>"));
     ir.close();
@@ -415,7 +414,7 @@
     assertEquals(1, topDocs.totalHits);
     UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, indexAnalyzer);
     highlighter.setHighlightPhrasesStrictly(false);
-    String snippets[] = highlighter.highlight("body", query, topDocs, 2);
+    String[] snippets = highlighter.highlight("body", query, topDocs, 2);
     assertEquals(1, snippets.length);
     assertFalse(snippets[0].contains("<b>Curious</b>Curious"));
     ir.close();
@@ -443,7 +442,7 @@
     assertEquals(1, topDocs.totalHits);
     UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, indexAnalyzer);
     highlighter.setMaxLength(Integer.MAX_VALUE - 1);
-    String snippets[] = highlighter.highlight("body", query, topDocs, 2);
+    String[] snippets = highlighter.highlight("body", query, topDocs, 2);
     assertEquals(1, snippets.length);
     assertTrue(snippets[0].contains("<b>Square</b>"));
     assertTrue(snippets[0].contains("<b>Porter</b>"));
@@ -468,7 +467,7 @@
     Query query = new TermQuery(new Term("body", "test"));
     TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);
     assertEquals(1, topDocs.totalHits);
-    String snippets[] = highlighter.highlight("body", query, topDocs, 2);
+    String[] snippets = highlighter.highlight("body", query, topDocs, 2);
     assertEquals(1, snippets.length);
     assertEquals("This is a <b>test</b>.  ... Feel free to <b>test</b> <b>test</b> <b>test</b> <b>test</b> <b>test</b> <b>test</b> <b>test</b>.", snippets[0]);
 
@@ -499,7 +498,7 @@
     assertEquals(1, topDocs.totalHits);
     UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, indexAnalyzer);
     highlighter.setMaxLength(Integer.MAX_VALUE - 1);
-    String snippets[] = highlighter.highlight("body", query, topDocs, 2);
+    String[] snippets = highlighter.highlight("body", query, topDocs, 2);
     assertEquals(1, snippets.length);
     assertFalse(snippets[0].contains("<b>both</b>"));
     ir.close();
@@ -529,7 +528,7 @@
     Query query = new TermQuery(new Term("body", "test"));
     TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);
     assertEquals(1, topDocs.totalHits);
-    String snippets[] = highlighter.highlight("body", query, topDocs, 2);
+    String[] snippets = highlighter.highlight("body", query, topDocs, 2);
     assertEquals(1, snippets.length);
     assertEquals("This is a <b>test</b>.  Just highlighting from postings. This is also a much sillier <b>test</b>.  Feel free to <b>test</b> <b>test</b> <b>test</b> <b>test</b> <b>test</b> <b>test</b> <b>test</b>.", snippets[0]);
 
@@ -560,7 +559,7 @@
     int[] docIDs = new int[2];
     docIDs[0] = hits[0].doc;
     docIDs[1] = hits[1].doc;
-    String snippets[] = highlighter.highlightFields(new String[]{"body"}, query, docIDs, new int[]{1}).get("body");
+    String[] snippets = highlighter.highlightFields(new String[]{"body"}, query, docIDs, 1).get("body");
     assertEquals(2, snippets.length);
     assertEquals("Just a test <b>highlighting</b> from postings. ", snippets[0]);
     assertEquals("<b>Highlighting</b> the first term. ", snippets[1]);
@@ -602,7 +601,7 @@
     Query query = new TermQuery(new Term("body", "test"));
     TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);
     assertEquals(1, topDocs.totalHits);
-    String snippets[] = highlighter.highlight("body", query, topDocs, 2);
+    String[] snippets = highlighter.highlight("body", query, topDocs, 2);
     assertEquals(1, snippets.length);
     assertEquals("This is a <b>test</b>.  Just highlighting from postings. This is also a much sillier <b>test</b>.  Feel free to <b>test</b> <b>test</b> <b>test</b> <b>test</b> <b>test</b> <b>test</b> <b>test</b>.", snippets[0]);
 
@@ -629,7 +628,7 @@
     UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, indexAnalyzer);
     Query query = new TermQuery(new Term("body", "highlighting"));
     int[] docIDs = new int[]{0};
-    String snippets[] = highlighter.highlightFields(new String[]{"body"}, query, docIDs, new int[]{2}).get("body");
+    String[] snippets = highlighter.highlightFields(new String[]{"body"}, query, docIDs, 2).get("body");
     assertEquals(1, snippets.length);
     assertEquals("test this is.  another sentence this test has.  ", snippets[0]);
 
@@ -661,7 +660,7 @@
     Query query = new TermQuery(new Term("body", "highlighting"));
     int[] docIDs = new int[1];
     docIDs[0] = docID;
-    String snippets[] = highlighter.highlightFields(new String[]{"body"}, query, docIDs, new int[]{2}).get("body");
+    String[] snippets = highlighter.highlightFields(new String[]{"body"}, query, docIDs, 2).get("body");
     assertEquals(1, snippets.length);
     assertEquals(" ", snippets[0]);
 
@@ -690,7 +689,7 @@
     highlighter.setMaxNoHighlightPassages(0);// don't want any default summary
     Query query = new TermQuery(new Term("body", "highlighting"));
     int[] docIDs = new int[]{0};
-    String snippets[] = highlighter.highlightFields(new String[]{"body"}, query, docIDs, new int[]{2}).get("body");
+    String[] snippets = highlighter.highlightFields(new String[]{"body"}, query, docIDs, 2).get("body");
     assertEquals(1, snippets.length);
     assertNull(snippets[0]);
 
@@ -722,7 +721,7 @@
     };
     Query query = new TermQuery(new Term("body", "highlighting"));
     int[] docIDs = new int[]{0};
-    String snippets[] = highlighter.highlightFields(new String[]{"body"}, query, docIDs, new int[]{2}).get("body");
+    String[] snippets = highlighter.highlightFields(new String[]{"body"}, query, docIDs, 2).get("body");
     assertEquals(1, snippets.length);
     assertEquals("test this is.  another sentence this test has.  far away is that planet.", snippets[0]);
 
@@ -749,7 +748,7 @@
     UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, indexAnalyzer);
     Query query = new TermQuery(new Term("bogus", "highlighting"));
     int[] docIDs = new int[]{0};
-    String snippets[] = highlighter.highlightFields(new String[]{"bogus"}, query, docIDs, new int[]{2}).get("bogus");
+    String[] snippets = highlighter.highlightFields(new String[]{"bogus"}, query, docIDs, 2).get("bogus");
     assertEquals(1, snippets.length);
     assertNull(snippets[0]);
 
@@ -778,7 +777,7 @@
     Query query = new TermQuery(new Term("body", "highlighting"));
     int[] docIDs = new int[1];
     docIDs[0] = docID;
-    String snippets[] = highlighter.highlightFields(new String[]{"body"}, query, docIDs, new int[]{2}).get("body");
+    String[] snippets = highlighter.highlightFields(new String[]{"body"}, query, docIDs, 2).get("body");
     assertEquals(1, snippets.length);
     assertEquals("   ", snippets[0]);
 
@@ -807,7 +806,7 @@
     Query query = new TermQuery(new Term("body", "highlighting"));
     int[] docIDs = new int[1];
     docIDs[0] = docID;
-    String snippets[] = highlighter.highlightFields(new String[]{"body"}, query, docIDs, new int[]{2}).get("body");
+    String[] snippets = highlighter.highlightFields(new String[]{"body"}, query, docIDs, 2).get("body");
     assertEquals(1, snippets.length);
     assertNull(snippets[0]);
 
@@ -843,7 +842,7 @@
     TopDocs hits = searcher.search(query, numDocs);
     assertEquals(numDocs, hits.totalHits);
 
-    String snippets[] = highlighter.highlight("body", query, hits);
+    String[] snippets = highlighter.highlight("body", query, hits);
     assertEquals(numDocs, snippets.length);
     for (int hit = 0; hit < numDocs; hit++) {
       Document doc = searcher.doc(hits.scoreDocs[hit].doc);
@@ -875,12 +874,17 @@
     iw.close();
 
     IndexSearcher searcher = newSearcher(ir);
-    UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, indexAnalyzer);
+    UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, indexAnalyzer) {
+      @Override
+      protected Integer getMaxPassageCount(String field) {
+        return field.equals("title") ? 1 : null;
+      }
+    };
     BooleanQuery query = new BooleanQuery.Builder()
         .add(new TermQuery(new Term("body", "test")), BooleanClause.Occur.SHOULD)
         .add(new TermQuery(new Term("title", "test")), BooleanClause.Occur.SHOULD)
         .build();
-    Map<String, String[]> snippets = highlighter.highlightFields(new String[]{"title", "body"}, query, new int[]{0}, new int[]{1, 2});
+    Map<String, String[]> snippets = highlighter.highlightFields(new String[]{"title", "body"}, query, new int[]{0}, 2);
     String titleHighlight = snippets.get("title")[0];
     String bodyHighlight = snippets.get("body")[0];
     assertEquals("This is a <b>test</b>. ", titleHighlight);
@@ -911,7 +915,7 @@
     Query query = new TermQuery(new Term("body", "highlighting"));
     TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);
     assertEquals(1, topDocs.totalHits);
-    String snippets[] = highlighter.highlight("body", query, topDocs);
+    String[] snippets = highlighter.highlight("body", query, topDocs);
     assertEquals(1, snippets.length);
     assertEquals("Just&#32;a&#32;test&#32;<b>highlighting</b>&#32;from&#32;&lt;i&gt;postings&lt;&#x2F;i&gt;&#46;&#32;", snippets[0]);
 
@@ -954,7 +958,7 @@
     assertEquals(1, topDocs.totalHits);
     int[] docIDs = new int[1];
     docIDs[0] = topDocs.scoreDocs[0].doc;
-    Map<String, Object[]> snippets = highlighter.highlightFieldsAsObjects(new String[]{"body"}, query, docIDs, new int[]{1});
+    Map<String, Object[]> snippets = highlighter.highlightFieldsAsObjects(new String[]{"body"}, query, docIDs, 1);
     Object[] bodySnippets = snippets.get("body");
     assertEquals(1, bodySnippets.length);
     assertTrue(Arrays.equals(new String[]{"blah blah", "Just a test <b>highlighting</b> from postings. "}, (String[]) bodySnippets[0]));
Index: lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/FieldHighlighter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/FieldHighlighter.java	(revision 872ed81cc971646c10fdb27b23ffe6ca7decd91a)
+++ lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/FieldHighlighter.java	(revision )
@@ -20,6 +20,7 @@
 import java.text.BreakIterator;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Comparator;
 import java.util.List;
 import java.util.PriorityQueue;
 
@@ -144,15 +145,8 @@
     }
     offsetsEnumQueue.add(new OffsetsEnum(null, EMPTY)); // a sentinel for termination
 
-    PriorityQueue<Passage> passageQueue = new PriorityQueue<>(Math.min(64, maxPassages + 1), (left, right) -> {
-      if (left.getScore() < right.getScore()) {
-        return -1;
-      } else if (left.getScore() > right.getScore()) {
-        return 1;
-      } else {
-        return left.getStartOffset() - right.getStartOffset();
-      }
-    });
+    PriorityQueue<Passage> passageQueue = new PriorityQueue<>(Math.min(64, maxPassages + 1),
+        Comparator.comparingDouble(Passage::getScore).thenComparing(Comparator.comparingInt(Passage::getStartOffset)));
     Passage passage = new Passage(); // the current passage in-progress.  Will either get reset or added to queue.
 
     OffsetsEnum off;
@@ -195,8 +189,8 @@
         passage.setStartOffset(Math.max(breakIterator.preceding(start + 1), 0));
         passage.setEndOffset(Math.min(breakIterator.following(start), contentLength));
       }
-      // Add this term to the passage.
-      int tf = 0;
+      // Add this term to the passage, and keep doing so for repeated occurrences in this passage.
+      int tf = 0; // num occurrences within passage
       while (true) {
         tf++;
         BytesRef term = off.getTerm();// a reference; safe to refer to
@@ -221,8 +215,8 @@
     for (Passage p : passages) {
       p.sort();
     }
-    // sort in ascending order
-    Arrays.sort(passages, (left, right) -> left.getStartOffset() - right.getStartOffset());
+    // sort in start offset order
+    Arrays.sort(passages, Comparator.comparingInt(Passage::getStartOffset));
     return passages;
   }
 
Index: lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetHighlightTask.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetHighlightTask.java	(revision 872ed81cc971646c10fdb27b23ffe6ca7decd91a)
+++ lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetHighlightTask.java	(revision )
@@ -226,12 +226,9 @@
     IndexSearcher lastSearcher;
     UnifiedHighlighter.OffsetSource offsetSource; // null means auto select
     String[] fields = hlFields.toArray(new String[hlFields.size()]);
-    int[] maxPassages;
 
     UnifiedHLImpl(final UnifiedHighlighter.OffsetSource offsetSource) {
       this.offsetSource = offsetSource;
-      maxPassages = new int[hlFields.size()];
-      Arrays.fill(maxPassages, maxFrags);
     }
 
     private void reset(IndexSearcher searcher) {
@@ -254,7 +251,7 @@
     @Override
     public void withTopDocs(IndexSearcher searcher, Query q, TopDocs hits) throws Exception {
       reset(searcher);
-      Map<String, String[]> result = highlighter.highlightFields(fields, q, hits, maxPassages);
+      Map<String, String[]> result = highlighter.highlightFields(fields, q, hits, maxFrags);
       preventOptimizeAway = result.size();
     }
   }
Index: lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterMTQ.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterMTQ.java	(revision 872ed81cc971646c10fdb27b23ffe6ca7decd91a)
+++ lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterMTQ.java	(revision )
@@ -120,7 +120,7 @@
     Query query = new WildcardQuery(new Term("body", "te*"));
     TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);
     assertEquals(2, topDocs.totalHits);
-    String snippets[] = highlighter.highlight("body", query, topDocs);
+    String[] snippets = highlighter.highlight("body", query, topDocs);
     assertEquals(2, snippets.length);
     assertEquals("This is a <b>test</b>.", snippets[0]);
     assertEquals("<b>Test</b> a one sentence document.", snippets[1]);
@@ -169,7 +169,7 @@
     Query query = new BoostQuery(new PrefixQuery(new Term("body", "te")), 2.0f);
     TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);
     assertEquals(2, topDocs.totalHits);
-    String snippets[] = highlighter.highlight("body", query, topDocs);
+    String[] snippets = highlighter.highlight("body", query, topDocs);
     assertEquals(2, snippets.length);
     assertEquals("This is a <b>test</b>.", snippets[0]);
     assertEquals("<b>Test</b> a one sentence document.", snippets[1]);
@@ -209,7 +209,7 @@
     Query query = new RegexpQuery(new Term("body", "te.*"));
     TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);
     assertEquals(2, topDocs.totalHits);
-    String snippets[] = highlighter.highlight("body", query, topDocs);
+    String[] snippets = highlighter.highlight("body", query, topDocs);
     assertEquals(2, snippets.length);
     assertEquals("This is a <b>test</b>.", snippets[0]);
     assertEquals("<b>Test</b> a one sentence document.", snippets[1]);
@@ -249,7 +249,7 @@
     Query query = new FuzzyQuery(new Term("body", "tets"), 1);
     TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);
     assertEquals(2, topDocs.totalHits);
-    String snippets[] = highlighter.highlight("body", query, topDocs);
+    String[] snippets = highlighter.highlight("body", query, topDocs);
     assertEquals(2, snippets.length);
     assertEquals("This is a <b>test</b>.", snippets[0]);
     assertEquals("<b>Test</b> a one sentence document.", snippets[1]);
@@ -298,7 +298,7 @@
     Query query = TermRangeQuery.newStringRange("body", "ta", "tf", true, true);
     TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);
     assertEquals(2, topDocs.totalHits);
-    String snippets[] = highlighter.highlight("body", query, topDocs);
+    String[] snippets = highlighter.highlight("body", query, topDocs);
     assertEquals(2, snippets.length);
     assertEquals("This is a <b>test</b>.", snippets[0]);
     assertEquals("<b>Test</b> a one sentence document.", snippets[1]);
@@ -400,7 +400,7 @@
         .build();
     TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);
     assertEquals(2, topDocs.totalHits);
-    String snippets[] = highlighter.highlight("body", query, topDocs);
+    String[] snippets = highlighter.highlight("body", query, topDocs);
     assertEquals(2, snippets.length);
     assertEquals("This is a <b>test</b>.", snippets[0]);
     assertEquals("<b>Test</b> a one sentence document.", snippets[1]);
@@ -443,7 +443,7 @@
         .build();
     TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);
     assertEquals(2, topDocs.totalHits);
-    String snippets[] = highlighter.highlight("body", query, topDocs);
+    String[] snippets = highlighter.highlight("body", query, topDocs);
     assertEquals(2, snippets.length);
     assertEquals("This is a <b>test</b>.", snippets[0]);
     assertEquals("<b>Test</b> a one sentence document.", snippets[1]);
@@ -471,7 +471,7 @@
     ConstantScoreQuery query = new ConstantScoreQuery(new WildcardQuery(new Term("body", "te*")));
     TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);
     assertEquals(2, topDocs.totalHits);
-    String snippets[] = highlighter.highlight("body", query, topDocs);
+    String[] snippets = highlighter.highlight("body", query, topDocs);
     assertEquals(2, snippets.length);
     assertEquals("This is a <b>test</b>.", snippets[0]);
     assertEquals("<b>Test</b> a one sentence document.", snippets[1]);
@@ -500,7 +500,7 @@
         Collections.singleton(new WildcardQuery(new Term("body", "te*"))), 0);
     TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);
     assertEquals(2, topDocs.totalHits);
-    String snippets[] = highlighter.highlight("body", query, topDocs);
+    String[] snippets = highlighter.highlight("body", query, topDocs);
     assertEquals(2, snippets.length);
     assertEquals("This is a <b>test</b>.", snippets[0]);
     assertEquals("<b>Test</b> a one sentence document.", snippets[1]);
@@ -530,7 +530,7 @@
         new SpanMultiTermQueryWrapper<>(new WildcardQuery(new Term("body", "te*"))), 2.0f);
     TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);
     assertEquals(2, topDocs.totalHits);
-    String snippets[] = highlighter.highlight("body", query, topDocs);
+    String[] snippets = highlighter.highlight("body", query, topDocs);
     assertEquals(2, snippets.length);
     assertEquals("This is a <b>test</b>.", snippets[0]);
     assertEquals("<b>Test</b> a one sentence document.", snippets[1]);
@@ -559,7 +559,7 @@
     Query query = new SpanOrQuery(new SpanQuery[]{childQuery});
     TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);
     assertEquals(2, topDocs.totalHits);
-    String snippets[] = highlighter.highlight("body", query, topDocs);
+    String[] snippets = highlighter.highlight("body", query, topDocs);
     assertEquals(2, snippets.length);
     assertEquals("This is a <b>test</b>.", snippets[0]);
     assertEquals("<b>Test</b> a one sentence document.", snippets[1]);
@@ -588,7 +588,7 @@
     Query query = new SpanNearQuery(new SpanQuery[]{childQuery, childQuery}, 0, false);
     TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);
     assertEquals(2, topDocs.totalHits);
-    String snippets[] = highlighter.highlight("body", query, topDocs);
+    String[] snippets = highlighter.highlight("body", query, topDocs);
     assertEquals(2, snippets.length);
     assertEquals("This is a <b>test</b>.", snippets[0]);
     assertEquals("<b>Test</b> a one sentence document.", snippets[1]);
@@ -618,7 +618,7 @@
     Query query = new SpanNotQuery(include, exclude);
     TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);
     assertEquals(2, topDocs.totalHits);
-    String snippets[] = highlighter.highlight("body", query, topDocs);
+    String[] snippets = highlighter.highlight("body", query, topDocs);
     assertEquals(2, snippets.length);
     assertEquals("This is a <b>test</b>.", snippets[0]);
     assertEquals("<b>Test</b> a one sentence document.", snippets[1]);
@@ -647,7 +647,7 @@
     Query query = new SpanFirstQuery(childQuery, 1000000);
     TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);
     assertEquals(2, topDocs.totalHits);
-    String snippets[] = highlighter.highlight("body", query, topDocs);
+    String[] snippets = highlighter.highlight("body", query, topDocs);
     assertEquals(2, snippets.length);
     assertEquals("This is a <b>test</b>.", snippets[0]);
     assertEquals("<b>Test</b> a one sentence document.", snippets[1]);
@@ -682,7 +682,7 @@
         .build();
     TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);
     assertEquals(1, topDocs.totalHits);
-    String snippets[] = highlighter.highlight("body", query, topDocs);
+    String[] snippets = highlighter.highlight("body", query, topDocs);
     assertEquals(1, snippets.length);
 
     // Default formatter just bolds each hit:
@@ -771,7 +771,7 @@
         .add(new PrefixQuery(new Term("body", "bra")), BooleanClause.Occur.MUST)
         .build();
     TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);
-    String snippets[] = highlighter.highlight("body", query, topDocs, 2);//ask for 2 but we'll only get 1
+    String[] snippets = highlighter.highlight("body", query, topDocs, 2);//ask for 2 but we'll only get 1
     assertArrayEquals(
         new String[]{"<b>Alpha</b> <b>Bravo</b> foo foo foo. "}, snippets
     );
@@ -804,7 +804,7 @@
         .add(new PrefixQuery(new Term("body", "bra")), BooleanClause.Occur.MUST)
         .build();
     TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);
-    String snippets[] = highlighter.highlight("body", query, topDocs, 2);//ask for 2 but we'll only get 1
+    String[] snippets = highlighter.highlight("body", query, topDocs, 2);//ask for 2 but we'll only get 1
     assertArrayEquals(
         new String[]{"<b>Alpha</b> <b>Bravo</b> <b>Bravado</b> foo foo foo."}, snippets
     );
@@ -862,7 +862,7 @@
     BooleanQuery query = queryBuilder.build();
     TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);
     try {
-      String snippets[] = highlighter.highlight("body", query, topDocs, 2);
+      String[] snippets = highlighter.highlight("body", query, topDocs, 2);
       // don't even care what the results are; just want to test exception behavior
       if (fieldType == UHTestHelper.reanalysisType) {
         fail("Expecting EXPECTED IOException");
@@ -907,7 +907,7 @@
     Query query = new PrefixQuery(new Term("body", "nonexistent"));
     int[] docIDs = new int[1];
     docIDs[0] = docID;
-    String snippets[] = highlighter.highlightFields(new String[]{"body"}, query, docIDs, new int[]{2}).get("body");
+    String[] snippets = highlighter.highlightFields(new String[]{"body"}, query, docIDs, 2).get("body");
     assertEquals(1, snippets.length);
     assertEquals(" ", snippets[0]);
 
@@ -936,7 +936,7 @@
     Query query = new PrefixQuery(new Term("body", "ab"));
     TopDocs topDocs = searcher.search(query, 10);
 
-    String snippets[] = highlighter.highlightFields(new String[]{"body"}, query, topDocs).get("body");
+    String[] snippets = highlighter.highlightFields(new String[]{"body"}, query, topDocs).get("body");
     Arrays.sort(snippets);
     assertEquals("[word <b>aberration</b>, word <b>absolve</b>]", Arrays.toString(snippets));
 
@@ -969,7 +969,7 @@
 
     int[] docIds = new int[]{docID};
 
-    String snippets[] = highlighter.highlightFields(new String[]{"body"}, query, docIds, new int[]{2}).get("body");
+    String[] snippets = highlighter.highlightFields(new String[]{"body"}, query, docIds, 2).get("body");
     assertEquals(1, snippets.length);
     assertEquals("iterate insect ipswitch illinois indirect", snippets[0]);
     ir.close();
@@ -1009,7 +1009,7 @@
 
     int[] docIds = new int[]{docId};
 
-    String snippets[] = highlighter.highlightFields(new String[]{"body"}, query, docIds, new int[]{2}).get("body");
+    String[] snippets = highlighter.highlightFields(new String[]{"body"}, query, docIds, 2).get("body");
     assertEquals(1, snippets.length);
     assertEquals("alpha bravo charlie delta echo <b>foxtrot</b> golf hotel india juliet", snippets[0]);
     ir.close();
Index: lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter.java	(revision 872ed81cc971646c10fdb27b23ffe6ca7decd91a)
+++ lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter.java	(revision )
@@ -66,7 +66,7 @@
  * A Highlighter that can get offsets from either
  * postings ({@link IndexOptions#DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS}),
  * term vectors ({@link FieldType#setStoreTermVectorOffsets(boolean)}),
- * or via re-analyzing text.
+ * or via re-analyzing text.  The mode is detected automatically but it can be made explicit.
  * <p>
  * This highlighter treats the single original document as the whole corpus, and then scores individual
  * passages as if they were documents in this corpus. It uses a {@link BreakIterator} to find
@@ -76,8 +76,9 @@
  * into a {@link Passage}, and then scores each Passage using a separate {@link PassageScorer}.
  * Passages are finally formatted into highlighted snippets with a {@link PassageFormatter}.
  * <p>
- * You can customize the behavior by calling some of the setters, or by subclassing and overriding some methods.
- * Some important hooks:
+ * You can customize the behavior by calling some of the setters, or by subclassing and overriding some
+ * get-prefixed methods.  They usually take a field name parameter, which can be used to vary a setting across
+ * fields. Some important hooks:
  * <ul>
  * <li>{@link #getBreakIterator(String)}: Customize how the text is divided into passages.
  * <li>{@link #getScorer(String)}: Customize how passages are ranked.
@@ -289,6 +290,14 @@
     return defaultMaxNoHighlightPassages;
   }
 
+  /**
+   * Overrides the {@code maxPassages} parameter to be different on a per-field basis. By default it returns null,
+   * and thus doesn't override.
+   */
+  protected Integer getMaxPassageCount(String field) {
+    return null;
+  }
+
   /**
    * Limits the amount of field value pre-fetching until this threshold is passed.  The highlighter
    * internally highlights in batches of documents sized on the sum field value length (in chars) of the fields
@@ -381,16 +390,13 @@
   /**
    * Highlights the top passages from a single field.
    *
-   * @param field   field name to highlight.
-   *                Must have a stored string value and also be indexed with offsets.
+   * @param field   field name to highlight. Must have a stored string value.
    * @param query   query to highlight.
    * @param topDocs TopDocs containing the summary result documents to highlight.
    * @return Array of formatted snippets corresponding to the documents in <code>topDocs</code>.
    * If no highlights were found for a document, the
    * first sentence for the field will be returned.
    * @throws IOException              if an I/O error occurred during processing
-   * @throws IllegalArgumentException if <code>field</code> was indexed without
-   *                                  {@link IndexOptions#DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS}
    */
   public String[] highlight(String field, Query query, TopDocs topDocs) throws IOException {
     return highlight(field, query, topDocs, 1);
@@ -409,11 +415,9 @@
    * first {@code maxPassages} sentences from the
    * field will be returned.
    * @throws IOException              if an I/O error occurred during processing
-   * @throws IllegalArgumentException if <code>field</code> was indexed without
-   *                                  {@link IndexOptions#DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS}
    */
   public String[] highlight(String field, Query query, TopDocs topDocs, int maxPassages) throws IOException {
-    Map<String, String[]> res = highlightFields(new String[]{field}, query, topDocs, new int[]{maxPassages});
+    Map<String, String[]> res = highlightFields(new String[]{field}, query, topDocs, maxPassages);
     return res.get(field);
   }
 
@@ -437,13 +441,9 @@
    * If no highlights were found for a document, the
    * first sentence from the field will be returned.
    * @throws IOException              if an I/O error occurred during processing
-   * @throws IllegalArgumentException if <code>field</code> was indexed without
-   *                                  {@link IndexOptions#DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS}
    */
   public Map<String, String[]> highlightFields(String[] fields, Query query, TopDocs topDocs) throws IOException {
-    int maxPassages[] = new int[fields.length];
-    Arrays.fill(maxPassages, 1);
-    return highlightFields(fields, query, topDocs, maxPassages);
+    return highlightFields(fields, query, topDocs, 1);
   }
 
   /**
@@ -461,7 +461,7 @@
    * @param fields      field names to highlight. Must have a stored string value.
    * @param query       query to highlight.
    * @param topDocs     TopDocs containing the summary result documents to highlight.
-   * @param maxPassages The maximum number of top-N ranked passages per-field used to
+   * @param maxPassages The maximum number of top-N ranked passages used to
    *                    form the highlighted snippets.
    * @return Map keyed on field name, containing the array of formatted snippets
    * corresponding to the documents in <code>topDocs</code>.
@@ -469,10 +469,8 @@
    * first {@code maxPassages} sentences from the
    * field will be returned.
    * @throws IOException              if an I/O error occurred during processing
-   * @throws IllegalArgumentException if <code>field</code> was indexed without
-   *                                  {@link IndexOptions#DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS}
    */
-  public Map<String, String[]> highlightFields(String[] fields, Query query, TopDocs topDocs, int[] maxPassages)
+  public Map<String, String[]> highlightFields(String[] fields, Query query, TopDocs topDocs, int maxPassages)
       throws IOException {
     final ScoreDoc scoreDocs[] = topDocs.scoreDocs;
     int docids[] = new int[scoreDocs.length];
@@ -487,10 +485,10 @@
    * Highlights the top-N passages from multiple fields,
    * for the provided int[] docids.
    *
-   * @param fieldsIn      field names to highlight. Must have a stored string value.
+   * @param fields        field names to highlight. Must have a stored string value.
    * @param query         query to highlight.
-   * @param docidsIn      containing the document IDs to highlight.
-   * @param maxPassagesIn The maximum number of top-N ranked passages per-field used to
+   * @param docIds        containing the document IDs to highlight.
+   * @param maxPassages   The maximum number of top-N ranked passages used to
    *                      form the highlighted snippets.
    * @return Map keyed on field name, containing the array of formatted snippets
    * corresponding to the documents in <code>docidsIn</code>.
@@ -498,13 +496,11 @@
    * first {@code maxPassages} from the field will
    * be returned.
    * @throws IOException              if an I/O error occurred during processing
-   * @throws IllegalArgumentException if <code>field</code> was indexed without
-   *                                  {@link IndexOptions#DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS}
    */
-  public Map<String, String[]> highlightFields(String[] fieldsIn, Query query, int[] docidsIn, int[] maxPassagesIn)
+  public Map<String, String[]> highlightFields(String[] fields, Query query, int[] docIds, int maxPassages)
       throws IOException {
     Map<String, String[]> snippets = new HashMap<>();
-    for (Map.Entry<String, Object[]> ent : highlightFieldsAsObjects(fieldsIn, query, docidsIn, maxPassagesIn).entrySet()) {
+    for (Map.Entry<String, Object[]> ent : highlightFieldsAsObjects(fields, query, docIds, maxPassages).entrySet()) {
       Object[] snippetObjects = ent.getValue();
       String[] snippetStrings = new String[snippetObjects.length];
       snippets.put(ent.getKey(), snippetStrings);
@@ -528,7 +524,7 @@
    * @param fieldsIn      field names to highlight. Must have a stored string value.
    * @param query         query to highlight.
    * @param docIdsIn      containing the document IDs to highlight.
-   * @param maxPassagesIn The maximum number of top-N ranked passages per-field used to
+   * @param maxPassages   The maximum number of top-N ranked passages used to
    *                      form the highlighted snippets.
    * @return Map keyed on field name, containing the array of formatted snippets
    * corresponding to the documents in <code>docIdsIn</code>.
@@ -540,13 +536,10 @@
    *                                  {@link IndexOptions#DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS}
    */
   protected Map<String, Object[]> highlightFieldsAsObjects(String[] fieldsIn, Query query, int[] docIdsIn,
-                                                           int[] maxPassagesIn) throws IOException {
+                                                           int maxPassages) throws IOException {
     if (fieldsIn.length < 1) {
       throw new IllegalArgumentException("fieldsIn must not be empty");
     }
-    if (fieldsIn.length != maxPassagesIn.length) {
-      throw new IllegalArgumentException("invalid number of maxPassagesIn");
-    }
     if (searcher == null) {
       throw new IllegalStateException("This method requires that an indexSearcher was passed in the "
           + "constructor.  Perhaps you mean to call highlightWithoutSearcher?");
@@ -559,10 +552,10 @@
     int[] docInIndexes = new int[docIds.length]; // fill in ascending order; points into docIdsIn[]
     copyAndSortDocIdsWithIndex(docIdsIn, docIds, docInIndexes); // latter 2 are "out" params
 
-    // Sort fields w/ maxPassages pair: (copy input arrays since we sort in-place)
+    // Sort fields: (copy input arrays since we sort in-place)
     final String fields[] = new String[fieldsIn.length];
-    final int maxPassages[] = new int[maxPassagesIn.length];
-    copyAndSortFieldsWithMaxPassages(fieldsIn, maxPassagesIn, fields, maxPassages); // latter 2 are "out" params
+    System.arraycopy(fieldsIn, 0, fields, 0, fieldsIn.length);
+    Arrays.sort(fields);
 
     // Init field highlighters (where most of the highlight logic lives, and on a per field basis)
     Set<Term> queryTerms = extractTerms(query);
@@ -570,7 +563,10 @@
     int numTermVectors = 0;
     int numPostings = 0;
     for (int f = 0; f < fields.length; f++) {
-      FieldHighlighter fieldHighlighter = getFieldHighlighter(fields[f], query, queryTerms, maxPassages[f]);
+      Integer fieldMaxPassagesObj = getMaxPassageCount(fields[f]);
+      int fieldMaxPassages = fieldMaxPassagesObj != null ? fieldMaxPassagesObj : maxPassages;
+
+      FieldHighlighter fieldHighlighter = getFieldHighlighter(fields[f], query, queryTerms, fieldMaxPassages);
       fieldHighlighters[f] = fieldHighlighter;
 
       switch (fieldHighlighter.getOffsetSource()) {
@@ -666,29 +662,6 @@
     }
   }
 
-  private void copyAndSortFieldsWithMaxPassages(String[] fieldsIn, int[] maxPassagesIn, final String[] fields,
-                                                final int[] maxPassages) {
-    System.arraycopy(fieldsIn, 0, fields, 0, fieldsIn.length);
-    System.arraycopy(maxPassagesIn, 0, maxPassages, 0, maxPassagesIn.length);
-    new InPlaceMergeSorter() {
-      @Override
-      protected void swap(int i, int j) {
-        String tmp = fields[i];
-        fields[i] = fields[j];
-        fields[j] = tmp;
-        int tmp2 = maxPassages[i];
-        maxPassages[i] = maxPassages[j];
-        maxPassages[j] = tmp2;
-      }
-
-      @Override
-      protected int compare(int i, int j) {
-        return fields[i].compareTo(fields[j]);
-      }
-
-    }.sort(0, fields.length);
-  }
-
   private void copyAndSortDocIdsWithIndex(int[] docIdsIn, final int[] docIds, final int[] docInIndexes) {
     System.arraycopy(docIdsIn, 0, docIds, 0, docIdsIn.length);
     for (int i = 0; i < docInIndexes.length; i++) {
