Index: src/test/org/apache/lucene/analysis/TestAnalyzers.java
===================================================================
--- src/test/org/apache/lucene/analysis/TestAnalyzers.java	(revision 894202)
+++ src/test/org/apache/lucene/analysis/TestAnalyzers.java	(working copy)
@@ -154,6 +154,7 @@
    * @deprecated remove this when lucene 3.0 "broken unicode 4" support
    * is no longer needed.
    */
+  @Deprecated
   private static class LowerCaseWhitespaceAnalyzerBWComp extends Analyzer {
 
     @Override
@@ -215,6 +216,7 @@
    * @deprecated remove this test when lucene 3.0 "broken unicode 4" support
    * is no longer needed.
    */
+  @Deprecated
   public void testLowerCaseFilterBWComp() throws IOException {
     Analyzer a = new LowerCaseWhitespaceAnalyzerBWComp();
     // BMP
Index: src/test/org/apache/lucene/analysis/TestCharArraySet.java
===================================================================
--- src/test/org/apache/lucene/analysis/TestCharArraySet.java	(revision 894202)
+++ src/test/org/apache/lucene/analysis/TestCharArraySet.java	(working copy)
@@ -254,6 +254,7 @@
    * @deprecated remove this test when lucene 3.0 "broken unicode 4" support is
    *             no longer needed.
    */
+  @Deprecated
   public void testSupplementaryCharsBWCompat() {
     String missing = "Term %s is missing in the set";
     String falsePos = "Term %s is in the set but shouldn't";
@@ -285,6 +286,7 @@
    * @deprecated remove this test when lucene 3.0 "broken unicode 4" support is
    *             no longer needed.
    */
+  @Deprecated
   public void testSingleHighSurrogateBWComapt() {
     String missing = "Term %s is missing in the set";
     String falsePos = "Term %s is in the set but shouldn't";
Index: src/test/org/apache/lucene/search/CheckHits.java
===================================================================
--- src/test/org/apache/lucene/search/CheckHits.java	(revision 894202)
+++ src/test/org/apache/lucene/search/CheckHits.java	(working copy)
@@ -456,6 +456,7 @@
      * @deprecated
      * @see CheckHits#EXPLAIN_SCORE_TOLERANCE_DELTA
      */
+    @Deprecated
     public static float SCORE_TOLERANCE_DELTA = 0.00005f;
 
     Query q;
Index: src/test/org/apache/lucene/util/_TestUtil.java
===================================================================
--- src/test/org/apache/lucene/util/_TestUtil.java	(revision 894202)
+++ src/test/org/apache/lucene/util/_TestUtil.java	(working copy)
@@ -84,6 +84,7 @@
   /** Use only for testing.
    *  @deprecated -- in 3.0 we can use Arrays.toString
    *  instead */
+  @Deprecated
   public static String arrayToString(int[] array) {
     StringBuilder buf = new StringBuilder();
     buf.append("[");
@@ -100,6 +101,7 @@
   /** Use only for testing.
    *  @deprecated -- in 3.0 we can use Arrays.toString
    *  instead */
+  @Deprecated
   public static String arrayToString(Object[] array) {
     StringBuilder buf = new StringBuilder();
     buf.append("[");
Index: src/test/org/apache/lucene/util/cache/TestSimpleLRUCache.java
===================================================================
--- src/test/org/apache/lucene/util/cache/TestSimpleLRUCache.java	(revision 894202)
+++ src/test/org/apache/lucene/util/cache/TestSimpleLRUCache.java	(working copy)
@@ -18,6 +18,7 @@
 */
 
 /** @deprecated */
+@Deprecated
 public class TestSimpleLRUCache extends BaseTestLRU {
   public void testLRUCache() throws Exception {
     final int n = 100;
Index: src/java/org/apache/lucene/analysis/standard/StandardTokenizer.java
===================================================================
--- src/java/org/apache/lucene/analysis/standard/StandardTokenizer.java	(revision 894202)
+++ src/java/org/apache/lucene/analysis/standard/StandardTokenizer.java	(working copy)
@@ -71,6 +71,7 @@
    * @deprecated this solves a bug where HOSTs that end with '.' are identified
    *             as ACRONYMs.
    */
+  @Deprecated
   public static final int ACRONYM_DEP       = 8;
 
   /** String token types that correspond to token type int constants */
@@ -227,6 +228,7 @@
    *
    * @deprecated Remove in 3.X and make true the only valid value
    */
+  @Deprecated
   public boolean isReplaceInvalidAcronym() {
     return replaceInvalidAcronym;
   }
@@ -238,6 +240,7 @@
    *
    * See https://issues.apache.org/jira/browse/LUCENE-1068
    */
+  @Deprecated
   public void setReplaceInvalidAcronym(boolean replaceInvalidAcronym) {
     this.replaceInvalidAcronym = replaceInvalidAcronym;
   }
Index: src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl.java
===================================================================
--- src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl.java	(revision 894202)
+++ src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl.java	(working copy)
@@ -354,6 +354,7 @@
  * @deprecated this solves a bug where HOSTs that end with '.' are identified
  *             as ACRONYMs.
  */
+@Deprecated
 public static final int ACRONYM_DEP       = StandardTokenizer.ACRONYM_DEP;
 
 public static final String [] TOKEN_TYPES = StandardTokenizer.TOKEN_TYPES;
Index: src/java/org/apache/lucene/analysis/Analyzer.java
===================================================================
--- src/java/org/apache/lucene/analysis/Analyzer.java	(revision 894202)
+++ src/java/org/apache/lucene/analysis/Analyzer.java	(working copy)
@@ -85,11 +85,13 @@
   }
 
   /** @deprecated */
+  @Deprecated
   protected boolean overridesTokenStreamMethod = false;
 
   /** @deprecated This is only present to preserve
    *  back-compat of classes that subclass a core analyzer
    *  and override tokenStream but not reusableTokenStream */
+  @Deprecated
   protected void setOverridesTokenStreamMethod(Class<? extends Analyzer> baseClass) {
     try {
       Method m = this.getClass().getMethod("tokenStream", String.class, Reader.class);
Index: src/java/org/apache/lucene/analysis/ISOLatin1AccentFilter.java
===================================================================
--- src/java/org/apache/lucene/analysis/ISOLatin1AccentFilter.java	(revision 894202)
+++ src/java/org/apache/lucene/analysis/ISOLatin1AccentFilter.java	(working copy)
@@ -31,6 +31,7 @@
  * This class is included for use with existing
  * indexes and will be removed in a future release (possibly Lucene 4.0).
  */
+@Deprecated
 public final class ISOLatin1AccentFilter extends TokenFilter {
   public ISOLatin1AccentFilter(TokenStream input) {
     super(input);
Index: src/java/org/apache/lucene/analysis/CharArraySet.java
===================================================================
--- src/java/org/apache/lucene/analysis/CharArraySet.java	(revision 894202)
+++ src/java/org/apache/lucene/analysis/CharArraySet.java	(working copy)
@@ -117,6 +117,7 @@
    *          otherwise <code>true</code>.
    * @deprecated use {@link #CharArraySet(Version, int, boolean)} instead
    */
+  @Deprecated
   public CharArraySet(int startSize, boolean ignoreCase) {
     this(Version.LUCENE_30, startSize, ignoreCase);
   }
@@ -131,6 +132,7 @@
    *          otherwise <code>true</code>.
    * @deprecated use {@link #CharArraySet(Version, Collection, boolean)} instead         
    */  
+  @Deprecated
   public CharArraySet(Collection<? extends Object> c, boolean ignoreCase) {
     this(Version.LUCENE_30, c.size(), ignoreCase);
     addAll(c);
@@ -381,6 +383,7 @@
    *         preserved.
    * @deprecated use {@link #copy(Version, Set)} instead.
    */
+  @Deprecated
   public static CharArraySet copy(final Set<?> set) {
     if(set == EMPTY_SET)
       return EMPTY_SET;
Index: src/java/org/apache/lucene/analysis/LowerCaseFilter.java
===================================================================
--- src/java/org/apache/lucene/analysis/LowerCaseFilter.java	(revision 894202)
+++ src/java/org/apache/lucene/analysis/LowerCaseFilter.java	(working copy)
@@ -50,6 +50,7 @@
   /**
    * @deprecated Use {@link #LowerCaseFilter(Version, TokenStream)} instead.
    */
+  @Deprecated
   public LowerCaseFilter(TokenStream in) {
     this(Version.LUCENE_30, in);
   }
Index: src/java/org/apache/lucene/analysis/StopFilter.java
===================================================================
--- src/java/org/apache/lucene/analysis/StopFilter.java	(revision 894202)
+++ src/java/org/apache/lucene/analysis/StopFilter.java	(working copy)
@@ -64,6 +64,7 @@
    * @param ignoreCase if true, all words are lower cased first
    * @deprecated use {@link #StopFilter(Version, TokenStream, Set, boolean)} instead
    */
+  @Deprecated
   public StopFilter(boolean enablePositionIncrements, TokenStream input, Set<?> stopWords, boolean ignoreCase)
   {
     this(Version.LUCENE_30, enablePositionIncrements, input, stopWords, ignoreCase);
@@ -117,6 +118,7 @@
    * @see #makeStopSet(Version, java.lang.String[])
    * @deprecated use {@link #StopFilter(Version, TokenStream, Set)} instead
    */
+  @Deprecated
   public StopFilter(boolean enablePositionIncrements, TokenStream in, Set<?> stopWords) {
     this(Version.LUCENE_CURRENT, enablePositionIncrements, in, stopWords, false);
   }
@@ -148,6 +150,7 @@
    * @see #makeStopSet(Version, java.lang.String[], boolean) passing false to ignoreCase
    * @deprecated use {@link #makeStopSet(Version, String...)} instead
    */
+  @Deprecated
   public static final Set<Object> makeStopSet(String... stopWords) {
     return makeStopSet(Version.LUCENE_30, stopWords, false);
   }
@@ -176,6 +179,7 @@
    * @see #makeStopSet(Version, java.lang.String[], boolean) passing false to ignoreCase
    * @deprecated use {@link #makeStopSet(Version, List)} instead
    */
+  @Deprecated
   public static final Set<Object> makeStopSet(List<?> stopWords) {
     return makeStopSet(Version.LUCENE_30, stopWords, false);
   }
@@ -202,6 +206,7 @@
    * @return a Set containing the words
    * @deprecated use {@link #makeStopSet(Version, String[], boolean)} instead;
    */  
+  @Deprecated
   public static final Set<Object> makeStopSet(String[] stopWords, boolean ignoreCase) {
     return makeStopSet(Version.LUCENE_30, stopWords, ignoreCase);
   }
@@ -226,6 +231,7 @@
    * @return A Set ({@link CharArraySet}) containing the words
    * @deprecated use {@link #makeStopSet(Version, List, boolean)} instead
    */
+  @Deprecated
   public static final Set<Object> makeStopSet(List<?> stopWords, boolean ignoreCase){
     return makeStopSet(Version.LUCENE_30, stopWords, ignoreCase);
   }
@@ -271,6 +277,7 @@
    * or later, it returns true.
    * @deprecated use {@link #StopFilter(Version, TokenStream, Set)} instead
    */
+  @Deprecated
   public static boolean getEnablePositionIncrementsVersionDefault(Version matchVersion) {
     return matchVersion.onOrAfter(Version.LUCENE_29);
   }
Index: src/java/org/apache/lucene/index/FieldsReader.java
===================================================================
--- src/java/org/apache/lucene/index/FieldsReader.java	(revision 894202)
+++ src/java/org/apache/lucene/index/FieldsReader.java	(working copy)
@@ -412,6 +412,7 @@
     private int toRead;
     private long pointer;
     /** @deprecated Only kept for backward-compatbility with <3.0 indexes. Will be removed in 4.0. */
+    @Deprecated
     private boolean isCompressed;
 
     public LazyField(String name, Field.Store store, int toRead, long pointer, boolean isBinary, boolean isCompressed) {
Index: src/java/org/apache/lucene/index/FieldsWriter.java
===================================================================
--- src/java/org/apache/lucene/index/FieldsWriter.java	(revision 894202)
+++ src/java/org/apache/lucene/index/FieldsWriter.java	(working copy)
@@ -32,6 +32,7 @@
   static final byte FIELD_IS_BINARY = 0x2;
   
   /** @deprecated Kept for backwards-compatibility with <3.0 indexes; will be removed in 4.0 */
+  @Deprecated
   static final byte FIELD_IS_COMPRESSED = 0x4;
 
   // Original format
Index: src/java/org/apache/lucene/index/SegmentReader.java
===================================================================
--- src/java/org/apache/lucene/index/SegmentReader.java	(revision 894202)
+++ src/java/org/apache/lucene/index/SegmentReader.java	(working copy)
@@ -1276,6 +1276,7 @@
    * We do it with R/W access for the tests (BW compatibility)
    * @deprecated Remove this when tests are fixed!
    */
+  @Deprecated
   static SegmentReader getOnlySegmentReader(Directory dir) throws IOException {
     return getOnlySegmentReader(IndexReader.open(dir,false));
   }
Index: src/java/org/apache/lucene/store/IndexInput.java
===================================================================
--- src/java/org/apache/lucene/store/IndexInput.java	(revision 894202)
+++ src/java/org/apache/lucene/store/IndexInput.java	(working copy)
@@ -146,6 +146,7 @@
    *                instead, and construct the string
    *                from those utf8 bytes
    */
+  @Deprecated
   public void readChars(char[] buffer, int start, int length)
        throws IOException {
     final int end = start + length;
@@ -174,6 +175,7 @@
    * @deprecated this method operates on old "modified utf8" encoded
    *             strings
    */
+  @Deprecated
   public void skipChars(int length) throws IOException{
     for (int i = 0; i < length; i++) {
       byte b = readByte();
Index: src/java/org/apache/lucene/store/IndexOutput.java
===================================================================
--- src/java/org/apache/lucene/store/IndexOutput.java	(revision 894202)
+++ src/java/org/apache/lucene/store/IndexOutput.java	(working copy)
@@ -114,6 +114,7 @@
    * @deprecated -- please pre-convert to utf8 bytes
    * instead or use {@link #writeString}
    */
+  @Deprecated
   public void writeChars(String s, int start, int length)
        throws IOException {
     final int end = start + length;
@@ -139,6 +140,7 @@
    * @param length the number of characters in the sequence
    * @deprecated -- please pre-convert to utf8 bytes instead or use {@link #writeString}
    */
+  @Deprecated
   public void writeChars(char[] s, int start, int length)
     throws IOException {
     final int end = start + length;
Index: src/java/org/apache/lucene/store/NoLockFactory.java
===================================================================
--- src/java/org/apache/lucene/store/NoLockFactory.java	(revision 894202)
+++ src/java/org/apache/lucene/store/NoLockFactory.java	(working copy)
@@ -39,6 +39,7 @@
    * @see #getNoLockFactory()
    */
   // make private in 4.0!
+  @Deprecated
   public NoLockFactory() {}
 
   public static NoLockFactory getNoLockFactory() {
Index: src/java/org/apache/lucene/store/FSDirectory.java
===================================================================
--- src/java/org/apache/lucene/store/FSDirectory.java	(revision 894202)
+++ src/java/org/apache/lucene/store/FSDirectory.java	(working copy)
@@ -373,6 +373,7 @@
   }
 
   /** @deprecated Use {@link #getDirectory} instead. */
+  @Deprecated
   public File getFile() {
     return getDirectory();
   }
Index: src/java/org/apache/lucene/util/Parameter.java
===================================================================
--- src/java/org/apache/lucene/util/Parameter.java	(revision 894202)
+++ src/java/org/apache/lucene/util/Parameter.java	(working copy)
@@ -27,6 +27,7 @@
  * A serializable Enum class.
  * @deprecated Use Java 5 enum, will be removed in a later Lucene 3.x release.
  */
+@Deprecated
 @SuppressWarnings("serial")
 public abstract class Parameter implements Serializable
 {
Index: src/java/org/apache/lucene/util/cache/SimpleLRUCache.java
===================================================================
--- src/java/org/apache/lucene/util/cache/SimpleLRUCache.java	(revision 894202)
+++ src/java/org/apache/lucene/util/cache/SimpleLRUCache.java	(working copy)
@@ -28,6 +28,7 @@
  * @deprecated Lucene's internal use of this class has now
  * switched to {@link DoubleBarrelLRUCache}.
  */
+@Deprecated
 public class SimpleLRUCache<K,V> extends SimpleMapCache<K,V> {
   private final static float LOADFACTOR = 0.75f;
 
Index: src/java/org/apache/lucene/util/cache/SimpleMapCache.java
===================================================================
--- src/java/org/apache/lucene/util/cache/SimpleMapCache.java	(revision 894202)
+++ src/java/org/apache/lucene/util/cache/SimpleMapCache.java	(working copy)
@@ -29,6 +29,7 @@
  * @deprecated Lucene's internal use of this class has now
  * switched to {@link DoubleBarrelLRUCache}.
  */
+@Deprecated
 public class SimpleMapCache<K,V> extends Cache<K,V> {
   protected Map<K,V> map;
   
Index: src/java/org/apache/lucene/document/NumberTools.java
===================================================================
--- src/java/org/apache/lucene/document/NumberTools.java	(revision 894202)
+++ src/java/org/apache/lucene/document/NumberTools.java	(working copy)
@@ -44,6 +44,7 @@
  * This class is included for use with existing
  * indices and will be removed in a future release (possibly Lucene 4.0).
  */
+@Deprecated
 public class NumberTools {
 
     private static final int RADIX = 36;
Index: src/java/org/apache/lucene/document/DateField.java
===================================================================
--- src/java/org/apache/lucene/document/DateField.java	(revision 894202)
+++ src/java/org/apache/lucene/document/DateField.java	(working copy)
@@ -57,6 +57,7 @@
  * This class is included for use with existing
  * indices and will be removed in a future release (possibly Lucene 4.0).
  */
+@Deprecated
 public class DateField {
   
   private DateField() {}
Index: src/demo/org/apache/lucene/demo/html/HTMLParser.jj
===================================================================
--- src/demo/org/apache/lucene/demo/html/HTMLParser.jj	(revision 894202)
+++ src/demo/org/apache/lucene/demo/html/HTMLParser.jj	(working copy)
@@ -70,6 +70,7 @@
   /**
    * @deprecated Use HTMLParser(FileInputStream) instead
    */
+  @Deprecated
   public HTMLParser(File file) throws FileNotFoundException {
     this(new FileInputStream(file));
   }
Index: contrib/snowball/src/test/org/apache/lucene/analysis/snowball/TestSnowball.java
===================================================================
--- contrib/snowball/src/test/org/apache/lucene/analysis/snowball/TestSnowball.java	(revision 894202)
+++ contrib/snowball/src/test/org/apache/lucene/analysis/snowball/TestSnowball.java	(working copy)
@@ -73,6 +73,7 @@
    * Test turkish lowercasing (old buggy behavior)
    * @deprecated Remove this when support for 3.0 indexes is no longer required
    */
+  @Deprecated
   public void testTurkishBWComp() throws Exception {
     Analyzer a = new SnowballAnalyzer(Version.LUCENE_30, "Turkish");
     // AĞACI in turkish lowercases to ağacı, but with lowercase filter ağaci.
Index: contrib/snowball/src/java/org/apache/lucene/analysis/snowball/SnowballAnalyzer.java
===================================================================
--- contrib/snowball/src/java/org/apache/lucene/analysis/snowball/SnowballAnalyzer.java	(revision 894202)
+++ contrib/snowball/src/java/org/apache/lucene/analysis/snowball/SnowballAnalyzer.java	(working copy)
@@ -55,6 +55,7 @@
    * Builds the named analyzer with the given stop words.
    * @deprecated Use {@link #SnowballAnalyzer(Version, String, Set)} instead.  
    */
+  @Deprecated
   public SnowballAnalyzer(Version matchVersion, String name, String[] stopWords) {
     this(matchVersion, name);
     stopSet = StopFilter.makeStopSet(matchVersion, stopWords);
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/MultiFieldQueryParserWrapper.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/MultiFieldQueryParserWrapper.java	(revision 894202)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/MultiFieldQueryParserWrapper.java	(working copy)
@@ -36,6 +36,7 @@
  *             used along the transition from the old query parser to the new
  *             one
  */
+@Deprecated
 public class MultiFieldQueryParserWrapper extends QueryParserWrapper {
 
   /**
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/QueryParserWrapper.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/QueryParserWrapper.java	(revision 894202)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/QueryParserWrapper.java	(working copy)
@@ -64,6 +64,7 @@
  *             used along the transition from the old query parser to the new
  *             one
  */
+@Deprecated
 public class QueryParserWrapper {
 
   /**
Index: contrib/misc/src/java/org/apache/lucene/misc/ChainedFilter.java
===================================================================
--- contrib/misc/src/java/org/apache/lucene/misc/ChainedFilter.java	(revision 894202)
+++ contrib/misc/src/java/org/apache/lucene/misc/ChainedFilter.java	(working copy)
@@ -156,6 +156,7 @@
      *  switch to a different DocIdSet implementation yourself.
      *  This method will be removed in Lucene 4.0 
      **/
+    @Deprecated
     protected final DocIdSet finalResult(OpenBitSetDISI result, int maxDocs) {
         return result;
     }
Index: contrib/spatial/src/java/org/apache/lucene/spatial/geometry/shape/DistanceApproximation.java
===================================================================
--- contrib/spatial/src/java/org/apache/lucene/spatial/geometry/shape/DistanceApproximation.java	(revision 894202)
+++ contrib/spatial/src/java/org/apache/lucene/spatial/geometry/shape/DistanceApproximation.java	(working copy)
@@ -27,6 +27,7 @@
  * @deprecated This has been replaced with more accurate
  * math in {@link LLRect}. This class will be removed in a future release.
  */
+@Deprecated
 public class DistanceApproximation
 {
   private double m_testLat;
Index: contrib/highlighter/src/java/org/apache/lucene/search/highlight/TextFragment.java
===================================================================
--- contrib/highlighter/src/java/org/apache/lucene/search/highlight/TextFragment.java	(revision 894202)
+++ contrib/highlighter/src/java/org/apache/lucene/search/highlight/TextFragment.java	(working copy)
@@ -41,6 +41,7 @@
    * @deprecated Use {@link #TextFragment(CharSequence, int, int)} instead.
    * This constructor will be removed in Lucene 4.0
    */
+	@Deprecated
 	public TextFragment(StringBuffer markedUpText,int textStartPos, int fragNum)
 	{
 		this.markedUpText=markedUpText;
Index: contrib/analyzers/common/src/test/org/apache/lucene/analysis/cz/TestCzechAnalyzer.java
===================================================================
--- contrib/analyzers/common/src/test/org/apache/lucene/analysis/cz/TestCzechAnalyzer.java	(revision 894202)
+++ contrib/analyzers/common/src/test/org/apache/lucene/analysis/cz/TestCzechAnalyzer.java	(working copy)
@@ -40,6 +40,7 @@
   /**
    * @deprecated Remove this test when support for 3.0 indexes is no longer needed.
    */
+  @Deprecated
   public void testStopWordLegacy() throws Exception {
     assertAnalyzesTo(new CzechAnalyzer(Version.LUCENE_30), "Pokud mluvime o volnem", 
         new String[] { "mluvime", "volnem" });
@@ -53,6 +54,7 @@
   /**
    * @deprecated Remove this test when support for 3.0 indexes is no longer needed.
    */
+  @Deprecated
   public void testReusableTokenStreamLegacy() throws Exception {
     Analyzer analyzer = new CzechAnalyzer(Version.LUCENE_30);
     assertAnalyzesToReuse(analyzer, "Pokud mluvime o volnem", new String[] { "mluvime", "volnem" });
@@ -69,6 +71,7 @@
    * An input stream that always throws IOException for testing.
    * @deprecated Remove this class when the loadStopWords method is removed.
    */
+  @Deprecated
   private class UnreliableInputStream extends InputStream {
     @Override
     public int read() throws IOException {
@@ -82,6 +85,7 @@
    * this would cause a NPE when it is time to create the StopFilter.
    * @deprecated Remove this test when the loadStopWords method is removed.
    */
+  @Deprecated
   public void testInvalidStopWordFile() throws Exception {
     CzechAnalyzer cz = new CzechAnalyzer(Version.LUCENE_30);
     cz.loadStopWords(new UnreliableInputStream(), "UTF-8");
@@ -94,6 +98,7 @@
    * when using reusable token streams.
    * @deprecated Remove this test when the loadStopWords method is removed.
    */
+  @Deprecated
   public void testStopWordFileReuse() throws Exception {
     CzechAnalyzer cz = new CzechAnalyzer(Version.LUCENE_30);
     assertAnalyzesToReuse(cz, "Česká Republika", 
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase.java	(revision 894202)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase.java	(working copy)
@@ -80,6 +80,7 @@
   /**
    * @deprecated use {@link #CompoundWordTokenFilterBase(Version, TokenStream, String[], int, int, int, boolean)} instead
    */
+  @Deprecated
   protected CompoundWordTokenFilterBase(TokenStream input, String[] dictionary, int minWordSize, int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {
     this(Version.LUCENE_30, input, makeDictionary(dictionary),minWordSize,minSubwordSize,maxSubwordSize, onlyLongestMatch);
   }
@@ -87,6 +88,7 @@
   /**
    * @deprecated use {@link #CompoundWordTokenFilterBase(Version, TokenStream, String[], boolean)} instead
    */
+  @Deprecated
   protected CompoundWordTokenFilterBase(TokenStream input, String[] dictionary, boolean onlyLongestMatch) {
     this(Version.LUCENE_30, input, makeDictionary(dictionary),DEFAULT_MIN_WORD_SIZE,DEFAULT_MIN_SUBWORD_SIZE,DEFAULT_MAX_SUBWORD_SIZE, onlyLongestMatch);
   }
@@ -94,6 +96,7 @@
   /**
    * @deprecated use {@link #CompoundWordTokenFilterBase(Version, TokenStream, Set, boolean)} instead
    */
+  @Deprecated
   protected CompoundWordTokenFilterBase(TokenStream input, Set<?> dictionary, boolean onlyLongestMatch) {
     this(Version.LUCENE_30, input, dictionary,DEFAULT_MIN_WORD_SIZE,DEFAULT_MIN_SUBWORD_SIZE,DEFAULT_MAX_SUBWORD_SIZE, onlyLongestMatch);
   }
@@ -101,6 +104,7 @@
   /**
    * @deprecated use {@link #CompoundWordTokenFilterBase(Version, TokenStream, String[])} instead
    */
+  @Deprecated
   protected CompoundWordTokenFilterBase(TokenStream input, String[] dictionary) {
     this(Version.LUCENE_30, input, makeDictionary(dictionary),DEFAULT_MIN_WORD_SIZE,DEFAULT_MIN_SUBWORD_SIZE,DEFAULT_MAX_SUBWORD_SIZE, false);
   }
@@ -108,6 +112,7 @@
   /**
    * @deprecated use {@link #CompoundWordTokenFilterBase(Version, TokenStream, Set)} instead
    */
+  @Deprecated
   protected CompoundWordTokenFilterBase(TokenStream input, Set<?> dictionary) {
     this(Version.LUCENE_30, input, dictionary,DEFAULT_MIN_WORD_SIZE,DEFAULT_MIN_SUBWORD_SIZE,DEFAULT_MAX_SUBWORD_SIZE, false);
   }
@@ -115,6 +120,7 @@
   /**
    * @deprecated use {@link #CompoundWordTokenFilterBase(Version, TokenStream, Set, int, int, int, boolean)} instead
    */
+  @Deprecated
   protected CompoundWordTokenFilterBase(TokenStream input, Set<?> dictionary, int minWordSize, int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {
     this(Version.LUCENE_30, input, dictionary, minWordSize, minSubwordSize, maxSubwordSize, onlyLongestMatch);
   }
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilter.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilter.java	(revision 894202)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilter.java	(working copy)
@@ -46,6 +46,7 @@
    * @param onlyLongestMatch Add only the longest matching subword to the stream
    * @deprecated use {@link #DictionaryCompoundWordTokenFilter(Version, TokenStream, String[], int, int, int, boolean)} instead
    */
+  @Deprecated
   public DictionaryCompoundWordTokenFilter(TokenStream input, String[] dictionary,
       int minWordSize, int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {
     super(Version.LUCENE_30, input, dictionary, minWordSize, minSubwordSize, maxSubwordSize, onlyLongestMatch);
@@ -58,6 +59,7 @@
    * @param dictionary the word dictionary to match against
    * @deprecated use {@link #DictionaryCompoundWordTokenFilter(Version, TokenStream, String[])} instead 
    */
+  @Deprecated
   public DictionaryCompoundWordTokenFilter(TokenStream input, String[] dictionary) {
     super(Version.LUCENE_30, input, dictionary);
   }
@@ -70,6 +72,7 @@
    *        lower case strings.
    * @deprecated use {@link #DictionaryCompoundWordTokenFilter(Version, TokenStream, Set)} instead 
    */
+  @Deprecated
   public DictionaryCompoundWordTokenFilter(TokenStream input, Set dictionary) {
     super(Version.LUCENE_30, input, dictionary);
   }
@@ -86,6 +89,7 @@
    * @param onlyLongestMatch Add only the longest matching subword to the stream
    * @deprecated use {@link #DictionaryCompoundWordTokenFilter(Version, TokenStream, Set, int, int, int, boolean)} instead
    */
+  @Deprecated
   public DictionaryCompoundWordTokenFilter(TokenStream input, Set dictionary,
       int minWordSize, int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {
     super(Version.LUCENE_30, input, dictionary, minWordSize, minSubwordSize, maxSubwordSize, onlyLongestMatch);
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter.java	(revision 894202)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter.java	(working copy)
@@ -167,6 +167,7 @@
    * @param onlyLongestMatch Add only the longest matching subword to the stream
    * @deprecated use {@link #HyphenationCompoundWordTokenFilter(Version, TokenStream, HyphenationTree, String[], int, int, int, boolean)} instead. 
    */
+  @Deprecated
   public HyphenationCompoundWordTokenFilter(TokenStream input,
       HyphenationTree hyphenator, String[] dictionary, int minWordSize,
       int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {
@@ -182,6 +183,7 @@
    * @param dictionary the word dictionary to match against
    * @deprecated use {@link #HyphenationCompoundWordTokenFilter(Version, TokenStream, HyphenationTree, String[])} instead.
    */
+  @Deprecated
   public HyphenationCompoundWordTokenFilter(TokenStream input,
       HyphenationTree hyphenator, String[] dictionary) {
     this(Version.LUCENE_30, input, hyphenator, makeDictionary(dictionary), DEFAULT_MIN_WORD_SIZE,
@@ -197,6 +199,7 @@
    *        lower case strings. 
    * @deprecated use {@link #HyphenationCompoundWordTokenFilter(Version, TokenStream, HyphenationTree, Set)} instead.        
    */
+  @Deprecated
   public HyphenationCompoundWordTokenFilter(TokenStream input,
       HyphenationTree hyphenator, Set dictionary) {
     this(Version.LUCENE_30, input, hyphenator, dictionary, DEFAULT_MIN_WORD_SIZE,
@@ -218,6 +221,7 @@
    * @param onlyLongestMatch Add only the longest matching subword to the stream
    * @deprecated use {@link #HyphenationCompoundWordTokenFilter(Version, TokenStream, HyphenationTree, Set, int, int, int, boolean)} instead.
    */
+  @Deprecated
   public HyphenationCompoundWordTokenFilter(TokenStream input,
       HyphenationTree hyphenator, Set dictionary, int minWordSize,
       int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianLowerCaseFilter.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianLowerCaseFilter.java	(revision 894202)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianLowerCaseFilter.java	(working copy)
@@ -29,6 +29,7 @@
  * @deprecated Use {@link LowerCaseFilter} instead, which has the same
  *  functionality. This filter will be removed in Lucene 4.0
  */
+@Deprecated
 public final class RussianLowerCaseFilter extends TokenFilter
 {
     private TermAttribute termAtt;
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianAnalyzer.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianAnalyzer.java	(revision 894202)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianAnalyzer.java	(working copy)
@@ -78,6 +78,7 @@
      * Builds an analyzer with the given stop words.
      * @deprecated use {@link #RussianAnalyzer(Version, Set)} instead
      */
+    @Deprecated
     public RussianAnalyzer(Version matchVersion, String... stopwords) {
       this(matchVersion, StopFilter.makeStopSet(matchVersion, stopwords));
     }
@@ -100,6 +101,7 @@
      * TODO: create a Set version of this ctor
      * @deprecated use {@link #RussianAnalyzer(Version, Set)} instead
      */
+    @Deprecated
     public RussianAnalyzer(Version matchVersion, Map<?,?> stopwords)
     {
       this(matchVersion, stopwords.keySet());
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/fa/PersianAnalyzer.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/fa/PersianAnalyzer.java	(revision 894202)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/fa/PersianAnalyzer.java	(working copy)
@@ -134,6 +134,7 @@
    * Builds an analyzer with the given stop words.
    * @deprecated use {@link #PersianAnalyzer(Version, Set)} instead
    */
+  @Deprecated
   public PersianAnalyzer(Version matchVersion, String... stopwords) {
     this(matchVersion, StopFilter.makeStopSet(matchVersion, stopwords));
   }
@@ -142,6 +143,7 @@
    * Builds an analyzer with the given stop words.
    * @deprecated use {@link #PersianAnalyzer(Version, Set)} instead
    */
+  @Deprecated
   public PersianAnalyzer(Version matchVersion, Hashtable<?, ?> stopwords) {
     this(matchVersion, stopwords.keySet());
   }
@@ -151,6 +153,7 @@
    * using {@link #STOPWORDS_COMMENT}
    * @deprecated use {@link #PersianAnalyzer(Version, Set)} instead
    */
+  @Deprecated
   public PersianAnalyzer(Version matchVersion, File stopwords) throws IOException {
     this(matchVersion, WordlistLoader.getWordSet(stopwords, STOPWORDS_COMMENT));
   }
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/de/GermanAnalyzer.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/de/GermanAnalyzer.java	(revision 894202)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/de/GermanAnalyzer.java	(working copy)
@@ -58,6 +58,7 @@
    * @deprecated use {@link #getDefaultStopSet()} instead
    */
   //TODO make this private in 3.1
+  @Deprecated
   public final static String[] GERMAN_STOP_WORDS = {
     "einer", "eine", "eines", "einem", "einen",
     "der", "die", "das", "dass", "daß",
@@ -140,6 +141,7 @@
    * Builds an analyzer with the given stop words.
    * @deprecated use {@link #GermanAnalyzer(Version, Set)}
    */
+  @Deprecated
   public GermanAnalyzer(Version matchVersion, String... stopwords) {
     this(matchVersion, StopFilter.makeStopSet(matchVersion, stopwords));
   }
@@ -148,6 +150,7 @@
    * Builds an analyzer with the given stop words.
    * @deprecated use {@link #GermanAnalyzer(Version, Set)}
    */
+  @Deprecated
   public GermanAnalyzer(Version matchVersion, Map<?,?> stopwords) {
     this(matchVersion, stopwords.keySet());
     
@@ -157,6 +160,7 @@
    * Builds an analyzer with the given stop words.
    * @deprecated use {@link #GermanAnalyzer(Version, Set)}
    */
+  @Deprecated
   public GermanAnalyzer(Version matchVersion, File stopwords) throws IOException {
     this(matchVersion, WordlistLoader.getWordSet(stopwords));
   }
@@ -165,6 +169,7 @@
    * Builds an exclusionlist from an array of Strings.
    * @deprecated use {@link #GermanAnalyzer(Version, Set, Set)} instead
    */
+  @Deprecated
   public void setStemExclusionTable(String[] exclusionlist) {
     exclusionSet = StopFilter.makeStopSet(matchVersion, exclusionlist);
     setPreviousTokenStream(null); // force a new stemmer to be created
@@ -174,6 +179,7 @@
    * Builds an exclusionlist from a {@link Map}
    * @deprecated use {@link #GermanAnalyzer(Version, Set, Set)} instead
    */
+  @Deprecated
   public void setStemExclusionTable(Map<?,?> exclusionlist) {
     exclusionSet = new HashSet<Object>(exclusionlist.keySet());
     setPreviousTokenStream(null); // force a new stemmer to be created
@@ -183,6 +189,7 @@
    * Builds an exclusionlist from the words contained in the given file.
    * @deprecated use {@link #GermanAnalyzer(Version, Set, Set)} instead
    */
+  @Deprecated
   public void setStemExclusionTable(File exclusionlist) throws IOException {
     exclusionSet = WordlistLoader.getWordSet(exclusionlist);
     setPreviousTokenStream(null); // force a new stemmer to be created
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/el/GreekAnalyzer.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/el/GreekAnalyzer.java	(revision 894202)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/el/GreekAnalyzer.java	(working copy)
@@ -102,6 +102,7 @@
      * @param stopwords Array of stopwords to use.
      * @deprecated use {@link #GreekAnalyzer(Version, Set)} instead
      */
+    @Deprecated
     public GreekAnalyzer(Version matchVersion, String... stopwords)
     {
       this(matchVersion, StopFilter.makeStopSet(matchVersion, stopwords));
@@ -111,6 +112,7 @@
      * Builds an analyzer with the given stop words.
      * @deprecated use {@link #GreekAnalyzer(Version, Set)} instead
      */
+    @Deprecated
     public GreekAnalyzer(Version matchVersion, Map<?,?> stopwords)
     {
       this(matchVersion, stopwords.keySet());
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/ar/ArabicAnalyzer.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/ar/ArabicAnalyzer.java	(revision 894202)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/ar/ArabicAnalyzer.java	(working copy)
@@ -70,6 +70,7 @@
    * The comment character in the stopwords file.  All lines prefixed with this will be ignored
    * @deprecated use {@link WordlistLoader#getWordSet(File, String)} directly  
    */
+  @Deprecated
   public static final String STOPWORDS_COMMENT = "#";
   
   /**
@@ -137,6 +138,7 @@
    * Builds an analyzer with the given stop words.
    * @deprecated use {@link #ArabicAnalyzer(Version, Set)} instead
    */
+  @Deprecated
   public ArabicAnalyzer( Version matchVersion, String... stopwords ) {
     this(matchVersion, StopFilter.makeStopSet(matchVersion, stopwords ));
   }
@@ -145,6 +147,7 @@
    * Builds an analyzer with the given stop words.
    * @deprecated use {@link #ArabicAnalyzer(Version, Set)} instead
    */
+  @Deprecated
   public ArabicAnalyzer( Version matchVersion, Hashtable<?,?> stopwords ) {
     this(matchVersion, stopwords.keySet());
   }
@@ -153,6 +156,7 @@
    * Builds an analyzer with the given stop words.  Lines can be commented out using {@link #STOPWORDS_COMMENT}
    * @deprecated use {@link #ArabicAnalyzer(Version, Set)} instead
    */
+  @Deprecated
   public ArabicAnalyzer( Version matchVersion, File stopwords ) throws IOException {
     this(matchVersion, WordlistLoader.getWordSet( stopwords, STOPWORDS_COMMENT));
   }
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/br/BrazilianAnalyzer.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/br/BrazilianAnalyzer.java	(revision 894231)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/br/BrazilianAnalyzer.java	(working copy)
@@ -56,6 +56,7 @@
 	 * @deprecated use {@link #getDefaultStopSet()} instead
 	 */
   // TODO make this private in 3.1
+	@Deprecated
 	public final static String[] BRAZILIAN_STOP_WORDS = {
       "a","ainda","alem","ambas","ambos","antes",
       "ao","aonde","aos","apos","aquele","aqueles",
@@ -143,6 +144,7 @@
 	 * Builds an analyzer with the given stop words.
 	 * @deprecated use {@link #BrazilianAnalyzer(Version, Set)} instead
 	 */
+  @Deprecated
   public BrazilianAnalyzer(Version matchVersion, String... stopwords) {
     this(matchVersion, StopFilter.makeStopSet(matchVersion, stopwords));
   }
@@ -151,6 +153,7 @@
    * Builds an analyzer with the given stop words. 
    * @deprecated use {@link #BrazilianAnalyzer(Version, Set)} instead
    */
+  @Deprecated
   public BrazilianAnalyzer(Version matchVersion, Map<?,?> stopwords) {
     this(matchVersion, stopwords.keySet());
   }
@@ -159,6 +162,7 @@
    * Builds an analyzer with the given stop words.
    * @deprecated use {@link #BrazilianAnalyzer(Version, Set)} instead
    */
+  @Deprecated
   public BrazilianAnalyzer(Version matchVersion, File stopwords)
       throws IOException {
     this(matchVersion, WordlistLoader.getWordSet(stopwords));
@@ -168,6 +172,7 @@
 	 * Builds an exclusionlist from an array of Strings.
 	 * @deprecated use {@link #BrazilianAnalyzer(Version, Set, Set)} instead
 	 */
+	@Deprecated
 	public void setStemExclusionTable( String... exclusionlist ) {
 		excltable = StopFilter.makeStopSet( matchVersion, exclusionlist );
 		setPreviousTokenStream(null); // force a new stemmer to be created
@@ -176,6 +181,7 @@
 	 * Builds an exclusionlist from a {@link Map}.
 	 * @deprecated use {@link #BrazilianAnalyzer(Version, Set, Set)} instead
 	 */
+	@Deprecated
 	public void setStemExclusionTable( Map<?,?> exclusionlist ) {
 		excltable = new HashSet<Object>(exclusionlist.keySet());
 		setPreviousTokenStream(null); // force a new stemmer to be created
@@ -184,6 +190,7 @@
 	 * Builds an exclusionlist from the words contained in the given file.
 	 * @deprecated use {@link #BrazilianAnalyzer(Version, Set, Set)} instead
 	 */
+	@Deprecated
 	public void setStemExclusionTable( File exclusionlist ) throws IOException {
 		excltable = WordlistLoader.getWordSet( exclusionlist );
 		setPreviousTokenStream(null); // force a new stemmer to be created
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/cjk/CJKAnalyzer.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/cjk/CJKAnalyzer.java	(revision 894202)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/cjk/CJKAnalyzer.java	(working copy)
@@ -45,6 +45,7 @@
    */
   // TODO make this final in 3.1 -
   // this might be revised and merged with StopFilter stop words too
+  @Deprecated
   public final static String[] STOP_WORDS = {
     "a", "and", "are", "as", "at", "be",
     "but", "by", "for", "if", "in",
@@ -105,6 +106,7 @@
    * @param stopWords stop word array
    * @deprecated use {@link #CJKAnalyzer(Version, Set)} instead
    */
+  @Deprecated
   public CJKAnalyzer(Version matchVersion, String... stopWords) {
     stopTable = StopFilter.makeStopSet(matchVersion, stopWords);
     this.matchVersion = matchVersion;
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/ElisionFilter.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/ElisionFilter.java	(revision 894202)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/ElisionFilter.java	(working copy)
@@ -50,6 +50,7 @@
    * @param articles a set of articles
    * @deprecated use {@link #ElisionFilter(Version, TokenStream, Set)} instead
    */
+  @Deprecated
   public void setArticles(Version matchVersion, Set<?> articles) {
     this.articles = CharArraySet.unmodifiableSet(
         CharArraySet.copy(matchVersion, articles));
@@ -60,6 +61,7 @@
    * @param articles a set of articles
    * @deprecated use {@link #setArticles(Version, Set)} instead
    */
+  @Deprecated
   public void setArticles(Set<?> articles) {
     setArticles(Version.LUCENE_CURRENT, articles);
   }
@@ -74,6 +76,7 @@
    * Constructs an elision filter with standard stop words
    * @deprecated use {@link #ElisionFilter(Version, TokenStream)} instead
    */
+  @Deprecated
   protected ElisionFilter(TokenStream input) {
     this(Version.LUCENE_30, input);
   }
@@ -82,6 +85,7 @@
    * Constructs an elision filter with a Set of stop words
    * @deprecated use {@link #ElisionFilter(Version, TokenStream, Set)} instead
    */
+  @Deprecated
   public ElisionFilter(TokenStream input, Set<?> articles) {
     this(Version.LUCENE_30, input, articles);
   }
@@ -103,6 +107,7 @@
    * Constructs an elision filter with an array of stop words
    * @deprecated use {@link #ElisionFilter(Version, TokenStream, Set)} instead
    */
+  @Deprecated
   public ElisionFilter(TokenStream input, String[] articles) {
     this(Version.LUCENE_CURRENT, input,
         new CharArraySet(Version.LUCENE_CURRENT,
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer.java	(revision 894202)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer.java	(working copy)
@@ -66,6 +66,7 @@
    * @deprecated use {@link #getDefaultStopSet()} instead
    */
   // TODO make this private in 3.1
+  @Deprecated
   public final static String[] FRENCH_STOP_WORDS = {
     "a", "afin", "ai", "ainsi", "après", "attendu", "au", "aujourd", "auquel", "aussi",
     "autre", "autres", "aux", "auxquelles", "auxquels", "avait", "avant", "avec", "avoir",
@@ -160,6 +161,7 @@
    * Builds an analyzer with the given stop words.
    * @deprecated use {@link #FrenchAnalyzer(Version, Set)} instead
    */
+  @Deprecated
   public FrenchAnalyzer(Version matchVersion, String... stopwords) {
     this(matchVersion, StopFilter.makeStopSet(matchVersion, stopwords));
   }
@@ -169,6 +171,7 @@
    * @throws IOException
    * @deprecated use {@link #FrenchAnalyzer(Version, Set)} instead
    */
+  @Deprecated
   public FrenchAnalyzer(Version matchVersion, File stopwords) throws IOException {
     this(matchVersion, WordlistLoader.getWordSet(stopwords));
   }
@@ -177,6 +180,7 @@
    * Builds an exclusionlist from an array of Strings.
    * @deprecated use {@link #FrenchAnalyzer(Version, Set, Set)} instead
    */
+  @Deprecated
   public void setStemExclusionTable(String... exclusionlist) {
     excltable = StopFilter.makeStopSet(matchVersion, exclusionlist);
     setPreviousTokenStream(null); // force a new stemmer to be created
@@ -186,6 +190,7 @@
    * Builds an exclusionlist from a Map.
    * @deprecated use {@link #FrenchAnalyzer(Version, Set, Set)} instead
    */
+  @Deprecated
   public void setStemExclusionTable(Map<?,?> exclusionlist) {
     excltable = new HashSet<Object>(exclusionlist.keySet());
     setPreviousTokenStream(null); // force a new stemmer to be created
@@ -196,6 +201,7 @@
    * @throws IOException
    * @deprecated use {@link #FrenchAnalyzer(Version, Set, Set)} instead
    */
+  @Deprecated
   public void setStemExclusionTable(File exclusionlist) throws IOException {
     excltable = new HashSet<Object>(WordlistLoader.getWordSet(exclusionlist));
     setPreviousTokenStream(null); // force a new stemmer to be created
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer.java	(revision 894202)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer.java	(working copy)
@@ -57,6 +57,7 @@
    * List of typical Dutch stopwords.
    * @deprecated use {@link #getDefaultStopSet()} instead
    */
+  @Deprecated
   public final static String[] DUTCH_STOP_WORDS =
       {
         "de", "en", "van", "ik", "te", "dat", "die", "in", "een",
@@ -128,6 +129,7 @@
    * @param stopwords
    * @deprecated use {@link #DutchAnalyzer(Version, Set)} instead
    */
+  @Deprecated
   public DutchAnalyzer(Version matchVersion, String... stopwords) {
     this(matchVersion, StopFilter.makeStopSet(matchVersion, stopwords));
   }
@@ -138,6 +140,7 @@
    * @param stopwords
    * @deprecated use {@link #DutchAnalyzer(Version, Set)} instead
    */
+  @Deprecated
   public DutchAnalyzer(Version matchVersion, HashSet<?> stopwords) {
     this(matchVersion, (Set<?>)stopwords);
   }
@@ -148,6 +151,7 @@
    * @param stopwords
    * @deprecated use {@link #DutchAnalyzer(Version, Set)} instead
    */
+  @Deprecated
   public DutchAnalyzer(Version matchVersion, File stopwords) {
     // this is completely broken!
     try {
@@ -165,6 +169,7 @@
    * @param exclusionlist
    * @deprecated use {@link #DutchAnalyzer(Version, Set, Set)} instead
    */
+  @Deprecated
   public void setStemExclusionTable(String... exclusionlist) {
     excltable = StopFilter.makeStopSet(matchVersion, exclusionlist);
     setPreviousTokenStream(null); // force a new stemmer to be created
@@ -174,6 +179,7 @@
    * Builds an exclusionlist from a Hashtable.
    * @deprecated use {@link #DutchAnalyzer(Version, Set, Set)} instead
    */
+  @Deprecated
   public void setStemExclusionTable(HashSet<?> exclusionlist) {
     excltable = exclusionlist;
     setPreviousTokenStream(null); // force a new stemmer to be created
@@ -183,6 +189,7 @@
    * Builds an exclusionlist from the words contained in the given file.
    * @deprecated use {@link #DutchAnalyzer(Version, Set, Set)} instead
    */
+  @Deprecated
   public void setStemExclusionTable(File exclusionlist) {
     try {
       excltable = org.apache.lucene.analysis.WordlistLoader.getWordSet(exclusionlist);
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/reverse/ReverseStringFilter.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/reverse/ReverseStringFilter.java	(revision 894202)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/reverse/ReverseStringFilter.java	(working copy)
@@ -78,6 +78,7 @@
    * @deprecated use {@link #ReverseStringFilter(Version, TokenStream)} 
    *    instead. This constructor will be removed in Lucene 4.0
    */
+  @Deprecated
   public ReverseStringFilter(TokenStream in) {
     this(in, NOMARKER);
   }
@@ -95,6 +96,7 @@
    * @deprecated use {@link #ReverseStringFilter(Version, TokenStream, char)} 
    *    instead. This constructor will be removed in Lucene 4.0 
    */
+  @Deprecated
   public ReverseStringFilter(TokenStream in, char marker) {
     this(Version.LUCENE_30, in, marker);
   }
@@ -157,6 +159,7 @@
    * @deprecated use {@link #reverse(Version, String)} instead. This method 
    *    will be removed in Lucene 4.0
    */
+  @Deprecated
   public static String reverse( final String input ){
     return reverse(Version.LUCENE_30, input);
   }
@@ -180,6 +183,7 @@
    * @deprecated use {@link #reverse(Version, char[])} instead. This 
    *    method will be removed in Lucene 4.0
    */
+  @Deprecated
   public static void reverse( final char[] buffer ){
     reverse( buffer, 0, buffer.length );
   }
@@ -202,6 +206,7 @@
    * @deprecated use {@link #reverse(Version, char[], int)} instead. This 
    *    method will be removed in Lucene 4.0
    */
+  @Deprecated
   public static void reverse( final char[] buffer, final int len ){
     reverse( buffer, 0, len );
   }
@@ -229,6 +234,7 @@
    * @deprecated use {@link #reverse(Version, char[], int, int)} instead. This 
    *    method will be removed in Lucene 4.0
    */
+  @Deprecated
   public static void reverse(char[] buffer, int start, int len ) {
     reverseUnicode3(buffer, start, len);
   }
@@ -236,6 +242,7 @@
   /**
    * @deprecated Remove this when support for 3.0 indexes is no longer needed.
    */
+  @Deprecated
   private static void reverseUnicode3( char[] buffer, int start, int len ){
     if( len <= 1 ) return;
     int num = len>>1;
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/cz/CzechAnalyzer.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/cz/CzechAnalyzer.java	(revision 894202)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/cz/CzechAnalyzer.java	(working copy)
@@ -60,6 +60,7 @@
 	 * @deprecated use {@link #getDefaultStopSet()} instead
 	 */
   // TODO make this private in 3.1
+	@Deprecated
 	public final static String[] CZECH_STOP_WORDS = {
         "a","s","k","o","i","u","v","z","dnes","cz","t\u00edmto","bude\u0161","budem",
         "byli","jse\u0161","m\u016fj","sv\u00fdm","ta","tomto","tohle","tuto","tyto",
@@ -133,6 +134,7 @@
    * @param stopwords a stopword set
    * @deprecated use {@link #CzechAnalyzer(Version, Set)} instead
    */
+  @Deprecated
   public CzechAnalyzer(Version matchVersion, String... stopwords) {
     this(matchVersion, StopFilter.makeStopSet( matchVersion, stopwords ));
 	}
@@ -145,6 +147,7 @@
    * @param stopwords a stopword set
    * @deprecated use {@link #CzechAnalyzer(Version, Set)} instead
    */
+  @Deprecated
   public CzechAnalyzer(Version matchVersion, HashSet<?> stopwords) {
     this(matchVersion, (Set<?>)stopwords);
 	}
@@ -157,6 +160,7 @@
    * @param stopwords a file containing stopwords
    * @deprecated use {@link #CzechAnalyzer(Version, Set)} instead
    */
+  @Deprecated
   public CzechAnalyzer(Version matchVersion, File stopwords ) throws IOException {
     this(matchVersion, (Set<?>)WordlistLoader.getWordSet( stopwords ));
 	}
@@ -168,6 +172,7 @@
      * @deprecated use {@link WordlistLoader#getWordSet(Reader, String) }
      *             and {@link #CzechAnalyzer(Version, Set)} instead
      */
+    @Deprecated
     public void loadStopWords( InputStream wordfile, String encoding ) {
         setPreviousTokenStream(null); // force a new stopfilter to be created
         if ( wordfile == null ) {
Index: contrib/queries/src/java/org/apache/lucene/search/BooleanFilter.java
===================================================================
--- contrib/queries/src/java/org/apache/lucene/search/BooleanFilter.java	(revision 894202)
+++ contrib/queries/src/java/org/apache/lucene/search/BooleanFilter.java	(working copy)
@@ -117,6 +117,7 @@
    * switch to a different DocIdSet implementation yourself.
    * This method will be removed in Lucene 4.0 
    */
+  @Deprecated
   protected final DocIdSet finalResult(OpenBitSetDISI result, int maxDocs) {
     return result;
   }
