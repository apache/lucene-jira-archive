Index: solr/core/src/java/org/apache/solr/schema/BoolField.java
===================================================================
--- solr/core/src/java/org/apache/solr/schema/BoolField.java	(revision 1198995)
+++ solr/core/src/java/org/apache/solr/schema/BoolField.java	(working copy)
@@ -153,10 +153,9 @@
   public void write(TextResponseWriter writer, String name, IndexableField f) throws IOException {
     writer.writeBool(name, f.stringValue().charAt(0) == 'T');
   }
-}
 
 // TODO - this can be much more efficient - use OpenBitSet or Bits
-class BoolFieldSource extends ValueSource {
+private static class BoolFieldSource extends ValueSource {
   protected String field;
 
   public BoolFieldSource(String field) {
@@ -231,3 +230,4 @@
   };
 
 }
+}
Index: solr/core/src/java/org/apache/solr/schema/TrieField.java
===================================================================
--- solr/core/src/java/org/apache/solr/schema/TrieField.java	(revision 1198995)
+++ solr/core/src/java/org/apache/solr/schema/TrieField.java	(working copy)
@@ -569,9 +569,8 @@
     }
     return null;
   }
-}
 
-class TrieDateFieldSource extends LongFieldSource {
+private static class TrieDateFieldSource extends LongFieldSource {
 
   public TrieDateFieldSource(LongValuesCreator creator) {
     super(creator);
@@ -599,3 +598,4 @@
 }
 
 
+}
Index: solr/core/src/java/org/apache/solr/schema/SortableDoubleField.java
===================================================================
--- solr/core/src/java/org/apache/solr/schema/SortableDoubleField.java	(revision 1198995)
+++ solr/core/src/java/org/apache/solr/schema/SortableDoubleField.java	(working copy)
@@ -90,9 +90,8 @@
     String sval = f.stringValue();
     writer.writeDouble(name, NumberUtils.SortableStr2double(sval));
   }
-}
 
-class SortableDoubleFieldSource extends FieldCacheSource {
+private static class SortableDoubleFieldSource extends FieldCacheSource {
   protected double defVal;
 
   public SortableDoubleFieldSource(String field) {
@@ -204,3 +203,4 @@
 
 
 
+}
Index: solr/core/src/java/org/apache/solr/schema/DateField.java
===================================================================
--- solr/core/src/java/org/apache/solr/schema/DateField.java	(revision 1198995)
+++ solr/core/src/java/org/apache/solr/schema/DateField.java	(working copy)
@@ -442,11 +442,10 @@
             minInclusive, maxInclusive);
   }
 
-}
 
 
 
-class DateFieldSource extends FieldCacheSource {
+private static class DateFieldSource extends FieldCacheSource {
   // NOTE: this is bad for serialization... but we currently need the fieldType for toInternal()
   FieldType ft;
 
@@ -531,3 +530,4 @@
     return hcode + super.hashCode();
   };
 }
+}
Index: solr/core/src/java/org/apache/solr/schema/LatLonType.java
===================================================================
--- solr/core/src/java/org/apache/solr/schema/LatLonType.java	(revision 1198995)
+++ solr/core/src/java/org/apache/solr/schema/LatLonType.java	(working copy)
@@ -285,9 +285,8 @@
     throw new UnsupportedOperationException("LatLonType uses multiple fields.  field=" + field.getName());
   }
 
-}
 
-class LatLonValueSource extends VectorValueSource {
+private static class LatLonValueSource extends VectorValueSource {
   private final SchemaField sf;
 
   public LatLonValueSource(SchemaField sf, List<ValueSource> sources) {
@@ -310,7 +309,7 @@
 ////////////////////////////////////////////////////////////////////////////////////////////
 // TODO: recast as a value source that doesn't have to match all docs
 
-class SpatialDistanceQuery extends Query {
+private static class SpatialDistanceQuery extends Query {
   String origField;
   ValueSource latSource;
   ValueSource lonSource;
@@ -584,3 +583,4 @@
 }
 
 
+}
Index: solr/core/src/java/org/apache/solr/schema/PointType.java
===================================================================
--- solr/core/src/java/org/apache/solr/schema/PointType.java	(revision 1198995)
+++ solr/core/src/java/org/apache/solr/schema/PointType.java	(working copy)
@@ -205,10 +205,9 @@
     }
     return result;
   }
-}
 
 
-class PointTypeValueSource extends VectorValueSource {
+private static class PointTypeValueSource extends VectorValueSource {
   private final SchemaField sf;
   
   public PointTypeValueSource(SchemaField sf, List<ValueSource> sources) {
@@ -225,4 +224,5 @@
   public String description() {
     return name()+"("+sf.getName()+")";
   }
-}
\ No newline at end of file
+}
+}
Index: solr/core/src/java/org/apache/solr/schema/SortableLongField.java
===================================================================
--- solr/core/src/java/org/apache/solr/schema/SortableLongField.java	(revision 1198995)
+++ solr/core/src/java/org/apache/solr/schema/SortableLongField.java	(working copy)
@@ -88,13 +88,12 @@
     String sval = f.stringValue();
     writer.writeLong(name, NumberUtils.SortableStr2long(sval,0,sval.length()));
   }
-}
 
 
 
 
 
-class SortableLongFieldSource extends FieldCacheSource {
+private static class SortableLongFieldSource extends FieldCacheSource {
   protected long defVal;
 
   public SortableLongFieldSource(String field) {
@@ -199,3 +198,4 @@
     return hcode + super.hashCode() + (int)defVal;
   };
 }
+}
Index: solr/core/src/java/org/apache/solr/schema/SortableFloatField.java
===================================================================
--- solr/core/src/java/org/apache/solr/schema/SortableFloatField.java	(revision 1198995)
+++ solr/core/src/java/org/apache/solr/schema/SortableFloatField.java	(working copy)
@@ -88,12 +88,11 @@
     String sval = f.stringValue();
     writer.writeFloat(name, NumberUtils.SortableStr2float(sval));
   }
-}
 
 
 
 
-class SortableFloatFieldSource extends FieldCacheSource {
+static class SortableFloatFieldSource extends FieldCacheSource {
   protected float defVal;
 
   public SortableFloatFieldSource(String field) {
@@ -202,3 +201,4 @@
 
 
 
+}
Index: solr/core/src/java/org/apache/solr/schema/SortableIntField.java
===================================================================
--- solr/core/src/java/org/apache/solr/schema/SortableIntField.java	(revision 1198995)
+++ solr/core/src/java/org/apache/solr/schema/SortableIntField.java	(working copy)
@@ -91,11 +91,10 @@
     String sval = f.stringValue();
     writer.writeInt(name, NumberUtils.SortableStr2int(sval,0,sval.length()));
   }
-}
 
 
 
-class SortableIntFieldSource extends FieldCacheSource {
+private static class SortableIntFieldSource extends FieldCacheSource {
   protected int defVal;
 
   public SortableIntFieldSource(String field) {
@@ -201,3 +200,4 @@
     return hcode + super.hashCode() + defVal;
   };
 }
+}
Index: solr/core/src/java/org/apache/solr/schema/StrFieldSource.java
===================================================================
--- solr/core/src/java/org/apache/solr/schema/StrFieldSource.java	(revision 1198995)
+++ solr/core/src/java/org/apache/solr/schema/StrFieldSource.java	(working copy)
@@ -73,7 +73,7 @@
             && super.equals(o);
   }
 
-  private static int hcode = SortableFloatFieldSource.class.hashCode();
+  private static int hcode = SortableFloatField.SortableFloatFieldSource.class.hashCode();
   @Override
   public int hashCode() {
     return hcode + super.hashCode();
Index: solr/core/src/java/org/apache/solr/update/processor/RunUpdateProcessorFactory.java
===================================================================
--- solr/core/src/java/org/apache/solr/update/processor/RunUpdateProcessorFactory.java	(revision 1198995)
+++ solr/core/src/java/org/apache/solr/update/processor/RunUpdateProcessorFactory.java	(working copy)
@@ -42,9 +42,8 @@
   {
     return new RunUpdateProcessor(req, next);
   }
-}
 
-class RunUpdateProcessor extends UpdateRequestProcessor 
+private static class RunUpdateProcessor extends UpdateRequestProcessor 
 {
   private final SolrQueryRequest req;
   private final UpdateHandler updateHandler;
@@ -97,3 +96,4 @@
 }
 
 
+}
Index: solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessorFactory.java
===================================================================
--- solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessorFactory.java	(revision 1198995)
+++ solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessorFactory.java	(working copy)
@@ -68,9 +68,8 @@
     }
     return null;
   }
-}
 
-class LogUpdateProcessor extends UpdateRequestProcessor {
+private static class LogUpdateProcessor extends UpdateRequestProcessor {
   private final SolrQueryRequest req;
   private final SolrQueryResponse rsp;
   private final NamedList<Object> toLog;
@@ -191,3 +190,4 @@
 
 
 
+}
Index: solr/core/src/java/org/apache/solr/update/FSUpdateLog.java
===================================================================
--- solr/core/src/java/org/apache/solr/update/FSUpdateLog.java	(revision 1198995)
+++ solr/core/src/java/org/apache/solr/update/FSUpdateLog.java	(working copy)
@@ -35,7 +35,9 @@
 import java.util.concurrent.atomic.AtomicInteger;
 
 /** @lucene.experimental */
-class NullUpdateLog extends UpdateLog {
+public class FSUpdateLog extends UpdateLog {
+/** @lucene.experimental */
+static class NullUpdateLog extends UpdateLog {
   @Override
   public void init(PluginInfo info) {
   }
@@ -82,8 +84,6 @@
   }
 }
 
-/** @lucene.experimental */
-public class FSUpdateLog extends UpdateLog {
 
   public static String TLOG_NAME="tlog";
 
@@ -600,10 +600,9 @@
     return tlogFile.toString();
   }
 
-}
 
 
-class ChannelFastInputStream extends FastInputStream {
+private static class ChannelFastInputStream extends FastInputStream {
   FileChannel ch;
   long chPosition;
 
@@ -629,3 +628,4 @@
   }
 }
 
+}
Index: solr/core/src/java/org/apache/solr/update/UpdateHandler.java
===================================================================
--- solr/core/src/java/org/apache/solr/update/UpdateHandler.java	(revision 1198995)
+++ solr/core/src/java/org/apache/solr/update/UpdateHandler.java	(working copy)
@@ -90,7 +90,7 @@
     if (ulogPluginInfo != null && ulogPluginInfo.isEnabled()) {
       ulog = core.createInitInstance(ulogPluginInfo, UpdateLog.class, "update log", "solr.NullUpdateLog");
     } else {
-      ulog = new NullUpdateLog();
+      ulog = new FSUpdateLog.NullUpdateLog();
       ulog.init(null);
     }
     ulog.init(this, core);
Index: solr/core/src/java/org/apache/solr/analysis/TrieTokenizerFactory.java
===================================================================
--- solr/core/src/java/org/apache/solr/analysis/TrieTokenizerFactory.java	(revision 1198995)
+++ solr/core/src/java/org/apache/solr/analysis/TrieTokenizerFactory.java	(working copy)
@@ -50,9 +50,8 @@
   public TrieTokenizer create(Reader input) {
     return new TrieTokenizer(input, type, precisionStep, TrieTokenizer.getNumericTokenStream(precisionStep));
   }
-}
 
-final class TrieTokenizer extends Tokenizer {
+private static final class TrieTokenizer extends Tokenizer {
   protected static final DateField dateField = new DateField();
   protected final int precisionStep;
   protected final TrieTypes type;
@@ -140,3 +139,4 @@
     ofsAtt.setOffset(endOfs, endOfs);
   }
 }
+}
Index: solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.java
===================================================================
--- solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.java	(revision 1198995)
+++ solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.java	(working copy)
@@ -211,7 +211,6 @@
   public void setHandleSelect(boolean handleSelect) {
     this.handleSelect = handleSelect;
   }
-}
 
 //-----------------------------------------------------------------
 //-----------------------------------------------------------------
@@ -365,7 +364,7 @@
 /**
  * The default Logic
  */
-class StandardRequestParser implements SolrRequestParser
+private static class StandardRequestParser implements SolrRequestParser
 {
   MultipartRequestParser multipart;
   RawRequestParser raw;
@@ -411,3 +410,4 @@
 
 
 
+}
Index: solr/core/src/java/org/apache/solr/search/DocSet.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/DocSet.java	(revision 1198995)
+++ solr/core/src/java/org/apache/solr/search/DocSet.java	(working copy)
@@ -159,10 +159,9 @@
   public void setBitsOn(OpenBitSet target);
 
   public static DocSet EMPTY = new SortedIntDocSet(new int[0], 0);
-}
 
 /** A base class that may be usefull for implementing DocSets */
-abstract class DocSetBase implements DocSet {
+static abstract class DocSetBase implements DocSet {
 
   // Not implemented efficiently... for testing purposes only
   @Override
@@ -339,3 +338,4 @@
 
 
 
+}
Index: solr/core/src/java/org/apache/solr/search/FunctionQParser.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/FunctionQParser.java	(revision 1198995)
+++ solr/core/src/java/org/apache/solr/search/FunctionQParser.java	(working copy)
@@ -295,7 +295,7 @@
     if (ch>='0' && ch<='9'  || ch=='.' || ch=='+' || ch=='-') {
       Number num = sp.getNumber();
       if (num instanceof Long) {
-        valueSource = new LongConstValueSource(num.longValue());
+        valueSource = new ValueSourceParser.LongConstValueSource(num.longValue());
       } else if (num instanceof Double) {
         valueSource = new DoubleConstValueSource(num.doubleValue());
       } else {
@@ -368,9 +368,9 @@
       }
       else {
         if ("true".equals(id)) {
-          valueSource = new BoolConstValueSource(true);
+          valueSource = new ValueSourceParser.BoolConstValueSource(true);
         } else if ("false".equals(id)) {
-          valueSource = new BoolConstValueSource(false);
+          valueSource = new ValueSourceParser.BoolConstValueSource(false);
         } else {
           SchemaField f = req.getSchema().getField(id);
           valueSource = f.getType().getValueSource(f, this);
Index: solr/core/src/java/org/apache/solr/search/DocSlice.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/DocSlice.java	(revision 1198995)
+++ solr/core/src/java/org/apache/solr/search/DocSlice.java	(working copy)
@@ -25,7 +25,7 @@
  *
  * @since solr 0.9
  */
-public class DocSlice extends DocSetBase implements DocList {
+public class DocSlice extends DocSet.DocSetBase implements DocList {
   final int offset;    // starting position of the docs (zero based)
   final int len;       // number of positions used in arrays
   final int[] docs;    // a slice of documents (docs 0-100 of the query)
Index: solr/core/src/java/org/apache/solr/search/SurroundQParserPlugin.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/SurroundQParserPlugin.java	(revision 1198995)
+++ solr/core/src/java/org/apache/solr/search/SurroundQParserPlugin.java	(working copy)
@@ -57,9 +57,8 @@
     return new SurroundQParser(qstr, localParams, params, req);
   }
 
-}
 
-class SurroundQParser extends QParser {
+private static class SurroundQParser extends QParser {
   protected static final Logger LOG = LoggerFactory .getLogger(SurroundQParser.class);
   static final int DEFMAXBASICQUERIES = 1000;
   static final String MBQParam = "maxBasicQueries";
@@ -114,3 +113,4 @@
   }
 
 }
+}
Index: solr/core/src/java/org/apache/solr/search/JoinQParserPlugin.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/JoinQParserPlugin.java	(revision 1198995)
+++ solr/core/src/java/org/apache/solr/search/JoinQParserPlugin.java	(working copy)
@@ -63,10 +63,9 @@
       }
     };
   }
-}
 
 
-class JoinQuery extends Query {
+private static class JoinQuery extends Query {
   String fromField;
   String toField;
   String fromIndex;
@@ -567,3 +566,4 @@
   }
 
 }
+}
Index: solr/core/src/java/org/apache/solr/search/HashDocSet.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/HashDocSet.java	(revision 1198995)
+++ solr/core/src/java/org/apache/solr/search/HashDocSet.java	(working copy)
@@ -29,7 +29,7 @@
  *
  * @since solr 0.9
  */
-public final class HashDocSet extends DocSetBase {
+public final class HashDocSet extends DocSet.DocSetBase {
   /** Default load factor to use for HashDocSets.  We keep track of the inverse
    *  since multiplication is so much faster than division.  The default
    *  is 1.0f / 0.75f
Index: solr/core/src/java/org/apache/solr/search/MissingStringLastComparatorSource.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/MissingStringLastComparatorSource.java	(revision 1198995)
+++ solr/core/src/java/org/apache/solr/search/MissingStringLastComparatorSource.java	(working copy)
@@ -51,11 +51,10 @@
     return new TermOrdValComparator_SML(numHits, fieldname, sortPos, reversed, missingValueProxy);
   }
 
-}
 
 // Copied from Lucene's TermOrdValComparator and modified since the Lucene version couldn't
 // be extended.
-class TermOrdValComparator_SML extends FieldComparator<Comparable> {
+private static class TermOrdValComparator_SML extends FieldComparator<Comparable> {
   private static final int NULL_ORD = Integer.MAX_VALUE;
 
   private final int[] ords;
@@ -459,3 +458,4 @@
     return perSegComp;
   }
 }
+}
Index: solr/core/src/java/org/apache/solr/search/ValueSourceParser.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/ValueSourceParser.java	(revision 1198995)
+++ solr/core/src/java/org/apache/solr/search/ValueSourceParser.java	(working copy)
@@ -818,10 +818,9 @@
     BytesRef indexedBytes;
   }
 
-}
 
 
-class DateValueSourceParser extends ValueSourceParser {
+private static class DateValueSourceParser extends ValueSourceParser {
   DateField df = new TrieDateField();
 
   @Override
@@ -928,7 +927,7 @@
 
 
 // Private for now - we need to revisit how to handle typing in function queries
-class LongConstValueSource extends ConstNumberSource {
+static class LongConstValueSource extends ConstNumberSource {
   final long constant;
   final double dv;
   final float fv;
@@ -1018,7 +1017,7 @@
 }
 
 
-abstract class NamedParser extends ValueSourceParser {
+private static abstract class NamedParser extends ValueSourceParser {
   private final String name;
   public NamedParser(String name) {
     this.name = name;
@@ -1029,7 +1028,7 @@
 }
 
 
-abstract class DoubleParser extends NamedParser {
+private static abstract class DoubleParser extends NamedParser {
   public DoubleParser(String name) {
     super(name);
   }
@@ -1069,7 +1068,7 @@
 }
 
 
-abstract class Double2Parser extends NamedParser {
+private static abstract class Double2Parser extends NamedParser {
   public Double2Parser(String name) {
     super(name);
   }
@@ -1141,7 +1140,7 @@
 }
 
 
-class BoolConstValueSource extends ConstNumberSource {
+static class BoolConstValueSource extends ConstNumberSource {
   final boolean constant;
 
   public BoolConstValueSource(boolean constant) {
@@ -1205,3 +1204,4 @@
     return constant;
   }
 }
+}
Index: solr/core/src/java/org/apache/solr/search/SortedIntDocSet.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/SortedIntDocSet.java	(revision 1198995)
+++ solr/core/src/java/org/apache/solr/search/SortedIntDocSet.java	(working copy)
@@ -31,7 +31,7 @@
 /**
  * <code>SortedIntDocSet</code> represents a sorted set of Lucene Document Ids.
  */
-public class SortedIntDocSet extends DocSetBase {
+public class SortedIntDocSet extends DocSet.DocSetBase {
   protected final int[] docs;
 
   /**
Index: solr/core/src/java/org/apache/solr/search/FunctionRangeQParserPlugin.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/FunctionRangeQParserPlugin.java	(revision 1198995)
+++ solr/core/src/java/org/apache/solr/search/FunctionRangeQParserPlugin.java	(working copy)
@@ -78,10 +78,9 @@
     };
   }
 
-}
 
 // This class works as either a normal constant score query, or as a PostFilter using a collector
-class FunctionRangeQuery extends SolrConstantScoreQuery implements PostFilter {
+private static class FunctionRangeQuery extends SolrConstantScoreQuery implements PostFilter {
   final ValueSourceRangeFilter rangeFilt;
 
   public FunctionRangeQuery(ValueSourceRangeFilter filter) {
@@ -120,3 +119,4 @@
     }
   }
 }
+}
Index: solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParserPlugin.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParserPlugin.java	(revision 1198995)
+++ solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParserPlugin.java	(working copy)
@@ -59,10 +59,9 @@
   public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {
     return new ExtendedDismaxQParser(qstr, localParams, params, req);
   }
-}
 
 
-class ExtendedDismaxQParser extends QParser {
+private static class ExtendedDismaxQParser extends QParser {
 
   /**
    * A field we can't ever find in any schema, so we can safely tell
@@ -1132,3 +1131,4 @@
     return false;
   }
 }
+}
Index: solr/core/src/java/org/apache/solr/search/OldLuceneQParserPlugin.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/OldLuceneQParserPlugin.java	(revision 1198995)
+++ solr/core/src/java/org/apache/solr/search/OldLuceneQParserPlugin.java	(working copy)
@@ -33,6 +33,6 @@
 
   @Override
   public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {
-    return new OldLuceneQParser(qstr, localParams, params, req);
+    return new LuceneQParserPlugin.OldLuceneQParser(qstr, localParams, params, req);
   }
 }
Index: solr/core/src/java/org/apache/solr/search/BitDocSet.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/BitDocSet.java	(revision 1198995)
+++ solr/core/src/java/org/apache/solr/search/BitDocSet.java	(working copy)
@@ -35,7 +35,7 @@
  *
  * @since solr 0.9
  */
-public class BitDocSet extends DocSetBase {
+public class BitDocSet extends DocSet.DocSetBase {
   final OpenBitSet bits;
   int size;    // number of docs in the set (cached for perf)
 
Index: solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java	(revision 1198995)
+++ solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java	(working copy)
@@ -2048,10 +2048,9 @@
     public DocListAndSet getDocListAndSet() { return docListAndSet; }
   }
 
-}
 
 
-class FilterImpl extends Filter {
+private static class FilterImpl extends Filter {
   final DocSet filter;
   final Filter topFilter;
   final List<Weight> weights;
@@ -2186,3 +2185,4 @@
   }
 
 }
+}
Index: solr/core/src/java/org/apache/solr/search/LuceneQParserPlugin.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/LuceneQParserPlugin.java	(revision 1198995)
+++ solr/core/src/java/org/apache/solr/search/LuceneQParserPlugin.java	(working copy)
@@ -45,9 +45,8 @@
   public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {
     return new LuceneQParser(qstr, localParams, params, req);
   }
-}
 
-class LuceneQParser extends QParser {
+private static class LuceneQParser extends QParser {
   String sortStr;
   SolrQueryParser lparser;
 
@@ -83,7 +82,7 @@
 }
 
 
-class OldLuceneQParser extends LuceneQParser {
+static class OldLuceneQParser extends LuceneQParser {
   String sortStr;
 
   public OldLuceneQParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {
@@ -130,3 +129,4 @@
 
 }
 
+}
Index: solr/core/src/java/org/apache/solr/cloud/SolrZkServer.java
===================================================================
--- solr/core/src/java/org/apache/solr/cloud/SolrZkServer.java	(revision 1198995)
+++ solr/core/src/java/org/apache/solr/cloud/SolrZkServer.java	(working copy)
@@ -142,14 +142,13 @@
     if (zkRun == null) return;
     zkThread.interrupt();
   }
-}
 
 
 
 
 // Allows us to set a default for the data dir before parsing
 // zoo.cfg (which validates that there is a dataDir)
-class SolrZkServerProps extends QuorumPeerConfig {
+private static class SolrZkServerProps extends QuorumPeerConfig {
   protected static org.slf4j.Logger LOG = LoggerFactory.getLogger(QuorumPeerConfig.class);
 
   String solrPort; // port that Solr is listening on
@@ -476,3 +475,4 @@
 
 
 }
+}
Index: solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter.java
===================================================================
--- solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter.java	(revision 1198995)
+++ solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter.java	(working copy)
@@ -604,14 +604,13 @@
     tstream = new TokenOrderingFilter(ts, 10);
     return tstream;
   }
-}
 
 /** Orders Tokens in a window first by their startOffset ascending.
  * endOffset is currently ignored.
  * This is meant to work around fickleness in the highlighter only.  It
  * can mess up token positions and should not be used for indexing or querying.
  */
-final class TokenOrderingFilter extends TokenFilter {
+private static final class TokenOrderingFilter extends TokenFilter {
   private final int windowSize;
   private final LinkedList<OrderedToken> queue = new LinkedList<OrderedToken>();
   private boolean done=false;
@@ -658,12 +657,12 @@
 }
 
 // for TokenOrderingFilter, so it can easily sort by startOffset
-class OrderedToken {
+private static class OrderedToken {
   State state;
   int startOffset;
 }
 
-class TermOffsetsTokenStream {
+static class TermOffsetsTokenStream {
 
   TokenStream bufferedTokenStream = null;
   OffsetAttribute bufferedOffsetAtt;
@@ -722,3 +721,4 @@
 
   };
 };
+}
Index: solr/core/src/java/org/apache/solr/highlight/GapFragmenter.java
===================================================================
--- solr/core/src/java/org/apache/solr/highlight/GapFragmenter.java	(revision 1198995)
+++ solr/core/src/java/org/apache/solr/highlight/GapFragmenter.java	(working copy)
@@ -63,7 +63,6 @@
   public String getSource() {
     return "$URL$";
   }
-}
 
 
 /**
@@ -71,7 +70,7 @@
  * fragments when an unusually-large position increment is encountered
  * (this behaves much better in the presence of multi-valued fields).
  */
-class LuceneGapFragmenter extends SimpleFragmenter {
+private static class LuceneGapFragmenter extends SimpleFragmenter {
   /** 
    * When a gap in term positions is observed that is at least this big, treat
    * the gap as a fragment delimiter.
@@ -114,3 +113,4 @@
     return isNewFrag;
   }
 }
+}
Index: solr/core/src/java/org/apache/solr/highlight/RegexFragmenter.java
===================================================================
--- solr/core/src/java/org/apache/solr/highlight/RegexFragmenter.java	(revision 1198995)
+++ solr/core/src/java/org/apache/solr/highlight/RegexFragmenter.java	(working copy)
@@ -109,7 +109,6 @@
   public String getSource() {
     return "$URL$";
   }
-}
 
 
 /**
@@ -120,7 +119,7 @@
  * fragmenter.  After this limit is exhausted, fragments are produced in the
  * same way as <code>GapFragmenter</code>
  */
-class LuceneRegexFragmenter implements Fragmenter
+private static class LuceneRegexFragmenter implements Fragmenter
 {
   // ** defaults
   public static final int DEFAULT_FRAGMENT_SIZE = 70;
@@ -298,3 +297,4 @@
   }
   
 }
+}
Index: solr/core/src/java/org/apache/solr/request/PerSegmentSingleValuedFaceting.java
===================================================================
--- solr/core/src/java/org/apache/solr/request/PerSegmentSingleValuedFaceting.java	(revision 1198995)
+++ solr/core/src/java/org/apache/solr/request/PerSegmentSingleValuedFaceting.java	(working copy)
@@ -330,11 +330,10 @@
     }
   }
 
-}
 
 
 
-abstract class FacetCollector {
+private static abstract class FacetCollector {
   /*** return true to stop collection */
   public abstract boolean collect(BytesRef term, int count);
   public abstract NamedList<Integer> getFacetCounts();
@@ -342,7 +341,7 @@
 
 
 // This collector expects facets to be collected in index order
-class CountSortedFacetCollector extends FacetCollector {
+private static class CountSortedFacetCollector extends FacetCollector {
   private final CharsRef spare = new CharsRef();
 
   final int offset;
@@ -388,7 +387,7 @@
 }
 
 // This collector expects facets to be collected in index order
-class IndexSortedFacetCollector extends FacetCollector {
+private static class IndexSortedFacetCollector extends FacetCollector {
   private final CharsRef spare = new CharsRef();
 
   int offset;
@@ -426,3 +425,4 @@
     return res;
   }
 }
+}
Index: solr/core/src/java/org/apache/solr/handler/CSVRequestHandler.java
===================================================================
--- solr/core/src/java/org/apache/solr/handler/CSVRequestHandler.java	(revision 1198995)
+++ solr/core/src/java/org/apache/solr/handler/CSVRequestHandler.java	(working copy)
@@ -73,10 +73,9 @@
   public String getSource() {
     return "$URL$";
   }
-}
 
 
-abstract class CSVLoader extends ContentStreamLoader {
+private static abstract class CSVLoader extends ContentStreamLoader {
   public static final String SEPARATOR="separator";
   public static final String FIELDNAMES="fieldnames";
   public static final String HEADER="header";
@@ -435,7 +434,7 @@
 }
 
 
-class SingleThreadedCSVLoader extends CSVLoader {
+private static class SingleThreadedCSVLoader extends CSVLoader {
   SingleThreadedCSVLoader(SolrQueryRequest req, UpdateRequestProcessor processor) {
     super(req, processor);
   }
@@ -447,5 +446,4 @@
     doAdd(line, vals, doc, templateAdd);
   }
 }
-
-
+}
Index: solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.java
===================================================================
--- solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.java	(revision 1198995)
+++ solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.java	(working copy)
@@ -467,9 +467,8 @@
       throw new RuntimeException( e );
     }
   }
-}
 
-class ElevationComparatorSource extends FieldComparatorSource {
+private static class ElevationComparatorSource extends FieldComparatorSource {
   private final Map<BytesRef,Integer> priority;
 
   public ElevationComparatorSource( final Map<BytesRef,Integer> boosts) {
@@ -524,3 +523,4 @@
     };
   }
 }
+}
Index: solr/core/src/java/org/apache/solr/handler/component/ResponseBuilder.java
===================================================================
--- solr/core/src/java/org/apache/solr/handler/component/ResponseBuilder.java	(revision 1198995)
+++ solr/core/src/java/org/apache/solr/handler/component/ResponseBuilder.java	(working copy)
@@ -158,7 +158,7 @@
   public FacetComponent.FacetInfo _facetInfo;
   /* private... components that don't own these shouldn't use them */
   SolrDocumentList _responseDocs;
-  StatsInfo _statsInfo;
+  StatsComponent.StatsInfo _statsInfo;
   TermsComponent.TermsHelper _termsHelper;
   SimpleOrderedMap<List<NamedList<Object>>> _pivots;
 
Index: solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent.java
===================================================================
--- solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent.java	(revision 1198995)
+++ solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent.java	(working copy)
@@ -436,9 +436,9 @@
   public String getDescription() {
     return "A Component for working with Term Vectors";
   }
-}
 
-class FieldOptions {
+private static class FieldOptions {
   String fieldName;
   boolean termFreq, positions, offsets, docFreq, tfIdf;
 }
+}
Index: solr/core/src/java/org/apache/solr/handler/component/StatsComponent.java
===================================================================
--- solr/core/src/java/org/apache/solr/handler/component/StatsComponent.java	(revision 1198995)
+++ solr/core/src/java/org/apache/solr/handler/component/StatsComponent.java	(working copy)
@@ -166,9 +166,8 @@
     return "$URL$";
   }
 
-}
 
-class StatsInfo {
+static class StatsInfo {
   Map<String, StatsValues> statsFields;
 
   void parse(SolrParams params, ResponseBuilder rb) {
@@ -184,7 +183,7 @@
 }
 
 
-class SimpleStats {
+private static class SimpleStats {
 
   /** The main set of documents */
   protected DocSet docs;
@@ -302,3 +301,4 @@
 
 
 }
+}
Index: solr/core/src/java/org/apache/solr/handler/component/ShardDoc.java
===================================================================
--- solr/core/src/java/org/apache/solr/handler/component/ShardDoc.java	(revision 1198995)
+++ solr/core/src/java/org/apache/solr/handler/component/ShardDoc.java	(working copy)
@@ -93,12 +93,11 @@
             +" ,positionInResponse="+positionInResponse
             +" ,sortFieldValues="+sortFieldValues;
   }
-}
 
 
 
 // used by distributed search to merge results.
-class ShardFieldSortedHitQueue extends PriorityQueue<ShardDoc> {
+static class ShardFieldSortedHitQueue extends PriorityQueue<ShardDoc> {
 
   /** Stores a comparator corresponding to each field being sorted by */
   protected Comparator[] comparators;
@@ -308,3 +307,4 @@
   }
 
 }
+}
Index: solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java
===================================================================
--- solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java	(revision 1198995)
+++ solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java	(working copy)
@@ -857,8 +857,8 @@
 
       // Merge the docs via a priority queue so we don't have to sort *all* of the
       // documents... we only need to order the top (rows+start)
-      ShardFieldSortedHitQueue queue;
-      queue = new ShardFieldSortedHitQueue(sortFields, ss.getOffset() + ss.getCount());
+      ShardDoc.ShardFieldSortedHitQueue queue;
+      queue = new ShardDoc.ShardFieldSortedHitQueue(sortFields, ss.getOffset() + ss.getCount());
 
       long numFound = 0;
       Float maxScore=null;
Index: solr/core/src/java/org/apache/solr/util/SuggestMissingFactories.java
===================================================================
--- solr/core/src/java/org/apache/solr/util/SuggestMissingFactories.java	(revision 1198995)
+++ solr/core/src/java/org/apache/solr/util/SuggestMissingFactories.java	(working copy)
@@ -78,13 +78,12 @@
         }
     }
     
-}
 
 /**
  * Takes in a clazz name and a jar and finds
  * all classes in that jar that extend clazz.
  */
-class FindClasses {
+private static class FindClasses {
 
   /**
    * Simple command line test method
@@ -211,3 +210,4 @@
   }
 }
 
+}
Index: solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner.java
===================================================================
--- solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner.java	(revision 1198995)
+++ solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner.java	(working copy)
@@ -178,9 +178,8 @@
       ex.printStackTrace();
     }
   }
-}
 
-class NoLog implements Logger {
+private static class NoLog implements Logger {
   private static boolean debug = System.getProperty("DEBUG", null) != null;
 
   private final String name;
@@ -228,3 +227,4 @@
     return "NOLOG[" + name + "]";
   }
 }
+}
Index: solr/core/src/java/org/apache/solr/response/PHPResponseWriter.java
===================================================================
--- solr/core/src/java/org/apache/solr/response/PHPResponseWriter.java	(revision 1198995)
+++ solr/core/src/java/org/apache/solr/response/PHPResponseWriter.java	(working copy)
@@ -42,9 +42,8 @@
   public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {
     return CONTENT_TYPE_TEXT_UTF8;
   }
-}
 
-class PHPWriter extends JSONWriter {
+private static class PHPWriter extends JSONResponseWriter.JSONWriter {
   public PHPWriter(Writer writer, SolrQueryRequest req, SolrQueryResponse rsp) {
     super(writer, req, rsp);
   }
@@ -107,3 +106,4 @@
     }
   }
 }
+}
Index: solr/core/src/java/org/apache/solr/response/CSVResponseWriter.java
===================================================================
--- solr/core/src/java/org/apache/solr/response/CSVResponseWriter.java	(revision 1198995)
+++ solr/core/src/java/org/apache/solr/response/CSVResponseWriter.java	(working copy)
@@ -61,10 +61,9 @@
     // using the text/plain allows this to be viewed in the browser easily
     return CONTENT_TYPE_TEXT_UTF8;
   }
-}
 
 
-class CSVWriter extends TextResponseWriter {
+private static class CSVWriter extends TextResponseWriter {
   static String SEPARATOR = "separator";
   static String ENCAPSULATOR = "encapsulator";
   static String ESCAPE = "escape";
@@ -463,3 +462,4 @@
     printer.print(val, false);
   }
 }
+}
Index: solr/core/src/java/org/apache/solr/response/PHPSerializedResponseWriter.java
===================================================================
--- solr/core/src/java/org/apache/solr/response/PHPSerializedResponseWriter.java	(revision 1198995)
+++ solr/core/src/java/org/apache/solr/response/PHPSerializedResponseWriter.java	(working copy)
@@ -56,9 +56,8 @@
   public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {
     return CONTENT_TYPE_TEXT_UTF8;
   }
-}
 
-class PHPSerializedWriter extends JSONWriter {
+private static class PHPSerializedWriter extends JSONResponseWriter.JSONWriter {
   final BytesRef utf8;
 
   public PHPSerializedWriter(Writer writer, SolrQueryRequest req, SolrQueryResponse rsp) {
@@ -266,3 +265,4 @@
     writer.write("\";");
   }
 }
+}
Index: solr/core/src/java/org/apache/solr/response/JSONResponseWriter.java
===================================================================
--- solr/core/src/java/org/apache/solr/response/JSONResponseWriter.java	(revision 1198995)
+++ solr/core/src/java/org/apache/solr/response/JSONResponseWriter.java	(working copy)
@@ -58,10 +58,9 @@
     // using the text/plain allows this to be viewed in the browser easily
     return CONTENT_TYPE_TEXT_UTF8;
   }
-}
 
 
-class JSONWriter extends TextResponseWriter {
+static class JSONWriter extends TextResponseWriter {
   private String namedListStyle;
   private String wrapperFunction;
 
@@ -579,7 +578,7 @@
 
 }
 
-abstract class NaNFloatWriter extends JSONWriter {
+static abstract class NaNFloatWriter extends JSONWriter {
   
   abstract protected String getNaN();
   abstract protected String getInf();
@@ -614,3 +613,4 @@
     }
   }
 }
+}
Index: solr/core/src/java/org/apache/solr/response/transform/ShardAugmenterFactory.java
===================================================================
--- solr/core/src/java/org/apache/solr/response/transform/ShardAugmenterFactory.java	(revision 1198995)
+++ solr/core/src/java/org/apache/solr/response/transform/ShardAugmenterFactory.java	(working copy)
@@ -38,7 +38,7 @@
         v = "[not a shard request]";
       }
     }
-    return new ValueAugmenter( field, v );
+    return new ValueAugmenterFactory.ValueAugmenter( field, v );
   }
 }
 
Index: solr/core/src/java/org/apache/solr/response/transform/DocIdAugmenterFactory.java
===================================================================
--- solr/core/src/java/org/apache/solr/response/transform/DocIdAugmenterFactory.java	(revision 1198995)
+++ solr/core/src/java/org/apache/solr/response/transform/DocIdAugmenterFactory.java	(working copy)
@@ -30,9 +30,8 @@
   public DocTransformer create(String field, SolrParams params, SolrQueryRequest req) {
     return new DocIdAugmenter( field );
   }
-}
 
-class DocIdAugmenter extends DocTransformer
+private static class DocIdAugmenter extends DocTransformer
 {
   final String name;
 
@@ -56,3 +55,4 @@
 }
 
 
+}
Index: solr/core/src/java/org/apache/solr/response/transform/ValueAugmenterFactory.java
===================================================================
--- solr/core/src/java/org/apache/solr/response/transform/ValueAugmenterFactory.java	(revision 1198995)
+++ solr/core/src/java/org/apache/solr/response/transform/ValueAugmenterFactory.java	(working copy)
@@ -76,9 +76,8 @@
     }
     return new ValueAugmenter( field, val );
   }
-}
 
-class ValueAugmenter extends DocTransformer
+static class ValueAugmenter extends DocTransformer
 {
   final String name;
   final Object value;
@@ -101,3 +100,4 @@
   }
 }
 
+}
Index: solr/core/src/java/org/apache/solr/response/RubyResponseWriter.java
===================================================================
--- solr/core/src/java/org/apache/solr/response/RubyResponseWriter.java	(revision 1198995)
+++ solr/core/src/java/org/apache/solr/response/RubyResponseWriter.java	(working copy)
@@ -41,9 +41,8 @@
   public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {
     return CONTENT_TYPE_TEXT_UTF8;
   }
-}
 
-class RubyWriter extends NaNFloatWriter {
+private static class RubyWriter extends JSONResponseWriter.NaNFloatWriter {
 
   @Override
   protected String getNaN() { return "(0.0/0.0)"; }
@@ -89,3 +88,4 @@
     writer.write('\'');
   }
 }
+}
Index: solr/core/src/java/org/apache/solr/response/PythonResponseWriter.java
===================================================================
--- solr/core/src/java/org/apache/solr/response/PythonResponseWriter.java	(revision 1198995)
+++ solr/core/src/java/org/apache/solr/response/PythonResponseWriter.java	(working copy)
@@ -42,9 +42,8 @@
   public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {
     return CONTENT_TYPE_TEXT_ASCII;
   }
-}
 
-class PythonWriter extends NaNFloatWriter {
+private static class PythonWriter extends JSONResponseWriter.NaNFloatWriter {
   protected String getNaN() { return "float('NaN')"; }
   protected String getInf() { return "float('Inf')"; }
 
@@ -145,3 +144,4 @@
   */
 
 }
+}
Index: modules/queries/src/java/org/apache/lucene/queries/function/valuesource/DocFreqValueSource.java
===================================================================
--- modules/queries/src/java/org/apache/lucene/queries/function/valuesource/DocFreqValueSource.java	(revision 1198995)
+++ modules/queries/src/java/org/apache/lucene/queries/function/valuesource/DocFreqValueSource.java	(working copy)
@@ -30,7 +30,12 @@
 import java.util.Map;
 
 
-class ConstIntDocValues extends IntDocValues {
+/**
+ * <code>DocFreqValueSource</code> returns the number of documents containing the term.
+ * @lucene.internal
+ */
+public class DocFreqValueSource extends ValueSource {
+static class ConstIntDocValues extends IntDocValues {
   final int ival;
   final float fval;
   final double dval;
@@ -74,7 +79,7 @@
   }
 }
 
-class ConstDoubleDocValues extends DoubleDocValues {
+static class ConstDoubleDocValues extends DoubleDocValues {
   final int ival;
   final float fval;
   final double dval;
@@ -119,11 +124,6 @@
 }
 
 
-/**
- * <code>DocFreqValueSource</code> returns the number of documents containing the term.
- * @lucene.internal
- */
-public class DocFreqValueSource extends ValueSource {
   protected String field;
   protected String indexedField;
   protected String val;
Index: modules/queries/src/java/org/apache/lucene/queries/function/valuesource/QueryValueSource.java
===================================================================
--- modules/queries/src/java/org/apache/lucene/queries/function/valuesource/QueryValueSource.java	(revision 1198995)
+++ modules/queries/src/java/org/apache/lucene/queries/function/valuesource/QueryValueSource.java	(working copy)
@@ -72,10 +72,9 @@
     Weight w = searcher.createNormalizedWeight(q);
     context.put(this, w);
   }
-}
 
 
-class QueryDocValues extends FloatDocValues {
+private static class QueryDocValues extends FloatDocValues {
   final AtomicReaderContext readerContext;
   final Bits acceptDocs;
   final Weight weight;
@@ -249,4 +248,5 @@
   public String toString(int doc) {
     return "query(" + q + ",def=" + defVal + ")=" + floatVal(doc);
   }
-}
\ No newline at end of file
+}
+}
Index: modules/queries/src/java/org/apache/lucene/queries/function/valuesource/NumDocsValueSource.java
===================================================================
--- modules/queries/src/java/org/apache/lucene/queries/function/valuesource/NumDocsValueSource.java	(revision 1198995)
+++ modules/queries/src/java/org/apache/lucene/queries/function/valuesource/NumDocsValueSource.java	(working copy)
@@ -37,7 +37,7 @@
   @Override
   public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
     // Searcher has no numdocs so we must use the reader instead
-    return new ConstIntDocValues(ReaderUtil.getTopLevelContext(readerContext).reader.numDocs(), this);
+    return new DocFreqValueSource.ConstIntDocValues(ReaderUtil.getTopLevelContext(readerContext).reader.numDocs(), this);
   }
 
   @Override
Index: modules/queries/src/java/org/apache/lucene/queries/function/valuesource/MaxDocValueSource.java
===================================================================
--- modules/queries/src/java/org/apache/lucene/queries/function/valuesource/MaxDocValueSource.java	(revision 1198995)
+++ modules/queries/src/java/org/apache/lucene/queries/function/valuesource/MaxDocValueSource.java	(working copy)
@@ -42,7 +42,7 @@
   @Override
   public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
     IndexSearcher searcher = (IndexSearcher)context.get("searcher");
-    return new ConstIntDocValues(searcher.getIndexReader().maxDoc(), this);
+    return new DocFreqValueSource.ConstIntDocValues(searcher.getIndexReader().maxDoc(), this);
   }
 
   @Override
Index: modules/queries/src/java/org/apache/lucene/queries/function/valuesource/NormValueSource.java
===================================================================
--- modules/queries/src/java/org/apache/lucene/queries/function/valuesource/NormValueSource.java	(revision 1198995)
+++ modules/queries/src/java/org/apache/lucene/queries/function/valuesource/NormValueSource.java	(working copy)
@@ -58,7 +58,7 @@
     final TFIDFSimilarity similarity = (TFIDFSimilarity) sim;
     final byte[] norms = readerContext.reader.norms(field);
     if (norms == null) {
-      return new ConstDoubleDocValues(0.0, this);
+      return new DocFreqValueSource.ConstDoubleDocValues(0.0, this);
     }
 
     return new FloatDocValues(this) {
Index: lucene/contrib/misc/src/java/org/apache/lucene/misc/HighFreqTerms.java
===================================================================
--- lucene/contrib/misc/src/java/org/apache/lucene/misc/HighFreqTerms.java	(revision 1198995)
+++ lucene/contrib/misc/src/java/org/apache/lucene/misc/HighFreqTerms.java	(working copy)
@@ -228,7 +228,6 @@
       }
     }
   }
- }
 
 /**
  * Comparator
@@ -237,7 +236,7 @@
  * b.totalTermFreq So we can sort in descending order of totalTermFreq
  */
 
-final class TotalTermFreqComparatorSortDescending implements Comparator<TermStats> {
+private static final class TotalTermFreqComparatorSortDescending implements Comparator<TermStats> {
   
   public int compare(TermStats a, TermStats b) {
     if (a.totalTermFreq < b.totalTermFreq) {
@@ -253,7 +252,7 @@
 /**
  * Priority queue for TermStats objects ordered by docFreq
  **/
-final class TermStatsQueue extends PriorityQueue<TermStats> {
+private static final class TermStatsQueue extends PriorityQueue<TermStats> {
   TermStatsQueue(int size) {
     super(size);
   }
@@ -263,3 +262,4 @@
     return termInfoA.docFreq < termInfoB.docFreq;
   }
 }
+}
Index: lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor.java
===================================================================
--- lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor.java	(revision 1198995)
+++ lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor.java	(working copy)
@@ -244,7 +244,7 @@
       spanQuery.extractTerms(nonWeightedTerms);
     }
 
-    List<PositionSpan> spanPositions = new ArrayList<PositionSpan>();
+    List<WeightedSpanTerm.PositionSpan> spanPositions = new ArrayList<WeightedSpanTerm.PositionSpan>();
 
     for (final String field : fieldNames) {
 
@@ -260,7 +260,7 @@
 
       // collect span positions
       while (spans.next()) {
-        spanPositions.add(new PositionSpan(spans.start(), spans.end() - 1));
+        spanPositions.add(new WeightedSpanTerm.PositionSpan(spans.start(), spans.end() - 1));
       }
       
     }
Index: lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTerm.java
===================================================================
--- lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTerm.java	(revision 1198995)
+++ lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTerm.java	(working copy)
@@ -89,11 +89,10 @@
   public List<PositionSpan> getPositionSpans() {
     return positionSpans;
   }
-}
 
 
 // Utility class to store a Span
-class PositionSpan {
+static class PositionSpan {
   int start;
   int end;
 
@@ -102,3 +101,4 @@
     this.end = end;
   }
 }
+}
Index: lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/SimpleSpanFragmenter.java
===================================================================
--- lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/SimpleSpanFragmenter.java	(revision 1198995)
+++ lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/SimpleSpanFragmenter.java	(working copy)
@@ -73,7 +73,7 @@
     WeightedSpanTerm wSpanTerm = queryScorer.getWeightedSpanTerm(termAtt.toString());
 
     if (wSpanTerm != null) {
-      List<PositionSpan> positionSpans = wSpanTerm.getPositionSpans();
+      List<WeightedSpanTerm.PositionSpan> positionSpans = wSpanTerm.getPositionSpans();
 
       for (int i = 0; i < positionSpans.size(); i++) {
         if (positionSpans.get(i).start == position) {
Index: lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter.java
===================================================================
--- lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter.java	(revision 1198995)
+++ lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter.java	(working copy)
@@ -525,8 +525,7 @@
     {
         this.encoder = encoder;
     }
-}
-class FragmentQueue extends PriorityQueue<TextFragment>
+private static class FragmentQueue extends PriorityQueue<TextFragment>
 {
 	public FragmentQueue(int size)
 	{
@@ -542,3 +541,4 @@
 			return fragA.getScore() < fragB.getScore();
 	}
 }
+}
Index: lucene/src/test/org/apache/lucene/search/TestMultiThreadTermVectors.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestMultiThreadTermVectors.java	(revision 1198995)
+++ lucene/src/test/org/apache/lucene/search/TestMultiThreadTermVectors.java	(working copy)
@@ -119,9 +119,8 @@
     
   }
   
-}
 
-class MultiThreadTermVectorsReader implements Runnable {
+private static class MultiThreadTermVectorsReader implements Runnable {
   
   private IndexReader reader = null;
   private Thread t = null;
@@ -193,3 +192,4 @@
         System.out.println("wrong term result");
   }
 }
+}
Index: lucene/src/test/org/apache/lucene/search/TestElevationComparator.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestElevationComparator.java	(revision 1198995)
+++ lucene/src/test/org/apache/lucene/search/TestElevationComparator.java	(working copy)
@@ -131,9 +131,8 @@
    }
    return doc;
  }
-}
 
-class ElevationComparatorSource extends FieldComparatorSource {
+private static class ElevationComparatorSource extends FieldComparatorSource {
   private final Map<BytesRef,Integer> priority;
 
   public ElevationComparatorSource(final Map<BytesRef,Integer> boosts) {
@@ -193,3 +192,4 @@
    };
  }
 }
+}
Index: lucene/src/test/org/apache/lucene/index/TestSameTokenSamePosition.java
===================================================================
--- lucene/src/test/org/apache/lucene/index/TestSameTokenSamePosition.java	(revision 1198995)
+++ lucene/src/test/org/apache/lucene/index/TestSameTokenSamePosition.java	(working copy)
@@ -61,16 +61,15 @@
     riw.close();
     dir.close();
   }
-}
 
-final class BugReproAnalyzer extends Analyzer {
+private static final class BugReproAnalyzer extends Analyzer {
   @Override
   public TokenStreamComponents createComponents(String arg0, Reader arg1) {
     return new TokenStreamComponents(new BugReproAnalyzerTokenizer());
   }
 }
 
-final class BugReproAnalyzerTokenizer extends Tokenizer {
+private static final class BugReproAnalyzerTokenizer extends Tokenizer {
   private final CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);
   private final OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);
   private final PositionIncrementAttribute posIncAtt = addAttribute(PositionIncrementAttribute.class);
@@ -100,3 +99,4 @@
     this.nextTokenIndex = 0;
   }
 }
+}
Index: lucene/src/test/org/apache/lucene/index/TestTermdocPerf.java
===================================================================
--- lucene/src/test/org/apache/lucene/index/TestTermdocPerf.java	(revision 1198995)
+++ lucene/src/test/org/apache/lucene/index/TestTermdocPerf.java	(working copy)
@@ -31,7 +31,8 @@
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.BytesRef;
 
-class RepeatingTokenStream extends Tokenizer {
+public class TestTermdocPerf extends LuceneTestCase {
+private static class RepeatingTokenStream extends Tokenizer {
   
   private final Random random;
   private final float percentDocs;
@@ -71,7 +72,6 @@
 }
 
 
-public class TestTermdocPerf extends LuceneTestCase {
 
   void addDocs(final Random random, Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {
     final RepeatingTokenStream ts = new RepeatingTokenStream(val, random, percentDocs, maxTF);
Index: lucene/src/tools/java/org/apache/lucene/validation/DependencyChecker.java
===================================================================
--- lucene/src/tools/java/org/apache/lucene/validation/DependencyChecker.java	(revision 1198995)
+++ lucene/src/tools/java/org/apache/lucene/validation/DependencyChecker.java	(working copy)
@@ -275,8 +275,8 @@
     return result;
   }
 
-}
 
-class UpdateableInt {
+private static class UpdateableInt {
   public int theInt;
 }
+}
Index: lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.java
===================================================================
--- lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.java	(revision 1198995)
+++ lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.java	(working copy)
@@ -362,14 +362,13 @@
     }
     return true;
   }
-}
 
 /**
  * Takes the logical union of multiple DocsEnum iterators.
  */
 
 // TODO: if ever we allow subclassing of the *PhraseScorer
-class UnionDocsAndPositionsEnum extends DocsAndPositionsEnum {
+private static class UnionDocsAndPositionsEnum extends DocsAndPositionsEnum {
 
   private static final class DocsQueue extends PriorityQueue<DocsAndPositionsEnum> {
     DocsQueue(List<DocsAndPositionsEnum> docsEnums) throws IOException {
@@ -528,3 +527,4 @@
     return _doc;
   }
 }
+}
Index: lucene/src/java/org/apache/lucene/index/TermVectorsReader.java
===================================================================
--- lucene/src/java/org/apache/lucene/index/TermVectorsReader.java	(revision 1198995)
+++ lucene/src/java/org/apache/lucene/index/TermVectorsReader.java	(working copy)
@@ -474,13 +474,12 @@
     
     return clone;
   }
-}
 
 
 /**
  * Models the existing parallel array structure
  */
-class ParallelArrayTermVectorMapper extends TermVectorMapper
+private static class ParallelArrayTermVectorMapper extends TermVectorMapper
 {
 
   private BytesRef[] terms;
@@ -536,3 +535,4 @@
     return tv;
   }
 }
+}
Index: lucene/src/java/org/apache/lucene/store/SingleInstanceLockFactory.java
===================================================================
--- lucene/src/java/org/apache/lucene/store/SingleInstanceLockFactory.java	(revision 1198995)
+++ lucene/src/java/org/apache/lucene/store/SingleInstanceLockFactory.java	(working copy)
@@ -51,9 +51,8 @@
       }
     }
   }
-}
 
-class SingleInstanceLock extends Lock {
+private static class SingleInstanceLock extends Lock {
 
   String lockName;
   private HashSet<String> locks;
@@ -89,3 +88,4 @@
     return super.toString() + ": " + lockName;
   }
 }
+}
Index: lucene/src/java/org/apache/lucene/store/NoLockFactory.java
===================================================================
--- lucene/src/java/org/apache/lucene/store/NoLockFactory.java	(revision 1198995)
+++ lucene/src/java/org/apache/lucene/store/NoLockFactory.java	(working copy)
@@ -46,9 +46,8 @@
 
   @Override
   public void clearLock(String lockName) {}
-}
 
-class NoLock extends Lock {
+private static class NoLock extends Lock {
   @Override
   public boolean obtain() throws IOException {
     return true;
@@ -68,3 +67,4 @@
     return "NoLock";
   }
 }
+}
Index: lucene/src/java/org/apache/lucene/store/NativeFSLockFactory.java
===================================================================
--- lucene/src/java/org/apache/lucene/store/NativeFSLockFactory.java	(revision 1198995)
+++ lucene/src/java/org/apache/lucene/store/NativeFSLockFactory.java	(working copy)
@@ -117,9 +117,8 @@
       new File(lockDir, lockName).delete();
     }
   }
-}
 
-class NativeFSLock extends Lock {
+private static class NativeFSLock extends Lock {
 
   private RandomAccessFile f;
   private FileChannel channel;
@@ -328,3 +327,4 @@
     return "NativeFSLock@" + path;
   }
 }
+}
Index: lucene/src/java/org/apache/lucene/store/SimpleFSLockFactory.java
===================================================================
--- lucene/src/java/org/apache/lucene/store/SimpleFSLockFactory.java	(revision 1198995)
+++ lucene/src/java/org/apache/lucene/store/SimpleFSLockFactory.java	(working copy)
@@ -100,9 +100,8 @@
       }
     }
   }
-}
 
-class SimpleFSLock extends Lock {
+private static class SimpleFSLock extends Lock {
 
   File lockFile;
   File lockDir;
@@ -143,3 +142,4 @@
     return "SimpleFSLock@" + lockFile;
   }
 }
+}
Index: lucene/src/test-framework/java/org/apache/lucene/analysis/MockPayloadAnalyzer.java
===================================================================
--- lucene/src/test-framework/java/org/apache/lucene/analysis/MockPayloadAnalyzer.java	(revision 1198995)
+++ lucene/src/test-framework/java/org/apache/lucene/analysis/MockPayloadAnalyzer.java	(working copy)
@@ -37,13 +37,12 @@
     Tokenizer result = new MockTokenizer(reader, MockTokenizer.WHITESPACE, true);
     return new TokenStreamComponents(result, new MockPayloadFilter(result, fieldName));
   }
-}
 
 /**
  *
  *
  **/
-final class MockPayloadFilter extends TokenFilter {
+private static final class MockPayloadFilter extends TokenFilter {
   String fieldName;
 
   int pos;
@@ -91,3 +90,4 @@
   }
 }
 
+}
