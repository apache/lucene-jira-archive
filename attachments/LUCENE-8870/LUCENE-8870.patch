diff --git a/lucene/core/src/java/org/apache/lucene/document/Field.java b/lucene/core/src/java/org/apache/lucene/document/Field.java
index 2f0f13bd4f..c98b3e7bab 100644
--- a/lucene/core/src/java/org/apache/lucene/document/Field.java
+++ b/lucene/core/src/java/org/apache/lucene/document/Field.java
@@ -219,7 +219,28 @@ public class Field implements IndexableField {
     this.type = type;
   }
 
-  // TODO: allow direct construction of int, long, float, double value too..?
+  /**
+   * Create field with numeric value.
+   * @param name field name
+   * @param value numeric value
+   * @param type field type
+   * @throws IllegalArgumentException if either the name, value or type
+   *         is null.
+   */
+  public Field(String name, Number value, IndexableFieldType type) {
+    if (name == null) {
+      throw new IllegalArgumentException("name must not be null");
+    }
+    if (value == null) {
+      throw new IllegalArgumentException("value must not be null");
+    }
+    if (type == null) {
+      throw new IllegalArgumentException("type must not be null");
+    }
+    this.name = name;
+    this.fieldsData = value;
+    this.type = type;
+  }
 
   /**
    * Create field with String value.
diff --git a/lucene/core/src/test/org/apache/lucene/document/TestField.java b/lucene/core/src/test/org/apache/lucene/document/TestField.java
index 5c5f47b745..d8bb4f58f1 100644
--- a/lucene/core/src/test/org/apache/lucene/document/TestField.java
+++ b/lucene/core/src/test/org/apache/lucene/document/TestField.java
@@ -34,7 +34,25 @@ import org.apache.lucene.util.LuceneTestCase;
 
 // sanity check some basics of fields
 public class TestField extends LuceneTestCase {
-  
+
+  public void testDoubleField() throws Exception {
+    Field field = new Field("foo", 5d, new FieldType());
+
+    trySetByteValue(field);
+    trySetBytesValue(field);
+    trySetBytesRefValue(field);
+    field.setDoubleValue(6d); // ok
+    trySetIntValue(field);
+    trySetFloatValue(field);
+    trySetLongValue(field);
+    trySetReaderValue(field);
+    trySetShortValue(field);
+    trySetStringValue(field);
+    trySetTokenStreamValue(field);
+
+    assertEquals(6d, field.numericValue().doubleValue(), 0.0d);
+  }
+
   public void testDoublePoint() throws Exception {
     Field field = new DoublePoint("foo", 5d);
 
@@ -114,7 +132,25 @@ public class TestField extends LuceneTestCase {
     
     assertEquals(6f, Float.intBitsToFloat(field.numericValue().intValue()), 0.0f);
   }
-  
+
+  public void testFloatField() throws Exception {
+    Field field = new Field("foo", 5f, new FieldType());
+
+    trySetByteValue(field);
+    trySetBytesValue(field);
+    trySetBytesRefValue(field);
+    trySetDoubleValue(field);
+    trySetIntValue(field);
+    field.setFloatValue(6f); // ok
+    trySetLongValue(field);
+    trySetReaderValue(field);
+    trySetShortValue(field);
+    trySetStringValue(field);
+    trySetTokenStreamValue(field);
+
+    assertEquals(6f, field.numericValue().floatValue(), 0.0f);
+  }
+
   public void testFloatPoint() throws Exception {
     Field field = new FloatPoint("foo", 5f);
 
@@ -156,7 +192,24 @@ public class TestField extends LuceneTestCase {
     assertTrue(expected.getMessage().contains("cannot convert to a single numeric value"));
     assertEquals("FloatPoint <foo:6.0,7.0>", field.toString());
   }
-  
+
+  public void testIntField() throws Exception {
+    Field field = new Field("foo", 5, new FieldType());
+    trySetByteValue(field);
+    trySetBytesValue(field);
+    trySetBytesRefValue(field);
+    trySetDoubleValue(field);
+    field.setIntValue(6); // ok
+    trySetFloatValue(field);
+    trySetLongValue(field);
+    trySetReaderValue(field);
+    trySetShortValue(field);
+    trySetStringValue(field);
+    trySetTokenStreamValue(field);
+
+    assertEquals(6, field.numericValue().intValue());
+  }
+
   public void testIntPoint() throws Exception {
     Field field = new IntPoint("foo", 5);
 
@@ -216,7 +269,25 @@ public class TestField extends LuceneTestCase {
     
     assertEquals(6L, field.numericValue().longValue());
   }
-  
+
+  public void testLongField() throws Exception {
+    Field field = new Field("foo", 5L, new FieldType());
+
+    trySetByteValue(field);
+    trySetBytesValue(field);
+    trySetBytesRefValue(field);
+    trySetDoubleValue(field);
+    trySetIntValue(field);
+    trySetFloatValue(field);
+    field.setLongValue(6L); // ok
+    trySetReaderValue(field);
+    trySetShortValue(field);
+    trySetStringValue(field);
+    trySetTokenStreamValue(field);
+
+    assertEquals(6L, field.numericValue().longValue());
+  }
+
   public void testLongPoint() throws Exception {
     Field field = new LongPoint("foo", 5);
 
