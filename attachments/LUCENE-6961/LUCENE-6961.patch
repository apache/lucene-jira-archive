Index: lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AnalysisSPILoader.java
===================================================================
--- lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AnalysisSPILoader.java	(revision 1722992)
+++ lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AnalysisSPILoader.java	(working copy)
@@ -17,6 +17,7 @@
  * limitations under the License.
  */
 
+import java.lang.reflect.InvocationTargetException;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.Locale;
@@ -111,12 +112,7 @@
   
   public S newInstance(String name, Map<String,String> args) {
     final Class<? extends S> service = lookupClass(name);
-    try {
-      return service.getConstructor(Map.class).newInstance(args);
-    } catch (Exception e) {
-      throw new IllegalArgumentException("SPI class of type "+clazz.getName()+" with name '"+name+"' cannot be instantiated. " +
-            "This is likely due to a misconfiguration of the java class '" + service.getName() + "': ", e);
-    }
+    return newFactoryInstance(service, args);
   }
   
   public Class<? extends S> lookupClass(String name) {
@@ -133,4 +129,21 @@
   public Set<String> availableServices() {
     return services.keySet();
   }  
+  
+  public static <T extends AbstractAnalysisFactory> T newFactoryInstance(Class<T> clazz, Map<String,String> args) {
+    try {
+      return clazz.getConstructor(Map.class).newInstance(args);
+    } catch (InvocationTargetException ite) {
+      final Throwable cause = ite.getCause();
+      if (cause instanceof RuntimeException) {
+        throw (RuntimeException) cause;
+      }
+      if (cause instanceof Error) {
+        throw (Error) cause;
+      }
+      throw new RuntimeException(cause);
+    } catch (ReflectiveOperationException e) {
+      throw new UnsupportedOperationException("Factory "+clazz.getName()+" cannot be instantiated. This is likely due to missing Map<String,String> constructor.", e);
+    }
+  }
 }
Index: lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAllAnalyzersHaveFactories.java
===================================================================
--- lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAllAnalyzersHaveFactories.java	(revision 1722992)
+++ lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAllAnalyzersHaveFactories.java	(working copy)
@@ -150,10 +150,6 @@
           }
           assertSame(c, instance.create().getClass());
         } catch (IllegalArgumentException e) {
-          if (e.getCause() instanceof NoSuchMethodException) {
-            // there is no corresponding ctor available
-            throw e;
-          }
           // TODO: For now pass because some factories have not yet a default config that always works
         }
       } else if (TokenFilter.class.isAssignableFrom(c)) {
@@ -174,10 +170,6 @@
             assertSame(c, createdClazz);
           }
         } catch (IllegalArgumentException e) {
-          if (e.getCause() instanceof NoSuchMethodException) {
-            // there is no corresponding ctor available
-            throw e;
-          }
           // TODO: For now pass because some factories have not yet a default config that always works
         }
       } else if (CharFilter.class.isAssignableFrom(c)) {
@@ -198,10 +190,6 @@
             assertSame(c, createdClazz);
           }
         } catch (IllegalArgumentException e) {
-          if (e.getCause() instanceof NoSuchMethodException) {
-            // there is no corresponding ctor available
-            throw e;
-          }
           // TODO: For now pass because some factories have not yet a default config that always works
         }
       }
