Index: solr/core/src/java/org/apache/solr/schema/SortableIntField.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- solr/core/src/java/org/apache/solr/schema/SortableIntField.java	(revision 1306833)
+++ solr/core/src/java/org/apache/solr/schema/SortableIntField.java	(revision )
@@ -19,7 +19,7 @@
 
 import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
-import org.apache.lucene.queries.function.docvalues.StringIndexDocValues;
+import org.apache.lucene.queries.function.docvalues.DocTermsIndexDocValues;
 import org.apache.lucene.queries.function.valuesource.FieldCacheSource;
 import org.apache.lucene.search.SortField;
 import org.apache.lucene.util.BytesRef;
@@ -126,7 +126,7 @@
   public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
     final int def = defVal;
 
-    return new StringIndexDocValues(this, readerContext, field) {
+    return new DocTermsIndexDocValues(this, readerContext, field) {
       private final BytesRef spare = new BytesRef();
 
       @Override
Index: solr/core/src/java/org/apache/solr/schema/SortableFloatField.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- solr/core/src/java/org/apache/solr/schema/SortableFloatField.java	(revision 1306833)
+++ solr/core/src/java/org/apache/solr/schema/SortableFloatField.java	(revision )
@@ -19,7 +19,7 @@
 
 import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
-import org.apache.lucene.queries.function.docvalues.StringIndexDocValues;
+import org.apache.lucene.queries.function.docvalues.DocTermsIndexDocValues;
 import org.apache.lucene.queries.function.valuesource.FieldCacheSource;
 import org.apache.lucene.search.SortField;
 import org.apache.lucene.util.BytesRef;
@@ -124,7 +124,7 @@
   public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
     final float def = defVal;
 
-    return new StringIndexDocValues(this, readerContext, field) {
+    return new DocTermsIndexDocValues(this, readerContext, field) {
       private final BytesRef spare = new BytesRef();
 
       @Override
Index: modules/queries/src/java/org/apache/lucene/queries/function/valuesource/BytesRefFieldSource.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- modules/queries/src/java/org/apache/lucene/queries/function/valuesource/BytesRefFieldSource.java	(revision 1306833)
+++ modules/queries/src/java/org/apache/lucene/queries/function/valuesource/BytesRefFieldSource.java	(revision )
@@ -19,8 +19,7 @@
 
 import org.apache.lucene.index.AtomicReaderContext;
 import org.apache.lucene.queries.function.FunctionValues;
-import org.apache.lucene.queries.function.docvalues.StringIndexDocValues;
-import org.apache.lucene.queries.function.ValueSource; //javadoc
+import org.apache.lucene.queries.function.docvalues.DocTermsIndexDocValues;
 
 import java.io.IOException;
 import java.util.Map;
@@ -36,7 +35,7 @@
 
   @Override
   public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
-    return new StringIndexDocValues(this, readerContext, field) {
+    return new DocTermsIndexDocValues(this, readerContext, field) {
 
       @Override
       protected String toTerm(String readableValue) {
Index: solr/core/src/java/org/apache/solr/schema/SortableLongField.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- solr/core/src/java/org/apache/solr/schema/SortableLongField.java	(revision 1306833)
+++ solr/core/src/java/org/apache/solr/schema/SortableLongField.java	(revision )
@@ -19,7 +19,7 @@
 
 import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
-import org.apache.lucene.queries.function.docvalues.StringIndexDocValues;
+import org.apache.lucene.queries.function.docvalues.DocTermsIndexDocValues;
 import org.apache.lucene.queries.function.valuesource.FieldCacheSource;
 import org.apache.lucene.search.SortField;
 import org.apache.lucene.util.BytesRef;
@@ -124,7 +124,7 @@
   public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
     final long def = defVal;
 
-    return new StringIndexDocValues(this, readerContext, field) {
+    return new DocTermsIndexDocValues(this, readerContext, field) {
       private final BytesRef spare = new BytesRef();
 
       @Override
Index: solr/core/src/java/org/apache/solr/schema/StrFieldSource.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- solr/core/src/java/org/apache/solr/schema/StrFieldSource.java	(revision 1306833)
+++ solr/core/src/java/org/apache/solr/schema/StrFieldSource.java	(revision )
@@ -19,7 +19,7 @@
 
 import org.apache.lucene.index.AtomicReaderContext;
 import org.apache.lucene.queries.function.FunctionValues;
-import org.apache.lucene.queries.function.docvalues.StringIndexDocValues;
+import org.apache.lucene.queries.function.docvalues.DocTermsIndexDocValues;
 import org.apache.lucene.queries.function.valuesource.FieldCacheSource;
 
 import java.io.IOException;
@@ -38,7 +38,7 @@
 
   @Override
   public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
-    return new StringIndexDocValues(this, readerContext, field) {
+    return new DocTermsIndexDocValues(this, readerContext, field) {
 
       @Override
       protected String toTerm(String readableValue) {
Index: solr/core/src/java/org/apache/solr/schema/DateField.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- solr/core/src/java/org/apache/solr/schema/DateField.java	(revision 1306833)
+++ solr/core/src/java/org/apache/solr/schema/DateField.java	(revision )
@@ -19,12 +19,12 @@
 
 import org.apache.lucene.index.AtomicReaderContext;
 import org.apache.lucene.index.IndexableField;
+import org.apache.lucene.queries.function.docvalues.DocTermsIndexDocValues;
 import org.apache.lucene.search.Query;
 import org.apache.lucene.search.SortField;
 import org.apache.lucene.search.TermRangeQuery;
 import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
-import org.apache.lucene.queries.function.docvalues.StringIndexDocValues;
 import org.apache.lucene.queries.function.valuesource.FieldCacheSource;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.CharsRef;
@@ -458,7 +458,7 @@
 
   @Override
   public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
-    return new StringIndexDocValues(this, readerContext, field) {
+    return new DocTermsIndexDocValues(this, readerContext, field) {
       @Override
       protected String toTerm(String readableValue) {
         // needed for frange queries to work properly
Index: solr/core/src/java/org/apache/solr/schema/SortableDoubleField.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- solr/core/src/java/org/apache/solr/schema/SortableDoubleField.java	(revision 1306833)
+++ solr/core/src/java/org/apache/solr/schema/SortableDoubleField.java	(revision )
@@ -19,7 +19,7 @@
 
 import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
-import org.apache.lucene.queries.function.docvalues.StringIndexDocValues;
+import org.apache.lucene.queries.function.docvalues.DocTermsIndexDocValues;
 import org.apache.lucene.queries.function.valuesource.FieldCacheSource;
 import org.apache.lucene.search.SortField;
 import org.apache.lucene.util.BytesRef;
@@ -121,7 +121,7 @@
   public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
     final double def = defVal;
 
-    return new StringIndexDocValues(this, readerContext, field) {
+    return new DocTermsIndexDocValues(this, readerContext, field) {
       private final BytesRef spare = new BytesRef();
 
       @Override
Index: modules/queries/src/java/org/apache/lucene/queries/function/docvalues/StringIndexDocValues.java
===================================================================
--- modules/queries/src/java/org/apache/lucene/queries/function/docvalues/StringIndexDocValues.java	(revision 1306833)
+++ modules/queries/src/java/org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues.java	(revision )
@@ -31,17 +31,18 @@
 
 import java.io.IOException;
 
-/** Internal class, subject to change.
- *  Serves as base class for FunctionValues based on StringIndex 
- **/
-public abstract class StringIndexDocValues extends FunctionValues {
+/**
+ * Internal class, subject to change.
+ * Serves as base class for FunctionValues based on DocTermsIndex.
+ */
+public abstract class DocTermsIndexDocValues extends FunctionValues {
   protected final FieldCache.DocTermsIndex termsIndex;
   protected final ValueSource vs;
   protected final MutableValueStr val = new MutableValueStr();
   protected final BytesRef spare = new BytesRef();
   protected final CharsRef spareChars = new CharsRef();
 
-  public StringIndexDocValues(ValueSource vs, AtomicReaderContext context, String field) throws IOException {
+  public DocTermsIndexDocValues(ValueSource vs, AtomicReaderContext context, String field) throws IOException {
     try {
       termsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), field);
     } catch (RuntimeException e) {
@@ -155,11 +156,11 @@
   }
 
   public static final class StringIndexException extends RuntimeException {
-    public StringIndexException(final String fieldName,
-                                final RuntimeException cause) {
-      super("Can't initialize StringIndex to generate (function) " +
-              "FunctionValues for field: " + fieldName, cause);
+
+    public StringIndexException(final String fieldName, final RuntimeException cause) {
+      super("Can't initialize StringIndex to generate (function) FunctionValues for field: " + fieldName, cause);
     }
+
   }
 
 
