Index: modules/analysis/common/src/java/org/apache/lucene/analysis/core/LowerCaseFilter.java
===================================================================
--- modules/analysis/common/src/java/org/apache/lucene/analysis/core/LowerCaseFilter.java	(revision 1139067)
+++ modules/analysis/common/src/java/org/apache/lucene/analysis/core/LowerCaseFilter.java	(working copy)
@@ -22,6 +22,7 @@
 import org.apache.lucene.analysis.TokenFilter;
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
+import org.apache.lucene.analysis.tokenattributes.KeywordAttribute;
 import org.apache.lucene.analysis.util.CharacterUtils;
 import org.apache.lucene.util.Version;
 
@@ -37,21 +38,41 @@
 public final class LowerCaseFilter extends TokenFilter {
   private final CharacterUtils charUtils;
   private final CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);
+  private final KeywordAttribute keywordAtt = addAttribute(KeywordAttribute.class);
   
+  private boolean ignoreKeyword = false;
+
   /**
    * Create a new LowerCaseFilter, that normalizes token text to lower case.
    * 
    * @param matchVersion See <a href="#version">above</a>
    * @param in TokenStream to filter
+   * @param ignoreKeyword if true, keywords will NOT be lowercased,
+   *                      default behavior is false.
    */
-  public LowerCaseFilter(Version matchVersion, TokenStream in) {
+  public LowerCaseFilter(Version matchVersion, TokenStream in, boolean ignoreKeyword) {
     super(in);
     charUtils = CharacterUtils.getInstance(matchVersion);
+    this.ignoreKeyword = ignoreKeyword;
   }
+
+  /**
+   * Create a new LowerCaseFilter, that normalizes token text to lower case.
+   * 
+   * @param matchVersion See <a href="#version">above</a>
+   * @param in TokenStream to filter
+   */
+  public LowerCaseFilter(Version matchVersion, TokenStream in) {
+    this(matchVersion, in, false);
+  }
   
   @Override
   public final boolean incrementToken() throws IOException {
     if (input.incrementToken()) {
+      if (ignoreKeyword && keywordAtt.isKeyword()) {
+        // do nothing
+        return true;
+      }
       final char[] buffer = termAtt.buffer();
       final int length = termAtt.length();
       for (int i = 0; i < length;) {
Index: modules/analysis/common/src/java/org/apache/lucene/analysis/core/StopFilter.java
===================================================================
--- modules/analysis/common/src/java/org/apache/lucene/analysis/core/StopFilter.java	(revision 1139067)
+++ modules/analysis/common/src/java/org/apache/lucene/analysis/core/StopFilter.java	(working copy)
@@ -22,11 +22,11 @@
 import java.util.List;
 import java.util.Set;
 
-import org.apache.lucene.analysis.util.FilteringTokenFilter;
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
+import org.apache.lucene.analysis.tokenattributes.KeywordAttribute;
 import org.apache.lucene.analysis.util.CharArraySet;
-import org.apache.lucene.queryParser.QueryParser;
+import org.apache.lucene.analysis.util.FilteringTokenFilter;
 import org.apache.lucene.util.Version;
 
 /**
@@ -45,7 +45,10 @@
 
   private final CharArraySet stopWords;
   private final CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);
+  private final KeywordAttribute keywordAtt = addAttribute(KeywordAttribute.class);
 
+  private boolean ignoreKeyword = false;
+  
   /**
    * Construct a token stream filtering the given input. If
    * <code>stopWords</code> is an instance of {@link CharArraySet} (true if
@@ -67,12 +70,43 @@
    *          representing the stopwords
    * @param ignoreCase
    *          if true, all words are lower cased first
+   * @param ignoreKeyword
+   *          if true, terms that are keywords will NOT be filtered,
+   *          default behavior is false.
    */
-  public StopFilter(Version matchVersion, TokenStream input, Set<?> stopWords, boolean ignoreCase)
+  public StopFilter(Version matchVersion, TokenStream input, Set<?> stopWords, boolean ignoreCase, boolean ignoreKeyword)
   {
     super(true, input);
     this.stopWords = stopWords instanceof CharArraySet ? (CharArraySet) stopWords : new CharArraySet(matchVersion, stopWords, ignoreCase);
+    this.ignoreKeyword = ignoreKeyword;
   }
+
+  /**
+   * Construct a token stream filtering the given input. If
+   * <code>stopWords</code> is an instance of {@link CharArraySet} (true if
+   * <code>makeStopSet()</code> was used to construct the set) it will be
+   * directly used and <code>ignoreCase</code> will be ignored since
+   * <code>CharArraySet</code> directly controls case sensitivity.
+   * <p/>
+   * If <code>stopWords</code> is not an instance of {@link CharArraySet}, a new
+   * CharArraySet will be constructed and <code>ignoreCase</code> will be used
+   * to specify the case sensitivity of that set.
+   * 
+   * @param matchVersion
+   *          Lucene version to enable correct Unicode 4.0 behavior in the stop
+   *          set if Version > 3.0. See <a href="#version">above</a> for details.
+   * @param input
+   *          Input TokenStream
+   * @param stopWords
+   *          A Set of Strings or char[] or any other toString()-able set
+   *          representing the stopwords
+   * @param ignoreCase
+   *          if true, all words are lower cased first
+   */
+  public StopFilter(Version matchVersion, TokenStream input, Set<?> stopWords, boolean ignoreCase)
+  {
+    this(matchVersion, input, stopWords, ignoreCase, false);
+  }
   
   /**
    * Constructs a filter which removes words from the input TokenStream that are
@@ -153,7 +187,8 @@
    */
   @Override
   protected boolean accept() throws IOException {
-    return !stopWords.contains(termAtt.buffer(), 0, termAtt.length());
+    return (ignoreKeyword && keywordAtt.isKeyword()) || 
+      !stopWords.contains(termAtt.buffer(), 0, termAtt.length());
   }
 
 }
Index: lucene/src/site/changes/changes2html.pl
===================================================================
--- lucene/src/site/changes/changes2html.pl	(revision 1139051)
+++ lucene/src/site/changes/changes2html.pl	(working copy)
@@ -674,19 +674,19 @@
            '2.4.0' => '2008-10-06',     '2.4.1' => '2009-03-09',
            '2.9.0' => '2009-09-23',     '2.9.1' => '2009-11-06',
            '3.0.0' => '2009-11-25');
-  my $project_info_json = get($project_info_url) || die "Unable to download $project_info_url";
-  my $project_info = json2perl($project_info_json);
-  for my $version (@{$project_info->{versions}}) {
-    if ($version->{releaseDate}) {
-      my $date = substr($version->{releaseDate}, 0, 10);
-      my $version_name = $version->{name};
-      $release_dates{$version->{name}} = $date;
-      if ($version_name =~ /^\d+\.\d+$/) {
-        my $full_version_name = "$version->{name}.0";
-        $release_dates{$full_version_name} = $date;
-      }
-    }
-  }
+#  my $project_info_json = get($project_info_url) || die "Unable to download $project_info_url";
+#  my $project_info = json2perl($project_info_json);
+#  for my $version (@{$project_info->{versions}}) {
+#    if ($version->{releaseDate}) {
+#      my $date = substr($version->{releaseDate}, 0, 10);
+#      my $version_name = $version->{name};
+#      $release_dates{$version->{name}} = $date;
+#      if ($version_name =~ /^\d+\.\d+$/) {
+#        my $full_version_name = "$version->{name}.0";
+#        $release_dates{$full_version_name} = $date;
+#      }
+#    }
+#  }
   return %release_dates;
 }
 
