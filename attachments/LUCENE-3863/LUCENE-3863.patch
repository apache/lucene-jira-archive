Index: modules/queries/src/java/org/apache/lucene/queries/function/valuesource/NumericIndexDocValueSource.java
===================================================================
--- modules/queries/src/java/org/apache/lucene/queries/function/valuesource/NumericIndexDocValueSource.java	(revision 1299382)
+++ modules/queries/src/java/org/apache/lucene/queries/function/valuesource/NumericIndexDocValueSource.java	(working copy)
@@ -45,7 +45,7 @@
   public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
     final Source source = readerContext.reader().docValues(field)
         .getSource();
-    Type type = source.type();
+    Type type = source.getType();
     switch (type) {
     case FLOAT_32:
     case FLOAT_64:
Index: lucene/core/src/test/org/apache/lucene/codecs/lucene40/values/TestDocValues.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/codecs/lucene40/values/TestDocValues.java	(revision 1299382)
+++ lucene/core/src/test/org/apache/lucene/codecs/lucene40/values/TestDocValues.java	(working copy)
@@ -188,7 +188,7 @@
       DocValues r = Ints.getValues(dir, "test", 2,  Type.VAR_INTS, newIOContext(random));
       Source source = getSource(r);
       assertEquals(i + " with min: " + minMax[i][0] + " max: " + minMax[i][1],
-          expectedTypes[i], source.type());
+          expectedTypes[i], source.getType());
       assertEquals(minMax[i][0], source.getInt(0));
       assertEquals(minMax[i][1], source.getInt(1));
 
@@ -368,7 +368,7 @@
       DocValues r = Ints.getValues(dir, "test", NUM_VALUES + additionalDocs, type, newIOContext(random));
       for (int iter = 0; iter < 2; iter++) {
         Source s = getSource(r);
-        assertEquals(type, s.type());
+        assertEquals(type, s.getType());
         for (int i = 0; i < NUM_VALUES; i++) {
           final long v = s.getInt(i);
           assertEquals("index " + i, values[i], v);
Index: lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs.java	(revision 1299382)
+++ lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs.java	(working copy)
@@ -572,8 +572,8 @@
    * checks source API
    */
   public void assertDocValuesSource(DocValues.Source left, DocValues.Source right) throws Exception {
-    DocValues.Type leftType = left.type();
-    assertEquals(info, leftType, right.type());
+    DocValues.Type leftType = left.getType();
+    assertEquals(info, leftType, right.getType());
     switch(leftType) {
       case VAR_INTS:
       case FIXED_INTS_8:
Index: lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing.java	(revision 1299382)
+++ lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing.java	(working copy)
@@ -432,7 +432,7 @@
       if (val == Type.VAR_INTS) {
       }
       Source source = docValues.getSource();
-      switch (source.type()) {
+      switch (source.getType()) {
       case FIXED_INTS_8:
       {
         assertTrue(source.hasArray());
@@ -492,7 +492,7 @@
       }
         break;
       default:
-        fail("unexpected value " + source.type());
+        fail("unexpected value " + source.getType());
       }
       r.close();
     }
@@ -515,7 +515,7 @@
     // getArray()
     Source source = docValues.getSource();
 
-    switch (source.type()) {
+    switch (source.getType()) {
     case BYTES_FIXED_STRAIGHT: {
       BytesRef ref = new BytesRef();
       if (source.hasArray()) {
@@ -529,7 +529,7 @@
     }
       break;
     default:
-      fail("unexpected value " + source.type());
+      fail("unexpected value " + source.getType());
     }
     r.close();
     w.close();
Index: lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Ints.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Ints.java	(revision 1299382)
+++ lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Ints.java	(working copy)
@@ -121,7 +121,7 @@
     @Override
     protected boolean tryBulkMerge(DocValues docValues) {
       // only bulk merge if value type is the same otherwise size differs
-      return super.tryBulkMerge(docValues) && docValues.type() == template.type();
+      return super.tryBulkMerge(docValues) && docValues.type() == template.getType();
     }
   }
   
Index: lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Floats.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Floats.java	(revision 1299382)
+++ lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Floats.java	(working copy)
@@ -84,7 +84,7 @@
     @Override
     protected boolean tryBulkMerge(DocValues docValues) {
       // only bulk merge if value type is the same otherwise size differs
-      return super.tryBulkMerge(docValues) && docValues.type() == template.type();
+      return super.tryBulkMerge(docValues) && docValues.type() == template.getType();
     }
     
     @Override
Index: lucene/core/src/java/org/apache/lucene/search/FieldComparator.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/FieldComparator.java	(revision 1299382)
+++ lucene/core/src/java/org/apache/lucene/search/FieldComparator.java	(working copy)
@@ -1640,7 +1640,7 @@
           // This means segment has doc values, but they are
           // not able to provide a sorted source; consider
           // this a hard error:
-          throw new IllegalStateException("DocValues exist for field \"" + field + "\", but not as a sorted source: type=" + dv.getSource().type() + " reader=" + context.reader());
+          throw new IllegalStateException("DocValues exist for field \"" + field + "\", but not as a sorted source: type=" + dv.getSource().getType() + " reader=" + context.reader());
         }
       }
 
Index: lucene/core/src/java/org/apache/lucene/index/MultiDocValues.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/MultiDocValues.java	(revision 1299382)
+++ lucene/core/src/java/org/apache/lucene/index/MultiDocValues.java	(working copy)
@@ -204,7 +204,7 @@
 
     @Override
     public Type type() {
-      return emptySource.type();
+      return emptySource.getType();
     }
 
     @Override
@@ -231,7 +231,7 @@
 
     @Override
     public Type type() {
-      return emptyFixedSource.type();
+      return emptyFixedSource.getType();
     }
 
     @Override
@@ -519,7 +519,7 @@
 
     @Override
     public SortedSource asSortedSource() {
-      if (type() == Type.BYTES_FIXED_SORTED || type() == Type.BYTES_VAR_SORTED) {
+      if (getType() == Type.BYTES_FIXED_SORTED || getType() == Type.BYTES_VAR_SORTED) {
         
       }
       return super.asSortedSource();
Index: lucene/core/src/java/org/apache/lucene/index/DocValues.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/DocValues.java	(revision 1299382)
+++ lucene/core/src/java/org/apache/lucene/index/DocValues.java	(working copy)
@@ -191,7 +191,7 @@
      * 
      * @return the {@link Type} of this source.
      */
-    public Type type() {
+    public Type getType() {
       return type;
     }
 
Index: lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndexNormDocValues.java
===================================================================
--- lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndexNormDocValues.java	(revision 1299382)
+++ lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndexNormDocValues.java	(working copy)
@@ -44,7 +44,7 @@
 
   @Override
   public Type type() {
-    return source.type();
+    return source.getType();
   }
   
   @Override
