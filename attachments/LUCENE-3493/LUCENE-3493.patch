Index: solr/core/src/test/org/apache/solr/core/AlternateDirectoryTest.java
===================================================================
--- solr/core/src/test/org/apache/solr/core/AlternateDirectoryTest.java	(revision 1179467)
+++ solr/core/src/test/org/apache/solr/core/AlternateDirectoryTest.java	(working copy)
@@ -18,8 +18,15 @@
 
 import java.io.File;
 import java.io.IOException;
+import java.util.Collection;
+import java.util.Map;
 
+import org.apache.lucene.index.DirectoryReader;
+import org.apache.lucene.index.IndexDeletionPolicy;
 import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.IndexWriter;
+import org.apache.lucene.index.SegmentInfos;
+import org.apache.lucene.index.SegmentReader;
 import org.apache.lucene.store.Directory;
 import org.apache.solr.SolrTestCaseJ4;
 import org.junit.BeforeClass;
@@ -31,6 +38,38 @@
     initCore("solrconfig-altdirectory.xml", "schema.xml");
   }
 
+  @Test
+  public void testReopen() throws Exception {
+	  
+  }
+  
+  public static class ReopenBrokenReader extends DirectoryReader {
+    public ReopenBrokenReader(Directory directory, SegmentInfos sis,
+        IndexDeletionPolicy deletionPolicy, boolean readOnly,
+        int termInfosIndexDivisor,
+        Collection<ReaderFinishedListener> readerFinishedListeners)
+        throws IOException {
+      super(directory, sis, deletionPolicy, readOnly, termInfosIndexDivisor,
+          readerFinishedListeners);
+    }
+
+    public ReopenBrokenReader(Directory directory, SegmentInfos infos,
+        SegmentReader[] oldReaders, int[] oldStarts,
+        Map<String,byte[]> oldNormsCache, boolean readOnly, boolean doClone,
+        int termInfosIndexDivisor,
+        Collection<ReaderFinishedListener> readerFinishedListeners)
+        throws IOException {
+      super(directory, infos, oldReaders, oldStarts, oldNormsCache, readOnly,
+          doClone, termInfosIndexDivisor, readerFinishedListeners);
+    }
+
+    public ReopenBrokenReader(IndexWriter writer, SegmentInfos infos,
+        int termInfosIndexDivisor, boolean applyAllDeletes) throws IOException {
+      super(writer, infos, termInfosIndexDivisor, applyAllDeletes);
+    }
+    
+  }
+  
   /**
    * Simple test to ensure that alternate IndexReaderFactory is being used.
    * 
Index: solr/core/src/test/org/apache/solr/core/TestBrokenReopen.java
===================================================================
--- solr/core/src/test/org/apache/solr/core/TestBrokenReopen.java	(revision 0)
+++ solr/core/src/test/org/apache/solr/core/TestBrokenReopen.java	(revision 0)
@@ -0,0 +1,105 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.solr.core;
+
+import java.io.IOException;
+import java.util.Collection;
+import java.util.Map;
+
+import org.apache.lucene.index.CorruptIndexException;
+import org.apache.lucene.index.DirectoryReader;
+import org.apache.lucene.index.IndexDeletionPolicy;
+import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.IndexReader.ReaderFinishedListener;
+import org.apache.lucene.index.IndexWriter;
+import org.apache.lucene.index.SegmentInfos;
+import org.apache.lucene.index.SegmentReader;
+import org.apache.lucene.store.Directory;
+import org.apache.solr.SolrTestCaseJ4;
+import org.apache.solr.search.SolrIndexReader;
+import org.apache.solr.search.SolrIndexSearcher;
+import org.apache.solr.util.RefCounted;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+public class TestBrokenReopen extends SolrTestCaseJ4 {
+  @BeforeClass
+  public static void beforeClass() throws Exception {
+    initCore("solrconfig-reopenbrokendirectory.xml", "schema.xml");
+  }
+  
+  @Test
+  public void testReopen() throws Exception {
+    assertQ(req("q", "*:*", "qt", "standard"));
+    assertU(commit());
+    assertQ(req("q", "*:*", "qt", "standard"));
+    SolrCore core = h.getCore();
+    RefCounted<SolrIndexSearcher> ref = core.getSearcher();
+    try {
+      SolrIndexSearcher s = ref.get();
+      SolrIndexReader sir = s.getReader();
+      assertTrue(sir.getWrappedReader() instanceof ReopenBrokenReader);
+    } finally {
+      ref.decref();
+    }
+    // test that the classes ar the same
+  }
+  
+  static public class TestIndexReaderFactory extends IndexReaderFactory {
+    
+    @Override
+    public IndexReader newReader(final Directory directory, boolean readOnly)
+        throws IOException {
+      return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {
+        @Override
+        protected Object doBody(String segmentFileName)
+            throws CorruptIndexException, IOException {
+          SegmentInfos infos = new SegmentInfos();
+          infos.read(directory, segmentFileName);
+          return new ReopenBrokenReader(directory, infos, null, false,
+              termInfosIndexDivisor, (Collection<ReaderFinishedListener>) null);
+        }
+      }.run();
+    }
+  }
+  
+  public static class ReopenBrokenReader extends DirectoryReader {
+    public ReopenBrokenReader(Directory directory, SegmentInfos sis,
+        IndexDeletionPolicy deletionPolicy, boolean readOnly,
+        int termInfosIndexDivisor,
+        Collection<ReaderFinishedListener> readerFinishedListeners)
+        throws IOException {
+      super(directory, sis, deletionPolicy, readOnly, termInfosIndexDivisor,
+          readerFinishedListeners);
+    }
+    
+    public ReopenBrokenReader(Directory directory, SegmentInfos infos,
+        SegmentReader[] oldReaders, int[] oldStarts,
+        Map<String,byte[]> oldNormsCache, boolean readOnly, boolean doClone,
+        int termInfosIndexDivisor,
+        Collection<ReaderFinishedListener> readerFinishedListeners)
+        throws IOException {
+      super(directory, infos, oldReaders, oldStarts, oldNormsCache, readOnly,
+          doClone, termInfosIndexDivisor, readerFinishedListeners);
+    }
+    
+    public ReopenBrokenReader(IndexWriter writer, SegmentInfos infos,
+        int termInfosIndexDivisor, boolean applyAllDeletes) throws IOException {
+      super(writer, infos, termInfosIndexDivisor, applyAllDeletes);
+    }
+  }
+}
Index: solr/core/src/test-files/solr/conf/solrconfig-reopenbrokendirectory.xml
===================================================================
--- solr/core/src/test-files/solr/conf/solrconfig-reopenbrokendirectory.xml	(revision 0)
+++ solr/core/src/test-files/solr/conf/solrconfig-reopenbrokendirectory.xml	(revision 0)
@@ -0,0 +1,27 @@
+<?xml version="1.0" ?>
+
+<!--
+ Licensed to the Apache Software Foundation (ASF) under one or more
+ contributor license agreements.  See the NOTICE file distributed with
+ this work for additional information regarding copyright ownership.
+ The ASF licenses this file to You under the Apache License, Version 2.0
+ (the "License"); you may not use this file except in compliance with
+ the License.  You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+ Unless required by applicable law or agreed to in writing, software
+ distributed under the License is distributed on an "AS IS" BASIS,
+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ See the License for the specific language governing permissions and
+ limitations under the License.
+-->
+
+<config>
+  <luceneMatchVersion>${tests.luceneMatchVersion:LUCENE_CURRENT}</luceneMatchVersion>
+  <requestHandler name="standard" class="solr.StandardRequestHandler"></requestHandler>
+  <indexReaderFactory name="IndexReaderFactory" class="org.apache.solr.core.TestBrokenReopen$TestIndexReaderFactory"></indexReaderFactory >
+  <mainIndex>
+    <reopenReaders>true</reopenReaders>
+  </mainIndex>
+</config>

Property changes on: solr/core/src/test-files/solr/conf/solrconfig-reopenbrokendirectory.xml
___________________________________________________________________
Added: svn:executable
   + *

Index: lucene/src/java/org/apache/lucene/index/DirectoryReader.java
===================================================================
--- lucene/src/java/org/apache/lucene/index/DirectoryReader.java	(revision 1179467)
+++ lucene/src/java/org/apache/lucene/index/DirectoryReader.java	(working copy)
@@ -42,7 +42,7 @@
 /** 
  * An IndexReader which reads indexes with multiple segments.
  */
-class DirectoryReader extends IndexReader implements Cloneable {
+public class DirectoryReader extends IndexReader implements Cloneable {
   protected Directory directory;
   protected boolean readOnly;
 
@@ -86,7 +86,7 @@
   }
 
   /** Construct reading the named set of readers. */
-  DirectoryReader(Directory directory, SegmentInfos sis, IndexDeletionPolicy deletionPolicy, boolean readOnly, int termInfosIndexDivisor,
+  public DirectoryReader(Directory directory, SegmentInfos sis, IndexDeletionPolicy deletionPolicy, boolean readOnly, int termInfosIndexDivisor,
                   Collection<ReaderFinishedListener> readerFinishedListeners) throws IOException {
     this.directory = directory;
     this.readOnly = readOnly;
@@ -131,7 +131,7 @@
   }
 
   // Used by near real-time search
-  DirectoryReader(IndexWriter writer, SegmentInfos infos, int termInfosIndexDivisor, boolean applyAllDeletes) throws IOException {
+  public DirectoryReader(IndexWriter writer, SegmentInfos infos, int termInfosIndexDivisor, boolean applyAllDeletes) throws IOException {
     this.directory = writer.getDirectory();
     this.readOnly = true;
     this.applyAllDeletes = applyAllDeletes;       // saved for reopen
@@ -184,7 +184,7 @@
   }
 
   /** This constructor is only used for {@link #doOpenIfChanged()} */
-  DirectoryReader(Directory directory, SegmentInfos infos, SegmentReader[] oldReaders, int[] oldStarts,
+  public DirectoryReader(Directory directory, SegmentInfos infos, SegmentReader[] oldReaders, int[] oldStarts,
                   Map<String,byte[]> oldNormsCache, boolean readOnly, boolean doClone, int termInfosIndexDivisor,
                   Collection<ReaderFinishedListener> readerFinishedListeners) throws IOException {
     this.directory = directory;
@@ -485,7 +485,7 @@
     }.run(commit);
   }
 
-  private synchronized DirectoryReader doOpenIfChanged(SegmentInfos infos, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {
+  protected synchronized DirectoryReader doOpenIfChanged(SegmentInfos infos, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {
     DirectoryReader reader;
     if (openReadOnly) {
       reader = new ReadOnlyDirectoryReader(directory, infos, subReaders, starts, normsCache, doClone, termInfosIndexDivisor, readerFinishedListeners);
