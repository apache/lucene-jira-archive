Index: lucene/core/src/java/org/apache/lucene/util/packed/DirectPackedReader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/packed/DirectPackedReader.java	(revision 1599305)
+++ lucene/core/src/java/org/apache/lucene/util/packed/DirectPackedReader.java	(working copy)
@@ -24,14 +24,16 @@
 /* Reads directly from disk on each get */
 class DirectPackedReader extends PackedInts.ReaderImpl {
   final IndexInput in;
-  final long startPointer;
   final long valueMask;
 
-  DirectPackedReader(int bitsPerValue, int valueCount, IndexInput in) {
+  DirectPackedReader(int bitsPerValue, int valueCount, IndexInput in) throws IOException {
     super(valueCount, bitsPerValue);
-    this.in = in;
+    // nocommit: improve this, pass bytecount (already computed in PackedInts.getDirectReader) to this ctor so we have 
+    // only the necessary range (this will give better checks in case of bugs)
+    // or we can require caller to do all of this... 
+    // or we can check if getFilePointer != 0 (caller didnt already do it), allowing caller to optimize and save a clone()
+    this.in = in.slice(null, in.getFilePointer(), in.length() - in.getFilePointer());
 
-    startPointer = in.getFilePointer();
     if (bitsPerValue == 64) {
       valueMask = -1L;
     } else {
@@ -44,7 +46,7 @@
     final long majorBitPos = (long)index * bitsPerValue;
     final long elementPos = majorBitPos >>> 3;
     try {
-      in.seek(startPointer + elementPos);
+      in.seek(elementPos);
 
       final int bitPos = (int) (majorBitPos & 7);
       // round up bits to a multiple of 8 to find total bytes needed to read
@@ -100,7 +102,7 @@
   }
   
   static class DirectPackedReader1 extends DirectPackedReader {
-    DirectPackedReader1(int valueCount, IndexInput in) {
+    DirectPackedReader1(int valueCount, IndexInput in) throws IOException {
       super(1, valueCount, in);
     }
 
@@ -107,7 +109,7 @@
     @Override
     public long get(int index) {
       try {
-        in.seek(startPointer + (index >>> 3));
+        in.seek(index >>> 3);
         int shift = 7 - (index & 7);
         return (in.readByte() >>> shift) & 0x1;
       } catch (IOException e) {
@@ -117,7 +119,7 @@
   }
   
   static class DirectPackedReader2 extends DirectPackedReader {
-    DirectPackedReader2(int valueCount, IndexInput in) {
+    DirectPackedReader2(int valueCount, IndexInput in) throws IOException {
       super(2, valueCount, in);
     }
 
@@ -124,7 +126,7 @@
     @Override
     public long get(int index) {
       try {
-        in.seek(startPointer + (index >>> 2));
+        in.seek(index >>> 2);
         int shift = (3 - (index & 3)) << 1;
         return (in.readByte() >>> shift) & 0x3;
       } catch (IOException e) {
@@ -134,7 +136,7 @@
   }
   
   static class DirectPackedReader4 extends DirectPackedReader {
-    DirectPackedReader4(int valueCount, IndexInput in) {
+    DirectPackedReader4(int valueCount, IndexInput in) throws IOException {
       super(4, valueCount, in);
     }
 
@@ -141,7 +143,7 @@
     @Override
     public long get(int index) {
       try {
-        in.seek(startPointer + (index >>> 1));
+        in.seek(index >>> 1);
         int shift = ((index + 1) & 1) << 2;
         return (in.readByte() >>> shift) & 0xF;
       } catch (IOException e) {
@@ -151,7 +153,7 @@
   }
     
   static class DirectPackedReader8 extends DirectPackedReader {
-    DirectPackedReader8(int valueCount, IndexInput in) {
+    DirectPackedReader8(int valueCount, IndexInput in) throws IOException {
       super(8, valueCount, in);
     }
 
@@ -158,7 +160,7 @@
     @Override
     public long get(int index) {
       try {
-        in.seek(startPointer + index);
+        in.seek(index);
         return in.readByte() & 0xFF;
       } catch (IOException e) {
         throw new RuntimeException(e);
@@ -167,7 +169,7 @@
   }
   
   static class DirectPackedReader12 extends DirectPackedReader {
-    DirectPackedReader12(int valueCount, IndexInput in) {
+    DirectPackedReader12(int valueCount, IndexInput in) throws IOException {
       super(12, valueCount, in);
     }
 
@@ -175,7 +177,7 @@
     public long get(int index) {
       try {
         long offset = (index * 12L) >>> 3;
-        in.seek(startPointer + offset);
+        in.seek(offset);
         int shift = ((index + 1) & 1) << 2;
         return (in.readShort() >>> shift) & 0xFFF;
       } catch (IOException e) {
@@ -185,7 +187,7 @@
   }
   
   static class DirectPackedReader16 extends DirectPackedReader {
-    DirectPackedReader16(int valueCount, IndexInput in) {
+    DirectPackedReader16(int valueCount, IndexInput in) throws IOException {
       super(16, valueCount, in);
     }
 
@@ -192,7 +194,7 @@
     @Override
     public long get(int index) {
       try {
-        in.seek(startPointer + (index<<1));
+        in.seek(index<<1);
         return in.readShort() & 0xFFFF;
       } catch (IOException e) {
         throw new RuntimeException(e);
@@ -201,7 +203,7 @@
   }
   
   static class DirectPackedReader20 extends DirectPackedReader {
-    DirectPackedReader20(int valueCount, IndexInput in) {
+    DirectPackedReader20(int valueCount, IndexInput in) throws IOException {
       super(20, valueCount, in);
     }
 
@@ -209,7 +211,7 @@
     public long get(int index) {
       try {
         long offset = (index * 20L) >>> 3;
-        in.seek(startPointer + offset);
+        in.seek(offset);
         int v = in.readShort() << 8 | (in.readByte() & 0xFF);
         int shift = ((index + 1) & 1) << 2;
         return (v >>> shift) & 0xFFFFF;
@@ -220,7 +222,7 @@
   }
   
   static class DirectPackedReader24 extends DirectPackedReader {
-    DirectPackedReader24(int valueCount, IndexInput in) {
+    DirectPackedReader24(int valueCount, IndexInput in) throws IOException {
       super(24, valueCount, in);
     }
 
@@ -227,7 +229,7 @@
     @Override
     public long get(int index) {
       try {
-        in.seek(startPointer + (index*3));
+        in.seek(index*3);
         return (in.readShort() & 0xFFFF) << 8 | (in.readByte() & 0xFF);
       } catch (IOException e) {
         throw new RuntimeException(e);
@@ -236,7 +238,7 @@
   }
   
   static class DirectPackedReader28 extends DirectPackedReader {
-    DirectPackedReader28(int valueCount, IndexInput in) {
+    DirectPackedReader28(int valueCount, IndexInput in) throws IOException {
       super(28, valueCount, in);
     }
     
@@ -244,7 +246,7 @@
     public long get(int index) {
       try {
         long offset = (index * 28L) >>> 3;
-        in.seek(startPointer + offset);
+        in.seek(offset);
         int shift = ((index + 1) & 1) << 2;
         return (in.readInt() >>> shift) & 0xFFFFFFFL;
       } catch (IOException e) {
@@ -254,7 +256,7 @@
   }
   
   static class DirectPackedReader32 extends DirectPackedReader {
-    DirectPackedReader32(int valueCount, IndexInput in) {
+    DirectPackedReader32(int valueCount, IndexInput in) throws IOException {
       super(32, valueCount, in);
     }
     
@@ -261,7 +263,7 @@
     @Override
     public long get(int index) {
       try {
-        in.seek(startPointer + (index<<2));
+        in.seek(index<<2);
         return in.readInt() & 0xFFFFFFFFL;
       } catch (IOException e) {
         throw new RuntimeException(e);
@@ -270,7 +272,7 @@
   }
   
   static class DirectPackedReader40 extends DirectPackedReader {
-    DirectPackedReader40(int valueCount, IndexInput in) {
+    DirectPackedReader40(int valueCount, IndexInput in) throws IOException {
       super(40, valueCount, in);
     }
     
@@ -277,7 +279,7 @@
     @Override
     public long get(int index) {
       try {
-        in.seek(startPointer + (index*5));
+        in.seek(index*5);
         return (in.readInt() & 0xFFFFFFFFL) << 8 | (in.readByte() & 0xFF);
       } catch (IOException e) {
         throw new RuntimeException(e);
@@ -286,7 +288,7 @@
   }
   
   static class DirectPackedReader48 extends DirectPackedReader {
-    DirectPackedReader48(int valueCount, IndexInput in) {
+    DirectPackedReader48(int valueCount, IndexInput in) throws IOException {
       super(48, valueCount, in);
     }
     
@@ -293,7 +295,7 @@
     @Override
     public long get(int index) {
       try {
-        in.seek(startPointer + (index*6));
+        in.seek(index*6);
         return (in.readInt() & 0xFFFFFFFFL) << 16 | (in.readShort() & 0xFFFF);
       } catch (IOException e) {
         throw new RuntimeException(e);
@@ -302,7 +304,7 @@
   }
   
   static class DirectPackedReader56 extends DirectPackedReader {
-    DirectPackedReader56(int valueCount, IndexInput in) {
+    DirectPackedReader56(int valueCount, IndexInput in) throws IOException {
       super(56, valueCount, in);
     }
     
@@ -309,7 +311,7 @@
     @Override
     public long get(int index) {
       try {
-        in.seek(startPointer + (index*7));
+        in.seek(index*7);
         return (in.readInt() & 0xFFFFFFFFL) << 24 | (in.readShort() & 0xFFFF) << 8 | (in.readByte() & 0xFF);
       } catch (IOException e) {
         throw new RuntimeException(e);
@@ -318,7 +320,7 @@
   }
   
   static class DirectPackedReader64 extends DirectPackedReader {
-    DirectPackedReader64(int valueCount, IndexInput in) {
+    DirectPackedReader64(int valueCount, IndexInput in) throws IOException {
       super(64, valueCount, in);
     }
     
@@ -325,7 +327,7 @@
     @Override
     public long get(int index) {
       try {
-        in.seek(startPointer + (index<<3));
+        in.seek(index<<3);
         return in.readLong();
       } catch (IOException e) {
         throw new RuntimeException(e);
@@ -333,7 +335,7 @@
     }    
   }
      
-  static DirectPackedReader getInstance(int bitsPerValue, int valueCount, IndexInput in) {
+  static DirectPackedReader getInstance(int bitsPerValue, int valueCount, IndexInput in) throws IOException {
     switch(bitsPerValue) {
       case 1: return new DirectPackedReader1(valueCount, in);
       case 2: return new DirectPackedReader2(valueCount, in);
Index: lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.java	(revision 1599305)
+++ lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.java	(working copy)
@@ -969,7 +969,7 @@
    * @lucene.internal
    */
   public static Reader getDirectReaderNoHeader(final IndexInput in, Format format,
-      int version, int valueCount, int bitsPerValue) {
+      int version, int valueCount, int bitsPerValue) throws IOException {
     checkVersion(version);
     switch (format) {
       case PACKED:
