Index: highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldFragList.java
===================================================================
--- highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldFragList.java	(revision 1342523)
+++ highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldFragList.java	(working copy)
@@ -61,19 +61,19 @@
 
   public static class WeightedFragInfo {
 
-    List<SubInfo> subInfos;
-    float totalBoost;
-    int startOffset;
-    int endOffset;
+    private List<SubInfo> subInfos;
+    private float totalBoost;
+    private int startOffset;
+    private int endOffset;
 
     public WeightedFragInfo( int startOffset, int endOffset, List<WeightedPhraseInfo> phraseInfoList ){
       this.startOffset = startOffset;
       this.endOffset = endOffset;
       subInfos = new ArrayList<SubInfo>();
       for( WeightedPhraseInfo phraseInfo : phraseInfoList ){
-        SubInfo subInfo = new SubInfo( phraseInfo.text, phraseInfo.termsOffsets, phraseInfo.seqnum );
+        SubInfo subInfo = new SubInfo( phraseInfo.getText(), phraseInfo.getTermsOffsets(), phraseInfo.getSeqnum() );
         subInfos.add( subInfo );
-        totalBoost += phraseInfo.boost;
+        totalBoost += phraseInfo.getBoost();
       }
     }
     
@@ -104,12 +104,12 @@
     }
     
     public static class SubInfo {
-      final String text;  // unnecessary member, just exists for debugging purpose
-      final List<Toffs> termsOffsets;   // usually termsOffsets.size() == 1,
+      private final String text;  // unnecessary member, just exists for debugging purpose
+      private final List<Toffs> termsOffsets;   // usually termsOffsets.size() == 1,
                               // but if position-gap > 1 and slop > 0 then size() could be greater than 1
-      int seqnum;
+      private int seqnum;
 
-      SubInfo( String text, List<Toffs> termsOffsets, int seqnum ){
+      public SubInfo( String text, List<Toffs> termsOffsets, int seqnum ){
         this.text = text;
         this.termsOffsets = termsOffsets;
         this.seqnum = seqnum;
Index: highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldPhraseList.java
===================================================================
--- highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldPhraseList.java	(revision 1342523)
+++ highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldPhraseList.java	(working copy)
@@ -97,7 +97,7 @@
     }
   }
   
-  void addIfNoOverlap( WeightedPhraseInfo wpi ){
+  public void addIfNoOverlap( WeightedPhraseInfo wpi ){
     for( WeightedPhraseInfo existWpi : phraseList ){
       if( existWpi.isOffsetOverlap( wpi ) ) return;
     }
@@ -106,19 +106,40 @@
   
   public static class WeightedPhraseInfo {
 
-    String text;  // unnecessary member, just exists for debugging purpose
-    List<Toffs> termsOffsets;   // usually termsOffsets.size() == 1,
+    private String text;  // unnecessary member, just exists for debugging purpose
+    private List<Toffs> termsOffsets;   // usually termsOffsets.size() == 1,
                             // but if position-gap > 1 and slop > 0 then size() could be greater than 1
-    float boost;  // query boost
-    int seqnum;
+    private float boost;  // query boost
+    private int seqnum;
     
+    /**
+     * @return the text
+     */
+    public String getText() {
+      return text;
+    }
+
+    /**
+     * @return the termsOffsets
+     */
+    public List<Toffs> getTermsOffsets() {
+      return termsOffsets;
+    }
+
+    /**
+     * @return the boost
+     */
+    public float getBoost() {
+      return boost;
+    }
+
     public WeightedPhraseInfo( LinkedList<TermInfo> terms, float boost ){
       this( terms, boost, 0 );
     }
     
-    public WeightedPhraseInfo( LinkedList<TermInfo> terms, float boost, int number ){
+    public WeightedPhraseInfo( LinkedList<TermInfo> terms, float boost, int seqnum ){
       this.boost = boost;
-      this.seqnum = number;
+      this.seqnum = seqnum;
       termsOffsets = new ArrayList<Toffs>( terms.size() );
       TermInfo ti = terms.get( 0 );
       termsOffsets.add( new Toffs( ti.getStartOffset(), ti.getEndOffset() ) );
@@ -175,9 +196,16 @@
       return sb.toString();
     }
     
+    /**
+     * @return the seqnum
+     */
+    public int getSeqnum() {
+      return seqnum;
+    }
+
     public static class Toffs {
-      int startOffset;
-      int endOffset;
+      private int startOffset;
+      private int endOffset;
       public Toffs( int startOffset, int endOffset ){
         this.startOffset = startOffset;
         this.endOffset = endOffset;
Index: highlighter/src/java/org/apache/lucene/search/vectorhighlight/ScoreOrderFragmentsBuilder.java
===================================================================
--- highlighter/src/java/org/apache/lucene/search/vectorhighlight/ScoreOrderFragmentsBuilder.java	(revision 1342523)
+++ highlighter/src/java/org/apache/lucene/search/vectorhighlight/ScoreOrderFragmentsBuilder.java	(working copy)
@@ -65,12 +65,12 @@
   public static class ScoreComparator implements Comparator<WeightedFragInfo> {
 
     public int compare( WeightedFragInfo o1, WeightedFragInfo o2 ) {
-      if( o1.totalBoost > o2.totalBoost ) return -1;
-      else if( o1.totalBoost < o2.totalBoost ) return 1;
+      if( o1.getTotalBoost() > o2.getTotalBoost() ) return -1;
+      else if( o1.getTotalBoost() < o2.getTotalBoost() ) return 1;
       // if same score then check startOffset
       else{
-        if( o1.startOffset < o2.startOffset ) return -1;
-        else if( o1.startOffset > o2.startOffset ) return 1;
+        if( o1.getStartOffset() < o2.getStartOffset() ) return -1;
+        else if( o1.getStartOffset() > o2.getStartOffset() ) return 1;
       }
       return 0;
     }
