diff --git lucene/build.xml lucene/build.xml
index 96be669..1990c72 100644
--- lucene/build.xml
+++ lucene/build.xml
@@ -326,7 +326,7 @@
   <!-- ================================================================== -->
   <!--                                                                    -->
   <!-- ================================================================== -->
-  <target name="package" depends="jar-core, jar-test-framework, build-modules, init-dist, documentation"/>
+  <target name="package" depends="jar-core, jar-analyzer-definition, jar-test-framework, build-modules, init-dist, documentation"/>
 
   <target name="nightly" depends="test, package-tgz">
   </target>
@@ -557,6 +557,14 @@
     <property name="core.compiled" value="true"/>
     <property name="lucene-core.uptodate" value="true"/>
   </target>
+  <!-- Override common-build.xml definition to check for the jar already being up-to-date -->
+  <target name="jar-analyzer-definition" depends="check-lucene-core-uptodate,compile-lucene-core" unless="lucene-analyzers-def.uptodate">
+    <ant dir="${common.dir}/core" target="jar-analyzer-definition" inheritAll="false">
+      <propertyset refid="uptodate.and.compiled.properties"/>
+    </ant>
+    <property name="analyzers-def.compiled" value="true"/>
+    <property name="lucene-analyzers-def.uptodate" value="true"/>
+  </target>
 
   <!-- TODO: in the future, we don't need to actually put
        jars in the lib/ folders, but can just put in classpath.
diff --git lucene/common-build.xml lucene/common-build.xml
index 627df17..37907d7 100644
--- lucene/common-build.xml
+++ lucene/common-build.xml
@@ -468,6 +468,16 @@
     <jarify/>
   </target>
 
+  <target name="jar-analyzer-definition" depends="compile-core"
+    description="Packages the JAR file">
+    <!-- TODO: refine down the util includes to just what is needed:
+    org/apache/lucene/util/Attribute*,org/apache/lucene/util/BytesRef*,org/apache/lucene/util/ArrayUtil*,org/apache/lucene/util/CloseableThreadLocal*,org/apache/lucene/util/RamUsageEstimator*,org/apache/lucene/util/UnicodeUtil*, org/apache/lucene/store/AlreadyClosedException*, org/apache/lucene/util/Version*
+     -->
+    <jarify destfile="${build.dir}/${final.name}-analyzers-def.jar"
+            includes="org/apache/lucene/analysis/**, org/apache/lucene/util/*,org/apache/lucene/store/AlreadyClosedException*, org/apache/lucene/LucenePackage*">
+    </jarify>
+  </target>
+
   <macrodef name="m2-deploy" description="Builds a Maven artifact">
   	<element name="artifact-attachments" optional="yes"/>
     <attribute name="pom.xml"/>
@@ -550,6 +560,7 @@
   	<attribute name="basedir" default="${build.dir}/classes/java"/>
   	<attribute name="destfile" default="${build.dir}/${final.name}.jar"/>
   	<attribute name="title" default="Lucene Search Engine: ${ant.project.name}"/>
+    <attribute name="includes" default="**"/>
     <attribute name="excludes" default="**/pom.xml,**/*.iml"/>
     <attribute name="metainf.source.dir" default="${common.dir}"/>
     <attribute name="implementation.title" default="org.apache.lucene"/>
@@ -557,6 +568,7 @@
     <attribute name="manifest.file" default="${manifest.file}"/>
     <element name="nested" optional="true" implicit="true"/>
     <sequential>
+      <echo>Building from @{basedir} to @{destfile}</echo>
       <!-- If possible, include the svnversion -->
       <exec dir="." executable="${svnversion.exe}"
             outputproperty="svnversion" failifexecutionfails="false">
@@ -571,6 +583,7 @@
       <jar destfile="@{destfile}"
            basedir="@{basedir}"
            manifest="@{manifest.file}"
+           includes="@{includes}"
            excludes="@{excludes}">
         <metainf dir="@{metainf.source.dir}" includes="LICENSE.txt,NOTICE.txt"/>
         <nested />
diff --git lucene/core/src/java/org/apache/lucene/analysis/Analyzer.java lucene/core/src/java/org/apache/lucene/analysis/Analyzer.java
index dbeeabe..f40305b 100644
--- lucene/core/src/java/org/apache/lucene/analysis/Analyzer.java
+++ lucene/core/src/java/org/apache/lucene/analysis/Analyzer.java
@@ -47,7 +47,7 @@ public abstract class Analyzer {
 
   /**
    * Creates a new {@link TokenStreamComponents} instance for this analyzer.
-   * 
+   *
    * @param fieldName
    *          the name of the fields content passed to the
    *          {@link TokenStreamComponents} sink as a reader
@@ -70,7 +70,7 @@ public abstract class Analyzer {
    * method will reuse the previously stored components after resetting them
    * through {@link TokenStreamComponents#setReader(Reader)}.
    * </p>
-   * 
+   *
    * @param fieldName the name of the field the created TokenStream is used for
    * @param reader the reader the streams source reads from
    */
@@ -86,7 +86,7 @@ public abstract class Analyzer {
     }
     return components.getTokenStream();
   }
-  
+
   /**
    * Override this if you want to add a CharFilter chain.
    */
@@ -142,7 +142,7 @@ public abstract class Analyzer {
 
     /**
      * Creates a new {@link TokenStreamComponents} instance.
-     * 
+     *
      * @param source
      *          the analyzer's tokenizer
      * @param result
@@ -153,10 +153,10 @@ public abstract class Analyzer {
       this.source = source;
       this.sink = result;
     }
-    
+
     /**
      * Creates a new {@link TokenStreamComponents} instance.
-     * 
+     *
      * @param source
      *          the analyzer's tokenizer
      */
@@ -168,7 +168,7 @@ public abstract class Analyzer {
     /**
      * Resets the encapsulated components with the given reader. If the components
      * cannot be reset, an Exception should be thrown.
-     * 
+     *
      * @param reader
      *          a reader to reset the source component
      * @throws IOException
@@ -180,7 +180,7 @@ public abstract class Analyzer {
 
     /**
      * Returns the sink {@link TokenStream}
-     * 
+     *
      * @return the sink {@link TokenStream}
      */
     public TokenStream getTokenStream() {
diff --git lucene/core/src/java/org/apache/lucene/analysis/AnalyzerWrapper.java lucene/core/src/java/org/apache/lucene/analysis/AnalyzerWrapper.java
index 261075c..6f28a44 100644
--- lucene/core/src/java/org/apache/lucene/analysis/AnalyzerWrapper.java
+++ lucene/core/src/java/org/apache/lucene/analysis/AnalyzerWrapper.java
@@ -17,6 +17,7 @@ package org.apache.lucene.analysis;
  * limitations under the License.
  */
 
+
 import java.io.Reader;
 
 /**
diff --git lucene/core/src/java/org/apache/lucene/analysis/NumericTokenStream.java lucene/core/src/java/org/apache/lucene/analysis/NumericTokenStream.java
index d347027..bacf671 100644
--- lucene/core/src/java/org/apache/lucene/analysis/NumericTokenStream.java
+++ lucene/core/src/java/org/apache/lucene/analysis/NumericTokenStream.java
@@ -21,12 +21,6 @@ import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
 import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute;
 import org.apache.lucene.analysis.tokenattributes.TermToBytesRefAttribute;
 import org.apache.lucene.analysis.tokenattributes.TypeAttribute;
-import org.apache.lucene.document.DoubleField; // for javadocs
-import org.apache.lucene.document.FloatField; // for javadocs
-import org.apache.lucene.document.IntField; // for javadocs
-import org.apache.lucene.document.LongField; // for javadocs
-import org.apache.lucene.search.NumericRangeFilter; // for javadocs
-import org.apache.lucene.search.NumericRangeQuery;
 import org.apache.lucene.util.Attribute;
 import org.apache.lucene.util.AttributeImpl;
 import org.apache.lucene.util.AttributeReflector;
@@ -35,11 +29,11 @@ import org.apache.lucene.util.NumericUtils;
 
 /**
  * <b>Expert:</b> This class provides a {@link TokenStream}
- * for indexing numeric values that can be used by {@link
- * NumericRangeQuery} or {@link NumericRangeFilter}.
+ * for indexing numeric values that can be used by
+ * NumericRangeQuery or NumericRangeFilter.
  *
- * <p>Note that for simple usage, {@link IntField}, {@link
- * LongField}, {@link FloatField} or {@link DoubleField} is
+ * <p>Note that for simple usage, IntField,
+ * LongField, FloatField or DoubleField is
  * recommended.  These fields disable norms and
  * term freqs, as they are not usually needed during
  * searching.  If you need to change these settings, you
@@ -80,7 +74,7 @@ import org.apache.lucene.util.NumericUtils;
  * than one numeric field, use a separate <code>NumericTokenStream</code>
  * instance for each.</p>
  *
- * <p>See {@link NumericRangeQuery} for more details on the
+ * <p>See NumericRangeQuery for more details on the
  * <a
  * href="../search/NumericRangeQuery.html#precisionStepDesc"><code>precisionStep</code></a>
  * parameter as well as how numeric fields work under the hood.</p>
diff --git lucene/core/src/java/org/apache/lucene/analysis/Token.java lucene/core/src/java/org/apache/lucene/analysis/Token.java
index 7d33509..42b7ec0 100644
--- lucene/core/src/java/org/apache/lucene/analysis/Token.java
+++ lucene/core/src/java/org/apache/lucene/analysis/Token.java
@@ -24,7 +24,6 @@ import org.apache.lucene.analysis.tokenattributes.PayloadAttribute;
 import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute;
 import org.apache.lucene.analysis.tokenattributes.PositionLengthAttribute;
 import org.apache.lucene.analysis.tokenattributes.TypeAttribute;
-import org.apache.lucene.index.DocsAndPositionsEnum; // for javadoc
 import org.apache.lucene.util.Attribute;
 import org.apache.lucene.util.AttributeSource;
 import org.apache.lucene.util.AttributeImpl;
@@ -47,7 +46,7 @@ import org.apache.lucene.util.BytesRef;
   with type "eos".  The default token type is "word".  
   <p>
   A Token can optionally have metadata (a.k.a. payload) in the form of a variable
-  length byte array. Use {@link DocsAndPositionsEnum#getPayload()} to retrieve the 
+  length byte array. Use DocsAndPositionsEnum#getPayload() to retrieve the
   payloads from the index.
   
   <br><br>
diff --git lucene/core/src/java/org/apache/lucene/analysis/TokenStream.java lucene/core/src/java/org/apache/lucene/analysis/TokenStream.java
index 605b3cf..2cb8f7c 100644
--- lucene/core/src/java/org/apache/lucene/analysis/TokenStream.java
+++ lucene/core/src/java/org/apache/lucene/analysis/TokenStream.java
@@ -21,16 +21,12 @@ import java.io.IOException;
 import java.io.Closeable;
 import java.lang.reflect.Modifier;
 
-import org.apache.lucene.document.Document;
-import org.apache.lucene.document.Field;
-import org.apache.lucene.index.IndexWriter;
 import org.apache.lucene.util.Attribute;
 import org.apache.lucene.util.AttributeImpl;
 import org.apache.lucene.util.AttributeSource;
 
 /**
- * A <code>TokenStream</code> enumerates the sequence of tokens, either from
- * {@link Field}s of a {@link Document} or from query text.
+ * A <code>TokenStream</code> enumerates the sequence of tokens from text.
  * <p>
  * This is an abstract class; concrete subclasses are:
  * <ul>
@@ -124,7 +120,7 @@ public abstract class TokenStream extends AttributeSource implements Closeable {
   }
   
   /**
-   * Consumers (i.e., {@link IndexWriter}) use this method to advance the stream to
+   * Consumers (i.e., Lucene's IndexWriter) use this method to advance the stream to
    * the next token. Implementing classes must implement this method and update
    * the appropriate {@link AttributeImpl}s with the attributes of the next
    * token.
