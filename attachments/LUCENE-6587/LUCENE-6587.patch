diff --git a/lucene/core/src/java/org/apache/lucene/search/BooleanTopLevelScorers.java b/lucene/core/src/java/org/apache/lucene/search/BooleanTopLevelScorers.java
index f44f254..eb301fc 100644
--- a/lucene/core/src/java/org/apache/lucene/search/BooleanTopLevelScorers.java
+++ b/lucene/core/src/java/org/apache/lucene/search/BooleanTopLevelScorers.java
@@ -44,6 +44,12 @@ class BooleanTopLevelScorers {
     }
 
     @Override
+    public Explanation explain() throws IOException {
+      Explanation sub = in.explain();
+      return Explanation.match(sub.getValue() * boost, "product of:", Explanation.match(boost, "Boost"), sub);
+    }
+
+    @Override
     public Collection<ChildScorer> getChildren() {
       return Collections.singleton(new ChildScorer(in, "BOOSTED"));
     }
@@ -72,6 +78,16 @@ class BooleanTopLevelScorers {
     public float score() throws IOException {
       return (req.score() + opt.score()) * coords[reqCount + opt.freq()];
     }
+
+    @Override
+    public Explanation explain() throws IOException {
+      Explanation reqExpl = req.explain();
+      Explanation optExpl = opt.explain();
+      float coord = coords[reqCount + opt.freq()];
+      Explanation sum = Explanation.match(reqExpl.getValue() + optExpl.getValue(), "sum of:", reqExpl, optExpl);
+      return Explanation.match(sum.getValue() * coord, "product of:",
+          Explanation.match(coord, "coord=" + coord), sum);
+    }
   }
   
   /** 
@@ -106,6 +122,22 @@ class BooleanTopLevelScorers {
       
       return optScorerDoc == curDoc ? (reqScore + optScorer.score()) * coordBoth : reqScore * coordReq;
     }
+
+    @Override
+    public Explanation explain() throws IOException {
+      Explanation req = reqScorer.explain();
+      int curDoc = reqScorer.docID();
+      int optScorerDoc = optScorer.docID();
+      if (optScorer != null && (optScorerDoc < curDoc && optScorer.advance(curDoc) == curDoc)) {
+        Explanation opt = optScorer.explain();
+        Explanation sum = Explanation.match(req.getValue() + opt.getValue(), "sum of:", req, opt);
+        return Explanation.match(sum.getValue() * coordBoth, "product of:",
+            Explanation.match(coordBoth, "coord=" + coordBoth), sum);
+      }
+
+      return Explanation.match(req.getValue() * coordReq, "product of:",
+          Explanation.match(coordReq, "coord=" + coordReq), req);
+    }
   }
 
   /** 
@@ -138,5 +170,24 @@ class BooleanTopLevelScorers {
       
       return optScorerDoc == curDoc ? (reqScore + optScorer.score()) * coords[requiredCount + optScorer.freq()] : reqScore * coords[requiredCount];
     }
+
+    @Override
+    public Explanation explain() throws IOException {
+      int curDoc = reqScorer.docID();
+      Explanation req = reqScorer.explain();
+
+      int optScorerDoc = optScorer.docID();
+      if (optScorer != null && (optScorerDoc < curDoc && optScorer.advance(curDoc) == curDoc)) {
+        int coord = requiredCount + optScorer.freq();
+        Explanation opt = optScorer.explain();
+        Explanation sum = Explanation.match(req.getValue() + opt.getValue(), "sum of:", req, opt);
+        return Explanation.match(sum.getValue() * coords[coord], "product of:",
+            Explanation.match(coords[coord], "coord=" + coord), sum);
+      }
+
+      return Explanation.match(req.getValue() * coords[requiredCount], "product of:",
+          Explanation.match(coords[requiredCount], "coord=" + requiredCount), req);
+
+    }
   }
 }
diff --git a/lucene/core/src/java/org/apache/lucene/search/BooleanWeight.java b/lucene/core/src/java/org/apache/lucene/search/BooleanWeight.java
index d4df0a0..b2507de 100644
--- a/lucene/core/src/java/org/apache/lucene/search/BooleanWeight.java
+++ b/lucene/core/src/java/org/apache/lucene/search/BooleanWeight.java
@@ -137,58 +137,37 @@ final class BooleanWeight extends Weight {
   }
 
   @Override
-  public Explanation explain(LeafReaderContext context, int doc) throws IOException {
-    final int minShouldMatch = query.getMinimumNumberShouldMatch();
-    List<Explanation> subs = new ArrayList<>();
-    int coord = 0;
-    float sum = 0.0f;
-    boolean fail = false;
+  protected Explanation explainMiss(LeafReaderContext context, int doc) throws IOException {
+    int optionalMatches = 0;
     int matchCount = 0;
-    int shouldMatchCount = 0;
-    Iterator<BooleanClause> cIter = query.iterator();
-    for (Iterator<Weight> wIter = weights.iterator(); wIter.hasNext();) {
-      Weight w = wIter.next();
-      BooleanClause c = cIter.next();
+    List<Explanation> reasons = new ArrayList<>();
+
+    Iterator<BooleanClause> clauses = query.iterator();
+    for (Weight w : weights) {
       Explanation e = w.explain(context, doc);
+      BooleanClause clause = clauses.next();
       if (e.isMatch()) {
-        if (c.isScoring()) {
-          subs.add(e);
-          sum += e.getValue();
-          coord++;
-        } else if (c.isRequired()) {
-          subs.add(Explanation.match(0f, "match on required clause, product of:",
-              Explanation.match(0f, Occur.FILTER + " clause"), e));
-        } else if (c.isProhibited()) {
-          subs.add(Explanation.noMatch("match on prohibited clause (" + c.getQuery().toString() + ")", e));
-          fail = true;
+        if (clause.isProhibited()) {
+          reasons.add(Explanation.noMatch("match on prohibited clause (" + clause.getQuery().toString() + ")", e));
         }
-        if (!c.isProhibited()) {
+        else {
           matchCount++;
         }
-        if (c.getOccur() == Occur.SHOULD) {
-          shouldMatchCount++;
-        }
-      } else if (c.isRequired()) {
-        subs.add(Explanation.noMatch("no match on required clause (" + c.getQuery().toString() + ")", e));
-        fail = true;
+        if (clause.getOccur() == Occur.SHOULD)
+          optionalMatches++;
       }
-    }
-    if (fail) {
-      return Explanation.noMatch("Failure to meet condition(s) of required/prohibited clause(s)", subs);
-    } else if (matchCount == 0) {
-      return Explanation.noMatch("No matching clauses", subs);
-    } else if (shouldMatchCount < minShouldMatch) {
-      return Explanation.noMatch("Failure to match minimum number of optional clauses: " + minShouldMatch, subs);
-    } else {
-      // we have a match
-      Explanation result = Explanation.match(sum, "sum of:", subs);
-      final float coordFactor = disableCoord ? 1.0f : coord(coord, maxCoord);
-      if (coordFactor != 1f) {
-        result = Explanation.match(sum * coordFactor, "product of:",
-            result, Explanation.match(coordFactor, "coord("+coord+"/"+maxCoord+")"));
+      else if (clause.isRequired()) {
+        reasons.add(Explanation.noMatch("no match on required clause (" + clause.getQuery().toString() + ")", e));
       }
-      return result;
+
     }
+    if (matchCount == 0)
+      reasons.add(Explanation.noMatch("No matching clauses"));
+    else if (optionalMatches < query.getMinimumNumberShouldMatch() || reasons.size() == 0)
+      reasons.add(Explanation.noMatch("Failure to match minimum number of optional clauses: "
+          + query.getMinimumNumberShouldMatch()));
+
+    return Explanation.noMatch("Didn't meet boolean requirements", reasons);
   }
 
   /** Try to build a boolean scorer for this weight. Returns null if {@link BooleanScorer}
@@ -383,6 +362,10 @@ final class BooleanWeight extends Weight {
           public int freq() throws IOException {
             return 0;
           }
+          @Override
+          public Explanation explain() throws IOException {
+            return Explanation.match(0, "match");
+          }
         };
       }
       
diff --git a/lucene/core/src/java/org/apache/lucene/search/CachingCollector.java b/lucene/core/src/java/org/apache/lucene/search/CachingCollector.java
index f0156b7..33a5fda 100644
--- a/lucene/core/src/java/org/apache/lucene/search/CachingCollector.java
+++ b/lucene/core/src/java/org/apache/lucene/search/CachingCollector.java
@@ -74,6 +74,11 @@ public abstract class CachingCollector extends FilterCollector {
     public final int freq() { throw new UnsupportedOperationException(); }
 
     @Override
+    public Explanation explain() throws IOException {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
     public final int nextDoc() { throw new UnsupportedOperationException(); }
 
     @Override
diff --git a/lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer.java b/lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer.java
index cca15c0..c08bd18 100644
--- a/lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer.java
+++ b/lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer.java
@@ -72,6 +72,19 @@ class ConjunctionScorer extends Scorer {
   }
 
   @Override
+  public Explanation explain() throws IOException {
+    List<Explanation> subs = new ArrayList<>(scorers.length);
+    double sum = 0.0d;
+    for (Scorer scorer : scorers) {
+      Explanation sub = scorer.explain();
+      sum += sub.getValue();
+      subs.add(sub);
+    }
+    Explanation sumExplanation = Explanation.match((float) sum, "sum of:", subs);
+    return Explanation.match(coord * (float) sum, "product of:", Explanation.match(coord, "coord"), sumExplanation);
+  }
+
+  @Override
   public int freq() {
     return scorers.length;
   }
diff --git a/lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery.java b/lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery.java
index 4e534fc..6ca9977 100644
--- a/lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery.java
@@ -101,6 +101,10 @@ public class ConstantScoreQuery extends Query {
             public int freq() throws IOException {
               return 1;
             }
+            @Override
+            public Explanation explain() throws IOException {
+              return Explanation.match(theScore, "Constant score = " + theScore);
+            }
           });
         }
       };
@@ -144,6 +148,10 @@ public class ConstantScoreQuery extends Query {
               return 1;
             }
             @Override
+            public Explanation explain() throws IOException {
+              return Explanation.match(score, "Constant score = " + score);
+            }
+            @Override
             public Collection<ChildScorer> getChildren() {
               return Collections.singleton(new ChildScorer(innerScorer, "constant"));
             }
diff --git a/lucene/core/src/java/org/apache/lucene/search/ConstantScoreScorer.java b/lucene/core/src/java/org/apache/lucene/search/ConstantScoreScorer.java
index e07ab26..c93de35 100644
--- a/lucene/core/src/java/org/apache/lucene/search/ConstantScoreScorer.java
+++ b/lucene/core/src/java/org/apache/lucene/search/ConstantScoreScorer.java
@@ -69,6 +69,11 @@ public final class ConstantScoreScorer extends Scorer {
   }
 
   @Override
+  public Explanation explain() throws IOException {
+    return Explanation.match(score, "Constant score of " + score);
+  }
+
+  @Override
   public int docID() {
     return disi.docID();
   }
diff --git a/lucene/core/src/java/org/apache/lucene/search/ConstantScoreWeight.java b/lucene/core/src/java/org/apache/lucene/search/ConstantScoreWeight.java
index 4405691..600b3b9 100644
--- a/lucene/core/src/java/org/apache/lucene/search/ConstantScoreWeight.java
+++ b/lucene/core/src/java/org/apache/lucene/search/ConstantScoreWeight.java
@@ -65,27 +65,8 @@ public abstract class ConstantScoreWeight extends Weight {
   }
 
   @Override
-  public final Explanation explain(LeafReaderContext context, int doc) throws IOException {
-    final Scorer s = scorer(context, context.reader().getLiveDocs());
-    final boolean exists;
-    if (s == null) {
-      exists = false;
-    } else {
-      final TwoPhaseIterator twoPhase = s.asTwoPhaseIterator();
-      if (twoPhase == null) {
-        exists = s.advance(doc) == doc;
-      } else {
-        exists = twoPhase.approximation().advance(doc) == doc && twoPhase.matches();
-      }
-    }
-
-    if (exists) {
-      return Explanation.match(
-          queryWeight, getQuery().toString() + ", product of:",
-          Explanation.match(getQuery().getBoost(), "boost"), Explanation.match(queryNorm, "queryNorm"));
-    } else {
-      return Explanation.noMatch(getQuery().toString() + " doesn't match id " + doc);
-    }
+  protected Explanation explainMiss(LeafReaderContext context, int doc) throws IOException {
+    return Explanation.noMatch(getQuery().toString() + " doesn't match id " + doc);
   }
 
 }
diff --git a/lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.java b/lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.java
index 5de3594..2a58c68 100644
--- a/lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.java
@@ -181,30 +181,10 @@ public class DisjunctionMaxQuery extends Query implements Iterable<Query> {
       }
     }
 
-    /** Explain the score we computed for doc */
     @Override
-    public Explanation explain(LeafReaderContext context, int doc) throws IOException {
-      boolean match = false;
-      float max = 0.0f, sum = 0.0f;
-      List<Explanation> subs = new ArrayList<>();
-      for (Weight wt : weights) {
-        Explanation e = wt.explain(context, doc);
-        if (e.isMatch()) {
-          match = true;
-          subs.add(e);
-          sum += e.getValue();
-          max = Math.max(max, e.getValue());
-        }
-      }
-      if (match) {
-        final float score = max + (sum - max) * tieBreakerMultiplier;
-        final String desc = tieBreakerMultiplier == 0.0f ? "max of:" : "max plus " + tieBreakerMultiplier + " times others of:";
-        return Explanation.match(score, desc, subs);
-      } else {
-        return Explanation.noMatch("No matching clause");
-      }
+    protected Explanation explainMiss(LeafReaderContext context, int doc) throws IOException {
+      return Explanation.noMatch("No matching clause");
     }
-    
   }  // end of DisjunctionMaxWeight inner class
 
   /** Create the Weight used to score us */
diff --git a/lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer.java b/lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer.java
index 8f3048e..a9bea3a 100644
--- a/lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer.java
+++ b/lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer.java
@@ -17,6 +17,7 @@ package org.apache.lucene.search;
  */
 
 import java.io.IOException;
+import java.util.ArrayList;
 import java.util.List;
 
 /**
@@ -58,4 +59,24 @@ final class DisjunctionMaxScorer extends DisjunctionScorer {
     }
     return scoreMax + (scoreSum - scoreMax) * tieBreakerMultiplier; 
   }
+
+  @Override
+  protected Explanation explain(DisiWrapper<Scorer> topList) throws IOException {
+    float scoreSum = 0;
+    float scoreMax = 0;
+    List<Explanation> subs = new ArrayList<>();
+    for (DisiWrapper<Scorer> w = topList; w != null; w = w.next) {
+      Explanation e = w.iterator.explain();
+      final float subScore = e.getValue();
+      scoreSum += subScore;
+      if (subScore > scoreMax) {
+        scoreMax = subScore;
+      }
+      subs.add(e);
+    }
+    if (tieBreakerMultiplier == 0)
+      return Explanation.match(scoreMax, "max of:", subs);
+    Explanation tb = Explanation.match((scoreSum - scoreMax) * tieBreakerMultiplier, "tie breaker");
+    return Explanation.match(scoreMax + tb.getValue(), "sum of:", Explanation.match(scoreMax, "max of:", subs), tb);
+  }
 }
diff --git a/lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer.java b/lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer.java
index 7dbb733..e361b59 100644
--- a/lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer.java
+++ b/lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer.java
@@ -163,9 +163,19 @@ abstract class DisjunctionScorer extends Scorer {
     return score(topScorers);
   }
 
+  @Override
+  public Explanation explain() throws IOException {
+    if (topScorers == null) {
+      topScorers = subScorers.topList();
+    }
+    return explain(topScorers);
+  }
+
   /** Compute the score for the given linked list of scorers. */
   protected abstract float score(DisiWrapper<Scorer> topList) throws IOException;
 
+  protected abstract Explanation explain(DisiWrapper<Scorer> topList) throws IOException;
+
   @Override
   public final Collection<ChildScorer> getChildren() {
     ArrayList<ChildScorer> children = new ArrayList<>();
diff --git a/lucene/core/src/java/org/apache/lucene/search/DisjunctionSumScorer.java b/lucene/core/src/java/org/apache/lucene/search/DisjunctionSumScorer.java
index 6cf167b..4ba0a81 100644
--- a/lucene/core/src/java/org/apache/lucene/search/DisjunctionSumScorer.java
+++ b/lucene/core/src/java/org/apache/lucene/search/DisjunctionSumScorer.java
@@ -18,6 +18,7 @@ package org.apache.lucene.search;
  */
 
 import java.io.IOException;
+import java.util.ArrayList;
 import java.util.List;
 
 /** A Scorer for OR like queries, counterpart of <code>ConjunctionScorer</code>.
@@ -46,4 +47,20 @@ final class DisjunctionSumScorer extends DisjunctionScorer {
     }
     return (float)score * coord[freq];
   }
+
+  @Override
+  protected Explanation explain(DisiWrapper<Scorer> topList) throws IOException {
+    double score = 0;
+    int freq = 0;
+    List<Explanation> subs = new ArrayList<>();
+    for (DisiWrapper<Scorer> w = topList; w != null; w = w.next) {
+      Explanation e = w.iterator.explain();
+      score += e.getValue();
+      freq += 1;
+      subs.add(e);
+    }
+    return Explanation.match((float) score * coord[freq], "product of:",
+        Explanation.match(coord[freq], "coord"),
+        Explanation.match((float) score, "sum of:", subs));
+  }
 }
diff --git a/lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer.java b/lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer.java
index 48060ef..30e8016 100644
--- a/lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer.java
+++ b/lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer.java
@@ -109,6 +109,16 @@ final class ExactPhraseScorer extends Scorer {
     return docScorer.score(docID(), freq);
   }
 
+  @Override
+  public Explanation explain() {
+    Explanation freqExplanation = Explanation.match(freq, "phraseFreq=" + freq);
+    Explanation scoreExplanation = docScorer.explain(docID(), freqExplanation);
+    return Explanation.match(
+        scoreExplanation.getValue(),
+        "weight("+weight.getQuery()+" in "+docID()+") [" + docScorer.getClass().getSimpleName() + "], result of:",
+        scoreExplanation);
+  }
+
   /** Advance the given pos enum to the first doc on or after {@code target}.
    *  Return {@code false} if the enum was exhausted before reaching
    *  {@code target} and {@code true} otherwise. */
diff --git a/lucene/core/src/java/org/apache/lucene/search/FakeScorer.java b/lucene/core/src/java/org/apache/lucene/search/FakeScorer.java
index e2a50c8..9c12065 100644
--- a/lucene/core/src/java/org/apache/lucene/search/FakeScorer.java
+++ b/lucene/core/src/java/org/apache/lucene/search/FakeScorer.java
@@ -17,6 +17,7 @@ package org.apache.lucene.search;
  * limitations under the License.
  */
 
+import java.io.IOException;
 import java.util.Collection;
 
 /** Used by {@link BulkScorer}s that need to pass a {@link
@@ -46,6 +47,11 @@ final class FakeScorer extends Scorer {
   }
 
   @Override
+  public Explanation explain() throws IOException {
+    throw new UnsupportedOperationException("FakeScorer doesn't support explain()");
+  }
+
+  @Override
   public int nextDoc() {
     throw new UnsupportedOperationException("FakeScorer doesn't support nextDoc()");
   }
diff --git a/lucene/core/src/java/org/apache/lucene/search/Filter.java b/lucene/core/src/java/org/apache/lucene/search/Filter.java
index 51e98cb..2e955ff 100644
--- a/lucene/core/src/java/org/apache/lucene/search/Filter.java
+++ b/lucene/core/src/java/org/apache/lucene/search/Filter.java
@@ -79,18 +79,6 @@ public abstract class Filter extends Query {
       public void normalize(float norm, float topLevelBoost) {}
 
       @Override
-      public Explanation explain(LeafReaderContext context, int doc) throws IOException {
-        final Scorer scorer = scorer(context, context.reader().getLiveDocs());
-        final boolean match = (scorer != null && scorer.advance(doc) == doc);
-        if (match) {
-          assert scorer.score() == 0f;
-          return Explanation.match(0f, "Match on id " + doc);
-        } else {
-          return Explanation.match(0f, "No match on id " + doc);
-        }
-      }
-
-      @Override
       public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {
         final DocIdSet set = getDocIdSet(context, acceptDocs);
         if (set == null) {
diff --git a/lucene/core/src/java/org/apache/lucene/search/FilterScorer.java b/lucene/core/src/java/org/apache/lucene/search/FilterScorer.java
index 7b5e340..c672ea2 100644
--- a/lucene/core/src/java/org/apache/lucene/search/FilterScorer.java
+++ b/lucene/core/src/java/org/apache/lucene/search/FilterScorer.java
@@ -80,7 +80,7 @@ public abstract class FilterScorer extends Scorer {
   public long cost() {
     return in.cost();
   }
-  
+
   @Override
   public final TwoPhaseIterator asTwoPhaseIterator() {
     return in.asTwoPhaseIterator();
diff --git a/lucene/core/src/java/org/apache/lucene/search/FilteredQuery.java b/lucene/core/src/java/org/apache/lucene/search/FilteredQuery.java
index bbd6cfd..fba049a 100644
--- a/lucene/core/src/java/org/apache/lucene/search/FilteredQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/FilteredQuery.java
@@ -96,22 +96,6 @@ public class FilteredQuery extends Query {
         weight.normalize(norm, topLevelBoost * getBoost()); // incorporate boost
       }
 
-      @Override
-      public Explanation explain(LeafReaderContext ir, int i) throws IOException {
-        Explanation inner = weight.explain (ir, i);
-        Filter f = FilteredQuery.this.filter;
-        DocIdSet docIdSet = f.getDocIdSet(ir, ir.reader().getLiveDocs());
-        DocIdSetIterator docIdSetIterator = docIdSet == null ? DocIdSetIterator.empty() : docIdSet.iterator();
-        if (docIdSetIterator == null) {
-          docIdSetIterator = DocIdSetIterator.empty();
-        }
-        if (docIdSetIterator.advance(i) == i) {
-          return inner;
-        } else {
-          return Explanation.noMatch("failure to match filter: " + f.toString(), inner);
-        }
-      }
-
       // return a filtering scorer
       @Override
       public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {
@@ -196,6 +180,11 @@ public class FilteredQuery extends Query {
     }
 
     @Override
+    public Explanation explain() throws IOException {
+      return scorer.explain();
+    }
+
+    @Override
     public long cost() {
       return scorer.cost();
     }
@@ -320,6 +309,11 @@ public class FilteredQuery extends Query {
     }
 
     @Override
+    public Explanation explain() throws IOException {
+      return scorer.explain();
+    }
+
+    @Override
     public TwoPhaseIterator asTwoPhaseIterator() {
       return conjunction.asTwoPhaseIterator();
     }
diff --git a/lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer.java b/lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer.java
index a93bed2..74f8b08 100644
--- a/lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer.java
+++ b/lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer.java
@@ -272,6 +272,21 @@ final class MinShouldMatchSumScorer extends Scorer {
   }
 
   @Override
+  public Explanation explain() throws IOException {
+    updateFreq();
+    double score = 0;
+    List<Explanation> subs = new ArrayList<>();
+    for (DisiWrapper<Scorer> s = lead; s != null; s = s.next) {
+      Explanation e = s.iterator.explain();
+      score += e.getValue();
+      subs.add(e);
+    }
+    return Explanation.match(coord[freq] * (float) score, "Product of:",
+        Explanation.match(coord[freq], "coord=" + coord[freq]),
+        Explanation.match((float) score, "Sum of:", subs));
+  }
+
+  @Override
   public float score() throws IOException {
     // we need to know about all matches
     updateFreq();
diff --git a/lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.java b/lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.java
index 63a04c6..48f6c4a 100644
--- a/lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.java
@@ -20,17 +20,7 @@ package org.apache.lucene.search;
 import java.io.IOException;
 import java.util.*;
 
-import org.apache.lucene.index.LeafReaderContext;
-import org.apache.lucene.index.LeafReader;
-import org.apache.lucene.index.PostingsEnum;
-import org.apache.lucene.index.IndexReader;
-import org.apache.lucene.index.IndexReaderContext;
-import org.apache.lucene.index.Term;
-import org.apache.lucene.index.TermContext;
-import org.apache.lucene.index.TermState;
-import org.apache.lucene.index.Terms;
-import org.apache.lucene.index.TermsEnum;
-import org.apache.lucene.search.similarities.Similarity.SimScorer;
+import org.apache.lucene.index.*;
 import org.apache.lucene.search.similarities.Similarity;
 import org.apache.lucene.util.ArrayUtil;
 import org.apache.lucene.util.Bits;
@@ -231,25 +221,6 @@ public class MultiPhraseQuery extends Query {
       }
     }
 
-    @Override
-    public Explanation explain(LeafReaderContext context, int doc) throws IOException {
-      Scorer scorer = scorer(context, context.reader().getLiveDocs());
-      if (scorer != null) {
-        int newDoc = scorer.advance(doc);
-        if (newDoc == doc) {
-          float freq = slop == 0 ? scorer.freq() : ((SloppyPhraseScorer)scorer).sloppyFreq();
-          SimScorer docScorer = similarity.simScorer(stats, context);
-          Explanation freqExplanation = Explanation.match(freq, "phraseFreq=" + freq);
-          Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);
-          return Explanation.match(
-              scoreExplanation.getValue(),
-              "weight("+getQuery()+" in "+doc+") [" + similarity.getClass().getSimpleName() + "], result of:",
-              scoreExplanation);
-        }
-      }
-      
-      return Explanation.noMatch("no matching term");
-    }
   }
 
   @Override
diff --git a/lucene/core/src/java/org/apache/lucene/search/PhraseQuery.java b/lucene/core/src/java/org/apache/lucene/search/PhraseQuery.java
index a808378..a2f691b 100644
--- a/lucene/core/src/java/org/apache/lucene/search/PhraseQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/PhraseQuery.java
@@ -24,18 +24,8 @@ import java.util.Collections;
 import java.util.List;
 import java.util.Set;
 
-import org.apache.lucene.index.IndexReader;
-import org.apache.lucene.index.IndexReaderContext;
-import org.apache.lucene.index.LeafReader;
-import org.apache.lucene.index.LeafReaderContext;
-import org.apache.lucene.index.PostingsEnum;
-import org.apache.lucene.index.Term;
-import org.apache.lucene.index.TermContext;
-import org.apache.lucene.index.TermState;
-import org.apache.lucene.index.Terms;
-import org.apache.lucene.index.TermsEnum;
+import org.apache.lucene.index.*;
 import org.apache.lucene.search.similarities.Similarity;
-import org.apache.lucene.search.similarities.Similarity.SimScorer;
 import org.apache.lucene.util.ArrayUtil;
 import org.apache.lucene.util.Bits;
 import org.apache.lucene.util.BytesRef;
@@ -356,7 +346,7 @@ public class PhraseQuery extends Query {
     private transient TermContext states[];
 
     public PhraseWeight(IndexSearcher searcher, boolean needsScores)
-      throws IOException {
+        throws IOException {
       super(PhraseQuery.this);
       final int[] positions = PhraseQuery.this.getPositions();
       if (positions.length < 2) {
@@ -383,7 +373,9 @@ public class PhraseQuery extends Query {
     }
 
     @Override
-    public String toString() { return "weight(" + PhraseQuery.this + ")"; }
+    public String toString() {
+      return "weight(" + PhraseQuery.this + ")";
+    }
 
     @Override
     public float getValueForNormalization() {
@@ -413,12 +405,12 @@ public class PhraseQuery extends Query {
 
       // Reuse single TermsEnum below:
       final TermsEnum te = fieldTerms.iterator();
-      
+
       for (int i = 0; i < terms.length; i++) {
         final Term t = terms[i];
         final TermState state = states[i].get(context.ord);
         if (state == null) { /* term doesnt exist in this segment */
-          assert termNotInReader(reader, t): "no termstate found but term exists in reader";
+          assert termNotInReader(reader, t) : "no termstate found but term exists in reader";
           return null;
         }
         te.seekExact(t.bytes(), state);
@@ -437,31 +429,12 @@ public class PhraseQuery extends Query {
         return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context), needsScores);
       }
     }
-    
+
     // only called from assert
     private boolean termNotInReader(LeafReader reader, Term term) throws IOException {
       return reader.docFreq(term) == 0;
     }
 
-    @Override
-    public Explanation explain(LeafReaderContext context, int doc) throws IOException {
-      Scorer scorer = scorer(context, context.reader().getLiveDocs());
-      if (scorer != null) {
-        int newDoc = scorer.advance(doc);
-        if (newDoc == doc) {
-          float freq = slop == 0 ? scorer.freq() : ((SloppyPhraseScorer)scorer).sloppyFreq();
-          SimScorer docScorer = similarity.simScorer(stats, context);
-          Explanation freqExplanation = Explanation.match(freq, "phraseFreq=" + freq);
-          Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);
-          return Explanation.match(
-              scoreExplanation.getValue(),
-              "weight("+getQuery()+" in "+doc+") [" + similarity.getClass().getSimpleName() + "], result of:",
-              scoreExplanation);
-        }
-      }
-      
-      return Explanation.noMatch("no matching term");
-    }
   }
 
   @Override
diff --git a/lucene/core/src/java/org/apache/lucene/search/ReqExclScorer.java b/lucene/core/src/java/org/apache/lucene/search/ReqExclScorer.java
index 125d887..00c78c5 100644
--- a/lucene/core/src/java/org/apache/lucene/search/ReqExclScorer.java
+++ b/lucene/core/src/java/org/apache/lucene/search/ReqExclScorer.java
@@ -112,6 +112,11 @@ class ReqExclScorer extends Scorer {
   }
 
   @Override
+  public Explanation explain() throws IOException {
+    return reqScorer.explain();
+  }
+
+  @Override
   public long cost() {
     return reqScorer.cost();
   }
diff --git a/lucene/core/src/java/org/apache/lucene/search/ReqOptSumScorer.java b/lucene/core/src/java/org/apache/lucene/search/ReqOptSumScorer.java
index a6507fd..b35cfad 100644
--- a/lucene/core/src/java/org/apache/lucene/search/ReqOptSumScorer.java
+++ b/lucene/core/src/java/org/apache/lucene/search/ReqOptSumScorer.java
@@ -91,6 +91,26 @@ class ReqOptSumScorer extends Scorer {
   }
 
   @Override
+  public Explanation explain() throws IOException {
+
+    Explanation req = reqScorer.explain();
+
+    if (optScorer == null)
+      return req;
+
+    int reqScorerDoc = reqScorer.docID();
+    int optScorerDoc = optScorer.docID();
+    if (optScorerDoc < reqScorer.docID() && (optScorerDoc = optScorer.advance(reqScorerDoc)) == NO_MORE_DOCS)
+      return req;
+
+    if (optScorerDoc != reqScorerDoc)
+      return req;
+
+    Explanation opt = optScorer.explain();
+    return Explanation.match(req.getValue() + opt.getValue(), "sum of:", req, opt);
+  }
+
+  @Override
   public int freq() throws IOException {
     // we might have deferred advance()
     score();
diff --git a/lucene/core/src/java/org/apache/lucene/search/ScoreCachingWrappingScorer.java b/lucene/core/src/java/org/apache/lucene/search/ScoreCachingWrappingScorer.java
index 2ffe3d5..974a702 100644
--- a/lucene/core/src/java/org/apache/lucene/search/ScoreCachingWrappingScorer.java
+++ b/lucene/core/src/java/org/apache/lucene/search/ScoreCachingWrappingScorer.java
@@ -54,6 +54,11 @@ public class ScoreCachingWrappingScorer extends FilterScorer {
   }
 
   @Override
+  public Explanation explain() throws IOException {
+    return in.explain();  // TODO ExplanationCachingWrappingScorer?
+  }
+
+  @Override
   public Collection<ChildScorer> getChildren() {
     return Collections.singleton(new ChildScorer(in, "CACHED"));
   }
diff --git a/lucene/core/src/java/org/apache/lucene/search/Scorer.java b/lucene/core/src/java/org/apache/lucene/search/Scorer.java
index d5c90f5..69df0ed 100644
--- a/lucene/core/src/java/org/apache/lucene/search/Scorer.java
+++ b/lucene/core/src/java/org/apache/lucene/search/Scorer.java
@@ -62,6 +62,11 @@ public abstract class Scorer extends DocIdSetIterator {
   /** Returns the freq of this Scorer on the current document */
   public abstract int freq() throws IOException;
 
+  /**
+   * Returns an Explanation of the score of the current document
+   */
+  public abstract Explanation explain() throws IOException;
+
   /** returns parent Weight
    * @lucene.experimental
    */
diff --git a/lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer.java b/lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer.java
index 4ee2bf6..6d17c77 100644
--- a/lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer.java
+++ b/lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer.java
@@ -567,6 +567,16 @@ final class SloppyPhraseScorer extends Scorer {
   }
 
   @Override
+  public Explanation explain() {
+    Explanation freqExplanation = Explanation.match(sloppyFreq, "phraseFreq=" + sloppyFreq);
+    Explanation scoreExplanation = docScorer.explain(docID(), freqExplanation);
+    return Explanation.match(
+        scoreExplanation.getValue(),
+        "weight("+weight.getQuery()+" in "+docID()+") [" + docScorer.getClass().getSimpleName() + "], result of:",
+        scoreExplanation);
+  }
+
+  @Override
   public int advance(int target) throws IOException {
     assert target > docID();
     int doc;
diff --git a/lucene/core/src/java/org/apache/lucene/search/TermQuery.java b/lucene/core/src/java/org/apache/lucene/search/TermQuery.java
index ebbfdb8..2bd88c4 100644
--- a/lucene/core/src/java/org/apache/lucene/search/TermQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/TermQuery.java
@@ -134,25 +134,6 @@ public class TermQuery extends Query {
       return reader.docFreq(term) == 0;
     }
 
-    @Override
-    public Explanation explain(LeafReaderContext context, int doc) throws IOException {
-      Scorer scorer = scorer(context, context.reader().getLiveDocs());
-      if (scorer != null) {
-        int newDoc = scorer.advance(doc);
-        if (newDoc == doc) {
-          float freq = scorer.freq();
-          SimScorer docScorer = similarity.simScorer(stats, context);
-          Explanation freqExplanation = Explanation.match(freq, "termFreq=" + freq);
-          Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);
-          return Explanation.match(
-              scoreExplanation.getValue(),
-              "weight(" + getQuery() + " in " + doc + ") ["
-                  + similarity.getClass().getSimpleName() + "], result of:",
-              scoreExplanation);
-        }
-      }
-      return Explanation.noMatch("no matching term");
-    }
   }
 
   /** Constructs a query for the term <code>t</code>. */
diff --git a/lucene/core/src/java/org/apache/lucene/search/TermScorer.java b/lucene/core/src/java/org/apache/lucene/search/TermScorer.java
index 94951dc..3a73943 100644
--- a/lucene/core/src/java/org/apache/lucene/search/TermScorer.java
+++ b/lucene/core/src/java/org/apache/lucene/search/TermScorer.java
@@ -54,6 +54,16 @@ final class TermScorer extends Scorer {
   public int freq() throws IOException {
     return postingsEnum.freq();
   }
+  @Override
+  public Explanation explain() throws IOException {
+    int freq = freq();
+    Explanation freqExplanation = Explanation.match(freq, "termFreq=" + freq);
+    Explanation scoreExplanation = docScorer.explain(docID(), freqExplanation);
+    return Explanation.match(
+        scoreExplanation.getValue(),
+        "weight("+weight.getQuery()+" in "+docID()+") [" + docScorer.getClass().getSimpleName() + "], result of:",
+        scoreExplanation);
+  }
 
   /**
    * Advances to the next document matching the query. <br>
diff --git a/lucene/core/src/java/org/apache/lucene/search/Weight.java b/lucene/core/src/java/org/apache/lucene/search/Weight.java
index f377f6e..bbc3811 100644
--- a/lucene/core/src/java/org/apache/lucene/search/Weight.java
+++ b/lucene/core/src/java/org/apache/lucene/search/Weight.java
@@ -83,7 +83,24 @@ public abstract class Weight {
    * @return an Explanation for the score
    * @throws IOException if an {@link IOException} occurs
    */
-  public abstract Explanation explain(LeafReaderContext context, int doc) throws IOException;
+  public final Explanation explain(LeafReaderContext context, int doc) throws IOException {
+    Scorer scorer = scorer(context, null);
+    if (scorer == null || scorer.advance(doc) != doc)
+      return explainMiss(context, doc);
+    return scorer.explain();
+  }
+
+  /**
+   * An explanation of why the named document doesn't match this Weight
+   *
+   * @param context the readers context to create the {@link Explanation} for.
+   * @param doc the document's id relative to the given context's reader
+   * @return an Explanation for the miss
+   * @throws IOException if an {@link IOException} occurs
+   */
+  protected Explanation explainMiss(LeafReaderContext context, int doc) throws IOException {
+    return Explanation.noMatch("no matching term");
+  }
 
   /** The query that this concerns. */
   public final Query getQuery() {
diff --git a/lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.java b/lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.java
index 5b3ac10..7b0a043 100644
--- a/lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.java
@@ -17,6 +17,14 @@ package org.apache.lucene.search.payloads;
  * limitations under the License.
  */
 
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Objects;
+
 import org.apache.lucene.index.LeafReaderContext;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.index.TermContext;
@@ -25,7 +33,6 @@ import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.Scorer;
 import org.apache.lucene.search.similarities.DefaultSimilarity;
 import org.apache.lucene.search.similarities.Similarity;
-import org.apache.lucene.search.similarities.Similarity.SimScorer;
 import org.apache.lucene.search.spans.SpanNearQuery;
 import org.apache.lucene.search.spans.SpanQuery;
 import org.apache.lucene.search.spans.SpanScorer;
@@ -35,14 +42,6 @@ import org.apache.lucene.util.Bits;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.ToStringUtils;
 
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Objects;
-
 /**
  * This class is very similar to
  * {@link org.apache.lucene.search.spans.SpanNearQuery} except that it factors
@@ -149,34 +148,7 @@ public class PayloadNearQuery extends SpanNearQuery {
       Similarity.SimScorer simScorer = simWeight == null ? null : similarity.simScorer(simWeight, context);
       return (spans == null) ? null : new PayloadNearSpanScorer(spans, this, simScorer);
     }
-    
-    @Override
-    public Explanation explain(LeafReaderContext context, int doc) throws IOException {
-      PayloadNearSpanScorer scorer = (PayloadNearSpanScorer) scorer(context, context.reader().getLiveDocs());
-      if (scorer != null) {
-        int newDoc = scorer.advance(doc);
-        if (newDoc == doc) {
-          float freq = scorer.freq();
-          Explanation freqExplanation = Explanation.match(freq, "phraseFreq=" + freq);
-          SimScorer docScorer = similarity.simScorer(simWeight, context);
-          Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);
-          Explanation expl = Explanation.match(
-              scoreExplanation.getValue(),
-              "weight("+getQuery()+" in "+doc+") [" + similarity.getClass().getSimpleName() + "], result of:",
-              scoreExplanation);
-          String field = ((SpanQuery)getQuery()).getField();
-          // now the payloads part
-          Explanation payloadExpl = function.explain(doc, field, scorer.payloadsSeen, scorer.payloadScore);
-          // combined
-          return Explanation.match(
-              expl.getValue() * payloadExpl.getValue(),
-              "PayloadNearQuery, product of:",
-              expl, payloadExpl);
-        }
-      }
-      
-      return Explanation.noMatch("no matching term");
-    }
+
   }
 
   public class PayloadNearSpanScorer extends SpanScorer {
@@ -238,6 +210,17 @@ public class PayloadNearQuery extends SpanNearQuery {
       return super.scoreCurrentDoc()
           * function.docScore(docID(), fieldName, payloadsSeen, payloadScore);
     }
+
+    @Override
+    public Explanation explain() throws IOException {
+      ensureFreq();
+      Explanation payloadExpl = function.explain(docID(), field, payloadsSeen, payloadScore);
+      Explanation spanExpl = super.explain();
+      return Explanation.match(
+          spanExpl.getValue() * payloadExpl.getValue(),
+          "PayloadNearQuery, product of:",
+          spanExpl, payloadExpl);
+    }
   }
 
 }
diff --git a/lucene/core/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.java b/lucene/core/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.java
index 4fe571f..b20a1a3 100644
--- a/lucene/core/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.java
@@ -17,6 +17,11 @@ package org.apache.lucene.search.payloads;
  * limitations under the License.
  */
 
+import java.io.IOException;
+import java.util.Collections;
+import java.util.Map;
+import java.util.Objects;
+
 import org.apache.lucene.index.LeafReaderContext;
 import org.apache.lucene.index.PostingsEnum;
 import org.apache.lucene.index.Term;
@@ -25,9 +30,7 @@ import org.apache.lucene.search.Explanation;
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.similarities.DefaultSimilarity;
 import org.apache.lucene.search.similarities.Similarity;
-import org.apache.lucene.search.similarities.Similarity.SimScorer;
 import org.apache.lucene.search.spans.SpanCollector;
-import org.apache.lucene.search.spans.SpanQuery;
 import org.apache.lucene.search.spans.SpanScorer;
 import org.apache.lucene.search.spans.SpanTermQuery;
 import org.apache.lucene.search.spans.SpanWeight;
@@ -35,11 +38,6 @@ import org.apache.lucene.search.spans.Spans;
 import org.apache.lucene.util.Bits;
 import org.apache.lucene.util.BytesRef;
 
-import java.io.IOException;
-import java.util.Collections;
-import java.util.Map;
-import java.util.Objects;
-
 /**
  * This class is very similar to
  * {@link org.apache.lucene.search.spans.SpanTermQuery} except that it factors
@@ -157,6 +155,17 @@ public class PayloadTermQuery extends SpanTermQuery {
             : getPayloadScore();
       }
 
+      @Override
+      public Explanation explain() throws IOException {
+        ensureFreq();
+        Explanation payloadExpl = function.explain(docID(), term.field(), payloadsSeen, payloadScore);
+        if (!includeSpanScore)
+          return Explanation.match(payloadExpl.getValue(), "btq(includeSpanScore=false), result of:", payloadExpl);
+        Explanation spanExplanation = super.explain();
+        return Explanation.match(spanExplanation.getValue() * payloadExpl.getValue(),
+            "btq, product of:", spanExplanation, payloadExpl);
+      }
+
       /**
        * Returns the SpanScorer score only.
        * <p>
@@ -181,41 +190,6 @@ public class PayloadTermQuery extends SpanTermQuery {
         return function.docScore(docID(), term.field(), payloadsSeen, payloadScore);
       }
     }
-    
-    @Override
-    public Explanation explain(LeafReaderContext context, int doc) throws IOException {
-      PayloadTermSpanScorer scorer = scorer(context, context.reader().getLiveDocs());
-      if (scorer != null) {
-        int newDoc = scorer.advance(doc);
-        if (newDoc == doc) {
-          float freq = scorer.sloppyFreq();
-          Explanation freqExplanation = Explanation.match(freq, "phraseFreq=" + freq);
-          SimScorer docScorer = similarity.simScorer(simWeight, context);
-          Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);
-          Explanation expl = Explanation.match(
-              scoreExplanation.getValue(),
-              "weight("+getQuery()+" in "+doc+") [" + similarity.getClass().getSimpleName() + "], result of:",
-              scoreExplanation);
-          // now the payloads part
-          // QUESTION: Is there a way to avoid this skipTo call? We need to know
-          // whether to load the payload or not
-          // GSI: I suppose we could toString the payload, but I don't think that
-          // would be a good idea
-          String field = ((SpanQuery)getQuery()).getField();
-          Explanation payloadExpl = function.explain(doc, field, scorer.payloadsSeen, scorer.payloadScore);
-          // combined
-          if (includeSpanScore) {
-            return Explanation.match(
-                expl.getValue() * payloadExpl.getValue(),
-                "btq, product of:", expl, payloadExpl);
-          } else {
-            return Explanation.match(payloadExpl.getValue(), "btq(includeSpanScore=false), result of:", payloadExpl);
-          }
-        }
-      }
-      
-      return Explanation.noMatch("no matching term");
-    }
   }
 
   @Override
diff --git a/lucene/core/src/java/org/apache/lucene/search/spans/SpanScorer.java b/lucene/core/src/java/org/apache/lucene/search/spans/SpanScorer.java
index 1669dc9..c421940 100644
--- a/lucene/core/src/java/org/apache/lucene/search/spans/SpanScorer.java
+++ b/lucene/core/src/java/org/apache/lucene/search/spans/SpanScorer.java
@@ -17,13 +17,14 @@ package org.apache.lucene.search.spans;
  * limitations under the License.
  */
 
+import java.io.IOException;
+import java.util.Objects;
+
+import org.apache.lucene.search.Explanation;
 import org.apache.lucene.search.Scorer;
 import org.apache.lucene.search.TwoPhaseIterator;
 import org.apache.lucene.search.similarities.Similarity;
 
-import java.io.IOException;
-import java.util.Objects;
-
 /**
  * Public for extension only.
  */
@@ -63,7 +64,7 @@ public class SpanScorer extends Scorer {
   /** 
    * Ensure setFreqCurrentDoc is called, if not already called for the current doc.
    */
-  private final void ensureFreq() throws IOException {
+  protected final void ensureFreq() throws IOException {
     int currentDoc = spans.docID();
     if (lastScoredDoc != currentDoc) {
       setFreqCurrentDoc();
@@ -128,6 +129,17 @@ public class SpanScorer extends Scorer {
   }
 
   @Override
+  public Explanation explain() throws IOException {
+    ensureFreq();
+    Explanation freqExplanation = Explanation.match(freq, "phraseFreq=" + freq);
+    Explanation scoreExplanation = docScorer.explain(docID(), freqExplanation);
+    return Explanation.match(
+        scoreExplanation.getValue(),
+        "weight("+weight.getQuery()+" in "+docID()+") [" + docScorer.getClass().getSimpleName() + "], result of:",
+        scoreExplanation);
+  }
+
+  @Override
   public final int freq() throws IOException {
     ensureFreq();
     return numMatches;
diff --git a/lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight.java b/lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight.java
index ccb0d9c..49b81f6 100644
--- a/lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight.java
+++ b/lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight.java
@@ -17,24 +17,22 @@ package org.apache.lucene.search.spans;
  * limitations under the License.
  */
 
+import java.io.IOException;
+import java.util.Map;
+
 import org.apache.lucene.index.LeafReaderContext;
 import org.apache.lucene.index.PostingsEnum;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.index.TermContext;
 import org.apache.lucene.index.Terms;
 import org.apache.lucene.search.CollectionStatistics;
-import org.apache.lucene.search.Explanation;
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.Scorer;
 import org.apache.lucene.search.TermStatistics;
 import org.apache.lucene.search.Weight;
 import org.apache.lucene.search.similarities.Similarity;
-import org.apache.lucene.search.similarities.Similarity.SimScorer;
 import org.apache.lucene.util.Bits;
 
-import java.io.IOException;
-import java.util.Map;
-
 /**
  * Expert-only.  Public for use by other weight implementations
  */
@@ -146,22 +144,4 @@ public abstract class SpanWeight extends Weight {
     return (spans == null) ? null : new SpanScorer(spans, this, simScorer);
   }
 
-  @Override
-  public Explanation explain(LeafReaderContext context, int doc) throws IOException {
-    SpanScorer scorer = (SpanScorer) scorer(context, context.reader().getLiveDocs());
-    if (scorer != null) {
-      int newDoc = scorer.advance(doc);
-      if (newDoc == doc) {
-        float freq = scorer.sloppyFreq();
-        SimScorer docScorer = similarity.simScorer(simWeight, context);
-        Explanation freqExplanation = Explanation.match(freq, "phraseFreq=" + freq);
-        Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);
-        return Explanation.match(scoreExplanation.getValue(),
-            "weight("+getQuery()+" in "+doc+") [" + similarity.getClass().getSimpleName() + "], result of:",
-            scoreExplanation);
-      }
-    }
-
-    return Explanation.noMatch("no matching term");
-  }
 }
diff --git a/lucene/core/src/test/org/apache/lucene/search/JustCompileSearch.java b/lucene/core/src/test/org/apache/lucene/search/JustCompileSearch.java
index 2cc18a9..1eadb1a 100644
--- a/lucene/core/src/test/org/apache/lucene/search/JustCompileSearch.java
+++ b/lucene/core/src/test/org/apache/lucene/search/JustCompileSearch.java
@@ -201,6 +201,11 @@ final class JustCompileSearch {
     }
 
     @Override
+    public Explanation explain() throws IOException {
+      throw new UnsupportedOperationException(UNSUPPORTED_MSG);
+    }
+
+    @Override
     public int docID() {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
@@ -283,11 +288,6 @@ final class JustCompileSearch {
     }
 
     @Override
-    public Explanation explain(LeafReaderContext context, int doc) {
-      throw new UnsupportedOperationException(UNSUPPORTED_MSG);
-    }
-
-    @Override
     public void normalize(float norm, float topLevelBoost) {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer.java b/lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer.java
index 5c3211f..06bff96 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer.java
@@ -79,11 +79,6 @@ public class TestBooleanScorer extends LuceneTestCase {
         }
 
         @Override
-        public Explanation explain(LeafReaderContext context, int doc) {
-          throw new UnsupportedOperationException();
-        }
-
-        @Override
         public float getValueForNormalization() {
           return 1.0f;
         }
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestCachingCollector.java b/lucene/core/src/test/org/apache/lucene/search/TestCachingCollector.java
index c03f729..6ebd52d 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestCachingCollector.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestCachingCollector.java
@@ -38,6 +38,11 @@ public class TestCachingCollector extends LuceneTestCase {
     public int freq() throws IOException { return 0; }
 
     @Override
+    public Explanation explain() throws IOException {
+      return null;
+    }
+
+    @Override
     public int docID() { return 0; }
 
     @Override
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI.java b/lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI.java
index fe7ed32..fed5695 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI.java
@@ -99,6 +99,11 @@ public class TestConjunctionDISI extends LuceneTestCase {
         return 0;
       }
 
+      @Override
+      public Explanation explain() throws IOException {
+        return null;
+      }
+
     };
   }
 
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.java b/lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.java
index e21a573..f19bc1a 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.java
@@ -356,6 +356,11 @@ public class TestMinShouldMatch2 extends LuceneTestCase {
     }
 
     @Override
+    public Explanation explain() throws IOException {
+      return null;
+    }
+
+    @Override
     public int docID() {
       return currentDoc;
     }
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestNeedsScores.java b/lucene/core/src/test/org/apache/lucene/search/TestNeedsScores.java
index 5a0463b..06096aa 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestNeedsScores.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestNeedsScores.java
@@ -118,11 +118,6 @@ public class TestNeedsScores extends LuceneTestCase {
         }
 
         @Override
-        public Explanation explain(LeafReaderContext context, int doc) throws IOException {
-          return w.explain(context, doc);
-        }
-
-        @Override
         public float getValueForNormalization() throws IOException {
           return w.getValueForNormalization();
         }
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestPositiveScoresOnlyCollector.java b/lucene/core/src/test/org/apache/lucene/search/TestPositiveScoresOnlyCollector.java
index c8017a9..5ab9a61 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestPositiveScoresOnlyCollector.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestPositiveScoresOnlyCollector.java
@@ -17,6 +17,8 @@ package org.apache.lucene.search;
  * limitations under the License.
  */
 
+import java.io.IOException;
+
 import org.apache.lucene.document.Document;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.RandomIndexWriter;
@@ -41,6 +43,11 @@ public class TestPositiveScoresOnlyCollector extends LuceneTestCase {
       return 1;
     }
 
+    @Override
+    public Explanation explain() throws IOException {
+      return null;
+    }
+
     @Override public int docID() { return idx; }
 
     @Override public int nextDoc() {
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.java b/lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.java
index 1d5e7b2..5f1c3d2 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.java
@@ -447,6 +447,11 @@ public class TestQueryRescorer extends LuceneTestCase {
             }
 
             @Override
+            public Explanation explain() throws IOException {
+              return null;
+            }
+
+            @Override
             public long cost() {
               return 1;
             }
@@ -480,10 +485,6 @@ public class TestQueryRescorer extends LuceneTestCase {
           };
         }
 
-        @Override
-        public Explanation explain(LeafReaderContext context, int doc) throws IOException {
-          return null;
-        }
       };
     }
 
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestScoreCachingWrappingScorer.java b/lucene/core/src/test/org/apache/lucene/search/TestScoreCachingWrappingScorer.java
index 4fe88f4..36fbb9a 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestScoreCachingWrappingScorer.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestScoreCachingWrappingScorer.java
@@ -47,6 +47,11 @@ public class TestScoreCachingWrappingScorer extends LuceneTestCase {
       return 1;
     }
 
+    @Override
+    public Explanation explain() throws IOException {
+      return null;
+    }
+
     @Override public int docID() { return doc; }
 
     @Override public int nextDoc() {
diff --git a/lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery.java b/lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery.java
index 5a873a0..2f0ccf5 100644
--- a/lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery.java
+++ b/lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery.java
@@ -16,6 +16,8 @@ package org.apache.lucene.search.payloads;
  * limitations under the License.
  */
 
+import java.io.IOException;
+
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.MockTokenizer;
 import org.apache.lucene.analysis.TokenFilter;
@@ -46,8 +48,6 @@ import org.apache.lucene.util.LuceneTestCase;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 
-import java.io.IOException;
-
 public class TestPayloadNearQuery extends LuceneTestCase {
   private static IndexSearcher searcher;
   private static IndexReader reader;
@@ -210,7 +210,7 @@ public class TestPayloadNearQuery extends LuceneTestCase {
       Explanation explain = searcher.explain(query, hits.scoreDocs[j].doc);
       String exp = explain.toString();
       assertTrue(exp, exp.indexOf("AveragePayloadFunction") > -1);
-      assertTrue(hits.scoreDocs[j].score + " explain value does not equal: " + 3, explain.getValue() == 3f);
+      assertEquals("Explanation value is wrong", hits.scoreDocs[j].score, explain.getValue(), 0.0000001);
     }
   }
   public void testMaxFunction() throws IOException {
@@ -229,7 +229,7 @@ public class TestPayloadNearQuery extends LuceneTestCase {
       Explanation explain = searcher.explain(query, hits.scoreDocs[j].doc);
       String exp = explain.toString();
       assertTrue(exp, exp.indexOf("MaxPayloadFunction") > -1);
-      assertTrue(hits.scoreDocs[j].score + " explain value does not equal: " + 4, explain.getValue() == 4f);
+      assertEquals("Explanation value is wrong", hits.scoreDocs[j].score, explain.getValue(), 0.0000001);
     }
   }  
   public void testMinFunction() throws IOException {
@@ -248,7 +248,7 @@ public class TestPayloadNearQuery extends LuceneTestCase {
       Explanation explain = searcher.explain(query, hits.scoreDocs[j].doc);
       String exp = explain.toString();
       assertTrue(exp, exp.indexOf("MinPayloadFunction") > -1);
-      assertTrue(hits.scoreDocs[j].score + " explain value does not equal: " + 2, explain.getValue() == 2f);
+      assertEquals("Explanation value is wrong", hits.scoreDocs[j].score, explain.getValue(), 0.0000001);
     }
   }  
   private SpanQuery[] getClauses() {
diff --git a/lucene/expressions/src/java/org/apache/lucene/expressions/FakeScorer.java b/lucene/expressions/src/java/org/apache/lucene/expressions/FakeScorer.java
index d521d22..3759435 100644
--- a/lucene/expressions/src/java/org/apache/lucene/expressions/FakeScorer.java
+++ b/lucene/expressions/src/java/org/apache/lucene/expressions/FakeScorer.java
@@ -19,6 +19,7 @@ package org.apache.lucene.expressions;
 
 import java.io.IOException;
 
+import org.apache.lucene.search.Explanation;
 import org.apache.lucene.search.Scorer;
 
 class FakeScorer extends Scorer {
@@ -57,6 +58,11 @@ class FakeScorer extends Scorer {
   }
 
   @Override
+  public Explanation explain() throws IOException {
+    throw new UnsupportedOperationException();
+  }
+
+  @Override
   public float score() throws IOException {
     return score;
   }
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery.java b/lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery.java
index f33b34f..201f2dc 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery.java
@@ -28,7 +28,6 @@ import org.apache.lucene.search.BulkScorer;
 import org.apache.lucene.search.Collector;
 import org.apache.lucene.search.DocIdSet;
 import org.apache.lucene.search.DocIdSetIterator;
-import org.apache.lucene.search.Explanation;
 import org.apache.lucene.search.Filter;
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.Query;
@@ -98,11 +97,6 @@ class DrillSidewaysQuery extends Query {
       public void extractTerms(Set<Term> terms) {}
 
       @Override
-      public Explanation explain(LeafReaderContext context, int doc) throws IOException {
-        return baseWeight.explain(context, doc);
-      }
-
-      @Override
       public float getValueForNormalization() throws IOException {
         return baseWeight.getValueForNormalization();
       }
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysScorer.java b/lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysScorer.java
index ad2938a..4de06cb 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysScorer.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysScorer.java
@@ -26,6 +26,7 @@ import org.apache.lucene.index.PostingsEnum;
 import org.apache.lucene.search.BulkScorer;
 import org.apache.lucene.search.Collector;
 import org.apache.lucene.search.DocIdSetIterator;
+import org.apache.lucene.search.Explanation;
 import org.apache.lucene.search.LeafCollector;
 import org.apache.lucene.search.Scorer;
 import org.apache.lucene.search.Weight;
@@ -663,6 +664,11 @@ class DrillSidewaysScorer extends BulkScorer {
     }
 
     @Override
+    public Explanation explain() throws IOException {
+      return baseScorer.explain();
+    }
+
+    @Override
     public int nextDoc() {
       throw new UnsupportedOperationException("FakeScorer doesn't support nextDoc()");
     }
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FakeScorer.java b/lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FakeScorer.java
index c402857..02e0bd4 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FakeScorer.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FakeScorer.java
@@ -19,6 +19,7 @@ package org.apache.lucene.facet.taxonomy;
 
 import java.io.IOException;
 
+import org.apache.lucene.search.Explanation;
 import org.apache.lucene.search.Scorer;
 
 class FakeScorer extends Scorer {
@@ -57,6 +58,11 @@ class FakeScorer extends Scorer {
   }
 
   @Override
+  public Explanation explain() throws IOException {
+    throw new UnsupportedOperationException();
+  }
+
+  @Override
   public float score() throws IOException {
     return score;
   }
diff --git a/lucene/grouping/src/java/org/apache/lucene/search/grouping/FakeScorer.java b/lucene/grouping/src/java/org/apache/lucene/search/grouping/FakeScorer.java
index 0fc685c..749e8cc 100644
--- a/lucene/grouping/src/java/org/apache/lucene/search/grouping/FakeScorer.java
+++ b/lucene/grouping/src/java/org/apache/lucene/search/grouping/FakeScorer.java
@@ -19,6 +19,7 @@ package org.apache.lucene.search.grouping;
 
 import java.io.IOException;
 
+import org.apache.lucene.search.Explanation;
 import org.apache.lucene.search.Scorer;
 
 class FakeScorer extends Scorer {
@@ -57,6 +58,11 @@ class FakeScorer extends Scorer {
   }
 
   @Override
+  public Explanation explain() throws IOException {
+    throw new UnsupportedOperationException();
+  }
+
+  @Override
   public float score() throws IOException {
     return score;
   }
diff --git a/lucene/join/src/java/org/apache/lucene/search/join/BaseGlobalOrdinalScorer.java b/lucene/join/src/java/org/apache/lucene/search/join/BaseGlobalOrdinalScorer.java
index e04e275..bc16a75 100644
--- a/lucene/join/src/java/org/apache/lucene/search/join/BaseGlobalOrdinalScorer.java
+++ b/lucene/join/src/java/org/apache/lucene/search/join/BaseGlobalOrdinalScorer.java
@@ -17,14 +17,14 @@ package org.apache.lucene.search.join;
  * limitations under the License.
  */
 
+import java.io.IOException;
+
 import org.apache.lucene.index.SortedDocValues;
 import org.apache.lucene.search.DocIdSetIterator;
+import org.apache.lucene.search.Explanation;
 import org.apache.lucene.search.Scorer;
 import org.apache.lucene.search.TwoPhaseIterator;
 import org.apache.lucene.search.Weight;
-import org.apache.lucene.util.LongBitSet;
-
-import java.io.IOException;
 
 abstract class BaseGlobalOrdinalScorer extends Scorer {
 
@@ -45,6 +45,11 @@ abstract class BaseGlobalOrdinalScorer extends Scorer {
   }
 
   @Override
+  public Explanation explain() throws IOException {
+    return Explanation.match(score, "match on join value " + values.get(docID()).utf8ToString());
+  }
+
+  @Override
   public int docID() {
     return approximationScorer.docID();
   }
diff --git a/lucene/join/src/java/org/apache/lucene/search/join/FakeScorer.java b/lucene/join/src/java/org/apache/lucene/search/join/FakeScorer.java
index 58fd793..c8264fa 100644
--- a/lucene/join/src/java/org/apache/lucene/search/join/FakeScorer.java
+++ b/lucene/join/src/java/org/apache/lucene/search/join/FakeScorer.java
@@ -19,6 +19,7 @@ package org.apache.lucene.search.join;
 
 import java.io.IOException;
 
+import org.apache.lucene.search.Explanation;
 import org.apache.lucene.search.Scorer;
 
 class FakeScorer extends Scorer {
@@ -57,6 +58,11 @@ class FakeScorer extends Scorer {
   }
 
   @Override
+  public Explanation explain() throws IOException {
+    throw new UnsupportedOperationException();
+  }
+
+  @Override
   public float score() throws IOException {
     return score;
   }
diff --git a/lucene/join/src/java/org/apache/lucene/search/join/GlobalOrdinalsQuery.java b/lucene/join/src/java/org/apache/lucene/search/join/GlobalOrdinalsQuery.java
index 19b908f..1cd54d9 100644
--- a/lucene/join/src/java/org/apache/lucene/search/join/GlobalOrdinalsQuery.java
+++ b/lucene/join/src/java/org/apache/lucene/search/join/GlobalOrdinalsQuery.java
@@ -27,14 +27,12 @@ import org.apache.lucene.index.MultiDocValues;
 import org.apache.lucene.index.SortedDocValues;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.search.DocIdSetIterator;
-import org.apache.lucene.search.Explanation;
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.Query;
 import org.apache.lucene.search.Scorer;
 import org.apache.lucene.search.TwoPhaseIterator;
 import org.apache.lucene.search.Weight;
 import org.apache.lucene.util.Bits;
-import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.LongBitSet;
 import org.apache.lucene.util.LongValues;
 
@@ -114,19 +112,6 @@ final class GlobalOrdinalsQuery extends Query {
     public void extractTerms(Set<Term> terms) {}
 
     @Override
-    public Explanation explain(LeafReaderContext context, int doc) throws IOException {
-      SortedDocValues values = DocValues.getSorted(context.reader(), joinField);
-      if (values != null) {
-        int segmentOrd = values.getOrd(doc);
-        if (segmentOrd != -1) {
-          BytesRef joinValue = values.lookupOrd(segmentOrd);
-          return Explanation.match(queryNorm, "Score based on join value " + joinValue.utf8ToString());
-        }
-      }
-      return Explanation.noMatch("Not a match");
-    }
-
-    @Override
     public float getValueForNormalization() throws IOException {
       queryWeight = getBoost();
       return queryWeight * queryWeight;
diff --git a/lucene/join/src/java/org/apache/lucene/search/join/GlobalOrdinalsWithScoreQuery.java b/lucene/join/src/java/org/apache/lucene/search/join/GlobalOrdinalsWithScoreQuery.java
index c1bcb64..4fd9317 100644
--- a/lucene/join/src/java/org/apache/lucene/search/join/GlobalOrdinalsWithScoreQuery.java
+++ b/lucene/join/src/java/org/apache/lucene/search/join/GlobalOrdinalsWithScoreQuery.java
@@ -17,6 +17,9 @@ package org.apache.lucene.search.join;
  * limitations under the License.
  */
 
+import java.io.IOException;
+import java.util.Set;
+
 import org.apache.lucene.index.DocValues;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.LeafReaderContext;
@@ -24,19 +27,14 @@ import org.apache.lucene.index.MultiDocValues;
 import org.apache.lucene.index.SortedDocValues;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.search.DocIdSetIterator;
-import org.apache.lucene.search.Explanation;
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.Query;
 import org.apache.lucene.search.Scorer;
 import org.apache.lucene.search.TwoPhaseIterator;
 import org.apache.lucene.search.Weight;
 import org.apache.lucene.util.Bits;
-import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.LongValues;
 
-import java.io.IOException;
-import java.util.Set;
-
 final class GlobalOrdinalsWithScoreQuery extends Query {
 
   private final GlobalOrdinalsWithScoreCollector collector;
@@ -123,26 +121,6 @@ final class GlobalOrdinalsWithScoreQuery extends Query {
     public void extractTerms(Set<Term> terms) {}
 
     @Override
-    public Explanation explain(LeafReaderContext context, int doc) throws IOException {
-      SortedDocValues values = DocValues.getSorted(context.reader(), joinField);
-      if (values != null) {
-        int segmentOrd = values.getOrd(doc);
-        if (segmentOrd != -1) {
-          final float score;
-          if (globalOrds != null) {
-            long globalOrd = globalOrds.getGlobalOrds(context.ord).get(segmentOrd);
-            score = collector.score((int) globalOrd);
-          } else {
-            score = collector.score(segmentOrd);
-          }
-          BytesRef joinValue = values.lookupOrd(segmentOrd);
-          return Explanation.match(score, "Score based on join value " + joinValue.utf8ToString());
-        }
-      }
-      return Explanation.noMatch("Not a match");
-    }
-
-    @Override
     public float getValueForNormalization() throws IOException {
       queryWeight = getBoost();
       return queryWeight * queryWeight;
diff --git a/lucene/join/src/java/org/apache/lucene/search/join/TermsIncludingScoreQuery.java b/lucene/join/src/java/org/apache/lucene/search/join/TermsIncludingScoreQuery.java
index d44b9ed..a76fe5b 100644
--- a/lucene/join/src/java/org/apache/lucene/search/join/TermsIncludingScoreQuery.java
+++ b/lucene/join/src/java/org/apache/lucene/search/join/TermsIncludingScoreQuery.java
@@ -125,26 +125,6 @@ class TermsIncludingScoreQuery extends Query {
       public void extractTerms(Set<Term> terms) {}
 
       @Override
-      public Explanation explain(LeafReaderContext context, int doc) throws IOException {
-        Terms terms = context.reader().terms(field);
-        if (terms != null) {
-          TermsEnum segmentTermsEnum = terms.iterator();
-          BytesRef spare = new BytesRef();
-          PostingsEnum postingsEnum = null;
-          for (int i = 0; i < TermsIncludingScoreQuery.this.terms.size(); i++) {
-            if (segmentTermsEnum.seekExact(TermsIncludingScoreQuery.this.terms.get(ords[i], spare))) {
-              postingsEnum = segmentTermsEnum.postings(null, postingsEnum, PostingsEnum.NONE);
-              if (postingsEnum.advance(doc) == doc) {
-                final float score = TermsIncludingScoreQuery.this.scores[ords[i]];
-                return Explanation.match(score, "Score based on join value " + segmentTermsEnum.term().utf8ToString());
-              }
-            }
-          }
-        }
-        return Explanation.noMatch("Not a match");
-      }
-
-      @Override
       public float getValueForNormalization() throws IOException {
         return originalWeight.getValueForNormalization() * TermsIncludingScoreQuery.this.getBoost() * TermsIncludingScoreQuery.this.getBoost();
       }
@@ -174,7 +154,8 @@ class TermsIncludingScoreQuery extends Query {
 
     };
   }
-  
+
+  // TODO should this be a bulkscorer?
   class SVInOrderScorer extends Scorer {
 
     final DocIdSetIterator matchingDocsIterator;
@@ -215,6 +196,12 @@ class TermsIncludingScoreQuery extends Query {
     }
 
     @Override
+    public Explanation explain() throws IOException {
+      // TODO can we retrieve the joined term somehow?
+      return Explanation.match(scores[currentDoc], "Match on join term");
+    }
+
+    @Override
     public int freq() throws IOException {
       return 1;
     }
diff --git a/lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.java b/lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.java
index 2eaf1bf..065387d 100644
--- a/lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.java
+++ b/lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.java
@@ -141,12 +141,6 @@ public class ToChildBlockJoinQuery extends Query {
       return new ToChildBlockJoinScorer(this, parentScorer, parents.bits(), doScores, acceptDocs);
     }
 
-    @Override
-    public Explanation explain(LeafReaderContext reader, int doc) throws IOException {
-      // TODO
-      throw new UnsupportedOperationException(getClass().getName() +
-                                              " cannot explain match on parent document");
-    }
   }
 
   static class ToChildBlockJoinScorer extends Scorer {
@@ -267,6 +261,11 @@ public class ToChildBlockJoinQuery extends Query {
     }
 
     @Override
+    public Explanation explain() throws IOException {
+      return Explanation.match(parentScore, "from parent", parentScorer.explain());
+    }
+
+    @Override
     public int advance(int childTarget) throws IOException {
       
       //System.out.println("Q.advance childTarget=" + childTarget);
diff --git a/lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.java b/lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.java
index c58870a..303f4b1 100644
--- a/lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.java
+++ b/lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.java
@@ -180,17 +180,9 @@ public class ToParentBlockJoinQuery extends Query {
         return null;
       }
 
-      return new BlockJoinScorer(this, childScorer, parents.bits(), firstChildDoc, scoreMode, acceptDocs);
+      return new BlockJoinScorer(this, childScorer, parents.bits(), firstChildDoc, scoreMode, acceptDocs, readerContext.docBase);
     }
 
-    @Override
-    public Explanation explain(LeafReaderContext context, int doc) throws IOException {
-      BlockJoinScorer scorer = (BlockJoinScorer) scorer(context, context.reader().getLiveDocs());
-      if (scorer != null && scorer.advance(doc) == doc) {
-        return scorer.explain(context.docBase);
-      }
-      return Explanation.noMatch("Not a match");
-    }
   }
 
   static class BlockJoinScorer extends Scorer {
@@ -206,14 +198,16 @@ public class ToParentBlockJoinQuery extends Query {
     private int[] pendingChildDocs;
     private float[] pendingChildScores;
     private int childDocUpto;
+    private final int docBase;
 
-    public BlockJoinScorer(Weight weight, Scorer childScorer, BitSet parentBits, int firstChildDoc, ScoreMode scoreMode, Bits acceptDocs) {
+    public BlockJoinScorer(Weight weight, Scorer childScorer, BitSet parentBits, int firstChildDoc, ScoreMode scoreMode, Bits acceptDocs, int docBase) {
       super(weight);
       //System.out.println("Q.init firstChildDoc=" + firstChildDoc);
       this.parentBits = parentBits;
       this.childScorer = childScorer;
       this.scoreMode = scoreMode;
       this.acceptDocs = acceptDocs;
+      this.docBase = docBase;
       nextChildDoc = firstChildDoc;
     }
 
@@ -410,11 +404,11 @@ public class ToParentBlockJoinQuery extends Query {
       return nd;
     }
 
-    public Explanation explain(int docBase) throws IOException {
+    @Override
+    public Explanation explain() throws IOException {
       int start = docBase + prevParentDoc + 1; // +1 b/c prevParentDoc is previous parent doc
       int end = docBase + parentDoc - 1; // -1 b/c parentDoc is parent doc
-      return Explanation.match(score(), String.format(Locale.ROOT, "Score based on child doc range from %d to %d", start, end)
-      );
+      return Explanation.match(score(), String.format(Locale.ROOT, "Score based on child doc range from %d to %d", start, end));
     }
 
     @Override
diff --git a/lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java b/lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java
index b23e057..97dab3a 100644
--- a/lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java
+++ b/lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java
@@ -17,6 +17,13 @@ package org.apache.lucene.search.join;
  * limitations under the License.
  */
 
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+import java.util.Locale;
+
 import org.apache.lucene.analysis.MockAnalyzer;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
@@ -24,19 +31,7 @@ import org.apache.lucene.document.IntField;
 import org.apache.lucene.document.NumericDocValuesField;
 import org.apache.lucene.document.SortedDocValuesField;
 import org.apache.lucene.document.StoredField;
-import org.apache.lucene.index.DirectoryReader;
-import org.apache.lucene.index.IndexReader;
-import org.apache.lucene.index.IndexWriter;
-import org.apache.lucene.index.IndexWriterConfig;
-import org.apache.lucene.index.LeafReaderContext;
-import org.apache.lucene.index.LogDocMergePolicy;
-import org.apache.lucene.index.MultiFields;
-import org.apache.lucene.index.NoMergePolicy;
-import org.apache.lucene.index.PostingsEnum;
-import org.apache.lucene.index.RandomIndexWriter;
-import org.apache.lucene.index.ReaderUtil;
-import org.apache.lucene.index.StoredDocument;
-import org.apache.lucene.index.Term;
+import org.apache.lucene.index.*;
 import org.apache.lucene.search.*;
 import org.apache.lucene.search.BooleanClause.Occur;
 import org.apache.lucene.search.grouping.GroupDocs;
@@ -50,13 +45,6 @@ import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.NumericUtils;
 import org.apache.lucene.util.TestUtil;
 
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.List;
-import java.util.Locale;
-
 public class TestBlockJoin extends LuceneTestCase {
 
   // One resume...
diff --git a/lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil.java b/lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil.java
index 3af1083..64243f2 100644
--- a/lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil.java
+++ b/lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil.java
@@ -17,6 +17,9 @@ package org.apache.lucene.search.join;
  * limitations under the License.
  */
 
+import java.io.IOException;
+import java.util.*;
+
 import com.carrotsearch.randomizedtesting.generators.RandomInts;
 import org.apache.lucene.analysis.MockAnalyzer;
 import org.apache.lucene.analysis.MockTokenizer;
@@ -27,42 +30,8 @@ import org.apache.lucene.document.SortedDocValuesField;
 import org.apache.lucene.document.SortedSetDocValuesField;
 import org.apache.lucene.document.StringField;
 import org.apache.lucene.document.TextField;
-import org.apache.lucene.index.BinaryDocValues;
-import org.apache.lucene.index.DirectoryReader;
-import org.apache.lucene.index.DocValues;
-import org.apache.lucene.index.IndexReader;
-import org.apache.lucene.index.LeafReader;
-import org.apache.lucene.index.LeafReaderContext;
-import org.apache.lucene.index.MultiDocValues;
-import org.apache.lucene.index.MultiFields;
-import org.apache.lucene.index.NoMergePolicy;
-import org.apache.lucene.index.NumericDocValues;
-import org.apache.lucene.index.PostingsEnum;
-import org.apache.lucene.index.RandomIndexWriter;
-import org.apache.lucene.index.SlowCompositeReaderWrapper;
-import org.apache.lucene.index.SortedDocValues;
-import org.apache.lucene.index.SortedSetDocValues;
-import org.apache.lucene.index.Term;
-import org.apache.lucene.index.Terms;
-import org.apache.lucene.index.TermsEnum;
-import org.apache.lucene.search.BooleanClause;
-import org.apache.lucene.search.BooleanQuery;
-import org.apache.lucene.search.DocIdSetIterator;
-import org.apache.lucene.search.Explanation;
-import org.apache.lucene.search.FieldValueQuery;
-import org.apache.lucene.search.FilterScorer;
-import org.apache.lucene.search.IndexSearcher;
-import org.apache.lucene.search.MatchAllDocsQuery;
-import org.apache.lucene.search.MultiCollector;
-import org.apache.lucene.search.Query;
-import org.apache.lucene.search.ScoreDoc;
-import org.apache.lucene.search.Scorer;
-import org.apache.lucene.search.SimpleCollector;
-import org.apache.lucene.search.TermQuery;
-import org.apache.lucene.search.TopDocs;
-import org.apache.lucene.search.TopScoreDocCollector;
-import org.apache.lucene.search.TotalHitCountCollector;
-import org.apache.lucene.search.Weight;
+import org.apache.lucene.index.*;
+import org.apache.lucene.search.*;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.BitSet;
 import org.apache.lucene.util.BitSetIterator;
@@ -74,19 +43,6 @@ import org.apache.lucene.util.TestUtil;
 import org.apache.lucene.util.packed.PackedInts;
 import org.junit.Test;
 
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Locale;
-import java.util.Map;
-import java.util.Set;
-import java.util.SortedSet;
-import java.util.TreeSet;
-
 public class TestJoinUtil extends LuceneTestCase {
 
   public void testSimple() throws Exception {
@@ -356,11 +312,6 @@ public class TestJoinUtil extends LuceneTestCase {
           }
 
           @Override
-          public Explanation explain(LeafReaderContext context, int doc) throws IOException {
-            return null;
-          }
-
-          @Override
           public float getValueForNormalization() throws IOException {
             return 0;
           }
@@ -378,6 +329,10 @@ public class TestJoinUtil extends LuceneTestCase {
               public float score() throws IOException {
                 return (float) price.get(in.docID());
               }
+              @Override
+              public Explanation explain() throws IOException {
+                throw new UnsupportedOperationException();
+              }
             };
           }
         };
diff --git a/lucene/misc/src/java/org/apache/lucene/index/Sorter.java b/lucene/misc/src/java/org/apache/lucene/index/Sorter.java
index 42703b8..7378537 100644
--- a/lucene/misc/src/java/org/apache/lucene/index/Sorter.java
+++ b/lucene/misc/src/java/org/apache/lucene/index/Sorter.java
@@ -20,6 +20,7 @@ package org.apache.lucene.index;
 import java.io.IOException;
 import java.util.Comparator;
 
+import org.apache.lucene.search.Explanation;
 import org.apache.lucene.search.LeafFieldComparator;
 import org.apache.lucene.search.Scorer;
 import org.apache.lucene.search.Sort;
@@ -290,6 +291,11 @@ final class Sorter {
     }
 
     @Override
+    public Explanation explain() throws IOException {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
     public float score() throws IOException {
       return score;
     }
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery.java b/lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery.java
index 308d7e7..b044db5 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery.java
@@ -72,18 +72,6 @@ public class BoostingQuery extends Query {
         }
 
         @Override
-        public Explanation explain(LeafReaderContext context, int doc) throws IOException {
-          final Explanation matchExplanation = matchWeight.explain(context, doc);
-          final Explanation contextExplanation = contextWeight.explain(context, doc);
-          if (matchExplanation.isMatch() == false || contextExplanation.isMatch() == false) {
-            return matchExplanation;
-          }
-          return Explanation.match(matchExplanation.getValue() * boost, "product of:",
-              matchExplanation,
-              Explanation.match(boost, "boost"));
-        }
-
-        @Override
         public float getValueForNormalization() throws IOException {
           return matchWeight.getValueForNormalization();
         }
@@ -121,6 +109,14 @@ public class BoostingQuery extends Query {
               }
               return score;
             }
+
+            @Override
+            public Explanation explain() throws IOException {
+              Explanation matchExplanation = in.explain();
+              return Explanation.match(matchExplanation.getValue() * boost, "product of:",
+                  matchExplanation,
+                  Explanation.match(boost, "boost"));
+            }
           };
         }
       };
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.java b/lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.java
index 215fbc8..f452202 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.java
@@ -239,29 +239,6 @@ public class CustomScoreQuery extends Query {
       }
       return new CustomScorer(CustomScoreQuery.this.getCustomScoreProvider(context), this, queryWeight, subQueryScorer, valSrcScorers);
     }
-
-    @Override
-    public Explanation explain(LeafReaderContext context, int doc) throws IOException {
-      Explanation explain = doExplain(context, doc);
-      return explain == null ? Explanation.noMatch("no matching docs") : explain;
-    }
-    
-    private Explanation doExplain(LeafReaderContext info, int doc) throws IOException {
-      Explanation subQueryExpl = subQueryWeight.explain(info, doc);
-      if (!subQueryExpl.isMatch()) {
-        return subQueryExpl;
-      }
-      // match
-      Explanation[] valSrcExpls = new Explanation[valSrcWeights.length];
-      for(int i = 0; i < valSrcWeights.length; i++) {
-        valSrcExpls[i] = valSrcWeights[i].explain(info, doc);
-      }
-      Explanation customExp = CustomScoreQuery.this.getCustomScoreProvider(info).customExplain(doc,subQueryExpl,valSrcExpls);
-      float sc = queryWeight * customExp.getValue();
-      return Explanation.match(
-        sc, CustomScoreQuery.this.toString() + ", product of:",
-        customExp, Explanation.match(queryWeight, "queryWeight"));
-    }
     
   }
 
@@ -308,6 +285,29 @@ public class CustomScoreQuery extends Query {
     }
 
     @Override
+    public Explanation explain() throws IOException {
+      // lazily advance to current doc.
+      int doc = docID();
+      if (doc > valSrcDocID) {
+        for (Scorer valSrcScorer : valSrcScorers) {
+          valSrcScorer.advance(doc);
+        }
+        valSrcDocID = doc;
+      }
+
+      Explanation subQueryExpl = in.explain();
+      Explanation[] valSrcExpls = new Explanation[valSrcScorers.length];
+      for(int i = 0; i < valSrcScorers.length; i++) {
+        valSrcExpls[i] = valSrcScorers[i].explain();
+      }
+      Explanation customExp = provider.customExplain(docID(), subQueryExpl, valSrcExpls);
+      float sc = qWeight * customExp.getValue();
+      return Explanation.match(
+          sc, CustomScoreQuery.this.toString() + ", product of:",
+          customExp, Explanation.match(qWeight, "queryWeight"));
+    }
+
+    @Override
     public Collection<ChildScorer> getChildren() {
       return Collections.singleton(new ChildScorer(subQueryScorer, "CUSTOM"));
     }
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/BoostedQuery.java b/lucene/queries/src/java/org/apache/lucene/queries/function/BoostedQuery.java
index 8b76a3a..4dda9c6 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/BoostedQuery.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/BoostedQuery.java
@@ -106,16 +106,6 @@ public class BoostedQuery extends Query {
       return new BoostedQuery.CustomScorer(context, this, getBoost(), subQueryScorer, boostVal);
     }
 
-    @Override
-    public Explanation explain(LeafReaderContext readerContext, int doc) throws IOException {
-      Explanation subQueryExpl = qWeight.explain(readerContext,doc);
-      if (!subQueryExpl.isMatch()) {
-        return subQueryExpl;
-      }
-      FunctionValues vals = boostVal.getValues(fcontext, readerContext);
-      float sc = subQueryExpl.getValue() * vals.floatVal(doc);
-      return Explanation.match(sc, BoostedQuery.this.toString() + ", product of:", subQueryExpl, vals.explain(doc));
-    }
   }
 
 
@@ -134,7 +124,15 @@ public class BoostedQuery extends Query {
       this.vals = vs.getValues(weight.fcontext, readerContext);
     }
 
-    @Override   
+    @Override
+    public Explanation explain() throws IOException {
+      Explanation sub = in.explain();
+      Explanation valsExpl = vals.explain(docID());
+      float sc = sub.getValue() * valsExpl.getValue();
+      return Explanation.match(sc, BoostedQuery.this.toString() + ", product of:", sub, valsExpl);
+    }
+
+    @Override
     public float score() throws IOException {
       float score = qWeight * in.score() * vals.floatVal(in.docID());
 
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.java b/lucene/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.java
index 10a35a1..2b857c2 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.java
@@ -93,10 +93,6 @@ public class FunctionQuery extends Query {
       return new AllScorer(context, acceptDocs, this, queryWeight);
     }
 
-    @Override
-    public Explanation explain(LeafReaderContext context, int doc) throws IOException {
-      return ((AllScorer)scorer(context, context.reader().getLiveDocs())).explain(doc);
-    }
   }
 
   protected class AllScorer extends Scorer {
@@ -157,6 +153,16 @@ public class FunctionQuery extends Query {
     }
 
     @Override
+    public Explanation explain() throws IOException {
+      float sc = qWeight * vals.floatVal(doc);
+
+      return Explanation.match(sc, "FunctionQuery(" + func + "), product of:",
+          vals.explain(doc),
+          Explanation.match(getBoost(), "boost"),
+          Explanation.match(weight.queryNorm, "queryNorm"));
+    }
+
+    @Override
     public long cost() {
       return maxDoc;
     }
@@ -166,15 +172,6 @@ public class FunctionQuery extends Query {
       return 1;
     }
 
-    public Explanation explain(int doc) throws IOException {
-      float sc = qWeight * vals.floatVal(doc);
-
-      return Explanation.match(sc, "FunctionQuery(" + func + "), product of:",
-          vals.explain(doc),
-          Explanation.match(getBoost(), "boost"),
-          Explanation.match(weight.queryNorm, "queryNorm"));
-    }
-
   }
 
 
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/ValueSourceScorer.java b/lucene/queries/src/java/org/apache/lucene/queries/function/ValueSourceScorer.java
index d1b62c4..4048b59 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/ValueSourceScorer.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/ValueSourceScorer.java
@@ -21,6 +21,7 @@ import java.io.IOException;
 
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.MultiFields;
+import org.apache.lucene.search.Explanation;
 import org.apache.lucene.search.Scorer;
 import org.apache.lucene.util.Bits;
 
@@ -88,6 +89,11 @@ public class ValueSourceScorer extends Scorer {
   }
 
   @Override
+  public Explanation explain() throws IOException {
+    return values.explain(docID());
+  }
+
+  @Override
   public int freq() throws IOException {
     return 1;
   }
diff --git a/lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDPointInBBoxQuery.java b/lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDPointInBBoxQuery.java
index 587247a..2e8081c 100644
--- a/lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDPointInBBoxQuery.java
+++ b/lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDPointInBBoxQuery.java
@@ -17,6 +17,9 @@ package org.apache.lucene.bkdtree;
  * limitations under the License.
  */
 
+import java.io.IOException;
+import java.util.Set;
+
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.LeafReader;
 import org.apache.lucene.index.LeafReaderContext;
@@ -34,9 +37,6 @@ import org.apache.lucene.search.Weight;
 import org.apache.lucene.util.Bits;
 import org.apache.lucene.util.ToStringUtils;
 
-import java.io.IOException;
-import java.util.Set;
-
 /** Finds all previously indexed points that fall within the specified boundings box.
  *
  *  <p>The field must be indexed with {@link BKDTreeDocValuesFormat}, and {@link BKDPointField} added per document.
@@ -100,19 +100,6 @@ public class BKDPointInBBoxQuery extends Query {
       }
 
       @Override
-      public Explanation explain(LeafReaderContext context, int doc) throws IOException {
-        final Scorer s = scorer(context, context.reader().getLiveDocs());
-        final boolean exists = s != null && s.advance(doc) == doc;
-
-        if (exists) {
-          return Explanation.match(queryWeight, BKDPointInBBoxQuery.this.toString() + ", product of:",
-              Explanation.match(getBoost(), "boost"), Explanation.match(queryNorm, "queryNorm"));
-        } else {
-          return Explanation.noMatch(BKDPointInBBoxQuery.this.toString() + " doesn't match id " + doc);
-        }
-      }
-
-      @Override
       public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {
         LeafReader reader = context.reader();
         SortedNumericDocValues sdv = reader.getSortedNumericDocValues(field);
@@ -144,6 +131,12 @@ public class BKDPointInBBoxQuery extends Query {
           }
 
           @Override
+          public Explanation explain() throws IOException {
+            return Explanation.match(queryWeight, BKDPointInBBoxQuery.this.toString() + ", product of:",
+                Explanation.match(getBoost(), "boost"), Explanation.match(queryNorm, "queryNorm"));
+          }
+
+          @Override
           public int docID() {
             return disi.docID();
           }
diff --git a/lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDPointInPolygonQuery.java b/lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDPointInPolygonQuery.java
index f7443eb..31185ba 100644
--- a/lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDPointInPolygonQuery.java
+++ b/lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDPointInPolygonQuery.java
@@ -17,6 +17,10 @@ package org.apache.lucene.bkdtree;
  * limitations under the License.
  */
 
+import java.io.IOException;
+import java.util.Arrays;
+import java.util.Set;
+
 import org.apache.lucene.index.LeafReader;
 import org.apache.lucene.index.LeafReaderContext;
 import org.apache.lucene.index.SortedNumericDocValues;
@@ -32,10 +36,6 @@ import org.apache.lucene.util.Bits;
 import org.apache.lucene.util.GeoUtils;
 import org.apache.lucene.util.ToStringUtils;
 
-import java.io.IOException;
-import java.util.Arrays;
-import java.util.Set;
-
 /** Finds all previously indexed points that fall within the specified polygon.
  *
  *  <p>The field must be indexed with {@link BKDTreeDocValuesFormat}, and {@link BKDPointField} added per document.
@@ -131,19 +131,6 @@ public class BKDPointInPolygonQuery extends Query {
       }
 
       @Override
-      public Explanation explain(LeafReaderContext context, int doc) throws IOException {
-        final Scorer s = scorer(context, context.reader().getLiveDocs());
-        final boolean exists = s != null && s.advance(doc) == doc;
-
-        if (exists) {
-          return Explanation.match(queryWeight, BKDPointInPolygonQuery.this.toString() + ", product of:",
-              Explanation.match(getBoost(), "boost"), Explanation.match(queryNorm, "queryNorm"));
-        } else {
-          return Explanation.noMatch(BKDPointInPolygonQuery.this.toString() + " doesn't match id " + doc);
-        }
-      }
-
-      @Override
       public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {
         LeafReader reader = context.reader();
         SortedNumericDocValues sdv = reader.getSortedNumericDocValues(field);
@@ -198,6 +185,12 @@ public class BKDPointInPolygonQuery extends Query {
           }
 
           @Override
+          public Explanation explain() throws IOException {
+            return Explanation.match(queryWeight, BKDPointInPolygonQuery.this.toString() + ", product of:",
+                Explanation.match(getBoost(), "boost"), Explanation.match(queryNorm, "queryNorm"));
+          }
+
+          @Override
           public int docID() {
             return disi.docID();
           }
diff --git a/lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.java b/lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.java
index e300994..6570a63 100644
--- a/lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.java
+++ b/lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.java
@@ -401,11 +401,6 @@ public class TermAutomatonQuery extends Query {
 
       return new TermAutomatonScorer(this, enums, anyTermID, idToTerm, similarity.simScorer(stats, context));
     }
-    
-    @Override
-    public Explanation explain(LeafReaderContext context, int doc) throws IOException {
-      // TODO
-      return null;
-    }
+
   }
 }
diff --git a/lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonScorer.java b/lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonScorer.java
index b8f6cb2..739c784 100644
--- a/lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonScorer.java
+++ b/lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonScorer.java
@@ -341,6 +341,11 @@ class TermAutomatonScorer extends Scorer {
   }
 
   @Override
+  public Explanation explain() throws IOException {
+    return Explanation.match(score(), "match"); // TODO
+  }
+
+  @Override
   public int docID() {
     return docID;
   }
diff --git a/lucene/suggest/src/java/org/apache/lucene/search/suggest/document/CompletionWeight.java b/lucene/suggest/src/java/org/apache/lucene/search/suggest/document/CompletionWeight.java
index 6c0ad30..e20f3d1 100644
--- a/lucene/suggest/src/java/org/apache/lucene/search/suggest/document/CompletionWeight.java
+++ b/lucene/suggest/src/java/org/apache/lucene/search/suggest/document/CompletionWeight.java
@@ -26,7 +26,6 @@ import org.apache.lucene.index.Term;
 import org.apache.lucene.index.Terms;
 import org.apache.lucene.search.BulkScorer;
 import org.apache.lucene.search.DocIdSet;
-import org.apache.lucene.search.Explanation;
 import org.apache.lucene.search.Filter;
 import org.apache.lucene.search.Scorer;
 import org.apache.lucene.search.Weight;
@@ -144,12 +143,6 @@ public class CompletionWeight extends Weight {
   }
 
   @Override
-  public Explanation explain(LeafReaderContext context, int doc) throws IOException {
-    //TODO
-    return null;
-  }
-
-  @Override
   public float getValueForNormalization() throws IOException {
     return 0;
   }
diff --git a/lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer.java b/lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer.java
index 96d2065..0d931a6 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer.java
@@ -89,6 +89,13 @@ public class AssertingScorer extends Scorer {
   }
 
   @Override
+  public Explanation explain() throws IOException {
+    assert needsScores;
+    assert iterating();
+    return in.explain();
+  }
+
+  @Override
   public int docID() {
     assert state != IteratorState.APPROXIMATING : "calling docId() on the Scorer while the match has not been confirmed";
     return in.docID();
diff --git a/lucene/test-framework/src/java/org/apache/lucene/search/AssertingWeight.java b/lucene/test-framework/src/java/org/apache/lucene/search/AssertingWeight.java
index 71036d8..1363156 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/search/AssertingWeight.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/search/AssertingWeight.java
@@ -44,11 +44,6 @@ class AssertingWeight extends Weight {
   }
 
   @Override
-  public Explanation explain(LeafReaderContext context, int doc) throws IOException {
-    return in.explain(context, doc);
-  }
-
-  @Override
   public float getValueForNormalization() throws IOException {
     return in.getValueForNormalization();
   }
diff --git a/lucene/test-framework/src/java/org/apache/lucene/search/BulkScorerWrapperScorer.java b/lucene/test-framework/src/java/org/apache/lucene/search/BulkScorerWrapperScorer.java
index e682d9d..9dc8260 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/search/BulkScorerWrapperScorer.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/search/BulkScorerWrapperScorer.java
@@ -79,6 +79,11 @@ public class BulkScorerWrapperScorer extends Scorer {
   }
 
   @Override
+  public Explanation explain() throws IOException {
+    throw new UnsupportedOperationException();
+  }
+
+  @Override
   public int docID() {
     return doc;
   }
diff --git a/lucene/test-framework/src/java/org/apache/lucene/search/RandomApproximationQuery.java b/lucene/test-framework/src/java/org/apache/lucene/search/RandomApproximationQuery.java
index 270ae4f..df8fc29 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/search/RandomApproximationQuery.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/search/RandomApproximationQuery.java
@@ -98,11 +98,6 @@ public class RandomApproximationQuery extends Query {
     }
 
     @Override
-    public Explanation explain(LeafReaderContext context, int doc) throws IOException {
-      return weight.explain(context, doc);
-    }
-
-    @Override
     public float getValueForNormalization() throws IOException {
       return weight.getValueForNormalization();
     }
@@ -150,6 +145,11 @@ public class RandomApproximationQuery extends Query {
     }
 
     @Override
+    public Explanation explain() throws IOException {
+      return scorer.explain();
+    }
+
+    @Override
     public int docID() {
       return scorer.docID();
     }
diff --git a/lucene/test-framework/src/java/org/apache/lucene/search/spans/AssertingSpanWeight.java b/lucene/test-framework/src/java/org/apache/lucene/search/spans/AssertingSpanWeight.java
index 61c9f9d..f09e23b 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/search/spans/AssertingSpanWeight.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/search/spans/AssertingSpanWeight.java
@@ -17,18 +17,17 @@ package org.apache.lucene.search.spans;
  * limitations under the License.
  */
 
+import java.io.IOException;
+import java.util.Map;
+import java.util.Set;
+
 import org.apache.lucene.index.LeafReaderContext;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.index.TermContext;
-import org.apache.lucene.search.Explanation;
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.Scorer;
 import org.apache.lucene.util.Bits;
 
-import java.io.IOException;
-import java.util.Map;
-import java.util.Set;
-
 /**
  * Wraps a SpanWeight with additional asserts
  */
@@ -79,8 +78,4 @@ public class AssertingSpanWeight extends SpanWeight {
     return in.scorer(context, acceptDocs);
   }
 
-  @Override
-  public Explanation explain(LeafReaderContext context, int doc) throws IOException {
-    return in.explain(context, doc);
-  }
 }
diff --git a/solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java b/solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java
index 80f03f2..8be2ff0 100644
--- a/solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java
+++ b/solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java
@@ -36,16 +36,7 @@ import org.apache.lucene.index.IndexReaderContext;
 import org.apache.lucene.index.LeafReaderContext;
 import org.apache.lucene.index.ReaderUtil;
 import org.apache.lucene.index.Term;
-import org.apache.lucene.search.BooleanQuery;
-import org.apache.lucene.search.FieldComparator;
-import org.apache.lucene.search.LeafFieldComparator;
-import org.apache.lucene.search.MatchNoDocsQuery;
-import org.apache.lucene.search.Query;
-import org.apache.lucene.search.ScoreDoc;
-import org.apache.lucene.search.Scorer;
-import org.apache.lucene.search.Sort;
-import org.apache.lucene.search.SortField;
-import org.apache.lucene.search.Weight;
+import org.apache.lucene.search.*;
 import org.apache.lucene.search.grouping.GroupDocs;
 import org.apache.lucene.search.grouping.SearchGroup;
 import org.apache.lucene.search.grouping.TopGroups;
@@ -1367,6 +1358,11 @@ public class QueryComponent extends SearchComponent
     }
 
     @Override
+    public Explanation explain() throws IOException {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
     public int nextDoc() throws IOException {
       throw new UnsupportedOperationException();
     }
diff --git a/solr/core/src/java/org/apache/solr/schema/LatLonType.java b/solr/core/src/java/org/apache/solr/schema/LatLonType.java
index 33c9a4a..9b61378 100644
--- a/solr/core/src/java/org/apache/solr/schema/LatLonType.java
+++ b/solr/core/src/java/org/apache/solr/schema/LatLonType.java
@@ -344,10 +344,6 @@ class SpatialDistanceQuery extends ExtendedQueryBase implements PostFilter {
       return new SpatialScorer(context, acceptDocs, this, queryWeight);
     }
 
-    @Override
-    public Explanation explain(LeafReaderContext context, int doc) throws IOException {
-      return ((SpatialScorer)scorer(context, context.reader().getLiveDocs())).explain(doc);
-    }
   }
 
   protected class SpatialScorer extends Scorer {
@@ -487,24 +483,19 @@ class SpatialDistanceQuery extends ExtendedQueryBase implements PostFilter {
       return maxDoc;
     }
 
-    public Explanation explain(int doc) throws IOException {
-      advance(doc);
-      boolean matched = this.doc == doc;
-      this.doc = doc;
+    @Override
+    public Explanation explain() throws IOException {
 
-      float sc = matched ? score() : 0;
+      float sc = score();
       double dist = dist(latVals.doubleVal(doc), lonVals.doubleVal(doc));
 
       String description = SpatialDistanceQuery.this.toString();
 
-      if (matched) {
-        return Explanation.match(sc, description + " product of:",
+      return Explanation.match(sc, description + " product of:",
             Explanation.match((float) dist, "hsin("+latVals.doubleVal(doc)+","+lonVals.doubleVal(doc)),
             Explanation.match(getBoost(), "boost"),
             Explanation.match(weight.queryNorm,"queryNorm"));
-      } else {
-        return Explanation.noMatch("No match");
-      }
+
     }
 
   }
diff --git a/solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.java b/solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.java
index f59abc2..3240ba8 100644
--- a/solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.java
+++ b/solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.java
@@ -45,6 +45,7 @@ import org.apache.lucene.queries.function.FunctionQuery;
 import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.search.DocIdSetIterator;
+import org.apache.lucene.search.Explanation;
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.Query;
 import org.apache.lucene.search.Scorer;
@@ -365,6 +366,11 @@ public class CollapsingQParserPlugin extends QParserPlugin {
       return 0;
     }
 
+    @Override
+    public Explanation explain() throws IOException {
+      throw new UnsupportedOperationException();
+    }
+
     public int advance(int i) {
       return -1;
     }
diff --git a/solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.java b/solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.java
index 1d97595..8d4bfdd 100644
--- a/solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.java
+++ b/solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.java
@@ -28,20 +28,7 @@ import com.carrotsearch.hppc.IntIntOpenHashMap;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.LeafReaderContext;
 import org.apache.lucene.index.Term;
-import org.apache.lucene.search.Explanation;
-import org.apache.lucene.search.IndexSearcher;
-import org.apache.lucene.search.LeafCollector;
-import org.apache.lucene.search.MatchAllDocsQuery;
-import org.apache.lucene.search.Query;
-import org.apache.lucene.search.QueryRescorer;
-import org.apache.lucene.search.ScoreDoc;
-import org.apache.lucene.search.Scorer;
-import org.apache.lucene.search.Sort;
-import org.apache.lucene.search.TopDocs;
-import org.apache.lucene.search.TopDocsCollector;
-import org.apache.lucene.search.TopFieldCollector;
-import org.apache.lucene.search.TopScoreDocCollector;
-import org.apache.lucene.search.Weight;
+import org.apache.lucene.search.*;
 import org.apache.lucene.util.Bits;
 import org.apache.lucene.util.BytesRef;
 import org.apache.solr.common.SolrException;
@@ -202,6 +189,8 @@ public class ReRankQParserPlugin extends QParserPlugin {
       mainWeight.normalize(norm, topLevelBoost);
     }
 
+    // nocommit - do I make Weight.explain() non-final for this case, or is there a better way of plugging this in?
+    /*
     public Explanation explain(LeafReaderContext context, int doc) throws IOException {
       Explanation mainExplain = mainWeight.explain(context, doc);
       return new QueryRescorer(reRankQuery) {
@@ -215,6 +204,7 @@ public class ReRankQParserPlugin extends QParserPlugin {
         }
       }.explain(searcher, mainExplain, context.docBase+doc);
     }
+    */
   }
 
   private class ReRankCollector extends TopDocsCollector {
diff --git a/solr/core/src/java/org/apache/solr/search/join/IgnoreAcceptDocsQuery.java b/solr/core/src/java/org/apache/solr/search/join/IgnoreAcceptDocsQuery.java
index 25181b0..e089b99 100644
--- a/solr/core/src/java/org/apache/solr/search/join/IgnoreAcceptDocsQuery.java
+++ b/solr/core/src/java/org/apache/solr/search/join/IgnoreAcceptDocsQuery.java
@@ -23,7 +23,6 @@ import java.util.Set;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.LeafReaderContext;
 import org.apache.lucene.index.Term;
-import org.apache.lucene.search.Explanation;
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.Query;
 import org.apache.lucene.search.Scorer;
@@ -67,11 +66,6 @@ public class IgnoreAcceptDocsQuery extends Query {
     }
 
     @Override
-    public Explanation explain(LeafReaderContext context, int doc) throws IOException {
-      return w.explain(context, doc);
-    }
-
-    @Override
     public float getValueForNormalization() throws IOException {
       return w.getValueForNormalization();
     }
diff --git a/solr/core/src/java/org/apache/solr/update/DeleteByQueryWrapper.java b/solr/core/src/java/org/apache/solr/update/DeleteByQueryWrapper.java
index a131fbb..3ed51d4 100644
--- a/solr/core/src/java/org/apache/solr/update/DeleteByQueryWrapper.java
+++ b/solr/core/src/java/org/apache/solr/update/DeleteByQueryWrapper.java
@@ -77,9 +77,6 @@ final class DeleteByQueryWrapper extends Query {
       }
 
       @Override
-      public Explanation explain(LeafReaderContext context, int doc) throws IOException { throw new UnsupportedOperationException(); }
-
-      @Override
       public float getValueForNormalization() throws IOException { return inner.getValueForNormalization(); }
 
       @Override
diff --git a/solr/core/src/test/org/apache/solr/search/TestRankQueryPlugin.java b/solr/core/src/test/org/apache/solr/search/TestRankQueryPlugin.java
index ccbd2e6..a879989 100644
--- a/solr/core/src/test/org/apache/solr/search/TestRankQueryPlugin.java
+++ b/solr/core/src/test/org/apache/solr/search/TestRankQueryPlugin.java
@@ -33,18 +33,7 @@ import org.apache.lucene.index.IndexReaderContext;
 import org.apache.lucene.index.LeafReaderContext;
 import org.apache.lucene.index.NumericDocValues;
 import org.apache.lucene.index.ReaderUtil;
-import org.apache.lucene.search.FieldComparator;
-import org.apache.lucene.search.IndexSearcher;
-import org.apache.lucene.search.LeafCollector;
-import org.apache.lucene.search.LeafFieldComparator;
-import org.apache.lucene.search.Query;
-import org.apache.lucene.search.ScoreDoc;
-import org.apache.lucene.search.Scorer;
-import org.apache.lucene.search.Sort;
-import org.apache.lucene.search.SortField;
-import org.apache.lucene.search.TopDocs;
-import org.apache.lucene.search.TopDocsCollector;
-import org.apache.lucene.search.Weight;
+import org.apache.lucene.search.*;
 import org.apache.lucene.util.InPlaceMergeSorter;
 import org.apache.lucene.util.PriorityQueue;
 import org.apache.solr.client.solrj.SolrServerException;
@@ -477,6 +466,11 @@ public class TestRankQueryPlugin extends QParserPlugin {
       }
 
       @Override
+      public Explanation explain() throws IOException {
+        throw new UnsupportedOperationException();
+      }
+
+      @Override
       public int nextDoc() throws IOException {
         throw new UnsupportedOperationException();
       }
