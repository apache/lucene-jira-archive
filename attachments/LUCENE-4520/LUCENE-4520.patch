Index: solr/core/src/java/org/apache/solr/schema/CurrencyField.java
===================================================================
--- solr/core/src/java/org/apache/solr/schema/CurrencyField.java	(revision 1403803)
+++ solr/core/src/java/org/apache/solr/schema/CurrencyField.java	(working copy)
@@ -16,23 +16,20 @@
  * limitations under the License.
  */
 
+import org.apache.lucene.analysis.util.ResourceLoader;
+import org.apache.lucene.analysis.util.ResourceLoaderAware;
 import org.apache.lucene.index.AtomicReaderContext;
-import org.apache.lucene.index.GeneralField;
-import org.apache.lucene.index.IndexableField;
 import org.apache.lucene.index.StorableField;
 import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.search.Query;
 import org.apache.lucene.search.SortField;
-import org.apache.lucene.analysis.util.ResourceLoader;
 import org.apache.solr.common.SolrException;
 import org.apache.solr.common.SolrException.ErrorCode;
 import org.apache.solr.response.TextResponseWriter;
-import org.apache.solr.response.XMLWriter;
 import org.apache.solr.search.QParser;
 import org.apache.solr.search.SolrConstantScoreQuery;
 import org.apache.solr.search.function.ValueSourceRangeFilter;
-import org.apache.lucene.analysis.util.ResourceLoaderAware;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.w3c.dom.Document;
@@ -247,12 +244,8 @@
 
   @Override
   public SortField getSortField(SchemaField field, boolean reverse) {
-    try {
-      // Convert all values to default currency for sorting.
-      return (new CurrencyValueSource(field, defaultCurrency, null)).getSortField(reverse);
-    } catch (IOException e) {
-      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);
-    }
+    // Convert all values to default currency for sorting.
+    return (new CurrencyValueSource(field, defaultCurrency, null)).getSortField(reverse);
   }
 
   @Override
Index: solr/core/src/java/org/apache/solr/search/QueryParsing.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/QueryParsing.java	(revision 1403803)
+++ solr/core/src/java/org/apache/solr/search/QueryParsing.java	(working copy)
@@ -305,8 +305,6 @@
               }
               continue;
             }
-          } catch (IOException ioe) {
-            throw ioe;
           } catch (Exception e) {
             // hang onto this in case the string isn't a full field name either
             qParserException = e;
@@ -356,8 +354,6 @@
 
     } catch (ParseException e) {
       throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "error in sort: " + sortSpec, e);
-    } catch (IOException e) {
-      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "error in sort: " + sortSpec, e);
     }
 
 
Index: solr/core/src/java/org/apache/solr/search/ValueSourceParser.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/ValueSourceParser.java	(revision 1403803)
+++ solr/core/src/java/org/apache/solr/search/ValueSourceParser.java	(working copy)
@@ -1286,7 +1286,7 @@
   }
 
   @Override
-  public SortField getSortField(boolean reverse) throws IOException {
+  public SortField getSortField(boolean reverse) {
     return super.getSortField(reverse);
   }
 }
Index: lucene/queries/src/java/org/apache/lucene/queries/function/ValueSource.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/function/ValueSource.java	(revision 1403803)
+++ lucene/queries/src/java/org/apache/lucene/queries/function/ValueSource.java	(working copy)
@@ -89,9 +89,8 @@
    *
    * @param reverse true if this is a reverse sort.
    * @return The {@link org.apache.lucene.search.SortField} for the ValueSource
-   * @throws IOException if there was a problem reading the values.
    */
-  public SortField getSortField(boolean reverse) throws IOException {
+  public SortField getSortField(boolean reverse) {
     return new ValueSourceSortField(reverse);
   }
 
