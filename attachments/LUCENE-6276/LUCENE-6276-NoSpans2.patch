diff --git a/lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI.java b/lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI.java
index fd7cccd..41e68b2 100644
--- a/lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI.java
+++ b/lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI.java
@@ -164,16 +164,25 @@ public class ConjunctionDISI extends DocIdSetIterator {
   private static class TwoPhaseConjunctionDISI extends TwoPhaseIterator {
 
     private final TwoPhaseIterator[] twoPhaseIterators;
+    private float totalMatchCost = -1;
 
     private TwoPhaseConjunctionDISI(List<? extends DocIdSetIterator> iterators, List<TwoPhaseIterator> twoPhaseIterators) {
       super(new ConjunctionDISI(iterators));
       assert twoPhaseIterators.size() > 0;
+
+      CollectionUtil.timSort(twoPhaseIterators, new Comparator<TwoPhaseIterator>() {
+        @Override
+        public int compare(TwoPhaseIterator o1, TwoPhaseIterator o2) {
+          return Float.compare(o1.matchCost(), o1.matchCost());
+        }
+      });
+
       this.twoPhaseIterators = twoPhaseIterators.toArray(new TwoPhaseIterator[twoPhaseIterators.size()]);
     }
 
     @Override
     public boolean matches() throws IOException {
-      for (TwoPhaseIterator twoPhaseIterator : twoPhaseIterators) {
+      for (TwoPhaseIterator twoPhaseIterator : twoPhaseIterators) { // match cheapest first
         if (twoPhaseIterator.matches() == false) {
           return false;
         }
@@ -181,6 +190,17 @@ public class ConjunctionDISI extends DocIdSetIterator {
       return true;
     }
 
+    @Override
+    public float matchCost() {
+      if (totalMatchCost < 0) {
+        totalMatchCost = 0;
+        for (TwoPhaseIterator tpi : twoPhaseIterators) {
+          totalMatchCost += tpi.matchCost();
+        }
+      }
+      return totalMatchCost;
+    }
+
   }
 
   /**
diff --git a/lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer.java b/lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer.java
index c32a520..6035ea1 100644
--- a/lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer.java
+++ b/lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer.java
@@ -69,6 +69,7 @@ abstract class DisjunctionScorer extends Scorer {
     // rebalancing the pq through the approximation will also rebalance
     // the pq in this scorer.
     return new TwoPhaseIterator(new DisjunctionDISIApproximation<Scorer>(subScorers)) {
+      float matchCost = -1;
 
       @Override
       public boolean matches() throws IOException {
@@ -105,6 +106,21 @@ abstract class DisjunctionScorer extends Scorer {
         DisjunctionScorer.this.topScorers = topScorers;
         return true;
       }
+
+      @Override
+      public float matchCost() {
+        if (matchCost < 0) {
+          for (DisiWrapper<Scorer> w : subScorers) {
+            if (w.twoPhaseView != null) {
+              matchCost += w.twoPhaseView.matchCost();
+            } else {
+              assert w.iterator instanceof TermScorer; // zero match cost.
+            }
+          }
+          matchCost = matchCost / subScorers.size(); // most likely only one subscorer matches a document.
+        }
+        return matchCost;
+      }
     };
   }
 
diff --git a/lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer.java b/lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer.java
index 48060ef..248a948 100644
--- a/lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer.java
+++ b/lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer.java
@@ -44,9 +44,11 @@ final class ExactPhraseScorer extends Scorer {
 
   private final Similarity.SimScorer docScorer;
   private final boolean needsScores;
+  private float matchCost;
 
   ExactPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,
-                    Similarity.SimScorer docScorer, boolean needsScores) throws IOException {
+                    Similarity.SimScorer docScorer, boolean needsScores,
+                    float matchCost) throws IOException {
     super(weight);
     this.docScorer = docScorer;
     this.needsScores = needsScores;
@@ -59,6 +61,7 @@ final class ExactPhraseScorer extends Scorer {
     }
     conjunction = ConjunctionDISI.intersect(iterators);
     this.postings = postingsAndPositions.toArray(new PostingsAndPosition[postingsAndPositions.size()]);
+    this.matchCost = matchCost;
   }
 
   @Override
@@ -68,6 +71,11 @@ final class ExactPhraseScorer extends Scorer {
       public boolean matches() throws IOException {
         return phraseFreq() > 0;
       }
+
+      @Override
+      public float matchCost() {
+        return matchCost;
+      }
     };
   }
 
diff --git a/lucene/core/src/java/org/apache/lucene/search/Filter.java b/lucene/core/src/java/org/apache/lucene/search/Filter.java
index 105e3bd..fd7913c 100644
--- a/lucene/core/src/java/org/apache/lucene/search/Filter.java
+++ b/lucene/core/src/java/org/apache/lucene/search/Filter.java
@@ -120,6 +120,11 @@ public abstract class Filter extends Query {
             public boolean matches() throws IOException {
               return bits.get(approximation.docID());
             }
+
+            @Override
+            public float matchCost() {
+              return 0;
+            }
           };
           return new ConstantScoreScorer(this, 0f, twoPhase);
         }
diff --git a/lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.java b/lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.java
index f29d86a..5aa70c9 100644
--- a/lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.java
@@ -126,6 +126,7 @@ public class MultiPhraseQuery extends Query {
     private final Similarity.SimWeight stats;
     private final Map<Term,TermContext> termContexts = new HashMap<>();
     private final boolean needsScores;
+    private float totalMatchCost;
 
     public MultiPhraseWeight(IndexSearcher searcher, boolean needsScores)
       throws IOException {
@@ -143,7 +144,9 @@ public class MultiPhraseQuery extends Query {
             termContext = TermContext.build(context, term);
             termContexts.put(term, termContext);
           }
-          allTermStats.add(searcher.termStatistics(term, termContext));
+          TermStatistics termStat = searcher.termStatistics(term, termContext);
+          allTermStats.add(termStat);
+          totalMatchCost += termStat.expTermFreqInMatchingDoc();
         }
       }
       stats = similarity.computeWeight(
@@ -222,9 +225,9 @@ public class MultiPhraseQuery extends Query {
       }
 
       if (slop == 0) {
-        return new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context), needsScores);
+        return new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context), needsScores, totalMatchCost);
       } else {
-        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context), needsScores);
+        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context), needsScores, totalMatchCost);
       }
     }
 
diff --git a/lucene/core/src/java/org/apache/lucene/search/PhraseQuery.java b/lucene/core/src/java/org/apache/lucene/search/PhraseQuery.java
index 599a1ae..325196b 100644
--- a/lucene/core/src/java/org/apache/lucene/search/PhraseQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/PhraseQuery.java
@@ -348,6 +348,7 @@ public class PhraseQuery extends Query {
     private final Similarity.SimWeight stats;
     private final boolean needsScores;
     private transient TermContext states[];
+    private float totalMatchCost;
 
     public PhraseWeight(IndexSearcher searcher, boolean needsScores)
       throws IOException {
@@ -363,10 +364,12 @@ public class PhraseQuery extends Query {
       final IndexReaderContext context = searcher.getTopReaderContext();
       states = new TermContext[terms.length];
       TermStatistics termStats[] = new TermStatistics[terms.length];
+      totalMatchCost = 0;
       for (int i = 0; i < terms.length; i++) {
         final Term term = terms[i];
         states[i] = TermContext.build(context, term);
         termStats[i] = searcher.termStatistics(term, states[i]);
+        totalMatchCost += termStats[i].expTermFreqInMatchingDoc();
       }
       stats = similarity.computeWeight(searcher.collectionStatistics(field), termStats);
     }
@@ -425,9 +428,9 @@ public class PhraseQuery extends Query {
       }
 
       if (slop == 0) {  // optimize exact case
-        return new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context), needsScores);
+        return new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context), needsScores, totalMatchCost);
       } else {
-        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context), needsScores);
+        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context), needsScores, totalMatchCost);
       }
     }
 
diff --git a/lucene/core/src/java/org/apache/lucene/search/RandomAccessWeight.java b/lucene/core/src/java/org/apache/lucene/search/RandomAccessWeight.java
index 5e920cb..20e6d30 100644
--- a/lucene/core/src/java/org/apache/lucene/search/RandomAccessWeight.java
+++ b/lucene/core/src/java/org/apache/lucene/search/RandomAccessWeight.java
@@ -62,6 +62,11 @@ public abstract class RandomAccessWeight extends ConstantScoreWeight {
 
         return matchingDocs.get(doc);
       }
+
+      @Override
+      public float matchCost() {
+        return 0;
+      }
     };
 
     return new ConstantScoreScorer(this, score(), twoPhase);
diff --git a/lucene/core/src/java/org/apache/lucene/search/ReqExclScorer.java b/lucene/core/src/java/org/apache/lucene/search/ReqExclScorer.java
index 125d887..108ca28 100644
--- a/lucene/core/src/java/org/apache/lucene/search/ReqExclScorer.java
+++ b/lucene/core/src/java/org/apache/lucene/search/ReqExclScorer.java
@@ -149,6 +149,10 @@ class ReqExclScorer extends Scorer {
         return ReqExclScorer.matches(doc, exclDoc, reqTwoPhaseIterator, exclTwoPhaseIterator);
       }
 
+      @Override
+      public float matchCost() {
+        return reqTwoPhaseIterator.matchCost();
+      }
     };
   }
 }
diff --git a/lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer.java b/lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer.java
index 4ee2bf6..0c4bce8 100644
--- a/lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer.java
+++ b/lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer.java
@@ -52,9 +52,11 @@ final class SloppyPhraseScorer extends Scorer {
   
   private int numMatches;
   final boolean needsScores;
+  private float matchCost;
   
   SloppyPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,
-      int slop, Similarity.SimScorer docScorer, boolean needsScores) {
+      int slop, Similarity.SimScorer docScorer, boolean needsScores,
+      float matchCost) {
     super(weight);
     this.docScorer = docScorer;
     this.needsScores = needsScores;
@@ -68,6 +70,7 @@ final class SloppyPhraseScorer extends Scorer {
       phrasePositions[i] = new PhrasePositions(postings[i].postings, postings[i].position, i, postings[i].terms);
     }
     conjunction = ConjunctionDISI.intersect(Arrays.asList(iterators));
+    this.matchCost = matchCost;
   }
 
   /**
@@ -596,6 +599,11 @@ final class SloppyPhraseScorer extends Scorer {
         sloppyFreq = phraseFreq(); // check for phrase
         return sloppyFreq != 0F;
       }
+
+      @Override
+      public float matchCost() {
+        return matchCost;
+      }
     };
   }
 }
diff --git a/lucene/core/src/java/org/apache/lucene/search/TermStatistics.java b/lucene/core/src/java/org/apache/lucene/search/TermStatistics.java
index 13480ab..0be4fb5 100644
--- a/lucene/core/src/java/org/apache/lucene/search/TermStatistics.java
+++ b/lucene/core/src/java/org/apache/lucene/search/TermStatistics.java
@@ -52,4 +52,14 @@ public class TermStatistics {
   public final long totalTermFreq() {
     return totalTermFreq;
   }
+
+  /** Returns the expected number of occurrences of the term
+   *  in a document that contains the term.
+   *  This will return at least 1.
+   */
+  public final float expTermFreqInMatchingDoc() {
+    long docFrq = (docFreq <= 0) ? 1 : docFreq;
+    long totalTermFrq = (totalTermFreq < docFrq) ? docFrq : totalTermFreq;
+    return totalTermFrq / (float) docFrq;
+  }
 }
diff --git a/lucene/core/src/java/org/apache/lucene/search/TwoPhaseIterator.java b/lucene/core/src/java/org/apache/lucene/search/TwoPhaseIterator.java
index 3df07a8..b4556a3 100644
--- a/lucene/core/src/java/org/apache/lucene/search/TwoPhaseIterator.java
+++ b/lucene/core/src/java/org/apache/lucene/search/TwoPhaseIterator.java
@@ -93,6 +93,10 @@ public abstract class TwoPhaseIterator {
    *  {@link DocIdSetIterator#NO_MORE_DOCS} -- and at most once. */
   public abstract boolean matches() throws IOException;
 
+  /** An estimate of the expected total cost for matching a single document.
+   */
+  public abstract float matchCost();
+
   /**
    * Returns a {@link TwoPhaseIterator} for this {@link DocIdSetIterator}
    * when available * otherwise returns null.
diff --git a/lucene/core/src/java/org/apache/lucene/search/spans/ConjunctionSpans.java b/lucene/core/src/java/org/apache/lucene/search/spans/ConjunctionSpans.java
index 8f600a4..46569dd 100644
--- a/lucene/core/src/java/org/apache/lucene/search/spans/ConjunctionSpans.java
+++ b/lucene/core/src/java/org/apache/lucene/search/spans/ConjunctionSpans.java
@@ -92,6 +92,11 @@ abstract class ConjunctionSpans extends Spans {
       public boolean matches() throws IOException {
         return twoPhaseCurrentDocMatches();
       }
+
+      @Override
+      public float matchCost() {
+        throw new Error("not yet implemented"); // NOCOMMIT
+      }
     };
     return res;
   }
diff --git a/lucene/core/src/java/org/apache/lucene/search/spans/FilterSpans.java b/lucene/core/src/java/org/apache/lucene/search/spans/FilterSpans.java
index dbb1300..8cf87be 100644
--- a/lucene/core/src/java/org/apache/lucene/search/spans/FilterSpans.java
+++ b/lucene/core/src/java/org/apache/lucene/search/spans/FilterSpans.java
@@ -140,6 +140,11 @@ public abstract class FilterSpans extends Spans {
         public boolean matches() throws IOException {
           return inner.matches() && twoPhaseCurrentDocMatches();
         }
+
+        @Override
+        public float matchCost() {
+          return inner.matchCost();
+        }
       };
     } else {
       // wrapped instance has no approximation, but
@@ -149,6 +154,10 @@ public abstract class FilterSpans extends Spans {
         public boolean matches() throws IOException {
           return twoPhaseCurrentDocMatches();
         }
+        @Override
+        public float matchCost() {
+          throw new Error("not yet implemented"); // NOCOMMIT
+        }
       };
     }
   }
diff --git a/lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery.java b/lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery.java
index df96d71..1b2a16e 100644
--- a/lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery.java
@@ -227,6 +227,11 @@ public final class SpanOrQuery extends SpanQuery {
             public boolean matches() throws IOException {
               return twoPhaseCurrentDocMatches();
             }
+
+            @Override
+            public float matchCost() {
+              throw new Error("not yet implemented"); // NOCOMMIT
+            }
           };
         }
 
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI.java b/lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI.java
index f62b19d..ede76b8 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI.java
@@ -37,6 +37,11 @@ public class TestConjunctionDISI extends LuceneTestCase {
       public boolean matches() throws IOException {
         return confirmed.get(iterator.docID());
       }
+
+      @Override
+      public float matchCost() {
+        return 0;
+      }
     };
   }
 
diff --git a/lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer.java b/lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer.java
index 2bc61ef..bfe5114 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer.java
@@ -195,6 +195,11 @@ public class AssertingScorer extends Scorer {
         }
         return matches;
       }
+
+      @Override
+      public float matchCost() {
+        return in.matchCost();
+      }
     };
   }
 }
diff --git a/lucene/test-framework/src/java/org/apache/lucene/search/RandomApproximationQuery.java b/lucene/test-framework/src/java/org/apache/lucene/search/RandomApproximationQuery.java
index 88cfd77..177cf83 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/search/RandomApproximationQuery.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/search/RandomApproximationQuery.java
@@ -190,6 +190,11 @@ public class RandomApproximationQuery extends Query {
       return approximation.docID() == disi.docID();
     }
 
+    @Override
+    public float matchCost() {
+      TwoPhaseIterator tpi = TwoPhaseIterator.asTwoPhaseIterator(disi);
+      return (tpi == null) ? 1.0f : tpi.matchCost();
+    }
   }
 
   private static class RandomApproximation extends DocIdSetIterator {
diff --git a/lucene/test-framework/src/java/org/apache/lucene/search/spans/AssertingSpans.java b/lucene/test-framework/src/java/org/apache/lucene/search/spans/AssertingSpans.java
index 4b9ff90..ed72a14 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/search/spans/AssertingSpans.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/search/spans/AssertingSpans.java
@@ -221,6 +221,11 @@ class AssertingSpans extends Spans {
       }
       return v;
     }
+
+    @Override
+    public float matchCost() {
+      throw new Error("not yet implemented"); // NOCOMMIT
+    }
   }
   
   class AssertingDISI extends DocIdSetIterator {
