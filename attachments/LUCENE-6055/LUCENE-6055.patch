Index: lucene/CHANGES.txt
===================================================================
--- lucene/CHANGES.txt	(revision 1637822)
+++ lucene/CHANGES.txt	(working copy)
@@ -226,6 +226,9 @@
   the only docs in it had fields that hit non-aborting exceptions
   during indexing but also had doc values.  (Mike McCandless)
 
+* LUCENE-6055: PayloadAttribute.clone() now does a deep clone of the underlying
+  bytes. (Shai Erera)
+  
 Documentation
 
 * LUCENE-5392: Add/improve analysis package documentation to reflect
Index: lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/CharTermAttributeImpl.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/CharTermAttributeImpl.java	(revision 1637822)
+++ lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/CharTermAttributeImpl.java	(working copy)
@@ -88,7 +88,6 @@
   @Override
   public void fillBytesRef() {
     bytes.copyChars(termBuffer, 0, termLength);
-    bytes.get();
   }
 
   @Override
Index: lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/PayloadAttributeImpl.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/PayloadAttributeImpl.java	(revision 1637822)
+++ lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/PayloadAttributeImpl.java	(working copy)
@@ -55,7 +55,7 @@
   public PayloadAttributeImpl clone()  {
     PayloadAttributeImpl clone = (PayloadAttributeImpl) super.clone();
     if (payload != null) {
-      clone.payload = payload.clone();
+      clone.payload = BytesRef.deepCopyOf(payload);
     }
     return clone;
   }
@@ -86,7 +86,7 @@
   @Override
   public void copyTo(AttributeImpl target) {
     PayloadAttribute t = (PayloadAttribute) target;
-    t.setPayload((payload == null) ? null : payload.clone());
+    t.setPayload((payload == null) ? null : BytesRef.deepCopyOf(payload));
   }  
 
   
Index: lucene/core/src/java/org/apache/lucene/util/AttributeImpl.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/AttributeImpl.java	(revision 1637822)
+++ lucene/core/src/java/org/apache/lucene/util/AttributeImpl.java	(working copy)
@@ -116,10 +116,10 @@
    * Attributes this implementation supports.
    */
   public abstract void copyTo(AttributeImpl target);
-    
+
   /**
-   * Shallow clone. Subclasses must override this if they 
-   * need to clone any members deeply,
+   * In most cases the clone is, and should be, deep in order to be able to
+   * properly capture the state of all attributes.
    */
   @Override
   public AttributeImpl clone() {
Index: lucene/core/src/test/org/apache/lucene/util/TestAttributeSource.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/util/TestAttributeSource.java	(revision 1637822)
+++ lucene/core/src/test/org/apache/lucene/util/TestAttributeSource.java	(working copy)
@@ -159,4 +159,21 @@
     assertTrue("The hashCode is identical, so the captured state was preserved.", hash1 != src1.hashCode());
     assertEquals(src2.hashCode(), src1.hashCode());
   }
+  
+  public void testClonePayloadAttribute() throws Exception {
+    // LUCENE-6055: verify that PayloadAttribute.clone() does deep cloning.
+    PayloadAttributeImpl src = new PayloadAttributeImpl(new BytesRef(new byte[] { 1, 2, 3 }));
+    
+    // test clone()
+    PayloadAttributeImpl clone = src.clone();
+    clone.getPayload().bytes[0] = 10; // modify one byte, srcBytes shouldn't change
+    assertEquals("clone() wasn't deep", 1, src.getPayload().bytes[0]);
+    
+    // test copyTo()
+    clone = new PayloadAttributeImpl();
+    src.copyTo(clone);
+    clone.getPayload().bytes[0] = 10; // modify one byte, srcBytes shouldn't change
+    assertEquals("clone() wasn't deep", 1, src.getPayload().bytes[0]);
+  }
+  
 }
