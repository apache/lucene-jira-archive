diff --git a/lucene/core/src/java/org/apache/lucene/search/ForceNoBulkScoringQuery.java b/lucene/core/src/java/org/apache/lucene/search/ForceNoBulkScoringQuery.java
new file mode 100644
index 0000000..9c977d1
--- /dev/null
+++ b/lucene/core/src/java/org/apache/lucene/search/ForceNoBulkScoringQuery.java
@@ -0,0 +1,102 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.lucene.search;
+
+import java.io.IOException;
+import java.util.Objects;
+import java.util.Set;
+
+import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.LeafReaderContext;
+import org.apache.lucene.index.Term;
+
+/**
+ * Query wrapper that forces its wrapped Query to use the default doc-by-doc
+ * BulkScorer.
+ */
+public class ForceNoBulkScoringQuery extends Query {
+
+  private final Query inner;
+
+  public ForceNoBulkScoringQuery(Query inner) {
+    this.inner = inner;
+  }
+
+  @Override
+  public Query rewrite(IndexReader reader) throws IOException {
+    Query rewritten = inner.rewrite(reader);
+    if (rewritten != inner)
+      return new ForceNoBulkScoringQuery(rewritten);
+    return super.rewrite(reader);
+  }
+
+  @Override
+  public boolean equals(Object o) {
+    if (this == o) return true;
+    if (o == null || getClass() != o.getClass()) return false;
+    ForceNoBulkScoringQuery that = (ForceNoBulkScoringQuery) o;
+    return Objects.equals(inner, that.inner);
+  }
+
+  @Override
+  public int hashCode() {
+    return Objects.hash(inner);
+  }
+
+  public Query getWrappedQuery() {
+    return inner;
+  }
+
+  @Override
+  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
+
+    final Weight innerWeight = inner.createWeight(searcher, needsScores);
+
+    return new Weight(ForceNoBulkScoringQuery.this) {
+      @Override
+      public void extractTerms(Set<Term> set) {
+        innerWeight.extractTerms(set);
+      }
+
+      @Override
+      public Explanation explain(LeafReaderContext leafReaderContext, int i) throws IOException {
+        return innerWeight.explain(leafReaderContext, i);
+      }
+
+      @Override
+      public float getValueForNormalization() throws IOException {
+        return innerWeight.getValueForNormalization();
+      }
+
+      @Override
+      public void normalize(float v, float v1) {
+        innerWeight.normalize(v, v1);
+      }
+
+      @Override
+      public Scorer scorer(LeafReaderContext leafReaderContext) throws IOException {
+        return innerWeight.scorer(leafReaderContext);
+      }
+    };
+  }
+
+  @Override
+  public String toString(String s) {
+    return "NoBulkScorer(" + inner.toString(s) + ")";
+  }
+}
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestForceNoBulkScoringQuery.java b/lucene/core/src/test/org/apache/lucene/search/TestForceNoBulkScoringQuery.java
new file mode 100644
index 0000000..3efc1ae
--- /dev/null
+++ b/lucene/core/src/test/org/apache/lucene/search/TestForceNoBulkScoringQuery.java
@@ -0,0 +1,135 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.lucene.search;
+
+import java.io.IOException;
+import java.util.Objects;
+
+import org.apache.lucene.document.Document;
+import org.apache.lucene.document.Field;
+import org.apache.lucene.document.TextField;
+import org.apache.lucene.index.DirectoryReader;
+import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.IndexWriter;
+import org.apache.lucene.index.LeafReaderContext;
+import org.apache.lucene.index.Term;
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.util.LuceneTestCase;
+import org.junit.Test;
+
+public class TestForceNoBulkScoringQuery extends LuceneTestCase {
+
+  @Test
+  public void testEquality() {
+
+    TermQuery tq1 = new TermQuery(new Term("f", "t"));
+    TermQuery tq2 = new TermQuery(new Term("f", "t2"));
+    TermQuery tq3 = new TermQuery(new Term("f", "t2"));
+
+    assertEquals(new ForceNoBulkScoringQuery(tq1), new ForceNoBulkScoringQuery(tq1));
+    assertFalse(new ForceNoBulkScoringQuery(tq1).equals(new ForceNoBulkScoringQuery(tq2)));
+    assertEquals(new ForceNoBulkScoringQuery(tq2), new ForceNoBulkScoringQuery(tq3));
+
+    assertEquals(new ForceNoBulkScoringQuery(tq2).hashCode(), new ForceNoBulkScoringQuery(tq3).hashCode());
+    assertFalse(Objects.equals(new ForceNoBulkScoringQuery(tq1).hashCode(), new ForceNoBulkScoringQuery(tq2).hashCode()));
+  }
+
+  @Test
+  public void testRewrite() throws IOException {
+
+    try (Directory dir = newDirectory();
+         IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig())) {
+
+      Document doc = new Document();
+      doc.add(new TextField("field", "term1 term2 term3 term4", Field.Store.NO));
+      iw.addDocument(doc);
+      iw.commit();
+
+      IndexReader reader = DirectoryReader.open(dir);
+
+      PrefixQuery pq = new PrefixQuery(new Term("field", "term"));
+      ForceNoBulkScoringQuery q = new ForceNoBulkScoringQuery(pq);
+
+      assertEquals(q.getWrappedQuery(), pq);
+
+      Query rewritten = q.rewrite(reader);
+      assertEquals(rewritten.getClass(), ForceNoBulkScoringQuery.class);
+
+      Query inner = ((ForceNoBulkScoringQuery) rewritten).getWrappedQuery();
+      assertFalse(inner.equals(pq));
+
+      reader.close();
+
+    }
+
+  }
+
+  @Test
+  public void testForceNoBulkScores() throws IOException {
+
+    Directory dir = newDirectory();
+    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());
+
+    Document doc = new Document();
+    doc.add(new TextField("field", "this is some text", Field.Store.NO));
+    w.addDocument(doc);
+
+    w.close();
+
+    IndexReader reader = DirectoryReader.open(dir);
+    IndexSearcher searcher = new IndexSearcher(reader);
+    searcher.setQueryCache(null);
+
+    BooleanQuery bq = new BooleanQuery.Builder()
+        .add(new TermQuery(new Term("field", "some")), BooleanClause.Occur.SHOULD)
+        .add(new TermQuery(new Term("field", "text")), BooleanClause.Occur.SHOULD)
+        .build();
+
+    checkScorerType(searcher, bq, "FakeScorer");
+
+    ForceNoBulkScoringQuery noBulkQuery = new ForceNoBulkScoringQuery(bq);
+    checkScorerType(searcher, noBulkQuery, "DisjunctionSumScorer");
+
+    reader.close();
+    dir.close();
+  }
+
+  private static void checkScorerType(IndexSearcher searcher, Query query, String scorerType) throws IOException {
+    searcher.search(query, new Collector() {
+      @Override
+      public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {
+        return new LeafCollector() {
+          @Override
+          public void setScorer(Scorer scorer) throws IOException {
+            assertEquals(scorer.getClass().getSimpleName(), scorerType);
+          }
+
+          @Override
+          public void collect(int doc) throws IOException {
+
+          }
+        };
+      }
+
+      @Override
+      public boolean needsScores() {
+        return false;
+      }
+    });
+  }
+}
