Index: modules/queries/src/java/org/apache/lucene/queries/TermsFilter.java
===================================================================
--- modules/queries/src/java/org/apache/lucene/queries/TermsFilter.java	(revision 1310980)
+++ modules/queries/src/java/org/apache/lucene/queries/TermsFilter.java	(working copy)
@@ -57,7 +57,7 @@
   public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {
     AtomicReader reader = context.reader();
     FixedBitSet result = new FixedBitSet(reader.maxDoc());
-    InvertedFields fields = reader.fields();
+    InvertedFields fields = reader.invertedFields();
 
     if (fields == null) {
       return result;
Index: modules/queries/src/java/org/apache/lucene/queries/function/valuesource/SumTotalTermFreqValueSource.java
===================================================================
--- modules/queries/src/java/org/apache/lucene/queries/function/valuesource/SumTotalTermFreqValueSource.java	(revision 1310980)
+++ modules/queries/src/java/org/apache/lucene/queries/function/valuesource/SumTotalTermFreqValueSource.java	(working copy)
@@ -57,7 +57,7 @@
   public void createWeight(Map context, IndexSearcher searcher) throws IOException {
     long sumTotalTermFreq = 0;
     for (AtomicReaderContext readerContext : searcher.getTopReaderContext().leaves()) {
-      InvertedFields fields = readerContext.reader().fields();
+      InvertedFields fields = readerContext.reader().invertedFields();
       if (fields == null) continue;
       Terms terms = fields.terms(indexedField);
       if (terms == null) continue;
Index: modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TermFreqValueSource.java
===================================================================
--- modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TermFreqValueSource.java	(revision 1310980)
+++ modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TermFreqValueSource.java	(working copy)
@@ -38,7 +38,7 @@
 
   @Override
   public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
-    InvertedFields fields = readerContext.reader().fields();
+    InvertedFields fields = readerContext.reader().invertedFields();
     final Terms terms = fields.terms(field);
 
     return new IntDocValues(this) {
Index: modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TFValueSource.java
===================================================================
--- modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TFValueSource.java	(revision 1310980)
+++ modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TFValueSource.java	(working copy)
@@ -40,7 +40,7 @@
 
   @Override
   public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
-    InvertedFields fields = readerContext.reader().fields();
+    InvertedFields fields = readerContext.reader().invertedFields();
     final Terms terms = fields.terms(field);
     IndexSearcher searcher = (IndexSearcher)context.get("searcher");
     final TFIDFSimilarity similarity = IDFValueSource.asTFIDF(searcher.getSimilarity(), field);
Index: lucene/core/src/test/org/apache/lucene/index/TestDoc.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestDoc.java	(revision 1310980)
+++ lucene/core/src/test/org/apache/lucene/index/TestDoc.java	(working copy)
@@ -223,7 +223,7 @@
       for (int i = 0; i < reader.numDocs(); i++)
         out.println(reader.document(i));
 
-      FieldsEnum fis = reader.fields().iterator();
+      FieldsEnum fis = reader.invertedFields().iterator();
       String field = fis.next();
       while(field != null)  {
         Terms terms = fis.terms();
Index: lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader.java	(revision 1310980)
+++ lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader.java	(working copy)
@@ -117,8 +117,8 @@
     }
 
     @Override
-    public InvertedFields fields() throws IOException {
-      return new TestFields(super.fields());
+    public InvertedFields invertedFields() throws IOException {
+      return new TestFields(super.invertedFields());
     }
   }
     
Index: lucene/core/src/test/org/apache/lucene/index/TestPostingsOffsets.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestPostingsOffsets.java	(revision 1310980)
+++ lucene/core/src/test/org/apache/lucene/index/TestPostingsOffsets.java	(working copy)
@@ -303,7 +303,7 @@
       // TODO: improve this
       AtomicReader sub = (AtomicReader) reader;
       //System.out.println("\nsub=" + sub);
-      final TermsEnum termsEnum = sub.fields().terms("content").iterator(null);
+      final TermsEnum termsEnum = sub.invertedFields().terms("content").iterator(null);
       DocsEnum docs = null;
       DocsAndPositionsEnum docsAndPositions = null;
       DocsAndPositionsEnum docsAndPositionsAndOffsets = null;
Index: lucene/core/src/test/org/apache/lucene/index/TestSegmentTermEnum.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestSegmentTermEnum.java	(revision 1310980)
+++ lucene/core/src/test/org/apache/lucene/index/TestSegmentTermEnum.java	(working copy)
@@ -79,7 +79,7 @@
     addDoc(writer, "aaa bbb");
     writer.close();
     SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir));
-    TermsEnum terms = reader.fields().terms("content").iterator(null);
+    TermsEnum terms = reader.invertedFields().terms("content").iterator(null);
     assertNotNull(terms.next());
     assertEquals("aaa", terms.term().utf8ToString());
     assertNotNull(terms.next());
Index: lucene/core/src/test/org/apache/lucene/index/TestFlex.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestFlex.java	(revision 1310980)
+++ lucene/core/src/test/org/apache/lucene/index/TestFlex.java	(working copy)
@@ -71,7 +71,7 @@
     w.addDocument(doc);
     w.forceMerge(1);
     DirectoryReader r = w.getReader();
-    TermsEnum terms = getOnlySegmentReader(r).fields().terms("f").iterator(null);
+    TermsEnum terms = getOnlySegmentReader(r).invertedFields().terms("f").iterator(null);
     assertTrue(terms.next() != null);
     try {
       assertEquals(0, terms.ord());
Index: lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs.java	(revision 1310980)
+++ lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs.java	(working copy)
@@ -61,7 +61,7 @@
     assertTrue(reader != null);
     assertEquals(indexDivisor, reader.getTermInfosIndexDivisor());
 
-    TermsEnum terms = reader.fields().terms(DocHelper.TEXT_FIELD_2_KEY).iterator(null);
+    TermsEnum terms = reader.invertedFields().terms(DocHelper.TEXT_FIELD_2_KEY).iterator(null);
     terms.seekCeil(new BytesRef("field"));
     DocsEnum termDocs = _TestUtil.docs(random, terms, reader.getLiveDocs(), null, true);
     if (termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)    {
Index: lucene/core/src/test/org/apache/lucene/index/TestStressAdvance.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestStressAdvance.java	(revision 1310980)
+++ lucene/core/src/test/org/apache/lucene/index/TestStressAdvance.java	(working copy)
@@ -68,7 +68,7 @@
           bDocIDs.add(docID);
         }
       }
-      final TermsEnum te = getOnlySegmentReader(r).fields().terms("field").iterator(null);
+      final TermsEnum te = getOnlySegmentReader(r).invertedFields().terms("field").iterator(null);
       
       DocsEnum de = null;
       for(int iter2=0;iter2<10;iter2++) {
Index: lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum.java	(revision 1310980)
+++ lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum.java	(working copy)
@@ -92,7 +92,7 @@
 
     Bits liveDocs = pr.getLiveDocs();
 
-    FieldsEnum fe = pr.fields().iterator();
+    FieldsEnum fe = pr.invertedFields().iterator();
 
     String f = fe.next();
     assertEquals("field1", f);
Index: lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.java	(revision 1310980)
+++ lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.java	(working copy)
@@ -778,7 +778,7 @@
     writer.close();
     DirectoryReader reader = IndexReader.open(dir);
     AtomicReader subreader = getOnlySegmentReader(reader);
-    TermsEnum te = subreader.fields().terms("").iterator(null);
+    TermsEnum te = subreader.invertedFields().terms("").iterator(null);
     assertEquals(new BytesRef("a"), te.next());
     assertEquals(new BytesRef("b"), te.next());
     assertEquals(new BytesRef("c"), te.next());
@@ -799,7 +799,7 @@
     writer.close();
     DirectoryReader reader = IndexReader.open(dir);
     AtomicReader subreader = getOnlySegmentReader(reader);
-    TermsEnum te = subreader.fields().terms("").iterator(null);
+    TermsEnum te = subreader.invertedFields().terms("").iterator(null);
     assertEquals(new BytesRef(""), te.next());
     assertEquals(new BytesRef("a"), te.next());
     assertEquals(new BytesRef("b"), te.next());
@@ -1303,7 +1303,7 @@
     w.addDocument(d);
 
     AtomicReader r = getOnlySegmentReader(w.getReader());
-    TermsEnum t = r.fields().terms("field").iterator(null);
+    TermsEnum t = r.invertedFields().terms("field").iterator(null);
     int count = 0;
     while(t.next() != null) {
       final DocsEnum docs = _TestUtil.docs(random, t, null, null, false);
Index: lucene/core/src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter.java	(revision 1310980)
+++ lucene/core/src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter.java	(working copy)
@@ -85,7 +85,7 @@
   @Override
   public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {
     final AtomicReader reader = context.reader();
-    final InvertedFields fields = reader.fields();
+    final InvertedFields fields = reader.invertedFields();
     if (fields == null) {
       // reader has no fields
       return DocIdSet.EMPTY_DOCIDSET;
Index: lucene/core/src/java/org/apache/lucene/search/Filter.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/Filter.java	(revision 1310980)
+++ lucene/core/src/java/org/apache/lucene/search/Filter.java	(working copy)
@@ -21,7 +21,6 @@
 
 import org.apache.lucene.index.AtomicReader; // javadocs
 import org.apache.lucene.index.AtomicReaderContext;
-import org.apache.lucene.index.IndexReader; // javadocs
 import org.apache.lucene.util.Bits;
 
 /** 
@@ -45,7 +44,7 @@
    *         represent the whole underlying index i.e. if the index has more than
    *         one segment the given reader only represents a single segment.
    *         The provided context is always an atomic context, so you can call 
-   *         {@link AtomicReader#fields()}
+   *         {@link AtomicReader#invertedFields()}
    *         on the context's reader, for example.
    *
    * @param acceptDocs
Index: lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery.java	(revision 1310980)
+++ lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery.java	(working copy)
@@ -93,7 +93,7 @@
     if (termContext == null) {
       // this happens with span-not query, as it doesn't include the NOT side in extractTerms()
       // so we seek to the term now in this segment..., this sucks because its ugly mostly!
-      final InvertedFields fields = context.reader().fields();
+      final InvertedFields fields = context.reader().invertedFields();
       if (fields != null) {
         final Terms terms = fields.terms(term.field());
         if (terms != null) {
Index: lucene/core/src/java/org/apache/lucene/search/TermCollectingRewrite.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/TermCollectingRewrite.java	(revision 1310980)
+++ lucene/core/src/java/org/apache/lucene/search/TermCollectingRewrite.java	(working copy)
@@ -50,7 +50,7 @@
     Comparator<BytesRef> lastTermComp = null;
     final AtomicReaderContext[] leaves = topReaderContext.leaves();
     for (AtomicReaderContext context : leaves) {
-      final InvertedFields fields = context.reader().fields();
+      final InvertedFields fields = context.reader().invertedFields();
       if (fields == null) {
         // reader has no fields
         continue;
Index: lucene/core/src/java/org/apache/lucene/index/DocTermOrds.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/DocTermOrds.java	(revision 1310980)
+++ lucene/core/src/java/org/apache/lucene/index/DocTermOrds.java	(working copy)
@@ -200,7 +200,7 @@
     }
     if (indexedTermsArray == null) {
       //System.out.println("GET normal enum");
-      final InvertedFields fields = reader.fields();
+      final InvertedFields fields = reader.invertedFields();
       if (fields == null) {
         return null;
       }
@@ -241,7 +241,7 @@
     final int[] lastTerm = new int[maxDoc];    // last term we saw for this document
     final byte[][] bytes = new byte[maxDoc][]; // list of term numbers for the doc (delta encoded vInts)
 
-    final InvertedFields fields = reader.fields();
+    final InvertedFields fields = reader.invertedFields();
     if (fields == null) {
       // No terms
       return;
@@ -655,7 +655,7 @@
     
     public OrdWrappedTermsEnum(AtomicReader reader) throws IOException {
       assert indexedTermsArray != null;
-      termsEnum = reader.fields().terms(field).iterator(null);
+      termsEnum = reader.invertedFields().terms(field).iterator(null);
     }
 
     @Override
Index: lucene/core/src/java/org/apache/lucene/index/SegmentReader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/SegmentReader.java	(revision 1310980)
+++ lucene/core/src/java/org/apache/lucene/index/SegmentReader.java	(working copy)
@@ -137,7 +137,7 @@
   }
 
   @Override
-  public InvertedFields fields() throws IOException {
+  public InvertedFields invertedFields() throws IOException {
     ensureOpen();
     return core.fields;
   }
Index: lucene/core/src/java/org/apache/lucene/index/BufferedDeletesStream.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/BufferedDeletesStream.java	(revision 1310980)
+++ lucene/core/src/java/org/apache/lucene/index/BufferedDeletesStream.java	(working copy)
@@ -357,7 +357,7 @@
   // Delete by Term
   private synchronized long applyTermDeletes(Iterable<Term> termsIter, ReadersAndLiveDocs rld, SegmentReader reader) throws IOException {
     long delCount = 0;
-    InvertedFields fields = reader.fields();
+    InvertedFields fields = reader.invertedFields();
     if (fields == null) {
       // This reader has no postings
       return 0;
Index: lucene/core/src/java/org/apache/lucene/index/AtomicReader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/AtomicReader.java	(revision 1310980)
+++ lucene/core/src/java/org/apache/lucene/index/AtomicReader.java	(working copy)
@@ -76,11 +76,11 @@
    * This method may return null if the reader has no
    * postings.
    */
-  public abstract InvertedFields fields() throws IOException;
+  public abstract InvertedFields invertedFields() throws IOException;
   
   @Override
   public final int docFreq(String field, BytesRef term) throws IOException {
-    final InvertedFields fields = fields();
+    final InvertedFields fields = invertedFields();
     if (fields == null) {
       return 0;
     }
@@ -102,7 +102,7 @@
    * account deleted documents that have not yet been merged
    * away. */
   public final long totalTermFreq(String field, BytesRef term) throws IOException {
-    final InvertedFields fields = fields();
+    final InvertedFields fields = invertedFields();
     if (fields == null) {
       return 0;
     }
@@ -120,7 +120,7 @@
 
   /** This may return null if the field does not exist.*/
   public final Terms terms(String field) throws IOException {
-    final InvertedFields fields = fields();
+    final InvertedFields fields = invertedFields();
     if (fields == null) {
       return null;
     }
@@ -133,7 +133,7 @@
   public final DocsEnum termDocsEnum(Bits liveDocs, String field, BytesRef term, boolean needsFreqs) throws IOException {
     assert field != null;
     assert term != null;
-    final InvertedFields fields = fields();
+    final InvertedFields fields = invertedFields();
     if (fields != null) {
       final Terms terms = fields.terms(field);
       if (terms != null) {
@@ -153,7 +153,7 @@
   public final DocsAndPositionsEnum termPositionsEnum(Bits liveDocs, String field, BytesRef term, boolean needsOffsets) throws IOException {
     assert field != null;
     assert term != null;
-    final InvertedFields fields = fields();
+    final InvertedFields fields = invertedFields();
     if (fields != null) {
       final Terms terms = fields.terms(field);
       if (terms != null) {
@@ -174,7 +174,7 @@
   public final DocsEnum termDocsEnum(Bits liveDocs, String field, BytesRef term, TermState state, boolean needsFreqs) throws IOException {
     assert state != null;
     assert field != null;
-    final InvertedFields fields = fields();
+    final InvertedFields fields = invertedFields();
     if (fields != null) {
       final Terms terms = fields.terms(field);
       if (terms != null) {
@@ -195,7 +195,7 @@
   public final DocsAndPositionsEnum termPositionsEnum(Bits liveDocs, String field, BytesRef term, TermState state, boolean needsOffsets) throws IOException {
     assert state != null;
     assert field != null;
-    final InvertedFields fields = fields();
+    final InvertedFields fields = invertedFields();
     if (fields != null) {
       final Terms terms = fields.terms(field);
       if (terms != null) {
@@ -211,7 +211,7 @@
    *  in this reader.
    */
   public final long getUniqueTermCount() throws IOException {
-    final InvertedFields fields = fields();
+    final InvertedFields fields = invertedFields();
     if (fields == null) {
       return 0;
     }
Index: lucene/core/src/java/org/apache/lucene/index/CheckIndex.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/CheckIndex.java	(revision 1310980)
+++ lucene/core/src/java/org/apache/lucene/index/CheckIndex.java	(working copy)
@@ -1160,7 +1160,7 @@
         infoStream.print("    test: terms, freq, prox...");
       }
 
-      final InvertedFields fields = reader.fields();
+      final InvertedFields fields = reader.invertedFields();
       status = checkFields(fields, liveDocs, maxDoc, fieldInfos, is);
       if (liveDocs != null) {
         if (infoStream != null) {
@@ -1365,7 +1365,7 @@
       final InvertedFields postingsFields;
       // TODO: testTermsIndex
       if (crossCheckTermVectors) {
-        postingsFields = reader.fields();
+        postingsFields = reader.invertedFields();
       } else {
         postingsFields = null;
       }
Index: lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper.java	(revision 1310980)
+++ lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper.java	(working copy)
@@ -75,7 +75,7 @@
   }
 
   @Override
-  public InvertedFields fields() throws IOException {
+  public InvertedFields invertedFields() throws IOException {
     ensureOpen();
     return fields;
   }
Index: lucene/core/src/java/org/apache/lucene/index/SegmentMerger.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/SegmentMerger.java	(revision 1310980)
+++ lucene/core/src/java/org/apache/lucene/index/SegmentMerger.java	(working copy)
@@ -341,7 +341,7 @@
 
     for(int readerIndex=0;readerIndex<mergeState.readers.size();readerIndex++) {
       final MergeState.IndexReaderAndLiveDocs r = mergeState.readers.get(readerIndex);
-      final InvertedFields f = r.reader.fields();
+      final InvertedFields f = r.reader.invertedFields();
       final int maxDoc = r.reader.maxDoc();
       if (f != null) {
         slices.add(new ReaderUtil.Slice(docBase, maxDoc, readerIndex));
Index: lucene/core/src/java/org/apache/lucene/index/ParallelAtomicReader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/ParallelAtomicReader.java	(revision 1310980)
+++ lucene/core/src/java/org/apache/lucene/index/ParallelAtomicReader.java	(working copy)
@@ -116,7 +116,7 @@
     
     // build InvertedFields instance
     for (final AtomicReader reader : this.parallelReaders) {
-      final InvertedFields readerFields = reader.fields();
+      final InvertedFields readerFields = reader.invertedFields();
       if (readerFields != null) {
         final FieldsEnum it = readerFields.iterator();
         String name;
@@ -214,7 +214,7 @@
   }
   
   @Override
-  public InvertedFields fields() {
+  public InvertedFields invertedFields() {
     ensureOpen();
     return fields;
   }
Index: lucene/core/src/java/org/apache/lucene/index/FilterAtomicReader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/FilterAtomicReader.java	(revision 1310980)
+++ lucene/core/src/java/org/apache/lucene/index/FilterAtomicReader.java	(working copy)
@@ -365,9 +365,9 @@
   }
   
   @Override
-  public InvertedFields fields() throws IOException {
+  public InvertedFields invertedFields() throws IOException {
     ensureOpen();
-    return in.fields();
+    return in.invertedFields();
   }
 
   /** {@inheritDoc}
Index: lucene/core/src/java/org/apache/lucene/index/MultiFields.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/MultiFields.java	(revision 1310980)
+++ lucene/core/src/java/org/apache/lucene/index/MultiFields.java	(working copy)
@@ -63,7 +63,7 @@
   public static InvertedFields getFields(IndexReader r) throws IOException {
     if (r instanceof AtomicReader) {
       // already an atomic reader
-      return ((AtomicReader) r).fields();
+      return ((AtomicReader) r).invertedFields();
     }
     assert r instanceof CompositeReader;
     final IndexReader[] subs = ((CompositeReader) r).getSequentialSubReaders();
@@ -77,7 +77,7 @@
       new ReaderUtil.Gather(r) {
         @Override
         protected void add(int base, AtomicReader r) throws IOException {
-          final InvertedFields f = r.fields();
+          final InvertedFields f = r.invertedFields();
           if (f != null) {
             fields.add(f);
             slices.add(new ReaderUtil.Slice(base, r.maxDoc(), fields.size()-1));
Index: lucene/core/src/java/org/apache/lucene/util/TermContext.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/TermContext.java	(revision 1310980)
+++ lucene/core/src/java/org/apache/lucene/util/TermContext.java	(working copy)
@@ -89,7 +89,7 @@
     //if (DEBUG) System.out.println("prts.build term=" + term);
     for (int i = 0; i < leaves.length; i++) {
       //if (DEBUG) System.out.println("  r=" + leaves[i].reader);
-      final InvertedFields fields = leaves[i].reader().fields();
+      final InvertedFields fields = leaves[i].reader().invertedFields();
       if (fields != null) {
         final Terms terms = fields.terms(field);
         if (terms != null) {
Index: lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java
===================================================================
--- lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java	(revision 1310980)
+++ lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java	(working copy)
@@ -790,7 +790,7 @@
     }
   
     @Override
-    public InvertedFields fields() {
+    public InvertedFields invertedFields() {
       sortFields();
       return new MemoryFields();
     }
@@ -1018,7 +1018,7 @@
     @Override
     public InvertedFields getTermVectors(int docID) {
       if (docID == 0) {
-        return fields();
+        return invertedFields();
       } else {
         return null;
       }
Index: lucene/contrib/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter.java
===================================================================
--- lucene/contrib/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter.java	(revision 1310980)
+++ lucene/contrib/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter.java	(working copy)
@@ -80,7 +80,7 @@
 
   private FixedBitSet correctBits(AtomicReader reader, Bits acceptDocs) throws IOException {
     FixedBitSet bits = new FixedBitSet(reader.maxDoc()); //assume all are INvalid
-    Terms terms = reader.fields().terms(fieldName);
+    Terms terms = reader.invertedFields().terms(fieldName);
 
     if (terms == null) {
       return bits;
@@ -118,7 +118,7 @@
   private FixedBitSet fastBits(AtomicReader reader, Bits acceptDocs) throws IOException {
     FixedBitSet bits = new FixedBitSet(reader.maxDoc());
     bits.set(0, reader.maxDoc()); //assume all are valid
-    Terms terms = reader.fields().terms(fieldName);
+    Terms terms = reader.invertedFields().terms(fieldName);
 
     if (terms == null) {
       return bits;
Index: lucene/MIGRATE.txt
===================================================================
--- lucene/MIGRATE.txt	(revision 1310980)
+++ lucene/MIGRATE.txt	(working copy)
@@ -197,22 +197,22 @@
 
 
   How you obtain the enums has changed.  The primary entry point is
-  the Fields class.  If you know your reader is a single segment
+  the InvertedFields class.  If you know your reader is a single segment
   reader, do this:
 
-    Fields fields = reader.Fields();
-    if (fields != null) {
+    InvertedFields invertedFields = reader.invertedFields();
+    if (invertedFields != null) {
       ...
     }
 
   If the reader might be multi-segment, you must do this:
     
-    Fields fields = MultiFields.getFields(reader);
-    if (fields != null) {
+    InvertedFields invertedFields = MultiFields.getFields(reader);
+    if (invertedFields != null) {
       ...
     }
   
-  The fields may be null (eg if the reader has no fields).
+  The invertedFields may be null (eg if the reader has no fields).
 
   Note that the MultiFields approach entails a performance hit on
   MultiReaders, as it must merge terms/docs/positions on the fly. It's
@@ -221,12 +221,12 @@
   if you can (this is how Lucene drives searches).
 
   If you pass a SegmentReader to MultiFields.fiels it will simply
-  return reader.fields(), so there is no performance hit in that
+  return reader.invertedFields(), so there is no performance hit in that
   case.
 
-  Once you have a non-null Fields you can do this:
+  Once you have a non-null InvertedFields you can do this:
 
-    Terms terms = fields.terms("field");
+    Terms terms = invertedFields.terms("field");
     if (terms != null) {
       ...
     }
@@ -618,7 +618,7 @@
 * LUCENE-2621: Term vectors are now accessed via flexible indexing API.
 
   If you used IndexReader.getTermFreqVector/s before, you should now
-  use IndexReader.getTermVectors.  The new method returns a Fields
+  use IndexReader.getTermVectors.  The new method returns an InvertedFields
   instance exposing the inverted index of the one document.  From
-  Fields you can enumerate all fields, terms, positions, offsets.
+  InvertedFields you can enumerate all fields, terms, positions, offsets.
 
Index: lucene/test-framework/src/java/org/apache/lucene/index/FieldFilterAtomicReader.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/index/FieldFilterAtomicReader.java	(revision 1310980)
+++ lucene/test-framework/src/java/org/apache/lucene/index/FieldFilterAtomicReader.java	(working copy)
@@ -99,8 +99,8 @@
   }
 
   @Override
-  public InvertedFields fields() throws IOException {
-    final InvertedFields f = super.fields();
+  public InvertedFields invertedFields() throws IOException {
+    final InvertedFields f = super.invertedFields();
     return (f == null) ? null : new FieldFilterFields(f);
   }
 
Index: solr/core/src/test/org/apache/solr/search/TestDocSet.java
===================================================================
--- solr/core/src/test/org/apache/solr/search/TestDocSet.java	(revision 1310980)
+++ solr/core/src/test/org/apache/solr/search/TestDocSet.java	(working copy)
@@ -368,7 +368,7 @@
       }
 
       @Override
-      public InvertedFields fields() {
+      public InvertedFields invertedFields() {
         return null;
       }
 
Index: solr/core/src/java/org/apache/solr/search/JoinQParserPlugin.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/JoinQParserPlugin.java	(revision 1310980)
+++ solr/core/src/java/org/apache/solr/search/JoinQParserPlugin.java	(working copy)
@@ -262,8 +262,8 @@
         fastForRandomSet = new HashDocSet(sset.getDocs(), 0, sset.size());
       }
 
-      InvertedFields fromFields = fromSearcher.getAtomicReader().fields();
-      InvertedFields toFields = fromSearcher==toSearcher ? fromFields : toSearcher.getAtomicReader().fields();
+      InvertedFields fromFields = fromSearcher.getAtomicReader().invertedFields();
+      InvertedFields toFields = fromSearcher==toSearcher ? fromFields : toSearcher.getAtomicReader().invertedFields();
       if (fromFields == null) return DocSet.EMPTY;
       Terms terms = fromFields.terms(fromField);
       Terms toTerms = toFields.terms(toField);
Index: solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java	(revision 1310980)
+++ solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java	(working copy)
@@ -582,7 +582,7 @@
    * @return the first document number containing the term
    */
   public int getFirstMatch(Term t) throws IOException {
-    InvertedFields fields = atomicReader.fields();
+    InvertedFields fields = atomicReader.invertedFields();
     if (fields == null) return -1;
     Terms terms = fields.terms(t.field());
     if (terms == null) return -1;
@@ -610,7 +610,7 @@
       final AtomicReaderContext leaf = leaves[i];
       final AtomicReader reader = leaf.reader();
 
-      final InvertedFields fields = reader.fields();
+      final InvertedFields fields = reader.invertedFields();
       if (fields == null) continue;
 
       final Bits liveDocs = reader.getLiveDocs();
@@ -996,7 +996,7 @@
           final AtomicReaderContext leaf = leaves[i];
           final AtomicReader reader = leaf.reader();
           collector.setNextReader(leaf);
-          InvertedFields fields = reader.fields();
+          InvertedFields fields = reader.invertedFields();
           Terms terms = fields.terms(t.field());
           BytesRef termBytes = t.bytes();
           
Index: solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler.java
===================================================================
--- solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler.java	(revision 1310980)
+++ solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler.java	(working copy)
@@ -340,7 +340,7 @@
       if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {
         fieldMap.add("dynamicBase", schema.getDynamicPattern(sfield.getName()));
       }
-      Terms terms = reader.fields().terms(fieldName);
+      Terms terms = reader.invertedFields().terms(fieldName);
       if (terms == null) { // Not indexed, so we need to report what we can (it made it through the fl param if specified)
         finfo.add( fieldName, fieldMap );
         continue;
Index: solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.java
===================================================================
--- solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.java	(revision 1310980)
+++ solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.java	(working copy)
@@ -532,7 +532,7 @@
       public FieldComparator setNextReader(AtomicReaderContext context) throws IOException {
         //convert the ids to Lucene doc ids, the ordSet and termValues needs to be the same size as the number of elevation docs we have
         ordSet.clear();
-        InvertedFields fields = context.reader().fields();
+        InvertedFields fields = context.reader().invertedFields();
         if (fields == null) return this;
         Terms terms = fields.terms(idField);
         if (terms == null) return this;
Index: solr/core/src/java/org/apache/solr/handler/component/TermsComponent.java
===================================================================
--- solr/core/src/java/org/apache/solr/handler/component/TermsComponent.java	(revision 1310980)
+++ solr/core/src/java/org/apache/solr/handler/component/TermsComponent.java	(working copy)
@@ -118,7 +118,7 @@
 
 
     final AtomicReader indexReader = rb.req.getSearcher().getAtomicReader();
-    InvertedFields lfields = indexReader.fields();
+    InvertedFields lfields = indexReader.invertedFields();
 
     for (String field : fields) {
       NamedList<Integer> fieldTerms = new NamedList<Integer>();
Index: solr/core/src/java/org/apache/solr/request/SimpleFacets.java
===================================================================
--- solr/core/src/java/org/apache/solr/request/SimpleFacets.java	(revision 1310980)
+++ solr/core/src/java/org/apache/solr/request/SimpleFacets.java	(working copy)
@@ -669,7 +669,7 @@
       startTermBytes = new BytesRef(indexedPrefix);
     }
 
-    InvertedFields fields = r.fields();
+    InvertedFields fields = r.invertedFields();
     Terms terms = fields==null ? null : fields.terms(field);
     TermsEnum termsEnum = null;
     SolrIndexSearcher.DocsEnumState deState = null;
