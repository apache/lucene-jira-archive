Index: lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv.java	(revision 1514069)
+++ lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv.java	(working copy)
@@ -42,6 +42,7 @@
 import org.apache.lucene.codecs.lucene42.Lucene42Codec;
 import org.apache.lucene.codecs.simpletext.SimpleTextCodec;
 import org.apache.lucene.index.RandomCodec;
+import org.apache.lucene.search.FieldCache;
 import org.apache.lucene.search.RandomSimilarityProvider;
 import org.apache.lucene.search.similarities.DefaultSimilarity;
 import org.apache.lucene.search.similarities.Similarity;
@@ -243,6 +244,7 @@
           Arrays.toString(avoidCodecs.toArray()));
       throw e;
     }
+    FieldCache.DEFAULT.purgeAllCaches();
   }
 
   /**
@@ -287,6 +289,9 @@
     InfoStream.setDefault(savedInfoStream);
     if (savedLocale != null) Locale.setDefault(savedLocale);
     if (savedTimeZone != null) TimeZone.setDefault(savedTimeZone);
+    if (FieldCache.DEFAULT.getCacheEntries().length > 0) {
+      throw new IllegalStateException("fieldcaches leaked (some readers not closed): " + Arrays.toString(FieldCache.DEFAULT.getCacheEntries()));
+    }
   }
 
   /**
Index: lucene/test-framework/src/java/org/apache/lucene/util/TestRuleFieldCacheSanity.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/util/TestRuleFieldCacheSanity.java	(revision 1514069)
+++ lucene/test-framework/src/java/org/apache/lucene/util/TestRuleFieldCacheSanity.java	(working copy)
@@ -57,8 +57,6 @@
           problem = t;
         }
 
-        FieldCache.DEFAULT.purgeAllCaches();
-
         if (problem != null) {
           Rethrow.rethrow(problem);
         }
Index: lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.java	(revision 1514069)
+++ lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.java	(working copy)
@@ -23,7 +23,6 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-import java.util.WeakHashMap;
 
 import org.apache.lucene.index.AtomicReader;
 import org.apache.lucene.index.BinaryDocValues;
@@ -149,7 +148,7 @@
 
     final FieldCacheImpl wrapper;
 
-    final Map<Object,Map<CacheKey,Object>> readerCache = new WeakHashMap<Object,Map<CacheKey,Object>>();
+    final Map<Object,Map<CacheKey,Object>> readerCache = new HashMap<Object,Map<CacheKey,Object>>();
     
     protected abstract Object createValue(AtomicReader reader, CacheKey key, boolean setDocsWithField)
         throws IOException;
Index: lucene/core/src/test/org/apache/lucene/util/junitcompat/TestFailOnFieldCacheLeak.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/util/junitcompat/TestFailOnFieldCacheLeak.java	(revision 0)
+++ lucene/core/src/test/org/apache/lucene/util/junitcompat/TestFailOnFieldCacheLeak.java	(working copy)
@@ -0,0 +1,76 @@
+package org.apache.lucene.util.junitcompat;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.document.Document;
+import org.apache.lucene.document.Field;
+import org.apache.lucene.document.StringField;
+import org.apache.lucene.index.AtomicReader;
+import org.apache.lucene.index.DirectoryReader;
+import org.apache.lucene.index.FilterAtomicReader;
+import org.apache.lucene.index.IndexWriter;
+import org.apache.lucene.index.IndexWriterConfig;
+import org.apache.lucene.index.MultiReader;
+import org.apache.lucene.index.SortedDocValues;
+import org.apache.lucene.search.FieldCache;
+import org.apache.lucene.store.Directory;
+import org.junit.Assert;
+import org.junit.Test;
+import org.junit.runner.JUnitCore;
+import org.junit.runner.Result;
+import org.junit.runner.notification.Failure;
+
+public class TestFailOnFieldCacheLeak extends WithNestedTests {
+  public TestFailOnFieldCacheLeak() {
+    super(true);
+  }
+  
+  public static class Nested1 extends WithNestedTests.AbstractNestedTest {
+    public void testDummy() throws Exception {
+      Directory dir = newDirectory();
+      IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, null));
+      Document doc = new Document();
+      doc.add(new StringField("foo", "bar", Field.Store.NO));
+      iw.addDocument(doc);
+      AtomicReader ir = getOnlySegmentReader(DirectoryReader.open(iw, true));
+      final Object bogusKey = new MultiReader();
+      // we wont close this guy
+      AtomicReader leaky = new FilterAtomicReader(ir) {
+        @Override
+        public Object getCoreCacheKey() {
+          return bogusKey;
+        }
+      };
+      SortedDocValues dv = FieldCache.DEFAULT.getTermsIndex(leaky, "foo");
+      assertEquals(1, dv.getValueCount());
+      ir.close();
+      iw.close();
+      dir.close();
+    }
+  }
+
+  @Test
+  public void testFailOnFieldCacheLeak() {
+    Result r = JUnitCore.runClasses(Nested1.class);
+    for (Failure f : r.getFailures()) {
+      System.out.println("Failure: " + f);
+    }
+    Assert.assertEquals(1, r.getFailureCount());
+    Assert.assertTrue(r.getFailures().get(0).toString().contains("fieldcaches leaked"));
+  }
+}

Property changes on: lucene/core/src/test/org/apache/lucene/util/junitcompat/TestFailOnFieldCacheLeak.java
___________________________________________________________________
Added: svn:eol-style
## -0,0 +1 ##
+native
\ No newline at end of property
