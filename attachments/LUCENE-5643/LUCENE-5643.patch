Index: lucene/core/src/java/org/apache/lucene/analysis/NumericTokenStream.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/analysis/NumericTokenStream.java	(revision 1592382)
+++ lucene/core/src/java/org/apache/lucene/analysis/NumericTokenStream.java	(working copy)
@@ -18,6 +18,7 @@
  */
 
 import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
+import org.apache.lucene.analysis.tokenattributes.OffsetAttribute;
 import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute;
 import org.apache.lucene.analysis.tokenattributes.TermToBytesRefAttribute;
 import org.apache.lucene.analysis.tokenattributes.TypeAttribute;
@@ -132,9 +133,13 @@
   
     @Override
     public AttributeImpl createAttributeInstance(Class<? extends Attribute> attClass) {
-      if (CharTermAttribute.class.isAssignableFrom(attClass))
+      if (CharTermAttribute.class.isAssignableFrom(attClass)) {
         throw new IllegalArgumentException("NumericTokenStream does not support CharTermAttribute.");
-      return delegate.createAttributeInstance(attClass);
+      } else if (attClass.isAssignableFrom(NumericTermAttributeImpl.class)) {
+        return new NumericTermAttributeImpl();
+      } else {
+        return delegate.createAttributeInstance(attClass);
+      }
     }
   }
 
@@ -142,10 +147,13 @@
    * @lucene.internal
    * @since 4.0
    */
-  public static final class NumericTermAttributeImpl extends AttributeImpl implements NumericTermAttribute,TermToBytesRefAttribute {
+  public static final class NumericTermAttributeImpl extends AttributeImpl implements NumericTermAttribute,TermToBytesRefAttribute,TypeAttribute,PositionIncrementAttribute,OffsetAttribute {
     private long value = 0L;
     private int valueSize = 0, shift = 0, precisionStep = 0;
     private BytesRef bytes = new BytesRef();
+    private String type = TypeAttribute.DEFAULT_TYPE;
+    private int startOffset, endOffset;
+    private int positionIncrement;
     
     /** 
      * Creates, but does not yet initialize this attribute instance
@@ -192,11 +200,56 @@
 
     @Override
     public void clear() {
-      // this attribute has no contents to clear!
-      // we keep it untouched as it's fully controlled by outer class.
+      // the other attributes are fully controlled by the outer class
+      type = TypeAttribute.DEFAULT_TYPE;
+      startOffset = endOffset = 0;
+      positionIncrement = 1;
     }
     
     @Override
+    public String type() {
+      return type;
+    }
+
+    @Override
+    public void setType(String type) {
+      this.type = type;
+    }
+
+    @Override
+    public int startOffset() {
+      return startOffset;
+    }
+
+    @Override
+    public int endOffset() {
+      return endOffset;
+    }
+
+    @Override
+    public void setOffset(int startOffset, int endOffset) {
+      if (startOffset < 0 || endOffset < startOffset) {
+        throw new IllegalArgumentException("startOffset must be non-negative, and endOffset must be >= startOffset, "
+            + "startOffset=" + startOffset + ",endOffset=" + endOffset);
+      }
+      this.startOffset = startOffset;
+      this.endOffset = endOffset;
+    }
+
+    @Override
+    public void setPositionIncrement(int positionIncrement) {
+      if (positionIncrement < 0) {
+        throw new IllegalArgumentException("Increment must be zero or greater: got " + positionIncrement);
+      }
+      this.positionIncrement = positionIncrement;
+    }
+
+    @Override
+    public int getPositionIncrement() {
+      return positionIncrement;
+    }
+
+    @Override
     public void reflectWith(AttributeReflector reflector) {
       fillBytesRef();
       reflector.reflect(TermToBytesRefAttribute.class, "bytes", BytesRef.deepCopyOf(bytes));
@@ -203,6 +256,10 @@
       reflector.reflect(NumericTermAttribute.class, "shift", shift);
       reflector.reflect(NumericTermAttribute.class, "rawValue", getRawValue());
       reflector.reflect(NumericTermAttribute.class, "valueSize", valueSize);
+      reflector.reflect(TypeAttribute.class, "type", type);
+      reflector.reflect(PositionIncrementAttribute.class, "positionIncrement", positionIncrement);
+      reflector.reflect(OffsetAttribute.class, "startOffset", startOffset);
+      reflector.reflect(OffsetAttribute.class, "endOffset", endOffset);
     }
   
     @Override
@@ -209,6 +266,9 @@
     public void copyTo(AttributeImpl target) {
       final NumericTermAttribute a = (NumericTermAttribute) target;
       a.init(value, valueSize, precisionStep, shift);
+      ((TypeAttribute)target).setType(type);
+      ((PositionIncrementAttribute)target).setPositionIncrement(positionIncrement);
+      ((OffsetAttribute)target).setOffset(startOffset, endOffset);
     }
   }
   
