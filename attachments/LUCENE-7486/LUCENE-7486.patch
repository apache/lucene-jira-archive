 .../org/apache/lucene/search/DisjunctionMaxScorer.java   |  2 +-
 .../apache/lucene/search/TestDisjunctionMaxQuery.java    | 16 ++++++++++++++++
 2 files changed, 17 insertions(+), 1 deletion(-)

diff --git a/lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer.java b/lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer.java
index 3d6fbda..2356f5e 100644
--- a/lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer.java
+++ b/lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer.java
@@ -48,7 +48,7 @@ final class DisjunctionMaxScorer extends DisjunctionScorer {
   @Override
   protected float score(DisiWrapper topList) throws IOException {
     float scoreSum = 0;
-    float scoreMax = 0;
+    float scoreMax = Float.NEGATIVE_INFINITY;
     for (DisiWrapper w = topList; w != null; w = w.next) {
       final float subScore = w.scorer.score();
       scoreSum += subScore;
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery.java b/lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery.java
index 79c32d3..87046c7 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery.java
@@ -509,6 +509,22 @@ public class TestDisjunctionMaxQuery extends LuceneTestCase {
     directory.close();
   }
   
+  public void testNegativeScore() throws Exception {
+    DisjunctionMaxQuery q = new DisjunctionMaxQuery(
+        Arrays.asList(
+            new BoostQuery(tq("hed", "albino"), -1f), 
+            new BoostQuery(tq("hed", "elephant"), -1f)
+        ), 0.0f);
+    
+    ScoreDoc[] h = s.search(q, 1000).scoreDocs;
+
+    assertEquals("all docs should match " + q.toString(), 4, h.length);
+    
+    for (int i = 0; i < h.length; i++) {
+      assertTrue("score should be negative", h[i].score < 0);
+    }
+  }
+  
   /** macro */
   protected Query tq(String f, String t) {
     return new TermQuery(new Term(f, t));
