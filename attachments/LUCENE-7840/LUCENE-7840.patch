From 42bdd7970fb1905cce12d62b0d241d933af60659 Mon Sep 17 00:00:00 2001
From: Atri Sharma <atri@apache.org>
Date: Mon, 6 May 2019 13:49:47 +0530
Subject: [PATCH] LUCENE-7840: Avoid Building Scorer Supplier For Redundant
 SHOULD Clauses

For boolean queries, we should eliminate redundant SHOULD clauses during
query rewrite and not build the scorer supplier, as opposed to
eliminating them during weight construction
---
 .../apache/lucene/search/BooleanQuery.java    | 25 +++++++--
 .../apache/lucene/search/BooleanWeight.java   |  5 --
 .../lucene/search/TestBooleanRewrites.java    | 54 +++++++++++++++++++
 3 files changed, 74 insertions(+), 10 deletions(-)

diff --git a/lucene/core/src/java/org/apache/lucene/search/BooleanQuery.java b/lucene/core/src/java/org/apache/lucene/search/BooleanQuery.java
index ff264e7809..80924a9dd2 100644
--- a/lucene/core/src/java/org/apache/lucene/search/BooleanQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/BooleanQuery.java
@@ -192,18 +192,33 @@ public class BooleanQuery extends Query implements Iterable<BooleanClause> {
   }
 
   private BooleanQuery rewriteNoScoring() {
-    if (clauseSets.get(Occur.MUST).size() == 0) {
+    boolean keepShould = getMinimumNumberShouldMatch() > 0
+        || (clauseSets.get(Occur.MUST).size() + clauseSets.get(Occur.FILTER).size() == 0);
+
+    if (clauseSets.get(Occur.MUST).size() == 0 && keepShould) {
       return this;
     }
     BooleanQuery.Builder newQuery = new BooleanQuery.Builder();
+
     newQuery.setMinimumNumberShouldMatch(getMinimumNumberShouldMatch());
     for (BooleanClause clause : clauses) {
-      if (clause.getOccur() == Occur.MUST) {
-        newQuery.add(clause.getQuery(), Occur.FILTER);
-      } else {
-        newQuery.add(clause);
+      switch (clause.getOccur()) {
+        case MUST: {
+          newQuery.add(clause.getQuery(), Occur.FILTER);
+          break;
+        }
+        case SHOULD: {
+          if (keepShould) {
+            newQuery.add(clause);
+          }
+          break;
+        }
+        default: {
+          newQuery.add(clause);
+        }
       }
     }
+
     return newQuery.build();
   }
 
diff --git a/lucene/core/src/java/org/apache/lucene/search/BooleanWeight.java b/lucene/core/src/java/org/apache/lucene/search/BooleanWeight.java
index cded651629..ae6ccbe0cb 100644
--- a/lucene/core/src/java/org/apache/lucene/search/BooleanWeight.java
+++ b/lucene/core/src/java/org/apache/lucene/search/BooleanWeight.java
@@ -387,11 +387,6 @@ final class BooleanWeight extends Weight {
       return null;
     }
 
-    // we don't need scores, so if we have required clauses, drop optional clauses completely
-    if (scoreMode.needsScores() == false && minShouldMatch == 0 && scorers.get(Occur.MUST).size() + scorers.get(Occur.FILTER).size() > 0) {
-      scorers.get(Occur.SHOULD).clear();
-    }
-
     return new Boolean2ScorerSupplier(this, scorers, scoreMode, minShouldMatch);
   }
 
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites.java b/lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites.java
index 2120c516a2..497035b83f 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites.java
@@ -544,4 +544,58 @@ public class TestBooleanRewrites extends LuceneTestCase {
         .build();
     assertSame(query, searcher.rewrite(query));
   }
+
+  public void testDiscardShouldClauses() throws IOException {
+    Directory dir = newDirectory();
+    RandomIndexWriter w = new RandomIndexWriter(random(), dir);
+    Document doc = new Document();
+    Field f = newTextField("field", "a", Field.Store.NO);
+    doc.add(f);
+    w.addDocument(doc);
+    w.commit();
+
+    DirectoryReader reader = w.getReader();
+    final IndexSearcher searcher = new IndexSearcher(reader);
+
+    BooleanQuery.Builder query1 = new BooleanQuery.Builder();
+    query1.add(new TermQuery(new Term("field", "a")), Occur.MUST);
+    query1.add(new TermQuery(new Term("field", "b")), Occur.SHOULD);
+
+    query1.setMinimumNumberShouldMatch(0);
+
+    Weight weight = searcher.createWeight(searcher.rewrite(query1.build()), ScoreMode.COMPLETE_NO_SCORES, 1);
+
+    Query rewrittenQuery1 = weight.getQuery();
+
+    assertTrue(rewrittenQuery1 instanceof BooleanQuery);
+
+    BooleanQuery booleanRewrittenQuery1 = (BooleanQuery) rewrittenQuery1;
+
+    for (BooleanClause clause : booleanRewrittenQuery1.clauses()) {
+      assertNotEquals(clause.getOccur(), Occur.SHOULD);
+    }
+
+    BooleanQuery.Builder query2 = new BooleanQuery.Builder();
+    query2.add(new TermQuery(new Term("field", "a")), Occur.MUST);
+    query2.add(new TermQuery(new Term("field", "b")), Occur.SHOULD);
+    query2.add(new TermQuery(new Term("field", "c")), Occur.FILTER);
+
+    query2.setMinimumNumberShouldMatch(0);
+
+    weight = searcher.createWeight(searcher.rewrite(query2.build()), ScoreMode.COMPLETE_NO_SCORES, 1);
+
+    Query rewrittenQuery2 = weight.getQuery();
+
+    assertTrue(rewrittenQuery2 instanceof BooleanQuery);
+
+    BooleanQuery booleanRewrittenQuery2 = (BooleanQuery) rewrittenQuery1;
+
+    for (BooleanClause clause : booleanRewrittenQuery2.clauses()) {
+      assertNotEquals(clause.getOccur(), Occur.SHOULD);
+    }
+
+    reader.close();
+    w.close();
+    dir.close();
+  }
 }
-- 
2.17.2 (Apple Git-113)

