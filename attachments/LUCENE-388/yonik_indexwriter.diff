Index: src/java/org/apache/lucene/index/IndexWriter.java
===================================================================
--- src/java/org/apache/lucene/index/IndexWriter.java	(revision 431361)
+++ src/java/org/apache/lucene/index/IndexWriter.java	(working copy)
@@ -110,6 +110,14 @@
   private SegmentInfos segmentInfos = new SegmentInfos(); // the segments
   private final Directory ramDirectory = new RAMDirectory(); // for temp segs
 
+  /** num docs to add before a merge is attempted by addDocument()
+   * It may be prematurely lowered without any ill effects.
+   * addDocument() decrements this count, and maybeMergeSegments() resets it.
+   * It's important that this initially be 0, not maxBufferedDocs, to take
+   * into account any left-over small segments in the index.
+   */
+  private int docsLeftBeforeMerge = 0;
+
   private Lock writeLock;
@@ -509,14 +517,16 @@
     dw.addDocument(segmentName, doc);
     synchronized (this) {
       segmentInfos.addElement(new SegmentInfo(segmentName, 1, ramDirectory));
-      maybeMergeSegments();
+      if (--docsLeftBeforeMerge <= 0) {
+        maybeMergeSegments();
+      }
     }
   }
@@ -692,10 +702,11 @@
   /** Incremental segment merger.  */
   private final void maybeMergeSegments() throws IOException {
     long targetMergeDocs = minMergeDocs;
+    int mergeDocs=0;
     while (targetMergeDocs <= maxMergeDocs) {
       // find segments smaller than current target size
       int minSegment = segmentInfos.size();
-      int mergeDocs = 0;
+      mergeDocs = 0;
       while (--minSegment >= 0) {
         SegmentInfo si = segmentInfos.info(minSegment);
         if (si.docCount >= targetMergeDocs)
@@ -710,6 +721,15 @@
 
       targetMergeDocs *= mergeFactor;		  // increase target size
     }
+
+    if (targetMergeDocs==minMergeDocs) {
+      // we failed to merge the first level, so update the count of docs
+      // needed to trigger that merge.
+      docsLeftBeforeMerge = minMergeDocs - mergeDocs;
+    } else {
+      // we merged the lowest level, reset count
+      docsLeftBeforeMerge = 0;
+    }
   }
 
   /** Pops segments off of segmentInfos stack down to minSegment, merges them,
@@ -723,6 +743,9 @@
    * single segment. */
   private final void mergeSegments(int minSegment, int end)
     throws IOException {
+    // reset countdown so the next add will do a merge check
+    docsLeftBeforeMerge=0;
+
     final String mergedName = newSegmentName();
     if (infoStream != null) infoStream.print("merging segments");
     SegmentMerger merger = new SegmentMerger(this, mergedName);
