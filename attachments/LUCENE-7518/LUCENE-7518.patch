diff --git a/lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig.java b/lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig.java
index 96db60f..9f0026a 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig.java
@@ -169,11 +169,27 @@ public class FacetsConfig {
     return fieldTypes;
   }
 
-  private static void checkSeen(Set<String> seenDims, String dim) {
-    if (seenDims.contains(dim)) {
-      throw new IllegalArgumentException("dimension \"" + dim + "\" is not multiValued, but it appears more than once in this document");
+  /** Bitset flags */
+  private static final int FLAG_TAXONOMY = 1;
+  private static final int FLAG_SORTED_SET = 2;
+
+  private static void checkSeen(Map<String,Integer> seenDims, String dim, int flag) {
+    Integer curFlag = seenDims.get(dim);
+    if (curFlag == null) {
+      seenDims.put(dim, flag);
+    } else if ((curFlag & flag) != 0) {
+      String method;
+      if (flag == FLAG_TAXONOMY) {
+        method = "taxonomy";    
+      } else if (flag == FLAG_SORTED_SET) {
+        method = "sorted set";
+      } else {
+        throw new AssertionError();
+      }
+      throw new IllegalArgumentException("dimension \"" + dim + "\" is not multiValued, but it appears more than once in this document as a " + method + " facet field");
+    } else {
+      seenDims.put(dim, curFlag | flag);
     }
-    seenDims.add(dim);
   }
 
   /**
@@ -206,14 +222,14 @@ public class FacetsConfig {
     // ... and also all AssociationFacetFields
     Map<String,List<AssociationFacetField>> assocByField = new HashMap<>();
 
-    Set<String> seenDims = new HashSet<>();
+    Map<String,Integer> seenDims = new HashMap<>();
 
     for (IndexableField field : doc) {
       if (field.fieldType() == FacetField.TYPE) {
         FacetField facetField = (FacetField) field;
         FacetsConfig.DimConfig dimConfig = getDimConfig(facetField.dim);
         if (dimConfig.multiValued == false) {
-          checkSeen(seenDims, facetField.dim);
+          checkSeen(seenDims, facetField.dim, FLAG_TAXONOMY);
         }
         String indexFieldName = dimConfig.indexFieldName;
         List<FacetField> fields = byField.get(indexFieldName);
@@ -228,7 +244,7 @@ public class FacetsConfig {
         SortedSetDocValuesFacetField facetField = (SortedSetDocValuesFacetField) field;
         FacetsConfig.DimConfig dimConfig = getDimConfig(facetField.dim);
         if (dimConfig.multiValued == false) {
-          checkSeen(seenDims, facetField.dim);
+          checkSeen(seenDims, facetField.dim, FLAG_SORTED_SET);
         }
         String indexFieldName = dimConfig.indexFieldName;
         List<SortedSetDocValuesFacetField> fields = dvByField.get(indexFieldName);
@@ -243,7 +259,7 @@ public class FacetsConfig {
         AssociationFacetField facetField = (AssociationFacetField) field;
         FacetsConfig.DimConfig dimConfig = getDimConfig(facetField.dim);
         if (dimConfig.multiValued == false) {
-          checkSeen(seenDims, facetField.dim);
+          checkSeen(seenDims, facetField.dim, FLAG_TAXONOMY);
         }
         if (dimConfig.hierarchical) {
           throw new IllegalArgumentException("AssociationFacetField cannot be hierarchical (dim=\"" + facetField.dim + "\")");
diff --git a/lucene/facet/src/test/org/apache/lucene/facet/TestFacetsConfig.java b/lucene/facet/src/test/org/apache/lucene/facet/TestFacetsConfig.java
index 630aadf..74acacf 100644
--- a/lucene/facet/src/test/org/apache/lucene/facet/TestFacetsConfig.java
+++ b/lucene/facet/src/test/org/apache/lucene/facet/TestFacetsConfig.java
@@ -20,6 +20,7 @@ import java.util.Arrays;
 
 import org.apache.lucene.analysis.MockAnalyzer;
 import org.apache.lucene.document.Document;
+import org.apache.lucene.facet.sortedset.SortedSetDocValuesFacetField;
 import org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader;
 import org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter;
 import org.apache.lucene.index.DirectoryReader;
@@ -98,4 +99,17 @@ public class TestFacetsConfig extends FacetTestCase {
 
     assertTrue(config.getDimConfig("foobar").hierarchical);
   }
+
+  public void testSameFieldNameDifferentFacetMethods() throws Exception {
+    FacetsConfig config = new FacetsConfig();
+
+    Directory taxoDir = newDirectory();
+    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);
+    Document doc = new Document();
+    doc.add(new SortedSetDocValuesFacetField("field", "value"));
+    doc.add(new FacetField("field", "value"));
+    config.build(taxoWriter, doc);
+    taxoWriter.close();
+    taxoDir.close();
+  }
 }
