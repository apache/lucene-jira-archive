Index: lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/AnalyzerFactoryTask.java
===================================================================
--- lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/AnalyzerFactoryTask.java	(revision 1580185)
+++ lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/AnalyzerFactoryTask.java	(working copy)
@@ -109,6 +109,7 @@
    *               (optional) offsetGap, 0+ CharFilterFactory's, 1 TokenizerFactory,
    *               and 0+ TokenFilterFactory's
    */
+  @SuppressWarnings("fallthrough")
   @Override
   public void setParams(String params) {
     super.setParams(params);
@@ -285,6 +286,7 @@
    * @param stok stream tokenizer from which to draw analysis factory params
    * @param clazz analysis factory class to instantiate
    */
+  @SuppressWarnings("fallthrough")
   private void createAnalysisPipelineComponent
       (StreamTokenizer stok, Class<? extends AbstractAnalysisFactory> clazz) {
     Map<String,String> argMap = new HashMap<>();
Index: lucene/queries/src/test/org/apache/lucene/queries/function/TestDocValuesFieldSources.java
===================================================================
--- lucene/queries/src/test/org/apache/lucene/queries/function/TestDocValuesFieldSources.java	(revision 1580185)
+++ lucene/queries/src/test/org/apache/lucene/queries/function/TestDocValuesFieldSources.java	(working copy)
@@ -36,7 +36,6 @@
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.TestUtil;
-import org.apache.lucene.util.TestUtil;
 import org.apache.lucene.util.packed.PackedInts;
 
 import com.carrotsearch.randomizedtesting.generators.RandomInts;
@@ -44,6 +43,7 @@
 
 public class TestDocValuesFieldSources extends LuceneTestCase {
 
+  @SuppressWarnings("fallthrough")
   public void test(DocValuesType type) throws IOException {
     Directory d = newDirectory();
     IndexWriterConfig iwConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));
@@ -72,8 +72,9 @@
     RandomIndexWriter iw = new RandomIndexWriter(random(), d, iwConfig);
     for (int i = 0; i < nDocs; ++i) {
       id.setLongValue(i);
+      // TODO: deal with SORTED_SET or add a default case.
       switch (type) {
-        case SORTED:
+        case SORTED: // intentional fall-through
         case BINARY:
           do {
             vals[i] = TestUtil.randomSimpleString(random(), 20);
@@ -98,7 +99,7 @@
       final FunctionValues ids = new LongFieldSource("id").getValues(null, leave);
       final ValueSource vs;
       switch (type) {
-        case BINARY:
+        case BINARY: // intentional fall-through
         case SORTED:
           vs = new BytesRefFieldSource("dv");
           break;
@@ -122,10 +123,11 @@
         }
         
         Object expected = vals[ids.intVal(i)];
+        // TODO: deal with SORTED_SET or add a default case.
         switch (type) {
           case SORTED:
             values.ordVal(i); // no exception
-            assertTrue(values.numOrd() >= 1);
+            assertTrue(values.numOrd() >= 1); // intentional fall-through
           case BINARY:
             assertEquals(expected, values.objectVal(i));
             assertEquals(expected, values.strVal(i));
Index: lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSortedSetSortFieldSelectors.java
===================================================================
--- lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSortedSetSortFieldSelectors.java	(revision 1580185)
+++ lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSortedSetSortFieldSelectors.java	(working copy)
@@ -49,10 +49,18 @@
     savedCodec = Codec.getDefault();
     // currently only these codecs that support random access ordinals
     int victim = random().nextInt(3);
-    switch(victim) {
-      case 0:  Codec.setDefault(TestUtil.alwaysDocValuesFormat(new DirectDocValuesFormat()));
-      case 1:  Codec.setDefault(TestUtil.alwaysDocValuesFormat(new DiskDocValuesFormat()));
-      default: Codec.setDefault(TestUtil.alwaysDocValuesFormat(new Lucene45DocValuesFormat()));
+    switch (victim) {
+      case 0:
+        Codec.setDefault(TestUtil
+            .alwaysDocValuesFormat(new DirectDocValuesFormat()));
+        break;
+      case 1:
+        Codec.setDefault(TestUtil
+            .alwaysDocValuesFormat(new DiskDocValuesFormat()));
+        break;
+      default:
+        Codec.setDefault(TestUtil
+            .alwaysDocValuesFormat(new Lucene45DocValuesFormat()));
     }
   }
   
Index: solr/core/src/java/org/apache/solr/internal/csv/CSVPrinter.java
===================================================================
--- solr/core/src/java/org/apache/solr/internal/csv/CSVPrinter.java	(revision 1580185)
+++ solr/core/src/java/org/apache/solr/internal/csv/CSVPrinter.java	(working copy)
@@ -91,6 +91,7 @@
    *
    * @param comment the comment to output
    */
+  @SuppressWarnings("fallthrough")
   public void printlnComment(String comment) throws IOException {
     if(this.strategy.isCommentingDisabled()) {
         return;
Index: solr/core/src/java/org/apache/solr/util/DateMathParser.java
===================================================================
--- solr/core/src/java/org/apache/solr/util/DateMathParser.java	(revision 1580185)
+++ solr/core/src/java/org/apache/solr/util/DateMathParser.java	(working copy)
@@ -171,6 +171,7 @@
    * @exception IllegalArgumentException if unit isn't recognized.
    * @see #CALENDAR_UNITS
    */
+  @SuppressWarnings("fallthrough")
   public static void round(Calendar c, String unit) {
     Integer uu = CALENDAR_UNITS.get(unit);
     if (null == uu) {
Index: solr/solrj/src/java/org/apache/solr/common/util/Hash.java
===================================================================
--- solr/solrj/src/java/org/apache/solr/common/util/Hash.java	(revision 1580185)
+++ solr/solrj/src/java/org/apache/solr/common/util/Hash.java	(working copy)
@@ -240,6 +240,7 @@
   /** Returns the MurmurHash3_x86_32 hash.
    * Original source/tests at https://github.com/yonik/java_util/
    */
+  @SuppressWarnings("fallthrough")
   public static int murmurhash3_x86_32(byte[] data, int offset, int len, int seed) {
 
     final int c1 = 0xcc9e2d51;
