Index: lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree.java
===================================================================
--- lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree.java	(revision 1580185)
+++ lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree.java	(working copy)
@@ -246,6 +246,7 @@
   /**
    * Compares a string with null terminated char array
    */
+  @SuppressWarnings({"cast"})
   public static int strcmp(String str, char[] a, int start) {
     int i, d, len = str.length();
     for (i = 0; i < len; i++) {
Index: lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary.java
===================================================================
--- lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary.java	(revision 1580185)
+++ lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary.java	(working copy)
@@ -928,6 +928,7 @@
    */
   private static class DoubleASCIIFlagParsingStrategy extends FlagParsingStrategy {
 
+    @SuppressWarnings({"cast"})
     @Override
     public char[] parseFlags(String rawFlags) {
       if (rawFlags.length() == 0) {
Index: lucene/analysis/common/src/java/org/tartarus/snowball/SnowballProgram.java
===================================================================
--- lucene/analysis/common/src/java/org/tartarus/snowball/SnowballProgram.java	(revision 1580185)
+++ lucene/analysis/common/src/java/org/tartarus/snowball/SnowballProgram.java	(working copy)
@@ -449,7 +449,7 @@
   }
 
   protected void slice_del() {
-    slice_from((CharSequence) "");
+    slice_from("");
   }
 
   protected void insert(int c_bra, int c_ket, CharSequence s)
Index: lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharacterUtils.java
===================================================================
--- lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharacterUtils.java	(revision 1580185)
+++ lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharacterUtils.java	(working copy)
@@ -32,6 +32,7 @@
  */
 public class TestCharacterUtils extends LuceneTestCase {
 
+  @SuppressWarnings({"cast"})
   @Test
   public void testCodePointAtCharSequenceInt() {
     CharacterUtils java4 = CharacterUtils.getJava4Instance();
@@ -59,6 +60,7 @@
 
   }
 
+  @SuppressWarnings({"cast"})
   @Test
   public void testCodePointAtCharArrayIntInt() {
     CharacterUtils java4 = CharacterUtils.getJava4Instance();
Index: lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/UserDictionary.java
===================================================================
--- lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/UserDictionary.java	(revision 1580185)
+++ lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/UserDictionary.java	(working copy)
@@ -56,6 +56,7 @@
   
   public static final int RIGHT_ID = 5;
   
+  @SuppressWarnings({"cast"})
   public UserDictionary(Reader reader) throws IOException {
     BufferedReader br = new BufferedReader(reader);
     String line = null;
Index: lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier.java
===================================================================
--- lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier.java	(revision 1580185)
+++ lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier.java	(working copy)
@@ -123,6 +123,7 @@
   /**
    * {@inheritDoc}
    */
+  @SuppressWarnings({"cast"})
   @Override
   public void train(AtomicReader atomicReader, String textFieldName,
       String classFieldName, Analyzer analyzer, Query query) throws IOException {
Index: lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier.java
===================================================================
--- lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier.java	(revision 1580185)
+++ lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier.java	(working copy)
@@ -116,7 +116,7 @@
         assignedClass = entry.getKey().clone();
       }
     }
-    double score = max / (double) k;
+    double score = max / k;
     return new ClassificationResult<>(assignedClass, score);
   }
 
Index: lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier.java
===================================================================
--- lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier.java	(revision 1580185)
+++ lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier.java	(working copy)
@@ -199,6 +199,7 @@
     return totalHitCountCollector.getTotalHits();
   }
 
+  @SuppressWarnings({"cast"})
   private double calculateLogPrior(BytesRef currentClass) throws IOException {
     return Math.log((double) docCount(currentClass)) - Math.log(docsWithClassSize);
   }
Index: lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.java	(revision 1580185)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.java	(working copy)
@@ -589,7 +589,7 @@
 
     @Override
     public long size() {
-      return (long) termCount;
+      return termCount;
     }
 
     @Override
Index: lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader.java	(revision 1580185)
+++ lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader.java	(working copy)
@@ -438,6 +438,7 @@
     }
   }
 
+  @SuppressWarnings({"cast"})
   private BinaryDocValues loadBytesVarDeref(FieldInfo field) throws IOException {
     String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + "_" + Integer.toString(field.number), segmentSuffix, "dat");
     String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + "_" + Integer.toString(field.number), segmentSuffix, "idx");
Index: lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy.java	(revision 1580185)
+++ lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy.java	(working copy)
@@ -563,6 +563,7 @@
     return spec;
   }
 
+  @SuppressWarnings({"cast"})
   @Override
   public MergeSpecification findForcedDeletesMerges(SegmentInfos infos) throws IOException {
     if (verbose()) {
Index: lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelD.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelD.java	(revision 1580185)
+++ lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelD.java	(working copy)
@@ -36,6 +36,7 @@
   /** Sole constructor: parameter-free */
   public BasicModelD() {}
   
+  @SuppressWarnings({"cast"})
   @Override
   public final float score(BasicStats stats, float tfn) {
     // we have to ensure phi is always < 1 for tiny TTF values, otherwise nphi can go negative,
Index: lucene/core/src/java/org/apache/lucene/util/CharsRef.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/CharsRef.java	(revision 1580185)
+++ lucene/core/src/java/org/apache/lucene/util/CharsRef.java	(working copy)
@@ -241,6 +241,7 @@
     // Only singleton
     private UTF16SortedAsUTF8Comparator() {};
 
+    @SuppressWarnings({"cast"})
     @Override
     public int compare(CharsRef a, CharsRef b) {
       if (a == b)
@@ -275,7 +276,7 @@
           }
           
           /* now aChar and bChar are in code point order */
-          return (int)aChar - (int)bChar; /* int must be 32 bits wide */
+          return (int) aChar - (int) bChar; /* int must be 32 bits wide */
         }
       }
 
Index: lucene/core/src/java/org/apache/lucene/util/OfflineSorter.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/OfflineSorter.java	(revision 1580185)
+++ lucene/core/src/java/org/apache/lucene/util/OfflineSorter.java	(working copy)
@@ -106,6 +106,7 @@
      * is insufficient or if there is a large portion of unallocated heap-space available 
      * for sorting consult with max allowed heap size. 
      */
+    @SuppressWarnings({"cast"})
     public static BufferSize automatic() {
       Runtime rt = Runtime.getRuntime();
       
Index: lucene/core/src/java/org/apache/lucene/util/PriorityQueue.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/PriorityQueue.java	(revision 1580185)
+++ lucene/core/src/java/org/apache/lucene/util/PriorityQueue.java	(working copy)
@@ -261,6 +261,7 @@
   /** This method returns the internal heap array as Object[].
    * @lucene.internal
    */
+  @SuppressWarnings({"cast"})
   protected final Object[] getHeapArray() {
     return (Object[]) heap;
   }
Index: lucene/core/src/java/org/apache/lucene/util/RamUsageEstimator.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/RamUsageEstimator.java	(revision 1580185)
+++ lucene/core/src/java/org/apache/lucene/util/RamUsageEstimator.java	(working copy)
@@ -33,6 +33,7 @@
  * 
  * @lucene.internal
  */
+@SuppressWarnings({"cast"})
 public final class RamUsageEstimator {
   /**
    * JVM diagnostic features.
Index: lucene/core/src/java/org/apache/lucene/util/UnicodeUtil.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/UnicodeUtil.java	(revision 1580185)
+++ lucene/core/src/java/org/apache/lucene/util/UnicodeUtil.java	(working copy)
@@ -124,6 +124,7 @@
   /** Encode characters from a char[] source, starting at
    *  offset for length chars.  Returns a hash of the resulting bytes.  After encoding, result.offset will always be 0. */
   // TODO: broken if incoming result.offset != 0
+  @SuppressWarnings({"cast"})
   public static int UTF16toUTF8WithHash(final char[] source, final int offset, final int length, BytesRef result) {
     int hash = 0;
     int upto = 0;
@@ -181,6 +182,7 @@
    *  offset for length chars. After encoding, result.offset will always be 0.
    */
   // TODO: broken if incoming result.offset != 0
+  @SuppressWarnings({"cast"})
   public static void UTF16toUTF8(final char[] source, final int offset, final int length, BytesRef result) {
 
     int upto = 0;
@@ -237,6 +239,7 @@
    *  for length characters. After encoding, result.offset will always be 0.
    */
   // TODO: broken if incoming result.offset != 0
+  @SuppressWarnings({"cast"})
   public static void UTF16toUTF8(final CharSequence s, final int offset, final int length, BytesRef result) {
     final int end = offset + length;
 
Index: lucene/core/src/java/org/apache/lucene/util/automaton/MinimizationOperations.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/automaton/MinimizationOperations.java	(revision 1580185)
+++ lucene/core/src/java/org/apache/lucene/util/automaton/MinimizationOperations.java	(working copy)
@@ -74,11 +74,11 @@
     final int[] sigma = a.getStartPoints();
     final State[] states = a.getNumberedStates();
     final int sigmaLen = sigma.length, statesLen = states.length;
-    @SuppressWarnings({"rawtypes","unchecked"}) final ArrayList<State>[][] reverse =
+    @SuppressWarnings({"cast","unchecked"}) final ArrayList<State>[][] reverse =
       (ArrayList<State>[][]) new ArrayList[statesLen][sigmaLen];
-    @SuppressWarnings({"rawtypes","unchecked"}) final HashSet<State>[] partition =
+    @SuppressWarnings({"cast","unchecked"}) final HashSet<State>[] partition =
       (HashSet<State>[]) new HashSet[statesLen];
-    @SuppressWarnings({"rawtypes","unchecked"}) final ArrayList<State>[] splitblock =
+    @SuppressWarnings({"cast","unchecked"}) final ArrayList<State>[] splitblock =
       (ArrayList<State>[]) new ArrayList[statesLen];
     final int[] block = new int[statesLen];
     final StateList[][] active = new StateList[statesLen][sigmaLen];
Index: lucene/core/src/java/org/apache/lucene/util/fst/Builder.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/fst/Builder.java	(revision 1580185)
+++ lucene/core/src/java/org/apache/lucene/util/fst/Builder.java	(working copy)
@@ -168,7 +168,7 @@
     }
     NO_OUTPUT = outputs.getNoOutput();
 
-    @SuppressWarnings({"rawtypes","unchecked"}) final UnCompiledNode<T>[] f =
+    @SuppressWarnings({"cast","unchecked"}) final UnCompiledNode<T>[] f =
         (UnCompiledNode<T>[]) new UnCompiledNode[10];
     frontier = f;
     for(int idx=0;idx<frontier.length;idx++) {
@@ -549,7 +549,7 @@
      *          LUCENE-2934 (node expansion based on conditions other than the
      *          fanout size).
      */
-    @SuppressWarnings({"rawtypes","unchecked"})
+    @SuppressWarnings({"cast","unchecked"})
     public UnCompiledNode(Builder<T> owner, int depth) {
       this.owner = owner;
       arcs = (Arc<T>[]) new Arc[1];
Index: lucene/core/src/java/org/apache/lucene/util/fst/FST.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/fst/FST.java	(revision 1580185)
+++ lucene/core/src/java/org/apache/lucene/util/fst/FST.java	(working copy)
@@ -427,7 +427,7 @@
   }
   
   // Caches first 128 labels
-  @SuppressWarnings({"rawtypes","unchecked"})
+  @SuppressWarnings({"cast","unchecked"})
   private void cacheRootArcs() throws IOException {
     cachedRootArcs = (Arc<T>[]) new Arc[0x80];
     readRootArcs(cachedRootArcs);
@@ -457,7 +457,7 @@
     }
   }
   
-  @SuppressWarnings({"rawtypes","unchecked"})
+  @SuppressWarnings({"cast","unchecked"})
   private boolean setAssertingRootArcs(Arc<T>[] arcs) throws IOException {
     assertingCachedRootArcs = (Arc<T>[]) new Arc[arcs.length];
     readRootArcs(assertingCachedRootArcs);
Index: lucene/core/src/java/org/apache/lucene/util/fst/Util.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/fst/Util.java	(revision 1580185)
+++ lucene/core/src/java/org/apache/lucene/util/fst/Util.java	(working copy)
@@ -817,6 +817,7 @@
 
   /** Just maps each UTF16 unit (char) to the ints in an
    *  IntsRef. */
+  @SuppressWarnings({"cast"})
   public static IntsRef toUTF16(CharSequence s, IntsRef scratch) {
     final int charLimit = s.length();
     scratch.offset = 0;
Index: lucene/core/src/java/org/apache/lucene/util/packed/MonotonicAppendingLongBuffer.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/packed/MonotonicAppendingLongBuffer.java	(revision 1580185)
+++ lucene/core/src/java/org/apache/lucene/util/packed/MonotonicAppendingLongBuffer.java	(working copy)
@@ -69,6 +69,7 @@
   }
 
 
+  @SuppressWarnings({"cast"})
   @Override
   long get(int block, int element) {
     if (block == valuesOff) {
@@ -83,6 +84,7 @@
     }
   }
 
+  @SuppressWarnings({"cast"})
   @Override
   int get(int block, int element, long[] arr, int off, int len) {
     if (block == valuesOff) {
@@ -115,6 +117,7 @@
     this.minValues = Arrays.copyOf(minValues, newBlockCount);
   }
 
+  @SuppressWarnings({"cast"})
   @Override
   void packPendingValues() {
     assert pendingOff > 0;
Index: lucene/core/src/test/org/apache/lucene/analysis/TestNumericTokenStream.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/analysis/TestNumericTokenStream.java	(revision 1580185)
+++ lucene/core/src/test/org/apache/lucene/analysis/TestNumericTokenStream.java	(working copy)
@@ -52,6 +52,7 @@
     stream.close();
   }
 
+  @SuppressWarnings({"cast"})
   public void testIntStream() throws Exception {
     final NumericTokenStream stream=new NumericTokenStream().setIntValue(ivalue);
     // use getAttribute to test if attributes really exist, if not an IAE will be throwed
Index: lucene/core/src/test/org/apache/lucene/analysis/tokenattributes/TestCharTermAttributeImpl.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/analysis/tokenattributes/TestCharTermAttributeImpl.java	(revision 1580185)
+++ lucene/core/src/test/org/apache/lucene/analysis/tokenattributes/TestCharTermAttributeImpl.java	(working copy)
@@ -158,6 +158,7 @@
     }
   }
 
+  @SuppressWarnings({"cast"})
   public void testAppendableInterface() {
     CharTermAttributeImpl t = new CharTermAttributeImpl();
     Formatter formatter = new Formatter(t, Locale.ROOT);
@@ -207,6 +208,7 @@
     assertEquals("4testenull", t.toString());
   }
   
+  @SuppressWarnings({"cast"})
   public void testAppendableInterfaceWithLongSequences() {
     CharTermAttributeImpl t = new CharTermAttributeImpl();
     t.append((CharSequence) "01234567890123456789012345678901234567890123456789");
Index: lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility.java	(revision 1580185)
+++ lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility.java	(working copy)
@@ -384,6 +384,7 @@
     }
   }
 
+  @SuppressWarnings({"cast"})
   public void searchIndex(Directory dir, String oldName) throws IOException {
     //QueryParser parser = new QueryParser("contents", new MockAnalyzer(random));
     //Query query = parser.parse("handle:1");
@@ -719,6 +720,7 @@
     return s;
   }
 
+  @SuppressWarnings({"cast"})
   private void addDoc(IndexWriter writer, int id) throws IOException
   {
     Document doc = new Document();
Index: lucene/core/src/test/org/apache/lucene/index/TestIndexInput.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestIndexInput.java	(revision 1580185)
+++ lucene/core/src/test/org/apache/lucene/index/TestIndexInput.java	(working copy)
@@ -117,6 +117,7 @@
     RANDOM_TEST_BYTES = null;
   }
 
+  @SuppressWarnings({"cast"})
   private void checkReads(DataInput is, Class<? extends Exception> expectedEx) throws IOException {
     assertEquals(128,is.readVInt());
     assertEquals(16383,is.readVInt());
Index: lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode.java	(revision 1580185)
+++ lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode.java	(working copy)
@@ -270,6 +270,7 @@
   
   // Make sure terms, including ones with surrogate pairs,
   // sort in codepoint sort order by default
+  @SuppressWarnings({"cast"})
   public void testTermUTF16SortOrder() throws Throwable {
     Random rnd = random();
     Directory dir = newDirectory();
Index: lucene/core/src/test/org/apache/lucene/util/TestNumericUtils.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/util/TestNumericUtils.java	(revision 1580185)
+++ lucene/core/src/test/org/apache/lucene/util/TestNumericUtils.java	(working copy)
@@ -345,7 +345,7 @@
   }
   
   public void testRandomSplit() throws Exception {
-    long num = (long) atLeast(10);
+    long num = atLeast(10);
     for (long i=0; i < num; i++) {
       executeOneRandomSplit(random());
     }
Index: lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.java	(revision 1580185)
+++ lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.java	(working copy)
@@ -1355,6 +1355,7 @@
     assertEquals(57L, res.topN.get(2).output.output2.longValue()); // output
   }
 
+  @SuppressWarnings({"cast"})
   public void testShortestPathsRandom() throws Exception {
     final Random random = random();
     int numWords = atLeast(1000);
@@ -1471,6 +1472,7 @@
   }
 
   /** like testShortestPathsRandom, but uses pairoutputs so we have both a weight and an output */
+  @SuppressWarnings({"cast"})
   public void testShortestPathsWFSTRandom() throws Exception {
     int numWords = atLeast(1000);
 
Index: lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts.java	(revision 1580185)
+++ lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts.java	(working copy)
@@ -788,6 +788,7 @@
   }
 
   // memory hole
+  @SuppressWarnings({"cast"})
   @Ignore
   public void testPagedGrowableWriterOverflow() {
     final long size = TestUtil.nextLong(random(), 2 * (long) Integer.MAX_VALUE, 3 * (long) Integer.MAX_VALUE);
Index: lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector.java
===================================================================
--- lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector.java	(revision 1580185)
+++ lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector.java	(working copy)
@@ -120,7 +120,7 @@
   }
 
   public TopGroups<GROUP_VALUE_TYPE> getTopGroups(int withinGroupOffset) {
-    @SuppressWarnings({"unchecked","rawtypes"})
+    @SuppressWarnings({"cast","unchecked"})
     final GroupDocs<GROUP_VALUE_TYPE>[] groupDocsResult = (GroupDocs<GROUP_VALUE_TYPE>[]) new GroupDocs[groups.size()];
 
     int groupIDX = 0;
Index: lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermSecondPassGroupingCollector.java
===================================================================
--- lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermSecondPassGroupingCollector.java	(revision 1580185)
+++ lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermSecondPassGroupingCollector.java	(working copy)
@@ -42,7 +42,7 @@
   private SortedDocValues index;
   private final String groupField;
 
-  @SuppressWarnings({"unchecked", "rawtypes"})
+  @SuppressWarnings({"unchecked"})
   public TermSecondPassGroupingCollector(String groupField, Collection<SearchGroup<BytesRef>> groups, Sort groupSort, Sort withinGroupSort,
                                          int maxDocsPerGroup, boolean getScores, boolean getMaxScores, boolean fillSortFields)
       throws IOException {
@@ -49,7 +49,7 @@
     super(groups, groupSort, withinGroupSort, maxDocsPerGroup, getScores, getMaxScores, fillSortFields);
     ordSet = new SentinelIntSet(groupMap.size(), -2);
     this.groupField = groupField;
-    groupDocs = (SearchGroupDocs<BytesRef>[]) new SearchGroupDocs[ordSet.keys.length];
+    groupDocs = new SearchGroupDocs[ordSet.keys.length];
   }
 
   @Override
Index: lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java
===================================================================
--- lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java	(revision 1580185)
+++ lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java	(working copy)
@@ -217,6 +217,7 @@
    * Sorts term entries into ascending order; also works for
    * Arrays.binarySearch() and Arrays.sort()
    */
+  @SuppressWarnings({"cast"})
   private static final Comparator<Object> termComparator = new Comparator<Object>() {
     @Override
     @SuppressWarnings({"unchecked","rawtypes"})
Index: lucene/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity.java
===================================================================
--- lucene/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity.java	(revision 1580185)
+++ lucene/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity.java	(working copy)
@@ -134,6 +134,7 @@
    * @see #setLengthNormFactors
    * @see <a href="doc-files/ss.computeLengthNorm.svg">An SVG visualization of this function</a> 
    */
+  @SuppressWarnings({"cast"})
   public float computeLengthNorm(int numTerms) {
     final int l = ln_min;
     final int h = ln_max;
@@ -199,6 +200,7 @@
    * @see #setHyperbolicTfFactors
    * @see <a href="doc-files/ss.hyperbolicTf.svg">An SVG visualization of this function</a> 
    */
+  @SuppressWarnings({"cast"})
   public float hyperbolicTf(float freq) {
     if (0.0f == freq) return 0.0f;
 
Index: lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery.java	(revision 1580185)
+++ lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery.java	(working copy)
@@ -176,6 +176,7 @@
     return Math.round(minNrShouldMatch * numOptional);
   }
   
+  @SuppressWarnings({"cast"})
   protected Query buildQuery(final int maxDoc,
       final TermContext[] contextArray, final Term[] queryTerms) {
     BooleanQuery lowFreq = new BooleanQuery(disableCoord);
Index: lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/FloatDocValues.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/FloatDocValues.java	(revision 1580185)
+++ lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/FloatDocValues.java	(working copy)
@@ -26,6 +26,7 @@
  * Abstract {@link FunctionValues} implementation which supports retrieving float values.
  * Implementations can control how the float values are loaded through {@link #floatVal(int)}}
  */
+@SuppressWarnings({"cast"})
 public abstract class FloatDocValues extends FunctionValues {
   protected final ValueSource vs;
 
Index: lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/IntDocValues.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/IntDocValues.java	(revision 1580185)
+++ lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/IntDocValues.java	(working copy)
@@ -28,6 +28,7 @@
  * Abstract {@link FunctionValues} implementation which supports retrieving int values.
  * Implementations can control how the int values are loaded through {@link #intVal(int)}
  */
+@SuppressWarnings({"cast"})
 public abstract class IntDocValues extends FunctionValues {
   protected final ValueSource vs;
 
Index: lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/LongDocValues.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/LongDocValues.java	(revision 1580185)
+++ lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/LongDocValues.java	(working copy)
@@ -28,6 +28,7 @@
  * Abstract {@link FunctionValues} implementation which supports retrieving long values.
  * Implementations can control how the long values are loaded through {@link #longVal(int)}}
  */
+@SuppressWarnings({"cast"})
 public abstract class LongDocValues extends FunctionValues {
   protected final ValueSource vs;
 
Index: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/EnumFieldSource.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/EnumFieldSource.java	(revision 1580185)
+++ lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/EnumFieldSource.java	(working copy)
@@ -96,6 +96,7 @@
   }
 
 
+  @SuppressWarnings({"cast"})
   @Override
   public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
     final FieldCache.Ints arr = cache.getInts(readerContext.reader(), field, parser, true);
Index: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IntFieldSource.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IntFieldSource.java	(revision 1580185)
+++ lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IntFieldSource.java	(working copy)
@@ -51,7 +51,7 @@
     return "int(" + field + ')';
   }
 
-
+  @SuppressWarnings({"cast"})
   @Override
   public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
     final FieldCache.Ints arr = cache.getInts(readerContext.reader(), field, parser, true);
Index: lucene/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup.java
===================================================================
--- lucene/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup.java	(revision 1580185)
+++ lucene/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup.java	(working copy)
@@ -69,7 +69,7 @@
     
     @Override
     public float parseFloat(BytesRef term) {
-      return (float) FieldCache.NUMERIC_UTILS_INT_PARSER.parseInt(term);
+      return FieldCache.NUMERIC_UTILS_INT_PARSER.parseInt(term);
     }
   };
 
Index: lucene/suggest/src/java/org/apache/lucene/search/spell/DirectSpellChecker.java
===================================================================
--- lucene/suggest/src/java/org/apache/lucene/search/spell/DirectSpellChecker.java	(revision 1580185)
+++ lucene/suggest/src/java/org/apache/lucene/search/spell/DirectSpellChecker.java	(working copy)
@@ -315,6 +315,7 @@
    * @return sorted list of the suggested words according to the comparator
    * @throws IOException If there is a low-level I/O error.
    */
+  @SuppressWarnings({"cast"})
   public SuggestWord[] suggestSimilar(Term term, int numSug, IndexReader ir, 
       SuggestMode suggestMode, float accuracy) throws IOException {
     final CharsRef spare = new CharsRef();
Index: lucene/suggest/src/java/org/apache/lucene/search/spell/HighFrequencyDictionary.java
===================================================================
--- lucene/suggest/src/java/org/apache/lucene/search/spell/HighFrequencyDictionary.java	(revision 1580185)
+++ lucene/suggest/src/java/org/apache/lucene/search/spell/HighFrequencyDictionary.java	(working copy)
@@ -66,6 +66,7 @@
     private int minNumDocs;
     private long freq;
 
+    @SuppressWarnings({"cast"})
     HighFrequencyIterator() throws IOException {
       Terms terms = MultiFields.getTerms(reader, field);
       if (terms != null) {
Index: lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester.java
===================================================================
--- lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester.java	(revision 1580185)
+++ lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester.java	(working copy)
@@ -457,6 +457,7 @@
     return count;
   }
 
+  @SuppressWarnings({"cast"})
   /** Retrieve suggestions. */
   public List<LookupResult> lookup(final CharSequence key, int num) throws IOException {
     try (TokenStream ts = queryAnalyzer.tokenStream("", key.toString())) {
Index: lucene/suggest/src/test/org/apache/lucene/search/suggest/Average.java
===================================================================
--- lucene/suggest/src/test/org/apache/lucene/search/suggest/Average.java	(revision 1580185)
+++ lucene/suggest/src/test/org/apache/lucene/search/suggest/Average.java	(working copy)
@@ -52,6 +52,7 @@
             avg, stddev);
     }
 
+    @SuppressWarnings({"cast"})
     static Average from(List<Double> values)
     {
         double sum = 0;
Index: solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper.java
===================================================================
--- solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper.java	(revision 1580185)
+++ solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper.java	(working copy)
@@ -65,7 +65,7 @@
   public void init(Context context) {
     rowcache = null;
     this.context = context;
-    resolver = (VariableResolver) context.getVariableResolver();
+    resolver = context.getVariableResolver();
     if (entityName == null) {
       onError = resolver.replaceTokens(context.getEntityAttribute(ON_ERROR));
       if (onError == null) onError = ABORT;
@@ -125,7 +125,6 @@
 
   }
 
-  @SuppressWarnings("unchecked")
   static class ReflectionTransformer extends Transformer {
     final Method meth;
 
@@ -171,7 +170,7 @@
     Map<String, Object> transformedRow = row;
     List<Map<String, Object>> rows = null;
     boolean stopTransform = checkStopTransform(row);
-    VariableResolver resolver = (VariableResolver) context.getVariableResolver();
+    VariableResolver resolver = context.getVariableResolver();
     for (Transformer t : transformers) {
       if (stopTransform) break;
       try {
@@ -289,7 +288,7 @@
   }
 
   public VariableResolver getVariableResolver() {
-    return (VariableResolver) context.getVariableResolver();
+    return context.getVariableResolver();
   }
 
   public Context getContext() {
Index: solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/TemplateTransformer.java
===================================================================
--- solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/TemplateTransformer.java	(revision 1580185)
+++ solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/TemplateTransformer.java	(working copy)
@@ -52,11 +52,9 @@
   private Map<String ,List<String>> templateVsVars = new HashMap<>();
 
   @Override
-  @SuppressWarnings("unchecked")
   public Object transformRow(Map<String, Object> row, Context context) {
 
-    VariableResolver resolver = (VariableResolver) context
-            .getVariableResolver();
+    VariableResolver resolver = context.getVariableResolver();
     // Add current row to the copy of resolver map
 //    for (Map.Entry<String, Object> entry : row.entrySet())
 
Index: solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathEntityProcessor.java
===================================================================
--- solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathEntityProcessor.java	(revision 1580185)
+++ solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathEntityProcessor.java	(working copy)
@@ -216,7 +216,6 @@
     readUsefulVars(r);
   }
 
-  @SuppressWarnings("unchecked")
   private Map<String, Object> fetchNextRow() {
     Map<String, Object> r = null;
     while (true) {
@@ -259,7 +258,7 @@
       Object val = context.getSessionAttribute(name, Context.SCOPE_ENTITY);
       if (val != null) namespace.put(name, val);
     }
-    ((VariableResolver)context.getVariableResolver()).addNamespace(entityName, namespace);
+    context.getVariableResolver().addNamespace(entityName, namespace);
   }
 
   private void addCommonFields(Map<String, Object> r) {
@@ -317,7 +316,6 @@
         try {
           xpathReader.streamRecords(data, new XPathRecordReader.Handler() {
             @Override
-            @SuppressWarnings("unchecked")
             public void handle(Map<String, Object> record, String xpath) {
               rows.add(readRow(record, xpath));
             }
@@ -389,7 +387,6 @@
 
   }
 
-  @SuppressWarnings("unchecked")
   private Map<String, Object> readUsefulVars(Map<String, Object> r) {
     Object val = r.get(HAS_MORE);
     if (val != null)
@@ -427,7 +424,6 @@
         try {
           xpathReader.streamRecords(data, new XPathRecordReader.Handler() {
             @Override
-            @SuppressWarnings("unchecked")
             public void handle(Map<String, Object> record, String xpath) {
               if (isEnd.get()) {
                 throwExp.set(false);
Index: solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder.java
===================================================================
--- solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder.java	(revision 1580185)
+++ solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder.java	(working copy)
@@ -139,7 +139,7 @@
     assertEquals(1, di.getDocBuilder().importStatistics.rowsCount.get());
 
     for (int i = 0; i < l.size(); i++) {
-      Map<String, Object> map = (Map<String, Object>) l.get(i);
+      Map<String, Object> map = l.get(i);
       SolrInputDocument doc = swi.docs.get(i);
       for (Map.Entry<String, Object> entry : map.entrySet()) {
         assertEquals(entry.getValue(), doc.getFieldValue(entry.getKey()));
@@ -167,7 +167,7 @@
     assertEquals(Boolean.TRUE, swi.finishCalled);
     assertEquals(3, swi.docs.size());
     for (int i = 0; i < l.size(); i++) {
-      Map<String, Object> map = (Map<String, Object>) l.get(i);
+      Map<String, Object> map = l.get(i);
       SolrInputDocument doc = swi.docs.get(i);
       for (Map.Entry<String, Object> entry : map.entrySet()) {
         assertEquals(entry.getValue(), doc.getFieldValue(entry.getKey()));
Index: solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathRecordReader.java
===================================================================
--- solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathRecordReader.java	(revision 1580185)
+++ solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathRecordReader.java	(working copy)
@@ -378,6 +378,7 @@
     catch (RuntimeException ex) {  }
   }
 
+  @SuppressWarnings({"cast"})
   @Test
   public void testAny_decendent_from_root() {
     XPathRecordReader rr = new XPathRecordReader("/anyd/contenido");
@@ -418,6 +419,7 @@
     assertEquals("sub clauses"       ,m.get("inr_descd").toString().trim());
   }
 
+  @SuppressWarnings({"cast"})
   @Test
   public void testAny_decendent_of_a_child1() {
     XPathRecordReader rr = new XPathRecordReader("/anycd");
Index: solr/contrib/uima/src/test/org/apache/solr/uima/processor/UIMAUpdateRequestProcessorTest.java
===================================================================
--- solr/contrib/uima/src/test/org/apache/solr/uima/processor/UIMAUpdateRequestProcessorTest.java	(revision 1580185)
+++ solr/contrib/uima/src/test/org/apache/solr/uima/processor/UIMAUpdateRequestProcessorTest.java	(working copy)
@@ -195,7 +195,7 @@
     Map<String, String[]> params = new HashMap<>();
     params.put(UpdateParams.UPDATE_CHAIN, new String[] { chain });
     MultiMapSolrParams mmparams = new MultiMapSolrParams(params);
-    SolrQueryRequestBase req = new SolrQueryRequestBase(h.getCore(), (SolrParams) mmparams) {
+    SolrQueryRequestBase req = new SolrQueryRequestBase(h.getCore(), mmparams) {
     };
 
     UpdateRequestHandler handler = new UpdateRequestHandler();
Index: solr/core/src/java/org/apache/solr/analysis/ReversedWildcardFilterFactory.java
===================================================================
--- solr/core/src/java/org/apache/solr/analysis/ReversedWildcardFilterFactory.java	(revision 1580185)
+++ solr/core/src/java/org/apache/solr/analysis/ReversedWildcardFilterFactory.java	(working copy)
@@ -97,6 +97,7 @@
    * @param token input token.
    * @return true if input token should be reversed, false otherwise.
    */
+  @SuppressWarnings({"cast"})
   public boolean shouldReverse(String token) {
     int posQ = token.indexOf('?');
     int posA = token.indexOf('*');
Index: solr/core/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator.java
===================================================================
--- solr/core/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator.java	(revision 1580185)
+++ solr/core/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator.java	(working copy)
@@ -113,7 +113,7 @@
      * the FieldFacetAccumulators are created initially.
      */
     for( FieldFacetRequest freq : fieldFreqs ){
-      final FieldFacetRequest fr = (FieldFacetRequest) freq;
+      final FieldFacetRequest fr = freq;
       if (fr.isHidden()) {
         hiddenFieldFacets.add(fr.getName());
       }
@@ -456,7 +456,7 @@
 
       Iterable<Entry<String,Expression[]>> iter = buckets.entrySet();
       
-      final FieldFacetRequest fr = (FieldFacetRequest) freq;
+      final FieldFacetRequest fr = freq;
      
       final FacetSortSpecification sort = fr.getSort();
       final int limit = fr.getLimit();
@@ -469,7 +469,7 @@
       if( sort != null && buckets.values().iterator().hasNext()){
         int sortPlace = Arrays.binarySearch(expressionNames, sort.getStatistic());
         final Expression first = buckets.values().iterator().next()[sortPlace];
-        final Comparator<Expression> comp = (Comparator<Expression>) first.comparator(sort.getDirection());
+        final Comparator<Expression> comp = first.comparator(sort.getDirection());
         
         final List<Entry<String,Expression[]>> sorted = new ArrayList<>(buckets.size());
         Iterables.addAll(sorted, iter);
Index: solr/core/src/java/org/apache/solr/analytics/util/MedianCalculator.java
===================================================================
--- solr/core/src/java/org/apache/solr/analytics/util/MedianCalculator.java	(revision 1580185)
+++ solr/core/src/java/org/apache/solr/analytics/util/MedianCalculator.java	(working copy)
@@ -66,6 +66,7 @@
     }
   }
 
+  @SuppressWarnings({"cast"})
   private static <T extends Comparable<T>> T split(List<T> list, int begin, int end) {
     T temp;
     int num = (end - begin + 1);
Index: solr/core/src/java/org/apache/solr/analytics/util/PercentileCalculator.java
===================================================================
--- solr/core/src/java/org/apache/solr/analytics/util/PercentileCalculator.java	(revision 1580185)
+++ solr/core/src/java/org/apache/solr/analytics/util/PercentileCalculator.java	(working copy)
@@ -105,6 +105,7 @@
     }
   }
 
+  @SuppressWarnings({"cast"})
   private static <T extends Comparable<T>> T split(List<T> list, int begin, int end) {
     T temp;
     int num = (end - begin + 1);
Index: solr/core/src/java/org/apache/solr/core/HdfsDirectoryFactory.java
===================================================================
--- solr/core/src/java/org/apache/solr/core/HdfsDirectoryFactory.java	(revision 1580185)
+++ solr/core/src/java/org/apache/solr/core/HdfsDirectoryFactory.java	(working copy)
@@ -180,8 +180,7 @@
       int bankCount, boolean directAllocation, int slabSize, int bufferSize,
       int bufferCount) {
     BufferStore.initNewBuffer(bufferSize, bufferCount);
-    long totalMemory = (long) bankCount * (long) numberOfBlocksPerBank
-        * (long) blockSize;
+    long totalMemory = (long) bankCount * (long) numberOfBlocksPerBank * blockSize;
     
     BlockCache blockCache;
     try {
Index: solr/core/src/java/org/apache/solr/core/SolrCore.java
===================================================================
--- solr/core/src/java/org/apache/solr/core/SolrCore.java	(revision 1580185)
+++ solr/core/src/java/org/apache/solr/core/SolrCore.java	(working copy)
@@ -2324,7 +2324,7 @@
       }
       
       if (restManagerPluginInfo.initArgs != null) {
-        initArgs = (NamedList<String>)restManagerPluginInfo.initArgs;        
+        initArgs = restManagerPluginInfo.initArgs;        
       }
     }
     
Index: solr/core/src/java/org/apache/solr/handler/ReplicationHandler.java
===================================================================
--- solr/core/src/java/org/apache/solr/handler/ReplicationHandler.java	(revision 1580185)
+++ solr/core/src/java/org/apache/solr/handler/ReplicationHandler.java	(working copy)
@@ -387,7 +387,6 @@
     }
   }
 
-  @SuppressWarnings("unchecked")
   private void getFileList(SolrParams solrParams, SolrQueryResponse rsp) {
     String v = solrParams.get(GENERATION);
     if (v == null) {
@@ -843,7 +842,6 @@
 //  }
 
   @Override
-  @SuppressWarnings("unchecked")
   public void inform(SolrCore core) {
     this.core = core;
     registerFileStreamResponseWriter();
@@ -1145,7 +1143,7 @@
           int read = (int) Math.min(buf.length, filelen - offset);
           in.readBytes(buf, 0, read);
           
-          fos.writeInt((int) read);
+          fos.writeInt(read);
           if (useChecksum) {
             checksum.reset();
             checksum.update(buf, 0, read);
Index: solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler.java
===================================================================
--- solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler.java	(revision 1580185)
+++ solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler.java	(working copy)
@@ -1007,7 +1007,7 @@
           if (maxTries == 0) {
             // wait long enough for the leader conflict to work itself out plus a little extra
             int conflictWaitMs = coreContainer.getZkController().getLeaderConflictResolveWait();
-            maxTries = (int) Math.round(conflictWaitMs / 1000) + 3;
+            maxTries = Math.round(conflictWaitMs / 1000) + 3;
             log.info("Will wait a max of " + maxTries + " seconds to see " + cname + " (" +
                 cloudDescriptor.getShardId() + " of " +
                 cloudDescriptor.getCollectionName() + ") have state: " + waitForState);
Index: solr/core/src/java/org/apache/solr/handler/component/FacetComponent.java
===================================================================
--- solr/core/src/java/org/apache/solr/handler/component/FacetComponent.java	(revision 1580185)
+++ solr/core/src/java/org/apache/solr/handler/component/FacetComponent.java	(working copy)
@@ -286,9 +286,6 @@
     }
   }
 
-
-
-
   private void countFacets(ResponseBuilder rb, ShardRequest sreq) {
     FacetInfo fi = rb._facetInfo;
 
@@ -427,7 +424,7 @@
       // only other case where index-sort doesn't need refinement is if minCount==0
       if (dff.minCount <= 1 && dff.sort.equals(FacetParams.FACET_SORT_INDEX)) continue;
 
-      @SuppressWarnings("unchecked") // generic array's are annoying
+      @SuppressWarnings({"cast","unchecked"}) // generic array's are annoying
       List<String>[] tmp = (List<String>[]) new List[rb.shards.length];
       dff._toRefine = tmp;
 
Index: solr/core/src/java/org/apache/solr/handler/component/FieldFacetStats.java
===================================================================
--- solr/core/src/java/org/apache/solr/handler/component/FieldFacetStats.java	(revision 1580185)
+++ solr/core/src/java/org/apache/solr/handler/component/FieldFacetStats.java	(working copy)
@@ -131,6 +131,7 @@
 
 
   //function to accumulate counts for statsTermNum to specified value
+  @SuppressWarnings({"cast"})
   public boolean accumulateTermNum(int statsTermNum, BytesRef value) throws IOException {
     if (value == null) return false;
     while (facetStatsTerms.size() <= statsTermNum) {
Index: solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java
===================================================================
--- solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java	(revision 1580185)
+++ solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java	(working copy)
@@ -247,6 +247,7 @@
   /**
    * Actually run the query
    */
+  @SuppressWarnings({"cast"})
   @Override
   public void process(ResponseBuilder rb) throws IOException
   {
Index: solr/core/src/java/org/apache/solr/schema/CurrencyField.java
===================================================================
--- solr/core/src/java/org/apache/solr/schema/CurrencyField.java	(revision 1580185)
+++ solr/core/src/java/org/apache/solr/schema/CurrencyField.java	(working copy)
@@ -491,6 +491,7 @@
     public SchemaField getField() { return sf; }
     public Currency getTargetCurrency() { return targetCurrency; }
 
+    @SuppressWarnings({"cast"})
     @Override
     public FunctionValues getValues(Map context, AtomicReaderContext reader) throws IOException {
       final FunctionValues amounts = amountValues.getValues(context, reader);
@@ -977,6 +978,7 @@
    * @param targetFractionDigits The fraction digits of the target.
    * @return The converted indexable units after the exchange rate and currency fraction digits are applied.
    */
+  @SuppressWarnings({"cast"})
   public static long convertAmount(final double exchangeRate, final int sourceFractionDigits, final long sourceAmount, final int targetFractionDigits) {
     int digitDelta = targetFractionDigits - sourceFractionDigits;
     double value = ((double) sourceAmount * exchangeRate);
Index: solr/core/src/java/org/apache/solr/schema/DateField.java
===================================================================
--- solr/core/src/java/org/apache/solr/schema/DateField.java	(revision 1580185)
+++ solr/core/src/java/org/apache/solr/schema/DateField.java	(working copy)
@@ -475,6 +475,7 @@
     return "date(" + field + ')';
   }
 
+  @SuppressWarnings({"cast"})
   @Override
   public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
     return new DocTermsIndexDocValues(this, readerContext, field) {
Index: solr/core/src/java/org/apache/solr/schema/LatLonType.java
===================================================================
--- solr/core/src/java/org/apache/solr/schema/LatLonType.java	(revision 1580185)
+++ solr/core/src/java/org/apache/solr/schema/LatLonType.java	(working copy)
@@ -590,7 +590,7 @@
     // don't bother making the hash expensive - the center latitude + min longitude will be very unique
     long hash = Double.doubleToLongBits(latCenter);
     hash = hash * 31 + Double.doubleToLongBits(lonMin);
-    hash = hash * 31 + (long)super.hashCode();
+    hash = hash * 31 + super.hashCode();
     return (int)(hash >> 32 + hash);
   }
 
Index: solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider.java
===================================================================
--- solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider.java	(revision 1580185)
+++ solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider.java	(working copy)
@@ -90,8 +90,8 @@
       reload();
     }
     
-    Double source = (Double) rates.getRates().get(sourceCurrencyCode);
-    Double target = (Double) rates.getRates().get(targetCurrencyCode);
+    Double source = rates.getRates().get(sourceCurrencyCode);
+    Double target = rates.getRates().get(targetCurrencyCode);
 
     if (source == null || target == null) {
       throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, 
Index: solr/core/src/java/org/apache/solr/schema/PreAnalyzedField.java
===================================================================
--- solr/core/src/java/org/apache/solr/schema/PreAnalyzedField.java	(revision 1580185)
+++ solr/core/src/java/org/apache/solr/schema/PreAnalyzedField.java	(working copy)
@@ -280,7 +280,7 @@
         return false;
       }
       
-      AttributeSource.State state = (State) it.next();
+      AttributeSource.State state = it.next();
       restoreState(state.clone());
       return true;
     }
Index: solr/core/src/java/org/apache/solr/schema/SortableFloatField.java
===================================================================
--- solr/core/src/java/org/apache/solr/schema/SortableFloatField.java	(revision 1580185)
+++ solr/core/src/java/org/apache/solr/schema/SortableFloatField.java	(working copy)
@@ -144,6 +144,7 @@
     return "sfloat(" + field + ')';
   }
 
+  @SuppressWarnings({"cast"})
   @Override
   public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
     final float def = defVal;
Index: solr/core/src/java/org/apache/solr/schema/SortableIntField.java
===================================================================
--- solr/core/src/java/org/apache/solr/schema/SortableIntField.java	(revision 1580185)
+++ solr/core/src/java/org/apache/solr/schema/SortableIntField.java	(working copy)
@@ -146,6 +146,7 @@
     return "sint(" + field + ')';
   }
 
+  @SuppressWarnings({"cast"})
   @Override
   public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
     final int def = defVal;
Index: solr/core/src/java/org/apache/solr/schema/SortableLongField.java
===================================================================
--- solr/core/src/java/org/apache/solr/schema/SortableLongField.java	(revision 1580185)
+++ solr/core/src/java/org/apache/solr/schema/SortableLongField.java	(working copy)
@@ -144,6 +144,7 @@
     return "slong(" + field + ')';
   }
 
+  @SuppressWarnings({"cast"})
   @Override
   public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
     final long def = defVal;
Index: solr/core/src/java/org/apache/solr/search/SolrCacheBase.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/SolrCacheBase.java	(revision 1580185)
+++ solr/core/src/java/org/apache/solr/search/SolrCacheBase.java	(working copy)
@@ -114,8 +114,8 @@
   public void init(Map<String, String> args, CacheRegenerator regenerator) {
     this.regenerator = regenerator;
     state=State.CREATED;
-    name = (String) args.get("name");
-    autowarm = new AutoWarmCountRef((String)args.get("autowarmCount"));
+    name = args.get("name");
+    autowarm = new AutoWarmCountRef(args.get("autowarmCount"));
     
   }
   
Index: solr/core/src/java/org/apache/solr/search/WrappedQuery.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/WrappedQuery.java	(revision 1580185)
+++ solr/core/src/java/org/apache/solr/search/WrappedQuery.java	(working copy)
@@ -71,7 +71,7 @@
   @Override
   public WrappedQuery clone() {
     WrappedQuery newQ = (WrappedQuery)super.clone();
-    newQ.q = (Query) q.clone();
+    newQ.q = q.clone();
     return newQ;
   }
 
Index: solr/core/src/java/org/apache/solr/search/grouping/distributed/responseprocessor/SearchGroupShardResponseProcessor.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/grouping/distributed/responseprocessor/SearchGroupShardResponseProcessor.java	(revision 1580185)
+++ solr/core/src/java/org/apache/solr/search/grouping/distributed/responseprocessor/SearchGroupShardResponseProcessor.java	(working copy)
@@ -46,6 +46,7 @@
   /**
    * {@inheritDoc}
    */
+  @SuppressWarnings({"cast"})
   @Override
   public void process(ResponseBuilder rb, ShardRequest shardRequest) {
     SortSpec ss = rb.getSortSpec();
Index: solr/core/src/java/org/apache/solr/search/grouping/distributed/responseprocessor/StoredFieldsShardResponseProcessor.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/grouping/distributed/responseprocessor/StoredFieldsShardResponseProcessor.java	(revision 1580185)
+++ solr/core/src/java/org/apache/solr/search/grouping/distributed/responseprocessor/StoredFieldsShardResponseProcessor.java	(working copy)
@@ -35,6 +35,7 @@
   /**
    * {@inheritDoc}
    */
+  @SuppressWarnings({"cast"})
   @Override
   public void process(ResponseBuilder rb, ShardRequest shardRequest) {
     boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;
Index: solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.java
===================================================================
--- solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.java	(revision 1580185)
+++ solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.java	(working copy)
@@ -517,6 +517,7 @@
       uploadLimitKB = limit;
     }
     
+    @SuppressWarnings({"cast"})
     @Override
     public SolrParams parseParamsAndFillStreams( 
         final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception
@@ -572,6 +573,7 @@
       uploadLimitKB = limit;
     }
     
+    @SuppressWarnings({"cast"})
     @Override
     public SolrParams parseParamsAndFillStreams( 
         final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception
Index: solr/core/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker.java
===================================================================
--- solr/core/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker.java	(revision 1580185)
+++ solr/core/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker.java	(working copy)
@@ -18,6 +18,7 @@
  * limitations under the License.
  */
 
+
 import java.io.File;
 import java.io.IOException;
 import java.util.Arrays;
@@ -31,7 +32,6 @@
 import org.apache.lucene.search.spell.SuggestWordQueue;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-
 import org.apache.lucene.analysis.Token;
 import org.apache.lucene.analysis.core.WhitespaceAnalyzer;
 import org.apache.lucene.index.IndexReader;
@@ -90,6 +90,7 @@
 
   protected StringDistance sd;
 
+  @SuppressWarnings({"cast","unchecked"})
   @Override
   public String init(NamedList config, SolrCore core) {
     super.init(config, core);
Index: solr/core/src/java/org/apache/solr/spelling/DirectSolrSpellChecker.java
===================================================================
--- solr/core/src/java/org/apache/solr/spelling/DirectSolrSpellChecker.java	(revision 1580185)
+++ solr/core/src/java/org/apache/solr/spelling/DirectSolrSpellChecker.java	(working copy)
@@ -97,6 +97,7 @@
   
   private DirectSpellChecker checker = new DirectSpellChecker();
   
+  @SuppressWarnings({"cast","unchecked"})
   @Override
   public String init(NamedList config, SolrCore core) {
     LOG.info("init: " + config);
Index: solr/core/src/java/org/apache/solr/store/blockcache/BlockDirectory.java
===================================================================
--- solr/core/src/java/org/apache/solr/store/blockcache/BlockDirectory.java	(revision 1580185)
+++ solr/core/src/java/org/apache/solr/store/blockcache/BlockDirectory.java	(working copy)
@@ -162,7 +162,7 @@
     @Override
     public IndexInput clone() {
       CachedIndexInput clone = (CachedIndexInput) super.clone();
-      clone.source = (IndexInput) source.clone();
+      clone.source = source.clone();
       return clone;
     }
     
Index: solr/core/src/java/org/apache/solr/store/blockcache/Metrics.java
===================================================================
--- solr/core/src/java/org/apache/solr/store/blockcache/Metrics.java	(revision 1580185)
+++ solr/core/src/java/org/apache/solr/store/blockcache/Metrics.java	(working copy)
@@ -123,7 +123,7 @@
   }
 
   private float getPerSecond(long value, float seconds) {
-    return (float) (value / seconds);
+    return (value / seconds);
   }
 
 }
Index: solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory.java
===================================================================
--- solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory.java	(revision 1580185)
+++ solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory.java	(working copy)
@@ -248,6 +248,7 @@
      * Throws a SolrException if the version is not high enough and
      * ignoreOldUpdates=false
      */
+    @SuppressWarnings({"cast"})
     private boolean isVersionNewEnough(BytesRef indexedDocId,
                                        Object newUserVersion) throws IOException {
       assert null != indexedDocId;
Index: solr/core/src/java/org/apache/solr/update/processor/ParseIntFieldUpdateProcessorFactory.java
===================================================================
--- solr/core/src/java/org/apache/solr/update/processor/ParseIntFieldUpdateProcessorFactory.java	(revision 1580185)
+++ solr/core/src/java/org/apache/solr/update/processor/ParseIntFieldUpdateProcessorFactory.java	(working copy)
@@ -91,6 +91,7 @@
       this.locale = locale;
     }
 
+    @SuppressWarnings({"cast"})
     @Override
     protected Object mutateValue(Object srcVal) {
       if (srcVal instanceof CharSequence) {
Index: solr/core/src/java/org/apache/solr/util/stats/EWMA.java
===================================================================
--- solr/core/src/java/org/apache/solr/util/stats/EWMA.java	(revision 1580185)
+++ solr/core/src/java/org/apache/solr/util/stats/EWMA.java	(working copy)
@@ -122,6 +122,6 @@
    * @return the rate
    */
   public double getRate(TimeUnit rateUnit) {
-    return rate * (double) rateUnit.toNanos(1);
+    return rate * rateUnit.toNanos(1);
   }
 }
Index: solr/core/src/java/org/apache/solr/util/stats/Histogram.java
===================================================================
--- solr/core/src/java/org/apache/solr/util/stats/Histogram.java	(revision 1580185)
+++ solr/core/src/java/org/apache/solr/util/stats/Histogram.java	(working copy)
@@ -183,6 +183,7 @@
   /* (non-Javadoc)
    * @see com.yammer.metrics.core.Summarizable#sum()
    */
+  @SuppressWarnings({"cast"})
   public double getSum() {
     return (double) sum.get();
   }
Index: solr/core/src/java/org/apache/solr/util/stats/Meter.java
===================================================================
--- solr/core/src/java/org/apache/solr/util/stats/Meter.java	(revision 1580185)
+++ solr/core/src/java/org/apache/solr/util/stats/Meter.java	(working copy)
@@ -139,6 +139,6 @@
   }
 
   private double convertNsRate(double ratePerNs) {
-    return ratePerNs * (double) rateUnit.toNanos(1);
+    return ratePerNs * rateUnit.toNanos(1);
   }
 }
Index: solr/core/src/test/org/apache/solr/TestTrie.java
===================================================================
--- solr/core/src/test/org/apache/solr/TestTrie.java	(revision 1580185)
+++ solr/core/src/test/org/apache/solr/TestTrie.java	(working copy)
@@ -35,6 +35,7 @@
  *
  * @since solr 1.4
  */
+@SuppressWarnings({"cast"})
 public class TestTrie extends SolrTestCaseJ4 {
   @BeforeClass
   public static void beforeClass() throws Exception {
Index: solr/core/src/test/org/apache/solr/analytics/AbstractAnalyticsStatsTest.java
===================================================================
--- solr/core/src/test/org/apache/solr/analytics/AbstractAnalyticsStatsTest.java	(revision 1580185)
+++ solr/core/src/test/org/apache/solr/analytics/AbstractAnalyticsStatsTest.java	(working copy)
@@ -154,6 +154,7 @@
     return result;
   }
 
+  @SuppressWarnings({"cast"})
   public <T extends Comparable<T>> Object calculateStat(ArrayList<T> list, String stat) {
     Object result;
     if (stat.contains("perc_")) {
Index: solr/core/src/test/org/apache/solr/analytics/NoFacetTest.java
===================================================================
--- solr/core/src/test/org/apache/solr/analytics/NoFacetTest.java	(revision 1580185)
+++ solr/core/src/test/org/apache/solr/analytics/NoFacetTest.java	(working copy)
@@ -138,6 +138,7 @@
     setResponse(h.query(request(fileToStringArr(NoFacetTest.class, fileName))));
   }
       
+  @SuppressWarnings({"cast"})
   @Test
   public void sumTest() throws Exception {
     //Int
@@ -161,6 +162,7 @@
     assertEquals(getRawResponse(), doubleResult,doubleTest);
   }
   
+  @SuppressWarnings({"cast"})
   @Test
   public void sumOfSquaresTest() throws Exception { 
     //Int
@@ -184,6 +186,7 @@
     assertEquals(getRawResponse(), doubleResult,doubleTest);
   }
   
+  @SuppressWarnings({"cast"})
   @Test
   public void meanTest() throws Exception { 
     //Int
@@ -207,6 +210,7 @@
     assertEquals(getRawResponse(), doubleResult,doubleTest);
   }
   
+  @SuppressWarnings({"cast"})
   @Test
   public void stddevTest() throws Exception { 
     //Int
@@ -231,6 +235,7 @@
     assertEquals(getRawResponse(), doubleResult, doubleTest, 0.00000000001);
   }
   
+  @SuppressWarnings({"cast"})
   @Test
   public void medianTest() throws Exception { 
     //Int
Index: solr/core/src/test/org/apache/solr/analytics/facet/AbstractAnalyticsFacetTest.java
===================================================================
--- solr/core/src/test/org/apache/solr/analytics/facet/AbstractAnalyticsFacetTest.java	(revision 1580185)
+++ solr/core/src/test/org/apache/solr/analytics/facet/AbstractAnalyticsFacetTest.java	(working copy)
@@ -252,7 +252,7 @@
       result = new ArrayList<T>();
       for (List<T> list : lists) {
         if( list.size() == 0) continue;
-        Collections.sort((List<T>)list);
+        Collections.sort(list);
         result.add(list.get(0));
       }
     } else {
Index: solr/core/src/test/org/apache/solr/analytics/facet/FieldFacetExtrasTest.java
===================================================================
--- solr/core/src/test/org/apache/solr/analytics/facet/FieldFacetExtrasTest.java	(revision 1580185)
+++ solr/core/src/test/org/apache/solr/analytics/facet/FieldFacetExtrasTest.java	(working copy)
@@ -107,7 +107,6 @@
     setResponse(h.query(request(fileToStringArr(FieldFacetExtrasTest.class, fileName))));
   }
   
-  @SuppressWarnings("unchecked")
   @Test
   public void limitTest() throws Exception { 
 
@@ -121,7 +120,6 @@
     assertEquals(getRawResponse(), string.size(),1);
   }
   
-  @SuppressWarnings("unchecked")
   @Test
   public void offsetTest() throws Exception { 
 
@@ -148,7 +146,7 @@
     assertArrayEquals(all.toArray(new Double[0]), lon.toArray(new Double[0]));
   }
   
-  @SuppressWarnings("unchecked")
+  @SuppressWarnings({"cast", "unchecked"})
   @Test
   public void sortTest() throws Exception { 
     Collection<Double> lon = getDoubleList("sr", "fieldFacets", "long_ld", "double", "mean");
Index: solr/core/src/test/org/apache/solr/analytics/facet/FieldFacetTest.java
===================================================================
--- solr/core/src/test/org/apache/solr/analytics/facet/FieldFacetTest.java	(revision 1580185)
+++ solr/core/src/test/org/apache/solr/analytics/facet/FieldFacetTest.java	(working copy)
@@ -594,7 +594,7 @@
     assertEquals(getRawResponse(),doubleString,doubleStringTest);
   }
 
-  @SuppressWarnings("unchecked")
+  @SuppressWarnings({"cast", "unchecked"})
   @Test
   public void perc20Test() throws Exception { 
     //Int Date
@@ -652,7 +652,7 @@
     assertEquals(getRawResponse(),stringLong,stringLongTest);
   }
 
-  @SuppressWarnings("unchecked")
+  @SuppressWarnings({"cast", "unchecked"})
   @Test
   public void perc60Test() throws Exception { 
     //Int Date
@@ -710,7 +710,7 @@
     assertEquals(getRawResponse(),stringLong,stringLongTest);
   }
 
-  @SuppressWarnings("unchecked")
+  @SuppressWarnings({"cast", "unchecked"})
   @Test
   public void minTest() throws Exception { 
     //Int Date
@@ -768,7 +768,7 @@
     assertEquals(getRawResponse(),stringLong,stringLongTest);
   }
 
-  @SuppressWarnings("unchecked")
+  @SuppressWarnings({"cast", "unchecked"})
   @Test
   public void maxTest() throws Exception { 
     //Int Date
@@ -833,7 +833,7 @@
 
   }
 
-  @SuppressWarnings("unchecked")
+  @SuppressWarnings({"cast", "unchecked"})
   @Test
   public void uniqueTest() throws Exception { 
     //Int Date
@@ -891,7 +891,7 @@
     assertEquals(getRawResponse(),stringLong,stringLongTest);
   }
 
-  @SuppressWarnings("unchecked")
+  @SuppressWarnings({"cast","unchecked"})
   @Test
   public void countTest() throws Exception { 
     //Int Date
@@ -955,7 +955,6 @@
     assertEquals(getRawResponse(),stringLong,stringLongTest);
   }
 
-  @SuppressWarnings("unchecked")
   @Test
   public void missingTest() throws Exception { 
     //Int Date
Index: solr/core/src/test/org/apache/solr/analytics/facet/QueryFacetTest.java
===================================================================
--- solr/core/src/test/org/apache/solr/analytics/facet/QueryFacetTest.java	(revision 1580185)
+++ solr/core/src/test/org/apache/solr/analytics/facet/QueryFacetTest.java	(working copy)
@@ -41,7 +41,7 @@
     initCore("solrconfig-basic.xml","schema-analytics.xml");
   }
 
-  @SuppressWarnings("unchecked")
+  @SuppressWarnings({"cast", "unchecked"})
   @Test
   public void queryTest() throws Exception { 
     h.update("<delete><query>*:*</query></delete>");
Index: solr/core/src/test/org/apache/solr/analytics/facet/RangeFacetTest.java
===================================================================
--- solr/core/src/test/org/apache/solr/analytics/facet/RangeFacetTest.java	(revision 1580185)
+++ solr/core/src/test/org/apache/solr/analytics/facet/RangeFacetTest.java	(working copy)
@@ -118,7 +118,7 @@
     setResponse(h.query(request(fileToStringArr(RangeFacetTest.class, fileName))));
   }
 
-  @SuppressWarnings("unchecked")
+  @SuppressWarnings({"cast", "unchecked"})
   @Test
   public void rangeTest() throws Exception {
     
@@ -156,7 +156,7 @@
   }
   
 
-  @SuppressWarnings("unchecked")
+  @SuppressWarnings({"cast", "unchecked"})
   @Test
   public void hardendRangeTest() throws Exception {
     //Int Long
@@ -192,7 +192,7 @@
     assertEquals(getRawResponse(), floatDate,floatDateTest);
   }
   
-  @SuppressWarnings("unchecked")
+  @SuppressWarnings({"cast", "unchecked"})
   @Test
   public void multiGapTest() throws Exception {
     //Int Long
Index: solr/core/src/test/org/apache/solr/analytics/util/valuesource/FunctionTest.java
===================================================================
--- solr/core/src/test/org/apache/solr/analytics/util/valuesource/FunctionTest.java	(revision 1580185)
+++ solr/core/src/test/org/apache/solr/analytics/util/valuesource/FunctionTest.java	(working copy)
@@ -36,6 +36,7 @@
   static public final int STRING = 28;
   static public final int NUM_LOOPS = 100;
 
+  @SuppressWarnings({"cast"})
   @BeforeClass
   public static void beforeClass() throws Exception {
     initCore("solrconfig-basic.xml","schema-analytics.xml");
Index: solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest.java
===================================================================
--- solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest.java	(revision 1580185)
+++ solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest.java	(working copy)
@@ -177,6 +177,7 @@
     
     workQueueMock.remove(anyObject(QueueEvent.class));
     expectLastCall().andAnswer(new IAnswer<Object>() {
+      @SuppressWarnings({"cast"})
       @Override
       public Object answer() throws Throwable {
         queue.remove((QueueEvent) getCurrentArguments()[0]);
Index: solr/core/src/test/org/apache/solr/cloud/ShardRoutingTest.java
===================================================================
--- solr/core/src/test/org/apache/solr/cloud/ShardRoutingTest.java	(revision 1580185)
+++ solr/core/src/test/org/apache/solr/cloud/ShardRoutingTest.java	(working copy)
@@ -308,6 +308,7 @@
     assertEquals(5, nEnd - nStart);
   }
 
+  @SuppressWarnings({"cast"})
   public void doAtomicUpdate() throws Exception {
     log.info("### STARTING doAtomicUpdate");
     int nClients = clients.size();
Index: solr/core/src/test/org/apache/solr/handler/TestReplicationHandler.java
===================================================================
--- solr/core/src/test/org/apache/solr/handler/TestReplicationHandler.java	(revision 1580185)
+++ solr/core/src/test/org/apache/solr/handler/TestReplicationHandler.java	(working copy)
@@ -503,6 +503,7 @@
     }    
   }
   
+  @SuppressWarnings({"cast"})
   @Test
   public void doTestIndexAndConfigReplication() throws Exception {
     clearIndexWithReplication();
@@ -1216,6 +1217,7 @@
     
   }
 
+  @SuppressWarnings({"cast"})
   @Test
   public void doTestIndexAndConfigAliasReplication() throws Exception {
     clearIndexWithReplication();
Index: solr/core/src/test/org/apache/solr/request/SimpleFacetsTest.java
===================================================================
--- solr/core/src/test/org/apache/solr/request/SimpleFacetsTest.java	(revision 1580185)
+++ solr/core/src/test/org/apache/solr/request/SimpleFacetsTest.java	(working copy)
@@ -1306,6 +1306,7 @@
     helpTestNumericRangeFacetsDoubleOverflow("range_facet_sd");
   }
 
+  @SuppressWarnings({"cast"})
   private void helpTestNumericRangeFacetsDoubleOverflow(final String fieldName) {
     final String f = fieldName;
     final String pre = "//lst[@name='facet_ranges']/lst[@name='"+f+"']/lst[@name='counts']";
@@ -1567,6 +1568,7 @@
     helpTestNumericRangeFacetsLongOverflow("range_facet_sl");
   }
 
+  @SuppressWarnings({"cast"})
   private void helpTestNumericRangeFacetsLongOverflow(final String fieldName) {
     final String f = fieldName;
     final String pre = "//lst[@name='facet_ranges']/lst[@name='"+f+"']/lst[@name='counts']";
Index: solr/core/src/test/org/apache/solr/request/TestFaceting.java
===================================================================
--- solr/core/src/test/org/apache/solr/request/TestFaceting.java	(revision 1580185)
+++ solr/core/src/test/org/apache/solr/request/TestFaceting.java	(working copy)
@@ -75,6 +75,7 @@
     req = null;
   }
 
+  @SuppressWarnings({"cast"})
   void doTermEnum(int size) throws Exception {
     //System.out.println("doTermEnum size=" + size);
     close();
Index: solr/core/src/test/org/apache/solr/schema/DocValuesTest.java
===================================================================
--- solr/core/src/test/org/apache/solr/schema/DocValuesTest.java	(revision 1580185)
+++ solr/core/src/test/org/apache/solr/schema/DocValuesTest.java	(working copy)
@@ -41,6 +41,7 @@
     assertU(delQ("*:*"));
   }
 
+  @SuppressWarnings({"cast"})
   public void testDocValues() throws IOException {
     assertU(adoc("id", "1"));
     assertU(commit());
Index: solr/core/src/test/org/apache/solr/schema/OpenExchangeRatesOrgProviderTest.java
===================================================================
--- solr/core/src/test/org/apache/solr/schema/OpenExchangeRatesOrgProviderTest.java	(revision 1580185)
+++ solr/core/src/test/org/apache/solr/schema/OpenExchangeRatesOrgProviderTest.java	(working copy)
@@ -97,7 +97,7 @@
     assertEquals(HARDCODED_TEST_TIMESTAMP, oerp.rates.getTimestamp());
 
     // modify the timestamp to be "current" then fetch a rate and ensure no reload
-    final long currentTimestamp = (long) (System.currentTimeMillis() / 1000);
+    final long currentTimestamp = System.currentTimeMillis() / 1000;
     oerp.rates.setTimestamp(currentTimestamp);
     assertEquals(81.29D, oerp.getExchangeRate("USD", "JPY"), 0.0D);    
     assertEquals(currentTimestamp, oerp.rates.getTimestamp());
Index: solr/core/src/test/org/apache/solr/search/CursorMarkTest.java
===================================================================
--- solr/core/src/test/org/apache/solr/search/CursorMarkTest.java	(revision 1580185)
+++ solr/core/src/test/org/apache/solr/search/CursorMarkTest.java	(working copy)
@@ -26,6 +26,7 @@
 import org.apache.solr.request.SolrQueryRequest;
 import org.apache.solr.SolrTestCaseJ4;
 import org.apache.solr.CursorPagingTest;
+
 import static org.apache.solr.common.params.CursorMarkParams.CURSOR_MARK_START;
 
 import java.util.Arrays;
@@ -196,6 +197,7 @@
     }
   }
 
+  @SuppressWarnings({"cast"})
   private static Object[] buildRandomSortObjects(SortSpec ss) {
     List<SchemaField> fields = ss.getSchemaFields();
     assertNotNull(fields);
Index: solr/core/src/test/org/apache/solr/search/TestPseudoReturnFields.java
===================================================================
--- solr/core/src/test/org/apache/solr/search/TestPseudoReturnFields.java	(revision 1580185)
+++ solr/core/src/test/org/apache/solr/search/TestPseudoReturnFields.java	(working copy)
@@ -481,7 +481,7 @@
       }
       
       assertQ(info.toString(),
-              req((String[])params.toArray(new String[0]))
+              req(params.toArray(new String[0]))
               ,"//result[@numFound='5']"
               ,"//result/doc/str[@name='id']"
               ,"//result/doc/float[@name='score']"
Index: solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs.java
===================================================================
--- solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs.java	(revision 1580185)
+++ solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs.java	(working copy)
@@ -937,7 +937,7 @@
       Arrays.sort(files);
 
       FSDataOutputStream dos = fs.create(new Path(logDir, files[files.length-1]), (short)1);
-      dos.write(new byte[(int)800]);  // zero out file
+      dos.write(new byte[800]);  // zero out file
       dos.close();
 
 
@@ -1023,7 +1023,7 @@
       dos.close();
       
       FSDataInputStream dis = fs.open(new Path(logDir, files[files.length-1]));
-      byte[] content = new byte[(int)dis.available()];
+      byte[] content = new byte[dis.available()];
 
       dis.readFully(content);
 
Index: solr/core/src/test/org/apache/solr/store/hdfs/HdfsDirectoryTest.java
===================================================================
--- solr/core/src/test/org/apache/solr/store/hdfs/HdfsDirectoryTest.java	(revision 1580185)
+++ solr/core/src/test/org/apache/solr/store/hdfs/HdfsDirectoryTest.java	(working copy)
@@ -111,7 +111,7 @@
 
     IndexInput input1 = directory.openInput("testing.test", new IOContext());
 
-    IndexInput input2 = (IndexInput) input1.clone();
+    IndexInput input2 = input1.clone();
     assertEquals(12345, input2.readInt());
     input2.close();
 
Index: solr/core/src/test/org/apache/solr/update/PeerSyncTest.java
===================================================================
--- solr/core/src/test/org/apache/solr/update/PeerSyncTest.java	(revision 1580185)
+++ solr/core/src/test/org/apache/solr/update/PeerSyncTest.java	(working copy)
@@ -173,7 +173,7 @@
     client0.commit(); client1.commit(); queryAndCompare(params("q", "*:*", "sort","_version_ desc"), client0, client1);
   }
 
-
+  @SuppressWarnings({"cast"})
   void assertSync(SolrServer server, int numVersions, boolean expectedResult, String... syncWith) throws IOException, SolrServerException {
     QueryRequest qr = new QueryRequest(params("qt","/get", "getVersions",Integer.toString(numVersions), "sync", StrUtils.join(Arrays.asList(syncWith), ',')));
     NamedList rsp = server.request(qr);
Index: solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest.java
===================================================================
--- solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest.java	(revision 1580185)
+++ solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest.java	(working copy)
@@ -321,6 +321,7 @@
         ,"//int[@name='int2_ti'][.='" + value + "']");
   }
 
+  @SuppressWarnings({"cast"})
   public void testIntOverflow() throws Exception {
     IndexSchema schema = h.getCore().getLatestSchema();
     assertNull(schema.getFieldOrNull("not_in_schema1"));
Index: solr/core/src/test/org/apache/solr/update/processor/SignatureUpdateProcessorFactoryTest.java
===================================================================
--- solr/core/src/test/org/apache/solr/update/processor/SignatureUpdateProcessorFactoryTest.java	(revision 1580185)
+++ solr/core/src/test/org/apache/solr/update/processor/SignatureUpdateProcessorFactoryTest.java	(working copy)
@@ -371,8 +371,7 @@
     Map<String, String[]> params = new HashMap<>();
     MultiMapSolrParams mmparams = new MultiMapSolrParams(params);
     params.put(UpdateParams.UPDATE_CHAIN, new String[] { chain });
-    SolrQueryRequestBase req = new SolrQueryRequestBase(h.getCore(),
-        (SolrParams) mmparams) {
+    SolrQueryRequestBase req = new SolrQueryRequestBase(h.getCore(), mmparams) {
     };
 
     UpdateRequestHandler handler = new UpdateRequestHandler();
Index: solr/core/src/test/org/apache/solr/update/processor/UniqFieldsUpdateProcessorFactoryTest.java
===================================================================
--- solr/core/src/test/org/apache/solr/update/processor/UniqFieldsUpdateProcessorFactoryTest.java	(revision 1580185)
+++ solr/core/src/test/org/apache/solr/update/processor/UniqFieldsUpdateProcessorFactoryTest.java	(working copy)
@@ -109,8 +109,7 @@
     Map<String, String[]> params = new HashMap<>();
     MultiMapSolrParams mmparams = new MultiMapSolrParams(params);
     params.put(UpdateParams.UPDATE_CHAIN, new String[] { "uniq-fields" });
-    SolrQueryRequestBase req = new SolrQueryRequestBase(h.getCore(),
-        (SolrParams) mmparams) {
+    SolrQueryRequestBase req = new SolrQueryRequestBase(h.getCore(), mmparams) {
     };
 
     UpdateRequestHandler handler = new UpdateRequestHandler();
Index: solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer.java
===================================================================
--- solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer.java	(revision 1580185)
+++ solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer.java	(working copy)
@@ -266,7 +266,7 @@
 
   private NamedList directUpdate(AbstractUpdateRequest request, ClusterState clusterState) throws SolrServerException {
     UpdateRequest updateRequest = (UpdateRequest) request;
-    ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();
+    ModifiableSolrParams params = request.getParams();
     ModifiableSolrParams routableParams = new ModifiableSolrParams();
     ModifiableSolrParams nonRoutableParams = new ModifiableSolrParams();
 
@@ -395,7 +395,7 @@
 
     long end = System.nanoTime();
 
-    RouteResponse rr =  condenseResponse(shardResponses, (long)((end - start)/1000000));
+    RouteResponse rr =  condenseResponse(shardResponses, (end - start)/1000000L);
     rr.setRouteResponses(shardResponses);
     rr.setRoutes(routes);
     return rr;
Index: solr/solrj/src/java/org/apache/solr/client/solrj/request/UpdateRequest.java
===================================================================
--- solr/solrj/src/java/org/apache/solr/client/solrj/request/UpdateRequest.java	(revision 1580185)
+++ solr/solrj/src/java/org/apache/solr/client/solrj/request/UpdateRequest.java	(working copy)
@@ -195,8 +195,7 @@
         }
         List<String> urls = urlMap.get(slice.getName());
         String leaderUrl = urls.get(0);
-        LBHttpSolrServer.Req request = (LBHttpSolrServer.Req) routes
-            .get(leaderUrl);
+        LBHttpSolrServer.Req request = routes.get(leaderUrl);
         if (request == null) {
           UpdateRequest updateRequest = new UpdateRequest();
           updateRequest.setMethod(getMethod());
Index: solr/solrj/src/java/org/apache/solr/client/solrj/response/SpellCheckResponse.java
===================================================================
--- solr/solrj/src/java/org/apache/solr/client/solrj/response/SpellCheckResponse.java	(revision 1580185)
+++ solr/solrj/src/java/org/apache/solr/client/solrj/response/SpellCheckResponse.java	(working copy)
@@ -141,6 +141,7 @@
     private List<String> alternatives = new ArrayList<>();
     private List<Integer> alternativeFrequencies;
 
+    @SuppressWarnings({"cast"})
     public Suggestion(String token, NamedList<Object> suggestion) {
       this.token = token;
       for (int i = 0; i < suggestion.size(); i++) {
@@ -155,7 +156,6 @@
         } else if ("origFreq".equals(n)) {
           originalFrequency = (Integer) suggestion.getVal(i);
         } else if ("suggestion".equals(n)) {
-          @SuppressWarnings("unchecked")
           List list = (List)suggestion.getVal(i);
           if (list.size() > 0 && list.get(0) instanceof NamedList) {
             // extended results detected
Index: solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState.java
===================================================================
--- solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState.java	(revision 1580185)
+++ solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState.java	(working copy)
@@ -278,6 +278,7 @@
     return new Aliases(aliasMap);
   }
 
+  @SuppressWarnings({"cast"})
   private static DocCollection collectionFromObjects(String name, Map<String,Object> objs) {
     Map<String,Object> props;
     Map<String,Slice> slices;
Index: solr/solrj/src/java/org/apache/solr/common/util/ByteUtils.java
===================================================================
--- solr/solrj/src/java/org/apache/solr/common/util/ByteUtils.java	(revision 1580185)
+++ solr/solrj/src/java/org/apache/solr/common/util/ByteUtils.java	(working copy)
@@ -78,6 +78,7 @@
    * there is enough space for the worst-case scenario.
    * @return the number of bytes written
    */
+  @SuppressWarnings({"cast"})
   public static int UTF16toUTF8(CharSequence s, int offset, int len, byte[] result, int resultOffset) {
     final int end = offset + len;
 
Index: solr/solrj/src/java/org/apache/solr/common/util/Hash.java
===================================================================
--- solr/solrj/src/java/org/apache/solr/common/util/Hash.java	(revision 1580185)
+++ solr/solrj/src/java/org/apache/solr/common/util/Hash.java	(working copy)
@@ -297,6 +297,7 @@
    * the string to a temporary buffer.  This is more than 2x faster than hashing the result
    * of String.getBytes().
    */
+  @SuppressWarnings({"cast"})
   public static int murmurhash3_x86_32(CharSequence data, int offset, int len, int seed) {
 
     final int c1 = 0xcc9e2d51;
Index: solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestEmbeddedSolrServer.java
===================================================================
--- solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestEmbeddedSolrServer.java	(revision 1580185)
+++ solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestEmbeddedSolrServer.java	(working copy)
@@ -50,6 +50,7 @@
     return new File(SOLR_HOME, "solr.xml");
   }
 
+  @SuppressWarnings({"cast"})
   public void testGetCoreContainer() {
     Assert.assertEquals(cores, ((EmbeddedSolrServer)getSolrCore0()).getCoreContainer());
     Assert.assertEquals(cores, ((EmbeddedSolrServer)getSolrCore1()).getCoreContainer());
Index: solr/solrj/src/test/org/apache/solr/common/util/NamedListTest.java
===================================================================
--- solr/solrj/src/test/org/apache/solr/common/util/NamedListTest.java	(revision 1580185)
+++ solr/solrj/src/test/org/apache/solr/common/util/NamedListTest.java	(working copy)
@@ -124,7 +124,7 @@
     NamedList<Object> nl2 = new NamedList<>();
     nl2.add("key2a", "value2a");
     nl2.add("key2b", nl2b);
-    nl2.add("k2int1", (int) 5);
+    nl2.add("k2int1", 5);
     NamedList<Object> nl3 = new NamedList<>();
     nl3.add("key3a", nl3a);
     nl3.add("key3b", "value3b");
Index: solr/solrj/src/test/org/apache/solr/common/util/TestFastInputStream.java
===================================================================
--- solr/solrj/src/test/org/apache/solr/common/util/TestFastInputStream.java	(revision 1580185)
+++ solr/solrj/src/test/org/apache/solr/common/util/TestFastInputStream.java	(working copy)
@@ -73,6 +73,7 @@
   }
 
   // code copied rfrom NamedlistCode#writechars
+  @SuppressWarnings({"cast"})
   public static void writeChars(OutputStream os, String s, int start, int length) throws IOException {
     final int end = start + length;
     for (int i = start; i < end; i++) {
Index: solr/test-framework/src/java/org/apache/solr/util/TestHarness.java
===================================================================
--- solr/test-framework/src/java/org/apache/solr/util/TestHarness.java	(revision 1580185)
+++ solr/test-framework/src/java/org/apache/solr/util/TestHarness.java	(working copy)
@@ -243,7 +243,7 @@
     try {
       return connection.request(handler, null, xml);
     } catch (SolrException e) {
-      throw (SolrException)e;
+      throw e;
     } catch (Exception e) {
       throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);
     } finally {
