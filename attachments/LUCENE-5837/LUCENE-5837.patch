Index: lucene/core/src/java/org/apache/lucene/search/FieldComparator.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/FieldComparator.java	(revision 1611879)
+++ lucene/core/src/java/org/apache/lucene/search/FieldComparator.java	(working copy)
@@ -223,12 +223,11 @@
    * Base FieldComparator class for numeric types
    */
   public static abstract class NumericComparator<T extends Number> extends FieldComparator<T> {
-    protected final T missingValue;
+    protected final long missingValue;
     protected final String field;
-    protected Bits docsWithField;
     protected NumericDocValues currentReaderValues;
     
-    public NumericComparator(String field, T missingValue) {
+    public NumericComparator(String field, long missingValue) {
       this.field = field;
       this.missingValue = missingValue;
     }
@@ -235,15 +234,36 @@
 
     @Override
     public FieldComparator<T> setNextReader(AtomicReaderContext context) throws IOException {
-      currentReaderValues = getNumericDocValues(context, field);
-      if (missingValue != null) {
-        docsWithField = DocValues.getDocsWithField(context.reader(), field);
-        // optimization to remove unneeded checks on the bit interface:
-        if (docsWithField instanceof Bits.MatchAllBits) {
-          docsWithField = null;
-        }
+      final NumericDocValues values = getNumericDocValues(context, field);
+      final Bits docsWithField = getDocsWithField(context, field);
+      assert docsWithField != null;
+      if (docsWithField instanceof Bits.MatchAllBits || missingValue == 0) {
+        currentReaderValues = values;
+      } else if (docsWithField instanceof Bits.MatchNoBits) {
+        currentReaderValues = new NumericDocValues() {
+
+          @Override
+          public long get(int docID) {
+            return missingValue;
+          }
+
+        };
       } else {
-        docsWithField = null;
+        currentReaderValues = new NumericDocValues() {
+
+          @Override
+          public long get(int docID) {
+            final long v = values.get(docID);
+            // Test for docValue == 0 to save Bits.get method call for
+            // the common case (doc has value and value is non-zero):
+            if (v == 0 && docsWithField.get(docID) == false) {
+              return missingValue;
+            } else {
+              return v;
+            }
+          }
+
+        };
       }
       return this;
     }
@@ -252,6 +272,11 @@
     protected NumericDocValues getNumericDocValues(AtomicReaderContext context, String field) throws IOException {
       return DocValues.getNumeric(context.reader(), field);
     }
+
+    /** Retrieves the Bits of documents that have a value for the field in this segment */
+    protected Bits getDocsWithField(AtomicReaderContext context, String field) throws IOException {
+      return DocValues.getDocsWithField(context.reader(), field);
+    }
   }
 
   /** Parses field's values as double (using {@link
@@ -262,7 +287,7 @@
     private double topValue;
 
     DoubleComparator(int numHits, String field, Double missingValue) {
-      super(field, missingValue);
+      super(field, missingValue == null ? 0 : Double.doubleToLongBits(missingValue));
       values = new double[numHits];
     }
 
@@ -274,12 +299,6 @@
     @Override
     public int compareBottom(int doc) {
       double v2 = Double.longBitsToDouble(currentReaderValues.get(doc));
-      // Test for v2 == 0 to save Bits.get method call for
-      // the common case (doc has value and value is non-zero):
-      if (docsWithField != null && v2 == 0 && !docsWithField.get(doc)) {
-        v2 = missingValue;
-      }
-
       return Double.compare(bottom, v2);
     }
 
@@ -286,12 +305,6 @@
     @Override
     public void copy(int slot, int doc) {
       double v2 = Double.longBitsToDouble(currentReaderValues.get(doc));
-      // Test for v2 == 0 to save Bits.get method call for
-      // the common case (doc has value and value is non-zero):
-      if (docsWithField != null && v2 == 0 && !docsWithField.get(doc)) {
-        v2 = missingValue;
-      }
-
       values[slot] = v2;
     }
     
@@ -313,11 +326,6 @@
     @Override
     public int compareTop(int doc) {
       double docValue = Double.longBitsToDouble(currentReaderValues.get(doc));
-      // Test for docValue == 0 to save Bits.get method call for
-      // the common case (doc has value and value is non-zero):
-      if (docsWithField != null && docValue == 0 && !docsWithField.get(doc)) {
-        docValue = missingValue;
-      }
       return Double.compare(topValue, docValue);
     }
   }
@@ -330,7 +338,7 @@
     private float topValue;
 
     FloatComparator(int numHits, String field, Float missingValue) {
-      super(field, missingValue);
+      super(field, missingValue == null ? 0 : Float.floatToIntBits(missingValue));
       values = new float[numHits];
     }
     
@@ -343,12 +351,6 @@
     public int compareBottom(int doc) {
       // TODO: are there sneaky non-branch ways to compute sign of float?
       float v2 = Float.intBitsToFloat((int)currentReaderValues.get(doc));
-      // Test for v2 == 0 to save Bits.get method call for
-      // the common case (doc has value and value is non-zero):
-      if (docsWithField != null && v2 == 0 && !docsWithField.get(doc)) {
-        v2 = missingValue;
-      }
-
       return Float.compare(bottom, v2);
     }
 
@@ -355,12 +357,6 @@
     @Override
     public void copy(int slot, int doc) {
       float v2 =  Float.intBitsToFloat((int)currentReaderValues.get(doc));
-      // Test for v2 == 0 to save Bits.get method call for
-      // the common case (doc has value and value is non-zero):
-      if (docsWithField != null && v2 == 0 && !docsWithField.get(doc)) {
-        v2 = missingValue;
-      }
-
       values[slot] = v2;
     }
     
@@ -382,11 +378,6 @@
     @Override
     public int compareTop(int doc) {
       float docValue = Float.intBitsToFloat((int)currentReaderValues.get(doc));
-      // Test for docValue == 0 to save Bits.get method call for
-      // the common case (doc has value and value is non-zero):
-      if (docsWithField != null && docValue == 0 && !docsWithField.get(doc)) {
-        docValue = missingValue;
-      }
       return Float.compare(topValue, docValue);
     }
   }
@@ -399,7 +390,7 @@
     private int topValue;
 
     IntComparator(int numHits, String field, Integer missingValue) {
-      super(field, missingValue);
+      super(field, missingValue == null ? 0 : missingValue);
       values = new int[numHits];
     }
         
@@ -411,12 +402,6 @@
     @Override
     public int compareBottom(int doc) {
       int v2 = (int) currentReaderValues.get(doc);
-      // Test for v2 == 0 to save Bits.get method call for
-      // the common case (doc has value and value is non-zero):
-      if (docsWithField != null && v2 == 0 && !docsWithField.get(doc)) {
-        v2 = missingValue;
-      }
-
       return Integer.compare(bottom, v2);
     }
 
@@ -423,12 +408,6 @@
     @Override
     public void copy(int slot, int doc) {
       int v2 = (int) currentReaderValues.get(doc);
-      // Test for v2 == 0 to save Bits.get method call for
-      // the common case (doc has value and value is non-zero):
-      if (docsWithField != null && v2 == 0 && !docsWithField.get(doc)) {
-        v2 = missingValue;
-      }
-
       values[slot] = v2;
     }
     
@@ -450,11 +429,6 @@
     @Override
     public int compareTop(int doc) {
       int docValue = (int) currentReaderValues.get(doc);
-      // Test for docValue == 0 to save Bits.get method call for
-      // the common case (doc has value and value is non-zero):
-      if (docsWithField != null && docValue == 0 && !docsWithField.get(doc)) {
-        docValue = missingValue;
-      }
       return Integer.compare(topValue, docValue);
     }
   }
@@ -467,7 +441,7 @@
     private long topValue;
 
     LongComparator(int numHits, String field, Long missingValue) {
-      super(field, missingValue);
+      super(field, missingValue == null ? 0 : missingValue);
       values = new long[numHits];
     }
 
@@ -481,12 +455,6 @@
       // TODO: there are sneaky non-branch ways to compute
       // -1/+1/0 sign
       long v2 = currentReaderValues.get(doc);
-      // Test for v2 == 0 to save Bits.get method call for
-      // the common case (doc has value and value is non-zero):
-      if (docsWithField != null && v2 == 0 && !docsWithField.get(doc)) {
-        v2 = missingValue;
-      }
-
       return Long.compare(bottom, v2);
     }
 
@@ -493,12 +461,6 @@
     @Override
     public void copy(int slot, int doc) {
       long v2 = currentReaderValues.get(doc);
-      // Test for v2 == 0 to save Bits.get method call for
-      // the common case (doc has value and value is non-zero):
-      if (docsWithField != null && v2 == 0 && !docsWithField.get(doc)) {
-        v2 = missingValue;
-      }
-
       values[slot] = v2;
     }
     
@@ -520,11 +482,6 @@
     @Override
     public int compareTop(int doc) {
       long docValue = currentReaderValues.get(doc);
-      // Test for docValue == 0 to save Bits.get method call for
-      // the common case (doc has value and value is non-zero):
-      if (docsWithField != null && docValue == 0 && !docsWithField.get(doc)) {
-        docValue = missingValue;
-      }
       return Long.compare(topValue, docValue);
     }
   }
