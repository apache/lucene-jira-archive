Index: org/apache/lucene/search/function/CustomScoreQuery.java
===================================================================
--- org/apache/lucene/search/function/CustomScoreQuery.java	(revision 776900)
+++ org/apache/lucene/search/function/CustomScoreQuery.java	(working copy)
@@ -164,14 +164,14 @@
    * <p>
    * If your custom scoring is different than the default herein you 
    * should override at least one of the two customScore() methods.
-   * If the number of ValueSourceQueries is always &lt; 2 it is 
-   * sufficient to override the other 
+   * If you are not required to access the score values of individual
+   * ValueSourceQueries it is sufficient to override the other 
    * {@link #customScore(int, float, float) customScore()} 
    * method, which is simpler. 
    * <p>
    * The default computation herein is a multiplication of given scores:
    * <pre>
-   *     ModifiedScore = valSrcScore * valSrcScores[0] * valSrcScores[1] * ...
+   *     ModifiedScore = subQueryScore * valSrcScores[0] * valSrcScores[1] * ...
    * </pre>
    * 
    * @param doc id of scored doc. 
@@ -186,11 +186,12 @@
     if (valSrcScores.length == 0) {
       return customScore(doc, subQueryScore, 1);
     }
-    float score = subQueryScore;
+    
+    float valSrcScore = 1.0f;
     for(int i = 0; i < valSrcScores.length; i++) {
-      score *= valSrcScores[i];
+      valSrcScore *= valSrcScores[i];
     }
-    return score;
+    return customScore(doc, subQueryScore, valSrcScore);
   }
 
   /**
@@ -200,8 +201,9 @@
    * <p>
    * If your custom scoring is different than the default herein you 
    * should override at least one of the two customScore() methods.
-   * If the number of ValueSourceQueries is always &lt; 2 it is 
-   * sufficient to override this customScore() method, which is simpler. 
+   * If you are not required to access the score values of individual
+   * ValueSourceQueries it is sufficient to override this customScore() method,
+   * which is simpler. 
    * <p>
    * The default computation herein is a multiplication of the two scores:
    * <pre>
