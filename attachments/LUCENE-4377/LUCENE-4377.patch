Index: lucene/core/src/test/org/apache/lucene/store/TestCopyBytes.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/store/TestCopyBytes.java	(revision 1383670)
+++ lucene/core/src/test/org/apache/lucene/store/TestCopyBytes.java	(working copy)
@@ -121,7 +121,7 @@
     IndexInput input = d.openInput("data", IOContext.DEFAULT);
     IndexOutput outputHeader = d.createOutput("header", IOContext.DEFAULT);
     // copy our 100-byte header
-    input.copyBytes(outputHeader, 100);
+    outputHeader.copyBytes(input, 100);
     outputHeader.close();
     
     // now make N copies of the remaining bytes
@@ -163,7 +163,7 @@
     @Override
     public void run() {
       try {
-        src.copyBytes(dst, src.length()-100);
+        dst.copyBytes(src, src.length()-100);
         dst.close();
       } catch (IOException ex) {
         throw new RuntimeException(ex);
Index: lucene/core/src/java/org/apache/lucene/store/SimpleFSDirectory.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/store/SimpleFSDirectory.java	(revision 1383670)
+++ lucene/core/src/java/org/apache/lucene/store/SimpleFSDirectory.java	(working copy)
@@ -208,12 +208,5 @@
     boolean isFDValid() throws IOException {
       return file.getFD().valid();
     }
-    
-    @Override
-    public void copyBytes(IndexOutput out, long numBytes) throws IOException {
-      numBytes -= flushBuffer(out, numBytes);
-      // If out is FSIndexOutput, the copy will be optimized
-      out.copyBytes(this, numBytes);
-    }
   }
 }
Index: lucene/core/src/java/org/apache/lucene/store/IndexInput.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/store/IndexInput.java	(revision 1383670)
+++ lucene/core/src/java/org/apache/lucene/store/IndexInput.java	(working copy)
@@ -66,30 +66,6 @@
   /** The number of bytes in the file. */
   public abstract long length();
 
-  /**
-   * Copies <code>numBytes</code> bytes to the given {@link IndexOutput}.
-   * <p>
-   * <b>NOTE:</b> this method uses an intermediate buffer to copy the bytes.
-   * Consider overriding it in your implementation, if you can make a better,
-   * optimized copy.
-   * <p>
-   * <b>NOTE</b> ensure that there are enough bytes in the input to copy to
-   * output. Otherwise, different exceptions may be thrown, depending on the
-   * implementation.
-   */
-  public void copyBytes(IndexOutput out, long numBytes) throws IOException {
-    assert numBytes >= 0: "numBytes=" + numBytes;
-
-    byte copyBuf[] = new byte[BufferedIndexInput.BUFFER_SIZE];
-
-    while (numBytes > 0) {
-      final int toCopy = (int) (numBytes > copyBuf.length ? copyBuf.length : numBytes);
-      readBytes(copyBuf, 0, toCopy);
-      out.writeBytes(copyBuf, 0, toCopy);
-      numBytes -= toCopy;
-    }
-  }
-
   @Override
   public String toString() {
     return resourceDescription;
Index: lucene/core/src/java/org/apache/lucene/store/BufferedIndexInput.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/store/BufferedIndexInput.java	(revision 1383670)
+++ lucene/core/src/java/org/apache/lucene/store/BufferedIndexInput.java	(working copy)
@@ -338,18 +338,6 @@
     return toCopy;
   }
   
-  @Override
-  public void copyBytes(IndexOutput out, long numBytes) throws IOException {
-    assert numBytes >= 0: "numBytes=" + numBytes;
-
-    while (numBytes > 0) {
-      if (bufferLength == bufferPosition) {
-        refill();
-      }
-      numBytes -= flushBuffer(out, numBytes);
-    }
-  }
-  
   /**
    * Returns default buffer sizes for the given {@link IOContext}
    */
Index: lucene/core/src/java/org/apache/lucene/store/Directory.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/store/Directory.java	(revision 1383670)
+++ lucene/core/src/java/org/apache/lucene/store/Directory.java	(working copy)
@@ -197,7 +197,7 @@
     try {
       os = to.createOutput(dest, context);
       is = openInput(src, context);
-      is.copyBytes(os, is.length());
+      os.copyBytes(is, is.length());
     } catch (IOException ioe) {
       priorException = ioe;
     } finally {
@@ -314,22 +314,5 @@
     public long length() {
       return length;
     }
-    
-    @Override
-    public void copyBytes(IndexOutput out, long numBytes) throws IOException {
-      // Copy first whatever is in the buffer
-      numBytes -= flushBuffer(out, numBytes);
-      
-      // If there are more bytes left to copy, delegate the copy task to the
-      // base IndexInput, in case it can do an optimized copy.
-      if (numBytes > 0) {
-        long start = getFilePointer();
-        if (start + numBytes > length) {
-          throw new EOFException("read past EOF: " + this);
-        }
-        base.seek(fileOffset + start);
-        base.copyBytes(out, numBytes);
-      }
-    }
   }
 }
Index: lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory.java	(revision 1383670)
+++ lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory.java	(working copy)
@@ -300,7 +300,7 @@
       IndexInput in = null;
       try {
         in = cache.openInput(fileName, context);
-        in.copyBytes(out, in.length());
+        out.copyBytes(in, in.length());
       } finally {
         IOUtils.close(in, out);
       }
Index: lucene/core/src/java/org/apache/lucene/store/RAMInputStream.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/store/RAMInputStream.java	(revision 1383670)
+++ lucene/core/src/java/org/apache/lucene/store/RAMInputStream.java	(working copy)
@@ -106,27 +106,6 @@
   }
 
   @Override
-  public void copyBytes(IndexOutput out, long numBytes) throws IOException {
-    assert numBytes >= 0: "numBytes=" + numBytes;
-    
-    long left = numBytes;
-    while (left > 0) {
-      if (bufferPosition == bufferLength) {
-        ++currentBufferIndex;
-        switchCurrentBuffer(true);
-      }
-      
-      final int bytesInBuffer = bufferLength - bufferPosition;
-      final int toCopy = (int) (bytesInBuffer < left ? bytesInBuffer : left);
-      out.writeBytes(currentBuffer, bufferPosition, toCopy);
-      bufferPosition += toCopy;
-      left -= toCopy;
-    }
-    
-    assert left == 0: "Insufficient bytes to copy: numBytes=" + numBytes + " copied=" + (numBytes - left);
-  }
-  
-  @Override
   public long getFilePointer() {
     return currentBufferIndex < 0 ? 0 : bufferStart + bufferPosition;
   }
Index: lucene/core/src/java/org/apache/lucene/store/RAMOutputStream.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/store/RAMOutputStream.java	(revision 1383670)
+++ lucene/core/src/java/org/apache/lucene/store/RAMOutputStream.java	(working copy)
@@ -178,27 +178,5 @@
   /** Returns byte usage of all buffers. */
   public long sizeInBytes() {
     return (long) file.numBuffers() * (long) BUFFER_SIZE;
-  }
-  
-  @Override
-  public void copyBytes(DataInput input, long numBytes) throws IOException {
-    assert numBytes >= 0: "numBytes=" + numBytes;
-
-    while (numBytes > 0) {
-      if (bufferPosition == bufferLength) {
-        currentBufferIndex++;
-        switchCurrentBuffer();
-      }
-
-      int toCopy = currentBuffer.length - bufferPosition;
-      if (numBytes < toCopy) {
-        toCopy = (int) numBytes;
-      }
-      input.readBytes(currentBuffer, bufferPosition, toCopy, false);
-      numBytes -= toCopy;
-      bufferPosition += toCopy;
-    }
-
-  }
-  
+  }  
 }
Index: lucene/test-framework/src/java/org/apache/lucene/store/MockIndexInputWrapper.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/store/MockIndexInputWrapper.java	(revision 1383670)
+++ lucene/test-framework/src/java/org/apache/lucene/store/MockIndexInputWrapper.java	(working copy)
@@ -119,12 +119,6 @@
   }
 
   @Override
-  public void copyBytes(IndexOutput out, long numBytes) throws IOException {
-    ensureOpen();
-    delegate.copyBytes(out, numBytes);
-  }
-
-  @Override
   public void readBytes(byte[] b, int offset, int len, boolean useBuffer)
       throws IOException {
     ensureOpen();
