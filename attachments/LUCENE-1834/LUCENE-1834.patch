Index: contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegGraph.java
===================================================================
--- contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegGraph.java	(revision 806404)
+++ contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegGraph.java	(working copy)
@@ -111,15 +111,6 @@
   }
 
   /**
-   * Get the number of startOffsets.
-   *
-   * @return number of startOffsets in the mapping
-   */
-  public int getStartCount() {
-    return tokenListTable.size();
-  }
-
-  /**
    * Return a {@link List} of all tokens in the map, ordered by startOffset.
    * 
    * @return {@link List} of all tokens in the map.
Index: contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegToken.java
===================================================================
--- contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegToken.java	(revision 806404)
+++ contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegToken.java	(working copy)
@@ -56,19 +56,6 @@
   public int index;
 
   /**
-   * Create a new SegToken from a {@link String}
-   * 
-   * @param word String containing text
-   * @param start start offset into word
-   * @param end end offset of word
-   * @param wordType {@link WordType} of the text
-   * @param weight word frequency
-   */
-  public SegToken(String word, int start, int end, int wordType, int weight) {
-    this(word.toCharArray(), start, end, wordType, weight);
-  }
-
-  /**
    * Create a new SegToken from a character array.
    * 
    * @param idArray character array containing text
Index: contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/WordDictionary.java
===================================================================
--- contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/WordDictionary.java	(revision 806404)
+++ contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/WordDictionary.java	(working copy)
@@ -417,23 +417,6 @@
   /**
    * 在字典库中查找单词对应的char数组为charArray的字符串。返回该单词在单词序列中的位置
    * 
-   * @param charArray 查找单词对应的char数组
-   * @return 单词在单词数组中的位置，如果没找到则返回-1
-   */
-  private int findInTable(char[] charArray) {
-    if (charArray == null || charArray.length == 0)
-      return -1;
-    short index = getWordItemTableIndex(charArray[0]);
-    if (index == -1)
-      return -1;
-
-    return findInTable(index, charArray);
-
-  }
-
-  /**
-   * 在字典库中查找单词对应的char数组为charArray的字符串。返回该单词在单词序列中的位置
-   * 
    * @param knownHashIndex 已知单词第一个字符charArray[0]在hash表中的位置，如果未计算，可以用函数int
    *        findInTable(char[] charArray) 代替
    * @param charArray 查找单词对应的char数组
@@ -464,16 +447,6 @@
   }
 
   /**
-   * Returns true if the input word appears in the dictionary
-   * 
-   * @param charArray input word
-   * @return true if the word exists
-   */
-  public boolean isExist(char[] charArray) {
-    return findInTable(charArray) != -1;
-  }
-
-  /**
    * Find the first word in the dictionary that starts with the supplied prefix
    * 
    * @see #getPrefixMatch(char[], int)
