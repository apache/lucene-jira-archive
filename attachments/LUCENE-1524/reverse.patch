Index: src/test/org/apache/lucene/search/TestReverseSort.java
===================================================================
--- src/test/org/apache/lucene/search/TestReverseSort.java	(revision 0)
+++ src/test/org/apache/lucene/search/TestReverseSort.java	(revision 0)
@@ -0,0 +1,72 @@
+package org.apache.lucene.search;
+
+import junit.framework.TestCase;
+import org.apache.lucene.analysis.SimpleAnalyzer;
+import org.apache.lucene.document.Document;
+import org.apache.lucene.document.Field;
+import org.apache.lucene.index.IndexWriter;
+import org.apache.lucene.index.Term;
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.store.RAMDirectory;
+
+import java.io.IOException;
+
+public class TestReverseSort extends TestCase {
+  private static final String FIELD_1 = "field1";
+  private static final String FIELD_2 = "field2";
+  private static final String THE_SAME_VALUE = "a";
+
+  private Query query = null;
+  private Directory index = null;
+
+  protected void setUp() throws Exception {
+    index = new RAMDirectory();
+
+    IndexWriter writer = new IndexWriter(index, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);
+
+    Document d1 = new Document();
+    d1.add(new Field(FIELD_1, THE_SAME_VALUE, Field.Store.YES, Field.Index.ANALYZED));
+    d1.add(new Field(FIELD_2, "1", Field.Store.YES, Field.Index.ANALYZED));
+
+    Document d2 = new Document();
+    d2.add(new Field(FIELD_1, THE_SAME_VALUE, Field.Store.YES, Field.Index.ANALYZED));
+    d2.add(new Field(FIELD_2, "2", Field.Store.YES, Field.Index.ANALYZED));
+
+    writer.addDocument(d1);
+    writer.addDocument(d2);
+    writer.optimize();
+    writer.close();
+
+    query = new TermQuery(new Term(FIELD_1, THE_SAME_VALUE));
+  }
+
+  private void performTests(Searcher searcher) throws Exception {
+    // test natural index order
+    assertMatches(searcher, createSort(false), new String[]{"1", "2"});
+    // test reverse index order
+    assertMatches(searcher, createSort(true), new String[]{"2", "1"});
+  }
+
+  private Sort createSort(boolean reverse) {
+    // values in field1 are the same
+    return new Sort(new SortField(FIELD_1, SortField.STRING, reverse));
+  }
+
+  private void assertMatches(Searcher searcher, Sort sort, String[] expected) throws IOException {
+    ScoreDoc[] docs = searcher.search(query, null, 10, sort).scoreDocs;
+    for (int i = 0; i < expected.length; i++) {
+      Document d = searcher.doc(docs[i].doc);
+      String value = d.get(FIELD_2);
+      assertEquals(expected[i], value);
+    }
+  }
+
+
+  public void testFieldSortedHitQueue() throws Exception {
+    performTests(new IndexSearcher(index));
+  }
+
+  public void testFieldDocSortedHitQueue() throws Exception {
+    performTests(new MultiSearcher(new Searchable[]{new IndexSearcher(index)}));
+  }
+}

Property changes on: src/test/org/apache/lucene/search/TestReverseSort.java
___________________________________________________________________
Name: svn:eol-style
   + native

Index: src/java/org/apache/lucene/search/FieldDocSortedHitQueue.java
===================================================================
--- src/java/org/apache/lucene/search/FieldDocSortedHitQueue.java	(revision 736290)
+++ src/java/org/apache/lucene/search/FieldDocSortedHitQueue.java	(working copy)
@@ -104,6 +104,7 @@
 		final FieldDoc docA = (FieldDoc) a;
 		final FieldDoc docB = (FieldDoc) b;
 		final int n = fields.length;
+    boolean reverse = false;
 		int c = 0;
 		for (int i=0; i<n && c==0; ++i) {
 			final int type = fields[i].getType();
@@ -188,14 +189,15 @@
 					throw new RuntimeException ("invalid SortField type: "+type);
         }
       }
-			if (fields[i].getReverse()) {
+      reverse = fields[i].getReverse();
+			if (reverse) {
 				c = -c;
 			}
 		}
 
     // avoid random sort order that could lead to duplicates (bug #31241):
     if (c == 0)
-      return docA.doc > docB.doc;
+      return (reverse ? docA.doc < docB.doc : docA.doc > docB.doc);
 
     return c > 0;
 	}
Index: src/java/org/apache/lucene/search/FieldSortedHitQueue.java
===================================================================
--- src/java/org/apache/lucene/search/FieldSortedHitQueue.java	(revision 736290)
+++ src/java/org/apache/lucene/search/FieldSortedHitQueue.java	(working copy)
@@ -119,6 +119,8 @@
    * @return <code>true</code> if document <code>a</code> should be sorted after document <code>b</code>.
    */
   protected boolean lessThan (final Object a, final Object b) {
+    boolean reverse = false;
+
     final ScoreDoc docA = (ScoreDoc) a;
     final ScoreDoc docB = (ScoreDoc) b;
 
@@ -126,12 +128,13 @@
     final int n = comparators.length;
     int c = 0;
     for (int i=0; i<n && c==0; ++i) {
-      c = (fields[i].reverse) ? comparators[i].compare (docB, docA)
+      reverse = fields[i].reverse;
+      c = (reverse) ? comparators[i].compare (docB, docA)
                               : comparators[i].compare (docA, docB);
     }
     // avoid random sort order that could lead to duplicates (bug #31241):
     if (c == 0)
-      return docA.doc > docB.doc;
+      return (reverse ? docA.doc < docB.doc : docA.doc > docB.doc);
     return c > 0;
   }
 
