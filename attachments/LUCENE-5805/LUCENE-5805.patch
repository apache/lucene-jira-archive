Index: queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.java
===================================================================
--- queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.java	(revision 1683314)
+++ queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.java	(working copy)
@@ -95,4 +95,11 @@
    * Removes this query node from its parent.
    */
   public void removeFromParent();
+
+
+  /**
+   * Remove a child node
+   * @param childNode
+   */
+  public void removeChildren(QueryNode childNode);
 }
Index: queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl.java
===================================================================
--- queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl.java	(revision 1683314)
+++ queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl.java	(working copy)
@@ -246,20 +246,24 @@
   public Map<String, Object> getTagMap() {
     return (Map<String, Object>) this.tags.clone();
   }
-  
+
   @Override
+  public void removeChildren(QueryNode childNode){
+    Iterator<QueryNode> it = this.clauses.iterator();
+    while(it.hasNext()){
+      if(it.next() == childNode){
+        it.remove();
+      }
+    }
+    childNode.removeFromParent();
+  }
+
+  @Override
   public void removeFromParent() {
     if (this.parent != null) {
-      List<QueryNode> parentChildren = this.parent.getChildren();
-      Iterator<QueryNode> it = parentChildren.iterator();
-      
-      while (it.hasNext()) {
-        if (it.next() == this) {
-          it.remove();
-        }
-      }
-      
+      QueryNode parent = this.parent;
       this.parent = null;
+      parent.removeChildren(this);
     }
   }
 
Index: queryparser/src/test/org/apache/lucene/queryparser/flexible/core/nodes/TestQueryNode.java
===================================================================
--- queryparser/src/test/org/apache/lucene/queryparser/flexible/core/nodes/TestQueryNode.java	(revision 1683314)
+++ queryparser/src/test/org/apache/lucene/queryparser/flexible/core/nodes/TestQueryNode.java	(working copy)
@@ -44,24 +44,39 @@
     assertTrue(node.getTag("tAg") != null);
     
   }
-  
+
+
   /* LUCENE-5099 - QueryNodeProcessorImpl should set parent to null before returning on processing */
   public void testRemoveFromParent() throws Exception {
     BooleanQueryNode booleanNode = new BooleanQueryNode(Collections.<QueryNode>emptyList());
     FieldQueryNode fieldNode = new FieldQueryNode("foo", "A", 0, 1);
     assertNull(fieldNode.getParent());
-    
+
     booleanNode.add(fieldNode);
     assertNotNull(fieldNode.getParent());
 
     fieldNode.removeFromParent();
     assertNull(fieldNode.getParent());
+    /* LUCENE-5805 - QueryNodeImpl.removeFromParent does a lot of work without any effect */
+    assertFalse(booleanNode.getChildren().contains(fieldNode));
 
     booleanNode.add(fieldNode);
     assertNotNull(fieldNode.getParent());
-    
+
     booleanNode.set(Collections.<QueryNode>emptyList());
     assertNull(fieldNode.getParent());
   }
+
+  public void testRemoveChildren() throws Exception{
+    BooleanQueryNode booleanNode = new BooleanQueryNode(Collections.<QueryNode>emptyList());
+    FieldQueryNode fieldNode = new FieldQueryNode("foo", "A", 0, 1);
+
+    booleanNode.add(fieldNode);
+    assertTrue(booleanNode.getChildren().size() == 1);
+
+    booleanNode.removeChildren(fieldNode);
+    assertTrue(booleanNode.getChildren().size()==0);
+    assertNull(fieldNode.getParent());
+  }
   
 }
