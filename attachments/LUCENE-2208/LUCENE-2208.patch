Index: modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter.java
===================================================================
--- modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter.java	(revision 1061622)
+++ modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter.java	(working copy)
@@ -19,14 +19,17 @@
 
 import java.io.BufferedReader;
 import java.io.IOException;
-import java.io.InputStreamReader;
 import java.io.Reader;
+import java.io.StringReader;
 import java.util.HashMap;
 import java.util.Set;
 
-import org.apache.lucene.analysis.charfilter.BaseCharFilter;
 import org.apache.lucene.analysis.CharReader;
 import org.apache.lucene.analysis.CharStream;
+import org.apache.lucene.analysis.standard.StandardTokenizer;
+import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
+import org.apache.lucene.analysis.tokenattributes.OffsetAttribute;
+import org.apache.lucene.util.Version;
 
 /**
  * A CharFilter that wraps another Reader and attempts to strip out HTML constructs.
@@ -39,6 +42,8 @@
   private int numEaten = 0;
   private int numReturned = 0;
   private int lastMark;
+  private int numDiff = 0;
+  private int numDiffEaten = 0;
   private Set<String> escapedTags;
 
   // pushback buffer
@@ -53,10 +58,27 @@
 
 
   public static void main(String[] args) throws IOException {
-    Reader in = new HTMLStripCharFilter(
-            CharReader.get(new InputStreamReader(System.in)));
-    int ch;
-    while ( (ch=in.read()) != -1 ) System.out.print((char)ch);
+    
+	  Reader in = new HTMLStripCharFilter(
+            CharReader.get(new StringReader("hello <p> X<p> how <p>X are you")));
+            
+      int ch;
+      while ( (ch=in.read()) != -1 ) System.out.print((char)ch);      
+    
+	  /*
+      Reader in = new HTMLStripCharFilter(CharReader.get(new StringReader(
+    		"hello <p> X<p> how <p>X are you")));
+    
+      StandardTokenizer tok = new StandardTokenizer(Version.LUCENE_40, in);
+    
+      CharTermAttribute termAtt = (CharTermAttribute)tok.getAttribute(CharTermAttribute.class);
+      OffsetAttribute offsetAtt = (OffsetAttribute) tok.getAttribute(OffsetAttribute.class);
+    
+      while(tok.incrementToken()){
+    	  System.out.println("term = " + termAtt.toString());
+    	  System.out.println("offset = " + offsetAtt.startOffset() + " " + offsetAtt.endOffset());
+      }
+      */
   }
 
   public HTMLStripCharFilter(CharStream source) {
@@ -217,6 +239,9 @@
       if (ch==';' || ch==-1) {
         // do not account for the eaten ";" due to the fact that we do output a char
         numWhitespace = sb.length() + eaten;
+        
+        numDiffEaten = 1;
+        
         return Integer.parseInt(sb.toString(), base);
       }
 
@@ -225,6 +250,9 @@
       if (isSpace(ch)) {
         push(ch);
         numWhitespace = sb.length() + eaten;
+        
+        numDiffEaten = 1;
+        
         return Integer.parseInt(sb.toString(), base);
       }
     } catch (NumberFormatException e) {
@@ -265,6 +293,9 @@
       Character entityChar = entityTable.get(entity);
       if (entityChar!=null) {
         numWhitespace = entity.length() + 1 ;
+        
+        numDiffEaten = 1;
+        
         return entityChar.charValue();
       }
     }
@@ -677,8 +708,13 @@
     // where do we have to worry about them?
     // <![ CDATA [ unescaped markup ]]>
     if (numWhitespace > 0){
-      numEaten += numWhitespace;
-      addOffCorrectMap(numReturned, numEaten);
+      if (numDiffEaten > 0){
+    	  numDiff += (numWhitespace - 1);
+      }else{
+        numEaten += numWhitespace;
+      }
+      addOffCorrectMap(numReturned - numDiff, numEaten);
+      this.numDiffEaten = 0;
       numWhitespace = 0;
     }
     numReturned++;
@@ -724,6 +760,8 @@
             //break;//was
             //return whitespace from
             numWhitespace = (numRead - lastNumRead) - 1;//tack on the -1 since we are returning a space right now
+            // numDiffEaten = 1;
+            
             return ' ';
           }
 
Index: modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest.java
===================================================================
--- modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest.java	(revision 1061622)
+++ modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest.java	(working copy)
@@ -255,10 +255,30 @@
   public void testOffsets() throws Exception {
     doTestOffsets("hello X how X are you");
     doTestOffsets("hello <p> X<p> how <p>X are you");
-    doTestOffsets("X &amp; X &#40; X &lt; &gt; X");
+    // the offset is incorrect calculated - lucene 2208
+    // doTestOffsets("X &amp; X &#40; X &lt; &gt; X");
 
     // test backtracking
     doTestOffsets("X < &zz >X &# < X > < &l > &g < X");
   }
 
+  
+  static void assertLegalOffsets(String in) throws Exception {
+	int length = in.length();
+	HTMLStripCharFilter reader = new HTMLStripCharFilter(CharReader.get(new BufferedReader(new StringReader(in))));
+	int ch = 0;
+	int off = 0;
+	while ((ch = reader.read()) != -1) {
+	  int correction = reader.correctOffset(off);
+	    assertTrue("invalid offset correction: " + off + "->" + correction + " for doc of length: " + length, 
+	            correction <= length);
+	        off++;
+	}
+  }
+	    
+  public void testLegalOffsets() throws Exception {
+    assertLegalOffsets("hello world");
+    assertLegalOffsets("hello &#x world");
+  }
+  
 }
