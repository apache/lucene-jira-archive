diff --git a/lucene/codecs/src/test/org/apache/lucene/codecs/simpletext/TestSimpleTextLiveDocsFormat.java b/lucene/codecs/src/test/org/apache/lucene/codecs/simpletext/TestSimpleTextLiveDocsFormat.java
new file mode 100644
index 0000000..bb2ff69
--- /dev/null
+++ b/lucene/codecs/src/test/org/apache/lucene/codecs/simpletext/TestSimpleTextLiveDocsFormat.java
@@ -0,0 +1,29 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.lucene.codecs.simpletext;
+
+import org.apache.lucene.codecs.Codec;
+import org.apache.lucene.index.BaseLiveDocsFormatTestCase;
+
+public class TestSimpleTextLiveDocsFormat extends BaseLiveDocsFormatTestCase {
+  private final Codec codec = new SimpleTextCodec();
+
+  @Override
+  protected Codec getCodec() {
+    return codec;
+  }
+}
diff --git a/lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50LiveDocsFormat.java b/lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50LiveDocsFormat.java
new file mode 100644
index 0000000..eead6b2
--- /dev/null
+++ b/lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50LiveDocsFormat.java
@@ -0,0 +1,30 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.lucene.codecs.lucene50;
+
+import org.apache.lucene.codecs.Codec;
+import org.apache.lucene.index.BaseLiveDocsFormatTestCase;
+import org.apache.lucene.util.TestUtil;
+
+public class TestLucene50LiveDocsFormat extends BaseLiveDocsFormatTestCase {
+
+  @Override
+  protected Codec getCodec() {
+    return TestUtil.getDefaultCodec();
+  }
+
+}
diff --git a/lucene/test-framework/src/java/org/apache/lucene/index/BaseLiveDocsFormatTestCase.java b/lucene/test-framework/src/java/org/apache/lucene/index/BaseLiveDocsFormatTestCase.java
new file mode 100644
index 0000000..8742905
--- /dev/null
+++ b/lucene/test-framework/src/java/org/apache/lucene/index/BaseLiveDocsFormatTestCase.java
@@ -0,0 +1,125 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.lucene.index;
+
+import java.io.IOException;
+import java.util.Collections;
+
+import org.apache.lucene.codecs.Codec;
+import org.apache.lucene.codecs.LiveDocsFormat;
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.store.IOContext;
+import org.apache.lucene.util.Bits;
+import org.apache.lucene.util.LuceneTestCase;
+import org.apache.lucene.util.MutableBits;
+import org.apache.lucene.util.StringHelper;
+import org.apache.lucene.util.Version;
+
+/**
+ * Abstract class that performs basic testing of a codec's
+ * {@link LiveDocsFormat}.
+ */
+public abstract class BaseLiveDocsFormatTestCase extends LuceneTestCase {
+
+  /** Returns the codec to run tests against */
+  protected abstract Codec getCodec();
+
+  private Codec savedCodec;
+
+  @Override
+  public void setUp() throws Exception {
+    super.setUp();
+    // set the default codec, so adding test cases to this isn't fragile
+    savedCodec = Codec.getDefault();
+    Codec.setDefault(getCodec());
+  }
+
+  @Override
+  public void tearDown() throws Exception {
+    Codec.setDefault(savedCodec); // restore
+    super.tearDown();
+  }
+
+  public void testNewLiveDocsSetsAllBits() throws IOException {
+    final int size = 10;
+    MutableBits bits = Codec.getDefault().liveDocsFormat().newLiveDocs(size);
+    assertEquals(size, bits.length());
+    for (int i = 0; i < size; ++i) {
+      assertTrue(bits.get(i));
+    }
+
+    final int clearBit = random().nextInt(size);
+    bits.clear(clearBit);
+    for (int i = 0; i < size; ++i) {
+      assertEquals(i != clearBit, bits.get(i));
+    }
+  }
+
+  public void testNewLiveDocsCopy() throws IOException {
+    final int size = 10;
+    MutableBits bits = Codec.getDefault().liveDocsFormat().newLiveDocs(size);
+    final int clearBit = random().nextInt(size);
+    bits.clear(clearBit);
+
+    MutableBits bits2 = Codec.getDefault().liveDocsFormat().newLiveDocs(bits);
+    assertEquals(size, bits2.length());
+    for (int i = 0; i < size; ++i) {
+      assertEquals(bits.get(i), bits2.get(i));
+    }
+
+    int clearBit2;
+    do {
+      clearBit2 = random().nextInt(size);
+    } while (clearBit == clearBit2);
+
+    bits2.clear(clearBit2);
+    for (int i = 0; i < size; ++i) {
+      assertEquals(bits.get(i) && i != clearBit2, bits2.get(i));
+    }
+  }
+
+  public void testSerialization() throws IOException {
+    final Codec codec = Codec.getDefault();
+    final LiveDocsFormat format = codec.liveDocsFormat();
+
+    final int size = 10;
+    MutableBits bits = Codec.getDefault().liveDocsFormat().newLiveDocs(size);
+    final int deletions = random().nextInt(size / 2);
+
+    for (int i = 0; i < deletions; ++i) {
+      int clearBit;
+      do {
+        clearBit = random().nextInt(size);
+      } while (bits.get(clearBit) == false);
+      bits.clear(clearBit);
+    }
+
+    final Directory dir = newDirectory();
+    final SegmentInfo si = new SegmentInfo(dir, Version.LATEST, Version.LATEST, "foo", size, random().nextBoolean(),
+        codec, Collections.emptyMap(), StringHelper.randomId(), Collections.emptyMap(), null);
+    SegmentCommitInfo sci = new SegmentCommitInfo(si, 0, 0, -1, -1);
+    format.writeLiveDocs(bits, dir, sci, deletions, IOContext.DEFAULT);
+
+    sci = new SegmentCommitInfo(si, deletions, 1, -1, -1);
+    final Bits bits2 = format.readLiveDocs(dir, sci, IOContext.READONCE);
+    assertEquals(size, bits2.length());
+    for (int i = 0; i < size; ++i) {
+      assertEquals(bits.get(i), bits2.get(i));
+    }
+    dir.close();
+  }
+}
