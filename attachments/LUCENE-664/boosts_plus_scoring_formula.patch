Index: src/java/org/apache/lucene/search/Similarity.java
===================================================================
--- src/java/org/apache/lucene/search/Similarity.java	(revision 447480)
+++ src/java/org/apache/lucene/search/Similarity.java	(working copy)
@@ -28,56 +28,249 @@
 
 /** Expert: Scoring API.
  * <p>Subclasses implement search scoring.
+ * 
+ * <p>The score of query <code>q</code> for document <code>d</code> correlates to the 
+ * cosine-distance or dot-product between document and query vectors in a
+ * <a href="http://en.wikipedia.org/wiki/Vector_Space_Model">
+ * Vector Space Model (VSM) of Information Retrieval</a>. 
+ * A document whose vector is closer to the query vector in that model is scored higher.  
+ * 
+ * <p>The score is computed as follows:
  *
- * <p>The score of query <code>q</code> for document <code>d</code> is defined
- * in terms of these methods as follows:
- *
- * <table cellpadding="0" cellspacing="0" border="0">
+ * <table cellpadding="1" cellspacing="0" border="0"n align="center">
  *  <tr>
- *    <td valign="middle" align="right" rowspan="2">score(q,d) =<br></td>
- *    <td valign="middle" align="center">
- *    <big><big><big><big><big>&Sigma;</big></big></big></big></big></td>
- *    <td valign="middle"><small>
- *    ( {@link #tf(int) tf}(t in d) *
- *    {@link #idf(Term,Searcher) idf}(t)^2 *
- *    {@link Query#getBoost getBoost}(t in q) *
- *    {@link org.apache.lucene.document.Field#getBoost getBoost}(t.field in d) *
- *    {@link #lengthNorm(String,int) lengthNorm}(t.field in d) )
- *    </small></td>
- *    <td valign="middle" rowspan="2">&nbsp;*
- *    {@link #coord(int,int) coord}(q,d) *
- *    {@link #queryNorm(float) queryNorm}(sumOfSqaredWeights)
+ *    <td valign="middle" align="right" rowspan="1">
+ *      score(q,d) &nbsp; = &nbsp;
+ *      {@link #coord(int,int) coord}(q,d) &nbsp;&middot;&nbsp;
+ *      {@link #queryNorm(float) normalizer}(q) &nbsp;&middot;&nbsp;
  *    </td>
- *  </tr>
- *  <tr>
- *   <td valign="top" align="right">
- *    <small>t in q</small>
+ *    <td valign="bottom" align="center" rowspan="1">
+ *      <big><big><big>&sum;</big></big></big>
  *    </td>
+ *    <td valign="middle" align="right" rowspan="1">
+ *      <big><big>(</big></big> 
+ *      {@link #tf(int) tf}(t in d) &nbsp;&middot;&nbsp;
+ *      {@link #idf(Term,Searcher) idf}(t)<sup>2</sup> &nbsp;&middot;&nbsp;
+ *      {@link Query#getBoost searchBoost}(t in q) &nbsp;&middot;&nbsp;
+ *      indexBoost(t,d)
+ *      <big><big>)</big></big> 
+ *    </td>
  *  </tr>
+ *  <tr valigh="top">
+ *   <td></td>
+ *   <td align="center"><small>t in q</small></td>
+ *   <td></td>
+ *  </tr>
  * </table>
  * 
  * <p> where
+ * <ol>
+ *    <li><b>
+ *      <A HREF="#coord(int, int)">coord(q,d)</A>
+ *      </b>
+ *      is a score factor based on how many of the query terms are found in the specified document.  
+ *      Typically, a document that contains more of the query's terms will receive a higher score 
+ *      than another document with fewer query terms. 
+ *      This is a search time factor computed in   
+ *      <A HREF="#coord(int, int)">coord(q,d)</A>
+ *      by the Similarity in effect at search time.
+ *      <br>&nbsp;<br>
+ *    </li>
+ *    <li><b>
+ *      normalizer(q)
+ *      </b>
+ *      is a normalizing factor used to make scores between queries comparable.
+ *      This factor does not affect document ranking (since all ranked documents are multiplied by the same factor), 
+ *      but rather just attempts to make scores from different queries (or even different indexes) comparable.
+ *      This is a search time factor computed in   
+ *      {@link #queryNorm(float) queryNorm(sumOfSquaredWeights)}
+ *      by the Similarity in effect at search time.
+ *      
+ *      The default computation for <i>normalizer(q)</i> in 
+ *      {@link org.apache.lucene.search.DefaultSimilarity#queryNorm(float) DefaultSimilarity}
+ *      is:
+ *      <br>&nbsp;<br>
+ *      <table cellpadding="1" cellspacing="0" border="0" align="center">
+ *        <tr>
+ *          <td valign="middle" align="right" rowspan="1">
+ *            normalizer(q)  &nbsp; = &nbsp;
+ *            {@link org.apache.lucene.search.DefaultSimilarity#queryNorm(float) queryNorm (sumOfSquaredWeights)}
+ *            &nbsp; = &nbsp;
+ *          </td>
+ *          <td valign="middle" align="center" rowspan="1">
+ *            <table>
+ *               <tr><td align="center"><big>1</big></td></tr>
+ *               <tr><td align="center"><big>
+ *                  &ndash;&ndash;&ndash;&ndash;&ndash;&ndash;&ndash;&ndash;&ndash;&ndash;&ndash;&ndash;&ndash;&ndash;
+ *               </big></td></tr>
+ *               <tr><td align="center">sumOfSquaredWeights<sup><big>&frac12;</big></sup></td></tr>
+ *            </table>
+ *          </td>
+ *        </tr>
+ *      </table>
+ *      <br>&nbsp;<br>
+ *      
+ *      The sum of squared weights (of the query terms) is 
+ *      computed by the query {@link org.apache.lucene.search.Weight} object. 
+ *      For example, a {@link org.apache.lucene.search.BooleanQuery boolean query} 
+ *      computes this value as:   
+ *      
+ *      <br>&nbsp;<br>
+ *      <table cellpadding="1" cellspacing="0" border="0"n align="center">
+ *        <tr>
+ *          <td valign="middle" align="right" rowspan="1">
+ *            {@link org.apache.lucene.search.Weight#sumOfSquaredWeights() sumOfSquaredWeights} &nbsp; = &nbsp;
+ *            {@link org.apache.lucene.search.Query#getBoost() searchBoost(q)} <sup><big>2</big></sup>
+ *            &nbsp;&middot;&nbsp;
+ *          </td>
+ *          <td valign="bottom" align="center" rowspan="1">
+ *            <big><big><big>&sum;</big></big></big>
+ *          </td>
+ *          <td valign="middle" align="right" rowspan="1">
+ *            <big><big>(</big></big>
+ *            {@link #idf(Term,Searcher) idf}(t) &nbsp;&middot;&nbsp; 
+ *            {@link Query#getBoost searchBoost}(t in q)
+ *            <big><big>) <sup>2</sup> </big></big> 
+ *          </td>
+ *        </tr>
+ *        <tr valigh="top">
+ *          <td></td>
+ *          <td align="center"><small>t in q</small></td>
+ *          <td></td>
+ *        </tr>
+ *      </table>
+ *      <br>&nbsp;<br>
+ *      
+ *    </li>
+ *    
+ *    <li>
+ *      <A HREF="#tf(int)"><b>tf(t in d)</b></A> 
+ *      correlates t the term's <i>frequency</i> 
+ *      - the number of times term <i>t</i> appears in the current document <i>d</i> being scored.
+ *      Documents that have more occurrences of a given term receive a higher score.
+ *      The default computation for <i>tf(t in d)</i> in   
+ *      {@link org.apache.lucene.search.DefaultSimilarity#queryNorm(float) DefaultSimilarity} is:
+ *      
+ *      <br>&nbsp;<br>
+ *      <table cellpadding="2" cellspacing="2" border="0" align="center">
+ *        <tr>
+ *          <td valign="middle" align="right" rowspan="1">
+ *            tf(t in d)&nbsp; = &nbsp;
+ *          </td>
+ *          <td valign="top" align="center" rowspan="1">
+ *               frequency<sup><big>&frac12;</big></sup>
+ *          </td>
+ *        </tr>
+ *      </table>
+ *      <br>&nbsp;<br>
+ *    </li>
+ *    
+ *    <li>
+ *      <A HREF="#idf(org.apache.lucene.index.Term, org.apache.lucene.search.Searcher)"><b>idf(t)</b></A> 
+ *      - Inverse Document Frequency - correlates to the inverse of <i>docFreq</i> (the number of documents in 
+ *      which the term <i>t</i> appears). This means rarer terms give higher contribution to 
+ *      the total score.
+ *      The default computation for <i>idf(t)</i> in   
+ *      {@link org.apache.lucene.search.DefaultSimilarity#idf(int, int) DefaultSimilarity} is:
+ *      
+ *      <br>&nbsp;<br>
+ *      <table cellpadding="2" cellspacing="2" border="0" align="center">
+ *        <tr>
+ *          <td valign="middle" align="right">
+ *            idf(t)&nbsp; = &nbsp;
+ *          </td>
+ *          <td valign="middle" align="center">
+ *            1 + log <big>(</big>
+ *          </td>
+ *          <td valign="middle" align="center">
+ *            <table>
+ *               <tr><td align="center"><small>numDocs</small></td></tr>
+ *               <tr><td align="center">&ndash;&ndash;&ndash;&ndash;&ndash;&ndash;&ndash;&ndash;&ndash;</td></tr>
+ *               <tr><td align="center"><small>docFreq+1</small></td></tr>
+ *            </table>
+ *          </td>
+ *          <td valign="middle" align="center">
+ *            <big>)</big>
+ *          </td>
+ *        </tr>
+ *      </table>
+ *      <br>&nbsp;<br>
+ *    </li>
+ *    
+ *    <li>
+ *      <b>{@link org.apache.lucene.search.Query#getBoost() searchBoost(t in q),searchBoost(q)}</b>
+ *      are search time boosts of a query set by application calls to 
+ *      {@link org.apache.lucene.search.Query#setBoost(float) setBoost(float)}.
+ *      Notice that there is really no API for setting a boost of one term in a multi term query, 
+ *      but rather multi terms are represented in a query as multi 
+ *      {@link org.apache.lucene.search.TermQuery TermQuery} objects,
+ *      and so the boost of a term in the query is accessible via the 
+ *      {@link org.apache.lucene.search.Query#getBoost() subQuery.getBoost()}.
+ *      <br>&nbsp;<br>
+ *    </li>
+ *    
+ *    <li>
+ *      <b>indexBoost(t,d)</b>
+ *      is a boost for term <code>t</code> in document <code>d</code> that was set at indexing time.
+ *      At search time it would be too late to modify this part of the scoring.
+ *      A few factors come into play here, accounting for fields named the same as the term <i>t</i>:
+ *      
+ *      <ul>
+ *        <li><b>Document boost</b> - set by calling 
+ *        {@link org.apache.lucene.document.Document#setBoost(float) doc.setBoost()} 
+ *        before adding the document to the index.
+ *        </li>
+ *        <li><b>Field boost</b> - set by calling
+ *        {@link org.apache.lucene.document.Fieldable#setBoost(float) field.setBoost()}
+ *        before adding the field to a document.
+ *        </li> 
+ *        <li>{@link #lengthNorm(String, int) <b>lengthNorm</b>(field)} - computed
+ *        when the document is added to the index in accordance with the number of tokens 
+ *        of this field in the document, so that shorter fields contribute more to the score.
+ *        LengthNorm is computed by the Similarity class in effect at indexing.
+ *        </li>
+ *      </ul>
+ *        
+ *      When a document is added to the index, all the above factors are multiplied. 
+ *      If the document has multiple fields with the same name, all their boosts are multiplied together:
+ *      
+ *      <br>&nbsp;<br>
+ *      <table cellpadding="1" cellspacing="0" border="0"n align="center">
+ *        <tr>
+ *          <td valign="middle" align="right" rowspan="1">
+ *            indexBoost(t in d) &nbsp; = &nbsp;
+ *            {@link org.apache.lucene.document.Document#getBoost() doc.getBoost()}
+ *            &nbsp;&middot;&nbsp;
+ *            {@link #lengthNorm(String, int) lengthNorm(field)}
+ *            &nbsp;&middot;&nbsp;
+ *          </td>
+ *          <td valign="bottom" align="center" rowspan="1">
+ *            <big><big><big>&prod;</big></big></big>
+ *          </td>
+ *          <td valign="middle" align="right" rowspan="1">
+ *            {@link org.apache.lucene.document.Fieldable#getBoost() f.getBoost}() 
+ *          </td>
+ *        </tr>
+ *        <tr valigh="top">
+ *          <td></td>
+ *          <td align="center"><small>field <i><b>f</b></i> in <i>d</i> named as <i><b>t</b></i></small></td>
+ *          <td></td>
+ *        </tr>
+ *      </table>
+ *      <br>&nbsp;<br>
+ *      However the resulted float boost is {@link #encodeNorm(float) encoded} as a single byte, 
+ *      and stored in the index as <b>norm</b>.
+ *      At search time, the <b>norm</b> byte value is read from disk and 
+ *      {@link #decodeNorm(byte) decoded} to a float <b>indexBoost</b>.
+ *      This encoding/decoding, while reducing index size, comes with the price of 
+ *      precision loss - it is not guaranteed that decode(encode(x)) = x.
+ *      For instance, decode(encode(0.89)) = 0.75. 
+ *      <br>&nbsp;<br>
+ *    </li>
+ *    
+ * </ol
+ *
  * 
- * <table cellpadding="0" cellspacing="0" border="0">
- *  <tr>
- *    <td valign="middle" align="right" rowspan="2">sumOfSqaredWeights =<br></td>
- *    <td valign="middle" align="center">
- *    <big><big><big><big><big>&Sigma;</big></big></big></big></big></td>
- *    <td valign="middle"><small>
- *    ( {@link #idf(Term,Searcher) idf}(t) *
- *    {@link Query#getBoost getBoost}(t in q) )^2
- *    </small></td>
- *  </tr>
- *  <tr>
- *   <td valign="top" align="right">
- *    <small>t in q</small>
- *    </td>
- *  </tr>
- * </table>
- * 
- * <p> Note that the above formula is motivated by the cosine-distance or dot-product
- * between document and query vector, which is implemented by {@link DefaultSimilarity}.
- *
  * @see #setDefault(Similarity)
  * @see IndexWriter#setSimilarity(Similarity)
  * @see Searcher#setSimilarity(Similarity)
Index: xdocs/scoring.xml
===================================================================
--- xdocs/scoring.xml	(revision 447480)
+++ xdocs/scoring.xml	(working copy)
@@ -1,307 +1,354 @@
-<?xml version="1.0"?>
-
-<document>
-    <properties>
-        <author email="gsingers at apache.org">Grant Ingersoll</author>
-        <title>Scoring - Apache Lucene</title>
-    </properties>
-
-    <body>
-
-        <section name="Introduction">
-            <p>Lucene scoring is the heart of why we all love Lucene.  It is blazingly fast and it hides almost all of the complexity from the user.
-                In a nutshell, it works.  At least, that is, until it doesn't work, or doesn't work as one would expect it to
-            work.  Then we are left digging into Lucene internals or asking for help on java-user@lucene.apache.org to figure out why a document with five of our query terms
-            scores lower than a different document with only one of the query terms. </p>
-            <p>While this document won't answer your specific scoring issues, it will, hopefully, point you to the places that can
-            help you figure out the what and why of Lucene scoring.</p>
-            <p>Lucene scoring uses a combination of the
-                <a href="http://en.wikipedia.org/wiki/Vector_Space_Model">Vector Space Model (VSM) of Information
-                    Retrieval</a> and the <a href="http://en.wikipedia.org/wiki/Standard_Boolean_model">Boolean model</a>
-                to determine
-                how relevant a given Document is to a User's query.  In general, the idea behind the VSM is the more
-                times a query term appears in a document relative to
-                the number of times the term appears in all the documents in the collection, the more relevant that
-                document is to the query.  It uses the Boolean model to first narrow down the documents that need to
-                be scored based on the use of boolean logic in the Query specification.  Lucene also adds some
-                capabilities and refinements onto this model to support boolean and fuzzy searching, but it
-                essentially remains a VSM based system at the heart.
-                For some valuable references on VSM and IR in general refer to the
-                <a href="http://wiki.apache.org/jakarta-lucene/InformationRetrieval">Lucene Wiki IR references</a>.
-            </p>
-            <p>The rest of this document will cover <a href="#Scoring">Scoring</a> basics and how to change your
-                <a href="api/org/apache/lucene/search/Similarity.html">Similarity</a>.  Next it will cover ways you can
-                customize the Lucene internals in <a href="#Changing your Scoring -- Expert Level">Changing your Scoring
-                -- Expert Level</a> which gives details on implementing your own
-                <a href="api/org/apache/lucene/search/Query.html">Query</a> class and related functionality.  Finally, we
-                will finish up with some reference material in the <a href="#Appendix">Appendix</a>.
-            </p>
-        </section>
-        <section name="Scoring">
-            <p>Scoring is very much dependent on the way documents are indexed,
-                so it is important to understand indexing (see
-                <a href="gettingstarted.html">Apache Lucene - Getting Started Guide</a>
-                and the Lucene
-                <a href="fileformats.html">file formats</a>
-                before continuing on with this section.)  It is also assumed that readers know how to use the
-                <a href="api/org/apache/lucene/search/Searcher.html#explain(Query query, int doc)">Searcher.explain(Query query, int doc)</a> functionality,
-                which can go a long way in informing why a score is returned.
-            </p>
-            <subsection name="Fields and Documents">
-                <p>In Lucene, the objects we are scoring are
-                    <a href="api/org/apache/lucene/document/Document.html">Documents</a>.  A Document is a collection
-                of
-                    <a href="api/org/apache/lucene/document/Field.html">Fields</a>.  Each Field has semantics about how
-                it is created and stored (i.e. tokenized, untokenized, raw data, compressed, etc.)  It is important to
-                    note that Lucene scoring works on Fields and then combines the results to return Documents.  This is
-                    important because two Documents with the exact same content, but one having the content in two Fields
-                    and the other in one Field will return different scores for the same query due to length normalization
-                    (assumming the
-                    <a href="api/org/apache/lucene/search/DefaultSimilarity.html">DefaultSimilarity</a>
-                    on the Fields).
-                </p>
-            </subsection>
-            <subsection name="Understanding the Scoring Formula">
-                <p>
-                    Lucene's scoring formula computes the score of one document <i>d</i> for a given query <i>q</i> across each
-                    term <i>t</i> that occurs in q.  The score attempts to measure relevance, so the higher the score, the more
-		    relevant document <i>d</i> is to the query <i>q</i>.  This is taken from
-		    <a href="api/org/apache/lucene/search/Similarity.html">Similarity</a>:
-
-                    <div class="formula">
-                        <!-- Anyone know how to specify sigma in Anakia?  It always seems to strip out my numeric character references-->
-                        score(q,d) =
-			<span class="big" id="summation">
-                            sum </span><span class="summation-range">t in q</span><span>(
-                        <A HREF="api/org/apache/lucene/search/Similarity.html#tf(int)">tf</A>
-                        (t in d) *
-                        <A HREF="api/org/apache/lucene/search/Similarity.html#idf(org.apache.lucene.index.Term, org.apache.lucene.search.Searcher)">idf</A>
-                        (t)^2 *
-                        <A HREF="api/org/apache/lucene/search/Query.html#getBoost()">
-                        getBoost
-                        </A>
-                        (t in q) *
-                        getBoost
-                        (t.field in d) *
-                        <A HREF="api/org/apache/lucene/search/Similarity.html#lengthNorm(java.lang.String, int)">
-                            lengthNorm
-                        </A>
-                        (t.field in d) )</span> <span> *
-                        <A HREF="api/org/apache/lucene/search/Similarity.html#coord(int, int)">
-                            coord
-                        </A>
-                        (q,d) *
-                        <A HREF="api/org/apache/lucene/search/Similarity.html#queryNorm(float)">
-                            queryNorm
-                        </A>(sumOfSquaredWeights)</span>
-                    </div>
-                </p>
-                <p>
-                    where
-                    <!-- Anyone know how to specify sigma in Anakia?  It always seems to strip out my numeric character references-->
-                    <div id="#sumOfSquares">
-                        sumOfSquaredWeights =
-                        <span class="big">sum</span><span class="summation-range">t in q</span><span>(
-                        <A HREF="api/org/apache/lucene/search/Similarity.html#idf(org.apache.lucene.index.Term, org.apache.lucene.search.Searcher)">
-                            idf
-                        </A>
-                        (t) *
-                        <A HREF="api/org/apache/lucene/search/Query.html#getBoost()">
-                            getBoost
-                        </A>
-                        (t in q) )^2</span>
-                    </div>
-                </p>
-                <p>
-		This scoring formula is mostly implemented in the
-                    <a href="api/org/apache/lucene/search/TermScorer.html">TermScorer</a> class, where it makes calls to the
-                    <a href="api/org/apache/lucene/search/Similarity.html">Similarity</a> class to retrieve values for the following.  Note that the descriptions apply to <a href="api/org/apache/lucene/search/DefaultSimilarity.html">DefaultSimilarity</a> implementation:
-                    <ol>
-
-                        <li><A HREF="api/org/apache/lucene/search/Similarity.html#tf(int)">tf(t in d)</A> - Term Frequency - The number of times the term <i>t</i> appears in the current document <i>d</i> being scored.  Documents that have more occurrences of a given term receive a higher score.</li>
-
-                        <li><p><A HREF="api/org/apache/lucene/search/Similarity.html#idf(org.apache.lucene.index.Term, org.apache.lucene.search.Searcher)">idf(t)</A> - Inverse Document Frequency - One divided by the number of documents in which the term <i>t</i> appears.  This means rarer terms give higher contribution to the total score.</p></li>
-
-                        <li><p><A HREF="api/org/apache/lucene/search/Query.html#getBoost()">getBoost(t in q)</A> - The boost, specified in the query by the user, that should be applied to this term.  A boost over 1.0 will increase the importance of this term; a boost under 1.0 will decrease its importance.  A boost of 1.0 (the default boost) has no effect.</p></li>
-
-                        <li><p><A HREF="api/org/apache/lucene/search/Similarity.html#lengthNorm(java.lang.String, int)">lengthNorm(t.field in q)</A> - The factor to apply to account for differing lengths in the fields that are being searched.  Typically longer fields return a smaller value.  This means matches against shorter fields receive a higher score than matches against longer fields.</p></li>
-
-                        <li><p><A HREF="api/org/apache/lucene/search/Similarity.html#coord(int, int)">coord(q, d)</A> - Score factor based on how many terms the specified document has in common with the query.  Typically, a document that contains more of the query's terms will receive a higher score than another document with fewer query terms.</p></li>
-
-                        <li><p><A HREF="api/org/apache/lucene/search/Similarity.html#queryNorm(float)">queryNorm(sumOfSquaredWeights)</A> - Factor used to make scores between queries comparable
-                            <span class="highlight-for-editing">GSI: might be interesting to have a note on why this formula was chosen.  I have always understood (but not 100% sure)
-                                that it is not a good idea to compare scores across queries or indexes, so any use of normalization may lead to false assumptions.  However, I also seem
-                            to remember some research on using sum of squares as being somewhat suitable for score comparison.  Anyone have any thoughts here?</span></p></li>
-                    </ol>
-                    Note, the above definitions are summaries of the javadocs which can be accessed by clicking the links in the formula and are merely provided
-                    for context and are not authoratitive.
-                </p>
-            </subsection>
-            <subsection name="The Big Picture">
-                <p>OK, so the tf-idf formula and the
-                    <a href="api/org/apache/lucene/search/Similarity.html">Similarity</a>
-                    is great for understanding the basics of Lucene scoring, but what really drives Lucene scoring are
-                    the use and interactions between the
-                    <a href="api/org/apache/lucene/search/Query.html">Query</a> classes, as created by each application in
-                    response to a user's information need.
-                </p>
-                <p>In this regard, Lucene offers a wide variety of <a href="api/org/apache/lucene/search/Query.html">Query</a> implementations, most of which are in the
-                    <a href="api/org/apache/lucene/search/package-summary.html">org.apache.lucene.search</a> package.
-                    These implementations can be combined in a wide variety of ways to provide complex querying
-                    capabilities along with
-                    information about where matches took place in the document collection. The <a href="#Query Classes">Query</a>
-                    section below 
-                    highlights some of the more important Query classes.  For information on the other ones, see the
-                    <a href="api/org/apache/lucene/search/package-summary.html">package summary</a>.  For details on implementing
-                    your own Query class, see <a href="#Changing your Scoring -- Expert Level">Changing your Scoring --
-                    Expert Level</a> below.
-                </p>
-                <p>Once a Query has been created and submitted to the
-                    <a href="api/org/apache/lucene/search/IndexSearcher.html">IndexSearcher</a>, the scoring process
-                begins.  (See the <a
-                href="#Appendix">Appendix</a> Algorithm section for more notes on the process.)  After some infrastructure setup,
-                control finally passes to the <a href="api/org/apache/lucene/search/Weight.html">Weight</a> implementation and its
-                    <a href="api/org/apache/lucene/search/Scorer.html">Scorer</a> instance.  In the case of any type of
-                    <a href="api/org/apache/lucene/search/BooleanQuery.html">BooleanQuery</a>, scoring is handled by the
-                    <a href="http://svn.apache.org/viewvc/lucene/java/trunk/src/java/org/apache/lucene/search/BooleanQuery.java?view=log">BooleanWeight2</a> (link goes to ViewVC BooleanQuery java code which contains the BooleanWeight2 inner class),
-                    unless the static
-                    <a href="api/org/apache/lucene/search/BooleanQuery.html#setUseScorer14(boolean)">
-                        BooleanQuery#setUseScorer14(boolean)</a> method is set to true,
-                in which case the
-                    <a href="http://svn.apache.org/viewvc/lucene/java/trunk/src/java/org/apache/lucene/search/BooleanQuery.java?view=log">BooleanWeight</a>
-                    (link goes to ViewVC BooleanQuery java code, which contains the BooleanWeight inner class) from the 1.4 version of Lucene is used by default.
-                    See <a href="http://svn.apache.org/repos/asf/lucene/java/trunk/CHANGES.txt">CHANGES.txt</a> under release 1.9 RC1 for more information on choosing which Scorer to use.
-                </p>
-                <p>
-                    Assuming the use of the BooleanWeight2, a
-                    BooleanScorer2 is created by bringing together
-                    all of the
-                    <a href="api/org/apache/lucene/search/Scorer.html">Scorer</a>s from the sub-clauses of the BooleanQuery.
-                    When the BooleanScorer2 is asked to score it delegates its work to an internal Scorer based on the type
-                    of clauses in the Query.  This internal Scorer essentially loops over the sub scorers and sums the scores
-                    provided by each scorer while factoring in the coord() score.
-                    <!-- Do we want to fill in the details of the counting sum scorer, disjunction scorer, etc.? -->
-                </p>
-            </subsection>
-            <subsection name="Query Classes">
-                <p>For information on the Query Classes, refer to the
-                    <a href="api/org/apache/lucene/search/package-summary.html#query">search package javadocs</a>
-                </p>
-            </subsection>
-            <subsection name="Changing Similarity">
-                <p>One of the ways of changing the scoring characteristics of Lucene is to change the similarity factors.  For information on
-                how to do this, see the
-                    <a href="api/org/apache/lucene/search/package-summary.html#changingSimilarity">search package javadocs</a></p>
-            </subsection>
-
-        </section>
-        <section name="Changing your Scoring -- Expert Level">
-            <p>At a much deeper level, one can affect scoring by implementing their own Query classes (and related scoring classes.)  To learn more
-                about how to do this, refer to the
-                <a href="api/org/apache/lucene/search/package-summary.html#scoring">search package javadocs</a>
-            </p>
-        </section>
-
-        <section name="Appendix">
-            <subsection name="Class Diagrams">
-                <p>
-                    <a href="http://wiki.apache.org/jakarta-lucene/KarlWettin?action=AttachFile&amp;do=view&amp;target=search_uml_1.jpg">
-                        Karl Wettin's UML on the Wiki</a>
-                </p>
-            </subsection>
-            <subsection name="Sequence Diagrams">
-                <p class="highlight-for-editing">FILL IN HERE. Volunteers?</p>
-            </subsection>
-            <subsection name="Algorithm" class="highlight-for-editing">
-                <p>GSI Note: This section is mostly my notes on stepping through the Scoring process and serves as
-                    fertilizer for the earlier sections.</p>
-                <p>In the typical search application, a
-                    <a href="api/org/apache/lucene/search/Query.html">Query</a>
-                    is passed to the
-                    <a
-                            href="api/org/apache/lucene/search/Searcher.html">Searcher</a>
-                    , beginning the scoring process.
-                </p>
-                <p>Once inside the Searcher, a
-                    <a href="api/org/apache/lucene/search/Hits.html">Hits</a>
-                    object is constructed, which handles the scoring and caching of the search results.
-                    The Hits constructor stores references to three or four important objects:
-                    <ol>
-                        <li>The
-                            <a href="api/org/apache/lucene/search/Weight.html">Weight</a>
-                            object of the Query. The Weight object is an internal representation of the Query that
-                            allows the Query to be reused by the Searcher.
-                        </li>
-                        <li>The Searcher that initiated the call.</li>
-                        <li>A
-                            <a href="api/org/apache/lucene/search/Filter.html">Filter</a>
-                            for limiting the result set. Note, the Filter may be null.
-                        </li>
-                        <li>A
-                            <a href="api/org/apache/lucene/search/Sort.html">Sort</a>
-                            object for specifying how to sort the results if the standard score based sort method is not
-                            desired.
-                        </li>
-                    </ol>
-                </p>
-                <p>Now that the Hits object has been initialized, it begins the process of identifying documents that
-                    match the query by calling getMoreDocs method. Assuming we are not sorting (since sorting doesn't
-                    effect the raw Lucene score),
-                    we call on the "expert" search method of the Searcher, passing in our
-                    <a href="api/org/apache/lucene/search/Weight.html">Weight</a>
-                    object,
-                    <a href="api/org/apache/lucene/search/Filter.html">Filter</a>
-                    and the number of results we want. This method
-                    returns a
-                    <a href="api/org/apache/lucene/search/TopDocs.html">TopDocs</a>
-                    object, which is an internal collection of search results.
-                    The Searcher creates a
-                    <a href="api/org/apache/lucene/search/TopDocCollector.html">TopDocCollector</a>
-                    and passes it along with the Weight, Filter to another expert search method (for more on the
-                    <a href="api/org/apache/lucene/search/HitCollector.html">HitCollector</a>
-                    mechanism, see
-                    <a href="api/org/apache/lucene/search/Searcher.html">Searcher</a>
-                    .) The TopDocCollector uses a
-                    <a href="api/org/apache/lucene/util/PriorityQueue.html">PriorityQueue</a>
-                    to collect the top results for the search.
-                </p>
-                <p>If a Filter is being used, some initial setup is done to determine which docs to include. Otherwise,
-                    we ask the Weight for
-                    a
-                    <a href="api/org/apache/lucene/search/Scorer.html">Scorer</a>
-                    for the
-                    <a href="api/org/apache/lucene/index/IndexReader.html">IndexReader</a>
-                    of the current searcher and we proceed by
-                    calling the score method on the
-                    <a href="api/org/apache/lucene/search/Scorer.html">Scorer</a>
-                    .
-                </p>
-                <p>At last, we are actually going to score some documents. The score method takes in the HitCollector
-                    (most likely the TopDocCollector) and does its business.
-                    Of course, here is where things get involved. The
-                    <a href="api/org/apache/lucene/search/Scorer.html">Scorer</a>
-                    that is returned by the
-                    <a href="api/org/apache/lucene/search/Weight.html">Weight</a>
-                    object depends on what type of Query was submitted. In most real world applications with multiple
-                    query terms,
-                    the
-                    <a href="api/org/apache/lucene/search/Scorer.html">Scorer</a>
-                    is going to be a
-                    <a href="http://svn.apache.org/viewvc/lucene/java/trunk/src/java/org/apache/lucene/search/BooleanScorer2.java?view=log">BooleanScorer2</a>
-                    (see the section on customizing your scoring for info on changing this.)
-
-                </p>
-                <p>Assuming a BooleanScorer2 scorer, we first initialize the Coordinator, which is used to apply the
-                    coord() factor. We then
-                    get a internal Scorer based on the required, optional and prohibited parts of the query.
-                    Using this internal Scorer, the BooleanScorer2 then proceeds
-                    into a while loop based on the Scorer#next() method. The next() method advances to the next document
-                    matching the query. This is an
-                    abstract method in the Scorer class and is thus overriden by all derived
-                    implementations.  <!-- DOUBLE CHECK THIS -->If you have a simple OR query
-                    your internal Scorer is most likely a DisjunctionSumScorer, which essentially combines the scorers
-                    from the sub scorers of the OR'd terms.</p>
-            </subsection>
-        </section>
-    </body>
+<?xml version="1.0"?>
+
+<document>
+    <properties>
+        <author email="gsingers at apache.org">Grant Ingersoll</author>
+        <title>Scoring - Apache Lucene</title>
+    </properties>
+
+    <body>
+
+        <section name="Introduction">
+            <p>Lucene scoring is the heart of why we all love Lucene.  It is blazingly fast and it hides almost all of the complexity from the user.
+                In a nutshell, it works.  At least, that is, until it doesn't work, or doesn't work as one would expect it to
+            work.  Then we are left digging into Lucene internals or asking for help on java-user@lucene.apache.org to figure out why a document with five of our query terms
+            scores lower than a different document with only one of the query terms. </p>
+            <p>While this document won't answer your specific scoring issues, it will, hopefully, point you to the places that can
+            help you figure out the what and why of Lucene scoring.</p>
+            <p>Lucene scoring uses a combination of the
+                <a href="http://en.wikipedia.org/wiki/Vector_Space_Model">Vector Space Model (VSM) of Information
+                    Retrieval</a> and the <a href="http://en.wikipedia.org/wiki/Standard_Boolean_model">Boolean model</a>
+                to determine
+                how relevant a given Document is to a User's query.  In general, the idea behind the VSM is the more
+                times a query term appears in a document relative to
+                the number of times the term appears in all the documents in the collection, the more relevant that
+                document is to the query.  It uses the Boolean model to first narrow down the documents that need to
+                be scored based on the use of boolean logic in the Query specification.  Lucene also adds some
+                capabilities and refinements onto this model to support boolean and fuzzy searching, but it
+                essentially remains a VSM based system at the heart.
+                For some valuable references on VSM and IR in general refer to the
+                <a href="http://wiki.apache.org/jakarta-lucene/InformationRetrieval">Lucene Wiki IR references</a>.
+            </p>
+            <p>The rest of this document will cover <a href="#Scoring">Scoring</a> basics and how to change your
+                <a href="api/org/apache/lucene/search/Similarity.html">Similarity</a>.  Next it will cover ways you can
+                customize the Lucene internals in <a href="#Changing your Scoring -- Expert Level">Changing your Scoring
+                -- Expert Level</a> which gives details on implementing your own
+                <a href="api/org/apache/lucene/search/Query.html">Query</a> class and related functionality.  Finally, we
+                will finish up with some reference material in the <a href="#Appendix">Appendix</a>.
+            </p>
+        </section>
+        <section name="Scoring">
+            <p>Scoring is very much dependent on the way documents are indexed,
+                so it is important to understand indexing (see
+                <a href="gettingstarted.html">Apache Lucene - Getting Started Guide</a>
+                and the Lucene
+                <a href="fileformats.html">file formats</a>
+                before continuing on with this section.)  It is also assumed that readers know how to use the
+                <a href="api/org/apache/lucene/search/Searcher.html#explain(Query query, int doc)">Searcher.explain(Query query, int doc)</a> functionality,
+                which can go a long way in informing why a score is returned.
+            </p>
+            <subsection name="Fields and Documents">
+                <p>In Lucene, the objects we are scoring are
+                    <a href="api/org/apache/lucene/document/Document.html">Documents</a>.  A Document is a collection
+                of
+                    <a href="api/org/apache/lucene/document/Field.html">Fields</a>.  Each Field has semantics about how
+                it is created and stored (i.e. tokenized, untokenized, raw data, compressed, etc.)  It is important to
+                    note that Lucene scoring works on Fields and then combines the results to return Documents.  This is
+                    important because two Documents with the exact same content, but one having the content in two Fields
+                    and the other in one Field will return different scores for the same query due to length normalization
+                    (assumming the
+                    <a href="api/org/apache/lucene/search/DefaultSimilarity.html">DefaultSimilarity</a>
+                    on the Fields).
+                </p>
+            </subsection>
+            <subsection name="Search Results Boosts">
+                <p>Lucene allows influencing search results by "boosting" in more than one level:
+                  <ul>
+                    <li><b>Document level boosting</b>
+                    - while indexing - by calling
+                    <a href="api/org/apache/lucene/document/Document.html#setBoost(float)">document.setBoost()</a>
+                    before a document is added to the index.
+                    </li>
+                    <li><b>Document's Field level boosting</b>
+                    - while indexing - by calling
+                    <a href="api/org/apache/lucene/document/Fieldable.html#setBoost(float)">field.setBoost()</a>
+                    before adding a field to the document (and before adding the document to the index).
+                    </li>
+                    <li><b>Query level boosting</b>
+                     - during search, by setting a boost on a query clause, calling
+                     <a href="api/org/apache/lucene/search/Query.html#setBoost(float)">Query.setBoost()</a>.
+                    </li>
+                  </ul>
+                </p>
+                <p>Indexing time boosts are preprocessed for storage efficiency and written to
+                  the directory (when writing the document) in a single byte (!) as follows:
+                  For each field of a document, all boosts of that field
+                  (i.e. all boosts under the same field name in that doc) are multiplied.
+                  The result is multiplied by the boost of the document,
+                  and also multiplied by a "field length norm" value
+                  that represents the length of that field in that doc
+                  (so shorter fields are automatically boosted up).
+                  The result is decoded as a single byte
+                  (with some precision loss of course) and stored in the directory.
+                  The similarity object in effect at indexing computes the length-norm of the field.
+                </p>
+                <p>This composition of 1-byte representation of norms
+                (that is, indexing time multiplication of field boosts &amp; doc boost &amp; field-length-norm)
+                is nicely described in
+                <a href="api/org/apache/lucene/document/Fieldable.html#setBoost(float)">Fieldable.setBoost()</a>.
+                </p>
+                <p>Encoding and decoding of the resulted float norm in a single byte are done by the
+                static methods of the class Similarity:
+                <a href="api/org/apache/lucene/search/Similarity.html#encodeNorm(float)">encodeNorm()</a> and
+                <a href="api/org/apache/lucene/search/Similarity.html#decodeNorm(byte)">decodeNorm()</a>.
+                Due to loss of precision, it is not guaranteed that decode(encode(x)) = x,
+                e.g. decode(encode(0.89)) = 0.75.
+                At scoring (search) time, this norm is brought into the score of document
+                as <b>indexBoost</b>, as shown by the formula in
+                <a href="api/org/apache/lucene/search/Similarity.html">Similarity</a>.
+                </p>
+            </subsection>
+            <subsection name="Understanding the Scoring Formula">
+                <p>
+                    Lucene's scoring formula computes the score of one document <i>d</i> for a given query <i>q</i> across each
+                    term <i>t</i> that occurs in q.  The score attempts to measure relevance, so the higher the score, the more
+                    relevant document <i>d</i> is to the query <i>q</i>.  This is taken from
+                    <a href="api/org/apache/lucene/search/Similarity.html">Similarity</a>:
+
+                    <div class="formula">
+                        <!-- Anyone know how to specify sigma in Anakia?  It always seems to strip out my numeric character references-->
+                        score(q,d) =
+                        <span class="big" id="summation">
+                            sum </span><span class="summation-range">t in q</span><span>(
+                        <A HREF="api/org/apache/lucene/search/Similarity.html#tf(int)">tf</A>
+                        (t in d) *
+                        <A HREF="api/org/apache/lucene/search/Similarity.html#idf(org.apache.lucene.index.Term, org.apache.lucene.search.Searcher)">idf</A>
+                        (t)^2 *
+                        <A HREF="api/org/apache/lucene/search/Query.html#getBoost()">
+                        getBoost
+                        </A>
+                        (t in q) *
+                        getBoost
+                        (t.field in d) *
+                        <A HREF="api/org/apache/lucene/search/Similarity.html#lengthNorm(java.lang.String, int)">
+                            lengthNorm
+                        </A>
+                        (t.field in d) )</span> <span> *
+                        <A HREF="api/org/apache/lucene/search/Similarity.html#coord(int, int)">
+                            coord
+                        </A>
+                        (q,d) *
+                        <A HREF="api/org/apache/lucene/search/Similarity.html#queryNorm(float)">
+                            queryNorm
+                        </A>(sumOfSquaredWeights)</span>
+                    </div>
+                </p>
+                <p>
+                    where
+                    <!-- Anyone know how to specify sigma in Anakia?  It always seems to strip out my numeric character references-->
+                    <div id="#sumOfSquares">
+                        sumOfSquaredWeights =
+                        <span class="big">sum</span><span class="summation-range">t in q</span><span>(
+                        <A HREF="api/org/apache/lucene/search/Similarity.html#idf(org.apache.lucene.index.Term, org.apache.lucene.search.Searcher)">
+                            idf
+                        </A>
+                        (t) *
+                        <A HREF="api/org/apache/lucene/search/Query.html#getBoost()">
+                            getBoost
+                        </A>
+                        (t in q) )^2</span>
+                    </div>
+                </p>
+                <p>
+                This scoring formula is mostly implemented in the
+                    <a href="api/org/apache/lucene/search/TermScorer.html">TermScorer</a> class, where it makes calls to the
+                    <a href="api/org/apache/lucene/search/Similarity.html">Similarity</a> class to retrieve values for the following.  Note that the descriptions apply to <a href="api/org/apache/lucene/search/DefaultSimilarity.html">DefaultSimilarity</a> implementation:
+                    <ol>
+
+                        <li><A HREF="api/org/apache/lucene/search/Similarity.html#tf(int)">tf(t in d)</A> - Term Frequency - The number of times the term <i>t</i> appears in the current document <i>d</i> being scored.  Documents that have more occurrences of a given term receive a higher score.</li>
+
+                        <li><p><A HREF="api/org/apache/lucene/search/Similarity.html#idf(org.apache.lucene.index.Term, org.apache.lucene.search.Searcher)">idf(t)</A> - Inverse Document Frequency - One divided by the number of documents in which the term <i>t</i> appears.  This means rarer terms give higher contribution to the total score.</p></li>
+
+                        <li><p><A HREF="api/org/apache/lucene/search/Query.html#getBoost()">getBoost(t in q)</A> - The boost, specified in the query by the user, that should be applied to this term.  A boost over 1.0 will increase the importance of this term; a boost under 1.0 will decrease its importance.  A boost of 1.0 (the default boost) has no effect.</p></li>
+
+                        <li><p><A HREF="api/org/apache/lucene/search/Similarity.html#lengthNorm(java.lang.String, int)">lengthNorm(t.field in q)</A> - The factor to apply to account for differing lengths in the fields that are being searched.  Typically longer fields return a smaller value.  This means matches against shorter fields receive a higher score than matches against longer fields.</p></li>
+
+                        <li><p><A HREF="api/org/apache/lucene/search/Similarity.html#coord(int, int)">coord(q, d)</A> - Score factor based on how many terms the specified document has in common with the query.  Typically, a document that contains more of the query's terms will receive a higher score than another document with fewer query terms.</p></li>
+
+                        <li><p><A HREF="api/org/apache/lucene/search/Similarity.html#queryNorm(float)">queryNorm(sumOfSquaredWeights)</A> - Factor used to make scores between queries comparable
+                            <span class="highlight-for-editing">GSI: might be interesting to have a note on why this formula was chosen.  I have always understood (but not 100% sure)
+                                that it is not a good idea to compare scores across queries or indexes, so any use of normalization may lead to false assumptions.  However, I also seem
+                            to remember some research on using sum of squares as being somewhat suitable for score comparison.  Anyone have any thoughts here?</span></p></li>
+                    </ol>
+                    Note, the above definitions are summaries of the javadocs which can be accessed by clicking the links in the formula and are merely provided
+                    for context and are not authoratitive.
+                </p>
+            </subsection>
+            <subsection name="The Big Picture">
+                <p>OK, so the tf-idf formula and the
+                    <a href="api/org/apache/lucene/search/Similarity.html">Similarity</a>
+                    is great for understanding the basics of Lucene scoring, but what really drives Lucene scoring are
+                    the use and interactions between the
+                    <a href="api/org/apache/lucene/search/Query.html">Query</a> classes, as created by each application in
+                    response to a user's information need.
+                </p>
+                <p>In this regard, Lucene offers a wide variety of <a href="api/org/apache/lucene/search/Query.html">Query</a> implementations, most of which are in the
+                    <a href="api/org/apache/lucene/search/package-summary.html">org.apache.lucene.search</a> package.
+                    These implementations can be combined in a wide variety of ways to provide complex querying
+                    capabilities along with
+                    information about where matches took place in the document collection. The <a href="#Query Classes">Query</a>
+                    section below
+                    highlights some of the more important Query classes.  For information on the other ones, see the
+                    <a href="api/org/apache/lucene/search/package-summary.html">package summary</a>.  For details on implementing
+                    your own Query class, see <a href="#Changing your Scoring -- Expert Level">Changing your Scoring --
+                    Expert Level</a> below.
+                </p>
+                <p>Once a Query has been created and submitted to the
+                    <a href="api/org/apache/lucene/search/IndexSearcher.html">IndexSearcher</a>, the scoring process
+                begins.  (See the <a
+                href="#Appendix">Appendix</a> Algorithm section for more notes on the process.)  After some infrastructure setup,
+                control finally passes to the <a href="api/org/apache/lucene/search/Weight.html">Weight</a> implementation and its
+                    <a href="api/org/apache/lucene/search/Scorer.html">Scorer</a> instance.  In the case of any type of
+                    <a href="api/org/apache/lucene/search/BooleanQuery.html">BooleanQuery</a>, scoring is handled by the
+                    <a href="http://svn.apache.org/viewvc/lucene/java/trunk/src/java/org/apache/lucene/search/BooleanQuery.java?view=log">BooleanWeight2</a> (link goes to ViewVC BooleanQuery java code which contains the BooleanWeight2 inner class),
+                    unless the static
+                    <a href="api/org/apache/lucene/search/BooleanQuery.html#setUseScorer14(boolean)">
+                        BooleanQuery#setUseScorer14(boolean)</a> method is set to true,
+                in which case the
+                    <a href="http://svn.apache.org/viewvc/lucene/java/trunk/src/java/org/apache/lucene/search/BooleanQuery.java?view=log">BooleanWeight</a>
+                    (link goes to ViewVC BooleanQuery java code, which contains the BooleanWeight inner class) from the 1.4 version of Lucene is used by default.
+                    See <a href="http://svn.apache.org/repos/asf/lucene/java/trunk/CHANGES.txt">CHANGES.txt</a> under release 1.9 RC1 for more information on choosing which Scorer to use.
+                </p>
+                <p>
+                    Assuming the use of the BooleanWeight2, a
+                    BooleanScorer2 is created by bringing together
+                    all of the
+                    <a href="api/org/apache/lucene/search/Scorer.html">Scorer</a>s from the sub-clauses of the BooleanQuery.
+                    When the BooleanScorer2 is asked to score it delegates its work to an internal Scorer based on the type
+                    of clauses in the Query.  This internal Scorer essentially loops over the sub scorers and sums the scores
+                    provided by each scorer while factoring in the coord() score.
+                    <!-- Do we want to fill in the details of the counting sum scorer, disjunction scorer, etc.? -->
+                </p>
+            </subsection>
+            <subsection name="Query Classes">
+                <p>For information on the Query Classes, refer to the
+                    <a href="api/org/apache/lucene/search/package-summary.html#query">search package javadocs</a>
+                </p>
+            </subsection>
+            <subsection name="Changing Similarity">
+                <p>One of the ways of changing the scoring characteristics of Lucene is to change the similarity factors.  For information on
+                how to do this, see the
+                    <a href="api/org/apache/lucene/search/package-summary.html#changingSimilarity">search package javadocs</a></p>
+            </subsection>
+
+        </section>
+        <section name="Changing your Scoring -- Expert Level">
+            <p>At a much deeper level, one can affect scoring by implementing their own Query classes (and related scoring classes.)  To learn more
+                about how to do this, refer to the
+                <a href="api/org/apache/lucene/search/package-summary.html#scoring">search package javadocs</a>
+            </p>
+        </section>
+
+        <section name="Appendix">
+            <subsection name="Class Diagrams">
+                <p>
+                    <a href="http://wiki.apache.org/jakarta-lucene/KarlWettin?action=AttachFile&amp;do=view&amp;target=search_uml_1.jpg">
+                        Karl Wettin's UML on the Wiki</a>
+                </p>
+            </subsection>
+            <subsection name="Sequence Diagrams">
+                <p class="highlight-for-editing">FILL IN HERE. Volunteers?</p>
+            </subsection>
+            <subsection name="Algorithm" class="highlight-for-editing">
+                <p>GSI Note: This section is mostly my notes on stepping through the Scoring process and serves as
+                    fertilizer for the earlier sections.</p>
+                <p>In the typical search application, a
+                    <a href="api/org/apache/lucene/search/Query.html">Query</a>
+                    is passed to the
+                    <a
+                            href="api/org/apache/lucene/search/Searcher.html">Searcher</a>
+                    , beginning the scoring process.
+                </p>
+                <p>Once inside the Searcher, a
+                    <a href="api/org/apache/lucene/search/Hits.html">Hits</a>
+                    object is constructed, which handles the scoring and caching of the search results.
+                    The Hits constructor stores references to three or four important objects:
+                    <ol>
+                        <li>The
+                            <a href="api/org/apache/lucene/search/Weight.html">Weight</a>
+                            object of the Query. The Weight object is an internal representation of the Query that
+                            allows the Query to be reused by the Searcher.
+                        </li>
+                        <li>The Searcher that initiated the call.</li>
+                        <li>A
+                            <a href="api/org/apache/lucene/search/Filter.html">Filter</a>
+                            for limiting the result set. Note, the Filter may be null.
+                        </li>
+                        <li>A
+                            <a href="api/org/apache/lucene/search/Sort.html">Sort</a>
+                            object for specifying how to sort the results if the standard score based sort method is not
+                            desired.
+                        </li>
+                    </ol>
+                </p>
+                <p>Now that the Hits object has been initialized, it begins the process of identifying documents that
+                    match the query by calling getMoreDocs method. Assuming we are not sorting (since sorting doesn't
+                    effect the raw Lucene score),
+                    we call on the "expert" search method of the Searcher, passing in our
+                    <a href="api/org/apache/lucene/search/Weight.html">Weight</a>
+                    object,
+                    <a href="api/org/apache/lucene/search/Filter.html">Filter</a>
+                    and the number of results we want. This method
+                    returns a
+                    <a href="api/org/apache/lucene/search/TopDocs.html">TopDocs</a>
+                    object, which is an internal collection of search results.
+                    The Searcher creates a
+                    <a href="api/org/apache/lucene/search/TopDocCollector.html">TopDocCollector</a>
+                    and passes it along with the Weight, Filter to another expert search method (for more on the
+                    <a href="api/org/apache/lucene/search/HitCollector.html">HitCollector</a>
+                    mechanism, see
+                    <a href="api/org/apache/lucene/search/Searcher.html">Searcher</a>
+                    .) The TopDocCollector uses a
+                    <a href="api/org/apache/lucene/util/PriorityQueue.html">PriorityQueue</a>
+                    to collect the top results for the search.
+                </p>
+                <p>If a Filter is being used, some initial setup is done to determine which docs to include. Otherwise,
+                    we ask the Weight for
+                    a
+                    <a href="api/org/apache/lucene/search/Scorer.html">Scorer</a>
+                    for the
+                    <a href="api/org/apache/lucene/index/IndexReader.html">IndexReader</a>
+                    of the current searcher and we proceed by
+                    calling the score method on the
+                    <a href="api/org/apache/lucene/search/Scorer.html">Scorer</a>
+                    .
+                </p>
+                <p>At last, we are actually going to score some documents. The score method takes in the HitCollector
+                    (most likely the TopDocCollector) and does its business.
+                    Of course, here is where things get involved. The
+                    <a href="api/org/apache/lucene/search/Scorer.html">Scorer</a>
+                    that is returned by the
+                    <a href="api/org/apache/lucene/search/Weight.html">Weight</a>
+                    object depends on what type of Query was submitted. In most real world applications with multiple
+                    query terms,
+                    the
+                    <a href="api/org/apache/lucene/search/Scorer.html">Scorer</a>
+                    is going to be a
+                    <a href="http://svn.apache.org/viewvc/lucene/java/trunk/src/java/org/apache/lucene/search/BooleanScorer2.java?view=log">BooleanScorer2</a>
+                    (see the section on customizing your scoring for info on changing this.)
+
+                </p>
+                <p>Assuming a BooleanScorer2 scorer, we first initialize the Coordinator, which is used to apply the
+                    coord() factor. We then
+                    get a internal Scorer based on the required, optional and prohibited parts of the query.
+                    Using this internal Scorer, the BooleanScorer2 then proceeds
+                    into a while loop based on the Scorer#next() method. The next() method advances to the next document
+                    matching the query. This is an
+                    abstract method in the Scorer class and is thus overriden by all derived
+                    implementations.  <!-- DOUBLE CHECK THIS -->If you have a simple OR query
+                    your internal Scorer is most likely a DisjunctionSumScorer, which essentially combines the scorers
+                    from the sub scorers of the OR'd terms.</p>
+            </subsection>
+        </section>
+    </body>
 </document>
\ No newline at end of file
