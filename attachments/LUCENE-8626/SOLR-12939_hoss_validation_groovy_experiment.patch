diff --git a/lucene/common-build.xml b/lucene/common-build.xml
index c9463ea..584cd00 100644
--- a/lucene/common-build.xml
+++ b/lucene/common-build.xml
@@ -2475,6 +2475,23 @@ ${ant.project.name}.test.dependencies=${test.classpath.list}
     <groovy classpathref="markdown.classpath" src="${common.dir}/tools/src/groovy/install-markdown-filter.groovy"/>
     <property name="markdown.loaded" value="true"/>
   </target>
+
+  <!-- nocommit: hook into precommit -->
+    <!-- nocommit: at a stamp file and combine with an uptodate dep task to reduce redundency -->
+  <target xmlns:ivy="antlib:org.apache.ivy.ant" name="validate-test-naming" depends="ivy-availability-check,ivy-configure,resolve-groovy,compile-test"
+    description="Validates that Test class naming conventions are obeyed">
+    <loadproperties prefix="ivyversions" srcFile="${common.dir}/ivy-versions.properties"/>
+    <!-- nocommit: is this "ok" even though guava isn't a lucene-core dep? -->
+    <!-- nocommit: if dep is bad idea, could change the code to roll our own dir/classfile walking / loading-->
+    <ivy:cachepath organisation="com.google.guava" module="guava" revision="${ivyversions./com.google.guava/guava}"
+                   inline="true" conf="default" transitive="true" log="download-only" pathid="guava.classpath"/>
+    <path id="validate.test.naming.classpath">
+      <path refid="guava.classpath"/>
+      <path refid="test.classpath"/>
+    </path>
+    <groovy taskname="validate-test-naming" classpathref="validate.test.naming.classpath"
+            src="${common.dir}/tools/src/groovy/validate-test-naming-convention.groovy"/>
+  </target>
   
   <!-- markdown macro: Before using depend on the target "resolve-markdown" -->
   
diff --git a/lucene/tools/src/groovy/validate-test-naming-convention.groovy b/lucene/tools/src/groovy/validate-test-naming-convention.groovy
new file mode 100644
index 0000000..e655b90
--- /dev/null
+++ b/lucene/tools/src/groovy/validate-test-naming-convention.groovy
@@ -0,0 +1,98 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/** Task script that is called by Ant's common-build.xml file:
+ * nocommit: jdocs
+ */
+
+import java.util.regex.*;
+import java.lang.reflect.Modifier;
+
+import org.apache.tools.ant.Project;
+import org.apache.tools.ant.BuildException;
+
+import com.google.common.reflect.ClassPath;
+
+Pattern testPattern = Pattern.compile(".*Test.*"); // nocommit: bikeshed this
+File inputDir = new File(properties['build.dir'], 'classes/test');
+URL inputURL = inputDir.toURI().toURL();
+
+// nocommit: not sure why, but if we're not explicit about the parent classpath, the default is wrong?
+// nocommit: either i'm forgetting something basic, or the groovy/ant hooks result in a weird context classpath?
+ClassLoader loader = new URLClassLoader( (URL[])[ inputURL ], this.getClass().getClassLoader() );
+ClassPath cp = ClassPath.from( loader );
+
+// nocommit: instead of looking for LuceneTestCase.isAssignable(clazz) ...
+// nocommit: maybe look for clazz.isAnnotationPresent(org.junit.runner.RunWith) ?
+Class LUCENE_TEST_CASE = Class.forName("org.apache.lucene.util.LuceneTestCase");
+
+int totalClasses = 0;
+int problematicClasses = 0;
+
+for (ci in cp.getTopLevelClasses()) {
+  // ignore any (dependent) classes in the ClassPath that don't come from our inputDir...
+  if (ci.url().toString().startsWith(inputURL.toString())) {
+    totalClasses++;
+
+    boolean isTestName = testPattern.matcher(ci.getSimpleName()).matches();
+    //task.log("nocommit: " + (isTestName ? " TEST" : "  NOT") +" - $ci ", Project.MSG_INFO);
+
+
+    // nocommit: not sure why both of these have problems with...
+    // nocommit: DocumentBuilderTest using DocumentBuilder.MIN_LENGTH_TO_MOVE_LAST
+    //
+    /// home/hossman/lucene/dev/lucene/common-build.xml:2493: java.lang.IllegalAccessError: tried to access field org.apache.solr.update.DocumentBuilder.MIN_LENGTH_TO_MOVE_LAST from class org.apache.solr.update.DocumentBuilderTest
+    //
+    Class clazz = Class.forName(ci.getName(), true, loader);
+    // nocommit: // Class clazz = ci.load();
+    
+    boolean bad = false;
+
+    // nocommit: should we support a special class annotation to allow a class to break the rules?
+
+    if (LUCENE_TEST_CASE.isAssignableFrom(clazz)) {
+      if (Modifier.isAbstract(clazz.getModifiers())) {
+        if (isTestName) {
+          bad = true;
+          task.log("$clazz uses the test name rules but is abstract", Project.MSG_ERR);
+        }
+      } else if (! isTestName ) {
+        bad = true;
+        task.log("$clazz is a non-abstract impl of LuceneTestCase, but does not obey the test naming rules", Project.MSG_ERR);
+      }
+      
+      // nocommit: what else to check for?
+      // nocommit: fail if non-abstract but no runable test methods?
+      
+    } else {
+      if (isTestName) {
+        bad = true;
+        task.log("$clazz uses the test name convention but does not extend LuceneTestCase", Project.MSG_ERR);
+      }
+
+      // nocommit: what else to check for?
+    }
+    if (bad) problematicClasses++;
+  }
+}
+
+task.log("Looked at $totalClasses top level classes in $inputDir." , Project.MSG_INFO);
+if (0 < problematicClasses) {
+  throw new BuildException(String.format(Locale.ENGLISH, 'Found %d classes with problems', problematicClasses));
+                                         
+}
+ 
