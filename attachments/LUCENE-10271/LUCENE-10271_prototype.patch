diff --git a/lucene/core/src/java/org/apache/lucene/index/CheckIndex.java b/lucene/core/src/java/org/apache/lucene/index/CheckIndex.java
index 285bed28a6a..6dcfea44044 100644
--- a/lucene/core/src/java/org/apache/lucene/index/CheckIndex.java
+++ b/lucene/core/src/java/org/apache/lucene/index/CheckIndex.java
@@ -1287,7 +1287,14 @@ public final class CheckIndex implements Closeable {
       }
       for (FieldInfo info : reader.getFieldInfos()) {
         if (info.hasNorms()) {
-          checkNumericDocValues(info.name, normsReader.getNorms(info), normsReader.getNorms(info));
+          int expectedCount = reader.getDocCount(info.name);
+          int actualCount = checkNumericDocValues(info.name, normsReader.getNorms(info), normsReader.getNorms(info));
+          // before lucene 10, norms were inconsistent with postings, so we can't check
+          if (reader.getMetaData().getCreatedVersionMajor() >= 10) {
+            if (actualCount != expectedCount) {
+              throw new CheckIndexException("actual norm count: " + actualCount + " but expected: " + expectedCount);
+            }
+          }
           ++status.totFields;
         }
       }
@@ -3408,7 +3415,7 @@ public final class CheckIndex implements Closeable {
     }
   }
 
-  private static void checkNumericDocValues(
+  private static int checkNumericDocValues(
       String fieldName, NumericDocValues ndv, NumericDocValues ndv2) throws IOException {
     if (ndv.docID() != -1) {
       throw new CheckIndexException(
@@ -3418,6 +3425,7 @@ public final class CheckIndex implements Closeable {
               + ndv.docID());
     }
     // TODO: we could add stats to DVs, e.g. total doc count w/ a value for this field
+    int count = 0;
     for (int doc = ndv.nextDoc(); doc != NO_MORE_DOCS; doc = ndv.nextDoc()) {
       long value = ndv.longValue();
 
@@ -3429,7 +3437,9 @@ public final class CheckIndex implements Closeable {
         throw new CheckIndexException(
             "advanceExact reports different value: " + value + " != " + value2);
       }
+      count++;
     }
+    return count;
   }
 
   private static void checkDocValues(
diff --git a/lucene/core/src/java/org/apache/lucene/index/IndexingChain.java b/lucene/core/src/java/org/apache/lucene/index/IndexingChain.java
index c5cfea37b0d..6942c4ce0f3 100644
--- a/lucene/core/src/java/org/apache/lucene/index/IndexingChain.java
+++ b/lucene/core/src/java/org/apache/lucene/index/IndexingChain.java
@@ -1097,6 +1097,31 @@ final class IndexingChain implements Accountable {
     }
 
     public void finish(int docID) throws IOException {
+      // behave buggy if the index was created with an old version
+      // remove this when Lucene 9 indexes are no longer supported
+      if (indexCreatedVersionMajor < 10) {
+        finishLucene9(docID);
+        return;
+      }
+      if (fieldInfo.omitsNorms() == false) {
+        if (invertState.length > 0) {
+          long normValue = similarity.computeNorm(invertState);
+          if (normValue == 0) {
+            throw new IllegalStateException(
+                "Similarity " + similarity + " return 0 for non-empty field");
+          }
+          norms.addValue(docID, normValue);
+        }
+      }
+      termsHashPerField.finish();
+    }
+    
+    /** 
+     * @deprecated only for writing to old indexes
+     * remove this when Lucene 9 indexes are no longer supported
+     */
+    @Deprecated
+    private void finishLucene9(int docID) throws IOException {
       if (fieldInfo.omitsNorms() == false) {
         long normValue;
         if (invertState.length == 0) {
