Index: lucene/analysis/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer.java
===================================================================
--- lucene/analysis/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer.java	(revision 1672106)
+++ lucene/analysis/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer.java	(working copy)
@@ -144,7 +144,7 @@
       Terms terms = MultiFields.getTerms(indexReader, field);
       CharsRefBuilder spare = new CharsRefBuilder();
       if (terms != null) {
-        TermsEnum te = terms.iterator(null);
+        TermsEnum te = terms.iterator();
         BytesRef text;
         while ((text = te.next()) != null) {
           if (te.docFreq() > maxDocFreq) {
Index: lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter.java
===================================================================
--- lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter.java	(revision 1672106)
+++ lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter.java	(working copy)
@@ -108,7 +108,7 @@
     IndexReader r = DirectoryReader.open(dir);
     Terms vector = r.getTermVectors(0).terms("field");
     assertEquals(1, vector.size());
-    TermsEnum termsEnum = vector.iterator(null);
+    TermsEnum termsEnum = vector.iterator();
     termsEnum.next();
     assertEquals(2, termsEnum.totalTermFreq());
     PostingsEnum positions = termsEnum.postings(null, null, PostingsEnum.ALL);
Index: lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility.java
===================================================================
--- lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility.java	(revision 1672106)
+++ lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility.java	(working copy)
@@ -948,7 +948,7 @@
     for (String name : oldNames) {
       Directory dir = oldIndexDirs.get(name);
       IndexReader r = DirectoryReader.open(dir);
-      TermsEnum terms = MultiFields.getFields(r).terms("content").iterator(null);
+      TermsEnum terms = MultiFields.getFields(r).terms("content").iterator();
       BytesRef t = terms.next();
       assertNotNull(t);
 
@@ -1063,7 +1063,7 @@
       
       // check decoding of terms
       Terms terms = MultiFields.getTerms(searcher.getIndexReader(), "trieInt");
-      TermsEnum termsEnum = NumericUtils.filterPrefixCodedInts(terms.iterator(null));
+      TermsEnum termsEnum = NumericUtils.filterPrefixCodedInts(terms.iterator());
       while (termsEnum.next() != null) {
         int val = NumericUtils.prefixCodedToInt(termsEnum.term());
         assertTrue("value in id bounds", val >= 0 && val < 35);
@@ -1070,7 +1070,7 @@
       }
       
       terms = MultiFields.getTerms(searcher.getIndexReader(), "trieLong");
-      termsEnum = NumericUtils.filterPrefixCodedLongs(terms.iterator(null));
+      termsEnum = NumericUtils.filterPrefixCodedLongs(terms.iterator());
       while (termsEnum.next() != null) {
         long val = NumericUtils.prefixCodedToLong(termsEnum.term());
         assertTrue("value in id bounds", val >= 0L && val < 35L);
Index: lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder.java
===================================================================
--- lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder.java	(revision 1672106)
+++ lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder.java	(working copy)
@@ -92,7 +92,7 @@
       int threshold = ir.maxDoc() / 10; // ignore words too common.
       Terms terms = MultiFields.getTerms(ir, field);
       if (terms != null) {
-        TermsEnum termsEnum = terms.iterator(null);
+        TermsEnum termsEnum = terms.iterator();
         while (termsEnum.next() != null) {
           int df = termsEnum.docFreq();
           if (df<threshold) {
Index: lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic.java
===================================================================
--- lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic.java	(revision 1672106)
+++ lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic.java	(working copy)
@@ -496,7 +496,7 @@
       if (terms == null) {
         continue;
       }
-      TermsEnum termsEnum = terms.iterator(null);
+      TermsEnum termsEnum = terms.iterator();
       PostingsEnum docs = null;
       while(termsEnum.next() != null) {
         docs = TestUtil.docs(random(), termsEnum, MultiFields.getLiveDocs(reader), docs, PostingsEnum.FREQS);
Index: lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier.java
===================================================================
--- lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier.java	(revision 1672106)
+++ lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier.java	(working copy)
@@ -152,10 +152,10 @@
     // TODO : remove this map as soon as we have a writable FST
     SortedMap<String, Double> weights = new ConcurrentSkipListMap<>();
 
-    TermsEnum reuse = textTerms.iterator(null);
+    TermsEnum termsEnum = textTerms.iterator();
     BytesRef textTerm;
-    while ((textTerm = reuse.next()) != null) {
-      weights.put(textTerm.utf8ToString(), (double) reuse.totalTermFreq());
+    while ((textTerm = termsEnum.next()) != null) {
+      weights.put(textTerm.utf8ToString(), (double) termsEnum.totalTermFreq());
     }
     updateFST(weights);
 
@@ -184,7 +184,7 @@
       Boolean correctClass = Boolean.valueOf(field.stringValue());
       long modifier = correctClass.compareTo(assignedClass);
       if (modifier != 0) {
-        reuse = updateWeights(leafReader, reuse, scoreDoc.doc, assignedClass,
+        updateWeights(leafReader, scoreDoc.doc, assignedClass,
             weights, modifier, batchCount % batchSize == 0);
       }
       batchCount++;
@@ -197,10 +197,10 @@
     throw new IOException("training with multiple fields not supported by boolean perceptron classifier");
   }
 
-  private TermsEnum updateWeights(LeafReader leafReader, TermsEnum reuse,
-                                  int docId, Boolean assignedClass, SortedMap<String, Double> weights,
-                                  double modifier, boolean updateFST) throws IOException {
-    TermsEnum cte = textTerms.iterator(reuse);
+  private void updateWeights(LeafReader leafReader,
+                             int docId, Boolean assignedClass, SortedMap<String, Double> weights,
+                             double modifier, boolean updateFST) throws IOException {
+    TermsEnum cte = textTerms.iterator();
 
     // get the doc term vectors
     Terms terms = leafReader.getTermVector(docId, textFieldName);
@@ -210,7 +210,7 @@
           + textFieldName);
     }
 
-    TermsEnum termsEnum = terms.iterator(null);
+    TermsEnum termsEnum = terms.iterator();
 
     BytesRef term;
 
@@ -227,8 +227,6 @@
     if (updateFST) {
       updateFST(weights);
     }
-    reuse = cte;
-    return reuse;
   }
 
   private void updateFST(SortedMap<String, Double> weights) throws IOException {
@@ -262,4 +260,4 @@
     return null;
   }
 
-}
\ No newline at end of file
+}
Index: lucene/classification/src/java/org/apache/lucene/classification/CachingNaiveBayesClassifier.java
===================================================================
--- lucene/classification/src/java/org/apache/lucene/classification/CachingNaiveBayesClassifier.java	(revision 1672106)
+++ lucene/classification/src/java/org/apache/lucene/classification/CachingNaiveBayesClassifier.java	(working copy)
@@ -241,7 +241,7 @@
     // build the cache for the word
     Map<String, Long> frequencyMap = new HashMap<>();
     for (String textFieldName : textFieldNames) {
-      TermsEnum termsEnum = leafReader.terms(textFieldName).iterator(null);
+      TermsEnum termsEnum = leafReader.terms(textFieldName).iterator();
       while (termsEnum.next() != null) {
         BytesRef term = termsEnum.term();
         String termText = term.utf8ToString();
@@ -259,7 +259,7 @@
 
     // fill the class list
     Terms terms = MultiFields.getTerms(leafReader, classFieldName);
-    TermsEnum termsEnum = terms.iterator(null);
+    TermsEnum termsEnum = terms.iterator();
     while ((termsEnum.next()) != null) {
       cclasses.add(BytesRef.deepCopyOf(termsEnum.term()));
     }
Index: lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier.java
===================================================================
--- lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier.java	(revision 1672106)
+++ lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier.java	(working copy)
@@ -161,7 +161,7 @@
     List<ClassificationResult<BytesRef>> dataList = new ArrayList<>();
 
     Terms terms = MultiFields.getTerms(leafReader, classFieldName);
-    TermsEnum termsEnum = terms.iterator(null);
+    TermsEnum termsEnum = terms.iterator();
     BytesRef next;
     String[] tokenizedDoc = tokenizeDoc(inputDocument);
     int docsWithClassSize = countDocsWithClass();
Index: lucene/classification/src/java/org/apache/lucene/classification/utils/DocToDoubleVectorUtils.java
===================================================================
--- lucene/classification/src/java/org/apache/lucene/classification/utils/DocToDoubleVectorUtils.java	(revision 1672106)
+++ lucene/classification/src/java/org/apache/lucene/classification/utils/DocToDoubleVectorUtils.java	(working copy)
@@ -39,17 +39,17 @@
    * @throws IOException in case accessing the underlying index fails
    */
   public static Double[] toSparseLocalFreqDoubleArray(Terms docTerms, Terms fieldTerms) throws IOException {
-    TermsEnum fieldTermsEnum = fieldTerms.iterator(null);
+    TermsEnum fieldTermsEnum = fieldTerms.iterator();
     Double[] freqVector = null;
     if (docTerms != null && fieldTerms.size() > -1) {
       freqVector = new Double[(int) fieldTerms.size()];
       int i = 0;
-      TermsEnum docTermsEnum = docTerms.iterator(null);
+      TermsEnum docTermsEnum = docTerms.iterator();
       BytesRef term;
       while ((term = fieldTermsEnum.next()) != null) {
         TermsEnum.SeekStatus seekStatus = docTermsEnum.seekCeil(term);
         if (seekStatus.equals(TermsEnum.SeekStatus.END)) {
-          docTermsEnum = docTerms.iterator(null);
+          docTermsEnum = docTerms.iterator();
         }
         if (seekStatus.equals(TermsEnum.SeekStatus.FOUND)) {
           long termFreqLocal = docTermsEnum.totalTermFreq(); // the total number of occurrences of this term in the given document
@@ -75,7 +75,7 @@
     if (docTerms != null) {
         freqVector = new Double[(int) docTerms.size()];
         int i = 0;
-        TermsEnum docTermsEnum = docTerms.iterator(null);
+        TermsEnum docTermsEnum = docTerms.iterator();
 
         while (docTermsEnum.next() != null) {
             long termFreqLocal = docTermsEnum.totalTermFreq(); // the total number of occurrences of this term in the given document
Index: lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.java	(revision 1672106)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.java	(working copy)
@@ -240,7 +240,7 @@
     }
 
     @Override
-    public TermsEnum iterator(TermsEnum reuse) throws IOException {
+    public TermsEnum iterator() throws IOException {
       return new SegmentTermsEnum();
     }
 
Index: lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter.java	(revision 1672106)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter.java	(working copy)
@@ -136,7 +136,7 @@
         continue;
       }
 
-      TermsEnum termsEnum = terms.iterator(null);
+      TermsEnum termsEnum = terms.iterator();
 
       TermsWriter termsWriter = addField(fieldInfos.fieldInfo(field));
 
Index: lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.java	(revision 1672106)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.java	(working copy)
@@ -226,7 +226,7 @@
         continue;
       }
 
-      TermsEnum termsEnum = terms.iterator(null);
+      TermsEnum termsEnum = terms.iterator();
 
       TermsWriter termsWriter = new TermsWriter(fieldInfos.fieldInfo(field));
       while (true) {
Index: lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsFieldReader.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsFieldReader.java	(revision 1672106)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsFieldReader.java	(working copy)
@@ -137,7 +137,7 @@
   }
 
   @Override
-  public TermsEnum iterator(TermsEnum reuse) throws IOException {
+  public TermsEnum iterator() throws IOException {
     return new OrdsSegmentTermsEnum(this);
   }
 
Index: lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.java	(revision 1672106)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.java	(working copy)
@@ -237,19 +237,8 @@
       }
       
       @Override
-      public TermsEnum iterator(TermsEnum reuse) throws IOException {
-        if ((reuse != null) && (reuse instanceof BloomFilteredTermsEnum)) {
-          // recycle the existing BloomFilteredTermsEnum by asking the delegate
-          // to recycle its contained TermsEnum
-          BloomFilteredTermsEnum bfte = (BloomFilteredTermsEnum) reuse;
-          if (bfte.filter == filter) {
-            bfte.reset(delegateTerms, bfte.delegateTermsEnum);
-            return bfte;
-          }
-        }
-        // We have been handed something we cannot reuse (either null, wrong
-        // class or wrong filter) so allocate a new object
-        return new BloomFilteredTermsEnum(delegateTerms, reuse, filter);
+      public TermsEnum iterator() throws IOException {
+        return new BloomFilteredTermsEnum(delegateTerms, filter);
       }
       
       @Override
@@ -306,18 +295,15 @@
     final class BloomFilteredTermsEnum extends TermsEnum {
       private Terms delegateTerms;
       private TermsEnum delegateTermsEnum;
-      private TermsEnum reuseDelegate;
       private final FuzzySet filter;
       
-      public BloomFilteredTermsEnum(Terms delegateTerms, TermsEnum reuseDelegate, FuzzySet filter) throws IOException {
+      public BloomFilteredTermsEnum(Terms delegateTerms, FuzzySet filter) throws IOException {
         this.delegateTerms = delegateTerms;
-        this.reuseDelegate = reuseDelegate;
         this.filter = filter;
       }
       
-      void reset(Terms delegateTerms, TermsEnum reuseDelegate) throws IOException {
+      void reset(Terms delegateTerms) throws IOException {
         this.delegateTerms = delegateTerms;
-        this.reuseDelegate = reuseDelegate;
         this.delegateTermsEnum = null;
       }
       
@@ -327,7 +313,7 @@
            * this can be a relativly heavy operation depending on the 
            * delegate postings format and they underlying directory
            * (clone IndexInput) */
-          delegateTermsEnum = delegateTerms.iterator(reuseDelegate);
+          delegateTermsEnum = delegateTerms.iterator();
         }
         return delegateTermsEnum;
       }
@@ -449,7 +435,7 @@
           continue;
         }
         FieldInfo fieldInfo = state.fieldInfos.fieldInfo(field);
-        TermsEnum termsEnum = terms.iterator(null);
+        TermsEnum termsEnum = terms.iterator();
 
         FuzzySet bloomFilter = null;
 
Index: lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.java	(revision 1672106)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.java	(working copy)
@@ -327,7 +327,7 @@
       BytesRef term;
       PostingsEnum postingsEnum = null;
       PostingsEnum docsAndPositionsEnum = null;
-      final TermsEnum termsEnum = termsIn.iterator(null);
+      final TermsEnum termsEnum = termsIn.iterator();
       int termOffset = 0;
 
       final IntArrayWriter scratch = new IntArrayWriter();
@@ -655,16 +655,8 @@
     }
 
     @Override
-    public TermsEnum iterator(TermsEnum reuse) {
-      DirectTermsEnum termsEnum;
-      if (reuse != null && reuse instanceof DirectTermsEnum) {
-        termsEnum = (DirectTermsEnum) reuse;
-        if (!termsEnum.canReuse(terms)) {
-          termsEnum = new DirectTermsEnum();
-        }
-      } else {
-        termsEnum = new DirectTermsEnum();
-      }
+    public TermsEnum iterator() {
+      DirectTermsEnum termsEnum = new DirectTermsEnum();
       termsEnum.reset();
       return termsEnum;
     }
Index: lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsReader.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsReader.java	(revision 1672106)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsReader.java	(working copy)
@@ -265,7 +265,7 @@
     }
 
     @Override
-    public TermsEnum iterator(TermsEnum reuse) throws IOException {
+    public TermsEnum iterator() throws IOException {
       return new SegmentTermsEnum();
     }
 
Index: lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsWriter.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsWriter.java	(revision 1672106)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsWriter.java	(working copy)
@@ -194,7 +194,7 @@
       }
       FieldInfo fieldInfo = fieldInfos.fieldInfo(field);
       boolean hasFreq = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;
-      TermsEnum termsEnum = terms.iterator(null);
+      TermsEnum termsEnum = terms.iterator();
       TermsWriter termsWriter = new TermsWriter(fieldInfo);
 
       long sumTotalTermFreq = 0;
Index: lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader.java	(revision 1672106)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader.java	(working copy)
@@ -245,7 +245,7 @@
     }
 
     @Override
-    public TermsEnum iterator(TermsEnum reuse) throws IOException {
+    public TermsEnum iterator() throws IOException {
       return new SegmentTermsEnum();
     }
 
Index: lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsWriter.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsWriter.java	(revision 1672106)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsWriter.java	(working copy)
@@ -166,7 +166,7 @@
       }
       FieldInfo fieldInfo = fieldInfos.fieldInfo(field);
       boolean hasFreq = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;
-      TermsEnum termsEnum = terms.iterator(null);
+      TermsEnum termsEnum = terms.iterator();
       TermsWriter termsWriter = termsWriter = new TermsWriter(fieldInfo);
 
       long sumTotalTermFreq = 0;
Index: lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.java	(revision 1672106)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.java	(working copy)
@@ -307,7 +307,7 @@
           continue;
         }
 
-        TermsEnum termsEnum = terms.iterator(null);
+        TermsEnum termsEnum = terms.iterator();
 
         FieldInfo fieldInfo = state.fieldInfos.fieldInfo(field);
         TermsWriter termsWriter = new TermsWriter(out, fieldInfo,
@@ -952,7 +952,7 @@
     }
 
     @Override
-    public TermsEnum iterator(TermsEnum reuse) {
+    public TermsEnum iterator() {
       return new FSTTermsEnum(field, fst);
     }
 
Index: lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.java	(revision 1672106)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.java	(working copy)
@@ -627,7 +627,7 @@
     }
 
     @Override
-    public TermsEnum iterator(TermsEnum reuse) throws IOException {
+    public TermsEnum iterator() throws IOException {
       if (fst != null) {
         return new SimpleTextTermsEnum(fst, fieldInfo.getIndexOptions());
       } else {
Index: lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsWriter.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsWriter.java	(revision 1672106)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsWriter.java	(working copy)
@@ -91,7 +91,7 @@
         }
       }
 
-      TermsEnum termsEnum = terms.iterator(null);
+      TermsEnum termsEnum = terms.iterator();
       PostingsEnum postingsEnum = null;
 
       // for each term in field
Index: lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader.java	(revision 1672106)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader.java	(working copy)
@@ -277,7 +277,7 @@
     }
 
     @Override
-    public TermsEnum iterator(TermsEnum reuse) throws IOException {
+    public TermsEnum iterator() throws IOException {
       // TODO: reuse
       return new SimpleTVTermsEnum(terms);
     }
Index: lucene/codecs/src/test/org/apache/lucene/codecs/blocktreeords/TestOrdsBlockTree.java
===================================================================
--- lucene/codecs/src/test/org/apache/lucene/codecs/blocktreeords/TestOrdsBlockTree.java	(revision 1672106)
+++ lucene/codecs/src/test/org/apache/lucene/codecs/blocktreeords/TestOrdsBlockTree.java	(working copy)
@@ -53,7 +53,7 @@
     doc.add(newTextField("field", "a b c", Field.Store.NO));
     w.addDocument(doc);
     IndexReader r = w.getReader();
-    TermsEnum te = MultiFields.getTerms(r, "field").iterator(null);
+    TermsEnum te = MultiFields.getTerms(r, "field").iterator();
 
     // Test next()
     assertEquals(new BytesRef("a"), te.next());
@@ -114,7 +114,7 @@
     }
     w.forceMerge(1);
     IndexReader r = w.getReader();
-    TermsEnum te = MultiFields.getTerms(r, "field").iterator(null);
+    TermsEnum te = MultiFields.getTerms(r, "field").iterator();
 
     assertTrue(te.seekExact(new BytesRef("mo")));
     assertEquals(27, te.ord());
@@ -190,7 +190,7 @@
     }
     w.forceMerge(1);
     IndexReader r = w.getReader();
-    TermsEnum te = MultiFields.getTerms(r, "field").iterator(null);
+    TermsEnum te = MultiFields.getTerms(r, "field").iterator();
 
     if (VERBOSE) {
       while (te.next() != null) {
@@ -250,7 +250,7 @@
     }
     w.forceMerge(1);
     IndexReader r = DirectoryReader.open(w, true);
-    TermsEnum te = MultiFields.getTerms(r, "field").iterator(null);
+    TermsEnum te = MultiFields.getTerms(r, "field").iterator();
 
     if (VERBOSE) {
       BytesRef term;
@@ -300,7 +300,7 @@
     }
     w.forceMerge(1);
     IndexReader r = DirectoryReader.open(w, true);
-    TermsEnum te = MultiFields.getTerms(r, "field").iterator(null);
+    TermsEnum te = MultiFields.getTerms(r, "field").iterator();
 
     BytesRef term;
     int ord = 0;
@@ -338,7 +338,7 @@
     }
     w.forceMerge(1);
     IndexReader r = DirectoryReader.open(w, true);
-    TermsEnum te = MultiFields.getTerms(r, "body").iterator(null);
+    TermsEnum te = MultiFields.getTerms(r, "body").iterator();
 
     for(int i=0;i<30;i++) {
       for(int j=0;j<30;j++) {
@@ -379,7 +379,7 @@
 
     w.forceMerge(1);
     IndexReader r = w.getReader();
-    TermsEnum te = MultiFields.getTerms(r, "field").iterator(null);
+    TermsEnum te = MultiFields.getTerms(r, "field").iterator();
     assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(new byte[] {0x22})));
     assertEquals("a", te.term().utf8ToString());
     assertEquals(1L, te.ord());
Index: lucene/core/src/java/org/apache/lucene/codecs/TermVectorsWriter.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/TermVectorsWriter.java	(revision 1672106)
+++ lucene/core/src/java/org/apache/lucene/codecs/TermVectorsWriter.java	(working copy)
@@ -249,7 +249,7 @@
       if (numTerms == -1) {
         // count manually. It is stupid, but needed, as Terms.size() is not a mandatory statistics function
         numTerms = 0;
-        termsEnum = terms.iterator(termsEnum);
+        termsEnum = terms.iterator();
         while(termsEnum.next() != null) {
           numTerms++;
         }
@@ -256,7 +256,7 @@
       }
       
       startField(fieldInfo, numTerms, hasPositions, hasOffsets, hasPayloads);
-      termsEnum = terms.iterator(termsEnum);
+      termsEnum = terms.iterator();
 
       int termCount = 0;
       while(termsEnum.next() != null) {
Index: lucene/core/src/java/org/apache/lucene/codecs/blocktree/AutoPrefixTermsWriter.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/blocktree/AutoPrefixTermsWriter.java	(revision 1672106)
+++ lucene/core/src/java/org/apache/lucene/codecs/blocktree/AutoPrefixTermsWriter.java	(working copy)
@@ -186,7 +186,7 @@
     this.maxItemsInPrefix = maxItemsInPrefix;
     //this.segment = segment;
 
-    TermsEnum termsEnum = terms.iterator(null);
+    TermsEnum termsEnum = terms.iterator();
     while (true) {
       BytesRef term = termsEnum.next();
       if (term == null) {
Index: lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java	(revision 1672106)
+++ lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java	(working copy)
@@ -423,7 +423,7 @@
         prefixTerms = null;
       }
 
-      TermsEnum termsEnum = terms.iterator(null);
+      TermsEnum termsEnum = terms.iterator();
       TermsWriter termsWriter = new TermsWriter(fieldInfos.fieldInfo(field));
       int prefixTermUpto = 0;
       while (true) {
@@ -460,7 +460,7 @@
     assert prefixDocs != null;
     prefixDocs.clear(0, prefixDocs.length());
 
-    prefixTermsEnum = prefix.getTermsEnum(terms.iterator(prefixTermsEnum));
+    prefixTermsEnum = prefix.getTermsEnum(terms.iterator());
 
     //System.out.println("BTTW.getAutoPrefixTE: prefix=" + prefix);
     while (prefixTermsEnum.next() != null) {
Index: lucene/core/src/java/org/apache/lucene/codecs/blocktree/FieldReader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/blocktree/FieldReader.java	(revision 1672106)
+++ lucene/core/src/java/org/apache/lucene/codecs/blocktree/FieldReader.java	(working copy)
@@ -152,7 +152,7 @@
   }
 
   @Override
-  public TermsEnum iterator(TermsEnum reuse) throws IOException {
+  public TermsEnum iterator() throws IOException {
     return new SegmentTermsEnum(this);
   }
 
Index: lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsReader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsReader.java	(revision 1672106)
+++ lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsReader.java	(working copy)
@@ -773,13 +773,8 @@
     }
 
     @Override
-    public TermsEnum iterator(TermsEnum reuse) throws IOException {
-      final TVTermsEnum termsEnum;
-      if (reuse != null && reuse instanceof TVTermsEnum) {
-        termsEnum = (TVTermsEnum) reuse;
-      } else {
-        termsEnum = new TVTermsEnum();
-      }
+    public TermsEnum iterator() throws IOException {
+      TVTermsEnum termsEnum = new TVTermsEnum();
       termsEnum.reset(numTerms, flags, prefixLengths, suffixLengths, termFreqs, positionIndex, positions, startOffsets, lengths,
           payloadIndex, payloadBytes,
           new ByteArrayDataInput(termBytes.bytes, termBytes.offset, termBytes.length));
Index: lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream.java	(revision 1672106)
+++ lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream.java	(working copy)
@@ -510,7 +510,7 @@
           Terms terms = state.reader.fields().terms(field);
           if (terms != null) {
             segTermCount += terms.size();
-            state.termsEnum = terms.iterator(state.termsEnum);
+            state.termsEnum = terms.iterator();
             state.term = state.termsEnum.next();
             if (state.term != null) {
               queue.add(state);
@@ -645,7 +645,7 @@
         currentField = term.field();
         Terms terms = fields.terms(currentField);
         if (terms != null) {
-          termsEnum = terms.iterator(termsEnum);
+          termsEnum = terms.iterator();
         } else {
           termsEnum = null;
         }
Index: lucene/core/src/java/org/apache/lucene/index/CheckIndex.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/CheckIndex.java	(revision 1672106)
+++ lucene/core/src/java/org/apache/lucene/index/CheckIndex.java	(working copy)
@@ -993,7 +993,7 @@
     //System.out.println("    check minTerm=" + minTerm.utf8ToString() + " maxTerm=" + maxTerm.utf8ToString());
     assert minTerm.compareTo(maxTerm) <= 0;
 
-    TermsEnum termsEnum = terms.iterator(null);
+    TermsEnum termsEnum = terms.iterator();
     TermsEnum.SeekStatus status = termsEnum.seekCeil(minTerm);
     if (status != TermsEnum.SeekStatus.FOUND) {
       throw new RuntimeException("failed to seek to existing term field=" + field + " term=" + minTerm);
@@ -1029,7 +1029,6 @@
     FixedBitSet normalDocs = new FixedBitSet(maxDoc);
     FixedBitSet intersectDocs = new FixedBitSet(maxDoc);
 
-    TermsEnum termsEnum = null;
     //System.out.println("CI.checkTermRanges field=" + field + " numTerms=" + numTerms);
 
     while (currentInterval >= 10.0) {
@@ -1036,7 +1035,7 @@
       //System.out.println("  cycle interval=" + currentInterval);
 
       // We iterate this terms enum to locate min/max term for each sliding/overlapping interval we test at the current level:
-      termsEnum = terms.iterator(termsEnum);
+      TermsEnum termsEnum = terms.iterator();
 
       long termCount = 0;
 
@@ -1198,7 +1197,7 @@
         }
       }
 
-      final TermsEnum termsEnum = terms.iterator(null);
+      final TermsEnum termsEnum = terms.iterator();
 
       boolean hasOrd = true;
       final long termCountStart = status.delTermCount + status.termCount;
@@ -2035,9 +2034,6 @@
         postingsFields = null;
       }
 
-      TermsEnum termsEnum = null;
-      TermsEnum postingsTermsEnum = null;
-      
       TermVectorsReader vectorsReader = reader.getTermVectorsReader();
 
       if (vectorsReader != null) {
@@ -2081,7 +2077,7 @@
               
               if (crossCheckTermVectors) {
                 Terms terms = tfv.terms(field);
-                termsEnum = terms.iterator(termsEnum);
+                TermsEnum termsEnum = terms.iterator();
                 final boolean postingsHasFreq = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;
                 final boolean postingsHasPayload = fieldInfo.hasPayloads();
                 final boolean vectorsHasPayload = terms.hasPayloads();
@@ -2090,7 +2086,7 @@
                 if (postingsTerms == null) {
                   throw new RuntimeException("vector field=" + field + " does not exist in postings; doc=" + j);
                 }
-                postingsTermsEnum = postingsTerms.iterator(postingsTermsEnum);
+                TermsEnum postingsTermsEnum = postingsTerms.iterator();
                 
                 final boolean hasProx = terms.hasOffsets() || terms.hasPositions();
                 BytesRef term = null;
Index: lucene/core/src/java/org/apache/lucene/index/ExitableDirectoryReader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/ExitableDirectoryReader.java	(revision 1672106)
+++ lucene/core/src/java/org/apache/lucene/index/ExitableDirectoryReader.java	(working copy)
@@ -137,8 +137,8 @@
     }
 
     @Override
-    public TermsEnum iterator(TermsEnum reuse) throws IOException {
-      return new ExitableTermsEnum(in.iterator(reuse), queryTimeout);
+    public TermsEnum iterator() throws IOException {
+      return new ExitableTermsEnum(in.iterator(), queryTimeout);
     }
   }
 
Index: lucene/core/src/java/org/apache/lucene/index/FilterLeafReader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/FilterLeafReader.java	(revision 1672106)
+++ lucene/core/src/java/org/apache/lucene/index/FilterLeafReader.java	(working copy)
@@ -108,8 +108,8 @@
     }
 
     @Override
-    public TermsEnum iterator(TermsEnum reuse) throws IOException {
-      return in.iterator(reuse);
+    public TermsEnum iterator() throws IOException {
+      return in.iterator();
     }
 
     @Override
Index: lucene/core/src/java/org/apache/lucene/index/FreqProxFields.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/FreqProxFields.java	(revision 1672106)
+++ lucene/core/src/java/org/apache/lucene/index/FreqProxFields.java	(working copy)
@@ -68,13 +68,8 @@
     }
 
     @Override
-    public TermsEnum iterator(TermsEnum reuse) {
-      FreqProxTermsEnum termsEnum;
-      if (reuse instanceof FreqProxTermsEnum && ((FreqProxTermsEnum) reuse).terms == this.terms) {
-        termsEnum = (FreqProxTermsEnum) reuse;
-      } else {
-        termsEnum = new FreqProxTermsEnum(terms);
-      }
+    public TermsEnum iterator() {
+      FreqProxTermsEnum termsEnum = new FreqProxTermsEnum(terms);
       termsEnum.reset();
       return termsEnum;
     }
Index: lucene/core/src/java/org/apache/lucene/index/FreqProxTermsWriter.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/FreqProxTermsWriter.java	(revision 1672106)
+++ lucene/core/src/java/org/apache/lucene/index/FreqProxTermsWriter.java	(working copy)
@@ -49,7 +49,7 @@
           lastField = deleteTerm.field();
           Terms terms = fields.terms(lastField);
           if (terms != null) {
-            termsEnum = terms.iterator(termsEnum);
+            termsEnum = terms.iterator();
           } else {
             termsEnum = null;
           }
Index: lucene/core/src/java/org/apache/lucene/index/LeafReader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/LeafReader.java	(revision 1672106)
+++ lucene/core/src/java/org/apache/lucene/index/LeafReader.java	(working copy)
@@ -146,7 +146,7 @@
     if (terms == null) {
       return 0;
     }
-    final TermsEnum termsEnum = terms.iterator(null);
+    final TermsEnum termsEnum = terms.iterator();
     if (termsEnum.seekExact(term.bytes())) {
       return termsEnum.docFreq();
     } else {
@@ -165,7 +165,7 @@
     if (terms == null) {
       return 0;
     }
-    final TermsEnum termsEnum = terms.iterator(null);
+    final TermsEnum termsEnum = terms.iterator();
     if (termsEnum.seekExact(term.bytes())) {
       return termsEnum.totalTermFreq();
     } else {
@@ -214,7 +214,7 @@
     assert term.bytes() != null;
     final Terms terms = terms(term.field());
     if (terms != null) {
-      final TermsEnum termsEnum = terms.iterator(null);
+      final TermsEnum termsEnum = terms.iterator();
       if (termsEnum.seekExact(term.bytes())) {
         return termsEnum.postings(getLiveDocs(), null, flags);
       }
Index: lucene/core/src/java/org/apache/lucene/index/MappedMultiFields.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/MappedMultiFields.java	(revision 1672106)
+++ lucene/core/src/java/org/apache/lucene/index/MappedMultiFields.java	(working copy)
@@ -59,8 +59,8 @@
     }
 
     @Override
-    public TermsEnum iterator(TermsEnum reuse) throws IOException {
-      return new MappedMultiTermsEnum(mergeState, (MultiTermsEnum) in.iterator(reuse));
+    public TermsEnum iterator() throws IOException {
+      return new MappedMultiTermsEnum(mergeState, (MultiTermsEnum) in.iterator());
     }
 
     @Override
Index: lucene/core/src/java/org/apache/lucene/index/MultiFields.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/MultiFields.java	(revision 1672106)
+++ lucene/core/src/java/org/apache/lucene/index/MultiFields.java	(working copy)
@@ -138,7 +138,7 @@
     assert term != null;
     final Terms terms = getTerms(r, field);
     if (terms != null) {
-      final TermsEnum termsEnum = terms.iterator(null);
+      final TermsEnum termsEnum = terms.iterator();
       if (termsEnum.seekExact(term)) {
         return termsEnum.postings(liveDocs, null, flags);
       }
@@ -165,7 +165,7 @@
     assert term != null;
     final Terms terms = getTerms(r, field);
     if (terms != null) {
-      final TermsEnum termsEnum = terms.iterator(null);
+      final TermsEnum termsEnum = terms.iterator();
       if (termsEnum.seekExact(term)) {
         return termsEnum.postings(liveDocs, null, flags);
       }
Index: lucene/core/src/java/org/apache/lucene/index/MultiTerms.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/MultiTerms.java	(revision 1672106)
+++ lucene/core/src/java/org/apache/lucene/index/MultiTerms.java	(working copy)
@@ -122,11 +122,11 @@
   }
 
   @Override
-  public TermsEnum iterator(TermsEnum reuse) throws IOException {
+  public TermsEnum iterator() throws IOException {
 
     final List<MultiTermsEnum.TermsEnumIndex> termsEnums = new ArrayList<>();
     for(int i=0;i<subs.length;i++) {
-      final TermsEnum termsEnum = subs[i].iterator(null);
+      final TermsEnum termsEnum = subs[i].iterator();
       if (termsEnum != null) {
         termsEnums.add(new MultiTermsEnum.TermsEnumIndex(termsEnum, i));
       }
Index: lucene/core/src/java/org/apache/lucene/index/TermContext.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/TermContext.java	(revision 1672106)
+++ lucene/core/src/java/org/apache/lucene/index/TermContext.java	(working copy)
@@ -90,7 +90,7 @@
       //if (DEBUG) System.out.println("  r=" + leaves[i].reader);
       final Terms terms = ctx.reader().terms(field);
       if (terms != null) {
-        final TermsEnum termsEnum = terms.iterator(null);
+        final TermsEnum termsEnum = terms.iterator();
         if (termsEnum.seekExact(bytes)) { 
           final TermState termState = termsEnum.termState();
           //if (DEBUG) System.out.println("    found");
Index: lucene/core/src/java/org/apache/lucene/index/Terms.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/Terms.java	(revision 1672106)
+++ lucene/core/src/java/org/apache/lucene/index/Terms.java	(working copy)
@@ -41,7 +41,7 @@
    *  a previous TermsEnum, for example from a different
    *  field, you can pass it for possible reuse if the
    *  implementation can do so. */
-  public abstract TermsEnum iterator(TermsEnum reuse) throws IOException;
+  public abstract TermsEnum iterator() throws IOException;
 
   /** Returns a TermsEnum that iterates over all terms and
    *  documents that are accepted by the provided {@link
@@ -72,7 +72,7 @@
     // the returned enum, instead of only being able to seek
     // at the start
 
-    TermsEnum termsEnum = iterator(null);
+    TermsEnum termsEnum = iterator();
 
     if (compiled.type != CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {
       throw new IllegalArgumentException("please use CompiledAutomaton.getTermsEnum instead");
@@ -142,7 +142,7 @@
    *  take deleted documents into account.  This returns
    *  null when there are no terms. */
   public BytesRef getMin() throws IOException {
-    return iterator(null).next();
+    return iterator().next();
   }
 
   /** Returns the largest term (in lexicographic order) in the field. 
@@ -159,7 +159,7 @@
     } else if (size >= 0) {
       // try to seek-by-ord
       try {
-        TermsEnum iterator = iterator(null);
+        TermsEnum iterator = iterator();
         iterator.seekExact(size - 1);
         return iterator.term();
       } catch (UnsupportedOperationException e) {
@@ -168,7 +168,7 @@
     }
     
     // otherwise: binary search
-    TermsEnum iterator = iterator(null);
+    TermsEnum iterator = iterator();
     BytesRef v = iterator.next();
     if (v == null) {
       // empty: only possible from a FilteredTermsEnum...
Index: lucene/core/src/java/org/apache/lucene/search/DocValuesRewriteMethod.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/DocValuesRewriteMethod.java	(revision 1672106)
+++ lucene/core/src/java/org/apache/lucene/search/DocValuesRewriteMethod.java	(working copy)
@@ -89,7 +89,7 @@
           TermsEnum termsEnum = query.getTermsEnum(new Terms() {
             
             @Override
-            public TermsEnum iterator(TermsEnum reuse) {
+            public TermsEnum iterator() {
               return fcsi.termsEnum();
             }
 
Index: lucene/core/src/java/org/apache/lucene/search/FuzzyQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/FuzzyQuery.java	(revision 1672106)
+++ lucene/core/src/java/org/apache/lucene/search/FuzzyQuery.java	(working copy)
@@ -150,7 +150,7 @@
   @Override
   protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {
     if (maxEdits == 0 || prefixLength >= term.text().length()) {  // can only match if it's exact
-      return new SingleTermsEnum(terms.iterator(null), term.bytes());
+      return new SingleTermsEnum(terms.iterator(), term.bytes());
     }
     return new FuzzyTermsEnum(terms, atts, getTerm(), maxEdits, prefixLength, transpositions);
   }
Index: lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.java	(revision 1672106)
+++ lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.java	(working copy)
@@ -196,7 +196,7 @@
       }
 
       // Reuse single TermsEnum below:
-      final TermsEnum termsEnum = fieldTerms.iterator(null);
+      final TermsEnum termsEnum = fieldTerms.iterator();
 
       for (int pos=0; pos<postingsFreqs.length; pos++) {
         Term[] terms = termArrays.get(pos);
Index: lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery.java	(revision 1672106)
+++ lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery.java	(working copy)
@@ -297,7 +297,7 @@
     if (min != null && max != null && ((Comparable<T>) min).compareTo(max) > 0) {
       return TermsEnum.EMPTY;
     }
-    return new NumericRangeTermsEnum(terms.iterator(null));
+    return new NumericRangeTermsEnum(terms.iterator());
   }
 
   /** Returns <code>true</code> if the lower endpoint is inclusive */
Index: lucene/core/src/java/org/apache/lucene/search/PhraseQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/PhraseQuery.java	(revision 1672106)
+++ lucene/core/src/java/org/apache/lucene/search/PhraseQuery.java	(working copy)
@@ -302,7 +302,7 @@
       }
 
       // Reuse single TermsEnum below:
-      final TermsEnum te = fieldTerms.iterator(null);
+      final TermsEnum te = fieldTerms.iterator();
       
       for (int i = 0; i < terms.size(); i++) {
         final Term t = terms.get(i);
Index: lucene/core/src/java/org/apache/lucene/search/TermQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/TermQuery.java	(revision 1672106)
+++ lucene/core/src/java/org/apache/lucene/search/TermQuery.java	(working copy)
@@ -101,7 +101,7 @@
       // System.out.println("LD=" + reader.getLiveDocs() + " set?=" +
       // (reader.getLiveDocs() != null ? reader.getLiveDocs().get(0) : "null"));
       final TermsEnum termsEnum = context.reader().terms(term.field())
-          .iterator(null);
+          .iterator();
       termsEnum.seekExact(term.bytes(), state);
       return termsEnum;
     }
Index: lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery.java	(revision 1672106)
+++ lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery.java	(working copy)
@@ -98,7 +98,7 @@
           throw new IllegalStateException("field \"" + term.field() + "\" was indexed without position data; cannot run SpanTermQuery (term=" + term.text() + ")");
         }
 
-        final TermsEnum termsEnum = terms.iterator(null);
+        final TermsEnum termsEnum = terms.iterator();
         if (termsEnum.seekExact(term.bytes())) {
           state = termsEnum.termState();
         } else {
@@ -115,7 +115,7 @@
       return null;
     }
 
-    final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);
+    final TermsEnum termsEnum = context.reader().terms(term.field()).iterator();
     termsEnum.seekExact(term.bytes(), state);
 
     final PostingsEnum postings = termsEnum.postings(acceptDocs, null, PostingsEnum.PAYLOADS);
Index: lucene/core/src/java/org/apache/lucene/util/NumericUtils.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/NumericUtils.java	(revision 1672106)
+++ lucene/core/src/java/org/apache/lucene/util/NumericUtils.java	(working copy)
@@ -537,8 +537,8 @@
   private static Terms intTerms(Terms terms) {
     return new FilterLeafReader.FilterTerms(terms) {
         @Override
-        public TermsEnum iterator(TermsEnum reuse) throws IOException {
-          return filterPrefixCodedInts(in.iterator(reuse));
+        public TermsEnum iterator() throws IOException {
+          return filterPrefixCodedInts(in.iterator());
         }
       };
   }
@@ -546,8 +546,8 @@
   private static Terms longTerms(Terms terms) {
     return new FilterLeafReader.FilterTerms(terms) {
         @Override
-        public TermsEnum iterator(TermsEnum reuse) throws IOException {
-          return filterPrefixCodedLongs(in.iterator(reuse));
+        public TermsEnum iterator() throws IOException {
+          return filterPrefixCodedLongs(in.iterator());
         }
       };
   }
Index: lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton.java	(revision 1672106)
+++ lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton.java	(working copy)
@@ -329,9 +329,9 @@
     case NONE:
       return TermsEnum.EMPTY;
     case ALL:
-      return terms.iterator(null);
+      return terms.iterator();
     case SINGLE:
-      return new SingleTermsEnum(terms.iterator(null), term);
+      return new SingleTermsEnum(terms.iterator(), term);
     case NORMAL:
       return terms.intersect(this, null);
     default:
Index: lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer.java	(revision 1672106)
+++ lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer.java	(working copy)
@@ -319,7 +319,7 @@
     final LeafReader reader = getOnlySegmentReader(writer.getReader());
     final Fields fields = reader.getTermVectors(0);
     final Terms terms = fields.terms("f");
-    final TermsEnum te = terms.iterator(null);
+    final TermsEnum te = terms.iterator();
     assertEquals(new BytesRef("a"), te.next());
     final PostingsEnum dpe = te.postings(null, null, PostingsEnum.ALL);
     assertEquals(0, dpe.nextDoc());
Index: lucene/core/src/test/org/apache/lucene/codecs/compressing/TestCompressingTermVectorsFormat.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/codecs/compressing/TestCompressingTermVectorsFormat.java	(revision 1672106)
+++ lucene/core/src/test/org/apache/lucene/codecs/compressing/TestCompressingTermVectorsFormat.java	(working copy)
@@ -60,7 +60,7 @@
     LeafReader ir = getOnlySegmentReader(iw.getReader());
     Terms terms = ir.getTermVector(0, "foo");
     assertNotNull(terms);
-    TermsEnum termsEnum = terms.iterator(null);
+    TermsEnum termsEnum = terms.iterator();
     assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef("this")));
     try {
       termsEnum.ord();
Index: lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3.java	(revision 1672106)
+++ lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3.java	(working copy)
@@ -173,8 +173,8 @@
     // NOTE: we don't assert hasOffsets/hasPositions/hasPayloads because they are allowed to be different
 
     boolean bothHavePositions = leftTerms.hasPositions() && rightTerms.hasPositions();
-    TermsEnum leftTermsEnum = leftTerms.iterator(null);
-    TermsEnum rightTermsEnum = rightTerms.iterator(null);
+    TermsEnum leftTermsEnum = leftTerms.iterator();
+    TermsEnum rightTermsEnum = rightTerms.iterator();
     assertTermsEnum(leftTermsEnum, rightTermsEnum, true, bothHavePositions);
     
     assertTermsSeeking(leftTerms, rightTerms);
@@ -206,7 +206,7 @@
     HashSet<BytesRef> tests = new HashSet<>();
     int numPasses = 0;
     while (numPasses < 10 && tests.size() < numTests) {
-      leftEnum = leftTerms.iterator(leftEnum);
+      leftEnum = leftTerms.iterator();
       BytesRef term = null;
       while ((term = leftEnum.next()) != null) {
         int code = random.nextInt(10);
@@ -234,8 +234,8 @@
     Collections.shuffle(shuffledTests, random);
     
     for (BytesRef b : shuffledTests) {
-      leftEnum = leftTerms.iterator(leftEnum);
-      rightEnum = rightTerms.iterator(rightEnum);
+      leftEnum = leftTerms.iterator();
+      rightEnum = rightTerms.iterator();
       
       assertEquals(leftEnum.seekExact(b), rightEnum.seekExact(b));
       assertEquals(leftEnum.seekExact(b), rightEnum.seekExact(b));
Index: lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50DocValuesFormat.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50DocValuesFormat.java	(revision 1672106)
+++ lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50DocValuesFormat.java	(working copy)
@@ -187,7 +187,7 @@
       if (terms != null) {
         SortedSetDocValues ssdv = r.getSortedSetDocValues("dv");
         assertEquals(terms.size(), ssdv.getValueCount());
-        TermsEnum expected = terms.iterator(null);
+        TermsEnum expected = terms.iterator();
         TermsEnum actual = r.getSortedSetDocValues("dv").termsEnum();
         assertEquals(terms.size(), expected, actual);
 
@@ -204,7 +204,7 @@
     Terms terms = ar.terms("indexed");
     if (terms != null) {
       assertEquals(terms.size(), ar.getSortedSetDocValues("dv").getValueCount());
-      TermsEnum expected = terms.iterator(null);
+      TermsEnum expected = terms.iterator();
       TermsEnum actual = ar.getSortedSetDocValues("dv").termsEnum();
       assertEquals(terms.size(), expected, actual);
     }
Index: lucene/core/src/test/org/apache/lucene/index/Test2BTerms.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/Test2BTerms.java	(revision 1672106)
+++ lucene/core/src/test/org/apache/lucene/index/Test2BTerms.java	(working copy)
@@ -244,7 +244,7 @@
 
   private List<BytesRef> findTerms(IndexReader r) throws IOException {
     System.out.println("TEST: findTerms");
-    final TermsEnum termsEnum = MultiFields.getTerms(r, "field").iterator(null);
+    final TermsEnum termsEnum = MultiFields.getTerms(r, "field").iterator();
     final List<BytesRef> savedTerms = new ArrayList<>();
     int nextSave = TestUtil.nextInt(random(), 500000, 1000000);
     BytesRef term;
@@ -262,7 +262,7 @@
     System.out.println("TEST: run " + terms.size() + " terms on reader=" + r);
     IndexSearcher s = newSearcher(r);
     Collections.shuffle(terms, random());
-    TermsEnum termsEnum = MultiFields.getTerms(r, "field").iterator(null);
+    TermsEnum termsEnum = MultiFields.getTerms(r, "field").iterator();
     boolean failed = false;
     for(int iter=0;iter<10*terms.size();iter++) {
       final BytesRef term = terms.get(random().nextInt(terms.size()));
Index: lucene/core/src/test/org/apache/lucene/index/TestBagOfPositions.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestBagOfPositions.java	(revision 1672106)
+++ lucene/core/src/test/org/apache/lucene/index/TestBagOfPositions.java	(working copy)
@@ -137,7 +137,7 @@
     Terms terms = air.terms("field");
     // numTerms-1 because there cannot be a term 0 with 0 postings:
     assertEquals(numTerms-1, terms.size());
-    TermsEnum termsEnum = terms.iterator(null);
+    TermsEnum termsEnum = terms.iterator();
     BytesRef term;
     while ((term = termsEnum.next()) != null) {
       int value = Integer.parseInt(term.utf8ToString());
Index: lucene/core/src/test/org/apache/lucene/index/TestBagOfPostings.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestBagOfPostings.java	(revision 1672106)
+++ lucene/core/src/test/org/apache/lucene/index/TestBagOfPostings.java	(working copy)
@@ -129,7 +129,7 @@
     Terms terms = air.terms("field");
     // numTerms-1 because there cannot be a term 0 with 0 postings:
     assertEquals(numTerms-1, terms.size());
-    TermsEnum termsEnum = terms.iterator(null);
+    TermsEnum termsEnum = terms.iterator();
     BytesRef term;
     while ((term = termsEnum.next()) != null) {
       int value = Integer.parseInt(term.utf8ToString());
Index: lucene/core/src/test/org/apache/lucene/index/TestCodecs.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestCodecs.java	(revision 1672106)
+++ lucene/core/src/test/org/apache/lucene/index/TestCodecs.java	(working copy)
@@ -233,7 +233,7 @@
     final Terms terms2 = reader.terms(fieldName);
     assertNotNull(terms2);
 
-    final TermsEnum termsEnum = terms2.iterator(null);
+    final TermsEnum termsEnum = terms2.iterator();
 
     PostingsEnum postingsEnum = null;
     for(int i=0;i<NUM_TERMS;i++) {
@@ -362,7 +362,7 @@
 
       for(int iter=0;iter<NUM_TEST_ITER;iter++) {
         final FieldData field = fields[random().nextInt(fields.length)];
-        final TermsEnum termsEnum = termsDict.terms(field.fieldInfo.name).iterator(null);
+        final TermsEnum termsEnum = termsDict.terms(field.fieldInfo.name).iterator();
 
         int upto = 0;
         // Test straight enum of the terms:
@@ -571,7 +571,7 @@
     }
 
     @Override
-    public TermsEnum iterator(TermsEnum reuse) {
+    public TermsEnum iterator() {
       return new DataTermsEnum(fieldData);
     }
 
Index: lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader.java	(revision 1672106)
+++ lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader.java	(working copy)
@@ -91,7 +91,7 @@
     MultiReader mr3 = new MultiReader(readers2);
 
     // test mixing up TermDocs and TermEnums from different readers.
-    TermsEnum te2 = MultiFields.getTerms(mr2, "body").iterator(null);
+    TermsEnum te2 = MultiFields.getTerms(mr2, "body").iterator();
     te2.seekCeil(new BytesRef("wow"));
     PostingsEnum td = TestUtil.docs(random(), mr2,
         "body",
@@ -100,7 +100,7 @@
         null,
         0);
 
-    TermsEnum te3 = MultiFields.getTerms(mr3, "body").iterator(null);
+    TermsEnum te3 = MultiFields.getTerms(mr3, "body").iterator();
     te3.seekCeil(new BytesRef("wow"));
     td = TestUtil.docs(random(), te3, MultiFields.getLiveDocs(mr3),
         td,
@@ -625,11 +625,11 @@
         assertNull(fields2.terms(field1));
         continue;
       }
-      TermsEnum enum1 = terms1.iterator(null);
+      TermsEnum enum1 = terms1.iterator();
 
       Terms terms2 = fields2.terms(field1);
       assertNotNull(terms2);
-      TermsEnum enum2 = terms2.iterator(null);
+      TermsEnum enum2 = terms2.iterator();
 
       while(enum1.next() != null) {
         assertEquals("Different terms", enum1.term(), enum2.next());
Index: lucene/core/src/test/org/apache/lucene/index/TestDoc.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestDoc.java	(revision 1672106)
+++ lucene/core/src/test/org/apache/lucene/index/TestDoc.java	(working copy)
@@ -256,7 +256,7 @@
     for (String field : fields)  {
       Terms terms = fields.terms(field);
       assertNotNull(terms);
-      TermsEnum tis = terms.iterator(null);
+      TermsEnum tis = terms.iterator();
       while(tis.next() != null) {
 
         out.print("  term=" + field + ":" + tis.term());
Index: lucene/core/src/test/org/apache/lucene/index/TestDocCount.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestDocCount.java	(revision 1672106)
+++ lucene/core/src/test/org/apache/lucene/index/TestDocCount.java	(working copy)
@@ -65,7 +65,7 @@
       }
       int docCount = terms.getDocCount();
       FixedBitSet visited = new FixedBitSet(ir.maxDoc());
-      TermsEnum te = terms.iterator(null);
+      TermsEnum te = terms.iterator();
       while (te.next() != null) {
         PostingsEnum de = TestUtil.docs(random(), te, null, null, PostingsEnum.NONE);
         while (de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {
Index: lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions.java	(revision 1672106)
+++ lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions.java	(working copy)
@@ -94,7 +94,7 @@
       BytesRef bytes, Bits liveDocs) throws IOException {
     Terms terms = reader.terms(fieldName);
     if (terms != null) {
-      TermsEnum te = terms.iterator(null);
+      TermsEnum te = terms.iterator();
       if (te.seekExact(bytes)) {
         return te.postings(liveDocs, null, PostingsEnum.ALL);
       }
@@ -342,7 +342,7 @@
     assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);
     
     // now reuse and check again
-    TermsEnum te = r.terms("foo").iterator(null);
+    TermsEnum te = r.terms("foo").iterator();
     assertTrue(te.seekExact(new BytesRef("bar")));
     disi = TestUtil.docs(random(), te, null, disi, PostingsEnum.NONE);
     docid = disi.docID();
@@ -367,7 +367,7 @@
     assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);
     
     // now reuse and check again
-    TermsEnum te = r.terms("foo").iterator(null);
+    TermsEnum te = r.terms("foo").iterator();
     assertTrue(te.seekExact(new BytesRef("bar")));
     disi = te.postings(null, disi, PostingsEnum.ALL);
     docid = disi.docID();
Index: lucene/core/src/test/org/apache/lucene/index/TestExitableDirectoryReader.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestExitableDirectoryReader.java	(revision 1672106)
+++ lucene/core/src/test/org/apache/lucene/index/TestExitableDirectoryReader.java	(working copy)
@@ -54,8 +54,8 @@
       }
 
       @Override
-      public TermsEnum iterator(TermsEnum reuse) throws IOException {
-        return new TestTermsEnum(super.iterator(reuse));
+      public TermsEnum iterator() throws IOException {
+        return new TestTermsEnum(super.iterator());
       }
     }
 
Index: lucene/core/src/test/org/apache/lucene/index/TestFilterLeafReader.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestFilterLeafReader.java	(revision 1672106)
+++ lucene/core/src/test/org/apache/lucene/index/TestFilterLeafReader.java	(working copy)
@@ -54,8 +54,8 @@
       }
 
       @Override
-      public TermsEnum iterator(TermsEnum reuse) throws IOException {
-        return new TestTermsEnum(super.iterator(reuse));
+      public TermsEnum iterator() throws IOException {
+        return new TestTermsEnum(super.iterator());
       }
     }
 
@@ -144,7 +144,7 @@
     writer.close();
     IndexReader reader = DirectoryReader.open(target);
     
-    TermsEnum terms = MultiFields.getTerms(reader, "default").iterator(null);
+    TermsEnum terms = MultiFields.getTerms(reader, "default").iterator();
     while (terms.next() != null) {
       assertTrue(terms.term().utf8ToString().indexOf('e') != -1);
     }
Index: lucene/core/src/test/org/apache/lucene/index/TestFlex.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestFlex.java	(revision 1672106)
+++ lucene/core/src/test/org/apache/lucene/index/TestFlex.java	(working copy)
@@ -52,7 +52,7 @@
 
       IndexReader r = w.getReader();
       
-      TermsEnum terms = MultiFields.getTerms(r, "field3").iterator(null);
+      TermsEnum terms = MultiFields.getTerms(r, "field3").iterator();
       assertEquals(TermsEnum.SeekStatus.END, terms.seekCeil(new BytesRef("abc")));
       r.close();
     }
@@ -70,7 +70,7 @@
     w.addDocument(doc);
     w.forceMerge(1);
     DirectoryReader r = w.getReader();
-    TermsEnum terms = getOnlySegmentReader(r).fields().terms("f").iterator(null);
+    TermsEnum terms = getOnlySegmentReader(r).fields().terms("f").iterator();
     assertTrue(terms.next() != null);
     try {
       assertEquals(0, terms.ord());
Index: lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.java	(revision 1672106)
+++ lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.java	(working copy)
@@ -698,7 +698,7 @@
     writer.close();
     DirectoryReader reader = DirectoryReader.open(dir);
     LeafReader subreader = getOnlySegmentReader(reader);
-    TermsEnum te = subreader.fields().terms("").iterator(null);
+    TermsEnum te = subreader.fields().terms("").iterator();
     assertEquals(new BytesRef("a"), te.next());
     assertEquals(new BytesRef("b"), te.next());
     assertEquals(new BytesRef("c"), te.next());
@@ -719,7 +719,7 @@
     writer.close();
     DirectoryReader reader = DirectoryReader.open(dir);
     LeafReader subreader = getOnlySegmentReader(reader);
-    TermsEnum te = subreader.fields().terms("").iterator(null);
+    TermsEnum te = subreader.fields().terms("").iterator();
     assertEquals(new BytesRef(""), te.next());
     assertEquals(new BytesRef("a"), te.next());
     assertEquals(new BytesRef("b"), te.next());
@@ -831,7 +831,7 @@
 
     IndexReader r = DirectoryReader.open(dir);
     Terms tpv = r.getTermVectors(0).terms("field");
-    TermsEnum termsEnum = tpv.iterator(null);
+    TermsEnum termsEnum = tpv.iterator();
     assertNotNull(termsEnum.next());
     PostingsEnum dpEnum = termsEnum.postings(null, null, PostingsEnum.ALL);
     assertNotNull(dpEnum);
Index: lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode.java	(revision 1672106)
+++ lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode.java	(working copy)
@@ -136,7 +136,7 @@
   }
 
   private void checkTermsOrder(IndexReader r, Set<String> allTerms, boolean isTop) throws IOException {
-    TermsEnum terms = MultiFields.getFields(r).terms("f").iterator(null);
+    TermsEnum terms = MultiFields.getFields(r).terms("f").iterator();
 
     BytesRefBuilder last = new BytesRefBuilder();
 
Index: lucene/core/src/test/org/apache/lucene/index/TestIndexableField.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestIndexableField.java	(revision 1672106)
+++ lucene/core/src/test/org/apache/lucene/index/TestIndexableField.java	(working copy)
@@ -329,7 +329,7 @@
           if (tv) {
             final Terms tfv = r.getTermVectors(docID).terms(name);
             assertNotNull(tfv);
-            TermsEnum termsEnum = tfv.iterator(null);
+            TermsEnum termsEnum = tfv.iterator();
             assertEquals(new BytesRef(""+counter), termsEnum.next());
             assertEquals(1, termsEnum.totalTermFreq());
             PostingsEnum dpEnum = termsEnum.postings(null, null, PostingsEnum.ALL);
Index: lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum.java	(revision 1672106)
+++ lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum.java	(working copy)
@@ -74,7 +74,7 @@
   
   private void checkTerms(Terms terms, Bits liveDocs, String... termsList) throws IOException {
     assertNotNull(terms);
-    final TermsEnum te = terms.iterator(null);
+    final TermsEnum te = terms.iterator();
     
     for (String t : termsList) {
       BytesRef b = te.next();
Index: lucene/core/src/test/org/apache/lucene/index/TestPayloads.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestPayloads.java	(revision 1672106)
+++ lucene/core/src/test/org/apache/lucene/index/TestPayloads.java	(working copy)
@@ -484,7 +484,7 @@
     }
     writer.close();
     IndexReader reader = DirectoryReader.open(dir);
-    TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator(null);
+    TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator();
     Bits liveDocs = MultiFields.getLiveDocs(reader);
     PostingsEnum tp = null;
     while (terms.next() != null) {
Index: lucene/core/src/test/org/apache/lucene/index/TestPayloadsOnVectors.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestPayloadsOnVectors.java	(revision 1672106)
+++ lucene/core/src/test/org/apache/lucene/index/TestPayloadsOnVectors.java	(working copy)
@@ -70,7 +70,7 @@
     DirectoryReader reader = writer.getReader();
     Terms terms = reader.getTermVector(1, "field");
     assert terms != null;
-    TermsEnum termsEnum = terms.iterator(null);
+    TermsEnum termsEnum = terms.iterator();
     assertTrue(termsEnum.seekExact(new BytesRef("withPayload")));
     PostingsEnum de = termsEnum.postings(null, null, PostingsEnum.ALL);
     assertEquals(0, de.nextDoc());
@@ -112,7 +112,7 @@
     DirectoryReader reader = writer.getReader();
     Terms terms = reader.getTermVector(0, "field");
     assert terms != null;
-    TermsEnum termsEnum = terms.iterator(null);
+    TermsEnum termsEnum = terms.iterator();
     assertTrue(termsEnum.seekExact(new BytesRef("withPayload")));
     PostingsEnum de = termsEnum.postings(null, null, PostingsEnum.ALL);
     assertEquals(0, de.nextDoc());
Index: lucene/core/src/test/org/apache/lucene/index/TestPerSegmentDeletes.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestPerSegmentDeletes.java	(revision 1672106)
+++ lucene/core/src/test/org/apache/lucene/index/TestPerSegmentDeletes.java	(working copy)
@@ -224,7 +224,7 @@
       throws IOException {
     Fields fields = MultiFields.getFields(reader);
     Terms cterms = fields.terms(term.field);
-    TermsEnum ctermsEnum = cterms.iterator(null);
+    TermsEnum ctermsEnum = cterms.iterator();
     if (ctermsEnum.seekExact(new BytesRef(term.text()))) {
       PostingsEnum postingsEnum = TestUtil.docs(random(), ctermsEnum, bits, null, PostingsEnum.NONE);
       return toArray(postingsEnum);
Index: lucene/core/src/test/org/apache/lucene/index/TestPostingsOffsets.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestPostingsOffsets.java	(revision 1672106)
+++ lucene/core/src/test/org/apache/lucene/index/TestPostingsOffsets.java	(working copy)
@@ -293,7 +293,7 @@
       // TODO: improve this
       LeafReader sub = ctx.reader();
       //System.out.println("\nsub=" + sub);
-      final TermsEnum termsEnum = sub.fields().terms("content").iterator(null);
+      final TermsEnum termsEnum = sub.fields().terms("content").iterator();
       PostingsEnum docs = null;
       PostingsEnum docsAndPositions = null;
       PostingsEnum docsAndPositionsAndOffsets = null;
Index: lucene/core/src/test/org/apache/lucene/index/TestSegmentMerger.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestSegmentMerger.java	(revision 1672106)
+++ lucene/core/src/test/org/apache/lucene/index/TestSegmentMerger.java	(working copy)
@@ -129,7 +129,7 @@
     Terms vector = mergedReader.getTermVectors(0).terms(DocHelper.TEXT_FIELD_2_KEY);
     assertNotNull(vector);
     assertEquals(3, vector.size());
-    TermsEnum termsEnum = vector.iterator(null);
+    TermsEnum termsEnum = vector.iterator();
 
     int i = 0;
     while (termsEnum.next() != null) {
Index: lucene/core/src/test/org/apache/lucene/index/TestSegmentReader.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestSegmentReader.java	(revision 1672106)
+++ lucene/core/src/test/org/apache/lucene/index/TestSegmentReader.java	(working copy)
@@ -118,7 +118,7 @@
     for (String field : fields) {
       Terms terms = fields.terms(field);
       assertNotNull(terms);
-      TermsEnum termsEnum = terms.iterator(null);
+      TermsEnum termsEnum = terms.iterator();
       while(termsEnum.next() != null) {
         BytesRef term = termsEnum.term();
         assertTrue(term != null);
@@ -192,7 +192,7 @@
     Terms result = reader.getTermVectors(0).terms(DocHelper.TEXT_FIELD_2_KEY);
     assertNotNull(result);
     assertEquals(3, result.size());
-    TermsEnum termsEnum = result.iterator(null);
+    TermsEnum termsEnum = result.iterator();
     while(termsEnum.next() != null) {
       String term = termsEnum.term().utf8ToString();
       int freq = (int) termsEnum.totalTermFreq();
Index: lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs.java	(revision 1672106)
+++ lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs.java	(working copy)
@@ -56,7 +56,7 @@
     SegmentReader reader = new SegmentReader(info, newIOContext(random()));
     assertTrue(reader != null);
 
-    TermsEnum terms = reader.fields().terms(DocHelper.TEXT_FIELD_2_KEY).iterator(null);
+    TermsEnum terms = reader.fields().terms(DocHelper.TEXT_FIELD_2_KEY).iterator();
     terms.seekCeil(new BytesRef("field"));
     PostingsEnum termDocs = TestUtil.docs(random(), terms, reader.getLiveDocs(), null, PostingsEnum.FREQS);
     if (termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)    {
Index: lucene/core/src/test/org/apache/lucene/index/TestSegmentTermEnum.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestSegmentTermEnum.java	(revision 1672106)
+++ lucene/core/src/test/org/apache/lucene/index/TestSegmentTermEnum.java	(working copy)
@@ -80,7 +80,7 @@
     addDoc(writer, "aaa bbb");
     writer.close();
     SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(dir));
-    TermsEnum terms = reader.fields().terms("content").iterator(null);
+    TermsEnum terms = reader.fields().terms("content").iterator();
     assertNotNull(terms.next());
     assertEquals("aaa", terms.term().utf8ToString());
     assertNotNull(terms.next());
@@ -104,7 +104,7 @@
       throws IOException
   {
       IndexReader reader = DirectoryReader.open(dir);
-      TermsEnum termEnum = MultiFields.getTerms(reader, "content").iterator(null);
+      TermsEnum termEnum = MultiFields.getTerms(reader, "content").iterator();
 
     // create enumeration of all terms
     // go to the first term (aaa)
Index: lucene/core/src/test/org/apache/lucene/index/TestStressAdvance.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestStressAdvance.java	(revision 1672106)
+++ lucene/core/src/test/org/apache/lucene/index/TestStressAdvance.java	(working copy)
@@ -74,7 +74,7 @@
           bDocIDs.add(docID);
         }
       }
-      final TermsEnum te = getOnlySegmentReader(r).fields().terms("field").iterator(null);
+      final TermsEnum te = getOnlySegmentReader(r).fields().terms("field").iterator();
       
       PostingsEnum de = null;
       for(int iter2=0;iter2<10;iter2++) {
Index: lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2.java	(revision 1672106)
+++ lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2.java	(working copy)
@@ -313,7 +313,7 @@
                  MultiFields.getFields(r2).terms(idField) == null);
       return;
     }
-    final TermsEnum termsEnum = terms1.iterator(null);
+    final TermsEnum termsEnum = terms1.iterator();
 
     final Bits liveDocs1 = MultiFields.getLiveDocs(r1);
     final Bits liveDocs2 = MultiFields.getLiveDocs(r2);
@@ -333,7 +333,7 @@
       }
       return;
     }
-    TermsEnum termsEnum2 = terms2.iterator(null);
+    TermsEnum termsEnum2 = terms2.iterator();
 
     PostingsEnum termDocs1 = null;
     PostingsEnum termDocs2 = null;
@@ -391,7 +391,7 @@
             System.out.println("    " + field + ":");
             Terms terms3 = tv1.terms(field);
             assertNotNull(terms3);
-            TermsEnum termsEnum3 = terms3.iterator(null);
+            TermsEnum termsEnum3 = terms3.iterator();
             BytesRef term2;
             while((term2 = termsEnum3.next()) != null) {
               System.out.println("      " + term2.utf8ToString() + ": freq=" + termsEnum3.totalTermFreq());
@@ -423,7 +423,7 @@
             System.out.println("    " + field + ":");
             Terms terms3 = tv2.terms(field);
             assertNotNull(terms3);
-            TermsEnum termsEnum3 = terms3.iterator(null);
+            TermsEnum termsEnum3 = terms3.iterator();
             BytesRef term2;
             while((term2 = termsEnum3.next()) != null) {
               System.out.println("      " + term2.utf8ToString() + ": freq=" + termsEnum3.totalTermFreq());
@@ -485,7 +485,7 @@
           if (terms == null) {
             continue;
           }
-          termsEnum1 = terms.iterator(null);
+          termsEnum1 = terms.iterator();
         }
         term1 = termsEnum1.next();
         if (term1 == null) {
@@ -518,7 +518,7 @@
           if (terms == null) {
             continue;
           }
-          termsEnum2 = terms.iterator(null);
+          termsEnum2 = terms.iterator();
         }
         term2 = termsEnum2.next();
         if (term2 == null) {
@@ -599,11 +599,11 @@
 
       Terms terms1 = d1.terms(field1);
       assertNotNull(terms1);
-      TermsEnum termsEnum1 = terms1.iterator(null);
+      TermsEnum termsEnum1 = terms1.iterator();
 
       Terms terms2 = d2.terms(field2);
       assertNotNull(terms2);
-      TermsEnum termsEnum2 = terms2.iterator(null);
+      TermsEnum termsEnum2 = terms2.iterator();
 
       PostingsEnum dpEnum1 = null;
       PostingsEnum dpEnum2 = null;
Index: lucene/core/src/test/org/apache/lucene/index/TestSumDocFreq.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestSumDocFreq.java	(revision 1672106)
+++ lucene/core/src/test/org/apache/lucene/index/TestSumDocFreq.java	(working copy)
@@ -86,7 +86,7 @@
       }
       
       long computedSumDocFreq = 0;
-      TermsEnum termsEnum = terms.iterator(null);
+      TermsEnum termsEnum = terms.iterator();
       while (termsEnum.next() != null) {
         computedSumDocFreq += termsEnum.docFreq();
       }
Index: lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader.java	(revision 1672106)
+++ lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader.java	(working copy)
@@ -200,7 +200,7 @@
       Terms vector = reader.get(j).terms(testFields[0]);
       assertNotNull(vector);
       assertEquals(testTerms.length, vector.size());
-      TermsEnum termsEnum = vector.iterator(null);
+      TermsEnum termsEnum = vector.iterator();
       for (int i = 0; i < testTerms.length; i++) {
         final BytesRef text = termsEnum.next();
         assertNotNull(text);
@@ -219,7 +219,7 @@
       Terms vector = reader.get(j).terms(testFields[0]);
       assertNotNull(vector);
       assertEquals(testTerms.length, vector.size());
-      TermsEnum termsEnum = vector.iterator(null);
+      TermsEnum termsEnum = vector.iterator();
       PostingsEnum postingsEnum = null;
       for (int i = 0; i < testTerms.length; i++) {
         final BytesRef text = termsEnum.next();
@@ -246,7 +246,7 @@
     Terms vector = reader.get(0).terms(testFields[0]);
     assertNotNull(vector);
     assertEquals(testTerms.length, vector.size());
-    TermsEnum termsEnum = vector.iterator(null);
+    TermsEnum termsEnum = vector.iterator();
     PostingsEnum dpEnum = null;
     for (int i = 0; i < testTerms.length; i++) {
       final BytesRef text = termsEnum.next();
@@ -283,7 +283,7 @@
     Terms freqVector = reader.get(0).terms(testFields[1]); //no pos, no offset
     assertNotNull(freqVector);
     assertEquals(testTerms.length, freqVector.size());
-    termsEnum = freqVector.iterator(null);
+    termsEnum = freqVector.iterator();
     assertNotNull(termsEnum);
     for (int i = 0; i < testTerms.length; i++) {
       final BytesRef text = termsEnum.next();
@@ -301,7 +301,7 @@
     TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg.info, fieldInfos, newIOContext(random()));
     Terms vector = reader.get(0).terms(testFields[0]);
     assertNotNull(vector);
-    TermsEnum termsEnum = vector.iterator(null);
+    TermsEnum termsEnum = vector.iterator();
     assertNotNull(termsEnum);
     assertEquals(testTerms.length, vector.size());
     PostingsEnum dpEnum = null;
Index: lucene/core/src/test/org/apache/lucene/index/TestTermVectorsWriter.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestTermVectorsWriter.java	(revision 1672106)
+++ lucene/core/src/test/org/apache/lucene/index/TestTermVectorsWriter.java	(working copy)
@@ -61,7 +61,7 @@
     IndexReader r = DirectoryReader.open(dir);
     Terms vector = r.getTermVectors(0).terms("field");
     assertNotNull(vector);
-    TermsEnum termsEnum = vector.iterator(null);
+    TermsEnum termsEnum = vector.iterator();
     assertNotNull(termsEnum.next());
     assertEquals("", termsEnum.term().utf8ToString());
 
@@ -115,7 +115,7 @@
     w.close();
 
     IndexReader r = DirectoryReader.open(dir);
-    TermsEnum termsEnum = r.getTermVectors(0).terms("field").iterator(null);
+    TermsEnum termsEnum = r.getTermVectors(0).terms("field").iterator();
     assertNotNull(termsEnum.next());
     PostingsEnum dpEnum = termsEnum.postings(null, null, PostingsEnum.ALL);
     assertEquals(2, termsEnum.totalTermFreq());
@@ -150,7 +150,7 @@
     w.close();
 
     IndexReader r = DirectoryReader.open(dir);
-    TermsEnum termsEnum = r.getTermVectors(0).terms("field").iterator(null);
+    TermsEnum termsEnum = r.getTermVectors(0).terms("field").iterator();
     assertNotNull(termsEnum.next());
     PostingsEnum dpEnum = termsEnum.postings(null, null, PostingsEnum.ALL);
     assertEquals(2, termsEnum.totalTermFreq());
@@ -188,7 +188,7 @@
     w.close();
 
     IndexReader r = DirectoryReader.open(dir);
-    TermsEnum termsEnum = r.getTermVectors(0).terms("field").iterator(null);
+    TermsEnum termsEnum = r.getTermVectors(0).terms("field").iterator();
     assertNotNull(termsEnum.next());
     PostingsEnum dpEnum = termsEnum.postings(null, null, PostingsEnum.ALL);
     assertEquals(2, termsEnum.totalTermFreq());
@@ -223,7 +223,7 @@
     w.close();
 
     IndexReader r = DirectoryReader.open(dir);
-    TermsEnum termsEnum = r.getTermVectors(0).terms("field").iterator(null);
+    TermsEnum termsEnum = r.getTermVectors(0).terms("field").iterator();
     assertNotNull(termsEnum.next());
     PostingsEnum dpEnum = termsEnum.postings(null, null, PostingsEnum.ALL);
     assertEquals(2, termsEnum.totalTermFreq());
@@ -259,7 +259,7 @@
     w.close();
 
     IndexReader r = DirectoryReader.open(dir);
-    TermsEnum termsEnum = r.getTermVectors(0).terms("field").iterator(null);
+    TermsEnum termsEnum = r.getTermVectors(0).terms("field").iterator();
     assertNotNull(termsEnum.next());
     PostingsEnum dpEnum = termsEnum.postings(null, null, PostingsEnum.ALL);
 
@@ -303,7 +303,7 @@
     w.close();
 
     IndexReader r = DirectoryReader.open(dir);
-    TermsEnum termsEnum = r.getTermVectors(0).terms("field").iterator(null);
+    TermsEnum termsEnum = r.getTermVectors(0).terms("field").iterator();
     assertNotNull(termsEnum.next());
     PostingsEnum dpEnum = termsEnum.postings(null, null, PostingsEnum.ALL);
 
@@ -345,7 +345,7 @@
     w.close();
 
     IndexReader r = DirectoryReader.open(dir);
-    TermsEnum termsEnum = r.getTermVectors(0).terms("field").iterator(null);
+    TermsEnum termsEnum = r.getTermVectors(0).terms("field").iterator();
     assertNotNull(termsEnum.next());
     PostingsEnum dpEnum = termsEnum.postings(null, null, PostingsEnum.ALL);
 
Index: lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf.java	(revision 1672106)
+++ lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf.java	(working copy)
@@ -114,7 +114,7 @@
 
     IndexReader reader = DirectoryReader.open(dir);
 
-    TermsEnum tenum = MultiFields.getTerms(reader, "foo").iterator(null);
+    TermsEnum tenum = MultiFields.getTerms(reader, "foo").iterator();
 
     start = System.currentTimeMillis();
 
Index: lucene/core/src/test/org/apache/lucene/index/TestTermsEnum.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestTermsEnum.java	(revision 1672106)
+++ lucene/core/src/test/org/apache/lucene/index/TestTermsEnum.java	(working copy)
@@ -55,7 +55,7 @@
     w.close();
 
     final List<BytesRef> terms = new ArrayList<>();
-    final TermsEnum termsEnum = MultiFields.getTerms(r, "body").iterator(null);
+    final TermsEnum termsEnum = MultiFields.getTerms(r, "body").iterator();
     BytesRef term;
     while((term = termsEnum.next()) != null) {
       terms.add(BytesRef.deepCopyOf(term));
@@ -478,7 +478,7 @@
     assertEquals(1, docFreq(r, "xx"));
     assertEquals(1, docFreq(r, "aa4"));
 
-    final TermsEnum te = MultiFields.getTerms(r, FIELD).iterator(null);
+    final TermsEnum te = MultiFields.getTerms(r, FIELD).iterator();
     while(te.next() != null) {
       //System.out.println("TEST: next term=" + te.term().utf8ToString());
     }
@@ -510,7 +510,7 @@
     assertEquals(1, r.maxDoc());
     Terms terms = MultiFields.getTerms(r, "field");
     if (terms != null) {
-      assertNull(terms.iterator(null).next());
+      assertNull(terms.iterator().next());
     }
     r.close();
     d.close();
@@ -610,7 +610,7 @@
         System.out.println("  " + t.utf8ToString() + " " + t);
       }
     }
-    final TermsEnum te = MultiFields.getTerms(r, FIELD).iterator(null);
+    final TermsEnum te = MultiFields.getTerms(r, FIELD).iterator();
 
     final int END_LOC = -validTerms.length-1;
     
@@ -902,7 +902,7 @@
       System.out.println("\nTEST: reader=" + r);
     }
 
-    TermsEnum termsEnum = MultiFields.getTerms(r, "id").iterator(null);
+    TermsEnum termsEnum = MultiFields.getTerms(r, "id").iterator();
     PostingsEnum postingsEnum = null;
     PerThreadPKLookup pkLookup = new PerThreadPKLookup(r, "id");
 
@@ -983,7 +983,7 @@
       w.addDocument(doc);
       IndexReader r = w.getReader();
       assertEquals(1, r.leaves().size());
-      TermsEnum te = r.leaves().get(0).reader().fields().terms("field").iterator(null);
+      TermsEnum te = r.leaves().get(0).reader().fields().terms("field").iterator();
       for(int i=0;i<=termCount;i++) {
         assertTrue("term '" + termsList.get(i).utf8ToString() + "' should exist but doesn't", te.seekExact(termsList.get(i)));
       }
Index: lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2.java	(revision 1672106)
+++ lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2.java	(working copy)
@@ -116,7 +116,7 @@
       String reg = AutomatonTestUtil.randomRegexp(random());
       Automaton automaton = Operations.determinize(new RegExp(reg, RegExp.NONE).toAutomaton(),
         DEFAULT_MAX_DETERMINIZED_STATES);
-      TermsEnum te = MultiFields.getTerms(reader, "field").iterator(null);
+      TermsEnum te = MultiFields.getTerms(reader, "field").iterator();
       ArrayList<BytesRef> unsortedTerms = new ArrayList<>(terms);
       Collections.shuffle(unsortedTerms, random());
 
@@ -139,7 +139,7 @@
   /** mixes up seek and next for all terms */
   public void testSeekingAndNexting() throws Exception {
     for (int i = 0; i < numIterations; i++) {
-      TermsEnum te = MultiFields.getTerms(reader, "field").iterator(null);
+      TermsEnum te = MultiFields.getTerms(reader, "field").iterator();
 
       for (BytesRef term : terms) {
         int c = random().nextInt(3);
Index: lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery.java	(revision 1672106)
+++ lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery.java	(working copy)
@@ -72,7 +72,7 @@
     
     // this TermEnum gives "piccadilly", "pie" and "pizza".
     String prefix = "pi";
-    TermsEnum te = MultiFields.getFields(reader).terms("body").iterator(null);
+    TermsEnum te = MultiFields.getFields(reader).terms("body").iterator();
     te.seekCeil(new BytesRef(prefix));
     do {
       String s = te.term().utf8ToString();
Index: lucene/core/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites.java	(revision 1672106)
+++ lucene/core/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites.java	(working copy)
@@ -153,7 +153,7 @@
     final MultiTermQuery mtq = new MultiTermQuery("data") {
       @Override
       protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {
-        return new FilteredTermsEnum(terms.iterator(null)) {
+        return new FilteredTermsEnum(terms.iterator()) {
 
           final BoostAttribute boostAtt =
             attributes().addAttribute(BoostAttribute.class);
Index: lucene/core/src/test/org/apache/lucene/search/TestMultiThreadTermVectors.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestMultiThreadTermVectors.java	(revision 1672106)
+++ lucene/core/src/test/org/apache/lucene/search/TestMultiThreadTermVectors.java	(working copy)
@@ -174,7 +174,7 @@
       Terms vector = reader.getTermVectors(docId).terms("field");
       timeElapsed += System.currentTimeMillis()-start;
       
-      verifyVector(vector.iterator(null), docId);
+      verifyVector(vector.iterator(), docId);
     }
   }
   
@@ -182,7 +182,7 @@
     for (String field : vectors) {
       Terms terms = vectors.terms(field);
       assert terms != null;
-      verifyVector(terms.iterator(null), num);
+      verifyVector(terms.iterator(), num);
     }
   }
 
Index: lucene/core/src/test/org/apache/lucene/search/TestPhrasePrefixQuery.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestPhrasePrefixQuery.java	(revision 1672106)
+++ lucene/core/src/test/org/apache/lucene/search/TestPhrasePrefixQuery.java	(working copy)
@@ -73,7 +73,7 @@
     
     // this TermEnum gives "piccadilly", "pie" and "pizza".
     String prefix = "pi";
-    TermsEnum te = MultiFields.getFields(reader).terms("body").iterator(null);
+    TermsEnum te = MultiFields.getFields(reader).terms("body").iterator();
     te.seekCeil(new BytesRef(prefix));
     do {
       String s = te.term().utf8ToString();
Index: lucene/core/src/test/org/apache/lucene/search/TestPrefixRandom.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestPrefixRandom.java	(revision 1672106)
+++ lucene/core/src/test/org/apache/lucene/search/TestPrefixRandom.java	(working copy)
@@ -85,7 +85,7 @@
     
     @Override
     protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {
-      return new SimplePrefixTermsEnum(terms.iterator(null), prefix);
+      return new SimplePrefixTermsEnum(terms.iterator(), prefix);
     }
 
     private class SimplePrefixTermsEnum extends FilteredTermsEnum {
Index: lucene/core/src/test/org/apache/lucene/search/TestRegexpRandom2.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestRegexpRandom2.java	(revision 1672106)
+++ lucene/core/src/test/org/apache/lucene/search/TestRegexpRandom2.java	(working copy)
@@ -114,7 +114,7 @@
     
     @Override
     protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {
-      return new SimpleAutomatonTermsEnum(terms.iterator(null));
+      return new SimpleAutomatonTermsEnum(terms.iterator());
     }
 
     private class SimpleAutomatonTermsEnum extends FilteredTermsEnum {
Index: lucene/core/src/test/org/apache/lucene/search/TestSameScoresWithThreads.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestSameScoresWithThreads.java	(revision 1672106)
+++ lucene/core/src/test/org/apache/lucene/search/TestSameScoresWithThreads.java	(working copy)
@@ -63,7 +63,7 @@
     final IndexSearcher s = newSearcher(r);
     Terms terms = MultiFields.getFields(r).terms("body");
     int termCount = 0;
-    TermsEnum termsEnum = terms.iterator(null);
+    TermsEnum termsEnum = terms.iterator();
     while(termsEnum.next() != null) {
       termCount++;
     }
@@ -71,7 +71,7 @@
     
     // Target ~10 terms to search:
     double chance = 10.0 / termCount;
-    termsEnum = terms.iterator(termsEnum);
+    termsEnum = terms.iterator();
     final Map<BytesRef,TopDocs> answers = new HashMap<>();
     while(termsEnum.next() != null) {
       if (random().nextDouble() <= chance) {
Index: lucene/core/src/test/org/apache/lucene/search/TestShardSearching.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestShardSearching.java	(revision 1672106)
+++ lucene/core/src/test/org/apache/lucene/search/TestShardSearching.java	(working copy)
@@ -174,7 +174,7 @@
           if (terms == null && docCount > minDocsToMakeTerms) {
             // TODO: try to "focus" on high freq terms sometimes too
             // TODO: maybe also periodically reset the terms...?
-            final TermsEnum termsEnum = MultiFields.getTerms(mockReader, "body").iterator(null);
+            final TermsEnum termsEnum = MultiFields.getTerms(mockReader, "body").iterator();
             terms = new ArrayList<>();
             while(termsEnum.next() != null) {
               terms.add(BytesRef.deepCopyOf(termsEnum.term()));
Index: lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.java	(revision 1672106)
+++ lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.java	(working copy)
@@ -340,7 +340,7 @@
     Terms terms = MultiFields.getTerms(r, "body");
     if (terms != null) {
       final IntsRefBuilder scratchIntsRef = new IntsRefBuilder();
-      final TermsEnum termsEnum = terms.iterator(null);
+      final TermsEnum termsEnum = terms.iterator();
       if (VERBOSE) {
         System.out.println("TEST: got termsEnum=" + termsEnum);
       }
@@ -922,7 +922,7 @@
       }
 
       // Verify w/ MultiTermsEnum
-      final TermsEnum termsEnum = MultiFields.getTerms(r, "id").iterator(null);
+      final TermsEnum termsEnum = MultiFields.getTerms(r, "id").iterator();
       for(int iter=0;iter<2*NUM_IDS;iter++) {
         final String id;
         final String nextID;
Index: lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter.java
===================================================================
--- lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter.java	(revision 1672106)
+++ lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter.java	(working copy)
@@ -381,12 +381,12 @@
     DirectoryReader reader = readerManager.acquire();
     try {
       final BytesRef catTerm = new BytesRef(FacetsConfig.pathToString(categoryPath.components, categoryPath.length));
-      TermsEnum termsEnum = null; // reuse
       PostingsEnum docs = null; // reuse
       for (LeafReaderContext ctx : reader.leaves()) {
         Terms terms = ctx.reader().terms(Consts.FULL);
         if (terms != null) {
-          termsEnum = terms.iterator(termsEnum);
+          // TODO: share per-segment TermsEnum here!
+          TermsEnum termsEnum = terms.iterator();
           if (termsEnum.seekExact(catTerm)) {
             // liveDocs=null because the taxonomy has no deletes
             docs = termsEnum.postings(null, docs, 0 /* freqs not required */);
@@ -674,12 +674,12 @@
     boolean aborted = false;
     DirectoryReader reader = readerManager.acquire();
     try {
-      TermsEnum termsEnum = null;
       PostingsEnum postingsEnum = null;
       for (LeafReaderContext ctx : reader.leaves()) {
         Terms terms = ctx.reader().terms(Consts.FULL);
         if (terms != null) { // cannot really happen, but be on the safe side
-          termsEnum = terms.iterator(termsEnum);
+          // TODO: share per-segment TermsEnum here!
+          TermsEnum termsEnum = terms.iterator();
           while (termsEnum.next() != null) {
             if (!cache.isFull()) {
               BytesRef t = termsEnum.term();
@@ -770,12 +770,12 @@
       final OrdinalMap ordinalMap = map;
       ordinalMap.setSize(size);
       int base = 0;
-      TermsEnum te = null;
       PostingsEnum docs = null;
       for (final LeafReaderContext ctx : r.leaves()) {
         final LeafReader ar = ctx.reader();
         final Terms terms = ar.terms(Consts.FULL);
-        te = terms.iterator(te);
+        // TODO: share per-segment TermsEnum here!
+        TermsEnum te = terms.iterator();
         while (te.next() != null) {
           FacetLabel cp = new FacetLabel(FacetsConfig.stringToPath(te.term().utf8ToString()));
           final int ordinal = addCategory(cp);
Index: lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenStreamFromTermVector.java
===================================================================
--- lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenStreamFromTermVector.java	(revision 1672106)
+++ lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenStreamFromTermVector.java	(working copy)
@@ -121,7 +121,7 @@
 
     int lastPosition = -1;
 
-    final TermsEnum termsEnum = vector.iterator(null);
+    final TermsEnum termsEnum = vector.iterator();
     BytesRef termBytesRef;
     PostingsEnum dpEnum = null;
     //int sumFreq = 0;
Index: lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter.java
===================================================================
--- lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter.java	(revision 1672106)
+++ lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter.java	(working copy)
@@ -509,7 +509,7 @@
           throw new IllegalArgumentException("field '" + field + "' was indexed without offsets, cannot highlight");
         }
         if (t != null) {
-          termsEnum = t.iterator(null);
+          termsEnum = t.iterator();
           postings = new PostingsEnum[terms.length];
         }
       }
Index: lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack.java
===================================================================
--- lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack.java	(revision 1672106)
+++ lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack.java	(working copy)
@@ -92,7 +92,7 @@
     }
 
     final CharsRefBuilder spare = new CharsRefBuilder();
-    final TermsEnum termsEnum = vector.iterator(null);
+    final TermsEnum termsEnum = vector.iterator();
     PostingsEnum dpEnum = null;
     BytesRef text;
     
Index: lucene/join/src/java/org/apache/lucene/search/join/TermsIncludingScoreQuery.java
===================================================================
--- lucene/join/src/java/org/apache/lucene/search/join/TermsIncludingScoreQuery.java	(revision 1672106)
+++ lucene/join/src/java/org/apache/lucene/search/join/TermsIncludingScoreQuery.java	(working copy)
@@ -127,13 +127,11 @@
     final Weight originalWeight = originalQuery.createWeight(searcher, needsScores);
     return new Weight(TermsIncludingScoreQuery.this) {
 
-      private TermsEnum segmentTermsEnum;
-
       @Override
       public Explanation explain(LeafReaderContext context, int doc) throws IOException {
         Terms terms = context.reader().terms(field);
         if (terms != null) {
-          segmentTermsEnum = terms.iterator(segmentTermsEnum);
+          TermsEnum segmentTermsEnum = terms.iterator();
           BytesRef spare = new BytesRef();
           PostingsEnum postingsEnum = null;
           for (int i = 0; i < TermsIncludingScoreQuery.this.terms.size(); i++) {
@@ -169,7 +167,7 @@
         // what is the runtime...seems ok?
         final long cost = context.reader().maxDoc() * terms.size();
 
-        segmentTermsEnum = terms.iterator(segmentTermsEnum);
+        TermsEnum segmentTermsEnum = terms.iterator();
         if (multipleValuesPerDocument) {
           return new MVInOrderScorer(this, acceptDocs, segmentTermsEnum, context.reader().maxDoc(), cost);
         } else {
Index: lucene/join/src/java/org/apache/lucene/search/join/TermsQuery.java
===================================================================
--- lucene/join/src/java/org/apache/lucene/search/join/TermsQuery.java	(revision 1672106)
+++ lucene/join/src/java/org/apache/lucene/search/join/TermsQuery.java	(working copy)
@@ -58,7 +58,7 @@
       return TermsEnum.EMPTY;
     }
 
-    return new SeekingTermSetTermsEnum(terms.iterator(null), this.terms, ords);
+    return new SeekingTermSetTermsEnum(terms.iterator(), this.terms, ords);
   }
 
   @Override
Index: lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil.java
===================================================================
--- lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil.java	(revision 1672106)
+++ lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil.java	(working copy)
@@ -926,11 +926,10 @@
         Terms terms = slowCompositeReader.terms(toField);
         if (terms != null) {
           PostingsEnum postingsEnum = null;
-          TermsEnum termsEnum = null;
           SortedSet<BytesRef> joinValues = new TreeSet<>(BytesRef.getUTF8SortedAsUnicodeComparator());
           joinValues.addAll(joinValueToJoinScores.keySet());
           for (BytesRef joinValue : joinValues) {
-            termsEnum = terms.iterator(termsEnum);
+            TermsEnum termsEnum = terms.iterator();
             if (termsEnum.seekExact(joinValue)) {
               postingsEnum = termsEnum.postings(slowCompositeReader.getLiveDocs(), postingsEnum, PostingsEnum.NONE);
               JoinScore joinScore = joinValueToJoinScores.get(joinValue);
Index: lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java
===================================================================
--- lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java	(revision 1672106)
+++ lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java	(working copy)
@@ -840,7 +840,7 @@
 
         return new Terms() {
           @Override
-          public TermsEnum iterator(TermsEnum reuse) {
+          public TermsEnum iterator() {
             return new MemoryTermsEnum(info);
           }
 
Index: lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex.java
===================================================================
--- lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex.java	(revision 1672106)
+++ lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex.java	(working copy)
@@ -99,7 +99,7 @@
     mi.addField("field", "some terms be here", analyzer);
     IndexSearcher searcher = mi.createSearcher();
     LeafReader reader = (LeafReader) searcher.getIndexReader();
-    TermsEnum terms = reader.fields().terms("field").iterator(null);
+    TermsEnum terms = reader.fields().terms("field").iterator();
     terms.seekExact(0);
     assertEquals("be", terms.term().utf8ToString());
     TestUtil.checkReader(reader);
Index: lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir.java
===================================================================
--- lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir.java	(revision 1672106)
+++ lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir.java	(working copy)
@@ -191,8 +191,8 @@
         assertEquals(iwTerms.getDocCount(), memTerms.getDocCount());
         assertEquals(iwTerms.getSumDocFreq(), memTerms.getSumDocFreq());
         assertEquals(iwTerms.getSumTotalTermFreq(), memTerms.getSumTotalTermFreq());
-        TermsEnum iwTermsIter = iwTerms.iterator(null);
-        TermsEnum memTermsIter = memTerms.iterator(null);
+        TermsEnum iwTermsIter = iwTerms.iterator();
+        TermsEnum memTermsIter = memTerms.iterator();
         if (iwTerms.hasPositions()) {
           final boolean offsets = iwTerms.hasOffsets() && memTerms.hasOffsets();
          
@@ -326,7 +326,7 @@
     assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);
     
     // now reuse and check again
-    TermsEnum te = reader.terms("foo").iterator(null);
+    TermsEnum te = reader.terms("foo").iterator();
     assertTrue(te.seekExact(new BytesRef("bar")));
     disi = te.postings(null, disi, PostingsEnum.NONE);
     docid = disi.docID();
@@ -365,7 +365,7 @@
       assertEquals(3, disi.endOffset());
       
       // now reuse and check again
-      TermsEnum te = reader.terms("foo").iterator(null);
+      TermsEnum te = reader.terms("foo").iterator();
       assertTrue(te.seekExact(new BytesRef("bar")));
       disi = te.postings(null, disi);
       docid = disi.docID();
@@ -529,8 +529,8 @@
 
   protected void compareTermVectors(Terms terms, Terms memTerms, String field_name) throws IOException {
 
-    TermsEnum termEnum = terms.iterator(null);
-    TermsEnum memTermEnum = memTerms.iterator(null);
+    TermsEnum termEnum = terms.iterator();
+    TermsEnum memTermEnum = memTerms.iterator();
 
     while (termEnum.next() != null) {
       assertNotNull(memTermEnum.next());
Index: lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.java
===================================================================
--- lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.java	(revision 1672106)
+++ lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.java	(working copy)
@@ -87,8 +87,8 @@
     }
 
     @Override
-    public TermsEnum iterator(final TermsEnum reuse) throws IOException {
-      return new SortingTermsEnum(in.iterator(reuse), docMap, indexOptions, hasPositions());
+    public TermsEnum iterator() throws IOException {
+      return new SortingTermsEnum(in.iterator(), docMap, indexOptions, hasPositions());
     }
 
     @Override
Index: lucene/misc/src/java/org/apache/lucene/misc/HighFreqTerms.java
===================================================================
--- lucene/misc/src/java/org/apache/lucene/misc/HighFreqTerms.java	(revision 1672106)
+++ lucene/misc/src/java/org/apache/lucene/misc/HighFreqTerms.java	(working copy)
@@ -101,7 +101,7 @@
         throw new RuntimeException("field " + field + " not found");
       }
 
-      TermsEnum termsEnum = terms.iterator(null);
+      TermsEnum termsEnum = terms.iterator();
       tiq = new TermStatsQueue(numTerms, comparator);
       tiq.fill(field, termsEnum);
     } else {
@@ -113,7 +113,7 @@
       for (String fieldName : fields) {
         Terms terms = fields.terms(fieldName);
         if (terms != null) {
-          tiq.fill(fieldName, terms.iterator(null));
+          tiq.fill(fieldName, terms.iterator());
         }
       }
     }
Index: lucene/misc/src/java/org/apache/lucene/uninverting/DocTermOrds.java
===================================================================
--- lucene/misc/src/java/org/apache/lucene/uninverting/DocTermOrds.java	(revision 1672106)
+++ lucene/misc/src/java/org/apache/lucene/uninverting/DocTermOrds.java	(working copy)
@@ -236,7 +236,7 @@
       if (terms == null) {
         return null;
       } else {
-        return terms.iterator(null);
+        return terms.iterator();
       }
     } else {
       //System.out.println("GET wrapped enum ordBase=" + ordBase);
@@ -289,7 +289,7 @@
       return;
     }
 
-    final TermsEnum te = terms.iterator(null);
+    final TermsEnum te = terms.iterator();
     final BytesRef seekStart = termPrefix != null ? termPrefix : new BytesRef();
     //System.out.println("seekStart=" + seekStart.utf8ToString());
     if (te.seekCeil(seekStart) == TermsEnum.SeekStatus.END) {
@@ -608,7 +608,7 @@
     
     public OrdWrappedTermsEnum(LeafReader reader) throws IOException {
       assert indexedTermsArray != null;
-      termsEnum = reader.fields().terms(field).iterator(null);
+      termsEnum = reader.fields().terms(field).iterator();
     }
 
     @Override    
Index: lucene/misc/src/java/org/apache/lucene/uninverting/FieldCache.java
===================================================================
--- lucene/misc/src/java/org/apache/lucene/uninverting/FieldCache.java	(revision 1672106)
+++ lucene/misc/src/java/org/apache/lucene/uninverting/FieldCache.java	(working copy)
@@ -99,7 +99,7 @@
     
     @Override
     public TermsEnum termsEnum(Terms terms) throws IOException {
-      return NumericUtils.filterPrefixCodedInts(terms.iterator(null));
+      return NumericUtils.filterPrefixCodedInts(terms.iterator());
     }
     
     @Override
@@ -127,7 +127,7 @@
     
     @Override
     public TermsEnum termsEnum(Terms terms) throws IOException {
-      return NumericUtils.filterPrefixCodedInts(terms.iterator(null));
+      return NumericUtils.filterPrefixCodedInts(terms.iterator());
     }
   };
 
@@ -147,7 +147,7 @@
     
     @Override
     public TermsEnum termsEnum(Terms terms) throws IOException {
-      return NumericUtils.filterPrefixCodedLongs(terms.iterator(null));
+      return NumericUtils.filterPrefixCodedLongs(terms.iterator());
     }
   };
 
@@ -169,7 +169,7 @@
     
     @Override
     public TermsEnum termsEnum(Terms terms) throws IOException {
-      return NumericUtils.filterPrefixCodedLongs(terms.iterator(null));
+      return NumericUtils.filterPrefixCodedLongs(terms.iterator());
     }
   };
   
Index: lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.java
===================================================================
--- lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.java	(revision 1672106)
+++ lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.java	(working copy)
@@ -407,7 +407,7 @@
           // Fast case: all docs have this field:
           return new BitsEntry(new Bits.MatchAllBits(maxDoc));
         }
-        final TermsEnum termsEnum = terms.iterator(null);
+        final TermsEnum termsEnum = terms.iterator();
         PostingsEnum docs = null;
         while(true) {
           final BytesRef term = termsEnum.next();
@@ -685,7 +685,7 @@
       // TODO: use Uninvert?
 
       if (terms != null) {
-        final TermsEnum termsEnum = terms.iterator(null);
+        final TermsEnum termsEnum = terms.iterator();
         PostingsEnum docs = null;
 
         while(true) {
@@ -835,7 +835,7 @@
 
       if (terms != null) {
         int termCount = 0;
-        final TermsEnum termsEnum = terms.iterator(null);
+        final TermsEnum termsEnum = terms.iterator();
         PostingsEnum docs = null;
         while(true) {
           if (termCount++ == termCountHardLimit) {
Index: lucene/misc/src/test/org/apache/lucene/index/SorterTestBase.java
===================================================================
--- lucene/misc/src/test/org/apache/lucene/index/SorterTestBase.java	(revision 1672106)
+++ lucene/misc/src/test/org/apache/lucene/index/SorterTestBase.java	(working copy)
@@ -233,7 +233,7 @@
   
   @Test
   public void testDocsAndPositionsEnum() throws Exception {
-    TermsEnum termsEnum = sortedReader.terms(DOC_POSITIONS_FIELD).iterator(null);
+    TermsEnum termsEnum = sortedReader.terms(DOC_POSITIONS_FIELD).iterator();
     assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(DOC_POSITIONS_TERM)));
     PostingsEnum sortedPositions = termsEnum.postings(null, null, PostingsEnum.ALL);
     int doc;
@@ -294,7 +294,7 @@
   @Test
   public void testDocsEnum() throws Exception {
     Bits mappedLiveDocs = randomLiveDocs(sortedReader.maxDoc());
-    TermsEnum termsEnum = sortedReader.terms(DOCS_ENUM_FIELD).iterator(null);
+    TermsEnum termsEnum = sortedReader.terms(DOCS_ENUM_FIELD).iterator();
     assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(DOCS_ENUM_TERM)));
     PostingsEnum docs = termsEnum.postings(mappedLiveDocs, null);
 
@@ -392,7 +392,7 @@
     for (int i = 0; i < maxDoc; i++) {
       Terms terms = sortedReader.getTermVector(i, TERM_VECTORS_FIELD);
       assertNotNull("term vectors not found for doc " + i + " field [" + TERM_VECTORS_FIELD + "]", terms);
-      assertEquals("incorrect term vector for doc " + i, sortedValues[i].toString(), terms.iterator(null).next().utf8ToString());
+      assertEquals("incorrect term vector for doc " + i, sortedValues[i].toString(), terms.iterator().next().utf8ToString());
     }
   }
   
Index: lucene/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter.java
===================================================================
--- lucene/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter.java	(revision 1672106)
+++ lucene/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter.java	(working copy)
@@ -72,7 +72,7 @@
     assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1); // rounding error
     StoredDocument doc = ir.document(0);
     assertEquals("0", doc.get("id"));
-    TermsEnum te = MultiFields.getTerms(ir, "id").iterator(null);
+    TermsEnum te = MultiFields.getTerms(ir, "id").iterator();
     assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef("1")));
     assertNotSame("1", te.term().utf8ToString());
     ir.close();
@@ -80,7 +80,7 @@
     assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);
     doc = ir.document(0);
     assertEquals("1", doc.get("id"));
-    te = MultiFields.getTerms(ir, "id").iterator(null);
+    te = MultiFields.getTerms(ir, "id").iterator();
     assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef("0")));
 
     assertNotSame("0", te.term().utf8ToString());
@@ -90,7 +90,7 @@
     doc = ir.document(0);
     assertEquals("2", doc.get("id"));
 
-    te = MultiFields.getTerms(ir, "id").iterator(null);
+    te = MultiFields.getTerms(ir, "id").iterator();
     assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef("1")));
     assertNotSame("1", te.term());
 
@@ -130,7 +130,7 @@
     doc = ir.document(0);
     assertEquals(start + "", doc.get("id"));
     // make sure the deleted doc is not here
-    TermsEnum te = MultiFields.getTerms(ir, "id").iterator(null);
+    TermsEnum te = MultiFields.getTerms(ir, "id").iterator();
     Term t = new Term("id", (NUM_DOCS - 1) + "");
     assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(t.text())));
     assertNotSame(t.text(), te.term().utf8ToString());
Index: lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds.java
===================================================================
--- lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds.java	(revision 1672106)
+++ lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds.java	(working copy)
@@ -331,7 +331,7 @@
     if (VERBOSE) {
       System.out.println("TEST: verify prefix=" + (prefixRef==null ? "null" : prefixRef.utf8ToString()));
       System.out.println("TEST: all TERMS:");
-      TermsEnum allTE = MultiFields.getTerms(r, "field").iterator(null);
+      TermsEnum allTE = MultiFields.getTerms(r, "field").iterator();
       int ord = 0;
       while(allTE.next() != null) {
         System.out.println("  ord=" + (ord++) + " term=" + allTE.term().utf8ToString());
@@ -346,7 +346,7 @@
       } else {
         Terms terms = MultiFields.getTerms(r, "field");
         if (terms != null) {
-          TermsEnum termsEnum = terms.iterator(null);
+          TermsEnum termsEnum = terms.iterator();
           TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef);
           if (result != TermsEnum.SeekStatus.END) {
             assertFalse("term=" + termsEnum.term().utf8ToString() + " matches prefix=" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));
Index: lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache.java
===================================================================
--- lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache.java	(revision 1672106)
+++ lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache.java	(working copy)
@@ -141,7 +141,7 @@
       cache.getNumerics(reader, "theDouble", new FieldCache.Parser() {
         @Override
         public TermsEnum termsEnum(Terms terms) throws IOException {
-          return NumericUtils.filterPrefixCodedLongs(terms.iterator(null));
+          return NumericUtils.filterPrefixCodedLongs(terms.iterator());
         }
         @Override
         public long parseValue(BytesRef term) {
Index: lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery.java	(revision 1672106)
+++ lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery.java	(working copy)
@@ -247,7 +247,7 @@
           // field does not exist
           continue;
         }
-        termsEnum = terms.iterator(termsEnum);
+        termsEnum = terms.iterator();
         assert termsEnum != null;
         
         if (termsEnum == TermsEnum.EMPTY) continue;
Index: lucene/queries/src/java/org/apache/lucene/queries/TermsQuery.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/TermsQuery.java	(revision 1672106)
+++ lucene/queries/src/java/org/apache/lucene/queries/TermsQuery.java	(working copy)
@@ -382,7 +382,7 @@
         PostingsEnum docs = null;
         for (TermsAndField termsAndField : termsAndFields) {
           if ((terms = fields.terms(termsAndField.field)) != null) {
-            termsEnum = terms.iterator(termsEnum); // this won't return null
+            termsEnum = terms.iterator(); // this won't return null
             for (int i = termsAndField.start; i < termsAndField.end; i++) {
               spare.offset = offsets[i];
               spare.length = offsets[i+1] - offsets[i];
Index: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource.java	(revision 1672106)
+++ lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource.java	(working copy)
@@ -59,7 +59,7 @@
     final BinaryDocValues terms = DocValues.getBinary(readerContext.reader(), field);
     final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader();
     Terms t = MultiFields.getTerms(top, qfield);
-    final TermsEnum termsEnum = t == null ? TermsEnum.EMPTY : t.iterator(null);
+    final TermsEnum termsEnum = t == null ? TermsEnum.EMPTY : t.iterator();
     
     return new IntDocValues(this) {
 
Index: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/TFValueSource.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/TFValueSource.java	(revision 1672106)
+++ lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/TFValueSource.java	(working copy)
@@ -70,7 +70,7 @@
         // no one should call us for deleted docs?
         
         if (terms != null) {
-          final TermsEnum termsEnum = terms.iterator(null);
+          final TermsEnum termsEnum = terms.iterator();
           if (termsEnum.seekExact(indexedBytes)) {
             docs = termsEnum.postings(null, null);
           } else {
Index: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/TermFreqValueSource.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/TermFreqValueSource.java	(revision 1672106)
+++ lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/TermFreqValueSource.java	(working copy)
@@ -63,7 +63,7 @@
         // no one should call us for deleted docs?
         
         if (terms != null) {
-          final TermsEnum termsEnum = terms.iterator(null);
+          final TermsEnum termsEnum = terms.iterator();
           if (termsEnum.seekExact(indexedBytes)) {
             docs = termsEnum.postings(null, null);
           } else {
Index: lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis.java	(revision 1672106)
+++ lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis.java	(working copy)
@@ -773,7 +773,7 @@
    * @param vector List of terms and their frequencies for a doc/field
    */
   private void addTermFrequencies(Map<String, Int> termFreqMap, Terms vector) throws IOException {
-    final TermsEnum termsEnum = vector.iterator(null);
+    final TermsEnum termsEnum = vector.iterator();
     final CharsRefBuilder spare = new CharsRefBuilder();
     BytesRef text;
     while((text = termsEnum.next()) != null) {
Index: lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest.java
===================================================================
--- lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest.java	(revision 1672106)
+++ lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest.java	(working copy)
@@ -424,7 +424,7 @@
       
     };
     try {
-      TermsEnum iterator = terms.iterator(null);
+      TermsEnum iterator = terms.iterator();
       while (iterator.next() != null) {
         if (highFreqQueue.size() < 5) {
           highFreqQueue.add(new TermAndFreq(
Index: lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SrndPrefixQuery.java
===================================================================
--- lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SrndPrefixQuery.java	(revision 1672106)
+++ lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SrndPrefixQuery.java	(working copy)
@@ -64,7 +64,7 @@
     /* inspired by PrefixQuery.rewrite(): */
     Terms terms = MultiFields.getTerms(reader, fieldName);
     if (terms != null) {
-      TermsEnum termsEnum = terms.iterator(null);
+      TermsEnum termsEnum = terms.iterator();
 
       boolean skip = false;
       TermsEnum.SeekStatus status = termsEnum.seekCeil(new BytesRef(getPrefix()));
Index: lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SrndTermQuery.java
===================================================================
--- lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SrndTermQuery.java	(revision 1672106)
+++ lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SrndTermQuery.java	(working copy)
@@ -54,7 +54,7 @@
     /* check term presence in index here for symmetry with other SimpleTerm's */
     Terms terms = MultiFields.getTerms(reader, fieldName);
     if (terms != null) {
-      TermsEnum termsEnum = terms.iterator(null);
+      TermsEnum termsEnum = terms.iterator();
 
       TermsEnum.SeekStatus status = termsEnum.seekCeil(new BytesRef(getTermText()));
       if (status == TermsEnum.SeekStatus.FOUND) {
Index: lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SrndTruncQuery.java
===================================================================
--- lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SrndTruncQuery.java	(revision 1672106)
+++ lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SrndTruncQuery.java	(working copy)
@@ -96,7 +96,7 @@
     if (terms != null) {
       Matcher matcher = pattern.matcher("");
       try {
-        TermsEnum termsEnum = terms.iterator(null);
+        TermsEnum termsEnum = terms.iterator();
 
         TermsEnum.SeekStatus status = termsEnum.seekCeil(prefixRef);
         BytesRef text;
Index: lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.java
===================================================================
--- lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.java	(revision 1672106)
+++ lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.java	(working copy)
@@ -234,7 +234,7 @@
         continue;
       }
 
-      TermsEnum termsEnum = terms.iterator(null);
+      TermsEnum termsEnum = terms.iterator();
 
       TermsWriter termsWriter = new TermsWriter(fieldInfos.fieldInfo(field));
       while (true) {
Index: lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionFieldReader.java
===================================================================
--- lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionFieldReader.java	(revision 1672106)
+++ lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionFieldReader.java	(working copy)
@@ -134,7 +134,7 @@
   }
 
   @Override
-  public TermsEnum iterator(TermsEnum reuse) throws IOException {
+  public TermsEnum iterator() throws IOException {
     return new IDVersionSegmentTermsEnum(this);
   }
 
Index: lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter.java
===================================================================
--- lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter.java	(revision 1672106)
+++ lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter.java	(working copy)
@@ -99,7 +99,7 @@
     Terms terms = reader.fields().terms(fieldName);
 
     if (terms != null) {
-      TermsEnum termsEnum = terms.iterator(null);
+      TermsEnum termsEnum = terms.iterator();
       PostingsEnum docs = null;
       while (true) {
         BytesRef currTerm = termsEnum.next();
@@ -135,7 +135,7 @@
     Terms terms = reader.fields().terms(fieldName);
 
     if (terms != null) {
-      TermsEnum termsEnum = terms.iterator(null);
+      TermsEnum termsEnum = terms.iterator();
       PostingsEnum docs = null;
       while (true) {
         BytesRef currTerm = termsEnum.next();
Index: lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowFuzzyQuery.java
===================================================================
--- lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowFuzzyQuery.java	(revision 1672106)
+++ lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowFuzzyQuery.java	(working copy)
@@ -144,7 +144,7 @@
   @Override
   protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {
     if (!termLongEnough) {  // can only match if it's exact
-      return new SingleTermsEnum(terms.iterator(null), term.bytes());
+      return new SingleTermsEnum(terms.iterator(), term.bytes());
     }
     return new SlowFuzzyTermsEnum(terms, atts, getTerm(), minimumSimilarity, prefixLength);
   }
Index: lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowFuzzyTermsEnum.java
===================================================================
--- lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowFuzzyTermsEnum.java	(revision 1672106)
+++ lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowFuzzyTermsEnum.java	(working copy)
@@ -90,7 +90,7 @@
      * @throws IOException If there is a low-level I/O error.
      */
     public LinearFuzzyTermsEnum() throws IOException {
-      super(terms.iterator(null));
+      super(terms.iterator());
 
       this.text = new int[termLength - realPrefixLength];
       System.arraycopy(termText, realPrefixLength, text, 0, text.length);
Index: lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/regex/RegexQuery.java
===================================================================
--- lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/regex/RegexQuery.java	(revision 1672106)
+++ lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/regex/RegexQuery.java	(working copy)
@@ -63,7 +63,7 @@
 
   @Override
   protected FilteredTermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {
-    return new RegexTermsEnum(terms.iterator(null), term, regexImpl);
+    return new RegexTermsEnum(terms.iterator(), term, regexImpl);
   }
 
   @Override
Index: lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.java
===================================================================
--- lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.java	(revision 1672106)
+++ lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.java	(working copy)
@@ -393,7 +393,7 @@
         TermState state = termContext.get(context.ord);
         if (state != null) {
 
-          TermsEnum termsEnum = context.reader().terms(field).iterator(null);
+          TermsEnum termsEnum = context.reader().terms(field).iterator();
           termsEnum.seekExact(term, state);
           enums[ent.getKey()] = new EnumAndScorer(ent.getKey(), termsEnum.postings(acceptDocs, null, PostingsEnum.POSITIONS));
         }
Index: lucene/sandbox/src/test/org/apache/lucene/codecs/idversion/TestIDVersionPostingsFormat.java
===================================================================
--- lucene/sandbox/src/test/org/apache/lucene/codecs/idversion/TestIDVersionPostingsFormat.java	(revision 1672106)
+++ lucene/sandbox/src/test/org/apache/lucene/codecs/idversion/TestIDVersionPostingsFormat.java	(working copy)
@@ -76,7 +76,7 @@
     doc.add(makeIDField("id1", 110));
     w.addDocument(doc);
     IndexReader r = w.getReader();
-    IDVersionSegmentTermsEnum termsEnum = (IDVersionSegmentTermsEnum) r.leaves().get(0).reader().fields().terms("id").iterator(null);
+    IDVersionSegmentTermsEnum termsEnum = (IDVersionSegmentTermsEnum) r.leaves().get(0).reader().fields().terms("id").iterator();
     assertTrue(termsEnum.seekExact(new BytesRef("id0"), 50));
     assertTrue(termsEnum.seekExact(new BytesRef("id0"), 100));
     assertFalse(termsEnum.seekExact(new BytesRef("id0"), 101));
Index: lucene/spatial/src/java/org/apache/lucene/spatial/prefix/AbstractPrefixTreeFilter.java
===================================================================
--- lucene/spatial/src/java/org/apache/lucene/spatial/prefix/AbstractPrefixTreeFilter.java	(revision 1672106)
+++ lucene/spatial/src/java/org/apache/lucene/spatial/prefix/AbstractPrefixTreeFilter.java	(working copy)
@@ -89,7 +89,7 @@
       this.maxDoc = reader.maxDoc();
       Terms terms = reader.terms(fieldName);
       if (terms != null)
-        this.termsEnum = terms.iterator(null);
+        this.termsEnum = terms.iterator();
     }
 
     protected void collectDocs(BitSet bitSet) throws IOException {
Index: lucene/spatial/src/java/org/apache/lucene/spatial/util/ShapeFieldCacheProvider.java
===================================================================
--- lucene/spatial/src/java/org/apache/lucene/spatial/util/ShapeFieldCacheProvider.java	(revision 1672106)
+++ lucene/spatial/src/java/org/apache/lucene/spatial/util/ShapeFieldCacheProvider.java	(working copy)
@@ -63,9 +63,8 @@
     int count = 0;
     PostingsEnum docs = null;
     Terms terms = reader.terms(shapeField);
-    TermsEnum te = null;
     if (terms != null) {
-      te = terms.iterator(te);
+      TermsEnum te = terms.iterator();
       BytesRef term = te.next();
       while (term != null) {
         T shape = readShape(term);
Index: lucene/suggest/src/java/org/apache/lucene/search/spell/HighFrequencyDictionary.java
===================================================================
--- lucene/suggest/src/java/org/apache/lucene/search/spell/HighFrequencyDictionary.java	(revision 1672106)
+++ lucene/suggest/src/java/org/apache/lucene/search/spell/HighFrequencyDictionary.java	(working copy)
@@ -70,7 +70,7 @@
     HighFrequencyIterator() throws IOException {
       Terms terms = MultiFields.getTerms(reader, field);
       if (terms != null) {
-        termsEnum = terms.iterator(null);
+        termsEnum = terms.iterator();
       } else {
         termsEnum = null;
       }
Index: lucene/suggest/src/java/org/apache/lucene/search/spell/LuceneDictionary.java
===================================================================
--- lucene/suggest/src/java/org/apache/lucene/search/spell/LuceneDictionary.java	(revision 1672106)
+++ lucene/suggest/src/java/org/apache/lucene/search/spell/LuceneDictionary.java	(working copy)
@@ -46,7 +46,7 @@
   public final InputIterator getEntryIterator() throws IOException {
     final Terms terms = MultiFields.getTerms(reader, field);
     if (terms != null) {
-      return new InputIterator.InputIteratorWrapper(terms.iterator(null));
+      return new InputIterator.InputIteratorWrapper(terms.iterator());
     } else {
       return InputIterator.EMPTY;
     }
Index: lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker.java
===================================================================
--- lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker.java	(revision 1672106)
+++ lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker.java	(working copy)
@@ -499,7 +499,7 @@
         for (final LeafReaderContext ctx : reader.leaves()) {
           Terms terms = ctx.reader().terms(F_WORD);
           if (terms != null)
-            termsEnums.add(terms.iterator(null));
+            termsEnums.add(terms.iterator());
         }
       }
       
Index: lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester.java
===================================================================
--- lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester.java	(revision 1672106)
+++ lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester.java	(working copy)
@@ -252,7 +252,7 @@
   private double createCoefficient(IndexSearcher searcher, int doc, Set<String> matchedTokens, String prefixToken) throws IOException {
 
     Terms tv = searcher.getIndexReader().getTermVector(doc, TEXT_FIELD_NAME);
-    TermsEnum it = tv.iterator(TermsEnum.EMPTY);
+    TermsEnum it = tv.iterator();
 
     Integer position = Integer.MAX_VALUE;
     BytesRef term;
Index: lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester.java
===================================================================
--- lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester.java	(revision 1672106)
+++ lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester.java	(working copy)
@@ -347,7 +347,7 @@
       }
 
       // Move all ngrams into an FST:
-      TermsEnum termsEnum = terms.iterator(null);
+      TermsEnum termsEnum = terms.iterator();
 
       Outputs<Long> outputs = PositiveIntOutputs.getSingleton();
       Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);
Index: lucene/suggest/src/java/org/apache/lucene/search/suggest/document/CompletionFieldsConsumer.java
===================================================================
--- lucene/suggest/src/java/org/apache/lucene/search/suggest/document/CompletionFieldsConsumer.java	(revision 1672106)
+++ lucene/suggest/src/java/org/apache/lucene/search/suggest/document/CompletionFieldsConsumer.java	(working copy)
@@ -87,7 +87,7 @@
     for (String field : fields) {
       CompletionTermWriter termWriter = new CompletionTermWriter();
       Terms terms = fields.terms(field);
-      TermsEnum termsEnum = terms.iterator(null);
+      TermsEnum termsEnum = terms.iterator();
 
       // write terms
       BytesRef term;
Index: lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPostingsFormat.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPostingsFormat.java	(revision 1672106)
+++ lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPostingsFormat.java	(working copy)
@@ -142,7 +142,6 @@
       // incoming Fields here?
  
       String lastField = null;
-      TermsEnum termsEnum = null;
 
       for(String field : fields) {
 
@@ -157,7 +156,7 @@
         }
         assert terms != null;
 
-        termsEnum = terms.iterator(termsEnum);
+        TermsEnum termsEnum = terms.iterator();
         BytesRefBuilder lastTerm = null;
         PostingsEnum postingsEnum = null;
 
Index: lucene/test-framework/src/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat.java	(revision 1672106)
+++ lucene/test-framework/src/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat.java	(working copy)
@@ -149,7 +149,7 @@
     }
 
     @Override
-    public TermsEnum iterator(TermsEnum reuse) {
+    public TermsEnum iterator() {
       return new RAMTermsEnum(RAMOnlyPostingsFormat.RAMField.this);
     }
 
@@ -237,7 +237,7 @@
           continue;
         }
 
-        TermsEnum termsEnum = terms.iterator(null);
+        TermsEnum termsEnum = terms.iterator();
 
         FieldInfo fieldInfo = state.fieldInfos.fieldInfo(field);
         if (fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {
Index: lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.java	(revision 1672106)
+++ lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.java	(working copy)
@@ -113,23 +113,10 @@
     }
 
     @Override
-    public TermsEnum iterator(TermsEnum reuse) throws IOException {
-      // reuse, if the codec reused
-      final TermsEnum actualReuse;
-      if (reuse instanceof AssertingTermsEnum) {
-        actualReuse = ((AssertingTermsEnum) reuse).in;
-      } else {
-        actualReuse = null;
-      }
-      TermsEnum termsEnum = super.iterator(actualReuse);
+    public TermsEnum iterator() throws IOException {
+      TermsEnum termsEnum = super.iterator();
       assert termsEnum != null;
-      if (termsEnum == actualReuse) {
-        // codec reused, reset asserting state
-        ((AssertingTermsEnum)reuse).reset();
-        return reuse;
-      } else {
-        return new AssertingTermsEnum(termsEnum);
-      }
+      return new AssertingTermsEnum(termsEnum);
     }
   }
   
Index: lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase.java	(revision 1672106)
+++ lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase.java	(working copy)
@@ -163,7 +163,7 @@
     RandomPostingsTester.FieldAndTerm fieldAndTerm = postingsTester.allTerms.get(0);
 
     Terms terms = fieldsProducer.terms(fieldAndTerm.field);
-    TermsEnum te = terms.iterator(null);
+    TermsEnum te = terms.iterator();
 
     te.seekExact(fieldAndTerm.term);
     checkReuse(te, PostingsEnum.FREQS, PostingsEnum.ALL, false);
@@ -200,7 +200,7 @@
     assertTrue(fieldCount == 1 || fieldCount == -1);
     Terms terms = ar.terms("");
     assertNotNull(terms);
-    TermsEnum termsEnum = terms.iterator(null);
+    TermsEnum termsEnum = terms.iterator();
     assertNotNull(termsEnum.next());
     assertEquals(termsEnum.term(), new BytesRef("something"));
     assertNull(termsEnum.next());
@@ -225,7 +225,7 @@
     assertTrue(fieldCount == 1 || fieldCount == -1);
     Terms terms = ar.terms("");
     assertNotNull(terms);
-    TermsEnum termsEnum = terms.iterator(null);
+    TermsEnum termsEnum = terms.iterator();
     assertNotNull(termsEnum.next());
     assertEquals(termsEnum.term(), new BytesRef(""));
     assertNull(termsEnum.next());
@@ -245,7 +245,7 @@
     iw.addDocument(doc);
     DirectoryReader ir = iw.getReader();
     LeafReader ar = getOnlySegmentReader(ir);
-    TermsEnum termsEnum = ar.terms("field").iterator(null);
+    TermsEnum termsEnum = ar.terms("field").iterator();
     assertTrue(termsEnum.seekExact(new BytesRef("value")));
     PostingsEnum docsEnum = termsEnum.postings(null, null, PostingsEnum.NONE);
     assertEquals(0, docsEnum.nextDoc());
@@ -268,7 +268,7 @@
     iw.addDocument(doc);
     DirectoryReader ir = iw.getReader();
     LeafReader ar = getOnlySegmentReader(ir);
-    TermsEnum termsEnum = ar.terms("field").iterator(null);
+    TermsEnum termsEnum = ar.terms("field").iterator();
     assertTrue(termsEnum.seekExact(new BytesRef("value")));
     PostingsEnum docsEnum = termsEnum.postings(null, null, PostingsEnum.POSITIONS);
     assertEquals(0, docsEnum.nextDoc());
@@ -303,7 +303,7 @@
     assertTrue(fields.size() <= 1);
     Terms terms = fields.terms("ghostField");
     if (terms != null) {
-      TermsEnum termsEnum = terms.iterator(null);
+      TermsEnum termsEnum = terms.iterator();
       BytesRef term = termsEnum.next();
       if (term != null) {
         PostingsEnum postingsEnum = termsEnum.postings(null, null);
@@ -391,7 +391,7 @@
                     Terms terms = fields.terms("body");
                     assert terms != null;
 
-                    TermsEnum termsEnum = terms.iterator(null);
+                    TermsEnum termsEnum = terms.iterator();
                     PostingsEnum docs = null;
                     while(termsEnum.next() != null) {
                       BytesRef term = termsEnum.term();
@@ -526,7 +526,7 @@
     assertEquals(sumDocFreq.get(), terms.getSumDocFreq());
     assertEquals(sumTotalTermFreq.get(), terms.getSumTotalTermFreq());
 
-    TermsEnum termsEnum = terms.iterator(null);
+    TermsEnum termsEnum = terms.iterator();
     long termCount = 0;
     boolean supportsOrds = true;
     while(termsEnum.next() != null) {
@@ -577,7 +577,7 @@
     assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings.nextDoc());
     
     // termsenum reuse (FREQS)
-    TermsEnum termsEnum = getOnlySegmentReader(reader).terms("foo").iterator(null);
+    TermsEnum termsEnum = getOnlySegmentReader(reader).terms("foo").iterator();
     termsEnum.seekExact(new BytesRef("bar"));
     PostingsEnum postings2 = termsEnum.postings(null, postings);
     assertNotNull(postings2);
@@ -635,7 +635,7 @@
     assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings.nextDoc());
     
     // termsenum reuse (FREQS)
-    TermsEnum termsEnum = getOnlySegmentReader(reader).terms("foo").iterator(null);
+    TermsEnum termsEnum = getOnlySegmentReader(reader).terms("foo").iterator();
     termsEnum.seekExact(new BytesRef("bar"));
     PostingsEnum postings2 = termsEnum.postings(null, postings);
     assertNotNull(postings2);
@@ -713,7 +713,7 @@
     assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings.nextDoc());
     
     // termsenum reuse (FREQS)
-    TermsEnum termsEnum = getOnlySegmentReader(reader).terms("foo").iterator(null);
+    TermsEnum termsEnum = getOnlySegmentReader(reader).terms("foo").iterator();
     termsEnum.seekExact(new BytesRef("bar"));
     PostingsEnum postings2 = termsEnum.postings(null, postings);
     assertNotNull(postings2);
@@ -893,7 +893,7 @@
     assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings.nextDoc());
     
     // termsenum reuse (FREQS)
-    TermsEnum termsEnum = getOnlySegmentReader(reader).terms("foo").iterator(null);
+    TermsEnum termsEnum = getOnlySegmentReader(reader).terms("foo").iterator();
     termsEnum.seekExact(new BytesRef("bar"));
     PostingsEnum postings2 = termsEnum.postings(null, postings);
     assertNotNull(postings2);
@@ -1078,7 +1078,7 @@
     assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings.nextDoc());
     
     // termsenum reuse (FREQS)
-    TermsEnum termsEnum = getOnlySegmentReader(reader).terms("foo").iterator(null);
+    TermsEnum termsEnum = getOnlySegmentReader(reader).terms("foo").iterator();
     termsEnum.seekExact(new BytesRef("bar"));
     PostingsEnum postings2 = termsEnum.postings(null, postings);
     assertNotNull(postings2);
@@ -1264,7 +1264,7 @@
     assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings.nextDoc());
     
     // termsenum reuse (FREQS)
-    TermsEnum termsEnum = getOnlySegmentReader(reader).terms("foo").iterator(null);
+    TermsEnum termsEnum = getOnlySegmentReader(reader).terms("foo").iterator();
     termsEnum.seekExact(new BytesRef("bar"));
     PostingsEnum postings2 = termsEnum.postings(null, postings);
     assertNotNull(postings2);
Index: lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase.java	(revision 1672106)
+++ lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase.java	(working copy)
@@ -426,7 +426,6 @@
   }
 
   // to test reuse
-  private final ThreadLocal<TermsEnum> termsEnum = new ThreadLocal<>();
   private final ThreadLocal<PostingsEnum> docsEnum = new ThreadLocal<>();
   private final ThreadLocal<PostingsEnum> docsAndPositionsEnum = new ThreadLocal<>();
 
@@ -444,8 +443,7 @@
     }
     final BytesRef[] sortedTerms = uniqueTerms.toArray(new BytesRef[0]);
     Arrays.sort(sortedTerms);
-    final TermsEnum termsEnum = terms.iterator(random().nextBoolean() ? null : this.termsEnum.get());
-    this.termsEnum.set(termsEnum);
+    final TermsEnum termsEnum = terms.iterator();
     for (int i = 0; i < sortedTerms.length; ++i) {
       final BytesRef nextTerm = termsEnum.next();
       assertEquals(sortedTerms[i], nextTerm);
@@ -775,7 +773,7 @@
     DirectoryReader reader = DirectoryReader.open(iw, false);
     
     Terms terms = getOnlySegmentReader(reader).getTermVector(0, "foo");
-    TermsEnum termsEnum = terms.iterator(null);
+    TermsEnum termsEnum = terms.iterator();
     assertNotNull(termsEnum);
     assertEquals(new BytesRef("bar"), termsEnum.next());
     
@@ -856,7 +854,7 @@
     DirectoryReader reader = DirectoryReader.open(iw, false);
     
     Terms terms = getOnlySegmentReader(reader).getTermVector(0, "foo");
-    TermsEnum termsEnum = terms.iterator(null);
+    TermsEnum termsEnum = terms.iterator();
     assertNotNull(termsEnum);
     assertEquals(new BytesRef("bar"), termsEnum.next());
     
@@ -1035,7 +1033,7 @@
     DirectoryReader reader = DirectoryReader.open(iw, false);
     
     Terms terms = getOnlySegmentReader(reader).getTermVector(0, "foo");
-    TermsEnum termsEnum = terms.iterator(null);
+    TermsEnum termsEnum = terms.iterator();
     assertNotNull(termsEnum);
     assertEquals(new BytesRef("bar"), termsEnum.next());
     
@@ -1221,7 +1219,7 @@
     DirectoryReader reader = DirectoryReader.open(iw, false);
     
     Terms terms = getOnlySegmentReader(reader).getTermVector(0, "foo");
-    TermsEnum termsEnum = terms.iterator(null);
+    TermsEnum termsEnum = terms.iterator();
     assertNotNull(termsEnum);
     assertEquals(new BytesRef("bar"), termsEnum.next());
     
@@ -1407,7 +1405,7 @@
     DirectoryReader reader = DirectoryReader.open(iw, false);
     
     Terms terms = getOnlySegmentReader(reader).getTermVector(0, "foo");
-    TermsEnum termsEnum = terms.iterator(null);
+    TermsEnum termsEnum = terms.iterator();
     assertNotNull(termsEnum);
     assertEquals(new BytesRef("bar"), termsEnum.next());
     
@@ -1593,7 +1591,7 @@
     DirectoryReader reader = DirectoryReader.open(iw, false);
     
     Terms terms = getOnlySegmentReader(reader).getTermVector(0, "foo");
-    TermsEnum termsEnum = terms.iterator(null);
+    TermsEnum termsEnum = terms.iterator();
     assertNotNull(termsEnum);
     assertEquals(new BytesRef("bar"), termsEnum.next());
     
Index: lucene/test-framework/src/java/org/apache/lucene/index/PerThreadPKLookup.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/index/PerThreadPKLookup.java	(revision 1672106)
+++ lucene/test-framework/src/java/org/apache/lucene/index/PerThreadPKLookup.java	(working copy)
@@ -62,7 +62,7 @@
     for(int i=0;i<leaves.size();i++) {
       Terms terms = leaves.get(i).reader().terms(idFieldName);
       if (terms != null) {
-        termsEnums[numSegs] = terms.iterator(null);
+        termsEnums[numSegs] = terms.iterator();
         assert termsEnums[numSegs] != null;
         docBases[numSegs] = leaves.get(i).docBase;
         liveDocs[numSegs] = leaves.get(i).reader().getLiveDocs();
Index: lucene/test-framework/src/java/org/apache/lucene/index/RandomPostingsTester.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/index/RandomPostingsTester.java	(revision 1672106)
+++ lucene/test-framework/src/java/org/apache/lucene/index/RandomPostingsTester.java	(working copy)
@@ -482,16 +482,8 @@
     }
 
     @Override
-    public TermsEnum iterator(TermsEnum reuse) {
-      SeedTermsEnum termsEnum;
-      if (reuse != null && reuse instanceof SeedTermsEnum) {
-        termsEnum = (SeedTermsEnum) reuse;
-        if (termsEnum.terms != terms) {
-          termsEnum = new SeedTermsEnum(terms, maxAllowed, allowPayloads);
-        }
-      } else {
-        termsEnum = new SeedTermsEnum(terms, maxAllowed, allowPayloads);
-      }
+    public TermsEnum iterator() {
+      SeedTermsEnum termsEnum = new SeedTermsEnum(terms, maxAllowed, allowPayloads);
       termsEnum.reset();
 
       return termsEnum;
@@ -1124,7 +1116,7 @@
 
       Terms terms = fieldsSource.terms(fieldAndTerm.field);
       assertNotNull(terms);
-      termsEnum = terms.iterator(null);
+      termsEnum = terms.iterator();
 
       if (!useTermState) {
         if (useTermOrd) {
Index: lucene/test-framework/src/java/org/apache/lucene/index/ThreadedIndexingAndSearchingTestCase.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/index/ThreadedIndexingAndSearchingTestCase.java	(revision 1672106)
+++ lucene/test-framework/src/java/org/apache/lucene/index/ThreadedIndexingAndSearchingTestCase.java	(working copy)
@@ -356,7 +356,7 @@
                     if (terms == null) {
                       continue;
                     }
-                    TermsEnum termsEnum = terms.iterator(null);
+                    TermsEnum termsEnum = terms.iterator();
                     int seenTermCount = 0;
                     int shift;
                     int trigger; 
Index: lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.java	(revision 1672106)
+++ lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.java	(working copy)
@@ -1859,8 +1859,8 @@
     assertEquals(leftTerms.hasPositions(), rightTerms.hasPositions());
     assertEquals(leftTerms.hasPayloads(), rightTerms.hasPayloads());
 
-    TermsEnum leftTermsEnum = leftTerms.iterator(null);
-    TermsEnum rightTermsEnum = rightTerms.iterator(null);
+    TermsEnum leftTermsEnum = leftTerms.iterator();
+    TermsEnum rightTermsEnum = rightTerms.iterator();
     assertTermsEnumEquals(info, leftReader, leftTermsEnum, rightTermsEnum, true);
     
     assertTermsSeekingEquals(info, leftTerms, rightTerms);
@@ -2106,18 +2106,18 @@
 
   
   private void assertTermsSeekingEquals(String info, Terms leftTerms, Terms rightTerms) throws IOException {
-    TermsEnum leftEnum = null;
-    TermsEnum rightEnum = null;
 
     // just an upper bound
     int numTests = atLeast(20);
     Random random = random();
 
+    TermsEnum leftEnum = null;
+
     // collect this number of terms from the left side
     HashSet<BytesRef> tests = new HashSet<>();
     int numPasses = 0;
     while (numPasses < 10 && tests.size() < numTests) {
-      leftEnum = leftTerms.iterator(leftEnum);
+      leftEnum = leftTerms.iterator();
       BytesRef term = null;
       while ((term = leftEnum.next()) != null) {
         int code = random.nextInt(10);
@@ -2155,7 +2155,7 @@
       numPasses++;
     }
 
-    rightEnum = rightTerms.iterator(rightEnum);
+    TermsEnum rightEnum = rightTerms.iterator();
 
     ArrayList<BytesRef> shuffledTests = new ArrayList<>(tests);
     Collections.shuffle(shuffledTests, random);
@@ -2162,9 +2162,9 @@
 
     for (BytesRef b : shuffledTests) {
       if (rarely()) {
-        // reuse the enums
-        leftEnum = leftTerms.iterator(leftEnum);
-        rightEnum = rightTerms.iterator(rightEnum);
+        // make new enums
+        leftEnum = leftTerms.iterator();
+        rightEnum = rightTerms.iterator();
       }
 
       final boolean seekExact = random().nextBoolean();
Index: lucene/test-framework/src/java/org/apache/lucene/util/TestUtil.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/util/TestUtil.java	(revision 1672106)
+++ lucene/test-framework/src/java/org/apache/lucene/util/TestUtil.java	(working copy)
@@ -1088,7 +1088,7 @@
     if (terms == null) {
       return null;
     }
-    final TermsEnum termsEnum = terms.iterator(null);
+    final TermsEnum termsEnum = terms.iterator();
     if (!termsEnum.seekExact(term)) {
       return null;
     }
Index: solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler.java
===================================================================
--- solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler.java	(revision 1672106)
+++ solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler.java	(working copy)
@@ -305,7 +305,7 @@
           Terms v = reader.getTermVector( docId, field.name() );
           if( v != null ) {
             SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<>();
-            final TermsEnum termsEnum = v.iterator(null);
+            final TermsEnum termsEnum = v.iterator();
             BytesRef text;
             while((text = termsEnum.next()) != null) {
               final int freq = (int) termsEnum.totalTermFreq();
@@ -409,7 +409,7 @@
   // to do it this way.
   private static StoredDocument getFirstLiveDoc(Terms terms, LeafReader reader) throws IOException {
     PostingsEnum postingsEnum = null;
-    TermsEnum termsEnum = terms.iterator(null);
+    TermsEnum termsEnum = terms.iterator();
     BytesRef text;
     // Deal with the chance that the first bunch of terms are in deleted documents. Is there a better way?
     for (int idx = 0; idx < 1000 && postingsEnum == null; ++idx) {
@@ -623,7 +623,7 @@
     if (terms == null) {  // field does not exist
       return;
     }
-    TermsEnum termsEnum = terms.iterator(null);
+    TermsEnum termsEnum = terms.iterator();
     BytesRef text;
     int[] buckets = new int[HIST_ARRAY_SIZE];
     while ((text = termsEnum.next()) != null) {
Index: solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.java
===================================================================
--- solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.java	(revision 1672106)
+++ solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.java	(working copy)
@@ -562,7 +562,6 @@
       boostDocs = new IntIntOpenHashMap(boosted.size()*2);
 
       List<LeafReaderContext>leaves = indexSearcher.getTopReaderContext().leaves();
-      TermsEnum termsEnum = null;
       PostingsEnum postingsEnum = null;
       for(LeafReaderContext leaf : leaves) {
         LeafReader reader = leaf.reader();
@@ -569,7 +568,7 @@
         int docBase = leaf.docBase;
         Bits liveDocs = reader.getLiveDocs();
         Terms terms = reader.terms(fieldName);
-        termsEnum = terms.iterator(termsEnum);
+        TermsEnum termsEnum = terms.iterator();
         Iterator<BytesRef> it = localBoosts.iterator();
         while(it.hasNext()) {
           BytesRef ref = it.next();
@@ -636,7 +635,6 @@
       private final int[] values = new int[numHits];
       private int bottomVal;
       private int topVal;
-      private TermsEnum termsEnum;
       private PostingsEnum postingsEnum;
       Set<String> seen = new HashSet<>(elevations.ids.size());
 
@@ -685,7 +683,7 @@
         if (fields == null) return;
         Terms terms = fields.terms(idField);
         if (terms == null) return;
-        termsEnum = terms.iterator(termsEnum);
+        TermsEnum termsEnum = terms.iterator();
         BytesRefBuilder term = new BytesRefBuilder();
         Bits liveDocs = context.reader().getLiveDocs();
 
Index: solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent.java
===================================================================
--- solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent.java	(revision 1672106)
+++ solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent.java	(working copy)
@@ -295,8 +295,6 @@
       }
     };
 
-    TermsEnum termsEnum = null;
-
     while (iter.hasNext()) {
       Integer docId = iter.next();
       NamedList<Object> docNL = new NamedList<>();
@@ -320,8 +318,8 @@
           final String field = entry.getKey();
           final Terms vector = reader.getTermVector(docId, field);
           if (vector != null) {
-            termsEnum = vector.iterator(termsEnum);
-            mapOneVector(docNL, entry.getValue(), reader, docId, vector.iterator(termsEnum), field);
+            TermsEnum termsEnum = vector.iterator();
+            mapOneVector(docNL, entry.getValue(), reader, docId, termsEnum, field);
           }
         }
       } else {
@@ -330,7 +328,7 @@
         for (String field : vectors) {
           Terms terms = vectors.terms(field);
           if (terms != null) {
-            termsEnum = terms.iterator(termsEnum);
+            TermsEnum termsEnum = terms.iterator();
             mapOneVector(docNL, allFields, reader, docId, termsEnum, field);
           }
         }
Index: solr/core/src/java/org/apache/solr/handler/component/TermsComponent.java
===================================================================
--- solr/core/src/java/org/apache/solr/handler/component/TermsComponent.java	(revision 1672106)
+++ solr/core/src/java/org/apache/solr/handler/component/TermsComponent.java	(working copy)
@@ -161,7 +161,7 @@
       }
 
 
-     TermsEnum termsEnum = terms.iterator(null);
+     TermsEnum termsEnum = terms.iterator();
      BytesRef term = null;
 
       if (lowerBytes != null) {
Index: solr/core/src/java/org/apache/solr/request/NumericFacets.java
===================================================================
--- solr/core/src/java/org/apache/solr/request/NumericFacets.java	(revision 1672106)
+++ solr/core/src/java/org/apache/solr/request/NumericFacets.java	(working copy)
@@ -277,7 +277,7 @@
           } else {
             prefix = new BytesRef();
           }
-          final TermsEnum termsEnum = terms.iterator(null);
+          final TermsEnum termsEnum = terms.iterator();
           BytesRef term;
           switch (termsEnum.seekCeil(prefix)) {
             case FOUND:
@@ -330,7 +330,7 @@
         } else {
           prefix = new BytesRef();
         }
-        final TermsEnum termsEnum = terms.iterator(null);
+        final TermsEnum termsEnum = terms.iterator();
         BytesRef term;
         switch (termsEnum.seekCeil(prefix)) {
           case FOUND:
Index: solr/core/src/java/org/apache/solr/request/SimpleFacets.java
===================================================================
--- solr/core/src/java/org/apache/solr/request/SimpleFacets.java	(revision 1672106)
+++ solr/core/src/java/org/apache/solr/request/SimpleFacets.java	(working copy)
@@ -756,7 +756,7 @@
     SolrIndexSearcher.DocsEnumState deState = null;
     BytesRef term = null;
     if (terms != null) {
-      termsEnum = terms.iterator(null);
+      termsEnum = terms.iterator();
 
       // TODO: OPT: if seek(ord) is supported for this termsEnum, then we could use it for
       // facet.offset when sorting by index order.
Index: solr/core/src/java/org/apache/solr/search/JoinQParserPlugin.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/JoinQParserPlugin.java	(revision 1672106)
+++ solr/core/src/java/org/apache/solr/search/JoinQParserPlugin.java	(working copy)
@@ -379,8 +379,8 @@
       BytesRef prefix = prefixStr == null ? null : new BytesRef(prefixStr);
 
       BytesRef term = null;
-      TermsEnum  termsEnum = terms.iterator(null);
-      TermsEnum  toTermsEnum = toTerms.iterator(null);
+      TermsEnum  termsEnum = terms.iterator();
+      TermsEnum  toTermsEnum = toTerms.iterator();
       SolrIndexSearcher.DocsEnumState fromDeState = null;
       SolrIndexSearcher.DocsEnumState toDeState = null;
 
Index: solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java	(revision 1672106)
+++ solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java	(working copy)
@@ -796,7 +796,7 @@
     Terms terms = leafReader.terms(t.field());
     if (terms == null) return -1;
     BytesRef termBytes = t.bytes();
-    final TermsEnum termsEnum = terms.iterator(null);
+    final TermsEnum termsEnum = terms.iterator();
     if (!termsEnum.seekExact(termBytes)) {
       return -1;
     }
@@ -819,7 +819,7 @@
       final Terms terms = reader.terms(field);
       if (terms == null) continue;
       
-      TermsEnum te = terms.iterator(null);
+      TermsEnum te = terms.iterator();
       if (te.seekExact(idBytes)) {
         PostingsEnum docs = te.postings(reader.getLiveDocs(), null, PostingsEnum.NONE);
         int id = docs.nextDoc();
Index: solr/core/src/java/org/apache/solr/search/facet/FacetField.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/facet/FacetField.java	(revision 1672106)
+++ solr/core/src/java/org/apache/solr/search/facet/FacetField.java	(working copy)
@@ -625,7 +625,7 @@
 
     if (terms != null) {
 
-      termsEnum = terms.iterator(null);
+      termsEnum = terms.iterator();
 
       // TODO: OPT: if seek(ord) is supported for this termsEnum, then we could use it for
       // facet.offset when sorting by index order.
Index: solr/core/src/java/org/apache/solr/search/function/FileFloatSource.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/function/FileFloatSource.java	(revision 1672106)
+++ solr/core/src/java/org/apache/solr/search/function/FileFloatSource.java	(working copy)
@@ -270,7 +270,7 @@
     BytesRefBuilder internalKey = new BytesRefBuilder();
 
     try {
-      TermsEnum termsEnum = MultiFields.getTerms(reader, idName).iterator(null);
+      TermsEnum termsEnum = MultiFields.getTerms(reader, idName).iterator();
       PostingsEnum postingsEnum = null;
 
       // removing deleted docs shouldn't matter
Index: solr/core/src/java/org/apache/solr/update/SolrIndexSplitter.java
===================================================================
--- solr/core/src/java/org/apache/solr/update/SolrIndexSplitter.java	(revision 1672106)
+++ solr/core/src/java/org/apache/solr/update/SolrIndexSplitter.java	(working copy)
@@ -162,7 +162,7 @@
 
     Fields fields = reader.fields();
     Terms terms = fields==null ? null : fields.terms(field.getName());
-    TermsEnum termsEnum = terms==null ? null : terms.iterator(null);
+    TermsEnum termsEnum = terms==null ? null : terms.iterator();
     if (termsEnum == null) return docSets;
 
     BytesRef term = null;
Index: solr/core/src/test/org/apache/solr/search/TestRTGBase.java
===================================================================
--- solr/core/src/test/org/apache/solr/search/TestRTGBase.java	(revision 1672106)
+++ solr/core/src/test/org/apache/solr/search/TestRTGBase.java	(working copy)
@@ -128,7 +128,7 @@
     Terms terms = MultiFields.getTerms(r, t.field());
     if (terms == null) return -1;
     BytesRef termBytes = t.bytes();
-    final TermsEnum termsEnum = terms.iterator(null);
+    final TermsEnum termsEnum = terms.iterator();
     if (!termsEnum.seekExact(termBytes)) {
       return -1;
     }
