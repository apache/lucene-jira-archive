diff --git a/gradle/defaults-java.gradle b/gradle/defaults-java.gradle
index 9e1b67ca980..a16ff0908a7 100644
--- a/gradle/defaults-java.gradle
+++ b/gradle/defaults-java.gradle
@@ -60,3 +60,14 @@ allprojects {
     }
   }
 }
+
+configure(project(":lucene:core")) {
+  plugins.withType(JavaPlugin) {
+    tasks.named('compileJava').configure {
+      sourceCompatibility = 16
+      targetCompatibility = 16
+      options.compilerArgs += ["--release", 16 as String,  "--add-modules", "jdk.incubator.vector"]
+      options.compilerArgs -= "-Werror"
+    }
+  }
+}
diff --git a/gradle/testing/defaults-tests.gradle b/gradle/testing/defaults-tests.gradle
index fcebf55714b..ef592f5bf77 100644
--- a/gradle/testing/defaults-tests.gradle
+++ b/gradle/testing/defaults-tests.gradle
@@ -108,6 +108,7 @@ allprojects {
 
       jvmArgs Commandline.translateCommandline(resolvedTestOption("tests.jvmargs"))
       jvmArgs '--illegal-access=deny'
+      jvmArgs '--add-modules', 'jdk.incubator.vector'
 
       systemProperty 'java.util.logging.config.file', file("${resources}/logging.properties")
       systemProperty 'java.awt.headless', 'true'
diff --git a/gradle/validation/error-prone.gradle b/gradle/validation/error-prone.gradle
index edcbaed9fc6..71243fbe323 100644
--- a/gradle/validation/error-prone.gradle
+++ b/gradle/validation/error-prone.gradle
@@ -22,10 +22,12 @@ if (!includeErrorProne) {
 
 allprojects { prj ->
   plugins.withType(JavaPlugin) {
-    prj.apply plugin: 'net.ltgt.errorprone'
+    if (includeErrorProne) {
+      prj.apply plugin: 'net.ltgt.errorprone'
 
-    dependencies {
-      errorprone("com.google.errorprone:error_prone_core")
+      dependencies {
+        errorprone("com.google.errorprone:error_prone_core")
+      }
     }
 
     // LUCENE-9650: Errorprone on master/gradle no longer works with JDK-16
diff --git a/lucene/core/src/java/org/apache/lucene/util/VectorUtil.java b/lucene/core/src/java/org/apache/lucene/util/VectorUtil.java
index cc9cd15b7d7..d43f3e2a1e1 100644
--- a/lucene/core/src/java/org/apache/lucene/util/VectorUtil.java
+++ b/lucene/core/src/java/org/apache/lucene/util/VectorUtil.java
@@ -17,11 +17,17 @@
 
 package org.apache.lucene.util;
 
+import jdk.incubator.vector.FloatVector;
+import jdk.incubator.vector.VectorOperators;
+import jdk.incubator.vector.VectorSpecies;
+
 /** Utilities for computations with numeric arrays */
 public final class VectorUtil {
 
   private VectorUtil() {}
 
+  private static final VectorSpecies<Float> SPECIES = FloatVector.SPECIES_PREFERRED;
+
   /**
    * Returns the vector dot product of the two vectors. IllegalArgumentException is thrown if the
    * vectors' dimensions differ.
@@ -30,37 +36,27 @@ public final class VectorUtil {
     if (a.length != b.length) {
       throw new IllegalArgumentException("vector dimensions differ: " + a.length + "!=" + b.length);
     }
-    float res = 0f;
-    /*
-     * If length of vector is larger than 8, we use unrolled dot product to accelerate the
-     * calculation.
-     */
-    int i;
-    for (i = 0; i < a.length % 8; i++) {
-      res += b[i] * a[i];
+    int i = 0;
+    float res = 0;
+    // if the array size is large (2x platform vector size), its worth the overhead to vectorize
+    // vector loop is unrolled a single time (2 accumulators in parallel)
+    if (a.length >= 2 * SPECIES.length()) {
+      FloatVector acc1 = FloatVector.zero(SPECIES);
+      FloatVector acc2 = FloatVector.zero(SPECIES);
+      int upperBound = SPECIES.loopBound(a.length - SPECIES.length());
+      for (; i < upperBound; i += 2 * SPECIES.length()) {
+        FloatVector va = FloatVector.fromArray(SPECIES, a, i);
+        FloatVector vb = FloatVector.fromArray(SPECIES, b, i);
+        acc1 = acc1.add(va.mul(vb));
+        FloatVector vc = FloatVector.fromArray(SPECIES, a, i + SPECIES.length());
+        FloatVector vd = FloatVector.fromArray(SPECIES, b, i + SPECIES.length());
+        acc2 = acc2.add(vc.mul(vd));
+      }
+      res += acc1.reduceLanes(VectorOperators.ADD) + acc2.reduceLanes(VectorOperators.ADD);
     }
-    if (a.length < 8) {
-      return res;
-    }
-    float s0 = 0f;
-    float s1 = 0f;
-    float s2 = 0f;
-    float s3 = 0f;
-    float s4 = 0f;
-    float s5 = 0f;
-    float s6 = 0f;
-    float s7 = 0f;
-    for (; i + 7 < a.length; i += 8) {
-      s0 += b[i] * a[i];
-      s1 += b[i + 1] * a[i + 1];
-      s2 += b[i + 2] * a[i + 2];
-      s3 += b[i + 3] * a[i + 3];
-      s4 += b[i + 4] * a[i + 4];
-      s5 += b[i + 5] * a[i + 5];
-      s6 += b[i + 6] * a[i + 6];
-      s7 += b[i + 7] * a[i + 7];
+    for (; i < a.length; i++) {
+      res += b[i] * a[i];
     }
-    res += s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7;
     return res;
   }
 
