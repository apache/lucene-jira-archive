Index: src/test/org/apache/lucene/index/TestSegmentReader.java
===================================================================
--- src/test/org/apache/lucene/index/TestSegmentReader.java	(revision 526869)
+++ src/test/org/apache/lucene/index/TestSegmentReader.java	(working copy)
@@ -80,9 +80,10 @@
     assertTrue(deleteReader != null);
     assertTrue(deleteReader.numDocs() == 1);
     deleteReader.deleteDocument(0);
-    assertTrue(deleteReader.isDeleted(0) == true);
-    assertTrue(deleteReader.hasDeletions() == true);
-    assertTrue(deleteReader.numDocs() == 0);
+    assertTrue("doc #1 should be deleted", deleteReader.isDeleted(0) == true);
+    assertTrue("reader should have deleted docs", deleteReader.hasDeletions() == true);
+    assertTrue("numDocs() should return 0", deleteReader.numDocs() == 0);
+    assertTrue("1 doc should be deleted", deleteReader.deletedDocs() == 0);
     try {
       deleteReader.document(0);
       fail();
Index: src/java/org/apache/lucene/index/MultiReader.java
===================================================================
--- src/java/org/apache/lucene/index/MultiReader.java	(revision 526869)
+++ src/java/org/apache/lucene/index/MultiReader.java	(working copy)
@@ -119,6 +119,13 @@
     return hasDeletions;
   }
 
+  public int deletedDocs() {
+    int deletedDocs = 0;
+    for (int i = 0; i < subReaders.length; i++)
+      deletedDocs += subReaders[i].deletedDocs();
+    return deletedDocs;
+  }
+
   protected void doDelete(int n) throws CorruptIndexException, IOException {
     numDocs = -1;                             // invalidate cache
     int i = readerIndex(n);                   // find segment num
Index: src/java/org/apache/lucene/index/IndexReader.java
===================================================================
--- src/java/org/apache/lucene/index/IndexReader.java	(revision 526869)
+++ src/java/org/apache/lucene/index/IndexReader.java	(working copy)
@@ -461,6 +461,9 @@
   /** Returns true if any documents have been deleted */
   public abstract boolean hasDeletions();
 
+  /** Returns the number of deleted documents */
+  public abstract int deletedDocs();
+
   /** Returns true if there are norms stored for this field. */
   public boolean hasNorms(String field) throws IOException {
     // backward compatible implementation.
Index: src/java/org/apache/lucene/index/FilterIndexReader.java
===================================================================
--- src/java/org/apache/lucene/index/FilterIndexReader.java	(revision 526869)
+++ src/java/org/apache/lucene/index/FilterIndexReader.java	(working copy)
@@ -140,6 +140,10 @@
     return in.hasDeletions();
   }
 
+  public int deletedDocs() {
+    return in.deletedDocs();
+  }
+
   protected void doUndeleteAll() throws CorruptIndexException, IOException {in.undeleteAll();}
 
   public boolean hasNorms(String field) throws IOException {
Index: src/java/org/apache/lucene/index/ParallelReader.java
===================================================================
--- src/java/org/apache/lucene/index/ParallelReader.java	(revision 526869)
+++ src/java/org/apache/lucene/index/ParallelReader.java	(working copy)
@@ -120,6 +120,13 @@
     return hasDeletions;
   }
 
+  public int deletedDocs() {
+    int deletedDocs = 0;
+    for (int i = 0; i < readers.size(); i++)
+      deletedDocs += ((IndexReader)readers.get(i)).deletedDocs();
+    return deletedDocs;
+  }
+
   // check first reader
   public boolean isDeleted(int n) {
     // Don't call ensureOpen() here (it could affect performance)
Index: src/java/org/apache/lucene/index/SegmentReader.java
===================================================================
--- src/java/org/apache/lucene/index/SegmentReader.java	(revision 526869)
+++ src/java/org/apache/lucene/index/SegmentReader.java	(working copy)
@@ -275,6 +275,10 @@
     return deletedDocs != null;
   }
 
+  public int deletedDocs() {
+    return deletedDocs == null ? 0 : deletedDocs.count();
+  }
+
   static boolean usesCompoundFile(SegmentInfo si) throws IOException {
     return si.getUseCompoundFile();
   }
