Index: lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.java	(revision 1680205)
+++ lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.java	(working copy)
@@ -56,7 +56,6 @@
 
   protected String fieldName;
   protected PayloadFunction function;
-  protected final PayloadSpanCollector payloadCollector = new PayloadSpanCollector();
 
   public PayloadNearQuery(SpanQuery[] clauses, int slop, boolean inOrder) {
     this(clauses, slop, inOrder, new AveragePayloadFunction());
@@ -132,15 +131,16 @@
 
     public PayloadNearSpanWeight(SpanQuery query, IndexSearcher searcher)
         throws IOException {
-      super(query, searcher, payloadCollector);
+      super(query, searcher, PayloadSpanCollector.FACTORY);
     }
 
     @Override
     public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {
-      Spans spans = query.getSpans(context, acceptDocs, termContexts, payloadCollector);
+      PayloadSpanCollector collector = PayloadSpanCollector.FACTORY.newCollector();
+      Spans spans = query.getSpans(context, acceptDocs, termContexts, collector);
       return (spans == null)
               ? null
-              : new PayloadNearSpanScorer(spans, this, similarity.simScorer(stats, context));
+              : new PayloadNearSpanScorer(spans, this, collector, similarity.simScorer(stats, context));
     }
     
     @Override
@@ -176,10 +176,13 @@
     Spans spans;
     protected float payloadScore;
     private int payloadsSeen;
+    private final PayloadSpanCollector collector;
 
-    protected PayloadNearSpanScorer(Spans spans, SpanWeight weight, Similarity.SimScorer docScorer) throws IOException {
+    protected PayloadNearSpanScorer(Spans spans, SpanWeight weight, PayloadSpanCollector collector,
+                                    Similarity.SimScorer docScorer) throws IOException {
       super(spans, weight, docScorer);
       this.spans = spans;
+      this.collector = collector;
     }
 
     // TODO change the whole spans api to use bytesRef, or nuke spans
@@ -218,9 +221,9 @@
       do {
         int matchLength = spans.endPosition() - startPos;
         freq += docScorer.computeSlopFactor(matchLength);
-        payloadCollector.reset();
-        spans.collect(payloadCollector);
-        processPayloads(payloadCollector.getPayloads(), startPos, spans.endPosition());
+        collector.reset();
+        spans.collect(collector);
+        processPayloads(collector.getPayloads(), startPos, spans.endPosition());
         startPos = spans.nextStartPosition();
       } while (startPos != Spans.NO_MORE_POSITIONS);
     }
Index: lucene/core/src/java/org/apache/lucene/search/payloads/PayloadSpanCollector.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/payloads/PayloadSpanCollector.java	(revision 1680205)
+++ lucene/core/src/java/org/apache/lucene/search/payloads/PayloadSpanCollector.java	(working copy)
@@ -21,6 +21,7 @@
 import org.apache.lucene.index.Term;
 import org.apache.lucene.search.spans.BufferedSpanCollector;
 import org.apache.lucene.search.spans.SpanCollector;
+import org.apache.lucene.search.spans.SpanCollectorFactory;
 import org.apache.lucene.search.spans.Spans;
 import org.apache.lucene.util.BytesRef;
 
@@ -33,6 +34,13 @@
  */
 public class PayloadSpanCollector implements SpanCollector {
 
+  public static final SpanCollectorFactory<PayloadSpanCollector> FACTORY = new SpanCollectorFactory<PayloadSpanCollector>() {
+    @Override
+    public PayloadSpanCollector newCollector() {
+      return new PayloadSpanCollector();
+    }
+  };
+
   private final Collection<byte[]> payloads = new ArrayList<>();
   BufferedPayloadCollector bufferedCollector;
 
Index: lucene/core/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.java	(revision 1680205)
+++ lucene/core/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.java	(working copy)
@@ -27,6 +27,7 @@
 import org.apache.lucene.search.similarities.Similarity.SimScorer;
 import org.apache.lucene.search.spans.BufferedSpanCollector;
 import org.apache.lucene.search.spans.SpanCollector;
+import org.apache.lucene.search.spans.SpanCollectorFactory;
 import org.apache.lucene.search.spans.SpanQuery;
 import org.apache.lucene.search.spans.SpanScorer;
 import org.apache.lucene.search.spans.SpanTermQuery;
@@ -69,10 +70,10 @@
 
   @Override
   public SpanWeight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
-    return new PayloadTermWeight(this, searcher, new PayloadTermCollector());
+    return new PayloadTermWeight(this, searcher);
   }
 
-  protected class PayloadTermCollector implements SpanCollector {
+  protected static class PayloadTermCollector implements SpanCollector {
 
     BytesRef payload;
 
@@ -104,20 +105,18 @@
 
   protected class PayloadTermWeight extends SpanWeight {
 
-    final PayloadTermCollector payloadCollector;
-
-    public PayloadTermWeight(PayloadTermQuery query, IndexSearcher searcher, PayloadTermCollector collector)
+    public PayloadTermWeight(PayloadTermQuery query, IndexSearcher searcher)
         throws IOException {
-      super(query, searcher, collector);
-      this.payloadCollector = collector;
+      super(query, searcher, SpanCollectorFactory.NO_OP_FACTORY);
     }
 
     @Override
     public PayloadTermSpanScorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {
-      TermSpans spans = (TermSpans) query.getSpans(context, acceptDocs, termContexts, payloadCollector);
+      PayloadTermCollector collector = new PayloadTermCollector();
+      TermSpans spans = (TermSpans) query.getSpans(context, acceptDocs, termContexts, collector);
       return (spans == null)
               ? null
-              : new PayloadTermSpanScorer(spans, this, similarity.simScorer(stats, context));
+              : new PayloadTermSpanScorer(spans, this, collector, similarity.simScorer(stats, context));
     }
 
     protected class PayloadTermSpanScorer extends SpanScorer {
@@ -124,11 +123,12 @@
       protected BytesRef payload;
       protected float payloadScore;
       protected int payloadsSeen;
-      private final TermSpans termSpans;
+      private final PayloadTermCollector payloadCollector;
 
-      public PayloadTermSpanScorer(TermSpans spans, SpanWeight weight, Similarity.SimScorer docScorer) throws IOException {
+      public PayloadTermSpanScorer(TermSpans spans, SpanWeight weight, PayloadTermCollector collector,
+                                   Similarity.SimScorer docScorer) throws IOException {
         super(spans, weight, docScorer);
-        termSpans = spans; // CHECKME: generics to use SpansScorer.spans as TermSpans.
+        this.payloadCollector = collector;
       }
 
       @Override
Index: lucene/core/src/java/org/apache/lucene/search/payloads/SpanNearPayloadCheckQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/payloads/SpanNearPayloadCheckQuery.java	(revision 1680205)
+++ lucene/core/src/java/org/apache/lucene/search/payloads/SpanNearPayloadCheckQuery.java	(working copy)
@@ -18,6 +18,7 @@
 
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.spans.FilterSpans.AcceptStatus;
+import org.apache.lucene.search.spans.SpanCollector;
 import org.apache.lucene.search.spans.SpanNearQuery;
 import org.apache.lucene.search.spans.SpanPositionCheckQuery;
 import org.apache.lucene.search.spans.SpanWeight;
@@ -37,7 +38,6 @@
 public class SpanNearPayloadCheckQuery extends SpanPositionCheckQuery {
 
   protected final Collection<byte[]> payloadToMatch;
-  protected final PayloadSpanCollector payloadCollector = new PayloadSpanCollector();
 
   /**
    * @param match          The underlying {@link org.apache.lucene.search.spans.SpanQuery} to check
@@ -50,12 +50,14 @@
 
   @Override
   public SpanWeight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
-    return new SpanWeight(this, searcher, payloadCollector);
+    return new SpanWeight(this, searcher, PayloadSpanCollector.FACTORY);
   }
 
   @Override
-  protected AcceptStatus acceptPosition(Spans spans) throws IOException {
+  protected AcceptStatus acceptPosition(Spans spans, SpanCollector collector) throws IOException {
 
+    PayloadSpanCollector payloadCollector = (PayloadSpanCollector) collector;
+
     payloadCollector.reset();
     spans.collect(payloadCollector);
 
Index: lucene/core/src/java/org/apache/lucene/search/payloads/SpanPayloadCheckQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/payloads/SpanPayloadCheckQuery.java	(revision 1680205)
+++ lucene/core/src/java/org/apache/lucene/search/payloads/SpanPayloadCheckQuery.java	(working copy)
@@ -17,8 +17,8 @@
  */
 
 import org.apache.lucene.search.IndexSearcher;
-import org.apache.lucene.search.payloads.PayloadSpanCollector;
 import org.apache.lucene.search.spans.FilterSpans.AcceptStatus;
+import org.apache.lucene.search.spans.SpanCollector;
 import org.apache.lucene.search.spans.SpanNearQuery;
 import org.apache.lucene.search.spans.SpanPositionCheckQuery;
 import org.apache.lucene.search.spans.SpanQuery;
@@ -43,7 +43,6 @@
 public class SpanPayloadCheckQuery extends SpanPositionCheckQuery {
 
   protected final Collection<byte[]> payloadToMatch;
-  protected final PayloadSpanCollector payloadCollector = new PayloadSpanCollector();
 
   /**
    * @param match The underlying {@link org.apache.lucene.search.spans.SpanQuery} to check
@@ -59,12 +58,14 @@
 
   @Override
   public SpanWeight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
-    return new SpanWeight(this, searcher, payloadCollector);
+    return new SpanWeight(this, searcher, PayloadSpanCollector.FACTORY);
   }
 
   @Override
-  protected AcceptStatus acceptPosition(Spans spans) throws IOException {
+  protected AcceptStatus acceptPosition(Spans spans, SpanCollector collector) throws IOException {
 
+    PayloadSpanCollector payloadCollector = (PayloadSpanCollector) collector;
+
     payloadCollector.reset();
     spans.collect(payloadCollector);
 
Index: lucene/core/src/java/org/apache/lucene/search/spans/SpanCollectorFactory.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/spans/SpanCollectorFactory.java	(revision 0)
+++ lucene/core/src/java/org/apache/lucene/search/spans/SpanCollectorFactory.java	(working copy)
@@ -0,0 +1,41 @@
+package org.apache.lucene.search.spans;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/**
+ * Interface defining a factory for creating new {@link SpanCollector}s
+ * @param <T> the SpanCollector type
+ */
+public interface SpanCollectorFactory<T extends SpanCollector> {
+
+  /**
+   * @return a new SpanCollector
+   */
+  T newCollector();
+
+  /**
+   * Factory for creating NO_OP collectors
+   */
+  public static final SpanCollectorFactory NO_OP_FACTORY = new SpanCollectorFactory() {
+    @Override
+    public SpanCollector newCollector() {
+      return SpanCollector.NO_OP;
+    }
+  };
+
+}

Property changes on: lucene/core/src/java/org/apache/lucene/search/spans/SpanCollectorFactory.java
___________________________________________________________________
Added: svn:eol-style
## -0,0 +1 ##
+native
\ No newline at end of property
Index: lucene/core/src/java/org/apache/lucene/search/spans/SpanFirstQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/spans/SpanFirstQuery.java	(revision 1680200)
+++ lucene/core/src/java/org/apache/lucene/search/spans/SpanFirstQuery.java	(working copy)
@@ -37,7 +37,7 @@
   }
 
   @Override
-  protected AcceptStatus acceptPosition(Spans spans) throws IOException {
+  protected AcceptStatus acceptPosition(Spans spans, SpanCollector collector) throws IOException {
     assert spans.startPosition() != spans.endPosition() : "start equals end: " + spans.startPosition();
     if (spans.startPosition() >= end)
       return AcceptStatus.NO_MORE_IN_CURRENT_DOC;
Index: lucene/core/src/java/org/apache/lucene/search/spans/SpanPositionCheckQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/spans/SpanPositionCheckQuery.java	(revision 1680205)
+++ lucene/core/src/java/org/apache/lucene/search/spans/SpanPositionCheckQuery.java	(working copy)
@@ -68,6 +68,7 @@
    *
    *
    * @param spans The {@link Spans} instance, positioned at the spot to check
+   * @param collector the {@link SpanCollector} associated with the Spans
    *
    * @return whether the match is accepted, rejected, or rejected and should move to the next doc.
    *
@@ -74,7 +75,7 @@
    * @see Spans#nextDoc()
    *
    */
-  protected abstract AcceptStatus acceptPosition(Spans spans) throws IOException;
+  protected abstract AcceptStatus acceptPosition(Spans spans, SpanCollector collector) throws IOException;
 
   @Override
   public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts, SpanCollector collector) throws IOException {
@@ -82,7 +83,7 @@
     return (matchSpans == null) ? null : new FilterSpans(matchSpans) {
       @Override
       protected AcceptStatus accept(Spans candidate) throws IOException {
-        return acceptPosition(candidate);
+        return acceptPosition(candidate, collector);
       }
     };
   }
Index: lucene/core/src/java/org/apache/lucene/search/spans/SpanPositionRangeQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/spans/SpanPositionRangeQuery.java	(revision 1680200)
+++ lucene/core/src/java/org/apache/lucene/search/spans/SpanPositionRangeQuery.java	(working copy)
@@ -40,7 +40,7 @@
 
 
   @Override
-  protected AcceptStatus acceptPosition(Spans spans) throws IOException {
+  protected AcceptStatus acceptPosition(Spans spans, SpanCollector collector) throws IOException {
     assert spans.startPosition() != spans.endPosition();
     AcceptStatus res = (spans.startPosition() >= end)
                       ? AcceptStatus.NO_MORE_IN_CURRENT_DOC
Index: lucene/core/src/java/org/apache/lucene/search/spans/SpanQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/spans/SpanQuery.java	(revision 1680205)
+++ lucene/core/src/java/org/apache/lucene/search/spans/SpanQuery.java	(working copy)
@@ -53,7 +53,7 @@
 
   @Override
   public SpanWeight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
-    return new SpanWeight(this, searcher, SpanCollector.NO_OP);
+    return new SpanWeight(this, searcher, SpanCollectorFactory.NO_OP_FACTORY);
   }
 
 }
Index: lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight.java	(revision 1680205)
+++ lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight.java	(working copy)
@@ -44,14 +44,14 @@
   protected final Similarity similarity;
   protected final Map<Term,TermContext> termContexts;
   protected final SpanQuery query;
-  protected final SpanCollector collector;
+  protected final SpanCollectorFactory collectorFactory;
   protected Similarity.SimWeight stats;
 
-  public SpanWeight(SpanQuery query, IndexSearcher searcher, SpanCollector collector) throws IOException {
+  public SpanWeight(SpanQuery query, IndexSearcher searcher, SpanCollectorFactory collectorFactory) throws IOException {
     super(query);
     this.similarity = searcher.getSimilarity();
     this.query = query;
-    this.collector = collector;
+    this.collectorFactory = collectorFactory;
 
     termContexts = new HashMap<>();
     TreeSet<Term> terms = new TreeSet<>();
@@ -99,7 +99,7 @@
     if (terms != null && terms.hasPositions() == false) {
       throw new IllegalStateException("field \"" + query.getField() + "\" was indexed without position data; cannot run SpanQuery (query=" + query + ")");
     }
-    Spans spans = query.getSpans(context, acceptDocs, termContexts, collector);
+    Spans spans = query.getSpans(context, acceptDocs, termContexts, collectorFactory.newCollector());
     return (spans == null) ? null : new SpanScorer(spans, this, similarity.simScorer(stats, context));
   }
 
Index: lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery.java	(revision 1680200)
+++ lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery.java	(working copy)
@@ -15,9 +15,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-import java.io.IOException;
 
-import org.apache.lucene.analysis.*;
+import org.apache.lucene.analysis.Analyzer;
+import org.apache.lucene.analysis.MockTokenizer;
+import org.apache.lucene.analysis.TokenFilter;
+import org.apache.lucene.analysis.TokenStream;
+import org.apache.lucene.analysis.Tokenizer;
 import org.apache.lucene.analysis.tokenattributes.PayloadAttribute;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
@@ -27,14 +30,14 @@
 import org.apache.lucene.index.Term;
 import org.apache.lucene.search.CollectionStatistics;
 import org.apache.lucene.search.Explanation;
+import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.QueryUtils;
 import org.apache.lucene.search.ScoreDoc;
-import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.TermStatistics;
 import org.apache.lucene.search.TopDocs;
 import org.apache.lucene.search.similarities.DefaultSimilarity;
+import org.apache.lucene.search.spans.SpanNearQuery;
 import org.apache.lucene.search.spans.SpanQuery;
-import org.apache.lucene.search.spans.SpanNearQuery;
 import org.apache.lucene.search.spans.SpanTermQuery;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.BytesRef;
@@ -43,6 +46,7 @@
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 
+import java.io.IOException;
 
 public class TestPayloadNearQuery extends LuceneTestCase {
   private static IndexSearcher searcher;
