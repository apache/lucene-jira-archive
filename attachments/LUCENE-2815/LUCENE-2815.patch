Index: lucene/src/java/org/apache/lucene/index/IndexReader.java
===================================================================
--- lucene/src/java/org/apache/lucene/index/IndexReader.java	(revision 1050222)
+++ lucene/src/java/org/apache/lucene/index/IndexReader.java	(working copy)
@@ -1420,7 +1420,7 @@
   }
 
 
-  private Fields fields;
+  private volatile Fields fields;
 
   /** @lucene.internal */
   void storeFields(Fields fields) {
Index: lucene/src/java/org/apache/lucene/index/MultiFields.java
===================================================================
--- lucene/src/java/org/apache/lucene/index/MultiFields.java	(revision 1050175)
+++ lucene/src/java/org/apache/lucene/index/MultiFields.java	(working copy)
@@ -19,9 +19,10 @@
 
 import java.io.IOException;
 import java.util.Map;
-import java.util.HashMap;
 import java.util.List;
 import java.util.ArrayList;
+import java.util.concurrent.ConcurrentHashMap;
+
 import org.apache.lucene.util.ReaderUtil;
 import org.apache.lucene.util.ReaderUtil.Gather;  // for javadocs
 import org.apache.lucene.util.Bits;
@@ -45,7 +46,7 @@
 public final class MultiFields extends Fields {
   private final Fields[] subs;
   private final ReaderUtil.Slice[] subSlices;
-  private final Map<String,Terms> terms = new HashMap<String,Terms>();
+  private final Map<String,Terms> terms = new ConcurrentHashMap<String,Terms>();
 
   /** Returns a single {@link Fields} instance for this
    *  reader, merging fields/terms/docs/positions on the
@@ -240,32 +241,32 @@
   @Override
   public Terms terms(String field) throws IOException {
 
-    final Terms result;
+    Terms result = terms.get(field);
+    if (result != null)
+      return result;
 
-    if (!terms.containsKey(field)) {
 
-      // Lazy init: first time this field is requested, we
-      // create & add to terms:
-      final List<Terms> subs2 = new ArrayList<Terms>();
-      final List<ReaderUtil.Slice> slices2 = new ArrayList<ReaderUtil.Slice>();
+    // Lazy init: first time this field is requested, we
+    // create & add to terms:
+    final List<Terms> subs2 = new ArrayList<Terms>();
+    final List<ReaderUtil.Slice> slices2 = new ArrayList<ReaderUtil.Slice>();
 
-      // Gather all sub-readers that share this field
-      for(int i=0;i<subs.length;i++) {
-        final Terms terms = subs[i].terms(field);
-        if (terms != null) {
-          subs2.add(terms);
-          slices2.add(subSlices[i]);
-        }
+    // Gather all sub-readers that share this field
+    for(int i=0;i<subs.length;i++) {
+      final Terms terms = subs[i].terms(field);
+      if (terms != null) {
+        subs2.add(terms);
+        slices2.add(subSlices[i]);
       }
-      if (subs2.size() == 0) {
-        result = null;
-      } else {
-        result = new MultiTerms(subs2.toArray(Terms.EMPTY_ARRAY),
-                                slices2.toArray(ReaderUtil.Slice.EMPTY_ARRAY));
-      }
+    }
+    if (subs2.size() == 0) {
+      result = null;
+      // don't cache this case with an unbounded cache, since the number of fields that don't exist
+      // is unbounded.
+    } else {
+      result = new MultiTerms(subs2.toArray(Terms.EMPTY_ARRAY),
+          slices2.toArray(ReaderUtil.Slice.EMPTY_ARRAY));
       terms.put(field, result);
-    } else {
-      result = terms.get(field);
     }
 
     return result;
