diff --git a/lucene/core/src/java/org/apache/lucene/search/PointInSetQuery.java b/lucene/core/src/java/org/apache/lucene/search/PointInSetQuery.java
index e695cf7..39bf358 100644
--- a/lucene/core/src/java/org/apache/lucene/search/PointInSetQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/PointInSetQuery.java
@@ -19,11 +19,8 @@ package org.apache.lucene.search;
 
 import java.io.IOException;
 import java.util.Arrays;
-import java.util.Objects;
 
-import org.apache.lucene.document.IntPoint;
 import org.apache.lucene.index.FieldInfo;
-import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.LeafReader;
 import org.apache.lucene.index.LeafReaderContext;
 import org.apache.lucene.index.PointValues.IntersectVisitor;
@@ -35,8 +32,6 @@ import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.BytesRefBuilder;
 import org.apache.lucene.util.BytesRefIterator;
 import org.apache.lucene.util.DocIdSetBuilder;
-import org.apache.lucene.util.NumericUtils;
-import org.apache.lucene.util.RamUsageEstimator;
 import org.apache.lucene.util.StringHelper;
 
 /** Finds all documents whose point value, previously indexed with e.g. {@link org.apache.lucene.document.LongPoint}, is contained in the
@@ -119,18 +114,16 @@ public class PointInSetQuery extends Query {
 
         DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc());
 
-        int[] hitCount = new int[1];
-
         if (numDims == 1) {
 
           // We optimize this common case, effectively doing a merge sort of the indexed values vs the queried set:
-          values.intersect(field, new MergePointVisitor(sortedPackedPoints.iterator(), hitCount, result));
+          values.intersect(field, new MergePointVisitor(sortedPackedPoints.iterator(), result));
 
         } else {
           // NOTE: this is naive implementation, where for each point we re-walk the KD tree to intersect.  We could instead do a similar
           // optimization as the 1D case, but I think it'd mean building a query-time KD tree so we could efficiently intersect against the
           // index, which is probably tricky!
-          SinglePointVisitor visitor = new SinglePointVisitor(hitCount, result);
+          SinglePointVisitor visitor = new SinglePointVisitor(result);
           TermIterator iterator = sortedPackedPoints.iterator();
           for (BytesRef point = iterator.next(); point != null; point = iterator.next()) {
             visitor.setPoint(point);
@@ -138,8 +131,7 @@ public class PointInSetQuery extends Query {
           }
         }
 
-        // NOTE: hitCount[0] will be over-estimate in multi-valued case
-        return new ConstantScoreScorer(this, score(), result.build(hitCount[0]).iterator());
+        return new ConstantScoreScorer(this, score(), result.build().iterator());
       }
     };
   }
@@ -149,13 +141,11 @@ public class PointInSetQuery extends Query {
   private class MergePointVisitor implements IntersectVisitor {
 
     private final DocIdSetBuilder result;
-    private final int[] hitCount;
     private final TermIterator iterator;
     private BytesRef nextQueryPoint;
     private final BytesRef scratch = new BytesRef();
 
-    public MergePointVisitor(TermIterator iterator, int[] hitCount, DocIdSetBuilder result) throws IOException {
-      this.hitCount = hitCount;
+    public MergePointVisitor(TermIterator iterator, DocIdSetBuilder result) throws IOException {
       this.result = result;
       this.iterator = iterator;
       nextQueryPoint = iterator.next();
@@ -169,7 +159,6 @@ public class PointInSetQuery extends Query {
 
     @Override
     public void visit(int docID) {
-      hitCount[0]++;
       result.add(docID);
     }
 
@@ -180,7 +169,6 @@ public class PointInSetQuery extends Query {
         int cmp = nextQueryPoint.compareTo(scratch);
         if (cmp == 0) {
           // Query point equals index point, so collect and return
-          hitCount[0]++;
           result.add(docID);
           break;
         } else if (cmp < 0) {
@@ -229,11 +217,9 @@ public class PointInSetQuery extends Query {
   private class SinglePointVisitor implements IntersectVisitor {
 
     private final DocIdSetBuilder result;
-    private final int[] hitCount;
     private final byte[] pointBytes;
 
-    public SinglePointVisitor(int[] hitCount, DocIdSetBuilder result) {
-      this.hitCount = hitCount;
+    public SinglePointVisitor(DocIdSetBuilder result) {
       this.result = result;
       this.pointBytes = new byte[bytesPerDim * numDims];
     }
@@ -251,7 +237,6 @@ public class PointInSetQuery extends Query {
 
     @Override
     public void visit(int docID) {
-      hitCount[0]++;
       result.add(docID);
     }
 
@@ -260,7 +245,6 @@ public class PointInSetQuery extends Query {
       assert packedValue.length == pointBytes.length;
       if (Arrays.equals(packedValue, pointBytes)) {
         // The point for this doc matches the point we are querying on
-        hitCount[0]++;
         result.add(docID);
       }
     }
diff --git a/lucene/core/src/java/org/apache/lucene/search/PointRangeQuery.java b/lucene/core/src/java/org/apache/lucene/search/PointRangeQuery.java
index be52e61..b0730a7 100644
--- a/lucene/core/src/java/org/apache/lucene/search/PointRangeQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/PointRangeQuery.java
@@ -219,7 +219,6 @@ public abstract class PointRangeQuery extends Query {
 
         DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc());
 
-        int[] hitCount = new int[1];
         values.intersect(field,
                          new IntersectVisitor() {
 
@@ -230,7 +229,6 @@ public abstract class PointRangeQuery extends Query {
 
                            @Override
                            public void visit(int docID) {
-                             hitCount[0]++;
                              result.add(docID);
                            }
 
@@ -249,7 +247,6 @@ public abstract class PointRangeQuery extends Query {
                              }
 
                              // Doc is in-bounds
-                             hitCount[0]++;
                              result.add(docID);
                            }
 
@@ -278,8 +275,7 @@ public abstract class PointRangeQuery extends Query {
                            }
                          });
 
-        // NOTE: hitCount[0] will be over-estimate in multi-valued case
-        return new ConstantScoreScorer(this, score(), result.build(hitCount[0]).iterator());
+        return new ConstantScoreScorer(this, score(), result.build().iterator());
       }
     };
   }
diff --git a/lucene/core/src/java/org/apache/lucene/util/DocIdSetBuilder.java b/lucene/core/src/java/org/apache/lucene/util/DocIdSetBuilder.java
index e8b8b98..58d36cb 100644
--- a/lucene/core/src/java/org/apache/lucene/util/DocIdSetBuilder.java
+++ b/lucene/core/src/java/org/apache/lucene/util/DocIdSetBuilder.java
@@ -169,21 +169,9 @@ public final class DocIdSetBuilder {
    * Build a {@link DocIdSet} from the accumulated doc IDs.
    */
   public DocIdSet build() {
-    return build(-1);
-  }
-
-  /**
-   * Expert: build a {@link DocIdSet} with a hint on the cost that the resulting
-   * {@link DocIdSet} would have.
-   */
-  public DocIdSet build(long costHint) {
     try {
       if (bitSet != null) {
-        if (costHint == -1) {
-          return new BitDocIdSet(bitSet);
-        } else {
-          return new BitDocIdSet(bitSet, costHint);
-        }
+        return new BitDocIdSet(bitSet);
       } else {
         LSBRadixSorter sorter = new LSBRadixSorter();
         sorter.sort(buffer, 0, bufferSize);
diff --git a/lucene/sandbox/src/java/org/apache/lucene/search/PointInPolygonQuery.java b/lucene/sandbox/src/java/org/apache/lucene/search/PointInPolygonQuery.java
index dc3675e..6ae7c03 100644
--- a/lucene/sandbox/src/java/org/apache/lucene/search/PointInPolygonQuery.java
+++ b/lucene/sandbox/src/java/org/apache/lucene/search/PointInPolygonQuery.java
@@ -111,12 +111,10 @@ public class PointInPolygonQuery extends Query {
         }
 
         DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc());
-        int[] hitCount = new int[1];
         values.intersect(field,
                          new IntersectVisitor() {
                            @Override
                            public void visit(int docID) {
-                             hitCount[0]++;
                              result.add(docID);
                            }
 
@@ -126,7 +124,6 @@ public class PointInPolygonQuery extends Query {
                              double lat = LatLonPoint.decodeLat(NumericUtils.bytesToInt(packedValue, 0));
                              double lon = LatLonPoint.decodeLon(NumericUtils.bytesToInt(packedValue, Integer.BYTES));
                              if (GeoRelationUtils.pointInPolygon(polyLons, polyLats, lat, lon)) {
-                               hitCount[0]++;
                                result.add(docID);
                              }
                            }
@@ -155,8 +152,7 @@ public class PointInPolygonQuery extends Query {
                            }
                          });
 
-        // NOTE: hitCount[0] will be over-estimate in multi-valued case
-        return new ConstantScoreScorer(this, score(), result.build(hitCount[0]).iterator());
+        return new ConstantScoreScorer(this, score(), result.build().iterator());
       }
     };
   }
diff --git a/lucene/spatial3d/src/java/org/apache/lucene/geo3d/PointInGeo3DShapeQuery.java b/lucene/spatial3d/src/java/org/apache/lucene/geo3d/PointInGeo3DShapeQuery.java
index 7ba9cc2..5e4dee0 100644
--- a/lucene/spatial3d/src/java/org/apache/lucene/geo3d/PointInGeo3DShapeQuery.java
+++ b/lucene/spatial3d/src/java/org/apache/lucene/geo3d/PointInGeo3DShapeQuery.java
@@ -92,14 +92,12 @@ class PointInGeo3DShapeQuery extends Query {
 
         DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc());
 
-        int[] hitCount = new int[1];
         values.intersect(field,
                          new IntersectVisitor() {
 
                            @Override
                            public void visit(int docID) {
                              result.add(docID);
-                             hitCount[0]++;
                            }
 
                            @Override
@@ -110,7 +108,6 @@ class PointInGeo3DShapeQuery extends Query {
                              double z = Geo3DPoint.decodeDimension(planetModel, packedValue, 2 * Integer.BYTES);
                              if (shape.isWithin(x, y, z)) {
                                result.add(docID);
-                               hitCount[0]++;
                              }
                            }
 
@@ -159,8 +156,7 @@ class PointInGeo3DShapeQuery extends Query {
                            }
                          });
 
-        // NOTE: hitCount[0] will be over-estimate in multi-valued case
-        return new ConstantScoreScorer(this, score(), result.build(hitCount[0]).iterator());
+        return new ConstantScoreScorer(this, score(), result.build().iterator());
       }
     };
   }
