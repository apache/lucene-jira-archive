Index: solr/common-build.xml
===================================================================
--- solr/common-build.xml	(revision 1225817)
+++ solr/common-build.xml	(working copy)
@@ -47,7 +47,6 @@
   <property name="example" value="${common-solr.dir}/example" />
   <property name="javadoc.dir" location="${build.dir}/docs/api"/>
   <property name="tests.loggingfile" value="${common-solr.dir}/testlogging.properties"/>
-  <property name="tests.threadspercpu" value="2"/>
   <property name="tests.cleanthreads.sysprop" value="perClass"/>
 
   <property name="clover.db.dir" location="${dest}/tests/clover/db"/>
Index: solr/core/src/test-files/solr/conf/solrconfig-slave.xml
===================================================================
--- solr/core/src/test-files/solr/conf/solrconfig-slave.xml	(revision 1225817)
+++ solr/core/src/test-files/solr/conf/solrconfig-slave.xml	(working copy)
@@ -24,7 +24,7 @@
 
 <config>
   <luceneMatchVersion>${tests.luceneMatchVersion:LUCENE_CURRENT}</luceneMatchVersion>
-
+  <directoryFactory name="DirectoryFactory" class="${solr.directoryFactory:solr.RAMDirectoryFactory}"/>
   <dataDir>${solr.data.dir:}</dataDir>
 
   <indexDefaults>
Index: solr/core/src/test-files/solr/conf/solrconfig-tlog.xml
===================================================================
--- solr/core/src/test-files/solr/conf/solrconfig-tlog.xml	(revision 1225817)
+++ solr/core/src/test-files/solr/conf/solrconfig-tlog.xml	(working copy)
@@ -19,7 +19,7 @@
 
 <config>
   <luceneMatchVersion>${tests.luceneMatchVersion:LUCENE_CURRENT}</luceneMatchVersion>
-
+  <directoryFactory name="DirectoryFactory" class="${solr.directoryFactory:solr.RAMDirectoryFactory}"/>
   <requestHandler name="standard" class="solr.StandardRequestHandler">
   </requestHandler>
 
Index: solr/core/src/test-files/solr/conf/solrconfig-xinclude.xml
===================================================================
--- solr/core/src/test-files/solr/conf/solrconfig-xinclude.xml	(revision 1225817)
+++ solr/core/src/test-files/solr/conf/solrconfig-xinclude.xml	(working copy)
@@ -19,7 +19,7 @@
 
 <config>
   <luceneMatchVersion>${tests.luceneMatchVersion:LUCENE_CURRENT}</luceneMatchVersion>
-
+  <directoryFactory name="DirectoryFactory" class="${solr.directoryFactory:solr.RAMDirectoryFactory}"/>
   <xi:include href="foobar-missing.xml" xmlns:xi="http://www.w3.org/2001/XInclude">
     <xi:fallback>
       <xi:include href="solrconfig-reqHandler.incl" xmlns:xi="http://www.w3.org/2001/XInclude"/>
Index: solr/core/src/test-files/solr/conf/solrconfig-master1.xml
===================================================================
--- solr/core/src/test-files/solr/conf/solrconfig-master1.xml	(revision 1225817)
+++ solr/core/src/test-files/solr/conf/solrconfig-master1.xml	(working copy)
@@ -25,7 +25,7 @@
 <config>
   <luceneMatchVersion>${tests.luceneMatchVersion:LUCENE_CURRENT}</luceneMatchVersion>
   <dataDir>${solr.data.dir:}</dataDir>
-
+  <directoryFactory name="DirectoryFactory" class="${solr.directoryFactory:solr.RAMDirectoryFactory}"/>
   <indexDefaults>
     <useCompoundFile>false</useCompoundFile>
     <mergeFactor>10</mergeFactor>
Index: solr/core/src/test-files/solr/conf/solrconfig-master3.xml
===================================================================
--- solr/core/src/test-files/solr/conf/solrconfig-master3.xml	(revision 1225817)
+++ solr/core/src/test-files/solr/conf/solrconfig-master3.xml	(working copy)
@@ -25,7 +25,7 @@
 <config>
   <luceneMatchVersion>${tests.luceneMatchVersion:LUCENE_CURRENT}</luceneMatchVersion>
   <dataDir>${solr.data.dir:}</dataDir>
-
+  <directoryFactory name="DirectoryFactory" class="${solr.directoryFactory:solr.RAMDirectoryFactory}"/>
   <indexDefaults>
     <useCompoundFile>false</useCompoundFile>
     <mergeFactor>10</mergeFactor>
Index: solr/core/src/test-files/solr/conf/solrconfig-delpolicy2.xml
===================================================================
--- solr/core/src/test-files/solr/conf/solrconfig-delpolicy2.xml	(revision 1225817)
+++ solr/core/src/test-files/solr/conf/solrconfig-delpolicy2.xml	(working copy)
@@ -19,6 +19,7 @@
 
 <config>
   <luceneMatchVersion>${tests.luceneMatchVersion:LUCENE_CURRENT}</luceneMatchVersion>
+  <directoryFactory name="DirectoryFactory" class="${solr.directoryFactory:solr.RAMDirectoryFactory}"/>
   <mainIndex>
     <deletionPolicy class="org.apache.solr.core.FakeDeletionPolicy">
       <str name="var1">value1</str>
Index: solr/core/src/test-files/solr/conf/solrconfig-slave1.xml
===================================================================
--- solr/core/src/test-files/solr/conf/solrconfig-slave1.xml	(revision 1225817)
+++ solr/core/src/test-files/solr/conf/solrconfig-slave1.xml	(working copy)
@@ -25,7 +25,7 @@
 <config>
   <luceneMatchVersion>${tests.luceneMatchVersion:LUCENE_CURRENT}</luceneMatchVersion>
   <dataDir>${solr.data.dir:}</dataDir>
-
+  <directoryFactory name="DirectoryFactory" class="${solr.directoryFactory:solr.RAMDirectoryFactory}"/>
   <indexDefaults>
     <useCompoundFile>false</useCompoundFile>
     <mergeFactor>10</mergeFactor>
Index: solr/core/src/test-files/solr/conf/solrconfig-lazywriter.xml
===================================================================
--- solr/core/src/test-files/solr/conf/solrconfig-lazywriter.xml	(revision 1225817)
+++ solr/core/src/test-files/solr/conf/solrconfig-lazywriter.xml	(working copy)
@@ -22,6 +22,6 @@
 <config>
   <luceneMatchVersion>${tests.luceneMatchVersion:LUCENE_CURRENT}</luceneMatchVersion>
   <requestHandler name="standard" class="solr.StandardRequestHandler"></requestHandler>
-
+  <directoryFactory name="DirectoryFactory" class="${solr.directoryFactory:solr.RAMDirectoryFactory}"/>
   <queryResponseWriter name="velocity" class="solr.VelocityResponseWriter" startup="lazy"/>
 </config>
Index: solr/core/src/test-files/solr/conf/solrconfig_codec.xml
===================================================================
--- solr/core/src/test-files/solr/conf/solrconfig_codec.xml	(revision 1225817)
+++ solr/core/src/test-files/solr/conf/solrconfig_codec.xml	(working copy)
@@ -18,6 +18,6 @@
 
 <config>
   <luceneMatchVersion>${tests.luceneMatchVersion:LUCENE_CURRENT}</luceneMatchVersion>
-  
+  <directoryFactory name="DirectoryFactory" class="${solr.directoryFactory:solr.RAMDirectoryFactory}"/>
   <requestHandler name="standard" class="solr.StandardRequestHandler"></requestHandler> 
 </config>
Index: solr/core/src/test-files/solr/conf/solrconfig-SOLR-749.xml
===================================================================
--- solr/core/src/test-files/solr/conf/solrconfig-SOLR-749.xml	(revision 1225817)
+++ solr/core/src/test-files/solr/conf/solrconfig-SOLR-749.xml	(working copy)
@@ -24,6 +24,7 @@
 
 <config>
   <luceneMatchVersion>${tests.luceneMatchVersion:LUCENE_CURRENT}</luceneMatchVersion>
+  <directoryFactory name="DirectoryFactory" class="${solr.directoryFactory:solr.RAMDirectoryFactory}"/>
   <queryParser name="foo" class="FooQParserPlugin"/>
   <!-- override the default "lucene" qparser -->
   <queryParser name="lucene" class="org.apache.solr.search.FooQParserPlugin"/>
Index: solr/core/src/test-files/solr/conf/bad_solrconfig.xml
===================================================================
--- solr/core/src/test-files/solr/conf/bad_solrconfig.xml	(revision 1225817)
+++ solr/core/src/test-files/solr/conf/bad_solrconfig.xml	(working copy)
@@ -24,6 +24,7 @@
 
 <config>
   <luceneMatchVersion>${tests.luceneMatchVersion:LUCENE_CURRENT}</luceneMatchVersion>
+  <directoryFactory name="DirectoryFactory" class="${solr.directoryFactory:solr.RAMDirectoryFactory}"/>
   <indexDefaults>
     <useCompoundFile>${unset.sys.property}</useCompoundFile>
   </indexDefaults>
Index: solr/core/src/test-files/solr/conf/solrconfig-mergepolicy.xml
===================================================================
--- solr/core/src/test-files/solr/conf/solrconfig-mergepolicy.xml	(revision 1225817)
+++ solr/core/src/test-files/solr/conf/solrconfig-mergepolicy.xml	(working copy)
@@ -24,7 +24,7 @@
 
 <config>
   <luceneMatchVersion>${tests.luceneMatchVersion:LUCENE_CURRENT}</luceneMatchVersion>
-
+  <directoryFactory name="DirectoryFactory" class="${solr.directoryFactory:solr.RAMDirectoryFactory}"/>
   <indexDefaults>
     <ramBufferSizeMB>32</ramBufferSizeMB>
     <termIndexInterval>256</termIndexInterval>
Index: solr/core/src/test-files/solr/conf/solrconfig-basic.xml
===================================================================
--- solr/core/src/test-files/solr/conf/solrconfig-basic.xml	(revision 1225817)
+++ solr/core/src/test-files/solr/conf/solrconfig-basic.xml	(working copy)
@@ -21,5 +21,6 @@
      DO NOT ADD THINGS TO THIS CONFIG! -->
 <config>
   <luceneMatchVersion>${tests.luceneMatchVersion:LUCENE_CURRENT}</luceneMatchVersion>
+  <directoryFactory name="DirectoryFactory" class="${solr.directoryFactory:solr.RAMDirectoryFactory}"/>
   <requestHandler name="standard" class="solr.StandardRequestHandler"></requestHandler>
 </config>
Index: solr/core/src/test-files/solr/conf/solrconfig-master.xml
===================================================================
--- solr/core/src/test-files/solr/conf/solrconfig-master.xml	(revision 1225817)
+++ solr/core/src/test-files/solr/conf/solrconfig-master.xml	(working copy)
@@ -24,7 +24,7 @@
 
 <config>
   <luceneMatchVersion>${tests.luceneMatchVersion:LUCENE_CURRENT}</luceneMatchVersion>  
-
+  <directoryFactory name="DirectoryFactory" class="${solr.directoryFactory:solr.RAMDirectoryFactory}"/>
   <dataDir>${solr.data.dir:}</dataDir>
 
   <indexDefaults>
Index: solr/core/src/test-files/solr/conf/solrconfig-master2.xml
===================================================================
--- solr/core/src/test-files/solr/conf/solrconfig-master2.xml	(revision 1225817)
+++ solr/core/src/test-files/solr/conf/solrconfig-master2.xml	(working copy)
@@ -25,7 +25,7 @@
 <config>
   <luceneMatchVersion>${tests.luceneMatchVersion:LUCENE_CURRENT}</luceneMatchVersion>
   <dataDir>${solr.data.dir:}</dataDir>
-
+  <directoryFactory name="DirectoryFactory" class="${solr.directoryFactory:solr.RAMDirectoryFactory}"/>
   <indexDefaults>
     <useCompoundFile>false</useCompoundFile>
     <mergeFactor>10</mergeFactor>
Index: solr/core/src/test-files/solr/conf/solrconfig-repeater.xml
===================================================================
--- solr/core/src/test-files/solr/conf/solrconfig-repeater.xml	(revision 1225817)
+++ solr/core/src/test-files/solr/conf/solrconfig-repeater.xml	(working copy)
@@ -24,7 +24,7 @@
 
 <config>
   <luceneMatchVersion>${tests.luceneMatchVersion:LUCENE_CURRENT}</luceneMatchVersion>
-
+  <directoryFactory name="DirectoryFactory" class="${solr.directoryFactory:solr.RAMDirectoryFactory}"/>
   <dataDir>${solr.data.dir:}</dataDir>
 
   <indexDefaults>
Index: solr/core/src/test/org/apache/solr/core/TestArbitraryIndexDir.java
===================================================================
--- solr/core/src/test/org/apache/solr/core/TestArbitraryIndexDir.java	(revision 1225817)
+++ solr/core/src/test/org/apache/solr/core/TestArbitraryIndexDir.java	(working copy)
@@ -36,6 +36,8 @@
 import org.apache.solr.common.params.CommonParams;
 import org.apache.solr.util.AbstractSolrTestCase;
 import org.apache.solr.util.TestHarness;
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
 import org.junit.Test;
 import org.xml.sax.SAXException;
 
@@ -44,6 +46,22 @@
  */
 public class TestArbitraryIndexDir extends AbstractSolrTestCase{
 
+  // TODO: fix this test to not require FSDirectory
+  static String savedFactory;
+  @BeforeClass
+  public static void beforeClass() throws Exception {
+    savedFactory = System.getProperty("solr.DirectoryFactory");
+    System.setProperty("solr.directoryFactory", "org.apache.solr.core.MockFSDirectoryFactory");
+  }
+  @AfterClass
+  public static void afterClass() throws Exception {
+    if (savedFactory == null) {
+      System.clearProperty("solr.directoryFactory");
+    } else {
+      System.setProperty("solr.directoryFactory", savedFactory);
+    }
+  }
+
   @Override
   public void setUp() throws Exception {
     super.setUp();
Index: solr/core/src/test/org/apache/solr/spelling/suggest/SuggesterTest.java
===================================================================
--- solr/core/src/test/org/apache/solr/spelling/suggest/SuggesterTest.java	(revision 1225817)
+++ solr/core/src/test/org/apache/solr/spelling/suggest/SuggesterTest.java	(working copy)
@@ -22,6 +22,7 @@
 import org.apache.solr.SolrTestCaseJ4;
 import org.apache.solr.common.params.SpellingParams;
 import org.apache.solr.common.util.NamedList;
+import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;
 
@@ -31,10 +32,23 @@
    */
   protected String requestUri = "/suggest";
 
+  // TODO: fix this test to not require FSDirectory
+  static String savedFactory;
   @BeforeClass
   public static void beforeClass() throws Exception {
+    savedFactory = System.getProperty("solr.DirectoryFactory");
+    System.setProperty("solr.directoryFactory", "org.apache.solr.core.MockFSDirectoryFactory");
     initCore("solrconfig-spellchecker.xml","schema-spellchecker.xml");
   }
+  
+  @AfterClass
+  public static void afterClass() throws Exception {
+    if (savedFactory == null) {
+      System.clearProperty("solr.directoryFactory");
+    } else {
+      System.setProperty("solr.directoryFactory", savedFactory);
+    }
+  }
 
   public static void addDocs() throws Exception {
     assertU(adoc("id", "1",
Index: solr/core/src/test/org/apache/solr/handler/TestReplicationHandler.java
===================================================================
--- solr/core/src/test/org/apache/solr/handler/TestReplicationHandler.java	(revision 1225817)
+++ solr/core/src/test/org/apache/solr/handler/TestReplicationHandler.java	(working copy)
@@ -35,6 +35,7 @@
 import org.apache.lucene.search.TopDocs;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.SimpleFSDirectory;
+import org.apache.lucene.util.LuceneTestCase;
 import org.apache.solr.SolrTestCaseJ4;
 import org.apache.solr.TestDistributedSearch;
 import org.apache.solr.client.solrj.SolrServer;
@@ -59,6 +60,8 @@
  *
  * @since 1.4
  */
+@LuceneTestCase.Nightly
+// TODO: can this test be sped up? it used to not be so slow...
 public class TestReplicationHandler extends SolrTestCaseJ4 {
 
 
@@ -74,8 +77,12 @@
   // index from previous test method
   static int nDocs = 500;
 
+  // TODO: fix this test to not require FSDirectory.. doesnt even work with MockFSDirectory... wtf?
+  static String savedFactory;
   @BeforeClass
   public static void beforeClass() throws Exception {
+    savedFactory = System.getProperty("solr.DirectoryFactory");
+    System.setProperty("solr.directoryFactory", "solr.StandardDirectoryFactory");
     master = new SolrInstance("master", null);
     master.setUp();
     masterJetty = createJetty(master);
@@ -105,6 +112,11 @@
     slaveJetty.stop();
     master.tearDown();
     slave.tearDown();
+    if (savedFactory == null) {
+      System.clearProperty("solr.directoryFactory");
+    } else {
+      System.setProperty("solr.directoryFactory", savedFactory);
+    }
   }
 
   private static JettySolrRunner createJetty(SolrInstance instance) throws Exception {
Index: solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerTest.java
===================================================================
--- solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerTest.java	(revision 1225817)
+++ solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerTest.java	(working copy)
@@ -27,6 +27,7 @@
 import org.apache.solr.core.SolrCore;
 import org.apache.solr.request.LocalSolrQueryRequest;
 import org.apache.solr.request.SolrQueryRequest;
+import org.junit.AfterClass;
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
@@ -37,10 +38,23 @@
  */
 public class DirectUpdateHandlerTest extends SolrTestCaseJ4 {
 
+  // TODO: fix this test to not require FSDirectory
+  static String savedFactory;
   @BeforeClass
   public static void beforeClass() throws Exception {
+    savedFactory = System.getProperty("solr.DirectoryFactory");
+    System.setProperty("solr.directoryFactory", "org.apache.solr.core.MockFSDirectoryFactory");
     initCore("solrconfig.xml", "schema12.xml");
   }
+  
+  @AfterClass
+  public static void afterClass() throws Exception {
+    if (savedFactory == null) {
+      System.clearProperty("solr.directoryFactory");
+    } else {
+      System.setProperty("solr.directoryFactory", savedFactory);
+    }
+  }
 
   @Override
   @Before
Index: solr/core/src/test/org/apache/solr/update/TestIndexingPerformance.java
===================================================================
--- solr/core/src/test/org/apache/solr/update/TestIndexingPerformance.java	(revision 1225817)
+++ solr/core/src/test/org/apache/solr/update/TestIndexingPerformance.java	(working copy)
@@ -22,6 +22,8 @@
 import org.apache.solr.schema.IndexSchema;
 import org.apache.solr.util.AbstractSolrTestCase;
 import org.apache.solr.common.util.StrUtils;
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -35,6 +37,22 @@
  * $ ant test -Dtestcase=TestIndexingPerformance -Dargs="-server -Diter=100000"; grep throughput build/test-results/*TestIndexingPerformance.xml
  */
 public class TestIndexingPerformance extends AbstractSolrTestCase {
+  
+  // TODO: fix this test to not require FSDirectory
+  static String savedFactory;
+  @BeforeClass
+  public static void beforeClass() throws Exception {
+    savedFactory = System.getProperty("solr.DirectoryFactory");
+    System.setProperty("solr.directoryFactory", "org.apache.solr.core.MockFSDirectoryFactory");
+  }
+  @AfterClass
+  public static void afterClass() throws Exception {
+    if (savedFactory == null) {
+      System.clearProperty("solr.directoryFactory");
+    } else {
+      System.setProperty("solr.directoryFactory", savedFactory);
+    }
+  }
 
   public static final Logger log 
     = LoggerFactory.getLogger(TestIndexingPerformance.class);
Index: solr/core/src/test/org/apache/solr/TestGroupingSearch.java
===================================================================
--- solr/core/src/test/org/apache/solr/TestGroupingSearch.java	(revision 1225817)
+++ solr/core/src/test/org/apache/solr/TestGroupingSearch.java	(working copy)
@@ -537,8 +537,8 @@
      assertJQ(req("q","id:"+doc.id), "/response/numFound==1");
     **/
 
-    int indexIter=50 * RANDOM_MULTIPLIER;  // make >0 to enable test
-    int queryIter=100 * RANDOM_MULTIPLIER;
+    int indexIter=atLeast(10);  // make >0 to enable test
+    int queryIter=atLeast(50);
 
     while (--indexIter >= 0) {
 
Index: solr/solrj/src/test-files/solrj/solr/conf/solrconfig-slave1.xml
===================================================================
--- solr/solrj/src/test-files/solrj/solr/conf/solrconfig-slave1.xml	(revision 1225817)
+++ solr/solrj/src/test-files/solrj/solr/conf/solrconfig-slave1.xml	(working copy)
@@ -25,7 +25,7 @@
 <config>
   <luceneMatchVersion>${tests.luceneMatchVersion:LUCENE_CURRENT}</luceneMatchVersion>
   <dataDir>${solr.data.dir:}</dataDir>
-
+  <directoryFactory name="DirectoryFactory" class="${solr.directoryFactory:solr.RAMDirectoryFactory}"/>
   <indexDefaults>
     <useCompoundFile>false</useCompoundFile>
     <mergeFactor>10</mergeFactor>
Index: solr/solrj/src/test-files/solrj/solr/shared/conf/solrconfig.xml
===================================================================
--- solr/solrj/src/test-files/solrj/solr/shared/conf/solrconfig.xml	(revision 1225817)
+++ solr/solrj/src/test-files/solrj/solr/shared/conf/solrconfig.xml	(working copy)
@@ -23,8 +23,8 @@
 <config>
   <luceneMatchVersion>${tests.luceneMatchVersion:LUCENE_CURRENT}</luceneMatchVersion>
   <dataDir>${solr.solr.home}/data/${l10n}-${version}</dataDir>
+  <directoryFactory name="DirectoryFactory" class="${solr.directoryFactory:solr.RAMDirectoryFactory}"/>
 
-
   <updateHandler class="solr.DirectUpdateHandler2" />
 
   <requestDispatcher handleSelect="true" >
Index: solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest.java
===================================================================
--- solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest.java	(revision 1225817)
+++ solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest.java	(working copy)
@@ -71,6 +71,8 @@
     InputStream in = null;
     try {
       URLConnection conn = url.openConnection();
+      conn.setConnectTimeout(1000);
+      conn.setReadTimeout(1000);
       in = conn.getInputStream();
       contentType = conn.getContentType();
       content = IOUtils.toByteArray(in);
Index: solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests.java
===================================================================
--- solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests.java	(revision 1225817)
+++ solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests.java	(working copy)
@@ -280,7 +280,7 @@
   }
   
   public void testUnicode() throws Exception {
-    int numIterations = 100 * RANDOM_MULTIPLIER;
+    int numIterations = atLeast(3);
     
     SolrServer server = getSolrServer();
     
@@ -302,7 +302,7 @@
           }
         }
 
-        int numDocs = _TestUtil.nextInt(random, 1, 100);
+        int numDocs = _TestUtil.nextInt(random, 1, 10*RANDOM_MULTIPLIER);
         
         // Empty the database...
         server.deleteByQuery("*:*");// delete everything!
Index: solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer.java
===================================================================
--- solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer.java	(revision 1225817)
+++ solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer.java	(working copy)
@@ -30,6 +30,8 @@
 import org.apache.solr.client.solrj.response.UpdateResponse;
 import org.apache.solr.common.SolrInputDocument;
 import org.apache.solr.util.AbstractSolrTestCase;
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
 
 import java.io.File;
 import java.io.IOException;
@@ -48,6 +50,22 @@
   SolrInstance[] solr = new SolrInstance[3];
   HttpClient httpClient;
 
+  // TODO: fix this test to not require FSDirectory
+  static String savedFactory;
+  @BeforeClass
+  public static void beforeClass() throws Exception {
+    savedFactory = System.getProperty("solr.DirectoryFactory");
+    System.setProperty("solr.directoryFactory", "org.apache.solr.core.MockFSDirectoryFactory");
+  }
+  @AfterClass
+  public static void afterClass() throws Exception {
+    if (savedFactory == null) {
+      System.clearProperty("solr.directoryFactory");
+    } else {
+      System.setProperty("solr.directoryFactory", savedFactory);
+    }
+  }
+  
   @Override
   public void setUp() throws Exception {
     super.setUp();
Index: solr/contrib/clustering/src/test-files/clustering/solr/conf/solrconfig.xml
===================================================================
--- solr/contrib/clustering/src/test-files/clustering/solr/conf/solrconfig.xml	(revision 1225817)
+++ solr/contrib/clustering/src/test-files/clustering/solr/conf/solrconfig.xml	(working copy)
@@ -24,7 +24,7 @@
        If replication is in use, this should match the replication configuration. -->
   <dataDir>${solr.data.dir:}</dataDir>
 
-
+  <directoryFactory name="DirectoryFactory" class="${solr.directoryFactory:solr.RAMDirectoryFactory}"/>
   <indexDefaults>
    <!-- Values here affect all index writers and act as a default unless overridden. -->
     <useCompoundFile>false</useCompoundFile>
Index: solr/contrib/extraction/src/test-files/extraction/solr/conf/solrconfig.xml
===================================================================
--- solr/contrib/extraction/src/test-files/extraction/solr/conf/solrconfig.xml	(revision 1225817)
+++ solr/contrib/extraction/src/test-files/extraction/solr/conf/solrconfig.xml	(working copy)
@@ -30,6 +30,7 @@
        It defaults to "index" if not present, and should probably
        not be changed if replication is in use. -->
   <dataDir>${solr.data.dir:}</dataDir>
+  <directoryFactory name="DirectoryFactory" class="${solr.directoryFactory:solr.RAMDirectoryFactory}"/>
 
   <indexDefaults>
    <!-- Values here affect all index writers and act as a default
Index: solr/contrib/analysis-extras/src/test-files/analysis-extras/solr/conf/solrconfig-icucollate.xml
===================================================================
--- solr/contrib/analysis-extras/src/test-files/analysis-extras/solr/conf/solrconfig-icucollate.xml	(revision 1225817)
+++ solr/contrib/analysis-extras/src/test-files/analysis-extras/solr/conf/solrconfig-icucollate.xml	(working copy)
@@ -20,4 +20,5 @@
 <config>
   <luceneMatchVersion>${tests.luceneMatchVersion:LUCENE_CURRENT}</luceneMatchVersion>
   <requestHandler name="standard" class="solr.StandardRequestHandler"></requestHandler>
+  <directoryFactory name="DirectoryFactory" class="${solr.directoryFactory:solr.RAMDirectoryFactory}"/>
 </config>
Index: solr/contrib/uima/src/test-files/uima/solr/conf/solrconfig.xml
===================================================================
--- solr/contrib/uima/src/test-files/uima/solr/conf/solrconfig.xml	(revision 1225817)
+++ solr/contrib/uima/src/test-files/uima/solr/conf/solrconfig.xml	(working copy)
@@ -59,6 +59,7 @@
     path="../a-jar-that-does-not-exist.jar" />
   -->
 
+  <directoryFactory name="DirectoryFactory" class="${solr.directoryFactory:solr.RAMDirectoryFactory}"/>
 
   <!--
     Used to specify an alternate directory to hold all index data other
Index: solr/contrib/dataimporthandler/src/test-files/dih/solr/conf/contentstream-solrconfig.xml
===================================================================
--- solr/contrib/dataimporthandler/src/test-files/dih/solr/conf/contentstream-solrconfig.xml	(revision 1225817)
+++ solr/contrib/dataimporthandler/src/test-files/dih/solr/conf/contentstream-solrconfig.xml	(working copy)
@@ -24,6 +24,7 @@
        If replication is in use, this should match the replication configuration. -->
        <dataDir>${solr.data.dir:}</dataDir>
 
+  <directoryFactory name="DirectoryFactory" class="${solr.directoryFactory:solr.RAMDirectoryFactory}"/>
 
   <indexDefaults>
    <!-- Values here affect all index writers and act as a default unless overridden. -->
Index: solr/contrib/dataimporthandler/src/test-files/dih/solr/conf/dataimport-nodatasource-solrconfig.xml
===================================================================
--- solr/contrib/dataimporthandler/src/test-files/dih/solr/conf/dataimport-nodatasource-solrconfig.xml	(revision 1225817)
+++ solr/contrib/dataimporthandler/src/test-files/dih/solr/conf/dataimport-nodatasource-solrconfig.xml	(working copy)
@@ -24,6 +24,7 @@
        If replication is in use, this should match the replication configuration. -->
        <dataDir>${solr.data.dir:}</dataDir>
 
+  <directoryFactory name="DirectoryFactory" class="${solr.directoryFactory:solr.RAMDirectoryFactory}"/>
 
   <indexDefaults>
    <!-- Values here affect all index writers and act as a default unless overridden. -->
Index: solr/contrib/dataimporthandler/src/test-files/dih/solr/conf/dataimport-solrconfig.xml
===================================================================
--- solr/contrib/dataimporthandler/src/test-files/dih/solr/conf/dataimport-solrconfig.xml	(revision 1225817)
+++ solr/contrib/dataimporthandler/src/test-files/dih/solr/conf/dataimport-solrconfig.xml	(working copy)
@@ -24,6 +24,7 @@
        If replication is in use, this should match the replication configuration. -->
        <dataDir>${solr.data.dir:}</dataDir>
 
+  <directoryFactory name="DirectoryFactory" class="${solr.directoryFactory:solr.RAMDirectoryFactory}"/>
 
   <indexDefaults>
    <!-- Values here affect all index writers and act as a default unless overridden. -->
Index: solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta.java
===================================================================
--- solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta.java	(revision 1225817)
+++ solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta.java	(working copy)
@@ -16,6 +16,7 @@
  */
 package org.apache.solr.handler.dataimport;
 
+import org.junit.AfterClass;
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
@@ -59,10 +60,23 @@
     "  </document>\n" +
     "</dataConfig>\n";
 
+  //TODO: fix this test to not require FSDirectory.
+  static String savedFactory;
   @BeforeClass
   public static void beforeClass() throws Exception {
+    savedFactory = System.getProperty("solr.DirectoryFactory");
+    System.setProperty("solr.directoryFactory", "solr.MockFSDirectoryFactory");
     initCore("dataimport-solrconfig.xml", "dataimport-schema.xml");
   }
+  
+  @AfterClass
+  public static void afterClass() throws Exception {
+    if (savedFactory == null) {
+      System.clearProperty("solr.directoryFactory");
+    } else {
+      System.setProperty("solr.directoryFactory", savedFactory);
+    }
+  }
 
   @Before @Override
   public void setUp() throws Exception {
Index: solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilderThreaded.java
===================================================================
--- solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilderThreaded.java	(revision 1225817)
+++ solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilderThreaded.java	(working copy)
@@ -21,6 +21,7 @@
 import java.util.Map;
 
 import org.junit.After;
+import org.junit.AfterClass;
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
@@ -31,10 +32,23 @@
  */
 public class TestDocBuilderThreaded extends AbstractDataImportHandlerTestCase {
 
+  //TODO: fix this test to not require FSDirectory.
+  static String savedFactory;
   @BeforeClass
   public static void beforeClass() throws Exception {
+    savedFactory = System.getProperty("solr.DirectoryFactory");
+    System.setProperty("solr.directoryFactory", "solr.MockFSDirectoryFactory");
     initCore("dataimport-solrconfig.xml", "dataimport-schema.xml");
   }
+  
+  @AfterClass
+  public static void afterClass() throws Exception {
+    if (savedFactory == null) {
+      System.clearProperty("solr.directoryFactory");
+    } else {
+      System.setProperty("solr.directoryFactory", savedFactory);
+    }
+  }
 
   @Before
   @Override
Index: solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd.java
===================================================================
--- solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd.java	(revision 1225817)
+++ solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd.java	(working copy)
@@ -34,7 +34,9 @@
 import org.apache.solr.client.solrj.impl.CommonsHttpSolrServer;
 import org.apache.solr.common.SolrInputDocument;
 import org.junit.After;
+import org.junit.AfterClass;
 import org.junit.Before;
+import org.junit.BeforeClass;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -89,6 +91,23 @@
         + "</dataConfig>\r\n";
   }
   
+  //TODO: fix this test to close its directories
+  static String savedFactory;
+  @BeforeClass
+  public static void beforeClass() throws Exception {
+    savedFactory = System.getProperty("solr.DirectoryFactory");
+    System.setProperty("solr.directoryFactory", "solr.StandardDirectoryFactory");
+  }
+  
+  @AfterClass
+  public static void afterClass() throws Exception {
+    if (savedFactory == null) {
+      System.clearProperty("solr.directoryFactory");
+    } else {
+      System.setProperty("solr.directoryFactory", savedFactory);
+    }
+  }
+  
   @Override
   @Before
   public void setUp() throws Exception {
Index: solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestErrorHandling.java
===================================================================
--- solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestErrorHandling.java	(revision 1225817)
+++ solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestErrorHandling.java	(working copy)
@@ -23,6 +23,7 @@
 import java.util.Map;
 import java.util.Properties;
 
+import org.junit.AfterClass;
 import org.junit.Before;
 import org.junit.BeforeClass;
 
@@ -34,12 +35,25 @@
  */
 public class TestErrorHandling extends AbstractDataImportHandlerTestCase {
 
+  //TODO: fix this test to not require FSDirectory.
+  static String savedFactory;
   @BeforeClass
   public static void beforeClass() throws Exception {
+    savedFactory = System.getProperty("solr.DirectoryFactory");
+    System.setProperty("solr.directoryFactory", "solr.MockFSDirectoryFactory");
     initCore("dataimport-solrconfig.xml", "dataimport-schema.xml");
     ignoreException("Unexpected close tag");
   }
   
+  @AfterClass
+  public static void afterClass() throws Exception {
+    if (savedFactory == null) {
+      System.clearProperty("solr.directoryFactory");
+    } else {
+      System.setProperty("solr.directoryFactory", savedFactory);
+    }
+  }
+  
   @Before @Override
   public void setUp() throws Exception {
     super.setUp();
Index: solr/contrib/dataimporthandler-extras/src/test-files/dihextras/solr/conf/dataimport-solrconfig.xml
===================================================================
--- solr/contrib/dataimporthandler-extras/src/test-files/dihextras/solr/conf/dataimport-solrconfig.xml	(revision 1225817)
+++ solr/contrib/dataimporthandler-extras/src/test-files/dihextras/solr/conf/dataimport-solrconfig.xml	(working copy)
@@ -24,6 +24,7 @@
        If replication is in use, this should match the replication configuration. -->
        <dataDir>${solr.data.dir:}</dataDir>
 
+  <directoryFactory name="DirectoryFactory" class="${solr.directoryFactory:solr.RAMDirectoryFactory}"/>
 
   <indexDefaults>
    <!-- Values here affect all index writers and act as a default unless overridden. -->
Index: solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase.java
===================================================================
--- solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase.java	(revision 1225817)
+++ solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase.java	(working copy)
@@ -81,7 +81,7 @@
   // to stress with higher thread counts and requests, make sure the junit
   // xml formatter is not being used (all output will be buffered before
   // transformation to xml and cause an OOM exception).
-  protected int stress = 2;
+  protected int stress = TEST_NIGHTLY ? 2 : 0;
   protected boolean verifyStress = true;
   protected int nThreads = 3;
 
Index: solr/test-framework/src/java/org/apache/solr/core/MockFSDirectoryFactory.java
===================================================================
--- solr/test-framework/src/java/org/apache/solr/core/MockFSDirectoryFactory.java	(revision 0)
+++ solr/test-framework/src/java/org/apache/solr/core/MockFSDirectoryFactory.java	(working copy)
@@ -0,0 +1,42 @@
+package org.apache.solr.core;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.File;
+import java.io.IOException;
+
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.store.MockDirectoryWrapper;
+import org.apache.lucene.util.LuceneTestCase;
+
+/**
+ * Opens a directory with {@link LuceneTestCase#newFSDirectory(File)}
+ */
+public class MockFSDirectoryFactory extends CachingDirectoryFactory {
+
+  @Override
+  public Directory create(String path) throws IOException {
+    MockDirectoryWrapper dir = LuceneTestCase.newFSDirectory(new File(path));
+    // Somehow removing unref'd files in Solr tests causes
+    // problems... there's some interaction w/
+    // CachingDirectoryFactory.  Once we track down where Solr
+    // isn't closing an IW, we can re-enable this:
+    dir.setAssertNoUnrefencedFilesOnClose(false);
+    return dir;
+  }
+}

Property changes on: solr/test-framework/src/java/org/apache/solr/core/MockFSDirectoryFactory.java
___________________________________________________________________
Added: svn:eol-style
## -0,0 +1 ##
+native
Index: solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory.java
===================================================================
--- solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory.java	(revision 1225817)
+++ solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory.java	(working copy)
@@ -25,13 +25,13 @@
 import org.apache.lucene.util.LuceneTestCase;
 
 /**
- * Opens a directory with {@link LuceneTestCase#newFSDirectory(File)}
+ * Opens a directory with {@link LuceneTestCase#newDirectory()}
  */
 public class MockDirectoryFactory extends CachingDirectoryFactory {
 
   @Override
-  public Directory create(String path) throws IOException {
-    MockDirectoryWrapper dir = LuceneTestCase.newFSDirectory(new File(path));
+  protected Directory create(String path) throws IOException {
+    MockDirectoryWrapper dir = LuceneTestCase.newDirectory();
     // Somehow removing unref'd files in Solr tests causes
     // problems... there's some interaction w/
     // CachingDirectoryFactory.  Once we track down where Solr
@@ -39,4 +39,21 @@
     dir.setAssertNoUnrefencedFilesOnClose(false);
     return dir;
   }
+  
+  @Override
+  public boolean exists(String path) {
+    String fullPath = new File(path).getAbsolutePath();
+    synchronized (DirectoryFactory.class) {
+      CacheValue cacheValue = byPathCache.get(fullPath);
+      Directory directory = null;
+      if (cacheValue != null) {
+        directory = cacheValue.directory;
+      }
+      if (directory == null) {
+        return false;
+      } else {
+        return true;
+      }
+    }
+  }
 }
Index: modules/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandlerRandom.java
===================================================================
--- modules/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandlerRandom.java	(revision 1225817)
+++ modules/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandlerRandom.java	(working copy)
@@ -132,4 +132,9 @@
     }
   }
 
+  @Override
+  protected int numDocsToIndex() {
+    return TEST_NIGHTLY ? 20000 : 1000;
+  }
+
 }
Index: modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery.java
===================================================================
--- modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery.java	(revision 1225817)
+++ modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery.java	(working copy)
@@ -303,11 +303,11 @@
     assertEquals("queries should have same #hits",h1.size(),h4CustomAdd.size());
     assertEquals("queries should have same #hits",h1.size(),h5CustomMulAdd.size());
 
-    QueryUtils.check(random, q1,s);
-    QueryUtils.check(random, q2,s);
-    QueryUtils.check(random, q3,s);
-    QueryUtils.check(random, q4,s);
-    QueryUtils.check(random, q5,s);
+    QueryUtils.check(random, q1, s, rarely());
+    QueryUtils.check(random, q2, s, rarely());
+    QueryUtils.check(random, q3, s, rarely());
+    QueryUtils.check(random, q4, s, rarely());
+    QueryUtils.check(random, q5, s, rarely());
 
     // verify scores ratios
     for (final Integer doc : h1.keySet()) {
Index: lucene/common-build.xml
===================================================================
--- lucene/common-build.xml	(revision 1225817)
+++ lucene/common-build.xml	(working copy)
@@ -654,14 +654,10 @@
 
   <target name="junit-parallel" unless="tests.sequential">
     <parallel threadsPerProcessor="${tests.threadspercpu}">
-     <test-macro threadNum="1" threadTotal="8"/>
-     <test-macro threadNum="2" threadTotal="8"/>
-     <test-macro threadNum="3" threadTotal="8"/>
-     <test-macro threadNum="4" threadTotal="8"/>
-     <test-macro threadNum="5" threadTotal="8"/>
-     <test-macro threadNum="6" threadTotal="8"/>
-     <test-macro threadNum="7" threadTotal="8"/>
-     <test-macro threadNum="8" threadTotal="8"/>
+     <test-macro threadNum="1" threadTotal="4"/>
+     <test-macro threadNum="2" threadTotal="4"/>
+     <test-macro threadNum="3" threadTotal="4"/>
+     <test-macro threadNum="4" threadTotal="4"/>
     </parallel>
   </target>
 
Index: lucene/src/test/org/apache/lucene/store/TestLockFactory.java
===================================================================
--- lucene/src/test/org/apache/lucene/store/TestLockFactory.java	(revision 1225817)
+++ lucene/src/test/org/apache/lucene/store/TestLockFactory.java	(working copy)
@@ -132,6 +132,7 @@
     // Verify: do stress test, by opening IndexReaders and
     // IndexWriters over & over in 2 threads and making sure
     // no unexpected exceptions are raised:
+    @Nightly
     public void testStressLocks() throws Exception {
       _testStressLocks(null, _TestUtil.getTempDir("index.TestLockFactory6"));
     }
@@ -140,6 +141,7 @@
     // IndexWriters over & over in 2 threads and making sure
     // no unexpected exceptions are raised, but use
     // NativeFSLockFactory:
+    @Nightly
     public void testStressLocksNativeFSLockFactory() throws Exception {
       File dir = _TestUtil.getTempDir("index.TestLockFactory7");
       _testStressLocks(new NativeFSLockFactory(dir), dir);
Index: lucene/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings.java
===================================================================
--- lucene/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings.java	(revision 1225817)
+++ lucene/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings.java	(working copy)
@@ -47,6 +47,7 @@
  * 
  * @lucene.experimental
  */
+@LuceneTestCase.Nightly
 public class Test10KPulsings extends LuceneTestCase {
   public void test10kPulsed() throws Exception {
     // we always run this test with pulsing codec.
Index: lucene/src/test/org/apache/lucene/codecs/lucene3x/TestTermInfosReaderIndex.java
===================================================================
--- lucene/src/test/org/apache/lucene/codecs/lucene3x/TestTermInfosReaderIndex.java	(revision 1225817)
+++ lucene/src/test/org/apache/lucene/codecs/lucene3x/TestTermInfosReaderIndex.java	(working copy)
@@ -55,33 +55,44 @@
 import org.apache.lucene.store.LockObtainFailedException;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util._TestUtil;
+import org.junit.AfterClass;
 import org.junit.BeforeClass;
 
 public class TestTermInfosReaderIndex extends LuceneTestCase {
   
-  private static final int NUMBER_OF_DOCUMENTS = 1000;
-  private static final int NUMBER_OF_FIELDS = 100;
-  private TermInfosReaderIndex index;
-  private Directory directory;
-  private SegmentTermEnum termEnum;
-  private int indexDivisor;
-  private int termIndexInterval;
-  private IndexReader reader;
-  private List<Term> sampleTerms;
+  private static int NUMBER_OF_DOCUMENTS;
+  private static int NUMBER_OF_FIELDS;
+  private static TermInfosReaderIndex index;
+  private static Directory directory;
+  private static SegmentTermEnum termEnum;
+  private static int indexDivisor;
+  private static int termIndexInterval;
+  private static IndexReader reader;
+  private static List<Term> sampleTerms;
   
   /** we will manually instantiate preflex-rw here */
   @BeforeClass
-  public static void beforeClass() {
+  public static void beforeClass() throws Exception {
     LuceneTestCase.PREFLEX_IMPERSONATION_IS_ACTIVE = true;
-  }
-
-  @Override
-  public void setUp() throws Exception {
-    super.setUp();
+    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, 
+        new MockAnalyzer(random, MockTokenizer.KEYWORD, false));
+    
+    termIndexInterval = config.getTermIndexInterval();
     indexDivisor = _TestUtil.nextInt(random, 1, 10);
+    NUMBER_OF_DOCUMENTS = atLeast(100);
+    NUMBER_OF_FIELDS = atLeast(Math.max(10, 3*termIndexInterval*indexDivisor/NUMBER_OF_DOCUMENTS));
+    
     directory = newDirectory();
-    termIndexInterval = populate(directory);
 
+    config.setCodec(new PreFlexRWCodec());
+    // turn off compound file, this test will open some index files directly.
+    LogMergePolicy mp = newLogMergePolicy();
+    mp.setUseCompoundFile(false);
+    config.setMergePolicy(mp);
+
+    
+    populate(directory, config);
+
     IndexReader r0 = IndexReader.open(directory);
     SegmentReader r = (SegmentReader) r0.getSequentialSubReaders()[0];
     String segment = r.getSegmentName();
@@ -102,15 +113,18 @@
     
     reader = IndexReader.open(directory);
     sampleTerms = sample(reader,1000);
-    
   }
   
-  @Override
-  public void tearDown() throws Exception {
+  @AfterClass
+  public static void afterClass() throws Exception {
     termEnum.close();
     reader.close();
     directory.close();
-    super.tearDown();
+    termEnum = null;
+    reader = null;
+    directory = null;
+    index = null;
+    sampleTerms = null;
   }
   
   public void testSeekEnum() throws CorruptIndexException, IOException {
@@ -141,7 +155,7 @@
     }
   }
 
-  private List<Term> sample(IndexReader reader, int size) throws IOException {
+  private static List<Term> sample(IndexReader reader, int size) throws IOException {
     List<Term> sample = new ArrayList<Term>();
     Random random = new Random();
     FieldsEnum fieldsEnum = MultiFields.getFields(reader).iterator();
@@ -166,22 +180,13 @@
   private Term findTermThatWouldBeAtIndex(SegmentTermEnum termEnum, int index) throws IOException {
     int termPosition = index * termIndexInterval * indexDivisor;
     for (int i = 0; i < termPosition; i++) {
-      if (!termEnum.next()) {
-        fail("Should not have run out of terms.");
-      }
+      // TODO: this test just uses random terms, so this is always possible
+      assumeTrue("ran out of terms.", termEnum.next());
     }
     return termEnum.term();
   }
 
-  private int populate(Directory directory) throws CorruptIndexException, LockObtainFailedException, IOException {
-    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, 
-        new MockAnalyzer(random, MockTokenizer.KEYWORD, false));
-    config.setCodec(new PreFlexRWCodec());
-    // turn off compound file, this test will open some index files directly.
-    LogMergePolicy mp = newLogMergePolicy();
-    mp.setUseCompoundFile(false);
-    config.setMergePolicy(mp);
-
+  private static void populate(Directory directory, IndexWriterConfig config) throws CorruptIndexException, LockObtainFailedException, IOException {
     RandomIndexWriter writer = new RandomIndexWriter(random, directory, config);
     for (int i = 0; i < NUMBER_OF_DOCUMENTS; i++) {
       Document document = new Document();
@@ -192,10 +197,9 @@
     }
     writer.forceMerge(1);
     writer.close();
-    return config.getTermIndexInterval();
   }
   
-  private String getText() {
+  private static String getText() {
     return Long.toString(random.nextLong(),Character.MAX_RADIX);
   }
 }
Index: lucene/src/test/org/apache/lucene/codecs/lucene3x/TestSurrogates.java
===================================================================
--- lucene/src/test/org/apache/lucene/codecs/lucene3x/TestSurrogates.java	(revision 1225817)
+++ lucene/src/test/org/apache/lucene/codecs/lucene3x/TestSurrogates.java	(working copy)
@@ -302,7 +302,7 @@
 
     for(int f=0;f<numField;f++) {
       String field = "f" + f;
-      final int numTerms = atLeast(1000);
+      final int numTerms = atLeast(200);
 
       final Set<String> uniqueTerms = new HashSet<String>();
 
Index: lucene/src/test/org/apache/lucene/search/TestSort.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestSort.java	(revision 1225817)
+++ lucene/src/test/org/apache/lucene/search/TestSort.java	(working copy)
@@ -80,7 +80,7 @@
 
   @BeforeClass
   public static void beforeClass() throws Exception {
-    NUM_STRINGS = atLeast(6000);
+    NUM_STRINGS = atLeast(500);
   }
 
   // document data:
@@ -204,8 +204,7 @@
     dirs.add(indexStore);
     IndexWriter writer = new IndexWriter(
         indexStore,
-        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).
-            setMaxBufferedDocs(4).
+        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).
             setMergePolicy(newLogMergePolicy(97))
     );
     FieldType onlyStored = new FieldType();
Index: lucene/src/test/org/apache/lucene/search/TestTermVectors.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestTermVectors.java	(revision 1225817)
+++ lucene/src/test/org/apache/lucene/search/TestTermVectors.java	(working copy)
@@ -36,15 +36,16 @@
 import org.apache.lucene.util.IOUtils;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util._TestUtil;
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
 
 public class TestTermVectors extends LuceneTestCase {
-  private IndexSearcher searcher;
-  private IndexReader reader;
-  private Directory directory;
+  private static IndexSearcher searcher;
+  private static IndexReader reader;
+  private static Directory directory;
 
-  @Override
-  public void setUp() throws Exception {                  
-    super.setUp();
+  @BeforeClass
+  public static void beforeClass() throws Exception {                  
     directory = newDirectory();
     RandomIndexWriter writer = new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.SIMPLE, true)).setMergePolicy(newLogMergePolicy()));
     //writer.setUseCompoundFile(true);
@@ -77,11 +78,13 @@
     searcher = newSearcher(reader);
   }
   
-  @Override
-  public void tearDown() throws Exception {
+  @AfterClass
+  public static void afterClass() throws Exception {
     reader.close();
     directory.close();
-    super.tearDown();
+    reader = null;
+    directory = null;
+    searcher = null;
   }
 
   public void test() {
@@ -370,7 +373,7 @@
     }
     IndexReader reader = writer.getReader();
     writer.close();
-    searcher = newSearcher(reader);
+    IndexSearcher searcher = newSearcher(reader);
 
     Query query = new TermQuery(new Term("field", "hundred"));
     ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;
@@ -418,7 +421,7 @@
     IndexReader reader = writer.getReader();
     writer.close();
 
-    searcher = newSearcher(reader);
+    IndexSearcher searcher = newSearcher(reader);
 
     Query query = new TermQuery(new Term("field", "one"));
     ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;
Index: lucene/src/test/org/apache/lucene/search/TestFieldCache.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestFieldCache.java	(revision 1225817)
+++ lucene/src/test/org/apache/lucene/search/TestFieldCache.java	(working copy)
@@ -37,19 +37,20 @@
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util._TestUtil;
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
 
 public class TestFieldCache extends LuceneTestCase {
-  protected IndexReader reader;
-  private int NUM_DOCS;
-  private int NUM_ORDS;
-  private String[] unicodeStrings;
-  private BytesRef[][] multiValued;
-  private Directory directory;
+  private static IndexReader reader;
+  private static int NUM_DOCS;
+  private static int NUM_ORDS;
+  private static String[] unicodeStrings;
+  private static BytesRef[][] multiValued;
+  private static Directory directory;
 
-  @Override
-  public void setUp() throws Exception {
-    super.setUp();
-    NUM_DOCS = atLeast(1000);
+  @BeforeClass
+  public static void beforeClass() throws Exception {
+    NUM_DOCS = atLeast(500);
     NUM_ORDS = atLeast(2);
     directory = newDirectory();
     RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));
@@ -101,11 +102,14 @@
     writer.close();
   }
 
-  @Override
-  public void tearDown() throws Exception {
+  @AfterClass
+  public static void afterClass() throws Exception {
     reader.close();
+    reader = null;
     directory.close();
-    super.tearDown();
+    directory = null;
+    unicodeStrings = null;
+    multiValued = null;
   }
   
   public void testInfoStream() throws Exception {
@@ -296,7 +300,7 @@
     dir.close();
   }
 
-  private String generateString(int i) {
+  private static String generateString(int i) {
     String s = null;
     if (i > 0 && random.nextInt(3) == 1) {
       // reuse past string -- try to find one that's not null
Index: lucene/src/test/org/apache/lucene/search/spans/TestBasics.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/spans/TestBasics.java	(revision 1225817)
+++ lucene/src/test/org/apache/lucene/search/spans/TestBasics.java	(working copy)
@@ -111,7 +111,7 @@
     directory = newDirectory();
     RandomIndexWriter writer = new RandomIndexWriter(random, directory,
         newIndexWriterConfig(TEST_VERSION_CURRENT, simplePayloadAnalyzer)
-                                                     .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)).setMergePolicy(newLogMergePolicy()));
+                                                     .setMaxBufferedDocs(_TestUtil.nextInt(random, 100, 1000)).setMergePolicy(newLogMergePolicy()));
     //writer.infoStream = System.out;
     for (int i = 0; i < 2000; i++) {
       Document doc = new Document();
Index: lucene/src/test/org/apache/lucene/search/TestShardSearching.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestShardSearching.java	(revision 1225817)
+++ lucene/src/test/org/apache/lucene/search/TestShardSearching.java	(working copy)
@@ -66,11 +66,11 @@
   public void testSimple() throws Exception {
     final int numNodes = _TestUtil.nextInt(random, 1, 10);
 
-    final double runTimeSec = atLeast(5) * RANDOM_MULTIPLIER;
+    final double runTimeSec = atLeast(3);
 
     final int minDocsToMakeTerms = _TestUtil.nextInt(random, 5, 20);
 
-    final int maxSearcherAgeSeconds = _TestUtil.nextInt(random, 1, 4);
+    final int maxSearcherAgeSeconds = _TestUtil.nextInt(random, 1, 3);
 
     if (VERBOSE) {
       System.out.println("TEST: numNodes=" + numNodes + " runTimeSec=" + runTimeSec + " maxSearcherAgeSeconds=" + maxSearcherAgeSeconds);
Index: lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java
===================================================================
--- lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java	(revision 1225817)
+++ lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java	(working copy)
@@ -936,7 +936,7 @@
       addDoc(w);
     w.close();
 
-    int iter = TEST_NIGHTLY ? 200 : 20;
+    int iter = TEST_NIGHTLY ? 200 : 10;
     for(int i=0;i<iter;i++) {
       if (VERBOSE) {
         System.out.println("TEST: iter " + i);
@@ -1233,7 +1233,7 @@
     FailOnTermVectors[] failures = new FailOnTermVectors[] {
         new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),
         new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };
-    int num = atLeast(3);
+    int num = atLeast(1);
     for (int j = 0; j < num; j++) {
       for (FailOnTermVectors failure : failures) {
         MockDirectoryWrapper dir = newDirectory();
Index: lucene/src/test/org/apache/lucene/index/TestStressNRT.java
===================================================================
--- lucene/src/test/org/apache/lucene/index/TestStressNRT.java	(revision 1225817)
+++ lucene/src/test/org/apache/lucene/index/TestStressNRT.java	(working copy)
@@ -77,7 +77,7 @@
     final boolean tombstones = random.nextBoolean();
 
     // query variables
-    final AtomicLong operations = new AtomicLong(atLeast(50000));  // number of query operations to perform in total
+    final AtomicLong operations = new AtomicLong(atLeast(10000));  // number of query operations to perform in total
 
     final int nReadThreads = _TestUtil.nextInt(random, 1, TEST_NIGHTLY ? 10 : 5);
     initModel(ndocs);
Index: lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility.java
===================================================================
--- lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility.java	(revision 1225817)
+++ lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility.java	(working copy)
@@ -23,7 +23,9 @@
 import java.io.PrintStream;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 import java.util.Random;
 
 import org.apache.lucene.analysis.MockAnalyzer;
@@ -52,6 +54,8 @@
 import org.apache.lucene.util.Constants;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util._TestUtil;
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
 
 /*
   Verify we can read the pre-4.0 file format, do searches
@@ -94,7 +98,7 @@
   }
 
 */  
-  final String[] oldNames = {"30.cfs",
+  final static String[] oldNames = {"30.cfs",
                              "30.nocfs",
                              "31.cfs",
                              "31.nocfs",
@@ -120,10 +124,34 @@
                                      "29.nocfs",
   };
   
-  final String[] oldSingleSegmentNames = {"31.optimized.cfs",
+  final static String[] oldSingleSegmentNames = {"31.optimized.cfs",
                                           "31.optimized.nocfs",
   };
   
+  static Map<String,Directory> oldIndexDirs;
+  
+  @BeforeClass
+  public static void beforeClass() throws Exception {
+    List<String> names = new ArrayList<String>(oldNames.length + oldSingleSegmentNames.length);
+    names.addAll(Arrays.asList(oldNames));
+    names.addAll(Arrays.asList(oldSingleSegmentNames));
+    oldIndexDirs = new HashMap<String,Directory>();
+    for (String name : names) {
+      File dir = _TestUtil.getTempDir(name);
+      File dataFile = new File(TestBackwardsCompatibility.class.getResource("index." + name + ".zip").toURI());
+      _TestUtil.unzip(dataFile, dir);
+      oldIndexDirs.put(name, newFSDirectory(dir));
+    }
+  }
+  
+  @AfterClass
+  public static void afterClass() throws Exception {
+    for (Directory d : oldIndexDirs.values()) {
+      d.close();
+    }
+    oldIndexDirs = null;
+  }
+  
   /** This test checks that *only* IndexFormatTooOldExceptions are thrown when you open and operate on too old indexes! */
   public void testUnsupportedOldIndexes() throws Exception {
     for(int i=0;i<unsupportedNames.length;i++) {
@@ -183,48 +211,35 @@
   }
   
   public void testFullyMergeOldIndex() throws Exception {
-    for(int i=0;i<oldNames.length;i++) {
+    for (String name : oldNames) {
       if (VERBOSE) {
-        System.out.println("\nTEST: index=" + oldNames[i]);
+        System.out.println("\nTEST: index=" + name);
       }
-      File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);
-      _TestUtil.unzip(getDataFile("index." + oldNames[i] + ".zip"), oldIndxeDir);
-      Directory dir = newFSDirectory(oldIndxeDir);
-
+      Directory dir = newDirectory(oldIndexDirs.get(name));
       IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(
           TEST_VERSION_CURRENT, new MockAnalyzer(random)));
       w.forceMerge(1);
       w.close();
       
       dir.close();
-      _TestUtil.rmDir(oldIndxeDir);
     }
   }
 
   public void testAddOldIndexes() throws IOException {
     for (String name : oldNames) {
-      File oldIndxeDir = _TestUtil.getTempDir(name);
-      _TestUtil.unzip(getDataFile("index." + name + ".zip"), oldIndxeDir);
-      Directory dir = newFSDirectory(oldIndxeDir);
-
       Directory targetDir = newDirectory();
       IndexWriter w = new IndexWriter(targetDir, newIndexWriterConfig(
           TEST_VERSION_CURRENT, new MockAnalyzer(random)));
-      w.addIndexes(dir);
+      w.addIndexes(oldIndexDirs.get(name));
       w.close();
       
-      dir.close();
       targetDir.close();
-      _TestUtil.rmDir(oldIndxeDir);
     }
   }
 
   public void testAddOldIndexesReader() throws IOException {
     for (String name : oldNames) {
-      File oldIndxeDir = _TestUtil.getTempDir(name);
-      _TestUtil.unzip(getDataFile("index." + name + ".zip"), oldIndxeDir);
-      Directory dir = newFSDirectory(oldIndxeDir);
-      IndexReader reader = IndexReader.open(dir);
+      IndexReader reader = IndexReader.open(oldIndexDirs.get(name));
       
       Directory targetDir = newDirectory();
       IndexWriter w = new IndexWriter(targetDir, newIndexWriterConfig(
@@ -233,39 +248,32 @@
       w.close();
       reader.close();
             
-      dir.close();
       targetDir.close();
-      _TestUtil.rmDir(oldIndxeDir);
     }
   }
 
   public void testSearchOldIndex() throws IOException {
-    for(int i=0;i<oldNames.length;i++) {
-      File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);
-      _TestUtil.unzip(getDataFile("index." + oldNames[i] + ".zip"), oldIndxeDir);
-      searchIndex(oldIndxeDir, oldNames[i]);
-      _TestUtil.rmDir(oldIndxeDir);
+    for (String name : oldNames) {
+      searchIndex(oldIndexDirs.get(name), name);
     }
   }
 
   public void testIndexOldIndexNoAdds() throws IOException {
-    for(int i=0;i<oldNames.length;i++) {
-      File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);
-      _TestUtil.unzip(getDataFile("index." + oldNames[i] + ".zip"), oldIndxeDir);
-      changeIndexNoAdds(random, oldIndxeDir);
-      _TestUtil.rmDir(oldIndxeDir);
+    for (String name : oldNames) {
+      Directory dir = newDirectory(oldIndexDirs.get(name));
+      changeIndexNoAdds(random, dir);
+      dir.close();
     }
   }
 
   public void testIndexOldIndex() throws IOException {
-    for(int i=0;i<oldNames.length;i++) {
+    for (String name : oldNames) {
       if (VERBOSE) {
-        System.out.println("TEST: oldName=" + oldNames[i]);
+        System.out.println("TEST: oldName=" + name);
       }
-      File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);
-      _TestUtil.unzip(getDataFile("index." + oldNames[i] + ".zip"), oldIndxeDir);
-      changeIndexWithAdds(random, oldIndxeDir, oldNames[i]);
-      _TestUtil.rmDir(oldIndxeDir);
+      Directory dir = newDirectory(oldIndexDirs.get(name));
+      changeIndexWithAdds(random, dir, name);
+      dir.close();
     }
   }
 
@@ -278,11 +286,10 @@
     }
   }
 
-  public void searchIndex(File indexDir, String oldName) throws IOException {
+  public void searchIndex(Directory dir, String oldName) throws IOException {
     //QueryParser parser = new QueryParser("contents", new MockAnalyzer(random));
     //Query query = parser.parse("handle:1");
 
-    Directory dir = newFSDirectory(indexDir);
     IndexReader reader = IndexReader.open(dir);
     IndexSearcher searcher = new IndexSearcher(reader);
 
@@ -314,7 +321,7 @@
         }
 
         Terms tfv = reader.getTermVectors(i).terms("utf8");
-        assertNotNull("docID=" + i + " index=" + indexDir.getName(), tfv);
+        assertNotNull("docID=" + i + " index=" + oldName, tfv);
       } else
         // Only ID 7 is deleted
         assertEquals(7, i);
@@ -337,7 +344,6 @@
     assertEquals(34, hits.length);
 
     reader.close();
-    dir.close();
   }
 
   private int compare(String name, String v) {
@@ -346,9 +352,7 @@
     return v0 - v1;
   }
 
-  public void changeIndexWithAdds(Random random, File oldIndexDir, String origOldName) throws IOException {
-
-    Directory dir = newFSDirectory(oldIndexDir);
+  public void changeIndexWithAdds(Random random, Directory dir, String origOldName) throws IOException {
     // open writer
     IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));
     // add 10 docs
@@ -388,14 +392,9 @@
     doTestHits(hits, 44, searcher.getIndexReader());
     assertEquals("wrong first document", "21", d.get("id"));
     reader.close();
-
-    dir.close();
   }
 
-  public void changeIndexNoAdds(Random random, File oldIndexDir) throws IOException {
-
-    Directory dir = newFSDirectory(oldIndexDir);
-
+  public void changeIndexNoAdds(Random random, Directory dir) throws IOException {
     // make sure searching sees right # hits
     IndexReader reader = IndexReader.open(dir);
     IndexSearcher searcher = new IndexSearcher(reader);
@@ -416,8 +415,6 @@
     assertEquals("wrong number of hits", 34, hits.length);
     doTestHits(hits, 34, searcher.getIndexReader());
     reader.close();
-
-    dir.close();
   }
 
   public File createIndex(String dirName, boolean doCFS, boolean fullyMerged) throws IOException {
@@ -576,10 +573,8 @@
 
   // flex: test basics of TermsEnum api on non-flex index
   public void testNextIntoWrongField() throws Exception {
-    for(int i=0;i<oldNames.length;i++) {
-      File oldIndexDir = _TestUtil.getTempDir(oldNames[i]);
-    	_TestUtil.unzip(getDataFile("index." + oldNames[i] + ".zip"), oldIndexDir);
-      Directory dir = newFSDirectory(oldIndexDir);
+    for (String name : oldNames) {
+      Directory dir = oldIndexDirs.get(name);
       IndexReader r = IndexReader.open(dir);
       TermsEnum terms = MultiFields.getFields(r).terms("content").iterator(null);
       BytesRef t = terms.next();
@@ -615,17 +610,13 @@
       assertNull(terms.next());
 
       r.close();
-      dir.close();
-      _TestUtil.rmDir(oldIndexDir);
     }
   }
   
   public void testNumericFields() throws Exception {
-    for(int i=0;i<oldNames.length;i++) {
+    for (String name : oldNames) {
       
-      File oldIndexDir = _TestUtil.getTempDir(oldNames[i]);
-      _TestUtil.unzip(getDataFile("index." + oldNames[i] + ".zip"), oldIndexDir);
-      Directory dir = newFSDirectory(oldIndexDir);
+      Directory dir = oldIndexDirs.get(name);
       IndexReader reader = IndexReader.open(dir);
       IndexSearcher searcher = new IndexSearcher(reader);
       
@@ -660,8 +651,6 @@
       }
       
       reader.close();
-      dir.close();
-      _TestUtil.rmDir(oldIndexDir);
     }
   }
   
@@ -691,9 +680,7 @@
       if (VERBOSE) {
         System.out.println("testUpgradeOldIndex: index=" +name);
       }
-      File oldIndxeDir = _TestUtil.getTempDir(name);
-      _TestUtil.unzip(getDataFile("index." + name + ".zip"), oldIndxeDir);
-      Directory dir = newFSDirectory(oldIndxeDir);
+      Directory dir = newDirectory(oldIndexDirs.get(name));
 
       new IndexUpgrader(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, null), false)
         .upgrade();
@@ -701,7 +688,6 @@
       checkAllSegmentsUpgraded(dir);
       
       dir.close();
-      _TestUtil.rmDir(oldIndxeDir);
     }
   }
 
@@ -710,9 +696,7 @@
       if (VERBOSE) {
         System.out.println("testUpgradeOldSingleSegmentIndexWithAdditions: index=" +name);
       }
-      File oldIndxeDir = _TestUtil.getTempDir(name);
-      _TestUtil.unzip(getDataFile("index." + name + ".zip"), oldIndxeDir);
-      Directory dir = newFSDirectory(oldIndxeDir);
+      Directory dir = newDirectory(oldIndexDirs.get(name));
 
       assertEquals("Original index must be single segment", 1, getNumberOfSegments(dir));
 
@@ -752,7 +736,6 @@
         origSegCount, segCount);
       
       dir.close();
-      _TestUtil.rmDir(oldIndxeDir);
     }
   }
 
Index: lucene/src/test/org/apache/lucene/index/TestDuelingCodecs.java
===================================================================
--- lucene/src/test/org/apache/lucene/index/TestDuelingCodecs.java	(revision 1225817)
+++ lucene/src/test/org/apache/lucene/index/TestDuelingCodecs.java	(working copy)
@@ -92,7 +92,7 @@
     RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);
     RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);
     
-    int numdocs = atLeast(500);
+    int numdocs = atLeast(100);
     createRandomIndex(numdocs, leftWriter, seed);
     createRandomIndex(numdocs, rightWriter, seed);
 
@@ -134,7 +134,7 @@
    */
   public void testEquals() throws Exception {
     assertReaderStatistics(leftReader, rightReader);
-    assertFields(MultiFields.getFields(leftReader), MultiFields.getFields(rightReader));
+    assertFields(MultiFields.getFields(leftReader), MultiFields.getFields(rightReader), true);
     assertNorms(leftReader, rightReader);
     assertStoredFields(leftReader, rightReader);
     assertTermVectors(leftReader, rightReader);
@@ -160,7 +160,7 @@
   /** 
    * Fields api equivalency 
    */
-  public void assertFields(Fields leftFields, Fields rightFields) throws Exception {
+  public void assertFields(Fields leftFields, Fields rightFields, boolean deep) throws Exception {
     // Fields could be null if there are no postings,
     // but then it must be null for both
     if (leftFields == null || rightFields == null) {
@@ -176,7 +176,7 @@
     String field;
     while ((field = leftEnum.next()) != null) {
       assertEquals(info, field, rightEnum.next());
-      assertTerms(leftEnum.terms(), rightEnum.terms());
+      assertTerms(leftEnum.terms(), rightEnum.terms(), deep);
     }
     assertNull(rightEnum.next());
   }
@@ -197,7 +197,7 @@
   /** 
    * Terms api equivalency 
    */
-  public void assertTerms(Terms leftTerms, Terms rightTerms) throws Exception {
+  public void assertTerms(Terms leftTerms, Terms rightTerms, boolean deep) throws Exception {
     if (leftTerms == null || rightTerms == null) {
       assertNull(info, leftTerms);
       assertNull(info, rightTerms);
@@ -210,15 +210,17 @@
     assertTermsEnum(leftTermsEnum, rightTermsEnum, true);
     // TODO: test seeking too
     
-    int numIntersections = atLeast(3);
-    for (int i = 0; i < numIntersections; i++) {
-      String re = AutomatonTestUtil.randomRegexp(random);
-      CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());
-      if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {
-        // TODO: test start term too
-        TermsEnum leftIntersection = leftTerms.intersect(automaton, null);
-        TermsEnum rightIntersection = rightTerms.intersect(automaton, null);
-        assertTermsEnum(leftIntersection, rightIntersection, rarely());
+    if (deep) {
+      int numIntersections = atLeast(3);
+      for (int i = 0; i < numIntersections; i++) {
+        String re = AutomatonTestUtil.randomRegexp(random);
+        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());
+        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {
+          // TODO: test start term too
+          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);
+          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);
+          assertTermsEnum(leftIntersection, rightIntersection, rarely());
+        }
       }
     }
   }
@@ -511,7 +513,7 @@
     for (int i = 0; i < leftReader.maxDoc(); i++) {
       Fields leftFields = leftReader.getTermVectors(i);
       Fields rightFields = rightReader.getTermVectors(i);
-      assertFields(leftFields, rightFields);
+      assertFields(leftFields, rightFields, rarely());
     }
   }
   
Index: lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete.java
===================================================================
--- lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete.java	(revision 1225817)
+++ lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete.java	(working copy)
@@ -945,7 +945,7 @@
     // note: tiny rambuffer used, as with a 1MB buffer the test is too slow (flush @ 128,999)
     IndexWriter w = new IndexWriter(dir,
                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))
-                                    .setRAMBufferSizeMB(0.2f).setMaxBufferedDocs(1000).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES).setReaderPooling(false));
+                                    .setRAMBufferSizeMB(0.1f).setMaxBufferedDocs(1000).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES).setReaderPooling(false));
     int count = 0;
     while(true) {
       Document doc = new Document();
@@ -1020,6 +1020,7 @@
 
   // Make sure buffered (pushed) deletes don't use up so
   // much RAM that it forces long tail of tiny segments:
+  @Nightly
   public void testApplyDeletesOnFlush() throws Exception {
     Directory dir = newDirectory();
     // Cannot use RandomIndexWriter because we don't want to
Index: lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging.java
===================================================================
--- lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging.java	(revision 1225817)
+++ lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging.java	(working copy)
@@ -15,6 +15,7 @@
  * limitations under the License.
  */
 
+import org.apache.lucene.store.AlreadyClosedException;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.analysis.MockAnalyzer;
 import org.apache.lucene.document.Document;
@@ -26,6 +27,7 @@
 import org.apache.lucene.util.LuceneTestCase;
 
 import java.io.IOException;
+import java.util.ArrayList;
 import java.util.Random;
 
 
@@ -350,4 +352,101 @@
     iw.close();
     dir.close();
   }
+  
+  public void testNoWaitClose() throws Throwable {
+    Directory directory = newDirectory();
+
+    final Document doc = new Document();
+    FieldType customType = new FieldType(TextField.TYPE_STORED);
+    customType.setTokenized(false);
+
+    Field idField = newField("id", "", customType);
+    doc.add(idField);
+
+    for(int pass=0;pass<2;pass++) {
+      if (VERBOSE) {
+        System.out.println("TEST: pass=" + pass);
+      }
+
+      IndexWriterConfig conf =  newIndexWriterConfig(
+              TEST_VERSION_CURRENT, new MockAnalyzer(random)).
+              setOpenMode(OpenMode.CREATE).
+              setMaxBufferedDocs(2).
+              setMergePolicy(newLogMergePolicy());
+      if (pass == 2) {
+        conf.setMergeScheduler(new SerialMergeScheduler());
+      }
+
+      IndexWriter writer = new IndexWriter(directory, conf);
+      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);          
+
+      for(int iter=0;iter<10;iter++) {
+        if (VERBOSE) {
+          System.out.println("TEST: iter=" + iter);
+        }
+        for(int j=0;j<199;j++) {
+          idField.setValue(Integer.toString(iter*201+j));
+          writer.addDocument(doc);
+        }
+
+        int delID = iter*199;
+        for(int j=0;j<20;j++) {
+          writer.deleteDocuments(new Term("id", Integer.toString(delID)));
+          delID += 5;
+        }
+
+        // Force a bunch of merge threads to kick off so we
+        // stress out aborting them on close:
+        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);
+
+        final IndexWriter finalWriter = writer;
+        final ArrayList<Throwable> failure = new ArrayList<Throwable>();
+        Thread t1 = new Thread() {
+            @Override
+            public void run() {
+              boolean done = false;
+              while(!done) {
+                for(int i=0;i<100;i++) {
+                  try {
+                    finalWriter.addDocument(doc);
+                  } catch (AlreadyClosedException e) {
+                    done = true;
+                    break;
+                  } catch (NullPointerException e) {
+                    done = true;
+                    break;
+                  } catch (Throwable e) {
+                    e.printStackTrace(System.out);
+                    failure.add(e);
+                    done = true;
+                    break;
+                  }
+                }
+                Thread.yield();
+              }
+
+            }
+          };
+
+        if (failure.size() > 0) {
+          throw failure.get(0);
+        }
+
+        t1.start();
+
+        writer.close(false);
+        t1.join();
+
+        // Make sure reader can read
+        IndexReader reader = IndexReader.open(directory);
+        reader.close();
+
+        // Reopen
+        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));
+      }
+      writer.close();
+    }
+
+    directory.close();
+  }
 }
Index: lucene/src/test/org/apache/lucene/index/TestCompoundFile.java
===================================================================
--- lucene/src/test/org/apache/lucene/index/TestCompoundFile.java	(revision 1225817)
+++ lucene/src/test/org/apache/lucene/index/TestCompoundFile.java	(working copy)
@@ -773,7 +773,7 @@
   public void testManySubFiles() throws IOException {
 
     final Directory d = newFSDirectory(_TestUtil.getTempDir("CFSManySubFiles"));
-    final int FILE_COUNT = 10000;
+    final int FILE_COUNT = atLeast(500);
 
     for(int fileIdx=0;fileIdx<FILE_COUNT;fileIdx++) {
       IndexOutput out = d.createOutput("file." + fileIdx, newIOContext(random));
Index: lucene/src/test/org/apache/lucene/index/TestRandomStoredFields.java
===================================================================
--- lucene/src/test/org/apache/lucene/index/TestRandomStoredFields.java	(revision 0)
+++ lucene/src/test/org/apache/lucene/index/TestRandomStoredFields.java	(working copy)
@@ -0,0 +1,137 @@
+package org.apache.lucene.index;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Random;
+
+import org.apache.lucene.analysis.MockAnalyzer;
+import org.apache.lucene.document.Document;
+import org.apache.lucene.document.Field;
+import org.apache.lucene.document.FieldType;
+import org.apache.lucene.document.TextField;
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.TermQuery;
+import org.apache.lucene.search.TopDocs;
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.util.LuceneTestCase;
+import org.apache.lucene.util._TestUtil;
+
+public class TestRandomStoredFields extends LuceneTestCase {
+
+  public void testRandomStoredFields() throws IOException {
+    Directory dir = newDirectory();
+    Random rand = random;
+    RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));
+    //w.w.setUseCompoundFile(false);
+    final int docCount = atLeast(200);
+    final int fieldCount = _TestUtil.nextInt(rand, 1, 5);
+
+    final List<Integer> fieldIDs = new ArrayList<Integer>();
+
+    FieldType customType = new FieldType(TextField.TYPE_STORED);
+    customType.setTokenized(false);
+    Field idField = newField("id", "", customType);
+
+    for(int i=0;i<fieldCount;i++) {
+      fieldIDs.add(i);
+    }
+
+    final Map<String,Document> docs = new HashMap<String,Document>();
+
+    if (VERBOSE) {
+      System.out.println("TEST: build index docCount=" + docCount);
+    }
+
+    FieldType customType2 = new FieldType();
+    customType2.setStored(true);
+    for(int i=0;i<docCount;i++) {
+      Document doc = new Document();
+      doc.add(idField);
+      final String id = ""+i;
+      idField.setValue(id);
+      docs.put(id, doc);
+      if (VERBOSE) {
+        System.out.println("TEST: add doc id=" + id);
+      }
+
+      for(int field: fieldIDs) {
+        final String s;
+        if (rand.nextInt(4) != 3) {
+          s = _TestUtil.randomUnicodeString(rand, 1000);
+          doc.add(newField("f"+field, s, customType2));
+        } else {
+          s = null;
+        }
+      }
+      w.addDocument(doc);
+      if (rand.nextInt(50) == 17) {
+        // mixup binding of field name -> Number every so often
+        Collections.shuffle(fieldIDs);
+      }
+      if (rand.nextInt(5) == 3 && i > 0) {
+        final String delID = ""+rand.nextInt(i);
+        if (VERBOSE) {
+          System.out.println("TEST: delete doc id=" + delID);
+        }
+        w.deleteDocuments(new Term("id", delID));
+        docs.remove(delID);
+      }
+    }
+
+    if (VERBOSE) {
+      System.out.println("TEST: " + docs.size() + " docs in index; now load fields");
+    }
+    if (docs.size() > 0) {
+      String[] idsList = docs.keySet().toArray(new String[docs.size()]);
+
+      for(int x=0;x<2;x++) {
+        IndexReader r = w.getReader();
+        IndexSearcher s = newSearcher(r);
+
+        if (VERBOSE) {
+          System.out.println("TEST: cycle x=" + x + " r=" + r);
+        }
+
+        int num = atLeast(1000);
+        for(int iter=0;iter<num;iter++) {
+          String testID = idsList[rand.nextInt(idsList.length)];
+          if (VERBOSE) {
+            System.out.println("TEST: test id=" + testID);
+          }
+          TopDocs hits = s.search(new TermQuery(new Term("id", testID)), 1);
+          assertEquals(1, hits.totalHits);
+          Document doc = r.document(hits.scoreDocs[0].doc);
+          Document docExp = docs.get(testID);
+          for(int i=0;i<fieldCount;i++) {
+            assertEquals("doc " + testID + ", field f" + fieldCount + " is wrong", docExp.get("f"+i),  doc.get("f"+i));
+          }
+        }
+        r.close();
+        w.forceMerge(1);
+      }
+    }
+    w.close();
+    dir.close();
+  }
+}

Property changes on: lucene/src/test/org/apache/lucene/index/TestRandomStoredFields.java
___________________________________________________________________
Added: svn:eol-style
## -0,0 +1 ##
+native
Index: lucene/src/test/org/apache/lucene/index/TestIndexWriter.java
===================================================================
--- lucene/src/test/org/apache/lucene/index/TestIndexWriter.java	(revision 1225817)
+++ lucene/src/test/org/apache/lucene/index/TestIndexWriter.java	(working copy)
@@ -416,7 +416,8 @@
     public void testDiverseDocs() throws IOException {
       MockDirectoryWrapper dir = newDirectory();
       IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setRAMBufferSizeMB(0.5));
-      for(int i=0;i<3;i++) {
+      int n = atLeast(1);
+      for(int i=0;i<n;i++) {
         // First, docs where every term is unique (heavy on
         // Posting instances)
         for(int j=0;j<100;j++) {
@@ -455,7 +456,7 @@
       IndexReader reader = IndexReader.open(dir);
       IndexSearcher searcher = new IndexSearcher(reader);
       ScoreDoc[] hits = searcher.search(new TermQuery(new Term("field", "aaa")), null, 1000).scoreDocs;
-      assertEquals(300, hits.length);
+      assertEquals(n*100, hits.length);
       reader.close();
 
       dir.close();
@@ -737,104 +738,6 @@
     dir.close();
   }
 
-  public void testNoWaitClose() throws Throwable {
-    Directory directory = newDirectory();
-
-    final Document doc = new Document();
-    FieldType customType = new FieldType(TextField.TYPE_STORED);
-    customType.setTokenized(false);
-
-    Field idField = newField("id", "", customType);
-    doc.add(idField);
-
-    for(int pass=0;pass<2;pass++) {
-      if (VERBOSE) {
-        System.out.println("TEST: pass=" + pass);
-      }
-
-      IndexWriterConfig conf =  newIndexWriterConfig(
-              TEST_VERSION_CURRENT, new MockAnalyzer(random)).
-              setOpenMode(OpenMode.CREATE).
-              setMaxBufferedDocs(2).
-              setMergePolicy(newLogMergePolicy());
-      if (pass == 2) {
-        conf.setMergeScheduler(new SerialMergeScheduler());
-      }
-
-      IndexWriter writer = new IndexWriter(directory, conf);
-      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);          
-
-      for(int iter=0;iter<10;iter++) {
-        if (VERBOSE) {
-          System.out.println("TEST: iter=" + iter);
-        }
-        for(int j=0;j<199;j++) {
-          idField.setValue(Integer.toString(iter*201+j));
-          writer.addDocument(doc);
-        }
-
-        int delID = iter*199;
-        for(int j=0;j<20;j++) {
-          writer.deleteDocuments(new Term("id", Integer.toString(delID)));
-          delID += 5;
-        }
-
-        // Force a bunch of merge threads to kick off so we
-        // stress out aborting them on close:
-        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);
-
-        final IndexWriter finalWriter = writer;
-        final ArrayList<Throwable> failure = new ArrayList<Throwable>();
-        Thread t1 = new Thread() {
-            @Override
-            public void run() {
-              boolean done = false;
-              while(!done) {
-                for(int i=0;i<100;i++) {
-                  try {
-                    finalWriter.addDocument(doc);
-                  } catch (AlreadyClosedException e) {
-                    done = true;
-                    break;
-                  } catch (NullPointerException e) {
-                    done = true;
-                    break;
-                  } catch (Throwable e) {
-                    e.printStackTrace(System.out);
-                    failure.add(e);
-                    done = true;
-                    break;
-                  }
-                }
-                Thread.yield();
-              }
-
-            }
-          };
-
-        if (failure.size() > 0) {
-          throw failure.get(0);
-        }
-
-        t1.start();
-
-        writer.close(false);
-        t1.join();
-
-        // Make sure reader can read
-        IndexReader reader = IndexReader.open(directory);
-        reader.close();
-
-        // Reopen
-        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));
-      }
-      writer.close();
-    }
-
-    directory.close();
-  }
-
-
   // LUCENE-1084: test unlimited field length
   public void testUnlimitedMaxFieldLength() throws IOException {
     Directory dir = newDirectory();
@@ -1613,102 +1516,6 @@
     dir.close();
   }
 
-  public void testRandomStoredFields() throws IOException {
-    Directory dir = newDirectory();
-    Random rand = random;
-    RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));
-    //w.w.setUseCompoundFile(false);
-    final int docCount = atLeast(200);
-    final int fieldCount = _TestUtil.nextInt(rand, 1, 5);
-
-    final List<Integer> fieldIDs = new ArrayList<Integer>();
-
-    FieldType customType = new FieldType(TextField.TYPE_STORED);
-    customType.setTokenized(false);
-    Field idField = newField("id", "", customType);
-
-    for(int i=0;i<fieldCount;i++) {
-      fieldIDs.add(i);
-    }
-
-    final Map<String,Document> docs = new HashMap<String,Document>();
-
-    if (VERBOSE) {
-      System.out.println("TEST: build index docCount=" + docCount);
-    }
-
-    FieldType customType2 = new FieldType();
-    customType2.setStored(true);
-    for(int i=0;i<docCount;i++) {
-      Document doc = new Document();
-      doc.add(idField);
-      final String id = ""+i;
-      idField.setValue(id);
-      docs.put(id, doc);
-      if (VERBOSE) {
-        System.out.println("TEST: add doc id=" + id);
-      }
-
-      for(int field: fieldIDs) {
-        final String s;
-        if (rand.nextInt(4) != 3) {
-          s = _TestUtil.randomUnicodeString(rand, 1000);
-          doc.add(newField("f"+field, s, customType2));
-        } else {
-          s = null;
-        }
-      }
-      w.addDocument(doc);
-      if (rand.nextInt(50) == 17) {
-        // mixup binding of field name -> Number every so often
-        Collections.shuffle(fieldIDs);
-      }
-      if (rand.nextInt(5) == 3 && i > 0) {
-        final String delID = ""+rand.nextInt(i);
-        if (VERBOSE) {
-          System.out.println("TEST: delete doc id=" + delID);
-        }
-        w.deleteDocuments(new Term("id", delID));
-        docs.remove(delID);
-      }
-    }
-
-    if (VERBOSE) {
-      System.out.println("TEST: " + docs.size() + " docs in index; now load fields");
-    }
-    if (docs.size() > 0) {
-      String[] idsList = docs.keySet().toArray(new String[docs.size()]);
-
-      for(int x=0;x<2;x++) {
-        IndexReader r = w.getReader();
-        IndexSearcher s = newSearcher(r);
-
-        if (VERBOSE) {
-          System.out.println("TEST: cycle x=" + x + " r=" + r);
-        }
-
-        int num = atLeast(1000);
-        for(int iter=0;iter<num;iter++) {
-          String testID = idsList[rand.nextInt(idsList.length)];
-          if (VERBOSE) {
-            System.out.println("TEST: test id=" + testID);
-          }
-          TopDocs hits = s.search(new TermQuery(new Term("id", testID)), 1);
-          assertEquals(1, hits.totalHits);
-          Document doc = r.document(hits.scoreDocs[0].doc);
-          Document docExp = docs.get(testID);
-          for(int i=0;i<fieldCount;i++) {
-            assertEquals("doc " + testID + ", field f" + fieldCount + " is wrong", docExp.get("f"+i),  doc.get("f"+i));
-          }
-        }
-        r.close();
-        w.forceMerge(1);
-      }
-    }
-    w.close();
-    dir.close();
-  }
-
   public void testNoUnwantedTVFiles() throws Exception {
 
     Directory dir = newDirectory();
@@ -1952,7 +1759,7 @@
     RandomIndexWriter w1 = new RandomIndexWriter(random, d);
     w1.deleteAll();
     try {
-      new RandomIndexWriter(random, d);
+      new RandomIndexWriter(random, d, newIndexWriterConfig(TEST_VERSION_CURRENT, null).setWriteLockTimeout(100));
       fail("should not be able to create another writer");
     } catch (LockObtainFailedException lofe) {
       // expected
Index: lucene/src/test/org/apache/lucene/util/fst/TestFSTs.java
===================================================================
--- lucene/src/test/org/apache/lucene/util/fst/TestFSTs.java	(revision 1225817)
+++ lucene/src/test/org/apache/lucene/util/fst/TestFSTs.java	(working copy)
@@ -1436,7 +1436,7 @@
       Field idField = newField("id", "", StringField.TYPE_UNSTORED);
       doc.add(idField);
       
-      final int NUM_IDS = (int) (1000*RANDOM_MULTIPLIER*(1.0+random.nextDouble()));
+      final int NUM_IDS = atLeast(200);
       //final int NUM_IDS = (int) (377 * (1.0+random.nextDouble()));
       if (VERBOSE) {
         System.out.println("TEST: NUM_IDS=" + NUM_IDS);
Index: lucene/src/test-framework/java/org/apache/lucene/analysis/MockTokenizer.java
===================================================================
--- lucene/src/test-framework/java/org/apache/lucene/analysis/MockTokenizer.java	(revision 1225817)
+++ lucene/src/test-framework/java/org/apache/lucene/analysis/MockTokenizer.java	(working copy)
@@ -48,9 +48,9 @@
   public static final CharacterRunAutomaton KEYWORD =
     new CharacterRunAutomaton(new RegExp(".*").toAutomaton());
   /** Acts like LetterTokenizer. */
-  // the ugly regex below is Unicode 5.2 [:Letter:]
+  // the ugly regex below is incomplete Unicode 5.2 [:Letter:]
   public static final CharacterRunAutomaton SIMPLE =
-    new CharacterRunAutomaton(new RegExp("[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԥԱ-Ֆՙա-ևא-תװ-ײء-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨऄ-हऽॐक़-ॡॱॲॹ-ॿঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-ళవ-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡഅ-ഌഎ-ഐഒ-നപ-ഹഽൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜໝༀཀ-ཇཉ-ཬྈ-ྋက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-Ⴥა-ჺჼᄀ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤜᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₔℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎↃↄⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⴀ-ⴥⴰ-ⵥⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々〆〱-〵〻〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆷㇰ-ㇿ㐀-䶵一-鿋ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙟꙢ-ꙮꙿ-ꚗꚠ-ꛥꜗ-ꜟꜢ-ꞈꞋꞌꟻ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꪀ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-鶴侮-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ𐀀-𐀋𐀍-𐀦𐀨-𐀺𐀼𐀽𐀿-𐁍𐁐-𐁝𐂀-𐃺𐊀-𐊜𐊠-𐋐𐌀-𐌞𐌰-𐍀𐍂-𐍉𐎀-𐎝𐎠-𐏃𐏈-𐏏𐐀-𐒝𐠀-𐠅𐠈𐠊-𐠵𐠷𐠸𐠼𐠿-𐡕𐤀-𐤕𐤠-𐤹𐨀𐨐-𐨓𐨕-𐨗𐨙-𐨳𐩠-𐩼𐬀-𐬵𐭀-𐭕𐭠-𐭲𐰀-𐱈𑂃-𑂯𒀀-𒍮𓀀-𓐮𝐀-𝑔𝑖-𝒜𝒞𝒟𝒢𝒥𝒦𝒩-𝒬𝒮-𝒹𝒻𝒽-𝓃𝓅-𝔅𝔇-𝔊𝔍-𝔔𝔖-𝔜𝔞-𝔹𝔻-𝔾𝕀-𝕄𝕆𝕊-𝕐𝕒-𝚥𝚨-𝛀𝛂-𝛚𝛜-𝛺𝛼-𝜔𝜖-𝜴𝜶-𝝎𝝐-𝝮𝝰-𝞈𝞊-𝞨𝞪-𝟂𝟄-𝟋𠀀-𪛖𪜀-𫜴丽-𪘀]+").toAutomaton());
+    new CharacterRunAutomaton(new RegExp("[A-Za-zªµºÀ-ÖØ-öø-Ｚ]+").toAutomaton());
 
   private final CharacterRunAutomaton runAutomaton;
   private final boolean lowerCase;
Index: lucene/src/test-framework/java/org/apache/lucene/search/CheckHits.java
===================================================================
--- lucene/src/test-framework/java/org/apache/lucene/search/CheckHits.java	(revision 1225817)
+++ lucene/src/test-framework/java/org/apache/lucene/search/CheckHits.java	(working copy)
@@ -28,6 +28,7 @@
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
 import org.apache.lucene.store.Directory;
+import org.apache.lucene.util.LuceneTestCase;
 
 public class CheckHits {
   
@@ -177,7 +178,7 @@
 
     Assert.assertEquals(query.toString(defaultFieldName), correct, actual);
 
-    QueryUtils.check(random, query,searcher);
+    QueryUtils.check(random, query,searcher, LuceneTestCase.rarely(random));
   }
 
   /** Tests that a Hits has an expected order of documents */
Index: lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils.java
===================================================================
--- lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils.java	(revision 1225817)
+++ lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils.java	(working copy)
@@ -105,7 +105,7 @@
   public static void check(Random random, Query q1, IndexSearcher s) {
     check(random, q1, s, true);
   }
-  private static void check(Random random, Query q1, IndexSearcher s, boolean wrap) {
+  public static void check(Random random, Query q1, IndexSearcher s, boolean wrap) {
     try {
       check(q1);
       if (s!=null) {
Index: lucene/src/test-framework/java/org/apache/lucene/store/MockDirectoryWrapper.java
===================================================================
--- lucene/src/test-framework/java/org/apache/lucene/store/MockDirectoryWrapper.java	(revision 1225817)
+++ lucene/src/test-framework/java/org/apache/lucene/store/MockDirectoryWrapper.java	(working copy)
@@ -156,7 +156,10 @@
     if (crashed)
       throw new IOException("cannot sync after crash");
     unSyncedFiles.removeAll(names);
-    delegate.sync(names);
+    if (LuceneTestCase.rarely(randomState) || delegate instanceof NRTCachingDirectory) {
+      // don't wear out our hardware so much in tests.
+      delegate.sync(names);
+    }
   }
   
   @Override
Index: lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase.java
===================================================================
--- lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase.java	(revision 1225817)
+++ lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase.java	(working copy)
@@ -686,7 +686,7 @@
     }
   }
 
-  private final static int THREAD_STOP_GRACE_MSEC = 50;
+  private final static int THREAD_STOP_GRACE_MSEC = 10;
   // jvm-wide list of 'rogue threads' we found, so they only get reported once.
   private final static IdentityHashMap<Thread,Boolean> rogueThreads = new IdentityHashMap<Thread,Boolean>();
 
@@ -898,10 +898,10 @@
     if (r.nextBoolean()) {
       if (rarely(r)) {
         // crazy value
-        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 7));
+        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 15));
       } else {
         // reasonable value
-        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 8, 1000));
+        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 16, 1000));
       }
     }
     if (r.nextBoolean()) {
@@ -914,15 +914,21 @@
       }
     }
     if (r.nextBoolean()) {
-      c.setIndexerThreadPool(new ThreadAffinityDocumentsWriterThreadPool(_TestUtil.nextInt(r, 1, 20)));
+      if (rarely(r)) {
+        // crazy value
+        c.setIndexerThreadPool(new ThreadAffinityDocumentsWriterThreadPool(_TestUtil.nextInt(r, 5, 20)));
+      } else {
+        // reasonable value
+        c.setIndexerThreadPool(new ThreadAffinityDocumentsWriterThreadPool(_TestUtil.nextInt(r, 1, 4)));
+      }
     }
 
-    if (r.nextBoolean()) {
+    if (rarely(r)) {
+      c.setMergePolicy(new MockRandomMergePolicy(r));
+    } else if (r.nextBoolean()) {
       c.setMergePolicy(newTieredMergePolicy());
-    } else if (r.nextBoolean()) {
+    } else {
       c.setMergePolicy(newLogMergePolicy());
-    } else {
-      c.setMergePolicy(new MockRandomMergePolicy(r));
     }
 
     c.setReaderPooling(r.nextBoolean());
@@ -943,9 +949,9 @@
     logmp.setUseCompoundFile(r.nextBoolean());
     logmp.setCalibrateSizeByDeletes(r.nextBoolean());
     if (rarely(r)) {
-      logmp.setMergeFactor(_TestUtil.nextInt(r, 2, 4));
+      logmp.setMergeFactor(_TestUtil.nextInt(r, 2, 9));
     } else {
-      logmp.setMergeFactor(_TestUtil.nextInt(r, 5, 50));
+      logmp.setMergeFactor(_TestUtil.nextInt(r, 10, 50));
     }
     return logmp;
   }
@@ -953,16 +959,24 @@
   public static TieredMergePolicy newTieredMergePolicy(Random r) {
     TieredMergePolicy tmp = new TieredMergePolicy();
     if (rarely(r)) {
-      tmp.setMaxMergeAtOnce(_TestUtil.nextInt(r, 2, 4));
-      tmp.setMaxMergeAtOnceExplicit(_TestUtil.nextInt(r, 2, 4));
+      tmp.setMaxMergeAtOnce(_TestUtil.nextInt(r, 2, 9));
+      tmp.setMaxMergeAtOnceExplicit(_TestUtil.nextInt(r, 2, 9));
     } else {
-      tmp.setMaxMergeAtOnce(_TestUtil.nextInt(r, 5, 50));
-      tmp.setMaxMergeAtOnceExplicit(_TestUtil.nextInt(r, 5, 50));
+      tmp.setMaxMergeAtOnce(_TestUtil.nextInt(r, 10, 50));
+      tmp.setMaxMergeAtOnceExplicit(_TestUtil.nextInt(r, 10, 50));
     }
-    tmp.setMaxMergedSegmentMB(0.2 + r.nextDouble() * 2.0);
+    if (rarely(r)) {
+      tmp.setMaxMergedSegmentMB(0.2 + r.nextDouble() * 2.0);
+    } else {
+      tmp.setMaxMergedSegmentMB(r.nextDouble() * 100);
+    }
     tmp.setFloorSegmentMB(0.2 + r.nextDouble() * 2.0);
     tmp.setForceMergeDeletesPctAllowed(0.0 + r.nextDouble() * 30.0);
-    tmp.setSegmentsPerTier(_TestUtil.nextInt(r, 2, 20));
+    if (rarely(r)) {
+      tmp.setSegmentsPerTier(_TestUtil.nextInt(r, 2, 20));
+    } else {
+      tmp.setSegmentsPerTier(_TestUtil.nextInt(r, 10, 50));
+    }
     tmp.setUseCompoundFile(r.nextBoolean());
     tmp.setNoCFSRatio(0.1 + r.nextDouble()*0.8);
     tmp.setReclaimDeletesWeight(r.nextDouble()*4);
@@ -1216,7 +1230,7 @@
    * with one that returns null for getSequentialSubReaders.
    */
   public static IndexSearcher newSearcher(IndexReader r, boolean maybeWrap) throws IOException {
-    if (random.nextBoolean()) {
+    if (usually()) {
       if (maybeWrap && rarely()) {
         r = new SlowMultiReaderWrapper(r);
       }
Index: lucene/build.xml
===================================================================
--- lucene/build.xml	(revision 1225817)
+++ lucene/build.xml	(working copy)
@@ -150,14 +150,10 @@
 
   <target name="junit-backwards-parallel" unless="tests.sequential">
     <parallel threadsPerProcessor="${tests.threadspercpu}">
-     <backwards-test-macro threadNum="1" threadTotal="8"/>
-     <backwards-test-macro threadNum="2" threadTotal="8"/>
-     <backwards-test-macro threadNum="3" threadTotal="8"/>
-     <backwards-test-macro threadNum="4" threadTotal="8"/>
-     <backwards-test-macro threadNum="5" threadTotal="8"/>
-     <backwards-test-macro threadNum="6" threadTotal="8"/>
-     <backwards-test-macro threadNum="7" threadTotal="8"/>
-     <backwards-test-macro threadNum="8" threadTotal="8"/>
+     <backwards-test-macro threadNum="1" threadTotal="4"/>
+     <backwards-test-macro threadNum="2" threadTotal="4"/>
+     <backwards-test-macro threadNum="3" threadTotal="4"/>
+     <backwards-test-macro threadNum="4" threadTotal="4"/>
     </parallel>
   </target>
 
