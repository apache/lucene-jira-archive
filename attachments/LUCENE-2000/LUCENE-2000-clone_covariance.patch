Index: modules/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.java
===================================================================
--- modules/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.java	(revision 1306595)
+++ modules/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.java	(working copy)
@@ -114,7 +114,7 @@
 
   /*(non-Javadoc) @see org.apache.lucene.search.Query#clone() */
   @Override
-  public Object clone() {
+  public CustomScoreQuery clone() {
     CustomScoreQuery clone = (CustomScoreQuery)super.clone();
     clone.subQuery = (Query) subQuery.clone();
     clone.scoringQueries = new Query[scoringQueries.length];
Index: modules/queryparser/src/java/org/apache/lucene/queryparser/surround/query/RewriteQuery.java
===================================================================
--- modules/queryparser/src/java/org/apache/lucene/queryparser/surround/query/RewriteQuery.java	(revision 1306595)
+++ modules/queryparser/src/java/org/apache/lucene/queryparser/surround/query/RewriteQuery.java	(working copy)
@@ -74,7 +74,7 @@
 
   /** @throws UnsupportedOperationException */
   @Override
-  public Object clone() {
+  public RewriteQuery clone() {
     throw new UnsupportedOperationException();
   }
 }
Index: modules/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SrndQuery.java
===================================================================
--- modules/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SrndQuery.java	(revision 1306595)
+++ modules/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SrndQuery.java	(working copy)
@@ -62,9 +62,9 @@
   public boolean isFieldsSubQueryAcceptable() {return true;}
     
   @Override
-  public Object clone() {
+  public SrndQuery clone() {
     try {
-      return super.clone();
+      return (SrndQuery)super.clone();
     } catch (CloneNotSupportedException cns) {
       throw new Error(cns);
     }
Index: modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl.java
===================================================================
--- modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl.java	(revision 1306595)
+++ modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl.java	(working copy)
@@ -131,7 +131,7 @@
   }
 
   @Override
-  public Object clone() throws CloneNotSupportedException {
+  public QueryNode clone() throws CloneNotSupportedException {
     return cloneTree();
   }
 
Index: modules/facet/src/test/org/apache/lucene/util/SlowRAMDirectory.java
===================================================================
--- modules/facet/src/test/org/apache/lucene/util/SlowRAMDirectory.java	(revision 1306595)
+++ modules/facet/src/test/org/apache/lucene/util/SlowRAMDirectory.java	(working copy)
@@ -107,7 +107,7 @@
       ii.readBytes(b, offset, len);
     }
     
-    @Override public Object clone() { return ii.clone(); }
+    @Override public IndexInput clone() { return (IndexInput)ii.clone(); }
     @Override public void close() throws IOException { ii.close(); }
     @Override public boolean equals(Object o) { return ii.equals(o); }
     @Override public long getFilePointer() { return ii.getFilePointer(); }
Index: modules/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest.java
===================================================================
--- modules/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest.java	(revision 1306595)
+++ modules/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest.java	(working copy)
@@ -114,9 +114,9 @@
   }
 
   @Override
-  public Object clone() throws CloneNotSupportedException {
+  public FacetRequest clone() throws CloneNotSupportedException {
     // Overridden to make it public
-    return super.clone();
+    return (FacetRequest)super.clone();
   }
   
   public void setNumLabel(int numLabel) {
Index: modules/facet/src/java/org/apache/lucene/facet/index/attributes/CategoryAttributeImpl.java
===================================================================
--- modules/facet/src/java/org/apache/lucene/facet/index/attributes/CategoryAttributeImpl.java	(revision 1306595)
+++ modules/facet/src/java/org/apache/lucene/facet/index/attributes/CategoryAttributeImpl.java	(working copy)
@@ -121,7 +121,7 @@
 
   @SuppressWarnings("unchecked")
   @Override
-  public CategoryAttribute clone() {
+  public CategoryAttributeImpl clone() {
     CategoryAttributeImpl ca = (CategoryAttributeImpl) super.clone();
     if (categoryPath != null) {
       ca.categoryPath = (CategoryPath) categoryPath.clone();
Index: modules/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath.java
===================================================================
--- modules/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath.java	(revision 1306595)
+++ modules/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath.java	(working copy)
@@ -622,7 +622,7 @@
   }
 
   @Override
-  public Object clone() {
+  public CategoryPath clone() {
     return new CategoryPath(this);
   }
 
Index: modules/analysis/common/src/java/org/apache/lucene/analysis/util/CharArrayIterator.java
===================================================================
--- modules/analysis/common/src/java/org/apache/lucene/analysis/util/CharArrayIterator.java	(revision 1306595)
+++ modules/analysis/common/src/java/org/apache/lucene/analysis/util/CharArrayIterator.java	(working copy)
@@ -113,9 +113,9 @@
   }
   
   @Override
-  public Object clone() {
+  public CharArrayIterator clone() {
     try {
-      return super.clone();
+      return (CharArrayIterator)super.clone();
     } catch (CloneNotSupportedException e) {
       // CharacterIterator does not allow you to throw CloneNotSupported
       throw new RuntimeException(e);
Index: modules/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/CharVector.java
===================================================================
--- modules/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/CharVector.java	(revision 1306595)
+++ modules/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/CharVector.java	(working copy)
@@ -80,7 +80,7 @@
   }
 
   @Override
-  public Object clone() {
+  public CharVector clone() {
     CharVector cv = new CharVector(array.clone(), blockSize);
     cv.n = this.n;
     return cv;
Index: modules/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree.java
===================================================================
--- modules/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree.java	(revision 1306595)
+++ modules/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree.java	(working copy)
@@ -348,7 +348,7 @@
   }
 
   @Override
-  public Object clone() {
+  public TernaryTree clone() {
     TernaryTree t = new TernaryTree();
     t.lo = this.lo.clone();
     t.hi = this.hi.clone();
@@ -484,7 +484,7 @@
       }
 
       @Override
-      public Object clone() {
+      public Item clone() {
         return new Item(parent, child);
       }
 
Index: modules/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorphosyntacticTagAttributeImpl.java
===================================================================
--- modules/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorphosyntacticTagAttributeImpl.java	(revision 1306595)
+++ modules/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorphosyntacticTagAttributeImpl.java	(working copy)
@@ -83,7 +83,7 @@
     ((MorphosyntacticTagAttribute) target).setTag(this.tag);
   }
 
-  public Object clone() {
+  public MorphosyntacticTagAttributeImpl clone() {
     MorphosyntacticTagAttributeImpl cloned = new MorphosyntacticTagAttributeImpl();
     cloned.tag = (tag == null ? null : tag.toString());
     return cloned;
Index: modules/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/CharArrayIterator.java
===================================================================
--- modules/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/CharArrayIterator.java	(revision 1306595)
+++ modules/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/CharArrayIterator.java	(working copy)
@@ -109,7 +109,7 @@
   }
 
   @Override
-  public Object clone() {
+  public CharArrayIterator clone() {
     CharArrayIterator clone = new CharArrayIterator();
     clone.setText(array, start, length);
     clone.index = index;
Index: modules/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/LaoBreakIterator.java
===================================================================
--- modules/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/LaoBreakIterator.java	(revision 1306595)
+++ modules/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/LaoBreakIterator.java	(working copy)
@@ -211,7 +211,7 @@
    * @return The clone.
    */
   @Override
-  public Object clone() {
+  public LaoBreakIterator clone() {
     LaoBreakIterator other = (LaoBreakIterator) super.clone();
     other.rules = (RuleBasedBreakIterator) rules.clone();
     other.verify = (RuleBasedBreakIterator) verify.clone();
Index: modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence.java
===================================================================
--- modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence.java	(revision 1306595)
+++ modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence.java	(working copy)
@@ -508,7 +508,7 @@
    * @see java.lang.Object#clone()
    */
   @Override
-  protected Object clone() throws CloneNotSupportedException {
+  protected TaskSequence clone() throws CloneNotSupportedException {
     TaskSequence res = (TaskSequence) super.clone();
     res.tasks = new ArrayList<PerfTask>();
     for (int i = 0; i < tasks.size(); i++) {
Index: modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PerfTask.java
===================================================================
--- modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PerfTask.java	(revision 1306595)
+++ modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PerfTask.java	(working copy)
@@ -111,10 +111,10 @@
   }
   
   @Override
-  protected Object clone() throws CloneNotSupportedException {
+  protected PerfTask clone() throws CloneNotSupportedException {
     // tasks having non primitive data structures should override this.
     // otherwise parallel running of a task sequence might not run correctly. 
-    return super.clone();
+    return (PerfTask)super.clone();
   }
 
   public void close() throws Exception {
Index: modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/stats/TaskStats.java
===================================================================
--- modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/stats/TaskStats.java	(revision 1306595)
+++ modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/stats/TaskStats.java	(working copy)
@@ -208,7 +208,7 @@
    * @see java.lang.Object#clone()
    */
   @Override
-  public Object clone() throws CloneNotSupportedException {
+  public TaskStats clone() throws CloneNotSupportedException {
     TaskStats c = (TaskStats) super.clone();
     if (c.countsByTime != null) {
       c.countsByTime = c.countsByTime.clone();
Index: modules/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.java
===================================================================
--- modules/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.java	(revision 1306595)
+++ modules/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.java	(working copy)
@@ -450,7 +450,7 @@
   }
 
   @Override
-  public Object clone() {
+  public ToParentBlockJoinQuery clone() {
     return new ToParentBlockJoinQuery((Query) origChildQuery.clone(),
                               parentsFilter,
                               scoreMode);
Index: modules/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.java
===================================================================
--- modules/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.java	(revision 1306595)
+++ modules/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.java	(working copy)
@@ -335,7 +335,7 @@
   }
 
   @Override
-  public Object clone() {
+  public ToChildBlockJoinQuery clone() {
     return new ToChildBlockJoinQuery((Query) origParentQuery.clone(),
                                      parentsFilter,
                                      doScores);
Index: lucene/core/src/test/org/apache/lucene/index/Test2BTerms.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/Test2BTerms.java	(revision 1306595)
+++ lucene/core/src/test/org/apache/lucene/index/Test2BTerms.java	(working copy)
@@ -117,7 +117,7 @@
       }
     
       @Override
-      public Object clone() {
+      public MyTermAttributeImpl clone() {
         throw new UnsupportedOperationException();
       }
     }
Index: lucene/core/src/test/org/apache/lucene/index/TestFieldsReader.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestFieldsReader.java	(revision 1306595)
+++ lucene/core/src/test/org/apache/lucene/index/TestFieldsReader.java	(working copy)
@@ -183,7 +183,7 @@
       delegate.close();
     }
     @Override
-    public Object clone() {
+    public FaultyIndexInput clone() {
       return new FaultyIndexInput((IndexInput) delegate.clone());
     }
   }
Index: lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping.java	(revision 1306595)
+++ lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping.java	(working copy)
@@ -225,7 +225,7 @@
           }
           
           @Override
-          public Object clone() {
+          public SeeksCountingStream clone() {
               return new SeeksCountingStream((IndexInput) this.input.clone());
           }
       
Index: lucene/core/src/test/org/apache/lucene/index/TestMultiLevelSkipList.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestMultiLevelSkipList.java	(revision 1306595)
+++ lucene/core/src/test/org/apache/lucene/index/TestMultiLevelSkipList.java	(working copy)
@@ -190,7 +190,7 @@
     }
 
     @Override
-    public Object clone() {
+    public CountingStream clone() {
       return new CountingStream((IndexInput) this.input.clone());
     }
 
Index: lucene/core/src/test/org/apache/lucene/util/TestDoubleBarrelLRUCache.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/util/TestDoubleBarrelLRUCache.java	(revision 1306595)
+++ lucene/core/src/test/org/apache/lucene/util/TestDoubleBarrelLRUCache.java	(working copy)
@@ -156,7 +156,7 @@
     }
 
     @Override
-    public Object clone() {
+    public CloneableObject clone() {
       return new CloneableObject(value);
     }
   }
@@ -179,7 +179,7 @@
     }
 
     @Override
-    public Object clone() {
+    public CloneableInteger clone() {
       return new CloneableInteger(value);
     }
   }
Index: lucene/core/src/java/org/apache/lucene/index/SegmentInfo.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/SegmentInfo.java	(revision 1306595)
+++ lucene/core/src/java/org/apache/lucene/index/SegmentInfo.java	(working copy)
@@ -252,7 +252,7 @@
   }
 
   @Override
-  public Object clone() {
+  public SegmentInfo clone() {
     final SegmentInfo si = new SegmentInfo(name, docCount, dir, isCompoundFile, codec,
         fieldInfos == null ? null : (FieldInfos) fieldInfos.clone());
     si.docStoreOffset = docStoreOffset;
Index: lucene/core/src/java/org/apache/lucene/index/TermState.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/TermState.java	(revision 1306595)
+++ lucene/core/src/java/org/apache/lucene/index/TermState.java	(working copy)
@@ -36,9 +36,9 @@
   public abstract void copyFrom(TermState other);
 
   @Override
-  public Object clone() {
+  public TermState clone() {
     try {
-      return super.clone();
+      return (TermState)super.clone();
     } catch (CloneNotSupportedException cnse) {
       // should not happen
       throw new RuntimeException(cnse);
Index: lucene/core/src/java/org/apache/lucene/index/FieldInfo.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/FieldInfo.java	(revision 1306595)
+++ lucene/core/src/java/org/apache/lucene/index/FieldInfo.java	(working copy)
@@ -87,7 +87,7 @@
   }
   
   @Override
-  public Object clone() {
+  public FieldInfo clone() {
     return new FieldInfo(name, isIndexed, number, storeTermVector,
                          omitNorms, storePayloads, indexOptions, docValueType, normType);
   }
Index: lucene/core/src/java/org/apache/lucene/index/SegmentInfos.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/SegmentInfos.java	(revision 1306595)
+++ lucene/core/src/java/org/apache/lucene/index/SegmentInfos.java	(working copy)
@@ -374,7 +374,7 @@
    */
   
   @Override
-  public Object clone() {
+  public SegmentInfos clone() {
     try {
       final SegmentInfos sis = (SegmentInfos) super.clone();
       // deep clone, first recreate all collections:
Index: lucene/core/src/java/org/apache/lucene/index/Payload.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/Payload.java	(revision 1306595)
+++ lucene/core/src/java/org/apache/lucene/index/Payload.java	(working copy)
@@ -155,7 +155,7 @@
    * byte array.
    */
   @Override
-  public Object clone() {
+  public Payload clone() {
     try {
       // Start with a shallow copy of data
       Payload clone = (Payload) super.clone();
Index: lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig.java	(revision 1306595)
+++ lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig.java	(working copy)
@@ -185,11 +185,11 @@
   }
 
   @Override
-  public Object clone() {
+  public IndexWriterConfig clone() {
     // Shallow clone is the only thing that's possible, since parameters like
     // analyzer, index commit etc. do not implement Cloneable.
     try {
-      return super.clone();
+      return (IndexWriterConfig)super.clone();
     } catch (CloneNotSupportedException e) {
       // should not happen
       throw new RuntimeException(e);
Index: lucene/core/src/java/org/apache/lucene/index/FieldInfos.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/FieldInfos.java	(revision 1306595)
+++ lucene/core/src/java/org/apache/lucene/index/FieldInfos.java	(working copy)
@@ -163,7 +163,7 @@
    * Returns a deep clone of this FieldInfos instance.
    */
   @Override
-  synchronized public Object clone() {
+  synchronized public FieldInfos clone() {
     FieldInfos fis = new FieldInfos(globalFieldNumbers);
     fis.hasFreq = hasFreq;
     fis.hasProx = hasProx;
Index: lucene/core/src/java/org/apache/lucene/util/AttributeSource.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/AttributeSource.java	(revision 1306595)
+++ lucene/core/src/java/org/apache/lucene/util/AttributeSource.java	(working copy)
@@ -101,12 +101,12 @@
     State next;
     
     @Override
-    public Object clone() {
+    public State clone() {
       State clone = new State();
-      clone.attribute = (AttributeImpl) attribute.clone();
+      clone.attribute = attribute.clone();
       
       if (next != null) {
-        clone.next = (State) next.clone();
+        clone.next = next.clone();
       }
       
       return clone;
Index: lucene/core/src/java/org/apache/lucene/util/AttributeImpl.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/AttributeImpl.java	(revision 1306595)
+++ lucene/core/src/java/org/apache/lucene/util/AttributeImpl.java	(working copy)
@@ -123,10 +123,10 @@
    * need to clone any members deeply,
    */
   @Override
-  public Object clone() {
-    Object clone = null;
+  public AttributeImpl clone() {
+    AttributeImpl clone = null;
     try {
-      clone = super.clone();
+      clone = (AttributeImpl)super.clone();
     } catch (CloneNotSupportedException e) {
       throw new RuntimeException(e);  // shouldn't happen
     }
Index: lucene/core/src/java/org/apache/lucene/util/DoubleBarrelLRUCache.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/DoubleBarrelLRUCache.java	(revision 1306595)
+++ lucene/core/src/java/org/apache/lucene/util/DoubleBarrelLRUCache.java	(working copy)
@@ -47,7 +47,7 @@
   /** Object providing clone(); the key class must subclass this. */
   public static abstract class CloneableKey {
     @Override
-    abstract public Object clone();
+    abstract public CloneableKey clone();
   }
 
   private final Map<K,V> cache1;
Index: lucene/core/src/java/org/apache/lucene/util/FixedBitSet.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/FixedBitSet.java	(revision 1306595)
+++ lucene/core/src/java/org/apache/lucene/util/FixedBitSet.java	(working copy)
@@ -389,7 +389,7 @@
   }
 
   @Override
-  public Object clone() {
+  public FixedBitSet clone() {
     return new FixedBitSet(this);
   }
 
Index: lucene/core/src/java/org/apache/lucene/util/PagedBytes.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/PagedBytes.java	(revision 1306595)
+++ lucene/core/src/java/org/apache/lucene/util/PagedBytes.java	(working copy)
@@ -415,7 +415,7 @@
     }
 
     @Override
-    public Object clone() {
+    public PagedBytesDataInput clone() {
       PagedBytesDataInput clone = getDataInput();
       clone.setPosition(getPosition());
       return clone;
Index: lucene/core/src/java/org/apache/lucene/util/OpenBitSet.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/OpenBitSet.java	(revision 1306595)
+++ lucene/core/src/java/org/apache/lucene/util/OpenBitSet.java	(working copy)
@@ -731,7 +731,7 @@
   }
 
   @Override
-  public Object clone() {
+  public OpenBitSet clone() {
     try {
       OpenBitSet obs = (OpenBitSet)super.clone();
       obs.bits = obs.bits.clone();  // hopefully an array clone is as fast(er) than arraycopy
Index: lucene/core/src/java/org/apache/lucene/analysis/Token.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/analysis/Token.java	(revision 1306595)
+++ lucene/core/src/java/org/apache/lucene/analysis/Token.java	(working copy)
@@ -366,7 +366,7 @@
   }
 
   @Override
-  public Object clone() {
+  public Token clone() {
     Token t = (Token)super.clone();
     // Do a deep clone
     if (payload != null) {
Index: lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/PayloadAttributeImpl.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/PayloadAttributeImpl.java	(revision 1306595)
+++ lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/PayloadAttributeImpl.java	(working copy)
@@ -58,7 +58,7 @@
   }
 
   @Override
-  public Object clone()  {
+  public PayloadAttributeImpl clone()  {
     PayloadAttributeImpl clone = (PayloadAttributeImpl) super.clone();
     if (payload != null) {
       clone.payload = (Payload) payload.clone();
Index: lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/CharTermAttributeImpl.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/CharTermAttributeImpl.java	(revision 1306595)
+++ lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/CharTermAttributeImpl.java	(working copy)
@@ -208,7 +208,7 @@
   }
 
   @Override
-  public Object clone() {
+  public CharTermAttributeImpl clone() {
     CharTermAttributeImpl t = (CharTermAttributeImpl)super.clone();
     // Do a deep clone
     t.termBuffer = new char[this.termLength];
Index: lucene/core/src/java/org/apache/lucene/store/MMapDirectory.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/store/MMapDirectory.java	(revision 1306595)
+++ lucene/core/src/java/org/apache/lucene/store/MMapDirectory.java	(working copy)
@@ -412,7 +412,7 @@
     }
   
     @Override
-    public Object clone() {
+    public MMapIndexInput clone() {
       if (buffers == null) {
         throw new AlreadyClosedException("MMapIndexInput already closed: " + this);
       }
Index: lucene/core/src/java/org/apache/lucene/store/Directory.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/store/Directory.java	(revision 1306595)
+++ lucene/core/src/java/org/apache/lucene/store/Directory.java	(working copy)
@@ -284,7 +284,7 @@
     }
     
     @Override
-    public Object clone() {
+    public SlicedIndexInput clone() {
       SlicedIndexInput clone = (SlicedIndexInput)super.clone();
       clone.base = (IndexInput)base.clone();
       clone.fileOffset = fileOffset;
Index: lucene/core/src/java/org/apache/lucene/store/BufferedIndexInput.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/store/BufferedIndexInput.java	(revision 1306595)
+++ lucene/core/src/java/org/apache/lucene/store/BufferedIndexInput.java	(working copy)
@@ -306,7 +306,7 @@
   protected abstract void seekInternal(long pos) throws IOException;
 
   @Override
-  public Object clone() {
+  public BufferedIndexInput clone() {
     BufferedIndexInput clone = (BufferedIndexInput)super.clone();
 
     clone.buffer = null;
Index: lucene/core/src/java/org/apache/lucene/store/SimpleFSDirectory.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/store/SimpleFSDirectory.java	(revision 1306595)
+++ lucene/core/src/java/org/apache/lucene/store/SimpleFSDirectory.java	(working copy)
@@ -193,7 +193,7 @@
     }
   
     @Override
-    public Object clone() {
+    public SimpleFSIndexInput clone() {
       SimpleFSIndexInput clone = (SimpleFSIndexInput)super.clone();
       clone.isClone = true;
       return clone;
Index: lucene/core/src/java/org/apache/lucene/store/DataInput.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/store/DataInput.java	(revision 1306595)
+++ lucene/core/src/java/org/apache/lucene/store/DataInput.java	(working copy)
@@ -184,7 +184,7 @@
    * were cloned from.
    */
   @Override
-  public Object clone() {
+  public DataInput clone() {
     DataInput clone = null;
     try {
       clone = (DataInput)super.clone();
Index: lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.java	(revision 1306595)
+++ lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.java	(working copy)
@@ -105,7 +105,7 @@
     byte[] bytes;
 
     @Override
-    public Object clone() {
+    public StandardTermState clone() {
       StandardTermState other = new StandardTermState();
       other.copyFrom(this);
       return other;
Index: lucene/core/src/java/org/apache/lucene/codecs/lucene3x/TermInfosReader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/lucene3x/TermInfosReader.java	(revision 1306595)
+++ lucene/core/src/java/org/apache/lucene/codecs/lucene3x/TermInfosReader.java	(working copy)
@@ -82,7 +82,7 @@
     }
 
     @Override
-    public Object clone() {
+    public CloneableTerm clone() {
       return new CloneableTerm(term);
     }
   }
Index: lucene/core/src/java/org/apache/lucene/codecs/lucene3x/TermBuffer.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/lucene3x/TermBuffer.java	(revision 1306595)
+++ lucene/core/src/java/org/apache/lucene/codecs/lucene3x/TermBuffer.java	(working copy)
@@ -111,7 +111,7 @@
   }
 
   @Override
-  protected Object clone() {
+  protected TermBuffer clone() {
     TermBuffer clone = null;
     try {
       clone = (TermBuffer)super.clone();
Index: lucene/core/src/java/org/apache/lucene/codecs/lucene3x/SegmentTermEnum.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/lucene3x/SegmentTermEnum.java	(revision 1306595)
+++ lucene/core/src/java/org/apache/lucene/codecs/lucene3x/SegmentTermEnum.java	(working copy)
@@ -100,7 +100,7 @@
   }
 
   @Override
-  protected Object clone() {
+  protected SegmentTermEnum clone() {
     SegmentTermEnum clone = null;
     try {
       clone = (SegmentTermEnum) super.clone();
Index: lucene/core/src/java/org/apache/lucene/codecs/sep/SepPostingsReader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/sep/SepPostingsReader.java	(revision 1306595)
+++ lucene/core/src/java/org/apache/lucene/codecs/sep/SepPostingsReader.java	(working copy)
@@ -161,7 +161,7 @@
     ByteArrayDataInput bytesReader;
 
     @Override
-    public Object clone() {
+    public SepTermState clone() {
       SepTermState other = new SepTermState();
       other.copyFrom(this);
       return other;
Index: lucene/core/src/java/org/apache/lucene/codecs/sep/IntIndexInput.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/sep/IntIndexInput.java	(revision 1306595)
+++ lucene/core/src/java/org/apache/lucene/codecs/sep/IntIndexInput.java	(working copy)
@@ -47,7 +47,7 @@
     public abstract void set(Index other);
     
     @Override
-    public abstract Object clone();
+    public abstract Index clone();
   }
 
   public abstract static class Reader {
Index: lucene/core/src/java/org/apache/lucene/codecs/BlockTermsReader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/BlockTermsReader.java	(revision 1306595)
+++ lucene/core/src/java/org/apache/lucene/codecs/BlockTermsReader.java	(working copy)
@@ -95,7 +95,7 @@
     }
 
     @Override
-    public Object clone() {
+    public FieldAndTerm clone() {
       return new FieldAndTerm(this);
     }
 
Index: lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader.java	(revision 1306595)
+++ lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader.java	(working copy)
@@ -73,7 +73,7 @@
     private byte[] inlinedBytes;
 
     @Override
-    public Object clone() {
+    public PulsingTermState clone() {
       PulsingTermState clone;
       clone = (PulsingTermState) super.clone();
       if (postingsSize != -1) {
Index: lucene/core/src/java/org/apache/lucene/codecs/intblock/FixedIntBlockIndexInput.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/intblock/FixedIntBlockIndexInput.java	(revision 1306595)
+++ lucene/core/src/java/org/apache/lucene/codecs/intblock/FixedIntBlockIndexInput.java	(working copy)
@@ -181,7 +181,7 @@
     }
 
     @Override
-    public Object clone() {
+    public Index clone() {
       Index other = new Index();
       other.fp = fp;
       other.upto = upto;
Index: lucene/core/src/java/org/apache/lucene/codecs/intblock/VariableIntBlockIndexInput.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/intblock/VariableIntBlockIndexInput.java	(revision 1306595)
+++ lucene/core/src/java/org/apache/lucene/codecs/intblock/VariableIntBlockIndexInput.java	(working copy)
@@ -207,7 +207,7 @@
     }
 
     @Override
-    public Object clone() {
+    public Index clone() {
       Index other = new Index();
       other.fp = fp;
       other.upto = upto;
Index: lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.java	(revision 1306595)
+++ lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.java	(working copy)
@@ -76,7 +76,7 @@
   }
 
   @Override
-  public Object clone() {
+  public PayloadNearQuery clone() {
     int sz = clauses.size();
     SpanQuery[] newClauses = new SpanQuery[sz];
 
Index: lucene/core/src/java/org/apache/lucene/search/spans/SpanPositionRangeQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/spans/SpanPositionRangeQuery.java	(revision 1306595)
+++ lucene/core/src/java/org/apache/lucene/search/spans/SpanPositionRangeQuery.java	(working copy)
@@ -77,7 +77,7 @@
   }
 
   @Override
-  public Object clone() {
+  public SpanPositionRangeQuery clone() {
     SpanPositionRangeQuery result = new SpanPositionRangeQuery((SpanQuery) match.clone(), start, end);
     result.setBoost(getBoost());
     return result;
Index: lucene/core/src/java/org/apache/lucene/search/spans/SpanPayloadCheckQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/spans/SpanPayloadCheckQuery.java	(revision 1306595)
+++ lucene/core/src/java/org/apache/lucene/search/spans/SpanPayloadCheckQuery.java	(working copy)
@@ -90,7 +90,7 @@
   }
 
   @Override
-  public Object clone() {
+  public SpanPayloadCheckQuery clone() {
     SpanPayloadCheckQuery result = new SpanPayloadCheckQuery((SpanQuery) match.clone(), payloadToMatch);
     result.setBoost(getBoost());
     return result;
Index: lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery.java	(revision 1306595)
+++ lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery.java	(working copy)
@@ -76,7 +76,7 @@
   }
   
   @Override
-  public Object clone() {
+  public SpanOrQuery clone() {
     int sz = clauses.size();
     SpanQuery[] newClauses = new SpanQuery[sz];
 
Index: lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery.java	(revision 1306595)
+++ lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery.java	(working copy)
@@ -152,7 +152,7 @@
   }
   
   @Override
-  public Object clone() {
+  public SpanNearQuery clone() {
     int sz = clauses.size();
     SpanQuery[] newClauses = new SpanQuery[sz];
 
Index: lucene/core/src/java/org/apache/lucene/search/spans/SpanFirstQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/spans/SpanFirstQuery.java	(revision 1306595)
+++ lucene/core/src/java/org/apache/lucene/search/spans/SpanFirstQuery.java	(working copy)
@@ -61,7 +61,7 @@
   }
 
   @Override
-  public Object clone() {
+  public SpanFirstQuery clone() {
     SpanFirstQuery spanFirstQuery = new SpanFirstQuery((SpanQuery) match.clone(), end);
     spanFirstQuery.setBoost(getBoost());
     return spanFirstQuery;
Index: lucene/core/src/java/org/apache/lucene/search/spans/SpanNearPayloadCheckQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/spans/SpanNearPayloadCheckQuery.java	(revision 1306595)
+++ lucene/core/src/java/org/apache/lucene/search/spans/SpanNearPayloadCheckQuery.java	(working copy)
@@ -88,7 +88,7 @@
   }
 
   @Override
-  public Object clone() {
+  public SpanNearPayloadCheckQuery clone() {
     SpanNearPayloadCheckQuery result = new SpanNearPayloadCheckQuery((SpanNearQuery) match.clone(), payloadToMatch);
     result.setBoost(getBoost());
     return result;
Index: lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery.java	(revision 1306595)
+++ lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery.java	(working copy)
@@ -71,7 +71,7 @@
   }
 
   @Override
-  public Object clone() {
+  public SpanNotQuery clone() {
     SpanNotQuery spanNotQuery = new SpanNotQuery((SpanQuery)include.clone(),(SpanQuery) exclude.clone());
     spanNotQuery.setBoost(getBoost());
     return  spanNotQuery;
Index: lucene/core/src/java/org/apache/lucene/search/Query.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/Query.java	(revision 1306595)
+++ lucene/core/src/java/org/apache/lucene/search/Query.java	(working copy)
@@ -97,9 +97,9 @@
 
   /** Returns a clone of this query. */
   @Override
-  public Object clone() {
+  public Query clone() {
     try {
-      return super.clone();
+      return (Query)super.clone();
     } catch (CloneNotSupportedException e) {
       throw new RuntimeException("Clone not supported: " + e.getMessage());
     }
Index: lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.java	(revision 1306595)
+++ lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.java	(working copy)
@@ -211,7 +211,7 @@
   /** Create a shallow copy of us -- used in rewriting if necessary
    * @return a copy of us (but reuse, don't copy, our subqueries) */
   @Override @SuppressWarnings("unchecked")
-  public Object clone() {
+  public DisjunctionMaxQuery clone() {
     DisjunctionMaxQuery clone = (DisjunctionMaxQuery)super.clone();
     clone.disjuncts = (ArrayList<Query>) this.disjuncts.clone();
     return clone;
Index: lucene/core/src/java/org/apache/lucene/search/BooleanQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/BooleanQuery.java	(revision 1306595)
+++ lucene/core/src/java/org/apache/lucene/search/BooleanQuery.java	(working copy)
@@ -474,7 +474,7 @@
   }
 
   @Override @SuppressWarnings("unchecked")
-  public Object clone() {
+  public BooleanQuery clone() {
     BooleanQuery clone = (BooleanQuery)super.clone();
     clone.clauses = (ArrayList<BooleanClause>) this.clauses.clone();
     return clone;
Index: lucene/contrib/misc/src/java/org/apache/lucene/store/WindowsDirectory.java
===================================================================
--- lucene/contrib/misc/src/java/org/apache/lucene/store/WindowsDirectory.java	(revision 1306595)
+++ lucene/contrib/misc/src/java/org/apache/lucene/store/WindowsDirectory.java	(working copy)
@@ -120,7 +120,7 @@
     }
     
     @Override
-    public Object clone() {
+    public WindowsIndexInput clone() {
       WindowsIndexInput clone = (WindowsIndexInput)super.clone();
       clone.isClone = true;
       return clone;
Index: lucene/contrib/misc/src/java/org/apache/lucene/store/NativeUnixDirectory.java
===================================================================
--- lucene/contrib/misc/src/java/org/apache/lucene/store/NativeUnixDirectory.java	(revision 1306595)
+++ lucene/contrib/misc/src/java/org/apache/lucene/store/NativeUnixDirectory.java	(working copy)
@@ -424,7 +424,7 @@
     }
 
     @Override
-    public Object clone() {
+    public NativeUnixIndexInput clone() {
       try {
         return new NativeUnixIndexInput(this);
       } catch (IOException ioe) {
Index: lucene/test-framework/src/java/org/apache/lucene/codecs/mocksep/MockSingleIntIndexInput.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/codecs/mocksep/MockSingleIntIndexInput.java	(revision 1306595)
+++ lucene/test-framework/src/java/org/apache/lucene/codecs/mocksep/MockSingleIntIndexInput.java	(working copy)
@@ -99,7 +99,7 @@
     }
 
     @Override
-    public Object clone() {
+    public Index clone() {
       Index other = new Index();
       other.fp = fp;
       return other;
Index: lucene/test-framework/src/java/org/apache/lucene/store/MockIndexInputWrapper.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/store/MockIndexInputWrapper.java	(revision 1306595)
+++ lucene/test-framework/src/java/org/apache/lucene/store/MockIndexInputWrapper.java	(working copy)
@@ -65,7 +65,7 @@
   }
 
   @Override
-  public Object clone() {
+  public MockIndexInputWrapper clone() {
     ensureOpen();
     dir.inputCloneCount.incrementAndGet();
     IndexInput iiclone = (IndexInput) delegate.clone();
Index: solr/core/src/java/org/apache/solr/schema/DateField.java
===================================================================
--- solr/core/src/java/org/apache/solr/schema/DateField.java	(revision 1306595)
+++ solr/core/src/java/org/apache/solr/schema/DateField.java	(working copy)
@@ -401,7 +401,7 @@
     }
 
     @Override
-    public Object clone() {
+    public DateFormat clone() {
       ISO8601CanonicalDateFormat c
         = (ISO8601CanonicalDateFormat) super.clone();
       c.millisParser = NumberFormat.getIntegerInstance(CANONICAL_LOCALE);
Index: solr/core/src/java/org/apache/solr/search/WrappedQuery.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/WrappedQuery.java	(revision 1306595)
+++ solr/core/src/java/org/apache/solr/search/WrappedQuery.java	(working copy)
@@ -69,7 +69,7 @@
   }
 
   @Override
-  public Object clone() {
+  public WrappedQuery clone() {
     WrappedQuery newQ = (WrappedQuery)super.clone();
     newQ.q = (Query) q.clone();
     return newQ;
