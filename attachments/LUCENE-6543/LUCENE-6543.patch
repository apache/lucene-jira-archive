Index: lucene/core/src/java/org/apache/lucene/search/BitsFilteredDocIdSetIterator.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/BitsFilteredDocIdSetIterator.java	(revision 0)
+++ lucene/core/src/java/org/apache/lucene/search/BitsFilteredDocIdSetIterator.java	(working copy)
@@ -0,0 +1,54 @@
+package org.apache.lucene.search;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.util.Objects;
+
+import org.apache.lucene.util.Bits;
+
+/**
+ * {@link FilteredDocIdSetIterator} that filters based on some {@link Bits}.
+ * @lucene.internal
+ */
+public class BitsFilteredDocIdSetIterator extends FilteredDocIdSetIterator {
+
+  /**
+   * If the {@code iterator} or {@code acceptDocs} are null, then this will
+   * return {@code iterator}, and otherwise return an iterator that only
+   * iterates over documents from the passed {@code iterator} that also match
+   * the provided {@code acceptDocs}.
+   */
+  public static DocIdSetIterator wrap(DocIdSetIterator iterator, Bits acceptDocs) {
+    return (iterator == null || acceptDocs == null)
+        ? iterator
+        : new BitsFilteredDocIdSetIterator(iterator, acceptDocs);
+  }
+
+  private final Bits acceptDocs;
+
+  private BitsFilteredDocIdSetIterator(DocIdSetIterator innerIter, Bits acceptDocs) {
+    super(innerIter);
+    this.acceptDocs = Objects.requireNonNull(acceptDocs, "Bits must not be null");
+  }
+
+  @Override
+  protected boolean match(int doc) {
+    return acceptDocs.get(doc);
+  }
+
+}

Property changes on: lucene/core/src/java/org/apache/lucene/search/BitsFilteredDocIdSetIterator.java
___________________________________________________________________
Added: svn:eol-style
## -0,0 +1 ##
+native
\ No newline at end of property
Index: lucene/core/src/java/org/apache/lucene/search/CachingWrapperQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/CachingWrapperQuery.java	(revision 1684624)
+++ lucene/core/src/java/org/apache/lucene/search/CachingWrapperQuery.java	(working copy)
@@ -148,26 +148,11 @@
         if (docIdSet == DocIdSet.EMPTY) {
           return null;
         }
-        final DocIdSetIterator disi = docIdSet.iterator();
+        final DocIdSetIterator disi = BitsFilteredDocIdSetIterator.wrap(docIdSet.iterator(), acceptDocs);
         if (disi == null) {
           return null;
         }
-
-        // We apply acceptDocs as an approximation
-        if (acceptDocs == null) {
-          return new ConstantScoreScorer(this, 0f, disi);
-        } else {
-          final TwoPhaseIterator twoPhaseView = new TwoPhaseIterator(disi) {
-
-            @Override
-            public boolean matches() throws IOException {
-              final int doc = approximation.docID();
-              return acceptDocs.get(doc);
-            }
-
-          };
-          return new ConstantScoreScorer(this, 0f, twoPhaseView);
-        }
+        return new ConstantScoreScorer(this, 0f, disi);
       }
     };
   }
Index: lucene/core/src/java/org/apache/lucene/search/FilteredDocIdSetIterator.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/FilteredDocIdSetIterator.java	(revision 1684624)
+++ lucene/core/src/java/org/apache/lucene/search/FilteredDocIdSetIterator.java	(working copy)
@@ -27,7 +27,6 @@
  */
 public abstract class FilteredDocIdSetIterator extends DocIdSetIterator {
   protected DocIdSetIterator _innerIter;
-  private int doc;
 
   /**
    * Constructor.
@@ -38,7 +37,6 @@
       throw new IllegalArgumentException("null iterator");
     }
     _innerIter = innerIter;
-    doc = -1;
   }
 
   /** Return the wrapped {@link DocIdSetIterator}. */
@@ -56,35 +54,26 @@
 
   @Override
   public int docID() {
-    return doc;
+    return _innerIter.docID();
   }
-  
-  @Override
-  public int nextDoc() throws IOException {
-    while ((doc = _innerIter.nextDoc()) != NO_MORE_DOCS) {
+
+  private int doNext(int doc) throws IOException {
+    for (; doc != NO_MORE_DOCS; doc = _innerIter.nextDoc()) {
       if (match(doc)) {
-        return doc;
+        break;
       }
     }
     return doc;
   }
-  
+
   @Override
+  public int nextDoc() throws IOException {
+    return doNext(_innerIter.nextDoc());
+  }
+
+  @Override
   public int advance(int target) throws IOException {
-    doc = _innerIter.advance(target);
-    if (doc != NO_MORE_DOCS) {
-      if (match(doc)) {
-        return doc;
-      } else {
-        while ((doc = _innerIter.nextDoc()) != NO_MORE_DOCS) {
-          if (match(doc)) {
-            return doc;
-          }
-        }
-        return doc;
-      }
-    }
-    return doc;
+    return doNext(_innerIter.advance(target));
   }
 
   @Override
Index: lucene/core/src/java/org/apache/lucene/search/LRUQueryCache.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/LRUQueryCache.java	(revision 1684624)
+++ lucene/core/src/java/org/apache/lucene/search/LRUQueryCache.java	(working copy)
@@ -590,24 +590,11 @@
       if (docIdSet == DocIdSet.EMPTY) {
         return null;
       }
-      final DocIdSetIterator disi = docIdSet.iterator();
+      final DocIdSetIterator disi = BitsFilteredDocIdSetIterator.wrap(docIdSet.iterator(), acceptDocs);
       if (disi == null) {
         return null;
       }
-
-      // we apply acceptDocs as an approximation
-      if (acceptDocs == null) {
-        return new ConstantScoreScorer(this, 0f, disi);
-      } else {
-        final TwoPhaseIterator twoPhaseView = new TwoPhaseIterator(disi) {
-          @Override
-          public boolean matches() throws IOException {
-            final int doc = approximation.docID();
-            return acceptDocs.get(doc);
-          }
-        };
-        return new ConstantScoreScorer(this, 0f, twoPhaseView);
-      }
+      return new ConstantScoreScorer(this, 0f, disi);
     }
 
   }
