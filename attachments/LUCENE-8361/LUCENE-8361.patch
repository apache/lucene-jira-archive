diff --git a/lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.java b/lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.java
index c936a35952..c823a40d36 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.java
@@ -742,12 +742,17 @@ public abstract class BaseTokenStreamTestCase extends LuceneTestCase {
     List<Integer> endOffsets = new ArrayList<>();
     ts.reset();
 
+    int totalPositions = 0;
+
     // First pass: save away "correct" tokens
     while (ts.incrementToken()) {
       assertNotNull("has no CharTermAttribute", termAtt);
       tokens.add(termAtt.toString());
       if (typeAtt != null) types.add(typeAtt.type());
-      if (posIncAtt != null) positions.add(posIncAtt.getPositionIncrement());
+      if (posIncAtt != null) {
+        positions.add(posIncAtt.getPositionIncrement());
+        totalPositions += posIncAtt.getPositionIncrement();
+      }
       if (posLengthAtt != null) positionLengths.add(posLengthAtt.getPositionLength());
       if (offsetAtt != null) {
         startOffsets.add(offsetAtt.startOffset());
@@ -755,8 +760,32 @@ public abstract class BaseTokenStreamTestCase extends LuceneTestCase {
       }
     }
     ts.end();
+    if (posIncAtt != null) {
+      totalPositions += posIncAtt.getPositionIncrement();
+    }
     ts.close();
 
+    // check that the total position increment from the tokenstream is equal to the
+    // total position increment from the tokenstream's Tokenizer
+    if (posIncAtt != null) {
+      reader = new StringReader(text);
+      TokenStream stream = a.tokenStream("dummy", useCharFilter ? new MockCharFilter(reader, remainder) : reader);
+      while (stream instanceof TokenFilter) {
+        stream = ((TokenFilter)stream).input;
+      }
+      Tokenizer tok = (Tokenizer) stream;
+      int tokPositions = 0;
+      PositionIncrementAttribute tokPosIncAtt = tok.addAttribute(PositionIncrementAttribute.class);
+      tok.reset();
+      while (tok.incrementToken()) {
+        tokPositions += tokPosIncAtt.getPositionIncrement();
+      }
+      tok.end();
+      tokPositions += tokPosIncAtt.getPositionIncrement();
+      assertEquals("PositionIncrement from Tokenizer does not equal PositionIncrement from TokenStream", tokPositions, totalPositions);
+      tok.close();
+    }
+
     // verify reusing is "reproducable" and also get the normal tokenstream sanity checks
     if (!tokens.isEmpty()) {
 
