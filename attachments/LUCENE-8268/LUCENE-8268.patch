diff --git a/lucene/core/src/java/org/apache/lucene/search/DisjunctionMatchesIterator.java b/lucene/core/src/java/org/apache/lucene/search/DisjunctionMatchesIterator.java
index a18b280e37..e8c9078688 100644
--- a/lucene/core/src/java/org/apache/lucene/search/DisjunctionMatchesIterator.java
+++ b/lucene/core/src/java/org/apache/lucene/search/DisjunctionMatchesIterator.java
@@ -45,14 +45,14 @@ final class DisjunctionMatchesIterator implements MatchesIterator {
    *
    * Only terms that have at least one match in the given document will be included
    */
-  static MatchesIterator fromTerms(LeafReaderContext context, int doc, String field, List<Term> terms) throws IOException {
+  static MatchesIterator fromTerms(LeafReaderContext context, int doc, Query leafQuery, String field, List<Term> terms) throws IOException {
     Objects.requireNonNull(field);
     for (Term term : terms) {
       if (Objects.equals(field, term.field()) == false) {
         throw new IllegalArgumentException("Tried to generate iterator from terms in multiple fields: expected [" + field + "] but got [" + term.field() + "]");
       }
     }
-    return fromTermsEnum(context, doc, field, asBytesRefIterator(terms));
+    return fromTermsEnum(context, doc, leafQuery, field, asBytesRefIterator(terms));
   }
 
   private static BytesRefIterator asBytesRefIterator(List<Term> terms) {
@@ -72,7 +72,7 @@ final class DisjunctionMatchesIterator implements MatchesIterator {
    *
    * Only terms that have at least one match in the given document will be included
    */
-  static MatchesIterator fromTermsEnum(LeafReaderContext context, int doc, String field, BytesRefIterator terms) throws IOException {
+  static MatchesIterator fromTermsEnum(LeafReaderContext context, int doc, Query leafQuery, String field, BytesRefIterator terms) throws IOException {
     Objects.requireNonNull(field);
     List<MatchesIterator> mis = new ArrayList<>();
     Terms t = context.reader().terms(field);
@@ -84,8 +84,7 @@ final class DisjunctionMatchesIterator implements MatchesIterator {
       if (te.seekExact(term)) {
         PostingsEnum pe = te.postings(reuse, PostingsEnum.OFFSETS);
         if (pe.advance(doc) == doc) {
-          // TODO do we want to use the copied term here, or instead create a label that associates all of the TMIs with a single term?
-          mis.add(new TermMatchesIterator(BytesRef.deepCopyOf(term), pe));
+          mis.add(new TermMatchesIterator(leafQuery, pe));
           reuse = null;
         }
         else {
@@ -114,7 +113,7 @@ final class DisjunctionMatchesIterator implements MatchesIterator {
       protected boolean lessThan(MatchesIterator a, MatchesIterator b) {
         return a.startPosition() < b.startPosition() ||
             (a.startPosition() == b.startPosition() && a.endPosition() < b.endPosition()) ||
-            (a.startPosition() == b.startPosition() && a.endPosition() == b.endPosition() && a.term().compareTo(b.term()) < 0);
+            (a.startPosition() == b.startPosition() && a.endPosition() == b.endPosition() && a.getLeafQuery().hashCode() < b.getLeafQuery().hashCode());
       }
     };
     for (MatchesIterator mi : matches) {
@@ -160,8 +159,8 @@ final class DisjunctionMatchesIterator implements MatchesIterator {
   }
 
   @Override
-  public BytesRef term() {
-    return queue.top().term();
+  public Query getLeafQuery() {
+    return queue.top().getLeafQuery();
   }
 
 }
diff --git a/lucene/core/src/java/org/apache/lucene/search/DocValuesRewriteMethod.java b/lucene/core/src/java/org/apache/lucene/search/DocValuesRewriteMethod.java
index 99720b7e58..fe6d551a00 100644
--- a/lucene/core/src/java/org/apache/lucene/search/DocValuesRewriteMethod.java
+++ b/lucene/core/src/java/org/apache/lucene/search/DocValuesRewriteMethod.java
@@ -78,7 +78,7 @@ public final class DocValuesRewriteMethod extends MultiTermQuery.RewriteMethod {
         @Override
         public Matches matches(LeafReaderContext context, int doc) throws IOException {
           final SortedSetDocValues fcsi = DocValues.getSortedSet(context.reader(), query.field);
-          return Matches.forField(query.field, () -> DisjunctionMatchesIterator.fromTermsEnum(context, doc, query.field, getTermsEnum(fcsi)));
+          return Matches.forField(query.field, () -> DisjunctionMatchesIterator.fromTermsEnum(context, doc, query, query.field, getTermsEnum(fcsi)));
         }
 
         private TermsEnum getTermsEnum(SortedSetDocValues fcsi) throws IOException {
diff --git a/lucene/core/src/java/org/apache/lucene/search/MatchesIterator.java b/lucene/core/src/java/org/apache/lucene/search/MatchesIterator.java
index d695ea59f6..6091536e9c 100644
--- a/lucene/core/src/java/org/apache/lucene/search/MatchesIterator.java
+++ b/lucene/core/src/java/org/apache/lucene/search/MatchesIterator.java
@@ -20,7 +20,6 @@ package org.apache.lucene.search;
 import java.io.IOException;
 
 import org.apache.lucene.index.LeafReaderContext;
-import org.apache.lucene.util.BytesRef;
 
 /**
  * An iterator over match positions (and optionally offsets) for a single document and field
@@ -72,10 +71,10 @@ public interface MatchesIterator {
   int endOffset() throws IOException;
 
   /**
-   * The underlying term of the current match
+   * The leaf query that provided the current match
    *
    * Should only be called after {@link #next()} has returned {@code true}
    */
-  BytesRef term();
+  Query getLeafQuery();
 
 }
diff --git a/lucene/core/src/java/org/apache/lucene/search/MultiTermQueryConstantScoreWrapper.java b/lucene/core/src/java/org/apache/lucene/search/MultiTermQueryConstantScoreWrapper.java
index 2299776211..1e59ef90cc 100644
--- a/lucene/core/src/java/org/apache/lucene/search/MultiTermQueryConstantScoreWrapper.java
+++ b/lucene/core/src/java/org/apache/lucene/search/MultiTermQueryConstantScoreWrapper.java
@@ -211,7 +211,7 @@ final class MultiTermQueryConstantScoreWrapper<Q extends MultiTermQuery> extends
         if (terms.hasPositions() == false) {
           return super.matches(context, doc);
         }
-        return Matches.forField(query.field, () -> DisjunctionMatchesIterator.fromTermsEnum(context, doc, query.field, query.getTermsEnum(terms)));
+        return Matches.forField(query.field, () -> DisjunctionMatchesIterator.fromTermsEnum(context, doc, query, query.field, query.getTermsEnum(terms)));
       }
 
       @Override
diff --git a/lucene/core/src/java/org/apache/lucene/search/SynonymQuery.java b/lucene/core/src/java/org/apache/lucene/search/SynonymQuery.java
index a364c9aacb..ee5fc49dbf 100644
--- a/lucene/core/src/java/org/apache/lucene/search/SynonymQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/SynonymQuery.java
@@ -167,7 +167,7 @@ public final class SynonymQuery extends Query {
       if (terms == null || terms.hasPositions() == false) {
         return super.matches(context, doc);
       }
-      return Matches.forField(field, () -> DisjunctionMatchesIterator.fromTerms(context, doc, field, Arrays.asList(SynonymQuery.this.terms)));
+      return Matches.forField(field, () -> DisjunctionMatchesIterator.fromTerms(context, doc, getQuery(), field, Arrays.asList(SynonymQuery.this.terms)));
     }
 
     @Override
diff --git a/lucene/core/src/java/org/apache/lucene/search/TermInSetQuery.java b/lucene/core/src/java/org/apache/lucene/search/TermInSetQuery.java
index 7145a83db3..3ec7380cb8 100644
--- a/lucene/core/src/java/org/apache/lucene/search/TermInSetQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/TermInSetQuery.java
@@ -226,7 +226,7 @@ public class TermInSetQuery extends Query implements Accountable {
         if (terms == null || terms.hasPositions() == false) {
           return super.matches(context, doc);
         }
-        return Matches.forField(field, () -> DisjunctionMatchesIterator.fromTermsEnum(context, doc, field, termData.iterator()));
+        return Matches.forField(field, () -> DisjunctionMatchesIterator.fromTermsEnum(context, doc, getQuery(), field, termData.iterator()));
       }
 
       /**
diff --git a/lucene/core/src/java/org/apache/lucene/search/TermMatchesIterator.java b/lucene/core/src/java/org/apache/lucene/search/TermMatchesIterator.java
index 051699651d..ed52370ea9 100644
--- a/lucene/core/src/java/org/apache/lucene/search/TermMatchesIterator.java
+++ b/lucene/core/src/java/org/apache/lucene/search/TermMatchesIterator.java
@@ -20,7 +20,6 @@ package org.apache.lucene.search;
 import java.io.IOException;
 
 import org.apache.lucene.index.PostingsEnum;
-import org.apache.lucene.util.BytesRef;
 
 /**
  * A {@link MatchesIterator} over a single term's postings list
@@ -30,15 +29,15 @@ class TermMatchesIterator implements MatchesIterator {
   private int upto;
   private int pos;
   private final PostingsEnum pe;
-  private final BytesRef term;
+  private final Query leafQuery;
 
   /**
    * Create a new {@link TermMatchesIterator} for the given term and postings list
    */
-  TermMatchesIterator(BytesRef term, PostingsEnum pe) throws IOException {
+  TermMatchesIterator(Query leafQuery, PostingsEnum pe) throws IOException {
     this.pe = pe;
     this.upto = pe.freq();
-    this.term = term;
+    this.leafQuery = leafQuery;
   }
 
   @Override
@@ -71,7 +70,7 @@ class TermMatchesIterator implements MatchesIterator {
   }
 
   @Override
-  public BytesRef term() {
-    return term;
+  public Query getLeafQuery() {
+    return leafQuery;
   }
 }
diff --git a/lucene/core/src/java/org/apache/lucene/search/TermQuery.java b/lucene/core/src/java/org/apache/lucene/search/TermQuery.java
index b86f340f33..4d699d7173 100644
--- a/lucene/core/src/java/org/apache/lucene/search/TermQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/TermQuery.java
@@ -95,7 +95,7 @@ public class TermQuery extends Query {
         if (pe.advance(doc) != doc) {
           return null;
         }
-        return new TermMatchesIterator(term.bytes(), pe);
+        return new TermMatchesIterator(getQuery(), pe);
       });
     }
 
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator.java b/lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator.java
index 3b3dd32251..8a45de86e6 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator.java
@@ -147,7 +147,7 @@ public class TestMatchesIterator extends LuceneTestCase {
     }
   }
 
-  void checkTerms(Query q, String field, String[][] expected) throws IOException {
+  void checkLeafQueries(Query q, String field, Query[][] expected) throws IOException {
     Weight w = searcher.createWeight(searcher.rewrite(q), ScoreMode.COMPLETE_NO_SCORES, 1);
     for (int i = 0; i < expected.length; i++) {
       LeafReaderContext ctx = searcher.leafContexts.get(ReaderUtil.subIndex(i, searcher.leafContexts));
@@ -164,7 +164,7 @@ public class TestMatchesIterator extends LuceneTestCase {
       }
       int pos = 0;
       while (it.next()) {
-        assertEquals(expected[i][pos], it.term().utf8ToString());
+        assertEquals(expected[i][pos], it.getLeafQuery());
         pos += 1;
       }
       assertEquals(expected[i].length, pos);
@@ -191,11 +191,11 @@ public class TestMatchesIterator extends LuceneTestCase {
         { 3, 0, 0, -1, -1, 2, 2, -1, -1 },
         { 4 }
     });
-    checkTerms(q, FIELD_NO_OFFSETS, new String[][]{
-        { "w1" },
-        { "w1" },
-        { "w1" },
-        { "w1", "w1" },
+    checkLeafQueries(q, FIELD_NO_OFFSETS, new Query[][]{
+        { q },
+        { q },
+        { q },
+        { q, q },
         {}
     });
   }
@@ -208,9 +208,11 @@ public class TestMatchesIterator extends LuceneTestCase {
   }
 
   public void testDisjunction() throws IOException {
+    Query w1 = new TermQuery(new Term(FIELD_WITH_OFFSETS, "w1"));
+    Query w3 = new TermQuery(new Term(FIELD_WITH_OFFSETS, "w3"));
     Query q = new BooleanQuery.Builder()
-        .add(new TermQuery(new Term(FIELD_WITH_OFFSETS, "w1")), BooleanClause.Occur.SHOULD)
-        .add(new TermQuery(new Term(FIELD_WITH_OFFSETS, "w3")), BooleanClause.Occur.SHOULD)
+        .add(w1, BooleanClause.Occur.SHOULD)
+        .add(w3, BooleanClause.Occur.SHOULD)
         .build();
     checkMatches(q, FIELD_WITH_OFFSETS, new int[][]{
         { 0, 0, 0, 0, 2, 2, 2, 6, 8 },
@@ -219,11 +221,11 @@ public class TestMatchesIterator extends LuceneTestCase {
         { 3, 0, 0, 0, 2, 2, 2, 6, 8, 5, 5, 15, 17 },
         { 4 }
     });
-    checkTerms(q, FIELD_WITH_OFFSETS, new String[][]{
-        { "w1", "w3" },
-        { "w1", "w3", "w3" },
-        { "w1" },
-        { "w1", "w1", "w3" },
+    checkLeafQueries(q, FIELD_WITH_OFFSETS, new Query[][]{
+        { w1, w3 },
+        { w1, w3, w3 },
+        { w1 },
+        { w1, w1, w3 },
         {}
     });
   }
@@ -263,12 +265,16 @@ public class TestMatchesIterator extends LuceneTestCase {
   }
 
   public void testMinShouldMatch() throws IOException {
+    Query w1 = new TermQuery(new Term(FIELD_WITH_OFFSETS, "w1"));
+    Query w3 = new TermQuery(new Term(FIELD_WITH_OFFSETS, "w3"));
+    Query w4 = new TermQuery(new Term(FIELD_WITH_OFFSETS, "w4"));
+    Query xx = new TermQuery(new Term(FIELD_WITH_OFFSETS, "xx"));
     Query q = new BooleanQuery.Builder()
-        .add(new TermQuery(new Term(FIELD_WITH_OFFSETS, "w3")), BooleanClause.Occur.SHOULD)
+        .add(w3, BooleanClause.Occur.SHOULD)
         .add(new BooleanQuery.Builder()
-            .add(new TermQuery(new Term(FIELD_WITH_OFFSETS, "w1")), BooleanClause.Occur.SHOULD)
-            .add(new TermQuery(new Term(FIELD_WITH_OFFSETS, "w4")), BooleanClause.Occur.SHOULD)
-            .add(new TermQuery(new Term(FIELD_WITH_OFFSETS, "xx")), BooleanClause.Occur.SHOULD)
+            .add(w1, BooleanClause.Occur.SHOULD)
+            .add(w4, BooleanClause.Occur.SHOULD)
+            .add(xx, BooleanClause.Occur.SHOULD)
             .setMinimumNumberShouldMatch(2)
             .build(), BooleanClause.Occur.SHOULD)
         .build();
@@ -279,11 +285,11 @@ public class TestMatchesIterator extends LuceneTestCase {
         { 3, 0, 0, 0, 2, 2, 2, 6, 8, 3, 3, 9, 11, 5, 5, 15, 17 },
         { 4 }
     });
-    checkTerms(q, FIELD_WITH_OFFSETS, new String[][]{
-        { "w1", "w3", "w4" },
-        { "w3", "w3" },
-        { "w1", "xx", "w4" },
-        { "w1", "w1", "w4", "w3" },
+    checkLeafQueries(q, FIELD_WITH_OFFSETS, new Query[][]{
+        { w1, w3, w4 },
+        { w3, w3 },
+        { w1, xx, w4 },
+        { w1, w1, w4, w3 },
         {}
     });
   }
@@ -360,8 +366,8 @@ public class TestMatchesIterator extends LuceneTestCase {
         { 3 },
         { 4 }
     });
-    checkTerms(q, FIELD_WITH_OFFSETS, new String[][]{
-        {}, {}, { "xx" }, {}
+    checkLeafQueries(q, FIELD_WITH_OFFSETS, new Query[][]{
+        {}, {}, { q }, {}
     });
 
     Query rq = new RegexpQuery(new Term(FIELD_WITH_OFFSETS, "w[1-2]"));
@@ -430,11 +436,4 @@ public class TestMatchesIterator extends LuceneTestCase {
     assertTrue(fields.contains("id"));
   }
 
-  protected String[] doc1Fields = {
-      "w1 w2 w3 w4 w5",
-      "w1 w3 w2 w3 zz",
-      "w1 xx w2 yy w4",
-      "w1 w2 w1 w4 w2 w3"
-  };
-
 }
diff --git a/lucene/test-framework/src/java/org/apache/lucene/search/AssertingMatchesIterator.java b/lucene/test-framework/src/java/org/apache/lucene/search/AssertingMatchesIterator.java
index 52fb184250..060fc4b589 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/search/AssertingMatchesIterator.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/search/AssertingMatchesIterator.java
@@ -19,8 +19,6 @@ package org.apache.lucene.search;
 
 import java.io.IOException;
 
-import org.apache.lucene.util.BytesRef;
-
 class AssertingMatchesIterator implements MatchesIterator {
 
   private final MatchesIterator in;
@@ -70,8 +68,8 @@ class AssertingMatchesIterator implements MatchesIterator {
   }
 
   @Override
-  public BytesRef term() {
+  public Query getLeafQuery() {
     assert state == State.ITERATING : state;
-    return in.term();
+    return in.getLeafQuery();
   }
 }
