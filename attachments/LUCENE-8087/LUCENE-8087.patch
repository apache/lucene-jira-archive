diff --git a/lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.java b/lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.java
index 17024d8..ff10bb1 100644
--- a/lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.java
+++ b/lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.java
@@ -651,6 +651,12 @@ public class BlockTermsReader extends FieldsProducer {
       }
 
       @Override
+      public int maxTermFreq() throws IOException {
+        decodeMetaData();
+        return state.maxTermFreq;
+      }
+
+      @Override
       public PostingsEnum postings(PostingsEnum reuse, int flags) throws IOException {
         //System.out.println("BTR.docs this=" + this);
         decodeMetaData();
@@ -813,8 +819,10 @@ public class BlockTermsReader extends FieldsProducer {
             //System.out.println("    dF=" + state.docFreq);
             if (fieldInfo.getIndexOptions() == IndexOptions.DOCS) {
               state.totalTermFreq = state.docFreq; // all postings have tf=1
+              state.maxTermFreq = 1;
             } else {
               state.totalTermFreq = state.docFreq + freqReader.readVLong();
+              state.maxTermFreq = Math.toIntExact(state.totalTermFreq / state.docFreq) + freqReader.readVInt();
               //System.out.println("    totTF=" + state.totalTermFreq);
             }
             // metadata
diff --git a/lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter.java b/lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter.java
index f19cd2c..dd96450 100644
--- a/lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter.java
+++ b/lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter.java
@@ -245,7 +245,7 @@ public class BlockTermsWriter extends FieldsConsumer implements Closeable {
       assert state.docFreq > 0;
       //System.out.println("BTW: finishTerm term=" + fieldInfo.name + ":" + text.utf8ToString() + " " + text + " seg=" + segment + " df=" + stats.docFreq);
 
-      TermStats stats = new TermStats(state.docFreq, state.totalTermFreq);
+      TermStats stats = new TermStats(state.docFreq, state.totalTermFreq, state.maxTermFreq);
       final boolean isIndexTerm = fieldIndexWriter.checkIndexTerm(text, stats);
 
       if (isIndexTerm) {
@@ -349,6 +349,7 @@ public class BlockTermsWriter extends FieldsConsumer implements Closeable {
         bytesWriter.writeVInt(state.docFreq);
         if (fieldInfo.getIndexOptions() != IndexOptions.DOCS) {
           bytesWriter.writeVLong(state.totalTermFreq-state.docFreq);
+          bytesWriter.writeVLong(state.maxTermFreq - Math.toIntExact(state.totalTermFreq/state.docFreq));
         }
       }
       out.writeVInt((int) bytesWriter.getFilePointer());
diff --git a/lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.java b/lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.java
index b16bb15..b9407d1 100644
--- a/lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.java
+++ b/lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.java
@@ -633,6 +633,7 @@ public final class OrdsBlockTreeTermsWriter extends FieldsConsumer {
           if (fieldInfo.getIndexOptions() != IndexOptions.DOCS) {
             assert state.totalTermFreq >= state.docFreq: state.totalTermFreq + " vs " + state.docFreq;
             statsWriter.writeVLong(state.totalTermFreq - state.docFreq);
+            statsWriter.writeVInt(state.maxTermFreq - Math.toIntExact(state.totalTermFreq / state.docFreq));
           }
 
           // Write term meta data
@@ -676,6 +677,7 @@ public final class OrdsBlockTreeTermsWriter extends FieldsConsumer {
             if (fieldInfo.getIndexOptions() != IndexOptions.DOCS) {
               assert state.totalTermFreq >= state.docFreq;
               statsWriter.writeVLong(state.totalTermFreq - state.docFreq);
+              statsWriter.writeVInt(state.maxTermFreq - Math.toIntExact(state.totalTermFreq / state.docFreq));
             }
 
             // TODO: now that terms dict "sees" these longs,
diff --git a/lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsIntersectTermsEnum.java b/lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsIntersectTermsEnum.java
index 6c2d2bc..594ad5a 100644
--- a/lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsIntersectTermsEnum.java
+++ b/lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsIntersectTermsEnum.java
@@ -200,6 +200,12 @@ final class OrdsIntersectTermsEnum extends TermsEnum {
   }
 
   @Override
+  public int maxTermFreq() throws IOException {
+    currentFrame.decodeMetaData();
+    return currentFrame.termState.maxTermFreq;
+  }
+
+  @Override
   public PostingsEnum postings(PostingsEnum reuse, int flags) throws IOException {
     currentFrame.decodeMetaData();
     return fr.parent.postingsReader.postings(fr.fieldInfo, currentFrame.termState, reuse, flags);
diff --git a/lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsIntersectTermsEnumFrame.java b/lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsIntersectTermsEnumFrame.java
index a34f0fd..a52368b 100644
--- a/lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsIntersectTermsEnumFrame.java
+++ b/lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsIntersectTermsEnumFrame.java
@@ -294,9 +294,11 @@ final class OrdsIntersectTermsEnumFrame {
       //if (DEBUG) System.out.println("    dF=" + state.docFreq);
       if (ite.fr.fieldInfo.getIndexOptions() == IndexOptions.DOCS) {
         termState.totalTermFreq = termState.docFreq; // all tf values are 1
+        termState.maxTermFreq = 1; // all tf values are 1
       } else {
         termState.totalTermFreq = termState.docFreq + statsReader.readVLong();
         //if (DEBUG) System.out.println("    totTF=" + state.totalTermFreq);
+        termState.maxTermFreq = Math.toIntExact(termState.totalTermFreq / termState.docFreq) + statsReader.readVInt();
       }
       // metadata 
       for (int i = 0; i < ite.fr.longsSize; i++) {
diff --git a/lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum.java b/lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum.java
index 9a9d871..b5e8891 100644
--- a/lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum.java
+++ b/lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum.java
@@ -921,6 +921,13 @@ public final class OrdsSegmentTermsEnum extends TermsEnum {
   }
 
   @Override
+  public int maxTermFreq() throws IOException {
+    assert !eof;
+    currentFrame.decodeMetaData();
+    return currentFrame.state.maxTermFreq;
+  }
+
+  @Override
   public PostingsEnum postings(PostingsEnum reuse, int flags) throws IOException {
     assert !eof;
     //if (DEBUG) {
diff --git a/lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnumFrame.java b/lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnumFrame.java
index ee3782f..38d5c19 100644
--- a/lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnumFrame.java
+++ b/lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnumFrame.java
@@ -501,9 +501,11 @@ final class OrdsSegmentTermsEnumFrame {
       //if (DEBUG) System.out.println("    dF=" + state.docFreq);
       if (ste.fr.fieldInfo.getIndexOptions() == IndexOptions.DOCS) {
         state.totalTermFreq = state.docFreq; // all tf values are 1
+        state.maxTermFreq = 1; // all tf values are 1
       } else {
         state.totalTermFreq = state.docFreq + statsReader.readVLong();
         //if (DEBUG) System.out.println("    totTF=" + state.totalTermFreq);
+        state.maxTermFreq = Math.toIntExact(state.totalTermFreq / state.docFreq) + statsReader.readVInt();
       }
       //if (DEBUG) System.out.println("    longsSize=" + ste.fr.longsSize);
 
diff --git a/lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.java b/lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.java
index b864bf0..c542277 100644
--- a/lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.java
+++ b/lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.java
@@ -366,6 +366,11 @@ public final class BloomFilteringPostingsFormat extends PostingsFormat {
       }
 
       @Override
+      public int maxTermFreq() throws IOException {
+        return delegate().maxTermFreq();
+      }
+
+      @Override
       public PostingsEnum postings(PostingsEnum reuse, int flags)
           throws IOException {
         return delegate().postings(reuse, flags);
diff --git a/lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.java b/lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.java
index 00f25cf..7a44a77 100644
--- a/lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.java
+++ b/lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.java
@@ -192,12 +192,14 @@ public final class DirectPostingsFormat extends PostingsFormat {
       public final byte[] payloads;
       public final int docFreq;
       public final int totalTermFreq;
+      public final int maxTermFreq;
 
-      public LowFreqTerm(int[] postings, byte[] payloads, int docFreq, int totalTermFreq) {
+      public LowFreqTerm(int[] postings, byte[] payloads, int docFreq, int totalTermFreq, int maxTermFreq) {
         this.postings = postings;
         this.payloads = payloads;
         this.docFreq = docFreq;
         this.totalTermFreq = totalTermFreq;
+        this.maxTermFreq = maxTermFreq;
       }
 
       @Override
@@ -215,17 +217,19 @@ public final class DirectPostingsFormat extends PostingsFormat {
       private static final long BASE_RAM_BYTES_USED = RamUsageEstimator.shallowSizeOfInstance(HighFreqTerm.class);
 
       public final long totalTermFreq;
+      public final int maxTermFreq;
       public final int[] docIDs;
       public final int[] freqs;
       public final int[][] positions;
       public final byte[][][] payloads;
 
-      public HighFreqTerm(int[] docIDs, int[] freqs, int[][] positions, byte[][][] payloads, long totalTermFreq) {
+      public HighFreqTerm(int[] docIDs, int[] freqs, int[][] positions, byte[][][] payloads, long totalTermFreq, int maxTermFreq) {
         this.docIDs = docIDs;
         this.freqs = freqs;
         this.positions = positions;
         this.payloads = payloads;
         this.totalTermFreq = totalTermFreq;
+        this.maxTermFreq = maxTermFreq;
       }
 
       @Override
@@ -340,6 +344,7 @@ public final class DirectPostingsFormat extends PostingsFormat {
       while ((term = termsEnum.next()) != null) {
         final int docFreq = termsEnum.docFreq();
         final long totalTermFreq = termsEnum.totalTermFreq();
+        final int maxTermFreq = termsEnum.maxTermFreq();
 
         // if (DEBUG) {
         //   System.out.println("  term=" + term.utf8ToString());
@@ -412,7 +417,7 @@ public final class DirectPostingsFormat extends PostingsFormat {
 
           final int[] postings = scratch.get();
 
-          ent = new LowFreqTerm(postings, payloads, docFreq, (int) totalTermFreq);
+          ent = new LowFreqTerm(postings, payloads, docFreq, (int) totalTermFreq, maxTermFreq);
         } else {
           final int[] docs = new int[docFreq];
           final int[] freqs;
@@ -479,7 +484,7 @@ public final class DirectPostingsFormat extends PostingsFormat {
             upto++;
           }
           assert upto == docFreq;
-          ent = new HighFreqTerm(docs, freqs, positions, payloads, totalTermFreq);
+          ent = new HighFreqTerm(docs, freqs, positions, payloads, totalTermFreq, maxTermFreq);
         }
 
         terms[count] = ent;
@@ -843,6 +848,15 @@ public final class DirectPostingsFormat extends PostingsFormat {
       }
 
       @Override
+      public int maxTermFreq() {
+        if (terms[termOrd] instanceof LowFreqTerm) {
+          return ((LowFreqTerm) terms[termOrd]).maxTermFreq;
+        } else {
+          return ((HighFreqTerm) terms[termOrd]).maxTermFreq;
+        }
+      }
+
+      @Override
       public PostingsEnum postings(PostingsEnum reuse, int flags) throws IOException {
         // TODO: implement reuse
         // it's hairy!
@@ -1451,6 +1465,15 @@ public final class DirectPostingsFormat extends PostingsFormat {
       }
 
       @Override
+      public int maxTermFreq() {
+        if (terms[termOrd] instanceof LowFreqTerm) {
+          return ((LowFreqTerm) terms[termOrd]).maxTermFreq;
+        } else {
+          return ((HighFreqTerm) terms[termOrd]).maxTermFreq;
+        }
+      }
+
+      @Override
       public PostingsEnum postings(PostingsEnum reuse, int flags) {
         // TODO: implement reuse
         // it's hairy!
diff --git a/lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsReader.java b/lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsReader.java
index 5ba4c5f..bbcd06a 100644
--- a/lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsReader.java
+++ b/lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsReader.java
@@ -329,6 +329,7 @@ public class FSTOrdTermsReader extends FieldsProducer {
       /* Current buffered stats (df & ttf) */
       int[] docFreq;
       long[] totalTermFreq;
+      int[] maxTermFreq;
 
       BaseTermsEnum() throws IOException {
         this.state = postingsReader.newTermState();
@@ -341,6 +342,7 @@ public class FSTOrdTermsReader extends FieldsProducer {
         this.bytesLength = new int[INTERVAL];
         this.docFreq = new int[INTERVAL];
         this.totalTermFreq = new long[INTERVAL];
+        this.maxTermFreq = new int[INTERVAL];
         this.statsBlockOrd = -1;
         this.metaBlockOrd = -1;
       }
@@ -355,6 +357,7 @@ public class FSTOrdTermsReader extends FieldsProducer {
         }
         state.docFreq = docFreq[upto];
         state.totalTermFreq = totalTermFreq[upto];
+        state.maxTermFreq = maxTermFreq[upto];
       }
 
       /** Let PBF decode metadata */
@@ -380,12 +383,15 @@ public class FSTOrdTermsReader extends FieldsProducer {
             docFreq[i] = (code >>> 1);
             if ((code & 1) == 1) {
               totalTermFreq[i] = docFreq[i];
+              maxTermFreq[i] = 1;
             } else {
               totalTermFreq[i] = docFreq[i] + statsReader.readVLong();
+              maxTermFreq[i] = Math.toIntExact(totalTermFreq[i] / docFreq[i]) + statsReader.readVInt();
             }
           } else {
             docFreq[i] = code;
             totalTermFreq[i] = code;
+            maxTermFreq[i] = 1;
           }
         }
       }
@@ -427,6 +433,11 @@ public class FSTOrdTermsReader extends FieldsProducer {
       }
 
       @Override
+      public int maxTermFreq() throws IOException {
+        return state.maxTermFreq;
+      }
+
+      @Override
       public PostingsEnum postings(PostingsEnum reuse, int flags) throws IOException {
         decodeMetaData();
         return postingsReader.postings(fieldInfo, state, reuse, flags);
diff --git a/lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsWriter.java b/lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsWriter.java
index cbe6583..200a8c5 100644
--- a/lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsWriter.java
+++ b/lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsWriter.java
@@ -335,6 +335,7 @@ public class FSTOrdTermsWriter extends FieldsConsumer {
         } else {
           statsOut.writeVInt(state.docFreq<<1);
           statsOut.writeVLong(state.totalTermFreq-state.docFreq);
+          statsOut.writeVInt(state.maxTermFreq - Math.toIntExact(state.totalTermFreq/state.docFreq));
         }
       } else {
         statsOut.writeVInt(state.docFreq);
diff --git a/lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermOutputs.java b/lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermOutputs.java
index 3695fe8..94ad815 100644
--- a/lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermOutputs.java
+++ b/lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermOutputs.java
@@ -54,17 +54,20 @@ class FSTTermOutputs extends Outputs<FSTTermOutputs.TermData> {
     byte[] bytes;
     int docFreq;
     long totalTermFreq;
+    int maxTermFreq;
     TermData() {
       this.longs = null;
       this.bytes = null;
       this.docFreq = 0;
       this.totalTermFreq = -1;
+      this.maxTermFreq = -1;
     }
-    TermData(long[] longs, byte[] bytes, int docFreq, long totalTermFreq) {
+    TermData(long[] longs, byte[] bytes, int docFreq, long totalTermFreq, int maxTermFreq) {
       this.longs = longs;
       this.bytes = bytes;
       this.docFreq = docFreq;
       this.totalTermFreq = totalTermFreq;
+      this.maxTermFreq = maxTermFreq;
     }
 
     @Override
@@ -166,7 +169,7 @@ class FSTTermOutputs extends Outputs<FSTTermOutputs.TermData> {
       if (pos < longsSize || allZero(min)) {  // not comparable or all-zero
         ret = NO_OUTPUT;
       } else {
-        ret = new TermData(min, null, 0, -1);
+        ret = new TermData(min, null, 0, -1, -1);
       }
     } else {  // equal long[]
       if (statsEqual(t1, t2) && bytesEqual(t1, t2)) {
@@ -174,7 +177,7 @@ class FSTTermOutputs extends Outputs<FSTTermOutputs.TermData> {
       } else if (allZero(min)) {
         ret = NO_OUTPUT;
       } else {
-        ret = new TermData(min, null, 0, -1);
+        ret = new TermData(min, null, 0, -1, -1);
       }
     }
     //if (TEST) System.out.println("ret:"+ret);
@@ -204,7 +207,7 @@ class FSTTermOutputs extends Outputs<FSTTermOutputs.TermData> {
     if (diff == 0 && statsEqual(t1, t2) && bytesEqual(t1, t2)) {
       ret = NO_OUTPUT;
     } else {
-      ret = new TermData(share, t1.bytes, t1.docFreq, t1.totalTermFreq);
+      ret = new TermData(share, t1.bytes, t1.docFreq, t1.totalTermFreq, t1.maxTermFreq);
     }
     //if (TEST) System.out.println("ret:"+ret);
     return ret;
@@ -235,9 +238,9 @@ class FSTTermOutputs extends Outputs<FSTTermOutputs.TermData> {
 
     TermData ret;
     if (t2.bytes != null || t2.docFreq > 0) {
-      ret = new TermData(accum, t2.bytes, t2.docFreq, t2.totalTermFreq);
+      ret = new TermData(accum, t2.bytes, t2.docFreq, t2.totalTermFreq, t2.maxTermFreq);
     } else {
-      ret = new TermData(accum, t1.bytes, t1.docFreq, t1.totalTermFreq);
+      ret = new TermData(accum, t1.bytes, t1.docFreq, t1.totalTermFreq, t1.maxTermFreq);
     }
     //if (TEST) System.out.println("ret:"+ret);
     return ret;
@@ -276,6 +279,7 @@ class FSTTermOutputs extends Outputs<FSTTermOutputs.TermData> {
         } else {
           out.writeVInt((data.docFreq << 1));
           out.writeVLong(data.totalTermFreq - data.docFreq);
+          out.writeVInt(data.maxTermFreq - Math.toIntExact(data.totalTermFreq / data.docFreq));
         }
       } else {
         out.writeVInt(data.docFreq);
@@ -289,6 +293,7 @@ class FSTTermOutputs extends Outputs<FSTTermOutputs.TermData> {
     byte[] bytes = null;
     int docFreq = 0;
     long totalTermFreq = -1;
+    int maxTermFreq = -1;
     int bits = in.readByte() & 0xff;
     int bit0 = bits & 1;
     int bit1 = bits & 2;
@@ -310,14 +315,16 @@ class FSTTermOutputs extends Outputs<FSTTermOutputs.TermData> {
       int code = in.readVInt();
       if (hasPos) {
         totalTermFreq = docFreq = code >>> 1;
+        maxTermFreq = 1;
         if ((code & 1) == 0) {
           totalTermFreq += in.readVLong();
+          maxTermFreq = Math.toIntExact(totalTermFreq / docFreq) + in.readVInt();
         }
       } else {
         docFreq = code;
       }
     }
-    return new TermData(longs, bytes, docFreq, totalTermFreq);
+    return new TermData(longs, bytes, docFreq, totalTermFreq, maxTermFreq);
   }
   
 
@@ -343,6 +350,7 @@ class FSTTermOutputs extends Outputs<FSTTermOutputs.TermData> {
       int code = in.readVInt();
       if (hasPos && (code & 1) == 0) {
         in.readVLong();
+        in.readVInt();
       }
     }
   }
diff --git a/lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader.java b/lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader.java
index 8dda05c..a593d6b 100644
--- a/lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader.java
+++ b/lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader.java
@@ -293,6 +293,11 @@ public class FSTTermsReader extends FieldsProducer {
       }
 
       @Override
+      public int maxTermFreq() throws IOException {
+        return state.maxTermFreq == -1 ? 1 : state.maxTermFreq;
+      }
+
+      @Override
       public PostingsEnum postings(PostingsEnum reuse, int flags) throws IOException {
         decodeMetaData();
         return postingsReader.postings(fieldInfo, state, reuse, flags);
@@ -356,6 +361,7 @@ public class FSTTermsReader extends FieldsProducer {
           meta = pair.output;
           state.docFreq = meta.docFreq;
           state.totalTermFreq = meta.totalTermFreq;
+          state.maxTermFreq = meta.maxTermFreq;
         }
         decoded = false;
         seekPending = false;
diff --git a/lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsWriter.java b/lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsWriter.java
index 8284d74..a946556 100644
--- a/lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsWriter.java
+++ b/lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsWriter.java
@@ -270,6 +270,7 @@ public class FSTTermsWriter extends FieldsConsumer {
       meta.bytes = null;
       meta.docFreq = state.docFreq;
       meta.totalTermFreq = state.totalTermFreq;
+      meta.maxTermFreq = state.maxTermFreq;
       postingsWriter.encodeTerm(meta.longs, metaWriter, fieldInfo, state, true);
       final int bytesSize = (int)metaWriter.getFilePointer();
       if (bytesSize > 0) {
diff --git a/lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer.java b/lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer.java
index b81e56e..e605fe6 100644
--- a/lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer.java
+++ b/lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer.java
@@ -866,6 +866,11 @@ class MemoryDocValuesProducer extends DocValuesProducer {
     }
 
     @Override
+    public int maxTermFreq() throws IOException {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
     public PostingsEnum postings(PostingsEnum reuse, int flags) throws IOException {
       throw new UnsupportedOperationException();
     }
diff --git a/lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.java b/lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.java
index 21983c6..91d95d8 100644
--- a/lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.java
+++ b/lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.java
@@ -222,6 +222,7 @@ public final class MemoryPostingsFormat extends PostingsFormat {
       buffer2.writeVInt(stats.docFreq);
       if (field.getIndexOptions() != IndexOptions.DOCS) {
         buffer2.writeVLong(stats.totalTermFreq-stats.docFreq);
+        buffer2.writeVLong(stats.maxTermFreq - Math.toIntExact(stats.totalTermFreq / stats.docFreq));
       }
       int pos = (int) buffer2.getFilePointer();
       buffer2.writeTo(finalBuffer, 0);
@@ -349,6 +350,7 @@ public final class MemoryPostingsFormat extends PostingsFormat {
 
           int docFreq = 0;
           long totalTermFreq = 0;
+          int maxTermFreq = 0;
           while (true) {
             int docID = postingsEnum.nextDoc();
             if (docID == PostingsEnum.NO_MORE_DOCS) {
@@ -361,6 +363,7 @@ public final class MemoryPostingsFormat extends PostingsFormat {
             if (writeFreqs) {
               freq = postingsEnum.freq();
               totalTermFreq += freq;
+              maxTermFreq = Math.max(maxTermFreq, freq);
             } else {
               freq = -1;
             }
@@ -383,7 +386,7 @@ public final class MemoryPostingsFormat extends PostingsFormat {
               }
             }
           }
-          termsWriter.finishTerm(term, new TermStats(docFreq, totalTermFreq));
+          termsWriter.finishTerm(term, new TermStats(docFreq, totalTermFreq, maxTermFreq));
           sumDocFreq += docFreq;
           sumTotalTermFreq += totalTermFreq;
         }
@@ -721,6 +724,7 @@ public final class MemoryPostingsFormat extends PostingsFormat {
 
     private int docFreq;
     private long totalTermFreq;
+    private int maxTermFreq;
     private BytesRefFSTEnum.InputOutput<BytesRef> current;
     private BytesRef postingsSpare = new BytesRef();
 
@@ -735,8 +739,10 @@ public final class MemoryPostingsFormat extends PostingsFormat {
         docFreq = buffer.readVInt();
         if (field.getIndexOptions() == IndexOptions.DOCS) {
           totalTermFreq = docFreq;
+          maxTermFreq = 1;
         } else {
           totalTermFreq = docFreq + buffer.readVLong();
+          maxTermFreq = Math.toIntExact(totalTermFreq / docFreq) + buffer.readVInt(); 
         }
         postingsSpare.bytes = current.output.bytes;
         postingsSpare.offset = buffer.getPosition();
@@ -845,6 +851,12 @@ public final class MemoryPostingsFormat extends PostingsFormat {
     }
 
     @Override
+    public int maxTermFreq() {
+      decodeMetaData();
+      return maxTermFreq;
+    }
+
+    @Override
     public void seekExact(long ord) {
       // NOTE: we could add this...
       throw new UnsupportedOperationException();
diff --git a/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.java b/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.java
index f5504b3..d818ac6 100644
--- a/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.java
+++ b/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.java
@@ -113,11 +113,12 @@ class SimpleTextFieldsReader extends FieldsProducer {
     private final IndexOptions indexOptions;
     private int docFreq;
     private long totalTermFreq;
+    private int maxTermFreq;
     private long docsStart;
     private boolean ended;
-    private final BytesRefFSTEnum<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> fstEnum;
+    private final BytesRefFSTEnum<PairOutputs.Pair<Long,PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>> fstEnum;
 
-    public SimpleTextTermsEnum(FST<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> fst, IndexOptions indexOptions) {
+    public SimpleTextTermsEnum(FST<PairOutputs.Pair<Long,PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>> fst, IndexOptions indexOptions) {
       this.indexOptions = indexOptions;
       fstEnum = new BytesRefFSTEnum<>(fst);
     }
@@ -125,13 +126,15 @@ class SimpleTextFieldsReader extends FieldsProducer {
     @Override
     public boolean seekExact(BytesRef text) throws IOException {
 
-      final BytesRefFSTEnum.InputOutput<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> result = fstEnum.seekExact(text);
+      final BytesRefFSTEnum.InputOutput<PairOutputs.Pair<Long,PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>> result = fstEnum.seekExact(text);
       if (result != null) {
-        PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>> pair1 = result.output;
-        PairOutputs.Pair<Long,Long> pair2 = pair1.output2;
+        PairOutputs.Pair<Long,PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> pair1 = result.output;
+        PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>> pair2 = pair1.output2;
+        PairOutputs.Pair<Long,Long> pair3 = pair2.output2;
         docsStart = pair1.output1;
         docFreq = pair2.output1.intValue();
-        totalTermFreq = pair2.output2;
+        totalTermFreq = pair3.output1;
+        maxTermFreq = pair3.output2.intValue();
         return true;
       } else {
         return false;
@@ -142,17 +145,19 @@ class SimpleTextFieldsReader extends FieldsProducer {
     public SeekStatus seekCeil(BytesRef text) throws IOException {
 
       //System.out.println("seek to text=" + text.utf8ToString());
-      final BytesRefFSTEnum.InputOutput<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> result = fstEnum.seekCeil(text);
+      final BytesRefFSTEnum.InputOutput<PairOutputs.Pair<Long,PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>> result = fstEnum.seekCeil(text);
       if (result == null) {
         //System.out.println("  end");
         return SeekStatus.END;
       } else {
         //System.out.println("  got text=" + term.utf8ToString());
-        PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>> pair1 = result.output;
-        PairOutputs.Pair<Long,Long> pair2 = pair1.output2;
+        PairOutputs.Pair<Long,PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> pair1 = result.output;
+        PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>> pair2 = pair1.output2;
+        PairOutputs.Pair<Long,Long> pair3 = pair2.output2;
         docsStart = pair1.output1;
         docFreq = pair2.output1.intValue();
-        totalTermFreq = pair2.output2;
+        totalTermFreq = pair3.output1;
+        maxTermFreq = pair3.output2.intValue();
 
         if (result.input.equals(text)) {
           //System.out.println("  match docsStart=" + docsStart);
@@ -167,13 +172,15 @@ class SimpleTextFieldsReader extends FieldsProducer {
     @Override
     public BytesRef next() throws IOException {
       assert !ended;
-      final BytesRefFSTEnum.InputOutput<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> result = fstEnum.next();
+      final BytesRefFSTEnum.InputOutput<PairOutputs.Pair<Long,PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>> result = fstEnum.next();
       if (result != null) {
-        PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>> pair1 = result.output;
-        PairOutputs.Pair<Long,Long> pair2 = pair1.output2;
+        PairOutputs.Pair<Long,PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> pair1 = result.output;
+        PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>> pair2 = pair1.output2;
+        PairOutputs.Pair<Long,Long> pair3 = pair2.output2;
         docsStart = pair1.output1;
         docFreq = pair2.output1.intValue();
-        totalTermFreq = pair2.output2;
+        totalTermFreq = pair3.output1;
+        maxTermFreq = pair3.output2.intValue();
         return result.input;
       } else {
         return null;
@@ -206,6 +213,11 @@ class SimpleTextFieldsReader extends FieldsProducer {
     }
 
     @Override
+    public int maxTermFreq() {
+      return indexOptions == IndexOptions.DOCS ? 1 : maxTermFreq;
+    }
+
+    @Override
     public PostingsEnum postings(PostingsEnum reuse, int flags) throws IOException {
 
       boolean hasPositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;
@@ -528,7 +540,7 @@ class SimpleTextFieldsReader extends FieldsProducer {
     private long sumTotalTermFreq;
     private long sumDocFreq;
     private int docCount;
-    private FST<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> fst;
+    private FST<PairOutputs.Pair<Long,PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>> fst;
     private int termCount;
     private final BytesRefBuilder scratch = new BytesRefBuilder();
     private final CharsRefBuilder scratchUTF16 = new CharsRefBuilder();
@@ -542,10 +554,11 @@ class SimpleTextFieldsReader extends FieldsProducer {
 
     private void loadTerms() throws IOException {
       PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton();
-      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;
+      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>> b;
       final PairOutputs<Long,Long> outputsInner = new PairOutputs<>(posIntOutputs, posIntOutputs);
-      final PairOutputs<Long,PairOutputs.Pair<Long,Long>> outputs = new PairOutputs<>(posIntOutputs,
-          outputsInner);
+      final PairOutputs<Long,PairOutputs.Pair<Long,Long>> outputsInner2 = new PairOutputs<>(posIntOutputs, outputsInner);
+      final PairOutputs<Long,PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> outputs = new PairOutputs<>(posIntOutputs,
+          outputsInner2);
       b = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);
       IndexInput in = SimpleTextFieldsReader.this.in.clone();
       in.seek(termsStart);
@@ -553,6 +566,7 @@ class SimpleTextFieldsReader extends FieldsProducer {
       long lastDocsStart = -1;
       int docFreq = 0;
       long totalTermFreq = 0;
+      int maxTermFreq = 1;
       FixedBitSet visitedDocs = new FixedBitSet(maxDoc);
       final IntsRefBuilder scratchIntsRef = new IntsRefBuilder();
       while(true) {
@@ -561,7 +575,7 @@ class SimpleTextFieldsReader extends FieldsProducer {
           if (lastDocsStart != -1) {
             b.add(Util.toIntsRef(lastTerm.get(), scratchIntsRef),
                 outputs.newPair(lastDocsStart,
-                    outputsInner.newPair((long) docFreq, totalTermFreq)));
+                    outputsInner2.newPair((long) docFreq, outputsInner.newPair(totalTermFreq, (long) maxTermFreq))));
             sumTotalTermFreq += totalTermFreq;
           }
           break;
@@ -574,11 +588,13 @@ class SimpleTextFieldsReader extends FieldsProducer {
           visitedDocs.set(docID);
         } else if (StringHelper.startsWith(scratch.get(), FREQ)) {
           scratchUTF16.copyUTF8Bytes(scratch.bytes(), FREQ.length, scratch.length()-FREQ.length);
-          totalTermFreq += ArrayUtil.parseInt(scratchUTF16.chars(), 0, scratchUTF16.length()) - 1;
+          int freq = ArrayUtil.parseInt(scratchUTF16.chars(), 0, scratchUTF16.length());
+          totalTermFreq += freq - 1;
+          maxTermFreq = Math.max(freq, maxTermFreq);
         } else if (StringHelper.startsWith(scratch.get(), TERM)) {
           if (lastDocsStart != -1) {
             b.add(Util.toIntsRef(lastTerm.get(), scratchIntsRef), outputs.newPair(lastDocsStart,
-                outputsInner.newPair((long) docFreq, totalTermFreq)));
+                outputsInner2.newPair((long) docFreq, outputsInner.newPair(totalTermFreq, (long) maxTermFreq))));
           }
           lastDocsStart = in.getFilePointer();
           final int len = scratch.length() - TERM.length;
@@ -589,6 +605,7 @@ class SimpleTextFieldsReader extends FieldsProducer {
           sumTotalTermFreq += totalTermFreq;
           totalTermFreq = 0;
           termCount++;
+          maxTermFreq = 1;
         }
       }
       docCount = visitedDocs.cardinality();
diff --git a/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader.java b/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader.java
index 25f2a4d..c0620c0 100644
--- a/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader.java
+++ b/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader.java
@@ -392,6 +392,11 @@ public class SimpleTextTermVectorsReader extends TermVectorsReader {
     }
 
     @Override
+    public int maxTermFreq() throws IOException {
+      return current.getValue().freq;
+    }
+
+    @Override
     public PostingsEnum postings(PostingsEnum reuse, int flags) throws IOException {
       
       if (PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/BlockTermState.java b/lucene/core/src/java/org/apache/lucene/codecs/BlockTermState.java
index c317668..b3e47e9 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/BlockTermState.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/BlockTermState.java
@@ -31,6 +31,8 @@ public class BlockTermState extends OrdTermState {
   public int docFreq;
   /** total number of occurrences of this term */
   public long totalTermFreq;
+  /** The maximum term frequency of this term */
+  public int maxTermFreq;
 
   /** the term's ord in the current block */
   public int termBlockOrd;
@@ -50,12 +52,13 @@ public class BlockTermState extends OrdTermState {
     super.copyFrom(_other);
     docFreq = other.docFreq;
     totalTermFreq = other.totalTermFreq;
+    maxTermFreq = other.maxTermFreq;
     termBlockOrd = other.termBlockOrd;
     blockFilePointer = other.blockFilePointer;
   }
 
   @Override
   public String toString() {
-    return "docFreq=" + docFreq + " totalTermFreq=" + totalTermFreq + " termBlockOrd=" + termBlockOrd + " blockFP=" + blockFilePointer;
+    return "docFreq=" + docFreq + " totalTermFreq=" + totalTermFreq + " maxTermFreq=" + maxTermFreq + " termBlockOrd=" + termBlockOrd + " blockFP=" + blockFilePointer;
   }
 }
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/PushPostingsWriterBase.java b/lucene/core/src/java/org/apache/lucene/codecs/PushPostingsWriterBase.java
index 1fb83b9..e9c5a2f 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/PushPostingsWriterBase.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/PushPostingsWriterBase.java
@@ -124,6 +124,7 @@ public abstract class PushPostingsWriterBase extends PostingsWriterBase {
 
     int docFreq = 0;
     long totalTermFreq = 0;
+    int maxTermFreq = 0;
     while (true) {
       int docID = postingsEnum.nextDoc();
       if (docID == PostingsEnum.NO_MORE_DOCS) {
@@ -135,6 +136,7 @@ public abstract class PushPostingsWriterBase extends PostingsWriterBase {
       if (writeFreqs) {
         freq = postingsEnum.freq();
         totalTermFreq += freq;
+        maxTermFreq = Math.max(maxTermFreq, freq);
       } else {
         freq = -1;
       }
@@ -166,6 +168,7 @@ public abstract class PushPostingsWriterBase extends PostingsWriterBase {
       BlockTermState state = newTermState();
       state.docFreq = docFreq;
       state.totalTermFreq = writeFreqs ? totalTermFreq : -1;
+      state.maxTermFreq = writeFreqs ? maxTermFreq : -1;
       finishTerm(state);
       return state;
     }
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/TermStats.java b/lucene/core/src/java/org/apache/lucene/codecs/TermStats.java
index c3c2a48..f349ddf 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/TermStats.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/TermStats.java
@@ -24,6 +24,7 @@ import org.apache.lucene.index.TermsEnum; // javadocs
  * 
  * @see TermsEnum#docFreq
  * @see TermsEnum#totalTermFreq
+ * @see TermsEnum#maxTermFreq
  */
 public class TermStats {
   /** How many documents have at least one occurrence of
@@ -34,9 +35,13 @@ public class TermStats {
    *  documents in the field. */
   public final long totalTermFreq;
 
+  /** Maximum number of times this term occurs in a document. */
+  public final int maxTermFreq;
+
   /** Sole constructor. */
-  public TermStats(int docFreq, long totalTermFreq) {
+  public TermStats(int docFreq, long totalTermFreq, int maxTermFreq) {
     this.docFreq = docFreq;
     this.totalTermFreq = totalTermFreq;
+    this.maxTermFreq = maxTermFreq;
   }
 }
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/blocktree/BitSetTermsEnum.java b/lucene/core/src/java/org/apache/lucene/codecs/blocktree/BitSetTermsEnum.java
index ffc182f..411ad53 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/blocktree/BitSetTermsEnum.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/blocktree/BitSetTermsEnum.java
@@ -17,6 +17,8 @@
 package org.apache.lucene.codecs.blocktree;
 
 
+import java.io.IOException;
+
 import org.apache.lucene.codecs.PostingsWriterBase;
 import org.apache.lucene.index.PostingsEnum;
 import org.apache.lucene.index.TermsEnum;
@@ -72,6 +74,11 @@ class BitSetTermsEnum extends TermsEnum {
   }
 
   @Override
+  public int maxTermFreq() throws IOException {
+    throw new UnsupportedOperationException();
+  }
+
+  @Override
   public PostingsEnum postings(PostingsEnum reuse, int flags) {
     if (flags != PostingsEnum.NONE) {
       // We only work with DOCS_ONLY fields
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsReader.java b/lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsReader.java
index 0ef2129..60ba97e 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsReader.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsReader.java
@@ -103,8 +103,11 @@ public final class BlockTreeTermsReader extends FieldsProducer {
   /** Auto-prefix terms have been superseded by points. */
   public static final int VERSION_AUTO_PREFIX_TERMS_REMOVED = 3;
 
+  /** First version to record max term freqs. */
+  public static final int VERSION_RECORD_MAX_TERM_FREQ = 4;
+
   /** Current terms format. */
-  public static final int VERSION_CURRENT = VERSION_AUTO_PREFIX_TERMS_REMOVED;
+  public static final int VERSION_CURRENT = VERSION_RECORD_MAX_TERM_FREQ;
 
   /** Extension of terms index file */
   static final String TERMS_INDEX_EXTENSION = "tip";
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java b/lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java
index bdacc22..035ee1b 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java
@@ -717,7 +717,10 @@ public final class BlockTreeTermsWriter extends FieldsConsumer {
           statsWriter.writeVInt(state.docFreq);
           if (fieldInfo.getIndexOptions() != IndexOptions.DOCS) {
             assert state.totalTermFreq >= state.docFreq: state.totalTermFreq + " vs " + state.docFreq;
+            assert state.maxTermFreq >= 1;
+            int avgTermFreq = Math.toIntExact(state.totalTermFreq / state.docFreq);
             statsWriter.writeVLong(state.totalTermFreq - state.docFreq);
+            statsWriter.writeVInt(state.maxTermFreq - avgTermFreq);
           }
 
           // Write term meta data
@@ -760,7 +763,9 @@ public final class BlockTreeTermsWriter extends FieldsConsumer {
             statsWriter.writeVInt(state.docFreq);
             if (fieldInfo.getIndexOptions() != IndexOptions.DOCS) {
               assert state.totalTermFreq >= state.docFreq;
+              int avgTermFreq = Math.toIntExact(state.totalTermFreq / state.docFreq);
               statsWriter.writeVLong(state.totalTermFreq - state.docFreq);
+              statsWriter.writeVInt(state.maxTermFreq - avgTermFreq);
             }
 
             // TODO: now that terms dict "sees" these longs,
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum.java b/lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum.java
index 19e56a4..248259d 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum.java
@@ -230,6 +230,12 @@ final class IntersectTermsEnum extends TermsEnum {
   }
 
   @Override
+  public int maxTermFreq() throws IOException {
+    currentFrame.decodeMetaData();
+    return currentFrame.termState.maxTermFreq;
+  }
+
+  @Override
   public PostingsEnum postings(PostingsEnum reuse, int flags) throws IOException {
     currentFrame.decodeMetaData();
     return fr.parent.postingsReader.postings(fr.fieldInfo, currentFrame.termState, reuse, flags);
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame.java b/lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame.java
index 236e77a..0fc9132 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame.java
@@ -107,13 +107,16 @@ final class IntersectTermsEnumFrame {
   boolean isAutoPrefixTerm;
 
   private final IntersectTermsEnum ite;
+  private final int version;
 
   public IntersectTermsEnumFrame(IntersectTermsEnum ite, int ord) throws IOException {
     this.ite = ite;
     this.ord = ord;
     this.termState = ite.fr.parent.postingsReader.newTermState();
     this.termState.totalTermFreq = -1;
+    this.termState.maxTermFreq = -1;
     this.longs = new long[ite.fr.longsSize];
+    this.version = ite.fr.parent.version;
   }
 
   void loadNextFloorBlock() throws IOException {
@@ -292,6 +295,12 @@ final class IntersectTermsEnumFrame {
         termState.totalTermFreq = termState.docFreq; // all postings have freq=1
       } else {
         termState.totalTermFreq = termState.docFreq + statsReader.readVLong();
+        if (version >= BlockTreeTermsReader.VERSION_RECORD_MAX_TERM_FREQ) {
+          int avgTermFreq = Math.toIntExact(termState.totalTermFreq / termState.docFreq);
+          termState.maxTermFreq = avgTermFreq + statsReader.readVInt();
+        } else {
+          termState.maxTermFreq = (int) Math.min(termState.totalTermFreq - termState.docFreq + 1, Integer.MAX_VALUE);
+        }
       }
       // metadata 
       for (int i = 0; i < ite.fr.longsSize; i++) {
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnum.java b/lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnum.java
index 73c32bb..d4967fa 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnum.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnum.java
@@ -990,6 +990,13 @@ final class SegmentTermsEnum extends TermsEnum {
   }
 
   @Override
+  public int maxTermFreq() throws IOException {
+    assert !eof;
+    currentFrame.decodeMetaData();
+    return currentFrame.state.maxTermFreq;
+  }
+
+  @Override
   public PostingsEnum postings(PostingsEnum reuse, int flags) throws IOException {
     assert !eof;
     //if (DEBUG) {
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnumFrame.java b/lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnumFrame.java
index a32bdac..2a32d9a 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnumFrame.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnumFrame.java
@@ -91,13 +91,16 @@ final class SegmentTermsEnumFrame {
   final ByteArrayDataInput bytesReader = new ByteArrayDataInput();
 
   private final SegmentTermsEnum ste;
+  private final int version;
 
   public SegmentTermsEnumFrame(SegmentTermsEnum ste, int ord) throws IOException {
     this.ste = ste;
     this.ord = ord;
     this.state = ste.fr.parent.postingsReader.newTermState();
     this.state.totalTermFreq = -1;
+    this.state.maxTermFreq = -1;
     this.longs = new long[ste.fr.longsSize];
+    this.version = ste.fr.parent.version;
   }
 
   public void setFloorData(ByteArrayDataInput in, BytesRef source) {
@@ -419,9 +422,16 @@ final class SegmentTermsEnumFrame {
       //if (DEBUG) System.out.println("    dF=" + state.docFreq);
       if (ste.fr.fieldInfo.getIndexOptions() == IndexOptions.DOCS) {
         state.totalTermFreq = state.docFreq; // all postings have freq=1
+        state.maxTermFreq = 1; // all postings have freq=1
       } else {
         state.totalTermFreq = state.docFreq + statsReader.readVLong();
         //if (DEBUG) System.out.println("    totTF=" + state.totalTermFreq);
+        if (version >= BlockTreeTermsReader.VERSION_RECORD_MAX_TERM_FREQ) {
+          int avgTermFreq = Math.toIntExact(state.totalTermFreq / state.docFreq);
+          state.maxTermFreq = avgTermFreq + statsReader.readVInt();
+        } else {
+          state.maxTermFreq = (int) Math.min(state.totalTermFreq - state.docFreq + 1, Integer.MAX_VALUE);
+        }
       }
       // metadata 
       for (int i = 0; i < ste.fr.longsSize; i++) {
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsReader.java b/lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsReader.java
index f5318ba..66d8675 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsReader.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsReader.java
@@ -930,6 +930,11 @@ public final class CompressingTermVectorsReader extends TermVectorsReader implem
     }
 
     @Override
+    public int maxTermFreq() throws IOException {
+      return termFreqs[ord];
+    }
+
+    @Override
     public final PostingsEnum postings(PostingsEnum reuse, int flags) throws IOException {
       final TVPostingsEnum docsEnum;
       if (reuse != null && reuse instanceof TVPostingsEnum) {
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer.java b/lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer.java
index 386655e..99e64d8 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer.java
@@ -1153,6 +1153,11 @@ final class Lucene70DocValuesProducer extends DocValuesProducer implements Close
     }
 
     @Override
+    public int maxTermFreq() throws IOException {
+      return -1;
+    }
+
+    @Override
     public PostingsEnum postings(PostingsEnum reuse, int flags) throws IOException {
       throw new UnsupportedOperationException();
     }
diff --git a/lucene/core/src/java/org/apache/lucene/index/CheckIndex.java b/lucene/core/src/java/org/apache/lucene/index/CheckIndex.java
index 028da24..fddc31d 100644
--- a/lucene/core/src/java/org/apache/lucene/index/CheckIndex.java
+++ b/lucene/core/src/java/org/apache/lucene/index/CheckIndex.java
@@ -1376,6 +1376,9 @@ public final class CheckIndex implements Closeable {
           if (termsEnum.totalTermFreq() != termsEnum.docFreq()) {
             throw new RuntimeException("field \"" + field + "\" hasFreqs is false, but TermsEnum.totalTermFreq()=" + termsEnum.totalTermFreq() + " (should be " + termsEnum.docFreq() + ")");
           }
+          if (termsEnum.maxTermFreq() != 1) {
+            throw new RuntimeException("field \"" + field + "\" hasFreqs is false, but TermsEnum.maxTermFreq()=" + termsEnum.maxTermFreq() + " (should be 1)");
+          }
         }
         
         if (hasOrd) {
@@ -1398,6 +1401,7 @@ public final class CheckIndex implements Closeable {
         int docCount = 0;
         boolean hasNonDeletedDocs = false;
         long totalTermFreq = 0;
+        int maxTermFreq = 0;
         while(true) {
           final int doc = postings.nextDoc();
           if (doc == DocIdSetIterator.NO_MORE_DOCS) {
@@ -1417,6 +1421,7 @@ public final class CheckIndex implements Closeable {
             }
           }
           totalTermFreq += freq;
+          maxTermFreq = Math.max(maxTermFreq, freq);
 
           if (liveDocs == null || liveDocs.get(doc)) {
             hasNonDeletedDocs = true;
@@ -1507,7 +1512,18 @@ public final class CheckIndex implements Closeable {
         if (hasFreqs == false && totalTermFreq != docFreq) {
           throw new RuntimeException("term " + term + " totalTermFreq=" + totalTermFreq + " !=  docFreq=" + docFreq);
         }
-        
+
+        final int maxTermFreq2 = termsEnum.maxTermFreq();
+        if (hasFreqs == false && maxTermFreq != 1) {
+          throw new RuntimeException("term " + term + " maxTermFreq=" + maxTermFreq + " !=  1");
+        }
+        if (hasFreqs) {
+          long unsupportedMaxTermFreq = Math.min(Integer.MAX_VALUE, totalTermFreq - docFreq + 1);
+          if (maxTermFreq2 != maxTermFreq && maxTermFreq2 != unsupportedMaxTermFreq) {
+            throw new RuntimeException("term " + term + " maxTermFreq=" + maxTermFreq2 + " != recomputed maxTermFreq=" + maxTermFreq + " and != unsupported maxTermFreq=" + unsupportedMaxTermFreq);
+          }
+        }
+
         // Test skipping
         if (hasPositions) {
           for(int idx=0;idx<7;idx++) {
diff --git a/lucene/core/src/java/org/apache/lucene/index/FilterLeafReader.java b/lucene/core/src/java/org/apache/lucene/index/FilterLeafReader.java
index 0450038..bdb4fb9 100644
--- a/lucene/core/src/java/org/apache/lucene/index/FilterLeafReader.java
+++ b/lucene/core/src/java/org/apache/lucene/index/FilterLeafReader.java
@@ -210,6 +210,11 @@ public abstract class FilterLeafReader extends LeafReader {
     }
 
     @Override
+    public int maxTermFreq() throws IOException {
+      return in.maxTermFreq();
+    }
+
+    @Override
     public PostingsEnum postings(PostingsEnum reuse, int flags) throws IOException {
       return in.postings(reuse, flags);
     }
diff --git a/lucene/core/src/java/org/apache/lucene/index/FilteredTermsEnum.java b/lucene/core/src/java/org/apache/lucene/index/FilteredTermsEnum.java
index 6498dc0..d72a1cf 100644
--- a/lucene/core/src/java/org/apache/lucene/index/FilteredTermsEnum.java
+++ b/lucene/core/src/java/org/apache/lucene/index/FilteredTermsEnum.java
@@ -145,6 +145,11 @@ public abstract class FilteredTermsEnum extends TermsEnum {
     return tenum.totalTermFreq();
   }
 
+  @Override
+  public int maxTermFreq() throws IOException {
+    return tenum.maxTermFreq();
+  }
+
   /** This enum does not support seeking!
    * @throws UnsupportedOperationException In general, subclasses do not
    *         support seeking.
diff --git a/lucene/core/src/java/org/apache/lucene/index/FreqProxFields.java b/lucene/core/src/java/org/apache/lucene/index/FreqProxFields.java
index fb78a92..85c59bf 100644
--- a/lucene/core/src/java/org/apache/lucene/index/FreqProxFields.java
+++ b/lucene/core/src/java/org/apache/lucene/index/FreqProxFields.java
@@ -225,6 +225,14 @@ class FreqProxFields extends Fields {
     }
 
     @Override
+    public int maxTermFreq() {
+      // We do not store this per-term, and we cannot
+      // implement this at merge time w/o an added pass
+      // through the postings:
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
     public PostingsEnum postings(PostingsEnum reuse, int flags) {
       if (PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {
         FreqProxPostingsEnum posEnum;
diff --git a/lucene/core/src/java/org/apache/lucene/index/MultiTermsEnum.java b/lucene/core/src/java/org/apache/lucene/index/MultiTermsEnum.java
index 7db838b..870e132 100644
--- a/lucene/core/src/java/org/apache/lucene/index/MultiTermsEnum.java
+++ b/lucene/core/src/java/org/apache/lucene/index/MultiTermsEnum.java
@@ -333,6 +333,17 @@ public final class MultiTermsEnum extends TermsEnum {
   }
 
   @Override
+  public int maxTermFreq() throws IOException {
+    int max = 0;
+    for(int i=0;i<numTop;i++) {
+      final int v = top[i].terms.maxTermFreq();
+      assert v != -1;
+      max = Math.max(max, v);
+    }
+    return max;
+  }
+
+  @Override
   public PostingsEnum postings(PostingsEnum reuse, int flags) throws IOException {
     MultiPostingsEnum docsEnum;
 
diff --git a/lucene/core/src/java/org/apache/lucene/index/SortedDocValuesTermsEnum.java b/lucene/core/src/java/org/apache/lucene/index/SortedDocValuesTermsEnum.java
index ccee7a3..9959848 100644
--- a/lucene/core/src/java/org/apache/lucene/index/SortedDocValuesTermsEnum.java
+++ b/lucene/core/src/java/org/apache/lucene/index/SortedDocValuesTermsEnum.java
@@ -105,6 +105,11 @@ class SortedDocValuesTermsEnum extends TermsEnum {
   }
 
   @Override
+  public int maxTermFreq() {
+    throw new UnsupportedOperationException();
+  }
+
+  @Override
   public PostingsEnum postings(PostingsEnum reuse, int flags) throws IOException {
     throw new UnsupportedOperationException();
   }
diff --git a/lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesTermsEnum.java b/lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesTermsEnum.java
index eba95c9..9724922 100644
--- a/lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesTermsEnum.java
+++ b/lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesTermsEnum.java
@@ -105,6 +105,11 @@ class SortedSetDocValuesTermsEnum extends TermsEnum {
   }
 
   @Override
+  public int maxTermFreq() {
+    throw new UnsupportedOperationException();
+  }
+
+  @Override
   public PostingsEnum postings(PostingsEnum reuse, int flags) throws IOException {
     throw new UnsupportedOperationException();
   }
diff --git a/lucene/core/src/java/org/apache/lucene/index/TermsEnum.java b/lucene/core/src/java/org/apache/lucene/index/TermsEnum.java
index 4b5755a..73c5888 100644
--- a/lucene/core/src/java/org/apache/lucene/index/TermsEnum.java
+++ b/lucene/core/src/java/org/apache/lucene/index/TermsEnum.java
@@ -136,6 +136,15 @@ public abstract class TermsEnum implements BytesRefIterator {
    *  deleted documents into account. */
   public abstract long totalTermFreq() throws IOException;
 
+  /** Returns the maximum number of occurrences of this term
+   *  in a single document. This returns {@code 1} when
+   *  frequencies are not stored. If the codec does not
+   *  support this statistic,
+   *  {@code min(Integer.MAX_VALUE, totalTermFreq() - docFreq() + 1)}
+   *  is returned.
+   */
+  public abstract int maxTermFreq() throws IOException;
+
   /** Get {@link PostingsEnum} for the current term.  Do not
    *  call this when the enum is unpositioned.  This method
    *  will not return null.
@@ -218,7 +227,12 @@ public abstract class TermsEnum implements BytesRefIterator {
     public long totalTermFreq() {
       throw new IllegalStateException("this method should never be called");
     }
-      
+
+    @Override
+    public int maxTermFreq() throws IOException {
+      throw new IllegalStateException("this method should never be called");
+    }
+
     @Override
     public long ord() {
       throw new IllegalStateException("this method should never be called");
diff --git a/lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer.java b/lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer.java
index 85a242e..cf55840 100644
--- a/lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer.java
+++ b/lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer.java
@@ -44,11 +44,12 @@ final class ExactPhraseScorer extends Scorer {
 
   private final Similarity.SimScorer docScorer;
   private final boolean needsScores;
-  private float matchCost;
+  private final float matchCost;
+  private final float maxScore;
 
   ExactPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,
                     Similarity.SimScorer docScorer, boolean needsScores,
-                    float matchCost) throws IOException {
+                    float matchCost, long maxFreq) throws IOException {
     super(weight);
     this.docScorer = docScorer;
     this.needsScores = needsScores;
@@ -63,6 +64,7 @@ final class ExactPhraseScorer extends Scorer {
     assert TwoPhaseIterator.unwrap(conjunction) == null;
     this.postings = postingsAndPositions.toArray(new PostingsAndPosition[postingsAndPositions.size()]);
     this.matchCost = matchCost;
+    this.maxScore = docScorer.maxScore(maxFreq);
   }
 
   @Override
@@ -106,7 +108,7 @@ final class ExactPhraseScorer extends Scorer {
 
   @Override
   public float maxScore() {
-    return docScorer.maxScore(Integer.MAX_VALUE);
+    return docScorer.maxScore(maxScore);
   }
 
   /** Advance the given pos enum to the first doc on or after {@code target}.
diff --git a/lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum.java b/lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum.java
index 881c5dd..05a2d00 100644
--- a/lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum.java
+++ b/lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum.java
@@ -268,6 +268,11 @@ public final class FuzzyTermsEnum extends TermsEnum {
   }
   
   @Override
+  public int maxTermFreq() throws IOException {
+    return actualEnum.maxTermFreq();
+  }
+  
+  @Override
   public PostingsEnum postings(PostingsEnum reuse, int flags) throws IOException {
     return actualEnum.postings(reuse, flags);
   }
diff --git a/lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.java b/lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.java
index 44a5ad0..b322c11 100644
--- a/lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.java
@@ -247,19 +247,21 @@ public class MultiPhraseQuery extends Query {
       // Reuse single TermsEnum below:
       final TermsEnum termsEnum = fieldTerms.iterator();
       float totalMatchCost = 0;
-
+      int maxFreq = Integer.MAX_VALUE;
       for (int pos=0; pos<postingsFreqs.length; pos++) {
         Term[] terms = termArrays[pos];
         List<PostingsEnum> postings = new ArrayList<>();
-
+        long sumMaxFreqs = 0;
         for (Term term : terms) {
           TermState termState = termContexts.get(term).get(context.ord);
           if (termState != null) {
             termsEnum.seekExact(term.bytes(), termState);
+            sumMaxFreqs += termsEnum.maxTermFreq();
             postings.add(termsEnum.postings(null, PostingsEnum.POSITIONS));
             totalMatchCost += PhraseQuery.termPositionsCost(termsEnum);
           }
         }
+        maxFreq = Math.toIntExact(Math.min(maxFreq, sumMaxFreqs));
 
         if (postings.isEmpty()) {
           return null;
@@ -283,7 +285,7 @@ public class MultiPhraseQuery extends Query {
       if (slop == 0) {
         return new ExactPhraseScorer(this, postingsFreqs,
                                       similarity.simScorer(stats, context),
-                                      needsScores, totalMatchCost);
+                                      needsScores, totalMatchCost, maxFreq);
       } else {
         return new SloppyPhraseScorer(this, postingsFreqs, slop,
                                         similarity.simScorer(stats, context),
diff --git a/lucene/core/src/java/org/apache/lucene/search/PhraseQuery.java b/lucene/core/src/java/org/apache/lucene/search/PhraseQuery.java
index e0b60be..200d579 100644
--- a/lucene/core/src/java/org/apache/lucene/search/PhraseQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/PhraseQuery.java
@@ -412,7 +412,7 @@ public class PhraseQuery extends Query {
       // Reuse single TermsEnum below:
       final TermsEnum te = fieldTerms.iterator();
       float totalMatchCost = 0;
-      
+      int maxFreq = Integer.MAX_VALUE;
       for (int i = 0; i < terms.length; i++) {
         final Term t = terms[i];
         final TermState state = states[i].get(context.ord);
@@ -421,6 +421,7 @@ public class PhraseQuery extends Query {
           return null;
         }
         te.seekExact(t.bytes(), state);
+        maxFreq = Math.min(maxFreq, te.maxTermFreq());
         PostingsEnum postingsEnum = te.postings(null, PostingsEnum.POSITIONS);
         postingsFreqs[i] = new PostingsAndFreq(postingsEnum, positions[i], t);
         totalMatchCost += termPositionsCost(te);
@@ -434,7 +435,7 @@ public class PhraseQuery extends Query {
       if (slop == 0) {  // optimize exact case
         return new ExactPhraseScorer(this, postingsFreqs,
                                       similarity.simScorer(stats, context),
-                                      needsScores, totalMatchCost);
+                                      needsScores, totalMatchCost, maxFreq);
       } else {
         return new SloppyPhraseScorer(this, postingsFreqs, slop,
                                         similarity.simScorer(stats, context),
diff --git a/lucene/core/src/java/org/apache/lucene/search/SynonymQuery.java b/lucene/core/src/java/org/apache/lucene/search/SynonymQuery.java
index ce9d6e0..62c424e 100644
--- a/lucene/core/src/java/org/apache/lucene/search/SynonymQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/SynonymQuery.java
@@ -25,8 +25,6 @@ import java.util.List;
 import java.util.Objects;
 import java.util.Set;
 
-import org.apache.lucene.index.FieldInfo;
-import org.apache.lucene.index.IndexOptions;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.LeafReaderContext;
 import org.apache.lucene.index.PostingsEnum;
@@ -191,15 +189,6 @@ public final class SynonymQuery extends Query {
     @Override
     public Scorer scorer(LeafReaderContext context) throws IOException {
       Similarity.SimScorer simScorer = null;
-      IndexOptions indexOptions = IndexOptions.NONE;
-      if (terms.length > 0) {
-        FieldInfo info = context.reader()
-            .getFieldInfos()
-            .fieldInfo(terms[0].field());
-        if (info != null) {
-          indexOptions = info.getIndexOptions();
-        }
-      }
       // we use termscorers + disjunction as an impl detail
       List<Scorer> subScorers = new ArrayList<>();
       long maxFreq = 0;
@@ -208,9 +197,7 @@ public final class SynonymQuery extends Query {
         if (state != null) {
           TermsEnum termsEnum = context.reader().terms(terms[i].field()).iterator();
           termsEnum.seekExact(terms[i].bytes(), state);
-
-          maxFreq += getMaxFreq(indexOptions, termsEnum.totalTermFreq(), termsEnum.docFreq());
-
+          maxFreq += termsEnum.maxTermFreq();
           PostingsEnum postings = termsEnum.postings(null, PostingsEnum.FREQS);
           // lazy init sim, in case no terms exist
           if (simScorer == null) {
@@ -236,17 +223,6 @@ public final class SynonymQuery extends Query {
 
   }
 
-  private long getMaxFreq(IndexOptions indexOptions, long ttf, long df) {
-    // TODO: store the max term freq?
-    if (indexOptions.compareTo(IndexOptions.DOCS) <= 0) {
-      // omitTFAP field, tf values are implicitly 1.
-      return 1;
-    } else {
-      assert ttf >= 0;
-      return Math.min(Integer.MAX_VALUE, ttf - df + 1);
-    }
-  }
-
   static class SynonymScorer extends DisjunctionScorer {
     private final Similarity.SimScorer similarity;
     private final float maxFreq;
diff --git a/lucene/core/src/java/org/apache/lucene/search/TermQuery.java b/lucene/core/src/java/org/apache/lucene/search/TermQuery.java
index 925fe93..c262aa5 100644
--- a/lucene/core/src/java/org/apache/lucene/search/TermQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/TermQuery.java
@@ -21,7 +21,6 @@ import java.io.IOException;
 import java.util.Objects;
 import java.util.Set;
 
-import org.apache.lucene.index.IndexOptions;
 import org.apache.lucene.index.IndexReaderContext;
 import org.apache.lucene.index.LeafReader;
 import org.apache.lucene.index.LeafReaderContext;
@@ -95,25 +94,9 @@ public class TermQuery extends Query {
       if (termsEnum == null) {
         return null;
       }
-      IndexOptions indexOptions = context.reader()
-          .getFieldInfos()
-          .fieldInfo(getTerm().field())
-          .getIndexOptions();
       PostingsEnum docs = termsEnum.postings(null, needsScores ? PostingsEnum.FREQS : PostingsEnum.NONE);
       assert docs != null;
-      return new TermScorer(this, docs, similarity.simScorer(stats, context),
-          getMaxFreq(indexOptions, termsEnum.totalTermFreq(), termsEnum.docFreq()));
-    }
-
-    private long getMaxFreq(IndexOptions indexOptions, long ttf, long df) {
-      // TODO: store the max term freq?
-      if (indexOptions.compareTo(IndexOptions.DOCS) <= 0) {
-        // omitTFAP field, tf values are implicitly 1.
-        return 1;
-      } else {
-        assert ttf >= 0;
-        return Math.min(Integer.MAX_VALUE, ttf - df + 1);
-      }
+      return new TermScorer(this, docs, similarity.simScorer(stats, context), termsEnum.maxTermFreq());
     }
 
     @Override
diff --git a/lucene/core/src/java/org/apache/lucene/search/TermScorer.java b/lucene/core/src/java/org/apache/lucene/search/TermScorer.java
index a4aeb04..ff2f622 100644
--- a/lucene/core/src/java/org/apache/lucene/search/TermScorer.java
+++ b/lucene/core/src/java/org/apache/lucene/search/TermScorer.java
@@ -27,7 +27,7 @@ import org.apache.lucene.search.similarities.Similarity;
 final class TermScorer extends Scorer {
   private final PostingsEnum postingsEnum;
   private final Similarity.SimScorer docScorer;
-  private final float maxFreq;
+  private final float maxScore;
 
   /**
    * Construct a <code>TermScorer</code>.
@@ -46,7 +46,7 @@ final class TermScorer extends Scorer {
     super(weight);
     this.docScorer = docScorer;
     this.postingsEnum = td;
-    this.maxFreq = maxFreq;
+    this.maxScore = docScorer.maxScore(maxFreq);
   }
 
   @Override
@@ -71,7 +71,7 @@ final class TermScorer extends Scorer {
 
   @Override
   public float maxScore() {
-    return docScorer.maxScore(maxFreq);
+    return maxScore;
   }
 
   /** Returns a string representation of this <code>TermScorer</code>. */
diff --git a/lucene/core/src/test/org/apache/lucene/index/TestCodecs.java b/lucene/core/src/test/org/apache/lucene/index/TestCodecs.java
index 4625f73..4f7efe5 100644
--- a/lucene/core/src/test/org/apache/lucene/index/TestCodecs.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestCodecs.java
@@ -17,6 +17,7 @@
 package org.apache.lucene.index;
 
 
+import java.io.IOException;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.HashMap;
@@ -672,6 +673,11 @@ public class TestCodecs extends LuceneTestCase {
     }
 
     @Override
+    public int maxTermFreq() throws IOException {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
     public PostingsEnum postings(PostingsEnum reuse, int flags) {
       return new DataPostingsEnum(fieldData.terms[upto]);
     }
diff --git a/lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java b/lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java
index 0d8d949..4cb6f2d 100644
--- a/lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java
+++ b/lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java
@@ -1416,6 +1416,11 @@ public class MemoryIndex {
       }
 
       @Override
+      public int maxTermFreq() {
+        return info.sliceArray.freq[info.sortedTerms[termUpto]];
+      }
+
+      @Override
       public PostingsEnum postings(PostingsEnum reuse, int flags) {
         if (reuse == null || !(reuse instanceof MemoryPostingsEnum)) {
           reuse = new MemoryPostingsEnum();
diff --git a/lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnum.java b/lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnum.java
index 0af64d9..b47a265 100644
--- a/lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnum.java
+++ b/lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnum.java
@@ -993,6 +993,12 @@ public final class IDVersionSegmentTermsEnum extends TermsEnum {
   }
 
   @Override
+  public int maxTermFreq() throws IOException {
+    assert !eof;
+    return 1;
+  }
+
+  @Override
   public PostingsEnum postings(PostingsEnum reuse, int flags) throws IOException {
     assert !eof;
     //if (DEBUG) {
diff --git a/lucene/test-framework/src/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat.java b/lucene/test-framework/src/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat.java
index 4b85f13..9b722f6 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat.java
@@ -175,6 +175,7 @@ public final class RAMOnlyPostingsFormat extends PostingsFormat {
   static class RAMTerm implements Accountable {
     final String term;
     long totalTermFreq;
+    int maxTermFreq;
     final List<RAMDoc> docs = new ArrayList<>();
     public RAMTerm(String term) {
       this.term = term;
@@ -286,6 +287,7 @@ public final class RAMOnlyPostingsFormat extends PostingsFormat {
 
           int docFreq = 0;
           long totalTermFreq = 0;
+          int maxTermFreq = 0;
           while (true) {
             int docID = postingsEnum.nextDoc();
             if (docID == PostingsEnum.NO_MORE_DOCS) {
@@ -298,6 +300,7 @@ public final class RAMOnlyPostingsFormat extends PostingsFormat {
             if (writeFreqs) {
               freq = postingsEnum.freq();
               totalTermFreq += freq;
+              maxTermFreq = Math.max(freq, maxTermFreq);
             } else {
               freq = -1;
             }
@@ -322,7 +325,7 @@ public final class RAMOnlyPostingsFormat extends PostingsFormat {
 
             postingsWriter.finishDoc();
           }
-          termsConsumer.finishTerm(term, new TermStats(docFreq, totalTermFreq));
+          termsConsumer.finishTerm(term, new TermStats(docFreq, totalTermFreq, maxTermFreq));
           sumDocFreq += docFreq;
           sumTotalTermFreq += totalTermFreq;
         }
@@ -356,6 +359,7 @@ public final class RAMOnlyPostingsFormat extends PostingsFormat {
       assert stats.docFreq > 0;
       assert stats.docFreq == current.docs.size();
       current.totalTermFreq = stats.totalTermFreq;
+      current.maxTermFreq = stats.maxTermFreq;
       field.termToDocs.put(current.term, current);
     }
 
@@ -468,6 +472,11 @@ public final class RAMOnlyPostingsFormat extends PostingsFormat {
     }
 
     @Override
+    public int maxTermFreq() throws IOException {
+      return ramField.termToDocs.get(current).maxTermFreq;
+    }
+
+    @Override
     public PostingsEnum postings(PostingsEnum reuse, int flags) {
       return new RAMDocsEnum(ramField.termToDocs.get(current));
     }
diff --git a/lucene/test-framework/src/java/org/apache/lucene/index/RandomPostingsTester.java b/lucene/test-framework/src/java/org/apache/lucene/index/RandomPostingsTester.java
index d5eb105..f9de4a3 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/index/RandomPostingsTester.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/index/RandomPostingsTester.java
@@ -582,6 +582,11 @@ public class RandomPostingsTester {
     }
 
     @Override
+    public int maxTermFreq() {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
     public final PostingsEnum postings(PostingsEnum reuse, int flags) throws IOException {
       if (PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {
         if (maxAllowed.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {
diff --git a/solr/core/src/java/org/apache/solr/query/SolrRangeQuery.java b/solr/core/src/java/org/apache/solr/query/SolrRangeQuery.java
index 2b0d08a..2b78849 100644
--- a/solr/core/src/java/org/apache/solr/query/SolrRangeQuery.java
+++ b/solr/core/src/java/org/apache/solr/query/SolrRangeQuery.java
@@ -234,6 +234,11 @@ public final class SolrRangeQuery extends ExtendedQueryBase implements DocSetPro
     }
 
     @Override
+    public int maxTermFreq() throws IOException {
+      return te.maxTermFreq();
+    }
+
+    @Override
     public PostingsEnum postings(PostingsEnum reuse, int flags) throws IOException {
       return te.postings(reuse, flags);
     }
diff --git a/solr/core/src/java/org/apache/solr/uninverting/DocTermOrds.java b/solr/core/src/java/org/apache/solr/uninverting/DocTermOrds.java
index b56d462..cf311a2 100644
--- a/solr/core/src/java/org/apache/solr/uninverting/DocTermOrds.java
+++ b/solr/core/src/java/org/apache/solr/uninverting/DocTermOrds.java
@@ -634,6 +634,11 @@ public class DocTermOrds implements Accountable {
     }
 
     @Override
+    public int maxTermFreq() throws IOException {
+      return termsEnum.maxTermFreq();
+    }
+
+    @Override
     public long ord() {
       return ordBase + ord;
     }
