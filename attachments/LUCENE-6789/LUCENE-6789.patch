Index: lucene/benchmark/src/test/org/apache/lucene/benchmark/quality/TestQualityRun.java
===================================================================
--- lucene/benchmark/src/test/org/apache/lucene/benchmark/quality/TestQualityRun.java	(revision 1701895)
+++ lucene/benchmark/src/test/org/apache/lucene/benchmark/quality/TestQualityRun.java	(working copy)
@@ -25,6 +25,7 @@
 import org.apache.lucene.index.DirectoryReader;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.similarities.ClassicSimilarity;
 import org.apache.lucene.store.Directory;
 
 import java.io.BufferedReader;
@@ -74,6 +75,8 @@
     Directory dir = newFSDirectory(getWorkDir().resolve("index"));
     IndexReader reader = DirectoryReader.open(dir);
     IndexSearcher searcher = new IndexSearcher(reader);
+    // TODO: adapt this test data to bm25
+    searcher.setSimilarity(new ClassicSimilarity());
 
     QualityQueryParser qqParser = new SimpleQQParser("title","body");
     QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);
Index: lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier.java
===================================================================
--- lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier.java	(revision 1701895)
+++ lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier.java	(working copy)
@@ -36,7 +36,7 @@
 import org.apache.lucene.search.ScoreDoc;
 import org.apache.lucene.search.TopDocs;
 import org.apache.lucene.search.WildcardQuery;
-import org.apache.lucene.search.similarities.DefaultSimilarity;
+import org.apache.lucene.search.similarities.ClassicSimilarity;
 import org.apache.lucene.search.similarities.Similarity;
 import org.apache.lucene.util.BytesRef;
 
@@ -61,7 +61,7 @@
    * @param leafReader     the reader on the index to be used for classification
    * @param analyzer       an {@link Analyzer} used to analyze unseen text
    * @param similarity     the {@link Similarity} to be used by the underlying {@link IndexSearcher} or {@code null}
-   *                       (defaults to {@link org.apache.lucene.search.similarities.DefaultSimilarity})
+   *                       (defaults to {@link org.apache.lucene.search.similarities.ClassicSimilarity})
    * @param query          a {@link Query} to eventually filter the docs used for training the classifier, or {@code null}
    *                       if all the indexed docs should be used
    * @param k              the no. of docs to select in the MLT results to find the nearest neighbor
@@ -81,7 +81,7 @@
     if (similarity != null) {
       this.indexSearcher.setSimilarity(similarity);
     } else {
-      this.indexSearcher.setSimilarity(new DefaultSimilarity());
+      this.indexSearcher.setSimilarity(new ClassicSimilarity());
     }
     if (minDocsFreq > 0) {
       mlt.setMinDocFreq(minDocsFreq);
Index: lucene/core/src/java/org/apache/lucene/index/IndexableField.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/IndexableField.java	(revision 1701895)
+++ lucene/core/src/java/org/apache/lucene/index/IndexableField.java	(working copy)
@@ -21,7 +21,7 @@
 
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.TokenStream;
-import org.apache.lucene.search.similarities.DefaultSimilarity; // javadocs
+import org.apache.lucene.search.similarities.ClassicSimilarity; // javadocs
 import org.apache.lucene.search.similarities.Similarity; // javadocs
 
 // TODO: how to handle versioning here...?
@@ -59,7 +59,7 @@
    * <p>The boost is used to compute the norm factor for the field.  By
    * default, in the {@link Similarity#computeNorm(FieldInvertState)} method, 
    * the boost value is multiplied by the length normalization factor and then
-   * rounded by {@link DefaultSimilarity#encodeNormValue(float)} before it is stored in the
+   * rounded by {@link ClassicSimilarity#encodeNormValue(float)} before it is stored in the
    * index.  One should attempt to ensure that this product does not overflow
    * the range of that encoding.
    * <p>
@@ -68,7 +68,7 @@
    * omits normalization values ({@link IndexableFieldType#omitNorms()} returns true).
    *
    * @see Similarity#computeNorm(FieldInvertState)
-   * @see DefaultSimilarity#encodeNormValue(float)
+   * @see ClassicSimilarity#encodeNormValue(float)
    */
   public float boost();
 }
Index: lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer.java	(revision 1701895)
+++ lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer.java	(working copy)
@@ -28,7 +28,7 @@
 abstract class DisjunctionScorer extends Scorer {
 
   private final boolean needsScores;
-  private final DisiPriorityQueue<Scorer> subScorers;
+  final DisiPriorityQueue<Scorer> subScorers;
   private final long cost;
 
   /** Linked list of scorers which are on the current doc */
Index: lucene/core/src/java/org/apache/lucene/search/IndexSearcher.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/IndexSearcher.java	(revision 1701895)
+++ lucene/core/src/java/org/apache/lucene/search/IndexSearcher.java	(working copy)
@@ -43,7 +43,7 @@
 import org.apache.lucene.index.Term;
 import org.apache.lucene.index.TermContext;
 import org.apache.lucene.index.Terms;
-import org.apache.lucene.search.similarities.DefaultSimilarity;
+import org.apache.lucene.search.similarities.BM25Similarity;
 import org.apache.lucene.search.similarities.Similarity;
 import org.apache.lucene.store.NIOFSDirectory;    // javadoc
 import org.apache.lucene.util.Bits;
@@ -142,7 +142,7 @@
   private final ExecutorService executor;
 
   // the default Similarity
-  private static final Similarity defaultSimilarity = new DefaultSimilarity();
+  private static final Similarity defaultSimilarity = new BM25Similarity();
 
   private QueryCache queryCache = DEFAULT_QUERY_CACHE;
   private QueryCachingPolicy queryCachingPolicy = DEFAULT_CACHING_POLICY;
@@ -330,7 +330,7 @@
    *  When {@code needsScores} is {@code true}, this returns the
    *  {@link Similarity} that has been set through {@link #setSimilarity(Similarity)}
    *  or the {@link #getDefaultSimilarity()} default {@link Similarity} if none
-   *  has been set explicitely. */
+   *  has been set explicitly. */
   public Similarity getSimilarity(boolean needsScores) {
     return needsScores ? similarity : NON_SCORING_SIMILARITY;
   }
Index: lucene/core/src/java/org/apache/lucene/search/SynonymQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/SynonymQuery.java	(revision 0)
+++ lucene/core/src/java/org/apache/lucene/search/SynonymQuery.java	(working copy)
@@ -0,0 +1,245 @@
+package org.apache.lucene.search;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+import java.util.Objects;
+import java.util.Set;
+
+import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.LeafReaderContext;
+import org.apache.lucene.index.PostingsEnum;
+import org.apache.lucene.index.Term;
+import org.apache.lucene.index.TermContext;
+import org.apache.lucene.index.TermState;
+import org.apache.lucene.index.TermsEnum;
+import org.apache.lucene.search.similarities.Similarity;
+import org.apache.lucene.search.similarities.Similarity.SimScorer;
+
+/**
+ * A query that treats multiple terms as synonyms.
+ * <p>
+ * For scoring purposes, this query tries to score the terms as if you
+ * had indexed them as one term: it will match any of the terms but
+ * only invoke the similarity a single time, scoring the sum of all
+ * term frequencies for the document.
+ */
+public class SynonymQuery extends Query {
+  private final Term terms[];
+  
+  /**
+   * Creates a new SynonymQuery, matching any of the supplied terms.
+   * <p>
+   * The terms must all have the same field.
+   */
+  public SynonymQuery(Term... terms) {
+    this.terms = Objects.requireNonNull(terms).clone();
+    // check that all terms are the same field
+    String field = null;
+    for (Term term : terms) {
+      if (field == null) {
+        field = term.field();
+      } else if (!term.field().equals(field)) {
+        throw new IllegalArgumentException("Synonyms must be across the same field");
+      }
+    }
+    if (terms.length > BooleanQuery.getMaxClauseCount()) {
+      throw new BooleanQuery.TooManyClauses();
+    }
+    Arrays.sort(this.terms);
+  }
+
+  @Override
+  public String toString(String field) {
+    StringBuilder builder = new StringBuilder("Synonym(");
+    for (int i = 0; i < terms.length; i++) {
+      if (i != 0) {
+        builder.append(" ");
+      }
+      Query termQuery = new TermQuery(terms[i]);
+      builder.append(termQuery.toString(field));
+    }
+    builder.append(")");
+    return builder.toString();
+  }
+
+  @Override
+  public int hashCode() {
+    final int prime = 31;
+    int result = super.hashCode();
+    result = prime * result + Arrays.hashCode(terms);
+    return result;
+  }
+
+  @Override
+  public boolean equals(Object obj) {
+    if (this == obj) return true;
+    if (!super.equals(obj)) return false;
+    if (getClass() != obj.getClass()) return false;
+    SynonymQuery other = (SynonymQuery) obj;
+    if (!Arrays.equals(terms, other.terms)) return false;
+    return true;
+  }
+
+  @Override
+  public Query rewrite(IndexReader reader) throws IOException {
+    // optimize zero and single term cases
+    if (terms.length == 0) {
+      return new BooleanQuery.Builder().build();
+    }
+    if (terms.length == 1) {
+      return new TermQuery(terms[0]);
+    }
+    return this;
+  }
+
+  @Override
+  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
+    if (needsScores) {
+      return new SynonymWeight(this, searcher);
+    } else {
+      // if scores are not needed, let BooleanWeight deal with optimizing that case.
+      BooleanQuery.Builder bq = new BooleanQuery.Builder();
+      for (Term term : terms) {
+        bq.add(new TermQuery(term), BooleanClause.Occur.SHOULD);
+      }
+      return searcher.rewrite(bq.build()).createWeight(searcher, needsScores);
+    }
+  }
+  
+  class SynonymWeight extends Weight {
+    private final TermContext termContexts[];
+    private final Similarity similarity;
+    private final Similarity.SimWeight simWeight;
+
+    SynonymWeight(Query query, IndexSearcher searcher) throws IOException {
+      super(query);
+      CollectionStatistics collectionStats = searcher.collectionStatistics(terms[0].field());
+      long docFreq = 0;
+      long totalTermFreq = 0;
+      termContexts = new TermContext[terms.length];
+      for (int i = 0; i < termContexts.length; i++) {
+        termContexts[i] = TermContext.build(searcher.getTopReaderContext(), terms[i]);
+        TermStatistics termStats = searcher.termStatistics(terms[i], termContexts[i]);
+        docFreq = Math.max(termStats.docFreq(), docFreq);
+        if (termStats.totalTermFreq() == -1) {
+          totalTermFreq = -1;
+        } else if (totalTermFreq != -1) {
+          totalTermFreq += termStats.totalTermFreq();
+        }
+      }
+      TermStatistics pseudoStats = new TermStatistics(null, docFreq, totalTermFreq);
+      this.similarity = searcher.getSimilarity(true);
+      this.simWeight = similarity.computeWeight(collectionStats, pseudoStats);
+    }
+
+    @Override
+    public void extractTerms(Set<Term> terms) {
+      for (Term term : SynonymQuery.this.terms) {
+        terms.add(term);
+      }
+    }
+
+    @Override
+    public Explanation explain(LeafReaderContext context, int doc) throws IOException {
+      Scorer scorer = scorer(context);
+      if (scorer != null) {
+        int newDoc = scorer.advance(doc);
+        if (newDoc == doc) {
+          final float freq;
+          if (scorer instanceof SynonymScorer) {
+            SynonymScorer synScorer = (SynonymScorer) scorer;
+            freq = synScorer.tf(synScorer.subScorers.topList());
+          } else {
+            assert scorer instanceof TermScorer;
+            freq = scorer.freq();
+          }
+          SimScorer docScorer = similarity.simScorer(simWeight, context);
+          Explanation freqExplanation = Explanation.match(freq, "termFreq=" + freq);
+          Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);
+          return Explanation.match(
+              scoreExplanation.getValue(),
+              "weight(" + getQuery() + " in " + doc + ") ["
+                  + similarity.getClass().getSimpleName() + "], result of:",
+              scoreExplanation);
+        }
+      }
+      return Explanation.noMatch("no matching term");
+    }
+
+    @Override
+    public float getValueForNormalization() throws IOException {
+      return simWeight.getValueForNormalization();
+    }
+
+    @Override
+    public void normalize(float norm, float boost) {
+      simWeight.normalize(norm, boost);
+    }
+
+    @Override
+    public Scorer scorer(LeafReaderContext context) throws IOException {
+      Similarity.SimScorer simScorer = similarity.simScorer(simWeight, context);
+      // we use termscorers + disjunction as an impl detail
+      List<Scorer> subScorers = new ArrayList<>();
+      for (int i = 0; i < terms.length; i++) {
+        TermState state = termContexts[i].get(context.ord);
+        if (state != null) {
+          TermsEnum termsEnum = context.reader().terms(terms[i].field()).iterator();
+          termsEnum.seekExact(terms[i].bytes(), state);
+          PostingsEnum postings = termsEnum.postings(null, PostingsEnum.FREQS);
+          subScorers.add(new TermScorer(this, postings, simScorer));
+        }
+      }
+      if (subScorers.isEmpty()) {
+        return null;
+      } else if (subScorers.size() == 1) {
+        // we must optimize this case (term not in segment), disjunctionscorer requires >= 2 subs
+        return subScorers.get(0);
+      } else {
+        return new SynonymScorer(simScorer, this, subScorers);
+      }
+    }
+  }
+  
+  static class SynonymScorer extends DisjunctionScorer {
+    private final Similarity.SimScorer similarity;
+    
+    SynonymScorer(Similarity.SimScorer similarity, Weight weight, List<Scorer> subScorers) {
+      super(weight, subScorers, true);
+      this.similarity = similarity;
+    }
+
+    @Override
+    protected float score(DisiWrapper<Scorer> topList) throws IOException {
+      return similarity.score(topList.doc, tf(topList));
+    }
+    
+    /** combines TF of all subs. */
+    final int tf(DisiWrapper<Scorer> topList) throws IOException {
+      int tf = 0;
+      for (DisiWrapper<Scorer> w = topList; w != null; w = w.next) {
+        tf += w.iterator.freq();
+      }
+      return tf;
+    }
+  }
+}

Property changes on: lucene/core/src/java/org/apache/lucene/search/SynonymQuery.java
___________________________________________________________________
Added: svn:eol-style
## -0,0 +1 ##
+native
\ No newline at end of property
Index: lucene/core/src/java/org/apache/lucene/search/payloads/PayloadScoreQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/payloads/PayloadScoreQuery.java	(revision 1701895)
+++ lucene/core/src/java/org/apache/lucene/search/payloads/PayloadScoreQuery.java	(working copy)
@@ -28,7 +28,7 @@
 import org.apache.lucene.search.Explanation;
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.Scorer;
-import org.apache.lucene.search.similarities.DefaultSimilarity;
+import org.apache.lucene.search.similarities.ClassicSimilarity;
 import org.apache.lucene.search.similarities.Similarity;
 import org.apache.lucene.search.spans.SpanCollector;
 import org.apache.lucene.search.spans.SpanQuery;
@@ -42,7 +42,7 @@
  * wrapped SpanQuery
  *
  * NOTE: In order to take advantage of this with the default scoring implementation
- * ({@link DefaultSimilarity}), you must override {@link DefaultSimilarity#scorePayload(int, int, int, BytesRef)},
+ * ({@link ClassicSimilarity}), you must override {@link ClassicSimilarity#scorePayload(int, int, int, BytesRef)},
  * which returns 1 by default.
  *
  * @see org.apache.lucene.search.similarities.Similarity.SimScorer#computePayloadFactor(int, int, int, BytesRef)
Index: lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity.java	(revision 1701895)
+++ lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity.java	(working copy)
@@ -35,12 +35,10 @@
  * Susan Jones, Micheline Hancock-Beaulieu, and Mike Gatford. Okapi at TREC-3.
  * In Proceedings of the Third <b>T</b>ext <b>RE</b>trieval <b>C</b>onference (TREC 1994).
  * Gaithersburg, USA, November 1994.
- * @lucene.experimental
  */
 public class BM25Similarity extends Similarity {
   private final float k1;
   private final float b;
-  // TODO: should we add a delta like sifaka.cs.uiuc.edu/~ylv2/pub/sigir11-bm25l.pdf ?
 
   /**
    * BM25 with the supplied parameter values.
@@ -54,8 +52,8 @@
   
   /** BM25 with these default values:
    * <ul>
-   *   <li>{@code k1 = 1.2},
-   *   <li>{@code b = 0.75}.</li>
+   *   <li>{@code k1 = 1.2}</li>
+   *   <li>{@code b = 0.75}</li>
    * </ul>
    */
   public BM25Similarity() {
@@ -333,7 +331,7 @@
    * Returns the <code>k1</code> parameter
    * @see #BM25Similarity(float, float) 
    */
-  public float getK1() {
+  public final float getK1() {
     return k1;
   }
   
@@ -341,7 +339,7 @@
    * Returns the <code>b</code> parameter 
    * @see #BM25Similarity(float, float) 
    */
-  public float getB() {
+  public final float getB() {
     return b;
   }
 }
Index: lucene/core/src/java/org/apache/lucene/search/similarities/ClassicSimilarity.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/similarities/ClassicSimilarity.java	(revision 1701895)
+++ lucene/core/src/java/org/apache/lucene/search/similarities/ClassicSimilarity.java	(working copy)
@@ -42,7 +42,7 @@
  * Last, note that search time is too late to modify this <i>norm</i> part of
  * scoring, e.g. by using a different {@link Similarity} for search.
  */
-public class DefaultSimilarity extends TFIDFSimilarity {
+public class ClassicSimilarity extends TFIDFSimilarity {
   
   /** Cache of decoded bytes. */
   private static final float[] NORM_TABLE = new float[256];
@@ -54,7 +54,7 @@
   }
 
   /** Sole constructor: parameter-free */
-  public DefaultSimilarity() {}
+  public ClassicSimilarity() {}
   
   /** Implemented as <code>overlap / maxOverlap</code>. */
   @Override
@@ -168,6 +168,6 @@
 
   @Override
   public String toString() {
-    return "DefaultSimilarity";
+    return "ClassicSimilarity";
   }
 }
Index: lucene/core/src/java/org/apache/lucene/search/similarities/DefaultSimilarity.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/similarities/DefaultSimilarity.java	(revision 1701895)
+++ lucene/core/src/java/org/apache/lucene/search/similarities/DefaultSimilarity.java	(working copy)
@@ -1,173 +0,0 @@
-package org.apache.lucene.search.similarities;
-
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import org.apache.lucene.index.FieldInvertState;
-import org.apache.lucene.util.BytesRef;
-import org.apache.lucene.util.SmallFloat;
-
-/**
- * Expert: Default scoring implementation which {@link #encodeNormValue(float)
- * encodes} norm values as a single byte before being stored. At search time,
- * the norm byte value is read from the index
- * {@link org.apache.lucene.store.Directory directory} and
- * {@link #decodeNormValue(long) decoded} back to a float <i>norm</i> value.
- * This encoding/decoding, while reducing index size, comes with the price of
- * precision loss - it is not guaranteed that <i>decode(encode(x)) = x</i>. For
- * instance, <i>decode(encode(0.89)) = 0.875</i>.
- * <p>
- * Compression of norm values to a single byte saves memory at search time,
- * because once a field is referenced at search time, its norms - for all
- * documents - are maintained in memory.
- * <p>
- * The rationale supporting such lossy compression of norm values is that given
- * the difficulty (and inaccuracy) of users to express their true information
- * need by a query, only big differences matter. <br>
- * &nbsp;<br>
- * Last, note that search time is too late to modify this <i>norm</i> part of
- * scoring, e.g. by using a different {@link Similarity} for search.
- */
-public class DefaultSimilarity extends TFIDFSimilarity {
-  
-  /** Cache of decoded bytes. */
-  private static final float[] NORM_TABLE = new float[256];
-
-  static {
-    for (int i = 0; i < 256; i++) {
-      NORM_TABLE[i] = SmallFloat.byte315ToFloat((byte)i);
-    }
-  }
-
-  /** Sole constructor: parameter-free */
-  public DefaultSimilarity() {}
-  
-  /** Implemented as <code>overlap / maxOverlap</code>. */
-  @Override
-  public float coord(int overlap, int maxOverlap) {
-    return overlap / (float)maxOverlap;
-  }
-
-  /** Implemented as <code>1/sqrt(sumOfSquaredWeights)</code>. */
-  @Override
-  public float queryNorm(float sumOfSquaredWeights) {
-    return (float)(1.0 / Math.sqrt(sumOfSquaredWeights));
-  }
-  
-  /**
-   * Encodes a normalization factor for storage in an index.
-   * <p>
-   * The encoding uses a three-bit mantissa, a five-bit exponent, and the
-   * zero-exponent point at 15, thus representing values from around 7x10^9 to
-   * 2x10^-9 with about one significant decimal digit of accuracy. Zero is also
-   * represented. Negative numbers are rounded up to zero. Values too large to
-   * represent are rounded down to the largest representable value. Positive
-   * values too small to represent are rounded up to the smallest positive
-   * representable value.
-   * 
-   * @see org.apache.lucene.document.Field#setBoost(float)
-   * @see org.apache.lucene.util.SmallFloat
-   */
-  @Override
-  public final long encodeNormValue(float f) {
-    return SmallFloat.floatToByte315(f);
-  }
-
-  /**
-   * Decodes the norm value, assuming it is a single byte.
-   * 
-   * @see #encodeNormValue(float)
-   */
-  @Override
-  public final float decodeNormValue(long norm) {
-    return NORM_TABLE[(int) (norm & 0xFF)];  // & 0xFF maps negative bytes to positive above 127
-  }
-
-  /** Implemented as
-   *  <code>state.getBoost()*lengthNorm(numTerms)</code>, where
-   *  <code>numTerms</code> is {@link FieldInvertState#getLength()} if {@link
-   *  #setDiscountOverlaps} is false, else it's {@link
-   *  FieldInvertState#getLength()} - {@link
-   *  FieldInvertState#getNumOverlap()}.
-   *
-   *  @lucene.experimental */
-  @Override
-  public float lengthNorm(FieldInvertState state) {
-    final int numTerms;
-    if (discountOverlaps)
-      numTerms = state.getLength() - state.getNumOverlap();
-    else
-      numTerms = state.getLength();
-    return state.getBoost() * ((float) (1.0 / Math.sqrt(numTerms)));
-  }
-
-  /** Implemented as <code>sqrt(freq)</code>. */
-  @Override
-  public float tf(float freq) {
-    return (float)Math.sqrt(freq);
-  }
-    
-  /** Implemented as <code>1 / (distance + 1)</code>. */
-  @Override
-  public float sloppyFreq(int distance) {
-    return 1.0f / (distance + 1);
-  }
-  
-  /** The default implementation returns <code>1</code> */
-  @Override
-  public float scorePayload(int doc, int start, int end, BytesRef payload) {
-    return 1;
-  }
-
-  /** Implemented as <code>log((docCount+1)/(docFreq+1)) + 1</code>. */
-  @Override
-  public float idf(long docFreq, long docCount) {
-    return (float)(Math.log((docCount+1)/(double)(docFreq+1)) + 1.0);
-  }
-    
-  /** 
-   * True if overlap tokens (tokens with a position of increment of zero) are
-   * discounted from the document's length.
-   */
-  protected boolean discountOverlaps = true;
-
-  /** Determines whether overlap tokens (Tokens with
-   *  0 position increment) are ignored when computing
-   *  norm.  By default this is true, meaning overlap
-   *  tokens do not count when computing norms.
-   *
-   *  @lucene.experimental
-   *
-   *  @see #computeNorm
-   */
-  public void setDiscountOverlaps(boolean v) {
-    discountOverlaps = v;
-  }
-
-  /**
-   * Returns true if overlap tokens are discounted from the document's length. 
-   * @see #setDiscountOverlaps 
-   */
-  public boolean getDiscountOverlaps() {
-    return discountOverlaps;
-  }
-
-  @Override
-  public String toString() {
-    return "DefaultSimilarity";
-  }
-}
Index: lucene/core/src/java/org/apache/lucene/search/similarities/Similarity.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/similarities/Similarity.java	(revision 1701895)
+++ lucene/core/src/java/org/apache/lucene/search/similarities/Similarity.java	(working copy)
@@ -42,7 +42,7 @@
  * an information retrieval <i>model</i>.  If you are instead looking for a convenient way 
  * to alter Lucene's scoring, consider extending a higher-level implementation
  * such as {@link TFIDFSimilarity}, which implements the vector space model with this API, or 
- * just tweaking the default implementation: {@link DefaultSimilarity}.
+ * just tweaking the default implementation: {@link ClassicSimilarity}.
  * <p>
  * Similarity determines how Lucene weights terms, and Lucene interacts with
  * this class at both <a href="#indextime">index-time</a> and 
Index: lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity.java	(revision 1701895)
+++ lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity.java	(working copy)
@@ -308,13 +308,13 @@
  *      two term-queries with that same term and hence the computation would still be correct (although
  *      not very efficient).
  *      The default computation for <i>tf(t in d)</i> in
- *      {@link org.apache.lucene.search.similarities.DefaultSimilarity#tf(float) DefaultSimilarity} is:
+ *      {@link org.apache.lucene.search.similarities.ClassicSimilarity#tf(float) ClassicSimilarity} is:
  *
  *      <br>&nbsp;<br>
  *      <table cellpadding="2" cellspacing="2" border="0" style="width:auto; margin-left:auto; margin-right:auto" summary="term frequency computation">
  *        <tr>
  *          <td valign="middle" align="right" rowspan="1">
- *            {@link org.apache.lucene.search.similarities.DefaultSimilarity#tf(float) tf(t in d)} &nbsp; = &nbsp;
+ *            {@link org.apache.lucene.search.similarities.ClassicSimilarity#tf(float) tf(t in d)} &nbsp; = &nbsp;
  *          </td>
  *          <td valign="top" align="center" rowspan="1">
  *               frequency<sup><big>&frac12;</big></sup>
@@ -333,13 +333,13 @@
  *      <i>idf(t)</i> appears for <i>t</i> in both the query and the document,
  *      hence it is squared in the equation.
  *      The default computation for <i>idf(t)</i> in
- *      {@link org.apache.lucene.search.similarities.DefaultSimilarity#idf(long, long) DefaultSimilarity} is:
+ *      {@link org.apache.lucene.search.similarities.ClassicSimilarity#idf(long, long) ClassicSimilarity} is:
  *
  *      <br>&nbsp;<br>
  *      <table cellpadding="2" cellspacing="2" border="0" style="width:auto; margin-left:auto; margin-right:auto" summary="inverse document frequency computation">
  *        <tr>
  *          <td valign="middle" align="right">
- *            {@link org.apache.lucene.search.similarities.DefaultSimilarity#idf(long, long) idf(t)}&nbsp; = &nbsp;
+ *            {@link org.apache.lucene.search.similarities.ClassicSimilarity#idf(long, long) idf(t)}&nbsp; = &nbsp;
  *          </td>
  *          <td valign="middle" align="center">
  *            1 + log <big>(</big>
@@ -381,7 +381,7 @@
  *      This is a search time factor computed by the Similarity in effect at search time.
  *
  *      The default computation in
- *      {@link org.apache.lucene.search.similarities.DefaultSimilarity#queryNorm(float) DefaultSimilarity}
+ *      {@link org.apache.lucene.search.similarities.ClassicSimilarity#queryNorm(float) ClassicSimilarity}
  *      produces a <a href="http://en.wikipedia.org/wiki/Euclidean_norm#Euclidean_norm">Euclidean norm</a>:
  *      <br>&nbsp;<br>
  *      <table cellpadding="1" cellspacing="0" border="0" style="width:auto; margin-left:auto; margin-right:auto" summary="query normalization computation">
@@ -388,7 +388,7 @@
  *        <tr>
  *          <td valign="middle" align="right" rowspan="1">
  *            queryNorm(q)  &nbsp; = &nbsp;
- *            {@link org.apache.lucene.search.similarities.DefaultSimilarity#queryNorm(float) queryNorm(sumOfSquaredWeights)}
+ *            {@link org.apache.lucene.search.similarities.ClassicSimilarity#queryNorm(float) queryNorm(sumOfSquaredWeights)}
  *            &nbsp; = &nbsp;
  *          </td>
  *          <td valign="middle" align="center" rowspan="1">
Index: lucene/core/src/java/org/apache/lucene/search/similarities/package-info.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/similarities/package-info.java	(revision 1701895)
+++ lucene/core/src/java/org/apache/lucene/search/similarities/package-info.java	(working copy)
@@ -32,7 +32,7 @@
  * <a name="sims"></a>
  * <h2>Summary of the Ranking Methods</h2>
  * 
- * <p>{@link org.apache.lucene.search.similarities.DefaultSimilarity} is the original Lucene
+ * <p>{@link org.apache.lucene.search.similarities.ClassicSimilarity} is the original Lucene
  * scoring function. It is based on a highly optimized 
  * <a href="http://en.wikipedia.org/wiki/Vector_Space_Model">Vector Space Model</a>. For more
  * information, see {@link org.apache.lucene.search.similarities.TFIDFSimilarity}.
@@ -57,7 +57,7 @@
  * 
  * Since {@link org.apache.lucene.search.similarities.SimilarityBase} is not
  * optimized to the same extent as
- * {@link org.apache.lucene.search.similarities.DefaultSimilarity} and
+ * {@link org.apache.lucene.search.similarities.ClassicSimilarity} and
  * {@link org.apache.lucene.search.similarities.BM25Similarity}, a difference in
  * performance is to be expected when using the methods listed above. However,
  * optimizations can always be implemented in subclasses; see
@@ -81,7 +81,7 @@
  * 
  * <p>To make this change, implement your own {@link org.apache.lucene.search.similarities.Similarity} (likely
  *     you'll want to simply subclass an existing method, be it
- *     {@link org.apache.lucene.search.similarities.DefaultSimilarity} or a descendant of
+ *     {@link org.apache.lucene.search.similarities.ClassicSimilarity} or a descendant of
  *     {@link org.apache.lucene.search.similarities.SimilarityBase}), and
  *     then register the new class by calling
  *     {@link org.apache.lucene.index.IndexWriterConfig#setSimilarity(Similarity)}
@@ -109,7 +109,7 @@
  * subclassing the Similarity, one can simply introduce a new basic model and tell
  * {@link org.apache.lucene.search.similarities.DFRSimilarity} to use it.
  * 
- * <h3>Changing {@linkplain org.apache.lucene.search.similarities.DefaultSimilarity}</h3>
+ * <h3>Changing {@linkplain org.apache.lucene.search.similarities.ClassicSimilarity}</h3>
  * <p>
  *     If you are interested in use cases for changing your similarity, see the Lucene users's mailing list at <a
  *         href="http://www.gossamer-threads.com/lists/lucene/java-user/39125">Overriding Similarity</a>.
@@ -126,7 +126,7 @@
  *         <li><p>Changing Length Normalization &mdash; By overriding
  *             {@link org.apache.lucene.search.similarities.Similarity#computeNorm(org.apache.lucene.index.FieldInvertState state)},
  *             it is possible to discount how the length of a field contributes
- *             to a score. In {@link org.apache.lucene.search.similarities.DefaultSimilarity},
+ *             to a score. In {@link org.apache.lucene.search.similarities.ClassicSimilarity},
  *             lengthNorm = 1 / (numTerms in field)^0.5, but if one changes this to be
  *             1 / (numTerms in field), all fields will be treated
  *             <a href="http://www.gossamer-threads.com/lists/lucene/java-user/38967#38967">"fairly"</a>.</li>
Index: lucene/core/src/java/org/apache/lucene/util/QueryBuilder.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/QueryBuilder.java	(revision 1701895)
+++ lucene/core/src/java/org/apache/lucene/util/QueryBuilder.java	(working copy)
@@ -32,6 +32,7 @@
 import org.apache.lucene.search.MultiPhraseQuery;
 import org.apache.lucene.search.PhraseQuery;
 import org.apache.lucene.search.Query;
+import org.apache.lucene.search.SynonymQuery;
 import org.apache.lucene.search.TermQuery;
 
 /**
@@ -280,28 +281,25 @@
    * Creates simple boolean query from the cached tokenstream contents 
    */
   private Query analyzeBoolean(String field, TokenStream stream) throws IOException {
-    BooleanQuery.Builder q = new BooleanQuery.Builder();
-    q.setDisableCoord(true);
-
     TermToBytesRefAttribute termAtt = stream.getAttribute(TermToBytesRefAttribute.class);
     
     stream.reset();
+    List<Term> terms = new ArrayList<>();
     while (stream.incrementToken()) {
-      Query currentQuery = newTermQuery(new Term(field, BytesRef.deepCopyOf(termAtt.getBytesRef())));
-      q.add(currentQuery, BooleanClause.Occur.SHOULD);
+      terms.add(new Term(field, BytesRef.deepCopyOf(termAtt.getBytesRef())));
     }
     
-    return q.build();
+    return newSynonymQuery(terms.toArray(new Term[terms.size()]));
   }
 
-  private void add(BooleanQuery.Builder q, BooleanQuery current, BooleanClause.Occur operator) {
-    if (current.clauses().isEmpty()) {
+  private void add(BooleanQuery.Builder q, List<Term> current, BooleanClause.Occur operator) {
+    if (current.isEmpty()) {
       return;
     }
-    if (current.clauses().size() == 1) {
-      q.add(current.clauses().iterator().next().getQuery(), operator);
+    if (current.size() == 1) {
+      q.add(newTermQuery(current.get(0)), operator);
     } else {
-      q.add(current, operator);
+      q.add(newSynonymQuery(current.toArray(new Term[current.size()])), operator);
     }
   }
 
@@ -309,8 +307,8 @@
    * Creates complex boolean query from the cached tokenstream contents 
    */
   private Query analyzeMultiBoolean(String field, TokenStream stream, BooleanClause.Occur operator) throws IOException {
-    BooleanQuery.Builder q = newBooleanQuery(false);
-    BooleanQuery.Builder currentQuery = newBooleanQuery(true);
+    BooleanQuery.Builder q = newBooleanQuery();
+    List<Term> currentQuery = new ArrayList<>();
     
     TermToBytesRefAttribute termAtt = stream.getAttribute(TermToBytesRefAttribute.class);
     PositionIncrementAttribute posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);
@@ -318,12 +316,12 @@
     stream.reset();
     while (stream.incrementToken()) {
       if (posIncrAtt.getPositionIncrement() != 0) {
-        add(q, currentQuery.build(), operator);
-        currentQuery = newBooleanQuery(true);
+        add(q, currentQuery, operator);
+        currentQuery.clear();
       }
-      currentQuery.add(newTermQuery(new Term(field, BytesRef.deepCopyOf(termAtt.getBytesRef()))), BooleanClause.Occur.SHOULD);
+      currentQuery.add(new Term(field, BytesRef.deepCopyOf(termAtt.getBytesRef())));
     }
-    add(q, currentQuery.build(), operator);
+    add(q, currentQuery, operator);
     
     return q.build();
   }
@@ -393,16 +391,23 @@
    * Builds a new BooleanQuery instance.
    * <p>
    * This is intended for subclasses that wish to customize the generated queries.
-   * @param disableCoord disable coord
    * @return new BooleanQuery instance
    */
-  protected BooleanQuery.Builder newBooleanQuery(boolean disableCoord) {
-    BooleanQuery.Builder builder = new BooleanQuery.Builder();
-    builder.setDisableCoord(disableCoord);
-    return builder;
+  protected BooleanQuery.Builder newBooleanQuery() {
+    return new BooleanQuery.Builder();
   }
   
   /**
+   * Builds a new SynonymQuery instance.
+   * <p>
+   * This is intended for subclasses that wish to customize the generated queries.
+   * @return new Query instance
+   */
+  protected Query newSynonymQuery(Term terms[]) {
+    return new SynonymQuery(terms);
+  }
+  
+  /**
    * Builds a new TermQuery instance.
    * <p>
    * This is intended for subclasses that wish to customize the generated queries.
Index: lucene/core/src/test/org/apache/lucene/index/TestCustomNorms.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestCustomNorms.java	(revision 1701895)
+++ lucene/core/src/test/org/apache/lucene/index/TestCustomNorms.java	(working copy)
@@ -24,7 +24,7 @@
 import org.apache.lucene.document.TextField;
 import org.apache.lucene.search.CollectionStatistics;
 import org.apache.lucene.search.TermStatistics;
-import org.apache.lucene.search.similarities.DefaultSimilarity;
+import org.apache.lucene.search.similarities.ClassicSimilarity;
 import org.apache.lucene.search.similarities.PerFieldSimilarityWrapper;
 import org.apache.lucene.search.similarities.Similarity;
 import org.apache.lucene.store.Directory;
@@ -80,7 +80,7 @@
   }
 
   public class MySimProvider extends PerFieldSimilarityWrapper {
-    Similarity delegate = new DefaultSimilarity();
+    Similarity delegate = new ClassicSimilarity();
 
     @Override
     public float queryNorm(float sumOfSquaredWeights) {
Index: lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig.java	(revision 1701895)
+++ lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig.java	(working copy)
@@ -30,7 +30,7 @@
 import org.apache.lucene.index.DocumentsWriterPerThread.IndexingChain;
 import org.apache.lucene.index.IndexWriterConfig.OpenMode;
 import org.apache.lucene.search.IndexSearcher;
-import org.apache.lucene.search.similarities.DefaultSimilarity;
+import org.apache.lucene.search.similarities.ClassicSimilarity;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.InfoStream;
 import org.apache.lucene.util.LuceneTestCase;
@@ -39,7 +39,7 @@
 
 public class TestIndexWriterConfig extends LuceneTestCase {
 
-  private static final class MySimilarity extends DefaultSimilarity {
+  private static final class MySimilarity extends ClassicSimilarity {
     // Does not implement anything - used only for type checking on IndexWriterConfig.
   }
 
Index: lucene/core/src/test/org/apache/lucene/index/TestNorms.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestNorms.java	(revision 1701895)
+++ lucene/core/src/test/org/apache/lucene/index/TestNorms.java	(working copy)
@@ -26,7 +26,7 @@
 import org.apache.lucene.document.TextField;
 import org.apache.lucene.search.CollectionStatistics;
 import org.apache.lucene.search.TermStatistics;
-import org.apache.lucene.search.similarities.DefaultSimilarity;
+import org.apache.lucene.search.similarities.ClassicSimilarity;
 import org.apache.lucene.search.similarities.PerFieldSimilarityWrapper;
 import org.apache.lucene.search.similarities.Similarity;
 import org.apache.lucene.search.similarities.TFIDFSimilarity;
@@ -154,7 +154,7 @@
 
 
   public class MySimProvider extends PerFieldSimilarityWrapper {
-    Similarity delegate = new DefaultSimilarity();
+    Similarity delegate = new ClassicSimilarity();
 
     @Override
     public float queryNorm(float sumOfSquaredWeights) {
Index: lucene/core/src/test/org/apache/lucene/search/TestBoolean2.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestBoolean2.java	(revision 1701895)
+++ lucene/core/src/test/org/apache/lucene/search/TestBoolean2.java	(working copy)
@@ -27,7 +27,7 @@
 import org.apache.lucene.index.RandomIndexWriter;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.index.IndexReader;
-import org.apache.lucene.search.similarities.DefaultSimilarity;
+import org.apache.lucene.search.similarities.ClassicSimilarity;
 import org.apache.lucene.search.similarities.Similarity;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.MockDirectoryWrapper;
@@ -65,7 +65,7 @@
     littleReader = DirectoryReader.open(directory);
     searcher = newSearcher(littleReader);
     // this is intentionally using the baseline sim, because it compares against bigSearcher (which uses a random one)
-    searcher.setSimilarity(new DefaultSimilarity());
+    searcher.setSimilarity(new ClassicSimilarity());
 
     // Make big index
     dir2 = new MockDirectoryWrapper(random(), TestUtil.ramCopyOf(directory));
@@ -242,7 +242,7 @@
     int[] expDocNrs = {2, 3};
     Similarity oldSimilarity = searcher.getSimilarity(true);
     try {
-      searcher.setSimilarity(new DefaultSimilarity(){
+      searcher.setSimilarity(new ClassicSimilarity(){
         @Override
         public float coord(int overlap, int maxOverlap) {
           return overlap / ((float)maxOverlap - 1);
@@ -279,7 +279,7 @@
           searcher.setSimilarity(bigSearcher.getSimilarity(true)); // random sim
           QueryUtils.check(random(), q1, searcher);
         } finally {
-          searcher.setSimilarity(new DefaultSimilarity()); // restore
+          searcher.setSimilarity(new ClassicSimilarity()); // restore
         }
 
         TopFieldCollector collector = TopFieldCollector.create(sort, 1000,
Index: lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch.java	(revision 1701895)
+++ lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch.java	(working copy)
@@ -24,7 +24,7 @@
 import org.apache.lucene.index.RandomIndexWriter;
 import org.apache.lucene.index.StoredDocument;
 import org.apache.lucene.index.Term;
-import org.apache.lucene.search.similarities.DefaultSimilarity;
+import org.apache.lucene.search.similarities.ClassicSimilarity;
 import org.apache.lucene.search.similarities.Similarity;
 import org.apache.lucene.store.Directory;
 import org.junit.AfterClass;
@@ -398,7 +398,7 @@
     public void testRewriteCoord1() throws Exception {
       final Similarity oldSimilarity = s.getSimilarity(true);
       try {
-        s.setSimilarity(new DefaultSimilarity() {
+        s.setSimilarity(new ClassicSimilarity() {
           @Override
           public float coord(int overlap, int maxOverlap) {
             return overlap / ((float)maxOverlap + 1);
@@ -420,7 +420,7 @@
     public void testRewriteNegate() throws Exception {
       final Similarity oldSimilarity = s.getSimilarity(true);
       try {
-        s.setSimilarity(new DefaultSimilarity() {
+        s.setSimilarity(new ClassicSimilarity() {
           @Override
           public float coord(int overlap, int maxOverlap) {
             return overlap / ((float)maxOverlap + 1);
Index: lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery.java	(revision 1701895)
+++ lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery.java	(working copy)
@@ -44,7 +44,7 @@
 import org.apache.lucene.index.Term;
 import org.apache.lucene.search.BooleanClause.Occur;
 import org.apache.lucene.search.BooleanTopLevelScorers.BoostedScorer;
-import org.apache.lucene.search.similarities.DefaultSimilarity;
+import org.apache.lucene.search.similarities.ClassicSimilarity;
 import org.apache.lucene.search.spans.SpanQuery;
 import org.apache.lucene.search.spans.SpanTermQuery;
 import org.apache.lucene.store.Directory;
@@ -95,7 +95,7 @@
     IndexSearcher s = newSearcher(r);
     // this test relies upon coord being the default implementation,
     // otherwise scores are different!
-    s.setSimilarity(new DefaultSimilarity());
+    s.setSimilarity(new ClassicSimilarity());
 
     BooleanQuery.Builder q = new BooleanQuery.Builder();
     q.add(new TermQuery(new Term("field", "a")), BooleanClause.Occur.SHOULD);
Index: lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers.java	(revision 1701895)
+++ lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers.java	(working copy)
@@ -37,6 +37,7 @@
 import org.apache.lucene.index.Term;
 import org.apache.lucene.search.BooleanClause.Occur;
 import org.apache.lucene.search.Scorer.ChildScorer;
+import org.apache.lucene.search.similarities.ClassicSimilarity;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.LuceneTestCase;
 
@@ -68,8 +69,11 @@
     writer.close();
     // we do not use newSearcher because the assertingXXX layers break
     // the toString representations we are relying on
+    // TODO: clean that up
     searcher = new IndexSearcher(reader);
+    searcher.setSimilarity(new ClassicSimilarity());
     scorerSearcher = new ScorerIndexSearcher(reader);
+    scorerSearcher.setSimilarity(new ClassicSimilarity());
   }
   
   @Override
Index: lucene/core/src/test/org/apache/lucene/search/TestComplexExplanations.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestComplexExplanations.java	(revision 1701895)
+++ lucene/core/src/test/org/apache/lucene/search/TestComplexExplanations.java	(working copy)
@@ -19,7 +19,7 @@
 
 import org.apache.lucene.index.Term;
 import org.apache.lucene.search.BooleanClause.Occur;
-import org.apache.lucene.search.similarities.DefaultSimilarity;
+import org.apache.lucene.search.similarities.ClassicSimilarity;
 import org.apache.lucene.search.spans.*;
 
 /**
@@ -46,8 +46,8 @@
   }
 
   // must be static for weight serialization tests 
-  private static DefaultSimilarity createQnorm1Similarity() {
-    return new DefaultSimilarity() {
+  private static ClassicSimilarity createQnorm1Similarity() {
+    return new ClassicSimilarity() {
         @Override
         public float queryNorm(float sumOfSquaredWeights) {
           return 1.0f; // / (float) Math.sqrt(1.0f + sumOfSquaredWeights);
Index: lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery.java	(revision 1701895)
+++ lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery.java	(working copy)
@@ -31,7 +31,7 @@
 import org.apache.lucene.index.RandomIndexWriter;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.search.BooleanClause.Occur;
-import org.apache.lucene.search.similarities.DefaultSimilarity;
+import org.apache.lucene.search.similarities.ClassicSimilarity;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.Bits;
 import org.apache.lucene.util.IOUtils;
@@ -103,7 +103,7 @@
       searcher.setQueryCache(null); // to assert on scorer impl
       
       // set a similarity that does not normalize our boost away
-      searcher.setSimilarity(new DefaultSimilarity() {
+      searcher.setSimilarity(new ClassicSimilarity() {
         @Override
         public float queryNorm(float sumOfSquaredWeights) {
           return 1.0f;
Index: lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery.java	(revision 1701895)
+++ lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery.java	(working copy)
@@ -38,7 +38,7 @@
 import org.apache.lucene.index.SlowCompositeReaderWrapper;
 import org.apache.lucene.index.StoredDocument;
 import org.apache.lucene.index.Term;
-import org.apache.lucene.search.similarities.DefaultSimilarity;
+import org.apache.lucene.search.similarities.ClassicSimilarity;
 import org.apache.lucene.search.similarities.Similarity;
 import org.apache.lucene.search.spans.SpanQuery;
 import org.apache.lucene.search.spans.SpanTermQuery;
@@ -63,7 +63,7 @@
    * http://issues.apache.org/jira/browse/LUCENE-323
    * </p>
    */
-  private static class TestSimilarity extends DefaultSimilarity {
+  private static class TestSimilarity extends ClassicSimilarity {
     
     public TestSimilarity() {}
     
Index: lucene/core/src/test/org/apache/lucene/search/TestElevationComparator.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestElevationComparator.java	(revision 1701895)
+++ lucene/core/src/test/org/apache/lucene/search/TestElevationComparator.java	(working copy)
@@ -23,7 +23,7 @@
 import org.apache.lucene.document.SortedDocValuesField;
 import org.apache.lucene.index.*;
 import org.apache.lucene.search.FieldValueHitQueue.Entry;
-import org.apache.lucene.search.similarities.DefaultSimilarity;
+import org.apache.lucene.search.similarities.ClassicSimilarity;
 import org.apache.lucene.store.*;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.BytesRef;
@@ -44,7 +44,7 @@
         newIndexWriterConfig(new MockAnalyzer(random())).
             setMaxBufferedDocs(2).
             setMergePolicy(newLogMergePolicy(1000)).
-            setSimilarity(new DefaultSimilarity())
+            setSimilarity(new ClassicSimilarity())
     );
     writer.addDocument(adoc(new String[] {"id", "a", "title", "ipod", "str_s", "a"}));
     writer.addDocument(adoc(new String[] {"id", "b", "title", "ipod ipod", "str_s", "b"}));
@@ -57,7 +57,7 @@
     writer.close();
 
     IndexSearcher searcher = newSearcher(r);
-    searcher.setSimilarity(new DefaultSimilarity());
+    searcher.setSimilarity(new ClassicSimilarity());
 
     runTest(searcher, true);
     runTest(searcher, false);
Index: lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery.java	(revision 1701895)
+++ lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery.java	(working copy)
@@ -31,7 +31,7 @@
 import org.apache.lucene.index.StoredDocument;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.search.BooleanClause.Occur;
-import org.apache.lucene.search.similarities.DefaultSimilarity;
+import org.apache.lucene.search.similarities.ClassicSimilarity;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.automaton.LevenshteinAutomata;
@@ -259,7 +259,7 @@
 
     IndexReader reader = writer.getReader();
     IndexSearcher searcher = newSearcher(reader);
-    searcher.setSimilarity(new DefaultSimilarity()); //avoid randomisation of similarity algo by test framework
+    searcher.setSimilarity(new ClassicSimilarity()); //avoid randomisation of similarity algo by test framework
     writer.close();
     String searchTerms[] = { "smith", "smythe", "smdssasd" };
     for (String searchTerm : searchTerms) {
@@ -296,7 +296,7 @@
 
     IndexReader reader = writer.getReader();
     IndexSearcher searcher = newSearcher(reader);
-    searcher.setSimilarity(new DefaultSimilarity()); //avoid randomisation of similarity algo by test framework
+    searcher.setSimilarity(new ClassicSimilarity()); //avoid randomisation of similarity algo by test framework
 
     writer.close();
 
Index: lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.java	(revision 1701895)
+++ lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.java	(working copy)
@@ -35,7 +35,7 @@
 import org.apache.lucene.index.SortedSetDocValues;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.index.TermContext;
-import org.apache.lucene.search.similarities.DefaultSimilarity;
+import org.apache.lucene.search.similarities.ClassicSimilarity;
 import org.apache.lucene.search.similarities.Similarity.SimScorer;
 import org.apache.lucene.search.similarities.Similarity.SimWeight;
 import org.apache.lucene.store.Directory;
@@ -89,7 +89,7 @@
     r = DirectoryReader.open(dir);
     reader = getOnlySegmentReader(r);
     searcher = new IndexSearcher(reader);
-    searcher.setSimilarity(new DefaultSimilarity() {
+    searcher.setSimilarity(new ClassicSimilarity() {
       @Override
       public float queryNorm(float sumOfSquaredWeights) {
         return 1; // we disable queryNorm, both for debugging and ease of impl
Index: lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery.java	(revision 1701895)
+++ lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery.java	(working copy)
@@ -33,7 +33,7 @@
 import org.apache.lucene.index.RandomIndexWriter;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.index.TermsEnum;
-import org.apache.lucene.search.similarities.DefaultSimilarity;
+import org.apache.lucene.search.similarities.ClassicSimilarity;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.RAMDirectory;
 import org.apache.lucene.util.BytesRef;
@@ -334,7 +334,7 @@
     
     IndexReader reader = writer.getReader();
     IndexSearcher searcher = newSearcher(reader);
-    searcher.setSimilarity(new DefaultSimilarity() { 
+    searcher.setSimilarity(new ClassicSimilarity() { 
       @Override
       public Explanation idfExplain(CollectionStatistics collectionStats, TermStatistics termStats[]) {
         return Explanation.match(10f, "just a test");
Index: lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore.java	(revision 1701895)
+++ lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore.java	(working copy)
@@ -27,7 +27,7 @@
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.RandomIndexWriter;
 import org.apache.lucene.index.Term;
-import org.apache.lucene.search.similarities.DefaultSimilarity;
+import org.apache.lucene.search.similarities.ClassicSimilarity;
 import org.apache.lucene.store.Directory;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
@@ -223,7 +223,7 @@
     // test for correct application of query normalization
     // must use a non score normalizing method for this.
     
-    search.setSimilarity(new DefaultSimilarity());
+    search.setSimilarity(new ClassicSimilarity());
     Query q = csrq("data", "1", "6", T, T);
     search.search(new BoostQuery(q, 100), new SimpleCollector() {
       private int base = 0;
Index: lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery.java	(revision 1701895)
+++ lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery.java	(working copy)
@@ -34,7 +34,7 @@
 import org.apache.lucene.index.IndexWriterConfig.OpenMode;
 import org.apache.lucene.index.RandomIndexWriter;
 import org.apache.lucene.index.Term;
-import org.apache.lucene.search.similarities.DefaultSimilarity;
+import org.apache.lucene.search.similarities.ClassicSimilarity;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.TestUtil;
@@ -306,7 +306,7 @@
     RandomIndexWriter writer = new RandomIndexWriter(random(), directory, 
         newIndexWriterConfig(new MockAnalyzer(random()))
           .setMergePolicy(newLogMergePolicy())
-          .setSimilarity(new DefaultSimilarity()));
+          .setSimilarity(new ClassicSimilarity()));
 
     Document doc = new Document();
     doc.add(newTextField("field", "foo firstname lastname foo", Field.Store.YES));
@@ -324,7 +324,7 @@
     writer.close();
 
     IndexSearcher searcher = newSearcher(reader);
-    searcher.setSimilarity(new DefaultSimilarity());
+    searcher.setSimilarity(new ClassicSimilarity());
     PhraseQuery query = new PhraseQuery(Integer.MAX_VALUE, "field", "firstname", "lastname");
     ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;
     assertEquals(3, hits.length);
Index: lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.java	(revision 1701895)
+++ lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.java	(working copy)
@@ -30,7 +30,7 @@
 import org.apache.lucene.index.RandomIndexWriter;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.search.BooleanClause.Occur;
-import org.apache.lucene.search.similarities.DefaultSimilarity;
+import org.apache.lucene.search.similarities.ClassicSimilarity;
 import org.apache.lucene.search.spans.SpanNearQuery;
 import org.apache.lucene.search.spans.SpanQuery;
 import org.apache.lucene.search.spans.SpanTermQuery;
@@ -44,7 +44,7 @@
     IndexSearcher searcher = newSearcher(r);
 
     // We rely on more tokens = lower score:
-    searcher.setSimilarity(new DefaultSimilarity());
+    searcher.setSimilarity(new ClassicSimilarity());
 
     return searcher;
   }
@@ -70,7 +70,7 @@
     bq.add(new TermQuery(new Term("field", "wizard")), Occur.SHOULD);
     bq.add(new TermQuery(new Term("field", "oz")), Occur.SHOULD);
     IndexSearcher searcher = getSearcher(r);
-    searcher.setSimilarity(new DefaultSimilarity());
+    searcher.setSimilarity(new ClassicSimilarity());
 
     TopDocs hits = searcher.search(bq.build(), 10);
     assertEquals(2, hits.totalHits);
@@ -125,7 +125,7 @@
     bq.add(new TermQuery(new Term("field", "wizard")), Occur.SHOULD);
     bq.add(new TermQuery(new Term("field", "oz")), Occur.SHOULD);
     IndexSearcher searcher = getSearcher(r);
-    searcher.setSimilarity(new DefaultSimilarity());
+    searcher.setSimilarity(new ClassicSimilarity());
 
     TopDocs hits = searcher.search(bq.build(), 10);
     assertEquals(2, hits.totalHits);
Index: lucene/core/src/test/org/apache/lucene/search/TestSimilarity.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestSimilarity.java	(revision 1701895)
+++ lucene/core/src/test/org/apache/lucene/search/TestSimilarity.java	(working copy)
@@ -27,7 +27,7 @@
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.RandomIndexWriter;
 import org.apache.lucene.index.Term;
-import org.apache.lucene.search.similarities.DefaultSimilarity;
+import org.apache.lucene.search.similarities.ClassicSimilarity;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.analysis.MockAnalyzer;
 import org.apache.lucene.document.Document;
@@ -38,7 +38,7 @@
  */
 public class TestSimilarity extends LuceneTestCase {
   
-  public static class SimpleSimilarity extends DefaultSimilarity {
+  public static class SimpleSimilarity extends ClassicSimilarity {
     @Override
     public float queryNorm(float sumOfSquaredWeights) { return 1.0f; }
     @Override
Index: lucene/core/src/test/org/apache/lucene/search/TestSimpleExplanations.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestSimpleExplanations.java	(revision 1701895)
+++ lucene/core/src/test/org/apache/lucene/search/TestSimpleExplanations.java	(working copy)
@@ -678,5 +678,10 @@
 
     qtest(query.build(), new int[] { 0,1,2,3 });
   }
+  
+  public void testSynonymQuery() throws Exception {
+    SynonymQuery query = new SynonymQuery(new Term(FIELD, "w1"), new Term(FIELD, "w2"));
+    qtest(query, new int[] { 0,1,2,3 });
+  }
 
 }
Index: lucene/core/src/test/org/apache/lucene/search/TestSimpleSearchEquivalence.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestSimpleSearchEquivalence.java	(revision 1701895)
+++ lucene/core/src/test/org/apache/lucene/search/TestSimpleSearchEquivalence.java	(working copy)
@@ -230,4 +230,15 @@
 
     assertSameScores(q1, q2);
   }
+  
+  public void testBooleanOrVsSynonym() throws Exception {
+    Term t1 = randomTerm();
+    Term t2 = randomTerm();
+    assertEquals(t1.field(), t2.field());
+    SynonymQuery q1 = new SynonymQuery(t1, t2);
+    BooleanQuery.Builder q2 = new BooleanQuery.Builder();
+    q2.add(new TermQuery(t1), Occur.SHOULD);
+    q2.add(new TermQuery(t2), Occur.SHOULD);
+    assertSameSet(q1, q2.build());
+  }
 }
Index: lucene/core/src/test/org/apache/lucene/search/TestSortRescorer.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestSortRescorer.java	(revision 1701895)
+++ lucene/core/src/test/org/apache/lucene/search/TestSortRescorer.java	(working copy)
@@ -28,6 +28,7 @@
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.RandomIndexWriter;
 import org.apache.lucene.index.Term;
+import org.apache.lucene.search.similarities.ClassicSimilarity;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.TestUtil;
@@ -63,6 +64,8 @@
     
     reader = iw.getReader();
     searcher = new IndexSearcher(reader);
+    // TODO: fix this test to not be so flaky and use newSearcher
+    searcher.setSimilarity(new ClassicSimilarity());
     iw.close();
   }
   
Index: lucene/core/src/test/org/apache/lucene/search/TestSynonymQuery.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestSynonymQuery.java	(revision 0)
+++ lucene/core/src/test/org/apache/lucene/search/TestSynonymQuery.java	(working copy)
@@ -0,0 +1,87 @@
+package org.apache.lucene.search;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.IOException;
+
+import org.apache.lucene.document.Document;
+import org.apache.lucene.document.Field.Store;
+import org.apache.lucene.document.StringField;
+import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.RandomIndexWriter;
+import org.apache.lucene.index.Term;
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.util.LuceneTestCase;
+
+public class TestSynonymQuery extends LuceneTestCase {
+
+  public void testEquals() {
+    QueryUtils.checkEqual(new SynonymQuery(), new SynonymQuery());
+    QueryUtils.checkEqual(new SynonymQuery(new Term("foo", "bar")), 
+                          new SynonymQuery(new Term("foo", "bar")));
+    
+    QueryUtils.checkEqual(new SynonymQuery(new Term("a", "a"), new Term("a", "b")), 
+                          new SynonymQuery(new Term("a", "b"), new Term("a", "a")));
+  }
+  
+  public void testBogusParams() {
+    try {
+      new SynonymQuery(new Term("field1", "a"), new Term("field2", "b"));
+      fail();
+    } catch (IllegalArgumentException expected) {}
+  }
+
+  public void testToString() {
+    assertEquals("Synonym()", new SynonymQuery().toString());
+    Term t1 = new Term("foo", "bar");
+    assertEquals("Synonym(foo:bar)", new SynonymQuery(t1).toString());
+    Term t2 = new Term("foo", "baz");
+    assertEquals("Synonym(foo:bar foo:baz)", new SynonymQuery(t1, t2).toString());
+  }
+
+  public void testScores() throws IOException {
+    Directory dir = newDirectory();
+    RandomIndexWriter w = new RandomIndexWriter(random(), dir);
+
+    Document doc = new Document();
+    doc.add(new StringField("f", "a", Store.NO));
+    w.addDocument(doc);
+
+    doc = new Document();
+    doc.add(new StringField("f", "b", Store.NO));
+    for (int i = 0; i < 10; ++i) {
+      w.addDocument(doc);
+    }
+
+    IndexReader reader = w.getReader();
+    IndexSearcher searcher = newSearcher(reader);
+    SynonymQuery query = new SynonymQuery(new Term("f", "a"), new Term("f", "b"));
+
+    TopDocs topDocs = searcher.search(query, 20);
+    assertEquals(11, topDocs.totalHits);
+    // All docs must have the same score
+    for (int i = 0; i < topDocs.scoreDocs.length; ++i) {
+      assertEquals(topDocs.scoreDocs[0].score, topDocs.scoreDocs[i].score, 0.0f);
+    }
+
+    reader.close();
+    w.close();
+    dir.close();
+  }
+
+}

Property changes on: lucene/core/src/test/org/apache/lucene/search/TestSynonymQuery.java
___________________________________________________________________
Added: svn:eol-style
## -0,0 +1 ##
+native
\ No newline at end of property
Index: lucene/core/src/test/org/apache/lucene/search/TestTermScorer.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestTermScorer.java	(revision 1701895)
+++ lucene/core/src/test/org/apache/lucene/search/TestTermScorer.java	(working copy)
@@ -31,7 +31,7 @@
 import org.apache.lucene.index.RandomIndexWriter;
 import org.apache.lucene.index.SlowCompositeReaderWrapper;
 import org.apache.lucene.index.Term;
-import org.apache.lucene.search.similarities.DefaultSimilarity;
+import org.apache.lucene.search.similarities.ClassicSimilarity;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.LuceneTestCase;
 
@@ -52,7 +52,7 @@
     RandomIndexWriter writer = new RandomIndexWriter(random(), directory, 
         newIndexWriterConfig(new MockAnalyzer(random()))
         .setMergePolicy(newLogMergePolicy())
-        .setSimilarity(new DefaultSimilarity()));
+        .setSimilarity(new ClassicSimilarity()));
     for (int i = 0; i < values.length; i++) {
       Document doc = new Document();
       doc
@@ -62,7 +62,7 @@
     indexReader = SlowCompositeReaderWrapper.wrap(writer.getReader());
     writer.close();
     indexSearcher = newSearcher(indexReader);
-    indexSearcher.setSimilarity(new DefaultSimilarity());
+    indexSearcher.setSimilarity(new ClassicSimilarity());
   }
   
   @Override
Index: lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadExplanations.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadExplanations.java	(revision 1701895)
+++ lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadExplanations.java	(working copy)
@@ -19,7 +19,7 @@
 
 import org.apache.lucene.index.Term;
 import org.apache.lucene.search.BaseExplanationTestCase;
-import org.apache.lucene.search.similarities.DefaultSimilarity;
+import org.apache.lucene.search.similarities.ClassicSimilarity;
 import org.apache.lucene.search.spans.SpanBoostQuery;
 import org.apache.lucene.search.spans.SpanNearQuery;
 import org.apache.lucene.search.spans.SpanOrQuery;
@@ -41,7 +41,7 @@
   @Override
   public void setUp() throws Exception {
     super.setUp();
-    searcher.setSimilarity(new DefaultSimilarity() {
+    searcher.setSimilarity(new ClassicSimilarity() {
       @Override
       public float scorePayload(int doc, int start, int end, BytesRef payload) {
         return 1 + (payload.hashCode() % 10);
Index: lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadScoreQuery.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadScoreQuery.java	(revision 1701895)
+++ lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadScoreQuery.java	(working copy)
@@ -37,7 +37,7 @@
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.TermStatistics;
 import org.apache.lucene.search.TopDocs;
-import org.apache.lucene.search.similarities.DefaultSimilarity;
+import org.apache.lucene.search.similarities.ClassicSimilarity;
 import org.apache.lucene.search.spans.SpanContainingQuery;
 import org.apache.lucene.search.spans.SpanNearQuery;
 import org.apache.lucene.search.spans.SpanOrQuery;
@@ -234,7 +234,7 @@
     directory = null;
   }
 
-  static class BoostingSimilarity extends DefaultSimilarity {
+  static class BoostingSimilarity extends ClassicSimilarity {
 
     @Override
     public float queryNorm(float sumOfSquaredWeights) {
Index: lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadSpans.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadSpans.java	(revision 1701895)
+++ lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadSpans.java	(working copy)
@@ -34,7 +34,7 @@
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.TermQuery;
 import org.apache.lucene.search.TopDocs;
-import org.apache.lucene.search.similarities.DefaultSimilarity;
+import org.apache.lucene.search.similarities.ClassicSimilarity;
 import org.apache.lucene.search.similarities.Similarity;
 import org.apache.lucene.search.spans.MultiSpansWrapper;
 import org.apache.lucene.search.spans.SpanFirstQuery;
@@ -57,7 +57,7 @@
 
 public class TestPayloadSpans extends LuceneTestCase {
   private IndexSearcher searcher;
-  private Similarity similarity = new DefaultSimilarity();
+  private Similarity similarity = new ClassicSimilarity();
   protected IndexReader indexReader;
   private IndexReader closeIndexReader;
   private Directory directory;
Index: lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadTermQuery.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadTermQuery.java	(revision 1701895)
+++ lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadTermQuery.java	(working copy)
@@ -37,7 +37,7 @@
 import org.apache.lucene.search.QueryUtils;
 import org.apache.lucene.search.ScoreDoc;
 import org.apache.lucene.search.TopDocs;
-import org.apache.lucene.search.similarities.DefaultSimilarity;
+import org.apache.lucene.search.similarities.ClassicSimilarity;
 import org.apache.lucene.search.similarities.Similarity;
 import org.apache.lucene.search.spans.MultiSpansWrapper;
 import org.apache.lucene.search.spans.SpanQuery;
@@ -255,7 +255,7 @@
     CheckHits.checkHitCollector(random(), query.build(), PayloadHelper.NO_PAYLOAD_FIELD, searcher, results);
   }
 
-  static class BoostingSimilarity extends DefaultSimilarity {
+  static class BoostingSimilarity extends ClassicSimilarity {
 
     @Override
     public float queryNorm(float sumOfSquaredWeights) {
@@ -298,7 +298,7 @@
     }
   }
 
-  static class FullSimilarity extends DefaultSimilarity{
+  static class FullSimilarity extends ClassicSimilarity{
     public float scorePayload(int docId, String fieldName, byte[] payload, int offset, int length) {
       //we know it is size 4 here, so ignore the offset/length
       return payload[offset];
Index: lucene/core/src/test/org/apache/lucene/search/similarities/TestClassicSimilarity.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/similarities/TestClassicSimilarity.java	(revision 1701895)
+++ lucene/core/src/test/org/apache/lucene/search/similarities/TestClassicSimilarity.java	(working copy)
@@ -38,7 +38,7 @@
 import org.apache.lucene.util.IOUtils;
 import org.apache.lucene.util.LuceneTestCase;
 
-public class TestDefaultSimilarity extends LuceneTestCase {
+public class TestClassicSimilarity extends LuceneTestCase {
   private Directory directory;
   private IndexReader indexReader;
   private IndexSearcher indexSearcher;
@@ -55,7 +55,7 @@
     }
     indexReader = DirectoryReader.open(directory);
     indexSearcher = newSearcher(indexReader);
-    indexSearcher.setSimilarity(new DefaultSimilarity());
+    indexSearcher.setSimilarity(new ClassicSimilarity());
   }
 
   @Override
@@ -66,7 +66,7 @@
   
   // Javadocs give this as an example so we test to make sure it's correct:
   public void testPrecisionLoss() throws Exception {
-    DefaultSimilarity sim = new DefaultSimilarity();
+    ClassicSimilarity sim = new ClassicSimilarity();
     float v = sim.decodeNormValue(sim.encodeNormValue(.89f));
     assertEquals(0.875f, v, 0.0001f);
   }
Index: lucene/core/src/test/org/apache/lucene/search/similarities/TestDefaultSimilarity.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/similarities/TestDefaultSimilarity.java	(revision 1701895)
+++ lucene/core/src/test/org/apache/lucene/search/similarities/TestDefaultSimilarity.java	(working copy)
@@ -1,161 +0,0 @@
-package org.apache.lucene.search.similarities;
-
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import java.io.IOException;
-import java.util.Arrays;
-
-import org.apache.lucene.document.Document;
-import org.apache.lucene.document.StringField;
-import org.apache.lucene.document.Field.Store;
-import org.apache.lucene.index.DirectoryReader;
-import org.apache.lucene.index.IndexReader;
-import org.apache.lucene.index.IndexWriter;
-import org.apache.lucene.index.Term;
-import org.apache.lucene.search.BooleanQuery;
-import org.apache.lucene.search.DisjunctionMaxQuery;
-import org.apache.lucene.search.IndexSearcher;
-import org.apache.lucene.search.Query;
-import org.apache.lucene.search.TermQuery;
-import org.apache.lucene.search.TopDocs;
-import org.apache.lucene.search.BooleanClause.Occur;
-import org.apache.lucene.store.Directory;
-import org.apache.lucene.util.IOUtils;
-import org.apache.lucene.util.LuceneTestCase;
-
-public class TestDefaultSimilarity extends LuceneTestCase {
-  private Directory directory;
-  private IndexReader indexReader;
-  private IndexSearcher indexSearcher;
-
-  @Override
-  public void setUp() throws Exception {
-    super.setUp();
-    directory = newDirectory();
-    try (IndexWriter indexWriter = new IndexWriter(directory, newIndexWriterConfig())) {
-      Document document = new Document();
-      document.add(new StringField("test", "hit", Store.NO));
-      indexWriter.addDocument(document);
-      indexWriter.commit();
-    }
-    indexReader = DirectoryReader.open(directory);
-    indexSearcher = newSearcher(indexReader);
-    indexSearcher.setSimilarity(new DefaultSimilarity());
-  }
-
-  @Override
-  public void tearDown() throws Exception {
-    IOUtils.close(indexReader, directory);
-    super.tearDown();
-  }
-  
-  // Javadocs give this as an example so we test to make sure it's correct:
-  public void testPrecisionLoss() throws Exception {
-    DefaultSimilarity sim = new DefaultSimilarity();
-    float v = sim.decodeNormValue(sim.encodeNormValue(.89f));
-    assertEquals(0.875f, v, 0.0001f);
-  }
-
-
-  public void testHit() throws IOException {
-    Query query = new TermQuery(new Term("test", "hit"));
-    TopDocs topDocs = indexSearcher.search(query, 1);
-    assertEquals(1, topDocs.totalHits);
-    assertEquals(1, topDocs.scoreDocs.length);
-    assertTrue(topDocs.scoreDocs[0].score != 0);
-  }
-
-  public void testMiss() throws IOException {
-    Query query = new TermQuery(new Term("test", "miss"));
-    TopDocs topDocs = indexSearcher.search(query, 1);
-    assertEquals(0, topDocs.totalHits);
-  }
-
-  public void testEmpty() throws IOException {
-    Query query = new TermQuery(new Term("empty", "miss"));
-    TopDocs topDocs = indexSearcher.search(query, 1);
-    assertEquals(0, topDocs.totalHits);
-  }
-
-  public void testBQHit() throws IOException {
-    Query query = new BooleanQuery.Builder()
-      .add(new TermQuery(new Term("test", "hit")), Occur.SHOULD)
-      .build();
-    TopDocs topDocs = indexSearcher.search(query, 1);
-    assertEquals(1, topDocs.totalHits);
-    assertEquals(1, topDocs.scoreDocs.length);
-    assertTrue(topDocs.scoreDocs[0].score != 0);
-  }
-
-  public void testBQHitOrMiss() throws IOException {
-    Query query = new BooleanQuery.Builder()
-      .add(new TermQuery(new Term("test", "hit")), Occur.SHOULD)
-      .add(new TermQuery(new Term("test", "miss")), Occur.SHOULD)
-      .build();
-    TopDocs topDocs = indexSearcher.search(query, 1);
-    assertEquals(1, topDocs.totalHits);
-    assertEquals(1, topDocs.scoreDocs.length);
-    assertTrue(topDocs.scoreDocs[0].score != 0);
-  }
-
-  public void testBQHitOrEmpty() throws IOException {
-    Query query = new BooleanQuery.Builder()
-      .add(new TermQuery(new Term("test", "hit")), Occur.SHOULD)
-      .add(new TermQuery(new Term("empty", "miss")), Occur.SHOULD)
-      .build();
-    TopDocs topDocs = indexSearcher.search(query, 1);
-    assertEquals(1, topDocs.totalHits);
-    assertEquals(1, topDocs.scoreDocs.length);
-    assertTrue(topDocs.scoreDocs[0].score != 0);
-  }
-
-  public void testDMQHit() throws IOException {
-    Query query = new DisjunctionMaxQuery(
-      Arrays.asList(
-        new TermQuery(new Term("test", "hit"))),
-      0);
-    TopDocs topDocs = indexSearcher.search(query, 1);
-    assertEquals(1, topDocs.totalHits);
-    assertEquals(1, topDocs.scoreDocs.length);
-    assertTrue(topDocs.scoreDocs[0].score != 0);
-  }
-
-  public void testDMQHitOrMiss() throws IOException {
-    Query query = new DisjunctionMaxQuery(
-      Arrays.asList(
-        new TermQuery(new Term("test", "hit")),
-        new TermQuery(new Term("test", "miss"))),
-      0);
-    TopDocs topDocs = indexSearcher.search(query, 1);
-    assertEquals(1, topDocs.totalHits);
-    assertEquals(1, topDocs.scoreDocs.length);
-    assertTrue(topDocs.scoreDocs[0].score != 0);
-  }
-
-  public void testDMQHitOrEmpty() throws IOException {
-    Query query = new DisjunctionMaxQuery(
-      Arrays.asList(
-        new TermQuery(new Term("test", "hit")),
-        new TermQuery(new Term("empty", "miss"))),
-      0);
-    TopDocs topDocs = indexSearcher.search(query, 1);
-    assertEquals(1, topDocs.totalHits);
-    assertEquals(1, topDocs.scoreDocs.length);
-    assertTrue(topDocs.scoreDocs[0].score != 0);
-  }
-}
Index: lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarity2.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarity2.java	(revision 1701895)
+++ lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarity2.java	(working copy)
@@ -52,7 +52,7 @@
   public void setUp() throws Exception {
     super.setUp();
     sims = new ArrayList<>();
-    sims.add(new DefaultSimilarity());
+    sims.add(new ClassicSimilarity());
     sims.add(new BM25Similarity());
     // TODO: not great that we dup this all with TestSimilarityBase
     for (BasicModel basicModel : TestSimilarityBase.BASIC_MODELS) {
Index: lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarityBase.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarityBase.java	(revision 1701895)
+++ lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarityBase.java	(working copy)
@@ -579,7 +579,7 @@
   
   // LUCENE-5221
   public void testDiscountOverlapsBoost() throws IOException {
-    DefaultSimilarity expected = new DefaultSimilarity();
+    ClassicSimilarity expected = new ClassicSimilarity();
     SimilarityBase actual = new DFRSimilarity(new BasicModelIne(), new AfterEffectB(), new NormalizationH2());
     expected.setDiscountOverlaps(false);
     actual.setDiscountOverlaps(false);
Index: lucene/core/src/test/org/apache/lucene/search/spans/TestSpans.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/spans/TestSpans.java	(revision 1701895)
+++ lucene/core/src/test/org/apache/lucene/search/spans/TestSpans.java	(working copy)
@@ -35,7 +35,7 @@
 import org.apache.lucene.search.Query;
 import org.apache.lucene.search.Scorer;
 import org.apache.lucene.search.TermQuery;
-import org.apache.lucene.search.similarities.DefaultSimilarity;
+import org.apache.lucene.search.similarities.ClassicSimilarity;
 import org.apache.lucene.search.similarities.Similarity;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.LuceneTestCase;
@@ -286,7 +286,7 @@
     for (int i = 0, c = leaves.size(); i < c; i++) {
       final LeafReaderContext ctx = leaves.get(i);
      
-      final Similarity sim = new DefaultSimilarity() {
+      final Similarity sim = new ClassicSimilarity() {
         @Override
         public float sloppyFreq(int distance) {
           return 0.0f;
Index: lucene/core/src/test/org/apache/lucene/util/TestQueryBuilder.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/util/TestQueryBuilder.java	(revision 1701895)
+++ lucene/core/src/test/org/apache/lucene/util/TestQueryBuilder.java	(working copy)
@@ -33,6 +33,7 @@
 import org.apache.lucene.search.MultiPhraseQuery;
 import org.apache.lucene.search.PhraseQuery;
 import org.apache.lucene.search.Query;
+import org.apache.lucene.search.SynonymQuery;
 import org.apache.lucene.search.TermQuery;
 import org.apache.lucene.util.automaton.CharacterRunAutomaton;
 import org.apache.lucene.util.automaton.RegExp;
@@ -162,11 +163,7 @@
   
   /** simple synonyms test */
   public void testSynonyms() throws Exception {
-    BooleanQuery.Builder expectedB = new BooleanQuery.Builder();
-    expectedB.setDisableCoord(true);
-    expectedB.add(new TermQuery(new Term("field", "dogs")), BooleanClause.Occur.SHOULD);
-    expectedB.add(new TermQuery(new Term("field", "dog")), BooleanClause.Occur.SHOULD);
-    Query expected = expectedB.build();
+    SynonymQuery expected = new SynonymQuery(new Term("field", "dogs"), new Term("field", "dog"));
     QueryBuilder builder = new QueryBuilder(new MockSynonymAnalyzer());
     assertEquals(expected, builder.createBooleanQuery("field", "dogs"));
     assertEquals(expected, builder.createPhraseQuery("field", "dogs"));
@@ -281,14 +278,11 @@
   
   /** simple CJK synonym test */
   public void testCJKSynonym() throws Exception {
-    BooleanQuery.Builder expected = new BooleanQuery.Builder();
-    expected.setDisableCoord(true);
-    expected.add(new TermQuery(new Term("field", "国")), BooleanClause.Occur.SHOULD);
-    expected.add(new TermQuery(new Term("field", "國")), BooleanClause.Occur.SHOULD);
+    SynonymQuery expected = new SynonymQuery(new Term("field", "国"), new Term("field", "國"));
     QueryBuilder builder = new QueryBuilder(new MockCJKSynonymAnalyzer());
-    assertEquals(expected.build(), builder.createBooleanQuery("field", "国"));
-    assertEquals(expected.build(), builder.createPhraseQuery("field", "国"));
-    assertEquals(expected.build(), builder.createBooleanQuery("field", "国", BooleanClause.Occur.MUST));
+    assertEquals(expected, builder.createBooleanQuery("field", "国"));
+    assertEquals(expected, builder.createPhraseQuery("field", "国"));
+    assertEquals(expected, builder.createBooleanQuery("field", "国", BooleanClause.Occur.MUST));
   }
   
   /** synonyms with default OR operator */
@@ -295,11 +289,8 @@
   public void testCJKSynonymsOR() throws Exception {
     BooleanQuery.Builder expected = new BooleanQuery.Builder();
     expected.add(new TermQuery(new Term("field", "中")), BooleanClause.Occur.SHOULD);
-    BooleanQuery.Builder inner = new BooleanQuery.Builder();
-    inner.setDisableCoord(true);
-    inner.add(new TermQuery(new Term("field", "国")), BooleanClause.Occur.SHOULD);
-    inner.add(new TermQuery(new Term("field", "國")), BooleanClause.Occur.SHOULD);
-    expected.add(inner.build(), BooleanClause.Occur.SHOULD);
+    SynonymQuery inner = new SynonymQuery(new Term("field", "国"), new Term("field", "國"));
+    expected.add(inner, BooleanClause.Occur.SHOULD);
     QueryBuilder builder = new QueryBuilder(new MockCJKSynonymAnalyzer());
     assertEquals(expected.build(), builder.createBooleanQuery("field", "中国"));
   }
@@ -308,16 +299,10 @@
   public void testCJKSynonymsOR2() throws Exception {
     BooleanQuery.Builder expected = new BooleanQuery.Builder();
     expected.add(new TermQuery(new Term("field", "中")), BooleanClause.Occur.SHOULD);
-    BooleanQuery.Builder inner = new BooleanQuery.Builder();
-    inner.setDisableCoord(true);
-    inner.add(new TermQuery(new Term("field", "国")), BooleanClause.Occur.SHOULD);
-    inner.add(new TermQuery(new Term("field", "國")), BooleanClause.Occur.SHOULD);
-    expected.add(inner.build(), BooleanClause.Occur.SHOULD);
-    BooleanQuery.Builder inner2 = new BooleanQuery.Builder();
-    inner2.setDisableCoord(true);
-    inner2.add(new TermQuery(new Term("field", "国")), BooleanClause.Occur.SHOULD);
-    inner2.add(new TermQuery(new Term("field", "國")), BooleanClause.Occur.SHOULD);
-    expected.add(inner2.build(), BooleanClause.Occur.SHOULD);
+    SynonymQuery inner = new SynonymQuery(new Term("field", "国"), new Term("field", "國"));
+    expected.add(inner, BooleanClause.Occur.SHOULD);
+    SynonymQuery inner2 = new SynonymQuery(new Term("field", "国"), new Term("field", "國"));
+    expected.add(inner2, BooleanClause.Occur.SHOULD);
     QueryBuilder builder = new QueryBuilder(new MockCJKSynonymAnalyzer());
     assertEquals(expected.build(), builder.createBooleanQuery("field", "中国国"));
   }
@@ -326,11 +311,8 @@
   public void testCJKSynonymsAND() throws Exception {
     BooleanQuery.Builder expected = new BooleanQuery.Builder();
     expected.add(new TermQuery(new Term("field", "中")), BooleanClause.Occur.MUST);
-    BooleanQuery.Builder inner = new BooleanQuery.Builder();
-    inner.setDisableCoord(true);
-    inner.add(new TermQuery(new Term("field", "国")), BooleanClause.Occur.SHOULD);
-    inner.add(new TermQuery(new Term("field", "國")), BooleanClause.Occur.SHOULD);
-    expected.add(inner.build(), BooleanClause.Occur.MUST);
+    SynonymQuery inner = new SynonymQuery(new Term("field", "国"), new Term("field", "國"));
+    expected.add(inner, BooleanClause.Occur.MUST);
     QueryBuilder builder = new QueryBuilder(new MockCJKSynonymAnalyzer());
     assertEquals(expected.build(), builder.createBooleanQuery("field", "中国", BooleanClause.Occur.MUST));
   }
@@ -339,16 +321,10 @@
   public void testCJKSynonymsAND2() throws Exception {
     BooleanQuery.Builder expected = new BooleanQuery.Builder();
     expected.add(new TermQuery(new Term("field", "中")), BooleanClause.Occur.MUST);
-    BooleanQuery.Builder inner = new BooleanQuery.Builder();
-    inner.setDisableCoord(true);
-    inner.add(new TermQuery(new Term("field", "国")), BooleanClause.Occur.SHOULD);
-    inner.add(new TermQuery(new Term("field", "國")), BooleanClause.Occur.SHOULD);
-    expected.add(inner.build(), BooleanClause.Occur.MUST);
-    BooleanQuery.Builder inner2 = new BooleanQuery.Builder();
-    inner2.setDisableCoord(true);
-    inner2.add(new TermQuery(new Term("field", "国")), BooleanClause.Occur.SHOULD);
-    inner2.add(new TermQuery(new Term("field", "國")), BooleanClause.Occur.SHOULD);
-    expected.add(inner2.build(), BooleanClause.Occur.MUST);
+    SynonymQuery inner = new SynonymQuery(new Term("field", "国"), new Term("field", "國"));
+    expected.add(inner, BooleanClause.Occur.MUST);
+    SynonymQuery inner2 = new SynonymQuery(new Term("field", "国"), new Term("field", "國"));
+    expected.add(inner2, BooleanClause.Occur.MUST);
     QueryBuilder builder = new QueryBuilder(new MockCJKSynonymAnalyzer());
     assertEquals(expected.build(), builder.createBooleanQuery("field", "中国国", BooleanClause.Occur.MUST));
   }
Index: lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionRescorer.java
===================================================================
--- lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionRescorer.java	(revision 1701895)
+++ lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionRescorer.java	(working copy)
@@ -31,6 +31,7 @@
 import org.apache.lucene.search.SortField;
 import org.apache.lucene.search.TermQuery;
 import org.apache.lucene.search.TopDocs;
+import org.apache.lucene.search.similarities.ClassicSimilarity;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.LuceneTestCase;
 
@@ -65,6 +66,8 @@
     
     reader = iw.getReader();
     searcher = new IndexSearcher(reader);
+    // TODO: fix this test to not be so flaky and use newSearcher
+    searcher.setSimilarity(new ClassicSimilarity());
     iw.close();
   }
   
Index: lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts.java
===================================================================
--- lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts.java	(revision 1701895)
+++ lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts.java	(working copy)
@@ -50,7 +50,7 @@
 import org.apache.lucene.search.MatchAllDocsQuery;
 import org.apache.lucene.search.Query;
 import org.apache.lucene.search.TermQuery;
-import org.apache.lucene.search.similarities.DefaultSimilarity;
+import org.apache.lucene.search.similarities.ClassicSimilarity;
 import org.apache.lucene.search.similarities.PerFieldSimilarityWrapper;
 import org.apache.lucene.search.similarities.Similarity;
 import org.apache.lucene.store.Directory;
@@ -267,7 +267,7 @@
     Directory taxoDir = newDirectory();
     IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));
     iwc.setSimilarity(new PerFieldSimilarityWrapper() {
-        final Similarity sim = new DefaultSimilarity();
+        final Similarity sim = new ClassicSimilarity();
 
         @Override
         public Similarity get(String name) {
Index: lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor.java
===================================================================
--- lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor.java	(revision 1701895)
+++ lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor.java	(working copy)
@@ -80,7 +80,7 @@
           try
             {
                 int docFreq=reader.docFreq(new Term(fieldName,terms[i].term));
-                //IDF algorithm taken from DefaultSimilarity class
+                //IDF algorithm taken from ClassicSimilarity class
                 float idf=(float)(Math.log(totalNumDocs/(double)(docFreq+1)) + 1.0);
                 terms[i].weight*=idf;
             } 
Index: lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor.java
===================================================================
--- lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor.java	(revision 1701895)
+++ lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor.java	(working copy)
@@ -560,7 +560,7 @@
       while (it.hasNext()) {
         WeightedSpanTerm weightedSpanTerm = terms.get(it.next());
         int docFreq = reader.docFreq(new Term(fieldName, weightedSpanTerm.term));
-        // IDF algorithm taken from DefaultSimilarity class
+        // IDF algorithm taken from ClassicSimilarity class
         float idf = (float) (Math.log(totalNumDocs / (double) (docFreq + 1)) + 1.0);
         weightedSpanTerm.weight *= idf;
       }
Index: lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex.java
===================================================================
--- lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex.java	(revision 1701895)
+++ lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex.java	(working copy)
@@ -30,7 +30,7 @@
 import org.apache.lucene.search.MatchAllDocsQuery;
 import org.apache.lucene.search.TermQuery;
 import org.apache.lucene.search.similarities.BM25Similarity;
-import org.apache.lucene.search.similarities.DefaultSimilarity;
+import org.apache.lucene.search.similarities.ClassicSimilarity;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.TestUtil;
 import org.junit.Before;
@@ -90,7 +90,7 @@
     assertThat(mi.search(new TermQuery(new Term("f1", "wibble"))), not(is(0.0f)));
 
     // check we can set the Similarity again
-    mi.setSimilarity(new DefaultSimilarity());
+    mi.setSimilarity(new ClassicSimilarity());
 
   }
 
@@ -144,7 +144,7 @@
     float n1 = reader.getNormValues("f1").get(0);
 
     // Norms are re-computed when we change the Similarity
-    mi.setSimilarity(new DefaultSimilarity() {
+    mi.setSimilarity(new ClassicSimilarity() {
       @Override
       public float lengthNorm(FieldInvertState state) {
         return 74;
Index: lucene/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity.java
===================================================================
--- lucene/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity.java	(revision 1701895)
+++ lucene/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity.java	(working copy)
@@ -17,7 +17,7 @@
 
 package org.apache.lucene.misc;
 
-import org.apache.lucene.search.similarities.DefaultSimilarity;
+import org.apache.lucene.search.similarities.ClassicSimilarity;
 import org.apache.lucene.index.FieldInvertState;
 
 /**
@@ -38,7 +38,7 @@
  *
  * @see <a href="doc-files/ss.gnuplot">A Gnuplot file used to generate some of the visualizations refrenced from each function.</a> 
  */
-public class SweetSpotSimilarity extends DefaultSimilarity {
+public class SweetSpotSimilarity extends ClassicSimilarity {
 
   private int ln_min = 1;
   private int ln_max = 1;
Index: lucene/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest.java
===================================================================
--- lucene/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest.java	(revision 1701895)
+++ lucene/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest.java	(working copy)
@@ -18,7 +18,7 @@
 
 package org.apache.lucene.misc;
 
-import org.apache.lucene.search.similarities.DefaultSimilarity;
+import org.apache.lucene.search.similarities.ClassicSimilarity;
 import org.apache.lucene.search.similarities.PerFieldSimilarityWrapper;
 import org.apache.lucene.search.similarities.Similarity;
 import org.apache.lucene.search.similarities.TFIDFSimilarity;
@@ -44,7 +44,7 @@
     final SweetSpotSimilarity ss = new SweetSpotSimilarity();
     ss.setLengthNormFactors(1,1,0.5f,true);
 
-    Similarity d = new DefaultSimilarity();
+    Similarity d = new ClassicSimilarity();
     Similarity s = ss;
 
 
@@ -200,7 +200,7 @@
   
     SweetSpotSimilarity ss = new SweetSpotSimilarity();
 
-    TFIDFSimilarity d = new DefaultSimilarity();
+    TFIDFSimilarity d = new ClassicSimilarity();
     TFIDFSimilarity s = ss;
     
     // tf equal
Index: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IDFValueSource.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IDFValueSource.java	(revision 1701895)
+++ lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IDFValueSource.java	(working copy)
@@ -50,7 +50,7 @@
     IndexSearcher searcher = (IndexSearcher)context.get("searcher");
     TFIDFSimilarity sim = asTFIDF(searcher.getSimilarity(true), field);
     if (sim == null) {
-      throw new UnsupportedOperationException("requires a TFIDFSimilarity (such as DefaultSimilarity)");
+      throw new UnsupportedOperationException("requires a TFIDFSimilarity (such as ClassicSimilarity)");
     }
     int docfreq = searcher.getIndexReader().docFreq(new Term(indexedField, indexedBytes));
     float idf = sim.idf(docfreq, searcher.getIndexReader().maxDoc());
Index: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NormValueSource.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NormValueSource.java	(revision 1701895)
+++ lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NormValueSource.java	(working copy)
@@ -60,7 +60,7 @@
     IndexSearcher searcher = (IndexSearcher)context.get("searcher");
     final TFIDFSimilarity similarity = IDFValueSource.asTFIDF(searcher.getSimilarity(true), field);
     if (similarity == null) {
-      throw new UnsupportedOperationException("requires a TFIDFSimilarity (such as DefaultSimilarity)");
+      throw new UnsupportedOperationException("requires a TFIDFSimilarity (such as ClassicSimilarity)");
     }
     final NumericDocValues norms = readerContext.reader().getNormValues(field);
 
Index: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/TFValueSource.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/TFValueSource.java	(revision 1701895)
+++ lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/TFValueSource.java	(working copy)
@@ -56,7 +56,7 @@
     IndexSearcher searcher = (IndexSearcher)context.get("searcher");
     final TFIDFSimilarity similarity = IDFValueSource.asTFIDF(searcher.getSimilarity(true), indexedField);
     if (similarity == null) {
-      throw new UnsupportedOperationException("requires a TFIDFSimilarity (such as DefaultSimilarity)");
+      throw new UnsupportedOperationException("requires a TFIDFSimilarity (such as ClassicSimilarity)");
     }
 
     return new FloatDocValues(this) {
Index: lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis.java	(revision 1701895)
+++ lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis.java	(working copy)
@@ -32,7 +32,7 @@
 import org.apache.lucene.search.BoostQuery;
 import org.apache.lucene.search.Query;
 import org.apache.lucene.search.TermQuery;
-import org.apache.lucene.search.similarities.DefaultSimilarity;
+import org.apache.lucene.search.similarities.ClassicSimilarity;
 import org.apache.lucene.search.similarities.TFIDFSimilarity;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.CharsRefBuilder;
@@ -313,7 +313,7 @@
    * Constructor requiring an IndexReader.
    */
   public MoreLikeThis(IndexReader ir) {
-    this(ir, new DefaultSimilarity());
+    this(ir, new ClassicSimilarity());
   }
 
   public MoreLikeThis(IndexReader ir, TFIDFSimilarity sim) {
Index: lucene/queries/src/test/org/apache/lucene/queries/function/TestLongNormValueSource.java
===================================================================
--- lucene/queries/src/test/org/apache/lucene/queries/function/TestLongNormValueSource.java	(revision 1701895)
+++ lucene/queries/src/test/org/apache/lucene/queries/function/TestLongNormValueSource.java	(working copy)
@@ -49,7 +49,7 @@
   static IndexSearcher searcher;
   static Analyzer analyzer;
   
-  private static Similarity sim = new PreciseDefaultSimilarity();
+  private static Similarity sim = new PreciseClassicSimilarity();
 
   @BeforeClass
   public static void beforeClass() throws Exception {
@@ -120,10 +120,10 @@
 
 
 /** Encodes norm as 4-byte float. */
-class PreciseDefaultSimilarity extends TFIDFSimilarity {
+class PreciseClassicSimilarity extends TFIDFSimilarity {
 
   /** Sole constructor: parameter-free */
-  public PreciseDefaultSimilarity() {}
+  public PreciseClassicSimilarity() {}
 
   /** Implemented as <code>overlap / maxOverlap</code>. */
   @Override
Index: lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources.java
===================================================================
--- lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources.java	(revision 1701895)
+++ lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources.java	(working copy)
@@ -80,7 +80,7 @@
 import org.apache.lucene.search.SortField;
 import org.apache.lucene.search.TopDocs;
 import org.apache.lucene.search.TermQuery;
-import org.apache.lucene.search.similarities.DefaultSimilarity;
+import org.apache.lucene.search.similarities.ClassicSimilarity;
 import org.apache.lucene.search.similarities.Similarity;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.BytesRef;
@@ -224,7 +224,7 @@
   public void testIDF() throws Exception {
     Similarity saved = searcher.getSimilarity(true);
     try {
-      searcher.setSimilarity(new DefaultSimilarity());
+      searcher.setSimilarity(new ClassicSimilarity());
       ValueSource vs = new IDFValueSource("bogus", "bogus", "text", new BytesRef("test"));
       assertHits(new FunctionQuery(vs), new float[] { 1.0f, 1.0f });
       assertAllExist(vs);
@@ -343,7 +343,7 @@
     Similarity saved = searcher.getSimilarity(true);
     try {
       // no norm field (so agnostic to indexed similarity)
-      searcher.setSimilarity(new DefaultSimilarity());
+      searcher.setSimilarity(new ClassicSimilarity());
       ValueSource vs = new NormValueSource("byte");
       assertHits(new FunctionQuery(vs), new float[] { 0f, 0f });
 
@@ -395,7 +395,7 @@
     Similarity saved = searcher.getSimilarity(true);
 
     try {
-      searcher.setSimilarity(new DefaultSimilarity());
+      searcher.setSimilarity(new ClassicSimilarity());
       
       ValueSource vs = new QueryValueSource(new TermQuery(new Term("string","bar")), 42F);
       assertHits(new FunctionQuery(vs), new float[] { 42F, 1.4054651F });
@@ -502,7 +502,7 @@
     Similarity saved = searcher.getSimilarity(true);
     try {
       // no norm field (so agnostic to indexed similarity)
-      searcher.setSimilarity(new DefaultSimilarity());
+      searcher.setSimilarity(new ClassicSimilarity());
 
       ValueSource vs = new TFValueSource("bogus", "bogus", "text", new BytesRef("test"));
       assertHits(new FunctionQuery(vs), 
Index: lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser.java
===================================================================
--- lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser.java	(revision 1701895)
+++ lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser.java	(working copy)
@@ -98,7 +98,7 @@
   @Override
   protected Query getFieldQuery(String field, String queryText, int slop) throws ParseException {
     if (field == null) {
-      List<BooleanClause> clauses = new ArrayList<>();
+      List<Query> clauses = new ArrayList<>();
       for (int i = 0; i < fields.length; i++) {
         Query q = super.getFieldQuery(fields[i], queryText, true);
         if (q != null) {
@@ -111,12 +111,12 @@
             }
           }
           q = applySlop(q,slop);
-          clauses.add(new BooleanClause(q, BooleanClause.Occur.SHOULD));
+          clauses.add(q);
         }
       }
       if (clauses.size() == 0)  // happens for stopwords
         return null;
-      return getBooleanQuery(clauses, true);
+      return getMultiFieldQuery(clauses);
     }
     Query q = super.getFieldQuery(field, queryText, true);
     q = applySlop(q,slop);
@@ -144,7 +144,7 @@
   @Override
   protected Query getFieldQuery(String field, String queryText, boolean quoted) throws ParseException {
     if (field == null) {
-      List<BooleanClause> clauses = new ArrayList<>();
+      List<Query> clauses = new ArrayList<>();
       for (int i = 0; i < fields.length; i++) {
         Query q = super.getFieldQuery(fields[i], queryText, quoted);
         if (q != null) {
@@ -156,12 +156,12 @@
               q = new BoostQuery(q, boost.floatValue());
             }
           }
-          clauses.add(new BooleanClause(q, BooleanClause.Occur.SHOULD));
+          clauses.add(q);
         }
       }
       if (clauses.size() == 0)  // happens for stopwords
         return null;
-      return getBooleanQuery(clauses, true);
+      return getMultiFieldQuery(clauses);
     }
     Query q = super.getFieldQuery(field, queryText, quoted);
     return q;
@@ -172,12 +172,11 @@
   protected Query getFuzzyQuery(String field, String termStr, float minSimilarity) throws ParseException
   {
     if (field == null) {
-      List<BooleanClause> clauses = new ArrayList<>();
+      List<Query> clauses = new ArrayList<>();
       for (int i = 0; i < fields.length; i++) {
-        clauses.add(new BooleanClause(getFuzzyQuery(fields[i], termStr, minSimilarity),
-            BooleanClause.Occur.SHOULD));
+        clauses.add(getFuzzyQuery(fields[i], termStr, minSimilarity));
       }
-      return getBooleanQuery(clauses, true);
+      return getMultiFieldQuery(clauses);
     }
     return super.getFuzzyQuery(field, termStr, minSimilarity);
   }
@@ -186,12 +185,11 @@
   protected Query getPrefixQuery(String field, String termStr) throws ParseException
   {
     if (field == null) {
-      List<BooleanClause> clauses = new ArrayList<>();
+      List<Query> clauses = new ArrayList<>();
       for (int i = 0; i < fields.length; i++) {
-        clauses.add(new BooleanClause(getPrefixQuery(fields[i], termStr),
-            BooleanClause.Occur.SHOULD));
+        clauses.add(getPrefixQuery(fields[i], termStr));
       }
-      return getBooleanQuery(clauses, true);
+      return getMultiFieldQuery(clauses);
     }
     return super.getPrefixQuery(field, termStr);
   }
@@ -199,12 +197,11 @@
   @Override
   protected Query getWildcardQuery(String field, String termStr) throws ParseException {
     if (field == null) {
-      List<BooleanClause> clauses = new ArrayList<>();
+      List<Query> clauses = new ArrayList<>();
       for (int i = 0; i < fields.length; i++) {
-        clauses.add(new BooleanClause(getWildcardQuery(fields[i], termStr),
-            BooleanClause.Occur.SHOULD));
+        clauses.add(getWildcardQuery(fields[i], termStr));
       }
-      return getBooleanQuery(clauses, true);
+      return getMultiFieldQuery(clauses);
     }
     return super.getWildcardQuery(field, termStr);
   }
@@ -213,12 +210,11 @@
   @Override
   protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) throws ParseException {
     if (field == null) {
-      List<BooleanClause> clauses = new ArrayList<>();
+      List<Query> clauses = new ArrayList<>();
       for (int i = 0; i < fields.length; i++) {
-        clauses.add(new BooleanClause(getRangeQuery(fields[i], part1, part2, startInclusive, endInclusive),
-            BooleanClause.Occur.SHOULD));
+        clauses.add(getRangeQuery(fields[i], part1, part2, startInclusive, endInclusive));
       }
-      return getBooleanQuery(clauses, true);
+      return getMultiFieldQuery(clauses);
     }
     return super.getRangeQuery(field, part1, part2, startInclusive, endInclusive);
   }
@@ -229,15 +225,28 @@
   protected Query getRegexpQuery(String field, String termStr)
       throws ParseException {
     if (field == null) {
-      List<BooleanClause> clauses = new ArrayList<>();
+      List<Query> clauses = new ArrayList<>();
       for (int i = 0; i < fields.length; i++) {
-        clauses.add(new BooleanClause(getRegexpQuery(fields[i], termStr),
-            BooleanClause.Occur.SHOULD));
+        clauses.add(getRegexpQuery(fields[i], termStr));
       }
-      return getBooleanQuery(clauses, true);
+      return getMultiFieldQuery(clauses);
     }
     return super.getRegexpQuery(field, termStr);
   }
+  
+  /** Creates a multifield query */
+  // TODO: investigate more general approach by default, e.g. DisjunctionMaxQuery?
+  protected Query getMultiFieldQuery(List<Query> queries) throws ParseException {
+    if (queries.isEmpty()) {
+      return null; // all clause words were filtered away by the analyzer.
+    }
+    BooleanQuery.Builder query = newBooleanQuery();
+    query.setDisableCoord(true);
+    for (Query sub : queries) {
+      query.add(sub, BooleanClause.Occur.SHOULD);
+    }
+    return query.build();
+  }
 
   /**
    * Parses a query which searches on the fields specified.
Index: lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase.java
===================================================================
--- lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase.java	(revision 1701895)
+++ lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase.java	(working copy)
@@ -116,7 +116,7 @@
     try {
       // TopLevelQuery is a Query followed by the end-of-input (EOF)
       Query res = TopLevelQuery(field);
-      return res!=null ? res : newBooleanQuery(false).build();
+      return res!=null ? res : newBooleanQuery().build();
     }
     catch (ParseException | TokenMgrError tme) {
       // rethrow to include the original query:
@@ -688,30 +688,10 @@
    * @exception org.apache.lucene.queryparser.classic.ParseException throw in overridden method to disallow
    */
   protected Query getBooleanQuery(List<BooleanClause> clauses) throws ParseException {
-    return getBooleanQuery(clauses, false);
-  }
-
-  /**
-   * Factory method for generating query, given a set of clauses.
-   * By default creates a boolean query composed of clauses passed in.
-   *
-   * Can be overridden by extending classes, to modify query being
-   * returned.
-   *
-   * @param clauses List that contains {@link org.apache.lucene.search.BooleanClause} instances
-   *    to join.
-   * @param disableCoord true if coord scoring should be disabled.
-   *
-   * @return Resulting {@link org.apache.lucene.search.Query} object.
-   * @exception org.apache.lucene.queryparser.classic.ParseException throw in overridden method to disallow
-   */
-  protected Query getBooleanQuery(List<BooleanClause> clauses, boolean disableCoord)
-    throws ParseException
-  {
     if (clauses.size()==0) {
       return null; // all clause words were filtered away by the analyzer.
     }
-    BooleanQuery.Builder query = newBooleanQuery(disableCoord);
+    BooleanQuery.Builder query = newBooleanQuery();
     for(final BooleanClause clause: clauses) {
       query.add(clause);
     }
Index: lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiAnalyzer.java
===================================================================
--- lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiAnalyzer.java	(revision 1701895)
+++ lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiAnalyzer.java	(working copy)
@@ -50,12 +50,12 @@
     assertEquals("\"foo foobar blah\"", qp.parse("\"foo foobar blah\"").toString());
 
     // two tokens at the same position:
-    assertEquals("(multi multi2) foo", qp.parse("multi foo").toString());
-    assertEquals("foo (multi multi2)", qp.parse("foo multi").toString());
-    assertEquals("(multi multi2) (multi multi2)", qp.parse("multi multi").toString());
-    assertEquals("+(foo (multi multi2)) +(bar (multi multi2))",
+    assertEquals("Synonym(multi multi2) foo", qp.parse("multi foo").toString());
+    assertEquals("foo Synonym(multi multi2)", qp.parse("foo multi").toString());
+    assertEquals("Synonym(multi multi2) Synonym(multi multi2)", qp.parse("multi multi").toString());
+    assertEquals("+(foo Synonym(multi multi2)) +(bar Synonym(multi multi2))",
         qp.parse("+(foo multi) +(bar multi)").toString());
-    assertEquals("+(foo (multi multi2)) field:\"bar (multi multi2)\"",
+    assertEquals("+(foo Synonym(multi multi2)) field:\"bar (multi multi2)\"",
         qp.parse("+(foo multi) field:\"bar multi\"").toString());
 
     // phrases:
@@ -65,12 +65,12 @@
         qp.parse("\"foo multi foobar multi\"").toString());
 
     // fields:
-    assertEquals("(field:multi field:multi2) field:foo", qp.parse("field:multi field:foo").toString());
+    assertEquals("Synonym(field:multi field:multi2) field:foo", qp.parse("field:multi field:foo").toString());
     assertEquals("field:\"(multi multi2) foo\"", qp.parse("field:\"multi foo\"").toString());
 
     // three tokens at one position:
-    assertEquals("triplemulti multi3 multi2", qp.parse("triplemulti").toString());
-    assertEquals("foo (triplemulti multi3 multi2) foobar",
+    assertEquals("Synonym(multi2 multi3 triplemulti)", qp.parse("triplemulti").toString());
+    assertEquals("foo Synonym(multi2 multi3 triplemulti) foobar",
         qp.parse("foo triplemulti foobar").toString());
 
     // phrase with non-default slop:
@@ -89,7 +89,7 @@
 
     // non-default operator:
     qp.setDefaultOperator(QueryParserBase.AND_OPERATOR);
-    assertEquals("+(multi multi2) +foo", qp.parse("multi foo").toString());
+    assertEquals("+Synonym(multi multi2) +foo", qp.parse("multi foo").toString());
 
   }
     
Index: lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser.java
===================================================================
--- lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser.java	(revision 1701895)
+++ lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser.java	(working copy)
@@ -35,6 +35,7 @@
 import org.apache.lucene.search.BoostQuery;
 import org.apache.lucene.search.MultiPhraseQuery;
 import org.apache.lucene.search.Query;
+import org.apache.lucene.search.SynonymQuery;
 import org.apache.lucene.search.TermQuery;
 import org.apache.lucene.util.automaton.TooComplexToDeterminizeException;
 
@@ -300,21 +301,16 @@
     /** ordinary behavior, synonyms form uncoordinated boolean query */
     QueryParser dumb = new QueryParser("field",
         new Analyzer1());
-    BooleanQuery.Builder expanded = new BooleanQuery.Builder();
-    expanded.setDisableCoord(true);
-    expanded.add(new TermQuery(new Term("field", "dogs")),
-        BooleanClause.Occur.SHOULD);
-    expanded.add(new TermQuery(new Term("field", "dog")),
-        BooleanClause.Occur.SHOULD);
-    assertEquals(expanded.build(), dumb.parse("\"dogs\""));
+    Query expanded = new SynonymQuery(new Term("field", "dogs"), new Term("field", "dog"));
+    assertEquals(expanded, dumb.parse("\"dogs\""));
     /** even with the phrase operator the behavior is the same */
-    assertEquals(expanded.build(), dumb.parse("dogs"));
+    assertEquals(expanded, dumb.parse("dogs"));
     
     /**
      * custom behavior, the synonyms are expanded, unless you use quote operator
      */
     QueryParser smart = new SmartQueryParser();
-    assertEquals(expanded.build(), smart.parse("dogs"));
+    assertEquals(expanded, smart.parse("dogs"));
     
     Query unexpanded = new TermQuery(new Term("field", "dogs"));
     assertEquals(unexpanded, smart.parse("\"dogs\""));
@@ -333,11 +329,7 @@
   
   /** simple synonyms test */
   public void testSynonyms() throws Exception {
-    BooleanQuery.Builder expectedB = new BooleanQuery.Builder();
-    expectedB.setDisableCoord(true);
-    expectedB.add(new TermQuery(new Term("field", "dogs")), BooleanClause.Occur.SHOULD);
-    expectedB.add(new TermQuery(new Term("field", "dog")), BooleanClause.Occur.SHOULD);
-    Query expected = expectedB.build();
+    Query expected = new SynonymQuery(new Term("field", "dogs"), new Term("field", "dog"));
     QueryParser qp = new QueryParser("field", new MockSynonymAnalyzer());
     assertEquals(expected, qp.parse("dogs"));
     assertEquals(expected, qp.parse("\"dogs\""));
@@ -405,11 +397,7 @@
   
   /** simple CJK synonym test */
   public void testCJKSynonym() throws Exception {
-    BooleanQuery.Builder expectedB = new BooleanQuery.Builder();
-    expectedB.setDisableCoord(true);
-    expectedB.add(new TermQuery(new Term("field", "国")), BooleanClause.Occur.SHOULD);
-    expectedB.add(new TermQuery(new Term("field", "國")), BooleanClause.Occur.SHOULD);
-    Query expected = expectedB.build();
+    Query expected = new SynonymQuery(new Term("field", "国"), new Term("field", "國"));
     QueryParser qp = new QueryParser("field", new MockCJKSynonymAnalyzer());
     assertEquals(expected, qp.parse("国"));
     qp.setDefaultOperator(Operator.AND);
@@ -422,11 +410,8 @@
   public void testCJKSynonymsOR() throws Exception {
     BooleanQuery.Builder expectedB = new BooleanQuery.Builder();
     expectedB.add(new TermQuery(new Term("field", "中")), BooleanClause.Occur.SHOULD);
-    BooleanQuery.Builder inner = new BooleanQuery.Builder();
-    inner.setDisableCoord(true);
-    inner.add(new TermQuery(new Term("field", "国")), BooleanClause.Occur.SHOULD);
-    inner.add(new TermQuery(new Term("field", "國")), BooleanClause.Occur.SHOULD);
-    expectedB.add(inner.build(), BooleanClause.Occur.SHOULD);
+    Query inner = new SynonymQuery(new Term("field", "国"), new Term("field", "國"));
+    expectedB.add(inner, BooleanClause.Occur.SHOULD);
     Query expected = expectedB.build();
     QueryParser qp = new QueryParser("field", new MockCJKSynonymAnalyzer());
     assertEquals(expected, qp.parse("中国"));
@@ -438,16 +423,10 @@
   public void testCJKSynonymsOR2() throws Exception {
     BooleanQuery.Builder expectedB = new BooleanQuery.Builder();
     expectedB.add(new TermQuery(new Term("field", "中")), BooleanClause.Occur.SHOULD);
-    BooleanQuery.Builder inner = new BooleanQuery.Builder();
-    inner.setDisableCoord(true);
-    inner.add(new TermQuery(new Term("field", "国")), BooleanClause.Occur.SHOULD);
-    inner.add(new TermQuery(new Term("field", "國")), BooleanClause.Occur.SHOULD);
-    expectedB.add(inner.build(), BooleanClause.Occur.SHOULD);
-    BooleanQuery.Builder inner2 = new BooleanQuery.Builder();
-    inner2.setDisableCoord(true);
-    inner2.add(new TermQuery(new Term("field", "国")), BooleanClause.Occur.SHOULD);
-    inner2.add(new TermQuery(new Term("field", "國")), BooleanClause.Occur.SHOULD);
-    expectedB.add(inner2.build(), BooleanClause.Occur.SHOULD);
+    SynonymQuery inner = new SynonymQuery(new Term("field", "国"), new Term("field", "國"));
+    expectedB.add(inner, BooleanClause.Occur.SHOULD);
+    SynonymQuery inner2 = new SynonymQuery(new Term("field", "国"), new Term("field", "國"));
+    expectedB.add(inner2, BooleanClause.Occur.SHOULD);
     Query expected = expectedB.build();
     QueryParser qp = new QueryParser("field", new MockCJKSynonymAnalyzer());
     assertEquals(expected, qp.parse("中国国"));
@@ -459,11 +438,8 @@
   public void testCJKSynonymsAND() throws Exception {
     BooleanQuery.Builder expectedB = new BooleanQuery.Builder();
     expectedB.add(new TermQuery(new Term("field", "中")), BooleanClause.Occur.MUST);
-    BooleanQuery.Builder inner = new BooleanQuery.Builder();
-    inner.setDisableCoord(true);
-    inner.add(new TermQuery(new Term("field", "国")), BooleanClause.Occur.SHOULD);
-    inner.add(new TermQuery(new Term("field", "國")), BooleanClause.Occur.SHOULD);
-    expectedB.add(inner.build(), BooleanClause.Occur.MUST);
+    Query inner = new SynonymQuery(new Term("field", "国"), new Term("field", "國"));
+    expectedB.add(inner, BooleanClause.Occur.MUST);
     Query expected = expectedB.build();
     QueryParser qp = new QueryParser("field", new MockCJKSynonymAnalyzer());
     qp.setDefaultOperator(Operator.AND);
@@ -476,16 +452,10 @@
   public void testCJKSynonymsAND2() throws Exception {
     BooleanQuery.Builder expectedB = new BooleanQuery.Builder();
     expectedB.add(new TermQuery(new Term("field", "中")), BooleanClause.Occur.MUST);
-    BooleanQuery.Builder inner = new BooleanQuery.Builder();
-    inner.setDisableCoord(true);
-    inner.add(new TermQuery(new Term("field", "国")), BooleanClause.Occur.SHOULD);
-    inner.add(new TermQuery(new Term("field", "國")), BooleanClause.Occur.SHOULD);
-    expectedB.add(inner.build(), BooleanClause.Occur.MUST);
-    BooleanQuery.Builder inner2 = new BooleanQuery.Builder();
-    inner2.setDisableCoord(true);
-    inner2.add(new TermQuery(new Term("field", "国")), BooleanClause.Occur.SHOULD);
-    inner2.add(new TermQuery(new Term("field", "國")), BooleanClause.Occur.SHOULD);
-    expectedB.add(inner2.build(), BooleanClause.Occur.MUST);
+    Query inner = new SynonymQuery(new Term("field", "国"), new Term("field", "國"));
+    expectedB.add(inner, BooleanClause.Occur.MUST);
+    Query inner2 = new SynonymQuery(new Term("field", "国"), new Term("field", "國"));
+    expectedB.add(inner2, BooleanClause.Occur.MUST);
     Query expected = expectedB.build();
     QueryParser qp = new QueryParser("field", new MockCJKSynonymAnalyzer());
     qp.setDefaultOperator(Operator.AND);
Index: lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/FuzzyLikeThisQuery.java
===================================================================
--- lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/FuzzyLikeThisQuery.java	(revision 1701895)
+++ lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/FuzzyLikeThisQuery.java	(working copy)
@@ -41,7 +41,7 @@
 import org.apache.lucene.search.MaxNonCompetitiveBoostAttribute;
 import org.apache.lucene.search.Query;
 import org.apache.lucene.search.TermQuery;
-import org.apache.lucene.search.similarities.DefaultSimilarity;
+import org.apache.lucene.search.similarities.ClassicSimilarity;
 import org.apache.lucene.search.similarities.TFIDFSimilarity;
 import org.apache.lucene.util.AttributeSource;
 import org.apache.lucene.util.BytesRef;
@@ -68,7 +68,7 @@
     // a better way might be to convert this into multitermquery rewrite methods.
     // the rewrite method can 'average' the TermContext's term statistics (docfreq,totalTermFreq) 
     // provided to TermQuery, so that the general idea is agnostic to any scoring system...
-    static TFIDFSimilarity sim=new DefaultSimilarity();
+    static TFIDFSimilarity sim=new ClassicSimilarity();
     ArrayList<FieldVals> fieldVals=new ArrayList<>();
     Analyzer analyzer;
 
Index: lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery2.java
===================================================================
--- lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery2.java	(revision 1701895)
+++ lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery2.java	(working copy)
@@ -33,7 +33,7 @@
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.MultiTermQuery;
 import org.apache.lucene.search.TopDocs;
-import org.apache.lucene.search.similarities.DefaultSimilarity;
+import org.apache.lucene.search.similarities.ClassicSimilarity;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.IOUtils;
 import org.apache.lucene.util.LuceneTestCase;
@@ -111,7 +111,7 @@
     }
     // even though this uses a boost-only rewrite, this test relies upon queryNorm being the default implementation,
     // otherwise scores are different!
-    searcher.setSimilarity(new DefaultSimilarity());
+    searcher.setSimilarity(new ClassicSimilarity());
     
     writer.close();
     String line;
Index: lucene/test-framework/src/java/org/apache/lucene/search/RandomSimilarityProvider.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/search/RandomSimilarityProvider.java	(revision 1701895)
+++ lucene/test-framework/src/java/org/apache/lucene/search/RandomSimilarityProvider.java	(working copy)
@@ -37,7 +37,7 @@
 import org.apache.lucene.search.similarities.BasicModelIne;
 import org.apache.lucene.search.similarities.BasicModelP;
 import org.apache.lucene.search.similarities.DFRSimilarity;
-import org.apache.lucene.search.similarities.DefaultSimilarity;
+import org.apache.lucene.search.similarities.ClassicSimilarity;
 import org.apache.lucene.search.similarities.Distribution;
 import org.apache.lucene.search.similarities.DistributionLL;
 import org.apache.lucene.search.similarities.DistributionSPL;
@@ -63,7 +63,7 @@
  * for the same field.
  */
 public class RandomSimilarityProvider extends PerFieldSimilarityWrapper {
-  final DefaultSimilarity defaultSim = new DefaultSimilarity();
+  final ClassicSimilarity defaultSim = new ClassicSimilarity();
   final List<Similarity> knownSims;
   Map<String,Similarity> previousMappings = new HashMap<>();
   final int perFieldSeed;
@@ -139,7 +139,7 @@
   static List<Similarity> allSims;
   static {
     allSims = new ArrayList<>();
-    allSims.add(new DefaultSimilarity());
+    allSims.add(new ClassicSimilarity());
     allSims.add(new BM25Similarity());
     for (BasicModel basicModel : BASIC_MODELS) {
       for (AfterEffect afterEffect : AFTER_EFFECTS) {
Index: lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv.java	(revision 1701895)
+++ lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv.java	(working copy)
@@ -38,7 +38,7 @@
 import org.apache.lucene.codecs.simpletext.SimpleTextCodec;
 import org.apache.lucene.index.RandomCodec;
 import org.apache.lucene.search.RandomSimilarityProvider;
-import org.apache.lucene.search.similarities.DefaultSimilarity;
+import org.apache.lucene.search.similarities.ClassicSimilarity;
 import org.apache.lucene.search.similarities.Similarity;
 import org.apache.lucene.util.LuceneTestCase.SuppressCodecs;
 import org.junit.internal.AssumptionViolatedException;
@@ -207,7 +207,7 @@
     TimeZone randomTimeZone = randomTimeZone(random());
     timeZone = testTimeZone.equals("random") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);
     TimeZone.setDefault(timeZone);
-    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());
+    similarity = random().nextBoolean() ? new ClassicSimilarity() : new RandomSimilarityProvider(random());
 
     // Check codec restrictions once at class level.
     try {
Index: solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase.java
===================================================================
--- solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase.java	(revision 1701895)
+++ solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase.java	(working copy)
@@ -152,7 +152,7 @@
     try {
       // TopLevelQuery is a Query followed by the end-of-input (EOF)
       Query res = TopLevelQuery(null);  // pass null so we can tell later if an explicit field was provided or not
-      return res!=null ? res : newBooleanQuery(false).build();
+      return res!=null ? res : newBooleanQuery().build();
     }
     catch (ParseException | TokenMgrError tme) {
       throw new SyntaxError("Cannot parse '" +query+ "': " + tme.getMessage(), tme);
@@ -488,30 +488,12 @@
    *
    * @return Resulting {@link org.apache.lucene.search.Query} object.
    */
-  protected Query getBooleanQuery(List<BooleanClause> clauses) throws SyntaxError {
-    return getBooleanQuery(clauses, false);
-  }
-
-  /**
-   * Factory method for generating query, given a set of clauses.
-   * By default creates a boolean query composed of clauses passed in.
-   *
-   * Can be overridden by extending classes, to modify query being
-   * returned.
-   *
-   * @param clauses List that contains {@link org.apache.lucene.search.BooleanClause} instances
-   *    to join.
-   * @param disableCoord true if coord scoring should be disabled.
-   *
-   * @return Resulting {@link org.apache.lucene.search.Query} object.
-   */
-  protected Query getBooleanQuery(List<BooleanClause> clauses, boolean disableCoord)
-    throws SyntaxError
+  protected Query getBooleanQuery(List<BooleanClause> clauses) throws SyntaxError
   {
     if (clauses.size()==0) {
       return null; // all clause words were filtered away by the analyzer.
     }
-    BooleanQuery.Builder query = newBooleanQuery(disableCoord);
+    BooleanQuery.Builder query = newBooleanQuery();
     for(final BooleanClause clause: clauses) {
       query.add(clause);
     }
Index: solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.java	(revision 1701895)
+++ solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.java	(working copy)
@@ -1010,8 +1010,8 @@
     }
     
     @Override
-    protected Query getBooleanQuery(List<BooleanClause> clauses, boolean disableCoord) throws SyntaxError {
-      Query q = super.getBooleanQuery(clauses, disableCoord);
+    protected Query getBooleanQuery(List<BooleanClause> clauses) throws SyntaxError {
+      Query q = super.getBooleanQuery(clauses);
       if (q != null) {
         q = QueryUtils.makeQueryable(q);
       }
Index: solr/core/src/java/org/apache/solr/search/similarities/DefaultSimilarityFactory.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/similarities/DefaultSimilarityFactory.java	(revision 1701895)
+++ solr/core/src/java/org/apache/solr/search/similarities/DefaultSimilarityFactory.java	(working copy)
@@ -17,7 +17,7 @@
  * limitations under the License.
  */
 
-import org.apache.lucene.search.similarities.DefaultSimilarity;
+import org.apache.lucene.search.similarities.ClassicSimilarity;
 import org.apache.lucene.search.similarities.Similarity;
 import org.apache.lucene.search.similarities.TFIDFSimilarity; // javadoc
 import org.apache.solr.common.params.SolrParams;
@@ -24,15 +24,15 @@
 import org.apache.solr.schema.SimilarityFactory;
 
 /**
- * Factory for {@link DefaultSimilarity}
+ * Factory for {@link ClassicSimilarity}
  * <p>
- * DefaultSimilarity is Lucene's default scoring implementation, based
+ * ClassicSimilarity is Lucene's original scoring implementation, based
  * upon the Vector Space Model.
  * <p>
  * Optional settings:
  * <ul>
  *   <li>discountOverlaps (bool): Sets
- *       {@link DefaultSimilarity#setDiscountOverlaps(boolean)}</li>
+ *       {@link ClassicSimilarity#setDiscountOverlaps(boolean)}</li>
  * </ul>
  * @see TFIDFSimilarity
  * @lucene.experimental
@@ -40,13 +40,13 @@
 public class DefaultSimilarityFactory extends SimilarityFactory {
 
   /** Init param name for specifying the value to use in 
-   * {@link DefaultSimilarity#setDiscountOverlaps(boolean)} 
+   * {@link ClassicSimilarity#setDiscountOverlaps(boolean)} 
    */
   public static final String DISCOUNT_OVERLAPS = "discountOverlaps";
 
   /** 
-   * Controls the value of {@link DefaultSimilarity#setDiscountOverlaps(boolean)} 
-   * on newly constructed instances of {@link DefaultSimilarity}
+   * Controls the value of {@link ClassicSimilarity#setDiscountOverlaps(boolean)} 
+   * on newly constructed instances of {@link ClassicSimilarity}
    */
   protected boolean discountOverlaps = true;
 
@@ -58,7 +58,7 @@
 
   @Override
   public Similarity getSimilarity() {
-    DefaultSimilarity sim = new DefaultSimilarity();
+    ClassicSimilarity sim = new ClassicSimilarity();
     sim.setDiscountOverlaps(discountOverlaps);
     return sim;
   }
Index: solr/core/src/java/org/apache/solr/search/similarities/SchemaSimilarityFactory.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/similarities/SchemaSimilarityFactory.java	(revision 1701895)
+++ solr/core/src/java/org/apache/solr/search/similarities/SchemaSimilarityFactory.java	(working copy)
@@ -17,7 +17,7 @@
  * limitations under the License.
  */
 
-import org.apache.lucene.search.similarities.DefaultSimilarity;
+import org.apache.lucene.search.similarities.ClassicSimilarity;
 import org.apache.lucene.search.similarities.PerFieldSimilarityWrapper;
 import org.apache.lucene.search.similarities.Similarity;
 import org.apache.solr.common.params.SolrParams;
@@ -29,7 +29,7 @@
 /**
  * SimilarityFactory that returns a {@link PerFieldSimilarityWrapper}
  * that delegates to the field type, if it's configured, otherwise
- * {@link DefaultSimilarity}.
+ * {@link ClassicSimilarity}.
  *
  * <p>
  * <b>NOTE:</b> Users should be aware that in addition to supporting 
@@ -45,7 +45,7 @@
  */
 public class SchemaSimilarityFactory extends SimilarityFactory implements SolrCoreAware {
   private Similarity similarity;
-  private Similarity defaultSimilarity = new DefaultSimilarity();
+  private Similarity defaultSimilarity = new ClassicSimilarity();
   private volatile SolrCore core;
 
   @Override
Index: solr/core/src/java/org/apache/solr/search/similarities/SweetSpotSimilarityFactory.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/similarities/SweetSpotSimilarityFactory.java	(revision 1701895)
+++ solr/core/src/java/org/apache/solr/search/similarities/SweetSpotSimilarityFactory.java	(working copy)
@@ -18,7 +18,7 @@
  */
 
 import org.apache.lucene.misc.SweetSpotSimilarity;
-import org.apache.lucene.search.similarities.DefaultSimilarity; // jdoc
+import org.apache.lucene.search.similarities.ClassicSimilarity; // jdoc
 import org.apache.lucene.search.similarities.Similarity;
 import org.apache.solr.common.params.SolrParams;
 import org.apache.solr.schema.SimilarityFactory;
@@ -28,7 +28,7 @@
  * <p>Factory for {@link SweetSpotSimilarity}.</p>
  * <p>
  * <code>SweetSpotSimilarity</code> is an extension of 
- * {@link DefaultSimilarity} that provides additional tuning options for 
+ * {@link ClassicSimilarity} that provides additional tuning options for 
  * specifying the "sweetspot" of optimal <code>tf</code> and 
  * <code>lengthNorm</code> values in the source data.
  * </p>
Index: solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery.java
===================================================================
--- solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery.java	(revision 1701895)
+++ solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery.java	(working copy)
@@ -27,7 +27,7 @@
 import java.util.Random;
 
 import org.apache.lucene.index.FieldInvertState;
-import org.apache.lucene.search.similarities.DefaultSimilarity;
+import org.apache.lucene.search.similarities.ClassicSimilarity;
 import org.apache.lucene.search.similarities.TFIDFSimilarity;
 import org.apache.solr.SolrTestCaseJ4;
 import org.junit.BeforeClass;
@@ -326,7 +326,7 @@
     assertQ(req("fl","*,score","q", "{!func}docfreq($field,$value)", "fq","id:6", "field","a_t", "value","cow"), "//float[@name='score']='3.0'");
     assertQ(req("fl","*,score","q", "{!func}termfreq(a_t,cow)", "fq","id:6"), "//float[@name='score']='5.0'");
 
-    TFIDFSimilarity similarity = new DefaultSimilarity();
+    TFIDFSimilarity similarity = new ClassicSimilarity();
 
     // make sure it doesn't get a NPE if no terms are present in a field.
     assertQ(req("fl","*,score","q", "{!func}termfreq(nofield_t,cow)", "fq","id:6"), "//float[@name='score']='0.0'");
Index: solr/core/src/test/org/apache/solr/search/similarities/MockConfigurableSimilarity.java
===================================================================
--- solr/core/src/test/org/apache/solr/search/similarities/MockConfigurableSimilarity.java	(revision 1701895)
+++ solr/core/src/test/org/apache/solr/search/similarities/MockConfigurableSimilarity.java	(working copy)
@@ -16,9 +16,9 @@
  */
 package org.apache.solr.search.similarities;
 
-import org.apache.lucene.search.similarities.DefaultSimilarity;
+import org.apache.lucene.search.similarities.ClassicSimilarity;
 
-public class MockConfigurableSimilarity extends DefaultSimilarity {
+public class MockConfigurableSimilarity extends ClassicSimilarity {
   private String passthrough;
 
   public MockConfigurableSimilarity(String passthrough) {
Index: solr/core/src/test/org/apache/solr/search/similarities/TestDefaultSimilarityFactory.java
===================================================================
--- solr/core/src/test/org/apache/solr/search/similarities/TestDefaultSimilarityFactory.java	(revision 1701895)
+++ solr/core/src/test/org/apache/solr/search/similarities/TestDefaultSimilarityFactory.java	(working copy)
@@ -17,7 +17,7 @@
  * limitations under the License.
  */
 
-import org.apache.lucene.search.similarities.DefaultSimilarity;
+import org.apache.lucene.search.similarities.ClassicSimilarity;
 import org.apache.lucene.search.similarities.Similarity;
 import org.junit.BeforeClass;
 
@@ -33,14 +33,14 @@
   /** default parameters */
   public void testDefaults() throws Exception {
     Similarity sim = getSimilarity("text");
-    assertEquals(DefaultSimilarity.class, sim.getClass());
-    assertEquals(true, ((DefaultSimilarity)sim).getDiscountOverlaps());
+    assertEquals(ClassicSimilarity.class, sim.getClass());
+    assertEquals(true, ((ClassicSimilarity)sim).getDiscountOverlaps());
   }
   /** explicit params */
   public void testParams() throws Exception {
     Similarity sim = getSimilarity("text_overlap");
-    assertEquals(DefaultSimilarity.class, sim.getClass());
-    assertEquals(false, ((DefaultSimilarity)sim).getDiscountOverlaps());
+    assertEquals(ClassicSimilarity.class, sim.getClass());
+    assertEquals(false, ((ClassicSimilarity)sim).getDiscountOverlaps());
   }
 
 }
Index: solr/core/src/test/org/apache/solr/search/similarities/TestNonDefinedSimilarityFactory.java
===================================================================
--- solr/core/src/test/org/apache/solr/search/similarities/TestNonDefinedSimilarityFactory.java	(revision 1701895)
+++ solr/core/src/test/org/apache/solr/search/similarities/TestNonDefinedSimilarityFactory.java	(working copy)
@@ -17,7 +17,7 @@
  * limitations under the License.
  */
 
-import org.apache.lucene.search.similarities.DefaultSimilarity;
+import org.apache.lucene.search.similarities.ClassicSimilarity;
 import org.apache.lucene.util.Version;
 import org.junit.After;
 
@@ -37,7 +37,7 @@
   public void testCurrent() throws Exception {
     // no sys prop set, rely on LATEST
     initCore("solrconfig-basic.xml","schema-tiny.xml");
-    DefaultSimilarity sim = getSimilarity("text", DefaultSimilarity.class);
+    ClassicSimilarity sim = getSimilarity("text", ClassicSimilarity.class);
     assertEquals(true, sim.getDiscountOverlaps());
   }
 }
Index: solr/core/src/test/org/apache/solr/search/similarities/TestPerFieldSimilarity.java
===================================================================
--- solr/core/src/test/org/apache/solr/search/similarities/TestPerFieldSimilarity.java	(revision 1701895)
+++ solr/core/src/test/org/apache/solr/search/similarities/TestPerFieldSimilarity.java	(working copy)
@@ -18,7 +18,7 @@
  */
 
 import org.apache.lucene.misc.SweetSpotSimilarity;
-import org.apache.lucene.search.similarities.DefaultSimilarity;
+import org.apache.lucene.search.similarities.ClassicSimilarity;
 import org.apache.lucene.search.similarities.Similarity;
 import org.junit.BeforeClass;
 
@@ -59,18 +59,18 @@
   /** test a field where no similarity is specified */
   public void testDefaults() throws Exception {
     Similarity sim = getSimilarity("sim3text");
-    assertEquals(DefaultSimilarity.class, sim.getClass());;
+    assertEquals(ClassicSimilarity.class, sim.getClass());;
   }
   
   /** ... and for a dynamic field */
   public void testDefaultsDynamic() throws Exception {
     Similarity sim = getSimilarity("text_sim3");
-    assertEquals(DefaultSimilarity.class, sim.getClass());
+    assertEquals(ClassicSimilarity.class, sim.getClass());
   }
   
   /** test a field that does not exist */
   public void testNonexistent() throws Exception {
     Similarity sim = getSimilarity("sdfdsfdsfdswr5fsdfdsfdsfs");
-    assertEquals(DefaultSimilarity.class, sim.getClass());
+    assertEquals(ClassicSimilarity.class, sim.getClass());
   }
 }
Index: solr/core/src/test/org/apache/solr/search/similarities/TestSweetSpotSimilarityFactory.java
===================================================================
--- solr/core/src/test/org/apache/solr/search/similarities/TestSweetSpotSimilarityFactory.java	(revision 1701895)
+++ solr/core/src/test/org/apache/solr/search/similarities/TestSweetSpotSimilarityFactory.java	(working copy)
@@ -18,7 +18,7 @@
  */
 
 import org.apache.lucene.misc.SweetSpotSimilarity;
-import org.apache.lucene.search.similarities.DefaultSimilarity;
+import org.apache.lucene.search.similarities.ClassicSimilarity;
 import org.apache.lucene.search.similarities.Similarity;
 import org.junit.BeforeClass;
 
@@ -36,7 +36,7 @@
     SweetSpotSimilarity sim = getSimilarity("text", SweetSpotSimilarity.class);
 
     // SSS tf w/defaults should behave just like DS
-    DefaultSimilarity d = new DefaultSimilarity();
+    ClassicSimilarity d = new ClassicSimilarity();
     for (int i = 0; i <=1000; i++) {
       assertEquals("tf: i="+i, d.tf(i), sim.tf(i), 0.0F);
     }
@@ -52,7 +52,7 @@
     SweetSpotSimilarity sim = getSimilarity("text_baseline", 
                                             SweetSpotSimilarity.class);
     
-    DefaultSimilarity d = new DefaultSimilarity();
+    ClassicSimilarity d = new ClassicSimilarity();
 
     // constant up to 6
     for (int i = 1; i <=6; i++) {
Index: solr/core/src/test/org/apache/solr/update/DocumentBuilderTest.java
===================================================================
--- solr/core/src/test/org/apache/solr/update/DocumentBuilderTest.java	(revision 1701895)
+++ solr/core/src/test/org/apache/solr/update/DocumentBuilderTest.java	(working copy)
@@ -24,7 +24,7 @@
 import org.apache.lucene.index.LeafReader;
 import org.apache.lucene.index.NumericDocValues;
 import org.apache.lucene.index.SlowCompositeReaderWrapper;
-import org.apache.lucene.search.similarities.DefaultSimilarity;
+import org.apache.lucene.search.similarities.ClassicSimilarity;
 import org.apache.lucene.util.TestUtil;
 import org.apache.solr.SolrTestCaseJ4;
 import org.apache.solr.common.SolrDocument;
@@ -352,11 +352,11 @@
       SolrIndexSearcher searcher = req.getSearcher();
       LeafReader reader = SlowCompositeReaderWrapper.wrap(searcher.getTopReaderContext().reader());
 
-      assertTrue("similarity doesn't extend DefaultSimilarity, " + 
+      assertTrue("similarity doesn't extend ClassicSimilarity, " + 
                  "config or defaults have changed since test was written",
-                 searcher.getSimilarity(true) instanceof DefaultSimilarity);
+                 searcher.getSimilarity(true) instanceof ClassicSimilarity);
 
-      DefaultSimilarity sim = (DefaultSimilarity) searcher.getSimilarity(true);
+      ClassicSimilarity sim = (ClassicSimilarity) searcher.getSimilarity(true);
       
       NumericDocValues titleNorms = reader.getNormValues("title");
       NumericDocValues fooNorms = reader.getNormValues("foo_t");
@@ -380,7 +380,7 @@
   /**
    * Given a length, and boost returns the expected encoded norm 
    */
-  private static byte expectedNorm(final DefaultSimilarity sim,
+  private static byte expectedNorm(final ClassicSimilarity sim,
                                    final int length, final float boost) {
     return (byte) sim.encodeNormValue(boost / ((float) Math.sqrt(length)));
   }
