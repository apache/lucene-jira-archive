Index: lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointReader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointReader.java	(revision 00c02290d58cab118c41e9fb01a458a466ea98d4)
+++ lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointReader.java	(date 1551290363000)
@@ -37,7 +37,12 @@
     curRead = start-1;
     this.end = end;
     this.packedBytesLength = packedBytesLength;
-    this.pointValue = new HeapPointValue(block, packedBytesLength);
+    if (start < end) {
+      this.pointValue = new HeapPointValue(block, packedBytesLength);
+    } else {
+      //no values
+      this.pointValue = new HeapPointValue(block, 0);
+    }
   }
 
   @Override
Index: lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter.java	(revision 00c02290d58cab118c41e9fb01a458a466ea98d4)
+++ lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter.java	(date 1551290363000)
@@ -41,7 +41,12 @@
     this.size = size;
     this.packedBytesLength = packedBytesLength;
     this.scratch = new byte[packedBytesLength];
-    offlinePointValue = new HeapPointReader.HeapPointValue(block, packedBytesLength);
+    if (size > 0) {
+      offlinePointValue = new HeapPointReader.HeapPointValue(block, packedBytesLength);
+    } else {
+      //no values
+      offlinePointValue =  new HeapPointReader.HeapPointValue(block, 0);
+    }
   }
 
   /** Returns a reference, in <code>result</code>, to the byte[] slice holding this value */
