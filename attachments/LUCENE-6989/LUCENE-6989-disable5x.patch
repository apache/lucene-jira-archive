 lucene/CHANGES.txt                                    |  3 ++-
 .../java/org/apache/lucene/store/MMapDirectory.java   | 19 ++++++++++---------
 2 files changed, 12 insertions(+), 10 deletions(-)

diff --git a/lucene/CHANGES.txt b/lucene/CHANGES.txt
index ecbbd18..a498d56 100644
--- a/lucene/CHANGES.txt
+++ b/lucene/CHANGES.txt
@@ -137,7 +137,8 @@ Bug Fixes
 * LUCENE-7019: Add two-phase iteration to GeoPointTermQueryConstantScoreWrapper.
   (Robert Muir via Nick Knize)
 
-* LUCENE-6989: Disable MMapDirectory unmap-hack for Java 9. Official support
+* LUCENE-6989: Improve MMapDirectory's unmapping checks to catch more non-working
+  cases. The unmap-hack does not yet work with recent Java 9. Official support
   will come with Lucene 6.  (Uwe Schindler)
 
 Other
diff --git a/lucene/core/src/java/org/apache/lucene/store/MMapDirectory.java b/lucene/core/src/java/org/apache/lucene/store/MMapDirectory.java
index 5668f80..51d7e60 100644
--- a/lucene/core/src/java/org/apache/lucene/store/MMapDirectory.java
+++ b/lucene/core/src/java/org/apache/lucene/store/MMapDirectory.java
@@ -30,6 +30,7 @@ import java.security.PrivilegedAction;
 import java.security.PrivilegedExceptionAction;
 import java.security.PrivilegedActionException;
 import java.util.Locale;
+import java.util.Objects;
 import java.util.concurrent.Future;
 import java.lang.reflect.Method;
 
@@ -167,16 +168,16 @@ public class MMapDirectory extends FSDirectory {
     @Override
     @SuppressForbidden(reason = "Needs access to private APIs in DirectBuffer and sun.misc.Cleaner to enable hack")
     public Boolean run() {
-      // we currently don't support Java 9+, because internal APIs changed
-      // and the checks done here are not complete to detect this:
-      if (Constants.JRE_IS_MINIMUM_JAVA9) {
-        return false;
-      }
       try {
-        Class<?> clazz = Class.forName("java.nio.DirectByteBuffer");
-        Method method = clazz.getMethod("cleaner");
-        method.setAccessible(true);
-        return true;
+        // inspect DirectByteBuffer:
+        final Class<?> dbClazz = Class.forName("java.nio.DirectByteBuffer");
+        final Method cleanerMethod = dbClazz.getMethod("cleaner");
+        cleanerMethod.setAccessible(true);
+        // try to lookup the clean method from sun.misc.Cleaner:
+        final Class<?> cleanerClazz = Class.forName("sun.misc.Cleaner");
+        cleanerClazz.getMethod("clean");
+        // check return type and return our decision:
+        return Objects.equals(cleanerMethod.getReturnType(), cleanerClazz);
       } catch (Exception e) {
         return false;
       }
