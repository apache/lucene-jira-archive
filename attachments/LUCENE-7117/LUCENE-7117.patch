diff --git a/lucene/core/src/java/org/apache/lucene/search/PointRangeQuery.java b/lucene/core/src/java/org/apache/lucene/search/PointRangeQuery.java
index 9384d23..682ced3 100644
--- a/lucene/core/src/java/org/apache/lucene/search/PointRangeQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/PointRangeQuery.java
@@ -241,8 +241,8 @@ public abstract class PointRangeQuery extends Query {
   @Override
   public final int hashCode() {
     int hash = super.hashCode();
-    hash = 31 * hash + Arrays.hashCode(lowerPoint);
-    hash = 31 * hash + Arrays.hashCode(upperPoint);
+    hash = 31 * hash + Arrays.deepHashCode(lowerPoint);
+    hash = 31 * hash + Arrays.deepHashCode(upperPoint);
     hash = 31 * hash + numDims;
     hash = 31 * hash + Objects.hashCode(bytesPerDim);
     return hash;
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestPointQueries.java b/lucene/core/src/test/org/apache/lucene/search/TestPointQueries.java
index c72ab44..b4a586d 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestPointQueries.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestPointQueries.java
@@ -1896,82 +1896,112 @@ public class TestPointQueries extends LuceneTestCase {
   }
 
   public void testPointRangeEquals() {
-    Query q = IntPoint.newRangeQuery("a", 0, 1000);
-    assertEquals(q, IntPoint.newRangeQuery("a", 0, 1000));
-    assertFalse(q.equals(IntPoint.newRangeQuery("a", 1, 1000)));
-
-    q = LongPoint.newRangeQuery("a", 0, 1000);
-    assertEquals(q, LongPoint.newRangeQuery("a", 0, 1000));
-    assertFalse(q.equals(LongPoint.newRangeQuery("a", 1, 1000)));
-
-    q = FloatPoint.newRangeQuery("a", 0, 1000);
-    assertEquals(q, FloatPoint.newRangeQuery("a", 0, 1000));
-    assertFalse(q.equals(FloatPoint.newRangeQuery("a", 1, 1000)));
-
-    q = DoublePoint.newRangeQuery("a", 0, 1000);
-    assertEquals(q, DoublePoint.newRangeQuery("a", 0, 1000));
-    assertFalse(q.equals(DoublePoint.newRangeQuery("a", 1, 1000)));
+    Query q1 = IntPoint.newRangeQuery("a", 0, 1000);
+    Query q2 = IntPoint.newRangeQuery("a", 0, 1000);
+    assertEquals(q1, q2);
+    assertEquals(q1.hashCode(), q2.hashCode());
+    assertFalse(q1.equals(IntPoint.newRangeQuery("a", 1, 1000)));
+
+    q1 = LongPoint.newRangeQuery("a", 0, 1000);
+    q2 = LongPoint.newRangeQuery("a", 0, 1000);
+    assertEquals(q1, q2);
+    assertEquals(q1.hashCode(), q2.hashCode());
+    assertFalse(q1.equals(LongPoint.newRangeQuery("a", 1, 1000)));
+
+    q1 = FloatPoint.newRangeQuery("a", 0, 1000);
+    q2 = FloatPoint.newRangeQuery("a", 0, 1000);
+    assertEquals(q1, q2);
+    assertEquals(q1.hashCode(), q2.hashCode());
+    assertFalse(q1.equals(FloatPoint.newRangeQuery("a", 1, 1000)));
+
+    q1 = DoublePoint.newRangeQuery("a", 0, 1000);
+    q2 = DoublePoint.newRangeQuery("a", 0, 1000);
+    assertEquals(q1, q2);
+    assertEquals(q1.hashCode(), q2.hashCode());
+    assertFalse(q1.equals(DoublePoint.newRangeQuery("a", 1, 1000)));
 
     byte[] zeros = new byte[5];
     byte[] ones = new byte[5];
     Arrays.fill(ones, (byte) 0xff);
-    q = BinaryPoint.newRangeQuery("a", new byte[][] {zeros}, new byte[][] {ones});
-    assertEquals(q, BinaryPoint.newRangeQuery("a", new byte[][] {zeros}, new byte[][] {ones}));
+    q1 = BinaryPoint.newRangeQuery("a", new byte[][] {zeros}, new byte[][] {ones});
+    q2 = BinaryPoint.newRangeQuery("a", new byte[][] {zeros}, new byte[][] {ones});
+    assertEquals(q1, q2);
+    assertEquals(q1.hashCode(), q2.hashCode());
     byte[] other = ones.clone();
     other[2] = (byte) 5;
-    assertFalse(q.equals(BinaryPoint.newRangeQuery("a", new byte[][] {zeros}, new byte[][] {other})));
+    assertFalse(q1.equals(BinaryPoint.newRangeQuery("a", new byte[][] {zeros}, new byte[][] {other})));
   }
 
   public void testPointExactEquals() {
-    Query q = IntPoint.newExactQuery("a", 1000);
-    assertEquals(q, IntPoint.newExactQuery("a", 1000));
-    assertFalse(q.equals(IntPoint.newExactQuery("a", 1)));
-
-    q = LongPoint.newExactQuery("a", 1000);
-    assertEquals(q, LongPoint.newExactQuery("a", 1000));
-    assertFalse(q.equals(LongPoint.newExactQuery("a", 1)));
-
-    q = FloatPoint.newExactQuery("a", 1000);
-    assertEquals(q, FloatPoint.newExactQuery("a", 1000));
-    assertFalse(q.equals(FloatPoint.newExactQuery("a", 1)));
-
-    q = DoublePoint.newExactQuery("a", 1000);
-    assertEquals(q, DoublePoint.newExactQuery("a", 1000));
-    assertFalse(q.equals(DoublePoint.newExactQuery("a", 1)));
+    Query q1 = IntPoint.newExactQuery("a", 1000);
+    Query q2 = IntPoint.newExactQuery("a", 1000);
+    assertEquals(q1, q2);
+    assertEquals(q1.hashCode(), q2.hashCode());
+    assertFalse(q1.equals(IntPoint.newExactQuery("a", 1)));
+
+    q1 = LongPoint.newExactQuery("a", 1000);
+    q2 = LongPoint.newExactQuery("a", 1000);
+    assertEquals(q1, q2);
+    assertEquals(q1.hashCode(), q2.hashCode());
+    assertFalse(q1.equals(LongPoint.newExactQuery("a", 1)));
+
+    q1 = FloatPoint.newExactQuery("a", 1000);
+    q2 = FloatPoint.newExactQuery("a", 1000);
+    assertEquals(q1, q2);
+    assertEquals(q1.hashCode(), q2.hashCode());
+    assertFalse(q1.equals(FloatPoint.newExactQuery("a", 1)));
+
+    q1 = DoublePoint.newExactQuery("a", 1000);
+    q2 = DoublePoint.newExactQuery("a", 1000);
+    assertEquals(q1, q2);
+    assertEquals(q1.hashCode(), q2.hashCode());
+    assertFalse(q1.equals(DoublePoint.newExactQuery("a", 1)));
 
     byte[] ones = new byte[5];
     Arrays.fill(ones, (byte) 0xff);
-    q = BinaryPoint.newExactQuery("a", ones);
-    assertEquals(q, BinaryPoint.newExactQuery("a", ones));
+    q1 = BinaryPoint.newExactQuery("a", ones);
+    q2 = BinaryPoint.newExactQuery("a", ones);
+    assertEquals(q1, q2);
+    assertEquals(q1.hashCode(), q2.hashCode());
     byte[] other = ones.clone();
     other[2] = (byte) 5;
-    assertFalse(q.equals(BinaryPoint.newExactQuery("a", other)));
+    assertFalse(q1.equals(BinaryPoint.newExactQuery("a", other)));
   }
 
   public void testPointInSetEquals() {
-    Query q = IntPoint.newSetQuery("a", 0, 1000, 17);
-    assertEquals(q, IntPoint.newSetQuery("a", 17, 0, 1000));
-    assertFalse(q.equals(IntPoint.newSetQuery("a", 1, 17, 1000)));
-
-    q = LongPoint.newSetQuery("a", 0, 1000, 17);
-    assertEquals(q, LongPoint.newSetQuery("a", 17, 0, 1000));
-    assertFalse(q.equals(LongPoint.newSetQuery("a", 1, 17, 1000)));
-
-    q = FloatPoint.newSetQuery("a", 0, 1000, 17);
-    assertEquals(q, FloatPoint.newSetQuery("a", 17, 0, 1000));
-    assertFalse(q.equals(FloatPoint.newSetQuery("a", 1, 17, 1000)));
-
-    q = DoublePoint.newSetQuery("a", 0, 1000, 17);
-    assertEquals(q, DoublePoint.newSetQuery("a", 17, 0, 1000));
-    assertFalse(q.equals(DoublePoint.newSetQuery("a", 1, 17, 1000)));
+    Query q1 = IntPoint.newSetQuery("a", 0, 1000, 17);
+    Query q2 = IntPoint.newSetQuery("a", 17, 0, 1000);
+    assertEquals(q1, q2);
+    assertEquals(q1.hashCode(), q2.hashCode());
+    assertFalse(q1.equals(IntPoint.newSetQuery("a", 1, 17, 1000)));
+
+    q1 = LongPoint.newSetQuery("a", 0, 1000, 17);
+    q2 = LongPoint.newSetQuery("a", 17, 0, 1000);
+    assertEquals(q1, q2);
+    assertEquals(q1.hashCode(), q2.hashCode());
+    assertFalse(q1.equals(LongPoint.newSetQuery("a", 1, 17, 1000)));
+
+    q1 = FloatPoint.newSetQuery("a", 0, 1000, 17);
+    q2 = FloatPoint.newSetQuery("a", 17, 0, 1000);
+    assertEquals(q1, q2);
+    assertEquals(q1.hashCode(), q2.hashCode());
+    assertFalse(q1.equals(FloatPoint.newSetQuery("a", 1, 17, 1000)));
+
+    q1 = DoublePoint.newSetQuery("a", 0, 1000, 17);
+    q2 = DoublePoint.newSetQuery("a", 17, 0, 1000);
+    assertEquals(q1, q2);
+    assertEquals(q1.hashCode(), q2.hashCode());
+    assertFalse(q1.equals(DoublePoint.newSetQuery("a", 1, 17, 1000)));
 
     byte[] zeros = new byte[5];
     byte[] ones = new byte[5];
     Arrays.fill(ones, (byte) 0xff);
-    q = BinaryPoint.newSetQuery("a", new byte[][] {zeros, ones});
-    assertEquals(q, BinaryPoint.newSetQuery("a", new byte[][] {zeros, ones}));
+    q1 = BinaryPoint.newSetQuery("a", new byte[][] {zeros, ones});
+    q2 = BinaryPoint.newSetQuery("a", new byte[][] {zeros, ones});
+    assertEquals(q1, q2);
+    assertEquals(q1.hashCode(), q2.hashCode());
     byte[] other = ones.clone();
     other[2] = (byte) 5;
-    assertFalse(q.equals(BinaryPoint.newSetQuery("a", new byte[][] {zeros, other})));
+    assertFalse(q1.equals(BinaryPoint.newSetQuery("a", new byte[][] {zeros, other})));
   }
 }
diff --git a/lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint.java b/lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint.java
index a7a1295..7d9281b 100644
--- a/lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint.java
+++ b/lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint.java
@@ -96,16 +96,22 @@ public class TestBigIntegerPoint extends LuceneTestCase {
   }
 
   public void testQueryEquals() throws Exception {
-    Query q = BigIntegerPoint.newRangeQuery("a", BigInteger.valueOf(0), BigInteger.valueOf(1000));
-    assertEquals(q, BigIntegerPoint.newRangeQuery("a", BigInteger.valueOf(0), BigInteger.valueOf(1000)));
-    assertFalse(q.equals(BigIntegerPoint.newRangeQuery("a", BigInteger.valueOf(1), BigInteger.valueOf(1000))));
+    Query q1 = BigIntegerPoint.newRangeQuery("a", BigInteger.valueOf(0), BigInteger.valueOf(1000));
+    Query q2 = BigIntegerPoint.newRangeQuery("a", BigInteger.valueOf(0), BigInteger.valueOf(1000));
+    assertEquals(q1, q2);
+    assertEquals(q1.hashCode(), q2.hashCode());
+    assertFalse(q1.equals(BigIntegerPoint.newRangeQuery("a", BigInteger.valueOf(1), BigInteger.valueOf(1000))));
 
-    q = BigIntegerPoint.newExactQuery("a", BigInteger.valueOf(1000));
-    assertEquals(q, BigIntegerPoint.newExactQuery("a", BigInteger.valueOf(1000)));
-    assertFalse(q.equals(BigIntegerPoint.newExactQuery("a", BigInteger.valueOf(1))));
+    q1 = BigIntegerPoint.newExactQuery("a", BigInteger.valueOf(1000));
+    q2 = BigIntegerPoint.newExactQuery("a", BigInteger.valueOf(1000));
+    assertEquals(q1, q2);
+    assertEquals(q1.hashCode(), q2.hashCode());
+    assertFalse(q1.equals(BigIntegerPoint.newExactQuery("a", BigInteger.valueOf(1))));
 
-    q = BigIntegerPoint.newSetQuery("a", BigInteger.valueOf(0), BigInteger.valueOf(1000), BigInteger.valueOf(17));
-    assertEquals(q, BigIntegerPoint.newSetQuery("a", BigInteger.valueOf(17), BigInteger.valueOf(0), BigInteger.valueOf(1000)));
-    assertFalse(q.equals(BigIntegerPoint.newSetQuery("a", BigInteger.valueOf(1), BigInteger.valueOf(17), BigInteger.valueOf(1000))));
+    q1 = BigIntegerPoint.newSetQuery("a", BigInteger.valueOf(0), BigInteger.valueOf(1000), BigInteger.valueOf(17));
+    q2 = BigIntegerPoint.newSetQuery("a", BigInteger.valueOf(17), BigInteger.valueOf(0), BigInteger.valueOf(1000));
+    assertEquals(q1, q2);
+    assertEquals(q1.hashCode(), q2.hashCode());
+    assertFalse(q1.equals(BigIntegerPoint.newSetQuery("a", BigInteger.valueOf(1), BigInteger.valueOf(17), BigInteger.valueOf(1000))));
   }     
 }
diff --git a/lucene/sandbox/src/test/org/apache/lucene/document/TestInetAddressPoint.java b/lucene/sandbox/src/test/org/apache/lucene/document/TestInetAddressPoint.java
index b0e7107..ee34ecc 100644
--- a/lucene/sandbox/src/test/org/apache/lucene/document/TestInetAddressPoint.java
+++ b/lucene/sandbox/src/test/org/apache/lucene/document/TestInetAddressPoint.java
@@ -92,21 +92,29 @@ public class TestInetAddressPoint extends LuceneTestCase {
   }
 
   public void testQueryEquals() throws Exception {
-    Query q = InetAddressPoint.newRangeQuery("a", InetAddress.getByName("1.2.3.3"), InetAddress.getByName("1.2.3.5"));
-    assertEquals(q, InetAddressPoint.newRangeQuery("a", InetAddress.getByName("1.2.3.3"), InetAddress.getByName("1.2.3.5")));
-    assertFalse(q.equals(InetAddressPoint.newRangeQuery("a", InetAddress.getByName("1.2.3.3"), InetAddress.getByName("1.2.3.7"))));
+    Query q1 = InetAddressPoint.newRangeQuery("a", InetAddress.getByName("1.2.3.3"), InetAddress.getByName("1.2.3.5"));
+    Query q2 = InetAddressPoint.newRangeQuery("a", InetAddress.getByName("1.2.3.3"), InetAddress.getByName("1.2.3.5"));
+    assertEquals(q1, q2);
+    assertEquals(q1.hashCode(), q2.hashCode());
+    assertFalse(q1.equals(InetAddressPoint.newRangeQuery("a", InetAddress.getByName("1.2.3.3"), InetAddress.getByName("1.2.3.7"))));
 
-    q = InetAddressPoint.newPrefixQuery("a", InetAddress.getByName("1.2.3.3"), 16);
-    assertEquals(q, InetAddressPoint.newPrefixQuery("a", InetAddress.getByName("1.2.3.3"), 16));
-    assertFalse(q.equals(InetAddressPoint.newPrefixQuery("a", InetAddress.getByName("1.1.3.5"), 16)));
-    assertFalse(q.equals(InetAddressPoint.newPrefixQuery("a", InetAddress.getByName("1.2.3.5"), 24)));
+    q1 = InetAddressPoint.newPrefixQuery("a", InetAddress.getByName("1.2.3.3"), 16);
+    q2 = InetAddressPoint.newPrefixQuery("a", InetAddress.getByName("1.2.3.3"), 16);
+    assertEquals(q1, q2);
+    assertEquals(q1.hashCode(), q2.hashCode());
+    assertFalse(q1.equals(InetAddressPoint.newPrefixQuery("a", InetAddress.getByName("1.1.3.5"), 16)));
+    assertFalse(q1.equals(InetAddressPoint.newPrefixQuery("a", InetAddress.getByName("1.2.3.5"), 24)));
 
-    q = InetAddressPoint.newExactQuery("a", InetAddress.getByName("1.2.3.3"));
-    assertEquals(q, InetAddressPoint.newExactQuery("a", InetAddress.getByName("1.2.3.3")));
-    assertFalse(q.equals(InetAddressPoint.newExactQuery("a", InetAddress.getByName("1.2.3.5"))));
+    q1 = InetAddressPoint.newExactQuery("a", InetAddress.getByName("1.2.3.3"));
+    q2 = InetAddressPoint.newExactQuery("a", InetAddress.getByName("1.2.3.3"));
+    assertEquals(q1, q2);
+    assertEquals(q1.hashCode(), q2.hashCode());
+    assertFalse(q1.equals(InetAddressPoint.newExactQuery("a", InetAddress.getByName("1.2.3.5"))));
 
-    q = InetAddressPoint.newSetQuery("a", InetAddress.getByName("1.2.3.3"), InetAddress.getByName("1.2.3.5"));
-    assertEquals(q, InetAddressPoint.newSetQuery("a", InetAddress.getByName("1.2.3.3"), InetAddress.getByName("1.2.3.5")));
-    assertFalse(q.equals(InetAddressPoint.newSetQuery("a", InetAddress.getByName("1.2.3.3"), InetAddress.getByName("1.2.3.7"))));
+    q1 = InetAddressPoint.newSetQuery("a", InetAddress.getByName("1.2.3.3"), InetAddress.getByName("1.2.3.5"));
+    q2 = InetAddressPoint.newSetQuery("a", InetAddress.getByName("1.2.3.3"), InetAddress.getByName("1.2.3.5"));
+    assertEquals(q1, q2);
+    assertEquals(q1.hashCode(), q2.hashCode());
+    assertFalse(q1.equals(InetAddressPoint.newSetQuery("a", InetAddress.getByName("1.2.3.3"), InetAddress.getByName("1.2.3.7"))));
   }
 }
diff --git a/lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint.java b/lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint.java
index ff4af12..1b6a6d2 100644
--- a/lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint.java
+++ b/lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint.java
@@ -186,21 +186,27 @@ public class TestLatLonPoint extends LuceneTestCase {
   }
 
   public void testQueryEquals() throws Exception {
-    Query q = LatLonPoint.newBoxQuery("field", 50, 70, -40, 20);
-    assertEquals(q, LatLonPoint.newBoxQuery("field", 50, 70, -40, 20));
-    assertFalse(q.equals(LatLonPoint.newBoxQuery("field", 50, 70, -40, 10)));
-
-    q = LatLonPoint.newDistanceQuery("field", 50, 70, 10000);
-    assertEquals(q, LatLonPoint.newDistanceQuery("field", 50, 70, 10000));
-    assertFalse(q.equals(LatLonPoint.newDistanceQuery("field", 50, 70, 11000)));
-    assertFalse(q.equals(LatLonPoint.newDistanceQuery("field", 50, 60, 10000)));
+    Query q1 = LatLonPoint.newBoxQuery("field", 50, 70, -40, 20);
+    Query q2 = LatLonPoint.newBoxQuery("field", 50, 70, -40, 20);
+    assertEquals(q1, q2);
+    assertEquals(q1.hashCode(), q2.hashCode());
+    assertFalse(q1.equals(LatLonPoint.newBoxQuery("field", 50, 70, -40, 10)));
+
+    q1 = LatLonPoint.newDistanceQuery("field", 50, 70, 10000);
+    q2 = LatLonPoint.newDistanceQuery("field", 50, 70, 10000);
+    assertEquals(q1, q2);
+    assertEquals(q1.hashCode(), q2.hashCode());
+    assertFalse(q1.equals(LatLonPoint.newDistanceQuery("field", 50, 70, 11000)));
+    assertFalse(q1.equals(LatLonPoint.newDistanceQuery("field", 50, 60, 10000)));
 
                 
     double[] polyLats1 = new double[] {30, 40, 40, 30, 30};
     double[] polyLons1 = new double[] {90, 90, -40, -40, 90};
     double[] polyLats2 = new double[] {20, 40, 40, 20, 20};
-    q = LatLonPoint.newPolygonQuery("field", polyLats1, polyLons1);
-    assertEquals(q, LatLonPoint.newPolygonQuery("field", polyLats1, polyLons1));
-    assertFalse(q.equals(LatLonPoint.newPolygonQuery("field", polyLats2, polyLons1)));
+    q1 = LatLonPoint.newPolygonQuery("field", polyLats1, polyLons1);
+    q2 = LatLonPoint.newPolygonQuery("field", polyLats1, polyLons1);
+    assertEquals(q1, q2);
+    assertEquals(q1.hashCode(), q2.hashCode());
+    assertFalse(q1.equals(LatLonPoint.newPolygonQuery("field", polyLats2, polyLons1)));
   }     
 }
