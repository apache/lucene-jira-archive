Index: solr/core/src/java/org/apache/solr/search/Grouping.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/Grouping.java	(revision 1176318)
+++ solr/core/src/java/org/apache/solr/search/Grouping.java	(revision )
@@ -666,7 +666,7 @@
       }
 
       sort = sort == null ? Sort.RELEVANCE : sort;
-      firstPass = new TermFirstPassGroupingCollectorJava6(groupBy, sort, actualGroupsToFind);
+      firstPass = new TermFirstPassGroupingCollector(groupBy, sort, actualGroupsToFind);
       return firstPass;
     }
 
@@ -1013,24 +1013,8 @@
       filler = docValues.getValueFiller();
       mval = filler.getValue();
     }
-
-    @Override
-    protected CollectedSearchGroup<MutableValue> pollLast() {
-      return orderedGroups.pollLast();
-    }
+  }
-  }
 
-  static class TermFirstPassGroupingCollectorJava6 extends TermFirstPassGroupingCollector {
-    public TermFirstPassGroupingCollectorJava6(String groupField, Sort groupSort, int topNGroups) throws IOException {
-      super(groupField, groupSort, topNGroups);
-    }
-
-    @Override
-    protected CollectedSearchGroup<BytesRef> pollLast() {
-      return orderedGroups.pollLast();
-    }
-  }
-
   static class FunctionSecondPassGroupingCollector extends AbstractSecondPassGroupingCollector<MutableValue> {
 
     private final ValueSource groupByVS;
Index: modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector.java
===================================================================
--- modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector.java	(revision 1176318)
+++ modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector.java	(revision )
@@ -213,9 +213,7 @@
 
       // We already tested that the document is competitive, so replace
       // the bottom group with this new group.
-
-      // java 6-only: final CollectedSearchGroup bottomGroup = orderedGroups.pollLast();
-      final CollectedSearchGroup<GROUP_VALUE_TYPE> bottomGroup = pollLast();
+      final CollectedSearchGroup<GROUP_VALUE_TYPE> bottomGroup = orderedGroups.pollLast();
       assert orderedGroups.size() == topNGroups -1;
 
       groupMap.remove(bottomGroup.groupValue);
@@ -351,13 +349,5 @@
    */
   protected abstract GROUP_VALUE_TYPE copyDocGroupValue(GROUP_VALUE_TYPE groupValue, GROUP_VALUE_TYPE reuse);
 
-
-
-  protected CollectedSearchGroup<GROUP_VALUE_TYPE> pollLast() {
-    // java 6-only: final CollectedSearchGroup bottomGroup = orderedGroups.pollLast();
-    final CollectedSearchGroup<GROUP_VALUE_TYPE> bottomGroup = orderedGroups.last();
-    orderedGroups.remove(bottomGroup);
-    return bottomGroup;
-  }
+}
-}
 
