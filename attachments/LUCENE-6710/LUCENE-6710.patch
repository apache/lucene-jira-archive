Index: lucene/sandbox/src/java/org/apache/lucene/search/GeoPointTermsEnum.java
===================================================================
--- lucene/sandbox/src/java/org/apache/lucene/search/GeoPointTermsEnum.java	(revision 1693692)
+++ lucene/sandbox/src/java/org/apache/lucene/search/GeoPointTermsEnum.java	(working copy)
@@ -17,6 +17,7 @@
  * limitations under the License.
  */
 
+import java.math.BigInteger;
 import java.util.Collections;
 import java.util.LinkedList;
 import java.util.List;
@@ -67,7 +68,13 @@
    */
   private final void computeRange(long term, final short shift) {
     final long split = term | (0x1L<<shift);
-    final long upperMax = term | ((0x1L<<(shift+1))-1);
+    assert shift < 64;
+    final long upperMax;
+    if (shift < 63) {
+      upperMax = term | ((1L << (shift+1))-1);
+    } else {
+      upperMax = 0xffffffffffffffffL;
+    }
     final long lowerMax = split-1;
 
     relateAndRecurse(term, lowerMax, shift);
@@ -88,7 +95,7 @@
     final double maxLon = GeoUtils.mortonUnhashLon(end);
     final double maxLat = GeoUtils.mortonUnhashLat(end);
 
-    final short level = (short)(62-res>>>1);
+    final short level = (short)((GeoUtils.BITS<<1)-res>>>1);
 
     // if cell is within and a factor of the precision step, or it crosses the edge of the shape add the range
     final boolean within = res % GeoPointField.PRECISION_STEP == 0 && cellWithin(minLon, minLat, maxLon, maxLat);
Index: lucene/sandbox/src/java/org/apache/lucene/util/GeoUtils.java
===================================================================
--- lucene/sandbox/src/java/org/apache/lucene/util/GeoUtils.java	(revision 1693692)
+++ lucene/sandbox/src/java/org/apache/lucene/util/GeoUtils.java	(working copy)
@@ -27,9 +27,9 @@
 public final class GeoUtils {
   private static final short MIN_LON = -180;
   private static final short MIN_LAT = -90;
-  public static final short BITS = 31;
-  private static final double LON_SCALE = (0x1L<<BITS)/360.0D;
-  private static final double LAT_SCALE = (0x1L<<BITS)/180.0D;
+  public static final short BITS = 32;
+  private static final double LON_SCALE = ((0x1L<<BITS)-1)/360.0D;
+  private static final double LAT_SCALE = ((0x1L<<BITS)-1)/180.0D;
   public static final double TOLERANCE = 1E-6;
 
   /** Minimum longitude value. */
Index: lucene/sandbox/src/test/org/apache/lucene/search/TestGeoPointQuery.java
===================================================================
--- lucene/sandbox/src/test/org/apache/lucene/search/TestGeoPointQuery.java	(revision 1693692)
+++ lucene/sandbox/src/test/org/apache/lucene/search/TestGeoPointQuery.java	(working copy)
@@ -265,6 +265,13 @@
     doTestRandom(10000);
   }
 
+  @Test
+  public void testMortonEncoding() throws Exception {
+    long hash = GeoUtils.mortonHash(180, 90);
+    assertEquals(180.0, GeoUtils.mortonUnhashLon(hash), 0);
+    assertEquals(90.0, GeoUtils.mortonUnhashLat(hash), 0);
+  }
+
   @Nightly
   public void testRandomBig() throws Exception {
     doTestRandom(200000);
