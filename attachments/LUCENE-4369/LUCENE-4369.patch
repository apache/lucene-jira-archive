Index: lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping.java
===================================================================
--- lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping.java	(revision 1383338)
+++ lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping.java	(working copy)
@@ -582,7 +582,7 @@
 
     final List<List<Document>> updateDocs = new ArrayList<List<Document>>();
 
-    FieldType groupEndType = new FieldType(StringField.TYPE_NOT_STORED);
+    FieldType groupEndType = new FieldType(MatchOnlyField.TYPE_NOT_STORED);
     groupEndType.setIndexOptions(IndexOptions.DOCS_ONLY);
     groupEndType.setOmitNorms(true);
 
@@ -594,10 +594,10 @@
         Document doc = new Document();
         docs.add(doc);
         if (groupValue.group != null) {
-          doc.add(newStringField("group", groupValue.group.utf8ToString(), Field.Store.YES));
+          doc.add(newMatchOnlyField("group", groupValue.group.utf8ToString(), Field.Store.YES));
         }
-        doc.add(newStringField("sort1", groupValue.sort1.utf8ToString(), Field.Store.NO));
-        doc.add(newStringField("sort2", groupValue.sort2.utf8ToString(), Field.Store.NO));
+        doc.add(newMatchOnlyField("sort1", groupValue.sort1.utf8ToString(), Field.Store.NO));
+        doc.add(newMatchOnlyField("sort2", groupValue.sort2.utf8ToString(), Field.Store.NO));
         doc.add(new IntField("id", groupValue.id, Field.Store.NO));
         doc.add(newTextField("content", groupValue.content, Field.Store.NO));
         //System.out.println("TEST:     doc content=" + groupValue.content + " group=" + (groupValue.group == null ? "null" : groupValue.group.utf8ToString()) + " sort1=" + groupValue.sort1.utf8ToString() + " id=" + groupValue.id);
@@ -703,12 +703,12 @@
         doc.add(idvGroupField);
       }
 
-      Field group = newStringField("group", "", Field.Store.NO);
+      Field group = newMatchOnlyField("group", "", Field.Store.NO);
       doc.add(group);
-      Field sort1 = newStringField("sort1", "", Field.Store.NO);
+      Field sort1 = newMatchOnlyField("sort1", "", Field.Store.NO);
       doc.add(sort1);
       docNoGroup.add(sort1);
-      Field sort2 = newStringField("sort2", "", Field.Store.NO);
+      Field sort2 = newMatchOnlyField("sort2", "", Field.Store.NO);
       doc.add(sort2);
       docNoGroup.add(sort2);
       Field content = newTextField("content", "", Field.Store.NO);
Index: lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest.java
===================================================================
--- lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest.java	(revision 1383338)
+++ lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest.java	(working copy)
@@ -22,7 +22,7 @@
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.FieldType;
 import org.apache.lucene.document.SortedBytesDocValuesField;
-import org.apache.lucene.document.StringField;
+import org.apache.lucene.document.MatchOnlyField;
 import org.apache.lucene.document.TextField;
 import org.apache.lucene.index.DocValues;
 import org.apache.lucene.index.RandomIndexWriter;
@@ -81,7 +81,7 @@
     addGroupField(doc, groupField, "author1", canUseIDV);
     doc.add(new TextField("content", "some more random textual data", Field.Store.YES));
     doc.add(new Field("id", "3", customType));
-    doc.add(new StringField("groupend", "x", Field.Store.NO));
+    doc.add(new MatchOnlyField("groupend", "x", Field.Store.NO));
     documents.add(doc);
     w.addDocuments(documents);
     documents.clear();
@@ -91,7 +91,7 @@
     addGroupField(doc, groupField, "author2", canUseIDV);
     doc.add(new TextField("content", "some random text", Field.Store.YES));
     doc.add(new Field("id", "4", customType));
-    doc.add(new StringField("groupend", "x", Field.Store.NO));
+    doc.add(new MatchOnlyField("groupend", "x", Field.Store.NO));
     w.addDocument(doc);
 
     // 4
@@ -106,7 +106,7 @@
     addGroupField(doc, groupField, "author3", canUseIDV);
     doc.add(new TextField("content", "random", Field.Store.YES));
     doc.add(new Field("id", "6", customType));
-    doc.add(new StringField("groupend", "x", Field.Store.NO));
+    doc.add(new MatchOnlyField("groupend", "x", Field.Store.NO));
     documents.add(doc);
     w.addDocuments(documents);
     documents.clear();
@@ -115,7 +115,7 @@
     doc = new Document();
     doc.add(new TextField("content", "random word stuck in alot of other text", Field.Store.YES));
     doc.add(new Field("id", "6", customType));
-    doc.add(new StringField("groupend", "x", Field.Store.NO));
+    doc.add(new MatchOnlyField("groupend", "x", Field.Store.NO));
 
     w.addDocument(doc);
 
Index: lucene/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest.java
===================================================================
--- lucene/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest.java	(revision 1383338)
+++ lucene/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest.java	(working copy)
@@ -61,21 +61,21 @@
     Document doc = new Document();
     addGroupField(doc, groupField, "author1", canUseIDV, valueType);
     doc.add(newTextField("content", "random text", Field.Store.YES));
-    doc.add(newStringField("id", "1", Field.Store.YES));
+    doc.add(newMatchOnlyField("id", "1", Field.Store.YES));
     w.addDocument(doc);
 
     // 1
     doc = new Document();
     addGroupField(doc, groupField, "author1", canUseIDV, valueType);
     doc.add(newTextField("content", "some more random text blob", Field.Store.YES));
-    doc.add(newStringField("id", "2", Field.Store.YES));
+    doc.add(newMatchOnlyField("id", "2", Field.Store.YES));
     w.addDocument(doc);
 
     // 2
     doc = new Document();
     addGroupField(doc, groupField, "author1", canUseIDV, valueType);
     doc.add(newTextField("content", "some more random textual data", Field.Store.YES));
-    doc.add(newStringField("id", "3", Field.Store.YES));
+    doc.add(newMatchOnlyField("id", "3", Field.Store.YES));
     w.addDocument(doc);
     w.commit(); // To ensure a second segment
 
@@ -83,33 +83,33 @@
     doc = new Document();
     addGroupField(doc, groupField, "author2", canUseIDV, valueType);
     doc.add(newTextField("content", "some random text", Field.Store.YES));
-    doc.add(newStringField("id", "4", Field.Store.YES));
+    doc.add(newMatchOnlyField("id", "4", Field.Store.YES));
     w.addDocument(doc);
 
     // 4
     doc = new Document();
     addGroupField(doc, groupField, "author3", canUseIDV, valueType);
     doc.add(newTextField("content", "some more random text", Field.Store.YES));
-    doc.add(newStringField("id", "5", Field.Store.YES));
+    doc.add(newMatchOnlyField("id", "5", Field.Store.YES));
     w.addDocument(doc);
 
     // 5
     doc = new Document();
     addGroupField(doc, groupField, "author3", canUseIDV, valueType);
     doc.add(newTextField("content", "random blob", Field.Store.YES));
-    doc.add(newStringField("id", "6", Field.Store.YES));
+    doc.add(newMatchOnlyField("id", "6", Field.Store.YES));
     w.addDocument(doc);
 
     // 6 -- no author field
     doc = new Document();
     doc.add(newTextField("content", "random word stuck in alot of other text", Field.Store.YES));
-    doc.add(newStringField("id", "6", Field.Store.YES));
+    doc.add(newMatchOnlyField("id", "6", Field.Store.YES));
     w.addDocument(doc);
 
     // 7 -- no author field
     doc = new Document();
     doc.add(newTextField("content", "random word stuck in alot of other text", Field.Store.YES));
-    doc.add(newStringField("id", "7", Field.Store.YES));
+    doc.add(newMatchOnlyField("id", "7", Field.Store.YES));
     w.addDocument(doc);
 
     IndexReader reader = w.getReader();
@@ -207,7 +207,7 @@
 
       Document doc = new Document();
       Document docNoGroup = new Document();
-      Field group = newStringField("group", "", Field.Store.NO);
+      Field group = newMatchOnlyField("group", "", Field.Store.NO);
       doc.add(group);
       Field valuesField = null;
       if (canUseIDV) {
@@ -226,13 +226,13 @@
         }
         doc.add(valuesField);
       }
-      Field sort1 = newStringField("sort1", "", Field.Store.NO);
+      Field sort1 = newMatchOnlyField("sort1", "", Field.Store.NO);
       doc.add(sort1);
       docNoGroup.add(sort1);
-      Field sort2 = newStringField("sort2", "", Field.Store.NO);
+      Field sort2 = newMatchOnlyField("sort2", "", Field.Store.NO);
       doc.add(sort2);
       docNoGroup.add(sort2);
-      Field sort3 = newStringField("sort3", "", Field.Store.NO);
+      Field sort3 = newMatchOnlyField("sort3", "", Field.Store.NO);
       doc.add(sort3);
       docNoGroup.add(sort3);
       Field content = newTextField("content", "", Field.Store.NO);
Index: lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest.java
===================================================================
--- lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest.java	(revision 1383338)
+++ lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest.java	(working copy)
@@ -306,7 +306,7 @@
   }
 
   private void addField(Document doc, String field, String value, boolean canUseIDV) {
-    doc.add(new StringField(field, value, Field.Store.NO));
+    doc.add(new MatchOnlyField(field, value, Field.Store.NO));
     if (canUseIDV) {
       doc.add(new SortedBytesDocValuesField(field, new BytesRef(value)));
     }
@@ -455,7 +455,7 @@
     Document docNoGroup = new Document();
     Document docNoFacet = new Document();
     Document docNoGroupNoFacet = new Document();
-    Field group = newStringField("group", "", Field.Store.NO);
+    Field group = newMatchOnlyField("group", "", Field.Store.NO);
     Field groupDc = new SortedBytesDocValuesField("group", new BytesRef());
     if (useDv) {
       doc.add(groupDc);
@@ -466,7 +466,7 @@
     Field[] facetFields;
     if (useDv) {
       facetFields = new Field[2];
-      facetFields[0] = newStringField("facet", "", Field.Store.NO);
+      facetFields[0] = newMatchOnlyField("facet", "", Field.Store.NO);
       doc.add(facetFields[0]);
       docNoGroup.add(facetFields[0]);
       facetFields[1] = new SortedBytesDocValuesField("facet", new BytesRef());
@@ -475,12 +475,12 @@
     } else {
       facetFields = multipleFacetValuesPerDocument ? new Field[2 + random.nextInt(6)] : new Field[1];
       for (int i = 0; i < facetFields.length; i++) {
-        facetFields[i] = newStringField("facet", "", Field.Store.NO);
+        facetFields[i] = newMatchOnlyField("facet", "", Field.Store.NO);
         doc.add(facetFields[i]);
         docNoGroup.add(facetFields[i]);
       }
     }
-    Field content = newStringField("content", "", Field.Store.NO);
+    Field content = newMatchOnlyField("content", "", Field.Store.NO);
     doc.add(content);
     docNoGroup.add(content);
     docNoFacet.add(content);
Index: lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest.java
===================================================================
--- lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest.java	(revision 1383338)
+++ lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest.java	(working copy)
@@ -68,7 +68,7 @@
     addField(doc, groupField, "1", dvType);
     addField(doc, countField, "1", dvType);
     doc.add(new TextField("content", "random text", Field.Store.NO));
-    doc.add(new StringField("id", "1", Field.Store.NO));
+    doc.add(new MatchOnlyField("id", "1", Field.Store.NO));
     w.addDocument(doc);
 
     // 1
@@ -76,7 +76,7 @@
     addField(doc, groupField, "1", dvType);
     addField(doc, countField, "1", dvType);
     doc.add(new TextField("content", "some more random text blob", Field.Store.NO));
-    doc.add(new StringField("id", "2", Field.Store.NO));
+    doc.add(new MatchOnlyField("id", "2", Field.Store.NO));
     w.addDocument(doc);
 
     // 2
@@ -84,7 +84,7 @@
     addField(doc, groupField, "1", dvType);
     addField(doc, countField, "2", dvType);
     doc.add(new TextField("content", "some more random textual data", Field.Store.NO));
-    doc.add(new StringField("id", "3", Field.Store.NO));
+    doc.add(new MatchOnlyField("id", "3", Field.Store.NO));
     w.addDocument(doc);
     w.commit(); // To ensure a second segment
 
@@ -92,7 +92,7 @@
     doc = new Document();
     addField(doc, groupField, "2", dvType);
     doc.add(new TextField("content", "some random text", Field.Store.NO));
-    doc.add(new StringField("id", "4", Field.Store.NO));
+    doc.add(new MatchOnlyField("id", "4", Field.Store.NO));
     w.addDocument(doc);
 
     // 4
@@ -100,7 +100,7 @@
     addField(doc, groupField, "3", dvType);
     addField(doc, countField, "1", dvType);
     doc.add(new TextField("content", "some more random text", Field.Store.NO));
-    doc.add(new StringField("id", "5", Field.Store.NO));
+    doc.add(new MatchOnlyField("id", "5", Field.Store.NO));
     w.addDocument(doc);
 
     // 5
@@ -108,14 +108,14 @@
     addField(doc, groupField, "3", dvType);
     addField(doc, countField, "1", dvType);
     doc.add(new TextField("content", "random blob", Field.Store.NO));
-    doc.add(new StringField("id", "6", Field.Store.NO));
+    doc.add(new MatchOnlyField("id", "6", Field.Store.NO));
     w.addDocument(doc);
 
     // 6 -- no author field
     doc = new Document();
     doc.add(new TextField("content", "random word stuck in alot of other text", Field.Store.YES));
     addField(doc, countField, "1", dvType);
-    doc.add(new StringField("id", "6", Field.Store.NO));
+    doc.add(new MatchOnlyField("id", "6", Field.Store.NO));
     w.addDocument(doc);
 
     IndexSearcher indexSearcher = newSearcher(w.getReader());
@@ -316,7 +316,7 @@
   }
 
   private void addField(Document doc, String field, String value, DocValues.Type type) {
-    doc.add(new StringField(field, value, Field.Store.NO));
+    doc.add(new MatchOnlyField(field, value, Field.Store.NO));
     if (type == null) {
       return;
     }
@@ -450,7 +450,7 @@
       countsVals.add(countValue);
 
       Document doc = new Document();
-      doc.add(new StringField("id", String.format(Locale.ROOT, "%09d", i), Field.Store.NO));
+      doc.add(new MatchOnlyField("id", String.format(Locale.ROOT, "%09d", i), Field.Store.NO));
       if (groupValue != null) {
         addField(doc, groupField, groupValue, dvType);
       }
Index: lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.java	(revision 1383338)
+++ lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.java	(working copy)
@@ -29,7 +29,7 @@
 import org.apache.lucene.document.Field.Store;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.FieldType;
-import org.apache.lucene.document.StringField;
+import org.apache.lucene.document.MatchOnlyField;
 import org.apache.lucene.document.TextField;
 import org.apache.lucene.index.*;
 import org.apache.lucene.index.IndexReader.ReaderClosedListener;
@@ -931,16 +931,16 @@
     }
   }
   
-  public static Field newStringField(String name, String value, Store stored) {
-    return newField(random(), name, value, stored == Store.YES ? StringField.TYPE_STORED : StringField.TYPE_NOT_STORED);
+  public static Field newMatchOnlyField(String name, String value, Store stored) {
+    return newField(random(), name, value, stored == Store.YES ? MatchOnlyField.TYPE_STORED : MatchOnlyField.TYPE_NOT_STORED);
   }
 
   public static Field newTextField(String name, String value, Store stored) {
     return newField(random(), name, value, stored == Store.YES ? TextField.TYPE_STORED : TextField.TYPE_NOT_STORED);
   }
   
-  public static Field newStringField(Random random, String name, String value, Store stored) {
-    return newField(random, name, value, stored == Store.YES ? StringField.TYPE_STORED : StringField.TYPE_NOT_STORED);
+  public static Field newMatchOnlyField(Random random, String name, String value, Store stored) {
+    return newField(random, name, value, stored == Store.YES ? MatchOnlyField.TYPE_STORED : MatchOnlyField.TYPE_NOT_STORED);
   }
   
   public static Field newTextField(Random random, String name, String value, Store stored) {
Index: lucene/test-framework/src/java/org/apache/lucene/util/LineFileDocs.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/util/LineFileDocs.java	(revision 1383338)
+++ lucene/test-framework/src/java/org/apache/lucene/util/LineFileDocs.java	(working copy)
@@ -37,7 +37,7 @@
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.FieldType;
 import org.apache.lucene.document.SortedBytesDocValuesField;
-import org.apache.lucene.document.StringField;
+import org.apache.lucene.document.MatchOnlyField;
 import org.apache.lucene.document.TextField;
 
 /** Minimal port of benchmark's LneDocSource +
@@ -162,7 +162,7 @@
     public DocState(boolean useDocValues) {
       doc = new Document();
       
-      title = new StringField("title", "", Field.Store.NO);
+      title = new MatchOnlyField("title", "", Field.Store.NO);
       doc.add(title);
 
       FieldType ft = new FieldType(TextField.TYPE_STORED);
@@ -176,10 +176,10 @@
       body = new Field("body", "", ft);
       doc.add(body);
 
-      id = new StringField("docid", "", Field.Store.YES);
+      id = new MatchOnlyField("docid", "", Field.Store.YES);
       doc.add(id);
 
-      date = new StringField("date", "", Field.Store.YES);
+      date = new MatchOnlyField("date", "", Field.Store.YES);
       doc.add(date);
 
       if (useDocValues) {
Index: lucene/test-framework/src/java/org/apache/lucene/analysis/CollationTestBase.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/analysis/CollationTestBase.java	(revision 1383338)
+++ lucene/test-framework/src/java/org/apache/lucene/analysis/CollationTestBase.java	(working copy)
@@ -27,7 +27,7 @@
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.FieldType;
-import org.apache.lucene.document.StringField;
+import org.apache.lucene.document.MatchOnlyField;
 import org.apache.lucene.document.TextField;
 import org.apache.lucene.index.DirectoryReader;
 import org.apache.lucene.index.IndexReader;
@@ -69,7 +69,7 @@
         TEST_VERSION_CURRENT, analyzer));
     Document doc = new Document();
     doc.add(new TextField("content", "\u0633\u0627\u0628", Field.Store.YES));
-    doc.add(new StringField("body", "body", Field.Store.YES));
+    doc.add(new MatchOnlyField("body", "body", Field.Store.YES));
     writer.addDocument(doc);
     writer.close();
     IndexReader reader = DirectoryReader.open(dir);
@@ -130,7 +130,7 @@
         TEST_VERSION_CURRENT, analyzer));
     Document doc = new Document();
     doc.add(new TextField("content", "\u0633\u0627\u0628", Field.Store.YES));
-    doc.add(new StringField("body", "body", Field.Store.YES));
+    doc.add(new MatchOnlyField("body", "body", Field.Store.YES));
     writer.addDocument(doc);
     writer.close();
 
Index: lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase.java	(revision 1383338)
+++ lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase.java	(working copy)
@@ -25,7 +25,7 @@
 import org.apache.lucene.analysis.MockTokenizer;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
-import org.apache.lucene.document.StringField;
+import org.apache.lucene.document.MatchOnlyField;
 import org.apache.lucene.document.TextField;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.RandomIndexWriter;
@@ -62,7 +62,7 @@
     analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false, stopset, true);
     RandomIndexWriter iw = new RandomIndexWriter(random, directory, analyzer);
     Document doc = new Document();
-    Field id = new StringField("id", "", Field.Store.NO);
+    Field id = new MatchOnlyField("id", "", Field.Store.NO);
     Field field = new TextField("field", "", Field.Store.NO);
     doc.add(id);
     doc.add(field);
Index: lucene/test-framework/src/java/org/apache/lucene/index/DocHelper.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/index/DocHelper.java	(revision 1383338)
+++ lucene/test-framework/src/java/org/apache/lucene/index/DocHelper.java	(working copy)
@@ -30,7 +30,7 @@
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.FieldType;
 import org.apache.lucene.document.StoredField;
-import org.apache.lucene.document.StringField;
+import org.apache.lucene.document.MatchOnlyField;
 import org.apache.lucene.document.TextField;
 import org.apache.lucene.index.FieldInfo.IndexOptions;
 import org.apache.lucene.search.similarities.Similarity;
@@ -78,7 +78,7 @@
   public static final String KEYWORD_FIELD_KEY = "keyField";
   public static Field keyField;
   static {
-    keyField = new StringField(KEYWORD_FIELD_KEY, KEYWORD_TEXT, Field.Store.YES);
+    keyField = new MatchOnlyField(KEYWORD_FIELD_KEY, KEYWORD_TEXT, Field.Store.YES);
   }
 
   public static final FieldType customType5;
@@ -302,7 +302,7 @@
     customType.setStoreTermVectorPositions(true);
     customType.setStoreTermVectorOffsets(true);
 
-    FieldType customType1 = new FieldType(StringField.TYPE_STORED);
+    FieldType customType1 = new FieldType(MatchOnlyField.TYPE_STORED);
     customType1.setStoreTermVectors(true);
     customType1.setStoreTermVectorPositions(true);
     customType1.setStoreTermVectorOffsets(true);
Index: lucene/test-framework/src/java/org/apache/lucene/index/ThreadedIndexingAndSearchingTestCase.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/index/ThreadedIndexingAndSearchingTestCase.java	(revision 1383338)
+++ lucene/test-framework/src/java/org/apache/lucene/index/ThreadedIndexingAndSearchingTestCase.java	(working copy)
@@ -178,7 +178,7 @@
                       packID = packCount.getAndIncrement() + "";
                     }
 
-                    final Field packIDField = newStringField("packID", packID, Field.Store.YES);
+                    final Field packIDField = newMatchOnlyField("packID", packID, Field.Store.YES);
                     final List<String> docIDs = new ArrayList<String>();
                     final SubDocs subDocs = new SubDocs(packID, docIDs);
                     final List<Document> docsList = new ArrayList<Document>();
Index: lucene/demo/src/java/org/apache/lucene/demo/IndexFiles.java
===================================================================
--- lucene/demo/src/java/org/apache/lucene/demo/IndexFiles.java	(revision 1383338)
+++ lucene/demo/src/java/org/apache/lucene/demo/IndexFiles.java	(working copy)
@@ -22,7 +22,7 @@
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.LongField;
-import org.apache.lucene.document.StringField;
+import org.apache.lucene.document.MatchOnlyField;
 import org.apache.lucene.document.TextField;
 import org.apache.lucene.index.IndexWriter;
 import org.apache.lucene.index.IndexWriterConfig.OpenMode;
@@ -174,7 +174,7 @@
           // field that is indexed (i.e. searchable), but don't tokenize 
           // the field into separate words and don't index term frequency
           // or positional information:
-          Field pathField = new StringField("path", file.getPath(), Field.Store.YES);
+          Field pathField = new MatchOnlyField("path", file.getPath(), Field.Store.YES);
           doc.add(pathField);
 
           // Add the last modified date of the file a field named "modified".
Index: lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest.java
===================================================================
--- lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest.java	(revision 1383338)
+++ lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest.java	(working copy)
@@ -58,7 +58,7 @@
     for (int i = 0; i < 100; i++) {
       Document doc = new Document();
       int term = i * 10; //terms are units of 10;
-      doc.add(newStringField(fieldName, "" + term, Field.Store.YES));
+      doc.add(newMatchOnlyField(fieldName, "" + term, Field.Store.YES));
       w.addDocument(doc);
     }
     IndexReader reader = new SlowCompositeReaderWrapper(w.getReader());
@@ -92,7 +92,7 @@
     Directory rd1 = newDirectory();
     RandomIndexWriter w1 = new RandomIndexWriter(random(), rd1);
     Document doc = new Document();
-    doc.add(newStringField(fieldName, "content1", Field.Store.YES));
+    doc.add(newMatchOnlyField(fieldName, "content1", Field.Store.YES));
     w1.addDocument(doc);
     IndexReader reader1 = w1.getReader();
     w1.close();
@@ -101,7 +101,7 @@
     Directory rd2 = newDirectory();
     RandomIndexWriter w2 = new RandomIndexWriter(random(), rd2);
     doc = new Document();
-    doc.add(newStringField(fieldName, "content2", Field.Store.YES));
+    doc.add(newMatchOnlyField(fieldName, "content2", Field.Store.YES));
     w2.addDocument(doc);
     IndexReader reader2 = w2.getReader();
     w2.close();
Index: lucene/queries/src/test/org/apache/lucene/queries/ChainedFilterTest.java
===================================================================
--- lucene/queries/src/test/org/apache/lucene/queries/ChainedFilterTest.java	(revision 1383338)
+++ lucene/queries/src/test/org/apache/lucene/queries/ChainedFilterTest.java	(working copy)
@@ -65,9 +65,9 @@
 
     for (int i = 0; i < MAX; i++) {
       Document doc = new Document();
-      doc.add(newStringField("key", "" + (i + 1), Field.Store.YES));
-      doc.add(newStringField("owner", (i < MAX / 2) ? "bob" : "sue", Field.Store.YES));
-      doc.add(newStringField("date", cal.getTime().toString(), Field.Store.YES));
+      doc.add(newMatchOnlyField("key", "" + (i + 1), Field.Store.YES));
+      doc.add(newMatchOnlyField("owner", (i < MAX / 2) ? "bob" : "sue", Field.Store.YES));
+      doc.add(newMatchOnlyField("date", cal.getTime().toString(), Field.Store.YES));
       writer.addDocument(doc);
 
       cal.add(Calendar.DATE, 1);
Index: lucene/queries/src/test/org/apache/lucene/queries/function/TestBoostedQuery.java
===================================================================
--- lucene/queries/src/test/org/apache/lucene/queries/function/TestBoostedQuery.java	(revision 1383338)
+++ lucene/queries/src/test/org/apache/lucene/queries/function/TestBoostedQuery.java	(working copy)
@@ -4,7 +4,7 @@
 import org.apache.lucene.analysis.MockAnalyzer;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
-import org.apache.lucene.document.StringField;
+import org.apache.lucene.document.MatchOnlyField;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.IndexWriterConfig;
 import org.apache.lucene.index.RandomIndexWriter;
@@ -55,7 +55,7 @@
     iwConfig.setMergePolicy(newLogMergePolicy());
     RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConfig);
     Document document = new Document();
-    Field idField = new StringField("id", "", Field.Store.NO);
+    Field idField = new MatchOnlyField("id", "", Field.Store.NO);
     document.add(idField);
     iw.addDocument(document);
     ir = iw.getReader();
Index: lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources.java
===================================================================
--- lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources.java	(revision 1383338)
+++ lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources.java	(working copy)
@@ -23,7 +23,7 @@
 import org.apache.lucene.analysis.MockAnalyzer;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
-import org.apache.lucene.document.StringField;
+import org.apache.lucene.document.MatchOnlyField;
 import org.apache.lucene.document.TextField;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.IndexWriterConfig;
@@ -97,21 +97,21 @@
     iwConfig.setMergePolicy(newLogMergePolicy());
     RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConfig);
     Document document = new Document();
-    Field idField = new StringField("id", "", Field.Store.NO);
+    Field idField = new MatchOnlyField("id", "", Field.Store.NO);
     document.add(idField);
-    Field byteField = new StringField("byte", "", Field.Store.NO);
+    Field byteField = new MatchOnlyField("byte", "", Field.Store.NO);
     document.add(byteField);
-    Field doubleField = new StringField("double", "", Field.Store.NO);
+    Field doubleField = new MatchOnlyField("double", "", Field.Store.NO);
     document.add(doubleField);
-    Field floatField = new StringField("float", "", Field.Store.NO);
+    Field floatField = new MatchOnlyField("float", "", Field.Store.NO);
     document.add(floatField);
-    Field intField = new StringField("int", "", Field.Store.NO);
+    Field intField = new MatchOnlyField("int", "", Field.Store.NO);
     document.add(intField);
-    Field longField = new StringField("long", "", Field.Store.NO);
+    Field longField = new MatchOnlyField("long", "", Field.Store.NO);
     document.add(longField);
-    Field shortField = new StringField("short", "", Field.Store.NO);
+    Field shortField = new MatchOnlyField("short", "", Field.Store.NO);
     document.add(shortField);
-    Field stringField = new StringField("string", "", Field.Store.NO);
+    Field stringField = new MatchOnlyField("string", "", Field.Store.NO);
     document.add(stringField);
     Field textField = new TextField("text", "", Field.Store.NO);
     document.add(textField);
Index: lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector.java
===================================================================
--- lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector.java	(revision 1383338)
+++ lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector.java	(working copy)
@@ -6,7 +6,7 @@
 import org.apache.lucene.analysis.core.KeywordAnalyzer;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field.Store;
-import org.apache.lucene.document.StringField;
+import org.apache.lucene.document.MatchOnlyField;
 import org.apache.lucene.facet.index.CategoryDocumentBuilder;
 import org.apache.lucene.facet.search.params.FacetSearchParams;
 import org.apache.lucene.facet.search.params.ScoreFacetRequest;
@@ -59,7 +59,7 @@
     Iterable<CategoryPath> cats = Arrays.asList(new CategoryPath("a"));
     for(int i = atLeast(2000); i > 0; --i) {
       Document doc = new Document();
-      doc.add(new StringField("f", "v", Store.NO));
+      doc.add(new MatchOnlyField("f", "v", Store.NO));
       cdb.setCategoryPaths(cats);
       iw.addDocument(cdb.build(doc));
     }
Index: lucene/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils.java
===================================================================
--- lucene/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils.java	(revision 1383338)
+++ lucene/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils.java	(working copy)
@@ -8,7 +8,7 @@
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.FieldType;
-import org.apache.lucene.document.StringField;
+import org.apache.lucene.document.MatchOnlyField;
 import org.apache.lucene.index.DirectoryReader;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.MultiFields;
@@ -189,8 +189,8 @@
     protected final static String delTxt = "delete";
     protected final static String alphaTxt = "alpha";
     
-    private final static Field deletionMark = new StringField(field, delTxt, Field.Store.NO);
-    private final static Field alphaContent = new StringField(field, alphaTxt, Field.Store.NO);
+    private final static Field deletionMark = new MatchOnlyField(field, delTxt, Field.Store.NO);
+    private final static Field alphaContent = new MatchOnlyField(field, alphaTxt, Field.Store.NO);
     
     protected final int numDocs;
     
Index: lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter.java
===================================================================
--- lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter.java	(revision 1383338)
+++ lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter.java	(working copy)
@@ -20,7 +20,7 @@
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.FieldType;
-import org.apache.lucene.document.StringField;
+import org.apache.lucene.document.MatchOnlyField;
 import org.apache.lucene.document.TextField;
 import org.apache.lucene.facet.taxonomy.CategoryPath;
 import org.apache.lucene.facet.taxonomy.TaxonomyReader;
@@ -225,7 +225,7 @@
     FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);
     ft.setOmitNorms(true);
     parentStreamField = new Field(Consts.FIELD_PAYLOADS, parentStream, ft);
-    fullPathField = new StringField(Consts.FULL, "", Field.Store.YES);
+    fullPathField = new MatchOnlyField(Consts.FULL, "", Field.Store.YES);
 
     nextID = indexWriter.maxDoc();
 
Index: lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestKeywordAnalyzer.java
===================================================================
--- lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestKeywordAnalyzer.java	(revision 1383338)
+++ lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestKeywordAnalyzer.java	(working copy)
@@ -24,7 +24,7 @@
 import org.apache.lucene.analysis.tokenattributes.OffsetAttribute;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
-import org.apache.lucene.document.StringField;
+import org.apache.lucene.document.MatchOnlyField;
 import org.apache.lucene.document.TextField;
 import org.apache.lucene.index.DirectoryReader;
 import org.apache.lucene.index.DocsEnum;
@@ -53,7 +53,7 @@
         TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));
 
     Document doc = new Document();
-    doc.add(new StringField("partnum", "Q36", Field.Store.YES));
+    doc.add(new MatchOnlyField("partnum", "Q36", Field.Store.YES));
     doc.add(new TextField("description", "Illidium Space Modulator", Field.Store.YES));
     writer.addDocument(doc);
 
Index: lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTaskTest.java
===================================================================
--- lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTaskTest.java	(revision 1383338)
+++ lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTaskTest.java	(working copy)
@@ -34,7 +34,7 @@
 import org.apache.lucene.benchmark.byTask.utils.StreamUtils.Type;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
-import org.apache.lucene.document.StringField;
+import org.apache.lucene.document.MatchOnlyField;
 
 /** Tests the functionality of {@link WriteLineDocTask}. */
 public class WriteLineDocTaskTest extends BenchmarkTestCase {
@@ -45,9 +45,9 @@
     @Override
     public Document makeDocument() throws Exception {
       Document doc = new Document();
-      doc.add(new StringField(BODY_FIELD, "body", Field.Store.NO));
-      doc.add(new StringField(TITLE_FIELD, "title", Field.Store.NO));
-      doc.add(new StringField(DATE_FIELD, "date", Field.Store.NO));
+      doc.add(new MatchOnlyField(BODY_FIELD, "body", Field.Store.NO));
+      doc.add(new MatchOnlyField(TITLE_FIELD, "title", Field.Store.NO));
+      doc.add(new MatchOnlyField(DATE_FIELD, "date", Field.Store.NO));
       return doc;
     }
     
@@ -59,9 +59,9 @@
     @Override
     public Document makeDocument() throws Exception {
       Document doc = new Document();
-      doc.add(new StringField(BODY_FIELD, "body\r\ntext\ttwo", Field.Store.NO));
-      doc.add(new StringField(TITLE_FIELD, "title\r\ntext", Field.Store.NO));
-      doc.add(new StringField(DATE_FIELD, "date\r\ntext", Field.Store.NO));
+      doc.add(new MatchOnlyField(BODY_FIELD, "body\r\ntext\ttwo", Field.Store.NO));
+      doc.add(new MatchOnlyField(TITLE_FIELD, "title\r\ntext", Field.Store.NO));
+      doc.add(new MatchOnlyField(DATE_FIELD, "date\r\ntext", Field.Store.NO));
       return doc;
     }
     
@@ -72,8 +72,8 @@
     @Override
     public Document makeDocument() throws Exception {
       Document doc = new Document();
-      doc.add(new StringField(TITLE_FIELD, "title", Field.Store.NO));
-      doc.add(new StringField(DATE_FIELD, "date", Field.Store.NO));
+      doc.add(new MatchOnlyField(TITLE_FIELD, "title", Field.Store.NO));
+      doc.add(new MatchOnlyField(DATE_FIELD, "date", Field.Store.NO));
       return doc;
     }
   }
@@ -83,8 +83,8 @@
     @Override
     public Document makeDocument() throws Exception {
       Document doc = new Document();
-      doc.add(new StringField(BODY_FIELD, "body", Field.Store.NO));
-      doc.add(new StringField(DATE_FIELD, "date", Field.Store.NO));
+      doc.add(new MatchOnlyField(BODY_FIELD, "body", Field.Store.NO));
+      doc.add(new MatchOnlyField(DATE_FIELD, "date", Field.Store.NO));
       return doc;
     }
   }
@@ -94,7 +94,7 @@
     @Override
     public Document makeDocument() throws Exception {
       Document doc = new Document();
-      doc.add(new StringField(DATE_FIELD, "date", Field.Store.NO));
+      doc.add(new MatchOnlyField(DATE_FIELD, "date", Field.Store.NO));
       return doc;
     }
   }
@@ -105,7 +105,7 @@
     @Override
     public Document makeDocument() throws Exception {
       Document doc = new Document();
-      doc.add(new StringField(DATE_FIELD, "date", Field.Store.NO));
+      doc.add(new MatchOnlyField(DATE_FIELD, "date", Field.Store.NO));
       return doc;
     }
   }
@@ -125,9 +125,9 @@
     public Document makeDocument() throws Exception {
       Document doc = new Document();
       String name = Thread.currentThread().getName();
-      doc.add(new StringField(BODY_FIELD, "body_" + name, Field.Store.NO));
-      doc.add(new StringField(TITLE_FIELD, "title_" + name, Field.Store.NO));
-      doc.add(new StringField(DATE_FIELD, "date_" + name, Field.Store.NO));
+      doc.add(new MatchOnlyField(BODY_FIELD, "body_" + name, Field.Store.NO));
+      doc.add(new MatchOnlyField(TITLE_FIELD, "title_" + name, Field.Store.NO));
+      doc.add(new MatchOnlyField(DATE_FIELD, "date_" + name, Field.Store.NO));
       return doc;
     }
     
Index: lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker.java
===================================================================
--- lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker.java	(revision 1383338)
+++ lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker.java	(working copy)
@@ -41,7 +41,7 @@
 import org.apache.lucene.document.LongField;
 import org.apache.lucene.document.FloatField;
 import org.apache.lucene.document.DoubleField;
-import org.apache.lucene.document.StringField;
+import org.apache.lucene.document.MatchOnlyField;
 import org.apache.lucene.document.TextField;
 
 /**
@@ -115,7 +115,7 @@
         fields.put(BODY_FIELD, new Field(BODY_FIELD, "", bodyFt));
         fields.put(TITLE_FIELD, new Field(TITLE_FIELD, "", ft));
         fields.put(DATE_FIELD, new Field(DATE_FIELD, "", ft));
-        fields.put(ID_FIELD, new StringField(ID_FIELD, "", Field.Store.YES));
+        fields.put(ID_FIELD, new MatchOnlyField(ID_FIELD, "", Field.Store.YES));
         fields.put(NAME_FIELD, new Field(NAME_FIELD, "", ft));
 
         numericFields.put(DATE_MSEC_FIELD, new LongField(DATE_MSEC_FIELD, 0L, Field.Store.NO));
@@ -317,7 +317,7 @@
       doc.add(bodyField);
       
       if (storeBytes) {
-        Field bytesField = ds.getField(BYTES_FIELD, StringField.TYPE_STORED);
+        Field bytesField = ds.getField(BYTES_FIELD, MatchOnlyField.TYPE_STORED);
         bytesField.setBytesValue(bdy.getBytes("UTF-8"));
         doc.add(bytesField);
       }
Index: lucene/misc/src/test/org/apache/lucene/index/TestPKIndexSplitter.java
===================================================================
--- lucene/misc/src/test/org/apache/lucene/index/TestPKIndexSplitter.java	(revision 1383338)
+++ lucene/misc/src/test/org/apache/lucene/index/TestPKIndexSplitter.java	(working copy)
@@ -105,8 +105,8 @@
     StringBuilder sb = new StringBuilder();
     Document doc = new Document();
     String id = format.format(n);
-    doc.add(newStringField("id", id, Field.Store.YES));
-    doc.add(newStringField("indexname", indexName, Field.Store.YES));
+    doc.add(newMatchOnlyField("id", id, Field.Store.YES));
+    doc.add(newMatchOnlyField("indexname", indexName, Field.Store.YES));
     sb.append("a");
     sb.append(n);
     doc.add(newTextField("field1", sb.toString(), Field.Store.YES));
Index: lucene/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter.java
===================================================================
--- lucene/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter.java	(revision 1383338)
+++ lucene/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter.java	(working copy)
@@ -36,7 +36,7 @@
     Document doc;
     for (int i = 0; i < NUM_DOCS; i++) {
       doc = new Document();
-      doc.add(newStringField("id", i + "", Field.Store.YES));
+      doc.add(newMatchOnlyField("id", i + "", Field.Store.YES));
       doc.add(newTextField("f", i + " " + i, Field.Store.YES));
       w.addDocument(doc);
       if (i%3==0) w.commit();
Index: lucene/spatial/src/test/org/apache/lucene/spatial/prefix/TestTermQueryPrefixGridStrategy.java
===================================================================
--- lucene/spatial/src/test/org/apache/lucene/spatial/prefix/TestTermQueryPrefixGridStrategy.java	(revision 1383338)
+++ lucene/spatial/src/test/org/apache/lucene/spatial/prefix/TestTermQueryPrefixGridStrategy.java	(working copy)
@@ -23,7 +23,7 @@
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.StoredField;
-import org.apache.lucene.document.StringField;
+import org.apache.lucene.document.MatchOnlyField;
 import org.apache.lucene.spatial.SpatialTestCase;
 import org.apache.lucene.spatial.prefix.tree.QuadPrefixTree;
 import org.apache.lucene.spatial.query.SpatialArgsParser;
@@ -43,7 +43,7 @@
     Shape point = ctx.makePoint(-118.243680, 34.052230);
 
     Document losAngeles = new Document();
-    losAngeles.add(new StringField("name", "Los Angeles", Field.Store.YES));
+    losAngeles.add(new MatchOnlyField("name", "Los Angeles", Field.Store.YES));
     for (Field field : prefixGridStrategy.createIndexableFields(point)) {
       losAngeles.add(field);
     }
Index: lucene/spatial/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy.java
===================================================================
--- lucene/spatial/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy.java	(revision 1383338)
+++ lucene/spatial/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy.java	(working copy)
@@ -26,7 +26,7 @@
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.StoredField;
-import org.apache.lucene.document.StringField;
+import org.apache.lucene.document.MatchOnlyField;
 import org.apache.lucene.spatial.SpatialMatchConcern;
 import org.apache.lucene.spatial.StrategyTestCase;
 import org.apache.lucene.spatial.prefix.tree.GeohashPrefixTree;
@@ -200,7 +200,7 @@
 
   private Document newDoc(String id, Shape shape) {
     Document doc = new Document();
-    doc.add(new StringField("id", id, Field.Store.YES));
+    doc.add(new MatchOnlyField("id", id, Field.Store.YES));
     for (Field f : strategy.createIndexableFields(shape)) {
       doc.add(f);
     }
Index: lucene/spatial/src/test/org/apache/lucene/spatial/PortedSolr3Test.java
===================================================================
--- lucene/spatial/src/test/org/apache/lucene/spatial/PortedSolr3Test.java	(revision 1383338)
+++ lucene/spatial/src/test/org/apache/lucene/spatial/PortedSolr3Test.java	(working copy)
@@ -27,7 +27,7 @@
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.StoredField;
-import org.apache.lucene.document.StringField;
+import org.apache.lucene.document.MatchOnlyField;
 import org.apache.lucene.search.FilteredQuery;
 import org.apache.lucene.search.MatchAllDocsQuery;
 import org.apache.lucene.search.Query;
@@ -195,7 +195,7 @@
   @SuppressWarnings("unchecked")
   private Document newDoc(String id, Shape shape) {
     Document doc = new Document();
-    doc.add(new StringField("id", id, Field.Store.YES));
+    doc.add(new MatchOnlyField("id", id, Field.Store.YES));
     for (Field f : strategy.createIndexableFields(shape)) {
       doc.add(f);
     }
Index: lucene/spatial/src/test/org/apache/lucene/spatial/StrategyTestCase.java
===================================================================
--- lucene/spatial/src/test/org/apache/lucene/spatial/StrategyTestCase.java	(revision 1383338)
+++ lucene/spatial/src/test/org/apache/lucene/spatial/StrategyTestCase.java	(working copy)
@@ -26,7 +26,7 @@
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.StoredField;
-import org.apache.lucene.document.StringField;
+import org.apache.lucene.document.MatchOnlyField;
 import org.apache.lucene.index.IndexableField;
 import org.apache.lucene.spatial.query.SpatialArgsParser;
 import org.junit.Assert;
@@ -83,8 +83,8 @@
     while (sampleData.hasNext()) {
       SampleData data = sampleData.next();
       Document document = new Document();
-      document.add(new StringField("id", data.id, Field.Store.YES));
-      document.add(new StringField("name", data.name, Field.Store.YES));
+      document.add(new MatchOnlyField("id", data.id, Field.Store.YES));
+      document.add(new MatchOnlyField("name", data.name, Field.Store.YES));
       Shape shape = new ShapeReadWriter(ctx).readShape(data.shape);
       for (Field f : strategy.createIndexableFields(shape)) {
         document.add(f);
Index: lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy.java
===================================================================
--- lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy.java	(revision 1383338)
+++ lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy.java	(working copy)
@@ -23,7 +23,7 @@
 import org.apache.lucene.document.DoubleField;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.FieldType;
-import org.apache.lucene.document.StringField;
+import org.apache.lucene.document.MatchOnlyField;
 import org.apache.lucene.index.IndexableField;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.queries.function.FunctionQuery;
@@ -101,7 +101,7 @@
     fields[1] = new DoubleField(field_maxX, bbox.getMaxX(), doubleFieldType);
     fields[2] = new DoubleField(field_minY, bbox.getMinY(), doubleFieldType);
     fields[3] = new DoubleField(field_maxY, bbox.getMaxY(), doubleFieldType);
-    fields[4] = new Field( field_xdl, bbox.getCrossesDateLine()?"T":"F", StringField.TYPE_NOT_STORED);
+    fields[4] = new Field( field_xdl, bbox.getCrossesDateLine()?"T":"F", MatchOnlyField.TYPE_NOT_STORED);
     return fields;
   }
 
Index: lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker.java
===================================================================
--- lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker.java	(revision 1383338)
+++ lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker.java	(working copy)
@@ -26,7 +26,7 @@
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.FieldType;
 import org.apache.lucene.index.FieldInfo.IndexOptions;
-import org.apache.lucene.document.StringField;
+import org.apache.lucene.document.MatchOnlyField;
 import org.apache.lucene.index.AtomicReader;
 import org.apache.lucene.index.AtomicReaderContext;
 import org.apache.lucene.index.DirectoryReader;
@@ -572,7 +572,7 @@
     Document doc = new Document();
     // the word field is never queried on... its indexed so it can be quickly
     // checked for rebuild (and stored for retrieval). Doesn't need norms or TF/pos
-    Field f = new StringField(F_WORD, text, Field.Store.YES);
+    Field f = new MatchOnlyField(F_WORD, text, Field.Store.YES);
     doc.add(f); // orig term
     addGram(text, doc, ng1, ng2);
     return doc;
@@ -585,7 +585,7 @@
       String end = null;
       for (int i = 0; i < len - ng + 1; i++) {
         String gram = text.substring(i, i + ng);
-        FieldType ft = new FieldType(StringField.TYPE_NOT_STORED);
+        FieldType ft = new FieldType(MatchOnlyField.TYPE_NOT_STORED);
         ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);
         Field ngramField = new Field(key, gram, ft);
         // spellchecker does not use positional queries, but we want freqs
@@ -593,14 +593,14 @@
         doc.add(ngramField);
         if (i == 0) {
           // only one term possible in the startXXField, TF/pos and norms aren't needed.
-          Field startField = new StringField("start" + ng, gram, Field.Store.NO);
+          Field startField = new MatchOnlyField("start" + ng, gram, Field.Store.NO);
           doc.add(startField);
         }
         end = gram;
       }
       if (end != null) { // may not be present if len==ng1
         // only one term possible in the endXXField, TF/pos and norms aren't needed.
-        Field endField = new StringField("end" + ng, end, Field.Store.NO);
+        Field endField = new MatchOnlyField("end" + ng, end, Field.Store.NO);
         doc.add(endField);
       }
     }
Index: lucene/core/src/java/org/apache/lucene/document/StringField.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/document/StringField.java	(revision 1383338)
+++ lucene/core/src/java/org/apache/lucene/document/StringField.java	(working copy)
@@ -1,62 +0,0 @@
-package org.apache.lucene.document;
-
-import org.apache.lucene.index.FieldInfo.IndexOptions;
-
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/** A field that is indexed but not tokenized: the entire
- *  String value is indexed as a single token.  For example
- *  this might be used for a 'country' field or an 'id'
- *  field, or any field that you intend to use for sorting
- *  or access through the field cache. */
-
-public final class StringField extends Field {
-
-  /** Indexed, not tokenized, omits norms, indexes
-   *  DOCS_ONLY, not stored. */
-  public static final FieldType TYPE_NOT_STORED = new FieldType();
-
-  /** Indexed, not tokenized, omits norms, indexes
-   *  DOCS_ONLY, stored */
-  public static final FieldType TYPE_STORED = new FieldType();
-
-  static {
-    TYPE_NOT_STORED.setIndexed(true);
-    TYPE_NOT_STORED.setOmitNorms(true);
-    TYPE_NOT_STORED.setIndexOptions(IndexOptions.DOCS_ONLY);
-    TYPE_NOT_STORED.setTokenized(false);
-    TYPE_NOT_STORED.freeze();
-
-    TYPE_STORED.setIndexed(true);
-    TYPE_STORED.setOmitNorms(true);
-    TYPE_STORED.setIndexOptions(IndexOptions.DOCS_ONLY);
-    TYPE_STORED.setStored(true);
-    TYPE_STORED.setTokenized(false);
-    TYPE_STORED.freeze();
-  }
-
-  /** Creates a new StringField. 
-   *  @param name field name
-   *  @param value String value
-   *  @param stored Store.YES if the content should also be stored
-   *  @throws IllegalArgumentException if the field name or value is null.
-   */
-  public StringField(String name, String value, Store stored) {
-    super(name, value, stored == Store.YES ? TYPE_STORED : TYPE_NOT_STORED);
-  }
-}
Index: lucene/core/src/java/org/apache/lucene/document/Field.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/document/Field.java	(revision 1383338)
+++ lucene/core/src/java/org/apache/lucene/document/Field.java	(working copy)
@@ -45,7 +45,7 @@
  * DoubleDocValuesField}, {@link SortedBytesDocValuesField},
  * {@link DerefBytesDocValuesField}, {@link
  * StraightBytesDocValuesField}, {@link
- * StringField}, {@link TextField}, {@link StoredField}.
+ * MatchOnlyField}, {@link TextField}, {@link StoredField}.
  *
  * <p/> A field is a section of a Document. Each field has three
  * parts: name, type and value. Values may be text
Index: lucene/core/src/java/org/apache/lucene/document/MatchOnlyField.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/document/MatchOnlyField.java	(working copy)
+++ lucene/core/src/java/org/apache/lucene/document/MatchOnlyField.java	(working copy)
@@ -25,7 +25,7 @@
  *  field, or any field that you intend to use for sorting
  *  or access through the field cache. */
 
-public final class StringField extends Field {
+public final class MatchOnlyField extends Field {
 
   /** Indexed, not tokenized, omits norms, indexes
    *  DOCS_ONLY, not stored. */
@@ -56,7 +56,7 @@
    *  @param stored Store.YES if the content should also be stored
    *  @throws IllegalArgumentException if the field name or value is null.
    */
-  public StringField(String name, String value, Store stored) {
+  public MatchOnlyField(String name, String value, Store stored) {
     super(name, value, stored == Store.YES ? TYPE_STORED : TYPE_NOT_STORED);
   }
 }
Index: lucene/core/src/test/org/apache/lucene/index/TestSumDocFreq.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestSumDocFreq.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/index/TestSumDocFreq.java	(working copy)
@@ -36,7 +36,7 @@
     RandomIndexWriter writer = new RandomIndexWriter(random(), dir);
     
     Document doc = new Document();
-    Field id = newStringField("id", "", Field.Store.NO);
+    Field id = newMatchOnlyField("id", "", Field.Store.NO);
     Field field1 = newTextField("foo", "", Field.Store.NO);
     Field field2 = newTextField("bar", "", Field.Store.NO);
     doc.add(id);
Index: lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit.java	(working copy)
@@ -343,7 +343,7 @@
             try {
               final Document doc = new Document();
               DirectoryReader r = DirectoryReader.open(dir);
-              Field f = newStringField("f", "", Field.Store.NO);
+              Field f = newMatchOnlyField("f", "", Field.Store.NO);
               doc.add(f);
               int count = 0;
               do {
Index: lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2.java	(working copy)
@@ -54,7 +54,7 @@
             new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))
             .setMaxBufferedDocs(_TestUtil.nextInt(random(), 50, 1000)));
     Document doc = new Document();
-    Field field = newStringField("field", "", Field.Store.YES);
+    Field field = newMatchOnlyField("field", "", Field.Store.YES);
     doc.add(field);
     terms = new TreeSet<BytesRef>();
  
Index: lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.java	(working copy)
@@ -35,7 +35,7 @@
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.FieldType;
 import org.apache.lucene.document.StoredField;
-import org.apache.lucene.document.StringField;
+import org.apache.lucene.document.MatchOnlyField;
 import org.apache.lucene.document.TextField;
 import org.apache.lucene.index.FieldInfo.IndexOptions;
 import org.apache.lucene.index.IndexWriterConfig.OpenMode;
@@ -787,10 +787,10 @@
     Directory dir = newDirectory();
     IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));
     Document doc = new Document();
-    doc.add(newStringField("", "", Field.Store.NO));
-    doc.add(newStringField("", "a", Field.Store.NO));
-    doc.add(newStringField("", "b", Field.Store.NO));
-    doc.add(newStringField("", "c", Field.Store.NO));
+    doc.add(newMatchOnlyField("", "", Field.Store.NO));
+    doc.add(newMatchOnlyField("", "a", Field.Store.NO));
+    doc.add(newMatchOnlyField("", "b", Field.Store.NO));
+    doc.add(newMatchOnlyField("", "c", Field.Store.NO));
     writer.addDocument(doc);  
     writer.close();
     DirectoryReader reader = DirectoryReader.open(dir);
@@ -1680,7 +1680,7 @@
     Directory d = new MockDirectoryWrapper(random(), new RAMDirectory());
     IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));
     Document doc = new Document();
-    doc.add(newStringField("id", "0", Field.Store.YES));
+    doc.add(newMatchOnlyField("id", "0", Field.Store.YES));
     w.addDocument(doc);
     DirectoryReader r = w.getReader();
     long version = r.getVersion();
@@ -1826,7 +1826,7 @@
     IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( 
         TEST_VERSION_CURRENT, analyzer));
     Document doc = new Document();
-    FieldType customType = new FieldType(StringField.TYPE_NOT_STORED);
+    FieldType customType = new FieldType(MatchOnlyField.TYPE_NOT_STORED);
     customType.setStoreTermVectors(true);
     customType.setStoreTermVectorPositions(true);
     customType.setStoreTermVectorOffsets(true);
Index: lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging.java	(working copy)
@@ -110,7 +110,7 @@
     for (int i = start; i < (start + numDocs); i++)
     {
       Document temp = new Document();
-      temp.add(newStringField("count", (""+i), Field.Store.YES));
+      temp.add(newMatchOnlyField("count", (""+i), Field.Store.YES));
 
       writer.addDocument(temp);
     }
@@ -136,7 +136,7 @@
     customType1.setStoreTermVectorPositions(true);
     customType1.setStoreTermVectorOffsets(true);
     
-    Field idField = newStringField("id", "", Field.Store.NO);
+    Field idField = newMatchOnlyField("id", "", Field.Store.NO);
     document.add(idField);
     Field storedField = newField("stored", "stored", customType);
     document.add(storedField);
@@ -203,7 +203,7 @@
     document.add(storedField);
     Field termVectorField = newField("termVector", "termVector", customType1);
     document.add(termVectorField);
-    Field idField = newStringField("id", "", Field.Store.NO);
+    Field idField = newMatchOnlyField("id", "", Field.Store.NO);
     document.add(idField);
     for(int i=0;i<98;i++) {
       idField.setStringValue("" + i);
@@ -269,7 +269,7 @@
     document.add(storedField);
     Field termVectorField = newField("termVector", "termVector", customType1);
     document.add(termVectorField);
-    Field idField = newStringField("id", "", Field.Store.NO);
+    Field idField = newMatchOnlyField("id", "", Field.Store.NO);
     document.add(idField);
     for(int i=0;i<98;i++) {
       idField.setStringValue("" + i);
Index: lucene/core/src/test/org/apache/lucene/index/TestMultiFields.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestMultiFields.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/index/TestMultiFields.java	(working copy)
@@ -45,9 +45,9 @@
 
       int numDocs = _TestUtil.nextInt(random(), 1, 100 * RANDOM_MULTIPLIER);
       Document doc = new Document();
-      Field f = newStringField("field", "", Field.Store.NO);
+      Field f = newMatchOnlyField("field", "", Field.Store.NO);
       doc.add(f);
-      Field id = newStringField("id", "", Field.Store.NO);
+      Field id = newMatchOnlyField("id", "", Field.Store.NO);
       doc.add(id);
 
       boolean onlyUniqueTerms = random().nextBoolean();
@@ -156,7 +156,7 @@
     Directory dir = newDirectory();
     IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));
     Document d = new Document();
-    d.add(newStringField("f", "j", Field.Store.NO));
+    d.add(newMatchOnlyField("f", "j", Field.Store.NO));
     w.addDocument(d);
     w.commit();
     w.addDocument(d);
@@ -174,7 +174,7 @@
     Directory dir = newDirectory();
     IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));
     Document d = new Document();
-    d.add(newStringField("f", "j", Field.Store.NO));
+    d.add(newMatchOnlyField("f", "j", Field.Store.NO));
     w.addDocument(d);
     w.commit();
     w.addDocument(d);
Index: lucene/core/src/test/org/apache/lucene/index/TestConsistentFieldNumbers.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestConsistentFieldNumbers.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/index/TestConsistentFieldNumbers.java	(working copy)
@@ -24,7 +24,7 @@
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.FieldType;
 import org.apache.lucene.document.StoredField;
-import org.apache.lucene.document.StringField;
+import org.apache.lucene.document.MatchOnlyField;
 import org.apache.lucene.document.TextField;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.FailOnNonBulkMergesInfoStream;
@@ -41,8 +41,8 @@
       IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.COMPOUND_FILES));
 
       Document d1 = new Document();
-      d1.add(new StringField("f1", "first field", Field.Store.YES));
-      d1.add(new StringField("f2", "second field", Field.Store.YES));
+      d1.add(new MatchOnlyField("f1", "first field", Field.Store.YES));
+      d1.add(new MatchOnlyField("f2", "second field", Field.Store.YES));
       writer.addDocument(d1);
 
       if (i == 1) {
Index: lucene/core/src/test/org/apache/lucene/index/TestStressNRT.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestStressNRT.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/index/TestStressNRT.java	(working copy)
@@ -232,7 +232,7 @@
                     // add tombstone first
                     if (tombstones) {
                       Document d = new Document();
-                      d.add(newStringField("id", "-"+Integer.toString(id), Field.Store.YES));
+                      d.add(newMatchOnlyField("id", "-"+Integer.toString(id), Field.Store.YES));
                       d.add(newField(field, Long.toString(nextVal), storedOnlyType));
                       writer.updateDocument(new Term("id", "-"+Integer.toString(id)), d);
                     }
@@ -248,7 +248,7 @@
                     // add tombstone first
                     if (tombstones) {
                       Document d = new Document();
-                      d.add(newStringField("id", "-"+Integer.toString(id), Field.Store.YES));
+                      d.add(newMatchOnlyField("id", "-"+Integer.toString(id), Field.Store.YES));
                       d.add(newField(field, Long.toString(nextVal), storedOnlyType));
                       writer.updateDocument(new Term("id", "-"+Integer.toString(id)), d);
                     }
@@ -261,7 +261,7 @@
                   } else {
                     // assertU(adoc("id",Integer.toString(id), field, Long.toString(nextVal)));
                     Document d = new Document();
-                    d.add(newStringField("id", Integer.toString(id), Field.Store.YES));
+                    d.add(newMatchOnlyField("id", Integer.toString(id), Field.Store.YES));
                     d.add(newField(field, Long.toString(nextVal), storedOnlyType));
                     if (VERBOSE) {
                       System.out.println("TEST: " + Thread.currentThread().getName() + ": u id:" + id + " val=" + nextVal);
Index: lucene/core/src/test/org/apache/lucene/index/TestDocCount.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestDocCount.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/index/TestDocCount.java	(working copy)
@@ -51,7 +51,7 @@
     Document doc = new Document();
     int numFields = _TestUtil.nextInt(random(), 1, 10);
     for (int i = 0; i < numFields; i++) {
-      doc.add(newStringField("" + _TestUtil.nextInt(random(), 'a', 'z'), "" + _TestUtil.nextInt(random(), 'a', 'z'), Field.Store.NO));
+      doc.add(newMatchOnlyField("" + _TestUtil.nextInt(random(), 'a', 'z'), "" + _TestUtil.nextInt(random(), 'a', 'z'), Field.Store.NO));
     }
     return doc;
   }
Index: lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions.java	(working copy)
@@ -323,7 +323,7 @@
     Directory dir = newDirectory();
     RandomIndexWriter writer = new RandomIndexWriter(random(), dir);
     Document doc = new Document();
-    doc.add(newStringField("foo", "bar", Field.Store.NO));
+    doc.add(newMatchOnlyField("foo", "bar", Field.Store.NO));
     writer.addDocument(doc);
     DirectoryReader reader = writer.getReader();
     AtomicReader r = getOnlySegmentReader(reader);
Index: lucene/core/src/test/org/apache/lucene/index/TestMixedCodecs.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestMixedCodecs.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/index/TestMixedCodecs.java	(working copy)
@@ -59,7 +59,7 @@
         docsLeftInThisSegment = _TestUtil.nextInt(random(), 10, 100);
       }
       final Document doc = new Document();
-      doc.add(newStringField("id", String.valueOf(docUpto), Field.Store.YES));
+      doc.add(newMatchOnlyField("id", String.valueOf(docUpto), Field.Store.YES));
       w.addDocument(doc);
       docUpto++;
       docsLeftInThisSegment--;
Index: lucene/core/src/test/org/apache/lucene/index/TestRollback.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestRollback.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/index/TestRollback.java	(working copy)
@@ -31,7 +31,7 @@
     RandomIndexWriter rw = new RandomIndexWriter(random(), dir);
     for (int i = 0; i < 5; i++) {
       Document doc = new Document();
-      doc.add(newStringField("pk", Integer.toString(i), Field.Store.YES));
+      doc.add(newMatchOnlyField("pk", Integer.toString(i), Field.Store.YES));
       rw.addDocument(doc);
     }
     rw.close();
@@ -42,8 +42,8 @@
     for (int i = 0; i < 3; i++) {
       Document doc = new Document();
       String value = Integer.toString(i);
-      doc.add(newStringField("pk", value, Field.Store.YES));
-      doc.add(newStringField("text", "foo", Field.Store.YES));
+      doc.add(newMatchOnlyField("pk", value, Field.Store.YES));
+      doc.add(newMatchOnlyField("text", "foo", Field.Store.YES));
       w.updateDocument(new Term("pk", value), doc);
     }
     w.rollback();
Index: lucene/core/src/test/org/apache/lucene/index/TestIndexableField.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestIndexableField.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/index/TestIndexableField.java	(working copy)
@@ -200,7 +200,7 @@
                   next = null;
                   if (fieldUpto == 0) {
                     fieldUpto = 1;
-                    next = newStringField("id", ""+finalDocCount, Field.Store.YES);
+                    next = newMatchOnlyField("id", ""+finalDocCount, Field.Store.YES);
                   } else {
                     next = new MyField(finalBaseCount + (fieldUpto++-1));
                   }
@@ -246,7 +246,7 @@
                   next = null;
                   if (fieldUpto == 0) {
                     fieldUpto = 1;
-                    next = newStringField("id", ""+finalDocCount, Field.Store.YES);
+                    next = newMatchOnlyField("id", ""+finalDocCount, Field.Store.YES);
                   } else {
                     next = new MyField(finalBaseCount + (fieldUpto++-1));
                   }
Index: lucene/core/src/test/org/apache/lucene/index/TestDocumentWriter.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestDocumentWriter.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/index/TestDocumentWriter.java	(working copy)
@@ -27,7 +27,7 @@
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.FieldType;
-import org.apache.lucene.document.StringField;
+import org.apache.lucene.document.MatchOnlyField;
 import org.apache.lucene.document.TextField;
 import org.apache.lucene.index.FieldInfo.IndexOptions;
 import org.apache.lucene.search.DocIdSetIterator;
@@ -268,15 +268,15 @@
   public void testMixedTermVectorSettingsSameField() throws Exception {
     Document doc = new Document();
     // f1 first without tv then with tv
-    doc.add(newStringField("f1", "v1", Field.Store.YES));
-    FieldType customType2 = new FieldType(StringField.TYPE_STORED);
+    doc.add(newMatchOnlyField("f1", "v1", Field.Store.YES));
+    FieldType customType2 = new FieldType(MatchOnlyField.TYPE_STORED);
     customType2.setStoreTermVectors(true);
     customType2.setStoreTermVectorOffsets(true);
     customType2.setStoreTermVectorPositions(true);
     doc.add(newField("f1", "v2", customType2));
     // f2 first with tv then without tv
     doc.add(newField("f2", "v1", customType2));
-    doc.add(newStringField("f2", "v2", Field.Store.YES));
+    doc.add(newMatchOnlyField("f2", "v2", Field.Store.YES));
 
     IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(
         TEST_VERSION_CURRENT, new MockAnalyzer(random())));
Index: lucene/core/src/test/org/apache/lucene/index/TestPostingsOffsets.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestPostingsOffsets.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/index/TestPostingsOffsets.java	(working copy)
@@ -33,7 +33,7 @@
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.FieldType;
 import org.apache.lucene.document.IntField;
-import org.apache.lucene.document.StringField;
+import org.apache.lucene.document.MatchOnlyField;
 import org.apache.lucene.document.TextField;
 import org.apache.lucene.index.FieldInfo.IndexOptions;
 import org.apache.lucene.search.DocIdSetIterator;
@@ -145,7 +145,7 @@
       Document doc = new Document();
       doc.add(new Field("numbers", English.intToEnglish(i), ft));
       doc.add(new Field("oddeven", (i % 2) == 0 ? "even" : "odd", ft));
-      doc.add(new StringField("id", "" + i, Field.Store.NO));
+      doc.add(new MatchOnlyField("id", "" + i, Field.Store.NO));
       w.addDocument(doc);
     }
     
Index: lucene/core/src/test/org/apache/lucene/index/TestStressAdvance.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestStressAdvance.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/index/TestStressAdvance.java	(working copy)
@@ -37,9 +37,9 @@
       RandomIndexWriter w = new RandomIndexWriter(random(), dir);
       final Set<Integer> aDocs = new HashSet<Integer>();
       final Document doc = new Document();
-      final Field f = newStringField("field", "", Field.Store.NO);
+      final Field f = newMatchOnlyField("field", "", Field.Store.NO);
       doc.add(f);
-      final Field idField = newStringField("id", "", Field.Store.YES);
+      final Field idField = newMatchOnlyField("id", "", Field.Store.YES);
       doc.add(idField);
       int num = atLeast(4097);
       if (VERBOSE) {
Index: lucene/core/src/test/org/apache/lucene/index/TestSizeBoundedForceMerge.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestSizeBoundedForceMerge.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/index/TestSizeBoundedForceMerge.java	(working copy)
@@ -21,7 +21,7 @@
 
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
-import org.apache.lucene.document.StringField;
+import org.apache.lucene.document.MatchOnlyField;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.RAMDirectory;
 import org.apache.lucene.util.LuceneTestCase;
@@ -36,7 +36,7 @@
     for (int i = 0; i < numDocs; i++) {
       Document doc = new Document();
       if (withID) {
-        doc.add(new StringField("id", "" + i, Field.Store.NO));
+        doc.add(new MatchOnlyField("id", "" + i, Field.Store.NO));
       }
       writer.addDocument(doc);
     }
Index: lucene/core/src/test/org/apache/lucene/index/TestAtomicUpdate.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestAtomicUpdate.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/index/TestAtomicUpdate.java	(working copy)
@@ -89,7 +89,7 @@
       // Update all 100 docs...
       for(int i=0; i<100; i++) {
         Document d = new Document();
-        d.add(new StringField("id", Integer.toString(i), Field.Store.YES));
+        d.add(new MatchOnlyField("id", Integer.toString(i), Field.Store.YES));
         d.add(new TextField("contents", English.intToEnglish(i+10*count), Field.Store.NO));
         writer.updateDocument(new Term("id", Integer.toString(i)), d);
       }
@@ -129,7 +129,7 @@
     // Establish a base index of 100 docs:
     for(int i=0;i<100;i++) {
       Document d = new Document();
-      d.add(newStringField("id", Integer.toString(i), Field.Store.YES));
+      d.add(newMatchOnlyField("id", Integer.toString(i), Field.Store.YES));
       d.add(newTextField("contents", English.intToEnglish(i), Field.Store.NO));
       if ((i-1)%7 == 0) {
         writer.commit();
Index: lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig.java	(working copy)
@@ -344,7 +344,7 @@
     lmp.setUseCompoundFile(true);
 
     Document doc = new Document();
-    doc.add(newStringField("field", "foo", Store.NO));
+    doc.add(newMatchOnlyField("field", "foo", Store.NO));
     w.addDocument(doc);
     w.commit();
 
Index: lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility.java	(working copy)
@@ -44,7 +44,7 @@
 import org.apache.lucene.document.ShortDocValuesField;
 import org.apache.lucene.document.SortedBytesDocValuesField;
 import org.apache.lucene.document.StraightBytesDocValuesField;
-import org.apache.lucene.document.StringField;
+import org.apache.lucene.document.MatchOnlyField;
 import org.apache.lucene.document.TextField;
 import org.apache.lucene.index.DocValues.Source;
 import org.apache.lucene.index.FieldInfo.IndexOptions;
@@ -633,7 +633,7 @@
   {
     Document doc = new Document();
     doc.add(new TextField("content", "aaa", Field.Store.NO));
-    doc.add(new StringField("id", Integer.toString(id), Field.Store.YES));
+    doc.add(new MatchOnlyField("id", Integer.toString(id), Field.Store.YES));
     FieldType customType2 = new FieldType(TextField.TYPE_STORED);
     customType2.setStoreTermVectors(true);
     customType2.setStoreTermVectorPositions(true);
Index: lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge.java	(working copy)
@@ -34,7 +34,7 @@
     Directory dir = newDirectory();
 
     final Document doc = new Document();
-    doc.add(newStringField("content", "aaa", Field.Store.NO));
+    doc.add(newMatchOnlyField("content", "aaa", Field.Store.NO));
     final int incrMin = TEST_NIGHTLY ? 15 : 40;
     for(int numDocs=10;numDocs<500;numDocs += _TestUtil.nextInt(random(), incrMin, 5*incrMin)) {
       LogDocMergePolicy ldmp = new LogDocMergePolicy();
@@ -75,7 +75,7 @@
     Directory dir = newDirectory();
 
     final Document doc = new Document();
-    doc.add(newStringField("content", "aaa", Field.Store.NO));
+    doc.add(newMatchOnlyField("content", "aaa", Field.Store.NO));
 
     LogDocMergePolicy ldmp = new LogDocMergePolicy();
     ldmp.setMinMergeDocs(1);
@@ -179,7 +179,7 @@
               setMergePolicy(newLogMergePolicy(51))
       );
       Document doc = new Document();
-      doc.add(newStringField("field", "aaa", Field.Store.NO));
+      doc.add(newMatchOnlyField("field", "aaa", Field.Store.NO));
       for(int i=0;i<100;i++)
         writer.addDocument(doc);
       writer.forceMerge(1, false);
Index: lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode.java	(working copy)
@@ -276,7 +276,7 @@
     RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);
     Document d = new Document();
     // Single segment
-    Field f = newStringField("f", "", Field.Store.NO);
+    Field f = newMatchOnlyField("f", "", Field.Store.NO);
     d.add(f);
     char[] chars = new char[2];
     final Set<String> allTerms = new HashSet<String>();
Index: lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete.java	(working copy)
@@ -30,7 +30,7 @@
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.FieldType;
-import org.apache.lucene.document.StringField;
+import org.apache.lucene.document.MatchOnlyField;
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.ScoreDoc;
 import org.apache.lucene.search.TermQuery;
@@ -58,7 +58,7 @@
     custom1.setStored(true);
     for (int i = 0; i < keywords.length; i++) {
       Document doc = new Document();
-      doc.add(newStringField("id", keywords[i], Field.Store.YES));
+      doc.add(newMatchOnlyField("id", keywords[i], Field.Store.YES));
       doc.add(newField("country", unindexed[i], custom1));
       doc.add(newTextField("contents", unstored[i], Field.Store.NO));
       doc.add(newTextField("city", text[i], Field.Store.YES));
@@ -384,8 +384,8 @@
       throws IOException {
     Document doc = new Document();
     doc.add(newTextField("content", "aaa", Field.Store.NO));
-    doc.add(newStringField("id", String.valueOf(id), Field.Store.YES));
-    doc.add(newStringField("value", String.valueOf(value), Field.Store.NO));
+    doc.add(newMatchOnlyField("id", String.valueOf(id), Field.Store.YES));
+    doc.add(newMatchOnlyField("value", String.valueOf(value), Field.Store.NO));
     modifier.updateDocument(new Term("id", String.valueOf(id)), doc);
   }
 
@@ -394,8 +394,8 @@
       throws IOException {
     Document doc = new Document();
     doc.add(newTextField("content", "aaa", Field.Store.NO));
-    doc.add(newStringField("id", String.valueOf(id), Field.Store.YES));
-    doc.add(newStringField("value", String.valueOf(value), Field.Store.NO));
+    doc.add(newMatchOnlyField("id", String.valueOf(id), Field.Store.YES));
+    doc.add(newMatchOnlyField("value", String.valueOf(value), Field.Store.NO));
     modifier.addDocument(doc);
   }
 
@@ -432,7 +432,7 @@
     IndexWriter writer = new IndexWriter(startDir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));
     for (int i = 0; i < 157; i++) {
       Document d = new Document();
-      d.add(newStringField("id", Integer.toString(i), Field.Store.YES));
+      d.add(newMatchOnlyField("id", Integer.toString(i), Field.Store.YES));
       d.add(newTextField("content", "aaa " + i, Field.Store.NO));
       writer.addDocument(d);
     }
@@ -510,7 +510,7 @@
             for (int i = 0; i < 13; i++) {
               if (updates) {
                 Document d = new Document();
-                d.add(newStringField("id", Integer.toString(i), Field.Store.YES));
+                d.add(newMatchOnlyField("id", Integer.toString(i), Field.Store.YES));
                 d.add(newTextField("content", "bbb " + i, Field.Store.NO));
                 modifier.updateDocument(new Term("id", Integer.toString(docId)), d);
               } else { // deletes
@@ -702,7 +702,7 @@
     custom1.setStored(true);
     for (int i = 0; i < keywords.length; i++) {
       Document doc = new Document();
-      doc.add(newStringField("id", keywords[i], Field.Store.YES));
+      doc.add(newMatchOnlyField("id", keywords[i], Field.Store.YES));
       doc.add(newField("country", unindexed[i], custom1));
       doc.add(newTextField("contents", unstored[i], Field.Store.NO));
       doc.add(newTextField("city", text[i], Field.Store.YES));
@@ -823,7 +823,7 @@
     custom1.setStored(true);
     for (int i = 0; i < keywords.length; i++) {
       Document doc = new Document();
-      doc.add(newStringField("id", keywords[i], Field.Store.YES));
+      doc.add(newMatchOnlyField("id", keywords[i], Field.Store.YES));
       doc.add(newField("country", unindexed[i], custom1));
       doc.add(newTextField("contents", unstored[i], Field.Store.NO));
       doc.add(newTextField("city", text[i], Field.Store.YES));
@@ -869,7 +869,7 @@
     Collections.shuffle(ids, random());
     for(int id : ids) {
       Document doc = new Document();
-      doc.add(newStringField("id", ""+id, Field.Store.NO));
+      doc.add(newMatchOnlyField("id", ""+id, Field.Store.NO));
       w.addDocument(doc);
     }
     Collections.shuffle(ids, random());
@@ -952,7 +952,7 @@
     int count = 0;
     while(true) {
       Document doc = new Document();
-      doc.add(new StringField("id", count+"", Field.Store.NO));
+      doc.add(new MatchOnlyField("id", count+"", Field.Store.NO));
       final Term delTerm;
       if (count == 1010) {
         // This is the only delete that applies
@@ -998,7 +998,7 @@
     int count = 0;
     while(true) {
       Document doc = new Document();
-      doc.add(new StringField("id", count+"", Field.Store.NO));
+      doc.add(new MatchOnlyField("id", count+"", Field.Store.NO));
       final Term delTerm;
       if (count == 1010) {
         // This is the only delete that applies
@@ -1053,7 +1053,7 @@
         w.deleteDocuments(new Term("id", "0"));
       }
       Document doc = new Document();
-      doc.add(newStringField("id", ""+id, Field.Store.NO));
+      doc.add(newMatchOnlyField("id", ""+id, Field.Store.NO));
       doc.add(newTextField("body", sb.toString(), Field.Store.NO));
       w.updateDocument(new Term("id", ""+id), doc);
       docsInSegment.incrementAndGet();
Index: lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing.java	(working copy)
@@ -43,7 +43,7 @@
 import org.apache.lucene.document.ShortDocValuesField;
 import org.apache.lucene.document.SortedBytesDocValuesField;
 import org.apache.lucene.document.StraightBytesDocValuesField;
-import org.apache.lucene.document.StringField;
+import org.apache.lucene.document.MatchOnlyField;
 import org.apache.lucene.document.TextField;
 import org.apache.lucene.index.DocValues.SortedSource;
 import org.apache.lucene.index.DocValues.Source;
@@ -135,7 +135,7 @@
     Directory d1 = newDirectory();
     RandomIndexWriter w = new RandomIndexWriter(random(), d1);
     Document doc = new Document();
-    doc.add(newStringField("id", "1", Field.Store.YES));
+    doc.add(newMatchOnlyField("id", "1", Field.Store.YES));
     doc.add(new PackedLongDocValuesField("dv", 1));
     w.addDocument(doc);
     IndexReader r1 = w.getReader();
@@ -144,7 +144,7 @@
     Directory d2 = newDirectory();
     w = new RandomIndexWriter(random(), d2);
     doc = new Document();
-    doc.add(newStringField("id", "2", Field.Store.YES));
+    doc.add(newMatchOnlyField("id", "2", Field.Store.YES));
     doc.add(new PackedLongDocValuesField("dv", 2));
     w.addDocument(doc);
     IndexReader r2 = w.getReader();
@@ -714,7 +714,7 @@
         }
       }
       doc.removeFields("id");
-      doc.add(new StringField("id", idBase + i, Field.Store.YES));
+      doc.add(new MatchOnlyField("id", idBase + i, Field.Store.YES));
       w.addDocument(doc);
 
       if (i % 7 == 0) {
Index: lucene/core/src/test/org/apache/lucene/index/TestCompoundFile.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestCompoundFile.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/index/TestCompoundFile.java	(working copy)
@@ -814,7 +814,7 @@
     RandomIndexWriter riw = new RandomIndexWriter(random(), dir);
     Document doc = new Document();
     // these fields should sometimes get term vectors, etc
-    Field idField = newStringField("id", "", Field.Store.NO);
+    Field idField = newMatchOnlyField("id", "", Field.Store.NO);
     Field bodyField = newTextField("body", "", Field.Store.NO);
     doc.add(idField);
     doc.add(bodyField);
Index: lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java	(working copy)
@@ -30,7 +30,7 @@
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.FieldType;
-import org.apache.lucene.document.StringField;
+import org.apache.lucene.document.MatchOnlyField;
 import org.apache.lucene.document.TextField;
 import org.apache.lucene.index.IndexWriterConfig.OpenMode;
 import org.apache.lucene.search.DocIdSetIterator;
@@ -61,7 +61,7 @@
     private static final FieldType custom1 = new FieldType(TextField.TYPE_NOT_STORED);
     private static final FieldType custom2 = new FieldType();
     private static final FieldType custom3 = new FieldType();
-    private static final FieldType custom4 = new FieldType(StringField.TYPE_NOT_STORED);
+    private static final FieldType custom4 = new FieldType(MatchOnlyField.TYPE_NOT_STORED);
     private static final FieldType custom5 = new FieldType(TextField.TYPE_STORED);
     
     static {
@@ -136,7 +136,7 @@
       doc.add(newField(r, "content3", "aaa bbb ccc ddd", DocCopyIterator.custom3));
 
       doc.add(newTextField(r, "content4", "aaa bbb ccc ddd", Field.Store.NO));
-      doc.add(newStringField(r, "content5", "aaa bbb ccc ddd", Field.Store.NO));
+      doc.add(newMatchOnlyField(r, "content5", "aaa bbb ccc ddd", Field.Store.NO));
 
       doc.add(newField(r, "content7", "aaa bbb ccc ddd", DocCopyIterator.custom4));
 
@@ -1347,7 +1347,7 @@
     for(int docCount=0;docCount<7;docCount++) {
       Document doc = new Document();
       docs.add(doc);
-      doc.add(newStringField("id", docCount+"", Field.Store.NO));
+      doc.add(newMatchOnlyField("id", docCount+"", Field.Store.NO));
       doc.add(newTextField("content", "silly content " + docCount, Field.Store.NO));
       if (docCount == 4) {
         Field f = newTextField("crash", "", Field.Store.NO);
@@ -1407,8 +1407,8 @@
     for(int docCount=0;docCount<numDocs2;docCount++) {
       Document doc = new Document();
       docs.add(doc);
-      doc.add(newStringField("subid", "subs", Field.Store.NO));
-      doc.add(newStringField("id", docCount+"", Field.Store.NO));
+      doc.add(newMatchOnlyField("subid", "subs", Field.Store.NO));
+      doc.add(newMatchOnlyField("id", docCount+"", Field.Store.NO));
       doc.add(newTextField("content", "silly content " + docCount, Field.Store.NO));
     }
     w.addDocuments(docs);
@@ -1426,7 +1426,7 @@
     for(int docCount=0;docCount<limit;docCount++) {
       Document doc = new Document();
       docs.add(doc);
-      doc.add(newStringField("id", docCount+"", Field.Store.NO));
+      doc.add(newMatchOnlyField("id", docCount+"", Field.Store.NO));
       doc.add(newTextField("content", "silly content " + docCount, Field.Store.NO));
       if (docCount == crashAt) {
         Field f = newTextField("crash", "", Field.Store.NO);
@@ -1552,9 +1552,9 @@
     iwc.setMergePolicy(newLogMergePolicy());
     IndexWriter iw = new IndexWriter(dir, iwc);
     Document doc = new Document();
-    doc.add(new StringField("field1", "sometext", Field.Store.YES));
+    doc.add(new MatchOnlyField("field1", "sometext", Field.Store.YES));
     doc.add(new TextField("field2", "sometext", Field.Store.NO));
-    doc.add(new StringField("foo", "bar", Field.Store.NO));
+    doc.add(new MatchOnlyField("foo", "bar", Field.Store.NO));
     iw.addDocument(doc); // add an 'ok' document
     try {
       doc = new Document();
@@ -1575,7 +1575,7 @@
 
               @Override
               public IndexableFieldType fieldType() {
-                return StringField.TYPE_NOT_STORED;
+                return MatchOnlyField.TYPE_NOT_STORED;
               }
 
               @Override
Index: lucene/core/src/test/org/apache/lucene/index/TestStressIndexing.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestStressIndexing.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/index/TestStressIndexing.java	(working copy)
@@ -78,7 +78,7 @@
       for(int j=0; j<10; j++) {
         Document d = new Document();
         int n = random().nextInt();
-        d.add(newStringField("id", Integer.toString(nextID++), Field.Store.YES));
+        d.add(newMatchOnlyField("id", Integer.toString(nextID++), Field.Store.YES));
         d.add(newTextField("contents", English.intToEnglish(n), Field.Store.NO));
         writer.addDocument(d);
       }
Index: lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy.java	(working copy)
@@ -721,7 +721,7 @@
   private void addDocWithID(IndexWriter writer, int id) throws IOException {
     Document doc = new Document();
     doc.add(newTextField("content", "aaa", Field.Store.NO));
-    doc.add(newStringField("id", "" + id, Field.Store.NO));
+    doc.add(newMatchOnlyField("id", "" + id, Field.Store.NO));
     writer.addDocument(doc);
   }
   
Index: lucene/core/src/test/org/apache/lucene/index/TestNeverDelete.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestNeverDelete.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/index/TestNeverDelete.java	(working copy)
@@ -62,7 +62,7 @@
               int docCount = 0;
               while (System.currentTimeMillis() < stopTime) {
                 final Document doc = new Document();
-                doc.add(newStringField("dc", ""+docCount, Field.Store.YES));
+                doc.add(newMatchOnlyField("dc", ""+docCount, Field.Store.YES));
                 doc.add(newTextField("field", "here is some text", Field.Store.YES));
                 w.addDocument(doc);
 
Index: lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds.java	(working copy)
@@ -135,7 +135,7 @@
       }
       for(int ord : ordsForDocSet) {
         ordsForDoc[upto++] = ord;
-        Field field = newStringField("field", termsArray[ord].utf8ToString(), Field.Store.NO);
+        Field field = newMatchOnlyField("field", termsArray[ord].utf8ToString(), Field.Store.NO);
         if (VERBOSE) {
           System.out.println("  f=" + termsArray[ord].utf8ToString());
         }
@@ -232,7 +232,7 @@
       }
       for(int ord : ordsForDocSet) {
         ordsForDoc[upto++] = ord;
-        Field field = newStringField("field", termsArray[ord].utf8ToString(), Field.Store.NO);
+        Field field = newMatchOnlyField("field", termsArray[ord].utf8ToString(), Field.Store.NO);
         if (VERBOSE) {
           System.out.println("  f=" + termsArray[ord].utf8ToString());
         }
Index: lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader.java	(working copy)
@@ -143,7 +143,7 @@
     
     Document newDoc = new Document(r1.document(10));
     newDoc.removeField("id");
-    newDoc.add(newStringField("id", Integer.toString(8000), Field.Store.YES));
+    newDoc.add(newMatchOnlyField("id", Integer.toString(8000), Field.Store.YES));
     writer.updateDocument(new Term("id", id10), newDoc);
     assertFalse(r1.isCurrent());
 
@@ -879,7 +879,7 @@
     final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));
     Document doc = new Document();
     doc.add(newTextField("field", "a b c", Field.Store.NO));
-    Field id = newStringField("id", "", Field.Store.NO);
+    Field id = newMatchOnlyField("id", "", Field.Store.NO);
     doc.add(id);
     id.setStringValue("0");
     w.addDocument(doc);
@@ -903,7 +903,7 @@
     final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));
     Document doc = new Document();
     doc.add(newTextField("field", "a b c", Field.Store.NO));
-    Field id = newStringField("id", "", Field.Store.NO);
+    Field id = newMatchOnlyField("id", "", Field.Store.NO);
     doc.add(id);
     id.setStringValue("0");
     w.addDocument(doc);
@@ -959,7 +959,7 @@
     );
 
     Document doc = new Document();
-    doc.add(newStringField("foo", "bar", Field.Store.NO));
+    doc.add(newMatchOnlyField("foo", "bar", Field.Store.NO));
     for(int i=0;i<20;i++) {
       w.addDocument(doc);
     }
Index: lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen.java	(working copy)
@@ -549,7 +549,7 @@
     );
     for(int i=0;i<4;i++) {
       Document doc = new Document();
-      doc.add(newStringField("id", ""+i, Field.Store.NO));
+      doc.add(newMatchOnlyField("id", ""+i, Field.Store.NO));
       writer.addDocument(doc);
       Map<String,String> data = new HashMap<String,String>();
       data.put("index", i+"");
Index: lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf.java	(working copy)
@@ -87,7 +87,7 @@
 
     Document doc = new Document();
     
-    doc.add(newStringField(field, val, Field.Store.NO));
+    doc.add(newMatchOnlyField(field, val, Field.Store.NO));
     IndexWriter writer = new IndexWriter(
         dir,
         newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).
Index: lucene/core/src/test/org/apache/lucene/index/TestIndexFileDeleter.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestIndexFileDeleter.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/index/TestIndexFileDeleter.java	(working copy)
@@ -197,7 +197,7 @@
   {
     Document doc = new Document();
     doc.add(newTextField("content", "aaa", Field.Store.NO));
-    doc.add(newStringField("id", Integer.toString(id), Field.Store.NO));
+    doc.add(newMatchOnlyField("id", Integer.toString(id), Field.Store.NO));
     writer.addDocument(doc);
   }
 }
Index: lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy.java	(working copy)
@@ -120,7 +120,7 @@
     final int numDocs = atLeast(200);
     for(int i=0;i<numDocs;i++) {
       Document doc = new Document();
-      doc.add(newStringField("id", "" + i, Field.Store.NO));
+      doc.add(newMatchOnlyField("id", "" + i, Field.Store.NO));
       doc.add(newTextField("content", "aaa " + i, Field.Store.NO));
       w.addDocument(doc);
     }
Index: lucene/core/src/test/org/apache/lucene/index/TestTermsEnum.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestTermsEnum.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/index/TestTermsEnum.java	(working copy)
@@ -161,7 +161,7 @@
       System.out.println("TEST: addDoc id:" + id + " terms=" + terms);
     }
     for (String s2 : terms) {
-      doc.add(newStringField("f", s2, Field.Store.NO));
+      doc.add(newMatchOnlyField("f", s2, Field.Store.NO));
       termToID.put(new BytesRef(s2), id);
     }
     w.addDocument(doc);
@@ -365,7 +365,7 @@
     final RandomIndexWriter w = new RandomIndexWriter(random(), d, iwc);
     for(String term : terms) {
       Document doc = new Document();
-      Field f = newStringField(FIELD, term, Field.Store.NO);
+      Field f = newMatchOnlyField(FIELD, term, Field.Store.NO);
       doc.add(f);
       w.addDocument(doc);
     }
@@ -731,7 +731,7 @@
     w.addDocument(doc);
 
     doc = new Document();
-    doc.add(newStringField("field", "bbb", Field.Store.NO));
+    doc.add(newMatchOnlyField("field", "bbb", Field.Store.NO));
     w.addDocument(doc);
 
     doc = new Document();
Index: lucene/core/src/test/org/apache/lucene/index/TestFieldsReader.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestFieldsReader.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/index/TestFieldsReader.java	(working copy)
@@ -32,7 +32,7 @@
 import org.apache.lucene.document.IntField;
 import org.apache.lucene.document.LongField;
 import org.apache.lucene.document.StoredField;
-import org.apache.lucene.document.StringField;
+import org.apache.lucene.document.MatchOnlyField;
 import org.apache.lucene.index.FieldInfo.IndexOptions;
 import org.apache.lucene.index.IndexWriterConfig.OpenMode;
 import org.apache.lucene.search.FieldCache;
@@ -310,7 +310,7 @@
     FieldType onlyStored = new FieldType();
     onlyStored.setStored(true);
     doc.add(new Field("field", "value", onlyStored));
-    doc.add(new StringField("field2", "value", Field.Store.YES));
+    doc.add(new MatchOnlyField("field2", "value", Field.Store.YES));
     w.addDocument(doc);
     IndexReader r = w.getReader();
     w.close();
Index: lucene/core/src/test/org/apache/lucene/index/TestRollingUpdates.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestRollingUpdates.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/index/TestRollingUpdates.java	(working copy)
@@ -183,7 +183,7 @@
         DirectoryReader open = null;
         for (int i = 0; i < num; i++) {
           Document doc = new Document();// docs.nextDoc();
-          doc.add(newStringField("id", "test", Field.Store.NO));
+          doc.add(newMatchOnlyField("id", "test", Field.Store.NO));
           writer.updateDocument(new Term("id", "test"), doc);
           if (random().nextInt(3) == 0) {
             if (open == null) {
Index: lucene/core/src/test/org/apache/lucene/index/TestAddIndexes.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestAddIndexes.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/index/TestAddIndexes.java	(working copy)
@@ -45,7 +45,7 @@
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.FieldType;
-import org.apache.lucene.document.StringField;
+import org.apache.lucene.document.MatchOnlyField;
 import org.apache.lucene.document.TextField;
 import org.apache.lucene.index.IndexWriterConfig.OpenMode;
 import org.apache.lucene.search.DocIdSetIterator;
@@ -179,7 +179,7 @@
     // docs, so 10 pending deletes:
     for (int i = 0; i < 20; i++) {
       Document doc = new Document();
-      doc.add(newStringField("id", "" + (i % 10), Field.Store.NO));
+      doc.add(newMatchOnlyField("id", "" + (i % 10), Field.Store.NO));
       doc.add(newTextField("content", "bbb " + i, Field.Store.NO));
       writer.updateDocument(new Term("id", "" + (i%10)), doc);
     }
@@ -214,7 +214,7 @@
     // docs, so 10 pending deletes:
     for (int i = 0; i < 20; i++) {
       Document doc = new Document();
-      doc.add(newStringField("id", "" + (i % 10), Field.Store.NO));
+      doc.add(newMatchOnlyField("id", "" + (i % 10), Field.Store.NO));
       doc.add(newTextField("content", "bbb " + i, Field.Store.NO));
       writer.updateDocument(new Term("id", "" + (i%10)), doc);
     }
@@ -252,7 +252,7 @@
     // docs, so 10 pending deletes:
     for (int i = 0; i < 20; i++) {
       Document doc = new Document();
-      doc.add(newStringField("id", "" + (i % 10), Field.Store.NO));
+      doc.add(newMatchOnlyField("id", "" + (i % 10), Field.Store.NO));
       doc.add(newTextField("content", "bbb " + i, Field.Store.NO));
       writer.updateDocument(new Term("id", "" + (i%10)), doc);
     }
@@ -974,7 +974,7 @@
       IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));
       IndexWriter writer = new IndexWriter(dirs[i], conf);
       Document doc = new Document();
-      doc.add(new StringField("id", "myid", Field.Store.NO));
+      doc.add(new MatchOnlyField("id", "myid", Field.Store.NO));
       writer.addDocument(doc);
       writer.close();
     }
@@ -1220,8 +1220,8 @@
     Directory d1 = newDirectory();
     RandomIndexWriter w = new RandomIndexWriter(random(), d1);
     Document doc = new Document();
-    doc.add(newStringField("f1", "doc1 field1", Field.Store.YES));
-    doc.add(newStringField("id", "1", Field.Store.YES));
+    doc.add(newMatchOnlyField("f1", "doc1 field1", Field.Store.YES));
+    doc.add(newMatchOnlyField("id", "1", Field.Store.YES));
     w.addDocument(doc);
     IndexReader r1 = w.getReader();
     w.close();
@@ -1229,8 +1229,8 @@
     Directory d2 = newDirectory();
     w = new RandomIndexWriter(random(), d2);
     doc = new Document();
-    doc.add(newStringField("f2", "doc2 field2", Field.Store.YES));
-    doc.add(newStringField("id", "2", Field.Store.YES));
+    doc.add(newMatchOnlyField("f2", "doc2 field2", Field.Store.YES));
+    doc.add(newMatchOnlyField("id", "2", Field.Store.YES));
     w.addDocument(doc);
     IndexReader r2 = w.getReader();
     w.close();
Index: lucene/core/src/test/org/apache/lucene/index/TestTermVectorsWriter.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestTermVectorsWriter.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/index/TestTermVectorsWriter.java	(working copy)
@@ -29,7 +29,7 @@
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.FieldType;
-import org.apache.lucene.document.StringField;
+import org.apache.lucene.document.MatchOnlyField;
 import org.apache.lucene.document.TextField;
 import org.apache.lucene.search.DocIdSetIterator;
 import org.apache.lucene.store.Directory;
@@ -46,7 +46,7 @@
     IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( 
         TEST_VERSION_CURRENT, new MockAnalyzer(random())));
     Document doc = new Document();
-    FieldType customType = new FieldType(StringField.TYPE_NOT_STORED);
+    FieldType customType = new FieldType(MatchOnlyField.TYPE_NOT_STORED);
     customType.setStoreTermVectors(true);
     customType.setStoreTermVectorPositions(true);
     customType.setStoreTermVectorOffsets(true);
@@ -396,7 +396,7 @@
 
       document = new Document();
       document.add(storedField);
-      FieldType customType2 = new FieldType(StringField.TYPE_NOT_STORED);
+      FieldType customType2 = new FieldType(MatchOnlyField.TYPE_NOT_STORED);
       customType2.setStoreTermVectors(true);
       customType2.setStoreTermVectorPositions(true);
       customType2.setStoreTermVectorOffsets(true);
@@ -451,7 +451,7 @@
 
       document = new Document();
       document.add(storedField);
-      FieldType customType2 = new FieldType(StringField.TYPE_NOT_STORED);
+      FieldType customType2 = new FieldType(MatchOnlyField.TYPE_NOT_STORED);
       customType2.setStoreTermVectors(true);
       customType2.setStoreTermVectorPositions(true);
       customType2.setStoreTermVectorOffsets(true);
@@ -485,7 +485,7 @@
 
     Field storedField = newField("stored", "stored", customType);
     document.add(storedField);
-    FieldType customType2 = new FieldType(StringField.TYPE_NOT_STORED);
+    FieldType customType2 = new FieldType(MatchOnlyField.TYPE_NOT_STORED);
     customType2.setStoreTermVectors(true);
     customType2.setStoreTermVectorPositions(true);
     customType2.setStoreTermVectorOffsets(true);
@@ -521,7 +521,7 @@
     IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(
         TEST_VERSION_CURRENT, new MockAnalyzer(random())));
     Document document = new Document();
-    FieldType customType2 = new FieldType(StringField.TYPE_NOT_STORED);
+    FieldType customType2 = new FieldType(MatchOnlyField.TYPE_NOT_STORED);
     customType2.setStoreTermVectors(true);
     customType2.setStoreTermVectorPositions(true);
     customType2.setStoreTermVectorOffsets(true);
@@ -533,7 +533,7 @@
     // Make first segment
     iw.commit();
 
-    FieldType customType = new FieldType(StringField.TYPE_NOT_STORED);
+    FieldType customType = new FieldType(MatchOnlyField.TYPE_NOT_STORED);
     customType.setStoreTermVectors(true);
     document.add(newField("tvtest", "a b c", customType));
     iw.addDocument(document);
@@ -551,7 +551,7 @@
     IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(
         TEST_VERSION_CURRENT, new MockAnalyzer(random())));
     Document document = new Document();
-    FieldType customType = new FieldType(StringField.TYPE_NOT_STORED);
+    FieldType customType = new FieldType(MatchOnlyField.TYPE_NOT_STORED);
     customType.setStoreTermVectors(true);
     document.add(newField("tvtest", "a b c", customType));
     iw.addDocument(document);
@@ -565,7 +565,7 @@
 
     iw.forceMerge(1);
 
-    FieldType customType2 = new FieldType(StringField.TYPE_NOT_STORED);
+    FieldType customType2 = new FieldType(MatchOnlyField.TYPE_NOT_STORED);
     customType2.setStoreTermVectors(true);
     document.add(newField("tvtest", "a b c", customType2));
     iw.addDocument(document);
Index: lucene/core/src/test/org/apache/lucene/index/TestThreadedForceMerge.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestThreadedForceMerge.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/index/TestThreadedForceMerge.java	(working copy)
@@ -23,7 +23,7 @@
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.FieldType;
-import org.apache.lucene.document.StringField;
+import org.apache.lucene.document.MatchOnlyField;
 import org.apache.lucene.index.IndexWriterConfig.OpenMode;
 import org.apache.lucene.util.English;
 
@@ -69,7 +69,7 @@
 
       ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);
 
-      final FieldType customType = new FieldType(StringField.TYPE_STORED);
+      final FieldType customType = new FieldType(MatchOnlyField.TYPE_STORED);
       customType.setOmitNorms(true);
       
       for(int i=0;i<200;i++) {
Index: lucene/core/src/test/org/apache/lucene/index/TestReaderClosed.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestReaderClosed.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/index/TestReaderClosed.java	(working copy)
@@ -41,7 +41,7 @@
         .setMaxBufferedDocs(_TestUtil.nextInt(random(), 50, 1000)));
     
     Document doc = new Document();
-    Field field = newStringField("field", "", Field.Store.NO);
+    Field field = newMatchOnlyField("field", "", Field.Store.NO);
     doc.add(field);
 
     // we generate aweful prefixes: good for testing.
Index: lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader.java	(working copy)
@@ -33,7 +33,7 @@
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.FieldType;
 import org.apache.lucene.document.StoredField;
-import org.apache.lucene.document.StringField;
+import org.apache.lucene.document.MatchOnlyField;
 import org.apache.lucene.document.TextField;
 import org.apache.lucene.index.IndexWriterConfig.OpenMode;
 import org.apache.lucene.search.DocIdSetIterator;
@@ -177,7 +177,7 @@
       FieldType customType3 = new FieldType();
       customType3.setStored(true);
       
-      doc.add(new StringField("keyword", "test1", Field.Store.YES));
+      doc.add(new MatchOnlyField("keyword", "test1", Field.Store.YES));
       doc.add(new TextField("text", "test1", Field.Store.YES));
       doc.add(new Field("unindexed", "test1", customType3));
       doc.add(new TextField("unstored","test1", Field.Store.NO));
@@ -203,7 +203,7 @@
       int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();
       for (int i = 0; i < 5*mergeFactor; i++) {
         doc = new Document();
-        doc.add(new StringField("keyword", "test1", Field.Store.YES));
+        doc.add(new MatchOnlyField("keyword", "test1", Field.Store.YES));
         doc.add(new TextField("text", "test1", Field.Store.YES));
         doc.add(new Field("unindexed", "test1", customType3));
         doc.add(new TextField("unstored","test1", Field.Store.NO));
@@ -212,7 +212,7 @@
       // new fields are in some different segments (we hope)
       for (int i = 0; i < 5*mergeFactor; i++) {
         doc = new Document();
-        doc.add(new StringField("keyword2", "test1", Field.Store.YES));
+        doc.add(new MatchOnlyField("keyword2", "test1", Field.Store.YES));
         doc.add(new TextField("text2", "test1", Field.Store.YES));
         doc.add(new Field("unindexed2", "test1", customType3));
         doc.add(new TextField("unstored2","test1", Field.Store.NO));
@@ -494,7 +494,7 @@
       
       FieldType customType3 = new FieldType();
       customType3.setStored(true);
-      doc.add(newStringField("keyword", "test1", Field.Store.YES));
+      doc.add(newMatchOnlyField("keyword", "test1", Field.Store.YES));
       doc.add(newTextField("text", "test1", Field.Store.YES));
       doc.add(newField("unindexed", "test1", customType3));
       doc.add(new TextField("unstored","test1", Field.Store.NO));
@@ -507,7 +507,7 @@
     
     FieldType customType3 = new FieldType();
     customType3.setStored(true);
-    doc.add(newStringField("keyword2", "test1", Field.Store.YES));
+    doc.add(newMatchOnlyField("keyword2", "test1", Field.Store.YES));
     doc.add(newTextField("text2", "test1", Field.Store.YES));
     doc.add(newField("unindexed2", "test1", customType3));
     doc.add(new TextField("unstored2","test1", Field.Store.NO));
@@ -766,7 +766,7 @@
             setMergePolicy(newLogMergePolicy(10))
     );
     Document doc = new Document();
-    doc.add(newStringField("number", "17", Field.Store.NO));
+    doc.add(newMatchOnlyField("number", "17", Field.Store.NO));
     writer.addDocument(doc);
     writer.commit();
   
@@ -1074,8 +1074,8 @@
     Directory dir = newDirectory();
     RandomIndexWriter writer = new RandomIndexWriter(random(), dir);
     Document doc = new Document();
-    doc.add(newStringField("field1", "foobar", Field.Store.YES));
-    doc.add(newStringField("field2", "foobaz", Field.Store.YES));
+    doc.add(newMatchOnlyField("field1", "foobar", Field.Store.YES));
+    doc.add(newMatchOnlyField("field2", "foobaz", Field.Store.YES));
     writer.addDocument(doc);
     DirectoryReader r = writer.getReader();
     writer.close();
Index: lucene/core/src/test/org/apache/lucene/index/TestTransactions.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestTransactions.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/index/TestTransactions.java	(working copy)
@@ -23,7 +23,7 @@
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.FieldType;
-import org.apache.lucene.document.StringField;
+import org.apache.lucene.document.MatchOnlyField;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.MockDirectoryWrapper;
 import org.apache.lucene.store.RAMDirectory;
@@ -148,7 +148,7 @@
 
     public void update(IndexWriter writer) throws IOException {
       // Add 10 docs:
-      FieldType customType = new FieldType(StringField.TYPE_NOT_STORED);
+      FieldType customType = new FieldType(MatchOnlyField.TYPE_NOT_STORED);
       customType.setStoreTermVectors(true);
       for(int j=0; j<10; j++) {
         Document d = new Document();
Index: lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler.java	(working copy)
@@ -74,7 +74,7 @@
 
     IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(2));
     Document doc = new Document();
-    Field idField = newStringField("id", "", Field.Store.YES);
+    Field idField = newMatchOnlyField("id", "", Field.Store.YES);
     doc.add(idField);
     int extraCount = 0;
 
@@ -133,7 +133,7 @@
         .setMergePolicy(mp));
 
     Document doc = new Document();
-    Field idField = newStringField("id", "", Field.Store.YES);
+    Field idField = newMatchOnlyField("id", "", Field.Store.YES);
     doc.add(idField);
     for(int i=0;i<10;i++) {
       if (VERBOSE) {
@@ -198,7 +198,7 @@
   public void testNoWaitClose() throws IOException {
     Directory directory = newDirectory();
     Document doc = new Document();
-    Field idField = newStringField("id", "", Field.Store.YES);
+    Field idField = newMatchOnlyField("id", "", Field.Store.YES);
     doc.add(idField);
 
     IndexWriter writer = new IndexWriter(
Index: lucene/core/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker.java	(working copy)
@@ -57,12 +57,12 @@
     float theFloat = Float.MAX_VALUE;
     for (int i = 0; i < NUM_DOCS; i++){
       Document doc = new Document();
-      doc.add(newStringField("theLong", String.valueOf(theLong--), Field.Store.NO));
-      doc.add(newStringField("theDouble", String.valueOf(theDouble--), Field.Store.NO));
-      doc.add(newStringField("theByte", String.valueOf(theByte--), Field.Store.NO));
-      doc.add(newStringField("theShort", String.valueOf(theShort--), Field.Store.NO));
-      doc.add(newStringField("theInt", String.valueOf(theInt--), Field.Store.NO));
-      doc.add(newStringField("theFloat", String.valueOf(theFloat--), Field.Store.NO));
+      doc.add(newMatchOnlyField("theLong", String.valueOf(theLong--), Field.Store.NO));
+      doc.add(newMatchOnlyField("theDouble", String.valueOf(theDouble--), Field.Store.NO));
+      doc.add(newMatchOnlyField("theByte", String.valueOf(theByte--), Field.Store.NO));
+      doc.add(newMatchOnlyField("theShort", String.valueOf(theShort--), Field.Store.NO));
+      doc.add(newMatchOnlyField("theInt", String.valueOf(theInt--), Field.Store.NO));
+      doc.add(newMatchOnlyField("theFloat", String.valueOf(theFloat--), Field.Store.NO));
       if (0 == i % 3) {
         wA.addDocument(doc);
       } else {
Index: lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.java	(working copy)
@@ -1617,7 +1617,7 @@
       RandomIndexWriter w = new RandomIndexWriter(random(), dir,
                                                   newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(IndexWriterConfig.OpenMode.CREATE));
       Document doc = new Document();
-      Field idField = newStringField("id", "", Field.Store.NO);
+      Field idField = newMatchOnlyField("id", "", Field.Store.NO);
       doc.add(idField);
       
       final int NUM_IDS = atLeast(200);
@@ -1752,7 +1752,7 @@
     RandomIndexWriter w = new RandomIndexWriter(random(), dir,
                                                 newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(IndexWriterConfig.OpenMode.CREATE));
     Document doc = new Document();
-    Field f = newStringField("field", "", Field.Store.NO);
+    Field f = newMatchOnlyField("field", "", Field.Store.NO);
     doc.add(f);
       
     final int NUM_TERMS = (int) (1000*RANDOM_MULTIPLIER * (1+random().nextDouble()));
Index: lucene/core/src/test/org/apache/lucene/document/TestField.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/document/TestField.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/document/TestField.java	(working copy)
@@ -317,8 +317,8 @@
   
   public void testStringField() throws Exception {
     Field fields[] = new Field[] {
-        new StringField("foo", "bar", Field.Store.NO),
-        new StringField("foo", "bar", Field.Store.YES)
+        new MatchOnlyField("foo", "bar", Field.Store.NO),
+        new MatchOnlyField("foo", "bar", Field.Store.YES)
     };
 
     for (Field field : fields) {
Index: lucene/core/src/test/org/apache/lucene/document/TestDocument.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/document/TestDocument.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/document/TestDocument.java	(working copy)
@@ -132,7 +132,7 @@
     FieldType ft = new FieldType();
     ft.setStored(true);
     new Field("name", "value", ft); // okay
-    new StringField("name", "value", Field.Store.NO); // okay
+    new MatchOnlyField("name", "value", Field.Store.NO); // okay
     try {
       new Field("name", "value", new FieldType());
       fail();
@@ -163,7 +163,7 @@
     assertEquals(8, doc.getFields().size());
     List<Field> fields = doc.getFields();
     try {
-      fields.add( new StringField("name", "value", Field.Store.NO) );
+      fields.add( new MatchOnlyField("name", "value", Field.Store.NO) );
       fail("Document.getFields() should return immutable List");
     }
     catch (UnsupportedOperationException e) {
@@ -232,8 +232,8 @@
     Document doc = new Document();
     FieldType stored = new FieldType();
     stored.setStored(true);
-    doc.add(new StringField("keyword", "test1", Field.Store.YES));
-    doc.add(new StringField("keyword", "test2", Field.Store.YES));
+    doc.add(new MatchOnlyField("keyword", "test1", Field.Store.YES));
+    doc.add(new MatchOnlyField("keyword", "test2", Field.Store.YES));
     doc.add(new TextField("text", "test1", Field.Store.YES));
     doc.add(new TextField("text", "test2", Field.Store.YES));
     doc.add(new Field("unindexed", "test1", stored));
@@ -279,10 +279,10 @@
   
   public void testFieldSetValue() throws Exception {
     
-    Field field = new StringField("id", "id1", Field.Store.YES);
+    Field field = new MatchOnlyField("id", "id1", Field.Store.YES);
     Document doc = new Document();
     doc.add(field);
-    doc.add(new StringField("keyword", "test", Field.Store.YES));
+    doc.add(new MatchOnlyField("keyword", "test", Field.Store.YES));
     
     Directory dir = newDirectory();
     RandomIndexWriter writer = new RandomIndexWriter(random(), dir);
@@ -318,7 +318,7 @@
   // LUCENE-3616
   public void testInvalidFields() {
     try {
-      new Field("foo", new EmptyTokenizer(new StringReader("")), StringField.TYPE_STORED);
+      new Field("foo", new EmptyTokenizer(new StringReader("")), MatchOnlyField.TYPE_STORED);
       fail("did not hit expected exc");
     } catch (IllegalArgumentException iae) {
       // expected
Index: lucene/core/src/test/org/apache/lucene/TestMergeSchedulerExternal.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/TestMergeSchedulerExternal.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/TestMergeSchedulerExternal.java	(working copy)
@@ -89,7 +89,7 @@
     dir.failOn(new FailOnlyOnMerge());
 
     Document doc = new Document();
-    Field idField = newStringField("id", "", Field.Store.YES);
+    Field idField = newMatchOnlyField("id", "", Field.Store.YES);
     doc.add(idField);
     
     IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(
Index: lucene/core/src/test/org/apache/lucene/TestExternalCodecs.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/TestExternalCodecs.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/TestExternalCodecs.java	(working copy)
@@ -74,7 +74,7 @@
     Field field2 = newTextField("field2", "this field uses the pulsing codec as the test", Field.Store.NO);
     doc.add(field2);
     
-    Field idField = newStringField("id", "", Field.Store.NO);
+    Field idField = newMatchOnlyField("id", "", Field.Store.NO);
 
     doc.add(idField);
     for(int i=0;i<NUM_DOCS;i++) {
Index: lucene/core/src/test/org/apache/lucene/TestSearch.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/TestSearch.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/TestSearch.java	(working copy)
@@ -87,7 +87,7 @@
       for (int j = 0; j < docs.length; j++) {
         Document d = new Document();
         d.add(newTextField("contents", docs[j], Field.Store.YES));
-        d.add(newStringField("id", ""+j, Field.Store.NO));
+        d.add(newMatchOnlyField("id", ""+j, Field.Store.NO));
         writer.addDocument(d);
       }
       writer.close();
Index: lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory.java	(working copy)
@@ -58,7 +58,7 @@
     Document doc = null;
     for (int i = 0; i < docsToAdd; i++) {
       doc = new Document();
-      doc.add(newStringField("content", English.intToEnglish(i).trim(), Field.Store.YES));
+      doc.add(newMatchOnlyField("content", English.intToEnglish(i).trim(), Field.Store.YES));
       writer.addDocument(doc);
     }
     assertEquals(docsToAdd, writer.maxDoc());
@@ -117,7 +117,7 @@
         public void run() {
           for (int j=1; j<docsPerThread; j++) {
             Document doc = new Document();
-            doc.add(newStringField("sizeContent", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES));
+            doc.add(newMatchOnlyField("sizeContent", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES));
             try {
               writer.addDocument(doc);
             } catch (IOException e) {
Index: lucene/core/src/test/org/apache/lucene/store/TestMultiMMap.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/store/TestMultiMMap.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/store/TestMultiMMap.java	(working copy)
@@ -311,8 +311,8 @@
     MockDirectoryWrapper dir = new MockDirectoryWrapper(random, mmapDir);
     RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));
     Document doc = new Document();
-    Field docid = newStringField("docid", "0", Field.Store.YES);
-    Field junk = newStringField("junk", "", Field.Store.YES);
+    Field docid = newMatchOnlyField("docid", "0", Field.Store.YES);
+    Field junk = newMatchOnlyField("junk", "", Field.Store.YES);
     doc.add(docid);
     doc.add(junk);
     
Index: lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat.java	(working copy)
@@ -86,7 +86,7 @@
     for (int i = 0; i < numDocs; i++) {
       Document doc = new Document();
       doc.add(newTextField("content", "ccc", Field.Store.NO));
-      doc.add(newStringField("id", "" + i, Field.Store.YES));
+      doc.add(newMatchOnlyField("id", "" + i, Field.Store.YES));
       writer.addDocument(doc);
     }
   }
Index: lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestAllFilesHaveCodecHeader.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestAllFilesHaveCodecHeader.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestAllFilesHaveCodecHeader.java	(working copy)
@@ -46,7 +46,7 @@
     RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);
     Document doc = new Document();
     // these fields should sometimes get term vectors, etc
-    Field idField = newStringField("id", "", Field.Store.NO);
+    Field idField = newMatchOnlyField("id", "", Field.Store.NO);
     Field bodyField = newTextField("body", "", Field.Store.NO);
     doc.add(idField);
     doc.add(bodyField);
Index: lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestLucene40PostingsReader.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestLucene40PostingsReader.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestLucene40PostingsReader.java	(working copy)
@@ -25,7 +25,7 @@
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.FieldType;
-import org.apache.lucene.document.StringField;
+import org.apache.lucene.document.MatchOnlyField;
 import org.apache.lucene.document.TextField;
 import org.apache.lucene.index.FieldInfo.IndexOptions;
 import org.apache.lucene.index.IndexWriterConfig;
@@ -55,7 +55,7 @@
     Document doc = new Document();
     
     // id field
-    FieldType idType = new FieldType(StringField.TYPE_NOT_STORED);
+    FieldType idType = new FieldType(MatchOnlyField.TYPE_NOT_STORED);
     idType.setStoreTermVectors(true);
     Field idField = new Field("id", "", idType);
     doc.add(idField);
Index: lucene/core/src/test/org/apache/lucene/search/TestPrefixInBooleanQuery.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestPrefixInBooleanQuery.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/search/TestPrefixInBooleanQuery.java	(working copy)
@@ -50,7 +50,7 @@
     RandomIndexWriter writer = new RandomIndexWriter(random(), directory);
 
     Document doc = new Document();
-    Field field = newStringField(FIELD, "meaninglessnames", Field.Store.NO);
+    Field field = newMatchOnlyField(FIELD, "meaninglessnames", Field.Store.NO);
     doc.add(field);
     
     for (int i = 0; i < 5137; ++i) {
Index: lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter.java	(working copy)
@@ -178,7 +178,7 @@
 
     // add a doc, refresh the reader, and check that it's there
     Document doc = new Document();
-    doc.add(newStringField("id", "1", Field.Store.YES));
+    doc.add(newMatchOnlyField("id", "1", Field.Store.YES));
     writer.addDocument(doc);
 
     reader = refreshReader(reader);
Index: lucene/core/src/test/org/apache/lucene/search/TestPrefixFilter.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestPrefixFilter.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/search/TestPrefixFilter.java	(working copy)
@@ -40,7 +40,7 @@
     RandomIndexWriter writer = new RandomIndexWriter(random(), directory);
     for (int i = 0; i < categories.length; i++) {
       Document doc = new Document();
-      doc.add(newStringField("category", categories[i], Field.Store.YES));
+      doc.add(newMatchOnlyField("category", categories[i], Field.Store.YES));
       writer.addDocument(doc);
     }
     IndexReader reader = writer.getReader();
Index: lucene/core/src/test/org/apache/lucene/search/TestTermRangeQuery.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestTermRangeQuery.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/search/TestTermRangeQuery.java	(working copy)
@@ -261,7 +261,7 @@
   private void insertDoc(IndexWriter writer, String content) throws IOException {
     Document doc = new Document();
 
-    doc.add(newStringField("id", "id" + docCount, Field.Store.YES));
+    doc.add(newMatchOnlyField("id", "id" + docCount, Field.Store.YES));
     doc.add(newTextField("content", content, Field.Store.NO));
 
     writer.addDocument(doc);
Index: lucene/core/src/test/org/apache/lucene/search/TestSearchAfter.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestSearchAfter.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/search/TestSearchAfter.java	(working copy)
@@ -62,15 +62,15 @@
       Document document = new Document();
       document.add(newTextField("english", English.intToEnglish(i), Field.Store.NO));
       document.add(newTextField("oddeven", (i % 2 == 0) ? "even" : "odd", Field.Store.NO));
-      document.add(newStringField("byte", "" + ((byte) random().nextInt()), Field.Store.NO));
-      document.add(newStringField("short", "" + ((short) random().nextInt()), Field.Store.NO));
+      document.add(newMatchOnlyField("byte", "" + ((byte) random().nextInt()), Field.Store.NO));
+      document.add(newMatchOnlyField("short", "" + ((short) random().nextInt()), Field.Store.NO));
       document.add(new IntField("int", random().nextInt(), Field.Store.NO));
       document.add(new LongField("long", random().nextLong(), Field.Store.NO));
 
       document.add(new FloatField("float", random().nextFloat(), Field.Store.NO));
       document.add(new DoubleField("double", random().nextDouble(), Field.Store.NO));
-      document.add(newStringField("bytes", _TestUtil.randomRealisticUnicodeString(random()), Field.Store.NO));
-      document.add(newStringField("bytesval", _TestUtil.randomRealisticUnicodeString(random()), Field.Store.NO));
+      document.add(newMatchOnlyField("bytes", _TestUtil.randomRealisticUnicodeString(random()), Field.Store.NO));
+      document.add(newMatchOnlyField("bytesval", _TestUtil.randomRealisticUnicodeString(random()), Field.Store.NO));
       document.add(new DoubleField("double", random().nextDouble(), Field.Store.NO));
 
       document.add(new IntDocValuesField("intdocvalues", random().nextInt()));
Index: lucene/core/src/test/org/apache/lucene/search/TestSort.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestSort.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/search/TestSort.java	(working copy)
@@ -39,7 +39,7 @@
 import org.apache.lucene.document.PackedLongDocValuesField;
 import org.apache.lucene.document.SortedBytesDocValuesField;
 import org.apache.lucene.document.StraightBytesDocValuesField;
-import org.apache.lucene.document.StringField;
+import org.apache.lucene.document.MatchOnlyField;
 import org.apache.lucene.document.TextField;
 import org.apache.lucene.index.AtomicReaderContext;
 import org.apache.lucene.index.DirectoryReader;
@@ -155,15 +155,15 @@
         doc.add (new Field ("tracer", data[i][0], ft1));
         doc.add (new TextField ("contents", data[i][1], Field.Store.NO));
         if (data[i][2] != null) {
-          doc.add(new StringField ("int", data[i][2], Field.Store.NO));
+          doc.add(new MatchOnlyField ("int", data[i][2], Field.Store.NO));
           doc.add(new PackedLongDocValuesField("int", Integer.parseInt(data[i][2])));
         }
         if (data[i][3] != null) {
-          doc.add(new StringField ("float", data[i][3], Field.Store.NO));
+          doc.add(new MatchOnlyField ("float", data[i][3], Field.Store.NO));
           doc.add(new FloatDocValuesField("float", Float.parseFloat(data[i][3])));
         }
         if (data[i][4] != null) {
-          doc.add(new StringField ("string", data[i][4], Field.Store.NO));
+          doc.add(new MatchOnlyField ("string", data[i][4], Field.Store.NO));
           switch(stringDVType) {
             case BYTES_FIXED_SORTED:
               doc.add(new SortedBytesDocValuesField("string", new BytesRef(data[i][4]), true));
@@ -187,16 +187,16 @@
               throw new IllegalStateException("unknown type " + stringDVType);
           }
         }
-        if (data[i][5] != null) doc.add (new StringField ("custom",   data[i][5], Field.Store.NO));
-        if (data[i][6] != null) doc.add (new StringField ("i18n",     data[i][6], Field.Store.NO));
-        if (data[i][7] != null) doc.add (new StringField ("long",     data[i][7], Field.Store.NO));
+        if (data[i][5] != null) doc.add (new MatchOnlyField ("custom",   data[i][5], Field.Store.NO));
+        if (data[i][6] != null) doc.add (new MatchOnlyField ("i18n",     data[i][6], Field.Store.NO));
+        if (data[i][7] != null) doc.add (new MatchOnlyField ("long",     data[i][7], Field.Store.NO));
         if (data[i][8] != null) {
-          doc.add(new StringField ("double", data[i][8], Field.Store.NO));
+          doc.add(new MatchOnlyField ("double", data[i][8], Field.Store.NO));
           doc.add(new DoubleDocValuesField("double", Double.parseDouble(data[i][8])));
         }
-        if (data[i][9] != null) doc.add (new StringField ("short",     data[i][9], Field.Store.NO));
-        if (data[i][10] != null) doc.add (new StringField ("byte",     data[i][10], Field.Store.NO));
-        if (data[i][11] != null) doc.add (new StringField ("parser",     data[i][11], Field.Store.NO));
+        if (data[i][9] != null) doc.add (new MatchOnlyField ("short",     data[i][9], Field.Store.NO));
+        if (data[i][10] != null) doc.add (new MatchOnlyField ("byte",     data[i][10], Field.Store.NO));
+        if (data[i][11] != null) doc.add (new MatchOnlyField ("parser",     data[i][11], Field.Store.NO));
 
         for(IndexableField f : doc.getFields()) {
           if (f.fieldType().indexed() && !f.fieldType().omitNorms()) {
@@ -235,10 +235,10 @@
       String num = getRandomCharString(getRandomNumber(2, 8), 48, 52);
       doc.add (new Field ("tracer", num, onlyStored));
       //doc.add (new Field ("contents", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));
-      doc.add(new StringField("string", num, Field.Store.NO));
+      doc.add(new MatchOnlyField("string", num, Field.Store.NO));
       doc.add(new SortedBytesDocValuesField("string", new BytesRef(num)));
       String num2 = getRandomCharString(getRandomNumber(1, 4), 48, 50);
-      doc.add(new StringField ("string2", num2, Field.Store.NO));
+      doc.add(new MatchOnlyField ("string2", num2, Field.Store.NO));
       doc.add(new SortedBytesDocValuesField("string2", new BytesRef(num2)));
       doc.add (new Field ("tracer2", num2, onlyStored));
       for(IndexableField f2 : doc.getFields()) {
@@ -250,10 +250,10 @@
       String numFixed = getRandomCharString(fixedLen, 48, 52);
       doc.add (new Field ("fixed_tracer", numFixed, onlyStored));
       //doc.add (new Field ("contents", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));
-      doc.add(new StringField("string_fixed", numFixed, Field.Store.NO));
+      doc.add(new MatchOnlyField("string_fixed", numFixed, Field.Store.NO));
       doc.add(new SortedBytesDocValuesField("string_fixed", new BytesRef(numFixed), true));
       String num2Fixed = getRandomCharString(fixedLen2, 48, 52);
-      doc.add(new StringField ("string2_fixed", num2Fixed, Field.Store.NO));
+      doc.add(new MatchOnlyField ("string2_fixed", num2Fixed, Field.Store.NO));
       doc.add(new SortedBytesDocValuesField("string2_fixed", new BytesRef(num2Fixed), true));
       doc.add (new Field ("tracer2_fixed", num2Fixed, onlyStored));
 
@@ -1246,12 +1246,12 @@
     IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(
                         TEST_VERSION_CURRENT, new MockAnalyzer(random())));
     Document doc = new Document();
-    doc.add(newStringField("f", "", Field.Store.NO));
-    doc.add(newStringField("t", "1", Field.Store.NO));
+    doc.add(newMatchOnlyField("f", "", Field.Store.NO));
+    doc.add(newMatchOnlyField("t", "1", Field.Store.NO));
     w.addDocument(doc);
     w.commit();
     doc = new Document();
-    doc.add(newStringField("t", "1", Field.Store.NO));
+    doc.add(newMatchOnlyField("t", "1", Field.Store.NO));
     w.addDocument(doc);
 
     IndexReader r = DirectoryReader.open(w, true);
@@ -1272,8 +1272,8 @@
         TEST_VERSION_CURRENT, new MockAnalyzer(random())));
     for (int i=0; i<5; i++) {
         Document doc = new Document();
-        doc.add (new StringField ("string", "a"+i, Field.Store.NO));
-        doc.add (new StringField ("string", "b"+i, Field.Store.NO));
+        doc.add (new MatchOnlyField ("string", "a"+i, Field.Store.NO));
+        doc.add (new MatchOnlyField ("string", "b"+i, Field.Store.NO));
         writer.addDocument (doc);
     }
     writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases
@@ -1294,8 +1294,8 @@
     RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);
     for (int i=0; i<5; i++) {
       Document doc = new Document();
-      doc.add (new StringField ("string", "a"+i, Field.Store.NO));
-      doc.add (new StringField ("string", "b"+i, Field.Store.NO));
+      doc.add (new MatchOnlyField ("string", "a"+i, Field.Store.NO));
+      doc.add (new MatchOnlyField ("string", "b"+i, Field.Store.NO));
       writer.addDocument (doc);
     }
     IndexReader reader = writer.getReader();
@@ -1378,7 +1378,7 @@
       
       final Document doc = new Document();
       doc.add(new SortedBytesDocValuesField("stringdv", br));
-      doc.add(newStringField("string", s, Field.Store.NO));
+      doc.add(newMatchOnlyField("string", s, Field.Store.NO));
       doc.add(new PackedLongDocValuesField("id", numDocs));
       docValues.add(br);
       writer.addDocument(doc);
@@ -1467,7 +1467,7 @@
     for(int seg=0;seg<2;seg++) {
       for(int docIDX=0;docIDX<10;docIDX++) {
         Document doc = new Document();
-        doc.add(newStringField("id", ""+docIDX, Field.Store.YES));
+        doc.add(newMatchOnlyField("id", ""+docIDX, Field.Store.YES));
         StringBuilder sb = new StringBuilder();
         for(int i=0;i<id;i++) {
           sb.append(' ');
Index: lucene/core/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery.java	(working copy)
@@ -51,7 +51,7 @@
       Document doc = new Document();
       for (int m=0, c=random().nextInt(10); m<=c; m++) {
         int value = random().nextInt(Integer.MAX_VALUE);
-        doc.add(newStringField("asc", format.format(value), Field.Store.NO));
+        doc.add(newMatchOnlyField("asc", format.format(value), Field.Store.NO));
         doc.add(new IntField("trie", value, Field.Store.NO));
       }
       writer.addDocument(doc);
Index: lucene/core/src/test/org/apache/lucene/search/TestPrefixQuery.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestPrefixQuery.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/search/TestPrefixQuery.java	(working copy)
@@ -41,7 +41,7 @@
     RandomIndexWriter writer = new RandomIndexWriter(random(), directory);
     for (int i = 0; i < categories.length; i++) {
       Document doc = new Document();
-      doc.add(newStringField("category", categories[i], Field.Store.YES));
+      doc.add(newMatchOnlyField("category", categories[i], Field.Store.YES));
       writer.addDocument(doc);
     }
     IndexReader reader = writer.getReader();
Index: lucene/core/src/test/org/apache/lucene/search/TestFieldCacheTermsFilter.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestFieldCacheTermsFilter.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/search/TestFieldCacheTermsFilter.java	(working copy)
@@ -41,7 +41,7 @@
     for (int i = 0; i < 100; i++) {
       Document doc = new Document();
       int term = i * 10; //terms are units of 10;
-      doc.add(newStringField(fieldName, "" + term, Field.Store.YES));
+      doc.add(newMatchOnlyField(fieldName, "" + term, Field.Store.YES));
       w.addDocument(doc);
     }
     IndexReader reader = w.getReader();
Index: lucene/core/src/test/org/apache/lucene/search/TestScorerPerf.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestScorerPerf.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/search/TestScorerPerf.java	(working copy)
@@ -70,7 +70,7 @@
       Document d = new Document();
       for (int j=0; j<nTerms; j++) {
         if (random().nextInt(freq[j]) == 0) {
-          d.add(newStringField("f", terms[j].text(), Field.Store.NO));
+          d.add(newMatchOnlyField("f", terms[j].text(), Field.Store.NO));
           //System.out.println(d);
         }
       }
Index: lucene/core/src/test/org/apache/lucene/search/TestDateFilter.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestDateFilter.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/search/TestDateFilter.java	(working copy)
@@ -47,7 +47,7 @@
     
     Document doc = new Document();
     // add time that is in the past
-    doc.add(newStringField("datefield", DateTools.timeToString(now - 1000, DateTools.Resolution.MILLISECOND), Field.Store.YES));
+    doc.add(newMatchOnlyField("datefield", DateTools.timeToString(now - 1000, DateTools.Resolution.MILLISECOND), Field.Store.YES));
     doc.add(newTextField("body", "Today is a very sunny day in New York City", Field.Store.YES));
     writer.addDocument(doc);
     
@@ -110,7 +110,7 @@
     
     Document doc = new Document();
     // add time that is in the future
-    doc.add(newStringField("datefield", DateTools.timeToString(now + 888888, DateTools.Resolution.MILLISECOND), Field.Store.YES));
+    doc.add(newMatchOnlyField("datefield", DateTools.timeToString(now + 888888, DateTools.Resolution.MILLISECOND), Field.Store.YES));
     doc.add(newTextField("body", "Today is a very sunny day in New York City", Field.Store.YES));
     writer.addDocument(doc);
     
Index: lucene/core/src/test/org/apache/lucene/search/TestPrefixRandom.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestPrefixRandom.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/search/TestPrefixRandom.java	(working copy)
@@ -54,7 +54,7 @@
         .setMaxBufferedDocs(_TestUtil.nextInt(random(), 50, 1000)));
     
     Document doc = new Document();
-    Field field = newStringField("field", "", Field.Store.NO);
+    Field field = newMatchOnlyField("field", "", Field.Store.NO);
     doc.add(field);
 
     int num = atLeast(1000);
Index: lucene/core/src/test/org/apache/lucene/search/TestCustomSearcherSort.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestCustomSearcherSort.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/search/TestCustomSearcherSort.java	(working copy)
@@ -58,13 +58,13 @@
       Document doc = new Document();
       if ((i % 5) != 0) { // some documents must not have an entry in the first
                           // sort field
-        doc.add(newStringField("publicationDate_", random.getLuceneDate(), Field.Store.YES));
+        doc.add(newMatchOnlyField("publicationDate_", random.getLuceneDate(), Field.Store.YES));
       }
       if ((i % 7) == 0) { // some documents to match the query (see below)
         doc.add(newTextField("content", "test", Field.Store.YES));
       }
       // every document has a defined 'mandant' field
-      doc.add(newStringField("mandant", Integer.toString(i % 3), Field.Store.YES));
+      doc.add(newMatchOnlyField("mandant", Integer.toString(i % 3), Field.Store.YES));
       writer.addDocument(doc);
     }
     reader = writer.getReader();
Index: lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery.java	(working copy)
@@ -24,7 +24,7 @@
 import org.apache.lucene.analysis.Token;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
-import org.apache.lucene.document.StringField;
+import org.apache.lucene.document.MatchOnlyField;
 import org.apache.lucene.document.TextField;
 import org.apache.lucene.index.DirectoryReader;
 import org.apache.lucene.index.IndexReader;
@@ -319,7 +319,7 @@
       throws IOException {
     Document doc = new Document();
     doc.add(newTextField("body", s, Field.Store.YES));
-    doc.add(newStringField("type", type, Field.Store.NO));
+    doc.add(newMatchOnlyField("type", type, Field.Store.NO));
     writer.addDocument(doc);
   }
   
Index: lucene/core/src/test/org/apache/lucene/search/BaseTestRangeFilter.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/BaseTestRangeFilter.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/search/BaseTestRangeFilter.java	(working copy)
@@ -114,9 +114,9 @@
     /* build an index */
     
     Document doc = new Document();
-    Field idField = newStringField(random, "id", "", Field.Store.YES);
-    Field randField = newStringField(random, "rand", "", Field.Store.YES);
-    Field bodyField = newStringField(random, "body", "", Field.Store.NO);
+    Field idField = newMatchOnlyField(random, "id", "", Field.Store.YES);
+    Field randField = newMatchOnlyField(random, "rand", "", Field.Store.YES);
+    Field bodyField = newMatchOnlyField(random, "body", "", Field.Store.NO);
     doc.add(idField);
     doc.add(randField);
     doc.add(bodyField);
Index: lucene/core/src/test/org/apache/lucene/search/TestRegexpRandom2.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestRegexpRandom2.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/search/TestRegexpRandom2.java	(working copy)
@@ -64,7 +64,7 @@
         newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))
         .setMaxBufferedDocs(_TestUtil.nextInt(random(), 50, 1000)));
     Document doc = new Document();
-    Field field = newStringField(fieldName, "", Field.Store.NO);
+    Field field = newMatchOnlyField(fieldName, "", Field.Store.NO);
     doc.add(field);
     List<String> terms = new ArrayList<String>();
     int num = atLeast(200);
Index: lucene/core/src/test/org/apache/lucene/search/TestDateSort.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestDateSort.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/search/TestDateSort.java	(working copy)
@@ -108,7 +108,7 @@
 
     // Add the date/time field.
     String dateTimeString = DateTools.timeToString(time, DateTools.Resolution.SECOND);
-    Field dateTimeField = newStringField(DATE_TIME_FIELD, dateTimeString, Field.Store.YES);
+    Field dateTimeField = newMatchOnlyField(DATE_TIME_FIELD, dateTimeString, Field.Store.YES);
     document.add(dateTimeField);
 
     return document;
Index: lucene/core/src/test/org/apache/lucene/search/TestWildcardRandom.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestWildcardRandom.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/search/TestWildcardRandom.java	(working copy)
@@ -51,7 +51,7 @@
         .setMaxBufferedDocs(_TestUtil.nextInt(random(), 50, 1000)));
     
     Document doc = new Document();
-    Field field = newStringField("field", "", Field.Store.NO);
+    Field field = newMatchOnlyField("field", "", Field.Store.NO);
     doc.add(field);
     
     NumberFormat df = new DecimalFormat("000", new DecimalFormatSymbols(Locale.ROOT));
Index: lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter.java	(working copy)
@@ -529,8 +529,8 @@
 
     for (int d = -20; d <= 20; d++) {
       Document doc = new Document();
-      doc.add(newStringField("id", Integer.toString(d), Field.Store.NO));
-      doc.add(newStringField("body", "body", Field.Store.NO));
+      doc.add(newMatchOnlyField("id", Integer.toString(d), Field.Store.NO));
+      doc.add(newMatchOnlyField("body", "body", Field.Store.NO));
       writer.addDocument(doc);
     }
     
Index: lucene/core/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites.java	(working copy)
@@ -53,7 +53,7 @@
 
     for (int i = 0; i < 10; i++) {
       Document doc = new Document();
-      doc.add(newStringField("data", Integer.toString(i), Field.Store.NO));
+      doc.add(newMatchOnlyField("data", Integer.toString(i), Field.Store.NO));
       writer.addDocument(doc);
       ((i % 2 == 0) ? swriter1 : swriter2).addDocument(doc);
     }
Index: lucene/core/src/test/org/apache/lucene/search/TestDocIdSet.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestDocIdSet.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/search/TestDocIdSet.java	(working copy)
@@ -102,7 +102,7 @@
     Directory dir = newDirectory();
     RandomIndexWriter writer = new RandomIndexWriter(random(), dir);
     Document doc = new Document();
-    doc.add(newStringField("c", "val", Field.Store.NO));
+    doc.add(newMatchOnlyField("c", "val", Field.Store.NO));
     writer.addDocument(doc);
     IndexReader reader = writer.getReader();
     writer.close();
@@ -128,7 +128,7 @@
     Directory dir = newDirectory();
     RandomIndexWriter writer = new RandomIndexWriter(random(), dir);
     Document doc = new Document();
-    doc.add(newStringField("c", "val", Field.Store.NO));
+    doc.add(newMatchOnlyField("c", "val", Field.Store.NO));
     writer.addDocument(doc);
     IndexReader reader = writer.getReader();
     writer.close();
Index: lucene/core/src/test/org/apache/lucene/search/spans/TestSpansAdvanced.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/spans/TestSpansAdvanced.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/search/spans/TestSpansAdvanced.java	(working copy)
@@ -92,7 +92,7 @@
       final String text) throws IOException {
     
     final Document document = new Document();
-    document.add(newStringField(FIELD_ID, id, Field.Store.YES));
+    document.add(newMatchOnlyField(FIELD_ID, id, Field.Store.YES));
     document.add(newTextField(FIELD_TEXT, text, Field.Store.YES));
     writer.addDocument(document);
   }
Index: lucene/core/src/test/org/apache/lucene/search/spans/TestSpans.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/spans/TestSpans.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/search/spans/TestSpans.java	(working copy)
@@ -446,7 +446,7 @@
   // LUCENE-1404
   private void addDoc(IndexWriter writer, String id, String text) throws IOException {
     final Document doc = new Document();
-    doc.add( newStringField("id", id, Field.Store.YES) );
+    doc.add( newMatchOnlyField("id", id, Field.Store.YES) );
     doc.add( newTextField("text", text, Field.Store.YES) );
     writer.addDocument(doc);
   }
Index: lucene/core/src/test/org/apache/lucene/search/TestConjunctions.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestConjunctions.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/search/TestConjunctions.java	(working copy)
@@ -22,7 +22,7 @@
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.MockAnalyzer;
 import org.apache.lucene.document.Document;
-import org.apache.lucene.document.StringField;
+import org.apache.lucene.document.MatchOnlyField;
 import org.apache.lucene.document.TextField;
 import org.apache.lucene.document.Field.Store;
 import org.apache.lucene.index.AtomicReaderContext;
@@ -65,7 +65,7 @@
   
   static Document doc(String v1, String v2) {
     Document doc = new Document();
-    doc.add(new StringField(F1, v1, Store.YES));
+    doc.add(new MatchOnlyField(F1, v1, Store.YES));
     doc.add(new TextField(F2, v2, Store.YES));
     return doc;
   }
Index: lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter.java	(working copy)
@@ -98,9 +98,9 @@
       } else {
         v = "b";
       }
-      final Field f = newStringField("field", v, Field.Store.NO);
+      final Field f = newMatchOnlyField("field", v, Field.Store.NO);
       doc.add(f);
-      doc.add(newStringField("id", ""+i, Field.Store.YES));
+      doc.add(newMatchOnlyField("id", ""+i, Field.Store.YES));
       w.addDocument(doc);
     }
 
@@ -129,7 +129,7 @@
     RandomIndexWriter writer = new RandomIndexWriter(random(), dir);
     for (int i = 0; i < 1000; i++) {
       Document doc = new Document();
-      doc.add(newStringField("field", English.intToEnglish(i), Field.Store.NO));
+      doc.add(newMatchOnlyField("field", English.intToEnglish(i), Field.Store.NO));
       writer.addDocument(doc);
     }
     
Index: lucene/core/src/test/org/apache/lucene/search/TestTopDocsMerge.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestTopDocsMerge.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/search/TestTopDocsMerge.java	(working copy)
@@ -95,7 +95,7 @@
 
       for(int docIDX=0;docIDX<numDocs;docIDX++) {
         final Document doc = new Document();
-        doc.add(newStringField("string", _TestUtil.randomRealisticUnicodeString(random()), Field.Store.NO));
+        doc.add(newMatchOnlyField("string", _TestUtil.randomRealisticUnicodeString(random()), Field.Store.NO));
         doc.add(newTextField("text", content[random().nextInt(content.length)], Field.Store.NO));
         doc.add(new FloatField("float", random().nextFloat(), Field.Store.NO));
         final int intValue;
Index: lucene/core/src/test/org/apache/lucene/search/TestExplanations.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestExplanations.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/search/TestExplanations.java	(working copy)
@@ -72,7 +72,7 @@
     RandomIndexWriter writer= new RandomIndexWriter(random(), directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));
     for (int i = 0; i < docFields.length; i++) {
       Document doc = new Document();
-      doc.add(newStringField(KEY, ""+i, Field.Store.NO));
+      doc.add(newMatchOnlyField(KEY, ""+i, Field.Store.NO));
       Field f = newTextField(FIELD, docFields[i], Field.Store.NO);
       f.setBoost(i);
       doc.add(f);
Index: lucene/core/src/test/org/apache/lucene/search/TestFieldCache.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestFieldCache.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/search/TestFieldCache.java	(working copy)
@@ -68,14 +68,14 @@
     }
     for (int i = 0; i < NUM_DOCS; i++){
       Document doc = new Document();
-      doc.add(newStringField("theLong", String.valueOf(theLong--), Field.Store.NO));
-      doc.add(newStringField("theDouble", String.valueOf(theDouble--), Field.Store.NO));
-      doc.add(newStringField("theByte", String.valueOf(theByte--), Field.Store.NO));
-      doc.add(newStringField("theShort", String.valueOf(theShort--), Field.Store.NO));
-      doc.add(newStringField("theInt", String.valueOf(theInt--), Field.Store.NO));
-      doc.add(newStringField("theFloat", String.valueOf(theFloat--), Field.Store.NO));
+      doc.add(newMatchOnlyField("theLong", String.valueOf(theLong--), Field.Store.NO));
+      doc.add(newMatchOnlyField("theDouble", String.valueOf(theDouble--), Field.Store.NO));
+      doc.add(newMatchOnlyField("theByte", String.valueOf(theByte--), Field.Store.NO));
+      doc.add(newMatchOnlyField("theShort", String.valueOf(theShort--), Field.Store.NO));
+      doc.add(newMatchOnlyField("theInt", String.valueOf(theInt--), Field.Store.NO));
+      doc.add(newMatchOnlyField("theFloat", String.valueOf(theFloat--), Field.Store.NO));
       if (i%2 == 0) {
-        doc.add(newStringField("sparse", String.valueOf(i), Field.Store.NO));
+        doc.add(newMatchOnlyField("sparse", String.valueOf(i), Field.Store.NO));
       }
 
       if (i%2 == 0) {
@@ -85,7 +85,7 @@
       // sometimes skip the field:
       if (random().nextInt(40) != 17) {
         unicodeStrings[i] = generateString(i);
-        doc.add(newStringField("theRandomUnicodeString", unicodeStrings[i], Field.Store.YES));
+        doc.add(newMatchOnlyField("theRandomUnicodeString", unicodeStrings[i], Field.Store.YES));
       }
 
       // sometimes skip the field:
@@ -93,7 +93,7 @@
         for (int j = 0; j < NUM_ORDS; j++) {
           String newValue = generateString(i);
           multiValued[i][j] = new BytesRef(newValue);
-          doc.add(newStringField("theRandomUnicodeMultiValuedField", newValue, Field.Store.YES));
+          doc.add(newMatchOnlyField("theRandomUnicodeMultiValuedField", newValue, Field.Store.YES));
         }
         Arrays.sort(multiValued[i]);
       }
Index: lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery.java	(working copy)
@@ -90,7 +90,7 @@
       RandomIndexWriter writer = new RandomIndexWriter (random(), directory);
 
       Document doc = new Document();
-      doc.add(newStringField("field", "term", Field.Store.NO));
+      doc.add(newMatchOnlyField("field", "term", Field.Store.NO));
       writer.addDocument(doc);
 
       reader = writer.getReader();
@@ -134,10 +134,10 @@
     Directory d = newDirectory();
     RandomIndexWriter w = new RandomIndexWriter(random(), d);
     Document doc = new Document();
-    doc.add(newStringField("field", "a", Field.Store.NO));
+    doc.add(newMatchOnlyField("field", "a", Field.Store.NO));
     w.addDocument(doc);
     doc = new Document();
-    doc.add(newStringField("field", "b", Field.Store.NO));
+    doc.add(newMatchOnlyField("field", "b", Field.Store.NO));
     w.addDocument(doc);
     IndexReader r = w.getReader();
     w.close();
Index: lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch.java	(working copy)
@@ -61,8 +61,8 @@
 
         for (int i = 0; i < data.length; i++) {
             Document doc = new Document();
-            doc.add(newStringField("id", String.valueOf(i), Field.Store.YES));//Field.Keyword("id",String.valueOf(i)));
-            doc.add(newStringField("all", "all", Field.Store.YES));//Field.Keyword("all","all"));
+            doc.add(newMatchOnlyField("id", String.valueOf(i), Field.Store.YES));//Field.Keyword("id",String.valueOf(i)));
+            doc.add(newMatchOnlyField("all", "all", Field.Store.YES));//Field.Keyword("all","all"));
             if (null != data[i]) {
                 doc.add(newTextField("data", data[i], Field.Store.YES));//Field.Text("data",data[i]));
             }
Index: lucene/core/src/test/org/apache/lucene/search/TestFilteredSearch.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestFilteredSearch.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/search/TestFilteredSearch.java	(working copy)
@@ -65,7 +65,7 @@
     try {
       for (int i = 0; i < 60; i++) {//Simple docs
         Document doc = new Document();
-        doc.add(newStringField(FIELD, Integer.toString(i), Field.Store.YES));
+        doc.add(newMatchOnlyField(FIELD, Integer.toString(i), Field.Store.YES));
         writer.addDocument(doc);
       }
       if (fullMerge) {
Index: lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer.java	(revision 1383338)
+++ lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer.java	(working copy)
@@ -44,7 +44,7 @@
     RandomIndexWriter writer = new RandomIndexWriter(random(), directory);
     for (int i = 0; i < values.length; i++) {
       Document doc = new Document();
-      doc.add(newStringField(FIELD, values[i], Field.Store.YES));
+      doc.add(newMatchOnlyField(FIELD, values[i], Field.Store.YES));
       writer.addDocument(doc);
     }
     IndexReader ir = writer.getReader();
Index: lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowCollationMethods.java
===================================================================
--- lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowCollationMethods.java	(revision 1383338)
+++ lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowCollationMethods.java	(working copy)
@@ -56,7 +56,7 @@
     for (int i = 0; i < numDocs; i++) {
       Document doc = new Document();
       String value = _TestUtil.randomUnicodeString(random());
-      Field field = newStringField("field", value, Field.Store.YES);
+      Field field = newMatchOnlyField("field", value, Field.Store.YES);
       doc.add(field);
       iw.addDocument(doc);
     }
Index: lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest.java
===================================================================
--- lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest.java	(revision 1383338)
+++ lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest.java	(working copy)
@@ -75,7 +75,7 @@
 
   private void addDoc(RandomIndexWriter writer, String url, String text, String date) throws IOException {
     Document doc = new Document();
-    doc.add(newStringField(KEY_FIELD, url, Field.Store.YES));
+    doc.add(newMatchOnlyField(KEY_FIELD, url, Field.Store.YES));
     doc.add(newTextField("text", text, Field.Store.YES));
     doc.add(newTextField("date", date, Field.Store.YES));
     writer.addDocument(doc);
Index: lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java
===================================================================
--- lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java	(revision 1383338)
+++ lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java	(working copy)
@@ -39,16 +39,16 @@
   // One resume...
   private Document makeResume(String name, String country) {
     Document resume = new Document();
-    resume.add(newStringField("docType", "resume", Field.Store.NO));
-    resume.add(newStringField("name", name, Field.Store.YES));
-    resume.add(newStringField("country", country, Field.Store.NO));
+    resume.add(newMatchOnlyField("docType", "resume", Field.Store.NO));
+    resume.add(newMatchOnlyField("name", name, Field.Store.YES));
+    resume.add(newMatchOnlyField("country", country, Field.Store.NO));
     return resume;
   }
 
   // ... has multiple jobs
   private Document makeJob(String skill, int year) {
     Document job = new Document();
-    job.add(newStringField("skill", skill, Field.Store.YES));
+    job.add(newMatchOnlyField("skill", skill, Field.Store.YES));
     job.add(new IntField("year", year, Field.Store.NO));
     job.add(new StoredField("year", year));
     return job;
@@ -57,7 +57,7 @@
   // ... has multiple qualifications
   private Document makeQualification(String qualification, int year) {
     Document job = new Document();
-    job.add(newStringField("qualification", qualification, Field.Store.YES));
+    job.add(newMatchOnlyField("qualification", qualification, Field.Store.YES));
     job.add(new IntField("year", year, Field.Store.NO));
     return job;
   }
@@ -342,21 +342,21 @@
     for(int parentDocID=0;parentDocID<numParentDocs;parentDocID++) {
       Document parentDoc = new Document();
       Document parentJoinDoc = new Document();
-      Field id = newStringField("parentID", ""+parentDocID, Field.Store.YES);
+      Field id = newMatchOnlyField("parentID", ""+parentDocID, Field.Store.YES);
       parentDoc.add(id);
       parentJoinDoc.add(id);
-      parentJoinDoc.add(newStringField("isParent", "x", Field.Store.NO));
+      parentJoinDoc.add(newMatchOnlyField("isParent", "x", Field.Store.NO));
       for(int field=0;field<parentFields.length;field++) {
         if (random().nextDouble() < 0.9) {
-          Field f = newStringField("parent" + field, parentFields[field][random().nextInt(parentFields[field].length)], Field.Store.NO);
+          Field f = newMatchOnlyField("parent" + field, parentFields[field][random().nextInt(parentFields[field].length)], Field.Store.NO);
           parentDoc.add(f);
           parentJoinDoc.add(f);
         }
       }
 
       if (doDeletes) {
-        parentDoc.add(newStringField("blockID", ""+parentDocID, Field.Store.NO));
-        parentJoinDoc.add(newStringField("blockID", ""+parentDocID, Field.Store.NO));
+        parentDoc.add(newMatchOnlyField("blockID", ""+parentDocID, Field.Store.NO));
+        parentJoinDoc.add(newMatchOnlyField("blockID", ""+parentDocID, Field.Store.NO));
       }
 
       final List<Document> joinDocs = new ArrayList<Document>();
@@ -380,13 +380,13 @@
         Document joinChildDoc = new Document();
         joinDocs.add(joinChildDoc);
 
-        Field childID = newStringField("childID", ""+childDocID, Field.Store.YES);
+        Field childID = newMatchOnlyField("childID", ""+childDocID, Field.Store.YES);
         childDoc.add(childID);
         joinChildDoc.add(childID);
 
         for(int childFieldID=0;childFieldID<childFields.length;childFieldID++) {
           if (random().nextDouble() < 0.9) {
-            Field f = newStringField("child" + childFieldID, childFields[childFieldID][random().nextInt(childFields[childFieldID].length)], Field.Store.NO);
+            Field f = newMatchOnlyField("child" + childFieldID, childFields[childFieldID][random().nextInt(childFields[childFieldID].length)], Field.Store.NO);
             childDoc.add(f);
             joinChildDoc.add(f);
           }
@@ -405,7 +405,7 @@
         }
 
         if (doDeletes) {
-          joinChildDoc.add(newStringField("blockID", ""+parentDocID, Field.Store.NO));
+          joinChildDoc.add(newMatchOnlyField("blockID", ""+parentDocID, Field.Store.NO));
         }
 
         w.addDocument(childDoc);
@@ -948,9 +948,9 @@
     Directory dir = newDirectory();
     RandomIndexWriter w = new RandomIndexWriter(random(), dir);
     Document childDoc = new Document();
-    childDoc.add(newStringField("child", "1", Field.Store.NO));
+    childDoc.add(newMatchOnlyField("child", "1", Field.Store.NO));
     Document parentDoc = new Document();
-    parentDoc.add(newStringField("parent", "1", Field.Store.NO));
+    parentDoc.add(newMatchOnlyField("parent", "1", Field.Store.NO));
     w.addDocuments(Arrays.asList(childDoc, parentDoc));
     IndexReader r = w.getReader();
     w.close();
@@ -972,16 +972,16 @@
     Directory dir = newDirectory();
     RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(new LogDocMergePolicy()));
     Document parentDoc = new Document();
-    parentDoc.add(newStringField("parent", "1", Field.Store.NO));
-    parentDoc.add(newStringField("isparent", "yes", Field.Store.NO));
+    parentDoc.add(newMatchOnlyField("parent", "1", Field.Store.NO));
+    parentDoc.add(newMatchOnlyField("isparent", "yes", Field.Store.NO));
     w.addDocuments(Arrays.asList(parentDoc));
 
     // Add another doc so scorer is not null
     parentDoc = new Document();
-    parentDoc.add(newStringField("parent", "2", Field.Store.NO));
-    parentDoc.add(newStringField("isparent", "yes", Field.Store.NO));
+    parentDoc.add(newMatchOnlyField("parent", "2", Field.Store.NO));
+    parentDoc.add(newMatchOnlyField("isparent", "yes", Field.Store.NO));
     Document childDoc = new Document();
-    childDoc.add(newStringField("child", "2", Field.Store.NO));
+    childDoc.add(newMatchOnlyField("child", "2", Field.Store.NO));
     w.addDocuments(Arrays.asList(childDoc, parentDoc));
 
     // Need single seg:
Index: solr/core/src/test/org/apache/solr/search/TestSort.java
===================================================================
--- solr/core/src/test/org/apache/solr/search/TestSort.java	(revision 1383338)
+++ solr/core/src/test/org/apache/solr/search/TestSort.java	(working copy)
@@ -23,7 +23,7 @@
 import org.apache.lucene.analysis.core.SimpleAnalyzer;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
-import org.apache.lucene.document.StringField;
+import org.apache.lucene.document.MatchOnlyField;
 import org.apache.lucene.index.AtomicReaderContext;
 import org.apache.lucene.index.DirectoryReader;
 import org.apache.lucene.index.IndexWriter;
@@ -153,8 +153,8 @@
 
   public void testSort() throws Exception {
     Directory dir = new RAMDirectory();
-    Field f = new StringField("f", "0", Field.Store.NO);
-    Field f2 = new StringField("f2", "0", Field.Store.NO);
+    Field f = new MatchOnlyField("f", "0", Field.Store.NO);
+    Field f2 = new MatchOnlyField("f2", "0", Field.Store.NO);
 
     for (int iterCnt = 0; iterCnt<iter; iterCnt++) {
       IndexWriter iw = new IndexWriter(
Index: solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java
===================================================================
--- solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java	(revision 1383338)
+++ solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java	(working copy)
@@ -18,7 +18,7 @@
 package org.apache.solr.handler.component;
 
 import org.apache.lucene.document.Field;
-import org.apache.lucene.document.StringField;
+import org.apache.lucene.document.MatchOnlyField;
 import org.apache.lucene.index.AtomicReaderContext;
 import org.apache.lucene.index.IndexReaderContext;
 import org.apache.lucene.index.ReaderUtil;
@@ -435,7 +435,7 @@
       Sort sort = searcher.weightSort(rb.getSortSpec().getSort());
       SortField[] sortFields = sort==null ? new SortField[]{SortField.FIELD_SCORE} : sort.getSort();
       NamedList<Object[]> sortVals = new NamedList<Object[]>(); // order is important for the sort fields
-      Field field = new StringField("dummy", "", Field.Store.NO); // a dummy Field
+      Field field = new MatchOnlyField("dummy", "", Field.Store.NO); // a dummy Field
       IndexReaderContext topReaderContext = searcher.getTopReaderContext();
       List<AtomicReaderContext> leaves = topReaderContext.leaves();
       AtomicReaderContext currentLeaf = null;
