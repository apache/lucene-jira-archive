diff --git a/lucene/core/src/java/org/apache/lucene/search/BooleanQuery.java b/lucene/core/src/java/org/apache/lucene/search/BooleanQuery.java
index 5f138905966..2e2d81b53de 100644
--- a/lucene/core/src/java/org/apache/lucene/search/BooleanQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/BooleanQuery.java
@@ -506,11 +506,19 @@ public class BooleanQuery extends Query implements Iterable<BooleanClause> {
 
   @Override
   public void visit(QueryVisitor visitor) {
+    QueryVisitor sub = visitor.getSubVisitor(Occur.MUST, this);
     for (BooleanClause.Occur occur : clauseSets.keySet()) {
       if (clauseSets.get(occur).size() > 0) {
-        QueryVisitor v = visitor.getSubVisitor(occur, this);
-        for (Query q : clauseSets.get(occur)) {
-          q.visit(v);
+        if (occur == Occur.MUST) {
+          for (Query q : clauseSets.get(occur)) {
+            q.visit(sub);
+          }
+        }
+        else {
+          QueryVisitor v = sub.getSubVisitor(occur, this);
+          for (Query q : clauseSets.get(occur)) {
+            q.visit(v);
+          }
         }
       }
     }
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestQueryVisitor.java b/lucene/core/src/test/org/apache/lucene/search/TestQueryVisitor.java
index f1a43105474..e0ab5e97e42 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestQueryVisitor.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestQueryVisitor.java
@@ -328,6 +328,22 @@ public class TestQueryVisitor extends LuceneTestCase {
     minimumTermSet.clear();
     extractor.collectTerms(minimumTermSet);
     assertThat(minimumTermSet, equalTo(expected2));
+
+    BooleanQuery bq = new BooleanQuery.Builder()
+        .add(new BooleanQuery.Builder()
+            .add(new TermQuery(new Term("f", "1")), BooleanClause.Occur.MUST)
+            .add(new TermQuery(new Term("f", "61")), BooleanClause.Occur.MUST)
+            .add(new TermQuery(new Term("f", "21")), BooleanClause.Occur.FILTER)
+            .add(new TermQuery(new Term("f", "5")), BooleanClause.Occur.SHOULD)
+            .build(), BooleanClause.Occur.SHOULD)
+        .add(new PhraseQuery("f", "3", "44"), BooleanClause.Occur.SHOULD)
+        .build();
+    QueryNode ex2 = new ConjunctionNode();
+    bq.visit(ex2);
+    Set<Term> expected3 = new HashSet<>(Arrays.asList(new Term("f", "1"), new Term("f", "3")));
+    minimumTermSet.clear();
+    ex2.collectTerms(minimumTermSet);
+    assertThat(minimumTermSet, equalTo(expected3));
   }
 
 }
