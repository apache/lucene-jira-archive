Index: src/test/org/apache/lucene/index/TestParallelReaderEmptyIndex.java
===================================================================
--- src/test/org/apache/lucene/index/TestParallelReaderEmptyIndex.java	(revision 0)
+++ src/test/org/apache/lucene/index/TestParallelReaderEmptyIndex.java	(revision 0)
@@ -0,0 +1,104 @@
+package org.apache.lucene.index;
+
+import java.io.IOException;
+
+import junit.framework.TestCase;
+
+import org.apache.lucene.analysis.SimpleAnalyzer;
+import org.apache.lucene.document.Document;
+import org.apache.lucene.document.Field;
+import org.apache.lucene.document.Field.Index;
+import org.apache.lucene.document.Field.Store;
+import org.apache.lucene.document.Field.TermVector;
+import org.apache.lucene.index.IndexWriter.MaxFieldLength;
+import org.apache.lucene.store.RAMDirectory;
+
+/**
+ * Some tests for {@link ParallelReader}s with empty indexes
+ * 
+ * @author Christian Kohlschuetter
+ */
+public class TestParallelReaderEmptyIndex extends TestCase {
+
+	/**
+	 * Creates two empty indexes and wraps a ParallelReader around. Adding this
+	 * reader to a new index should not throw any exception.
+	 * 
+	 * @throws IOException
+	 */
+	public void testEmptyIndex() throws IOException {
+		RAMDirectory rd1 = new RAMDirectory();
+		IndexWriter iw = new IndexWriter(rd1, new SimpleAnalyzer(), true,
+				MaxFieldLength.UNLIMITED);
+		iw.close();
+
+		RAMDirectory rd2 = new RAMDirectory(rd1);
+
+		RAMDirectory rdOut = new RAMDirectory();
+
+		IndexWriter iwOut = new IndexWriter(rdOut, new SimpleAnalyzer(), true,
+				MaxFieldLength.UNLIMITED);
+		ParallelReader pr = new ParallelReader();
+		pr.add(IndexReader.open(rd1,true));
+		pr.add(IndexReader.open(rd2,true));
+		
+		// When unpatched, Lucene crashes here with a NoSuchElementException (caused by ParallelTermEnum)
+		iwOut.addIndexes(new IndexReader[] { pr });
+		
+		iwOut.optimize();
+		iwOut.close();
+	}
+
+	/**
+	 * This method creates an empty index (numFields=0, numDocs=0) but is marked
+	 * to have TermVectors. Adding this index to another index should not throw
+	 * any exception.
+	 */
+	public void testEmptyIndexWithVectors() throws IOException {
+		RAMDirectory rd1 = new RAMDirectory();
+		{
+			IndexWriter iw = new IndexWriter(rd1, new SimpleAnalyzer(), true,
+					MaxFieldLength.UNLIMITED);
+			Document doc = new Document();
+			doc.add(new Field("test", "", Store.NO, Index.ANALYZED,
+					TermVector.YES));
+			iw.addDocument(doc);
+			doc.add(new Field("test", "", Store.NO, Index.ANALYZED,
+					TermVector.NO));
+			iw.addDocument(doc);
+			iw.close();
+
+			IndexReader ir = IndexReader.open(rd1,false);
+			ir.deleteDocument(0);
+			ir.close();
+
+			iw = new IndexWriter(rd1, new SimpleAnalyzer(), false,
+					MaxFieldLength.UNLIMITED);
+			iw.optimize();
+			iw.close();
+		}
+
+		RAMDirectory rd2 = new RAMDirectory();
+		{
+			IndexWriter iw = new IndexWriter(rd2, new SimpleAnalyzer(), true,
+					MaxFieldLength.UNLIMITED);
+			Document doc = new Document();
+			iw.addDocument(doc);
+			iw.close();
+		}
+
+		RAMDirectory rdOut = new RAMDirectory();
+
+		IndexWriter iwOut = new IndexWriter(rdOut, new SimpleAnalyzer(), true,
+				MaxFieldLength.UNLIMITED);
+		ParallelReader pr = new ParallelReader();
+		pr.add(IndexReader.open(rd1,true));
+		pr.add(IndexReader.open(rd2,true));
+
+		// When unpatched, Lucene crashes here with an ArrayIndexOutOfBoundsException (caused by TermVectorsWriter)
+		iwOut.addIndexes(new IndexReader[] { pr });
+		
+		iwOut.optimize();
+		iwOut.close();
+	}
+}
