Index: lucene/core/src/java/org/apache/lucene/index/ParallelCompositeReader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/ParallelCompositeReader.java	(revision 1681696)
+++ lucene/core/src/java/org/apache/lucene/index/ParallelCompositeReader.java	(working copy)
@@ -129,12 +129,7 @@
           for (int j = 0; j < storedFieldsReaders.length; j++) {
             storedSubs[j] = (CompositeReader) storedFieldsReaders[j].getSequentialSubReaders().get(i);
           }
-          // We pass true for closeSubs and we prevent closing of subreaders in doClose():
-          // By this the synthetic throw-away readers used here are completely invisible to ref-counting
-          subReaders[i] = new ParallelCompositeReader(true, compositeSubs, storedSubs) {
-            @Override
-            protected void doClose() {}
-          };
+          subReaders[i] = new ParallelCompositeReader(true, compositeSubs, storedSubs);
         }
       }
       return subReaders;
Index: lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader.java	(revision 1681696)
+++ lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader.java	(working copy)
@@ -25,7 +25,11 @@
 import org.apache.lucene.document.Field;
 import org.apache.lucene.index.IndexReader.ReaderClosedListener;
 import org.apache.lucene.search.BooleanClause.Occur;
-import org.apache.lucene.search.*;
+import org.apache.lucene.search.BooleanQuery;
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.Query;
+import org.apache.lucene.search.ScoreDoc;
+import org.apache.lucene.search.TermQuery;
 import org.apache.lucene.store.AlreadyClosedException;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.LuceneTestCase;
@@ -123,13 +127,15 @@
     dir2.close();    
   }
   
-  // closeSubreaders=false
-  public void testReaderClosedListener1() throws Exception {
+  public void testReaderClosedListener(boolean closeSubReaders, boolean underMultiReader) throws IOException {
     Directory dir1 = getDir1(random());
     CompositeReader ir1 = DirectoryReader.open(dir1);
+    if (underMultiReader) {
+      ir1 = new MultiReader(ir1);
+    }
     
     // with overlapping
-    ParallelCompositeReader pr = new ParallelCompositeReader(false,
+    ParallelCompositeReader pr = new ParallelCompositeReader(closeSubReaders,
      new CompositeReader[] {ir1},
      new CompositeReader[] {ir1});
 
@@ -146,36 +152,27 @@
         });
     }
     pr.close();
-    ir1.close();
+    if (closeSubReaders == false) {
+      ir1.close();
+    }
     assertEquals(3, listenerClosedCount[0]);
     dir1.close();
   }
 
-  // closeSubreaders=true
+  public void testReaderClosedListener1() throws Exception {
+    testReaderClosedListener(false, false);
+  }
+
   public void testReaderClosedListener2() throws Exception {
-    Directory dir1 = getDir1(random());
-    CompositeReader ir1 = DirectoryReader.open(dir1);
-    
-    // with overlapping
-    ParallelCompositeReader pr = new ParallelCompositeReader(true,
-     new CompositeReader[] {ir1},
-     new CompositeReader[] {ir1});
+    testReaderClosedListener(true, false);
+  }
 
-    final int[] listenerClosedCount = new int[1];
+  public void testReaderClosedListener3() throws Exception {
+    testReaderClosedListener(false, true);
+  }
 
-    assertEquals(3, pr.leaves().size());
-
-    for(LeafReaderContext cxt : pr.leaves()) {
-      cxt.reader().addReaderClosedListener(new ReaderClosedListener() {
-          @Override
-          public void onClose(IndexReader reader) {
-            listenerClosedCount[0]++;
-          }
-        });
-    }
-    pr.close();
-    assertEquals(3, listenerClosedCount[0]);
-    dir1.close();
+  public void testReaderClosedListener4() throws Exception {
+    testReaderClosedListener(true, true);
   }
 
   public void testCloseInnerReader() throws Exception {
