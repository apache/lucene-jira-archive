Index: lucene/CHANGES.txt
===================================================================
--- lucene/CHANGES.txt	(revision 999539)
+++ lucene/CHANGES.txt	(working copy)
@@ -755,6 +755,11 @@
   as Eclipse and IntelliJ.
   (Paolo Castagna, Steven Rowe via Robert Muir)
 
+* LUCENE-2661: Manning Publications has generously donated the source
+  code from Lucene in Action, 2nd edition (http://manning.com/lucene),
+  as test cases for Lucene, distributed throughout src/test/*. (Robert
+  Muir, Mike McCandless)
+
 ================== Release 2.9.3 / 3.0.2 2010-06-18 ====================
 
 Changes in backwards compatibility policy
Index: lucene/src/liatests/tools/RegexQueryTest.java
===================================================================
--- lucene/src/liatests/tools/RegexQueryTest.java	(revision 0)
+++ lucene/src/liatests/tools/RegexQueryTest.java	(revision 0)
@@ -0,0 +1,44 @@
+package lia.tools;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import junit.framework.TestCase;
+import org.apache.lucene.search.regex.RegexQuery;
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.TopDocs;
+import org.apache.lucene.index.Term;
+import org.apache.lucene.store.Directory;
+import lia.common.TestUtil;
+
+// From chapter 8
+public class RegexQueryTest extends TestCase {
+
+  public void testRegexQuery() throws Exception {
+    Directory directory = TestUtil.getBookIndexDirectory();
+    IndexSearcher searcher = new IndexSearcher(directory);
+    RegexQuery q = new RegexQuery(new Term("title", ".*st.*"));
+    TopDocs hits = searcher.search(q, 10);
+    assertEquals(2, hits.totalHits);
+    assertTrue(TestUtil.hitsIncludeTitle(searcher, hits,
+                                         "Tapestry in Action"));
+    assertTrue(TestUtil.hitsIncludeTitle(searcher, hits,
+                                         "Mindstorms: Children, Computers, And Powerful Ideas"));
+    searcher.close();
+    directory.close();
+  }
+}

Property changes on: lucene/src/liatests/tools/RegexQueryTest.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lucene/src/liatests/tools/ChainedFilterTest.java
===================================================================
--- lucene/src/liatests/tools/ChainedFilterTest.java	(revision 0)
+++ lucene/src/liatests/tools/ChainedFilterTest.java	(revision 0)
@@ -0,0 +1,156 @@
+package lia.tools;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import junit.framework.TestCase;
+
+import org.apache.lucene.store.RAMDirectory;
+import org.apache.lucene.index.IndexWriter;
+import org.apache.lucene.index.Term;
+import org.apache.lucene.search.Query;
+import org.apache.lucene.search.BooleanQuery;
+import org.apache.lucene.search.BooleanClause;
+import org.apache.lucene.search.TermQuery;
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.TermRangeFilter;
+import org.apache.lucene.search.QueryWrapperFilter;
+import org.apache.lucene.search.CachingWrapperFilter;
+import org.apache.lucene.search.Filter;
+import org.apache.lucene.search.TopDocs;
+import org.apache.lucene.document.Document;
+import org.apache.lucene.document.DateTools;
+import org.apache.lucene.document.Field;
+import org.apache.lucene.analysis.WhitespaceAnalyzer;
+import org.apache.lucene.misc.ChainedFilter;
+import java.util.Calendar;
+
+import lia.common.TestUtil;
+
+// From chapter 9
+public class ChainedFilterTest extends TestCase {
+  public static final int MAX = 500;
+  private RAMDirectory directory;
+  private IndexSearcher searcher;
+  private Query query;
+  private Filter dateFilter;
+  private Filter bobFilter;
+  private Filter sueFilter;
+
+  public void setUp() throws Exception {
+    directory = new RAMDirectory();
+    IndexWriter writer =
+       new IndexWriter(directory, new WhitespaceAnalyzer(),
+                       IndexWriter.MaxFieldLength.UNLIMITED);
+
+    Calendar cal = Calendar.getInstance();
+    cal.set(2009, 1, 1, 0, 0); // A
+
+    for (int i = 0; i < MAX; i++) {
+      Document doc = new Document();
+      doc.add(new Field("key", "" + (i + 1),
+                         Field.Store.YES, Field.Index.NOT_ANALYZED));
+      doc.add(new Field("owner", (i < MAX / 2) ? "bob" : "sue",
+                         Field.Store.YES, Field.Index.NOT_ANALYZED));
+      doc.add(new Field("date", DateTools.timeToString(cal.getTimeInMillis(), DateTools.Resolution.DAY),
+                         Field.Store.YES, Field.Index.NOT_ANALYZED));
+      writer.addDocument(doc);
+
+      cal.add(Calendar.DATE, 1);
+    }
+
+    writer.close();
+
+    searcher = new IndexSearcher(directory);
+
+    BooleanQuery bq = new BooleanQuery();           // B
+    bq.add(new TermQuery(new Term("owner", "bob")), // B
+           BooleanClause.Occur.SHOULD);             // B
+    bq.add(new TermQuery(new Term("owner", "sue")), // B
+           BooleanClause.Occur.SHOULD);             // B
+    query = bq;
+
+    cal.set(2099, 1, 1, 0, 0);
+    dateFilter = TermRangeFilter.Less("date",        // C
+                      DateTools.timeToString(        // C
+                          cal.getTimeInMillis(),     // C
+                          DateTools.Resolution.DAY));// C
+
+    bobFilter = new CachingWrapperFilter(                   // D
+              new QueryWrapperFilter(                       // D
+                 new TermQuery(new Term("owner", "bob")))); // D
+
+    sueFilter = new CachingWrapperFilter(                // E
+        new QueryWrapperFilter(                          // E
+              new TermQuery(new Term("owner", "sue")))); // E
+  }
+
+  /*
+    #A 2009 January 01
+    #B BooleanQuery that matches all documents
+    #C Date filter also matches all documents
+    #D Matches only Bob's documents
+    #E Matches only Sue's documents
+   */
+
+  public void testSingleFilter() throws Exception {
+    ChainedFilter chain = new ChainedFilter(
+                                            new Filter[] {dateFilter});
+    TopDocs hits = searcher.search(query, chain, 10);
+    assertEquals(MAX, hits.totalHits);
+
+    chain = new ChainedFilter(new Filter[] {bobFilter});
+    assertEquals(MAX / 2, TestUtil.hitCount(searcher, query, chain), hits.totalHits);
+  }
+
+  public void testOR() throws Exception {
+    ChainedFilter chain = new ChainedFilter(
+              new Filter[] {sueFilter, bobFilter});
+
+    assertEquals("OR matches all", MAX, TestUtil.hitCount(searcher, query, chain));
+  }
+
+  public void testAND() throws Exception {
+    ChainedFilter chain = new ChainedFilter(
+              new Filter[] {dateFilter, bobFilter}, ChainedFilter.AND);
+    TopDocs hits = searcher.search(query, chain, 10);
+    assertEquals("AND matches just Bob", MAX / 2, hits.totalHits);
+    Document firstDoc = searcher.doc(hits.scoreDocs[0].doc);
+    assertEquals("bob", firstDoc.get("owner"));
+  }
+
+  public void testXOR() throws Exception {
+    ChainedFilter chain = new ChainedFilter(
+      new Filter[]{dateFilter, bobFilter}, ChainedFilter.XOR);
+    TopDocs hits = searcher.search(query, chain, 10);
+    assertEquals("XOR matches Sue", MAX / 2, hits.totalHits);
+    Document firstDoc = searcher.doc(hits.scoreDocs[0].doc);
+    assertEquals("sue", firstDoc.get("owner"));
+  }
+
+  public void testANDNOT() throws Exception {
+    ChainedFilter chain = new ChainedFilter(
+      new Filter[]{dateFilter, sueFilter},
+        new int[] {ChainedFilter.AND, ChainedFilter.ANDNOT});
+
+    TopDocs hits = searcher.search(query, chain, 10);
+    assertEquals("ANDNOT matches just Bob",
+                 MAX / 2, hits.totalHits);
+    Document firstDoc = searcher.doc(hits.scoreDocs[0].doc);
+    assertEquals("bob", firstDoc.get("owner"));
+  }
+}

Property changes on: lucene/src/liatests/tools/ChainedFilterTest.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/tools/FastVectorHighlighterSample.java
===================================================================
--- lucene/src/liatests/tools/FastVectorHighlighterSample.java	(revision 0)
+++ lucene/src/liatests/tools/FastVectorHighlighterSample.java	(revision 0)
@@ -0,0 +1,127 @@
+package lia.tools;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.FileWriter;
+import java.io.IOException;
+
+import org.apache.lucene.analysis.Analyzer;
+import org.apache.lucene.analysis.standard.StandardAnalyzer;
+import org.apache.lucene.document.Document;
+import org.apache.lucene.document.Field;
+import org.apache.lucene.document.Field.Index;
+import org.apache.lucene.document.Field.Store;
+import org.apache.lucene.document.Field.TermVector;
+import org.apache.lucene.index.IndexWriter;
+import org.apache.lucene.index.IndexWriter.MaxFieldLength;
+import org.apache.lucene.queryParser.QueryParser;
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.Query;
+import org.apache.lucene.search.ScoreDoc;
+import org.apache.lucene.search.TopDocs;
+import org.apache.lucene.search.vectorhighlight.BaseFragmentsBuilder;
+import org.apache.lucene.search.vectorhighlight.FastVectorHighlighter;
+import org.apache.lucene.search.vectorhighlight.FieldQuery;
+import org.apache.lucene.search.vectorhighlight.FragListBuilder;
+import org.apache.lucene.search.vectorhighlight.FragmentsBuilder;
+import org.apache.lucene.search.vectorhighlight.ScoreOrderFragmentsBuilder;
+import org.apache.lucene.search.vectorhighlight.SimpleFragListBuilder;
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.store.RAMDirectory;
+import org.apache.lucene.util.Version;
+
+// From chapter 8
+public class FastVectorHighlighterSample {
+
+  static final String[] DOCS = {                                      // #A
+    "the quick brown fox jumps over the lazy dog",                    // #A
+    "the quick gold fox jumped over the lazy black dog",              // #A
+    "the quick fox jumps over the black dog",                         // #A
+    "the red fox jumped over the lazy dark gray dog"                  // #A
+  };
+  static final String QUERY = "quick OR fox OR \"lazy dog\"~1";       // #B
+  static final String F = "f";
+  static Directory dir = new RAMDirectory();
+  static Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_30);
+
+  public static void main(String[] args) throws Exception {
+    if (args.length != 1) {
+      System.err.println("Usage: FastVectorHighlighterSample <filename>");
+      System.exit(-1);
+    }
+    makeIndex();
+    searchIndex(args[0]);
+  }
+
+  static void makeIndex() throws IOException {
+    IndexWriter writer = new IndexWriter(dir, analyzer,
+                                     true, MaxFieldLength.UNLIMITED);
+    for(String d : DOCS){
+      Document doc = new Document();
+      doc.add(new Field(F, d, Store.YES, Index.ANALYZED,
+                        TermVector.WITH_POSITIONS_OFFSETS));
+      writer.addDocument(doc);
+    }
+    writer.close();
+  }
+  
+  static void searchIndex(String filename) throws Exception {
+    QueryParser parser = new QueryParser(Version.LUCENE_30,
+                                         F, analyzer);
+    Query query = parser.parse(QUERY);                                
+    FastVectorHighlighter highlighter = getHighlighter();             // #C
+    FieldQuery fieldQuery = highlighter.getFieldQuery(query);         // #D
+    IndexSearcher searcher = new IndexSearcher(dir);           
+    TopDocs docs = searcher.search(query, 10);                       
+
+    FileWriter writer = new FileWriter(filename);
+    writer.write("<html>");
+    writer.write("<body>");
+    writer.write("<p>QUERY : " + QUERY + "</p>");
+    for(ScoreDoc scoreDoc : docs.scoreDocs) {
+      String snippet = highlighter.getBestFragment(                   // #E
+          fieldQuery, searcher.getIndexReader(),                      // #E
+          scoreDoc.doc, F, 100 );                                     // #E
+      if (snippet != null) {
+        writer.write(scoreDoc.doc + " : " + snippet + "<br/>");
+      }
+    }
+    writer.write("</body></html>");
+    writer.close();
+    searcher.close();
+  }
+  
+  static FastVectorHighlighter getHighlighter() {
+    FragListBuilder fragListBuilder = new SimpleFragListBuilder();    // #F
+    FragmentsBuilder fragmentBuilder =                                // #F
+      new ScoreOrderFragmentsBuilder(                                 // #F
+        BaseFragmentsBuilder.COLORED_PRE_TAGS,                        // #F
+        BaseFragmentsBuilder.COLORED_POST_TAGS);                      // #F
+    return new FastVectorHighlighter(true, true,                      // #F
+        fragListBuilder, fragmentBuilder);                            // #F
+  }
+}
+
+/*
+#A Index these documents
+#B Run this query
+#C Get FastVectorHighlighter
+#D Create FieldQuery
+#E Highlight top fragment
+#F Create FastVectorHighlighter
+*/

Property changes on: lucene/src/liatests/tools/FastVectorHighlighterSample.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lucene/src/liatests/tools/BerkeleyDbJESearcher.java
===================================================================
--- lucene/src/liatests/tools/BerkeleyDbJESearcher.java	(revision 0)
+++ lucene/src/liatests/tools/BerkeleyDbJESearcher.java	(revision 0)
@@ -0,0 +1,68 @@
+package lia.tools;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import com.sleepycat.je.Environment;
+import com.sleepycat.je.EnvironmentConfig;
+import com.sleepycat.je.Database;
+import com.sleepycat.je.DatabaseConfig;
+import com.sleepycat.je.DatabaseException;
+
+import org.apache.lucene.index.Term;
+import org.apache.lucene.search.TopDocs;
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.TermQuery;
+import org.apache.lucene.store.je.JEDirectory;
+
+import java.io.IOException;
+import java.io.File;
+
+// From chapter 9
+public class BerkeleyDbJESearcher {
+  public static void main(String[] args) throws IOException, DatabaseException {
+    if (args.length != 1) {
+      System.err.println("Usage: BerkeleyDbSearcher <index dir>");
+      System.exit(-1);
+    }
+    File indexFile = new File(args[0]);
+
+    EnvironmentConfig envConfig = new EnvironmentConfig();
+    DatabaseConfig dbConfig = new DatabaseConfig();
+
+    envConfig.setTransactional(true);
+    envConfig.setAllowCreate(true);
+    dbConfig.setTransactional(true);
+    dbConfig.setAllowCreate(true);
+
+    Environment env = new Environment(indexFile, envConfig);
+
+    Database index = env.openDatabase(null, "__index__", dbConfig);
+    Database blocks = env.openDatabase(null, "__blocks__", dbConfig);
+
+    JEDirectory directory = new JEDirectory(null, index, blocks);
+
+    IndexSearcher searcher = new IndexSearcher(directory, true);
+    TopDocs hits = searcher.search(new TermQuery(new Term("contents", "fox")), 10);
+    System.out.println(hits.totalHits + " documents found");
+    searcher.close();
+
+    index.close();
+    blocks.close();
+    env.close();
+  }
+}

Property changes on: lucene/src/liatests/tools/BerkeleyDbJESearcher.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/tools/HighlightIt.java
===================================================================
--- lucene/src/liatests/tools/HighlightIt.java	(revision 0)
+++ lucene/src/liatests/tools/HighlightIt.java	(revision 0)
@@ -0,0 +1,98 @@
+package lia.tools;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.analysis.TokenStream;
+import org.apache.lucene.analysis.standard.StandardAnalyzer;
+import org.apache.lucene.search.Query;
+import org.apache.lucene.queryParser.QueryParser;
+import org.apache.lucene.search.highlight.Highlighter;
+import org.apache.lucene.search.highlight.QueryScorer;
+import org.apache.lucene.search.highlight.SimpleSpanFragmenter;
+import org.apache.lucene.search.highlight.SimpleHTMLFormatter;
+import org.apache.lucene.util.Version;
+
+import java.io.FileWriter;
+import java.io.StringReader;
+
+// From chapter 8
+public class HighlightIt {
+  private static final String text =
+    "In this section we'll show you how to make the simplest " +
+    "programmatic query, searching for a single term, and then " +
+    "we'll see how to use QueryParser to accept textual queries. " +
+    "In the sections that follow, we’ll take this simple example " +
+    "further by detailing all the query types built into Lucene. " +
+    "We begin with the simplest search of all: searching for all " +
+    "documents that contain a single term.";
+
+  public static void main(String[] args) throws Exception {
+
+    if (args.length != 1) {
+      System.err.println("Usage: HighlightIt <filename-out>");
+      System.exit(-1);
+    }
+
+    String filename = args[0];
+
+    String searchText = "term";                               // #1
+    QueryParser parser = new QueryParser(Version.LUCENE_30,      // #1
+                                         "f",                         // #1
+                                         new StandardAnalyzer(Version.LUCENE_30));// #1
+    Query query = parser.parse(searchText);                           // #1
+
+    SimpleHTMLFormatter formatter =                                   // #2
+      new SimpleHTMLFormatter("<span class=\"highlight\">",           // #2
+                              "</span>");                             // #2
+
+    TokenStream tokens = new StandardAnalyzer(Version.LUCENE_30)  // #3
+        .tokenStream("f", new StringReader(text));                    // #3
+
+    QueryScorer scorer = new QueryScorer(query, "f");                 // #4
+
+    Highlighter highlighter = new Highlighter(formatter, scorer);     // #5
+    highlighter.setTextFragmenter(                                    // #6
+                  new SimpleSpanFragmenter(scorer));                  // #6
+
+    String result =                                                   // #7
+        highlighter.getBestFragments(tokens, text, 3, "...");         // #7
+
+    FileWriter writer = new FileWriter(filename);                     // #8
+    writer.write("<html>");                                           // #8
+    writer.write("<style>\n" +                                        // #8
+        ".highlight {\n" +                                            // #8
+        " background: yellow;\n" +                                    // #8
+        "}\n" +                                                       // #8
+        "</style>");                                                  // #8
+    writer.write("<body>");                                           // #8
+    writer.write(result);                                             // #8
+    writer.write("</body></html>");                                   // #8
+    writer.close();                                                   // #8
+  }
+}
+
+/*
+#1 Create the query
+#2 Customize surrounding tags
+#3 Tokenize text
+#4 Create QueryScorer
+#5 Create highlighter
+#6 Use SimpleSpanFragmenter to fragment
+#7 Highlight best 3 fragments
+#8 Write highlighted HTML
+*/

Property changes on: lucene/src/liatests/tools/HighlightIt.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lucene/src/liatests/tools/NGramTest.java
===================================================================
--- lucene/src/liatests/tools/NGramTest.java	(revision 0)
+++ lucene/src/liatests/tools/NGramTest.java	(revision 0)
@@ -0,0 +1,65 @@
+
+package lia.tools;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.IOException;
+import java.io.Reader;
+
+import org.apache.lucene.analysis.KeywordTokenizer;
+import org.apache.lucene.analysis.Analyzer;
+import org.apache.lucene.analysis.TokenStream;
+import org.apache.lucene.analysis.ngram.NGramTokenFilter;
+import org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter;
+
+import junit.framework.TestCase;
+import lia.analysis.AnalyzerUtils;
+
+// From chapter 8
+public class NGramTest extends TestCase {
+
+  private static class NGramAnalyzer extends Analyzer {
+    public TokenStream tokenStream(String fieldName, Reader reader) {
+      return new NGramTokenFilter(new KeywordTokenizer(reader), 2, 4);
+    }
+  }
+
+  private static class FrontEdgeNGramAnalyzer extends Analyzer {
+    public TokenStream tokenStream(String fieldName, Reader reader) {
+      return new EdgeNGramTokenFilter(new KeywordTokenizer(reader), EdgeNGramTokenFilter.Side.FRONT, 1, 4);
+    }
+  }
+
+  private static class BackEdgeNGramAnalyzer extends Analyzer {
+    public TokenStream tokenStream(String fieldName, Reader reader) {
+      return new EdgeNGramTokenFilter(new KeywordTokenizer(reader), EdgeNGramTokenFilter.Side.BACK, 1, 4);
+    }
+  }
+
+  public void testNGramTokenFilter24() throws IOException {
+    AnalyzerUtils.displayTokensWithPositions(new NGramAnalyzer(), "lettuce");
+  }
+
+  public void testEdgeNGramTokenFilterFront() throws IOException {
+    AnalyzerUtils.displayTokensWithPositions(new FrontEdgeNGramAnalyzer(), "lettuce");
+  }
+
+  public void testEdgeNGramTokenFilterBack() throws IOException {
+    AnalyzerUtils.displayTokensWithPositions(new BackEdgeNGramAnalyzer(), "lettuce");
+  }
+}

Property changes on: lucene/src/liatests/tools/NGramTest.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/tools/SpatialLuceneExample.java
===================================================================
--- lucene/src/liatests/tools/SpatialLuceneExample.java	(revision 0)
+++ lucene/src/liatests/tools/SpatialLuceneExample.java	(revision 0)
@@ -0,0 +1,189 @@
+package lia.tools;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.IOException;
+import java.util.Map;
+
+import org.apache.lucene.analysis.WhitespaceAnalyzer;
+import org.apache.lucene.document.Document;
+import org.apache.lucene.document.Field;
+import org.apache.lucene.index.CorruptIndexException;
+import org.apache.lucene.index.IndexWriter;
+import org.apache.lucene.index.Term;
+import org.apache.lucene.index.IndexWriter.MaxFieldLength;
+import org.apache.lucene.search.ScoreDoc;
+import org.apache.lucene.search.TopDocs;
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.Query;
+import org.apache.lucene.search.Sort;
+import org.apache.lucene.search.SortField;
+import org.apache.lucene.search.TermQuery;
+import org.apache.lucene.util.NumericUtils;
+import org.apache.lucene.spatial.tier.DistanceQueryBuilder;
+import org.apache.lucene.spatial.tier.DistanceFieldComparatorSource;
+import org.apache.lucene.spatial.tier.projections.CartesianTierPlotter;
+import org.apache.lucene.spatial.tier.projections.IProjector;
+import org.apache.lucene.spatial.tier.projections.SinusoidalProjector;
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.store.RAMDirectory;
+
+// From chapter 9
+public class SpatialLuceneExample {
+
+  String latField = "lat";
+  String lngField = "lon";
+  String tierPrefix = "_localTier";
+
+  private Directory directory;
+  private IndexWriter writer;
+
+  SpatialLuceneExample() throws IOException {
+    directory = new RAMDirectory();
+    writer = new IndexWriter(directory, new WhitespaceAnalyzer(),
+                             MaxFieldLength.UNLIMITED);
+  }
+
+  private void addLocation(IndexWriter writer, String name, double lat,
+                           double lng) throws IOException {
+
+    Document doc = new Document();
+    doc.add(new Field("name", name, Field.Store.YES,
+                      Field.Index.ANALYZED));
+
+    doc.add(new Field(latField, NumericUtils.doubleToPrefixCoded(lat),  // #A
+                      Field.Store.YES, Field.Index.NOT_ANALYZED));    // #A
+    doc.add(new Field(lngField, NumericUtils.doubleToPrefixCoded(lng),  // #A
+                      Field.Store.YES, Field.Index.NOT_ANALYZED));    // #A
+
+    doc.add(new Field("metafile", "doc", Field.Store.YES,
+                      Field.Index.ANALYZED));
+
+    IProjector projector = new SinusoidalProjector();      // #B
+
+    int startTier = 5;                                     // #C
+    int endTier = 15;                                      // #C
+
+    for (; startTier <= endTier; startTier++) {
+      CartesianTierPlotter ctp;
+      ctp = new CartesianTierPlotter(startTier,               // #D
+                                     projector, tierPrefix);  // #D
+
+      double boxId = ctp.getTierBoxId(lat, lng);              // #D
+      System.out.println("Adding field " + ctp.getTierFieldName() + ":"
+                         + boxId);
+      doc.add(new Field(ctp.getTierFieldName(), NumericUtils   // #E
+                        .doubleToPrefixCoded(boxId), Field.Store.YES,
+                        Field.Index.NOT_ANALYZED_NO_NORMS));
+
+    }
+
+    writer.addDocument(doc);
+    System.out.println("===== Added Doc to index ====");
+  }
+
+/*
+ #A Encode lat/lng as doubles
+ #B Use sinusoidal projection
+ #C Index around 1 to 1000 miles
+ #D Compute bounding box ID
+ #E Add tier field
+*/
+
+  public void findNear(String what, double latitude, double longitude,
+                       double radius) throws CorruptIndexException, IOException {
+    IndexSearcher searcher = new IndexSearcher(directory);
+		
+    DistanceQueryBuilder dq;
+    dq = new DistanceQueryBuilder(latitude,   // #A
+                                  longitude,  // #A
+                                  radius,     // #A
+                                  latField,   // #A
+                                  lngField,   // #A
+                                  tierPrefix, // #A
+                                  true);      // #A
+
+    Query tq;
+    if (what == null)
+      tq = new TermQuery(new Term("metafile", "doc"));   // #B
+    else
+      tq = new TermQuery(new Term("name", what));
+	    
+    DistanceFieldComparatorSource dsort;                         // #C
+    dsort = new DistanceFieldComparatorSource(                   // #C
+                      dq.getDistanceFilter());                   // #C
+    Sort sort = new Sort(new SortField("foo", dsort));           // #C
+	    
+    TopDocs hits = searcher.search(tq, dq.getFilter(), 10, sort);
+
+    Map<Integer,Double> distances =                              // #D
+         dq.getDistanceFilter().getDistances();                  // #D
+		
+    System.out.println("Number of results: " + hits.totalHits);
+    System.out.println("Found:");
+    for (ScoreDoc sd : hits.scoreDocs) {
+      int docID = sd.doc;
+      Document d = searcher.doc(docID);
+	        
+      String name = d.get("name");
+      double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));
+      double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField)); 
+      Double geo_distance = distances.get(docID);
+	        
+      System.out.printf(name +": %.2f Miles\n", geo_distance);
+      System.out.println("\t\t("+ rsLat +","+ rsLng +")");
+    }
+  }
+
+/*
+  #A Create distance query
+  #B Match all documents
+  #C Create distance sort
+  #D Get distances map
+*/
+
+  public static void main(String[] args) throws IOException {
+    SpatialLuceneExample spatial = new SpatialLuceneExample();
+    spatial.addData();
+    spatial.findNear("Restaurant", 38.8725000, -77.3829000, 8);
+  }
+
+  private void addData() throws IOException {
+    addLocation(writer, "McCormick & Schmick's Seafood Restaurant",
+             38.9579000, -77.3572000);
+    addLocation(writer, "Jimmy's Old Town Tavern", 38.9690000, -77.3862000);
+    addLocation(writer, "Ned Devine's", 38.9510000, -77.4107000);
+    addLocation(writer, "Old Brogue Irish Pub", 38.9955000, -77.2884000);
+    addLocation(writer, "Alf Laylah Wa Laylah", 38.8956000, -77.4258000);
+    addLocation(writer, "Sully's Restaurant & Supper", 38.9003000, -77.4467000);
+    addLocation(writer, "TGIFriday", 38.8725000, -77.3829000);
+    addLocation(writer, "Potomac Swing Dance Club", 38.9027000, -77.2639000);
+    addLocation(writer, "White Tiger Restaurant", 38.9027000, -77.2638000);
+    addLocation(writer, "Jammin' Java", 38.9039000, -77.2622000);
+    addLocation(writer, "Potomac Swing Dance Club", 38.9027000, -77.2639000);
+    addLocation(writer, "WiseAcres Comedy Club", 38.9248000, -77.2344000);
+    addLocation(writer, "Glen Echo Spanish Ballroom", 38.9691000, -77.1400000);
+    addLocation(writer, "Whitlow's on Wilson", 38.8889000, -77.0926000);
+    addLocation(writer, "Iota Club and Cafe", 38.8890000, -77.0923000);
+    addLocation(writer, "Hilton Washington Embassy Row", 38.9103000,
+             -77.0451000);
+    addLocation(writer, "HorseFeathers, Bar & Grill", 39.01220000000001,
+             -77.3942);
+    writer.close();
+  }
+}

Property changes on: lucene/src/liatests/tools/SpatialLuceneExample.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lucene/src/liatests/tools/BerkeleyDbJEIndexer.java
===================================================================
--- lucene/src/liatests/tools/BerkeleyDbJEIndexer.java	(revision 0)
+++ lucene/src/liatests/tools/BerkeleyDbJEIndexer.java	(revision 0)
@@ -0,0 +1,109 @@
+package lia.tools;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import com.sleepycat.je.Environment;
+import com.sleepycat.je.EnvironmentConfig;
+import com.sleepycat.je.Database;
+import com.sleepycat.je.DatabaseConfig;
+import com.sleepycat.je.Transaction;
+import com.sleepycat.je.DatabaseException;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.apache.lucene.store.je.JEDirectory;
+import org.apache.lucene.index.IndexWriter;
+import org.apache.lucene.analysis.standard.StandardAnalyzer;
+import org.apache.lucene.document.Document;
+import org.apache.lucene.document.Field;
+import org.apache.lucene.util.Version;
+
+// From chapter 9
+
+/** Same as BerkeleyDbIndexer, but uses the Java edition of
+ *  Berkeley DB */
+
+public class BerkeleyDbJEIndexer {
+  public static void main(String[] args)
+    throws IOException, DatabaseException {
+    if (args.length != 1) {
+      System.err.println("Usage: BerkeleyDbIndexer <index dir>");
+      System.exit(-1);
+    }
+
+    File indexFile = new File(args[0]);
+
+    if (indexFile.exists()) {                      // A
+      File[] files = indexFile.listFiles();        // A
+      for (int i = 0; i < files.length; i++)        // A
+        if (files[i].getName().startsWith("__"))        // A
+          files[i].delete();        // A
+      indexFile.delete();        // A
+    }
+
+    indexFile.mkdir();
+
+    EnvironmentConfig envConfig = new EnvironmentConfig();  // B
+    DatabaseConfig dbConfig = new DatabaseConfig();         // B
+
+    envConfig.setTransactional(true);           // B
+    envConfig.setAllowCreate(true);            // B
+    dbConfig.setTransactional(true);          // B
+    dbConfig.setAllowCreate(true);            // B
+
+    Environment env = new Environment(indexFile, envConfig);   // C
+
+    Transaction txn = env.beginTransaction(null, null);          // C
+    Database index = env.openDatabase(txn, "__index__", dbConfig);   // C
+    Database blocks = env.openDatabase(txn, "__blocks__", dbConfig);   // C
+    txn.commit();   // C
+    txn = env.beginTransaction(null, null);                          // C
+
+    JEDirectory directory = new JEDirectory(txn, index, blocks);    // D
+
+    IndexWriter writer = new IndexWriter(directory,
+                                         new StandardAnalyzer(Version.LUCENE_30),
+                                         true,
+                                         IndexWriter.MaxFieldLength.UNLIMITED);
+
+    Document doc = new Document();
+    doc.add(new Field("contents", "The quick brown fox...",     
+                      Field.Store.YES, Field.Index.ANALYZED));
+    writer.addDocument(doc);
+
+    writer.optimize();
+    writer.close();
+
+    directory.close();
+    txn.commit();
+
+    index.close();
+    blocks.close();
+    env.close();
+
+    System.out.println("Indexing Complete");
+  }
+}
+
+/*
+  #A Remove existing index, if present
+  #B Configure BDB's environment and database
+  #C Open database and transaction
+  #D Create JEDirectory
+*/

Property changes on: lucene/src/liatests/tools/BerkeleyDbJEIndexer.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/tools/HighlightTest.java
===================================================================
--- lucene/src/liatests/tools/HighlightTest.java	(revision 0)
+++ lucene/src/liatests/tools/HighlightTest.java	(revision 0)
@@ -0,0 +1,87 @@
+package lia.tools;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import junit.framework.TestCase;
+import lia.common.TestUtil;
+
+import org.apache.lucene.analysis.SimpleAnalyzer;
+import org.apache.lucene.analysis.TokenStream;
+import org.apache.lucene.analysis.Analyzer;
+import org.apache.lucene.index.Term;
+import org.apache.lucene.document.Document;
+import org.apache.lucene.search.ScoreDoc;
+import org.apache.lucene.search.TopDocs;
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.TermQuery;
+import org.apache.lucene.search.highlight.Highlighter;
+import org.apache.lucene.search.highlight.QueryScorer;
+import org.apache.lucene.search.highlight.TokenSources;
+import org.apache.lucene.search.highlight.SimpleSpanFragmenter;
+import org.apache.lucene.search.highlight.Fragmenter;
+
+import java.io.StringReader;
+
+// From chapter 8
+public class HighlightTest extends TestCase {
+  public void testHighlighting() throws Exception {
+    String text = "The quick brown fox jumps over the lazy dog";
+
+    TermQuery query = new TermQuery(new Term("field", "fox"));
+
+    TokenStream tokenStream =
+        new SimpleAnalyzer().tokenStream("field",
+            new StringReader(text));
+
+    QueryScorer scorer = new QueryScorer(query, "field");
+    Fragmenter fragmenter = new SimpleSpanFragmenter(scorer);
+    Highlighter highlighter = new Highlighter(scorer);
+    highlighter.setTextFragmenter(fragmenter);
+    assertEquals("The quick brown <B>fox</B> jumps over the lazy dog",
+        highlighter.getBestFragment(tokenStream, text));
+  }
+
+  public void testHits() throws Exception {
+    IndexSearcher searcher = new IndexSearcher(TestUtil.getBookIndexDirectory());
+    TermQuery query = new TermQuery(new Term("title", "action"));
+    TopDocs hits = searcher.search(query, 10);
+
+    QueryScorer scorer = new QueryScorer(query, "title");
+    Highlighter highlighter = new Highlighter(scorer);
+    highlighter.setTextFragmenter(
+                   new SimpleSpanFragmenter(scorer));
+      
+    Analyzer analyzer = new SimpleAnalyzer();
+    
+    for (ScoreDoc sd : hits.scoreDocs) {
+      Document doc = searcher.doc(sd.doc);
+      String title = doc.get("title");
+
+      TokenStream stream = TokenSources.getAnyTokenStream(searcher.getIndexReader(),
+                                                          sd.doc,
+                                                          "title",
+                                                          doc,
+                                                          analyzer);
+      String fragment =
+          highlighter.getBestFragment(stream, title);
+
+      System.out.println(fragment);
+    }
+  }
+
+}

Property changes on: lucene/src/liatests/tools/HighlightTest.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lucene/src/liatests/tools/remote/SearchClient.java
===================================================================
--- lucene/src/liatests/tools/remote/SearchClient.java	(revision 0)
+++ lucene/src/liatests/tools/remote/SearchClient.java	(revision 0)
@@ -0,0 +1,100 @@
+package lia.tools.remote;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.document.Document;
+import org.apache.lucene.index.Term;
+import org.apache.lucene.search.ScoreDoc;
+import org.apache.lucene.search.TopDocs;
+import org.apache.lucene.search.MultiSearcher;
+import org.apache.lucene.search.Searchable;
+import org.apache.lucene.search.TermQuery;
+
+import java.rmi.Naming;
+import java.util.Date;
+import java.util.HashMap;
+
+// From chapter 9
+public class SearchClient {
+  private static HashMap searcherCache = new HashMap();
+
+  public static void main(String[] args) throws Exception {
+    if (args.length != 1) {
+      System.err.println("Usage: SearchClient <query>");
+      System.exit(-1);
+    }
+
+    String word = args[0];
+
+    for (int i=0; i < 5; i++) {       //1
+      search("LIA_Multi", word);      //1
+      search("LIA_Parallel", word);   //1
+    }                                 //1
+  }
+
+  private static void search(String name, String word)
+      throws Exception {
+    TermQuery query = new TermQuery(new Term("word", word));
+
+    MultiSearcher searcher =                       //2
+      (MultiSearcher) searcherCache.get(name);     //2
+
+    if (searcher == null) {
+      searcher =                                  //3
+        new MultiSearcher(                       //3
+          new Searchable[]{lookupRemote(name)}); //3
+      searcherCache.put(name, searcher);
+    }    
+
+    long begin = new Date().getTime();         //4
+    TopDocs hits = searcher.search(query, 10); //4
+    long end = new Date().getTime();           //4
+
+    System.out.print("Searched " + name +
+        " for '" + word + "' (" + (end - begin) + " ms): ");
+
+    if (hits.scoreDocs.length == 0) {
+      System.out.print("<NONE FOUND>");
+    }
+
+    for (ScoreDoc sd : hits.scoreDocs) {
+      Document doc = searcher.doc(sd.doc);
+      String[] values = doc.getValues("syn");
+      for (String syn : values) {
+        System.out.print(syn + " ");
+      }
+    }
+    System.out.println();
+    System.out.println();
+                                             // 5
+  }
+
+  private static Searchable lookupRemote(String name)
+      throws Exception {
+    return (Searchable) Naming.lookup("//localhost/" + name); // 6
+  }
+}
+
+/*
+  #1 Multiple identical searches
+  #2 Cache searchers
+  #3 Wrap Searchable in MultiSearcher
+  #4 Time searching
+  #5 Don't close searcher!
+  #6 RMI lookup
+*/

Property changes on: lucene/src/liatests/tools/remote/SearchClient.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lucene/src/liatests/tools/remote/SearchServer.java
===================================================================
--- lucene/src/liatests/tools/remote/SearchServer.java	(revision 0)
+++ lucene/src/liatests/tools/remote/SearchServer.java	(revision 0)
@@ -0,0 +1,80 @@
+package lia.tools.remote;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.ParallelMultiSearcher;
+import org.apache.lucene.search.RemoteSearchable;
+import org.apache.lucene.search.Searchable;
+import org.apache.lucene.search.Searcher;
+import org.apache.lucene.search.MultiSearcher;
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.store.FSDirectory;
+
+import java.io.File;
+import java.rmi.Naming;
+import java.rmi.registry.LocateRegistry;
+
+// From chapter 9
+public class SearchServer {
+  private static final String ALPHABET =
+      "abcdefghijklmnopqrstuvwxyz";
+
+  public static void main(String[] args) throws Exception {
+    if (args.length != 1) {
+      System.err.println("Usage: SearchServer <basedir>");
+      System.exit(-1);
+    }
+
+    String basedir = args[0];    //1
+    Directory[] dirs = new Directory[ALPHABET.length()];
+    Searchable[] searchables = new Searchable[ALPHABET.length()];
+    for (int i = 0; i < ALPHABET.length(); i++) {
+      dirs[i] = FSDirectory.open(new File(basedir, ""+ALPHABET.charAt(i)));
+      searchables[i] = new IndexSearcher(      //2
+          dirs[i]);                            //2
+    }
+
+    LocateRegistry.createRegistry(1099);         //3
+
+    Searcher multiSearcher = new MultiSearcher(searchables); //4
+    RemoteSearchable multiImpl =                             //4
+      new RemoteSearchable(multiSearcher);                   //4
+    Naming.rebind("//localhost/LIA_Multi", multiImpl);       //4
+
+    Searcher parallelSearcher =                             //5
+        new ParallelMultiSearcher(searchables);             //5
+    RemoteSearchable parallelImpl =                         //5
+        new RemoteSearchable(parallelSearcher);             //5
+    Naming.rebind("//localhost/LIA_Parallel", parallelImpl);//5
+
+    System.out.println("Server started");
+
+    for (int i = 0; i < ALPHABET.length(); i++) {
+      dirs[i].close();
+    }
+  }
+}
+
+/*
+  #1 Indexes under basedir
+  #2 Open IndexSearcher for each index
+  #3 Create RMI registry
+  #4 MultiSearcher over all indexes
+  #5 ParallelMultiSearcher over all indexes
+*/

Property changes on: lucene/src/liatests/tools/remote/SearchServer.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/tools/SpellCheckerExample.java
===================================================================
--- lucene/src/liatests/tools/SpellCheckerExample.java	(revision 0)
+++ lucene/src/liatests/tools/SpellCheckerExample.java	(revision 0)
@@ -0,0 +1,66 @@
+
+package lia.tools;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.IOException;
+import java.io.File;
+import org.apache.lucene.search.spell.SpellChecker;
+import org.apache.lucene.search.spell.JaroWinklerDistance;
+import org.apache.lucene.search.spell.LevensteinDistance;
+import org.apache.lucene.store.FSDirectory;
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.index.IndexReader;
+
+// From chapter 8
+public class SpellCheckerExample {
+
+  public static void main(String[] args) throws IOException {
+
+    if (args.length != 2) {
+      System.out.println("Usage: java lia.tools.SpellCheckerTest SpellCheckerIndexDir wordToRespell");
+      System.exit(1);
+    }
+
+    String spellCheckDir = args[0];
+    String wordToRespell = args[1];
+
+    Directory dir = FSDirectory.open(new File(spellCheckDir));
+    if (!IndexReader.indexExists(dir)) {
+      System.out.println("\nERROR: No spellchecker index at path \"" +
+                         spellCheckDir +
+                         "\"; please run CreateSpellCheckerIndex first\n");
+      System.exit(1);
+    }
+    SpellChecker spell = new SpellChecker(dir);  //#A
+
+    spell.setStringDistance(new LevensteinDistance());  //#B
+    //spell.setStringDistance(new JaroWinklerDistance());
+
+    String[] suggestions = spell.suggestSimilar(wordToRespell, 5); //#C
+    System.out.println(suggestions.length + " suggestions for '" + wordToRespell + "':");
+    for (String suggestion : suggestions)
+      System.out.println("  " + suggestion);
+  }
+}
+/*
+  #A Create SpellCheck from existing spell check index
+  #B Sets the string distance metric used to rank the suggestions
+  #C Generate respelled candidates
+*/
+

Property changes on: lucene/src/liatests/tools/SpellCheckerExample.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lucene/src/liatests/tools/CreateSpellCheckerIndex.java
===================================================================
--- lucene/src/liatests/tools/CreateSpellCheckerIndex.java	(revision 0)
+++ lucene/src/liatests/tools/CreateSpellCheckerIndex.java	(revision 0)
@@ -0,0 +1,65 @@
+
+package lia.tools;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.IOException;
+import java.io.File;
+import org.apache.lucene.search.spell.SpellChecker;
+import org.apache.lucene.search.spell.LuceneDictionary;
+import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.store.FSDirectory;
+import org.apache.lucene.store.Directory;
+
+// From chapter 8
+public class CreateSpellCheckerIndex {
+
+  public static void main(String[] args) throws IOException {
+
+    if (args.length != 3) {
+      System.out.println("Usage: java lia.tools.SpellCheckerTest SpellCheckerIndexDir IndexDir IndexField");
+      System.exit(1);
+    }
+
+    String spellCheckDir = args[0];
+    String indexDir = args[1];
+    String indexField = args[2];
+
+    System.out.println("Now build SpellChecker index...");
+    Directory dir = FSDirectory.open(new File(spellCheckDir));
+    SpellChecker spell = new SpellChecker(dir);     //#A
+    long startTime = System.currentTimeMillis();
+    
+    Directory dir2 = FSDirectory.open(new File(indexDir));
+    IndexReader r = IndexReader.open(dir2);     //#B
+    try {
+      spell.indexDictionary(new LuceneDictionary(r, indexField));  //#C
+    } finally {
+      r.close();
+    }
+    dir.close();
+    dir2.close();
+    long endTime = System.currentTimeMillis();
+    System.out.println("  took " + (endTime-startTime) + " milliseconds");
+  }
+}
+/*
+  #A Create SpellChecker on its directory
+  #B Open IndexReader containing words to add to spell dictionary
+  #C Add all words from the specified fields into the spell checker index
+*/

Property changes on: lucene/src/liatests/tools/CreateSpellCheckerIndex.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/tools/SnowballTest.java
===================================================================
--- lucene/src/liatests/tools/SnowballTest.java	(revision 0)
+++ lucene/src/liatests/tools/SnowballTest.java	(revision 0)
@@ -0,0 +1,41 @@
+package lia.tools;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import junit.framework.TestCase;
+import org.apache.lucene.analysis.snowball.SnowballAnalyzer;
+import org.apache.lucene.analysis.Analyzer;
+import org.apache.lucene.util.Version;
+import lia.analysis.AnalyzerUtils;
+
+// From chapter 8
+public class SnowballTest extends TestCase {
+  public void testEnglish() throws Exception {
+    Analyzer analyzer = new SnowballAnalyzer(Version.LUCENE_30, "English");
+    AnalyzerUtils.assertAnalyzesTo(analyzer,
+                                   "stemming algorithms",
+                                   new String[] {"stem", "algorithm"});
+  }
+
+  public void testSpanish() throws Exception {
+    Analyzer analyzer = new SnowballAnalyzer(Version.LUCENE_30, "Spanish");
+    AnalyzerUtils.assertAnalyzesTo(analyzer,
+                                   "algoritmos",
+                                   new String[] {"algoritm"});
+  }
+}

Property changes on: lucene/src/liatests/tools/SnowballTest.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/tools/XmlQueryParser/AgoFilterBuilder.java
===================================================================
--- lucene/src/liatests/tools/XmlQueryParser/AgoFilterBuilder.java	(revision 0)
+++ lucene/src/liatests/tools/XmlQueryParser/AgoFilterBuilder.java	(revision 0)
@@ -0,0 +1,77 @@
+package lia.tools.XmlQueryParser;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.util.HashMap;
+import java.util.Calendar;
+import java.text.SimpleDateFormat;
+import org.w3c.dom.Element;
+import org.apache.lucene.search.Filter;
+import org.apache.lucene.search.NumericRangeFilter;
+import org.apache.lucene.xmlparser.FilterBuilder;
+import org.apache.lucene.xmlparser.DOMUtils;
+import org.apache.lucene.xmlparser.ParserException;
+
+// From chapter 9
+public class AgoFilterBuilder implements FilterBuilder {
+
+  static HashMap<String,Integer> timeUnits=new HashMap<String,Integer>();
+
+  public Filter getFilter(Element element) throws ParserException {
+    String fieldName = DOMUtils.getAttributeWithInheritanceOrFail(element,     // A
+                                                                "fieldName");  // A
+    String timeUnit = DOMUtils.getAttribute(element, "timeUnit", "days");    // A
+    Integer calUnit = timeUnits.get(timeUnit);                                // A
+    if (calUnit == null) {                                                 // A
+      throw new ParserException("Illegal time unit:"                     // A
+                                +timeUnit+" - must be days, months or years");  // A
+    }                                                      // A
+    int agoStart = DOMUtils.getAttribute(element, "from",0);  // A
+    int agoEnd = DOMUtils.getAttribute(element, "to", 0);    // A
+    if (agoStart < agoEnd) {
+      int oldAgoStart = agoStart;
+      agoStart = agoEnd;
+      agoEnd = oldAgoStart;
+    }
+    SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");      // B
+
+    Calendar start = Calendar.getInstance();                        // B
+    start.add(calUnit, agoStart*-1);                          // B
+		
+    Calendar end = Calendar.getInstance();                      // B
+    end.add(calUnit, agoEnd*-1);                               // B
+		
+    return NumericRangeFilter.newIntRange(             // C
+                    fieldName,                         // C
+                    Integer.valueOf(sdf.format(start.getTime())),       // C
+                    Integer.valueOf(sdf.format(end.getTime())),         // C
+                    true, true);                       // C
+  }
+
+  static {
+    timeUnits.put("days", Calendar.DAY_OF_YEAR);
+    timeUnits.put("months",Calendar.MONTH);
+    timeUnits.put("years", Calendar.YEAR);
+  }
+}
+
+/*
+#A Extract field, time unit, from and to
+#B Parse date/times
+#C Create NumericRangeFilter
+*/

Property changes on: lucene/src/liatests/tools/XmlQueryParser/AgoFilterBuilder.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/tools/XmlQueryParser/JobSearch.xsl
===================================================================
--- lucene/src/liatests/tools/XmlQueryParser/JobSearch.xsl	(revision 0)
+++ lucene/src/liatests/tools/XmlQueryParser/JobSearch.xsl	(revision 0)
@@ -0,0 +1,68 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
+  <xsl:template match="/Document">
+    <BooleanQuery>
+      <xsl:if test="type">        <!-- #1 -->
+        <Clause occurs="must">
+          <ConstantScoreQuery>
+            <CachedFilter>
+              <TermsFilter fieldName="type"><xsl:value-of select="type"/></TermsFilter>
+            </CachedFilter>
+          </ConstantScoreQuery>
+        </Clause>
+      </xsl:if>
+      
+      <xsl:if test="description">  <!-- #2 -->
+        <Clause occurs="must">
+          <UserQuery fieldName="description">
+            <xsl:value-of select="description"/>
+          </UserQuery>
+        </Clause>
+      </xsl:if>      
+
+      <xsl:if test="South|North|East|West">  <!-- #3 -->
+        <Clause occurs="must">
+          <ConstantScoreQuery>
+            <BooleanFilter>
+              <xsl:for-each select="South|North|East|West">
+                <Clause occurs="should">
+                  <CachedFilter>
+                    <TermsFilter fieldName="location">
+                      <xsl:value-of select="name()"/>
+                    </TermsFilter>
+                  </CachedFilter>
+                </Clause>
+              </xsl:for-each>                                        
+            </BooleanFilter>
+          </ConstantScoreQuery>
+        </Clause>
+      </xsl:if>
+      
+      <xsl:if test="salaryRange">  <!-- #4 -->
+        <Clause occurs="must">
+          <ConstantScoreQuery>
+            <RangeFilter fieldName="salary" >
+              <xsl:attribute name="lowerTerm">
+                <xsl:value-of 
+                   select='format-number( substring-before(salaryRange,"-"), "000" )' />
+              </xsl:attribute> 
+              <xsl:attribute name="upperTerm">
+                <xsl:value-of 
+                   select='format-number( substring-after(salaryRange,"-"), "000" )' />
+              </xsl:attribute> 
+            </RangeFilter>
+          </ConstantScoreQuery>
+        </Clause>
+      </xsl:if>        
+    </BooleanQuery>
+  </xsl:template>
+</xsl:stylesheet>
+
+<!--
+  #1 If user selects a preference for type of job, apply choice of 
+     permanent/contract filter and cache
+  #2 Use standard Lucene query parser for any job description input
+  #3 If any of the location fields are set OR them ALL in a Boolean
+     filter and cache individual filters
+  #4 Translate salary range into a constant score range filter
+-->

Property changes on: lucene/src/liatests/tools/XmlQueryParser/JobSearch.xsl
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/tools/BerkeleyDbSearcher.java
===================================================================
--- lucene/src/liatests/tools/BerkeleyDbSearcher.java	(revision 0)
+++ lucene/src/liatests/tools/BerkeleyDbSearcher.java	(revision 0)
@@ -0,0 +1,73 @@
+package lia.tools;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import com.sleepycat.db.Environment;
+import com.sleepycat.db.EnvironmentConfig;
+import com.sleepycat.db.Database;
+import com.sleepycat.db.DatabaseType;
+import com.sleepycat.db.DatabaseConfig;
+import com.sleepycat.db.DatabaseException;
+
+import org.apache.lucene.index.Term;
+import org.apache.lucene.search.TopDocs;
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.TermQuery;
+import org.apache.lucene.store.db.DbDirectory;
+
+import java.io.IOException;
+import java.io.File;
+
+// From chapter 9
+public class BerkeleyDbSearcher {
+  public static void main(String[] args) throws IOException, DatabaseException {
+    if (args.length != 1) {
+      System.err.println("Usage: BerkeleyDbSearcher <index dir>");
+      System.exit(-1);
+    }
+    File indexFile = new File(args[0]);
+
+    EnvironmentConfig envConfig = new EnvironmentConfig();
+    DatabaseConfig dbConfig = new DatabaseConfig();
+
+    envConfig.setTransactional(true);
+    envConfig.setInitializeCache(true);
+    envConfig.setInitializeLocking(true);
+    envConfig.setInitializeLogging(true);
+    envConfig.setAllowCreate(true);
+    envConfig.setThreaded(true);
+    dbConfig.setAllowCreate(true);
+    dbConfig.setType(DatabaseType.BTREE);
+
+    Environment env = new Environment(indexFile, envConfig);
+
+    Database index = env.openDatabase(null, "__index__", null, dbConfig);
+    Database blocks = env.openDatabase(null, "__blocks__", null, dbConfig);
+
+    DbDirectory directory = new DbDirectory(null, index, blocks, 0);
+
+    IndexSearcher searcher = new IndexSearcher(directory, true);
+    TopDocs hits = searcher.search(new TermQuery(new Term("contents", "fox")), 10);
+    System.out.println(hits.totalHits + " documents found");
+    searcher.close();
+
+    index.close();
+    blocks.close();
+    env.close();
+  }
+}

Property changes on: lucene/src/liatests/tools/BerkeleyDbSearcher.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/tools/BerkeleyDbIndexer.java
===================================================================
--- lucene/src/liatests/tools/BerkeleyDbIndexer.java	(revision 0)
+++ lucene/src/liatests/tools/BerkeleyDbIndexer.java	(revision 0)
@@ -0,0 +1,103 @@
+package lia.tools;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import com.sleepycat.db.Environment;
+import com.sleepycat.db.EnvironmentConfig;
+import com.sleepycat.db.Database;
+import com.sleepycat.db.DatabaseType;
+import com.sleepycat.db.DatabaseConfig;
+import com.sleepycat.db.Transaction;
+import com.sleepycat.db.DatabaseException;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.apache.lucene.store.db.DbDirectory;
+import org.apache.lucene.index.IndexWriter;
+import org.apache.lucene.analysis.standard.StandardAnalyzer;
+import org.apache.lucene.document.Document;
+import org.apache.lucene.document.Field;
+import org.apache.lucene.util.Version;
+
+
+// From chapter 9
+public class BerkeleyDbIndexer {
+  public static void main(String[] args) throws IOException, DatabaseException {
+    if (args.length != 1) {
+      System.err.println("Usage: BerkeleyDbIndexer <index dir>");
+      System.exit(-1);
+    }
+
+    File indexFile = new File(args[0]);
+
+    if (indexFile.exists()) {
+      File[] files = indexFile.listFiles();
+
+      for (int i = 0; i < files.length; i++)
+        if (files[i].getName().startsWith("__"))
+          files[i].delete();
+      indexFile.delete();
+    }
+
+    indexFile.mkdir();
+
+    EnvironmentConfig envConfig = new EnvironmentConfig();
+    DatabaseConfig dbConfig = new DatabaseConfig();
+
+    envConfig.setTransactional(true);
+    envConfig.setInitializeCache(true);
+    envConfig.setInitializeLocking(true);
+    envConfig.setInitializeLogging(true);
+    envConfig.setAllowCreate(true);
+    envConfig.setThreaded(true);
+    dbConfig.setAllowCreate(true);
+    dbConfig.setType(DatabaseType.BTREE);
+
+    Environment env = new Environment(indexFile, envConfig);
+
+    Transaction txn = env.beginTransaction(null, null);
+    Database index = env.openDatabase(txn, "__index__", null, dbConfig);
+    Database blocks = env.openDatabase(txn, "__blocks__", null, dbConfig);
+    txn.commit();
+
+    txn = env.beginTransaction(null, null);
+    DbDirectory directory = new DbDirectory(txn, index, blocks);
+
+    IndexWriter writer = new IndexWriter(directory,
+                                         new StandardAnalyzer(Version.LUCENE_30),
+                                         true,
+                                         IndexWriter.MaxFieldLength.UNLIMITED);
+
+    Document doc = new Document();
+    doc.add(new Field("contents", "The quick brown fox...", Field.Store.YES, Field.Index.ANALYZED));
+    writer.addDocument(doc);
+
+    writer.optimize();
+    writer.close();
+
+    directory.close();
+    txn.commit();
+
+    index.close();
+    blocks.close();
+    env.close();
+
+    System.out.println("Indexing Complete");
+  }
+}

Property changes on: lucene/src/liatests/tools/BerkeleyDbIndexer.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/tools/CustomFlexibleQueryParser.java
===================================================================
--- lucene/src/liatests/tools/CustomFlexibleQueryParser.java	(revision 0)
+++ lucene/src/liatests/tools/CustomFlexibleQueryParser.java	(revision 0)
@@ -0,0 +1,123 @@
+package lia.tools;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.util.List;
+
+import org.apache.lucene.analysis.Analyzer;
+import org.apache.lucene.search.PhraseQuery;
+import org.apache.lucene.search.TermQuery;
+import org.apache.lucene.search.Query;
+import org.apache.lucene.search.spans.SpanNearQuery;
+import org.apache.lucene.search.spans.SpanTermQuery;
+import org.apache.lucene.messages.MessageImpl;
+import org.apache.lucene.queryParser.core.processors.QueryNodeProcessorImpl;
+import org.apache.lucene.queryParser.core.nodes.FuzzyQueryNode;
+import org.apache.lucene.queryParser.standard.nodes.WildcardQueryNode;
+import org.apache.lucene.queryParser.core.nodes.FieldQueryNode;
+import org.apache.lucene.queryParser.core.nodes.QueryNode;
+import org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline;
+import org.apache.lucene.queryParser.core.builders.QueryTreeBuilder;
+import org.apache.lucene.queryParser.core.QueryNodeException;
+import org.apache.lucene.queryParser.standard.StandardQueryParser;
+import org.apache.lucene.queryParser.standard.builders.StandardQueryBuilder;
+import org.apache.lucene.queryParser.core.nodes.TokenizedPhraseQueryNode;
+import org.apache.lucene.queryParser.core.nodes.SlopQueryNode;
+import org.apache.lucene.search.MultiPhraseQuery;
+
+// From chapter 9
+public class CustomFlexibleQueryParser extends StandardQueryParser {
+
+  public CustomFlexibleQueryParser(Analyzer analyzer) {
+    super(analyzer);
+
+    QueryNodeProcessorPipeline processors = (QueryNodeProcessorPipeline) getQueryNodeProcessor();
+    processors.addProcessor(new NoFuzzyOrWildcardQueryProcessor());     //A
+
+    QueryTreeBuilder builders = (QueryTreeBuilder) getQueryBuilder();    //B
+    builders.setBuilder(TokenizedPhraseQueryNode.class, new SpanNearPhraseQueryBuilder());//B
+    builders.setBuilder(SlopQueryNode.class, new SlopQueryNodeBuilder());//B
+  }
+
+  private final class NoFuzzyOrWildcardQueryProcessor extends QueryNodeProcessorImpl {
+    protected QueryNode preProcessNode(QueryNode node) throws QueryNodeException {
+      if (node instanceof FuzzyQueryNode || node instanceof WildcardQueryNode) {   //C
+        throw new QueryNodeException(new MessageImpl("no"));
+      }
+      return node;
+    }
+    protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {
+      return node;
+    }
+    protected List<QueryNode> setChildrenOrder(List<QueryNode> children) {
+      return children;
+    }
+  }
+
+  private class SpanNearPhraseQueryBuilder implements StandardQueryBuilder {
+    public Query build(QueryNode queryNode) throws QueryNodeException {
+      TokenizedPhraseQueryNode phraseNode = (TokenizedPhraseQueryNode) queryNode;
+      PhraseQuery phraseQuery = new PhraseQuery();
+
+      List<QueryNode> children = phraseNode.getChildren();   //D
+
+      SpanTermQuery[] clauses;
+      if (children != null) {
+        int numTerms = children.size();
+        clauses = new SpanTermQuery[numTerms];
+        for (int i=0;i<numTerms;i++) {
+          FieldQueryNode termNode = (FieldQueryNode) children.get(i);
+          TermQuery termQuery = (TermQuery) termNode
+            .getTag(QueryTreeBuilder.QUERY_TREE_BUILDER_TAGID);
+          clauses[i] = new SpanTermQuery(termQuery.getTerm());
+        }
+      } else {
+        clauses = new SpanTermQuery[0];
+      }
+        
+      return new SpanNearQuery(clauses, phraseQuery.getSlop(), true); //E
+    }
+  }
+
+  public class SlopQueryNodeBuilder implements StandardQueryBuilder {  //F
+
+    public Query build(QueryNode queryNode) throws QueryNodeException {
+      SlopQueryNode phraseSlopNode = (SlopQueryNode) queryNode;
+      
+      Query query = (Query) phraseSlopNode.getChild().getTag(
+                           QueryTreeBuilder.QUERY_TREE_BUILDER_TAGID);
+      
+      if (query instanceof PhraseQuery) {
+        ((PhraseQuery) query).setSlop(phraseSlopNode.getValue());
+      } else if (query instanceof MultiPhraseQuery) {
+        ((MultiPhraseQuery) query).setSlop(phraseSlopNode.getValue());
+      }
+
+      return query;
+    }
+  }
+}
+
+/*
+  #A Install our custom node processor
+  #B Install our two custom query builders
+  #C Prevent Fuzzy and Wildcard queries
+  #D Pull all terms for phrase
+  #E Create SpanNearQuery
+  #F Override slop query node
+*/

Property changes on: lucene/src/liatests/tools/CustomFlexibleQueryParser.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lucene/src/liatests/tools/FlexibleQueryParserTest.java
===================================================================
--- lucene/src/liatests/tools/FlexibleQueryParserTest.java	(revision 0)
+++ lucene/src/liatests/tools/FlexibleQueryParserTest.java	(revision 0)
@@ -0,0 +1,74 @@
+package lia.tools;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import junit.framework.TestCase;
+import org.apache.lucene.analysis.standard.*;
+import org.apache.lucene.analysis.*;
+import org.apache.lucene.search.*;
+import org.apache.lucene.search.spans.*;
+import org.apache.lucene.util.*;
+import org.apache.lucene.queryParser.standard.StandardQueryParser;
+import org.apache.lucene.queryParser.core.QueryNodeException;
+
+// From chapter 9
+public class FlexibleQueryParserTest extends TestCase {
+
+  public void testSimple() throws Exception {
+    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_30);
+    StandardQueryParser parser = new StandardQueryParser(analyzer);
+    Query q = null;
+    try {
+      q = parser.parse("(agile OR extreme) AND methodology", "subject");
+    } catch (QueryNodeException exc) {
+      // TODO: handle exc
+    }
+    System.out.println("parsed " + q);
+  }
+
+  public void testNoFuzzyOrWildcard() throws Exception {
+    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_30);
+    StandardQueryParser parser = new CustomFlexibleQueryParser(analyzer);
+    try {
+      parser.parse("agil*", "subject");
+      fail("didn't hit expected exception");
+    } catch (QueryNodeException exc) {
+      // expected
+    }
+
+    try {
+      parser.parse("agil~0.8", "subject");
+      fail("didn't hit expected exception");
+    } catch (QueryNodeException exc) {
+      // expected
+    }
+  }
+
+  public void testPhraseQuery() throws Exception {
+    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_30);
+    StandardQueryParser parser = new CustomFlexibleQueryParser(analyzer);
+
+    Query query = parser.parse("singleTerm", "subject");
+    assertTrue("TermQuery", query instanceof TermQuery);
+
+    query = parser.parse("\"a phrase test\"", "subject");
+    System.out.println("got query=" + query);
+    assertTrue("SpanNearQuery", query instanceof SpanNearQuery);
+  }
+
+}

Property changes on: lucene/src/liatests/tools/FlexibleQueryParserTest.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lucene/src/liatests/tools/BooksMoreLikeThis.java
===================================================================
--- lucene/src/liatests/tools/BooksMoreLikeThis.java	(revision 0)
+++ lucene/src/liatests/tools/BooksMoreLikeThis.java	(revision 0)
@@ -0,0 +1,79 @@
+
+package lia.tools;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.search.Query;
+import org.apache.lucene.search.TopDocs;
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.store.FSDirectory;
+import org.apache.lucene.document.Document;
+import org.apache.lucene.search.similar.MoreLikeThis;
+import org.apache.lucene.index.IndexReader;
+
+import java.io.File;
+
+// From chapter 8
+public class BooksMoreLikeThis {
+  public static void main(String[] args) throws Throwable {
+
+    String indexDir = System.getProperty("index.dir");
+    FSDirectory directory = FSDirectory.open(new File(indexDir));
+    IndexReader reader = IndexReader.open(directory);
+
+    IndexSearcher searcher = new IndexSearcher(reader);
+
+    int numDocs = reader.maxDoc();
+
+    MoreLikeThis mlt = new MoreLikeThis(reader);               // #A
+    mlt.setFieldNames(new String[] {"title", "author"});
+    mlt.setMinTermFreq(1);                                     // #B
+    mlt.setMinDocFreq(1);
+
+    for (int docID = 0; docID < numDocs; docID++) {            // #C
+      System.out.println();
+      Document doc = reader.document(docID);
+      System.out.println(doc.get("title"));
+
+      Query query = mlt.like(docID);                           // #D
+      System.out.println("  query=" + query);
+
+      TopDocs similarDocs = searcher.search(query, 10);        
+      if (similarDocs.totalHits == 0)
+        System.out.println("  None like this");
+      for(int i=0;i<similarDocs.scoreDocs.length;i++) {
+        if (similarDocs.scoreDocs[i].doc != docID) {           // #E
+          doc = reader.document(similarDocs.scoreDocs[i].doc);
+          System.out.println("  -> " + doc.getField("title").stringValue());
+        }
+      }
+    }
+
+    searcher.close();
+    reader.close();
+    directory.close();
+  }
+}
+
+/*
+  #A Instantiate MoreLikeThis
+  #B Lower default minimums
+  #C Iterate through all docs in the index
+  #D Build query to find similar documents
+  #E Don't show the same document
+*/

Property changes on: lucene/src/liatests/tools/BooksMoreLikeThis.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/searching/QueryParserTest.java
===================================================================
--- lucene/src/liatests/searching/QueryParserTest.java	(revision 0)
+++ lucene/src/liatests/searching/QueryParserTest.java	(revision 0)
@@ -0,0 +1,200 @@
+package lia.searching;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import junit.framework.TestCase;
+
+import lia.common.TestUtil;
+
+import org.apache.lucene.analysis.Analyzer;
+import org.apache.lucene.analysis.WhitespaceAnalyzer;
+import org.apache.lucene.analysis.standard.StandardAnalyzer;
+import org.apache.lucene.index.Term;
+import org.apache.lucene.queryParser.ParseException;
+import org.apache.lucene.queryParser.QueryParser;
+import org.apache.lucene.search.BooleanQuery;
+import org.apache.lucene.search.FuzzyQuery;
+import org.apache.lucene.search.TopDocs;
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.Query;
+import org.apache.lucene.search.TermRangeQuery;
+import org.apache.lucene.search.TermQuery;
+import org.apache.lucene.search.BooleanClause;
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.util.Version;
+
+// From chapter 3
+public class QueryParserTest extends TestCase {
+
+  private Analyzer analyzer;
+  private Directory dir;
+  private IndexSearcher searcher;
+
+  protected void setUp() throws Exception {
+    analyzer = new WhitespaceAnalyzer();
+    dir = TestUtil.getBookIndexDirectory();
+    searcher = new IndexSearcher(dir);
+  }
+
+  protected void tearDown() throws Exception {
+    searcher.close();
+    dir.close();
+  }
+
+  public void testToString() throws Exception {
+    BooleanQuery query = new BooleanQuery();
+    query.add(new FuzzyQuery(new Term("field", "kountry")),
+              BooleanClause.Occur.MUST);
+    query.add(new TermQuery(new Term("title", "western")),
+              BooleanClause.Occur.SHOULD);
+    assertEquals("both kinds", "+kountry~0.5 title:western",
+                 query.toString("field"));
+  }
+
+  public void testPrefixQuery() throws Exception {
+    QueryParser parser = new QueryParser(Version.LUCENE_30,
+                                         "category",
+                                         new StandardAnalyzer(Version.LUCENE_30));
+    parser.setLowercaseExpandedTerms(false);
+    System.out.println(parser.parse("/Computers/technology*").toString("category"));
+  }
+
+  public void testFuzzyQuery() throws Exception {
+    QueryParser parser = new QueryParser(Version.LUCENE_30,
+                                         "subject", analyzer);
+    Query query = parser.parse("kountry~");
+    System.out.println("fuzzy: " + query);
+
+    query = parser.parse("kountry~0.7");
+    System.out.println("fuzzy 2: " + query);
+  }
+
+  public void testGrouping() throws Exception {
+    Query query = new QueryParser(
+        Version.LUCENE_30,
+        "subject",
+        analyzer).parse("(agile OR extreme) AND methodology");
+    TopDocs matches = searcher.search(query, 10);
+
+    assertTrue(TestUtil.hitsIncludeTitle(searcher, matches,
+                                         "Extreme Programming Explained"));
+    assertTrue(TestUtil.hitsIncludeTitle(searcher,
+                                         matches,
+                                         "The Pragmatic Programmer"));
+  }
+
+  public void testTermQuery() throws Exception {
+    QueryParser parser = new QueryParser(Version.LUCENE_30,
+                                         "subject", analyzer);
+    Query query = parser.parse("computers");
+    System.out.println("term: " + query);
+  }
+
+  public void testTermRangeQuery() throws Exception {
+    Query query = new QueryParser(Version.LUCENE_30,                        //A
+                                  "subject", analyzer).parse("title2:[Q TO V]"); //A
+    assertTrue(query instanceof TermRangeQuery);
+
+    TopDocs matches = searcher.search(query, 10);
+    assertTrue(TestUtil.hitsIncludeTitle(searcher, matches,
+                      "Tapestry in Action"));
+
+    query = new QueryParser(Version.LUCENE_30, "subject", analyzer)  //B
+                            .parse("title2:{Q TO \"Tapestry in Action\"}");    //B
+    matches = searcher.search(query, 10);
+    assertFalse(TestUtil.hitsIncludeTitle(searcher, matches,  // C
+                      "Tapestry in Action"));
+  }
+  /*
+    #A Verify inclusive range
+    #B Verify exclusive range
+    #C Exclude Mindstorms book
+  */
+
+  public void testPhraseQuery() throws Exception {
+    Query q = new QueryParser(Version.LUCENE_30,
+                              "field",
+                              new StandardAnalyzer(
+                                Version.LUCENE_30))
+                .parse("\"This is Some Phrase*\"");
+    assertEquals("analyzed",
+        "\"? ? some phrase\"", q.toString("field"));
+
+    q = new QueryParser(Version.LUCENE_30,
+                        "field", analyzer).parse("\"term\"");
+    assertTrue("reduced to TermQuery", q instanceof TermQuery);
+  }
+
+  public void testSlop() throws Exception {
+    Query q = new QueryParser(Version.LUCENE_30,
+                              "field", analyzer)
+            .parse("\"exact phrase\"");
+    assertEquals("zero slop",
+        "\"exact phrase\"", q.toString("field"));
+
+    QueryParser qp = new QueryParser(Version.LUCENE_30,
+                                     "field", analyzer);
+    qp.setPhraseSlop(5);
+    q = qp.parse("\"sloppy phrase\"");
+    assertEquals("sloppy, implicitly",
+        "\"sloppy phrase\"~5", q.toString("field"));
+  }
+
+  public void testLowercasing() throws Exception {
+    Query q = new QueryParser(Version.LUCENE_30,
+                              "field", analyzer).parse("PrefixQuery*");
+    assertEquals("lowercased",
+        "prefixquery*", q.toString("field"));
+
+    QueryParser qp = new QueryParser(Version.LUCENE_30,
+                                     "field", analyzer);
+    qp.setLowercaseExpandedTerms(false);
+    q = qp.parse("PrefixQuery*");
+    assertEquals("not lowercased",
+        "PrefixQuery*", q.toString("field"));
+  }
+
+  public void testWildcard() {
+    try {
+      new QueryParser(Version.LUCENE_30,
+                      "field", analyzer).parse("*xyz");
+      fail("Leading wildcard character should not be allowed");
+    } catch (ParseException expected) {
+      assertTrue(true);
+    }
+  }
+
+  public void testBoost() throws Exception {
+    Query q = new QueryParser(Version.LUCENE_30,
+                              "field", analyzer).parse("term^2");
+    assertEquals("term^2.0", q.toString("field"));
+  }
+
+  public void testParseException() {
+    try {
+      new QueryParser(Version.LUCENE_30,
+                      "contents", analyzer).parse("^&#");
+    } catch (ParseException expected) {
+      // expression is invalid, as expected
+      assertTrue(true);
+      return;
+    }
+
+    fail("ParseException expected, but not thrown");
+  }
+}

Property changes on: lucene/src/liatests/searching/QueryParserTest.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lucene/src/liatests/searching/PrefixQueryTest.java
===================================================================
--- lucene/src/liatests/searching/PrefixQueryTest.java	(revision 0)
+++ lucene/src/liatests/searching/PrefixQueryTest.java	(revision 0)
@@ -0,0 +1,57 @@
+package lia.searching;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import junit.framework.TestCase;
+
+import lia.common.TestUtil;
+
+import org.apache.lucene.index.Term;
+import org.apache.lucene.search.TopDocs;
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.PrefixQuery;
+import org.apache.lucene.search.TermQuery;
+import org.apache.lucene.store.Directory;
+
+// From chapter 3
+public class PrefixQueryTest extends TestCase {
+  public void testPrefix() throws Exception {
+    Directory dir = TestUtil.getBookIndexDirectory();
+    IndexSearcher searcher = new IndexSearcher(dir);
+
+    Term term = new Term("category",                              //#A
+                         "/technology/computers/programming");    //#A
+    PrefixQuery query = new PrefixQuery(term);                    //#A
+
+    TopDocs matches = searcher.search(query, 10);                 //#A
+    int programmingAndBelow = matches.totalHits;
+
+    matches = searcher.search(new TermQuery(term), 10);           //#B
+    int justProgramming = matches.totalHits;
+
+    assertTrue(programmingAndBelow > justProgramming);
+    searcher.close();
+    dir.close();
+  }
+}
+
+/*
+  #A Search, including subcategories
+  #B Search, without subcategories
+*/
+

Property changes on: lucene/src/liatests/searching/PrefixQueryTest.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/searching/NumericRangeQueryTest.java
===================================================================
--- lucene/src/liatests/searching/NumericRangeQueryTest.java	(revision 0)
+++ lucene/src/liatests/searching/NumericRangeQueryTest.java	(revision 0)
@@ -0,0 +1,68 @@
+package lia.searching;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import junit.framework.TestCase;
+
+import lia.common.TestUtil;
+
+import org.apache.lucene.search.TopDocs;
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.NumericRangeQuery;
+import org.apache.lucene.store.Directory;
+
+// From chapter 3
+public class NumericRangeQueryTest extends TestCase {
+  public void testInclusive() throws Exception {
+    Directory dir = TestUtil.getBookIndexDirectory();
+    IndexSearcher searcher = new IndexSearcher(dir);
+    // pub date of TTC was September 2006
+    NumericRangeQuery query = NumericRangeQuery.newIntRange("pubmonth",
+                                                            200605,
+                                                            200609,
+                                                            true,
+                                                            true);
+
+    TopDocs matches = searcher.search(query, 10);
+    /*
+    for(int i=0;i<matches.totalHits;i++) {
+      System.out.println("match " + i + ": " + searcher.doc(matches.scoreDocs[i].doc).get("author"));
+    }
+    */
+    assertEquals(1, matches.totalHits);
+    searcher.close();
+    dir.close();
+  }
+
+  public void testExclusive() throws Exception {
+    Directory dir = TestUtil.getBookIndexDirectory();
+    IndexSearcher searcher = new IndexSearcher(dir);
+
+    // pub date of TTC was September 2006
+    NumericRangeQuery query = NumericRangeQuery.newIntRange("pubmonth",
+                                                            200605,
+                                                            200609,
+                                                            false,
+                                                            false);
+    TopDocs matches = searcher.search(query, 10);
+    assertEquals(0, matches.totalHits);
+    searcher.close();
+    dir.close();
+  }
+
+}

Property changes on: lucene/src/liatests/searching/NumericRangeQueryTest.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/searching/BasicSearchingTest.java
===================================================================
--- lucene/src/liatests/searching/BasicSearchingTest.java	(revision 0)
+++ lucene/src/liatests/searching/BasicSearchingTest.java	(revision 0)
@@ -0,0 +1,106 @@
+package lia.searching;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import junit.framework.TestCase;
+
+import lia.common.TestUtil;
+
+import org.apache.lucene.analysis.SimpleAnalyzer;
+import org.apache.lucene.document.Document;
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.index.Term;
+import org.apache.lucene.queryParser.QueryParser;
+import org.apache.lucene.search.TopDocs;
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.Query;
+import org.apache.lucene.search.TermQuery;
+import org.apache.lucene.util.Version;
+
+// From chapter 3
+public class BasicSearchingTest extends TestCase {
+
+  public void testTerm() throws Exception {
+    Directory dir = TestUtil.getBookIndexDirectory(); //A
+    IndexSearcher searcher = new IndexSearcher(dir);  //B
+
+    Term t = new Term("subject", "ant");
+    Query query = new TermQuery(t);
+    TopDocs docs = searcher.search(query, 10);
+    assertEquals("Ant in Action",                //C
+                 1, docs.totalHits);                         //C
+
+    t = new Term("subject", "junit");
+    docs = searcher.search(new TermQuery(t), 10);
+    assertEquals("Ant in Action, " +                                 //D
+                 "JUnit in Action, Second Edition",                  //D
+                 2, docs.totalHits);                                 //D
+
+    searcher.close();
+    dir.close();
+  }
+
+  /*
+    #A Obtain directory from TestUtil
+    #B Create IndexSearcher
+    #C Confirm one hit for "ant"
+    #D Confirm two hits for "junit"
+  */
+
+  public void testKeyword() throws Exception {
+    Directory dir = TestUtil.getBookIndexDirectory();
+    IndexSearcher searcher = new IndexSearcher(dir);
+
+    Term t = new Term("isbn", "9781935182023");
+    Query query = new TermQuery(t);
+    TopDocs docs = searcher.search(query, 10);
+    assertEquals("JUnit in Action, Second Edition",
+                 1, docs.totalHits);
+
+    searcher.close();
+    dir.close();
+  }
+
+  public void testQueryParser() throws Exception {
+    Directory dir = TestUtil.getBookIndexDirectory();
+    IndexSearcher searcher = new IndexSearcher(dir);
+
+    QueryParser parser = new QueryParser(Version.LUCENE_30,      //A
+                                         "contents",                  //A
+                                         new SimpleAnalyzer());       //A
+
+    Query query = parser.parse("+JUNIT +ANT -MOCK");                  //B
+    TopDocs docs = searcher.search(query, 10);
+    assertEquals(1, docs.totalHits);
+    Document d = searcher.doc(docs.scoreDocs[0].doc);
+    assertEquals("Ant in Action", d.get("title"));
+
+    query = parser.parse("mock OR junit");                            //B
+    docs = searcher.search(query, 10);
+    assertEquals("Ant in Action, " +
+                 "JUnit in Action, Second Edition",
+                 2, docs.totalHits);
+
+    searcher.close();
+    dir.close();
+  }
+  /*
+#A Create QueryParser
+#B Parse user's text
+  */
+}

Property changes on: lucene/src/liatests/searching/BasicSearchingTest.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lucene/src/liatests/searching/BooleanQueryTest.java
===================================================================
--- lucene/src/liatests/searching/BooleanQueryTest.java	(revision 0)
+++ lucene/src/liatests/searching/BooleanQueryTest.java	(revision 0)
@@ -0,0 +1,97 @@
+package lia.searching;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import junit.framework.TestCase;
+import lia.common.TestUtil;
+
+import org.apache.lucene.index.Term;
+import org.apache.lucene.search.BooleanQuery;
+import org.apache.lucene.search.TopDocs;
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.Query;
+import org.apache.lucene.search.NumericRangeQuery;
+import org.apache.lucene.search.TermQuery;
+import org.apache.lucene.search.BooleanClause;
+import org.apache.lucene.store.Directory;
+
+// From chapter 3
+public class BooleanQueryTest extends TestCase {
+  public void testAnd() throws Exception {
+    TermQuery searchingBooks =
+      new TermQuery(new Term("subject","search"));  //#1
+
+    Query books2010 =                       //#2
+      NumericRangeQuery.newIntRange("pubmonth", 201001,       //#2
+                                    201012,                   //#2
+                                    true, true);                //#2
+
+    BooleanQuery searchingBooks2010 = new BooleanQuery();              //#3
+    searchingBooks2010.add(searchingBooks, BooleanClause.Occur.MUST);  //#3
+    searchingBooks2010.add(books2010, BooleanClause.Occur.MUST);       //#3
+
+    Directory dir = TestUtil.getBookIndexDirectory();
+    IndexSearcher searcher = new IndexSearcher(dir);
+    TopDocs matches = searcher.search(searchingBooks2010, 10);
+
+    assertTrue(TestUtil.hitsIncludeTitle(searcher, matches,
+                                 "Lucene in Action, Second Edition"));
+    searcher.close();
+    dir.close();
+  }
+
+/*
+#1 Match books with subject “search”
+#2 Match books in 2004
+#3 Combines two queries
+*/
+
+  public void testOr() throws Exception {
+    TermQuery methodologyBooks = new TermQuery(                       // #1
+               new Term("category",                                   // #1
+                 "/technology/computers/programming/methodology"));   // #1
+
+    TermQuery easternPhilosophyBooks = new TermQuery(                 // #2
+        new Term("category",                                          // #2
+            "/philosophy/eastern"));                                  // #2
+
+    BooleanQuery enlightenmentBooks = new BooleanQuery();             // #3
+    enlightenmentBooks.add(methodologyBooks,                          // #3
+                           BooleanClause.Occur.SHOULD);               // #3
+    enlightenmentBooks.add(easternPhilosophyBooks,                    // #3
+                           BooleanClause.Occur.SHOULD);               // #3
+
+    Directory dir = TestUtil.getBookIndexDirectory();
+    IndexSearcher searcher = new IndexSearcher(dir);
+    TopDocs matches = searcher.search(enlightenmentBooks, 10);
+    System.out.println("or = " + enlightenmentBooks);
+
+    assertTrue(TestUtil.hitsIncludeTitle(searcher, matches,
+                                         "Extreme Programming Explained"));
+    assertTrue(TestUtil.hitsIncludeTitle(searcher, matches,
+                                         "Tao Te Ching \u9053\u5FB7\u7D93"));
+    searcher.close();
+    dir.close();
+  }
+
+  /*
+#1 Match 1st category
+#2 Match 2nd category
+#3 Combine
+   */
+}

Property changes on: lucene/src/liatests/searching/BooleanQueryTest.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/searching/Fragments.java
===================================================================
--- lucene/src/liatests/searching/Fragments.java	(revision 0)
+++ lucene/src/liatests/searching/Fragments.java	(revision 0)
@@ -0,0 +1,85 @@
+package lia.searching;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import junit.framework.TestCase;
+
+import java.io.File;
+
+import lia.common.TestUtil;
+
+import org.apache.lucene.analysis.SimpleAnalyzer;
+import org.apache.lucene.analysis.standard.StandardAnalyzer;
+import org.apache.lucene.document.Document;
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.store.FSDirectory;
+import org.apache.lucene.index.Term;
+import org.apache.lucene.queryParser.*;
+import org.apache.lucene.search.*;
+import org.apache.lucene.analysis.*;
+import org.apache.lucene.index.*;
+import org.apache.lucene.util.*;
+
+// From chapter 3
+public class Fragments {
+
+  public void openSearcher() throws Exception {
+    Directory dir = FSDirectory.open(new File("/path/to/index"));
+    IndexReader reader = IndexReader.open(dir);
+    IndexSearcher searcher = new IndexSearcher(reader);
+  }
+
+  public void nrtReader() throws Exception {
+    IndexReader reader = null;
+    IndexSearcher searcher;
+    // START
+    IndexReader newReader = reader.reopen();
+    if (reader != newReader) {
+      reader.close();
+      reader = newReader;
+      searcher = new IndexSearcher(reader);
+    }
+    // END
+  }
+
+  public void testSearchSigs() throws Exception {
+    Query query = null;
+    Filter filter = null;
+    TopDocs hits;
+    TopFieldDocs fieldHits;
+    Sort sort = null;
+    Collector collector = null;
+    int n = 10;
+    IndexSearcher searcher = null;
+
+    hits = searcher.search(query, n);
+    hits = searcher.search(query, filter, n);
+    fieldHits = searcher.search(query, filter, n, sort);
+    searcher.search(query, collector);
+    searcher.search(query, filter, collector);
+  }
+
+  public void queryParserOperator() throws Exception {
+    Analyzer analyzer = null;
+    // START
+    QueryParser parser = new QueryParser(Version.LUCENE_30,
+                                         "contents", analyzer);
+    parser.setDefaultOperator(QueryParser.AND_OPERATOR);
+    // END
+  }
+}
\ No newline at end of file

Property changes on: lucene/src/liatests/searching/Fragments.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/searching/Explainer.java
===================================================================
--- lucene/src/liatests/searching/Explainer.java	(revision 0)
+++ lucene/src/liatests/searching/Explainer.java	(revision 0)
@@ -0,0 +1,71 @@
+package lia.searching;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.analysis.SimpleAnalyzer;
+import org.apache.lucene.document.Document;
+import org.apache.lucene.queryParser.QueryParser;
+import org.apache.lucene.search.Explanation;
+import org.apache.lucene.search.TopDocs;
+import org.apache.lucene.search.ScoreDoc;
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.Query;
+import org.apache.lucene.store.FSDirectory;
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.util.Version;
+
+import java.io.File;
+
+// From chapter 3
+public class Explainer {
+  public static void main(String[] args) throws Exception {
+    if (args.length != 2) {
+      System.err.println("Usage: Explainer <index dir> <query>");
+      System.exit(1);
+    }
+
+    String indexDir = args[0];
+    String queryExpression = args[1];
+
+    Directory directory = FSDirectory.open(new File(indexDir));
+    QueryParser parser = new QueryParser(Version.LUCENE_30,
+                                         "contents", new SimpleAnalyzer());
+    Query query = parser.parse(queryExpression);
+
+    System.out.println("Query: " + queryExpression);
+
+    IndexSearcher searcher = new IndexSearcher(directory);
+    TopDocs topDocs = searcher.search(query, 10);
+
+    for (ScoreDoc match : topDocs.scoreDocs) {
+      Explanation explanation
+         = searcher.explain(query, match.doc);     //#A
+
+      System.out.println("----------");
+      Document doc = searcher.doc(match.doc);
+      System.out.println(doc.get("title"));
+      System.out.println(explanation.toString());  //#B
+    }
+    searcher.close();
+    directory.close();
+  }
+}
+/*
+#A Generate Explanation
+#B Output Explanation
+*/

Property changes on: lucene/src/liatests/searching/Explainer.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lucene/src/liatests/searching/PhraseQueryTest.java
===================================================================
--- lucene/src/liatests/searching/PhraseQueryTest.java	(revision 0)
+++ lucene/src/liatests/searching/PhraseQueryTest.java	(revision 0)
@@ -0,0 +1,106 @@
+package lia.searching;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import junit.framework.TestCase;
+import org.apache.lucene.analysis.WhitespaceAnalyzer;
+import org.apache.lucene.document.Document;
+import org.apache.lucene.document.Field;
+import org.apache.lucene.index.IndexWriter;
+import org.apache.lucene.index.Term;
+import org.apache.lucene.search.TopDocs;
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.PhraseQuery;
+import org.apache.lucene.store.RAMDirectory;
+import org.apache.lucene.store.Directory;
+
+import java.io.IOException;
+
+// From chapter 3
+public class PhraseQueryTest extends TestCase {
+  private Directory dir;
+  private IndexSearcher searcher;
+
+  protected void setUp() throws IOException {
+    dir = new RAMDirectory();
+    IndexWriter writer = new IndexWriter(dir,
+                                         new WhitespaceAnalyzer(),
+                                         IndexWriter.MaxFieldLength.UNLIMITED);
+    Document doc = new Document();
+    doc.add(new Field("field",                                    // 1
+              "the quick brown fox jumped over the lazy dog",     // 1
+              Field.Store.YES,                                    // 1
+              Field.Index.ANALYZED));                             // 1
+    writer.addDocument(doc);
+    writer.close();
+
+    searcher = new IndexSearcher(dir);
+  }
+
+  protected void tearDown() throws IOException {
+    searcher.close();
+    dir.close();
+  }
+
+  private boolean matched(String[] phrase, int slop)
+      throws IOException {
+    PhraseQuery query = new PhraseQuery();              // 2
+    query.setSlop(slop);                                // 2
+
+    for (String word : phrase) {             // 3
+      query.add(new Term("field", word));          // 3
+    }                                                   // 3
+
+    TopDocs matches = searcher.search(query, 10);
+    return matches.totalHits > 0;
+  }
+  /*
+    #1 Add a single test document
+    #2 Create initial PhraseQuery
+    #3 Add sequential phrase terms
+   */
+  public void testSlopComparison() throws Exception {
+    String[] phrase = new String[] {"quick", "fox"};
+
+    assertFalse("exact phrase not found", matched(phrase, 0));
+
+    assertTrue("close enough", matched(phrase, 1));
+  }
+
+  public void testReverse() throws Exception {
+    String[] phrase = new String[] {"fox", "quick"};
+
+    assertFalse("hop flop", matched(phrase, 2));
+    assertTrue("hop hop slop", matched(phrase, 3));
+  }
+
+  public void testMultiple() throws Exception {
+    assertFalse("not close enough",
+        matched(new String[] {"quick", "jumped", "lazy"}, 3));
+
+    assertTrue("just enough",
+        matched(new String[] {"quick", "jumped", "lazy"}, 4));
+
+    assertFalse("almost but not quite",
+        matched(new String[] {"lazy", "jumped", "quick"}, 7));
+
+    assertTrue("bingo",
+        matched(new String[] {"lazy", "jumped", "quick"}, 8));
+  }
+
+}

Property changes on: lucene/src/liatests/searching/PhraseQueryTest.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lucene/src/liatests/searching/NearRealTimeTest.java
===================================================================
--- lucene/src/liatests/searching/NearRealTimeTest.java	(revision 0)
+++ lucene/src/liatests/searching/NearRealTimeTest.java	(revision 0)
@@ -0,0 +1,95 @@
+package lia.searching;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.util.Version;
+import org.apache.lucene.store.*;
+import org.apache.lucene.index.*;
+import org.apache.lucene.search.*;
+import org.apache.lucene.document.*;
+import org.apache.lucene.analysis.standard.StandardAnalyzer;
+
+import junit.framework.TestCase;
+
+// From chapter 3
+public class NearRealTimeTest extends TestCase {
+  public void testNearRealTime() throws Exception {
+    Directory dir = new RAMDirectory();
+    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(Version.LUCENE_30), IndexWriter.MaxFieldLength.UNLIMITED);
+    for(int i=0;i<10;i++) {
+      Document doc = new Document();
+      doc.add(new Field("id", ""+i, Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS));
+      doc.add(new Field("text", "aaa", Field.Store.NO, Field.Index.ANALYZED));
+      writer.addDocument(doc);
+    }
+    IndexReader reader = writer.getReader();                 // #1
+    IndexSearcher searcher = new IndexSearcher(reader);      // #A
+
+    Query query = new TermQuery(new Term("text", "aaa"));
+    TopDocs docs = searcher.search(query, 1);
+    assertEquals(10, docs.totalHits);                        // #B
+
+    writer.deleteDocuments(new Term("id", "7"));             // #2
+
+    Document doc = new Document();                           // #3
+    doc.add(new Field("id",                                  // #3
+                      "11",                                  // #3
+                      Field.Store.NO,                        // #3
+                      Field.Index.NOT_ANALYZED_NO_NORMS));   // #3
+    doc.add(new Field("text",                                // #3
+                      "bbb",                                 // #3
+                      Field.Store.NO,                        // #3
+                      Field.Index.ANALYZED));                // #3
+    writer.addDocument(doc);                                 // #3
+    
+    IndexReader newReader = reader.reopen();                 // #4
+    assertFalse(reader == newReader);                        // #5
+    reader.close();                                          // #6
+    searcher = new IndexSearcher(newReader);              
+
+    TopDocs hits = searcher.search(query, 10);               // #7
+    assertEquals(9, hits.totalHits);                         // #7
+
+    query = new TermQuery(new Term("text", "bbb"));          // #8
+    hits = searcher.search(query, 1);                        // #8
+    assertEquals(1, hits.totalHits);                         // #8
+
+    newReader.close();
+    writer.close();
+  }
+}
+
+/*
+  #1 Create near-real-time reader
+  #A Wrap reader in IndexSearcher
+  #B Search returns 10 hits
+  #2 Delete 1 document
+  #3 Add 1 document
+  #4 Reopen reader
+  #5 Confirm reader is new
+  #6 Close old reader
+  #7 Verify 9 hits now
+  #8 Confirm new document matched
+*/
+
+/*
+#1 IndexWriter returns a reader that's able to search all previously committed changes to the index, plus any uncommitted changes.  The returned reader is always readOnly.
+#2,#3 We make changes to the index, but do not commit them.
+#4,#5,#6 Ask the reader to reopen.  Note that this simply re-calls writer.getReader again under the hood.  Because we made changes, the newReader will be different from the old one so we must close the old one.
+#7, #8 The changes made with the writer are reflected in new searches.
+*/
\ No newline at end of file

Property changes on: lucene/src/liatests/searching/NearRealTimeTest.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/searching/TermRangeQueryTest.java
===================================================================
--- lucene/src/liatests/searching/TermRangeQueryTest.java	(revision 0)
+++ lucene/src/liatests/searching/TermRangeQueryTest.java	(revision 0)
@@ -0,0 +1,46 @@
+package lia.searching;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import junit.framework.TestCase;
+
+import lia.common.TestUtil;
+
+import org.apache.lucene.search.TopDocs;
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.TermRangeQuery;
+import org.apache.lucene.store.Directory;
+
+// From chapter 3
+public class TermRangeQueryTest extends TestCase {
+  public void testTermRangeQuery() throws Exception {
+    Directory dir = TestUtil.getBookIndexDirectory();
+    IndexSearcher searcher = new IndexSearcher(dir);
+    TermRangeQuery query = new TermRangeQuery("title2", "d", "j", true, true);
+
+    TopDocs matches = searcher.search(query, 100);
+    /*
+    for(int i=0;i<matches.totalHits;i++) {
+      System.out.println("match " + i + ": " + searcher.doc(matches.scoreDocs[i].doc).get("title2"));
+    }
+    */
+    assertEquals(3, matches.totalHits);
+    searcher.close();
+    dir.close();
+  }
+}

Property changes on: lucene/src/liatests/searching/TermRangeQueryTest.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/searching/ScoreTest.java
===================================================================
--- lucene/src/liatests/searching/ScoreTest.java	(revision 0)
+++ lucene/src/liatests/searching/ScoreTest.java	(revision 0)
@@ -0,0 +1,158 @@
+package lia.searching;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import junit.framework.TestCase;
+
+import org.apache.lucene.analysis.WhitespaceAnalyzer;
+import org.apache.lucene.document.Document;
+import org.apache.lucene.document.Field;
+import org.apache.lucene.index.IndexWriter;
+import org.apache.lucene.index.Term;
+import org.apache.lucene.search.Explanation;
+import org.apache.lucene.search.FuzzyQuery;
+import org.apache.lucene.search.TopDocs;
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.Query;
+import org.apache.lucene.search.Searcher;
+import org.apache.lucene.search.Similarity;
+import org.apache.lucene.search.TermQuery;
+import org.apache.lucene.search.WildcardQuery;
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.store.RAMDirectory;
+
+import java.util.Vector;
+
+// From chapter 3
+public class ScoreTest extends TestCase {
+  private Directory directory;
+
+  public void setUp() throws Exception {
+    directory = new RAMDirectory();
+  }
+
+  public void tearDown() throws Exception {
+    directory.close();
+  }
+
+  public void testSimple() throws Exception {
+    indexSingleFieldDocs(new Field[] {new Field("contents", "x", Field.Store.YES, Field.Index.ANALYZED)});
+    IndexSearcher searcher = new IndexSearcher(directory);
+    searcher.setSimilarity(new SimpleSimilarity());
+
+    Query query = new TermQuery(new Term("contents", "x"));
+    Explanation explanation = searcher.explain(query, 0);
+    System.out.println(explanation);
+
+    TopDocs matches = searcher.search(query, 10);
+    assertEquals(1, matches.totalHits);
+
+    assertEquals(1F, matches.scoreDocs[0].score, 0.0);
+
+    searcher.close();
+  }
+
+  private void indexSingleFieldDocs(Field[] fields) throws Exception {
+    IndexWriter writer = new IndexWriter(directory,
+        new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);
+    for (Field f : fields) {
+      Document doc = new Document();
+      doc.add(f);
+      writer.addDocument(doc);
+    }
+    writer.optimize();
+    writer.close();
+  }
+
+  public void testWildcard() throws Exception {
+    indexSingleFieldDocs(new Field[]
+      { new Field("contents", "wild", Field.Store.YES, Field.Index.ANALYZED),
+        new Field("contents", "child", Field.Store.YES, Field.Index.ANALYZED),
+        new Field("contents", "mild", Field.Store.YES, Field.Index.ANALYZED),
+        new Field("contents", "mildew", Field.Store.YES, Field.Index.ANALYZED) });
+
+    IndexSearcher searcher = new IndexSearcher(directory);
+    Query query = new WildcardQuery(new Term("contents", "?ild*"));  //#A
+    TopDocs matches = searcher.search(query, 10);
+    assertEquals("child no match", 3, matches.totalHits);
+
+    assertEquals("score the same", matches.scoreDocs[0].score,
+                                   matches.scoreDocs[1].score, 0.0);
+    assertEquals("score the same", matches.scoreDocs[1].score,
+                                   matches.scoreDocs[2].score, 0.0);
+    searcher.close();
+  }
+  /*
+    #A Construct WildcardQuery using Term
+  */
+
+  public void testFuzzy() throws Exception {
+    indexSingleFieldDocs(new Field[] { new Field("contents",
+                                                 "fuzzy",
+                                                 Field.Store.YES,
+                                                 Field.Index.ANALYZED),
+                                       new Field("contents",
+                                                 "wuzzy",
+                                                 Field.Store.YES,
+                                                 Field.Index.ANALYZED)
+                                     });
+
+    IndexSearcher searcher = new IndexSearcher(directory);
+    Query query = new FuzzyQuery(new Term("contents", "wuzza"));
+    TopDocs matches = searcher.search(query, 10);
+    assertEquals("both close enough", 2, matches.totalHits);
+
+    assertTrue("wuzzy closer than fuzzy",
+               matches.scoreDocs[0].score != matches.scoreDocs[1].score);
+
+    Document doc = searcher.doc(matches.scoreDocs[0].doc);
+    assertEquals("wuzza bear", "wuzzy", doc.get("contents"));
+    searcher.close();
+  }
+
+  public static class SimpleSimilarity extends Similarity {
+    public float lengthNorm(String field, int numTerms) {
+      return 1.0f;
+    }
+
+    public float queryNorm(float sumOfSquaredWeights) {
+      return 1.0f;
+    }
+
+    public float tf(float freq) {
+      return freq;
+    }
+
+    public float sloppyFreq(int distance) {
+      return 2.0f;
+    }
+
+    public float idf(Vector terms, Searcher searcher) {
+      return 1.0f;
+    }
+
+    public float idf(int docFreq, int numDocs) {
+      return 1.0f;
+    }
+
+    public float coord(int overlap, int maxOverlap) {
+      return 1.0f;
+    }
+  }
+
+}

Property changes on: lucene/src/liatests/searching/ScoreTest.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lucene/src/liatests/searching/SearchServletFragment.java
===================================================================
--- lucene/src/liatests/searching/SearchServletFragment.java	(revision 0)
+++ lucene/src/liatests/searching/SearchServletFragment.java	(revision 0)
@@ -0,0 +1,59 @@
+package lia.searching;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.IOException;
+import org.apache.lucene.queryParser.*;
+import org.apache.lucene.analysis.standard.*;
+import org.apache.lucene.document.*;
+import org.apache.lucene.search.*;
+import org.apache.lucene.util.*;
+import javax.servlet.http.*;
+import javax.servlet.*;
+import lia.extsearch.queryparser.NumericQueryParserTest.NumericDateRangeQueryParser;
+
+// From chapter 6
+public class SearchServletFragment extends HttpServlet {
+
+  private IndexSearcher searcher;
+
+  protected void doGet(HttpServletRequest request,
+                       HttpServletResponse response) 
+      throws ServletException, IOException {
+    
+    QueryParser parser = new NumericDateRangeQueryParser(Version.LUCENE_30,
+                                                  "contents",
+        new StandardAnalyzer(Version.LUCENE_30));
+    
+    parser.setLocale(request.getLocale());
+    parser.setDateResolution(DateTools.Resolution.DAY);
+
+    Query query = null;
+    try {
+      query = parser.parse(request.getParameter("q"));
+    } catch (ParseException e) {
+      e.printStackTrace(System.err);  // 1
+    }
+
+    TopDocs docs = searcher.search(query, 10);        // 2
+  }
+  /*
+    1 Handle exception
+    2 Perfom search and render results
+  */
+}

Property changes on: lucene/src/liatests/searching/SearchServletFragment.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lucene/src/liatests/analysis/i18n/ChineseDemo.java
===================================================================
--- lucene/src/liatests/analysis/i18n/ChineseDemo.java	(revision 0)
+++ lucene/src/liatests/analysis/i18n/ChineseDemo.java	(revision 0)
@@ -0,0 +1,111 @@
+package lia.analysis.i18n;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.analysis.tokenattributes.TermAttribute;
+import org.apache.lucene.analysis.Analyzer;
+import org.apache.lucene.analysis.SimpleAnalyzer;
+import org.apache.lucene.analysis.cjk.CJKAnalyzer;
+import org.apache.lucene.analysis.cn.ChineseAnalyzer;
+import org.apache.lucene.analysis.cn.smart.SmartChineseAnalyzer;
+import org.apache.lucene.analysis.TokenStream;
+import org.apache.lucene.analysis.standard.StandardAnalyzer;
+import org.apache.lucene.util.Version;
+
+import java.awt.Font;
+import java.awt.FontMetrics;
+import java.awt.Frame;
+import java.awt.Label;
+import java.io.IOException;
+import java.io.StringReader;
+
+// From chapter 4
+public class ChineseDemo {
+  private static String[] strings = {"道德經"};  //A
+
+  private static Analyzer[] analyzers = {
+    new SimpleAnalyzer(),
+    new StandardAnalyzer(Version.LUCENE_30),
+    new ChineseAnalyzer (),    //B
+    new CJKAnalyzer (Version.LUCENE_30),
+    new SmartChineseAnalyzer (Version.LUCENE_30)   
+  };
+
+  public static void main(String args[]) throws Exception {
+
+    for (String string : strings) {
+      for (Analyzer analyzer : analyzers) {
+        analyze(string, analyzer);
+      }
+    }
+
+  }
+
+  private static void analyze(String string, Analyzer analyzer)
+         throws IOException {
+    StringBuffer buffer = new StringBuffer();
+
+    TokenStream stream = analyzer.tokenStream("contents",
+                                              new StringReader(string));
+    TermAttribute term = stream.addAttribute(TermAttribute.class);
+
+    while(stream.incrementToken()) {   //C
+      buffer.append("[");
+      buffer.append(term.term());
+      buffer.append("] ");
+    }
+
+    String output = buffer.toString();
+
+    Frame f = new Frame();
+    f.setTitle(analyzer.getClass().getSimpleName() + " : " + string);
+    f.setResizable(true);
+
+    Font font = new Font(null, Font.PLAIN, 36);
+    int width = getWidth(f.getFontMetrics(font), output);
+
+    f.setSize((width < 250) ? 250 : width + 50, 75);
+
+    // NOTE: if Label doesn't render the Chinese characters
+    // properly, try using javax.swing.JLabel instead
+    Label label = new Label(output);   //D
+    label.setSize(width, 75);
+    label.setAlignment(Label.CENTER);
+    label.setFont(font);
+    f.add(label);
+
+    f.setVisible(true);
+  }
+
+  private static int getWidth(FontMetrics metrics, String s) {
+    int size = 0;
+    int length = s.length();
+		for (int i = 0; i < length; i++) {
+      size += metrics.charWidth(s.charAt(i));
+    }
+
+    return size;
+  }
+}
+
+/* 	
+#A Analyze this text
+#B Test these analyzers
+#C Retrieve tokens
+#D Display analysis
+*/

Property changes on: lucene/src/liatests/analysis/i18n/ChineseDemo.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lucene/src/liatests/analysis/i18n/ChineseTest.java
===================================================================
--- lucene/src/liatests/analysis/i18n/ChineseTest.java	(revision 0)
+++ lucene/src/liatests/analysis/i18n/ChineseTest.java	(revision 0)
@@ -0,0 +1,37 @@
+package lia.analysis.i18n;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import junit.framework.TestCase;
+import lia.common.TestUtil;
+
+import org.apache.lucene.index.Term;
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.TermQuery;
+import org.apache.lucene.search.Query;
+import org.apache.lucene.store.Directory;
+
+// From chapter 4
+public class ChineseTest extends TestCase {
+  public void testChinese() throws Exception {
+    Directory dir = TestUtil.getBookIndexDirectory();
+    IndexSearcher searcher = new IndexSearcher(dir);
+    Query query = new TermQuery(new Term("contents", "道"));
+    assertEquals("tao", 1, TestUtil.hitCount(searcher, query));
+  }
+}

Property changes on: lucene/src/liatests/analysis/i18n/ChineseTest.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/analysis/SimpleAnalyzer.java
===================================================================
--- lucene/src/liatests/analysis/SimpleAnalyzer.java	(revision 0)
+++ lucene/src/liatests/analysis/SimpleAnalyzer.java	(revision 0)
@@ -0,0 +1,46 @@
+package lia.analysis;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.Reader;
+import java.io.IOException;
+import org.apache.lucene.analysis.Analyzer;
+import org.apache.lucene.analysis.TokenStream;
+import org.apache.lucene.analysis.LowerCaseTokenizer;
+import org.apache.lucene.analysis.Tokenizer;
+
+// From chapter 4
+public final class SimpleAnalyzer extends Analyzer {
+  public TokenStream tokenStream(String fieldName, Reader reader) {
+    return new LowerCaseTokenizer(reader);
+  }
+  public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {
+    Tokenizer tokenizer = (Tokenizer) getPreviousTokenStream();
+    if (tokenizer == null) {
+      tokenizer = new LowerCaseTokenizer(reader);
+      setPreviousTokenStream(tokenizer);
+    } else
+      tokenizer.reset(reader);
+    return tokenizer;
+  }
+
+  public static void main(String[] args) throws IOException {
+    AnalyzerUtils.displayTokensWithFullDetails(new SimpleAnalyzer(),
+        "The quick brown fox....");
+  }
+}

Property changes on: lucene/src/liatests/analysis/SimpleAnalyzer.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/analysis/nutch/NutchExample.java
===================================================================
--- lucene/src/liatests/analysis/nutch/NutchExample.java	(revision 0)
+++ lucene/src/liatests/analysis/nutch/NutchExample.java	(revision 0)
@@ -0,0 +1,74 @@
+package lia.analysis.nutch;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.nutch.analysis.NutchDocumentAnalyzer;
+import org.apache.nutch.searcher.Query;
+import org.apache.nutch.searcher.QueryFilters;
+import org.apache.hadoop.conf.Configuration;
+import org.apache.lucene.analysis.TokenStream;
+import org.apache.lucene.analysis.Token;
+
+import java.io.IOException;
+import java.io.StringReader;
+
+// From chapter 4
+public class NutchExample {
+                              
+  public static void main(String[] args) throws IOException {
+    Configuration conf = new Configuration();
+    conf.addResource("nutch-default.xml");
+    NutchDocumentAnalyzer analyzer = new NutchDocumentAnalyzer(conf);   //1
+
+    TokenStream ts = analyzer.tokenStream("content",
+                                  new StringReader("The quick brown fox..."));
+    int position = 0;
+    while(true) {                                           // 2
+      Token token = ts.next();
+      if (token == null) {
+        break;
+      }
+      int increment = token.getPositionIncrement();
+
+      if (increment > 0) {
+        position = position + increment;
+        System.out.println();
+        System.out.print(position + ": ");
+      }
+
+      System.out.print("[" +
+                       token.termText() + ":" +
+                       token.startOffset() + "->" +
+                       token.endOffset() + ":" +
+                       token.type() + "] ");
+    }
+    System.out.println();
+
+    Query nutchQuery = Query.parse("\"the quick brown\"", conf);  // 3
+    org.apache.lucene.search.Query luceneQuery;
+    luceneQuery = new QueryFilters(conf).filter(nutchQuery); // A
+    System.out.println("Translated: " + luceneQuery);
+  }
+}
+
+/*
+#1 Custom analyzer
+#2 Display token details
+#3 Parse to Nutch's Query
+#A Create corresponding translated Lucene Query
+*/

Property changes on: lucene/src/liatests/analysis/nutch/NutchExample.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/analysis/positional/PositionalPorterStopAnalyzerTest.java
===================================================================
--- lucene/src/liatests/analysis/positional/PositionalPorterStopAnalyzerTest.java	(revision 0)
+++ lucene/src/liatests/analysis/positional/PositionalPorterStopAnalyzerTest.java	(revision 0)
@@ -0,0 +1,80 @@
+package lia.analysis.positional;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import junit.framework.TestCase;
+import lia.common.TestUtil;
+
+import org.apache.lucene.document.Document;
+import org.apache.lucene.document.Field;
+import org.apache.lucene.index.IndexWriter;
+import org.apache.lucene.queryParser.QueryParser;
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.Query;
+import org.apache.lucene.store.RAMDirectory;
+import org.apache.lucene.util.Version;
+
+// From chapter 4
+public class PositionalPorterStopAnalyzerTest extends TestCase {
+  private static PositionalPorterStopAnalyzer porterAnalyzer =
+    new PositionalPorterStopAnalyzer();
+
+  private IndexSearcher searcher;
+  private QueryParser parser;
+
+  public void setUp() throws Exception {
+
+    RAMDirectory directory = new RAMDirectory();
+
+    IndexWriter writer =
+        new IndexWriter(directory,
+                        porterAnalyzer,
+                        IndexWriter.MaxFieldLength.UNLIMITED);
+
+    Document doc = new Document();
+    doc.add(new Field("contents",
+                      "The quick brown fox jumps over the lazy dog",
+                      Field.Store.YES,
+                      Field.Index.ANALYZED));
+    writer.addDocument(doc);
+    writer.close();
+    searcher = new IndexSearcher(directory, true);
+    parser = new QueryParser(Version.LUCENE_30,
+                             "contents",
+                             porterAnalyzer);
+  }
+
+  public void testWithSlop() throws Exception {
+    parser.setPhraseSlop(1);
+
+    Query query = parser.parse("\"over the lazy\"");
+
+    assertEquals("hole accounted for", 1, TestUtil.hitCount(searcher, query));
+  }
+
+  public void testStems() throws Exception {
+    Query query = new QueryParser(Version.LUCENE_30,
+                         "contents", porterAnalyzer).parse(
+                           "laziness");
+    assertEquals("lazi", 1, TestUtil.hitCount(searcher, query));
+
+    query = parser.parse("\"fox jumped\"");
+    assertEquals("jump jumps jumped jumping", 1, TestUtil.hitCount(searcher, query));
+  }
+
+}

Property changes on: lucene/src/liatests/analysis/positional/PositionalPorterStopAnalyzerTest.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lucene/src/liatests/analysis/positional/PositionalPorterStopAnalyzer.java
===================================================================
--- lucene/src/liatests/analysis/positional/PositionalPorterStopAnalyzer.java	(revision 0)
+++ lucene/src/liatests/analysis/positional/PositionalPorterStopAnalyzer.java	(revision 0)
@@ -0,0 +1,49 @@
+package lia.analysis.positional;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.analysis.Analyzer;
+import org.apache.lucene.analysis.LowerCaseTokenizer;
+import org.apache.lucene.analysis.PorterStemFilter;
+import org.apache.lucene.analysis.StopAnalyzer;
+import org.apache.lucene.analysis.StopFilter;
+import org.apache.lucene.analysis.TokenStream;
+
+import java.io.Reader;
+import java.util.Set;
+
+// From chapter 4
+public class PositionalPorterStopAnalyzer extends Analyzer {
+  private Set stopWords;
+
+  public PositionalPorterStopAnalyzer() {
+    this(StopAnalyzer.ENGLISH_STOP_WORDS_SET);
+  }
+
+  public PositionalPorterStopAnalyzer(Set stopWords) {
+    this.stopWords = stopWords;
+  }
+
+  public TokenStream tokenStream(String fieldName, Reader reader) {
+    StopFilter stopFilter = new StopFilter(true,
+                                           new LowerCaseTokenizer(reader),
+                                           stopWords);
+    stopFilter.setEnablePositionIncrements(true);
+    return new PorterStemFilter(stopFilter);
+  }
+}

Property changes on: lucene/src/liatests/analysis/positional/PositionalPorterStopAnalyzer.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/analysis/positional/PositionalStopFilter.java
===================================================================
--- lucene/src/liatests/analysis/positional/PositionalStopFilter.java	(revision 0)
+++ lucene/src/liatests/analysis/positional/PositionalStopFilter.java	(revision 0)
@@ -0,0 +1,53 @@
+package lia.analysis.positional;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.analysis.TokenStream;
+import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute;
+import org.apache.lucene.analysis.tokenattributes.TermAttribute;
+import org.apache.lucene.analysis.TokenFilter;
+import org.apache.lucene.analysis.CharArraySet;
+import java.io.IOException;
+
+// From chapter 4
+public class PositionalStopFilter extends TokenFilter {
+  private CharArraySet stopWords;
+  private PositionIncrementAttribute posIncrAttr;
+  private TermAttribute termAttr;
+
+  public PositionalStopFilter(TokenStream in, CharArraySet stopWords) {
+    super(in);
+    this.stopWords = stopWords;
+    posIncrAttr = (PositionIncrementAttribute) addAttribute(PositionIncrementAttribute.class);
+    termAttr = (TermAttribute) addAttribute(TermAttribute.class);
+  }
+
+  public final boolean incrementToken() throws IOException {
+    int increment = 0;
+    while(input.incrementToken()) {
+      if (!stopWords.contains(termAttr.termBuffer(), 0, termAttr.termLength())) {
+        posIncrAttr.setPositionIncrement(posIncrAttr.getPositionIncrement() + increment);
+        return true;
+      }
+
+      increment += posIncrAttr.getPositionIncrement();
+    }
+
+    return false;
+  }
+}

Property changes on: lucene/src/liatests/analysis/positional/PositionalStopFilter.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/analysis/queryparser/AnalysisParalysisTest.java
===================================================================
--- lucene/src/liatests/analysis/queryparser/AnalysisParalysisTest.java	(revision 0)
+++ lucene/src/liatests/analysis/queryparser/AnalysisParalysisTest.java	(revision 0)
@@ -0,0 +1,53 @@
+package lia.analysis.queryparser;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import junit.framework.TestCase;
+import org.apache.lucene.queryParser.QueryParser;
+import org.apache.lucene.search.Query;
+import org.apache.lucene.analysis.standard.StandardAnalyzer;
+import org.apache.lucene.analysis.PerFieldAnalyzerWrapper;
+import org.apache.lucene.analysis.WhitespaceAnalyzer;
+import org.apache.lucene.analysis.Analyzer;
+import org.apache.lucene.util.Version;
+
+// From chapter 4
+public class AnalysisParalysisTest extends TestCase {
+  public void testAnalyzer() throws Exception {
+    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_30);
+    String queryString = "category:/philosophy/eastern";
+
+    Query query = new QueryParser(Version.LUCENE_30,
+                                  "contents",
+                                  analyzer).parse(queryString);
+    assertEquals("path got split, yikes!",
+                 "category:\"philosophy eastern\"",
+                 query.toString("contents"));
+
+    PerFieldAnalyzerWrapper perFieldAnalyzer =
+                            new PerFieldAnalyzerWrapper(analyzer);
+    perFieldAnalyzer.addAnalyzer("category",
+                                       new WhitespaceAnalyzer());
+    query = new QueryParser(Version.LUCENE_30,
+                            "contents",
+                            perFieldAnalyzer).parse(queryString);
+    assertEquals("leave category field alone",
+                 "category:/philosophy/eastern",
+                 query.toString("contents"));
+  }
+}

Property changes on: lucene/src/liatests/analysis/queryparser/AnalysisParalysisTest.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lucene/src/liatests/analysis/keyword/SimpleKeywordAnalyzer.java
===================================================================
--- lucene/src/liatests/analysis/keyword/SimpleKeywordAnalyzer.java	(revision 0)
+++ lucene/src/liatests/analysis/keyword/SimpleKeywordAnalyzer.java	(revision 0)
@@ -0,0 +1,44 @@
+package lia.analysis.keyword;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.analysis.Analyzer;
+import org.apache.lucene.analysis.TokenStream;
+import org.apache.lucene.analysis.CharTokenizer;
+
+import java.io.Reader;
+
+// From chapter 4
+
+/**
+ * CharTokenizer limits token width to 255 characters, though.
+ * This implementation assumes keywords are 255 in length or less.
+ */
+
+public class SimpleKeywordAnalyzer extends Analyzer {
+
+    public TokenStream tokenStream(String fieldName,
+                                   Reader reader) {
+        return new CharTokenizer(reader) {
+            protected boolean isTokenChar(char c) {
+                return true;
+            }
+        };
+    }
+
+}

Property changes on: lucene/src/liatests/analysis/keyword/SimpleKeywordAnalyzer.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/analysis/keyword/KeywordAnalyzerTest.java
===================================================================
--- lucene/src/liatests/analysis/keyword/KeywordAnalyzerTest.java	(revision 0)
+++ lucene/src/liatests/analysis/keyword/KeywordAnalyzerTest.java	(revision 0)
@@ -0,0 +1,103 @@
+package lia.analysis.keyword;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import junit.framework.TestCase;
+
+import lia.common.TestUtil;
+
+import org.apache.lucene.index.IndexWriter;
+import org.apache.lucene.index.Term;
+import org.apache.lucene.analysis.SimpleAnalyzer;
+import org.apache.lucene.analysis.KeywordAnalyzer;
+import org.apache.lucene.analysis.PerFieldAnalyzerWrapper;
+import org.apache.lucene.document.Document;
+import org.apache.lucene.document.Field;
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.Query;
+import org.apache.lucene.search.TermQuery;
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.store.RAMDirectory;
+import org.apache.lucene.queryParser.QueryParser;
+import org.apache.lucene.util.Version;
+
+// From chapter 4
+public class KeywordAnalyzerTest extends TestCase {
+
+  private IndexSearcher searcher;
+
+  public void setUp() throws Exception {
+    Directory directory = new RAMDirectory();
+
+    IndexWriter writer = new IndexWriter(directory,
+                                         new SimpleAnalyzer(), 
+                                         IndexWriter.MaxFieldLength.UNLIMITED);
+
+    Document doc = new Document();
+    doc.add(new Field("partnum",
+                      "Q36",
+                      Field.Store.NO,
+                      Field.Index.NOT_ANALYZED_NO_NORMS));   //A
+    doc.add(new Field("description",
+                      "Illidium Space Modulator",
+                      Field.Store.YES,
+                      Field.Index.ANALYZED));
+    writer.addDocument(doc);
+
+    writer.close();
+
+    searcher = new IndexSearcher(directory);
+  }
+
+  public void testTermQuery() throws Exception {
+    Query query = new TermQuery(new Term("partnum", "Q36"));  //B
+    assertEquals(1, TestUtil.hitCount(searcher, query)); //C
+  }
+
+  public void testBasicQueryParser() throws Exception {
+    Query query = new QueryParser(Version.LUCENE_30,                //1
+                                  "description",                //1
+                                  new SimpleAnalyzer())            //1
+                      .parse("partnum:Q36 AND SPACE");                //1
+    assertEquals("note Q36 -> q",
+                 "+partnum:q +space", query.toString("description"));    //2
+    assertEquals("doc not found :(", 0, TestUtil.hitCount(searcher, query));
+  }
+
+/*
+#A Don't analyze field
+#B Don't analyze term
+#C Verify document matches
+#1 QueryParser analyzes each term and phrase
+#2 toString() method
+*/
+
+  public void testPerFieldAnalyzer() throws Exception {
+    PerFieldAnalyzerWrapper analyzer = new PerFieldAnalyzerWrapper(
+                                              new SimpleAnalyzer());
+    analyzer.addAnalyzer("partnum", new KeywordAnalyzer());
+
+    Query query = new QueryParser(Version.LUCENE_30,
+                                  "description", analyzer).parse(
+                "partnum:Q36 AND SPACE");
+
+    assertEquals("Q36 kept as-is",
+              "+partnum:Q36 +space", query.toString("description"));  
+    assertEquals("doc found!", 1, TestUtil.hitCount(searcher, query));
+  }
+}

Property changes on: lucene/src/liatests/analysis/keyword/KeywordAnalyzerTest.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lucene/src/liatests/analysis/AnalyzerUtils.java
===================================================================
--- lucene/src/liatests/analysis/AnalyzerUtils.java	(revision 0)
+++ lucene/src/liatests/analysis/AnalyzerUtils.java	(revision 0)
@@ -0,0 +1,183 @@
+package lia.analysis;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import junit.framework.Assert;
+import org.apache.lucene.util.AttributeSource;
+import org.apache.lucene.analysis.Analyzer;
+import org.apache.lucene.analysis.SimpleAnalyzer;
+import org.apache.lucene.analysis.TokenStream;
+import org.apache.lucene.analysis.tokenattributes.TermAttribute;
+import org.apache.lucene.analysis.tokenattributes.TypeAttribute;
+import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute;
+import org.apache.lucene.analysis.tokenattributes.OffsetAttribute;
+import org.apache.lucene.analysis.standard.StandardAnalyzer;
+import org.apache.lucene.util.Version;
+
+import java.io.IOException;
+import java.io.StringReader;
+
+// From chapter 4
+public class AnalyzerUtils {
+  public static void displayTokens(Analyzer analyzer,
+                                   String text) throws IOException {
+    displayTokens(analyzer.tokenStream("contents", new StringReader(text)));  //A
+  }
+
+  public static void displayTokens(TokenStream stream)
+    throws IOException {
+
+    TermAttribute term = stream.addAttribute(TermAttribute.class);
+    while(stream.incrementToken()) {
+      System.out.print("[" + term.term() + "] ");    //B
+    }
+  }
+  /*
+    #A Invoke analysis process
+    #B Print token text surrounded by brackets
+  */
+
+  public static int getPositionIncrement(AttributeSource source) {
+    PositionIncrementAttribute attr = source.addAttribute(PositionIncrementAttribute.class);
+    return attr.getPositionIncrement();
+  }
+
+  public static String getTerm(AttributeSource source) {
+    TermAttribute attr = source.addAttribute(TermAttribute.class);
+    return attr.term();
+  }
+
+  public static String getType(AttributeSource source) {
+    TypeAttribute attr = source.addAttribute(TypeAttribute.class);
+    return attr.type();
+  }
+
+  public static void setPositionIncrement(AttributeSource source, int posIncr) {
+    PositionIncrementAttribute attr = source.addAttribute(PositionIncrementAttribute.class);
+    attr.setPositionIncrement(posIncr);
+  }
+
+  public static void setTerm(AttributeSource source, String term) {
+    TermAttribute attr = source.addAttribute(TermAttribute.class);
+    attr.setTermBuffer(term);
+  }
+
+  public static void setType(AttributeSource source, String type) {
+    TypeAttribute attr = source.addAttribute(TypeAttribute.class);
+    attr.setType(type);
+  }
+
+  public static void displayTokensWithPositions
+    (Analyzer analyzer, String text) throws IOException {
+
+    TokenStream stream = analyzer.tokenStream("contents",
+                                              new StringReader(text));
+    TermAttribute term = stream.addAttribute(TermAttribute.class);
+    PositionIncrementAttribute posIncr = stream.addAttribute(PositionIncrementAttribute.class);
+
+    int position = 0;
+    while(stream.incrementToken()) {
+      int increment = posIncr.getPositionIncrement();
+      if (increment > 0) {
+        position = position + increment;
+        System.out.println();
+        System.out.print(position + ": ");
+      }
+
+      System.out.print("[" + term.term() + "] ");
+    }
+    System.out.println();
+  }
+
+  public static void displayTokensWithFullDetails(Analyzer analyzer,
+                                                  String text) throws IOException {
+
+    TokenStream stream = analyzer.tokenStream("contents",                        // #A
+                                              new StringReader(text));
+
+    TermAttribute term = stream.addAttribute(TermAttribute.class);        // #B
+    PositionIncrementAttribute posIncr =                                  // #B 
+    	stream.addAttribute(PositionIncrementAttribute.class);              // #B
+    OffsetAttribute offset = stream.addAttribute(OffsetAttribute.class);  // #B
+    TypeAttribute type = stream.addAttribute(TypeAttribute.class);        // #B
+
+    int position = 0;
+    while(stream.incrementToken()) {                                  // #C
+
+      int increment = posIncr.getPositionIncrement();                 // #D
+      if (increment > 0) {                                            // #D
+        position = position + increment;                              // #D
+        System.out.println();                                         // #D
+        System.out.print(position + ": ");                            // #D
+      }
+
+      System.out.print("[" +                                 // #E
+                       term.term() + ":" +                   // #E
+                       offset.startOffset() + "->" +         // #E
+                       offset.endOffset() + ":" +            // #E
+                       type.type() + "] ");                  // #E
+    }
+    System.out.println();
+  }
+  /*
+    #A Perform analysis
+    #B Obtain attributes of interest
+    #C Iterate through all tokens
+    #D Compute position and print
+    #E Print all token details
+   */
+
+  public static void assertAnalyzesTo(Analyzer analyzer, String input,
+                                      String[] output) throws Exception {
+    TokenStream stream = analyzer.tokenStream("field", new StringReader(input));
+
+    TermAttribute termAttr = stream.addAttribute(TermAttribute.class);
+    for (String expected : output) {
+      Assert.assertTrue(stream.incrementToken());
+      Assert.assertEquals(expected, termAttr.term());
+    }
+    Assert.assertFalse(stream.incrementToken());
+    stream.close();
+  }
+
+  public static void displayPositionIncrements(Analyzer analyzer, String text)
+    throws IOException {
+    TokenStream stream = analyzer.tokenStream("contents", new StringReader(text));
+    PositionIncrementAttribute posIncr = stream.addAttribute(PositionIncrementAttribute.class);
+    while (stream.incrementToken()) {
+      System.out.println("posIncr=" + posIncr.getPositionIncrement());
+    }   
+  }
+
+  public static void main(String[] args) throws IOException {
+    System.out.println("SimpleAnalyzer");
+    displayTokensWithFullDetails(new SimpleAnalyzer(),
+        "The quick brown fox....");
+
+    System.out.println("\n----");
+    System.out.println("StandardAnalyzer");
+    displayTokensWithFullDetails(new StandardAnalyzer(Version.LUCENE_30),
+        "I'll email you at xyz@example.com");
+  }
+}
+
+/*
+#1 Invoke analysis process
+#2 Output token text surrounded by brackets
+*/
+

Property changes on: lucene/src/liatests/analysis/AnalyzerUtils.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lucene/src/liatests/analysis/Fragments.java
===================================================================
--- lucene/src/liatests/analysis/Fragments.java	(revision 0)
+++ lucene/src/liatests/analysis/Fragments.java	(revision 0)
@@ -0,0 +1,64 @@
+package lia.analysis;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.analysis.*;
+import org.apache.lucene.analysis.tokenattributes.*;
+import org.apache.lucene.analysis.standard.*;
+import org.apache.lucene.index.*;
+import org.apache.lucene.store.*;
+import org.apache.lucene.util.*;
+import org.apache.lucene.document.*;
+import java.io.*;
+
+// From chapter 4
+public class Fragments {
+  public void frag1() throws Exception {
+    Directory directory = null;
+    // START
+    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_30);
+    IndexWriter writer = new IndexWriter(directory, analyzer, 
+                            IndexWriter.MaxFieldLength.UNLIMITED);
+    // END
+  }
+
+  public void frag2() throws Exception {
+    IndexWriter writer = null;
+    // START
+    Document doc = new Document();
+    doc.add(new Field("title", "This is the title", Field.Store.YES, 
+                      Field.Index.ANALYZED));
+    doc.add(new Field("contents", "...document contents...", Field.Store.NO, 
+                      Field.Index.ANALYZED));
+    writer.addDocument(doc);
+    // END
+  }
+
+  public void frag3() throws Exception {
+    Analyzer analyzer = null;
+    String text = null;
+    // START
+    TokenStream stream = analyzer.tokenStream("contents", new StringReader(text));
+    PositionIncrementAttribute posIncr = (PositionIncrementAttribute)
+      stream.addAttribute(PositionIncrementAttribute.class);
+    while (stream.incrementToken()) {
+      System.out.println("posIncr=" + posIncr.getPositionIncrement());
+    }
+    // END
+  }
+}
\ No newline at end of file

Property changes on: lucene/src/liatests/analysis/Fragments.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/analysis/AnalyzerDemo.java
===================================================================
--- lucene/src/liatests/analysis/AnalyzerDemo.java	(revision 0)
+++ lucene/src/liatests/analysis/AnalyzerDemo.java	(revision 0)
@@ -0,0 +1,72 @@
+package lia.analysis;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.analysis.Analyzer;
+import org.apache.lucene.analysis.StopAnalyzer;
+import org.apache.lucene.analysis.SimpleAnalyzer;
+import org.apache.lucene.analysis.WhitespaceAnalyzer;
+import org.apache.lucene.analysis.standard.StandardAnalyzer;
+import org.apache.lucene.util.Version;
+import java.io.IOException;
+
+// From chapter 4
+
+/**
+ * Adapted from code which first appeared in a java.net article
+ * written by Erik
+ */
+public class AnalyzerDemo {
+  private static final String[] examples = {
+    "The quick brown fox jumped over the lazy dog",
+    "XY&Z Corporation - xyz@example.com"
+  };
+
+  private static final Analyzer[] analyzers = new Analyzer[] { 
+    new WhitespaceAnalyzer(),
+    new SimpleAnalyzer(),
+    new StopAnalyzer(Version.LUCENE_30),
+    new StandardAnalyzer(Version.LUCENE_30)
+  };
+
+  public static void main(String[] args) throws IOException {
+
+    String[] strings = examples;
+    if (args.length > 0) {    // A
+      strings = args;
+    }
+
+    for (String text : strings) {
+      analyze(text);
+    }
+  }
+
+  private static void analyze(String text) throws IOException {
+    System.out.println("Analyzing \"" + text + "\"");
+    for (Analyzer analyzer : analyzers) {
+      String name = analyzer.getClass().getSimpleName();
+      System.out.println("  " + name + ":");
+      System.out.print("    ");
+      AnalyzerUtils.displayTokens(analyzer, text); // B
+      System.out.println("\n");
+    }
+  }
+}
+
+// #A Analyze command-line strings, if specified
+// #B Real work done in here

Property changes on: lucene/src/liatests/analysis/AnalyzerDemo.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lucene/src/liatests/analysis/UsingAnalyzersExample.java
===================================================================
--- lucene/src/liatests/analysis/UsingAnalyzersExample.java	(revision 0)
+++ lucene/src/liatests/analysis/UsingAnalyzersExample.java	(revision 0)
@@ -0,0 +1,62 @@
+package lia.analysis;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.store.RAMDirectory;
+import org.apache.lucene.index.IndexWriter;
+import org.apache.lucene.analysis.Analyzer;
+import org.apache.lucene.analysis.standard.StandardAnalyzer;
+import org.apache.lucene.document.Document;
+import org.apache.lucene.document.Field;
+import org.apache.lucene.search.Query;
+import org.apache.lucene.queryParser.QueryParser;
+import org.apache.lucene.queryParser.ParseException;
+import org.apache.lucene.util.Version;
+
+import java.io.IOException;
+
+// From chapter 4
+public class UsingAnalyzersExample {
+    /**
+     * This method doesn't do anything, except compile correctly.
+     * This is used to show snippets of how Analyzers are used.
+     */
+    public void someMethod() throws IOException, ParseException {
+        RAMDirectory directory = new RAMDirectory();
+
+        Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_30);
+        IndexWriter writer = new IndexWriter(directory, analyzer, IndexWriter.MaxFieldLength.UNLIMITED);
+
+        Document doc = new Document();
+        doc.add(new Field("title", "This is the title", Field.Store.YES, Field.Index.ANALYZED));
+        doc.add(new Field("contents", "...document contents...", Field.Store.NO, Field.Index.ANALYZED));
+        writer.addDocument(doc);
+
+        writer.addDocument(doc, analyzer);
+
+        String expression = "some query";
+
+        Query query = new QueryParser(Version.LUCENE_30,
+                                      "contents", analyzer)
+                .parse(expression);
+
+        QueryParser parser = new QueryParser(Version.LUCENE_30,
+                                             "contents", analyzer);
+        query = parser.parse(expression);
+    }
+}

Property changes on: lucene/src/liatests/analysis/UsingAnalyzersExample.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lucene/src/liatests/analysis/stopanalyzer/StopAnalyzerTest.java
===================================================================
--- lucene/src/liatests/analysis/stopanalyzer/StopAnalyzerTest.java	(revision 0)
+++ lucene/src/liatests/analysis/stopanalyzer/StopAnalyzerTest.java	(revision 0)
@@ -0,0 +1,45 @@
+package lia.analysis.stopanalyzer;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import junit.framework.TestCase;
+import lia.analysis.AnalyzerUtils;
+import org.apache.lucene.analysis.StopAnalyzer;
+import org.apache.lucene.util.Version;
+
+// From chapter 4
+public class StopAnalyzerTest extends TestCase {
+  private StopAnalyzer stopAnalyzer = new StopAnalyzer(Version.LUCENE_30);
+
+  public void testHoles() throws Exception {
+    String[] expected = { "one", "enough"};
+
+    AnalyzerUtils.assertAnalyzesTo(stopAnalyzer,
+                                   "one is not enough",
+                                   expected);
+    AnalyzerUtils.assertAnalyzesTo(stopAnalyzer,
+                                   "one is enough",
+                                   expected);
+    AnalyzerUtils.assertAnalyzesTo(stopAnalyzer,
+                                   "one enough",
+                                   expected);
+    AnalyzerUtils.assertAnalyzesTo(stopAnalyzer,
+                                   "one but not enough",
+                                   expected);
+  }
+}

Property changes on: lucene/src/liatests/analysis/stopanalyzer/StopAnalyzerTest.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/analysis/stopanalyzer/StopAnalyzer1.java
===================================================================
--- lucene/src/liatests/analysis/stopanalyzer/StopAnalyzer1.java	(revision 0)
+++ lucene/src/liatests/analysis/stopanalyzer/StopAnalyzer1.java	(revision 0)
@@ -0,0 +1,47 @@
+package lia.analysis.stopanalyzer;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.analysis.Analyzer;
+import org.apache.lucene.analysis.LowerCaseTokenizer;
+import org.apache.lucene.analysis.StopAnalyzer;
+import org.apache.lucene.analysis.StopFilter;
+import org.apache.lucene.analysis.TokenStream;
+
+import java.io.Reader;
+import java.util.Set;
+
+// From chapter 4
+public class StopAnalyzer1 extends Analyzer {
+
+  private Set stopWords;
+
+  public StopAnalyzer1() {
+    stopWords = StopAnalyzer.ENGLISH_STOP_WORDS_SET;
+  }
+
+  public StopAnalyzer1(String[] stopWords) {
+    this.stopWords = StopFilter.makeStopSet(stopWords);
+  }
+
+  public TokenStream tokenStream(String fieldName, Reader reader) {
+    return new StopFilter(true,
+                          new LowerCaseTokenizer(reader), 
+                          stopWords);
+  }
+}

Property changes on: lucene/src/liatests/analysis/stopanalyzer/StopAnalyzer1.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/analysis/stopanalyzer/StopAnalyzer2.java
===================================================================
--- lucene/src/liatests/analysis/stopanalyzer/StopAnalyzer2.java	(revision 0)
+++ lucene/src/liatests/analysis/stopanalyzer/StopAnalyzer2.java	(revision 0)
@@ -0,0 +1,47 @@
+package lia.analysis.stopanalyzer;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.analysis.Analyzer;
+import org.apache.lucene.analysis.LetterTokenizer;
+import org.apache.lucene.analysis.LowerCaseFilter;
+import org.apache.lucene.analysis.StopAnalyzer;
+import org.apache.lucene.analysis.StopFilter;
+import org.apache.lucene.analysis.TokenStream;
+
+import java.io.Reader;
+import java.util.Set;
+
+// From chapter 4
+public class StopAnalyzer2 extends Analyzer {
+
+  private Set stopWords;
+
+  public StopAnalyzer2() {
+    stopWords = StopAnalyzer.ENGLISH_STOP_WORDS_SET;
+  }
+
+  public StopAnalyzer2(String[] stopWords) {
+    this.stopWords = StopFilter.makeStopSet(stopWords);
+  }
+
+  public TokenStream tokenStream(String fieldName, Reader reader) {
+    return new StopFilter(true, new LowerCaseFilter(new LetterTokenizer(reader)),
+        stopWords);
+  }
+}

Property changes on: lucene/src/liatests/analysis/stopanalyzer/StopAnalyzer2.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/analysis/stopanalyzer/StopAnalyzerAlternativesTest.java
===================================================================
--- lucene/src/liatests/analysis/stopanalyzer/StopAnalyzerAlternativesTest.java	(revision 0)
+++ lucene/src/liatests/analysis/stopanalyzer/StopAnalyzerAlternativesTest.java	(revision 0)
@@ -0,0 +1,44 @@
+package lia.analysis.stopanalyzer;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import junit.framework.TestCase;
+import lia.analysis.AnalyzerUtils;
+
+// From chapter 4
+public class StopAnalyzerAlternativesTest extends TestCase {
+  public void testStopAnalyzer2() throws Exception {
+    AnalyzerUtils.assertAnalyzesTo(new StopAnalyzer2(),
+                                   "The quick brown...",
+                                   new String[] {"quick", "brown"});
+  }
+
+  public void testStopAnalyzerFlawed() throws Exception {
+    AnalyzerUtils.assertAnalyzesTo(new StopAnalyzerFlawed(),
+                                   "The quick brown...",
+                                   new String[] {"the", "quick", "brown"});
+  }
+
+  /**
+   * Illustrates that "the" is not removed, although it is lowercased
+   */
+  public static void main(String[] args) throws Exception {
+    AnalyzerUtils.displayTokens(
+      new StopAnalyzerFlawed(), "The quick brown...");
+  }
+}

Property changes on: lucene/src/liatests/analysis/stopanalyzer/StopAnalyzerAlternativesTest.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/analysis/stopanalyzer/StopAnalyzerFlawed.java
===================================================================
--- lucene/src/liatests/analysis/stopanalyzer/StopAnalyzerFlawed.java	(revision 0)
+++ lucene/src/liatests/analysis/stopanalyzer/StopAnalyzerFlawed.java	(revision 0)
@@ -0,0 +1,54 @@
+package lia.analysis.stopanalyzer;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.analysis.Analyzer;
+import org.apache.lucene.analysis.LetterTokenizer;
+import org.apache.lucene.analysis.LowerCaseFilter;
+import org.apache.lucene.analysis.StopAnalyzer;
+import org.apache.lucene.analysis.StopFilter;
+import org.apache.lucene.analysis.TokenStream;
+
+import java.io.Reader;
+import java.util.Set;
+
+// From chapter 4
+
+/**
+ * Stop words actually not necessarily removed due to filtering order
+ */
+public class StopAnalyzerFlawed extends Analyzer {
+  private Set stopWords;
+
+  public StopAnalyzerFlawed() {
+    stopWords = StopAnalyzer.ENGLISH_STOP_WORDS_SET;
+  }
+
+  public StopAnalyzerFlawed(String[] stopWords) {
+    this.stopWords = StopFilter.makeStopSet(stopWords);
+  }
+
+  /**
+   * Ordering mistake here
+   */
+  public TokenStream tokenStream(String fieldName, Reader reader) {
+    return new LowerCaseFilter(
+           new StopFilter(true, new LetterTokenizer(reader),
+                          stopWords));
+  }
+}

Property changes on: lucene/src/liatests/analysis/stopanalyzer/StopAnalyzerFlawed.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/analysis/synonym/SynonymAnalyzer.java
===================================================================
--- lucene/src/liatests/analysis/synonym/SynonymAnalyzer.java	(revision 0)
+++ lucene/src/liatests/analysis/synonym/SynonymAnalyzer.java	(revision 0)
@@ -0,0 +1,50 @@
+package lia.analysis.synonym;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.analysis.Analyzer;
+import org.apache.lucene.analysis.LowerCaseFilter;
+import org.apache.lucene.analysis.StopFilter;
+import org.apache.lucene.analysis.TokenStream;
+import org.apache.lucene.analysis.StopAnalyzer;
+import org.apache.lucene.analysis.standard.StandardTokenizer;
+import org.apache.lucene.analysis.standard.StandardFilter;
+import org.apache.lucene.util.Version;
+import java.io.Reader;
+
+// From chapter 4
+public class SynonymAnalyzer extends Analyzer {
+  private SynonymEngine engine;
+
+  public SynonymAnalyzer(SynonymEngine engine) {
+    this.engine = engine;
+  }
+
+  public TokenStream tokenStream(String fieldName, Reader reader) {
+    TokenStream result = new SynonymFilter(
+                          new StopFilter(true,
+                            new LowerCaseFilter(
+                              new StandardFilter(
+                                new StandardTokenizer(
+                                 Version.LUCENE_30, reader))),
+                            StopAnalyzer.ENGLISH_STOP_WORDS_SET),
+                          engine
+                         );
+    return result;
+  }
+}

Property changes on: lucene/src/liatests/analysis/synonym/SynonymAnalyzer.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/analysis/synonym/SynonymEngine.java
===================================================================
--- lucene/src/liatests/analysis/synonym/SynonymEngine.java	(revision 0)
+++ lucene/src/liatests/analysis/synonym/SynonymEngine.java	(revision 0)
@@ -0,0 +1,25 @@
+package lia.analysis.synonym;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.IOException;
+
+// From chapter 4
+public interface SynonymEngine {
+  String[] getSynonyms(String s) throws IOException;
+}

Property changes on: lucene/src/liatests/analysis/synonym/SynonymEngine.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/analysis/synonym/SynonymFilter.java
===================================================================
--- lucene/src/liatests/analysis/synonym/SynonymFilter.java	(revision 0)
+++ lucene/src/liatests/analysis/synonym/SynonymFilter.java	(revision 0)
@@ -0,0 +1,90 @@
+package lia.analysis.synonym;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.analysis.TokenStream;
+import org.apache.lucene.analysis.TokenFilter;
+import org.apache.lucene.analysis.tokenattributes.TermAttribute;
+import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute;
+import org.apache.lucene.util.AttributeSource;
+import java.io.IOException;
+import java.util.Stack;
+import lia.analysis.AnalyzerUtils;
+
+// From chapter 4
+public class SynonymFilter extends TokenFilter {
+  public static final String TOKEN_TYPE_SYNONYM = "SYNONYM";
+
+  private Stack<String> synonymStack;
+  private SynonymEngine engine;
+  private AttributeSource.State current;
+
+  private final TermAttribute termAtt;
+  private final PositionIncrementAttribute posIncrAtt;
+
+  public SynonymFilter(TokenStream in, SynonymEngine engine) {
+    super(in);
+    synonymStack = new Stack<String>();                     //#1 
+    this.engine = engine;
+
+    this.termAtt = addAttribute(TermAttribute.class);
+    this.posIncrAtt = addAttribute(PositionIncrementAttribute.class);
+  }
+
+  public boolean incrementToken() throws IOException {
+    if (synonymStack.size() > 0) {                          //#2
+      String syn = synonymStack.pop();                      //#2
+      restoreState(current);                                //#2
+      termAtt.setTermBuffer(syn);
+      posIncrAtt.setPositionIncrement(0);                   //#3
+      return true;
+    }
+
+    if (!input.incrementToken())                            //#4  
+      return false;
+
+    if (addAliasesToStack()) {                              //#5 
+      current = captureState();                             //#6
+    }
+
+    return true;                                            //#7
+  }
+
+  private boolean addAliasesToStack() throws IOException {
+    String[] synonyms = engine.getSynonyms(termAtt.term()); //#8
+    if (synonyms == null) {
+      return false;
+    }
+    for (String synonym : synonyms) {                       //#9
+      synonymStack.push(synonym);
+    }
+    return true;
+  }
+}
+
+/*
+#1 Define synonym buffer
+#2 Pop buffered synonyms
+#3 Set position increment to 0
+#4 Read next token
+#5 Push synonyms onto stack
+#6 Save current token
+#7 Return current token
+#8 Retrieve synonyms
+#9 Push synonyms onto stack
+*/

Property changes on: lucene/src/liatests/analysis/synonym/SynonymFilter.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lucene/src/liatests/analysis/synonym/SynonymAnalyzerTest.java
===================================================================
--- lucene/src/liatests/analysis/synonym/SynonymAnalyzerTest.java	(revision 0)
+++ lucene/src/liatests/analysis/synonym/SynonymAnalyzerTest.java	(revision 0)
@@ -0,0 +1,139 @@
+package lia.analysis.synonym;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.StringReader;
+
+import junit.framework.TestCase;
+
+import lia.common.TestUtil;
+
+import org.apache.lucene.analysis.standard.StandardAnalyzer;
+import org.apache.lucene.analysis.TokenStream;
+import org.apache.lucene.store.RAMDirectory;
+import org.apache.lucene.index.IndexWriter;
+import org.apache.lucene.index.Term;
+import org.apache.lucene.document.Document;
+import org.apache.lucene.document.Field;
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.Query;
+import org.apache.lucene.search.TermQuery;
+import org.apache.lucene.search.PhraseQuery;
+import org.apache.lucene.queryParser.QueryParser;
+import org.apache.lucene.util.Version;
+import org.apache.lucene.analysis.tokenattributes.TermAttribute;
+import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute;
+
+// From chapter 4
+public class SynonymAnalyzerTest extends TestCase {
+  private IndexSearcher searcher;
+  private static SynonymAnalyzer synonymAnalyzer =
+                      new SynonymAnalyzer(new TestSynonymEngine());
+
+  public void setUp() throws Exception {
+    RAMDirectory directory = new RAMDirectory();
+
+    IndexWriter writer = new IndexWriter(directory,
+                                         synonymAnalyzer,  //#1  
+                                         IndexWriter.MaxFieldLength.UNLIMITED);
+    Document doc = new Document();
+    doc.add(new Field("content",
+                      "The quick brown fox jumps over the lazy dog",
+                      Field.Store.YES,
+                      Field.Index.ANALYZED));  //#2
+    writer.addDocument(doc);
+                                  
+    writer.close();
+
+    searcher = new IndexSearcher(directory, true);
+  }
+
+  public void tearDown() throws Exception {
+    searcher.close();
+  }
+
+  public void testJumps() throws Exception {
+    TokenStream stream =
+      synonymAnalyzer.tokenStream("contents",                   // #A
+                                  new StringReader("jumps"));   // #A
+    TermAttribute term = stream.addAttribute(TermAttribute.class);
+    PositionIncrementAttribute posIncr = stream.addAttribute(PositionIncrementAttribute.class);
+
+    int i = 0;
+    String[] expected = new String[]{"jumps",              // #B
+                                     "hops",               // #B
+                                     "leaps"};             // #B
+    while(stream.incrementToken()) {
+      assertEquals(expected[i], term.term());
+
+      int expectedPos;      // #C
+      if (i == 0) {         // #C
+        expectedPos = 1;    // #C
+      } else {              // #C
+        expectedPos = 0;    // #C
+      }                     // #C
+      assertEquals(expectedPos,                      // #C
+                   posIncr.getPositionIncrement());  // #C
+      i++;
+    }
+    assertEquals(3, i);
+  }
+
+  /*
+    #A Analyze with SynonymAnalyzer
+    #B Check for correct synonyms
+    #C Verify synonyms positions
+  */
+
+  public void testSearchByAPI() throws Exception {
+
+    TermQuery tq = new TermQuery(new Term("content", "hops"));  //#1
+    assertEquals(1, TestUtil.hitCount(searcher, tq));
+
+    PhraseQuery pq = new PhraseQuery();    //#2
+    pq.add(new Term("content", "fox"));    //#2
+    pq.add(new Term("content", "hops"));   //#2
+    assertEquals(1, TestUtil.hitCount(searcher, pq));
+  }
+
+  /*
+    #1 Search for "hops"
+    #2 Search for "fox hops"
+  */
+
+  public void testWithQueryParser() throws Exception {
+    Query query = new QueryParser(Version.LUCENE_30,                   // 1
+                                  "content",                                // 1
+                                  synonymAnalyzer).parse("\"fox jumps\"");  // 1
+    assertEquals(1, TestUtil.hitCount(searcher, query));                   // 1
+    System.out.println("With SynonymAnalyzer, \"fox jumps\" parses to " +
+                                         query.toString("content"));
+
+    query = new QueryParser(Version.LUCENE_30,                         // 2
+                            "content",                                      // 2
+                            new StandardAnalyzer(Version.LUCENE_30)).parse("\"fox jumps\""); // B
+    assertEquals(1, TestUtil.hitCount(searcher, query));                   // 2
+    System.out.println("With StandardAnalyzer, \"fox jumps\" parses to " +
+                                         query.toString("content"));
+  }
+
+  /*
+    #1 SynonymAnalyzer finds the document
+    #2 StandardAnalyzer also finds document
+  */
+}

Property changes on: lucene/src/liatests/analysis/synonym/SynonymAnalyzerTest.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lucene/src/liatests/analysis/synonym/TestSynonymEngine.java
===================================================================
--- lucene/src/liatests/analysis/synonym/TestSynonymEngine.java	(revision 0)
+++ lucene/src/liatests/analysis/synonym/TestSynonymEngine.java	(revision 0)
@@ -0,0 +1,37 @@
+package lia.analysis.synonym;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.util.HashMap;
+
+// From chapter 4
+public class TestSynonymEngine implements SynonymEngine {
+  private static HashMap<String, String[]> map = new HashMap<String, String[]>();
+
+  static {
+    map.put("quick", new String[] {"fast", "speedy"});
+    map.put("jumps", new String[] {"leaps", "hops"});
+    map.put("over", new String[] {"above"});
+    map.put("lazy", new String[] {"apathetic", "sluggish"});
+    map.put("dog", new String[] {"canine", "pooch"});
+  }
+
+  public String[] getSynonyms(String s) {
+    return map.get(s);
+  }
+}

Property changes on: lucene/src/liatests/analysis/synonym/TestSynonymEngine.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lucene/src/liatests/analysis/synonym/SynonymAnalyzerViewer.java
===================================================================
--- lucene/src/liatests/analysis/synonym/SynonymAnalyzerViewer.java	(revision 0)
+++ lucene/src/liatests/analysis/synonym/SynonymAnalyzerViewer.java	(revision 0)
@@ -0,0 +1,40 @@
+package lia.analysis.synonym;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import lia.analysis.AnalyzerUtils;
+import java.io.IOException;
+
+// From chapter 4
+public class SynonymAnalyzerViewer {
+
+  public static void main(String[] args) throws IOException {
+    //SynonymEngine engine = new WordNetSynonymEngine(new File(args[0]));
+    SynonymEngine engine = new TestSynonymEngine();
+
+    AnalyzerUtils.displayTokensWithPositions(
+      new SynonymAnalyzer(engine),
+      "The quick brown fox jumps over the lazy dog");
+
+    /*
+    AnalyzerUtils.displayTokensWithPositions(
+      new SynonymAnalyzer(engine),
+      "\"Oh, we get both kinds - country AND western!\" - B.B.");
+    */
+  }
+}

Property changes on: lucene/src/liatests/analysis/synonym/SynonymAnalyzerViewer.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/analysis/synonym/WordNetSynonymEngine.java
===================================================================
--- lucene/src/liatests/analysis/synonym/WordNetSynonymEngine.java	(revision 0)
+++ lucene/src/liatests/analysis/synonym/WordNetSynonymEngine.java	(revision 0)
@@ -0,0 +1,77 @@
+package lia.analysis.synonym;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.document.Document;
+import org.apache.lucene.index.Term;
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.TermQuery;
+import org.apache.lucene.search.ScoreDoc;
+import org.apache.lucene.store.FSDirectory;
+import org.apache.lucene.store.Directory;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Iterator;
+
+import lia.common.AllDocCollector;
+
+// From chapter 9
+public class WordNetSynonymEngine implements SynonymEngine {
+  IndexSearcher searcher;
+  Directory fsDir;
+
+  public WordNetSynonymEngine(File index) throws IOException {
+    fsDir = FSDirectory.open(index);
+    searcher = new IndexSearcher(fsDir);
+  }
+
+  public void close() throws IOException {
+    searcher.close();
+    fsDir.close();
+  }
+
+  public String[] getSynonyms(String word) throws IOException {
+
+    List<String> synList = new ArrayList<String>();
+
+    AllDocCollector collector = new AllDocCollector();  // #A
+
+    searcher.search(new TermQuery(new Term("word", word)), collector);
+
+    for(ScoreDoc hit : collector.getHits()) {    // #B
+      Document doc = searcher.doc(hit.doc);
+
+      String[] values = doc.getValues("syn");
+
+      for (String syn : values) {  // #C
+        synList.add(syn);
+      }
+    }
+
+    return synList.toArray(new String[0]);
+  }
+}
+
+/*
+  #A Collect every matching document
+  #B Iterate over matching documents
+  #C Record synonyms
+*/

Property changes on: lucene/src/liatests/analysis/synonym/WordNetSynonymEngine.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lucene/src/liatests/analysis/codec/MetaphoneReplacementFilter.java
===================================================================
--- lucene/src/liatests/analysis/codec/MetaphoneReplacementFilter.java	(revision 0)
+++ lucene/src/liatests/analysis/codec/MetaphoneReplacementFilter.java	(revision 0)
@@ -0,0 +1,59 @@
+package lia.analysis.codec;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.analysis.TokenFilter;
+import org.apache.lucene.analysis.TokenStream;
+import org.apache.lucene.analysis.tokenattributes.TermAttribute;
+import org.apache.lucene.analysis.tokenattributes.TypeAttribute;
+import org.apache.commons.codec.language.Metaphone;
+
+import java.io.IOException;
+
+// From chapter 4
+public class MetaphoneReplacementFilter extends TokenFilter {
+  public static final String METAPHONE = "metaphone";
+
+  private Metaphone metaphoner = new Metaphone();
+  private TermAttribute termAttr;
+  private TypeAttribute typeAttr;
+
+  public MetaphoneReplacementFilter(TokenStream input) {
+    super(input);
+    termAttr = addAttribute(TermAttribute.class);
+    typeAttr = addAttribute(TypeAttribute.class);
+  }
+
+  public boolean incrementToken() throws IOException {
+    if (!input.incrementToken())                    //#A  
+      return false;                                 //#A  
+
+    String encoded;
+    encoded = metaphoner.encode(termAttr.term());   //#B
+    termAttr.setTermBuffer(encoded);                //#C
+    typeAttr.setType(METAPHONE);                    //#D
+    return true;
+  }
+}
+
+/*
+#A Advance to next token
+#B Convert to Metaphone encoding
+#C Overwrite with encoded text
+#D Set token type
+*/

Property changes on: lucene/src/liatests/analysis/codec/MetaphoneReplacementFilter.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lucene/src/liatests/analysis/codec/MetaphoneAnalyzerTest.java
===================================================================
--- lucene/src/liatests/analysis/codec/MetaphoneAnalyzerTest.java	(revision 0)
+++ lucene/src/liatests/analysis/codec/MetaphoneAnalyzerTest.java	(revision 0)
@@ -0,0 +1,91 @@
+package lia.analysis.codec;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import junit.framework.TestCase;
+
+import lia.analysis.AnalyzerUtils;
+
+import org.apache.lucene.util.Version;
+import org.apache.lucene.index.IndexWriter;
+import org.apache.lucene.store.RAMDirectory;
+import org.apache.lucene.document.Document;
+import org.apache.lucene.document.Field;
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.Query;
+import org.apache.lucene.search.TopScoreDocCollector;
+import org.apache.lucene.search.TopDocs;
+import org.apache.lucene.queryParser.QueryParser;
+import org.apache.lucene.analysis.Analyzer;
+import org.apache.lucene.analysis.TokenStream;
+import org.apache.lucene.analysis.tokenattributes.TermAttribute;
+import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute;
+
+import java.io.IOException;
+import java.io.StringReader;
+
+// From chapter 4
+public class MetaphoneAnalyzerTest extends TestCase {
+  public void testKoolKat() throws Exception {
+    RAMDirectory directory = new RAMDirectory();
+    Analyzer analyzer = new MetaphoneReplacementAnalyzer();
+
+    IndexWriter writer = new IndexWriter(directory, analyzer, true,
+                                         IndexWriter.MaxFieldLength.UNLIMITED);
+
+    Document doc = new Document();
+    doc.add(new Field("contents", //#A
+                      "cool cat",
+                      Field.Store.YES,
+                      Field.Index.ANALYZED));
+    writer.addDocument(doc);
+    writer.close();
+
+    IndexSearcher searcher = new IndexSearcher(directory);
+
+    Query query = new QueryParser(Version.LUCENE_30,  //#B
+                                  "contents", analyzer)    //#B
+                              .parse("kool kat");          //#B
+
+    TopDocs hits = searcher.search(query, 1);
+    assertEquals(1, hits.totalHits);   //#C
+    int docID = hits.scoreDocs[0].doc;
+    doc = searcher.doc(docID);
+    assertEquals("cool cat", doc.get("contents"));   //#D
+
+    searcher.close();
+  }
+
+  /*
+    #A Index document
+    #B Parse query text
+    #C Verify match
+    #D Retrieve original value
+  */
+
+  public static void main(String[] args) throws IOException {
+    MetaphoneReplacementAnalyzer analyzer =
+                                 new MetaphoneReplacementAnalyzer();
+    AnalyzerUtils.displayTokens(analyzer,
+                   "The quick brown fox jumped over the lazy dog");
+
+    System.out.println("");
+    AnalyzerUtils.displayTokens(analyzer,
+                   "Tha quik brown phox jumpd ovvar tha lazi dag");
+  }
+}

Property changes on: lucene/src/liatests/analysis/codec/MetaphoneAnalyzerTest.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lucene/src/liatests/analysis/codec/MetaphoneReplacementAnalyzer.java
===================================================================
--- lucene/src/liatests/analysis/codec/MetaphoneReplacementAnalyzer.java	(revision 0)
+++ lucene/src/liatests/analysis/codec/MetaphoneReplacementAnalyzer.java	(revision 0)
@@ -0,0 +1,31 @@
+package lia.analysis.codec;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.analysis.Analyzer;
+import org.apache.lucene.analysis.TokenStream;
+import org.apache.lucene.analysis.LetterTokenizer;
+import java.io.Reader;
+
+// From chapter 4
+public class MetaphoneReplacementAnalyzer extends Analyzer {
+  public TokenStream tokenStream(String fieldName, Reader reader) {
+    return new MetaphoneReplacementFilter(
+                   new LetterTokenizer(reader));
+  }
+}

Property changes on: lucene/src/liatests/analysis/codec/MetaphoneReplacementAnalyzer.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/analysis/codec/CodecTest.java
===================================================================
--- lucene/src/liatests/analysis/codec/CodecTest.java	(revision 0)
+++ lucene/src/liatests/analysis/codec/CodecTest.java	(revision 0)
@@ -0,0 +1,30 @@
+package lia.analysis.codec;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import junit.framework.TestCase;
+import org.apache.commons.codec.language.Metaphone;
+
+// From chapter 4
+public class CodecTest extends TestCase {
+  public void testMetaphone() throws Exception {
+    Metaphone metaphoner = new Metaphone();
+    assertEquals(metaphoner.encode("cute"),
+                 metaphoner.encode("cat"));
+  }
+}

Property changes on: lucene/src/liatests/analysis/codec/CodecTest.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/indexing/IndexingTest.java
===================================================================
--- lucene/src/liatests/indexing/IndexingTest.java	(revision 0)
+++ lucene/src/liatests/indexing/IndexingTest.java	(revision 0)
@@ -0,0 +1,203 @@
+package lia.indexing;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import junit.framework.TestCase;
+
+import lia.common.TestUtil;
+
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.store.RAMDirectory;
+import org.apache.lucene.document.Document;
+import org.apache.lucene.document.Field;
+import org.apache.lucene.index.IndexWriter;
+import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.analysis.WhitespaceAnalyzer;
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.Query;
+import org.apache.lucene.search.TermQuery;
+import org.apache.lucene.index.Term;
+
+import java.io.IOException;
+
+// From chapter 2
+public class IndexingTest extends TestCase {
+  protected String[] ids = {"1", "2"};
+  protected String[] unindexed = {"Netherlands", "Italy"};
+  protected String[] unstored = {"Amsterdam has lots of bridges",
+                                 "Venice has lots of canals"};
+  protected String[] text = {"Amsterdam", "Venice"};
+
+  private Directory directory;
+
+  protected void setUp() throws Exception {     //1
+    directory = new RAMDirectory();
+
+    IndexWriter writer = getWriter();           //2
+
+    for (int i = 0; i < ids.length; i++) {      //3
+      Document doc = new Document();
+      doc.add(new Field("id", ids[i],
+                        Field.Store.YES,
+                        Field.Index.NOT_ANALYZED));
+      doc.add(new Field("country", unindexed[i],
+                        Field.Store.YES,
+                        Field.Index.NO));
+      doc.add(new Field("contents", unstored[i],
+                        Field.Store.NO,
+                        Field.Index.ANALYZED));
+      doc.add(new Field("city", text[i],
+                        Field.Store.YES,
+                        Field.Index.ANALYZED));
+      writer.addDocument(doc);
+    }
+    writer.close();
+  }
+
+  private IndexWriter getWriter() throws IOException {            // 2
+    return new IndexWriter(directory, new WhitespaceAnalyzer(),   // 2
+                           IndexWriter.MaxFieldLength.UNLIMITED); // 2
+  }
+
+  protected int getHitCount(String fieldName, String searchString)
+    throws IOException {
+    IndexSearcher searcher = new IndexSearcher(directory); //4
+    Term t = new Term(fieldName, searchString);
+    Query query = new TermQuery(t);                        //5
+    int hitCount = TestUtil.hitCount(searcher, query);     //6
+    searcher.close();
+    return hitCount;
+  }
+
+  public void testIndexWriter() throws IOException {
+    IndexWriter writer = getWriter();
+    assertEquals(ids.length, writer.numDocs());            //7
+    writer.close();
+  }
+
+  public void testIndexReader() throws IOException {
+    IndexReader reader = IndexReader.open(directory);
+    assertEquals(ids.length, reader.maxDoc());             //8
+    assertEquals(ids.length, reader.numDocs());            //8
+    reader.close();
+  }
+
+  /*
+    #1 Run before every test
+    #2 Create IndexWriter
+    #3 Add documents
+    #4 Create new searcher
+    #5 Build simple single-term query
+    #6 Get number of hits
+    #7 Verify writer document count
+    #8 Verify reader document count
+  */
+
+  public void testDeleteBeforeOptimize() throws IOException {
+    IndexWriter writer = getWriter();
+    assertEquals(2, writer.numDocs()); //A
+    writer.deleteDocuments(new Term("id", "1"));  //B
+    writer.commit();
+    assertTrue(writer.hasDeletions());    //1
+    assertEquals(2, writer.maxDoc());    //2
+    assertEquals(1, writer.numDocs());   //2   
+    writer.close();
+  }
+
+  public void testDeleteAfterOptimize() throws IOException {
+    IndexWriter writer = getWriter();
+    assertEquals(2, writer.numDocs());
+    writer.deleteDocuments(new Term("id", "1"));
+    writer.optimize();                //3
+    writer.commit();
+    assertFalse(writer.hasDeletions());
+    assertEquals(1, writer.maxDoc());  //C
+    assertEquals(1, writer.numDocs()); //C    
+    writer.close();
+  }
+
+  /*
+    #A 2 docs in the index
+    #B Delete first document
+    #C 1 indexed document, 0 deleted documents
+    #1 Index contains deletions
+    #2 1 indexed document, 1 deleted document
+    #3 Optimize compacts deletes
+  */  
+
+
+  public void testUpdate() throws IOException {
+
+    assertEquals(1, getHitCount("city", "Amsterdam"));
+
+    IndexWriter writer = getWriter();
+
+    Document doc = new Document();                   //A            
+    doc.add(new Field("id", "1",
+                      Field.Store.YES,
+                      Field.Index.NOT_ANALYZED));    //A
+    doc.add(new Field("country", "Netherlands",
+                      Field.Store.YES,
+                      Field.Index.NO));              //A  
+    doc.add(new Field("contents",                    
+                      "Den Haag has a lot of museums",
+                      Field.Store.NO,
+                      Field.Index.ANALYZED));       //A
+    doc.add(new Field("city", "Den Haag",
+                      Field.Store.YES,
+                      Field.Index.ANALYZED));       //A
+
+    writer.updateDocument(new Term("id", "1"),       //B
+                          doc);                      //B
+    writer.close();
+
+    assertEquals(0, getHitCount("city", "Amsterdam"));//C   
+    assertEquals(1, getHitCount("city", "Haag"));     //D  
+  }
+
+  /*
+    #A Create new document with "Haag" in city field
+    #B Replace original document with new version
+    #C Verify old document is gone
+    #D Verify new document is indexed
+  */
+
+  public void testMaxFieldLength() throws IOException {
+
+    assertEquals(1, getHitCount("contents", "bridges"));  //1
+
+    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), //2
+                                         new IndexWriter.MaxFieldLength(1)); //2
+    Document doc = new Document();                        // 3
+    doc.add(new Field("contents",
+                      "these bridges can't be found",    // 3
+                      Field.Store.NO, Field.Index.ANALYZED));   // 3
+    writer.addDocument(doc);   // 3
+    writer.close();   // 3
+
+    assertEquals(1, getHitCount("contents", "bridges"));   //4
+  }
+
+  /*
+    #1 One initial document has bridges
+    #2 Create writer with maxFieldLength 1
+    #3 Index document with bridges
+    #4 Document can't be found
+  */
+
+}

Property changes on: lucene/src/liatests/indexing/IndexingTest.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/indexing/Fragments.java
===================================================================
--- lucene/src/liatests/indexing/Fragments.java	(revision 0)
+++ lucene/src/liatests/indexing/Fragments.java	(revision 0)
@@ -0,0 +1,236 @@
+package lia.indexing;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.util.Date;
+import java.util.Calendar;
+import java.io.IOException;
+
+import org.apache.lucene.document.DateTools;
+import org.apache.lucene.document.Field;
+import org.apache.lucene.document.NumericField;
+import org.apache.lucene.document.Document;
+import org.apache.lucene.analysis.Analyzer;
+import org.apache.lucene.analysis.WhitespaceAnalyzer;
+import org.apache.lucene.analysis.standard.StandardAnalyzer;
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.store.RAMDirectory;
+import org.apache.lucene.index.IndexWriter;
+import org.apache.lucene.util.Version;
+
+// From chapter 2
+
+/** Just to test the code compiles. */
+class Fragments {
+
+  public static void indexNumbersMethod() {
+    // START
+    new Field("size", "4096", Field.Store.YES, Field.Index.NOT_ANALYZED);
+    new Field("price", "10.99", Field.Store.YES, Field.Index.NOT_ANALYZED);
+    new Field("author", "Arthur C. Clark", Field.Store.YES, Field.Index.NOT_ANALYZED);
+    // END
+  }
+
+  public static final String COMPANY_DOMAIN = "example.com";
+  public static final String BAD_DOMAIN = "yucky-domain.com";
+
+  private String getSenderEmail() {
+    return "bob@smith.com";
+  }
+
+  private String getSenderName() {
+    return "Bob Smith";
+  }
+
+  private String getSenderDomain() {
+    return COMPANY_DOMAIN;
+  }
+
+  private String getSubject() {
+    return "Hi there Lisa";
+  }
+
+  private String getBody() {
+    return "I don't have much to say";
+  }
+
+  private boolean isImportant(String lowerDomain) {
+    return lowerDomain.endsWith(COMPANY_DOMAIN);
+  }
+
+  private boolean isUnimportant(String lowerDomain) {
+    return lowerDomain.endsWith(BAD_DOMAIN);
+  }
+
+  public void ramDirExample() throws Exception {
+    Analyzer analyzer = new WhitespaceAnalyzer();
+    // START
+    Directory ramDir = new RAMDirectory();
+    IndexWriter writer = new IndexWriter(ramDir, analyzer,    
+                                IndexWriter.MaxFieldLength.UNLIMITED);
+    // END
+  }
+
+  public void dirCopy() throws Exception {
+    Directory otherDir = null;
+
+    // START
+    Directory ramDir = new RAMDirectory(otherDir);
+    // END
+  }
+
+  public void addIndexes() throws Exception {
+    Directory otherDir = null;
+    Directory ramDir = null;
+    Analyzer analyzer = null;
+
+    // START
+    IndexWriter writer = new IndexWriter(otherDir, analyzer,
+                                         IndexWriter.MaxFieldLength.UNLIMITED);
+    writer.addIndexesNoOptimize(new Directory[] {ramDir});
+    // END
+  }
+
+  public void docBoostMethod() throws IOException {
+
+    Directory dir = new RAMDirectory();
+    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(Version.LUCENE_30), IndexWriter.MaxFieldLength.UNLIMITED);
+
+    // START
+    Document doc = new Document();
+    String senderEmail = getSenderEmail();
+    String senderName = getSenderName();
+    String subject = getSubject();
+    String body = getBody();
+    doc.add(new Field("senderEmail", senderEmail,
+                      Field.Store.YES,
+                      Field.Index.NOT_ANALYZED));
+    doc.add(new Field("senderName", senderName,
+                      Field.Store.YES,
+                      Field.Index.ANALYZED));
+    doc.add(new Field("subject", subject,
+                      Field.Store.YES,
+                      Field.Index.ANALYZED));
+    doc.add(new Field("body", body,
+                      Field.Store.NO,
+                      Field.Index.ANALYZED));
+    String lowerDomain = getSenderDomain().toLowerCase();
+    if (isImportant(lowerDomain)) {
+      doc.setBoost(1.5F);     //1
+    } else if (isUnimportant(lowerDomain)) {
+      doc.setBoost(0.1F);    //2 
+    }
+    writer.addDocument(doc);
+    // END
+    writer.close();
+
+    /*
+      #1 Good domain boost factor: 1.5
+      #2 Bad domain boost factor: 0.1
+    */
+  }
+
+  public void fieldBoostMethod() throws IOException {
+
+    String senderName = getSenderName();
+    String subject = getSubject();
+
+    // START
+    Field subjectField = new Field("subject", subject,
+                                   Field.Store.YES,
+                                   Field.Index.ANALYZED);
+    subjectField.setBoost(1.2F);
+    // END
+  }
+
+  public void numberField() {
+    Document doc = new Document();
+    // START
+    doc.add(new NumericField("price").setDoubleValue(19.99));
+    // END
+  }
+
+  public void numberTimestamp() {
+    Document doc = new Document();
+    // START
+    doc.add(new NumericField("timestamp")
+             .setLongValue(new Date().getTime()));
+    // END
+
+    // START
+    doc.add(new NumericField("day")
+            .setIntValue((int) (new Date().getTime()/24/3600)));
+    // END
+
+    Date date = new Date();
+    // START
+    Calendar cal = Calendar.getInstance();
+    cal.setTime(date);
+    doc.add(new NumericField("dayOfMonth")
+            .setIntValue(cal.get(Calendar.DAY_OF_MONTH)));
+    // END
+  }
+
+  public void setInfoStream() throws Exception {
+    Directory dir = null;
+    Analyzer analyzer = null;
+    // START
+    IndexWriter writer = new IndexWriter(dir, analyzer,
+                                         true, IndexWriter.MaxFieldLength.UNLIMITED);
+    writer.setInfoStream(System.out);
+    // END
+  }
+
+  public void dateMethod() {
+    Document doc = new Document();
+    doc.add(new Field("indexDate",
+                      DateTools.dateToString(new Date(), DateTools.Resolution.DAY),
+                      Field.Store.YES,
+                      Field.Index.NOT_ANALYZED));
+  }
+
+  public void numericField() throws Exception {
+    Document doc = new Document();
+    NumericField price = new NumericField("price");
+    price.setDoubleValue(19.99);
+    doc.add(price);
+
+    NumericField timestamp = new NumericField("timestamp");
+    timestamp.setLongValue(new Date().getTime());
+    doc.add(timestamp);
+
+    Date b = new Date();
+    NumericField birthday = new NumericField("birthday");
+    String v = DateTools.dateToString(b, DateTools.Resolution.DAY);
+    birthday.setIntValue(Integer.parseInt(v));
+    doc.add(birthday);
+  }
+
+  public void indexAuthors() throws Exception {
+    String[] authors = new String[] {"lisa", "tom"};
+    // START
+    Document doc = new Document();
+    for (String author: authors) {
+      doc.add(new Field("author", author,
+                        Field.Store.YES,
+                        Field.Index.ANALYZED));
+    }
+    // END
+  }
+}
+

Property changes on: lucene/src/liatests/indexing/Fragments.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/indexing/LockTest.java
===================================================================
--- lucene/src/liatests/indexing/LockTest.java	(revision 0)
+++ lucene/src/liatests/indexing/LockTest.java	(revision 0)
@@ -0,0 +1,68 @@
+package lia.indexing;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.index.IndexWriter;
+import org.apache.lucene.analysis.SimpleAnalyzer;
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.store.FSDirectory;
+import org.apache.lucene.store.LockObtainFailedException;
+
+import junit.framework.TestCase;
+import java.io.IOException;
+import java.io.File;
+
+import lia.common.TestUtil;
+
+// From chapter 2
+public class LockTest extends TestCase {
+
+  private Directory dir;
+  private File indexDir;
+
+  protected void setUp() throws IOException {
+    indexDir = new File(
+      System.getProperty("java.io.tmpdir", "tmp") +
+      System.getProperty("file.separator") + "index");
+    dir = FSDirectory.open(indexDir);
+  }
+
+  public void testWriteLock() throws IOException {
+
+    IndexWriter writer1 = new IndexWriter(dir, new SimpleAnalyzer(),
+                                          IndexWriter.MaxFieldLength.UNLIMITED);
+    IndexWriter writer2 = null;
+    try {
+      writer2 = new IndexWriter(dir, new SimpleAnalyzer(),
+                                IndexWriter.MaxFieldLength.UNLIMITED);
+      fail("We should never reach this point");
+    }
+    catch (LockObtainFailedException e) {
+      // e.printStackTrace();  // #A
+    }
+    finally {
+      writer1.close();
+      assertNull(writer2);
+      TestUtil.rmDir(indexDir);
+    }
+  }
+}
+
+/*
+#A Expected exception: only one IndexWriter allowed at once
+*/

Property changes on: lucene/src/liatests/indexing/LockTest.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/indexing/VerboseIndexing.java
===================================================================
--- lucene/src/liatests/indexing/VerboseIndexing.java	(revision 0)
+++ lucene/src/liatests/indexing/VerboseIndexing.java	(revision 0)
@@ -0,0 +1,54 @@
+package lia.indexing;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.store.RAMDirectory;
+import org.apache.lucene.document.Document;
+import org.apache.lucene.document.Field;
+import org.apache.lucene.index.IndexWriter;
+import org.apache.lucene.analysis.WhitespaceAnalyzer;
+
+import java.io.IOException;
+
+// From chapter 2
+public class VerboseIndexing {
+
+  private void index() throws IOException {
+
+    Directory dir = new RAMDirectory();
+
+    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(),
+                                         IndexWriter.MaxFieldLength.UNLIMITED);
+
+    writer.setInfoStream(System.out);
+
+    for (int i = 0; i < 100; i++) {
+      Document doc = new Document();
+      doc.add(new Field("keyword", "goober", Field.Store.YES, Field.Index.NOT_ANALYZED));
+      writer.addDocument(doc);
+    }
+    writer.optimize();
+    writer.close();
+  }
+
+  public static void main(String[] args) throws IOException {
+    VerboseIndexing vi = new VerboseIndexing();
+    vi.index();
+  }
+}

Property changes on: lucene/src/liatests/indexing/VerboseIndexing.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/meetlucene/Fragments.java
===================================================================
--- lucene/src/liatests/meetlucene/Fragments.java	(revision 0)
+++ lucene/src/liatests/meetlucene/Fragments.java	(revision 0)
@@ -0,0 +1,38 @@
+package lia.meetlucene;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.store.*;
+import org.apache.lucene.search.*;
+import org.apache.lucene.index.*;
+import java.io.File;
+import java.io.IOException;
+
+// From chapter 1
+
+/** Just contains any code fragments from chapter 1 */
+
+public class Fragments {
+  public void simpleSearch() throws IOException {
+    Directory dir = FSDirectory.open(new File("/tmp/index"));
+    IndexSearcher searcher = new IndexSearcher(dir);
+    Query q = new TermQuery(new Term("contents", "lucene"));
+    TopDocs hits = searcher.search(q, 10);
+    searcher.close();
+  }
+}
\ No newline at end of file

Property changes on: lucene/src/liatests/meetlucene/Fragments.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lucene/src/liatests/meetlucene/data/apache1.1.txt
===================================================================
--- lucene/src/liatests/meetlucene/data/apache1.1.txt	(revision 0)
+++ lucene/src/liatests/meetlucene/data/apache1.1.txt	(revision 0)
@@ -0,0 +1,58 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2000 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution,
+ *    if any, must include the following acknowledgment:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgment may appear in the software itself,
+ *    if and wherever such third-party acknowledgments normally appear.
+ *
+ * 4. The names "Apache" and "Apache Software Foundation" must
+ *    not be used to endorse or promote products derived from this
+ *    software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache",
+ *    nor may "Apache" appear in their name, without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ *
+ * Portions of this software are based upon public domain software
+ * originally written at the National Center for Supercomputing Applications,
+ * University of Illinois, Urbana-Champaign.
+ */
+

Property changes on: lucene/src/liatests/meetlucene/data/apache1.1.txt
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/meetlucene/data/gpl1.0.txt
===================================================================
--- lucene/src/liatests/meetlucene/data/gpl1.0.txt	(revision 0)
+++ lucene/src/liatests/meetlucene/data/gpl1.0.txt	(revision 0)
@@ -0,0 +1,250 @@
+		    GNU GENERAL PUBLIC LICENSE
+		     Version 1, February 1989
+
+ Copyright (C) 1989 Free Software Foundation, Inc.
+	            51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+
+ Everyone is permitted to copy and distribute verbatim copies
+ of this license document, but changing it is not allowed.
+
+			    Preamble
+
+  The license agreements of most software companies try to keep users
+at the mercy of those companies.  By contrast, our General Public
+License is intended to guarantee your freedom to share and change free
+software--to make sure the software is free for all its users.  The
+General Public License applies to the Free Software Foundation's
+software and to any other program whose authors commit to using it.
+You can use it for your programs, too.
+
+  When we speak of free software, we are referring to freedom, not
+price.  Specifically, the General Public License is designed to make
+sure that you have the freedom to give away or sell copies of free
+software, that you receive source code or can get it if you want it,
+that you can change the software or use pieces of it in new free
+programs; and that you know you can do these things.
+
+  To protect your rights, we need to make restrictions that forbid
+anyone to deny you these rights or to ask you to surrender the rights.
+These restrictions translate to certain responsibilities for you if you
+distribute copies of the software, or if you modify it.
+
+  For example, if you distribute copies of a such a program, whether
+gratis or for a fee, you must give the recipients all the rights that
+you have.  You must make sure that they, too, receive or can get the
+source code.  And you must tell them their rights.
+
+  We protect your rights with two steps: (1) copyright the software, and
+(2) offer you this license which gives you legal permission to copy,
+distribute and/or modify the software.
+
+  Also, for each author's protection and ours, we want to make certain
+that everyone understands that there is no warranty for this free
+software.  If the software is modified by someone else and passed on, we
+want its recipients to know that what they have is not the original, so
+that any problems introduced by others will not reflect on the original
+authors' reputations.
+
+  The precise terms and conditions for copying, distribution and
+modification follow.
+
+		    GNU GENERAL PUBLIC LICENSE
+   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
+
+  0. This License Agreement applies to any program or other work which
+contains a notice placed by the copyright holder saying it may be
+distributed under the terms of this General Public License.  The
+"Program", below, refers to any such program or work, and a "work based
+on the Program" means either the Program or any work containing the
+Program or a portion of it, either verbatim or with modifications.  Each
+licensee is addressed as "you".
+
+  1. You may copy and distribute verbatim copies of the Program's source
+code as you receive it, in any medium, provided that you conspicuously and
+appropriately publish on each copy an appropriate copyright notice and
+disclaimer of warranty; keep intact all the notices that refer to this
+General Public License and to the absence of any warranty; and give any
+other recipients of the Program a copy of this General Public License
+along with the Program.  You may charge a fee for the physical act of
+transferring a copy.
+
+  2. You may modify your copy or copies of the Program or any portion of
+it, and copy and distribute such modifications under the terms of Paragraph
+1 above, provided that you also do the following:
+
+    a) cause the modified files to carry prominent notices stating that
+    you changed the files and the date of any change; and
+
+    b) cause the whole of any work that you distribute or publish, that
+    in whole or in part contains the Program or any part thereof, either
+    with or without modifications, to be licensed at no charge to all
+    third parties under the terms of this General Public License (except
+    that you may choose to grant warranty protection to some or all
+    third parties, at your option).
+
+    c) If the modified program normally reads commands interactively when
+    run, you must cause it, when started running for such interactive use
+    in the simplest and most usual way, to print or display an
+    announcement including an appropriate copyright notice and a notice
+    that there is no warranty (or else, saying that you provide a
+    warranty) and that users may redistribute the program under these
+    conditions, and telling the user how to view a copy of this General
+    Public License.
+
+    d) You may charge a fee for the physical act of transferring a
+    copy, and you may at your option offer warranty protection in
+    exchange for a fee.
+
+Mere aggregation of another independent work with the Program (or its
+derivative) on a volume of a storage or distribution medium does not bring
+the other work under the scope of these terms.
+
+  3. You may copy and distribute the Program (or a portion or derivative of
+it, under Paragraph 2) in object code or executable form under the terms of
+Paragraphs 1 and 2 above provided that you also do one of the following:
+
+    a) accompany it with the complete corresponding machine-readable
+    source code, which must be distributed under the terms of
+    Paragraphs 1 and 2 above; or,
+
+    b) accompany it with a written offer, valid for at least three
+    years, to give any third party free (except for a nominal charge
+    for the cost of distribution) a complete machine-readable copy of the
+    corresponding source code, to be distributed under the terms of
+    Paragraphs 1 and 2 above; or,
+
+    c) accompany it with the information you received as to where the
+    corresponding source code may be obtained.  (This alternative is
+    allowed only for noncommercial distribution and only if you
+    received the program in object code or executable form alone.)
+
+Source code for a work means the preferred form of the work for making
+modifications to it.  For an executable file, complete source code means
+all the source code for all modules it contains; but, as a special
+exception, it need not include source code for modules which are standard
+libraries that accompany the operating system on which the executable
+file runs, or for standard header files or definitions files that
+accompany that operating system.
+
+  4. You may not copy, modify, sublicense, distribute or transfer the
+Program except as expressly provided under this General Public License.
+Any attempt otherwise to copy, modify, sublicense, distribute or transfer
+the Program is void, and will automatically terminate your rights to use
+the Program under this License.  However, parties who have received
+copies, or rights to use copies, from you under this General Public
+License will not have their licenses terminated so long as such parties
+remain in full compliance.
+
+  5. By copying, distributing or modifying the Program (or any work based
+on the Program) you indicate your acceptance of this license to do so,
+and all its terms and conditions.
+
+  6. Each time you redistribute the Program (or any work based on the
+Program), the recipient automatically receives a license from the original
+licensor to copy, distribute or modify the Program subject to these
+terms and conditions.  You may not impose any further restrictions on the
+recipients' exercise of the rights granted herein.
+
+  7. The Free Software Foundation may publish revised and/or new versions
+of the General Public License from time to time.  Such new versions will
+be similar in spirit to the present version, but may differ in detail to
+address new problems or concerns.
+
+Each version is given a distinguishing version number.  If the Program
+specifies a version number of the license which applies to it and "any
+later version", you have the option of following the terms and conditions
+either of that version or of any later version published by the Free
+Software Foundation.  If the Program does not specify a version number of
+the license, you may choose any version ever published by the Free Software
+Foundation.
+
+  8. If you wish to incorporate parts of the Program into other free
+programs whose distribution conditions are different, write to the author
+to ask for permission.  For software which is copyrighted by the Free
+Software Foundation, write to the Free Software Foundation; we sometimes
+make exceptions for this.  Our decision will be guided by the two goals
+of preserving the free status of all derivatives of our free software and
+of promoting the sharing and reuse of software generally.
+
+			    NO WARRANTY
+
+  9. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
+FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
+OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
+PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
+OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
+TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
+PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
+REPAIR OR CORRECTION.
+
+  10. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
+WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
+REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
+INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
+OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
+TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
+YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
+PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
+POSSIBILITY OF SUCH DAMAGES.
+
+		     END OF TERMS AND CONDITIONS
+
+	Appendix: How to Apply These Terms to Your New Programs
+
+  If you develop a new program, and you want it to be of the greatest
+possible use to humanity, the best way to achieve this is to make it
+free software which everyone can redistribute and change under these
+terms.
+
+  To do so, attach the following notices to the program.  It is safest to
+attach them to the start of each source file to most effectively convey
+the exclusion of warranty; and each file should have at least the
+"copyright" line and a pointer to where the full notice is found.
+
+    <one line to give the program's name and a brief idea of what it does.>
+    Copyright (C) 19yy  <name of author>
+
+    This program is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation; either version 1, or (at your option)
+    any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with this program; if not, write to the Free Software
+    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston MA  02110-1301 USA
+
+
+Also add information on how to contact you by electronic and paper mail.
+
+If the program is interactive, make it output a short notice like this
+when it starts in an interactive mode:
+
+    Gnomovision version 69, Copyright (C) 19xx name of author
+    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
+    This is free software, and you are welcome to redistribute it
+    under certain conditions; type `show c' for details.
+
+The hypothetical commands `show w' and `show c' should show the
+appropriate parts of the General Public License.  Of course, the
+commands you use may be called something other than `show w' and `show
+c'; they could even be mouse-clicks or menu items--whatever suits your
+program.
+
+You should also get your employer (if you work as a programmer) or your
+school, if any, to sign a "copyright disclaimer" for the program, if
+necessary.  Here a sample; alter the names:
+
+  Yoyodyne, Inc., hereby disclaims all copyright interest in the
+  program `Gnomovision' (a program to direct compilers to make passes
+  at assemblers) written by James Hacker.
+
+  <signature of Ty Coon>, 1 April 1989
+  Ty Coon, President of Vice
+
+That's all there is to it!

Property changes on: lucene/src/liatests/meetlucene/data/gpl1.0.txt
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/meetlucene/data/apache2.0.txt
===================================================================
--- lucene/src/liatests/meetlucene/data/apache2.0.txt	(revision 0)
+++ lucene/src/liatests/meetlucene/data/apache2.0.txt	(revision 0)
@@ -0,0 +1,201 @@
+                                 Apache License
+                           Version 2.0, January 2004
+                        http://www.apache.org/licenses/
+
+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
+
+   1. Definitions.
+
+      "License" shall mean the terms and conditions for use, reproduction,
+      and distribution as defined by Sections 1 through 9 of this document.
+
+      "Licensor" shall mean the copyright owner or entity authorized by
+      the copyright owner that is granting the License.
+
+      "Legal Entity" shall mean the union of the acting entity and all
+      other entities that control, are controlled by, or are under common
+      control with that entity. For the purposes of this definition,
+      "control" means (i) the power, direct or indirect, to cause the
+      direction or management of such entity, whether by contract or
+      otherwise, or (ii) ownership of fifty percent (50%) or more of the
+      outstanding shares, or (iii) beneficial ownership of such entity.
+
+      "You" (or "Your") shall mean an individual or Legal Entity
+      exercising permissions granted by this License.
+
+      "Source" form shall mean the preferred form for making modifications,
+      including but not limited to software source code, documentation
+      source, and configuration files.
+
+      "Object" form shall mean any form resulting from mechanical
+      transformation or translation of a Source form, including but
+      not limited to compiled object code, generated documentation,
+      and conversions to other media types.
+
+      "Work" shall mean the work of authorship, whether in Source or
+      Object form, made available under the License, as indicated by a
+      copyright notice that is included in or attached to the work
+      (an example is provided in the Appendix below).
+
+      "Derivative Works" shall mean any work, whether in Source or Object
+      form, that is based on (or derived from) the Work and for which the
+      editorial revisions, annotations, elaborations, or other modifications
+      represent, as a whole, an original work of authorship. For the purposes
+      of this License, Derivative Works shall not include works that remain
+      separable from, or merely link (or bind by name) to the interfaces of,
+      the Work and Derivative Works thereof.
+
+      "Contribution" shall mean any work of authorship, including
+      the original version of the Work and any modifications or additions
+      to that Work or Derivative Works thereof, that is intentionally
+      submitted to Licensor for inclusion in the Work by the copyright owner
+      or by an individual or Legal Entity authorized to submit on behalf of
+      the copyright owner. For the purposes of this definition, "submitted"
+      means any form of electronic, verbal, or written communication sent
+      to the Licensor or its representatives, including but not limited to
+      communication on electronic mailing lists, source code control systems,
+      and issue tracking systems that are managed by, or on behalf of, the
+      Licensor for the purpose of discussing and improving the Work, but
+      excluding communication that is conspicuously marked or otherwise
+      designated in writing by the copyright owner as "Not a Contribution."
+
+      "Contributor" shall mean Licensor and any individual or Legal Entity
+      on behalf of whom a Contribution has been received by Licensor and
+      subsequently incorporated within the Work.
+
+   2. Grant of Copyright License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      copyright license to reproduce, prepare Derivative Works of,
+      publicly display, publicly perform, sublicense, and distribute the
+      Work and such Derivative Works in Source or Object form.
+
+   3. Grant of Patent License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      (except as stated in this section) patent license to make, have made,
+      use, offer to sell, sell, import, and otherwise transfer the Work,
+      where such license applies only to those patent claims licensable
+      by such Contributor that are necessarily infringed by their
+      Contribution(s) alone or by combination of their Contribution(s)
+      with the Work to which such Contribution(s) was submitted. If You
+      institute patent litigation against any entity (including a
+      cross-claim or counterclaim in a lawsuit) alleging that the Work
+      or a Contribution incorporated within the Work constitutes direct
+      or contributory patent infringement, then any patent licenses
+      granted to You under this License for that Work shall terminate
+      as of the date such litigation is filed.
+
+   4. Redistribution. You may reproduce and distribute copies of the
+      Work or Derivative Works thereof in any medium, with or without
+      modifications, and in Source or Object form, provided that You
+      meet the following conditions:
+
+      (a) You must give any other recipients of the Work or
+          Derivative Works a copy of this License; and
+
+      (b) You must cause any modified files to carry prominent notices
+          stating that You changed the files; and
+
+      (c) You must retain, in the Source form of any Derivative Works
+          that You distribute, all copyright, patent, trademark, and
+          attribution notices from the Source form of the Work,
+          excluding those notices that do not pertain to any part of
+          the Derivative Works; and
+
+      (d) If the Work includes a "NOTICE" text file as part of its
+          distribution, then any Derivative Works that You distribute must
+          include a readable copy of the attribution notices contained
+          within such NOTICE file, excluding those notices that do not
+          pertain to any part of the Derivative Works, in at least one
+          of the following places: within a NOTICE text file distributed
+          as part of the Derivative Works; within the Source form or
+          documentation, if provided along with the Derivative Works; or,
+          within a display generated by the Derivative Works, if and
+          wherever such third-party notices normally appear. The contents
+          of the NOTICE file are for informational purposes only and
+          do not modify the License. You may add Your own attribution
+          notices within Derivative Works that You distribute, alongside
+          or as an addendum to the NOTICE text from the Work, provided
+          that such additional attribution notices cannot be construed
+          as modifying the License.
+
+      You may add Your own copyright statement to Your modifications and
+      may provide additional or different license terms and conditions
+      for use, reproduction, or distribution of Your modifications, or
+      for any such Derivative Works as a whole, provided Your use,
+      reproduction, and distribution of the Work otherwise complies with
+      the conditions stated in this License.
+
+   5. Submission of Contributions. Unless You explicitly state otherwise,
+      any Contribution intentionally submitted for inclusion in the Work
+      by You to the Licensor shall be under the terms and conditions of
+      this License, without any additional terms or conditions.
+      Notwithstanding the above, nothing herein shall supersede or modify
+      the terms of any separate license agreement you may have executed
+      with Licensor regarding such Contributions.
+
+   6. Trademarks. This License does not grant permission to use the trade
+      names, trademarks, service marks, or product names of the Licensor,
+      except as required for reasonable and customary use in describing the
+      origin of the Work and reproducing the content of the NOTICE file.
+
+   7. Disclaimer of Warranty. Unless required by applicable law or
+      agreed to in writing, Licensor provides the Work (and each
+      Contributor provides its Contributions) on an "AS IS" BASIS,
+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+      implied, including, without limitation, any warranties or conditions
+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
+      PARTICULAR PURPOSE. You are solely responsible for determining the
+      appropriateness of using or redistributing the Work and assume any
+      risks associated with Your exercise of permissions under this License.
+
+   8. Limitation of Liability. In no event and under no legal theory,
+      whether in tort (including negligence), contract, or otherwise,
+      unless required by applicable law (such as deliberate and grossly
+      negligent acts) or agreed to in writing, shall any Contributor be
+      liable to You for damages, including any direct, indirect, special,
+      incidental, or consequential damages of any character arising as a
+      result of this License or out of the use or inability to use the
+      Work (including but not limited to damages for loss of goodwill,
+      work stoppage, computer failure or malfunction, or any and all
+      other commercial damages or losses), even if such Contributor
+      has been advised of the possibility of such damages.
+
+   9. Accepting Warranty or Additional Liability. While redistributing
+      the Work or Derivative Works thereof, You may choose to offer,
+      and charge a fee for, acceptance of support, warranty, indemnity,
+      or other liability obligations and/or rights consistent with this
+      License. However, in accepting such obligations, You may act only
+      on Your own behalf and on Your sole responsibility, not on behalf
+      of any other Contributor, and only if You agree to indemnify,
+      defend, and hold each Contributor harmless for any liability
+      incurred by, or claims asserted against, such Contributor by reason
+      of your accepting any such warranty or additional liability.
+
+   END OF TERMS AND CONDITIONS
+
+   APPENDIX: How to apply the Apache License to your work.
+
+      To apply the Apache License to your work, attach the following
+      boilerplate notice, with the fields enclosed by brackets "[]"
+      replaced with your own identifying information. (Don't include
+      the brackets!)  The text should be enclosed in the appropriate
+      comment syntax for the file format. We also recommend that a
+      file or class name and description of purpose be included on the
+      same "printed page" as the copyright notice for easier
+      identification within third-party archives.
+
+   Copyright [yyyy] [name of copyright owner]
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.

Property changes on: lucene/src/liatests/meetlucene/data/apache2.0.txt
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/meetlucene/data/gpl2.0.txt
===================================================================
--- lucene/src/liatests/meetlucene/data/gpl2.0.txt	(revision 0)
+++ lucene/src/liatests/meetlucene/data/gpl2.0.txt	(revision 0)
@@ -0,0 +1,339 @@
+		    GNU GENERAL PUBLIC LICENSE
+		       Version 2, June 1991
+
+ Copyright (C) 1989, 1991 Free Software Foundation, Inc.,
+ 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ Everyone is permitted to copy and distribute verbatim copies
+ of this license document, but changing it is not allowed.
+
+			    Preamble
+
+  The licenses for most software are designed to take away your
+freedom to share and change it.  By contrast, the GNU General Public
+License is intended to guarantee your freedom to share and change free
+software--to make sure the software is free for all its users.  This
+General Public License applies to most of the Free Software
+Foundation's software and to any other program whose authors commit to
+using it.  (Some other Free Software Foundation software is covered by
+the GNU Lesser General Public License instead.)  You can apply it to
+your programs, too.
+
+  When we speak of free software, we are referring to freedom, not
+price.  Our General Public Licenses are designed to make sure that you
+have the freedom to distribute copies of free software (and charge for
+this service if you wish), that you receive source code or can get it
+if you want it, that you can change the software or use pieces of it
+in new free programs; and that you know you can do these things.
+
+  To protect your rights, we need to make restrictions that forbid
+anyone to deny you these rights or to ask you to surrender the rights.
+These restrictions translate to certain responsibilities for you if you
+distribute copies of the software, or if you modify it.
+
+  For example, if you distribute copies of such a program, whether
+gratis or for a fee, you must give the recipients all the rights that
+you have.  You must make sure that they, too, receive or can get the
+source code.  And you must show them these terms so they know their
+rights.
+
+  We protect your rights with two steps: (1) copyright the software, and
+(2) offer you this license which gives you legal permission to copy,
+distribute and/or modify the software.
+
+  Also, for each author's protection and ours, we want to make certain
+that everyone understands that there is no warranty for this free
+software.  If the software is modified by someone else and passed on, we
+want its recipients to know that what they have is not the original, so
+that any problems introduced by others will not reflect on the original
+authors' reputations.
+
+  Finally, any free program is threatened constantly by software
+patents.  We wish to avoid the danger that redistributors of a free
+program will individually obtain patent licenses, in effect making the
+program proprietary.  To prevent this, we have made it clear that any
+patent must be licensed for everyone's free use or not licensed at all.
+
+  The precise terms and conditions for copying, distribution and
+modification follow.
+
+		    GNU GENERAL PUBLIC LICENSE
+   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
+
+  0. This License applies to any program or other work which contains
+a notice placed by the copyright holder saying it may be distributed
+under the terms of this General Public License.  The "Program", below,
+refers to any such program or work, and a "work based on the Program"
+means either the Program or any derivative work under copyright law:
+that is to say, a work containing the Program or a portion of it,
+either verbatim or with modifications and/or translated into another
+language.  (Hereinafter, translation is included without limitation in
+the term "modification".)  Each licensee is addressed as "you".
+
+Activities other than copying, distribution and modification are not
+covered by this License; they are outside its scope.  The act of
+running the Program is not restricted, and the output from the Program
+is covered only if its contents constitute a work based on the
+Program (independent of having been made by running the Program).
+Whether that is true depends on what the Program does.
+
+  1. You may copy and distribute verbatim copies of the Program's
+source code as you receive it, in any medium, provided that you
+conspicuously and appropriately publish on each copy an appropriate
+copyright notice and disclaimer of warranty; keep intact all the
+notices that refer to this License and to the absence of any warranty;
+and give any other recipients of the Program a copy of this License
+along with the Program.
+
+You may charge a fee for the physical act of transferring a copy, and
+you may at your option offer warranty protection in exchange for a fee.
+
+  2. You may modify your copy or copies of the Program or any portion
+of it, thus forming a work based on the Program, and copy and
+distribute such modifications or work under the terms of Section 1
+above, provided that you also meet all of these conditions:
+
+    a) You must cause the modified files to carry prominent notices
+    stating that you changed the files and the date of any change.
+
+    b) You must cause any work that you distribute or publish, that in
+    whole or in part contains or is derived from the Program or any
+    part thereof, to be licensed as a whole at no charge to all third
+    parties under the terms of this License.
+
+    c) If the modified program normally reads commands interactively
+    when run, you must cause it, when started running for such
+    interactive use in the most ordinary way, to print or display an
+    announcement including an appropriate copyright notice and a
+    notice that there is no warranty (or else, saying that you provide
+    a warranty) and that users may redistribute the program under
+    these conditions, and telling the user how to view a copy of this
+    License.  (Exception: if the Program itself is interactive but
+    does not normally print such an announcement, your work based on
+    the Program is not required to print an announcement.)
+
+These requirements apply to the modified work as a whole.  If
+identifiable sections of that work are not derived from the Program,
+and can be reasonably considered independent and separate works in
+themselves, then this License, and its terms, do not apply to those
+sections when you distribute them as separate works.  But when you
+distribute the same sections as part of a whole which is a work based
+on the Program, the distribution of the whole must be on the terms of
+this License, whose permissions for other licensees extend to the
+entire whole, and thus to each and every part regardless of who wrote it.
+
+Thus, it is not the intent of this section to claim rights or contest
+your rights to work written entirely by you; rather, the intent is to
+exercise the right to control the distribution of derivative or
+collective works based on the Program.
+
+In addition, mere aggregation of another work not based on the Program
+with the Program (or with a work based on the Program) on a volume of
+a storage or distribution medium does not bring the other work under
+the scope of this License.
+
+  3. You may copy and distribute the Program (or a work based on it,
+under Section 2) in object code or executable form under the terms of
+Sections 1 and 2 above provided that you also do one of the following:
+
+    a) Accompany it with the complete corresponding machine-readable
+    source code, which must be distributed under the terms of Sections
+    1 and 2 above on a medium customarily used for software interchange; or,
+
+    b) Accompany it with a written offer, valid for at least three
+    years, to give any third party, for a charge no more than your
+    cost of physically performing source distribution, a complete
+    machine-readable copy of the corresponding source code, to be
+    distributed under the terms of Sections 1 and 2 above on a medium
+    customarily used for software interchange; or,
+
+    c) Accompany it with the information you received as to the offer
+    to distribute corresponding source code.  (This alternative is
+    allowed only for noncommercial distribution and only if you
+    received the program in object code or executable form with such
+    an offer, in accord with Subsection b above.)
+
+The source code for a work means the preferred form of the work for
+making modifications to it.  For an executable work, complete source
+code means all the source code for all modules it contains, plus any
+associated interface definition files, plus the scripts used to
+control compilation and installation of the executable.  However, as a
+special exception, the source code distributed need not include
+anything that is normally distributed (in either source or binary
+form) with the major components (compiler, kernel, and so on) of the
+operating system on which the executable runs, unless that component
+itself accompanies the executable.
+
+If distribution of executable or object code is made by offering
+access to copy from a designated place, then offering equivalent
+access to copy the source code from the same place counts as
+distribution of the source code, even though third parties are not
+compelled to copy the source along with the object code.
+
+  4. You may not copy, modify, sublicense, or distribute the Program
+except as expressly provided under this License.  Any attempt
+otherwise to copy, modify, sublicense or distribute the Program is
+void, and will automatically terminate your rights under this License.
+However, parties who have received copies, or rights, from you under
+this License will not have their licenses terminated so long as such
+parties remain in full compliance.
+
+  5. You are not required to accept this License, since you have not
+signed it.  However, nothing else grants you permission to modify or
+distribute the Program or its derivative works.  These actions are
+prohibited by law if you do not accept this License.  Therefore, by
+modifying or distributing the Program (or any work based on the
+Program), you indicate your acceptance of this License to do so, and
+all its terms and conditions for copying, distributing or modifying
+the Program or works based on it.
+
+  6. Each time you redistribute the Program (or any work based on the
+Program), the recipient automatically receives a license from the
+original licensor to copy, distribute or modify the Program subject to
+these terms and conditions.  You may not impose any further
+restrictions on the recipients' exercise of the rights granted herein.
+You are not responsible for enforcing compliance by third parties to
+this License.
+
+  7. If, as a consequence of a court judgment or allegation of patent
+infringement or for any other reason (not limited to patent issues),
+conditions are imposed on you (whether by court order, agreement or
+otherwise) that contradict the conditions of this License, they do not
+excuse you from the conditions of this License.  If you cannot
+distribute so as to satisfy simultaneously your obligations under this
+License and any other pertinent obligations, then as a consequence you
+may not distribute the Program at all.  For example, if a patent
+license would not permit royalty-free redistribution of the Program by
+all those who receive copies directly or indirectly through you, then
+the only way you could satisfy both it and this License would be to
+refrain entirely from distribution of the Program.
+
+If any portion of this section is held invalid or unenforceable under
+any particular circumstance, the balance of the section is intended to
+apply and the section as a whole is intended to apply in other
+circumstances.
+
+It is not the purpose of this section to induce you to infringe any
+patents or other property right claims or to contest validity of any
+such claims; this section has the sole purpose of protecting the
+integrity of the free software distribution system, which is
+implemented by public license practices.  Many people have made
+generous contributions to the wide range of software distributed
+through that system in reliance on consistent application of that
+system; it is up to the author/donor to decide if he or she is willing
+to distribute software through any other system and a licensee cannot
+impose that choice.
+
+This section is intended to make thoroughly clear what is believed to
+be a consequence of the rest of this License.
+
+  8. If the distribution and/or use of the Program is restricted in
+certain countries either by patents or by copyrighted interfaces, the
+original copyright holder who places the Program under this License
+may add an explicit geographical distribution limitation excluding
+those countries, so that distribution is permitted only in or among
+countries not thus excluded.  In such case, this License incorporates
+the limitation as if written in the body of this License.
+
+  9. The Free Software Foundation may publish revised and/or new versions
+of the General Public License from time to time.  Such new versions will
+be similar in spirit to the present version, but may differ in detail to
+address new problems or concerns.
+
+Each version is given a distinguishing version number.  If the Program
+specifies a version number of this License which applies to it and "any
+later version", you have the option of following the terms and conditions
+either of that version or of any later version published by the Free
+Software Foundation.  If the Program does not specify a version number of
+this License, you may choose any version ever published by the Free Software
+Foundation.
+
+  10. If you wish to incorporate parts of the Program into other free
+programs whose distribution conditions are different, write to the author
+to ask for permission.  For software which is copyrighted by the Free
+Software Foundation, write to the Free Software Foundation; we sometimes
+make exceptions for this.  Our decision will be guided by the two goals
+of preserving the free status of all derivatives of our free software and
+of promoting the sharing and reuse of software generally.
+
+			    NO WARRANTY
+
+  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
+FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
+OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
+PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
+OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
+TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
+PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
+REPAIR OR CORRECTION.
+
+  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
+WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
+REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
+INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
+OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
+TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
+YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
+PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
+POSSIBILITY OF SUCH DAMAGES.
+
+		     END OF TERMS AND CONDITIONS
+
+	    How to Apply These Terms to Your New Programs
+
+  If you develop a new program, and you want it to be of the greatest
+possible use to the public, the best way to achieve this is to make it
+free software which everyone can redistribute and change under these terms.
+
+  To do so, attach the following notices to the program.  It is safest
+to attach them to the start of each source file to most effectively
+convey the exclusion of warranty; and each file should have at least
+the "copyright" line and a pointer to where the full notice is found.
+
+    <one line to give the program's name and a brief idea of what it does.>
+    Copyright (C) <year>  <name of author>
+
+    This program is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation; either version 2 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License along
+    with this program; if not, write to the Free Software Foundation, Inc.,
+    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+
+Also add information on how to contact you by electronic and paper mail.
+
+If the program is interactive, make it output a short notice like this
+when it starts in an interactive mode:
+
+    Gnomovision version 69, Copyright (C) year name of author
+    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
+    This is free software, and you are welcome to redistribute it
+    under certain conditions; type `show c' for details.
+
+The hypothetical commands `show w' and `show c' should show the appropriate
+parts of the General Public License.  Of course, the commands you use may
+be called something other than `show w' and `show c'; they could even be
+mouse-clicks or menu items--whatever suits your program.
+
+You should also get your employer (if you work as a programmer) or your
+school, if any, to sign a "copyright disclaimer" for the program, if
+necessary.  Here is a sample; alter the names:
+
+  Yoyodyne, Inc., hereby disclaims all copyright interest in the program
+  `Gnomovision' (which makes passes at compilers) written by James Hacker.
+
+  <signature of Ty Coon>, 1 April 1989
+  Ty Coon, President of Vice
+
+This General Public License does not permit incorporating your program into
+proprietary programs.  If your program is a subroutine library, you may
+consider it more useful to permit linking proprietary applications with the
+library.  If this is what you want to do, use the GNU Lesser General
+Public License instead of this License.

Property changes on: lucene/src/liatests/meetlucene/data/gpl2.0.txt
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/meetlucene/data/gpl3.0.txt
===================================================================
--- lucene/src/liatests/meetlucene/data/gpl3.0.txt	(revision 0)
+++ lucene/src/liatests/meetlucene/data/gpl3.0.txt	(revision 0)
@@ -0,0 +1,674 @@
+                    GNU GENERAL PUBLIC LICENSE
+                       Version 3, 29 June 2007
+
+ Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>
+ Everyone is permitted to copy and distribute verbatim copies
+ of this license document, but changing it is not allowed.
+
+                            Preamble
+
+  The GNU General Public License is a free, copyleft license for
+software and other kinds of works.
+
+  The licenses for most software and other practical works are designed
+to take away your freedom to share and change the works.  By contrast,
+the GNU General Public License is intended to guarantee your freedom to
+share and change all versions of a program--to make sure it remains free
+software for all its users.  We, the Free Software Foundation, use the
+GNU General Public License for most of our software; it applies also to
+any other work released this way by its authors.  You can apply it to
+your programs, too.
+
+  When we speak of free software, we are referring to freedom, not
+price.  Our General Public Licenses are designed to make sure that you
+have the freedom to distribute copies of free software (and charge for
+them if you wish), that you receive source code or can get it if you
+want it, that you can change the software or use pieces of it in new
+free programs, and that you know you can do these things.
+
+  To protect your rights, we need to prevent others from denying you
+these rights or asking you to surrender the rights.  Therefore, you have
+certain responsibilities if you distribute copies of the software, or if
+you modify it: responsibilities to respect the freedom of others.
+
+  For example, if you distribute copies of such a program, whether
+gratis or for a fee, you must pass on to the recipients the same
+freedoms that you received.  You must make sure that they, too, receive
+or can get the source code.  And you must show them these terms so they
+know their rights.
+
+  Developers that use the GNU GPL protect your rights with two steps:
+(1) assert copyright on the software, and (2) offer you this License
+giving you legal permission to copy, distribute and/or modify it.
+
+  For the developers' and authors' protection, the GPL clearly explains
+that there is no warranty for this free software.  For both users' and
+authors' sake, the GPL requires that modified versions be marked as
+changed, so that their problems will not be attributed erroneously to
+authors of previous versions.
+
+  Some devices are designed to deny users access to install or run
+modified versions of the software inside them, although the manufacturer
+can do so.  This is fundamentally incompatible with the aim of
+protecting users' freedom to change the software.  The systematic
+pattern of such abuse occurs in the area of products for individuals to
+use, which is precisely where it is most unacceptable.  Therefore, we
+have designed this version of the GPL to prohibit the practice for those
+products.  If such problems arise substantially in other domains, we
+stand ready to extend this provision to those domains in future versions
+of the GPL, as needed to protect the freedom of users.
+
+  Finally, every program is threatened constantly by software patents.
+States should not allow patents to restrict development and use of
+software on general-purpose computers, but in those that do, we wish to
+avoid the special danger that patents applied to a free program could
+make it effectively proprietary.  To prevent this, the GPL assures that
+patents cannot be used to render the program non-free.
+
+  The precise terms and conditions for copying, distribution and
+modification follow.
+
+                       TERMS AND CONDITIONS
+
+  0. Definitions.
+
+  "This License" refers to version 3 of the GNU General Public License.
+
+  "Copyright" also means copyright-like laws that apply to other kinds of
+works, such as semiconductor masks.
+
+  "The Program" refers to any copyrightable work licensed under this
+License.  Each licensee is addressed as "you".  "Licensees" and
+"recipients" may be individuals or organizations.
+
+  To "modify" a work means to copy from or adapt all or part of the work
+in a fashion requiring copyright permission, other than the making of an
+exact copy.  The resulting work is called a "modified version" of the
+earlier work or a work "based on" the earlier work.
+
+  A "covered work" means either the unmodified Program or a work based
+on the Program.
+
+  To "propagate" a work means to do anything with it that, without
+permission, would make you directly or secondarily liable for
+infringement under applicable copyright law, except executing it on a
+computer or modifying a private copy.  Propagation includes copying,
+distribution (with or without modification), making available to the
+public, and in some countries other activities as well.
+
+  To "convey" a work means any kind of propagation that enables other
+parties to make or receive copies.  Mere interaction with a user through
+a computer network, with no transfer of a copy, is not conveying.
+
+  An interactive user interface displays "Appropriate Legal Notices"
+to the extent that it includes a convenient and prominently visible
+feature that (1) displays an appropriate copyright notice, and (2)
+tells the user that there is no warranty for the work (except to the
+extent that warranties are provided), that licensees may convey the
+work under this License, and how to view a copy of this License.  If
+the interface presents a list of user commands or options, such as a
+menu, a prominent item in the list meets this criterion.
+
+  1. Source Code.
+
+  The "source code" for a work means the preferred form of the work
+for making modifications to it.  "Object code" means any non-source
+form of a work.
+
+  A "Standard Interface" means an interface that either is an official
+standard defined by a recognized standards body, or, in the case of
+interfaces specified for a particular programming language, one that
+is widely used among developers working in that language.
+
+  The "System Libraries" of an executable work include anything, other
+than the work as a whole, that (a) is included in the normal form of
+packaging a Major Component, but which is not part of that Major
+Component, and (b) serves only to enable use of the work with that
+Major Component, or to implement a Standard Interface for which an
+implementation is available to the public in source code form.  A
+"Major Component", in this context, means a major essential component
+(kernel, window system, and so on) of the specific operating system
+(if any) on which the executable work runs, or a compiler used to
+produce the work, or an object code interpreter used to run it.
+
+  The "Corresponding Source" for a work in object code form means all
+the source code needed to generate, install, and (for an executable
+work) run the object code and to modify the work, including scripts to
+control those activities.  However, it does not include the work's
+System Libraries, or general-purpose tools or generally available free
+programs which are used unmodified in performing those activities but
+which are not part of the work.  For example, Corresponding Source
+includes interface definition files associated with source files for
+the work, and the source code for shared libraries and dynamically
+linked subprograms that the work is specifically designed to require,
+such as by intimate data communication or control flow between those
+subprograms and other parts of the work.
+
+  The Corresponding Source need not include anything that users
+can regenerate automatically from other parts of the Corresponding
+Source.
+
+  The Corresponding Source for a work in source code form is that
+same work.
+
+  2. Basic Permissions.
+
+  All rights granted under this License are granted for the term of
+copyright on the Program, and are irrevocable provided the stated
+conditions are met.  This License explicitly affirms your unlimited
+permission to run the unmodified Program.  The output from running a
+covered work is covered by this License only if the output, given its
+content, constitutes a covered work.  This License acknowledges your
+rights of fair use or other equivalent, as provided by copyright law.
+
+  You may make, run and propagate covered works that you do not
+convey, without conditions so long as your license otherwise remains
+in force.  You may convey covered works to others for the sole purpose
+of having them make modifications exclusively for you, or provide you
+with facilities for running those works, provided that you comply with
+the terms of this License in conveying all material for which you do
+not control copyright.  Those thus making or running the covered works
+for you must do so exclusively on your behalf, under your direction
+and control, on terms that prohibit them from making any copies of
+your copyrighted material outside their relationship with you.
+
+  Conveying under any other circumstances is permitted solely under
+the conditions stated below.  Sublicensing is not allowed; section 10
+makes it unnecessary.
+
+  3. Protecting Users' Legal Rights From Anti-Circumvention Law.
+
+  No covered work shall be deemed part of an effective technological
+measure under any applicable law fulfilling obligations under article
+11 of the WIPO copyright treaty adopted on 20 December 1996, or
+similar laws prohibiting or restricting circumvention of such
+measures.
+
+  When you convey a covered work, you waive any legal power to forbid
+circumvention of technological measures to the extent such circumvention
+is effected by exercising rights under this License with respect to
+the covered work, and you disclaim any intention to limit operation or
+modification of the work as a means of enforcing, against the work's
+users, your or third parties' legal rights to forbid circumvention of
+technological measures.
+
+  4. Conveying Verbatim Copies.
+
+  You may convey verbatim copies of the Program's source code as you
+receive it, in any medium, provided that you conspicuously and
+appropriately publish on each copy an appropriate copyright notice;
+keep intact all notices stating that this License and any
+non-permissive terms added in accord with section 7 apply to the code;
+keep intact all notices of the absence of any warranty; and give all
+recipients a copy of this License along with the Program.
+
+  You may charge any price or no price for each copy that you convey,
+and you may offer support or warranty protection for a fee.
+
+  5. Conveying Modified Source Versions.
+
+  You may convey a work based on the Program, or the modifications to
+produce it from the Program, in the form of source code under the
+terms of section 4, provided that you also meet all of these conditions:
+
+    a) The work must carry prominent notices stating that you modified
+    it, and giving a relevant date.
+
+    b) The work must carry prominent notices stating that it is
+    released under this License and any conditions added under section
+    7.  This requirement modifies the requirement in section 4 to
+    "keep intact all notices".
+
+    c) You must license the entire work, as a whole, under this
+    License to anyone who comes into possession of a copy.  This
+    License will therefore apply, along with any applicable section 7
+    additional terms, to the whole of the work, and all its parts,
+    regardless of how they are packaged.  This License gives no
+    permission to license the work in any other way, but it does not
+    invalidate such permission if you have separately received it.
+
+    d) If the work has interactive user interfaces, each must display
+    Appropriate Legal Notices; however, if the Program has interactive
+    interfaces that do not display Appropriate Legal Notices, your
+    work need not make them do so.
+
+  A compilation of a covered work with other separate and independent
+works, which are not by their nature extensions of the covered work,
+and which are not combined with it such as to form a larger program,
+in or on a volume of a storage or distribution medium, is called an
+"aggregate" if the compilation and its resulting copyright are not
+used to limit the access or legal rights of the compilation's users
+beyond what the individual works permit.  Inclusion of a covered work
+in an aggregate does not cause this License to apply to the other
+parts of the aggregate.
+
+  6. Conveying Non-Source Forms.
+
+  You may convey a covered work in object code form under the terms
+of sections 4 and 5, provided that you also convey the
+machine-readable Corresponding Source under the terms of this License,
+in one of these ways:
+
+    a) Convey the object code in, or embodied in, a physical product
+    (including a physical distribution medium), accompanied by the
+    Corresponding Source fixed on a durable physical medium
+    customarily used for software interchange.
+
+    b) Convey the object code in, or embodied in, a physical product
+    (including a physical distribution medium), accompanied by a
+    written offer, valid for at least three years and valid for as
+    long as you offer spare parts or customer support for that product
+    model, to give anyone who possesses the object code either (1) a
+    copy of the Corresponding Source for all the software in the
+    product that is covered by this License, on a durable physical
+    medium customarily used for software interchange, for a price no
+    more than your reasonable cost of physically performing this
+    conveying of source, or (2) access to copy the
+    Corresponding Source from a network server at no charge.
+
+    c) Convey individual copies of the object code with a copy of the
+    written offer to provide the Corresponding Source.  This
+    alternative is allowed only occasionally and noncommercially, and
+    only if you received the object code with such an offer, in accord
+    with subsection 6b.
+
+    d) Convey the object code by offering access from a designated
+    place (gratis or for a charge), and offer equivalent access to the
+    Corresponding Source in the same way through the same place at no
+    further charge.  You need not require recipients to copy the
+    Corresponding Source along with the object code.  If the place to
+    copy the object code is a network server, the Corresponding Source
+    may be on a different server (operated by you or a third party)
+    that supports equivalent copying facilities, provided you maintain
+    clear directions next to the object code saying where to find the
+    Corresponding Source.  Regardless of what server hosts the
+    Corresponding Source, you remain obligated to ensure that it is
+    available for as long as needed to satisfy these requirements.
+
+    e) Convey the object code using peer-to-peer transmission, provided
+    you inform other peers where the object code and Corresponding
+    Source of the work are being offered to the general public at no
+    charge under subsection 6d.
+
+  A separable portion of the object code, whose source code is excluded
+from the Corresponding Source as a System Library, need not be
+included in conveying the object code work.
+
+  A "User Product" is either (1) a "consumer product", which means any
+tangible personal property which is normally used for personal, family,
+or household purposes, or (2) anything designed or sold for incorporation
+into a dwelling.  In determining whether a product is a consumer product,
+doubtful cases shall be resolved in favor of coverage.  For a particular
+product received by a particular user, "normally used" refers to a
+typical or common use of that class of product, regardless of the status
+of the particular user or of the way in which the particular user
+actually uses, or expects or is expected to use, the product.  A product
+is a consumer product regardless of whether the product has substantial
+commercial, industrial or non-consumer uses, unless such uses represent
+the only significant mode of use of the product.
+
+  "Installation Information" for a User Product means any methods,
+procedures, authorization keys, or other information required to install
+and execute modified versions of a covered work in that User Product from
+a modified version of its Corresponding Source.  The information must
+suffice to ensure that the continued functioning of the modified object
+code is in no case prevented or interfered with solely because
+modification has been made.
+
+  If you convey an object code work under this section in, or with, or
+specifically for use in, a User Product, and the conveying occurs as
+part of a transaction in which the right of possession and use of the
+User Product is transferred to the recipient in perpetuity or for a
+fixed term (regardless of how the transaction is characterized), the
+Corresponding Source conveyed under this section must be accompanied
+by the Installation Information.  But this requirement does not apply
+if neither you nor any third party retains the ability to install
+modified object code on the User Product (for example, the work has
+been installed in ROM).
+
+  The requirement to provide Installation Information does not include a
+requirement to continue to provide support service, warranty, or updates
+for a work that has been modified or installed by the recipient, or for
+the User Product in which it has been modified or installed.  Access to a
+network may be denied when the modification itself materially and
+adversely affects the operation of the network or violates the rules and
+protocols for communication across the network.
+
+  Corresponding Source conveyed, and Installation Information provided,
+in accord with this section must be in a format that is publicly
+documented (and with an implementation available to the public in
+source code form), and must require no special password or key for
+unpacking, reading or copying.
+
+  7. Additional Terms.
+
+  "Additional permissions" are terms that supplement the terms of this
+License by making exceptions from one or more of its conditions.
+Additional permissions that are applicable to the entire Program shall
+be treated as though they were included in this License, to the extent
+that they are valid under applicable law.  If additional permissions
+apply only to part of the Program, that part may be used separately
+under those permissions, but the entire Program remains governed by
+this License without regard to the additional permissions.
+
+  When you convey a copy of a covered work, you may at your option
+remove any additional permissions from that copy, or from any part of
+it.  (Additional permissions may be written to require their own
+removal in certain cases when you modify the work.)  You may place
+additional permissions on material, added by you to a covered work,
+for which you have or can give appropriate copyright permission.
+
+  Notwithstanding any other provision of this License, for material you
+add to a covered work, you may (if authorized by the copyright holders of
+that material) supplement the terms of this License with terms:
+
+    a) Disclaiming warranty or limiting liability differently from the
+    terms of sections 15 and 16 of this License; or
+
+    b) Requiring preservation of specified reasonable legal notices or
+    author attributions in that material or in the Appropriate Legal
+    Notices displayed by works containing it; or
+
+    c) Prohibiting misrepresentation of the origin of that material, or
+    requiring that modified versions of such material be marked in
+    reasonable ways as different from the original version; or
+
+    d) Limiting the use for publicity purposes of names of licensors or
+    authors of the material; or
+
+    e) Declining to grant rights under trademark law for use of some
+    trade names, trademarks, or service marks; or
+
+    f) Requiring indemnification of licensors and authors of that
+    material by anyone who conveys the material (or modified versions of
+    it) with contractual assumptions of liability to the recipient, for
+    any liability that these contractual assumptions directly impose on
+    those licensors and authors.
+
+  All other non-permissive additional terms are considered "further
+restrictions" within the meaning of section 10.  If the Program as you
+received it, or any part of it, contains a notice stating that it is
+governed by this License along with a term that is a further
+restriction, you may remove that term.  If a license document contains
+a further restriction but permits relicensing or conveying under this
+License, you may add to a covered work material governed by the terms
+of that license document, provided that the further restriction does
+not survive such relicensing or conveying.
+
+  If you add terms to a covered work in accord with this section, you
+must place, in the relevant source files, a statement of the
+additional terms that apply to those files, or a notice indicating
+where to find the applicable terms.
+
+  Additional terms, permissive or non-permissive, may be stated in the
+form of a separately written license, or stated as exceptions;
+the above requirements apply either way.
+
+  8. Termination.
+
+  You may not propagate or modify a covered work except as expressly
+provided under this License.  Any attempt otherwise to propagate or
+modify it is void, and will automatically terminate your rights under
+this License (including any patent licenses granted under the third
+paragraph of section 11).
+
+  However, if you cease all violation of this License, then your
+license from a particular copyright holder is reinstated (a)
+provisionally, unless and until the copyright holder explicitly and
+finally terminates your license, and (b) permanently, if the copyright
+holder fails to notify you of the violation by some reasonable means
+prior to 60 days after the cessation.
+
+  Moreover, your license from a particular copyright holder is
+reinstated permanently if the copyright holder notifies you of the
+violation by some reasonable means, this is the first time you have
+received notice of violation of this License (for any work) from that
+copyright holder, and you cure the violation prior to 30 days after
+your receipt of the notice.
+
+  Termination of your rights under this section does not terminate the
+licenses of parties who have received copies or rights from you under
+this License.  If your rights have been terminated and not permanently
+reinstated, you do not qualify to receive new licenses for the same
+material under section 10.
+
+  9. Acceptance Not Required for Having Copies.
+
+  You are not required to accept this License in order to receive or
+run a copy of the Program.  Ancillary propagation of a covered work
+occurring solely as a consequence of using peer-to-peer transmission
+to receive a copy likewise does not require acceptance.  However,
+nothing other than this License grants you permission to propagate or
+modify any covered work.  These actions infringe copyright if you do
+not accept this License.  Therefore, by modifying or propagating a
+covered work, you indicate your acceptance of this License to do so.
+
+  10. Automatic Licensing of Downstream Recipients.
+
+  Each time you convey a covered work, the recipient automatically
+receives a license from the original licensors, to run, modify and
+propagate that work, subject to this License.  You are not responsible
+for enforcing compliance by third parties with this License.
+
+  An "entity transaction" is a transaction transferring control of an
+organization, or substantially all assets of one, or subdividing an
+organization, or merging organizations.  If propagation of a covered
+work results from an entity transaction, each party to that
+transaction who receives a copy of the work also receives whatever
+licenses to the work the party's predecessor in interest had or could
+give under the previous paragraph, plus a right to possession of the
+Corresponding Source of the work from the predecessor in interest, if
+the predecessor has it or can get it with reasonable efforts.
+
+  You may not impose any further restrictions on the exercise of the
+rights granted or affirmed under this License.  For example, you may
+not impose a license fee, royalty, or other charge for exercise of
+rights granted under this License, and you may not initiate litigation
+(including a cross-claim or counterclaim in a lawsuit) alleging that
+any patent claim is infringed by making, using, selling, offering for
+sale, or importing the Program or any portion of it.
+
+  11. Patents.
+
+  A "contributor" is a copyright holder who authorizes use under this
+License of the Program or a work on which the Program is based.  The
+work thus licensed is called the contributor's "contributor version".
+
+  A contributor's "essential patent claims" are all patent claims
+owned or controlled by the contributor, whether already acquired or
+hereafter acquired, that would be infringed by some manner, permitted
+by this License, of making, using, or selling its contributor version,
+but do not include claims that would be infringed only as a
+consequence of further modification of the contributor version.  For
+purposes of this definition, "control" includes the right to grant
+patent sublicenses in a manner consistent with the requirements of
+this License.
+
+  Each contributor grants you a non-exclusive, worldwide, royalty-free
+patent license under the contributor's essential patent claims, to
+make, use, sell, offer for sale, import and otherwise run, modify and
+propagate the contents of its contributor version.
+
+  In the following three paragraphs, a "patent license" is any express
+agreement or commitment, however denominated, not to enforce a patent
+(such as an express permission to practice a patent or covenant not to
+sue for patent infringement).  To "grant" such a patent license to a
+party means to make such an agreement or commitment not to enforce a
+patent against the party.
+
+  If you convey a covered work, knowingly relying on a patent license,
+and the Corresponding Source of the work is not available for anyone
+to copy, free of charge and under the terms of this License, through a
+publicly available network server or other readily accessible means,
+then you must either (1) cause the Corresponding Source to be so
+available, or (2) arrange to deprive yourself of the benefit of the
+patent license for this particular work, or (3) arrange, in a manner
+consistent with the requirements of this License, to extend the patent
+license to downstream recipients.  "Knowingly relying" means you have
+actual knowledge that, but for the patent license, your conveying the
+covered work in a country, or your recipient's use of the covered work
+in a country, would infringe one or more identifiable patents in that
+country that you have reason to believe are valid.
+
+  If, pursuant to or in connection with a single transaction or
+arrangement, you convey, or propagate by procuring conveyance of, a
+covered work, and grant a patent license to some of the parties
+receiving the covered work authorizing them to use, propagate, modify
+or convey a specific copy of the covered work, then the patent license
+you grant is automatically extended to all recipients of the covered
+work and works based on it.
+
+  A patent license is "discriminatory" if it does not include within
+the scope of its coverage, prohibits the exercise of, or is
+conditioned on the non-exercise of one or more of the rights that are
+specifically granted under this License.  You may not convey a covered
+work if you are a party to an arrangement with a third party that is
+in the business of distributing software, under which you make payment
+to the third party based on the extent of your activity of conveying
+the work, and under which the third party grants, to any of the
+parties who would receive the covered work from you, a discriminatory
+patent license (a) in connection with copies of the covered work
+conveyed by you (or copies made from those copies), or (b) primarily
+for and in connection with specific products or compilations that
+contain the covered work, unless you entered into that arrangement,
+or that patent license was granted, prior to 28 March 2007.
+
+  Nothing in this License shall be construed as excluding or limiting
+any implied license or other defenses to infringement that may
+otherwise be available to you under applicable patent law.
+
+  12. No Surrender of Others' Freedom.
+
+  If conditions are imposed on you (whether by court order, agreement or
+otherwise) that contradict the conditions of this License, they do not
+excuse you from the conditions of this License.  If you cannot convey a
+covered work so as to satisfy simultaneously your obligations under this
+License and any other pertinent obligations, then as a consequence you may
+not convey it at all.  For example, if you agree to terms that obligate you
+to collect a royalty for further conveying from those to whom you convey
+the Program, the only way you could satisfy both those terms and this
+License would be to refrain entirely from conveying the Program.
+
+  13. Use with the GNU Affero General Public License.
+
+  Notwithstanding any other provision of this License, you have
+permission to link or combine any covered work with a work licensed
+under version 3 of the GNU Affero General Public License into a single
+combined work, and to convey the resulting work.  The terms of this
+License will continue to apply to the part which is the covered work,
+but the special requirements of the GNU Affero General Public License,
+section 13, concerning interaction through a network will apply to the
+combination as such.
+
+  14. Revised Versions of this License.
+
+  The Free Software Foundation may publish revised and/or new versions of
+the GNU General Public License from time to time.  Such new versions will
+be similar in spirit to the present version, but may differ in detail to
+address new problems or concerns.
+
+  Each version is given a distinguishing version number.  If the
+Program specifies that a certain numbered version of the GNU General
+Public License "or any later version" applies to it, you have the
+option of following the terms and conditions either of that numbered
+version or of any later version published by the Free Software
+Foundation.  If the Program does not specify a version number of the
+GNU General Public License, you may choose any version ever published
+by the Free Software Foundation.
+
+  If the Program specifies that a proxy can decide which future
+versions of the GNU General Public License can be used, that proxy's
+public statement of acceptance of a version permanently authorizes you
+to choose that version for the Program.
+
+  Later license versions may give you additional or different
+permissions.  However, no additional obligations are imposed on any
+author or copyright holder as a result of your choosing to follow a
+later version.
+
+  15. Disclaimer of Warranty.
+
+  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
+APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
+HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
+OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
+THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
+IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
+ALL NECESSARY SERVICING, REPAIR OR CORRECTION.
+
+  16. Limitation of Liability.
+
+  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
+WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
+THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
+GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
+USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
+DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
+PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
+EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGES.
+
+  17. Interpretation of Sections 15 and 16.
+
+  If the disclaimer of warranty and limitation of liability provided
+above cannot be given local legal effect according to their terms,
+reviewing courts shall apply local law that most closely approximates
+an absolute waiver of all civil liability in connection with the
+Program, unless a warranty or assumption of liability accompanies a
+copy of the Program in return for a fee.
+
+                     END OF TERMS AND CONDITIONS
+
+            How to Apply These Terms to Your New Programs
+
+  If you develop a new program, and you want it to be of the greatest
+possible use to the public, the best way to achieve this is to make it
+free software which everyone can redistribute and change under these terms.
+
+  To do so, attach the following notices to the program.  It is safest
+to attach them to the start of each source file to most effectively
+state the exclusion of warranty; and each file should have at least
+the "copyright" line and a pointer to where the full notice is found.
+
+    <one line to give the program's name and a brief idea of what it does.>
+    Copyright (C) <year>  <name of author>
+
+    This program is free software: you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation, either version 3 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+Also add information on how to contact you by electronic and paper mail.
+
+  If the program does terminal interaction, make it output a short
+notice like this when it starts in an interactive mode:
+
+    <program>  Copyright (C) <year>  <name of author>
+    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
+    This is free software, and you are welcome to redistribute it
+    under certain conditions; type `show c' for details.
+
+The hypothetical commands `show w' and `show c' should show the appropriate
+parts of the General Public License.  Of course, your program's commands
+might be different; for a GUI interface, you would use an "about box".
+
+  You should also get your employer (if you work as a programmer) or school,
+if any, to sign a "copyright disclaimer" for the program, if necessary.
+For more information on this, and how to apply and follow the GNU GPL, see
+<http://www.gnu.org/licenses/>.
+
+  The GNU General Public License does not permit incorporating your program
+into proprietary programs.  If your program is a subroutine library, you
+may consider it more useful to permit linking proprietary applications with
+the library.  If this is what you want to do, use the GNU Lesser General
+Public License instead of this License.  But first, please read
+<http://www.gnu.org/philosophy/why-not-lgpl.html>.

Property changes on: lucene/src/liatests/meetlucene/data/gpl3.0.txt
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/meetlucene/data/freebsd.txt
===================================================================
--- lucene/src/liatests/meetlucene/data/freebsd.txt	(revision 0)
+++ lucene/src/liatests/meetlucene/data/freebsd.txt	(revision 0)
@@ -0,0 +1,10 @@
+Copyright 1994-2008 The FreeBSD Project. All rights reserved.
+
+Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
+
+   1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
+   2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
+
+THIS SOFTWARE IS PROVIDED BY THE FREEBSD PROJECT ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE FREEBSD PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+The views and conclusions contained in the software and documentation are those of the authors and should not be interpreted as representing official policies, either expressed or implied, of the FreeBSD Project.

Property changes on: lucene/src/liatests/meetlucene/data/freebsd.txt
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/meetlucene/data/lpgl2.0.txt
===================================================================
--- lucene/src/liatests/meetlucene/data/lpgl2.0.txt	(revision 0)
+++ lucene/src/liatests/meetlucene/data/lpgl2.0.txt	(revision 0)
@@ -0,0 +1,481 @@
+		  GNU LIBRARY GENERAL PUBLIC LICENSE
+		       Version 2, June 1991
+
+ Copyright (C) 1991 Free Software Foundation, Inc.
+ 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
+ Everyone is permitted to copy and distribute verbatim copies
+ of this license document, but changing it is not allowed.
+
+[This is the first released version of the library GPL.  It is
+ numbered 2 because it goes with version 2 of the ordinary GPL.]
+
+			    Preamble
+
+  The licenses for most software are designed to take away your
+freedom to share and change it.  By contrast, the GNU General Public
+Licenses are intended to guarantee your freedom to share and change
+free software--to make sure the software is free for all its users.
+
+  This license, the Library General Public License, applies to some
+specially designated Free Software Foundation software, and to any
+other libraries whose authors decide to use it.  You can use it for
+your libraries, too.
+
+  When we speak of free software, we are referring to freedom, not
+price.  Our General Public Licenses are designed to make sure that you
+have the freedom to distribute copies of free software (and charge for
+this service if you wish), that you receive source code or can get it
+if you want it, that you can change the software or use pieces of it
+in new free programs; and that you know you can do these things.
+
+  To protect your rights, we need to make restrictions that forbid
+anyone to deny you these rights or to ask you to surrender the rights.
+These restrictions translate to certain responsibilities for you if
+you distribute copies of the library, or if you modify it.
+
+  For example, if you distribute copies of the library, whether gratis
+or for a fee, you must give the recipients all the rights that we gave
+you.  You must make sure that they, too, receive or can get the source
+code.  If you link a program with the library, you must provide
+complete object files to the recipients so that they can relink them
+with the library, after making changes to the library and recompiling
+it.  And you must show them these terms so they know their rights.
+
+  Our method of protecting your rights has two steps: (1) copyright
+the library, and (2) offer you this license which gives you legal
+permission to copy, distribute and/or modify the library.
+
+  Also, for each distributor's protection, we want to make certain
+that everyone understands that there is no warranty for this free
+library.  If the library is modified by someone else and passed on, we
+want its recipients to know that what they have is not the original
+version, so that any problems introduced by others will not reflect on
+the original authors' reputations.
+
+  Finally, any free program is threatened constantly by software
+patents.  We wish to avoid the danger that companies distributing free
+software will individually obtain patent licenses, thus in effect
+transforming the program into proprietary software.  To prevent this,
+we have made it clear that any patent must be licensed for everyone's
+free use or not licensed at all.
+
+  Most GNU software, including some libraries, is covered by the ordinary
+GNU General Public License, which was designed for utility programs.  This
+license, the GNU Library General Public License, applies to certain
+designated libraries.  This license is quite different from the ordinary
+one; be sure to read it in full, and don't assume that anything in it is
+the same as in the ordinary license.
+
+  The reason we have a separate public license for some libraries is that
+they blur the distinction we usually make between modifying or adding to a
+program and simply using it.  Linking a program with a library, without
+changing the library, is in some sense simply using the library, and is
+analogous to running a utility program or application program.  However, in
+a textual and legal sense, the linked executable is a combined work, a
+derivative of the original library, and the ordinary General Public License
+treats it as such.
+
+  Because of this blurred distinction, using the ordinary General
+Public License for libraries did not effectively promote software
+sharing, because most developers did not use the libraries.  We
+concluded that weaker conditions might promote sharing better.
+
+  However, unrestricted linking of non-free programs would deprive the
+users of those programs of all benefit from the free status of the
+libraries themselves.  This Library General Public License is intended to
+permit developers of non-free programs to use free libraries, while
+preserving your freedom as a user of such programs to change the free
+libraries that are incorporated in them.  (We have not seen how to achieve
+this as regards changes in header files, but we have achieved it as regards
+changes in the actual functions of the Library.)  The hope is that this
+will lead to faster development of free libraries.
+
+  The precise terms and conditions for copying, distribution and
+modification follow.  Pay close attention to the difference between a
+"work based on the library" and a "work that uses the library".  The
+former contains code derived from the library, while the latter only
+works together with the library.
+
+  Note that it is possible for a library to be covered by the ordinary
+General Public License rather than by this special one.
+
+		  GNU LIBRARY GENERAL PUBLIC LICENSE
+   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
+
+  0. This License Agreement applies to any software library which
+contains a notice placed by the copyright holder or other authorized
+party saying it may be distributed under the terms of this Library
+General Public License (also called "this License").  Each licensee is
+addressed as "you".
+
+  A "library" means a collection of software functions and/or data
+prepared so as to be conveniently linked with application programs
+(which use some of those functions and data) to form executables.
+
+  The "Library", below, refers to any such software library or work
+which has been distributed under these terms.  A "work based on the
+Library" means either the Library or any derivative work under
+copyright law: that is to say, a work containing the Library or a
+portion of it, either verbatim or with modifications and/or translated
+straightforwardly into another language.  (Hereinafter, translation is
+included without limitation in the term "modification".)
+
+  "Source code" for a work means the preferred form of the work for
+making modifications to it.  For a library, complete source code means
+all the source code for all modules it contains, plus any associated
+interface definition files, plus the scripts used to control compilation
+and installation of the library.
+
+  Activities other than copying, distribution and modification are not
+covered by this License; they are outside its scope.  The act of
+running a program using the Library is not restricted, and output from
+such a program is covered only if its contents constitute a work based
+on the Library (independent of the use of the Library in a tool for
+writing it).  Whether that is true depends on what the Library does
+and what the program that uses the Library does.
+  
+  1. You may copy and distribute verbatim copies of the Library's
+complete source code as you receive it, in any medium, provided that
+you conspicuously and appropriately publish on each copy an
+appropriate copyright notice and disclaimer of warranty; keep intact
+all the notices that refer to this License and to the absence of any
+warranty; and distribute a copy of this License along with the
+Library.
+
+  You may charge a fee for the physical act of transferring a copy,
+and you may at your option offer warranty protection in exchange for a
+fee.
+
+  2. You may modify your copy or copies of the Library or any portion
+of it, thus forming a work based on the Library, and copy and
+distribute such modifications or work under the terms of Section 1
+above, provided that you also meet all of these conditions:
+
+    a) The modified work must itself be a software library.
+
+    b) You must cause the files modified to carry prominent notices
+    stating that you changed the files and the date of any change.
+
+    c) You must cause the whole of the work to be licensed at no
+    charge to all third parties under the terms of this License.
+
+    d) If a facility in the modified Library refers to a function or a
+    table of data to be supplied by an application program that uses
+    the facility, other than as an argument passed when the facility
+    is invoked, then you must make a good faith effort to ensure that,
+    in the event an application does not supply such function or
+    table, the facility still operates, and performs whatever part of
+    its purpose remains meaningful.
+
+    (For example, a function in a library to compute square roots has
+    a purpose that is entirely well-defined independent of the
+    application.  Therefore, Subsection 2d requires that any
+    application-supplied function or table used by this function must
+    be optional: if the application does not supply it, the square
+    root function must still compute square roots.)
+
+These requirements apply to the modified work as a whole.  If
+identifiable sections of that work are not derived from the Library,
+and can be reasonably considered independent and separate works in
+themselves, then this License, and its terms, do not apply to those
+sections when you distribute them as separate works.  But when you
+distribute the same sections as part of a whole which is a work based
+on the Library, the distribution of the whole must be on the terms of
+this License, whose permissions for other licensees extend to the
+entire whole, and thus to each and every part regardless of who wrote
+it.
+
+Thus, it is not the intent of this section to claim rights or contest
+your rights to work written entirely by you; rather, the intent is to
+exercise the right to control the distribution of derivative or
+collective works based on the Library.
+
+In addition, mere aggregation of another work not based on the Library
+with the Library (or with a work based on the Library) on a volume of
+a storage or distribution medium does not bring the other work under
+the scope of this License.
+
+  3. You may opt to apply the terms of the ordinary GNU General Public
+License instead of this License to a given copy of the Library.  To do
+this, you must alter all the notices that refer to this License, so
+that they refer to the ordinary GNU General Public License, version 2,
+instead of to this License.  (If a newer version than version 2 of the
+ordinary GNU General Public License has appeared, then you can specify
+that version instead if you wish.)  Do not make any other change in
+these notices.
+
+  Once this change is made in a given copy, it is irreversible for
+that copy, so the ordinary GNU General Public License applies to all
+subsequent copies and derivative works made from that copy.
+
+  This option is useful when you wish to copy part of the code of
+the Library into a program that is not a library.
+
+  4. You may copy and distribute the Library (or a portion or
+derivative of it, under Section 2) in object code or executable form
+under the terms of Sections 1 and 2 above provided that you accompany
+it with the complete corresponding machine-readable source code, which
+must be distributed under the terms of Sections 1 and 2 above on a
+medium customarily used for software interchange.
+
+  If distribution of object code is made by offering access to copy
+from a designated place, then offering equivalent access to copy the
+source code from the same place satisfies the requirement to
+distribute the source code, even though third parties are not
+compelled to copy the source along with the object code.
+
+  5. A program that contains no derivative of any portion of the
+Library, but is designed to work with the Library by being compiled or
+linked with it, is called a "work that uses the Library".  Such a
+work, in isolation, is not a derivative work of the Library, and
+therefore falls outside the scope of this License.
+
+  However, linking a "work that uses the Library" with the Library
+creates an executable that is a derivative of the Library (because it
+contains portions of the Library), rather than a "work that uses the
+library".  The executable is therefore covered by this License.
+Section 6 states terms for distribution of such executables.
+
+  When a "work that uses the Library" uses material from a header file
+that is part of the Library, the object code for the work may be a
+derivative work of the Library even though the source code is not.
+Whether this is true is especially significant if the work can be
+linked without the Library, or if the work is itself a library.  The
+threshold for this to be true is not precisely defined by law.
+
+  If such an object file uses only numerical parameters, data
+structure layouts and accessors, and small macros and small inline
+functions (ten lines or less in length), then the use of the object
+file is unrestricted, regardless of whether it is legally a derivative
+work.  (Executables containing this object code plus portions of the
+Library will still fall under Section 6.)
+
+  Otherwise, if the work is a derivative of the Library, you may
+distribute the object code for the work under the terms of Section 6.
+Any executables containing that work also fall under Section 6,
+whether or not they are linked directly with the Library itself.
+
+  6. As an exception to the Sections above, you may also compile or
+link a "work that uses the Library" with the Library to produce a
+work containing portions of the Library, and distribute that work
+under terms of your choice, provided that the terms permit
+modification of the work for the customer's own use and reverse
+engineering for debugging such modifications.
+
+  You must give prominent notice with each copy of the work that the
+Library is used in it and that the Library and its use are covered by
+this License.  You must supply a copy of this License.  If the work
+during execution displays copyright notices, you must include the
+copyright notice for the Library among them, as well as a reference
+directing the user to the copy of this License.  Also, you must do one
+of these things:
+
+    a) Accompany the work with the complete corresponding
+    machine-readable source code for the Library including whatever
+    changes were used in the work (which must be distributed under
+    Sections 1 and 2 above); and, if the work is an executable linked
+    with the Library, with the complete machine-readable "work that
+    uses the Library", as object code and/or source code, so that the
+    user can modify the Library and then relink to produce a modified
+    executable containing the modified Library.  (It is understood
+    that the user who changes the contents of definitions files in the
+    Library will not necessarily be able to recompile the application
+    to use the modified definitions.)
+
+    b) Accompany the work with a written offer, valid for at
+    least three years, to give the same user the materials
+    specified in Subsection 6a, above, for a charge no more
+    than the cost of performing this distribution.
+
+    c) If distribution of the work is made by offering access to copy
+    from a designated place, offer equivalent access to copy the above
+    specified materials from the same place.
+
+    d) Verify that the user has already received a copy of these
+    materials or that you have already sent this user a copy.
+
+  For an executable, the required form of the "work that uses the
+Library" must include any data and utility programs needed for
+reproducing the executable from it.  However, as a special exception,
+the source code distributed need not include anything that is normally
+distributed (in either source or binary form) with the major
+components (compiler, kernel, and so on) of the operating system on
+which the executable runs, unless that component itself accompanies
+the executable.
+
+  It may happen that this requirement contradicts the license
+restrictions of other proprietary libraries that do not normally
+accompany the operating system.  Such a contradiction means you cannot
+use both them and the Library together in an executable that you
+distribute.
+
+  7. You may place library facilities that are a work based on the
+Library side-by-side in a single library together with other library
+facilities not covered by this License, and distribute such a combined
+library, provided that the separate distribution of the work based on
+the Library and of the other library facilities is otherwise
+permitted, and provided that you do these two things:
+
+    a) Accompany the combined library with a copy of the same work
+    based on the Library, uncombined with any other library
+    facilities.  This must be distributed under the terms of the
+    Sections above.
+
+    b) Give prominent notice with the combined library of the fact
+    that part of it is a work based on the Library, and explaining
+    where to find the accompanying uncombined form of the same work.
+
+  8. You may not copy, modify, sublicense, link with, or distribute
+the Library except as expressly provided under this License.  Any
+attempt otherwise to copy, modify, sublicense, link with, or
+distribute the Library is void, and will automatically terminate your
+rights under this License.  However, parties who have received copies,
+or rights, from you under this License will not have their licenses
+terminated so long as such parties remain in full compliance.
+
+  9. You are not required to accept this License, since you have not
+signed it.  However, nothing else grants you permission to modify or
+distribute the Library or its derivative works.  These actions are
+prohibited by law if you do not accept this License.  Therefore, by
+modifying or distributing the Library (or any work based on the
+Library), you indicate your acceptance of this License to do so, and
+all its terms and conditions for copying, distributing or modifying
+the Library or works based on it.
+
+  10. Each time you redistribute the Library (or any work based on the
+Library), the recipient automatically receives a license from the
+original licensor to copy, distribute, link with or modify the Library
+subject to these terms and conditions.  You may not impose any further
+restrictions on the recipients' exercise of the rights granted herein.
+You are not responsible for enforcing compliance by third parties to
+this License.
+
+  11. If, as a consequence of a court judgment or allegation of patent
+infringement or for any other reason (not limited to patent issues),
+conditions are imposed on you (whether by court order, agreement or
+otherwise) that contradict the conditions of this License, they do not
+excuse you from the conditions of this License.  If you cannot
+distribute so as to satisfy simultaneously your obligations under this
+License and any other pertinent obligations, then as a consequence you
+may not distribute the Library at all.  For example, if a patent
+license would not permit royalty-free redistribution of the Library by
+all those who receive copies directly or indirectly through you, then
+the only way you could satisfy both it and this License would be to
+refrain entirely from distribution of the Library.
+
+If any portion of this section is held invalid or unenforceable under any
+particular circumstance, the balance of the section is intended to apply,
+and the section as a whole is intended to apply in other circumstances.
+
+It is not the purpose of this section to induce you to infringe any
+patents or other property right claims or to contest validity of any
+such claims; this section has the sole purpose of protecting the
+integrity of the free software distribution system which is
+implemented by public license practices.  Many people have made
+generous contributions to the wide range of software distributed
+through that system in reliance on consistent application of that
+system; it is up to the author/donor to decide if he or she is willing
+to distribute software through any other system and a licensee cannot
+impose that choice.
+
+This section is intended to make thoroughly clear what is believed to
+be a consequence of the rest of this License.
+
+  12. If the distribution and/or use of the Library is restricted in
+certain countries either by patents or by copyrighted interfaces, the
+original copyright holder who places the Library under this License may add
+an explicit geographical distribution limitation excluding those countries,
+so that distribution is permitted only in or among countries not thus
+excluded.  In such case, this License incorporates the limitation as if
+written in the body of this License.
+
+  13. The Free Software Foundation may publish revised and/or new
+versions of the Library General Public License from time to time.
+Such new versions will be similar in spirit to the present version,
+but may differ in detail to address new problems or concerns.
+
+Each version is given a distinguishing version number.  If the Library
+specifies a version number of this License which applies to it and
+"any later version", you have the option of following the terms and
+conditions either of that version or of any later version published by
+the Free Software Foundation.  If the Library does not specify a
+license version number, you may choose any version ever published by
+the Free Software Foundation.
+
+  14. If you wish to incorporate parts of the Library into other free
+programs whose distribution conditions are incompatible with these,
+write to the author to ask for permission.  For software which is
+copyrighted by the Free Software Foundation, write to the Free
+Software Foundation; we sometimes make exceptions for this.  Our
+decision will be guided by the two goals of preserving the free status
+of all derivatives of our free software and of promoting the sharing
+and reuse of software generally.
+
+			    NO WARRANTY
+
+  15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO
+WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW.
+EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR
+OTHER PARTIES PROVIDE THE LIBRARY "AS IS" WITHOUT WARRANTY OF ANY
+KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE
+LIBRARY IS WITH YOU.  SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME
+THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.
+
+  16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
+WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY
+AND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU
+FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR
+CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE
+LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING
+RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A
+FAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF
+SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH
+DAMAGES.
+
+		     END OF TERMS AND CONDITIONS
+
+           How to Apply These Terms to Your New Libraries
+
+  If you develop a new library, and you want it to be of the greatest
+possible use to the public, we recommend making it free software that
+everyone can redistribute and change.  You can do so by permitting
+redistribution under these terms (or, alternatively, under the terms of the
+ordinary General Public License).
+
+  To apply these terms, attach the following notices to the library.  It is
+safest to attach them to the start of each source file to most effectively
+convey the exclusion of warranty; and each file should have at least the
+"copyright" line and a pointer to where the full notice is found.
+
+    <one line to give the library's name and a brief idea of what it does.>
+    Copyright (C) <year>  <name of author>
+
+    This library is free software; you can redistribute it and/or
+    modify it under the terms of the GNU Library General Public
+    License as published by the Free Software Foundation; either
+    version 2 of the License, or (at your option) any later version.
+
+    This library is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+    Library General Public License for more details.
+
+    You should have received a copy of the GNU Library General Public
+    License along with this library; if not, write to the Free
+    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
+
+Also add information on how to contact you by electronic and paper mail.
+
+You should also get your employer (if you work as a programmer) or your
+school, if any, to sign a "copyright disclaimer" for the library, if
+necessary.  Here is a sample; alter the names:
+
+  Yoyodyne, Inc., hereby disclaims all copyright interest in the
+  library `Frob' (a library for tweaking knobs) written by James Random Hacker.
+
+  <signature of Ty Coon>, 1 April 1990
+  Ty Coon, President of Vice
+
+That's all there is to it!

Property changes on: lucene/src/liatests/meetlucene/data/lpgl2.0.txt
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/meetlucene/data/lgpl2.1.txt
===================================================================
--- lucene/src/liatests/meetlucene/data/lgpl2.1.txt	(revision 0)
+++ lucene/src/liatests/meetlucene/data/lgpl2.1.txt	(revision 0)
@@ -0,0 +1,504 @@
+		  GNU LESSER GENERAL PUBLIC LICENSE
+		       Version 2.1, February 1999
+
+ Copyright (C) 1991, 1999 Free Software Foundation, Inc.
+ 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
+ Everyone is permitted to copy and distribute verbatim copies
+ of this license document, but changing it is not allowed.
+
+[This is the first released version of the Lesser GPL.  It also counts
+ as the successor of the GNU Library Public License, version 2, hence
+ the version number 2.1.]
+
+			    Preamble
+
+  The licenses for most software are designed to take away your
+freedom to share and change it.  By contrast, the GNU General Public
+Licenses are intended to guarantee your freedom to share and change
+free software--to make sure the software is free for all its users.
+
+  This license, the Lesser General Public License, applies to some
+specially designated software packages--typically libraries--of the
+Free Software Foundation and other authors who decide to use it.  You
+can use it too, but we suggest you first think carefully about whether
+this license or the ordinary General Public License is the better
+strategy to use in any particular case, based on the explanations below.
+
+  When we speak of free software, we are referring to freedom of use,
+not price.  Our General Public Licenses are designed to make sure that
+you have the freedom to distribute copies of free software (and charge
+for this service if you wish); that you receive source code or can get
+it if you want it; that you can change the software and use pieces of
+it in new free programs; and that you are informed that you can do
+these things.
+
+  To protect your rights, we need to make restrictions that forbid
+distributors to deny you these rights or to ask you to surrender these
+rights.  These restrictions translate to certain responsibilities for
+you if you distribute copies of the library or if you modify it.
+
+  For example, if you distribute copies of the library, whether gratis
+or for a fee, you must give the recipients all the rights that we gave
+you.  You must make sure that they, too, receive or can get the source
+code.  If you link other code with the library, you must provide
+complete object files to the recipients, so that they can relink them
+with the library after making changes to the library and recompiling
+it.  And you must show them these terms so they know their rights.
+
+  We protect your rights with a two-step method: (1) we copyright the
+library, and (2) we offer you this license, which gives you legal
+permission to copy, distribute and/or modify the library.
+
+  To protect each distributor, we want to make it very clear that
+there is no warranty for the free library.  Also, if the library is
+modified by someone else and passed on, the recipients should know
+that what they have is not the original version, so that the original
+author's reputation will not be affected by problems that might be
+introduced by others.
+
+  Finally, software patents pose a constant threat to the existence of
+any free program.  We wish to make sure that a company cannot
+effectively restrict the users of a free program by obtaining a
+restrictive license from a patent holder.  Therefore, we insist that
+any patent license obtained for a version of the library must be
+consistent with the full freedom of use specified in this license.
+
+  Most GNU software, including some libraries, is covered by the
+ordinary GNU General Public License.  This license, the GNU Lesser
+General Public License, applies to certain designated libraries, and
+is quite different from the ordinary General Public License.  We use
+this license for certain libraries in order to permit linking those
+libraries into non-free programs.
+
+  When a program is linked with a library, whether statically or using
+a shared library, the combination of the two is legally speaking a
+combined work, a derivative of the original library.  The ordinary
+General Public License therefore permits such linking only if the
+entire combination fits its criteria of freedom.  The Lesser General
+Public License permits more lax criteria for linking other code with
+the library.
+
+  We call this license the "Lesser" General Public License because it
+does Less to protect the user's freedom than the ordinary General
+Public License.  It also provides other free software developers Less
+of an advantage over competing non-free programs.  These disadvantages
+are the reason we use the ordinary General Public License for many
+libraries.  However, the Lesser license provides advantages in certain
+special circumstances.
+
+  For example, on rare occasions, there may be a special need to
+encourage the widest possible use of a certain library, so that it becomes
+a de-facto standard.  To achieve this, non-free programs must be
+allowed to use the library.  A more frequent case is that a free
+library does the same job as widely used non-free libraries.  In this
+case, there is little to gain by limiting the free library to free
+software only, so we use the Lesser General Public License.
+
+  In other cases, permission to use a particular library in non-free
+programs enables a greater number of people to use a large body of
+free software.  For example, permission to use the GNU C Library in
+non-free programs enables many more people to use the whole GNU
+operating system, as well as its variant, the GNU/Linux operating
+system.
+
+  Although the Lesser General Public License is Less protective of the
+users' freedom, it does ensure that the user of a program that is
+linked with the Library has the freedom and the wherewithal to run
+that program using a modified version of the Library.
+
+  The precise terms and conditions for copying, distribution and
+modification follow.  Pay close attention to the difference between a
+"work based on the library" and a "work that uses the library".  The
+former contains code derived from the library, whereas the latter must
+be combined with the library in order to run.
+
+		  GNU LESSER GENERAL PUBLIC LICENSE
+   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
+
+  0. This License Agreement applies to any software library or other
+program which contains a notice placed by the copyright holder or
+other authorized party saying it may be distributed under the terms of
+this Lesser General Public License (also called "this License").
+Each licensee is addressed as "you".
+
+  A "library" means a collection of software functions and/or data
+prepared so as to be conveniently linked with application programs
+(which use some of those functions and data) to form executables.
+
+  The "Library", below, refers to any such software library or work
+which has been distributed under these terms.  A "work based on the
+Library" means either the Library or any derivative work under
+copyright law: that is to say, a work containing the Library or a
+portion of it, either verbatim or with modifications and/or translated
+straightforwardly into another language.  (Hereinafter, translation is
+included without limitation in the term "modification".)
+
+  "Source code" for a work means the preferred form of the work for
+making modifications to it.  For a library, complete source code means
+all the source code for all modules it contains, plus any associated
+interface definition files, plus the scripts used to control compilation
+and installation of the library.
+
+  Activities other than copying, distribution and modification are not
+covered by this License; they are outside its scope.  The act of
+running a program using the Library is not restricted, and output from
+such a program is covered only if its contents constitute a work based
+on the Library (independent of the use of the Library in a tool for
+writing it).  Whether that is true depends on what the Library does
+and what the program that uses the Library does.
+  
+  1. You may copy and distribute verbatim copies of the Library's
+complete source code as you receive it, in any medium, provided that
+you conspicuously and appropriately publish on each copy an
+appropriate copyright notice and disclaimer of warranty; keep intact
+all the notices that refer to this License and to the absence of any
+warranty; and distribute a copy of this License along with the
+Library.
+
+  You may charge a fee for the physical act of transferring a copy,
+and you may at your option offer warranty protection in exchange for a
+fee.
+
+  2. You may modify your copy or copies of the Library or any portion
+of it, thus forming a work based on the Library, and copy and
+distribute such modifications or work under the terms of Section 1
+above, provided that you also meet all of these conditions:
+
+    a) The modified work must itself be a software library.
+
+    b) You must cause the files modified to carry prominent notices
+    stating that you changed the files and the date of any change.
+
+    c) You must cause the whole of the work to be licensed at no
+    charge to all third parties under the terms of this License.
+
+    d) If a facility in the modified Library refers to a function or a
+    table of data to be supplied by an application program that uses
+    the facility, other than as an argument passed when the facility
+    is invoked, then you must make a good faith effort to ensure that,
+    in the event an application does not supply such function or
+    table, the facility still operates, and performs whatever part of
+    its purpose remains meaningful.
+
+    (For example, a function in a library to compute square roots has
+    a purpose that is entirely well-defined independent of the
+    application.  Therefore, Subsection 2d requires that any
+    application-supplied function or table used by this function must
+    be optional: if the application does not supply it, the square
+    root function must still compute square roots.)
+
+These requirements apply to the modified work as a whole.  If
+identifiable sections of that work are not derived from the Library,
+and can be reasonably considered independent and separate works in
+themselves, then this License, and its terms, do not apply to those
+sections when you distribute them as separate works.  But when you
+distribute the same sections as part of a whole which is a work based
+on the Library, the distribution of the whole must be on the terms of
+this License, whose permissions for other licensees extend to the
+entire whole, and thus to each and every part regardless of who wrote
+it.
+
+Thus, it is not the intent of this section to claim rights or contest
+your rights to work written entirely by you; rather, the intent is to
+exercise the right to control the distribution of derivative or
+collective works based on the Library.
+
+In addition, mere aggregation of another work not based on the Library
+with the Library (or with a work based on the Library) on a volume of
+a storage or distribution medium does not bring the other work under
+the scope of this License.
+
+  3. You may opt to apply the terms of the ordinary GNU General Public
+License instead of this License to a given copy of the Library.  To do
+this, you must alter all the notices that refer to this License, so
+that they refer to the ordinary GNU General Public License, version 2,
+instead of to this License.  (If a newer version than version 2 of the
+ordinary GNU General Public License has appeared, then you can specify
+that version instead if you wish.)  Do not make any other change in
+these notices.
+
+  Once this change is made in a given copy, it is irreversible for
+that copy, so the ordinary GNU General Public License applies to all
+subsequent copies and derivative works made from that copy.
+
+  This option is useful when you wish to copy part of the code of
+the Library into a program that is not a library.
+
+  4. You may copy and distribute the Library (or a portion or
+derivative of it, under Section 2) in object code or executable form
+under the terms of Sections 1 and 2 above provided that you accompany
+it with the complete corresponding machine-readable source code, which
+must be distributed under the terms of Sections 1 and 2 above on a
+medium customarily used for software interchange.
+
+  If distribution of object code is made by offering access to copy
+from a designated place, then offering equivalent access to copy the
+source code from the same place satisfies the requirement to
+distribute the source code, even though third parties are not
+compelled to copy the source along with the object code.
+
+  5. A program that contains no derivative of any portion of the
+Library, but is designed to work with the Library by being compiled or
+linked with it, is called a "work that uses the Library".  Such a
+work, in isolation, is not a derivative work of the Library, and
+therefore falls outside the scope of this License.
+
+  However, linking a "work that uses the Library" with the Library
+creates an executable that is a derivative of the Library (because it
+contains portions of the Library), rather than a "work that uses the
+library".  The executable is therefore covered by this License.
+Section 6 states terms for distribution of such executables.
+
+  When a "work that uses the Library" uses material from a header file
+that is part of the Library, the object code for the work may be a
+derivative work of the Library even though the source code is not.
+Whether this is true is especially significant if the work can be
+linked without the Library, or if the work is itself a library.  The
+threshold for this to be true is not precisely defined by law.
+
+  If such an object file uses only numerical parameters, data
+structure layouts and accessors, and small macros and small inline
+functions (ten lines or less in length), then the use of the object
+file is unrestricted, regardless of whether it is legally a derivative
+work.  (Executables containing this object code plus portions of the
+Library will still fall under Section 6.)
+
+  Otherwise, if the work is a derivative of the Library, you may
+distribute the object code for the work under the terms of Section 6.
+Any executables containing that work also fall under Section 6,
+whether or not they are linked directly with the Library itself.
+
+  6. As an exception to the Sections above, you may also combine or
+link a "work that uses the Library" with the Library to produce a
+work containing portions of the Library, and distribute that work
+under terms of your choice, provided that the terms permit
+modification of the work for the customer's own use and reverse
+engineering for debugging such modifications.
+
+  You must give prominent notice with each copy of the work that the
+Library is used in it and that the Library and its use are covered by
+this License.  You must supply a copy of this License.  If the work
+during execution displays copyright notices, you must include the
+copyright notice for the Library among them, as well as a reference
+directing the user to the copy of this License.  Also, you must do one
+of these things:
+
+    a) Accompany the work with the complete corresponding
+    machine-readable source code for the Library including whatever
+    changes were used in the work (which must be distributed under
+    Sections 1 and 2 above); and, if the work is an executable linked
+    with the Library, with the complete machine-readable "work that
+    uses the Library", as object code and/or source code, so that the
+    user can modify the Library and then relink to produce a modified
+    executable containing the modified Library.  (It is understood
+    that the user who changes the contents of definitions files in the
+    Library will not necessarily be able to recompile the application
+    to use the modified definitions.)
+
+    b) Use a suitable shared library mechanism for linking with the
+    Library.  A suitable mechanism is one that (1) uses at run time a
+    copy of the library already present on the user's computer system,
+    rather than copying library functions into the executable, and (2)
+    will operate properly with a modified version of the library, if
+    the user installs one, as long as the modified version is
+    interface-compatible with the version that the work was made with.
+
+    c) Accompany the work with a written offer, valid for at
+    least three years, to give the same user the materials
+    specified in Subsection 6a, above, for a charge no more
+    than the cost of performing this distribution.
+
+    d) If distribution of the work is made by offering access to copy
+    from a designated place, offer equivalent access to copy the above
+    specified materials from the same place.
+
+    e) Verify that the user has already received a copy of these
+    materials or that you have already sent this user a copy.
+
+  For an executable, the required form of the "work that uses the
+Library" must include any data and utility programs needed for
+reproducing the executable from it.  However, as a special exception,
+the materials to be distributed need not include anything that is
+normally distributed (in either source or binary form) with the major
+components (compiler, kernel, and so on) of the operating system on
+which the executable runs, unless that component itself accompanies
+the executable.
+
+  It may happen that this requirement contradicts the license
+restrictions of other proprietary libraries that do not normally
+accompany the operating system.  Such a contradiction means you cannot
+use both them and the Library together in an executable that you
+distribute.
+
+  7. You may place library facilities that are a work based on the
+Library side-by-side in a single library together with other library
+facilities not covered by this License, and distribute such a combined
+library, provided that the separate distribution of the work based on
+the Library and of the other library facilities is otherwise
+permitted, and provided that you do these two things:
+
+    a) Accompany the combined library with a copy of the same work
+    based on the Library, uncombined with any other library
+    facilities.  This must be distributed under the terms of the
+    Sections above.
+
+    b) Give prominent notice with the combined library of the fact
+    that part of it is a work based on the Library, and explaining
+    where to find the accompanying uncombined form of the same work.
+
+  8. You may not copy, modify, sublicense, link with, or distribute
+the Library except as expressly provided under this License.  Any
+attempt otherwise to copy, modify, sublicense, link with, or
+distribute the Library is void, and will automatically terminate your
+rights under this License.  However, parties who have received copies,
+or rights, from you under this License will not have their licenses
+terminated so long as such parties remain in full compliance.
+
+  9. You are not required to accept this License, since you have not
+signed it.  However, nothing else grants you permission to modify or
+distribute the Library or its derivative works.  These actions are
+prohibited by law if you do not accept this License.  Therefore, by
+modifying or distributing the Library (or any work based on the
+Library), you indicate your acceptance of this License to do so, and
+all its terms and conditions for copying, distributing or modifying
+the Library or works based on it.
+
+  10. Each time you redistribute the Library (or any work based on the
+Library), the recipient automatically receives a license from the
+original licensor to copy, distribute, link with or modify the Library
+subject to these terms and conditions.  You may not impose any further
+restrictions on the recipients' exercise of the rights granted herein.
+You are not responsible for enforcing compliance by third parties with
+this License.
+
+  11. If, as a consequence of a court judgment or allegation of patent
+infringement or for any other reason (not limited to patent issues),
+conditions are imposed on you (whether by court order, agreement or
+otherwise) that contradict the conditions of this License, they do not
+excuse you from the conditions of this License.  If you cannot
+distribute so as to satisfy simultaneously your obligations under this
+License and any other pertinent obligations, then as a consequence you
+may not distribute the Library at all.  For example, if a patent
+license would not permit royalty-free redistribution of the Library by
+all those who receive copies directly or indirectly through you, then
+the only way you could satisfy both it and this License would be to
+refrain entirely from distribution of the Library.
+
+If any portion of this section is held invalid or unenforceable under any
+particular circumstance, the balance of the section is intended to apply,
+and the section as a whole is intended to apply in other circumstances.
+
+It is not the purpose of this section to induce you to infringe any
+patents or other property right claims or to contest validity of any
+such claims; this section has the sole purpose of protecting the
+integrity of the free software distribution system which is
+implemented by public license practices.  Many people have made
+generous contributions to the wide range of software distributed
+through that system in reliance on consistent application of that
+system; it is up to the author/donor to decide if he or she is willing
+to distribute software through any other system and a licensee cannot
+impose that choice.
+
+This section is intended to make thoroughly clear what is believed to
+be a consequence of the rest of this License.
+
+  12. If the distribution and/or use of the Library is restricted in
+certain countries either by patents or by copyrighted interfaces, the
+original copyright holder who places the Library under this License may add
+an explicit geographical distribution limitation excluding those countries,
+so that distribution is permitted only in or among countries not thus
+excluded.  In such case, this License incorporates the limitation as if
+written in the body of this License.
+
+  13. The Free Software Foundation may publish revised and/or new
+versions of the Lesser General Public License from time to time.
+Such new versions will be similar in spirit to the present version,
+but may differ in detail to address new problems or concerns.
+
+Each version is given a distinguishing version number.  If the Library
+specifies a version number of this License which applies to it and
+"any later version", you have the option of following the terms and
+conditions either of that version or of any later version published by
+the Free Software Foundation.  If the Library does not specify a
+license version number, you may choose any version ever published by
+the Free Software Foundation.
+
+  14. If you wish to incorporate parts of the Library into other free
+programs whose distribution conditions are incompatible with these,
+write to the author to ask for permission.  For software which is
+copyrighted by the Free Software Foundation, write to the Free
+Software Foundation; we sometimes make exceptions for this.  Our
+decision will be guided by the two goals of preserving the free status
+of all derivatives of our free software and of promoting the sharing
+and reuse of software generally.
+
+			    NO WARRANTY
+
+  15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO
+WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW.
+EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR
+OTHER PARTIES PROVIDE THE LIBRARY "AS IS" WITHOUT WARRANTY OF ANY
+KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE
+LIBRARY IS WITH YOU.  SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME
+THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.
+
+  16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
+WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY
+AND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU
+FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR
+CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE
+LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING
+RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A
+FAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF
+SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH
+DAMAGES.
+
+		     END OF TERMS AND CONDITIONS
+
+           How to Apply These Terms to Your New Libraries
+
+  If you develop a new library, and you want it to be of the greatest
+possible use to the public, we recommend making it free software that
+everyone can redistribute and change.  You can do so by permitting
+redistribution under these terms (or, alternatively, under the terms of the
+ordinary General Public License).
+
+  To apply these terms, attach the following notices to the library.  It is
+safest to attach them to the start of each source file to most effectively
+convey the exclusion of warranty; and each file should have at least the
+"copyright" line and a pointer to where the full notice is found.
+
+    <one line to give the library's name and a brief idea of what it does.>
+    Copyright (C) <year>  <name of author>
+
+    This library is free software; you can redistribute it and/or
+    modify it under the terms of the GNU Lesser General Public
+    License as published by the Free Software Foundation; either
+    version 2.1 of the License, or (at your option) any later version.
+
+    This library is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+    Lesser General Public License for more details.
+
+    You should have received a copy of the GNU Lesser General Public
+    License along with this library; if not, write to the Free Software
+    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
+
+Also add information on how to contact you by electronic and paper mail.
+
+You should also get your employer (if you work as a programmer) or your
+school, if any, to sign a "copyright disclaimer" for the library, if
+necessary.  Here is a sample; alter the names:
+
+  Yoyodyne, Inc., hereby disclaims all copyright interest in the
+  library `Frob' (a library for tweaking knobs) written by James Random Hacker.
+
+  <signature of Ty Coon>, 1 April 1990
+  Ty Coon, President of Vice
+
+That's all there is to it!
+
+

Property changes on: lucene/src/liatests/meetlucene/data/lgpl2.1.txt
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/meetlucene/data/lgpl3.txt
===================================================================
--- lucene/src/liatests/meetlucene/data/lgpl3.txt	(revision 0)
+++ lucene/src/liatests/meetlucene/data/lgpl3.txt	(revision 0)
@@ -0,0 +1,165 @@
+		   GNU LESSER GENERAL PUBLIC LICENSE
+                       Version 3, 29 June 2007
+
+ Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>
+ Everyone is permitted to copy and distribute verbatim copies
+ of this license document, but changing it is not allowed.
+
+
+  This version of the GNU Lesser General Public License incorporates
+the terms and conditions of version 3 of the GNU General Public
+License, supplemented by the additional permissions listed below.
+
+  0. Additional Definitions. 
+
+  As used herein, "this License" refers to version 3 of the GNU Lesser
+General Public License, and the "GNU GPL" refers to version 3 of the GNU
+General Public License.
+
+  "The Library" refers to a covered work governed by this License,
+other than an Application or a Combined Work as defined below.
+
+  An "Application" is any work that makes use of an interface provided
+by the Library, but which is not otherwise based on the Library.
+Defining a subclass of a class defined by the Library is deemed a mode
+of using an interface provided by the Library.
+
+  A "Combined Work" is a work produced by combining or linking an
+Application with the Library.  The particular version of the Library
+with which the Combined Work was made is also called the "Linked
+Version".
+
+  The "Minimal Corresponding Source" for a Combined Work means the
+Corresponding Source for the Combined Work, excluding any source code
+for portions of the Combined Work that, considered in isolation, are
+based on the Application, and not on the Linked Version.
+
+  The "Corresponding Application Code" for a Combined Work means the
+object code and/or source code for the Application, including any data
+and utility programs needed for reproducing the Combined Work from the
+Application, but excluding the System Libraries of the Combined Work.
+
+  1. Exception to Section 3 of the GNU GPL.
+
+  You may convey a covered work under sections 3 and 4 of this License
+without being bound by section 3 of the GNU GPL.
+
+  2. Conveying Modified Versions.
+
+  If you modify a copy of the Library, and, in your modifications, a
+facility refers to a function or data to be supplied by an Application
+that uses the facility (other than as an argument passed when the
+facility is invoked), then you may convey a copy of the modified
+version:
+
+   a) under this License, provided that you make a good faith effort to
+   ensure that, in the event an Application does not supply the
+   function or data, the facility still operates, and performs
+   whatever part of its purpose remains meaningful, or
+
+   b) under the GNU GPL, with none of the additional permissions of
+   this License applicable to that copy.
+
+  3. Object Code Incorporating Material from Library Header Files.
+
+  The object code form of an Application may incorporate material from
+a header file that is part of the Library.  You may convey such object
+code under terms of your choice, provided that, if the incorporated
+material is not limited to numerical parameters, data structure
+layouts and accessors, or small macros, inline functions and templates
+(ten or fewer lines in length), you do both of the following:
+
+   a) Give prominent notice with each copy of the object code that the
+   Library is used in it and that the Library and its use are
+   covered by this License.
+
+   b) Accompany the object code with a copy of the GNU GPL and this license
+   document.
+
+  4. Combined Works.
+
+  You may convey a Combined Work under terms of your choice that,
+taken together, effectively do not restrict modification of the
+portions of the Library contained in the Combined Work and reverse
+engineering for debugging such modifications, if you also do each of
+the following:
+
+   a) Give prominent notice with each copy of the Combined Work that
+   the Library is used in it and that the Library and its use are
+   covered by this License.
+
+   b) Accompany the Combined Work with a copy of the GNU GPL and this license
+   document.
+
+   c) For a Combined Work that displays copyright notices during
+   execution, include the copyright notice for the Library among
+   these notices, as well as a reference directing the user to the
+   copies of the GNU GPL and this license document.
+
+   d) Do one of the following:
+
+       0) Convey the Minimal Corresponding Source under the terms of this
+       License, and the Corresponding Application Code in a form
+       suitable for, and under terms that permit, the user to
+       recombine or relink the Application with a modified version of
+       the Linked Version to produce a modified Combined Work, in the
+       manner specified by section 6 of the GNU GPL for conveying
+       Corresponding Source.
+
+       1) Use a suitable shared library mechanism for linking with the
+       Library.  A suitable mechanism is one that (a) uses at run time
+       a copy of the Library already present on the user's computer
+       system, and (b) will operate properly with a modified version
+       of the Library that is interface-compatible with the Linked
+       Version. 
+
+   e) Provide Installation Information, but only if you would otherwise
+   be required to provide such information under section 6 of the
+   GNU GPL, and only to the extent that such information is
+   necessary to install and execute a modified version of the
+   Combined Work produced by recombining or relinking the
+   Application with a modified version of the Linked Version. (If
+   you use option 4d0, the Installation Information must accompany
+   the Minimal Corresponding Source and Corresponding Application
+   Code. If you use option 4d1, you must provide the Installation
+   Information in the manner specified by section 6 of the GNU GPL
+   for conveying Corresponding Source.)
+
+  5. Combined Libraries.
+
+  You may place library facilities that are a work based on the
+Library side by side in a single library together with other library
+facilities that are not Applications and are not covered by this
+License, and convey such a combined library under terms of your
+choice, if you do both of the following:
+
+   a) Accompany the combined library with a copy of the same work based
+   on the Library, uncombined with any other library facilities,
+   conveyed under the terms of this License.
+
+   b) Give prominent notice with the combined library that part of it
+   is a work based on the Library, and explaining where to find the
+   accompanying uncombined form of the same work.
+
+  6. Revised Versions of the GNU Lesser General Public License.
+
+  The Free Software Foundation may publish revised and/or new versions
+of the GNU Lesser General Public License from time to time. Such new
+versions will be similar in spirit to the present version, but may
+differ in detail to address new problems or concerns.
+
+  Each version is given a distinguishing version number. If the
+Library as you received it specifies that a certain numbered version
+of the GNU Lesser General Public License "or any later version"
+applies to it, you have the option of following the terms and
+conditions either of that published version or of any later version
+published by the Free Software Foundation. If the Library as you
+received it does not specify a version number of the GNU Lesser
+General Public License, you may choose any version of the GNU Lesser
+General Public License ever published by the Free Software Foundation.
+
+  If the Library as you received it specifies that a proxy can decide
+whether future versions of the GNU Lesser General Public License shall
+apply, that proxy's public statement of acceptance of any version is
+permanent authorization for you to choose that version for the
+Library.

Property changes on: lucene/src/liatests/meetlucene/data/lgpl3.txt
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/meetlucene/data/mozilla_eula_firefox3.txt
===================================================================
--- lucene/src/liatests/meetlucene/data/mozilla_eula_firefox3.txt	(revision 0)
+++ lucene/src/liatests/meetlucene/data/mozilla_eula_firefox3.txt	(revision 0)
@@ -0,0 +1,29 @@
+MOZILLA FIREFOX END-USER SOFTWARE LICENSE AGREEMENT
+
+Version 3.0, May 2008
+
+A SOURCE CODE VERSION OF CERTAIN FIREFOX BROWSER FUNCTIONALITY THAT YOU MAY USE, MODIFY AND DISTRIBUTE IS AVAILABLE TO YOU FREE-OF-CHARGE FROM WWW.MOZILLA.ORG UNDER THE MOZILLA PUBLIC LICENSE and other open source software licenses.
+
+The accompanying executable code version of Mozilla Firefox and related documentation (the "Product") is made available to you under the terms of this MOZILLA FIREFOX END-USER SOFTWARE LICENSE AGREEMENT (THE "AGREEMENT").  BY CLICKING THE "ACCEPT" BUTTON, OR BY INSTALLING OR USING THE MOZILLA FIREFOX BROWSER, YOU ARE CONSENTING TO BE BOUND BY THE AGREEMENT.  IF YOU DO NOT AGREE TO THE TERMS AND CONDITIONS OF THIS AGREEMENT, DO NOT CLICK THE "ACCEPT" BUTTON, AND DO NOT INSTALL OR USE ANY PART OF THE MOZILLA FIREFOX BROWSER.
+
+DURING THE MOZILLA FIREFOX INSTALLATION PROCESS, AND AT LATER TIMES, YOU MAY BE GIVEN THE OPTION OF INSTALLING ADDITIONAL COMPONENTS FROM THIRD-PARTY SOFTWARE PROVIDERS.  THE INSTALLATION AND USE OF THOSE THIRD-PARTY COMPONENTS MAY BE GOVERNED BY ADDITIONAL LICENSE AGREEMENTS.
+
+1.  LICENSE GRANT.  The Mozilla Corporation grants you a non-exclusive license to use the executable code version of the Product.  This Agreement will also govern any software upgrades provided by Mozilla that replace and/or supplement the original Product, unless such upgrades are accompanied by a separate license, in which case the terms of that license will govern.
+
+2.  TERMINATION.  If you breach this Agreement your right to use the Product will terminate immediately and without notice, but all provisions of this Agreement except the License Grant (Paragraph 1) will survive termination and continue in effect.  Upon termination, you must destroy all copies of the Product.
+
+3.  PROPRIETARY RIGHTS.  Portions of the Product are available in source code form under the terms of the Mozilla Public License and other open source licenses (collectively, "Open Source Licenses") at http://www.mozilla.org/MPL.  Nothing in this Agreement will be construed to limit any rights granted under the Open Source Licenses.  Subject to the foregoing, Mozilla, for itself and on behalf of its licensors, hereby reserves all intellectual property rights in the Product, except for the rights expressly granted in this Agreement.  You may not remove or alter any trademark, logo, copyright or other proprietary notice in or on the Product.  This license does not grant you any right to use the trademarks, service marks or logos of Mozilla or its licensors.
+
+4.  PRIVACY POLICY.  You agree to the Mozilla Firefox Privacy Policy, made available online at http://www.mozilla.com/legal/privacy/, as that policy may be changed from time to time.  When Mozilla changes the policy in a material way a notice will be posted on the website at www.mozilla.com and when any change is made in the privacy policy, the updated policy will be posted at the above link.  It is your responsibility to ensure that you understand the terms of the privacy policy, so you should periodically check the current version of the policy for changes.
+
+5.  WEBSITE INFORMATION SERVICES.  Mozilla and its contributors, licensors and partners work to provide the most accurate and up-to-date phishing and malware information.  However, they cannot guarantee that this information is comprehensive and error-free: some risky sites may not be identified, and some safe sites may be identified in error.
+
+6.  DISCLAIMER OF WARRANTY.  THE PRODUCT IS PROVIDED "AS IS" WITH ALL FAULTS.  TO THE EXTENT PERMITTED BY LAW, MOZILLA AND MOZILLA'S DISTRIBUTORS, AND LICENSORS HEREBY DISCLAIM ALL WARRANTIES, WHETHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION WARRANTIES THAT THE PRODUCT IS FREE OF DEFECTS, MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE AND NON-INFRINGING.  YOU BEAR THE ENTIRE RISK AS TO SELECTING THE PRODUCT FOR YOUR PURPOSES AND AS TO THE QUALITY AND PERFORMANCE OF THE PRODUCT.  THIS LIMITATION WILL APPLY NOTWITHSTANDING THE FAILURE OF ESSENTIAL PURPOSE OF ANY REMEDY.  SOME JURISDICTIONS DO NOT ALLOW THE EXCLUSION OR LIMITATION OF IMPLIED WARRANTIES, SO THIS DISCLAIMER MAY NOT APPLY TO YOU.
+
+7.  LIMITATION OF LIABILITY.  EXCEPT AS REQUIRED BY LAW, MOZILLA AND ITS DISTRIBUTORS, DIRECTORS, LICENSORS, CONTRIBUTORS AND AGENTS (COLLECTIVELY, THE "MOZILLA GROUP") WILL NOT BE LIABLE FOR ANY INDIRECT, SPECIAL, INCIDENTAL, CONSEQUENTIAL OR EXEMPLARY DAMAGES ARISING OUT OF OR IN ANY WAY RELATING TO THIS AGREEMENT OR THE USE OF OR INABILITY TO USE THE PRODUCT, INCLUDING WITHOUT LIMITATION DAMAGES FOR LOSS OF GOODWILL, WORK STOPPAGE, LOST PROFITS, LOSS OF DATA, AND COMPUTER FAILURE OR MALFUNCTION, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES AND REGARDLESS OF THE THEORY (CONTRACT, TORT OR OTHERWISE) UPON WHICH SUCH CLAIM IS BASED.  THE MOZILLA GROUP'S COLLECTIVE LIABILITY UNDER THIS AGREEMENT WILL NOT EXCEED THE GREATER OF $500 (FIVE HUNDRED DOLLARS) AND THE FEES PAID BY YOU UNDER THE LICENSE (IF ANY).  SOME JURISDICTIONS DO NOT ALLOW THE EXCLUSION OR LIMITATION OF INCIDENTAL, CONSEQUENTIAL OR SPECIAL DAMAGES, SO THIS EXCLUSION AND LIMITATION MAY NOT APPLY TO YOU.
+
+8.  EXPORT CONTROLS.  This license is subject to all applicable export restrictions.  You must comply with all export and import laws and restrictions and regulations of any United States or foreign agency or authority relating to the Product and its use.
+
+9.  U.S. GOVERNMENT END-USERS.  This Product is a "commercial item," as that term is defined in 48 C.F.R. 2.101, consisting of "commercial computer software" and "commercial computer software documentation," as such terms are used in 48 C.F.R. 12.212 (Sept. 1995) and 48 C.F.R. 227.7202 (June 1995).  Consistent with 48 C.F.R. 12.212, 48 C.F.R. 27.405(b)(2) (June 1998) and 48 C.F.R. 227.7202, all U.S. Government End Users acquire the Product with only those rights as set forth therein.
+
+10.  MISCELLANEOUS.  (a) This Agreement constitutes the entire agreement between Mozilla and you concerning the subject matter hereof, and it may only be modified by a written amendment signed by an authorized executive of Mozilla.  (b) Except to the extent applicable law, if any, provides otherwise, this Agreement will be governed by the laws of the state of California, U.S.A., excluding its conflict of law provisions.  (c) This Agreement will not be governed by the United Nations Convention on Contracts for the International Sale of Goods.  (d) If any part of this Agreement is held invalid or unenforceable, that part will be construed to reflect the parties' original intent, and the remaining portions will remain in full force and effect.  (e) A waiver by either party of any term or condition of this Agreement or any breach thereof, in any one instance, will not waive such term or condition or any subsequent breach thereof. (f) Except as required by law, the controlling language of this Agreement is English.  (g) You may assign your rights under this Agreement to any party that consents to, and agrees to be bound by, its terms; the Mozilla Corporation may assign its rights under this Agreement without condition.  (h) This Agreement will be binding upon and inure to the benefit of the parties, their successors and permitted assigns.

Property changes on: lucene/src/liatests/meetlucene/data/mozilla_eula_firefox3.txt
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/meetlucene/data/mozilla1.1.txt
===================================================================
--- lucene/src/liatests/meetlucene/data/mozilla1.1.txt	(revision 0)
+++ lucene/src/liatests/meetlucene/data/mozilla1.1.txt	(revision 0)
@@ -0,0 +1,470 @@
+                          MOZILLA PUBLIC LICENSE
+                                Version 1.1
+
+                              ---------------
+
+1. Definitions.
+
+     1.0.1. "Commercial Use" means distribution or otherwise making the
+     Covered Code available to a third party.
+
+     1.1. "Contributor" means each entity that creates or contributes to
+     the creation of Modifications.
+
+     1.2. "Contributor Version" means the combination of the Original
+     Code, prior Modifications used by a Contributor, and the Modifications
+     made by that particular Contributor.
+
+     1.3. "Covered Code" means the Original Code or Modifications or the
+     combination of the Original Code and Modifications, in each case
+     including portions thereof.
+
+     1.4. "Electronic Distribution Mechanism" means a mechanism generally
+     accepted in the software development community for the electronic
+     transfer of data.
+
+     1.5. "Executable" means Covered Code in any form other than Source
+     Code.
+
+     1.6. "Initial Developer" means the individual or entity identified
+     as the Initial Developer in the Source Code notice required by Exhibit
+     A.
+
+     1.7. "Larger Work" means a work which combines Covered Code or
+     portions thereof with code not governed by the terms of this License.
+
+     1.8. "License" means this document.
+
+     1.8.1. "Licensable" means having the right to grant, to the maximum
+     extent possible, whether at the time of the initial grant or
+     subsequently acquired, any and all of the rights conveyed herein.
+
+     1.9. "Modifications" means any addition to or deletion from the
+     substance or structure of either the Original Code or any previous
+     Modifications. When Covered Code is released as a series of files, a
+     Modification is:
+          A. Any addition to or deletion from the contents of a file
+          containing Original Code or previous Modifications.
+
+          B. Any new file that contains any part of the Original Code or
+          previous Modifications.
+
+     1.10. "Original Code" means Source Code of computer software code
+     which is described in the Source Code notice required by Exhibit A as
+     Original Code, and which, at the time of its release under this
+     License is not already Covered Code governed by this License.
+
+     1.10.1. "Patent Claims" means any patent claim(s), now owned or
+     hereafter acquired, including without limitation,  method, process,
+     and apparatus claims, in any patent Licensable by grantor.
+
+     1.11. "Source Code" means the preferred form of the Covered Code for
+     making modifications to it, including all modules it contains, plus
+     any associated interface definition files, scripts used to control
+     compilation and installation of an Executable, or source code
+     differential comparisons against either the Original Code or another
+     well known, available Covered Code of the Contributor's choice. The
+     Source Code can be in a compressed or archival form, provided the
+     appropriate decompression or de-archiving software is widely available
+     for no charge.
+
+     1.12. "You" (or "Your")  means an individual or a legal entity
+     exercising rights under, and complying with all of the terms of, this
+     License or a future version of this License issued under Section 6.1.
+     For legal entities, "You" includes any entity which controls, is
+     controlled by, or is under common control with You. For purposes of
+     this definition, "control" means (a) the power, direct or indirect,
+     to cause the direction or management of such entity, whether by
+     contract or otherwise, or (b) ownership of more than fifty percent
+     (50%) of the outstanding shares or beneficial ownership of such
+     entity.
+
+2. Source Code License.
+
+     2.1. The Initial Developer Grant.
+     The Initial Developer hereby grants You a world-wide, royalty-free,
+     non-exclusive license, subject to third party intellectual property
+     claims:
+          (a)  under intellectual property rights (other than patent or
+          trademark) Licensable by Initial Developer to use, reproduce,
+          modify, display, perform, sublicense and distribute the Original
+          Code (or portions thereof) with or without Modifications, and/or
+          as part of a Larger Work; and
+
+          (b) under Patents Claims infringed by the making, using or
+          selling of Original Code, to make, have made, use, practice,
+          sell, and offer for sale, and/or otherwise dispose of the
+          Original Code (or portions thereof).
+
+          (c) the licenses granted in this Section 2.1(a) and (b) are
+          effective on the date Initial Developer first distributes
+          Original Code under the terms of this License.
+
+          (d) Notwithstanding Section 2.1(b) above, no patent license is
+          granted: 1) for code that You delete from the Original Code; 2)
+          separate from the Original Code;  or 3) for infringements caused
+          by: i) the modification of the Original Code or ii) the
+          combination of the Original Code with other software or devices.
+
+     2.2. Contributor Grant.
+     Subject to third party intellectual property claims, each Contributor
+     hereby grants You a world-wide, royalty-free, non-exclusive license
+
+          (a)  under intellectual property rights (other than patent or
+          trademark) Licensable by Contributor, to use, reproduce, modify,
+          display, perform, sublicense and distribute the Modifications
+          created by such Contributor (or portions thereof) either on an
+          unmodified basis, with other Modifications, as Covered Code
+          and/or as part of a Larger Work; and
+
+          (b) under Patent Claims infringed by the making, using, or
+          selling of  Modifications made by that Contributor either alone
+          and/or in combination with its Contributor Version (or portions
+          of such combination), to make, use, sell, offer for sale, have
+          made, and/or otherwise dispose of: 1) Modifications made by that
+          Contributor (or portions thereof); and 2) the combination of
+          Modifications made by that Contributor with its Contributor
+          Version (or portions of such combination).
+
+          (c) the licenses granted in Sections 2.2(a) and 2.2(b) are
+          effective on the date Contributor first makes Commercial Use of
+          the Covered Code.
+
+          (d)    Notwithstanding Section 2.2(b) above, no patent license is
+          granted: 1) for any code that Contributor has deleted from the
+          Contributor Version; 2)  separate from the Contributor Version;
+          3)  for infringements caused by: i) third party modifications of
+          Contributor Version or ii)  the combination of Modifications made
+          by that Contributor with other software  (except as part of the
+          Contributor Version) or other devices; or 4) under Patent Claims
+          infringed by Covered Code in the absence of Modifications made by
+          that Contributor.
+
+3. Distribution Obligations.
+
+     3.1. Application of License.
+     The Modifications which You create or to which You contribute are
+     governed by the terms of this License, including without limitation
+     Section 2.2. The Source Code version of Covered Code may be
+     distributed only under the terms of this License or a future version
+     of this License released under Section 6.1, and You must include a
+     copy of this License with every copy of the Source Code You
+     distribute. You may not offer or impose any terms on any Source Code
+     version that alters or restricts the applicable version of this
+     License or the recipients' rights hereunder. However, You may include
+     an additional document offering the additional rights described in
+     Section 3.5.
+
+     3.2. Availability of Source Code.
+     Any Modification which You create or to which You contribute must be
+     made available in Source Code form under the terms of this License
+     either on the same media as an Executable version or via an accepted
+     Electronic Distribution Mechanism to anyone to whom you made an
+     Executable version available; and if made available via Electronic
+     Distribution Mechanism, must remain available for at least twelve (12)
+     months after the date it initially became available, or at least six
+     (6) months after a subsequent version of that particular Modification
+     has been made available to such recipients. You are responsible for
+     ensuring that the Source Code version remains available even if the
+     Electronic Distribution Mechanism is maintained by a third party.
+
+     3.3. Description of Modifications.
+     You must cause all Covered Code to which You contribute to contain a
+     file documenting the changes You made to create that Covered Code and
+     the date of any change. You must include a prominent statement that
+     the Modification is derived, directly or indirectly, from Original
+     Code provided by the Initial Developer and including the name of the
+     Initial Developer in (a) the Source Code, and (b) in any notice in an
+     Executable version or related documentation in which You describe the
+     origin or ownership of the Covered Code.
+
+     3.4. Intellectual Property Matters
+          (a) Third Party Claims.
+          If Contributor has knowledge that a license under a third party's
+          intellectual property rights is required to exercise the rights
+          granted by such Contributor under Sections 2.1 or 2.2,
+          Contributor must include a text file with the Source Code
+          distribution titled "LEGAL" which describes the claim and the
+          party making the claim in sufficient detail that a recipient will
+          know whom to contact. If Contributor obtains such knowledge after
+          the Modification is made available as described in Section 3.2,
+          Contributor shall promptly modify the LEGAL file in all copies
+          Contributor makes available thereafter and shall take other steps
+          (such as notifying appropriate mailing lists or newsgroups)
+          reasonably calculated to inform those who received the Covered
+          Code that new knowledge has been obtained.
+
+          (b) Contributor APIs.
+          If Contributor's Modifications include an application programming
+          interface and Contributor has knowledge of patent licenses which
+          are reasonably necessary to implement that API, Contributor must
+          also include this information in the LEGAL file.
+
+               (c)    Representations.
+          Contributor represents that, except as disclosed pursuant to
+          Section 3.4(a) above, Contributor believes that Contributor's
+          Modifications are Contributor's original creation(s) and/or
+          Contributor has sufficient rights to grant the rights conveyed by
+          this License.
+
+     3.5. Required Notices.
+     You must duplicate the notice in Exhibit A in each file of the Source
+     Code.  If it is not possible to put such notice in a particular Source
+     Code file due to its structure, then You must include such notice in a
+     location (such as a relevant directory) where a user would be likely
+     to look for such a notice.  If You created one or more Modification(s)
+     You may add your name as a Contributor to the notice described in
+     Exhibit A.  You must also duplicate this License in any documentation
+     for the Source Code where You describe recipients' rights or ownership
+     rights relating to Covered Code.  You may choose to offer, and to
+     charge a fee for, warranty, support, indemnity or liability
+     obligations to one or more recipients of Covered Code. However, You
+     may do so only on Your own behalf, and not on behalf of the Initial
+     Developer or any Contributor. You must make it absolutely clear than
+     any such warranty, support, indemnity or liability obligation is
+     offered by You alone, and You hereby agree to indemnify the Initial
+     Developer and every Contributor for any liability incurred by the
+     Initial Developer or such Contributor as a result of warranty,
+     support, indemnity or liability terms You offer.
+
+     3.6. Distribution of Executable Versions.
+     You may distribute Covered Code in Executable form only if the
+     requirements of Section 3.1-3.5 have been met for that Covered Code,
+     and if You include a notice stating that the Source Code version of
+     the Covered Code is available under the terms of this License,
+     including a description of how and where You have fulfilled the
+     obligations of Section 3.2. The notice must be conspicuously included
+     in any notice in an Executable version, related documentation or
+     collateral in which You describe recipients' rights relating to the
+     Covered Code. You may distribute the Executable version of Covered
+     Code or ownership rights under a license of Your choice, which may
+     contain terms different from this License, provided that You are in
+     compliance with the terms of this License and that the license for the
+     Executable version does not attempt to limit or alter the recipient's
+     rights in the Source Code version from the rights set forth in this
+     License. If You distribute the Executable version under a different
+     license You must make it absolutely clear that any terms which differ
+     from this License are offered by You alone, not by the Initial
+     Developer or any Contributor. You hereby agree to indemnify the
+     Initial Developer and every Contributor for any liability incurred by
+     the Initial Developer or such Contributor as a result of any such
+     terms You offer.
+
+     3.7. Larger Works.
+     You may create a Larger Work by combining Covered Code with other code
+     not governed by the terms of this License and distribute the Larger
+     Work as a single product. In such a case, You must make sure the
+     requirements of this License are fulfilled for the Covered Code.
+
+4. Inability to Comply Due to Statute or Regulation.
+
+     If it is impossible for You to comply with any of the terms of this
+     License with respect to some or all of the Covered Code due to
+     statute, judicial order, or regulation then You must: (a) comply with
+     the terms of this License to the maximum extent possible; and (b)
+     describe the limitations and the code they affect. Such description
+     must be included in the LEGAL file described in Section 3.4 and must
+     be included with all distributions of the Source Code. Except to the
+     extent prohibited by statute or regulation, such description must be
+     sufficiently detailed for a recipient of ordinary skill to be able to
+     understand it.
+
+5. Application of this License.
+
+     This License applies to code to which the Initial Developer has
+     attached the notice in Exhibit A and to related Covered Code.
+
+6. Versions of the License.
+
+     6.1. New Versions.
+     Netscape Communications Corporation ("Netscape") may publish revised
+     and/or new versions of the License from time to time. Each version
+     will be given a distinguishing version number.
+
+     6.2. Effect of New Versions.
+     Once Covered Code has been published under a particular version of the
+     License, You may always continue to use it under the terms of that
+     version. You may also choose to use such Covered Code under the terms
+     of any subsequent version of the License published by Netscape. No one
+     other than Netscape has the right to modify the terms applicable to
+     Covered Code created under this License.
+
+     6.3. Derivative Works.
+     If You create or use a modified version of this License (which you may
+     only do in order to apply it to code which is not already Covered Code
+     governed by this License), You must (a) rename Your license so that
+     the phrases "Mozilla", "MOZILLAPL", "MOZPL", "Netscape",
+     "MPL", "NPL" or any confusingly similar phrase do not appear in your
+     license (except to note that your license differs from this License)
+     and (b) otherwise make it clear that Your version of the license
+     contains terms which differ from the Mozilla Public License and
+     Netscape Public License. (Filling in the name of the Initial
+     Developer, Original Code or Contributor in the notice described in
+     Exhibit A shall not of themselves be deemed to be modifications of
+     this License.)
+
+7. DISCLAIMER OF WARRANTY.
+
+     COVERED CODE IS PROVIDED UNDER THIS LICENSE ON AN "AS IS" BASIS,
+     WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
+     WITHOUT LIMITATION, WARRANTIES THAT THE COVERED CODE IS FREE OF
+     DEFECTS, MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE OR NON-INFRINGING.
+     THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE COVERED CODE
+     IS WITH YOU. SHOULD ANY COVERED CODE PROVE DEFECTIVE IN ANY RESPECT,
+     YOU (NOT THE INITIAL DEVELOPER OR ANY OTHER CONTRIBUTOR) ASSUME THE
+     COST OF ANY NECESSARY SERVICING, REPAIR OR CORRECTION. THIS DISCLAIMER
+     OF WARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS LICENSE. NO USE OF
+     ANY COVERED CODE IS AUTHORIZED HEREUNDER EXCEPT UNDER THIS DISCLAIMER.
+
+8. TERMINATION.
+
+     8.1.  This License and the rights granted hereunder will terminate
+     automatically if You fail to comply with terms herein and fail to cure
+     such breach within 30 days of becoming aware of the breach. All
+     sublicenses to the Covered Code which are properly granted shall
+     survive any termination of this License. Provisions which, by their
+     nature, must remain in effect beyond the termination of this License
+     shall survive.
+
+     8.2.  If You initiate litigation by asserting a patent infringement
+     claim (excluding declatory judgment actions) against Initial Developer
+     or a Contributor (the Initial Developer or Contributor against whom
+     You file such action is referred to as "Participant")  alleging that:
+
+     (a)  such Participant's Contributor Version directly or indirectly
+     infringes any patent, then any and all rights granted by such
+     Participant to You under Sections 2.1 and/or 2.2 of this License
+     shall, upon 60 days notice from Participant terminate prospectively,
+     unless if within 60 days after receipt of notice You either: (i)
+     agree in writing to pay Participant a mutually agreeable reasonable
+     royalty for Your past and future use of Modifications made by such
+     Participant, or (ii) withdraw Your litigation claim with respect to
+     the Contributor Version against such Participant.  If within 60 days
+     of notice, a reasonable royalty and payment arrangement are not
+     mutually agreed upon in writing by the parties or the litigation claim
+     is not withdrawn, the rights granted by Participant to You under
+     Sections 2.1 and/or 2.2 automatically terminate at the expiration of
+     the 60 day notice period specified above.
+
+     (b)  any software, hardware, or device, other than such Participant's
+     Contributor Version, directly or indirectly infringes any patent, then
+     any rights granted to You by such Participant under Sections 2.1(b)
+     and 2.2(b) are revoked effective as of the date You first made, used,
+     sold, distributed, or had made, Modifications made by that
+     Participant.
+
+     8.3.  If You assert a patent infringement claim against Participant
+     alleging that such Participant's Contributor Version directly or
+     indirectly infringes any patent where such claim is resolved (such as
+     by license or settlement) prior to the initiation of patent
+     infringement litigation, then the reasonable value of the licenses
+     granted by such Participant under Sections 2.1 or 2.2 shall be taken
+     into account in determining the amount or value of any payment or
+     license.
+
+     8.4.  In the event of termination under Sections 8.1 or 8.2 above,
+     all end user license agreements (excluding distributors and resellers)
+     which have been validly granted by You or any distributor hereunder
+     prior to termination shall survive termination.
+
+9. LIMITATION OF LIABILITY.
+
+     UNDER NO CIRCUMSTANCES AND UNDER NO LEGAL THEORY, WHETHER TORT
+     (INCLUDING NEGLIGENCE), CONTRACT, OR OTHERWISE, SHALL YOU, THE INITIAL
+     DEVELOPER, ANY OTHER CONTRIBUTOR, OR ANY DISTRIBUTOR OF COVERED CODE,
+     OR ANY SUPPLIER OF ANY OF SUCH PARTIES, BE LIABLE TO ANY PERSON FOR
+     ANY INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES OF ANY
+     CHARACTER INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF GOODWILL,
+     WORK STOPPAGE, COMPUTER FAILURE OR MALFUNCTION, OR ANY AND ALL OTHER
+     COMMERCIAL DAMAGES OR LOSSES, EVEN IF SUCH PARTY SHALL HAVE BEEN
+     INFORMED OF THE POSSIBILITY OF SUCH DAMAGES. THIS LIMITATION OF
+     LIABILITY SHALL NOT APPLY TO LIABILITY FOR DEATH OR PERSONAL INJURY
+     RESULTING FROM SUCH PARTY'S NEGLIGENCE TO THE EXTENT APPLICABLE LAW
+     PROHIBITS SUCH LIMITATION. SOME JURISDICTIONS DO NOT ALLOW THE
+     EXCLUSION OR LIMITATION OF INCIDENTAL OR CONSEQUENTIAL DAMAGES, SO
+     THIS EXCLUSION AND LIMITATION MAY NOT APPLY TO YOU.
+
+10. U.S. GOVERNMENT END USERS.
+
+     The Covered Code is a "commercial item," as that term is defined in
+     48 C.F.R. 2.101 (Oct. 1995), consisting of "commercial computer
+     software" and "commercial computer software documentation," as such
+     terms are used in 48 C.F.R. 12.212 (Sept. 1995). Consistent with 48
+     C.F.R. 12.212 and 48 C.F.R. 227.7202-1 through 227.7202-4 (June 1995),
+     all U.S. Government End Users acquire Covered Code with only those
+     rights set forth herein.
+
+11. MISCELLANEOUS.
+
+     This License represents the complete agreement concerning subject
+     matter hereof. If any provision of this License is held to be
+     unenforceable, such provision shall be reformed only to the extent
+     necessary to make it enforceable. This License shall be governed by
+     California law provisions (except to the extent applicable law, if
+     any, provides otherwise), excluding its conflict-of-law provisions.
+     With respect to disputes in which at least one party is a citizen of,
+     or an entity chartered or registered to do business in the United
+     States of America, any litigation relating to this License shall be
+     subject to the jurisdiction of the Federal Courts of the Northern
+     District of California, with venue lying in Santa Clara County,
+     California, with the losing party responsible for costs, including
+     without limitation, court costs and reasonable attorneys' fees and
+     expenses. The application of the United Nations Convention on
+     Contracts for the International Sale of Goods is expressly excluded.
+     Any law or regulation which provides that the language of a contract
+     shall be construed against the drafter shall not apply to this
+     License.
+
+12. RESPONSIBILITY FOR CLAIMS.
+
+     As between Initial Developer and the Contributors, each party is
+     responsible for claims and damages arising, directly or indirectly,
+     out of its utilization of rights under this License and You agree to
+     work with Initial Developer and Contributors to distribute such
+     responsibility on an equitable basis. Nothing herein is intended or
+     shall be deemed to constitute any admission of liability.
+
+13. MULTIPLE-LICENSED CODE.
+
+     Initial Developer may designate portions of the Covered Code as
+     "Multiple-Licensed".  "Multiple-Licensed" means that the Initial
+     Developer permits you to utilize portions of the Covered Code under
+     Your choice of the NPL or the alternative licenses, if any, specified
+     by the Initial Developer in the file described in Exhibit A.
+
+EXHIBIT A -Mozilla Public License.
+
+     ``The contents of this file are subject to the Mozilla Public License
+     Version 1.1 (the "License"); you may not use this file except in
+     compliance with the License. You may obtain a copy of the License at
+     http://www.mozilla.org/MPL/
+
+     Software distributed under the License is distributed on an "AS IS"
+     basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
+     License for the specific language governing rights and limitations
+     under the License.
+
+     The Original Code is ______________________________________.
+
+     The Initial Developer of the Original Code is ________________________.
+     Portions created by ______________________ are Copyright (C) ______
+     _______________________. All Rights Reserved.
+
+     Contributor(s): ______________________________________.
+
+     Alternatively, the contents of this file may be used under the terms
+     of the _____ license (the  "[___] License"), in which case the
+     provisions of [______] License are applicable instead of those
+     above.  If you wish to allow use of your version of this file only
+     under the terms of the [____] License and not to allow others to use
+     your version of this file under the MPL, indicate your decision by
+     deleting  the provisions above and replace  them with the notice and
+     other provisions required by the [___] License.  If you do not delete
+     the provisions above, a recipient may use your version of this file
+     under either the MPL or the [___] License."
+
+     [NOTE: The text of this Exhibit A may differ slightly from the text of
+     the notices in the Source Code files of the Original Code. You should
+     use the text of this Exhibit A rather than the text found in the
+     Original Code Source Code for Your Modifications.]
+

Property changes on: lucene/src/liatests/meetlucene/data/mozilla1.1.txt
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/meetlucene/data/mozilla_eula_thunderbird2.txt
===================================================================
--- lucene/src/liatests/meetlucene/data/mozilla_eula_thunderbird2.txt	(revision 0)
+++ lucene/src/liatests/meetlucene/data/mozilla_eula_thunderbird2.txt	(revision 0)
@@ -0,0 +1,27 @@
+MOZILLA THUNDERBIRD END-USER SOFTWARE LICENSE AGREEMENT
+
+Version 2.0
+
+A SOURCE CODE VERSION OF CERTAIN THUNDERBIRD E-MAIL FUNCTIONALITY THAT YOU MAY USE, MODIFY AND DISTRIBUTE IS AVAILABLE TO YOU FREE-OF-CHARGE FROM WWW.MOZILLA.ORG UNDER THE MOZILLA PUBLIC LICENSE and other open source software licenses.
+
+The accompanying executable code version of Mozilla Thunderbird and related documentation (the "Product") is made available to you under the terms of this MOZILLA THUNDERBIRD END-USER SOFTWARE LICENSE AGREEMENT (THE "AGREEMENT").  BY CLICKING THE "ACCEPT" BUTTON, OR BY INSTALLING OR USING THE MOZILLA THUNDERBIRD E-MAIL CLIENT, YOU ARE CONSENTING TO BE BOUND BY THE AGREEMENT.  IF YOU DO NOT AGREE TO THE TERMS AND CONDITIONS OF THIS AGREEMENT, DO NOT CLICK THE "ACCEPT" BUTTON, AND DO NOT INSTALL OR USE ANY PART OF THE MOZILLA THUNDERBIRD E-MAIL CLIENT.
+
+DURING THE MOZILLA THUNDERBIRD INSTALLATION PROCESS, AND AT LATER TIMES, YOU MAY BE GIVEN THE OPTION OF INSTALLING ADDITIONAL COMPONENTS FROM THIRD-PARTY SOFTWARE PROVIDERS.  THE INSTALLATION AND USE OF THOSE THIRD-PARTY COMPONENTS MAY BE GOVERNED BY ADDITIONAL LICENSE AGREEMENTS.
+
+1.  LICENSE GRANT.  The Mozilla Corporation grants you a non-exclusive license to use the executable code version of the Product.  This Agreement will also govern any software upgrades provided by Mozilla that replace and/or supplement the original Product, unless such upgrades are accompanied by a separate license, in which case the terms of that license will govern.
+
+2.  TERMINATION.  If you breach this Agreement your right to use the Product will terminate immediately and without notice, but all provisions of this Agreement except the License Grant (Paragraph 1) will survive termination and continue in effect.  Upon termination, you must destroy all copies of the Product.
+
+3.  PROPRIETARY RIGHTS.  Portions of the Product are available in source code form under the terms of the Mozilla Public License and other open source licenses (collectively, "Open Source Licenses") at mozilla.org.  Nothing in this Agreement will be construed to limit any rights granted under the Open Source Licenses.  Subject to the foregoing, Mozilla, for itself and on behalf of its licensors, hereby reserves all intellectual property rights in the Product, except for the rights expressly granted in this Agreement.  You may not remove or alter any trademark, logo, copyright or other proprietary notice in or on the Product.  This license does not grant you any right to use the trademarks, service marks or logos of Mozilla or its licensors.
+
+4.  PRIVACY POLICY.  You agree to the Mozilla Privacy Policy, made available online at http://www.mozilla.com/legal/privacy/, as that policy may be changed from time to time, including a separate privacy policy for Thunderbird.  When Mozilla changes the policy in a material way a notice will be posted on the website at www.mozilla.com, and when any change is made in the privacy policy, the updated policy will be posted at the above link.  It is your responsibility to ensure that you understand the terms of the privacy policy, so you should periodically check the current version of the policy for changes.
+
+5.  DISCLAIMER OF WARRANTY.  THE PRODUCT IS PROVIDED "AS IS" WITH ALL FAULTS.  TO THE EXTENT PERMITTED BY LAW, MOZILLA AND MOZILLA'S DISTRIBUTORS, AND LICENSORS HEREBY DISCLAIM ALL WARRANTIES, WHETHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION WARRANTIES THAT THE PRODUCT IS FREE OF DEFECTS, MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE AND NON-INFRINGING.  YOU BEAR THE ENTIRE RISK AS TO SELECTING THE PRODUCT FOR YOUR PURPOSES AND AS TO THE QUALITY AND PERFORMANCE OF THE PRODUCT.  THIS LIMITATION WILL APPLY NOTWITHSTANDING THE FAILURE OF ESSENTIAL PURPOSE OF ANY REMEDY.  SOME JURISDICTIONS DO NOT ALLOW THE EXCLUSION OR LIMITATION OF IMPLIED WARRANTIES, SO THIS DISCLAIMER MAY NOT APPLY TO YOU.
+
+6.  LIMITATION OF LIABILITY.  EXCEPT AS REQUIRED BY LAW, MOZILLA AND ITS DISTRIBUTORS, DIRECTORS, LICENSORS, CONTRIBUTORS AND AGENTS (COLLECTIVELY, THE "MOZILLA GROUP") WILL NOT BE LIABLE FOR ANY INDIRECT, SPECIAL, INCIDENTAL, CONSEQUENTIAL OR EXEMPLARY DAMAGES ARISING OUT OF OR IN ANY WAY RELATING TO THIS AGREEMENT OR THE USE OF OR INABILITY TO USE THE PRODUCT, INCLUDING WITHOUT LIMITATION DAMAGES FOR LOSS OF GOODWILL, WORK STOPPAGE, LOST PROFITS, LOSS OF DATA, AND COMPUTER FAILURE OR MALFUNCTION, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES AND REGARDLESS OF THE THEORY (CONTRACT, TORT OR OTHERWISE) UPON WHICH SUCH CLAIM IS BASED.  THE MOZILLA GROUP'S COLLECTIVE LIABILITY UNDER THIS AGREEMENT WILL NOT EXCEED THE GREATER OF $500 (FIVE HUNDRED DOLLARS) AND THE FEES PAID BY YOU UNDER THE LICENSE (IF ANY).  SOME JURISDICTIONS DO NOT ALLOW THE EXCLUSION OR LIMITATION OF INCIDENTAL, CONSEQUENTIAL OR SPECIAL DAMAGES, SO THIS EXCLUSION AND LIMITATION MAY NOT APPLY TO YOU.
+
+7.  EXPORT CONTROLS.  This license is subject to all applicable export restrictions.  You must comply with all export and import laws and restrictions and regulations of any United States or foreign agency or authority relating to the Product and its use.
+
+8.  U.S. GOVERNMENT END-USERS.  This Product is a "commercial item," as that term is defined in 48 C.F.R. 2.101, consisting of "commercial computer software" and "commercial computer software documentation," as such terms are used in 48 C.F.R. 12.212 (Sept. 1995) and 48 C.F.R. 227.7202 (June 1995).  Consistent with 48 C.F.R. 12.212, 48 C.F.R. 27.405(b)(2) (June 1998) and 48 C.F.R. 227.7202, all U.S. Government End Users acquire the Product with only those rights as set forth therein.
+
+9.  MISCELLANEOUS.  (a) This Agreement constitutes the entire agreement between Mozilla and you concerning the subject matter hereof, and it may only be modified by a written amendment signed by an authorized executive of Mozilla.  (b) Except to the extent applicable law, if any, provides otherwise, this Agreement will be governed by the laws of the state of California, U.S.A., excluding its conflict of law provisions.  (c) This Agreement will not be governed by the United Nations Convention on Contracts for the International Sale of Goods.  (d) If any part of this Agreement is held invalid or unenforceable, that part will be construed to reflect the parties' original intent, and the remaining portions will remain in full force and effect.  (e) A waiver by either party of any term or condition of this Agreement or any breach thereof, in any one instance, will not waive such term or condition or any subsequent breach thereof. (f) Except as required by law, the controlling language of this Agreement is English.  (g) You may assign your rights under this Agreement to any party that consents to, and agrees to be bound by, its terms; the Mozilla Corporation may assign its rights under this Agreement without condition.  (h) This Agreement will be binding upon and inure to the benefit of the parties, their successors and permitted assigns.

Property changes on: lucene/src/liatests/meetlucene/data/mozilla_eula_thunderbird2.txt
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/meetlucene/data/mit.txt
===================================================================
--- lucene/src/liatests/meetlucene/data/mit.txt	(revision 0)
+++ lucene/src/liatests/meetlucene/data/mit.txt	(revision 0)
@@ -0,0 +1,22 @@
+Copyright (c) <year> <copyright holders>
+
+Permission is hereby granted, free of charge, to any person
+obtaining a copy of this software and associated documentation
+files (the "Software"), to deal in the Software without
+restriction, including without limitation the rights to use,
+copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the
+Software is furnished to do so, subject to the following
+conditions:
+
+The above copyright notice and this permission notice shall be
+included in all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
+OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
+HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
+WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
+OTHER DEALINGS IN THE SOFTWARE.

Property changes on: lucene/src/liatests/meetlucene/data/mit.txt
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/meetlucene/data/cpl1.0.txt
===================================================================
--- lucene/src/liatests/meetlucene/data/cpl1.0.txt	(revision 0)
+++ lucene/src/liatests/meetlucene/data/cpl1.0.txt	(revision 0)
@@ -0,0 +1,74 @@
+Common Public License - V1.0		
+	
+	
+	
+03 Mar 2005
+
+THE ACCOMPANYING PROGRAM IS PROVIDED UNDER THE TERMS OF THIS COMMON PUBLIC LICENSE ("AGREEMENT"). ANY USE, REPRODUCTION OR DISTRIBUTION OF THE PROGRAM CONSTITUTES RECIPIENT'S ACCEPTANCE OF THIS AGREEMENT.
+
+   1. DEFINITIONS
+
+      "Contribution" means:
+         1. in the case of the initial Contributor, the initial code and documentation distributed under this Agreement, and
+         2. in the case of each subsequent Contributor:
+               1. changes to the Program, and
+               2. additions to the Program;
+
+                  where such changes and/or additions to the Program originate from and are distributed by that particular Contributor. A Contribution 'originates' from a Contributor if it was added to the Program by such Contributor itself or anyone acting on such Contributor's behalf. Contributions do not include additions to the Program which: (i) are separate modules of software distributed in conjunction with the Program under their own license agreement, and (ii) are not derivative works of the Program.
+
+      "Contributor" means any person or entity that distributes the Program.
+
+      "Licensed Patents " mean patent claims licensable by a Contributor which are necessarily infringed by the use or sale of its Contribution alone or when combined with the Program.
+
+      "Program" means the Contributions distributed in accordance with this Agreement.
+
+      "Recipient" means anyone who receives the Program under this Agreement, including all Contributors.
+   2. GRANT OF RIGHTS
+
+         1. Subject to the terms of this Agreement, each Contributor hereby grants Recipient a non-exclusive, worldwide, royalty-free copyright license to reproduce, prepare derivative works of, publicly display, publicly perform, distribute and sublicense the Contribution of such Contributor, if any, and such derivative works, in source code and object code form.
+
+         2. Subject to the terms of this Agreement, each Contributor hereby grants Recipient a non-exclusive, worldwide, royalty-free patent license under Licensed Patents to make, use, sell, offer to sell, import and otherwise transfer the Contribution of such Contributor, if any, in source code and object code form. This patent license shall apply to the combination of the Contribution and the Program if, at the time the Contribution is added by the Contributor, such addition of the Contribution causes such combination to be covered by the Licensed Patents. The patent license shall not apply to any other combinations which include the Contribution. No hardware per se is licensed hereunder.
+
+         3. Recipient understands that although each Contributor grants the licenses to its Contributions set forth herein, no assurances are provided by any Contributor that the Program does not infringe the patent or other intellectual property rights of any other entity. Each Contributor disclaims any liability to Recipient for claims brought by any other entity based on infringement of intellectual property rights or otherwise. As a condition to exercising the rights and licenses granted hereunder, each Recipient hereby assumes sole responsibility to secure any other intellectual property rights needed, if any. For example, if a third party patent license is required to allow Recipient to distribute the Program, it is Recipient's responsibility to acquire that license before distributing the Program.
+
+         4. Each Contributor represents that to its knowledge it has sufficient copyright rights in its Contribution, if any, to grant the copyright license set forth in this Agreement.
+
+   3. REQUIREMENTS
+
+      A Contributor may choose to distribute the Program in object code form under its own license agreement, provided that:
+         1. it complies with the terms and conditions of this Agreement; and
+         2. its license agreement:
+               1. effectively disclaims on behalf of all Contributors all warranties and conditions, express and implied, including warranties or conditions of title and non-infringement, and implied warranties or conditions of merchantability and fitness for a particular purpose;
+               2. effectively excludes on behalf of all Contributors all liability for damages, including direct, indirect, special, incidental and consequential damages, such as lost profits;
+               3. states that any provisions which differ from this Agreement are offered by that Contributor alone and not by any other party; and
+               4. states that source code for the Program is available from such Contributor, and informs licensees how to obtain it in a reasonable manner on or through a medium customarily used for software exchange.
+
+      When the Program is made available in source code form:
+         1. it must be made available under this Agreement; and
+         2. a copy of this Agreement must be included with each copy of the Program.
+
+      Contributors may not remove or alter any copyright notices contained within the Program.
+
+      Each Contributor must identify itself as the originator of its Contribution, if any, in a manner that reasonably allows subsequent Recipients to identify the originator of the Contribution.
+   4. COMMERCIAL DISTRIBUTION
+
+      Commercial distributors of software may accept certain responsibilities with respect to end users, business partners and the like. While this license is intended to facilitate the commercial use of the Program, the Contributor who includes the Program in a commercial product offering should do so in a manner which does not create potential liability for other Contributors. Therefore, if a Contributor includes the Program in a commercial product offering, such Contributor ("Commercial Contributor") hereby agrees to defend and indemnify every other Contributor ("Indemnified Contributor") against any losses, damages and costs (collectively "Losses") arising from claims, lawsuits and other legal actions brought by a third party against the Indemnified Contributor to the extent caused by the acts or omissions of such Commercial Contributor in connection with its distribution of the Program in a commercial product offering. The obligations in this section do not apply to any claims or Losses relating to any actual or alleged intellectual property infringement. In order to qualify, an Indemnified Contributor must: a) promptly notify the Commercial Contributor in writing of such claim, and b) allow the Commercial Contributor to control, and cooperate with the Commercial Contributor in, the defense and any related settlement negotiations. The Indemnified Contributor may participate in any such claim at its own expense.
+
+      For example, a Contributor might include the Program in a commercial product offering, Product X. That Contributor is then a Commercial Contributor. If that Commercial Contributor then makes performance claims, or offers warranties related to Product X, those performance claims and warranties are such Commercial Contributor's responsibility alone. Under this section, the Commercial Contributor would have to defend claims against the other Contributors related to those performance claims and warranties, and if a court requires any other Contributor to pay any damages as a result, the Commercial Contributor must pay those damages.
+   5. NO WARRANTY
+
+      EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, THE PROGRAM IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED INCLUDING, WITHOUT LIMITATION, ANY WARRANTIES OR CONDITIONS OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Each Recipient is solely responsible for determining the appropriateness of using and distributing the Program and assumes all risks associated with its exercise of rights under this Agreement, including but not limited to the risks and costs of program errors, compliance with applicable laws, damage to or loss of data, programs or equipment, and unavailability or interruption of operations.
+   6. DISCLAIMER OF LIABILITY
+
+      EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, NEITHER RECIPIENT NOR ANY CONTRIBUTORS SHALL HAVE ANY LIABILITY FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING WITHOUT LIMITATION LOST PROFITS), HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OR DISTRIBUTION OF THE PROGRAM OR THE EXERCISE OF ANY RIGHTS GRANTED HEREUNDER, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
+   7. GENERAL
+
+      If any provision of this Agreement is invalid or unenforceable under applicable law, it shall not affect the validity or enforceability of the remainder of the terms of this Agreement, and without further action by the parties hereto, such provision shall be reformed to the minimum extent necessary to make such provision valid and enforceable.
+
+      If Recipient institutes patent litigation against a Contributor with respect to a patent applicable to software (including a cross-claim or counterclaim in a lawsuit), then any patent licenses granted by that Contributor to such Recipient under this Agreement shall terminate as of the date such litigation is filed. In addition, if Recipient institutes patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Program itself (excluding combinations of the Program with other software or hardware) infringes such Recipient's patent(s), then such Recipient's rights granted under Section 2(b) shall terminate as of the date such litigation is filed.
+
+      All Recipient's rights under this Agreement shall terminate if it fails to comply with any of the material terms or conditions of this Agreement and does not cure such failure in a reasonable period of time after becoming aware of such noncompliance. If all Recipient's rights under this Agreement terminate, Recipient agrees to cease use and distribution of the Program as soon as reasonably practicable. However, Recipient's obligations under this Agreement and any licenses granted by Recipient relating to the Program shall continue and survive.
+
+      Everyone is permitted to copy and distribute copies of this Agreement, but in order to avoid inconsistency the Agreement is copyrighted and may only be modified in the following manner. The Agreement Steward reserves the right to publish new versions (including revisions) of this Agreement from time to time. No one other than the Agreement Steward has the right to modify this Agreement. IBM is the initial Agreement Steward. IBM may assign the responsibility to serve as the Agreement Steward to a suitable separate entity. Each new version of the Agreement will be given a distinguishing version number. The Program (including Contributions) may always be distributed subject to the version of the Agreement under which it was received. In addition, after a new version of the Agreement is published, Contributor may elect to distribute the Program (including its Contributions) under the new version. Except as expressly stated in Sections 2(a) and 2(b) above, Recipient receives no rights or licenses to the intellectual property of any Contributor under this Agreement, whether expressly, by implication, estoppel or otherwise. All rights in the Program not expressly granted under this Agreement are reserved.
+
+      This Agreement is governed by the laws of the State of New York and the intellectual property laws of the United States of America. No party to this Agreement will bring a legal action under this Agreement more than one year after the cause of action arose. Each party waives its rights to a jury trial in any resulting litigation.

Property changes on: lucene/src/liatests/meetlucene/data/cpl1.0.txt
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/meetlucene/data/epl1.0.txt
===================================================================
--- lucene/src/liatests/meetlucene/data/epl1.0.txt	(revision 0)
+++ lucene/src/liatests/meetlucene/data/epl1.0.txt	(revision 0)
@@ -0,0 +1,88 @@
+Eclipse Public License - v 1.0
+
+THE ACCOMPANYING PROGRAM IS PROVIDED UNDER THE TERMS OF THIS ECLIPSE PUBLIC LICENSE ("AGREEMENT"). ANY USE, REPRODUCTION OR DISTRIBUTION OF THE PROGRAM CONSTITUTES RECIPIENT'S ACCEPTANCE OF THIS AGREEMENT.
+
+1. DEFINITIONS
+
+"Contribution" means:
+
+a) in the case of the initial Contributor, the initial code and documentation distributed under this Agreement, and
+b) in the case of each subsequent Contributor:
+
+i) changes to the Program, and
+
+ii) additions to the Program;
+
+where such changes and/or additions to the Program originate from and are distributed by that particular Contributor. A Contribution 'originates' from a Contributor if it was added to the Program by such Contributor itself or anyone acting on such Contributor's behalf. Contributions do not include additions to the Program which: (i) are separate modules of software distributed in conjunction with the Program under their own license agreement, and (ii) are not derivative works of the Program.
+
+"Contributor" means any person or entity that distributes the Program.
+
+"Licensed Patents " mean patent claims licensable by a Contributor which are necessarily infringed by the use or sale of its Contribution alone or when combined with the Program.
+
+"Program" means the Contributions distributed in accordance with this Agreement.
+
+"Recipient" means anyone who receives the Program under this Agreement, including all Contributors.
+
+2. GRANT OF RIGHTS
+
+a) Subject to the terms of this Agreement, each Contributor hereby grants Recipient a non-exclusive, worldwide, royalty-free copyright license to reproduce, prepare derivative works of, publicly display, publicly perform, distribute and sublicense the Contribution of such Contributor, if any, and such derivative works, in source code and object code form.
+
+b) Subject to the terms of this Agreement, each Contributor hereby grants Recipient a non-exclusive, worldwide, royalty-free patent license under Licensed Patents to make, use, sell, offer to sell, import and otherwise transfer the Contribution of such Contributor, if any, in source code and object code form. This patent license shall apply to the combination of the Contribution and the Program if, at the time the Contribution is added by the Contributor, such addition of the Contribution causes such combination to be covered by the Licensed Patents. The patent license shall not apply to any other combinations which include the Contribution. No hardware per se is licensed hereunder.
+
+c) Recipient understands that although each Contributor grants the licenses to its Contributions set forth herein, no assurances are provided by any Contributor that the Program does not infringe the patent or other intellectual property rights of any other entity. Each Contributor disclaims any liability to Recipient for claims brought by any other entity based on infringement of intellectual property rights or otherwise. As a condition to exercising the rights and licenses granted hereunder, each Recipient hereby assumes sole responsibility to secure any other intellectual property rights needed, if any. For example, if a third party patent license is required to allow Recipient to distribute the Program, it is Recipient's responsibility to acquire that license before distributing the Program.
+
+d) Each Contributor represents that to its knowledge it has sufficient copyright rights in its Contribution, if any, to grant the copyright license set forth in this Agreement.
+
+3. REQUIREMENTS
+
+A Contributor may choose to distribute the Program in object code form under its own license agreement, provided that:
+
+a) it complies with the terms and conditions of this Agreement; and
+
+b) its license agreement:
+
+i) effectively disclaims on behalf of all Contributors all warranties and conditions, express and implied, including warranties or conditions of title and non-infringement, and implied warranties or conditions of merchantability and fitness for a particular purpose;
+
+ii) effectively excludes on behalf of all Contributors all liability for damages, including direct, indirect, special, incidental and consequential damages, such as lost profits;
+
+iii) states that any provisions which differ from this Agreement are offered by that Contributor alone and not by any other party; and
+
+iv) states that source code for the Program is available from such Contributor, and informs licensees how to obtain it in a reasonable manner on or through a medium customarily used for software exchange.
+
+When the Program is made available in source code form:
+
+a) it must be made available under this Agreement; and
+
+b) a copy of this Agreement must be included with each copy of the Program.
+
+Contributors may not remove or alter any copyright notices contained within the Program.
+
+Each Contributor must identify itself as the originator of its Contribution, if any, in a manner that reasonably allows subsequent Recipients to identify the originator of the Contribution.
+
+4. COMMERCIAL DISTRIBUTION
+
+Commercial distributors of software may accept certain responsibilities with respect to end users, business partners and the like. While this license is intended to facilitate the commercial use of the Program, the Contributor who includes the Program in a commercial product offering should do so in a manner which does not create potential liability for other Contributors. Therefore, if a Contributor includes the Program in a commercial product offering, such Contributor ("Commercial Contributor") hereby agrees to defend and indemnify every other Contributor ("Indemnified Contributor") against any losses, damages and costs (collectively "Losses") arising from claims, lawsuits and other legal actions brought by a third party against the Indemnified Contributor to the extent caused by the acts or omissions of such Commercial Contributor in connection with its distribution of the Program in a commercial product offering. The obligations in this section do not apply to any claims or Losses relating to any actual or alleged intellectual property infringement. In order to qualify, an Indemnified Contributor must: a) promptly notify the Commercial Contributor in writing of such claim, and b) allow the Commercial Contributor to control, and cooperate with the Commercial Contributor in, the defense and any related settlement negotiations. The Indemnified Contributor may participate in any such claim at its own expense.
+
+For example, a Contributor might include the Program in a commercial product offering, Product X. That Contributor is then a Commercial Contributor. If that Commercial Contributor then makes performance claims, or offers warranties related to Product X, those performance claims and warranties are such Commercial Contributor's responsibility alone. Under this section, the Commercial Contributor would have to defend claims against the other Contributors related to those performance claims and warranties, and if a court requires any other Contributor to pay any damages as a result, the Commercial Contributor must pay those damages.
+
+5. NO WARRANTY
+
+EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, THE PROGRAM IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED INCLUDING, WITHOUT LIMITATION, ANY WARRANTIES OR CONDITIONS OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Each Recipient is solely responsible for determining the appropriateness of using and distributing the Program and assumes all risks associated with its exercise of rights under this Agreement , including but not limited to the risks and costs of program errors, compliance with applicable laws, damage to or loss of data, programs or equipment, and unavailability or interruption of operations.
+
+6. DISCLAIMER OF LIABILITY
+
+EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, NEITHER RECIPIENT NOR ANY CONTRIBUTORS SHALL HAVE ANY LIABILITY FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING WITHOUT LIMITATION LOST PROFITS), HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OR DISTRIBUTION OF THE PROGRAM OR THE EXERCISE OF ANY RIGHTS GRANTED HEREUNDER, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
+
+7. GENERAL
+
+If any provision of this Agreement is invalid or unenforceable under applicable law, it shall not affect the validity or enforceability of the remainder of the terms of this Agreement, and without further action by the parties hereto, such provision shall be reformed to the minimum extent necessary to make such provision valid and enforceable.
+
+If Recipient institutes patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Program itself (excluding combinations of the Program with other software or hardware) infringes such Recipient's patent(s), then such Recipient's rights granted under Section 2(b) shall terminate as of the date such litigation is filed.
+
+All Recipient's rights under this Agreement shall terminate if it fails to comply with any of the material terms or conditions of this Agreement and does not cure such failure in a reasonable period of time after becoming aware of such noncompliance. If all Recipient's rights under this Agreement terminate, Recipient agrees to cease use and distribution of the Program as soon as reasonably practicable. However, Recipient's obligations under this Agreement and any licenses granted by Recipient relating to the Program shall continue and survive.
+
+Everyone is permitted to copy and distribute copies of this Agreement, but in order to avoid inconsistency the Agreement is copyrighted and may only be modified in the following manner. The Agreement Steward reserves the right to publish new versions (including revisions) of this Agreement from time to time. No one other than the Agreement Steward has the right to modify this Agreement. The Eclipse Foundation is the initial Agreement Steward. The Eclipse Foundation may assign the responsibility to serve as the Agreement Steward to a suitable separate entity. Each new version of the Agreement will be given a distinguishing version number. The Program (including Contributions) may always be distributed subject to the version of the Agreement under which it was received. In addition, after a new version of the Agreement is published, Contributor may elect to distribute the Program (including its Contributions) under the new version. Except as expressly stated in Sections 2(a) and 2(b) above, Recipient receives no rights or licenses to the intellectual property of any Contributor under this Agreement, whether expressly, by implication, estoppel or otherwise. All rights in the Program not expressly granted under this Agreement are reserved.
+
+This Agreement is governed by the laws of the State of New York and the intellectual property laws of the United States of America. No party to this Agreement will bring a legal action under this Agreement more than one year after the cause of action arose. Each party waives its rights to a jury trial in any resulting litigation.
+
+ 

Property changes on: lucene/src/liatests/meetlucene/data/epl1.0.txt
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/meetlucene/data/apache1.0.txt
===================================================================
--- lucene/src/liatests/meetlucene/data/apache1.0.txt	(revision 0)
+++ lucene/src/liatests/meetlucene/data/apache1.0.txt	(revision 0)
@@ -0,0 +1,56 @@
+/* ====================================================================
+ * Copyright (c) 1995-1999 The Apache Group.  All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer. 
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. All advertising materials mentioning features or use of this
+ *    software must display the following acknowledgment:
+ *    "This product includes software developed by the Apache Group
+ *    for use in the Apache HTTP server project (http://www.apache.org/)."
+ *
+ * 4. The names "Apache Server" and "Apache Group" must not be used to
+ *    endorse or promote products derived from this software without
+ *    prior written permission. For written permission, please contact
+ *    apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their names without prior written
+ *    permission of the Apache Group.
+ *
+ * 6. Redistributions of any form whatsoever must retain the following
+ *    acknowledgment:
+ *    "This product includes software developed by the Apache Group
+ *    for use in the Apache HTTP server project (http://www.apache.org/)."
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE APACHE GROUP ``AS IS'' AND ANY
+ * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE APACHE GROUP OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+ * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+ * OF THE POSSIBILITY OF SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Group and was originally based
+ * on public domain software written at the National Center for
+ * Supercomputing Applications, University of Illinois, Urbana-Champaign.
+ * For more information on the Apache Group and the Apache HTTP server
+ * project, please see <http://www.apache.org/>.
+ *
+ */

Property changes on: lucene/src/liatests/meetlucene/data/apache1.0.txt
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/meetlucene/Searcher.java
===================================================================
--- lucene/src/liatests/meetlucene/Searcher.java	(revision 0)
+++ lucene/src/liatests/meetlucene/Searcher.java	(revision 0)
@@ -0,0 +1,95 @@
+package lia.meetlucene;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.document.Document;
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.Query;
+import org.apache.lucene.search.ScoreDoc;
+import org.apache.lucene.search.TopDocs;
+import org.apache.lucene.store.FSDirectory;
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.queryParser.QueryParser;
+import org.apache.lucene.queryParser.ParseException;
+import org.apache.lucene.analysis.standard.StandardAnalyzer;
+import org.apache.lucene.util.Version;
+
+import java.io.File;
+import java.io.IOException;
+
+// From chapter 1
+
+/**
+ * This code was originally written for
+ * Erik's Lucene intro java.net article
+ */
+public class Searcher {
+
+  public static void main(String[] args) throws IllegalArgumentException,
+        IOException, ParseException {
+    if (args.length != 2) {
+      throw new IllegalArgumentException("Usage: java " + Searcher.class.getName()
+        + " <index dir> <query>");
+    }
+
+    String indexDir = args[0];               //1 
+    String q = args[1];                      //2   
+
+    search(indexDir, q);
+  }
+
+  public static void search(String indexDir, String q)
+    throws IOException, ParseException {
+
+    Directory dir = FSDirectory.open(new File(indexDir)); //3
+    IndexSearcher is = new IndexSearcher(dir);   //3   
+
+    QueryParser parser = new QueryParser(Version.LUCENE_30, // 4
+                                         "contents",  //4
+                     new StandardAnalyzer(          //4
+                       Version.LUCENE_30));  //4
+    Query query = parser.parse(q);              //4   
+    long start = System.currentTimeMillis();
+    TopDocs hits = is.search(query, 10); //5
+    long end = System.currentTimeMillis();
+
+    System.err.println("Found " + hits.totalHits +   //6  
+      " document(s) (in " + (end - start) +        // 6
+      " milliseconds) that matched query '" +     // 6
+      q + "':");                                   // 6
+
+    for(ScoreDoc scoreDoc : hits.scoreDocs) {
+      Document doc = is.doc(scoreDoc.doc);               //7      
+      System.out.println(doc.get("fullpath"));  //8  
+    }
+
+    is.close();                                //9
+  }
+}
+
+/*
+#1 Parse provided index directory
+#2 Parse provided query string
+#3 Open index
+#4 Parse query
+#5 Search index
+#6 Write search stats
+#7 Retrieve matching document
+#8 Display filename
+#9 Close IndexSearcher
+*/

Property changes on: lucene/src/liatests/meetlucene/Searcher.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lucene/src/liatests/meetlucene/Indexer.java
===================================================================
--- lucene/src/liatests/meetlucene/Indexer.java	(revision 0)
+++ lucene/src/liatests/meetlucene/Indexer.java	(revision 0)
@@ -0,0 +1,131 @@
+package lia.meetlucene;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.index.IndexWriter;
+import org.apache.lucene.analysis.standard.StandardAnalyzer;
+import org.apache.lucene.document.Document;
+import org.apache.lucene.document.Field;
+import org.apache.lucene.store.FSDirectory;
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.util.Version;
+
+import java.io.File;
+import java.io.FileFilter;
+import java.io.IOException;
+import java.io.FileReader;
+
+// From chapter 1
+
+/**
+ * This code was originally written for
+ * Erik's Lucene intro java.net article
+ */
+public class Indexer {
+
+  public static void main(String[] args) throws Exception {
+    if (args.length != 2) {
+      throw new IllegalArgumentException("Usage: java " + Indexer.class.getName()
+        + " <index dir> <data dir>");
+    }
+    String indexDir = args[0];         //1
+    String dataDir = args[1];          //2
+
+    long start = System.currentTimeMillis();
+    Indexer indexer = new Indexer(indexDir);
+    int numIndexed;
+    try {
+      numIndexed = indexer.index(dataDir, new TextFilesFilter());
+    } finally {
+      indexer.close();
+    }
+    long end = System.currentTimeMillis();
+
+    System.out.println("Indexing " + numIndexed + " files took "
+      + (end - start) + " milliseconds");
+  }
+
+  private IndexWriter writer;
+
+  public Indexer(String indexDir) throws IOException {
+    Directory dir = FSDirectory.open(new File(indexDir));
+    writer = new IndexWriter(dir,            //3
+                 new StandardAnalyzer(       //3
+                     Version.LUCENE_30),//3
+                 true,                       //3
+                             IndexWriter.MaxFieldLength.UNLIMITED); //3
+  }
+
+  public void close() throws IOException {
+    writer.close();                             //4
+  }
+
+  public int index(String dataDir, FileFilter filter)
+    throws Exception {
+
+    File[] files = new File(dataDir).listFiles();
+
+    for (File f: files) {
+      if (!f.isDirectory() &&
+          !f.isHidden() &&
+          f.exists() &&
+          f.canRead() &&
+          (filter == null || filter.accept(f))) {
+        indexFile(f);
+      }
+    }
+
+    return writer.numDocs();                     //5
+  }
+
+  private static class TextFilesFilter implements FileFilter {
+    public boolean accept(File path) {
+      return path.getName().toLowerCase()        //6
+             .endsWith(".txt");                  //6
+    }
+  }
+
+  protected Document getDocument(File f) throws Exception {
+    Document doc = new Document();
+    doc.add(new Field("contents", new FileReader(f)));      //7
+    doc.add(new Field("filename", f.getName(),              //8
+                Field.Store.YES, Field.Index.NOT_ANALYZED));//8
+    doc.add(new Field("fullpath", f.getCanonicalPath(),     //9
+                Field.Store.YES, Field.Index.NOT_ANALYZED));//9
+    return doc;
+  }
+
+  private void indexFile(File f) throws Exception {
+    System.out.println("Indexing " + f.getCanonicalPath());
+    Document doc = getDocument(f);
+    writer.addDocument(doc);                              //10
+  }
+}
+
+/*
+#1 Create index in this directory
+#2 Index *.txt files from this directory
+#3 Create Lucene IndexWriter
+#4 Close IndexWriter
+#5 Return number of documents indexed
+#6 Index .txt files only, using FileFilter
+#7 Index file content
+#8 Index file name
+#9 Index file full path
+#10 Add document to Lucene index
+*/

Property changes on: lucene/src/liatests/meetlucene/Indexer.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/extsearch/queryparser/NumericQueryParserTest.java
===================================================================
--- lucene/src/liatests/extsearch/queryparser/NumericQueryParserTest.java	(revision 0)
+++ lucene/src/liatests/extsearch/queryparser/NumericQueryParserTest.java	(revision 0)
@@ -0,0 +1,149 @@
+package lia.extsearch.queryparser;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import lia.common.TestUtil;
+import junit.framework.TestCase;
+import org.apache.lucene.search.TopDocs;
+import org.apache.lucene.search.Query;
+import org.apache.lucene.analysis.Analyzer;
+import org.apache.lucene.analysis.WhitespaceAnalyzer;
+import org.apache.lucene.queryParser.ParseException;
+import org.apache.lucene.queryParser.QueryParser;
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.NumericRangeQuery;
+import org.apache.lucene.search.TermRangeQuery;
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.document.DateTools;
+import org.apache.lucene.util.Version;
+
+import java.util.Locale;
+
+// From chapter 6
+public class NumericQueryParserTest extends TestCase {
+  private Analyzer analyzer;
+  private IndexSearcher searcher;
+  private Directory dir;
+
+  protected void setUp() throws Exception {
+    analyzer = new WhitespaceAnalyzer();
+    dir = TestUtil.getBookIndexDirectory();
+    searcher = new IndexSearcher(dir, true);
+  }
+
+  protected void tearDown() throws Exception {
+    searcher.close();
+    dir.close();
+  }
+
+  static class NumericRangeQueryParser extends QueryParser {
+    public NumericRangeQueryParser(Version matchVersion,
+                                   String field, Analyzer a) {
+      super(matchVersion, field, a);
+    }
+    public Query getRangeQuery(String field,
+                               String part1,
+                               String part2,
+                               boolean inclusive)
+        throws ParseException {
+      TermRangeQuery query = (TermRangeQuery)            // A
+        super.getRangeQuery(field, part1, part2,         // A
+                              inclusive);                // A
+      if ("price".equals(field)) {
+        return NumericRangeQuery.newDoubleRange(         // B
+                      "price",                           // B
+                      Double.parseDouble(                // B
+                           query.getLowerTerm()),        // B
+                      Double.parseDouble(                // B
+                           query.getUpperTerm()),        // B
+                      query.includesLower(),             // B
+                      query.includesUpper());            // B
+      } else {
+        return query;                                    // C
+      }
+    }
+  }
+
+  /*
+    #A Get super()'s default TermRangeQuery
+    #B Create matching NumericRangeQuery
+    #C Return default TermRangeQuery
+  */
+
+  public void testNumericRangeQuery() throws Exception {
+    String expression = "price:[10 TO 20]";
+
+    QueryParser parser = new NumericRangeQueryParser(Version.LUCENE_30,
+                                                     "subject", analyzer);
+
+    Query query = parser.parse(expression);
+    System.out.println(expression + " parsed to " + query);
+  }
+
+  public static class NumericDateRangeQueryParser extends QueryParser {
+    public NumericDateRangeQueryParser(Version matchVersion,
+                                       String field, Analyzer a) {
+      super(matchVersion, field, a);
+    }
+    public Query getRangeQuery(String field,
+                               String part1,
+                               String part2,
+                               boolean inclusive)
+      throws ParseException {
+      TermRangeQuery query = (TermRangeQuery)
+          super.getRangeQuery(field, part1, part2, inclusive);
+
+      if ("pubmonth".equals(field)) {
+        return NumericRangeQuery.newIntRange(
+                    "pubmonth",
+                    Integer.parseInt(query.getLowerTerm()),
+                    Integer.parseInt(query.getUpperTerm()),
+                    query.includesLower(),
+                    query.includesUpper());
+      } else {
+        return query;
+      }
+    }
+  }
+
+  public void testDefaultDateRangeQuery() throws Exception {
+    QueryParser parser = new QueryParser(Version.LUCENE_30,
+                                         "subject", analyzer);
+    Query query = parser.parse("pubmonth:[1/1/04 TO 12/31/04]");
+    System.out.println("default date parsing: " + query);
+  }
+
+  public void testDateRangeQuery() throws Exception {
+    String expression = "pubmonth:[01/01/2010 TO 06/01/2010]";
+
+    QueryParser parser = new NumericDateRangeQueryParser(Version.LUCENE_30,
+                                                         "subject", analyzer);
+    
+    parser.setDateResolution("pubmonth", DateTools.Resolution.MONTH);    // 1
+    parser.setLocale(Locale.US);
+
+    Query query = parser.parse(expression);
+    System.out.println(expression + " parsed to " + query);
+
+    TopDocs matches = searcher.search(query, 10);
+    assertTrue("expecting at least one result !", matches.totalHits > 0);
+  }
+  /*
+    1 Tell QueryParser date resolution
+  */
+}

Property changes on: lucene/src/liatests/extsearch/queryparser/NumericQueryParserTest.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lucene/src/liatests/extsearch/queryparser/AdvancedQueryParserTest.java
===================================================================
--- lucene/src/liatests/extsearch/queryparser/AdvancedQueryParserTest.java	(revision 0)
+++ lucene/src/liatests/extsearch/queryparser/AdvancedQueryParserTest.java	(revision 0)
@@ -0,0 +1,68 @@
+package lia.extsearch.queryparser;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import junit.framework.TestCase;
+import org.apache.lucene.analysis.Analyzer;
+import org.apache.lucene.analysis.WhitespaceAnalyzer;
+import org.apache.lucene.queryParser.ParseException;
+import org.apache.lucene.search.Query;
+import org.apache.lucene.search.TermQuery;
+import org.apache.lucene.search.spans.SpanNearQuery;
+import org.apache.lucene.util.Version;
+
+// From chapter 6
+public class AdvancedQueryParserTest extends TestCase {
+  private Analyzer analyzer = new WhitespaceAnalyzer();
+
+  public void testCustomQueryParser() {
+    CustomQueryParser parser =
+      new CustomQueryParser(Version.LUCENE_30,
+                            "field", analyzer);
+    try {
+      parser.parse("a?t");
+      fail("Wildcard queries should not be allowed");
+    } catch (ParseException expected) {
+                                         // 1
+    }
+
+    try {
+      parser.parse("xunit~");
+      fail("Fuzzy queries should not be allowed");
+    } catch (ParseException expected) {
+                                         // 1
+    }
+  }
+  /*
+    1 Expected
+  */
+
+  public void testPhraseQuery() throws Exception {
+    CustomQueryParser parser =
+      new CustomQueryParser(Version.LUCENE_30,
+                            "field", analyzer);
+
+    Query query = parser.parse("singleTerm");
+    assertTrue("TermQuery", query instanceof TermQuery);
+
+    query = parser.parse("\"a phrase\"");
+    assertTrue("SpanNearQuery", query instanceof SpanNearQuery);
+  }
+
+
+}

Property changes on: lucene/src/liatests/extsearch/queryparser/AdvancedQueryParserTest.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lucene/src/liatests/extsearch/queryparser/CustomQueryParser.java
===================================================================
--- lucene/src/liatests/extsearch/queryparser/CustomQueryParser.java	(revision 0)
+++ lucene/src/liatests/extsearch/queryparser/CustomQueryParser.java	(revision 0)
@@ -0,0 +1,74 @@
+package lia.extsearch.queryparser;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.analysis.Analyzer;
+import org.apache.lucene.index.Term;
+import org.apache.lucene.queryParser.ParseException;
+import org.apache.lucene.queryParser.QueryParser;
+import org.apache.lucene.search.PhraseQuery;
+import org.apache.lucene.search.Query;
+import org.apache.lucene.search.spans.SpanNearQuery;
+import org.apache.lucene.search.spans.SpanTermQuery;
+import org.apache.lucene.util.Version;
+
+// From chapter 6
+public class CustomQueryParser extends QueryParser {
+  public CustomQueryParser(Version matchVersion, String field, Analyzer analyzer) {
+    super(matchVersion, field, analyzer);
+  }
+
+  protected final Query getWildcardQuery(String field, String termStr) throws ParseException {
+    throw new ParseException("Wildcard not allowed");
+  }
+
+  protected Query getFuzzyQuery(String field, String term, float minSimilarity) throws ParseException {
+    throw new ParseException("Fuzzy queries not allowed");
+  }
+
+  /**
+   * Replace PhraseQuery with SpanNearQuery to force in-order
+   * phrase matching rather than reverse.
+   */
+  protected Query getFieldQuery(String field, String queryText, int slop) throws ParseException {
+    Query orig = super.getFieldQuery(field, queryText, slop);  // #1
+
+    if (!(orig instanceof PhraseQuery)) {         // #2
+      return orig;                                // #2
+    }                                             // #2
+
+    PhraseQuery pq = (PhraseQuery) orig;
+    Term[] terms = pq.getTerms();                 // #3
+    SpanTermQuery[] clauses = new SpanTermQuery[terms.length];
+    for (int i = 0; i < terms.length; i++) {
+      clauses[i] = new SpanTermQuery(terms[i]);
+    }
+
+    SpanNearQuery query = new SpanNearQuery(      // #4
+                    clauses, slop, true);         // #4
+
+    return query;
+  }
+  /*
+#1 Delegate to QueryParser's implementation
+#2 Only override PhraseQuery
+#3 Pull all terms
+#4 Create SpanNearQuery
+  */
+
+}

Property changes on: lucene/src/liatests/extsearch/queryparser/CustomQueryParser.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lucene/src/liatests/extsearch/sorting/DistanceSortingTest.java
===================================================================
--- lucene/src/liatests/extsearch/sorting/DistanceSortingTest.java	(revision 0)
+++ lucene/src/liatests/extsearch/sorting/DistanceSortingTest.java	(revision 0)
@@ -0,0 +1,126 @@
+package lia.extsearch.sorting;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import junit.framework.TestCase;
+import org.apache.lucene.analysis.WhitespaceAnalyzer;
+import org.apache.lucene.document.Document;
+import org.apache.lucene.document.Field;
+import org.apache.lucene.index.IndexWriter;
+import org.apache.lucene.index.Term;
+import org.apache.lucene.search.FieldDoc;
+import org.apache.lucene.search.TopDocs;
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.Query;
+import org.apache.lucene.search.ScoreDoc;
+import org.apache.lucene.search.Sort;
+import org.apache.lucene.search.SortField;
+import org.apache.lucene.search.TermQuery;
+import org.apache.lucene.search.TopFieldDocs;
+import org.apache.lucene.store.RAMDirectory;
+
+import java.io.IOException;
+
+// From chapter 6
+public class DistanceSortingTest extends TestCase {
+  private RAMDirectory directory;
+  private IndexSearcher searcher;
+  private Query query;
+
+  protected void setUp() throws Exception {
+    directory = new RAMDirectory();
+    IndexWriter writer =
+        new IndexWriter(directory, new WhitespaceAnalyzer(),
+                        IndexWriter.MaxFieldLength.UNLIMITED);
+    addPoint(writer, "El Charro", "restaurant", 1, 2);
+    addPoint(writer, "Cafe Poca Cosa", "restaurant", 5, 9);
+    addPoint(writer, "Los Betos", "restaurant", 9, 6);
+    addPoint(writer, "Nico's Taco Shop", "restaurant", 3, 8);
+
+    writer.close();
+
+    searcher = new IndexSearcher(directory);
+
+    query = new TermQuery(new Term("type", "restaurant"));
+  }
+
+  private void addPoint(IndexWriter writer,
+                        String name, String type, int x, int y)
+      throws IOException {
+    Document doc = new Document();
+    doc.add(new Field("name", name, Field.Store.YES, Field.Index.NOT_ANALYZED));
+    doc.add(new Field("type", type, Field.Store.YES, Field.Index.NOT_ANALYZED));
+    doc.add(new Field("x", Integer.toString(x), Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));
+    doc.add(new Field("y", Integer.toString(y), Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));
+    writer.addDocument(doc);
+  }
+
+  public void testNearestRestaurantToHome() throws Exception {
+    Sort sort = new Sort(new SortField("unused",
+        new DistanceComparatorSource(0, 0)));
+
+    TopDocs hits = searcher.search(query, null, 10, sort);
+
+    assertEquals("closest",
+                 "El Charro", searcher.doc(hits.scoreDocs[0].doc).get("name"));
+    assertEquals("furthest",
+                 "Los Betos", searcher.doc(hits.scoreDocs[3].doc).get("name"));
+  }
+
+  public void testNeareastRestaurantToWork() throws Exception {
+    Sort sort = new Sort(new SortField("unused",
+        new DistanceComparatorSource(10, 10)));
+
+    TopFieldDocs docs = searcher.search(query, null, 3, sort);  // #1
+
+    assertEquals(4, docs.totalHits);              // #2
+    assertEquals(3, docs.scoreDocs.length);       // #3
+
+    FieldDoc fieldDoc = (FieldDoc) docs.scoreDocs[0];     // #4
+
+    assertEquals("(10,10) -> (9,6) = sqrt(17)",
+        new Float(Math.sqrt(17)),
+        fieldDoc.fields[0]);                         // #5
+
+    Document document = searcher.doc(fieldDoc.doc);  // #6
+    assertEquals("Los Betos", document.get("name"));
+
+    //dumpDocs(sort, docs);
+  }
+  /*
+#1 Specify maximum hits returned
+#2 Total number of hits
+#3 Return total number of documents
+#4 Get sorting values
+#5 Give value of first computation
+#6 Get Document
+  */
+
+  private void dumpDocs(Sort sort, TopFieldDocs docs)
+      throws IOException {
+    System.out.println("Sorted by: " + sort);
+    ScoreDoc[] scoreDocs = docs.scoreDocs;
+    for (int i = 0; i < scoreDocs.length; i++) {
+      FieldDoc fieldDoc = (FieldDoc) scoreDocs[i];
+      Float distance = (Float) fieldDoc.fields[0];
+      Document doc = searcher.doc(fieldDoc.doc);
+      System.out.println("   " + doc.get("name") +
+                         " @ (" + doc.get("x") + "," + doc.get("y") + ") -> " + distance);
+    }
+  }
+}

Property changes on: lucene/src/liatests/extsearch/sorting/DistanceSortingTest.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/extsearch/sorting/DistanceComparatorSource.java
===================================================================
--- lucene/src/liatests/extsearch/sorting/DistanceComparatorSource.java	(revision 0)
+++ lucene/src/liatests/extsearch/sorting/DistanceComparatorSource.java	(revision 0)
@@ -0,0 +1,124 @@
+package lia.extsearch.sorting;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.search.SortField;
+import org.apache.lucene.search.FieldComparatorSource;
+import org.apache.lucene.search.FieldComparator;
+import org.apache.lucene.search.FieldCache;
+import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.TermEnum;
+import org.apache.lucene.index.Term;
+
+import java.io.IOException;
+
+// From chapter 6
+public class DistanceComparatorSource
+  extends FieldComparatorSource {                 // #1
+  private int x;
+  private int y;
+
+  public DistanceComparatorSource(int x, int y) { // #2
+    this.x = x;
+    this.y = y;
+  }
+
+  public FieldComparator newComparator(java.lang.String fieldName,   // #3
+                                       int numHits, int sortPos,   // #3
+                                       boolean reversed)   // #3
+    throws IOException {       // #3
+    return new DistanceScoreDocLookupComparator(fieldName,
+                                                numHits);
+  }
+
+  private class DistanceScoreDocLookupComparator  // #4
+      extends FieldComparator {
+    private int[] xDoc, yDoc;                     // #5
+    private float[] values;                       // #6
+    private float bottom;                         // #7
+    String fieldName;
+
+    public DistanceScoreDocLookupComparator(
+                  String fieldName, int numHits) throws IOException {
+      values = new float[numHits];
+      this.fieldName = fieldName;
+    }
+
+    public void setNextReader(IndexReader reader, int docBase) throws IOException {
+      xDoc = FieldCache.DEFAULT.getInts(reader, "x");  // #8
+      yDoc = FieldCache.DEFAULT.getInts(reader, "y");  // #8
+    }
+
+    private float getDistance(int doc) {              // #9
+      int deltax = xDoc[doc] - x;                     // #9
+      int deltay = yDoc[doc] - y;                     // #9
+      return (float) Math.sqrt(deltax * deltax + deltay * deltay); // #9
+    }
+
+    public int compare(int slot1, int slot2) {          // #10
+      if (values[slot1] < values[slot2]) return -1;     // #10
+      if (values[slot1] > values[slot2]) return 1;      // #10
+      return 0;                                         // #10
+    }
+
+    public void setBottom(int slot) {                   // #11
+      bottom = values[slot];
+    }
+
+    public int compareBottom(int doc) {                 // #12
+      float docDistance = getDistance(doc);
+      if (bottom < docDistance) return -1;              // #12
+      if (bottom > docDistance) return 1;               // #12
+      return 0;                                         // #12
+    }
+
+    public void copy(int slot, int doc) {               // #13
+      values[slot] = getDistance(doc);                  // #13
+    }
+
+    public Comparable value(int slot) {                 // #14
+      return new Float(values[slot]);                   // #14
+    }                                                   // #14
+
+    public int sortType() {
+      return SortField.CUSTOM;
+    }
+  }
+
+  public String toString() {
+    return "Distance from ("+x+","+y+")";
+  }
+}
+
+/*
+#1 Extend FieldComparatorSource
+#2 Give constructor base location
+#3 Create comparator
+#4 FieldComparator implementation
+#5 Array of x, y per document
+#6 Distances for documents in the queue
+#7 Worst distance in the queue
+#8 Get x, y values from field cache
+#9 Compute distance for one document
+#10 Compare two docs in the top N
+#11 Record worst scoring doc in the top N
+#12 Compare new doc to worst scoring doc
+#13 Insert new doc into top N
+#14 Extract value from top N
+*/
+

Property changes on: lucene/src/liatests/extsearch/sorting/DistanceComparatorSource.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lucene/src/liatests/extsearch/collector/BookLinkCollector.java
===================================================================
--- lucene/src/liatests/extsearch/collector/BookLinkCollector.java	(revision 0)
+++ lucene/src/liatests/extsearch/collector/BookLinkCollector.java	(revision 0)
@@ -0,0 +1,70 @@
+package lia.extsearch.collector;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.search.Collector;
+import org.apache.lucene.search.Scorer;
+import org.apache.lucene.search.FieldCache;
+
+import java.io.IOException;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
+
+// From chapter 6
+public class BookLinkCollector extends Collector {
+  private Map<String,String> documents = new HashMap<String,String>();
+  private Scorer scorer;
+  private String[] urls;
+  private String[] titles;
+
+  public boolean acceptsDocsOutOfOrder() {
+    return true;                            // #A
+  }
+
+  public void setScorer(Scorer scorer) {
+    this.scorer = scorer;
+  }
+
+  public void setNextReader(IndexReader reader, int docBase) throws IOException {
+    urls = FieldCache.DEFAULT.getStrings(reader, "url");           // #B
+    titles = FieldCache.DEFAULT.getStrings(reader, "title2");      // #B
+  }
+
+  public void collect(int docID) {
+    try {
+      String url = urls[docID];            // #C
+      String title = titles[docID];        // #C
+      documents.put(url, title);           // #C
+      System.out.println(title + ":" + scorer.score());
+    } catch (IOException e) {
+      // ignore
+    }
+  }
+
+  public Map<String,String> getLinks() {
+    return Collections.unmodifiableMap(documents);
+  }
+}
+
+/*
+  #A Accept docIDs out of order
+  #B Load FieldCache values
+  #C Store details for the match
+*/

Property changes on: lucene/src/liatests/extsearch/collector/BookLinkCollector.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lucene/src/liatests/extsearch/collector/CollectorTest.java
===================================================================
--- lucene/src/liatests/extsearch/collector/CollectorTest.java	(revision 0)
+++ lucene/src/liatests/extsearch/collector/CollectorTest.java	(revision 0)
@@ -0,0 +1,52 @@
+package lia.extsearch.collector;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import junit.framework.TestCase;
+import lia.common.TestUtil;
+
+import org.apache.lucene.index.Term;
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.TermQuery;
+import org.apache.lucene.search.TopDocs;
+import org.apache.lucene.store.Directory;
+
+import java.util.Map;
+
+// From chapter 6
+public class CollectorTest extends TestCase {
+
+  public void testCollecting() throws Exception {
+    Directory dir = TestUtil.getBookIndexDirectory();
+    TermQuery query = new TermQuery(new Term("contents", "junit"));
+    IndexSearcher searcher = new IndexSearcher(dir);
+
+    BookLinkCollector collector = new BookLinkCollector();
+    searcher.search(query, collector);
+
+    Map<String,String> linkMap = collector.getLinks();
+    assertEquals("ant in action",
+                 linkMap.get("http://www.manning.com/loughran"));
+
+    TopDocs hits = searcher.search(query, 10);
+    TestUtil.dumpHits(searcher, hits);
+
+    searcher.close();
+    dir.close();
+  }
+}

Property changes on: lucene/src/liatests/extsearch/collector/CollectorTest.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lucene/src/liatests/extsearch/filters/TestSpecialsAccessor.java
===================================================================
--- lucene/src/liatests/extsearch/filters/TestSpecialsAccessor.java	(revision 0)
+++ lucene/src/liatests/extsearch/filters/TestSpecialsAccessor.java	(revision 0)
@@ -0,0 +1,33 @@
+package lia.extsearch.filters;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+ 
+
+
+// From chapter 6
+public class TestSpecialsAccessor implements SpecialsAccessor {
+  private String[] isbns;
+
+  public TestSpecialsAccessor(String[] isbns) {
+    this.isbns = isbns;
+  }
+
+  public String[] isbns() {
+    return isbns;
+  }
+}

Property changes on: lucene/src/liatests/extsearch/filters/TestSpecialsAccessor.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/extsearch/filters/SpecialsAccessor.java
===================================================================
--- lucene/src/liatests/extsearch/filters/SpecialsAccessor.java	(revision 0)
+++ lucene/src/liatests/extsearch/filters/SpecialsAccessor.java	(revision 0)
@@ -0,0 +1,25 @@
+package lia.extsearch.filters;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+ 
+
+
+// From chapter 6
+public interface SpecialsAccessor {
+  String[] isbns();
+}

Property changes on: lucene/src/liatests/extsearch/filters/SpecialsAccessor.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/extsearch/filters/SpecialsFilter.java
===================================================================
--- lucene/src/liatests/extsearch/filters/SpecialsFilter.java	(revision 0)
+++ lucene/src/liatests/extsearch/filters/SpecialsFilter.java	(revision 0)
@@ -0,0 +1,67 @@
+package lia.extsearch.filters;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.Term;
+import org.apache.lucene.index.TermDocs;
+import org.apache.lucene.search.Filter;
+import org.apache.lucene.search.DocIdSet;
+import org.apache.lucene.util.OpenBitSet;
+
+import java.io.IOException;
+
+// From chapter 6
+public class SpecialsFilter extends Filter {
+  private SpecialsAccessor accessor;
+
+  public SpecialsFilter(SpecialsAccessor accessor) {
+    this.accessor = accessor;
+  }
+
+  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {
+    OpenBitSet bits = new OpenBitSet(reader.maxDoc());
+
+    String[] isbns = accessor.isbns();                  // #1
+
+    int[] docs = new int[1];
+    int[] freqs = new int[1];
+
+    for (String isbn : isbns) {
+      if (isbn != null) {
+        TermDocs termDocs =
+          reader.termDocs(new Term("isbn", isbn));      // #2
+        int count = termDocs.read(docs, freqs);
+        if (count == 1) {                               // #3
+          bits.set(docs[0]);                            // #3
+        }                                               // #3
+      }
+    }
+
+    return bits;
+  }
+  /*
+#1 Fetch ISBNs
+#2 Jump to term
+#3 Set corresponding bit
+  */
+
+  public String toString() {
+    return "SpecialsFilter";
+  }
+}

Property changes on: lucene/src/liatests/extsearch/filters/SpecialsFilter.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lucene/src/liatests/extsearch/filters/SpecialsFilterTest.java
===================================================================
--- lucene/src/liatests/extsearch/filters/SpecialsFilterTest.java	(revision 0)
+++ lucene/src/liatests/extsearch/filters/SpecialsFilterTest.java	(revision 0)
@@ -0,0 +1,81 @@
+package lia.extsearch.filters;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import junit.framework.TestCase;
+import lia.common.TestUtil;
+import org.apache.lucene.search.Filter;
+import org.apache.lucene.search.TopDocs;
+import org.apache.lucene.search.WildcardQuery;
+import org.apache.lucene.search.FilteredQuery;
+import org.apache.lucene.search.TermQuery;
+import org.apache.lucene.search.BooleanQuery;
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.Query;
+import org.apache.lucene.search.BooleanClause;
+import org.apache.lucene.search.MatchAllDocsQuery;
+import org.apache.lucene.index.Term;
+
+// From chapter 6
+public class SpecialsFilterTest extends TestCase {
+  private Query allBooks;
+  private IndexSearcher searcher;
+
+  protected void setUp() throws Exception {
+    allBooks = new MatchAllDocsQuery();
+    searcher = new IndexSearcher(TestUtil.getBookIndexDirectory(), true);
+  }
+
+  public void testCustomFilter() throws Exception {
+    String[] isbns = new String[] {"9780061142666", "9780394756820"};
+
+    SpecialsAccessor accessor = new TestSpecialsAccessor(isbns);
+    Filter filter = new SpecialsFilter(accessor);
+    TopDocs hits = searcher.search(allBooks, filter, 10);
+    assertEquals("the specials", isbns.length, hits.totalHits);
+  }
+
+  public void testFilteredQuery() throws Exception {
+    String[] isbns = new String[] {"9780880105118"};                 // #1
+
+    SpecialsAccessor accessor = new TestSpecialsAccessor(isbns);
+    Filter filter = new SpecialsFilter(accessor);
+
+    WildcardQuery educationBooks =                                // #2
+      new WildcardQuery(new Term("category", "*education*"));     // #2
+    FilteredQuery edBooksOnSpecial =                              // #2
+        new FilteredQuery(educationBooks, filter);                // #2
+
+    TermQuery logoBooks =                                         // #3
+        new TermQuery(new Term("subject", "logo"));               // #3
+
+    BooleanQuery logoOrEdBooks = new BooleanQuery();                  // #4
+    logoOrEdBooks.add(logoBooks, BooleanClause.Occur.SHOULD);         // #4
+    logoOrEdBooks.add(edBooksOnSpecial, BooleanClause.Occur.SHOULD);  // #4
+
+    TopDocs hits = searcher.search(logoOrEdBooks, 10);
+    System.out.println(logoOrEdBooks.toString());
+    assertEquals("Papert and Steiner", 2, hits.totalHits);
+  }
+  /*
+#1 Rudolf Steiner's book
+#2 All education books on special
+#3 All books with "logo" in subject
+#4 Combine queries
+  */
+}

Property changes on: lucene/src/liatests/extsearch/filters/SpecialsFilterTest.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/extsearch/payloads/BulletinPayloadsAnalyzer.java
===================================================================
--- lucene/src/liatests/extsearch/payloads/BulletinPayloadsAnalyzer.java	(revision 0)
+++ lucene/src/liatests/extsearch/payloads/BulletinPayloadsAnalyzer.java	(revision 0)
@@ -0,0 +1,45 @@
+package lia.extsearch.payloads;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.Reader;
+
+import org.apache.lucene.analysis.Analyzer;
+import org.apache.lucene.analysis.TokenStream;
+import org.apache.lucene.analysis.standard.StandardAnalyzer;
+import org.apache.lucene.util.Version;
+
+// From chapter 6
+public class BulletinPayloadsAnalyzer extends Analyzer {
+  private boolean isBulletin;
+  private float boost;
+
+  BulletinPayloadsAnalyzer(float boost) {
+    this.boost = boost;
+  }
+
+  void setIsBulletin(boolean v) {
+    isBulletin = v;
+  }
+
+  public TokenStream tokenStream(String fieldName, Reader reader) {
+    BulletinPayloadsFilter stream = new BulletinPayloadsFilter(new StandardAnalyzer(Version.LUCENE_30).tokenStream(fieldName, reader), boost);
+    stream.setIsBulletin(isBulletin);
+    return stream;
+  }
+}

Property changes on: lucene/src/liatests/extsearch/payloads/BulletinPayloadsAnalyzer.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lucene/src/liatests/extsearch/payloads/BulletinPayloadsFilter.java
===================================================================
--- lucene/src/liatests/extsearch/payloads/BulletinPayloadsFilter.java	(revision 0)
+++ lucene/src/liatests/extsearch/payloads/BulletinPayloadsFilter.java	(revision 0)
@@ -0,0 +1,65 @@
+package lia.extsearch.payloads;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.IOException;
+
+import org.apache.lucene.index.Payload;
+import org.apache.lucene.analysis.TokenFilter;
+import org.apache.lucene.analysis.TokenStream;
+import org.apache.lucene.analysis.tokenattributes.PayloadAttribute;
+import org.apache.lucene.analysis.tokenattributes.TermAttribute;
+import org.apache.lucene.analysis.payloads.PayloadHelper;
+
+// From chapter 6
+public class BulletinPayloadsFilter extends TokenFilter {
+
+  private TermAttribute termAtt;
+  private PayloadAttribute payloadAttr;
+  private boolean isBulletin;
+  private Payload boostPayload;
+
+  BulletinPayloadsFilter(TokenStream in, float warningBoost) {
+    super(in);
+    payloadAttr = addAttribute(PayloadAttribute.class);
+    termAtt = addAttribute(TermAttribute.class);
+    boostPayload = new Payload(PayloadHelper.encodeFloat(warningBoost));
+  }
+
+  void setIsBulletin(boolean v) {
+    isBulletin = v;
+  }
+
+  public final boolean incrementToken() throws IOException {
+    if (input.incrementToken()) {
+      if (isBulletin && termAtt.term().equals("warning")) {          // #A
+        payloadAttr.setPayload(boostPayload);                        // #A
+      } else {
+        payloadAttr.setPayload(null);                                // #B
+      }
+      return true;
+    } else {
+      return false;
+    }
+  }
+}
+
+/*
+  #A Add payload boost
+  #B Clear payload
+*/

Property changes on: lucene/src/liatests/extsearch/payloads/BulletinPayloadsFilter.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lucene/src/liatests/extsearch/payloads/BoostingSimilarity.java
===================================================================
--- lucene/src/liatests/extsearch/payloads/BoostingSimilarity.java	(revision 0)
+++ lucene/src/liatests/extsearch/payloads/BoostingSimilarity.java	(revision 0)
@@ -0,0 +1,32 @@
+package lia.extsearch.payloads;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.search.DefaultSimilarity;
+import org.apache.lucene.analysis.payloads.PayloadHelper;
+
+// From chapter 6
+public class BoostingSimilarity extends DefaultSimilarity {
+  public float scorePayload(int docID, String fieldName, int start, int end, byte[] payload, int offset, int length) {
+    if (payload != null) {
+      return PayloadHelper.decodeFloat(payload, offset);
+    } else {
+      return 1.0F;
+    }
+  }
+}

Property changes on: lucene/src/liatests/extsearch/payloads/BoostingSimilarity.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lucene/src/liatests/extsearch/payloads/PayloadsTest.java
===================================================================
--- lucene/src/liatests/extsearch/payloads/PayloadsTest.java	(revision 0)
+++ lucene/src/liatests/extsearch/payloads/PayloadsTest.java	(revision 0)
@@ -0,0 +1,119 @@
+package lia.extsearch.payloads;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.IOException;
+
+import junit.framework.TestCase;
+
+import lia.common.TestUtil;
+
+import org.apache.lucene.document.Document;
+import org.apache.lucene.document.Field;
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.store.RAMDirectory;
+import org.apache.lucene.index.Term;
+import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.IndexWriter;
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.Query;
+import org.apache.lucene.search.TopDocs;
+import org.apache.lucene.search.TermQuery;
+import org.apache.lucene.search.payloads.PayloadTermQuery;
+import org.apache.lucene.search.payloads.AveragePayloadFunction;
+
+// From chapter 6
+public class PayloadsTest extends TestCase {
+
+  Directory dir;
+  IndexWriter writer;
+  BulletinPayloadsAnalyzer analyzer;
+
+  protected void setUp() throws Exception {
+    super.setUp();
+    dir = new RAMDirectory();
+    analyzer = new BulletinPayloadsAnalyzer(5.0F);                  // #A
+    writer = new IndexWriter(dir, analyzer,
+                             IndexWriter.MaxFieldLength.UNLIMITED);
+  }
+
+  protected void tearDown() throws Exception {
+    super.tearDown();
+    writer.close();
+  }
+
+  void addDoc(String title, String contents) throws IOException {
+    Document doc = new Document();
+    doc.add(new Field("title",
+                      title,
+                      Field.Store.YES,
+                      Field.Index.NO));
+    doc.add(new Field("contents",
+                      contents,
+                      Field.Store.NO,
+                      Field.Index.ANALYZED));
+    analyzer.setIsBulletin(contents.startsWith("Bulletin:"));
+    writer.addDocument(doc);
+  }
+
+  public void testPayloadTermQuery() throws Throwable {
+    addDoc("Hurricane warning",
+           "Bulletin: A hurricane warning was issued at " +
+           "6 AM for the outer great banks");
+    addDoc("Warning label maker",
+           "The warning label maker is a delightful toy for " +
+           "your precocious seven year old's warning needs");
+    addDoc("Tornado warning",
+           "Bulletin: There is a tornado warning for " +
+           "Worcester county until 6 PM today");
+
+    IndexReader r = writer.getReader();
+    writer.close();
+
+    IndexSearcher searcher = new IndexSearcher(r);
+
+    searcher.setSimilarity(new BoostingSimilarity());
+
+    Term warning = new Term("contents", "warning");
+    
+    Query query1 = new TermQuery(warning);
+    System.out.println("\nTermQuery results:");
+    TopDocs hits = searcher.search(query1, 10);
+    TestUtil.dumpHits(searcher, hits);
+
+    assertEquals("Warning label maker",                                // #B
+                 searcher.doc(hits.scoreDocs[0].doc).get("title"));    // #B
+
+    Query query2 = new PayloadTermQuery(warning,
+                                        new AveragePayloadFunction());
+    System.out.println("\nPayloadTermQuery results:");
+    hits = searcher.search(query2, 10);
+    TestUtil.dumpHits(searcher, hits);
+
+    assertEquals("Warning label maker",                                // #C
+                 searcher.doc(hits.scoreDocs[2].doc).get("title"));    // #C
+    r.close();
+    searcher.close();
+  }
+}
+
+/*
+  #A Boost by 5.0
+  #B Ranks first
+  #C Ranks last after boosts
+*/

Property changes on: lucene/src/liatests/extsearch/payloads/PayloadsTest.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/admin/CreateThreadedIndexTask.java
===================================================================
--- lucene/src/liatests/admin/CreateThreadedIndexTask.java	(revision 0)
+++ lucene/src/liatests/admin/CreateThreadedIndexTask.java	(revision 0)
@@ -0,0 +1,52 @@
+package lia.admin;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.IOException;
+import org.apache.lucene.index.IndexWriter;
+
+import org.apache.lucene.benchmark.byTask.tasks.CreateIndexTask;
+import org.apache.lucene.benchmark.byTask.PerfRunData;
+import org.apache.lucene.benchmark.byTask.utils.Config;
+
+// From chapter 11
+
+/** A task that you can use from a contrib/benchmark
+ *  algorithm to create a ThreadedIndexWriter. */
+
+public class CreateThreadedIndexTask extends CreateIndexTask {
+
+  public CreateThreadedIndexTask(PerfRunData runData) {
+    super(runData);
+  }
+
+  public int doLogic() throws IOException {
+    PerfRunData runData = getRunData();
+    Config config = runData.getConfig();
+    IndexWriter writer = new ThreadedIndexWriter(
+                                runData.getDirectory(),
+                                runData.getAnalyzer(),
+                                true,
+                                config.get("writer.num.threads", 4),
+                                config.get("writer.max.thread.queue.size", 20),        
+                                IndexWriter.MaxFieldLength.UNLIMITED);
+    CreateIndexTask.setIndexWriterConfig(writer, config);
+    runData.setIndexWriter(writer);
+    return 1;
+  }
+}

Property changes on: lucene/src/liatests/admin/CreateThreadedIndexTask.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/admin/TrackingFSDirectory.java
===================================================================
--- lucene/src/liatests/admin/TrackingFSDirectory.java	(revision 0)
+++ lucene/src/liatests/admin/TrackingFSDirectory.java	(revision 0)
@@ -0,0 +1,123 @@
+package lia.admin;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.IOException;
+import java.io.File;
+import java.util.HashSet;
+import java.util.Set;
+
+import org.apache.lucene.store.SimpleFSDirectory;
+import org.apache.lucene.store.BufferedIndexInput;
+import org.apache.lucene.store.IndexInput;
+import org.apache.lucene.store.IndexOutput;
+
+// From chapter 11
+
+/** Drop-in replacement for FSDirectory that tracks open
+ *  files. */
+
+public class TrackingFSDirectory extends SimpleFSDirectory {
+
+  private Set<String> openOutputs = new HashSet<String>();              //A
+  private Set<String> openInputs = new HashSet<String>();
+
+  public TrackingFSDirectory(File path) throws IOException {
+    super(path);
+  }
+
+  synchronized public int getFileDescriptorCount() {        //B
+    return openOutputs.size() + openInputs.size();
+  }
+
+  synchronized private void report(String message) {
+    System.out.println(System.currentTimeMillis() + ": " +
+                       message + "; total " + getFileDescriptorCount());
+  }
+
+  synchronized public IndexInput openInput(String name)     //C
+    throws IOException {
+    return openInput(name, BufferedIndexInput.BUFFER_SIZE);
+  }
+
+  synchronized public IndexInput openInput(String name, int bufferSize)
+    throws IOException {                                    //C
+    openInputs.add(name);
+    report("Open Input: " + name);
+    return new TrackingFSIndexInput(name, bufferSize);
+  }
+
+  synchronized public IndexOutput createOutput(String name)
+    throws IOException {                                    //D
+    openOutputs.add(name);
+    report("Open Output: " + name);
+    File file = new File(getFile(), name);
+    if (file.exists() && !file.delete())
+      throw new IOException("Cannot overwrite: " + file);
+    return new TrackingFSIndexOutput(name);
+  }
+
+  protected class TrackingFSIndexInput extends SimpleFSIndexInput { //E
+    String name;
+    public TrackingFSIndexInput(String name, int bufferSize) throws IOException {
+      super(new File(getFile(), name), bufferSize, getReadChunkSize());
+      this.name = name;
+    }
+
+    boolean cloned = false;
+
+    public Object clone() {
+      TrackingFSIndexInput clone = (TrackingFSIndexInput)super.clone();
+      clone.cloned = true;
+      return clone;
+    }
+
+    public void close() throws IOException {
+      super.close();
+      if (!cloned) {
+        synchronized(TrackingFSDirectory.this) {
+          openInputs.remove(name);
+        }
+      }
+      report("Close Input: " + name);
+    }
+  }
+
+  protected class TrackingFSIndexOutput extends SimpleFSIndexOutput { //E
+    String name;
+    public TrackingFSIndexOutput(String name) throws IOException {
+      super(new File(getFile(), name));
+      this.name = name;
+    }
+    public void close() throws IOException {
+      super.close();
+      synchronized(TrackingFSDirectory.this) {
+        openOutputs.remove(name);
+      }
+      report("Close Output: " + name);
+    }
+  }
+}
+
+/*
+#A Holds all open file names
+#B Returns total open file count
+#C Opens tracking input
+#D Opens tracking output
+#E Tracks eventual close
+*/

Property changes on: lucene/src/liatests/admin/TrackingFSDirectory.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lucene/src/liatests/admin/ThreadedIndexWriter.java
===================================================================
--- lucene/src/liatests/admin/ThreadedIndexWriter.java	(revision 0)
+++ lucene/src/liatests/admin/ThreadedIndexWriter.java	(revision 0)
@@ -0,0 +1,134 @@
+package lia.admin;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.IOException;
+
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.document.Document;
+import org.apache.lucene.index.IndexWriter;
+import org.apache.lucene.index.CorruptIndexException;
+import org.apache.lucene.analysis.Analyzer;
+import org.apache.lucene.index.Term;
+
+import java.util.concurrent.ThreadPoolExecutor;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.ArrayBlockingQueue;
+
+// From chapter 11
+
+/** Drop-in replacement for IndexWriter that uses multiple
+ *  threads, under the hood, to index added documents. */
+
+public class ThreadedIndexWriter extends IndexWriter {
+
+  private ExecutorService threadPool;
+  private Analyzer defaultAnalyzer;
+
+  private class Job implements Runnable {                       //A
+    Document doc;
+    Analyzer analyzer;
+    Term delTerm;
+    public Job(Document doc, Term delTerm, Analyzer analyzer) {
+      this.doc = doc;
+      this.analyzer = analyzer;
+      this.delTerm = delTerm;
+    }
+    public void run() {                                         //B
+      try {
+        if (delTerm != null) {
+          ThreadedIndexWriter.super.updateDocument(delTerm, doc, analyzer);
+        } else {
+          ThreadedIndexWriter.super.addDocument(doc, analyzer);
+        }
+      } catch (IOException ioe) {
+        throw new RuntimeException(ioe);
+      }
+    }
+  }
+
+  public ThreadedIndexWriter(Directory dir, Analyzer a,
+                             boolean create, int numThreads,
+                             int maxQueueSize, IndexWriter.MaxFieldLength mfl)
+       throws CorruptIndexException, IOException {
+    super(dir, a, create, mfl);
+    defaultAnalyzer = a;
+    threadPool = new ThreadPoolExecutor(                        //C
+          numThreads, numThreads,
+          0, TimeUnit.SECONDS,
+          new ArrayBlockingQueue<Runnable>(maxQueueSize, false),
+          new ThreadPoolExecutor.CallerRunsPolicy());
+  }
+
+  public void addDocument(Document doc) {                       //D
+    threadPool.execute(new Job(doc, null, defaultAnalyzer));    //D
+  }                                                             //D
+                                                                //D
+  public void addDocument(Document doc, Analyzer a) {           //D
+    threadPool.execute(new Job(doc, null, a));                  //D
+  }                                                             //D
+                                                                //D
+  public void updateDocument(Term term, Document doc) {         //D
+    threadPool.execute(new Job(doc, term, defaultAnalyzer));    //D
+  }                                                             //D
+                                                                //D 
+  public void updateDocument(Term term, Document doc, Analyzer a) { //D
+    threadPool.execute(new Job(doc, term, a));                  //D
+  }                                                             //D
+
+  public void close()
+      throws CorruptIndexException, IOException {
+    finish();
+    super.close();
+  }
+
+  public void close(boolean doWait)
+      throws CorruptIndexException, IOException {
+    finish();
+    super.close(doWait);
+  }
+
+  public void rollback()
+      throws CorruptIndexException, IOException {
+    finish();
+    super.rollback();
+  }
+
+  private void finish() {                                       //E
+    threadPool.shutdown();
+    while(true) {
+      try {
+        if (threadPool.awaitTermination(Long.MAX_VALUE, TimeUnit.SECONDS)) {
+          break;
+        }
+      } catch (InterruptedException ie) {
+        Thread.currentThread().interrupt();
+        throw new RuntimeException(ie);
+      }
+    }
+  }
+}
+
+/*
+#A Holds one document to be added
+#B Does real work to add or update document
+#C Create thread pool
+#D Have thread pool execute job
+#E Shuts down thread pool
+*/

Property changes on: lucene/src/liatests/admin/ThreadedIndexWriter.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lucene/src/liatests/admin/Fragments.java
===================================================================
--- lucene/src/liatests/admin/Fragments.java	(revision 0)
+++ lucene/src/liatests/admin/Fragments.java	(revision 0)
@@ -0,0 +1,47 @@
+package lia.admin;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.index.*;
+import org.apache.lucene.store.*;
+import org.apache.lucene.analysis.*;
+import org.apache.lucene.search.*;
+import java.util.Collection;
+
+// From chapter 11
+
+public class Fragments {
+  public void test() throws Exception {
+    Directory dir = null;
+    Analyzer analyzer = null;
+    // START
+    IndexDeletionPolicy policy = new KeepOnlyLastCommitDeletionPolicy();
+    SnapshotDeletionPolicy snapshotter = new SnapshotDeletionPolicy(policy);
+    IndexWriter writer = new IndexWriter(dir, analyzer, snapshotter,
+                                         IndexWriter.MaxFieldLength.UNLIMITED);
+    // END
+
+    try {
+      IndexCommit commit = (IndexCommit) snapshotter.snapshot();
+      Collection<String> fileNames = commit.getFileNames();
+      /*<iterate over & copy files from fileNames>*/
+    } finally {
+      snapshotter.release();
+    }
+  }
+}
\ No newline at end of file

Property changes on: lucene/src/liatests/admin/Fragments.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/admin/SearcherManager.java
===================================================================
--- lucene/src/liatests/admin/SearcherManager.java	(revision 0)
+++ lucene/src/liatests/admin/SearcherManager.java	(revision 0)
@@ -0,0 +1,134 @@
+package lia.admin;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.IOException;
+
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.IndexWriter;
+import org.apache.lucene.store.Directory;
+
+// From chapter 11
+
+/** Utility class to get/refresh searchers when you are
+ *  using multiple threads. */
+
+public class SearcherManager {
+
+  private IndexSearcher currentSearcher;                         //A
+  private IndexWriter writer;
+
+  // TODO: sort of sneaky that ctor calls warm -- maybe
+  // remove that and require caller call .warm() for the
+  // first time?
+  public SearcherManager(Directory dir) throws IOException {     //1
+    currentSearcher = new IndexSearcher(IndexReader.open(dir));  //B
+    warm(currentSearcher);
+  }
+
+  // TODO: sort of sneaky that ctor calls warm -- maybe
+  // remove that and require caller call .warm() for the
+  // first time?
+  public SearcherManager(IndexWriter writer) throws IOException { //2
+    this.writer = writer;
+    currentSearcher = new IndexSearcher(writer.getReader());      //C
+    warm(currentSearcher);
+
+    writer.setMergedSegmentWarmer(                                   // 3
+        new IndexWriter.IndexReaderWarmer() {                        // 3
+          public void warm(IndexReader reader) throws IOException {  // 3
+            SearcherManager.this.warm(new IndexSearcher(reader));    // 3
+          }                                                          // 3
+        });                                                          // 3
+  }
+
+  public void warm(IndexSearcher searcher)    // D
+    throws IOException                        // D
+  {}                                          // D
+
+  private boolean reopening;
+
+  private synchronized void startReopen()
+    throws InterruptedException {
+    while (reopening) {
+      wait();
+    }
+    reopening = true;
+  }
+
+  private synchronized void doneReopen() {
+    reopening = false;
+    notifyAll();
+  }
+
+  public void maybeReopen()                      //E
+    throws InterruptedException,                 //E
+           IOException {                         //E
+
+    startReopen();
+
+    try {
+      final IndexSearcher searcher = get();
+      try {
+        IndexReader newReader = currentSearcher.getIndexReader().reopen();
+        if (newReader != currentSearcher.getIndexReader()) {
+          IndexSearcher newSearcher = new IndexSearcher(newReader);
+          if (writer == null) {
+            warm(newSearcher);
+          }
+          swapSearcher(newSearcher);
+        }
+      } finally {
+        release(searcher);
+      }
+    } finally {
+      doneReopen();
+    }
+  }
+
+  public synchronized IndexSearcher get() {                      //F
+    currentSearcher.getIndexReader().incRef();
+    return currentSearcher;
+  }    
+
+  public synchronized void release(IndexSearcher searcher)       //G
+    throws IOException {
+    searcher.getIndexReader().decRef();
+  }
+
+  private synchronized void swapSearcher(IndexSearcher newSearcher)
+    throws IOException {
+    release(currentSearcher);
+    currentSearcher = newSearcher;
+  }
+
+  public void close() throws IOException {
+    swapSearcher(null);
+  }
+}
+
+/*
+#A Current IndexSearcher
+#B Create searcher from Directory
+#C Create searcher from near-real-time reader
+#D Implement in subclass
+#E Reopen searcher
+#F Returns current searcher
+#G Release searcher
+*/

Property changes on: lucene/src/liatests/admin/SearcherManager.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/admin/OpenFileLimitCheck.java
===================================================================
--- lucene/src/liatests/admin/OpenFileLimitCheck.java	(revision 0)
+++ lucene/src/liatests/admin/OpenFileLimitCheck.java	(revision 0)
@@ -0,0 +1,47 @@
+package lia.admin;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.IOException;
+import java.io.RandomAccessFile;
+import java.io.File;
+import java.util.List;
+import java.util.ArrayList;
+
+// From chapter 11
+
+/** Run this to see what your JRE's open file limit is. */
+
+public class OpenFileLimitCheck {
+  public static void main(String[] args) throws IOException {
+    List<RandomAccessFile> files = new ArrayList<RandomAccessFile>();
+    try {
+      while(true) {
+        files.add(new RandomAccessFile("tmp" + files.size(), "rw"));
+      }
+    } catch (IOException ioe) {
+      System.out.println("IOException after  " + files.size() + " open files:");
+      ioe.printStackTrace(System.out);
+      int i = 0;
+      for (RandomAccessFile raf : files) {
+      	raf.close();
+      	new File("tmp" + i++).delete();
+      }
+    }
+  }
+}

Property changes on: lucene/src/liatests/admin/OpenFileLimitCheck.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lucene/src/liatests/tika/DigesterXMLDocument.java
===================================================================
--- lucene/src/liatests/tika/DigesterXMLDocument.java	(revision 0)
+++ lucene/src/liatests/tika/DigesterXMLDocument.java	(revision 0)
@@ -0,0 +1,188 @@
+package lia.tika;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.document.Document;
+import org.apache.lucene.document.Field;
+
+import org.apache.commons.digester.Digester;
+import org.xml.sax.SAXException;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.InputStream;
+import java.io.IOException;
+
+// From chapter 7
+public class DigesterXMLDocument {
+
+  private Digester dig;
+  private static Document doc;
+
+  public DigesterXMLDocument() {
+
+    dig = new Digester();
+    dig.setValidating(false);
+
+    dig.addObjectCreate("address-book", DigesterXMLDocument.class);   // #1
+    dig.addObjectCreate("address-book/contact", Contact.class);       // #2
+
+    dig.addSetProperties("address-book/contact", "type", "type");     // #3
+
+    dig.addCallMethod("address-book/contact/name",                    // #4
+                      "setName", 0);                                  // #4
+    dig.addCallMethod("address-book/contact/address",
+      "setAddress", 0);
+    dig.addCallMethod("address-book/contact/city",
+      "setCity", 0);
+    dig.addCallMethod("address-book/contact/province",
+      "setProvince", 0);
+    dig.addCallMethod("address-book/contact/postalcode",
+      "setPostalcode", 0);
+    dig.addCallMethod("address-book/contact/country",
+      "setCountry", 0);
+    dig.addCallMethod("address-book/contact/telephone",
+      "setTelephone", 0);
+
+    dig.addSetNext("address-book/contact", "populateDocument");       // #5
+  }
+
+  public synchronized Document getDocument(InputStream is)
+    throws DocumentHandlerException {
+
+    try {
+      dig.parse(is);                                                  // #6
+    }
+    catch (IOException e) {
+      throw new DocumentHandlerException(
+        "Cannot parse XML document", e);
+    }
+    catch (SAXException e) {
+      throw new DocumentHandlerException(
+        "Cannot parse XML document", e);
+    }
+
+    return doc;
+  }
+
+  public void populateDocument(Contact contact) {                     // #7
+
+    doc = new Document();
+
+    doc.add(new Field("type", contact.getType(), Field.Store.YES,
+                      Field.Index.NOT_ANALYZED));
+    doc.add(new Field("name", contact.getName(), Field.Store.YES,
+                      Field.Index.NOT_ANALYZED));
+    doc.add(new Field("address", contact.getAddress(), Field.Store.YES,
+                      Field.Index.NOT_ANALYZED));
+    doc.add(new Field("city", contact.getCity(), Field.Store.YES,
+                      Field.Index.NOT_ANALYZED));
+    doc.add(new Field("province", contact.getProvince(), Field.Store.YES,
+                      Field.Index.NOT_ANALYZED));
+    doc.add(new Field("postalcode", contact.getPostalcode(), Field.Store.YES,
+                      Field.Index.NOT_ANALYZED));
+    doc.add(new Field("country", contact.getCountry(), Field.Store.YES,
+                      Field.Index.NOT_ANALYZED));
+    doc.add(new Field("telephone", contact.getTelephone(), Field.Store.YES,
+                      Field.Index.NOT_ANALYZED));
+  }
+
+  public static class Contact {
+    private String type;
+    private String name;
+    private String address;
+    private String city;
+    private String province;
+    private String postalcode;
+    private String country;
+    private String telephone;
+
+    public void setType(String newType) {
+      type = newType;
+    }
+    public String getType() {
+      return type;
+    }
+
+    public void setName(String newName) {
+      name = newName;
+    }
+    public String getName() {
+      return name;
+    }
+
+    public void setAddress(String newAddress) {
+      address = newAddress;
+    }
+    public String getAddress() {
+      return address;
+    }
+
+    public void setCity(String newCity) {
+      city = newCity;
+    }
+    public String getCity() {
+      return city;
+    }
+
+    public void setProvince(String newProvince) {
+      province = newProvince;
+    }
+    public String getProvince() {
+      return province;
+    }
+
+    public void setPostalcode(String newPostalcode) {
+      postalcode = newPostalcode;
+    }
+    public String getPostalcode() {
+      return postalcode;
+    }
+
+    public void setCountry(String newCountry) {
+      country = newCountry;
+    }
+    public String getCountry() {
+      return country;
+    }
+
+    public void setTelephone(String newTelephone) {
+      telephone = newTelephone;
+    }
+    public String getTelephone() {
+      return telephone;
+    }
+  }
+
+  public static void main(String[] args) throws Exception {
+    DigesterXMLDocument handler = new DigesterXMLDocument();
+    Document doc =
+      handler.getDocument(new FileInputStream(new File(args[0])));
+    System.out.println(doc);
+  }
+}
+
+/*
+#1 Create DigesterXMLDocument
+#2 Create Contact
+#3 Set type attribute
+#4 Set name property
+#5 Call populateDocument
+#6 Parse XML InputStream
+#7 Create Lucene document
+*/

Property changes on: lucene/src/liatests/tika/DigesterXMLDocument.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lucene/src/liatests/tika/TikaIndexer.java
===================================================================
--- lucene/src/liatests/tika/TikaIndexer.java	(revision 0)
+++ lucene/src/liatests/tika/TikaIndexer.java	(revision 0)
@@ -0,0 +1,170 @@
+package lia.tika;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.FileInputStream;
+import java.io.InputStream;
+import java.io.File;
+import java.io.IOException;
+import java.util.Date;
+import java.util.Set;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.ArrayList;
+import java.util.Collections;
+
+import org.apache.lucene.document.Document;
+import org.apache.lucene.document.Field;
+import org.apache.tika.metadata.Metadata;
+import org.apache.tika.parser.AutoDetectParser;
+import org.apache.tika.sax.BodyContentHandler;
+import org.apache.tika.parser.ParseContext;
+import org.apache.tika.parser.Parser;
+import org.apache.tika.config.TikaConfig;
+
+import org.xml.sax.ContentHandler;
+
+import lia.meetlucene.Indexer;
+
+// From chapter 7
+public class TikaIndexer extends Indexer {
+
+  private boolean DEBUG = false;                     //1
+
+  static Set<String> textualMetadataFields           //2
+        = new HashSet<String>();                     //2
+  static {                                           //2
+    textualMetadataFields.add(Metadata.TITLE);       //2
+    textualMetadataFields.add(Metadata.AUTHOR);      //2
+    textualMetadataFields.add(Metadata.COMMENTS);    //2
+    textualMetadataFields.add(Metadata.KEYWORDS);    //2
+    textualMetadataFields.add(Metadata.DESCRIPTION); //2
+    textualMetadataFields.add(Metadata.SUBJECT);     //2
+  }
+
+  public static void main(String[] args) throws Exception {
+    if (args.length != 2) {
+      throw new IllegalArgumentException("Usage: java " + TikaIndexer.class.getName()
+        + " <index dir> <data dir>");
+    }
+
+    TikaConfig config = TikaConfig.getDefaultConfig();  //3
+    List<String> parsers = new ArrayList<String>(config.getParsers().keySet());  //3
+    Collections.sort(parsers);                         //3
+    Iterator<String> it = parsers.iterator();          //3
+    System.out.println("Mime type parsers:");          //3
+    while(it.hasNext()) {                              //3
+      System.out.println("  " + it.next());            //3
+    }                                                  //3
+    System.out.println();                              //3
+
+    String indexDir = args[0];
+    String dataDir = args[1];
+
+    long start = new Date().getTime();
+    TikaIndexer indexer = new TikaIndexer(indexDir);
+    int numIndexed = indexer.index(dataDir, null);
+    indexer.close();
+    long end = new Date().getTime();
+
+    System.out.println("Indexing " + numIndexed + " files took "
+      + (end - start) + " milliseconds");
+  }
+
+  public TikaIndexer(String indexDir) throws IOException {
+    super(indexDir);
+  }
+
+  protected Document getDocument(File f) throws Exception {
+
+    Metadata metadata = new Metadata();
+    metadata.set(Metadata.RESOURCE_NAME_KEY, f.getName());   // 4
+
+    // If you know content type (eg because this document
+    // was loaded from an HTTP server), then you should also
+    // set Metadata.CONTENT_TYPE
+
+    // If you know content encoding (eg because this
+    // document was loaded from an HTTP server), then you
+    // should also set Metadata.CONTENT_ENCODING
+
+    InputStream is = new FileInputStream(f);      // 5
+    Parser parser = new AutoDetectParser();       // 6
+    ContentHandler handler = new BodyContentHandler(); // 7
+    ParseContext context = new ParseContext();   // 8
+    context.set(Parser.class, parser);           // 8
+
+    try {
+      parser.parse(is, handler, metadata,      // 9
+                   new ParseContext());        // 9
+    } finally {
+      is.close();
+    }
+
+    Document doc = new Document();
+
+    doc.add(new Field("contents", handler.toString(),           // 10
+                      Field.Store.NO, Field.Index.ANALYZED));   // 10
+
+    if (DEBUG) {
+      System.out.println("  all text: " + handler.toString());
+    }
+    
+    for(String name : metadata.names()) {         //11
+      String value = metadata.get(name);
+
+      if (textualMetadataFields.contains(name)) {
+        doc.add(new Field("contents", value,      //12
+                          Field.Store.NO, Field.Index.ANALYZED));
+      }
+
+      doc.add(new Field(name, value, Field.Store.YES, Field.Index.NO)); //13
+
+      if (DEBUG) {
+        System.out.println("  " + name + ": " + value);
+      }
+    }
+
+    if (DEBUG) {
+      System.out.println();
+    }
+
+    doc.add(new Field("filename", f.getCanonicalPath(),     //14
+             Field.Store.YES, Field.Index.NOT_ANALYZED));
+
+    return doc;
+  }
+}
+
+/*
+  #1 Change to true to see all text
+  #2 Which metadata fields are textual
+  #3 List all mime types handled by Tika
+  #4 Create Metadata for the file
+  #5 Open the file
+  #6 Automatically determines file type
+  #7 Extracts metadata and body text
+  #8 Setup ParseContext
+  #9 Does all the work!
+  #10 Index body content
+  #11 Index metadata fields
+  #12 Append to contents field
+  #13 Separately store metadata fields
+  #14 Index file path
+*/

Property changes on: lucene/src/liatests/tika/TikaIndexer.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lucene/src/liatests/tika/data/addressbook.xml
===================================================================
--- lucene/src/liatests/tika/data/addressbook.xml	(revision 0)
+++ lucene/src/liatests/tika/data/addressbook.xml	(revision 0)
@@ -0,0 +1,21 @@
+<?xml version='1.0' encoding='utf-8'?>
+<address-book>
+    <contact type="individual">
+        <name>Zane Pasolini</name>
+        <address>999 W. Prince St.</address>
+        <city>New York</city>
+        <province>NY</province>
+        <postalcode>10013</postalcode>
+        <country>USA</country>
+        <telephone>+1 212 345 6789</telephone>
+    </contact>
+    <contact type="business">
+        <name>SAMOFIX d.o.o.</name>
+        <address>Ilica 47-2</address>
+        <city>Zagreb</city>
+        <province></province>
+        <postalcode>10000</postalcode>
+        <country>Croatia</country>
+        <telephone>+385 1 123 4567</telephone>
+    </contact>
+</address-book>

Property changes on: lucene/src/liatests/tika/data/addressbook.xml
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/tika/data/MSWord.doc
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/msword

Property changes on: lucene/src/liatests/tika/data/MSWord.doc
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:mime-type
   + application/msword

Index: lucene/src/liatests/tika/data/PDF.pdf
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/pdf

Property changes on: lucene/src/liatests/tika/data/PDF.pdf
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:mime-type
   + application/pdf

Index: lucene/src/liatests/tika/data/RTF.rtf
===================================================================
--- lucene/src/liatests/tika/data/RTF.rtf	(revision 0)
+++ lucene/src/liatests/tika/data/RTF.rtf	(revision 0)
@@ -0,0 +1,25 @@
+{\rtf1\ansi\deff1\adeflang1025
+{\fonttbl{\f0\froman\fprq2\fcharset0 Nimbus Roman No9 L;}{\f1\froman\fprq2\fcharset0 Times New Roman;}{\f2\froman\fprq2\fcharset0 Times New Roman;}}
+{\colortbl;\red0\green0\blue0;\red128\green128\blue128;}
+{\stylesheet{\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs24\lang1033\ltrch\dbch\af1\afs24\langfe1033\loch\f1\fs24\lang1033\snext1 Default;}
+{\s2\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\lang1025\ltrch\dbch\af1\loch\f1\sbasedon1\snext2 Normal;}
+{\s3\cf0\tqc\tx4320\tqr\tx8640{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs24\lang1033\ltrch\dbch\af1\afs24\langfe1033\loch\f1\fs24\lang1033\sbasedon1\snext3 Header;}
+{\s4\cf0\tqc\tx4320\tqr\tx8640{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs24\lang1033\ltrch\dbch\af1\afs24\langfe1033\loch\f1\fs24\lang1033\sbasedon1\snext4 Footer;}
+{\*\cs6\cf0\rtlch\lang1033\ltrch\dbch\af1\loch\f1\sbasedon7 Default Paragraph Font;}
+{\*\cs7\cf0\rtlch\lang1025\ltrch\dbch\af1\loch\f1 Normal;}
+}
+{\info{\comment StarWriter}{\vern6410}}\deftab720
+{\*\pgdsctbl
+{\pgdsc0\pgdscuse195\pgwsxn12240\pghsxn15840\marglsxn1800\margrsxn1800\margtsxn1440\margbsxn1440\pgdscnxt0 Default;}
+{\pgdsc1\pgdscuse195\pgwsxn12240\pghsxn15840\marglsxn1800\margrsxn1800\margtsxn720\margbsxn720\headery0{\*\headeryb0\headerxl0\headerxr0\headeryh720}{\header \pard\plain \s3\cf0\tqc\tx4320\tqr\tx8640{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs24\lang1033\ltrch\dbch\af1\afs24\langfe1033\loch\f1\fs24\lang1033 
+\par }
+\footery0{\*\footeryt720\footerxl0\footerxr0\footeryh0}{\footer \pard\plain \s4\cf0\tqc\tx4320\tqr\tx8640{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs24\lang1033\ltrch\dbch\af1\afs24\langfe1033\loch\f1\fs24\lang1033 
+\par }
+\pgdscnxt1 Convert 1;}}
+{\*\pgdscno1}\paperh15840\paperw12240\margl1800\margr1800\margt720\margb720\sectd\sbknone\pgwsxn12240\pghsxn15840\marglsxn1800\margrsxn1800\margtsxn1440\margbsxn1728\headery720{\header \pard\plain \s3\cf0\tqc\tx4320\tqr\tx8640{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs24\lang1033\ltrch\dbch\af1\afs24\langfe1033\loch\f1\fs24\lang1033 
+\par }
+\footery720{\footer \pard\plain \s4\cf0\tqc\tx4320\tqr\tx8640{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs24\lang1033\ltrch\dbch\af1\afs24\langfe1033\loch\f1\fs24\lang1033 
+\par }
+\ftnbj\ftnstart1\ftnrstcont\ftnnar\aenddoc\aftnrstcont\aftnstart1\aftnnrlc
+\pard\plain \s2\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\lang1025\ltrch\dbch\af1\loch\f1 {\ltrch\loch\f1 This is the content of the RTF document}
+\par }
\ No newline at end of file

Property changes on: lucene/src/liatests/tika/data/RTF.rtf
___________________________________________________________________
Added: svn:executable
   + *

Index: lucene/src/liatests/tika/data/PlainText.txt
===================================================================
--- lucene/src/liatests/tika/data/PlainText.txt	(revision 0)
+++ lucene/src/liatests/tika/data/PlainText.txt	(revision 0)
@@ -0,0 +1 @@
+This is the content of the Plain Text document
\ No newline at end of file

Property changes on: lucene/src/liatests/tika/data/PlainText.txt
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/tika/data/HTML.html
===================================================================
--- lucene/src/liatests/tika/data/HTML.html	(revision 0)
+++ lucene/src/liatests/tika/data/HTML.html	(revision 0)
@@ -0,0 +1,11 @@
+<html>
+  <head>
+    <title>
+      Laptop power supplies are available in First Class only
+    </title>
+  </head>
+  <body>
+    <h1>Code, Write, Fly</h1>
+    This chapter is being written 11,000 meters above New Foundland. 
+  </body>
+</html>

Property changes on: lucene/src/liatests/tika/data/HTML.html
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/tika/data/MSWordXML.docx
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: lucene/src/liatests/tika/data/MSWordXML.docx
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:mime-type
   + application/octet-stream

Index: lucene/src/liatests/tika/data/addressbook-entry.xml
===================================================================
--- lucene/src/liatests/tika/data/addressbook-entry.xml	(revision 0)
+++ lucene/src/liatests/tika/data/addressbook-entry.xml	(revision 0)
@@ -0,0 +1,12 @@
+<?xml version='1.0' encoding='utf-8'?>
+<address-book>
+    <contact type="individual">
+        <name>Zane Pasolini</name>
+        <address>999 W. Prince St.</address>
+        <city>New York</city>
+        <province>NY</province>
+        <postalcode>10013</postalcode>
+        <country>USA</country>
+        <telephone>+1 212 345 6789</telephone>
+    </contact>
+</address-book>

Property changes on: lucene/src/liatests/tika/data/addressbook-entry.xml
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/tika/SAXXMLDocument.java
===================================================================
--- lucene/src/liatests/tika/SAXXMLDocument.java	(revision 0)
+++ lucene/src/liatests/tika/SAXXMLDocument.java	(revision 0)
@@ -0,0 +1,113 @@
+package lia.tika;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.xml.sax.helpers.DefaultHandler;
+import org.xml.sax.SAXException;
+import org.xml.sax.Attributes;
+
+import javax.xml.parsers.SAXParser;
+import javax.xml.parsers.SAXParserFactory;
+
+import org.apache.lucene.document.Document;
+import org.apache.lucene.document.Field;
+
+import java.io.File;
+import java.io.InputStream;
+import java.io.FileInputStream;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Map.Entry;
+
+// From chapter 7
+public class SAXXMLDocument extends DefaultHandler {
+
+  private StringBuilder elementBuffer = new StringBuilder();
+  private Map<String,String> attributeMap = new HashMap<String,String>();
+
+  private Document doc;
+
+  public Document getDocument(InputStream is)  // #1
+    throws DocumentHandlerException {
+
+    SAXParserFactory spf = SAXParserFactory.newInstance();
+    try {
+      SAXParser parser = spf.newSAXParser();
+      parser.parse(is, this);
+    } catch (Exception e) {
+      throw new DocumentHandlerException(
+        "Cannot parse XML document", e);
+    }
+
+    return doc;
+  }
+
+  public void startDocument() {             // #2
+    doc = new Document();
+  }
+
+  public void startElement(String uri, String localName,  // #3
+    String qName, Attributes atts)                        // #3
+    throws SAXException {                                 // #3
+
+    elementBuffer.setLength(0);
+    attributeMap.clear();
+    int numAtts = atts.getLength();
+		if (numAtts > 0) {
+      for (int i = 0; i < numAtts; i++) {
+        attributeMap.put(atts.getQName(i), atts.getValue(i));
+      }
+    }
+  }
+
+  public void characters(char[] text, int start, int length) {  // #4
+    elementBuffer.append(text, start, length);
+  }
+
+  public void endElement(String uri, String localName, String qName)  // #5
+    throws SAXException {
+    if (qName.equals("address-book")) {
+      return;
+    }
+    else if (qName.equals("contact")) {
+    	for (Entry<String,String> attribute : attributeMap.entrySet()) {
+    		String attName = attribute.getKey();
+    		String attValue = attribute.getValue();
+    		doc.add(new Field(attName, attValue, Field.Store.YES, Field.Index.NOT_ANALYZED));
+    	}
+    }
+    else {
+      doc.add(new Field(qName, elementBuffer.toString(), Field.Store.YES, Field.Index.NOT_ANALYZED));
+    }
+  }
+
+  public static void main(String args[]) throws Exception {
+    SAXXMLDocument handler = new SAXXMLDocument();
+    Document doc = handler.getDocument(
+      new FileInputStream(new File(args[0])));
+    System.out.println(doc);
+  }
+}
+
+/*
+#1 Start parser
+#2 Called when parsing begins
+#3 Beginning of new XML element
+#4 Append element contents to elementBuffer
+#5 Called when closing XML elements are processed
+*/

Property changes on: lucene/src/liatests/tika/SAXXMLDocument.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lucene/src/liatests/tika/DocumentHandlerException.java
===================================================================
--- lucene/src/liatests/tika/DocumentHandlerException.java	(revision 0)
+++ lucene/src/liatests/tika/DocumentHandlerException.java	(revision 0)
@@ -0,0 +1,86 @@
+package lia.tika;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.PrintStream;
+import java.io.PrintWriter;
+
+// From chapter 7
+public class DocumentHandlerException extends Exception {
+  private Throwable cause;
+
+  /**
+   * Default constructor.
+   */
+  public DocumentHandlerException() {
+    super();
+  }
+
+  /**
+   * Constructs with message.
+   */
+  public DocumentHandlerException(String message) {
+    super(message);
+  }
+
+  /**
+   * Constructs with chained exception.
+   */
+  public DocumentHandlerException(Throwable cause) {
+    super(cause.toString());
+    this.cause = cause;
+  }
+
+  /**
+   * Constructs with message and exception.
+   */
+  public DocumentHandlerException(String message, Throwable cause) {
+    super(message, cause);
+  }
+
+  /**
+   * Retrieves nested exception.
+   */
+  public Throwable getException() {
+    return cause;
+  }
+
+  public void printStackTrace() {
+    printStackTrace(System.err);
+  }
+
+  public void printStackTrace(PrintStream ps) {
+    synchronized (ps) {
+      super.printStackTrace(ps);
+      if (cause != null) {
+        ps.println("--- Nested Exception ---");
+        cause.printStackTrace(ps);
+      }
+    }
+  }
+
+  public void printStackTrace(PrintWriter pw) {
+    synchronized (pw) {
+      super.printStackTrace(pw);
+      if (cause != null) {
+        pw.println("--- Nested Exception ---");
+        cause.printStackTrace(pw);
+      }
+    }
+  }
+}

Property changes on: lucene/src/liatests/tika/DocumentHandlerException.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lucene/src/liatests/common/AllDocCollector.java
===================================================================
--- lucene/src/liatests/common/AllDocCollector.java	(revision 0)
+++ lucene/src/liatests/common/AllDocCollector.java	(revision 0)
@@ -0,0 +1,70 @@
+package lia.common;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.IOException;
+import java.util.List;
+import java.util.ArrayList;
+
+import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.search.Collector;
+import org.apache.lucene.search.ScoreDoc;
+import org.apache.lucene.search.Scorer;
+
+// From chapter 6
+
+/**
+ * Gathers all documents from a search.
+ */
+
+public class AllDocCollector extends Collector {
+  List<ScoreDoc> docs = new ArrayList<ScoreDoc>();
+  private Scorer scorer;
+  private int docBase;
+
+  public boolean acceptsDocsOutOfOrder() {
+    return true;
+  }
+
+  public void setScorer(Scorer scorer) {
+    this.scorer = scorer;
+  }
+
+  public void setNextReader(IndexReader reader, int docBase) {
+    this.docBase = docBase;
+  }
+
+  public void collect(int doc) throws IOException {
+    docs.add(
+      new ScoreDoc(doc+docBase,         // #A
+                   scorer.score()));    // #B
+  }
+
+  public void reset() {
+    docs.clear();
+  }
+
+  public List<ScoreDoc> getHits() {
+    return docs;
+  }
+}
+
+/*
+  #A Create absolute docID
+  #B Record score
+*/

Property changes on: lucene/src/liatests/common/AllDocCollector.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/common/CreateTestIndex.java
===================================================================
--- lucene/src/liatests/common/CreateTestIndex.java	(revision 0)
+++ lucene/src/liatests/common/CreateTestIndex.java	(revision 0)
@@ -0,0 +1,183 @@
+package lia.common;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.document.Document;
+import org.apache.lucene.document.Field;
+import org.apache.lucene.document.NumericField;
+import org.apache.lucene.document.DateTools;
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.store.FSDirectory;
+import org.apache.lucene.analysis.standard.StandardAnalyzer;
+import org.apache.lucene.index.IndexWriter;
+import org.apache.lucene.util.Version;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.util.Properties;
+import java.util.Date;
+import java.util.List;
+import java.util.ArrayList;
+import java.text.ParseException;
+
+public class CreateTestIndex {
+  
+  public static Document getDocument(String rootDir, File file) throws IOException {
+    Properties props = new Properties();
+    props.load(new FileInputStream(file));
+
+    Document doc = new Document();
+
+    // category comes from relative path below the base directory
+    String category = file.getParent().substring(rootDir.length());    //1
+    category = category.replace(File.separatorChar, '/');              //1
+
+    String isbn = props.getProperty("isbn");         //2
+    String title = props.getProperty("title");       //2
+    String author = props.getProperty("author");     //2
+    String url = props.getProperty("url");           //2
+    String subject = props.getProperty("subject");   //2
+
+    String pubmonth = props.getProperty("pubmonth"); //2
+
+    System.out.println(title + "\n" + author + "\n" + subject + "\n" + pubmonth + "\n" + category + "\n---------");
+
+    doc.add(new Field("isbn",                     // 3
+                      isbn,                       // 3
+                      Field.Store.YES,            // 3
+                      Field.Index.NOT_ANALYZED)); // 3
+    doc.add(new Field("category",                 // 3
+                      category,                   // 3
+                      Field.Store.YES,            // 3
+                      Field.Index.NOT_ANALYZED)); // 3
+    doc.add(new Field("title",                    // 3
+                      title,                      // 3
+                      Field.Store.YES,            // 3
+                      Field.Index.ANALYZED,       // 3
+                      Field.TermVector.WITH_POSITIONS_OFFSETS));   // 3
+    doc.add(new Field("title2",                   // 3
+                      title.toLowerCase(),        // 3
+                      Field.Store.YES,            // 3
+                      Field.Index.NOT_ANALYZED_NO_NORMS,   // 3
+                      Field.TermVector.WITH_POSITIONS_OFFSETS));  // 3
+
+    // split multiple authors into unique field instances
+    String[] authors = author.split(",");            // 3
+    for (String a : authors) {                       // 3
+      doc.add(new Field("author",                    // 3
+                        a,                           // 3
+                        Field.Store.YES,             // 3
+                        Field.Index.NOT_ANALYZED,    // 3
+                        Field.TermVector.WITH_POSITIONS_OFFSETS));   // 3
+    }
+
+    doc.add(new Field("url",                        // 3
+                      url,                           // 3
+                      Field.Store.YES,                // 3
+                      Field.Index.NOT_ANALYZED_NO_NORMS));   // 3
+    doc.add(new Field("subject",                     // 3  //4
+                      subject,                       // 3  //4
+                      Field.Store.YES,               // 3  //4
+                      Field.Index.ANALYZED,          // 3  //4
+                      Field.TermVector.WITH_POSITIONS_OFFSETS)); // 3  //4
+
+    doc.add(new NumericField("pubmonth",          // 3
+                             Field.Store.YES,     // 3
+                             true).setIntValue(Integer.parseInt(pubmonth)));   // 3
+
+    Date d; // 3
+    try { // 3
+      d = DateTools.stringToDate(pubmonth); // 3
+    } catch (ParseException pe) { // 3
+      throw new RuntimeException(pe); // 3
+    }                                             // 3
+    doc.add(new NumericField("pubmonthAsDay")      // 3
+                 .setIntValue((int) (d.getTime()/(1000*3600*24))));   // 3
+
+    for(String text : new String[] {title, subject, author, category}) {           // 3 // 5
+      doc.add(new Field("contents", text,                             // 3 // 5
+                        Field.Store.NO, Field.Index.ANALYZED,         // 3 // 5
+                        Field.TermVector.WITH_POSITIONS_OFFSETS));    // 3 // 5
+    }
+
+    return doc;
+  }
+
+  private static String aggregate(String[] strings) {
+    StringBuilder buffer = new StringBuilder();
+
+    for (int i = 0; i < strings.length; i++) {
+      buffer.append(strings[i]);
+      buffer.append(" ");
+    }
+
+    return buffer.toString();
+  }
+
+  private static void findFiles(List<File> result, File dir) {
+    for(File file : dir.listFiles()) {
+      if (file.getName().endsWith(".properties")) {
+        result.add(file);
+      } else if (file.isDirectory()) {
+        findFiles(result, file);
+      }
+    }
+  }
+
+  private static class MyStandardAnalyzer extends StandardAnalyzer {  // 6
+    public MyStandardAnalyzer(Version matchVersion) {                 // 6
+      super(matchVersion);                                            // 6
+    }                                                                 // 6
+    public int getPositionIncrementGap(String field) {                // 6
+      if (field.equals("contents")) {                                 // 6
+        return 100;                                                   // 6
+      } else {                                                        // 6
+        return 0;                                                     // 6
+      }
+    }
+  }
+
+  public static void main(String[] args) throws IOException {
+    String dataDir = args[0];
+    String indexDir = args[1];
+    List<File> results = new ArrayList<File>();
+    findFiles(results, new File(dataDir));
+    System.out.println(results.size() + " books to index");
+    Directory dir = FSDirectory.open(new File(indexDir));
+    IndexWriter w = new IndexWriter(dir,
+                                    new MyStandardAnalyzer(Version.LUCENE_30),
+                                    true,
+                                    IndexWriter.MaxFieldLength.UNLIMITED);
+    for(File file : results) {
+      Document doc = getDocument(dataDir, file);
+      w.addDocument(doc);
+    }
+    w.close();
+    dir.close();
+  }
+}
+
+/*
+  #1 Get category
+  #2 Pull fields
+  #3 Add fields to Document instance
+  #4 Flag subject field
+  #5 Add catch-all contents field
+  #6 Custom analyzer to override multi-valued position increment
+*/

Property changes on: lucene/src/liatests/common/CreateTestIndex.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lucene/src/liatests/common/TestUtil.java
===================================================================
--- lucene/src/liatests/common/TestUtil.java	(revision 0)
+++ lucene/src/liatests/common/TestUtil.java	(revision 0)
@@ -0,0 +1,81 @@
+package lia.common;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.ScoreDoc;
+import org.apache.lucene.search.TopDocs;
+import org.apache.lucene.search.Query;
+import org.apache.lucene.search.Filter;
+import org.apache.lucene.document.Document;
+import org.apache.lucene.store.FSDirectory;
+import org.apache.lucene.store.Directory;
+
+import java.io.IOException;
+import java.io.File;
+
+public class TestUtil {
+  public static boolean hitsIncludeTitle(IndexSearcher searcher, TopDocs hits, String title)
+    throws IOException {
+    for (ScoreDoc match : hits.scoreDocs) {
+      Document doc = searcher.doc(match.doc);
+      if (title.equals(doc.get("title"))) {
+        return true;
+      }
+    }
+    System.out.println("title '" + title + "' not found");
+    return false;
+  }
+
+  public static int hitCount(IndexSearcher searcher, Query query) throws IOException {
+    return searcher.search(query, 1).totalHits;
+  }
+
+  public static int hitCount(IndexSearcher searcher, Query query, Filter filter) throws IOException {
+    return searcher.search(query, filter, 1).totalHits;
+  }
+
+  public static void dumpHits(IndexSearcher searcher, TopDocs hits)
+    throws IOException {
+    if (hits.totalHits == 0) {
+      System.out.println("No hits");
+    }
+
+    for (ScoreDoc match : hits.scoreDocs) {
+      Document doc = searcher.doc(match.doc);
+      System.out.println(match.score + ":" + doc.get("title"));
+    }
+  }
+  
+  public static Directory getBookIndexDirectory() throws IOException {
+    // The build.xml ant script sets this property for us:
+    return FSDirectory.open(new File(System.getProperty("index.dir")));
+  }
+
+  public static void rmDir(File dir) throws IOException {
+    if (dir.exists()) {
+      File[] files = dir.listFiles();
+      for (int i = 0; i < files.length; i++) {
+        if (!files[i].delete()) {
+          throw new IOException("could not delete " + files[i]);
+        }
+      }
+      dir.delete();
+    }
+  }
+}

Property changes on: lucene/src/liatests/common/TestUtil.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lucene/src/liatests/benchmark/topics.txt
===================================================================
--- lucene/src/liatests/benchmark/topics.txt	(revision 0)
+++ lucene/src/liatests/benchmark/topics.txt	(revision 0)
@@ -0,0 +1,9 @@
+<top>
+<num> Number: 0
+<title> apache source
+<desc> Description:
+<narr> Narrative:
+</top>
+
+
+

Property changes on: lucene/src/liatests/benchmark/topics.txt
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/benchmark/test.alg
===================================================================
--- lucene/src/liatests/benchmark/test.alg	(revision 0)
+++ lucene/src/liatests/benchmark/test.alg	(revision 0)
@@ -0,0 +1,46 @@
+# The analyzer to use
+analyzer=org.apache.lucene.analysis.standard.StandardAnalyzer
+
+# Content source
+content.source=org.apache.lucene.benchmark.byTask.feeds.ReutersContentSource
+
+# Directory
+directory=FSDirectory
+
+# Turn on stored fields
+doc.stored = true
+
+# Turn on term vectors
+doc.term.vectors = true
+
+# Don't use compound-file format
+compound = false
+
+# Make only one pass through the documents
+content.source.forever = false
+
+# Repeat 3 times
+{"Rounds"
+
+  # Clear the index
+  ResetSystemErase
+
+  # Name the contained tasks "BuildIndex"
+  {"BuildIndex"
+
+   # Create a new IndexWriter
+   -CreateIndex
+
+   # Add all docs
+   { "AddDocs" AddDoc > : *
+
+   # Close the index
+    -CloseIndex
+  }
+
+  # Start a new round
+  NewRound
+} : 3
+
+# Report on the BuildIndex task
+RepSumByPrefRound BuildIndex 

Property changes on: lucene/src/liatests/benchmark/test.alg
___________________________________________________________________
Added: svn:executable
   + *

Index: lucene/src/liatests/benchmark/qrels.txt
===================================================================
--- lucene/src/liatests/benchmark/qrels.txt	(revision 0)
+++ lucene/src/liatests/benchmark/qrels.txt	(revision 0)
@@ -0,0 +1,10 @@
+# Format:
+#
+#       qnum   0   doc-name     is-relevant
+#
+#
+
+0 	 0 	 apache1.0.txt     	 1
+0 	 0 	 apache1.1.txt     	 1
+0 	 0 	 apache2.0.txt     	 1
+

Property changes on: lucene/src/liatests/benchmark/qrels.txt
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/benchmark/PrecisionRecall.java
===================================================================
--- lucene/src/liatests/benchmark/PrecisionRecall.java	(revision 0)
+++ lucene/src/liatests/benchmark/PrecisionRecall.java	(revision 0)
@@ -0,0 +1,78 @@
+package lia.benchmark;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.File;
+import java.io.PrintWriter;
+import java.io.BufferedReader;
+import java.io.FileReader;
+import org.apache.lucene.index.*;
+import org.apache.lucene.search.*;
+import org.apache.lucene.store.*;
+import org.apache.lucene.benchmark.quality.*;
+import org.apache.lucene.benchmark.quality.utils.*;
+import org.apache.lucene.benchmark.quality.trec.*;
+
+// From appendix C
+
+/* This code was extracted from the Lucene
+   contrib/benchmark sources */
+
+public class PrecisionRecall {
+
+  public static void main(String[] args) throws Throwable {
+
+    File topicsFile = new File("src/lia/benchmark/topics.txt");
+    File qrelsFile = new File("src/lia/benchmark/qrels.txt");
+    Directory dir = FSDirectory.open(new File("indexes/MeetLucene"));
+    Searcher searcher = new IndexSearcher(dir, true);
+
+    String docNameField = "filename"; 
+    
+    PrintWriter logger = new PrintWriter(System.out, true); 
+
+    TrecTopicsReader qReader = new TrecTopicsReader();   //#1
+    QualityQuery qqs[] = qReader.readQueries(            //#1
+        new BufferedReader(new FileReader(topicsFile))); //#1
+    
+    Judge judge = new TrecJudge(new BufferedReader(      //#2
+        new FileReader(qrelsFile)));                     //#2
+    
+    judge.validateData(qqs, logger);                     //#3
+    
+    QualityQueryParser qqParser = new SimpleQQParser("title", "contents");  //#4
+    
+    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);
+    SubmissionReport submitLog = null;
+    QualityStats stats[] = qrun.execute(judge,           //#5
+            submitLog, logger);
+    
+    QualityStats avg = QualityStats.average(stats);      //#6
+    avg.log("SUMMARY",2,logger, "  ");
+    dir.close();
+  }
+}
+
+/*
+#1 Read TREC topics as QualityQuery[]
+#2 Create Judge from TREC Qrel file
+#3 Verify query and Judge match
+#4 Create parser to translate queries into Lucene queries
+#5 Run benchmark
+#6 Print precision and recall measures
+*/

Property changes on: lucene/src/liatests/benchmark/PrecisionRecall.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/build.xml
===================================================================
--- lucene/src/liatests/build.xml	(revision 0)
+++ lucene/src/liatests/build.xml	(revision 0)
@@ -0,0 +1,641 @@
+<project name="LuceneInAction" default="default">
+  <target name="help">
+    <loadfile property="readme" srcfile="README"/>
+    <echo level="info">
+      ${readme}
+    </echo>
+  </target>
+
+  <property name="build.dir" location="build"/>
+  <property name="data.dir" location="data"/>
+
+  <path id="classpath">
+    <fileset dir="lib"/>
+  </path>
+
+  <path id="nutchclasspath">
+    <fileset dir="lib/nutch"/>
+  </path>
+
+  <macrodef name="run-main">
+    <attribute name="class"/>
+    <attribute name="spawn" default="no"/>
+    <element name="args" optional="yes"/>
+
+    <sequential>
+      <echo>Running @{class}...</echo>
+      <java classname="@{class}" fork="true" spawn="@{spawn}">
+        <sysproperty key="index.dir" file="${build.dir}/index"/>
+        <args/>
+        <classpath>
+          <path refid="classpath"/>
+          <pathelement location="${build.dir}/classes"/>
+        </classpath>
+      </java>
+    </sequential>
+  </macrodef>
+
+  <macrodef name="run-nutch-main">
+    <attribute name="class"/>
+    <attribute name="spawn" default="no"/>
+    <element name="args" optional="yes"/>
+
+    <sequential>
+      <echo>Running @{class}...</echo>
+      <java classname="@{class}" fork="true" spawn="@{spawn}">
+        <sysproperty key="index.dir" file="${build.dir}/index"/>
+        <args/>
+        <classpath>
+          <path refid="nutchclasspath"/>
+          <pathelement location="${build.dir}/classes"/>
+          <pathelement location="conf"/> <!-- for Nutch -->
+        </classpath>
+      </java>
+    </sequential>
+  </macrodef>
+
+  <macrodef name="info">
+    <text name="text"/>
+    <sequential>
+      <echo level="info">@{text}</echo>
+      <input addProperty="nopause" message="Press return to continue..."/>
+    </sequential>
+  </macrodef>
+
+  <target name="clean" description="Remove temporary build artifacts">
+    <delete dir="${build.dir}"/>
+  </target>
+
+  <target name="compile" description="Compile source code">
+    <mkdir dir="${build.dir}/classes"/>
+    <javac srcdir="src"
+           destdir="${build.dir}/classes"
+           classpathref="classpath"
+           encoding="UTF8"
+           debug="on"
+           deprecation="on">
+      <include name="**/*.java"/>
+      <exclude name="**/NutchExample.java"/>
+    </javac>
+
+    <copy todir="${build.dir}/classes/lia/tools">
+      <fileset dir="src/lia/tools" excludes="**/*.java"/>
+    </copy>
+  </target>
+
+  <!-- Nutch uses Lucene 2.4.0, but the rest of the sources use 3.0.0,
+       so we set up a separate compile target & classpath -->
+  <target name="compile-nutch" description="Compile source code">
+    <mkdir dir="${build.dir}/classes"/>
+    <javac srcdir="src"
+           destdir="${build.dir}/classes"
+           classpathref="nutchclasspath"
+           encoding="UTF8"
+           debug="on"
+           deprecation="off">
+      <include name="**/NutchExample.java"/>
+    </javac>
+
+    <copy todir="${build.dir}/classes/lia/tools">
+      <fileset dir="src/lia/tools" excludes="**/*.java"/>
+    </copy>
+  </target>
+
+  <target name="check-index">
+    <available property="test.index.exists" file="${build.dir}/index"/>
+  </target>
+
+  <target name="build-test-index" depends="compile,check-index"
+          unless="test.index.exists"
+          description="Build test data index">
+    <info>
+      The test index is built using CreateTestIndex.
+    </info>
+    <run-main class="lia.common.CreateTestIndex">
+      <args>
+        <arg file="${data.dir}"/>
+        <arg file="${build.dir}/index"/>
+      </args>
+    </run-main>
+  </target>
+
+  <target name="prepare" depends="compile,compile-nutch,build-test-index"/>
+
+  <target name="test" depends="prepare" description="Run JUnit test cases">
+    <info>
+      The bulk of Lucene in Action's code is in JUnit test cases.
+      All tests are run by default.  To run an individual test, set
+      the "test" Ant property, for example, to run QueryParserTest:
+
+          ant test -Dtest=QueryParser
+
+    </info>
+
+    <junit errorProperty="test.failed"
+      failureProperty="test.failed"
+      reloading="false">
+      <sysproperty key="index.dir" file="${build.dir}/index"/>
+      <classpath>
+        <path refid="classpath"/>
+        <pathelement location="${build.dir}/classes"/>
+      </classpath>
+      <formatter type="brief" usefile="false"/>
+      <batchtest unless="test">
+        <fileset dir="${build.dir}/classes">
+          <include name="**/*Test.class"/>
+	</fileset>
+      </batchtest>
+      <batchtest if="test">
+        <fileset dir="${build.dir}/classes" includes="**/${test}Test.class"/>
+      </batchtest>
+    </junit>
+
+    <fail if="test.failed">Test(s) failed!!!</fail>
+  </target>
+
+
+  <!--
+     M e e t   L u c e n e
+  -->
+  <target name="Indexer" depends="prepare"
+          description="Indexes a directory of .txt files">
+    <info>
+      Index *.txt files in a directory into a Lucene index.  Use the
+      Searcher target to search this index.
+
+      Indexer is covered in the "Meet Lucene" chapter.
+    </info>
+
+    <input message="Directory for new Lucene index:"
+           addProperty="index.dir"
+           defaultValue="indexes/MeetLucene"
+    />
+
+    <input message="Directory with .txt files to index:"
+           addProperty="text.dir"
+           defaultValue="src/lia/meetlucene/data"
+    />
+
+    <input message="Overwrite ${index.dir}?"
+           validargs="y,n"
+           addproperty="confirm.overwrite"
+    />
+    <condition property="abort">
+      <equals arg1="n" arg2="${confirm.overwrite}"/>
+    </condition>
+    <fail if="abort">Aborted.</fail>
+
+    <run-main class="lia.meetlucene.Indexer">
+      <args>
+        <arg file="${index.dir}"/>
+        <arg file="${text.dir}"/>
+      </args>
+    </run-main>
+  </target>
+
+  <target name="Searcher" depends="prepare"
+          description="Searches an index built by Indexer">
+    <info>
+      Search an index built using Indexer.
+
+      Searcher is described in the "Meet Lucene" chapter.
+    </info>
+
+    <input message="Directory of existing Lucene index built by Indexer: "
+           addProperty="index.dir"
+           defaultValue="indexes/MeetLucene"
+    />
+
+    <input message="Query: "
+           addProperty="query"
+           defaultValue="patent"
+    />
+
+    <run-main class="lia.meetlucene.Searcher">
+      <args>
+        <arg file="${index.dir}"/>
+        <arg value="${query}"/>
+      </args>
+    </run-main>
+  </target>
+
+  <!--
+      I n d e x i n g
+  -->
+
+  <target name="VerboseIndexing" depends="prepare"
+          description="Shows IndexWriter's infoStream output">
+    <info>
+      Show's IndexWriter's infoStream output.
+    </info>
+
+    <run-main class="lia.indexing.VerboseIndexing"/>
+  </target>
+
+  <!--
+     S e a r c h i n g
+  -->
+  <target name="Explainer" depends="prepare"
+          description="Demonstrates Lucene's Explanation feature">
+    <info>
+      Display Lucene's Explanation of each resulting hit of a search.
+
+      Any file system Lucene index and query may be used; use the defaults
+      for an example.
+
+      The Explanation feature is detailed in the "Searching" chapter.
+    </info>
+
+    <input message="Directory for existing Lucene index: [build/index]"
+           addProperty="index.dir"
+           defaultValue="build/index"
+    />
+    <input message="Query: [junit]"
+           addProperty="query"
+           defaultValue="junit"
+    />
+
+    <run-main class="lia.searching.Explainer">
+      <args>
+        <arg file="${index.dir}"/>
+        <arg value="${query}"/>
+      </args>
+    </run-main>
+  </target>
+
+
+  <!--
+     A n a l y s i s
+  -->
+  <target name="AnalyzerDemo" depends="prepare"
+          description="Demonstrates analysis of text">
+    <info>
+      Demonstrates analysis of sample text.
+
+      Refer to the "Analysis" chapter for much more on this
+      extremely crucial topic.
+    </info>
+
+    <input message="String to analyze: [This string will be analyzed.]"
+           addProperty="string"
+           defaultValue="This string will be analyzed."
+    />
+    <run-main class="lia.analysis.AnalyzerDemo">
+      <args>
+        <arg value="${string}"/>
+      </args>
+    </run-main>
+  </target>
+
+  <target name="AnalyzerUtils" depends="prepare"
+          description="Demonstrates analysis of static text">
+    <info>
+      Demonstrates analysis of static text with
+      SimpleAnalyzer and StandardAnalyzer
+    </info>
+
+    <run-main class="lia.analysis.AnalyzerUtils"/>
+  </target>
+
+  <target name="MetaphoneAnalyzer" depends="prepare"
+          description="Demonstrates analysis of static text using MetaphoneAnalyzer">
+    <info>
+      Demonstrates analysis of static text with
+      SimpleAnalyzer and StandardAnalyzer
+    </info>
+
+    <run-main class="lia.analysis.codec.MetaphoneAnalyzerTest"/>
+  </target>
+
+  <target name="SynonymAnalyzerViewer" depends="prepare"
+          description="Examples of synonym injection">
+    <info>
+      Using a custom SynonymAnalyzer, two fixed strings are
+      analyzed with the results displayed.  Synonyms, from the
+      WordNet database, are injected into the same positions
+      as the original words.
+
+      See the "Analysis" chapter for more on synonym injection and
+      position increments.  The "Tools and extensions" chapter covers
+      the WordNet feature found in the Lucene sandbox.
+    </info>
+
+    <run-main class="lia.analysis.synonym.SynonymAnalyzerViewer">
+      <args>
+        <arg file="indexes/wordnet"/>
+      </args>
+    </run-main>
+  </target>
+
+  <target name="ChineseDemo" depends="prepare"
+          description="Examples of Chinese analysis">
+    <info>
+      The Chinese text of "tao te ching" is analyzed with four
+      different analyzers.  The results are displayed in AWT GUI
+      labels to avoid font issues in the console.  Your system may
+      still not show the example properly if you do not have the
+      appropriate font.  The program is spawned, requiring you
+      to close it independently of Ant.  Five windows are created,
+      which overlap one another; move the top one to see the one below.
+
+      See the "Analysis" chapter for a screenshot of this example
+      and more details on non-English analysis.
+    </info>
+
+    <run-main class="lia.analysis.i18n.ChineseDemo" spawn="no"/>
+  </target>
+
+  <target name="NutchExample" depends="prepare"
+          description="Demonstrates Nutch's analyzer">
+    <info>
+      Demonstrates Nutch's unique analysis process of bigramming common
+      terms.
+
+      Nutch analysis is covered in the "Analysis" chapter.
+    </info>
+
+    <run-nutch-main class="lia.analysis.nutch.NutchExample"/>
+  </target>
+
+  <!--
+     A d v a n c e d     S e a r c h i n g
+  -->
+  <target name="BooksLikeThis" depends="prepare"
+          description="Demonstrates a term vector use">
+    <info>
+      Demonstrates use of term vectors for use in locating
+      other documents like a given document.
+
+      Term vectors and the code used in this example are discussed in
+      the "Advanced Searching" chapter.
+    </info>
+
+    <run-main class="lia.advsearching.BooksLikeThis"/>
+  </target>
+
+  <target name="SortingExample" depends="prepare"
+          description="Demonstrates several ways to sort results">
+    <info>
+      Lucene's sorting capabilities are demonstrated by sorting
+      the same search results in various ways.
+
+      Sorting is covered in the "Advanced searching" chapter.
+    </info>
+
+    <run-main class="lia.advsearching.SortingExample"/>
+  </target>
+
+  <!--
+    T i k a
+  -->
+  <target name="TikaIndexer" depends="prepare"
+          description="Indexes a directory of .txt files">
+    <info>
+      Index all files, using Tika to extract text, in a directory into
+      a Lucene index.  Use the Searcher target to search this index.
+
+      TikaIndexer is covered in the "Extracting document text with
+      Tika" chapter.
+    </info>
+
+    <input message="Directory for new Lucene index:"
+           addProperty="index.dir"
+           defaultValue="indexes/Tika"
+    />
+
+    <input message="Directory with files to index:"
+           addProperty="text.dir"
+           defaultValue="src/lia/tika/data"
+    />
+
+    <input message="Overwrite ${index.dir}?"
+           validargs="y,n"
+           addproperty="confirm.overwrite"
+    />
+    <condition property="abort">
+      <equals arg1="n" arg2="${confirm.overwrite}"/>
+    </condition>
+    <fail if="abort">Aborted.</fail>
+
+    <run-main class="lia.tika.TikaIndexer">
+      <args>
+        <arg file="${index.dir}"/>
+        <arg file="${text.dir}"/>
+      </args>
+    </run-main>
+  </target>
+
+  <target name="SAXXMLDocument" depends="prepare"
+          description="Transforms custom XML file into a Document">
+    <info>
+      Translates a custom XML file into a Document using a SAX XML
+      parser.  This is covered in chapter 7.
+    </info>
+
+    <run-main class="lia.tika.SAXXMLDocument">
+      <args>
+        <arg file="src/lia/tika/data/addressbook-entry.xml"/>
+      </args>
+    </run-main>
+  </target>
+
+  <target name="DigesterXMLDocument" depends="prepare"
+          description="Transforms custom XML file into a Document.">
+    <info>
+      Translates a custom XML file into a Document using Apache
+      Commons Digester.  This is covered in chapter 7.
+    </info>
+
+    <run-main class="lia.tika.DigesterXMLDocument">
+      <args>
+        <arg file="src/lia/tika/data/addressbook.xml"/>
+      </args>
+    </run-main>
+  </target>
+
+  <!--
+      T o o l s & E x t e n s i o n s
+  -->
+
+  <target name="SearchServer" depends="prepare"
+          description="Remote and multi-index searching">
+    <info>
+      Lucene's remote and multiple index searching capabilities are
+      demonstrated in this example.  The multiple index searching is
+      done using both the sequential MultiSearcher and multi-threaded
+      ParallelMultiSearcher APIs over 26 (one for each letter of the
+      alphabet) indexes.
+
+      Remote, multiple, and parallel indexing searching is covered in
+      the "Advanced searching" chapter.
+
+      WARNING: SearchServer currently does not shut down gracefully,
+      though the SearchClient does complete its searches successfully.
+      Ant is configured to time-out SearchServer and kill it forcefully
+      after 20 seconds resulting in an ugly "error" message.
+    </info>
+
+    <parallel timeout="20000">
+      <run-main class="lia.tools.remote.SearchServer">
+        <args>
+          <arg file="indexes/distributed"/>
+        </args>
+      </run-main>
+      <sequential>
+        <sleep seconds="5"/>
+        <run-main class="lia.tools.remote.SearchClient">
+          <args>
+            <arg value="java"/>
+          </args>
+        </run-main>
+      </sequential>
+    </parallel>
+  </target>
+
+  <target name="HighlightIt" depends="prepare"
+          description="Demonstrates Lucene's highlighter">
+    <info>
+      This example shows how Lucene's highlighter, a sandbox package,
+      is able to higlight hits in text.
+
+      This application is described in more detail in the
+      "Tools and extensions" chapter.
+    </info>
+
+    <run-main class="lia.tools.HighlightIt">
+      <args>
+        <arg file="${build.dir}/HighlightIt-out.html"/>
+      </args>
+    </run-main>
+  </target>
+
+  <target name="FastVectorHighlighterSample" depends="prepare"
+          description="Demonstrates Lucene's fast-vector-highlighter">
+    <info>
+      This example shows how Lucene's FastVectorHighlighter, a new
+      sandbox package in 2.9 that's an alternative to Highlighter, is
+      able to higlight hits in text.
+
+      This application is described in more detail in the
+      "Tools and extensions" chapter.
+    </info>
+
+    <run-main class="lia.tools.FastVectorHighlighterSample">
+      <args>
+        <arg file="${build.dir}/FastVectorHighlighterSample-out.html"/>
+      </args>
+    </run-main>
+  </target>
+
+  <target name="SpatialLucene"
+	  depends="prepare"
+          description="Spatial search with Lucene">
+    <info>
+      This example shows how to index spatial data into a Lucene
+      index, and then filter and sort according to distance from an
+      arbitrary origin point.
+    </info>
+
+    <run-main class="lia.tools.SpatialLuceneExample">
+    </run-main>
+  </target>
+
+  <target name="CreateSpellCheckerIndex"
+	  depends="prepare"
+          description="Create spell checker index.">
+    <info>
+      Create spell checker index.  After creating this, run
+      SpellCheckerExample to respell words.
+    </info>
+
+    <input message="Directory for spellchecker index:"
+           addProperty="spell.index.dir"
+           defaultValue="indexes/spellchecker"
+    />
+
+    <input message="Directory with existing index:"
+           addProperty="index.dir"
+           defaultValue="indexes/wordnet"
+    />
+
+    <input message="Field name to derive dictionary from:"
+           addProperty="spell.field.name"
+           defaultValue="word"
+    />
+
+    <run-main class="lia.tools.CreateSpellCheckerIndex">
+      <args>
+	<arg file="${spell.index.dir}"/>
+	<arg file="${index.dir}"/>
+	<arg value="${spell.field.name}"/>
+      </args>
+    </run-main>
+  </target>
+
+  <target name="SpellCheckerExample"
+	  depends="prepare"
+          description="Tests respelling a word">
+    <info>
+      Tests respelling a word.
+    </info>
+
+    <input message="Directory for spellchecker index:"
+           addProperty="spell.index.dir"
+           defaultValue="indexes/spellchecker"
+    />
+
+    <input message="Word to respell:"
+           addProperty="spell.word"
+           defaultValue="letuce"
+    />
+
+    <run-main class="lia.tools.SpellCheckerExample">
+      <args>
+	<arg file="${spell.index.dir}"/>
+	<arg value="${spell.word}"/>
+      </args>
+    </run-main>
+  </target>
+
+  <!--
+      A d m i n i s t r a t i o n  &  P e r f o r m a n c e  T u n i n g
+  -->
+
+  <target name="OpenFileLimitCheck" depends="prepare"
+          description="Tests how many open files your environment allows">
+    <info>
+      Tests how many open files your environment allows.  This tool is
+      described in chapter 11.
+    </info>
+
+    <run-main class="lia.admin.OpenFileLimitCheck"/>
+  </target>
+
+
+  <!--
+      B e n c h m a r k
+  -->
+
+  <target name="PrecisionRecall"
+	  depends="prepare"
+          description="Measure precision and recall using contrib/benchmark">
+    <info>
+      This example shows how to measure the quality of your search
+      results, by measuring precision and recall.
+    </info>
+
+    <run-main class="lia.benchmark.PrecisionRecall">
+    </run-main>
+  </target>
+
+  <target name="ready-set-go">
+    <echo level="info">
+      The code will next be compiled and the test indexes will be
+      created.  This process is only done once.  Follow the
+      instructions from the README (or as shown from "ant help")
+      after this process completes.
+    </echo>
+  </target>
+
+  <target name="default" depends="help,ready-set-go,prepare"/>
+</project>

Property changes on: lucene/src/liatests/build.xml
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/advsearching/SortingExample.java
===================================================================
--- lucene/src/liatests/advsearching/SortingExample.java	(revision 0)
+++ lucene/src/liatests/advsearching/SortingExample.java	(revision 0)
@@ -0,0 +1,137 @@
+package lia.advsearching;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.commons.lang.StringUtils;
+import org.apache.lucene.document.Document;
+import org.apache.lucene.search.ScoreDoc;
+import org.apache.lucene.search.TopDocs;
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.Query;
+import org.apache.lucene.search.MatchAllDocsQuery;
+import org.apache.lucene.search.Sort;
+import org.apache.lucene.search.SortField;
+import org.apache.lucene.search.BooleanQuery;
+import org.apache.lucene.search.BooleanClause;
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.util.Version;
+import org.apache.lucene.queryParser.QueryParser;
+import org.apache.lucene.analysis.standard.StandardAnalyzer;
+
+import java.io.IOException;
+import java.io.PrintStream;
+import java.text.DecimalFormat;
+
+import lia.common.TestUtil;
+
+// From chapter 5
+public class SortingExample {
+  private Directory directory;
+
+  public SortingExample(Directory directory) {
+    this.directory = directory;
+  }
+
+  public void displayResults(Query query, Sort sort)            // #1
+      throws IOException {
+    IndexSearcher searcher = new IndexSearcher(directory);
+
+    searcher.setDefaultFieldSortScoring(true, false);            // #2
+
+    TopDocs results = searcher.search(query, null,         // #3
+                                      20, sort);           // #3
+
+    System.out.println("\nResults for: " +                      // #4
+        query.toString() + " sorted by " + sort);
+
+    System.out.println(StringUtils.rightPad("Title", 30) +
+      StringUtils.rightPad("pubmonth", 10) +
+      StringUtils.center("id", 4) +
+      StringUtils.center("score", 15));
+
+    PrintStream out = new PrintStream(System.out, true, "UTF-8");    // #5
+
+    DecimalFormat scoreFormatter = new DecimalFormat("0.######");
+    for (ScoreDoc sd : results.scoreDocs) {
+      int docID = sd.doc;
+      float score = sd.score;
+      Document doc = searcher.doc(docID);
+      out.println(
+          StringUtils.rightPad(                                                  // #6
+              StringUtils.abbreviate(doc.get("title"), 29), 30) +                // #6
+          StringUtils.rightPad(doc.get("pubmonth"), 10) +                        // #6
+          StringUtils.center("" + docID, 4) +                                    // #6
+          StringUtils.leftPad(                                                   // #6
+             scoreFormatter.format(score), 12));                                 // #6
+      out.println("   " + doc.get("category"));
+      //out.println(searcher.explain(query, docID));   // #7
+    }
+
+    searcher.close();
+  }
+
+/*
+  The Sort object (#1) encapsulates an ordered collection of
+  field sorting information. We ask IndexSearcher (#2) to
+  compute scores per hit. Then we call the overloaded search
+  method that accepts the custom Sort (#3). We use the
+  useful toString method (#4) of the Sort class to describe
+  itself, and then create PrintStream that accepts UTF-8
+  encoded output (#5), and finally use StringUtils (#6) from
+  Apache Commons Lang for nice columnar output
+  formatting. Later youùll see a reason to look at the
+  explanation of score . For now, itùs commented out (#7).
+*/
+
+  public static void main(String[] args) throws Exception {
+    Query allBooks = new MatchAllDocsQuery();
+
+    QueryParser parser = new QueryParser(Version.LUCENE_30,                 // #1
+                                         "contents",                             // #1
+                                         new StandardAnalyzer(                   // #1
+                                           Version.LUCENE_30));             // #1
+    BooleanQuery query = new BooleanQuery();                                     // #1
+    query.add(allBooks, BooleanClause.Occur.SHOULD);                             // #1
+    query.add(parser.parse("java OR action"), BooleanClause.Occur.SHOULD);       // #1
+
+    Directory directory = TestUtil.getBookIndexDirectory();                     // #2
+    SortingExample example = new SortingExample(directory);                     // #2
+
+    example.displayResults(query, Sort.RELEVANCE);
+
+    example.displayResults(query, Sort.INDEXORDER);
+
+    example.displayResults(query, new Sort(new SortField("category", SortField.STRING)));
+
+    example.displayResults(query, new Sort(new SortField("pubmonth", SortField.INT, true)));
+
+    example.displayResults(query,
+        new Sort(new SortField("category", SortField.STRING),
+                 SortField.FIELD_SCORE,
+                 new SortField("pubmonth", SortField.INT, true)
+                 ));
+
+    example.displayResults(query, new Sort(new SortField[] {SortField.FIELD_SCORE, new SortField("category", SortField.STRING)}));
+    directory.close();
+  }
+}
+
+/*
+#1 Create test query
+#2 Create example running
+*/
\ No newline at end of file

Property changes on: lucene/src/liatests/advsearching/SortingExample.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lucene/src/liatests/advsearching/MultiFieldQueryParserTest.java
===================================================================
--- lucene/src/liatests/advsearching/MultiFieldQueryParserTest.java	(revision 0)
+++ lucene/src/liatests/advsearching/MultiFieldQueryParserTest.java	(revision 0)
@@ -0,0 +1,85 @@
+package lia.advsearching;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import lia.common.TestUtil;
+import junit.framework.TestCase;
+
+import org.apache.lucene.analysis.SimpleAnalyzer;
+import org.apache.lucene.queryParser.MultiFieldQueryParser;
+import org.apache.lucene.search.TopDocs;
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.Query;
+import org.apache.lucene.search.BooleanClause;
+import org.apache.lucene.util.Version;
+import org.apache.lucene.store.Directory;
+
+// From chapter 5
+public class MultiFieldQueryParserTest extends TestCase {
+  public void testDefaultOperator() throws Exception {
+    Query query = new MultiFieldQueryParser(Version.LUCENE_30,
+                                            new String[]{"title", "subject"},
+        new SimpleAnalyzer()).parse("development");
+
+    Directory dir = TestUtil.getBookIndexDirectory();
+    IndexSearcher searcher = new IndexSearcher(
+                               dir,
+                               true);
+    TopDocs hits = searcher.search(query, 10);
+
+    assertTrue(TestUtil.hitsIncludeTitle(
+           searcher,
+           hits,
+           "Ant in Action"));
+
+    assertTrue(TestUtil.hitsIncludeTitle(     //A
+           searcher,                          //A
+           hits,                              //A
+           "Extreme Programming Explained")); //A
+    searcher.close();
+    dir.close();
+  }
+
+  public void testSpecifiedOperator() throws Exception {
+    Query query = MultiFieldQueryParser.parse(Version.LUCENE_30,
+        "lucene",
+        new String[]{"title", "subject"},
+        new BooleanClause.Occur[]{BooleanClause.Occur.MUST,
+                  BooleanClause.Occur.MUST},
+        new SimpleAnalyzer());
+
+    Directory dir = TestUtil.getBookIndexDirectory();
+    IndexSearcher searcher = new IndexSearcher(
+                               dir,
+                               true);
+    TopDocs hits = searcher.search(query, 10);
+
+    assertTrue(TestUtil.hitsIncludeTitle(
+            searcher,
+            hits,
+            "Lucene in Action, Second Edition"));
+    assertEquals("one and only one", 1, hits.scoreDocs.length);
+    searcher.close();
+    dir.close();
+  }
+
+  /*
+    #A Has development in the subject field
+   */
+
+}

Property changes on: lucene/src/liatests/advsearching/MultiFieldQueryParserTest.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lucene/src/liatests/advsearching/TimeLimitingCollectorTest.java
===================================================================
--- lucene/src/liatests/advsearching/TimeLimitingCollectorTest.java	(revision 0)
+++ lucene/src/liatests/advsearching/TimeLimitingCollectorTest.java	(revision 0)
@@ -0,0 +1,58 @@
+package lia.advsearching;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import junit.framework.TestCase;
+import lia.common.TestUtil;
+
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.search.Query;
+import org.apache.lucene.search.Collector;
+import org.apache.lucene.search.MatchAllDocsQuery;
+import org.apache.lucene.search.TopScoreDocCollector;
+import org.apache.lucene.search.TimeLimitingCollector;
+import org.apache.lucene.search.TimeLimitingCollector.TimeExceededException;
+
+// From chapter 5
+public class TimeLimitingCollectorTest extends TestCase {
+  public void testTimeLimitingCollector() throws Exception {
+    Directory dir = TestUtil.getBookIndexDirectory();
+    IndexSearcher searcher = new IndexSearcher(dir);
+    Query q = new MatchAllDocsQuery();
+    int numAllBooks = TestUtil.hitCount(searcher, q);
+
+    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);
+    Collector collector = new TimeLimitingCollector(topDocs,  // #A
+                                                    1000);    // #A
+    try {
+      searcher.search(q, collector);
+      assertEquals(numAllBooks, topDocs.getTotalHits());  // #B
+    } catch (TimeExceededException tee) {                 // #C
+      System.out.println("Too much time taken.");         // #C
+    }                                                     // #C
+    searcher.close();
+    dir.close();
+  }
+}
+
+/*
+  #A Wrap any existing Collector
+  #B If no timeout, we should have all hits
+  #C Timeout hit
+*/

Property changes on: lucene/src/liatests/advsearching/TimeLimitingCollectorTest.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lucene/src/liatests/advsearching/MultiPhraseQueryTest.java
===================================================================
--- lucene/src/liatests/advsearching/MultiPhraseQueryTest.java	(revision 0)
+++ lucene/src/liatests/advsearching/MultiPhraseQueryTest.java	(revision 0)
@@ -0,0 +1,132 @@
+package lia.advsearching;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import junit.framework.TestCase;
+import lia.analysis.synonym.SynonymEngine;
+import lia.analysis.synonym.SynonymAnalyzer;
+import org.apache.lucene.queryParser.QueryParser;
+import org.apache.lucene.analysis.WhitespaceAnalyzer;
+import org.apache.lucene.document.Document;
+import org.apache.lucene.document.Field;
+import org.apache.lucene.index.IndexWriter;
+import org.apache.lucene.index.Term;
+import org.apache.lucene.search.BooleanQuery;
+import org.apache.lucene.search.ScoreDoc;
+import org.apache.lucene.search.TopDocs;
+import org.apache.lucene.search.Query;
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.PhraseQuery;
+import org.apache.lucene.search.MultiPhraseQuery;
+import org.apache.lucene.search.BooleanClause;
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.store.RAMDirectory;
+import org.apache.lucene.util.Version;
+
+import java.io.IOException;
+
+// From chapter 5
+public class MultiPhraseQueryTest extends TestCase {
+  private IndexSearcher searcher;
+
+  protected void setUp() throws Exception {
+    Directory directory = new RAMDirectory();
+    IndexWriter writer = new IndexWriter(directory,
+                                         new WhitespaceAnalyzer(),
+                                         IndexWriter.MaxFieldLength.UNLIMITED);
+    Document doc1 = new Document();
+    doc1.add(new Field("field",
+              "the quick brown fox jumped over the lazy dog",
+              Field.Store.YES, Field.Index.ANALYZED));
+    writer.addDocument(doc1);
+    Document doc2 = new Document();
+    doc2.add(new Field("field",
+              "the fast fox hopped over the hound",
+              Field.Store.YES, Field.Index.ANALYZED));
+    writer.addDocument(doc2);
+    writer.close();
+
+    searcher = new IndexSearcher(directory);
+  }
+
+  public void testBasic() throws Exception {
+    MultiPhraseQuery query = new MultiPhraseQuery();
+    query.add(new Term[] {                       // #A
+        new Term("field", "quick"),              // #A
+        new Term("field", "fast")                // #A
+    });
+    query.add(new Term("field", "fox"));         // #B
+    System.out.println(query);
+
+    TopDocs hits = searcher.search(query, 10);
+    assertEquals("fast fox match", 1, hits.totalHits);
+
+    query.setSlop(1);
+    hits = searcher.search(query, 10);
+    assertEquals("both match", 2, hits.totalHits);
+  }
+  /*
+#A Any of these terms may be in first position to match
+#B Only one in second position
+  */
+
+  public void testAgainstOR() throws Exception {
+    PhraseQuery quickFox = new PhraseQuery();
+    quickFox.setSlop(1);
+    quickFox.add(new Term("field", "quick"));
+    quickFox.add(new Term("field", "fox"));
+
+    PhraseQuery fastFox = new PhraseQuery();
+    fastFox.add(new Term("field", "fast"));
+    fastFox.add(new Term("field", "fox"));
+
+    BooleanQuery query = new BooleanQuery();
+    query.add(quickFox, BooleanClause.Occur.SHOULD);
+    query.add(fastFox, BooleanClause.Occur.SHOULD);
+    TopDocs hits = searcher.search(query, 10);
+    assertEquals(2, hits.totalHits);
+  }
+
+  public void testQueryParser() throws Exception {
+    SynonymEngine engine = new SynonymEngine() {
+        public String[] getSynonyms(String s) {
+          if (s.equals("quick"))
+            return new String[] {"fast"};
+          else
+            return null;
+        }
+      };
+
+    Query q = new QueryParser(Version.LUCENE_30,
+                              "field",
+                              new SynonymAnalyzer(engine))
+      .parse("\"quick fox\"");
+
+    assertEquals("analyzed",
+        "field:\"(quick fast) fox\"", q.toString());
+    assertTrue("parsed as MultiPhraseQuery", q instanceof MultiPhraseQuery);
+  }
+
+  private void debug(TopDocs hits) throws IOException {
+    for (ScoreDoc sd : hits.scoreDocs) {
+      Document doc = searcher.doc(sd.doc);
+      System.out.println(sd.score + ": " + doc.get("field"));
+    }
+
+  }
+}
\ No newline at end of file

Property changes on: lucene/src/liatests/advsearching/MultiPhraseQueryTest.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lucene/src/liatests/advsearching/FilterTest.java
===================================================================
--- lucene/src/liatests/advsearching/FilterTest.java	(revision 0)
+++ lucene/src/liatests/advsearching/FilterTest.java	(revision 0)
@@ -0,0 +1,160 @@
+package lia.advsearching;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import junit.framework.TestCase;
+import lia.common.TestUtil;
+
+import org.apache.lucene.index.Term;
+import org.apache.lucene.search.BooleanQuery;
+import org.apache.lucene.search.CachingWrapperFilter;
+import org.apache.lucene.search.Filter;
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.Query;
+import org.apache.lucene.search.QueryWrapperFilter;
+import org.apache.lucene.search.TermQuery;
+import org.apache.lucene.search.spans.SpanQuery;
+import org.apache.lucene.search.spans.SpanTermQuery;
+import org.apache.lucene.search.SpanQueryFilter;
+import org.apache.lucene.search.BooleanClause;
+import org.apache.lucene.search.TermRangeFilter;
+import org.apache.lucene.search.FieldCacheTermsFilter;
+import org.apache.lucene.search.FieldCacheRangeFilter;
+import org.apache.lucene.search.NumericRangeFilter;
+import org.apache.lucene.search.PrefixFilter;
+import org.apache.lucene.search.MatchAllDocsQuery;
+import org.apache.lucene.store.Directory;
+
+// From chapter 5
+public class FilterTest extends TestCase {
+  private Query allBooks;
+  private IndexSearcher searcher;
+  private Directory dir;
+
+  protected void setUp() throws Exception {    // #1
+    allBooks = new MatchAllDocsQuery();
+    dir = TestUtil.getBookIndexDirectory();
+    searcher = new IndexSearcher(dir);
+  }
+
+  protected void tearDown() throws Exception {
+    searcher.close();
+    dir.close();
+  }
+
+  public void testTermRangeFilter() throws Exception {
+    Filter filter = new TermRangeFilter("title2", "d", "j", true, true);
+    assertEquals(3, TestUtil.hitCount(searcher, allBooks, filter));
+  }
+
+  /*
+    #1 setUp() establishes baseline book count
+  */
+
+  public void testNumericDateFilter() throws Exception {
+    // pub date of Lucene in Action, Second Edition and
+    // JUnit in ACtion, Second Edition is May 2010
+    Filter filter = NumericRangeFilter.newIntRange("pubmonth",
+                                                   201001,
+                                                   201006,
+                                                   true,
+                                                   true);
+    assertEquals(2, TestUtil.hitCount(searcher, allBooks, filter));
+  }
+
+  public void testFieldCacheRangeFilter() throws Exception {
+    Filter filter = FieldCacheRangeFilter.newStringRange("title2", "d", "j", true, true);
+    assertEquals(3, TestUtil.hitCount(searcher, allBooks, filter));
+
+    filter = FieldCacheRangeFilter.newIntRange("pubmonth",
+                                               201001,
+                                               201006,
+                                               true,
+                                               true);
+    assertEquals(2, TestUtil.hitCount(searcher, allBooks, filter));
+  }
+  
+  public void testFieldCacheTermsFilter() throws Exception {
+    Filter filter = new FieldCacheTermsFilter("category",
+                      new String[] {"/health/alternative/chinese",
+                                    "/technology/computers/ai",
+                                    "/technology/computers/programming"});
+    assertEquals("expected 7 hits",
+                 7,
+                 TestUtil.hitCount(searcher, allBooks, filter));
+  }
+
+  public void testQueryWrapperFilter() throws Exception {
+    TermQuery categoryQuery =
+       new TermQuery(new Term("category", "/philosophy/eastern"));
+
+    Filter categoryFilter = new QueryWrapperFilter(categoryQuery);
+
+    assertEquals("only tao te ching",
+                 1,
+                 TestUtil.hitCount(searcher, allBooks, categoryFilter));
+  }
+
+  public void testSpanQueryFilter() throws Exception {
+    SpanQuery categoryQuery =
+       new SpanTermQuery(new Term("category", "/philosophy/eastern"));
+
+    Filter categoryFilter = new SpanQueryFilter(categoryQuery);
+
+    assertEquals("only tao te ching",
+                 1,
+                 TestUtil.hitCount(searcher, allBooks, categoryFilter));
+  }
+
+  public void testFilterAlternative() throws Exception {
+    TermQuery categoryQuery =
+       new TermQuery(new Term("category", "/philosophy/eastern"));
+
+    BooleanQuery constrainedQuery = new BooleanQuery();
+    constrainedQuery.add(allBooks, BooleanClause.Occur.MUST);
+    constrainedQuery.add(categoryQuery, BooleanClause.Occur.MUST);
+
+    assertEquals("only tao te ching",
+                 1,
+                 TestUtil.hitCount(searcher, constrainedQuery));
+  }
+
+  public void testPrefixFilter() throws Exception {
+    Filter prefixFilter = new PrefixFilter(
+                            new Term("category",
+                                     "/technology/computers"));
+    assertEquals("only /technology/computers/* books",
+                 8,
+                 TestUtil.hitCount(searcher,
+                                   allBooks,
+                                   prefixFilter));
+  }
+
+  public void testCachingWrapper() throws Exception {
+    Filter filter = new TermRangeFilter("title2",
+                                        "d", "j",
+                                        true, true);
+
+    CachingWrapperFilter cachingFilter;
+    cachingFilter = new CachingWrapperFilter(filter);
+    assertEquals(3,
+                 TestUtil.hitCount(searcher,
+                                   allBooks,
+                                   cachingFilter));
+  }
+}

Property changes on: lucene/src/liatests/advsearching/FilterTest.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/advsearching/Fragments.java
===================================================================
--- lucene/src/liatests/advsearching/Fragments.java	(revision 0)
+++ lucene/src/liatests/advsearching/Fragments.java	(revision 0)
@@ -0,0 +1,36 @@
+package lia.advsearching;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.search.*;
+
+// From chapter 5
+public class Fragments {
+  public void frags1() throws Exception {
+    String jan1 = null;
+    String jan31 = null;
+    String modified = null;
+    Filter filter;
+    // START
+    filter = new TermRangeFilter(modified, null, jan31, false, true);
+    filter = new TermRangeFilter(modified, jan1, null, true, false);
+    filter = TermRangeFilter.Less(modified, jan31);
+    filter = TermRangeFilter.More(modified, jan1);
+    // END
+  }
+}
\ No newline at end of file

Property changes on: lucene/src/liatests/advsearching/Fragments.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lucene/src/liatests/advsearching/SpanQueryTest.java
===================================================================
--- lucene/src/liatests/advsearching/SpanQueryTest.java	(revision 0)
+++ lucene/src/liatests/advsearching/SpanQueryTest.java	(revision 0)
@@ -0,0 +1,296 @@
+package lia.advsearching;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import junit.framework.TestCase;
+import org.apache.lucene.analysis.Analyzer;
+import org.apache.lucene.analysis.TokenStream;
+import org.apache.lucene.analysis.WhitespaceAnalyzer;
+import org.apache.lucene.analysis.tokenattributes.TermAttribute;
+import org.apache.lucene.document.Document;
+import org.apache.lucene.document.Field;
+import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.IndexWriter;
+import org.apache.lucene.index.Term;
+import org.apache.lucene.search.ScoreDoc;
+import org.apache.lucene.search.TopDocs;
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.PhraseQuery;
+import org.apache.lucene.search.Query;
+import org.apache.lucene.search.MatchAllDocsQuery;
+import org.apache.lucene.search.Filter;
+import org.apache.lucene.search.SpanQueryFilter;
+import org.apache.lucene.search.spans.SpanFirstQuery;
+import org.apache.lucene.search.spans.SpanNearQuery;
+import org.apache.lucene.search.spans.SpanNotQuery;
+import org.apache.lucene.search.spans.SpanOrQuery;
+import org.apache.lucene.search.spans.SpanQuery;
+import org.apache.lucene.search.spans.SpanTermQuery;
+import org.apache.lucene.search.spans.Spans;
+import org.apache.lucene.store.RAMDirectory;
+
+import java.io.IOException;
+import java.io.StringReader;
+
+// From chapter 5
+public class SpanQueryTest extends TestCase {
+  private RAMDirectory directory;
+  private IndexSearcher searcher;
+  private IndexReader reader;
+
+  private SpanTermQuery quick;
+  private SpanTermQuery brown;
+  private SpanTermQuery red;
+  private SpanTermQuery fox;
+  private SpanTermQuery lazy;
+  private SpanTermQuery sleepy;
+  private SpanTermQuery dog;
+  private SpanTermQuery cat;
+  private Analyzer analyzer;
+
+  protected void setUp() throws Exception {
+    directory = new RAMDirectory();
+
+    analyzer = new WhitespaceAnalyzer();
+    IndexWriter writer = new IndexWriter(directory,
+                                         analyzer,
+                                         IndexWriter.MaxFieldLength.UNLIMITED);
+
+    Document doc = new Document();
+    doc.add(new Field("f",
+        "the quick brown fox jumps over the lazy dog",
+        Field.Store.YES, Field.Index.ANALYZED));
+    writer.addDocument(doc);
+
+    doc = new Document();
+    doc.add(new Field("f",
+        "the quick red fox jumps over the sleepy cat",
+        Field.Store.YES, Field.Index.ANALYZED));
+    writer.addDocument(doc);
+
+    writer.close();
+
+    searcher = new IndexSearcher(directory);
+    reader = searcher.getIndexReader();
+
+    quick = new SpanTermQuery(new Term("f", "quick"));
+    brown = new SpanTermQuery(new Term("f", "brown"));
+    red = new SpanTermQuery(new Term("f", "red"));
+    fox = new SpanTermQuery(new Term("f", "fox"));
+    lazy = new SpanTermQuery(new Term("f", "lazy"));
+    sleepy = new SpanTermQuery(new Term("f", "sleepy"));
+    dog = new SpanTermQuery(new Term("f", "dog"));
+    cat = new SpanTermQuery(new Term("f", "cat"));
+  }
+
+  private void assertOnlyBrownFox(Query query) throws Exception {
+    TopDocs hits = searcher.search(query, 10);
+    assertEquals(1, hits.totalHits);
+    assertEquals("wrong doc", 0, hits.scoreDocs[0].doc);
+  }
+
+  private void assertBothFoxes(Query query) throws Exception {
+    TopDocs hits = searcher.search(query, 10);
+    assertEquals(2, hits.totalHits);
+  }
+
+  private void assertNoMatches(Query query) throws Exception {
+    TopDocs hits = searcher.search(query, 10);
+    assertEquals(0, hits.totalHits);
+  }
+
+  public void testSpanTermQuery() throws Exception {
+    assertOnlyBrownFox(brown);
+    dumpSpans(brown);
+  }
+
+  public void testSpanFirstQuery() throws Exception {
+    SpanFirstQuery sfq = new SpanFirstQuery(brown, 2);
+    assertNoMatches(sfq);
+
+    dumpSpans(sfq);
+
+    sfq = new SpanFirstQuery(brown, 3);
+    dumpSpans(sfq);
+    assertOnlyBrownFox(sfq);
+  }
+
+  public void testSpanNearQuery() throws Exception {
+    SpanQuery[] quick_brown_dog =
+        new SpanQuery[]{quick, brown, dog};
+    SpanNearQuery snq =
+      new SpanNearQuery(quick_brown_dog, 0, true);                // #1
+    assertNoMatches(snq);
+    dumpSpans(snq);
+
+    snq = new SpanNearQuery(quick_brown_dog, 4, true);            // #2
+    assertNoMatches(snq);
+    dumpSpans(snq);
+
+    snq = new SpanNearQuery(quick_brown_dog, 5, true);            // #3
+    assertOnlyBrownFox(snq);
+    dumpSpans(snq);
+
+    // interesting - even a sloppy phrase query would require
+    // more slop to match
+    snq = new SpanNearQuery(new SpanQuery[]{lazy, fox}, 3, false);// #4
+    assertOnlyBrownFox(snq);
+    dumpSpans(snq);
+
+    PhraseQuery pq = new PhraseQuery();                           // #5
+    pq.add(new Term("f", "lazy"));                                // #5
+    pq.add(new Term("f", "fox"));                                 // #5
+    pq.setSlop(4);                                                // #5
+    assertNoMatches(pq);
+
+    pq.setSlop(5);                                                // #6
+    assertOnlyBrownFox(pq);                                       // #6
+  }
+
+  /*
+    #1 Query for three successive terms
+    #2 Same terms, slop of 4
+    #3 SpanNearQuery matches
+    #4 Nested SpanTermQuery objects in reverse order
+    #5 Comparable PhraseQuery
+    #6 PhraseQuery, slop of 5
+  */
+
+  public void testSpanQueryFilter() throws Exception {
+    SpanQuery[] quick_brown_dog =
+        new SpanQuery[]{quick, brown, dog};
+    SpanQuery snq = new SpanNearQuery(quick_brown_dog, 5, true);
+    Filter filter = new SpanQueryFilter(snq);
+
+    Query query = new MatchAllDocsQuery();
+    TopDocs hits = searcher.search(query, filter, 10);
+    assertEquals(1, hits.totalHits);
+    assertEquals("wrong doc", 0, hits.scoreDocs[0].doc);
+  }
+
+  public void testSpanNotQuery() throws Exception {
+    SpanNearQuery quick_fox =
+        new SpanNearQuery(new SpanQuery[]{quick, fox}, 1, true);
+    assertBothFoxes(quick_fox);
+    dumpSpans(quick_fox);
+
+    SpanNotQuery quick_fox_dog = new SpanNotQuery(quick_fox, dog);
+    assertBothFoxes(quick_fox_dog);
+    dumpSpans(quick_fox_dog);
+
+    SpanNotQuery no_quick_red_fox =
+        new SpanNotQuery(quick_fox, red);
+    assertOnlyBrownFox(no_quick_red_fox);
+    dumpSpans(no_quick_red_fox);
+  }
+
+  public void testSpanOrQuery() throws Exception {
+    SpanNearQuery quick_fox =
+        new SpanNearQuery(new SpanQuery[]{quick, fox}, 1, true);
+
+    SpanNearQuery lazy_dog =
+        new SpanNearQuery(new SpanQuery[]{lazy, dog}, 0, true);
+
+    SpanNearQuery sleepy_cat =
+        new SpanNearQuery(new SpanQuery[]{sleepy, cat}, 0, true);
+
+    SpanNearQuery qf_near_ld =
+        new SpanNearQuery(
+            new SpanQuery[]{quick_fox, lazy_dog}, 3, true);
+    assertOnlyBrownFox(qf_near_ld);
+    dumpSpans(qf_near_ld);
+
+    SpanNearQuery qf_near_sc =
+        new SpanNearQuery(
+            new SpanQuery[]{quick_fox, sleepy_cat}, 3, true);
+    dumpSpans(qf_near_sc);
+
+    SpanOrQuery or = new SpanOrQuery(
+        new SpanQuery[]{qf_near_ld, qf_near_sc});
+    assertBothFoxes(or);
+    dumpSpans(or);
+  }
+
+  public void testPlay() throws Exception {
+    SpanOrQuery or = new SpanOrQuery(new SpanQuery[]{quick, fox});
+    dumpSpans(or);
+
+    SpanNearQuery quick_fox =
+        new SpanNearQuery(new SpanQuery[]{quick, fox}, 1, true);
+    SpanFirstQuery sfq = new SpanFirstQuery(quick_fox, 4);
+    dumpSpans(sfq);
+
+    dumpSpans(new SpanTermQuery(new Term("f", "the")));
+
+    SpanNearQuery quick_brown =
+        new SpanNearQuery(new SpanQuery[]{quick, brown}, 0, false);
+    dumpSpans(quick_brown);
+
+  }
+
+  private void dumpSpans(SpanQuery query) throws IOException {
+    Spans spans = query.getSpans(reader);
+    System.out.println(query + ":");
+    int numSpans = 0;
+
+    TopDocs hits = searcher.search(query, 10);
+    float[] scores = new float[2];
+    for (ScoreDoc sd : hits.scoreDocs) {
+      scores[sd.doc] = sd.score;
+    }
+
+    while (spans.next()) {                 // A
+      numSpans++;
+
+      int id = spans.doc();
+      Document doc = reader.document(id);  // B
+
+      TokenStream stream = analyzer.tokenStream("contents",      // C
+                              new StringReader(doc.get("f")));   // C
+      TermAttribute term = stream.addAttribute(TermAttribute.class);
+      
+      StringBuilder buffer = new StringBuilder();
+      buffer.append("   ");
+      int i = 0;
+      while(stream.incrementToken()) {     // D
+        if (i == spans.start()) {          // E
+          buffer.append("<");              // E
+        }                                  // E
+        buffer.append(term.term());        // E
+        if (i + 1 == spans.end()) {        // E
+          buffer.append(">");              // E
+        }                                  // E
+        buffer.append(" ");
+        i++;
+      }
+      buffer.append("(").append(scores[id]).append(") ");
+      System.out.println(buffer);
+    }
+
+    if (numSpans == 0) {
+      System.out.println("   No spans");
+    }
+    System.out.println();
+  }
+
+  // A Step through each span
+  // B Retrieve document
+  // C Re-analyze text
+  // D Step through all tokens
+  // E Print < and > around span
+}

Property changes on: lucene/src/liatests/advsearching/SpanQueryTest.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lucene/src/liatests/advsearching/MultiSearcherTest.java
===================================================================
--- lucene/src/liatests/advsearching/MultiSearcherTest.java	(revision 0)
+++ lucene/src/liatests/advsearching/MultiSearcherTest.java	(revision 0)
@@ -0,0 +1,96 @@
+package lia.advsearching;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.analysis.Analyzer;
+import org.apache.lucene.analysis.WhitespaceAnalyzer;
+import org.apache.lucene.document.Document;
+import org.apache.lucene.document.Field;
+import org.apache.lucene.index.IndexWriter;
+import org.apache.lucene.search.TopDocs;
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.MultiSearcher;
+import org.apache.lucene.search.TermRangeQuery;
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.store.RAMDirectory;
+import junit.framework.TestCase;
+
+// From chapter 5
+public class MultiSearcherTest extends TestCase {
+  private IndexSearcher[] searchers;
+
+  public void setUp() throws Exception {
+    String[] animals = { "aardvark", "beaver", "coati",
+                       "dog", "elephant", "frog", "gila monster",
+                       "horse", "iguana", "javelina", "kangaroo",
+                       "lemur", "moose", "nematode", "orca",
+                       "python", "quokka", "rat", "scorpion",
+                       "tarantula", "uromastyx", "vicuna",
+                       "walrus", "xiphias", "yak", "zebra"};
+
+    Analyzer analyzer = new WhitespaceAnalyzer();
+
+    Directory aTOmDirectory = new RAMDirectory();     // #1
+    Directory nTOzDirectory = new RAMDirectory();     // #1
+
+    IndexWriter aTOmWriter = new IndexWriter(aTOmDirectory,
+                                             analyzer,
+                                             IndexWriter.MaxFieldLength.UNLIMITED);
+    IndexWriter nTOzWriter = new IndexWriter(nTOzDirectory,
+                                             analyzer,
+                                             IndexWriter.MaxFieldLength.UNLIMITED);
+    
+
+    for (int i=animals.length - 1; i >= 0; i--) {
+      Document doc = new Document();
+      String animal = animals[i];
+      doc.add(new Field("animal", animal, Field.Store.YES, Field.Index.NOT_ANALYZED));
+      if (animal.charAt(0) < 'n') {
+        aTOmWriter.addDocument(doc);                 // #2
+      } else {                                       
+        nTOzWriter.addDocument(doc);                 // #2
+      }
+    }
+
+    aTOmWriter.close();
+    nTOzWriter.close();
+
+    searchers = new IndexSearcher[2];
+    searchers[0] = new IndexSearcher(aTOmDirectory);
+    searchers[1] = new IndexSearcher(nTOzDirectory);
+  }
+
+  public void testMulti() throws Exception {
+
+    MultiSearcher searcher = new MultiSearcher(searchers);
+
+    TermRangeQuery query = new TermRangeQuery("animal",   // #3
+                                              "h",        // #3
+                                              "t",        // #3
+                                              true, true);// #3
+
+    TopDocs hits = searcher.search(query, 10);
+    assertEquals("tarantula not included", 12, hits.totalHits);
+  }
+
+  /*
+    #1 Create two directories
+    #2 Index halves of the alphabet
+    #3 Search both indexes
+  */
+}

Property changes on: lucene/src/liatests/advsearching/MultiSearcherTest.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/advsearching/BooksLikeThis.java
===================================================================
--- lucene/src/liatests/advsearching/BooksLikeThis.java	(revision 0)
+++ lucene/src/liatests/advsearching/BooksLikeThis.java	(revision 0)
@@ -0,0 +1,119 @@
+package lia.advsearching;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.document.Document;
+import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.Term;
+import org.apache.lucene.index.TermFreqVector;
+import org.apache.lucene.search.BooleanQuery;
+import org.apache.lucene.search.TopDocs;
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.TermQuery;
+import org.apache.lucene.search.BooleanClause;
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.store.FSDirectory;
+import lia.common.TestUtil;
+import java.io.IOException;
+import java.io.File;
+
+// From chapter 5
+public class BooksLikeThis {
+
+  public static void main(String[] args) throws IOException {
+    Directory dir = TestUtil.getBookIndexDirectory();
+
+    IndexReader reader = IndexReader.open(dir);
+    int numDocs = reader.maxDoc();
+
+    BooksLikeThis blt = new BooksLikeThis(reader);
+    for (int i = 0; i < numDocs; i++) {                    // #1
+      System.out.println();
+      Document doc = reader.document(i);
+      System.out.println(doc.get("title"));
+
+      Document[] docs = blt.docsLike(i, 10);               // #2
+      if (docs.length == 0) {
+        System.out.println("  None like this");
+      }
+      for (Document likeThisDoc : docs) {
+        System.out.println("  -> " + likeThisDoc.get("title"));
+      }
+    }
+    reader.close();
+    dir.close();
+  }
+
+  private IndexReader reader;
+  private IndexSearcher searcher;
+
+  public BooksLikeThis(IndexReader reader) {
+    this.reader = reader;
+    searcher = new IndexSearcher(reader);
+  }
+
+  public Document[] docsLike(int id, int max) throws IOException {
+    Document doc = reader.document(id);
+
+    String[] authors = doc.getValues("author");
+    BooleanQuery authorQuery = new BooleanQuery();                 // #3
+    for (String author : authors) {                     // #3
+      authorQuery.add(new TermQuery(new Term("author", author)),   // #3
+          BooleanClause.Occur.SHOULD);                             // #3
+    }
+    authorQuery.setBoost(2.0f);
+
+    TermFreqVector vector =                                        // #4
+        reader.getTermFreqVector(id, "subject");                   // #4
+
+    BooleanQuery subjectQuery = new BooleanQuery();                // #4
+    for (String vecTerm : vector.getTerms()) {                      // #4
+      TermQuery tq = new TermQuery(                                // #4
+          new Term("subject", vecTerm));              // #4
+      subjectQuery.add(tq, BooleanClause.Occur.SHOULD);            // #4
+    }
+
+    BooleanQuery likeThisQuery = new BooleanQuery();               // #5
+    likeThisQuery.add(authorQuery, BooleanClause.Occur.SHOULD);    // #5
+    likeThisQuery.add(subjectQuery, BooleanClause.Occur.SHOULD);   // #5
+
+    likeThisQuery.add(new TermQuery(                                       // #6
+        new Term("isbn", doc.get("isbn"))), BooleanClause.Occur.MUST_NOT); // #6
+
+    // System.out.println("  Query: " +
+    //    likeThisQuery.toString("contents"));
+    TopDocs hits = searcher.search(likeThisQuery, 10);
+    int size = max;
+    if (max > hits.scoreDocs.length) size = hits.scoreDocs.length;
+
+    Document[] docs = new Document[size];
+    for (int i = 0; i < size; i++) {
+      docs[i] = reader.document(hits.scoreDocs[i].doc);
+    }
+
+    return docs;
+  }
+}
+/*
+#1 Iterate over every book
+#2 Look up books like this
+#3 Boosts books by same author
+#4 Use terms from "subject" term vectors 
+#5 Create final query
+#6 Exclude current book
+*/

Property changes on: lucene/src/liatests/advsearching/BooksLikeThis.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lucene/src/liatests/advsearching/FunctionQueryTest.java
===================================================================
--- lucene/src/liatests/advsearching/FunctionQueryTest.java	(revision 0)
+++ lucene/src/liatests/advsearching/FunctionQueryTest.java	(revision 0)
@@ -0,0 +1,222 @@
+package lia.advsearching;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import junit.framework.TestCase;
+import java.util.Date;
+import java.io.IOException;
+
+import lia.common.TestUtil;
+
+import org.apache.lucene.store.RAMDirectory;
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.search.TopDocs;
+import org.apache.lucene.document.Document;
+import org.apache.lucene.document.Field;
+import org.apache.lucene.document.DateTools;
+import org.apache.lucene.analysis.standard.StandardAnalyzer;
+import org.apache.lucene.index.IndexWriter;
+import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.search.Query;
+import org.apache.lucene.search.Sort;
+import org.apache.lucene.search.SortField;
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.queryParser.QueryParser;
+import org.apache.lucene.search.function.FieldScoreQuery;
+import org.apache.lucene.search.function.CustomScoreQuery;
+import org.apache.lucene.search.function.CustomScoreProvider;
+import org.apache.lucene.search.FieldCache;
+import org.apache.lucene.util.Version;
+
+// From chapter 5
+public class FunctionQueryTest extends TestCase {
+
+  IndexSearcher s;
+  IndexWriter w;
+
+  private void addDoc(int score, String content) throws Exception {
+    Document doc = new Document();
+    doc.add(new Field("score",
+                      Integer.toString(score),
+                      Field.Store.NO,
+                      Field.Index.NOT_ANALYZED_NO_NORMS));
+    doc.add(new Field("content",
+                      content,
+                      Field.Store.NO,
+                      Field.Index.ANALYZED));
+    w.addDocument(doc);
+  }
+
+  public void setUp() throws Exception {
+    Directory dir = new RAMDirectory();
+    w = new IndexWriter(dir,
+                        new StandardAnalyzer(
+                                 Version.LUCENE_30),
+                        IndexWriter.MaxFieldLength.UNLIMITED);
+    addDoc(7, "this hat is green");
+    addDoc(42, "this hat is blue");
+    w.close();
+
+    s = new IndexSearcher(dir, true);
+  }
+
+  public void tearDown() throws Exception {
+    super.tearDown();
+    s.close();
+  }
+
+  public void testFieldScoreQuery() throws Throwable {
+    Query q = new FieldScoreQuery("score", FieldScoreQuery.Type.BYTE);
+    TopDocs hits = s.search(q, 10);
+    assertEquals(2, hits.scoreDocs.length);       // #1
+    assertEquals(1, hits.scoreDocs[0].doc);       // #2
+    assertEquals(42, (int) hits.scoreDocs[0].score);
+    assertEquals(0, hits.scoreDocs[1].doc);
+    assertEquals(7, (int) hits.scoreDocs[1].score);
+  }
+
+  /*
+    #1 All documents match
+    #2 Doc 1 is first because its static score (42) is
+       higher than doc 0's (7)
+  */
+
+  public void testCustomScoreQuery() throws Throwable {
+    Query q = new QueryParser(Version.LUCENE_30,
+                              "content",
+                              new StandardAnalyzer(
+                                Version.LUCENE_30))
+                 .parse("the green hat");
+    FieldScoreQuery qf = new FieldScoreQuery("score",
+                                             FieldScoreQuery.Type.BYTE);
+    CustomScoreQuery customQ = new CustomScoreQuery(q, qf) {
+      public CustomScoreProvider getCustomScoreProvider(IndexReader r) {
+        return new CustomScoreProvider(r) {
+          public float customScore(int doc,
+                                   float subQueryScore,
+                                   float valSrcScore) {
+            return (float) (Math.sqrt(subQueryScore) * valSrcScore);
+          }
+        };
+      }
+    };
+
+    TopDocs hits = s.search(customQ, 10);
+    assertEquals(2, hits.scoreDocs.length);
+    
+    assertEquals(1, hits.scoreDocs[0].doc);           // #1
+    assertEquals(0, hits.scoreDocs[1].doc);
+  }
+
+  /*
+    #1 Even though document 0 is a better match to the
+       original query, document 1 gets a better score after
+       multiplying in its score field
+   */
+
+  static class RecencyBoostingQuery extends CustomScoreQuery {
+
+    double multiplier;
+    int today;
+    int maxDaysAgo;
+    String dayField;
+    static int MSEC_PER_DAY = 1000*3600*24;
+
+    public RecencyBoostingQuery(Query q, double multiplier,
+                                int maxDaysAgo, String dayField) {
+      super(q);
+      today = (int) (new Date().getTime()/MSEC_PER_DAY);
+      this.multiplier = multiplier;
+      this.maxDaysAgo = maxDaysAgo;
+      this.dayField = dayField;
+    }
+
+    private class RecencyBooster extends CustomScoreProvider {
+      final int[] publishDay;
+
+      public RecencyBooster(IndexReader r) throws IOException {
+        super(r);
+        publishDay = FieldCache.DEFAULT                       // #A
+             .getInts(r, dayField);                           // #A
+      }
+
+      public float customScore(int doc, float subQueryScore,
+                               float valSrcScore) {
+        int daysAgo = today - publishDay[doc];                // #B
+        if (daysAgo < maxDaysAgo) {                           // #C            
+          float boost = (float) (multiplier *                 // #D
+                                 (maxDaysAgo-daysAgo)         // #D
+                                 / maxDaysAgo);               // #D
+          return (float) (subQueryScore * (1.0+boost));
+        } else {
+          return subQueryScore;                               // #E
+        }
+      }
+    }
+
+    public CustomScoreProvider getCustomScoreProvider(IndexReader r) throws IOException {
+      return new RecencyBooster(r);
+    }
+  }
+
+  /*
+    #A Retrieve days from field cache
+    #B Compute elapsed days
+    #C Skip old books
+    #D Compute simple linear boost
+    #E Return un-boosted score
+  */
+
+  public void testRecency() throws Throwable {
+    Directory dir = TestUtil.getBookIndexDirectory();
+    IndexReader r = IndexReader.open(dir);
+    IndexSearcher s = new IndexSearcher(r);
+    s.setDefaultFieldSortScoring(true, true);
+
+    QueryParser parser = new QueryParser(
+                            Version.LUCENE_30,
+                            "contents",
+                            new StandardAnalyzer(
+                              Version.LUCENE_30));
+    Query q = parser.parse("java in action");       // #A
+    Query q2 = new RecencyBoostingQuery(q,          // #B
+                                        2.0, 2*365,
+                                        "pubmonthAsDay");
+    Sort sort = new Sort(new SortField[] {
+        SortField.FIELD_SCORE,
+        new SortField("title2", SortField.STRING)});
+    TopDocs hits = s.search(q2, null, 5, sort);
+
+    for (int i = 0; i < hits.scoreDocs.length; i++) {
+      Document doc = r.document(hits.scoreDocs[i].doc);
+      System.out.println((1+i) + ": " +
+                         doc.get("title") +
+                         ": pubmonth=" +
+                         doc.get("pubmonth") +
+                         " score=" + hits.scoreDocs[i].score);
+    }
+    s.close();
+    r.close();
+    dir.close();
+  }
+
+  /*
+    #A Parse query
+    #B Create recency boosting query
+  */
+}

Property changes on: lucene/src/liatests/advsearching/FunctionQueryTest.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lucene/src/liatests/advsearching/SecurityFilterTest.java
===================================================================
--- lucene/src/liatests/advsearching/SecurityFilterTest.java	(revision 0)
+++ lucene/src/liatests/advsearching/SecurityFilterTest.java	(revision 0)
@@ -0,0 +1,101 @@
+package lia.advsearching;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import junit.framework.TestCase;
+import lia.common.TestUtil;
+
+import org.apache.lucene.analysis.WhitespaceAnalyzer;
+import org.apache.lucene.document.Document;
+import org.apache.lucene.document.Field;
+import org.apache.lucene.index.IndexWriter;
+import org.apache.lucene.index.Term;
+import org.apache.lucene.search.TopDocs;
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.QueryWrapperFilter;
+import org.apache.lucene.search.Filter;
+import org.apache.lucene.search.TermQuery;
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.store.RAMDirectory;
+
+// From chapter 5
+public class SecurityFilterTest extends TestCase {
+
+  private IndexSearcher searcher;
+
+  protected void setUp() throws Exception {
+    Directory directory = new RAMDirectory();
+    IndexWriter writer = new IndexWriter(directory,
+                                         new WhitespaceAnalyzer(),
+                                         IndexWriter.MaxFieldLength.UNLIMITED);
+
+    Document document = new Document();                  // 1
+    document.add(new Field("owner",                      // 1
+                           "elwood",                     // 1
+                           Field.Store.YES,              // 1
+                           Field.Index.NOT_ANALYZED));   // 1
+    document.add(new Field("keywords",                   // 1
+                           "elwood's sensitive info",    // 1
+                           Field.Store.YES,              // 1
+                           Field.Index.ANALYZED));       // 1
+    writer.addDocument(document);
+
+    document = new Document();                           // 2
+    document.add(new Field("owner",                      // 2
+                           "jake",                       // 2
+                           Field.Store.YES,              // 2
+                           Field.Index.NOT_ANALYZED));   // 2
+    document.add(new Field("keywords",                   // 2
+                           "jake's sensitive info",      // 2
+                           Field.Store.YES,              // 2
+                           Field.Index.ANALYZED));       // 2
+    writer.addDocument(document);
+
+    writer.close();
+    searcher = new IndexSearcher(directory);
+  }
+  /*
+#1 Elwood
+#2 Jake
+  */
+
+  public void testSecurityFilter() throws Exception {
+    TermQuery query = new TermQuery(                   //#1
+                        new Term("keywords", "info")); //#1
+
+    assertEquals("Both documents match",               //#2
+                 2,                                    //#2
+                 TestUtil.hitCount(searcher, query));  //#2
+
+    Filter jakeFilter = new QueryWrapperFilter(        //#3
+      new TermQuery(new Term("owner", "jake")));       //#3
+
+    TopDocs hits = searcher.search(query, jakeFilter, 10);
+    assertEquals(1, hits.totalHits);                   //#4
+    assertEquals("elwood is safe",                     //#4
+                 "jake's sensitive info",              //#4
+        searcher.doc(hits.scoreDocs[0].doc)            //#4
+                 .get("keywords"));                    //#4
+  }
+  /*
+    #1 TermQuery for "info"
+    #2 Returns documents containing "info"
+    #3 Filter
+    #4 Same TermQuery, constrained results
+  */
+}

Property changes on: lucene/src/liatests/advsearching/SecurityFilterTest.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: lucene/src/liatests/advsearching/CategorizerTest.java
===================================================================
--- lucene/src/liatests/advsearching/CategorizerTest.java	(revision 0)
+++ lucene/src/liatests/advsearching/CategorizerTest.java	(revision 0)
@@ -0,0 +1,166 @@
+package lia.advsearching;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import junit.framework.TestCase;
+import lia.common.TestUtil;
+
+import org.apache.lucene.document.Document;
+import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.TermFreqVector;
+
+import java.io.IOException;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.TreeMap;
+
+// From chapter 5
+public class CategorizerTest extends TestCase {
+  Map categoryMap;
+
+  protected void setUp() throws Exception {
+    categoryMap = new TreeMap();
+
+    buildCategoryVectors();
+//    dumpCategoryVectors();
+  }
+
+  public void testCategorization() throws Exception {
+    assertEquals("/technology/computers/programming/methodology",
+        getCategory("extreme agile methodology"));
+    assertEquals("/education/pedagogy",
+        getCategory("montessori education philosophy"));
+  }
+
+  private void dumpCategoryVectors() {
+    Iterator categoryIterator = categoryMap.keySet().iterator();
+    while (categoryIterator.hasNext()) {
+      String category = (String) categoryIterator.next();
+      System.out.println("Category " + category);
+
+      Map vectorMap = (Map) categoryMap.get(category);
+      Iterator vectorIterator = vectorMap.keySet().iterator();
+      while (vectorIterator.hasNext()) {
+        String term = (String) vectorIterator.next();
+        System.out.println("    " + term + " = " + vectorMap.get(term));
+      }
+    }
+  }
+
+  private void buildCategoryVectors() throws IOException {
+    IndexReader reader = IndexReader.open(TestUtil.getBookIndexDirectory());
+
+    int maxDoc = reader.maxDoc();
+
+    for (int i = 0; i < maxDoc; i++) {
+      if (!reader.isDeleted(i)) {
+        Document doc = reader.document(i);
+        String category = doc.get("category");
+
+        Map vectorMap = (Map) categoryMap.get(category);
+        if (vectorMap == null) {
+          vectorMap = new TreeMap();
+          categoryMap.put(category, vectorMap);
+        }
+
+        TermFreqVector termFreqVector =
+            reader.getTermFreqVector(i, "subject");
+
+        addTermFreqToMap(vectorMap, termFreqVector);
+      }
+    }
+  }
+
+  private void addTermFreqToMap(Map vectorMap,
+                                TermFreqVector termFreqVector) {
+    String[] terms = termFreqVector.getTerms();
+    int[] freqs = termFreqVector.getTermFrequencies();
+
+    for (int i = 0; i < terms.length; i++) {
+      String term = terms[i];
+
+      if (vectorMap.containsKey(term)) {
+        Integer value = (Integer) vectorMap.get(term);
+        vectorMap.put(term,
+            new Integer(value.intValue() + freqs[i]));
+      } else {
+        vectorMap.put(term, new Integer(freqs[i]));
+      }
+    }
+  }
+
+
+  private String getCategory(String subject) {
+    String[] words = subject.split(" ");
+
+    Iterator categoryIterator = categoryMap.keySet().iterator();
+    double bestAngle = Double.MAX_VALUE;
+    String bestCategory = null;
+
+    while (categoryIterator.hasNext()) {
+      String category = (String) categoryIterator.next();
+//      System.out.println(category);
+
+      double angle = computeAngle(words, category);
+//      System.out.println(" -> angle = " + angle + " (" + Math.toDegrees(angle) + ")");
+      if (angle < bestAngle) {
+        bestAngle = angle;
+        bestCategory = category;
+      }
+    }
+
+    return bestCategory;
+  }
+
+  private double computeAngle(String[] words, String category) {
+    Map vectorMap = (Map) categoryMap.get(category);
+
+    int dotProduct = 0;
+    int sumOfSquares = 0;
+    for (String word : words) {
+      int categoryWordFreq = 0;
+
+      if (vectorMap.containsKey(word)) {
+        categoryWordFreq =
+            ((Integer) vectorMap.get(word)).intValue();
+      }
+
+      dotProduct += categoryWordFreq;  //#1
+      sumOfSquares += categoryWordFreq * categoryWordFreq;
+    }
+
+
+    double denominator;
+    if (sumOfSquares == words.length) {
+      denominator = sumOfSquares; // #2
+    } else {
+      denominator = Math.sqrt(sumOfSquares) *
+                    Math.sqrt(words.length);
+    }
+
+    double ratio = dotProduct / denominator;
+
+    return Math.acos(ratio);
+  }
+  /*
+    #1 Assume each word has frequency 1
+    #2 Shortcut to prevent precision issue
+  */
+}
+
+

Property changes on: lucene/src/liatests/advsearching/CategorizerTest.java
___________________________________________________________________
Added: svn:eol-style
   + native

