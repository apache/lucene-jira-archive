diff --git a/lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil.java b/lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil.java
index 72b6bf5..95a49fe 100644
--- a/lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil.java
+++ b/lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil.java
@@ -100,6 +100,56 @@ import com.carrotsearch.randomizedtesting.generators.RandomPicks;
 
 public class TestJoinUtil extends LuceneTestCase {
 
+  public void testEquals() throws Exception {
+    final int numDocs = atLeast(random(), 50);
+    try (final Directory dir = newDirectory()) {
+      try (final RandomIndexWriter w = new RandomIndexWriter(random(), dir,
+                                                             newIndexWriterConfig(new MockAnalyzer(random()))
+                                                             .setMergePolicy(newLogMergePolicy()))) {
+        for (int id = 0; id < numDocs; id++) {
+          Document doc = new Document();
+          doc.add(new TextField("id", "" + id, Field.Store.NO));
+          doc.add(new TextField("name", "name" + (id % 7), Field.Store.NO));
+          for (int fieldNum = 0; fieldNum < 7; fieldNum++) {
+            doc.add(new SortedDocValuesField("dvField" + fieldNum, new BytesRef("" + random().nextInt(13))));
+          }
+          // nocommit: need some multivalued dv fields as well to test those code paths
+          w.addDocument(doc);
+        }
+
+        try (IndexReader r = w.getReader()) {
+          IndexSearcher indexSearcher = new IndexSearcher(r);
+          
+          final Query x = JoinUtil.createJoinQuery("dvField0", false, "dvField0",
+                                                   new TermQuery(new Term("name", "name5")),
+                                                   indexSearcher, ScoreMode.None);
+          assertEquals("identical calls to createJoinQuery",
+                       x, JoinUtil.createJoinQuery("dvField0", false, "dvField0",
+                                                   new TermQuery(new Term("name", "name5")),
+                                                   indexSearcher, ScoreMode.None));
+
+          assertFalse("from fields (dvField4 != dvField0) but queries equals",
+                      x.equals(JoinUtil.createJoinQuery("dvField4", false, "dvField0",
+                                                        new TermQuery(new Term("name", "name5")),
+                                                        indexSearcher, ScoreMode.None)));
+        
+          // nocommit: test other createJoinQuery param variations...
+          // - score mode
+          // - multi values per field
+          // - matching fields & query, but diff searcher arg for evaluating fromQuery
+          //   - what if searcher is diff, but *results* are same (ie: index changes don't affect fromQuey)?
+          //     ... should those two join queries be considered equals?
+          // - other create *methods*
+          //   - numeric joins
+          //   - joins w/toQuery
+          //   - global ordinals map
+          
+        }
+      }
+    }
+  }
+
+  
   public void testSimple() throws Exception {
     final String idField = "id";
     final String toField = "productId";
diff --git a/solr/core/src/test/org/apache/solr/search/join/TestScoreJoinQPNoScore.java b/solr/core/src/test/org/apache/solr/search/join/TestScoreJoinQPNoScore.java
index 0d9801e..38c111a 100644
--- a/solr/core/src/test/org/apache/solr/search/join/TestScoreJoinQPNoScore.java
+++ b/solr/core/src/test/org/apache/solr/search/join/TestScoreJoinQPNoScore.java
@@ -158,6 +158,15 @@ public class TestScoreJoinQPNoScore extends SolrTestCaseJ4 {
 
   }
 
+  public void testNotEquals() throws SyntaxError, IOException{
+    try (SolrQueryRequest req = req("*:*")) {
+      Query x = QParser.getParser("{!join from=dept_id_s to=dept_ss score=none}text_t:develop", req).getQuery();
+      Query y = QParser.getParser("{!join from=dept_ss to=dept_ss score=none}text_t:develop", req).getQuery();
+      assertFalse("diff from fields produce equal queries",
+                  x.equals(y));
+    }
+  }
+    
   public void testJoinQueryType() throws SyntaxError, IOException{
     SolrQueryRequest req = null;
     try{
