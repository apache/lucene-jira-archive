Index: lucene/core/src/test/org/apache/lucene/search/TestBlendedTermQuery.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestBlendedTermQuery.java	(revision c73d2c15ba7c5936715408807184c99ab7cfdfd4)
+++ lucene/core/src/test/org/apache/lucene/search/TestBlendedTermQuery.java	(date 1583842292221)
@@ -17,17 +17,20 @@
 package org.apache.lucene.search;
 
 
-import java.io.IOException;
-
+import org.apache.lucene.analysis.standard.StandardAnalyzer;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field.Store;
 import org.apache.lucene.document.StringField;
+import org.apache.lucene.document.TextField;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.RandomIndexWriter;
 import org.apache.lucene.index.Term;
+import org.apache.lucene.search.similarities.BM25Similarity;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.LuceneTestCase;
 
+import java.io.IOException;
+
 public class TestBlendedTermQuery extends LuceneTestCase {
 
   public void testEquals() {
@@ -119,4 +122,45 @@
     dir.close();
   }
 
+  public void testBlendedScoresRewrite() throws IOException {
+    Directory dir = newDirectory();
+    RandomIndexWriter w = new RandomIndexWriter(random(), dir, new StandardAnalyzer());
+
+    String[] values = {"a", "b"};
+    int[] freq      = { 2,   3 };
+
+    for (int i=0; i<values.length; i++) {
+      for (int j=0; j<freq[i]; j++) {
+        Document doc = new Document();
+        doc.add(new TextField("f", values[i], Store.NO));
+        w.addDocument(doc);
+      }
+    }
+
+    IndexReader reader = w.getReader();
+    IndexSearcher searcher = newSearcher(reader);
+    // for some reason the test searcher doesn't use BM25
+    searcher.setSimilarity(new BM25Similarity());
+    BlendedTermQuery query1 = new BlendedTermQuery.Builder()
+            .setRewriteMethod(BlendedTermQuery.BOOLEAN_REWRITE)
+            .add(new Term("f", "a"), 0.75f)
+            .build();
+
+    BlendedTermQuery query2 = new BlendedTermQuery.Builder()
+            .setRewriteMethod(BlendedTermQuery.BOOLEAN_REWRITE)
+            .add(new Term("f", "a"))
+            .add(new Term("f", "b"), 0.75f)
+            .build();
+
+    Query query = new BooleanQuery.Builder()
+            .add(query2, BooleanClause.Occur.SHOULD)
+            .add(query1, BooleanClause.Occur.SHOULD).build();
+
+    TopDocs topDocs = searcher.search(query, 1);
+    assertEquals(0.4287472, topDocs.scoreDocs[0].score, 0.0001);
+
+    reader.close();
+    w.close();
+    dir.close();
+  }
 }
