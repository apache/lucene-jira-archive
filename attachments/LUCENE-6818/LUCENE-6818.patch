Index: lucene/core/src/java/org/apache/lucene/search/similarities/DFISimilarity.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/similarities/DFISimilarity.java	(revision 0)
+++ lucene/core/src/java/org/apache/lucene/search/similarities/DFISimilarity.java	(working copy)
@@ -0,0 +1,65 @@
+package org.apache.lucene.search.similarities;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/**
+ * Implements the <em>Divergence from Independence (DFI)</em> model based on Chi-square statistics
+ * (i.e., standardized Chi-squared distance from independence in term frequency tf).
+ * <p>
+ * DFI is both parameter-free and non-parametric:
+ * <ul>
+ * <li>parameter-free: it does not require any parameter tuning or training.</li>
+ * <li>non-parametric: it does not make any assumptions about word frequency distributions on document collections.</li>
+ * </ul>
+ * <p>
+ * It is highly recommended <b>not</b> to remove stopwords (very common terms: the, of, and, to, a, in, for, is, on, that, etc) with this similarity.
+ * <p>
+ * For more information see: <a href="http://dx.doi.org/10.1007/s10791-013-9225-4">A nonparametric term weighting method for information retrieval based on measuring the divergence from independence</a>
+ *
+ * @lucene.experimental
+ * @see org.apache.lucene.search.similarities.DFRSimilarity
+ */
+
+
+public class DFISimilarity extends SimilarityBase {
+
+  /**
+   * Sole constructor: DFI is parameter-free.
+   */
+  public DFISimilarity() {
+  }
+
+  @Override
+  protected float score(BasicStats stats, float freq, float docLen) {
+
+    final float expected = (stats.getTotalTermFreq() + 1) * docLen / (stats.getNumberOfFieldTokens() + 1);
+
+    // if the observed frequency is less than or equal to the expected value, then return zero.
+    if (freq <= expected) return 0;
+
+    final float chiSquare = (freq - expected) * (freq - expected) / expected;
+
+    return stats.getBoost() * (float) log2(chiSquare + 1);
+  }
+
+  @Override
+  public String toString() {
+    return "DFI";
+  }
+}
+

Property changes on: lucene/core/src/java/org/apache/lucene/search/similarities/DFISimilarity.java
___________________________________________________________________
Added: svn:eol-style
## -0,0 +1 ##
+native
\ No newline at end of property
Index: lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarity2.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarity2.java	(revision 1713433)
+++ lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarity2.java	(working copy)
@@ -72,6 +72,7 @@
     sims.add(new LMDirichletSimilarity());
     sims.add(new LMJelinekMercerSimilarity(0.1f));
     sims.add(new LMJelinekMercerSimilarity(0.7f));
+    sims.add(new DFISimilarity());
   }
   
   /** because of stupid things like querynorm, it's possible we computeStats on a field that doesnt exist at all
@@ -286,8 +287,9 @@
       TopDocs td = is.search(query, 10);
       assertEquals(1, td.totalHits);
       float score = td.scoreDocs[0].score;
-      assertTrue(score >= 0.0f);
+      assertFalse("negative score for " + sim, score < 0.0f);
       assertFalse("inf score for " + sim, Float.isInfinite(score));
+      assertFalse("nan score for " + sim, Float.isNaN(score));
     }
     ir.close();
     dir.close();
Index: lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarityBase.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarityBase.java	(revision 1713433)
+++ lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarityBase.java	(working copy)
@@ -140,6 +140,7 @@
     sims.add(new LMDirichletSimilarity());
     sims.add(new LMJelinekMercerSimilarity(0.1f));
     sims.add(new LMJelinekMercerSimilarity(0.7f));
+    sims.add(new DFISimilarity());
   }
   
   // ------------------------------- Unit tests --------------------------------
@@ -592,4 +593,29 @@
     actual.setDiscountOverlaps(true);
     assertEquals(expected.computeNorm(state), actual.computeNorm(state));
   }
+
+  /**
+   * make sure the similarity does not go crazy when tested against all 255 possible norm values.
+   */
+  public void testCrazyIndexTimeBoosts() throws Exception {
+
+    SimilarityBase sim = new DFISimilarity();
+
+    BasicStats stats = new BasicStats("body");
+
+    stats.setAvgFieldLength(750);
+    stats.setDocFreq(2000);
+    stats.setNumberOfDocuments(500000);
+    stats.setNumberOfFieldTokens(500000 * 750);
+    stats.setTotalTermFreq(2000 * 750);
+
+    for (float tf = 1.0f; tf <= 10.0f; tf += 1.0f)
+      for (int i = 0; i < 256; i++) {
+        float docLenAtSearchTime = sim.decodeNormValue((byte) i);
+        float score = sim.score(stats, tf, docLenAtSearchTime);
+        assertFalse("negative score for " + sim, score < 0.0f);
+        assertFalse("inf score for " + sim, Float.isInfinite(score));
+        assertFalse("nan score for " + sim, Float.isNaN(score));
+      }
+  }
 }
Index: lucene/test-framework/src/java/org/apache/lucene/search/RandomSimilarityProvider.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/search/RandomSimilarityProvider.java	(revision 1713433)
+++ lucene/test-framework/src/java/org/apache/lucene/search/RandomSimilarityProvider.java	(working copy)
@@ -24,36 +24,7 @@
 import java.util.Map;
 import java.util.Random;
 
-import org.apache.lucene.search.similarities.AfterEffect;
-import org.apache.lucene.search.similarities.AfterEffectB;
-import org.apache.lucene.search.similarities.AfterEffectL;
-import org.apache.lucene.search.similarities.BM25Similarity;
-import org.apache.lucene.search.similarities.BasicModel;
-import org.apache.lucene.search.similarities.BasicModelBE;
-import org.apache.lucene.search.similarities.BasicModelD;
-import org.apache.lucene.search.similarities.BasicModelG;
-import org.apache.lucene.search.similarities.BasicModelIF;
-import org.apache.lucene.search.similarities.BasicModelIn;
-import org.apache.lucene.search.similarities.BasicModelIne;
-import org.apache.lucene.search.similarities.BasicModelP;
-import org.apache.lucene.search.similarities.DFRSimilarity;
-import org.apache.lucene.search.similarities.ClassicSimilarity;
-import org.apache.lucene.search.similarities.Distribution;
-import org.apache.lucene.search.similarities.DistributionLL;
-import org.apache.lucene.search.similarities.DistributionSPL;
-import org.apache.lucene.search.similarities.IBSimilarity;
-import org.apache.lucene.search.similarities.LMDirichletSimilarity;
-import org.apache.lucene.search.similarities.LMJelinekMercerSimilarity;
-import org.apache.lucene.search.similarities.Lambda;
-import org.apache.lucene.search.similarities.LambdaDF;
-import org.apache.lucene.search.similarities.LambdaTTF;
-import org.apache.lucene.search.similarities.Normalization;
-import org.apache.lucene.search.similarities.NormalizationH1;
-import org.apache.lucene.search.similarities.NormalizationH2;
-import org.apache.lucene.search.similarities.NormalizationH3;
-import org.apache.lucene.search.similarities.NormalizationZ;
-import org.apache.lucene.search.similarities.PerFieldSimilarityWrapper;
-import org.apache.lucene.search.similarities.Similarity;
+import org.apache.lucene.search.similarities.*;
 
 /**
  * Similarity implementation that randomizes Similarity implementations
@@ -159,6 +130,7 @@
     allSims.add(new LMDirichletSimilarity()); */
     allSims.add(new LMJelinekMercerSimilarity(0.1f));
     allSims.add(new LMJelinekMercerSimilarity(0.7f));
+    allSims.add(new DFISimilarity());
   }
   
   @Override
Index: lucene/test-framework/src/java/org/apache/lucene/util/TestUtil.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/util/TestUtil.java	(revision 1713433)
+++ lucene/test-framework/src/java/org/apache/lucene/util/TestUtil.java	(working copy)
@@ -1211,7 +1211,7 @@
     int evilness = TestUtil.nextInt(random, 0, 20);
 
     StringBuilder sb = new StringBuilder();
-    while (sb.length() < wordLength) {;
+    while (sb.length() < wordLength) {
       if (simple) {
         sb.append(random.nextBoolean() ? TestUtil.randomSimpleString(random, wordLength) : TestUtil.randomHtmlishString(random, wordLength));
       } else {
Index: solr/core/src/java/org/apache/solr/search/similarities/BM25SimilarityFactory.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/similarities/BM25SimilarityFactory.java	(revision 1713433)
+++ solr/core/src/java/org/apache/solr/search/similarities/BM25SimilarityFactory.java	(working copy)
@@ -41,14 +41,14 @@
  * @lucene.experimental
  */
 public class BM25SimilarityFactory extends SimilarityFactory {
-  private boolean discountOverlaps;
+  private boolean discountOverlaps = true;
   private float k1;
   private float b;
 
   @Override
   public void init(SolrParams params) {
     super.init(params);
-    discountOverlaps = params.getBool("discountOverlaps", true);
+    discountOverlaps = params.getBool(ClassicSimilarityFactory.DISCOUNT_OVERLAPS, true);
     k1 = params.getFloat("k1", 1.2f);
     b = params.getFloat("b", 0.75f);
   }
Index: solr/core/src/java/org/apache/solr/search/similarities/DFISimilarityFactory.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/similarities/DFISimilarityFactory.java	(revision 0)
+++ solr/core/src/java/org/apache/solr/search/similarities/DFISimilarityFactory.java	(working copy)
@@ -0,0 +1,52 @@
+package org.apache.solr.search.similarities;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.search.similarities.DFISimilarity;
+import org.apache.lucene.search.similarities.Similarity;
+import org.apache.solr.common.params.SolrParams;
+import org.apache.solr.schema.SimilarityFactory;
+
+/**
+ * Factory for {@link DFISimilarity}
+ * <p>
+ * Optional settings:
+ * <ul>
+ *  <li>discountOverlaps (bool): Sets {@link org.apache.lucene.search.similarities.SimilarityBase#setDiscountOverlaps(boolean)}</li>
+ * </ul>
+ *
+ * @lucene.experimental
+ */
+public class DFISimilarityFactory extends SimilarityFactory {
+
+  private boolean discountOverlaps = true;
+
+  @Override
+  public void init(SolrParams params) {
+    super.init(params);
+    discountOverlaps = params.getBool(ClassicSimilarityFactory.DISCOUNT_OVERLAPS, true);
+  }
+
+  @Override
+  public Similarity getSimilarity() {
+    DFISimilarity sim = new DFISimilarity();
+    sim.setDiscountOverlaps(discountOverlaps);
+    return sim;
+  }
+}
+

Property changes on: solr/core/src/java/org/apache/solr/search/similarities/DFISimilarityFactory.java
___________________________________________________________________
Added: svn:eol-style
## -0,0 +1 ##
+native
\ No newline at end of property
Index: solr/core/src/java/org/apache/solr/search/similarities/DFRSimilarityFactory.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/similarities/DFRSimilarityFactory.java	(revision 1713433)
+++ solr/core/src/java/org/apache/solr/search/similarities/DFRSimilarityFactory.java	(working copy)
@@ -107,7 +107,7 @@
  * @lucene.experimental
  */
 public class DFRSimilarityFactory extends SimilarityFactory {
-  private boolean discountOverlaps;
+  private boolean discountOverlaps = true;
   private BasicModel basicModel;
   private AfterEffect afterEffect;
   private Normalization normalization;
@@ -115,7 +115,7 @@
   @Override
   public void init(SolrParams params) {
     super.init(params);
-    discountOverlaps = params.getBool("discountOverlaps", true);
+    discountOverlaps = params.getBool(ClassicSimilarityFactory.DISCOUNT_OVERLAPS, true);
     basicModel = parseBasicModel(params.get("basicModel"));
     afterEffect = parseAfterEffect(params.get("afterEffect"));
     normalization = parseNormalization(
Index: solr/core/src/java/org/apache/solr/search/similarities/IBSimilarityFactory.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/similarities/IBSimilarityFactory.java	(revision 1713433)
+++ solr/core/src/java/org/apache/solr/search/similarities/IBSimilarityFactory.java	(working copy)
@@ -67,7 +67,7 @@
  */
 
 public class IBSimilarityFactory extends SimilarityFactory {
-  private boolean discountOverlaps;
+  private boolean discountOverlaps = true;
   private Distribution distribution;
   private Lambda lambda;
   private Normalization normalization;
@@ -75,7 +75,7 @@
   @Override
   public void init(SolrParams params) {
     super.init(params);
-    discountOverlaps = params.getBool("discountOverlaps", true);
+    discountOverlaps = params.getBool(ClassicSimilarityFactory.DISCOUNT_OVERLAPS, true);
     distribution = parseDistribution(params.get("distribution"));
     lambda = parseLambda(params.get("lambda"));
     normalization = DFRSimilarityFactory.parseNormalization(
Index: solr/core/src/java/org/apache/solr/search/similarities/LMDirichletSimilarityFactory.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/similarities/LMDirichletSimilarityFactory.java	(revision 1713433)
+++ solr/core/src/java/org/apache/solr/search/similarities/LMDirichletSimilarityFactory.java	(working copy)
@@ -40,13 +40,13 @@
  */
 
 public class LMDirichletSimilarityFactory extends SimilarityFactory {
-  private boolean discountOverlaps;
+  private boolean discountOverlaps = true;
   private Float mu;
 
   @Override
   public void init(SolrParams params) {
     super.init(params);
-    discountOverlaps = params.getBool("discountOverlaps", true);
+    discountOverlaps = params.getBool(ClassicSimilarityFactory.DISCOUNT_OVERLAPS, true);
     mu = params.getFloat("mu");
   }
 
Index: solr/core/src/java/org/apache/solr/search/similarities/LMJelinekMercerSimilarityFactory.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/similarities/LMJelinekMercerSimilarityFactory.java	(revision 1713433)
+++ solr/core/src/java/org/apache/solr/search/similarities/LMJelinekMercerSimilarityFactory.java	(working copy)
@@ -40,13 +40,13 @@
  */
 
 public class LMJelinekMercerSimilarityFactory extends SimilarityFactory {
-  private boolean discountOverlaps;
+  private boolean discountOverlaps = true;
   private float lambda;
 
   @Override
   public void init(SolrParams params) {
     super.init(params);
-    discountOverlaps = params.getBool("discountOverlaps", true);
+    discountOverlaps = params.getBool(ClassicSimilarityFactory.DISCOUNT_OVERLAPS, true);
     lambda = params.getFloat("lambda", 0.7f);
   }
 
Index: solr/core/src/test/org/apache/solr/search/similarities/TestDFISimilarityFactory.java
===================================================================
--- solr/core/src/test/org/apache/solr/search/similarities/TestDFISimilarityFactory.java	(revision 0)
+++ solr/core/src/test/org/apache/solr/search/similarities/TestDFISimilarityFactory.java	(working copy)
@@ -0,0 +1,54 @@
+package org.apache.solr.search.similarities;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.search.similarities.DFISimilarity;
+import org.apache.lucene.search.similarities.Similarity;
+import org.junit.BeforeClass;
+
+/**
+ * Tests {@link DFISimilarityFactory}
+ */
+public class TestDFISimilarityFactory extends BaseSimilarityTestCase {
+
+  @BeforeClass
+  public static void beforeClass() throws Exception {
+    initCore("solrconfig-basic.xml", "schema-dfi.xml");
+  }
+
+  /**
+   * dfi with no parameters
+   */
+  public void test() throws Exception {
+    Similarity sim = getSimilarity("text");
+    assertEquals(DFISimilarity.class, sim.getClass());
+    DFISimilarity dfi = (DFISimilarity) sim;
+    assertTrue(dfi.getDiscountOverlaps());
+  }
+
+  /**
+   * dfi with discountOverlaps parameter set to false
+   */
+  public void testParameters() throws Exception {
+    Similarity sim = getSimilarity("text_params");
+    assertEquals(DFISimilarity.class, sim.getClass());
+    DFISimilarity dfr = (DFISimilarity) sim;
+    assertFalse(dfr.getDiscountOverlaps());
+  }
+}
+

Property changes on: solr/core/src/test/org/apache/solr/search/similarities/TestDFISimilarityFactory.java
___________________________________________________________________
Added: svn:eol-style
## -0,0 +1 ##
+native
\ No newline at end of property
Index: solr/core/src/test-files/solr/collection1/conf/schema-dfi.xml
===================================================================
--- solr/core/src/test-files/solr/collection1/conf/schema-dfi.xml	(revision 0)
+++ solr/core/src/test-files/solr/collection1/conf/schema-dfi.xml	(working copy)
@@ -0,0 +1,53 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<!--
+ Licensed to the Apache Software Foundation (ASF) under one or more
+ contributor license agreements.  See the NOTICE file distributed with
+ this work for additional information regarding copyright ownership.
+ The ASF licenses this file to You under the Apache License, Version 2.0
+ (the "License"); you may not use this file except in compliance with
+ the License.  You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+ Unless required by applicable law or agreed to in writing, software
+ distributed under the License is distributed on an "AS IS" BASIS,
+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ See the License for the specific language governing permissions and
+ limitations under the License.
+-->
+
+<!-- Test schema file for DFISimilarityFactory -->
+
+<schema name="dfi" version="1.5">
+  <types>
+    <fieldType name="int" class="solr.TrieIntField" precisionStep="0" omitNorms="true" positionIncrementGap="0"/>
+
+    <!-- default parameters -->
+    <fieldType name="text" class="solr.TextField">
+      <analyzer class="org.apache.lucene.analysis.standard.StandardAnalyzer"/>
+      <similarity class="solr.DFISimilarityFactory"/>
+    </fieldType>
+
+    <!-- with discountOverlaps parameter -->
+    <fieldType name="text_params" class="solr.TextField">
+      <analyzer class="org.apache.lucene.analysis.standard.StandardAnalyzer"/>
+      <similarity class="solr.DFISimilarityFactory">
+        <bool name="discountOverlaps">false</bool>
+      </similarity>
+    </fieldType>
+
+
+  </types>
+
+  <fields>
+    <field name="id" type="int" indexed="true" stored="true" multiValued="false" required="false"/>
+    <field name="text" type="text" indexed="true" stored="false"/>
+    <field name="text_params" type="text_params" indexed="true" stored="false"/>
+  </fields>
+
+  <defaultSearchField>text</defaultSearchField>
+  <uniqueKey>id</uniqueKey>
+
+  <similarity class="solr.SchemaSimilarityFactory"/>
+</schema>
+

Property changes on: solr/core/src/test-files/solr/collection1/conf/schema-dfi.xml
___________________________________________________________________
Added: svn:eol-style
## -0,0 +1 ##
+native
\ No newline at end of property
