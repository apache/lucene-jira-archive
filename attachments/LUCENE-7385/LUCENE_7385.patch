Index: lucene/core/src/java/org/apache/lucene/search/spans/SpanScorer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/spans/SpanScorer.java	(revision 4123b3bf26156227174ef3c417b36309c2beeb9a)
+++ lucene/core/src/java/org/apache/lucene/search/spans/SpanScorer.java	(revision )
@@ -87,13 +87,13 @@
 
     spans.doStartCurrentDoc();
 
-    assert spans.startPosition() == -1 : "incorrect initial start position, " + this.toString();
-    assert spans.endPosition() == -1 : "incorrect initial end position, " + this.toString();
+    assert spans.startPosition() == -1 : "incorrect initial start position, " + spans;
+    assert spans.endPosition() == -1 : "incorrect initial end position, " + spans;
     int prevStartPos = -1;
     int prevEndPos = -1;
 
     int startPos = spans.nextStartPosition();
-    assert startPos != Spans.NO_MORE_POSITIONS : "initial startPos NO_MORE_POSITIONS, " + this.toString();
+    assert startPos != Spans.NO_MORE_POSITIONS : "initial startPos NO_MORE_POSITIONS, " + spans;
     do {
       assert startPos >= prevStartPos;
       int endPos = spans.endPosition();
@@ -113,8 +113,8 @@
       startPos = spans.nextStartPosition();
     } while (startPos != Spans.NO_MORE_POSITIONS);
 
-    assert spans.startPosition() == Spans.NO_MORE_POSITIONS : "incorrect final start position, " + this.toString();
-    assert spans.endPosition() == Spans.NO_MORE_POSITIONS : "incorrect final end position, " + this.toString();
+    assert spans.startPosition() == Spans.NO_MORE_POSITIONS : "incorrect final start position, " + spans;
+    assert spans.endPosition() == Spans.NO_MORE_POSITIONS : "incorrect final end position, " + spans;
   }
 
   /**
