Index: lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermOutputs.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermOutputs.java	(revision 1595871)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermOutputs.java	(working copy)
@@ -294,8 +294,35 @@
     }
     return new TermData(longs, bytes, docFreq, totalTermFreq);
   }
+  
 
   @Override
+  public void skipOutput(DataInput in) throws IOException {
+    int bits = in.readByte() & 0xff;
+    int bit0 = bits & 1;
+    int bit1 = bits & 2;
+    int bit2 = bits & 4;
+    int bytesSize = (bits >>> 3);
+    if (bit1 > 0 && bytesSize == 0) {  // determine extra length
+      bytesSize = in.readVInt();
+    }
+    if (bit0 > 0) {  // not all-zero case
+      for (int pos = 0; pos < longsSize; pos++) {
+        in.readVLong();
+      }
+    }
+    if (bit1 > 0) {  // bytes exists
+      in.skipBytes(bytesSize);
+    }
+    if (bit2 > 0) {  // stats exist
+      int code = in.readVInt();
+      if (hasPos && (code & 1) == 0) {
+        in.readVLong();
+      }
+    }
+  }
+
+  @Override
   public TermData getNoOutput() {
     return NO_OUTPUT;
   }
Index: lucene/core/src/java/org/apache/lucene/util/fst/ByteSequenceOutputs.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/fst/ByteSequenceOutputs.java	(revision 1595871)
+++ lucene/core/src/java/org/apache/lucene/util/fst/ByteSequenceOutputs.java	(working copy)
@@ -129,6 +129,14 @@
   }
 
   @Override
+  public void skipOutput(DataInput in) throws IOException {
+    final int len = in.readVInt();
+    if (len != 0) {
+      in.skipBytes(len);
+    }
+  }
+
+  @Override
   public BytesRef getNoOutput() {
     return NO_OUTPUT;
   }
Index: lucene/core/src/java/org/apache/lucene/util/fst/BytesStore.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/fst/BytesStore.java	(revision 1595871)
+++ lucene/core/src/java/org/apache/lucene/util/fst/BytesStore.java	(working copy)
@@ -362,7 +362,7 @@
       }
 
       @Override
-      public void skipBytes(int count) {
+      public void skipBytes(long count) {
         setPosition(getPosition() + count);
       }
 
@@ -430,7 +430,7 @@
       }
 
       @Override
-      public void skipBytes(int count) {
+      public void skipBytes(long count) {
         setPosition(getPosition() - count);
       }
 
Index: lucene/core/src/java/org/apache/lucene/util/fst/CharSequenceOutputs.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/fst/CharSequenceOutputs.java	(revision 1595871)
+++ lucene/core/src/java/org/apache/lucene/util/fst/CharSequenceOutputs.java	(working copy)
@@ -132,6 +132,14 @@
       return output;
     }
   }
+  
+  @Override
+  public void skipOutput(DataInput in) throws IOException {
+    final int len = in.readVInt();
+    for(int idx=0;idx<len;idx++) {
+      in.readVInt();
+    }
+  }
 
   @Override
   public CharsRef getNoOutput() {
Index: lucene/core/src/java/org/apache/lucene/util/fst/FST.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/fst/FST.java	(revision 1595871)
+++ lucene/core/src/java/org/apache/lucene/util/fst/FST.java	(working copy)
@@ -893,10 +893,10 @@
           // skip this arc:
           readLabel(in);
           if (arc.flag(BIT_ARC_HAS_OUTPUT)) {
-            outputs.read(in);
+            outputs.skipOutput(in);
           }
           if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {
-            outputs.readFinalOutput(in);
+            outputs.skipFinalOutput(in);
           }
           if (arc.flag(BIT_STOP_NODE)) {
           } else if (arc.flag(BIT_TARGET_NEXT)) {
@@ -1252,11 +1252,11 @@
       readLabel(in);
 
       if (flag(flags, BIT_ARC_HAS_OUTPUT)) {
-        outputs.read(in);
+        outputs.skipOutput(in);
       }
 
       if (flag(flags, BIT_ARC_HAS_FINAL_OUTPUT)) {
-        outputs.readFinalOutput(in);
+        outputs.skipFinalOutput(in);
       }
 
       if (!flag(flags, BIT_STOP_NODE) && !flag(flags, BIT_TARGET_NEXT)) {
@@ -1330,9 +1330,6 @@
     /** Returns true if this reader uses reversed bytes
      *  under-the-hood. */
     public abstract boolean reversed();
-
-    /** Skips bytes. */
-    public abstract void skipBytes(int count);
   }
 
   private static class ArcAndState<T> {
Index: lucene/core/src/java/org/apache/lucene/util/fst/ForwardBytesReader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/fst/ForwardBytesReader.java	(revision 1595871)
+++ lucene/core/src/java/org/apache/lucene/util/fst/ForwardBytesReader.java	(working copy)
@@ -41,7 +41,7 @@
   }
 
   @Override
-  public void skipBytes(int count) {
+  public void skipBytes(long count) {
     pos += count;
   }
 
Index: lucene/core/src/java/org/apache/lucene/util/fst/IntSequenceOutputs.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/fst/IntSequenceOutputs.java	(revision 1595871)
+++ lucene/core/src/java/org/apache/lucene/util/fst/IntSequenceOutputs.java	(working copy)
@@ -131,6 +131,17 @@
       return output;
     }
   }
+  
+  @Override
+  public void skipOutput(DataInput in) throws IOException {
+    final int len = in.readVInt();
+    if (len == 0) {
+      return;
+    }
+    for(int idx=0;idx<len;idx++) {
+      in.readVInt();
+    }
+  }
 
   @Override
   public IntsRef getNoOutput() {
Index: lucene/core/src/java/org/apache/lucene/util/fst/Outputs.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/fst/Outputs.java	(revision 1595871)
+++ lucene/core/src/java/org/apache/lucene/util/fst/Outputs.java	(working copy)
@@ -62,6 +62,10 @@
   /** Decode an output value previously written with {@link
    *  #write(Object, DataOutput)}. */
   public abstract T read(DataInput in) throws IOException;
+  
+  public void skipOutput(DataInput in) throws IOException {
+    read(in);
+  }
 
   /** Decode an output value previously written with {@link
    *  #writeFinalOutput(Object, DataOutput)}.  By default this
@@ -69,6 +73,10 @@
   public T readFinalOutput(DataInput in) throws IOException {
     return read(in);
   }
+  
+  public void skipFinalOutput(DataInput in) throws IOException {
+    skipOutput(in);
+  }
 
   /** NOTE: this output is compared with == so you must
    *  ensure that all methods return the single object if
Index: lucene/core/src/java/org/apache/lucene/util/fst/PairOutputs.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/fst/PairOutputs.java	(revision 1595871)
+++ lucene/core/src/java/org/apache/lucene/util/fst/PairOutputs.java	(working copy)
@@ -148,6 +148,12 @@
     B output2 = outputs2.read(in);
     return newPair(output1, output2);
   }
+  
+  @Override
+  public void skipOutput(DataInput in) throws IOException {
+    outputs1.skipOutput(in);
+    outputs2.skipOutput(in);
+  }
 
   @Override
   public Pair<A,B> getNoOutput() {
Index: lucene/core/src/java/org/apache/lucene/util/fst/ReverseBytesReader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/fst/ReverseBytesReader.java	(revision 1595871)
+++ lucene/core/src/java/org/apache/lucene/util/fst/ReverseBytesReader.java	(working copy)
@@ -39,7 +39,7 @@
   }
 
   @Override
-  public void skipBytes(int count) {
+  public void skipBytes(long count) {
     pos -= count;
   }
 
Index: lucene/misc/src/java/org/apache/lucene/util/fst/ListOfOutputs.java
===================================================================
--- lucene/misc/src/java/org/apache/lucene/util/fst/ListOfOutputs.java	(revision 1595871)
+++ lucene/misc/src/java/org/apache/lucene/util/fst/ListOfOutputs.java	(working copy)
@@ -122,6 +122,11 @@
   public Object read(DataInput in) throws IOException {
     return outputs.read(in);
   }
+  
+  @Override
+  public void skipOutput(DataInput in) throws IOException {
+    outputs.skipOutput(in);
+  }
 
   @Override
   public Object readFinalOutput(DataInput in) throws IOException {
@@ -136,6 +141,14 @@
       return outputList;
     }
   }
+  
+  @Override
+  public void skipFinalOutput(DataInput in) throws IOException {
+    int count = in.readVInt();
+    for(int i=0;i<count;i++) {
+      outputs.skipOutput(in);
+    }
+  }
 
   @Override
   public Object getNoOutput() {
