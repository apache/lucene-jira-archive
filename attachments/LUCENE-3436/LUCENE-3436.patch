Index: modules/suggest/src/java/org/apache/lucene/search/spell/DirectSpellChecker.java
===================================================================
--- modules/suggest/src/java/org/apache/lucene/search/spell/DirectSpellChecker.java	(revision 1170694)
+++ modules/suggest/src/java/org/apache/lucene/search/spell/DirectSpellChecker.java	(working copy)
@@ -290,24 +290,61 @@
   }
 
   /**
-   * Calls {@link #suggestSimilar(Term, int, IndexReader, boolean) 
-   *       suggestSimilar(term, numSug, ir, false)}
+   * Calls {@link #suggestSimilar(Term, int, IndexReader, SuggestMode) 
+   *       suggestSimilar(term, numSug, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX)}
    */
   public SuggestWord[] suggestSimilar(Term term, int numSug, IndexReader ir) 
      throws IOException {
-    return suggestSimilar(term, numSug, ir, false);
+    return suggestSimilar(term, numSug, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);
   }
   
   /**
    * Calls {@link #suggestSimilar(Term, int, IndexReader, boolean, float) 
    *       suggestSimilar(term, numSug, ir, morePopular, this.accuracy)}
+   * 
+   * @deprecated
+   *  use suggestSimilar(Term, int, IndexReader, SuggestMode, float)
+   *  <ul>
+	 *  	<li>SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX instead of morePopular=false</li>
+	 *  	<li>SuggestMode.SuGGEST_MORE_POPULAR instead of morePopular=true</li>
+   *  </ul>
+   *  
    */
+  @Deprecated
   public SuggestWord[] suggestSimilar(Term term, int numSug, IndexReader ir, 
       boolean morePopular) throws IOException {
     return suggestSimilar(term, numSug, ir, morePopular, accuracy);
   }
   
   /**
+   * Calls {@link #suggestSimilar(Term, int, IndexReader, SuggestMode, float) 
+   *       suggestSimilar(term, numSug, ir, SuggestMode, this.accuracy)}
+   * 
+   * @deprecated
+   *  use suggestSimilar(Term, int, IndexReader, SuggestMode, float)
+   *  <ul>
+	 *  	<li>SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX instead of morePopular=false</li>
+	 *  	<li>SuggestMode.SuGGEST_MORE_POPULAR instead of morePopular=true</li>
+   *  </ul>
+   */
+  @Deprecated
+  public SuggestWord[] suggestSimilar(Term term, int numSug, IndexReader ir, 
+      boolean morePopular, float accuracy) throws IOException {
+		return suggestSimilar(term, numSug, ir, (morePopular ? SuggestMode.SUGGEST_MORE_POPULAR : 
+			SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX), accuracy);
+  }
+  
+  /**
+   * Calls {@link #suggestSimilar(Term, int, IndexReader, SuggestMode, float) 
+   *       suggestSimilar(term, numSug, ir, suggestMode, this.accuracy)}
+   * 
+   */
+  public SuggestWord[] suggestSimilar(Term term, int numSug, IndexReader ir, 
+      SuggestMode suggestMode) throws IOException {
+  	return suggestSimilar(term, numSug, ir, suggestMode, this.accuracy);
+  }
+  
+  /**
    * Suggest similar words.
    * 
    * <p>Unlike {@link SpellChecker}, the similarity used to fetch the most
@@ -323,7 +360,7 @@
    * @throws IOException
    */
   public SuggestWord[] suggestSimilar(Term term, int numSug, IndexReader ir, 
-      boolean morePopular, float accuracy) throws IOException {
+      SuggestMode suggestMode, float accuracy) throws IOException {
     final CharsRef spare = new CharsRef();
     String text = term.text();
     if (minQueryLength > 0 && text.codePointCount(0, text.length()) < minQueryLength)
@@ -337,7 +374,7 @@
     
     // see line 341 of spellchecker. this is certainly very very nice for perf,
     // but is it really the right way to go?
-    if (!morePopular && docfreq > 0) {
+    if (suggestMode==SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX && docfreq > 0) {
       return new SuggestWord[0];
     }
     
@@ -349,7 +386,7 @@
       return new SuggestWord[0];
     }
     
-    if (!morePopular) docfreq = 0;
+    if (suggestMode!=SuggestMode.SUGGEST_MORE_POPULAR) docfreq = 0;
     
     if (thresholdFrequency >= 1f) {
       docfreq = Math.max(docfreq, (int) thresholdFrequency);
Index: modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker.java
===================================================================
--- modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker.java	(revision 1170694)
+++ modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker.java	(working copy)
@@ -247,7 +247,7 @@
    * @see #suggestSimilar(String, int, org.apache.lucene.index.IndexReader, String, boolean, float) 
    */
   public String[] suggestSimilar(String word, int numSug) throws IOException {
-    return this.suggestSimilar(word, numSug, null, null, false);
+    return this.suggestSimilar(word, numSug, null, null, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);
   }
 
   /**
@@ -271,7 +271,7 @@
    * @see #suggestSimilar(String, int, org.apache.lucene.index.IndexReader, String, boolean, float)
    */
   public String[] suggestSimilar(String word, int numSug, float accuracy) throws IOException {
-    return this.suggestSimilar(word, numSug, null, null, false, accuracy);
+    return this.suggestSimilar(word, numSug, null, null, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, accuracy);
   }
 
   /**
@@ -300,8 +300,16 @@
    * first criteria: the edit distance, second criteria (only if restricted mode): the popularity
    * of the suggest words in the field of the user index
    *
-   * @see #suggestSimilar(String, int, org.apache.lucene.index.IndexReader, String, boolean, float)
+   * @see #suggestSimilar(String, int, IndexReader, String, SuggestMode, float)
+   * 
+   * @deprecated
+   *  use suggestSimilar(String, int, IndexReader, String, SuggestMode)
+   *  <ul>
+	 *  	<li>SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX instead of morePopular=false</li>
+	 *  	<li>SuggestMode.SuGGEST_MORE_POPULAR instead of morePopular=true</li>
+   *  </ul>
    */
+  @Deprecated
   public String[] suggestSimilar(String word, int numSug, IndexReader ir,
       String field, boolean morePopular) throws IOException {
     return suggestSimilar(word, numSug, ir, field, morePopular, accuracy);
@@ -332,19 +340,78 @@
    * @return String[] the sorted list of the suggest words with these 2 criteria:
    * first criteria: the edit distance, second criteria (only if restricted mode): the popularity
    * of the suggest words in the field of the user index
+   * 
+   * @see #suggestSimilar(String, int, IndexReader, String, SuggestMode, float)
+   * 
+   * @deprecated
+   *  use suggestSimilar(String, int, IndexReader, String, SuggestMode, float)
+   *  <ul>
+	 *  	<li>SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX instead of morePopular=false</li>
+	 *  	<li>SuggestMode.SuGGEST_MORE_POPULAR instead of morePopular=true</li>
+   *  </ul>
    */
+  @Deprecated
   public String[] suggestSimilar(String word, int numSug, IndexReader ir,
       String field, boolean morePopular, float accuracy) throws IOException {
+  	return suggestSimilar(word, numSug, ir, field, morePopular ? SuggestMode.SUGGEST_MORE_POPULAR : 
+  		SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, accuracy);
+  }
+  
+  /**
+   * Calls {@link #suggestSimilar(String, int, IndexReader, String, SuggestMode, float) 
+   *       suggestSimilar(word, numSug, ir, suggestMode, field, this.accuracy)}
+   * 
+   */
+  public String[] suggestSimilar(String word, int numSug, IndexReader ir,
+      String field, SuggestMode suggestMode) throws IOException {
+  	return suggestSimilar(word, numSug, ir, field, suggestMode, this.accuracy);
+  }
+  
+  /**
+   * Suggest similar words (optionally restricted to a field of an index).
+   *
+   * <p>As the Lucene similarity that is used to fetch the most relevant n-grammed terms
+   * is not the same as the edit distance strategy used to calculate the best
+   * matching spell-checked word from the hits that Lucene found, one usually has
+   * to retrieve a couple of numSug's in order to get the true best match.
+   *
+   * <p>I.e. if numSug == 1, don't count on that suggestion being the best one.
+   * Thus, you should set this value to <b>at least</b> 5 for a good suggestion.
+   *
+   * @param word the word you want a spell check done on
+   * @param numSug the number of suggested words
+   * @param ir the indexReader of the user index (can be null see field param)
+   * @param field the field of the user index: if field is not null, the suggested
+   * words are restricted to the words present in this field.
+   * @param suggestMode 
+   * (NOTE: if indexReader==null and/or field==null, then this is overridden with SuggestMode.SUGGEST_ALWAYS)
+   * @param accuracy The minimum score a suggestion must have in order to qualify for inclusion in the results
+   * @throws IOException if the underlying index throws an {@link IOException}
+   * @throws AlreadyClosedException if the Spellchecker is already closed
+   * @return String[] the sorted list of the suggest words with these 2 criteria:
+   * first criteria: the edit distance, second criteria (only if restricted mode): the popularity
+   * of the suggest words in the field of the user index
+   * 
+   */
+  public String[] suggestSimilar(String word, int numSug, IndexReader ir,
+      String field, SuggestMode suggestMode, float accuracy) throws IOException {
     // obtainSearcher calls ensureOpen
     final IndexSearcher indexSearcher = obtainSearcher();
-    try{
+    try {
+      if (ir == null || field == null) {
+        suggestMode = SuggestMode.SUGGEST_ALWAYS;
+      }
+      if (suggestMode == SuggestMode.SUGGEST_ALWAYS) {
+        ir = null;
+        field = null;
+      }
 
       final int lengthWord = word.length();
 
       final int freq = (ir != null && field != null) ? ir.docFreq(new Term(field, word)) : 0;
-      final int goalFreq = (morePopular && ir != null && field != null) ? freq : 0;
+      final int goalFreq = suggestMode==SuggestMode.SUGGEST_MORE_POPULAR ? freq : 0;
       // if the word exists in the real index and we don't care for word frequency, return the word itself
-      if (!morePopular && freq > 0) {
+      if (suggestMode==SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX && freq > 0) {
         return new String[] { word };
       }
 
@@ -403,7 +470,7 @@
         if (ir != null && field != null) { // use the user index
           sugWord.freq = ir.docFreq(new Term(field, sugWord.string)); // freq in the index
           // don't suggest a word that is not present in the field
-          if ((morePopular && goalFreq > sugWord.freq) || sugWord.freq < 1) {
+          if ((suggestMode==SuggestMode.SUGGEST_MORE_POPULAR && goalFreq > sugWord.freq) || sugWord.freq < 1) {
             continue;
           }
         }
Index: modules/suggest/src/java/org/apache/lucene/search/spell/SuggestMode.java
===================================================================
--- modules/suggest/src/java/org/apache/lucene/search/spell/SuggestMode.java	(revision 0)
+++ modules/suggest/src/java/org/apache/lucene/search/spell/SuggestMode.java	(revision 0)
@@ -0,0 +1,21 @@
+package org.apache.lucene.search.spell;
+
+public enum SuggestMode {
+  /**
+   * Generate suggestions only for terms not in the index (default)
+   */
+  SUGGEST_WHEN_NOT_IN_INDEX,
+
+  /**
+   * Return only suggested words that are as frequent or more frequent than the
+   * searched word
+   */
+  SUGGEST_MORE_POPULAR,
+
+  /**
+   * Always attempt to offer suggestions (however, other parameters may limit
+   * suggestions. For example, see
+   * {@link DirectSpellChecker.setMaxQueryFrequency} ).
+   */
+  SUGGEST_ALWAYS
+}
Index: modules/suggest/src/test/org/apache/lucene/search/spell/TestDirectSpellChecker.java
===================================================================
--- modules/suggest/src/test/org/apache/lucene/search/spell/TestDirectSpellChecker.java	(revision 1170694)
+++ modules/suggest/src/test/org/apache/lucene/search/spell/TestDirectSpellChecker.java	(working copy)
@@ -45,29 +45,35 @@
 
     IndexReader ir = writer.getReader();
 
-    SuggestWord[] similar = spellChecker.suggestSimilar(new Term("numbers", "fvie"), 2, ir, false);
+    SuggestWord[] similar = spellChecker.suggestSimilar(new Term("numbers",
+        "fvie"), 2, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);
     assertTrue(similar.length > 0);
     assertEquals("five", similar[0].string);
 
-    similar = spellChecker.suggestSimilar(new Term("numbers", "five"), 2, ir, false);
+    similar = spellChecker.suggestSimilar(new Term("numbers", "five"), 2, ir,
+        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);
     if (similar.length > 0) {
       assertFalse(similar[0].string.equals("five")); // don't suggest a word for itself
     }
 
-    similar = spellChecker.suggestSimilar(new Term("numbers", "fvie"), 2, ir, false);
+    similar = spellChecker.suggestSimilar(new Term("numbers", "fvie"), 2, ir,
+        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);
     assertTrue(similar.length > 0);
     assertEquals("five", similar[0].string);
 
-    similar = spellChecker.suggestSimilar(new Term("numbers", "fiv"), 2, ir, false);
+    similar = spellChecker.suggestSimilar(new Term("numbers", "fiv"), 2, ir,
+        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);
     assertTrue(similar.length > 0);
     assertEquals("five", similar[0].string);
 
-    similar = spellChecker.suggestSimilar(new Term("numbers", "fives"), 2, ir, false);
+    similar = spellChecker.suggestSimilar(new Term("numbers", "fives"), 2, ir,
+        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);
     assertTrue(similar.length > 0);
     assertEquals("five", similar[0].string);
 
     assertTrue(similar.length > 0);
-    similar = spellChecker.suggestSimilar(new Term("numbers", "fie"), 2, ir, false);
+    similar = spellChecker.suggestSimilar(new Term("numbers", "fie"), 2, ir,
+        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);
     assertEquals("five", similar[0].string);
 
     // add some more documents
@@ -81,7 +87,8 @@
     ir = writer.getReader();
 
     // look ma, no spellcheck index rebuild
-    similar = spellChecker.suggestSimilar(new Term("numbers", "tousand"), 10, ir, false);
+    similar = spellChecker.suggestSimilar(new Term("numbers", "tousand"), 10,
+        ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);
     assertTrue(similar.length > 0); 
     assertEquals("thousand", similar[0].string);
 
@@ -109,34 +116,48 @@
     
     DirectSpellChecker spellChecker = new DirectSpellChecker();
     spellChecker.setMaxQueryFrequency(0F);
-    SuggestWord[] similar = spellChecker.suggestSimilar(new Term("text", "fobar"), 1, ir, true);
+    SuggestWord[] similar = spellChecker.suggestSimilar(new Term("text",
+        "fobar"), 1, ir, SuggestMode.SUGGEST_MORE_POPULAR);
     assertEquals(0, similar.length);
     
     spellChecker = new DirectSpellChecker(); // reset defaults
     spellChecker.setMinQueryLength(5);
-    similar = spellChecker.suggestSimilar(new Term("text", "foba"), 1, ir, true);
+    similar = spellChecker.suggestSimilar(new Term("text", "foba"), 1, ir,
+        SuggestMode.SUGGEST_MORE_POPULAR);
     assertEquals(0, similar.length);
     
     spellChecker = new DirectSpellChecker(); // reset defaults
     spellChecker.setMaxEdits(1);
-    similar = spellChecker.suggestSimilar(new Term("text", "foobazzz"), 1, ir, true);
+    similar = spellChecker.suggestSimilar(new Term("text", "foobazzz"), 1, ir,
+        SuggestMode.SUGGEST_MORE_POPULAR);
     assertEquals(0, similar.length);
     
     spellChecker = new DirectSpellChecker(); // reset defaults
     spellChecker.setAccuracy(0.9F);
-    similar = spellChecker.suggestSimilar(new Term("text", "foobazzz"), 1, ir, true);
+    similar = spellChecker.suggestSimilar(new Term("text", "foobazzz"), 1, ir,
+        SuggestMode.SUGGEST_MORE_POPULAR);
     assertEquals(0, similar.length);
     
     spellChecker = new DirectSpellChecker(); // reset defaults
     spellChecker.setMinPrefix(0);
-    similar = spellChecker.suggestSimilar(new Term("text", "roobaz"), 1, ir, true);
+    similar = spellChecker.suggestSimilar(new Term("text", "roobaz"), 1, ir,
+        SuggestMode.SUGGEST_MORE_POPULAR);
     assertEquals(1, similar.length);
-    
+    similar = spellChecker.suggestSimilar(new Term("text", "roobaz"), 1, ir,
+        SuggestMode.SUGGEST_MORE_POPULAR);
+
     spellChecker = new DirectSpellChecker(); // reset defaults
     spellChecker.setMinPrefix(1);
-    similar = spellChecker.suggestSimilar(new Term("text", "roobaz"), 1, ir, true);
+    similar = spellChecker.suggestSimilar(new Term("text", "roobaz"), 1, ir,
+        SuggestMode.SUGGEST_MORE_POPULAR);
     assertEquals(0, similar.length);
     
+    spellChecker = new DirectSpellChecker(); // reset defaults
+    spellChecker.setMaxEdits(2);
+    similar = spellChecker.suggestSimilar(new Term("text", "fobar"), 2, ir,
+        SuggestMode.SUGGEST_ALWAYS);
+    assertEquals(2, similar.length);
+
     ir.close();
     writer.close();
     dir.close();
@@ -156,7 +177,9 @@
 
     IndexReader ir = writer.getReader();
 
-    SuggestWord[] similar = spellChecker.suggestSimilar(new Term("bogusFieldBogusField", "fvie"), 2, ir, false);
+    SuggestWord[] similar = spellChecker.suggestSimilar(new Term(
+        "bogusFieldBogusField", "fvie"), 2, ir,
+        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);
     assertEquals(0, similar.length);
     ir.close();
     writer.close();
Index: modules/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker.java
===================================================================
--- modules/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker.java	(revision 1170694)
+++ modules/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker.java	(working copy)
@@ -63,6 +63,29 @@
       doc.add(newField("field3", "fvei" + (i % 2 == 0 ? " five" : ""), TextField.TYPE_STORED)); // + word thousand
       writer.addDocument(doc);
     }
+    {
+      Document doc = new Document();
+      doc.add(newField("field1", "eight", TextField.TYPE_STORED)); // "eight" in
+                                                                   // the index
+                                                                   // twice
+      writer.addDocument(doc);
+    }
+    {
+      Document doc = new Document();
+      doc
+          .add(newField("field1", "twenty-one twenty-one",
+              TextField.TYPE_STORED)); // "twenty-one" in the index thrice
+      writer.addDocument(doc);
+    }
+    {
+      Document doc = new Document();
+      doc.add(newField("field1", "twenty", TextField.TYPE_STORED)); // "twenty"
+                                                                    // in the
+                                                                    // index
+                                                                    // twice
+      writer.addDocument(doc);
+    }
+    
     writer.close();
     searchers = Collections.synchronizedList(new ArrayList<IndexSearcher>());
     // create the spellChecker
@@ -126,7 +149,8 @@
     SpellChecker compareSP = new SpellCheckerMock(compIdx, new LevensteinDistance(), new SuggestWordFrequencyComparator());
     addwords(r, compareSP, "field3");
 
-    String[] similar = compareSP.suggestSimilar("fvie", 2, r, "field3", false);
+    String[] similar = compareSP.suggestSimilar("fvie", 2, r, "field3",
+        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);
     assertTrue(similar.length == 2);
     //five and fvei have the same score, but different frequencies.
     assertEquals("fvei", similar[0]);
@@ -143,14 +167,69 @@
     SpellChecker compareSP = new SpellCheckerMock(compIdx, new LevensteinDistance(), new SuggestWordFrequencyComparator());
     addwords(r, compareSP, "field3");
 
-    String[] similar = compareSP.suggestSimilar("fvie", 2, r, "bogusFieldBogusField", false);
+    String[] similar = compareSP.suggestSimilar("fvie", 2, r,
+        "bogusFieldBogusField", SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);
     assertEquals(0, similar.length);
     r.close();
     if (!compareSP.isClosed())
       compareSP.close();
     compIdx.close();
   }
-
+  
+  public void testSuggestModes() throws Exception {
+    IndexReader r = IndexReader.open(userindex, true);
+    spellChecker.clearIndex();
+    addwords(r, spellChecker, "field1");
+    
+    {
+      String[] similar = spellChecker.suggestSimilar("eighty", 2, r, "field1",
+          SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);
+      assertEquals(1, similar.length);
+      assertEquals("eighty", similar[0]);
+    }
+    
+    {
+      String[] similar = spellChecker.suggestSimilar("eight", 2, r, "field1",
+          SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);
+      assertEquals(1, similar.length);
+      assertEquals("eight", similar[0]);
+    }
+    
+    {
+      String[] similar = spellChecker.suggestSimilar("eighty", 5, r, "field1",
+          SuggestMode.SUGGEST_MORE_POPULAR);
+      assertEquals(5, similar.length);
+      assertEquals("eight", similar[0]);
+    }
+    
+    {
+      String[] similar = spellChecker.suggestSimilar("twenty", 5, r, "field1",
+          SuggestMode.SUGGEST_MORE_POPULAR);
+      assertEquals(1, similar.length);
+      assertEquals("twenty-one", similar[0]);
+    }
+    
+    {
+      String[] similar = spellChecker.suggestSimilar("eight", 5, r, "field1",
+          SuggestMode.SUGGEST_MORE_POPULAR);
+      assertEquals(0, similar.length);
+    }
+    
+    {
+      String[] similar = spellChecker.suggestSimilar("eighty", 5, r, "field1",
+          SuggestMode.SUGGEST_ALWAYS);
+      assertEquals(5, similar.length);
+      assertEquals("eight", similar[0]);
+    }
+    
+    {
+      String[] similar = spellChecker.suggestSimilar("eight", 5, r, "field1",
+          SuggestMode.SUGGEST_ALWAYS);
+      assertEquals(5, similar.length);
+      assertEquals("eighty", similar[0]);
+    }
+    r.close();
+  }
   private void checkCommonSuggestions(IndexReader r) throws IOException {
     String[] similar = spellChecker.suggestSimilar("fvie", 2);
     assertTrue(similar.length > 0);
@@ -174,10 +253,12 @@
     assertEquals(similar[0], "five");
     
     //  test restraint to a field
-    similar = spellChecker.suggestSimilar("tousand", 10, r, "field1", false);
+    similar = spellChecker.suggestSimilar("tousand", 10, r, "field1",
+        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);
     assertEquals(0, similar.length); // there isn't the term thousand in the field field1
 
-    similar = spellChecker.suggestSimilar("tousand", 10, r, "field2", false);
+    similar = spellChecker.suggestSimilar("tousand", 10, r, "field2",
+        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);
     assertEquals(1, similar.length); // there is the term thousand in the field field2
   }
 
@@ -214,10 +295,12 @@
     assertEquals(similar[0], "five");
 
     // test restraint to a field
-    similar = spellChecker.suggestSimilar("tousand", 10, r, "field1", false);
+    similar = spellChecker.suggestSimilar("tousand", 10, r, "field1",
+        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);
     assertEquals(0, similar.length); // there isn't the term thousand in the field field1
 
-    similar = spellChecker.suggestSimilar("tousand", 10, r, "field2", false);
+    similar = spellChecker.suggestSimilar("tousand", 10, r, "field2",
+        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);
     assertEquals(1, similar.length); // there is the term thousand in the field field2
     
     similar = spellChecker.suggestSimilar("onety", 2);
@@ -225,7 +308,8 @@
     assertEquals(similar[0], "ninety");
     assertEquals(similar[1], "one");
     try {
-      similar = spellChecker.suggestSimilar("tousand", 10, r, null, false);
+      similar = spellChecker.suggestSimilar("tousand", 10, r, null,
+          SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);
     } catch (NullPointerException e) {
       assertTrue("threw an NPE, and it shouldn't have", false);
     }
