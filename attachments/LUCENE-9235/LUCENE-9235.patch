diff --git a/gradle/generation/util.gradle b/gradle/generation/util.gradle
index b6981f57ca8..21856f48511 100644
--- a/gradle/generation/util.gradle
+++ b/gradle/generation/util.gradle
@@ -33,7 +33,7 @@ configure(rootProject) {
   task installMoman(type: Download) {
     def momanZip = file("${momanDir}/moman.zip")
 
-    src "https://bitbucket.org/jpbarrette/moman/get/5c5c2a1e4dea.zip"
+    src "https://github.com/rmuir/moman/archive/09e997de01992e9b57ea7f33293f27632ec87ba8.zip"
     dest momanZip
     onlyIfModified true
 
@@ -57,7 +57,7 @@ configure(project(":lucene:core")) {
         logger.lifecycle("Executing: ${prog} in ${targetDir}")
         project.exec {
           workingDir targetDir
-          executable "python2.7"
+          executable "python3"
           args = ['-B', "${prog}"]
         }
       }
@@ -82,7 +82,7 @@ configure(project(":lucene:core")) {
         ['True', 'False'].each { transpose ->
           project.exec {
             workingDir targetDir
-            executable "python2.7"
+            executable "python3"
             args = ['-B', 'createLevAutomata.py', num, transpose, "${momanDir}/finenight/python"]
           }
         }
diff --git a/lucene/analysis/common/build.xml b/lucene/analysis/common/build.xml
index 0e14d91a17c..21c5fda99a8 100644
--- a/lucene/analysis/common/build.xml
+++ b/lucene/analysis/common/build.xml
@@ -45,7 +45,7 @@
   <target name="generate-jflex-html-char-entities">
     <exec dir="src/java/org/apache/lucene/analysis/charfilter"
           output="src/java/org/apache/lucene/analysis/charfilter/HTMLCharacterEntities.jflex"
-          executable="${python2.exe}" failonerror="true" logerror="true">
+          executable="${python3.exe}" failonerror="true" logerror="true">
       <!-- Tell Python not to write any bytecode cache into the filesystem: -->
       <arg value="-B"/>
       <arg value="htmlentity.py"/>
diff --git a/lucene/common-build.xml b/lucene/common-build.xml
index ca6db1b32ad..c500b11124c 100644
--- a/lucene/common-build.xml
+++ b/lucene/common-build.xml
@@ -248,8 +248,6 @@
   <property name="git.exe" value="git" />
   <property name="perl.exe" value="perl" />
 
-  <!-- we default to python2.7 because not all OSs (e.g. mac) have a python2 link -->
-  <property name="python2.exe" value="python2.7" />
   <property name="python3.exe" value="python3" />
 
   <property name="gpg.exe" value="gpg" />
diff --git a/lucene/core/build.xml b/lucene/core/build.xml
index 1759b3f44b9..d12181fe762 100644
--- a/lucene/core/build.xml
+++ b/lucene/core/build.xml
@@ -26,8 +26,8 @@
   <property name="javac.profile.args" value="-profile compact1"/>
   <import file="../common-build.xml"/>
 
-  <property name="moman.commit-hash" value="5c5c2a1e4dea" />
-  <property name="moman.url" value="https://bitbucket.org/jpbarrette/moman/get/${moman.commit-hash}.zip" />
+  <property name="moman.commit-hash" value="09e997de01992e9b57ea7f33293f27632ec87ba8" />
+  <property name="moman.url" value="https://github.com/rmuir/moman/archive/${moman.commit-hash}.zip" />
 
   <path id="classpath"/>
   
@@ -69,7 +69,7 @@
       <attribute name="n"/>
       <sequential>
       <exec dir="src/java/org/apache/lucene/util/automaton"
-            executable="${python2.exe}" failonerror="true">
+            executable="${python3.exe}" failonerror="true">
         <!-- Tell Python not to write any bytecode cache into the filesystem: -->
         <arg value="-B"/>
         <arg value="createLevAutomata.py"/>
@@ -79,7 +79,7 @@
         <arg value="../../../../../../../../build/core/moman/finenight/python"/>
       </exec>
       <exec dir="src/java/org/apache/lucene/util/automaton"
-            executable="${python2.exe}" failonerror="true">
+            executable="${python3.exe}" failonerror="true">
         <!-- Tell Python not to write any bytecode cache into the filesystem: -->
         <arg value="-B"/>
         <arg value="createLevAutomata.py"/>
@@ -94,13 +94,13 @@
 
   <target name="createPackedIntSources">
     <exec dir="src/java/org/apache/lucene/util/packed"
-          executable="${python2.exe}" failonerror="true">
+          executable="${python3.exe}" failonerror="true">
       <!-- Tell Python not to write any bytecode cache into the filesystem: -->
       <arg value="-B"/>
       <arg value="gen_BulkOperation.py"/>
     </exec>
     <exec dir="src/java/org/apache/lucene/util/packed"
-          executable="${python2.exe}" failonerror="true">
+          executable="${python3.exe}" failonerror="true">
       <!-- Tell Python not to write any bytecode cache into the filesystem: -->
       <arg value="-B"/>
       <arg value="gen_Packed64SingleBlock.py"/>
diff --git a/lucene/core/src/java/org/apache/lucene/util/automaton/createLevAutomata.py b/lucene/core/src/java/org/apache/lucene/util/automaton/createLevAutomata.py
index 529baef5b3a..0e1b30c6566 100644
--- a/lucene/core/src/java/org/apache/lucene/util/automaton/createLevAutomata.py
+++ b/lucene/core/src/java/org/apache/lucene/util/automaton/createLevAutomata.py
@@ -42,7 +42,7 @@ class LineOutput:
       self._indent = self._indent[:-2]
 
     if indent != 0:
-      indent0 = '  ' * (len(self._indent) / 2 + indent)
+      indent0 = '  ' * (len(self._indent) // 2 + indent)
     else:
       indent0 = self._indent
 
@@ -92,11 +92,11 @@ def charVarNumber(charVar):
 def main():
 
   if len(sys.argv) != 4:
-    print
-    print 'Usage: python -u %s N <True/False> path_to_moman_dir' % sys.argv[0]
-    print
-    print 'NOTE: the resulting .java file is created in the current working dir!'
-    print
+    print()
+    print('Usage: python -u %s N <True/False> path_to_moman_dir' % sys.argv[0])
+    print()
+    print('NOTE: the resulting .java file is created in the current working dir!')
+    print()
     sys.exit(1)
 
   n = int(sys.argv[1])
@@ -184,7 +184,7 @@ def main():
     if i != 0 and MODE == 'switch':
       w('switch(vector) {')
 
-    l = map.items()
+    l = list(map.items())
     l.sort()
 
     numCasesPerVector = None
@@ -203,7 +203,8 @@ def main():
         w('case %s: // <%s>' % (charVarNumber(charVar), ','.join([str(x) for x in charVar])))
         w.indent()
 
-      l = states.items()
+      l = list(states.items())
+      l.sort()
 
       byFromState = {}
 
@@ -307,12 +308,12 @@ def main():
         l, nbits = pack(toStateArray)
         subs.append(('NBITSSTATES%d' % i, str(nbits)))
         w('  private final static long[] toStates%d = new long[] /*%d bits per value */ %s;' % \
-          (i, nbits, renderList([hex(long(x)) for x in l])))
+          (i, nbits, renderList([(hex(int(x)) + "L") for x in l])))
 
         l, nbits = pack(toOffsetIncrsArray)
         subs.append(('NBITSOFFSET%d' % i, str(nbits)))
         w('  private final static long[] offsetIncrs%d = new long[] /*%d bits per value */ %s;' % \
-          (i, nbits, renderList([hex(long(x)) for x in l])))
+          (i, nbits, renderList([(hex(int(x)) + "L") for x in l])))
       else:
         w('  private final static int[] toStates%d = new int[] %s;' % \
           (i, renderList([str(x) for x in toStateArray])))
@@ -325,7 +326,7 @@ def main():
   w('// state map')
   sum = 0
   minErrors = []
-  for i in xrange(len(stateMap2) - 1):
+  for i in range(len(stateMap2) - 1):
     w('//   %s -> %s' % (i, stateMap2[i]))
     # we replace t-notation as it's not relevant here
     st = stateMap2[i].replace('t', '')
@@ -416,14 +417,14 @@ def main():
   for sub, repl in subs:
     s = s.replace(sub, repl)
 
-  open(fileOut, 'wb').write(s)
+  open(fileOut, 'w').write(s)
 
-  print 'Wrote %s [%d lines; %.1f KB]' % \
-        (fileOut, len(w.l), os.path.getsize(fileOut) / 1024.)
+  print('Wrote %s [%d lines; %.1f KB]' % \
+        (fileOut, len(w.l), os.path.getsize(fileOut) / 1024.))
 
 def renderList(l):
   lx = ['    ']
-  for i in xrange(len(l)):
+  for i in range(len(l)):
     if i > 0:
       lx.append(',')
       if i % 4 == 0:
@@ -433,7 +434,7 @@ def renderList(l):
 
 MASKS = []
 v = 2
-for i in xrange(63):
+for i in range(63):
   MASKS.append(v - 1)
   v *= 2
 
@@ -446,7 +447,7 @@ def pack(l):
   pendingValue = 0
 
   packed = []
-  for i in xrange(len(l)):
+  for i in range(len(l)):
     v = l[i]
     if pendingValue > 0:
       bitsUsed = math.ceil(math.log(pendingValue) / math.log(2.0))
@@ -495,8 +496,8 @@ def unpack(data, index, bitsPerValue):
 
 if __name__ == '__main__':
   if not __debug__:
-    print
-    print 'ERROR: please run without -O'
-    print
+    print()
+    print('ERROR: please run without -O')
+    print()
     sys.exit(1)
   main()
diff --git a/lucene/core/src/java/org/apache/lucene/util/packed/gen_BulkOperation.py b/lucene/core/src/java/org/apache/lucene/util/packed/gen_BulkOperation.py
index e01776cc57e..21b43fc3295 100644
--- a/lucene/core/src/java/org/apache/lucene/util/packed/gen_BulkOperation.py
+++ b/lucene/core/src/java/org/apache/lucene/util/packed/gen_BulkOperation.py
@@ -122,10 +122,10 @@ def get_type(bits):
 
 def block_value_count(bpv, bits=64):
   blocks = bpv
-  values = blocks * bits / bpv
+  values = blocks * bits // bpv
   while blocks % 2 == 0 and values % 2 == 0:
-    blocks /= 2
-    values /= 2
+    blocks //= 2
+    values //= 2
   assert values * bpv == bits * blocks, "%d values, %d blocks, %d bits per value" % (values, blocks, bpv)
   return (blocks, values)
 
@@ -181,8 +181,8 @@ def p64_decode(bpv, f, bits):
       f.write("        values[valuesOffset++] = %s(block >>> shift) & %d%s;\n" % (cast_start, mask, cast_end))
       f.write("      }\n")
     else:
-      for i in xrange(0, values):
-        block_offset = i * bpv / 64
+      for i in range(0, values):
+        block_offset = i * bpv // 64
         bit_offset = (i * bpv) % 64
         if bit_offset == 0:
           # start of block
@@ -214,7 +214,7 @@ def p64_decode(bpv, f, bits):
     if is_power_of_two(bpv) and bpv < 8:
       f.write("    for (int j = 0; j < iterations; ++j) {\n")
       f.write("      final byte block = blocks[blocksOffset++];\n")
-      for shift in xrange(8 - bpv, 0, -bpv):
+      for shift in range(8 - bpv, 0, -bpv):
         f.write("      values[valuesOffset++] = (block >>> %d) & %d;\n" % (shift, mask))
       f.write("      values[valuesOffset++] = block & %d;\n" % mask)
       f.write("    }\n")
@@ -226,21 +226,21 @@ def p64_decode(bpv, f, bits):
       f.write("    for (int j = 0; j < iterations; ++j) {\n")
       m = bits <= 32 and "0xFF" or "0xFFL"
       f.write("      values[valuesOffset++] =")
-      for i in xrange(bpv / 8 - 1):
+      for i in range(bpv // 8 - 1):
         f.write(" ((blocks[blocksOffset++] & %s) << %d) |" % (m, bpv - 8))
       f.write(" (blocks[blocksOffset++] & %s);\n" % m)
       f.write("    }\n")
     else:
       f.write("    for (int i = 0; i < iterations; ++i) {\n")
-      for i in xrange(0, byte_values):
-        byte_start = i * bpv / 8
+      for i in range(0, byte_values):
+        byte_start = i * bpv // 8
         bit_start = (i * bpv) % 8
-        byte_end = ((i + 1) * bpv - 1) / 8
+        byte_end = ((i + 1) * bpv - 1) // 8
         bit_end = ((i + 1) * bpv - 1) % 8
         shift = lambda b: 8 * (byte_end - b - 1) + 1 + bit_end
         if bit_start == 0:
           f.write("      final %s byte%d = blocks[blocksOffset++] & 0xFF;\n" % (typ, byte_start))
-        for b in xrange(byte_start + 1, byte_end + 1):
+        for b in range(byte_start + 1, byte_end + 1):
           f.write("      final %s byte%d = blocks[blocksOffset++] & 0xFF;\n" % (typ, b))
         f.write("      values[valuesOffset++] =")
         if byte_start == byte_end:
@@ -259,7 +259,7 @@ def p64_decode(bpv, f, bits):
             f.write(" (byte%d << %d)" % (byte_start, shift(byte_start)))
           else:
             f.write(" ((byte%d & %d) << %d)" % (byte_start, 2 ** (8 - bit_start) - 1, shift(byte_start)))
-          for b in xrange(byte_start + 1, byte_end):
+          for b in range(byte_start + 1, byte_end):
             f.write(" | (byte%d << %d)" % (b, shift(b)))
           if bit_end == 7:
             f.write(" | byte%d" % byte_end)
@@ -280,7 +280,7 @@ if __name__ == '__main__':
   f.write('abstract class BulkOperation implements PackedInts.Decoder, PackedInts.Encoder {\n')
   f.write('  private static final BulkOperation[] packedBulkOps = new BulkOperation[] {\n')
 
-  for bpv in xrange(1, 65):
+  for bpv in range(1, 65):
     if bpv > MAX_SPECIALIZED_BITS_PER_VALUE:
       f.write('    new BulkOperationPacked(%d),\n' % bpv)
       continue
@@ -304,7 +304,7 @@ if __name__ == '__main__':
 
   f.write('  // NOTE: this is sparse (some entries are null):\n')
   f.write('  private static final BulkOperation[] packedSingleBlockBulkOps = new BulkOperation[] {\n')
-  for bpv in xrange(1, max(PACKED_64_SINGLE_BLOCK_BPV) + 1):
+  for bpv in range(1, max(PACKED_64_SINGLE_BLOCK_BPV) + 1):
     if bpv in PACKED_64_SINGLE_BLOCK_BPV:
       f.write('    new BulkOperationPackedSingleBlock(%d),\n' % bpv)
     else:
