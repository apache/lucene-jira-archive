Index: lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractWikipedia.java
===================================================================
--- lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractWikipedia.java	(revision 1052021)
+++ lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractWikipedia.java	(working copy)
@@ -71,7 +71,7 @@
     d.mkdirs();
     File f = new File(d, id + ".txt");
 
-    StringBuffer contents = new StringBuffer();
+    StringBuilder contents = new StringBuilder();
 
     contents.append(time);
     contents.append("\n\n");
Index: lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters.java
===================================================================
--- lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters.java	(revision 1052021)
+++ lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters.java	(working copy)
@@ -90,8 +90,8 @@
         {
             BufferedReader reader = new BufferedReader(new FileReader(sgmFile));
 
-            StringBuffer buffer = new StringBuffer(1024);
-            StringBuffer outBuffer = new StringBuffer(1024);
+            StringBuilder buffer = new StringBuilder(1024);
+            StringBuilder outBuffer = new StringBuilder(1024);
 
             String line = null;
             int docNumber = 0;
Index: lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecTopicsReader.java
===================================================================
--- lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecTopicsReader.java	(revision 1052021)
+++ lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecTopicsReader.java	(working copy)
@@ -63,7 +63,7 @@
    */
   public QualityQuery[] readQueries(BufferedReader reader) throws IOException {
     ArrayList<QualityQuery> res = new ArrayList<QualityQuery>();
-    StringBuffer sb;
+    StringBuilder sb;
     try {
       while (null!=(sb=read(reader,"<top>",null,false,false))) {
         HashMap<String,String> fields = new HashMap<String,String>();
@@ -112,8 +112,8 @@
   }
 
   // read until finding a line that starts with the specified prefix
-  private StringBuffer read (BufferedReader reader, String prefix, StringBuffer sb, boolean collectMatchLine, boolean collectAll) throws IOException {
-    sb = (sb==null ? new StringBuffer() : sb);
+  private StringBuilder read (BufferedReader reader, String prefix, StringBuilder sb, boolean collectMatchLine, boolean collectAll) throws IOException {
+    sb = (sb==null ? new StringBuilder() : sb);
     String sep = "";
     while (true) {
       String line = reader.readLine();
Index: lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config.java
===================================================================
--- lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config.java	(revision 1052021)
+++ lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config.java	(working copy)
@@ -71,7 +71,7 @@
     }
     r.close();
     // copy props lines to string
-    StringBuffer sb = new StringBuffer();
+    StringBuilder sb = new StringBuilder();
     for (int i = 0; i < lastConfigLine; i++) {
       sb.append(lines.get(i));
       sb.append(NEW_LINE);
@@ -90,7 +90,7 @@
     }
 
     // copy algorithm lines
-    sb = new StringBuffer();
+    sb = new StringBuilder();
     for (int i = lastConfigLine; i < lines.size(); i++) {
       sb.append(lines.get(i));
       sb.append(NEW_LINE);
@@ -270,7 +270,7 @@
   public int newRound() {
     roundNumber++;
 
-    StringBuffer sb = new StringBuffer("--> Round ").append(roundNumber - 1).append("-->").append(roundNumber);
+    StringBuilder sb = new StringBuilder("--> Round ").append(roundNumber - 1).append("-->").append(roundNumber);
 
     // log changes in values
     if (valByRound.size() > 0) {
@@ -386,7 +386,7 @@
     if (colForValByRound.size() == 0) {
       return "";
     }
-    StringBuffer sb = new StringBuffer();
+    StringBuilder sb = new StringBuilder();
     for (final String name : colForValByRound.keySet()) {
       String colName = colForValByRound.get(name);
       sb.append(" ").append(colName);
@@ -401,7 +401,7 @@
     if (colForValByRound.size() == 0) {
       return "";
     }
-    StringBuffer sb = new StringBuffer();
+    StringBuilder sb = new StringBuilder();
     for (final String name : colForValByRound.keySet()) {
       String colName = colForValByRound.get(name);
       String template = " " + colName;
Index: lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Algorithm.java
===================================================================
--- lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Algorithm.java	(revision 1052021)
+++ lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Algorithm.java	(working copy)
@@ -82,7 +82,7 @@
             stok.pushBack();
           } else {
             // get params, for tasks that supports them, - anything until next ')'
-            StringBuffer params = new StringBuffer();
+            StringBuilder params = new StringBuilder();
             stok.nextToken();
             while (stok.ttype!=')') { 
               switch (stok.ttype) {
@@ -254,7 +254,7 @@
   @Override
   public String toString() {
     String newline = System.getProperty("line.separator");
-    StringBuffer sb = new StringBuffer();
+    StringBuilder sb = new StringBuilder();
     sb.append(sequence.toString());
     sb.append(newline);
     return sb.toString();
Index: lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PerfTask.java
===================================================================
--- lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PerfTask.java	(revision 1052021)
+++ lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PerfTask.java	(working copy)
@@ -163,7 +163,7 @@
     if (params==null) {
       return name;
     } 
-    return new StringBuffer(name).append('(').append(params).append(')').toString();
+    return new StringBuilder(name).append('(').append(params).append(')').toString();
   }
 
   /**
@@ -207,7 +207,7 @@
   @Override
   public String toString() {
     String padd = getPadding();
-    StringBuffer sb = new StringBuffer(padd);
+    StringBuilder sb = new StringBuilder(padd);
     if (disableCounting) {
       sb.append('-');
     }
Index: lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSelectByPrefTask.java
===================================================================
--- lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSelectByPrefTask.java	(revision 1052021)
+++ lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSelectByPrefTask.java	(working copy)
@@ -49,7 +49,7 @@
   protected Report reportSelectByPrefix(List<TaskStats> taskStats) {
     String longestOp = longestOp(taskStats);
     boolean first = true;
-    StringBuffer sb = new StringBuffer();
+    StringBuilder sb = new StringBuilder();
     sb.append(tableTitle(longestOp));
     sb.append(newline);
     int reported = 0;
Index: lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReportTask.java
===================================================================
--- lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReportTask.java	(revision 1052021)
+++ lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReportTask.java	(working copy)
@@ -82,7 +82,7 @@
    * @return the table title line.
    */
   protected String tableTitle (String longestOp) {
-    StringBuffer sb = new StringBuffer();
+    StringBuilder sb = new StringBuilder();
     sb.append(Format.format(OP,longestOp));
     sb.append(ROUND);
     sb.append(getRunData().getConfig().getColsNamesForValsByRound());
@@ -118,7 +118,7 @@
    */
   protected String taskReportLine(String longestOp, TaskStats stat) {
     PerfTask task = stat.getTask();
-    StringBuffer sb = new StringBuffer();
+    StringBuilder sb = new StringBuilder();
     sb.append(Format.format(task.getName(), longestOp));
     String round = (stat.getRound()>=0 ? ""+stat.getRound() : "-");
     sb.append(Format.formatPaddLeft(round, ROUND));
@@ -136,7 +136,7 @@
   protected Report genPartialReport(int reported, LinkedHashMap<String,TaskStats> partOfTasks, int totalSize) {
     String longetOp = longestOp(partOfTasks.values());
     boolean first = true;
-    StringBuffer sb = new StringBuffer();
+    StringBuilder sb = new StringBuilder();
     sb.append(tableTitle(longetOp));
     sb.append(newline);
     int lineNum = 0;
Index: lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepAllTask.java
===================================================================
--- lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepAllTask.java	(revision 1052021)
+++ lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepAllTask.java	(working copy)
@@ -51,7 +51,7 @@
   protected Report reportAll(List<TaskStats> taskStats) {
     String longestOp = longestOp(taskStats);
     boolean first = true;
-    StringBuffer sb = new StringBuffer();
+    StringBuilder sb = new StringBuilder();
     sb.append(tableTitle(longestOp));
     sb.append(newline);
     int reported = 0;
Index: lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence.java
===================================================================
--- lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence.java	(revision 1052021)
+++ lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence.java	(working copy)
@@ -418,7 +418,7 @@
   @Override
   public String toString() {
     String padd = getPadding();
-    StringBuffer sb = new StringBuffer(super.toString());
+    StringBuilder sb = new StringBuilder(super.toString());
     sb.append(parallel ? " [" : " {");
     sb.append(NEW_LINE);
     for (final PerfTask task : tasks) {
Index: lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiContentSource.java
===================================================================
--- lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiContentSource.java	(revision 1052021)
+++ lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiContentSource.java	(working copy)
@@ -48,7 +48,7 @@
     private boolean threadDone;
     private String[] tuple;
     private NoMoreDataException nmde;
-    private StringBuffer contents = new StringBuffer();
+    private StringBuilder contents = new StringBuilder();
     private String title;
     private String body;
     private String time;
@@ -91,7 +91,7 @@
     }
     
     String time(String original) {
-      StringBuffer buffer = new StringBuffer();
+      StringBuilder buffer = new StringBuilder();
 
       buffer.append(original.substring(8, 10));
       buffer.append('-');
Index: lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersContentSource.java
===================================================================
--- lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersContentSource.java	(revision 1052021)
+++ lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersContentSource.java	(working copy)
@@ -119,7 +119,7 @@
       reader.readLine();// skip an empty line
       String title = reader.readLine();
       reader.readLine();// skip an empty line
-      StringBuffer bodyBuf = new StringBuffer(1024);
+      StringBuilder bodyBuf = new StringBuilder(1024);
       String line = null;
       while ((line = reader.readLine()) != null) {
         bodyBuf.append(line).append(' ');
Index: lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/AbstractQueryMaker.java
===================================================================
--- lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/AbstractQueryMaker.java	(revision 1052021)
+++ lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/AbstractQueryMaker.java	(working copy)
@@ -41,7 +41,7 @@
 
   public String printQueries() {
     String newline = System.getProperty("line.separator");
-    StringBuffer sb = new StringBuffer();
+    StringBuilder sb = new StringBuilder();
     if (queries != null) {
       for (int i = 0; i < queries.length; i++) {
         sb.append(i+". "+ queries[i].getClass().getSimpleName()+" - "+queries[i].toString());
Index: lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/HTMLParser.java
===================================================================
--- lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/HTMLParser.java	(revision 1052021)
+++ lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/HTMLParser.java	(working copy)
@@ -40,12 +40,5 @@
    * @throws InterruptedException
    */
   public DocData parse(DocData docData, String name, Date date, Reader reader, DateFormat dateFormat) throws IOException, InterruptedException;
-  
-  /**
-   * Parse the inputText and return DocData. 
-   * @param inputText the html text to parse.
-   * @see #parse(DocData, String, Date, Reader, DateFormat)
-   */
-  public DocData parse(DocData docData, String name, Date date, StringBuffer inputText, DateFormat dateFormat) throws IOException, InterruptedException;
 
 }
Index: lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker.java
===================================================================
--- lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker.java	(revision 1052021)
+++ lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker.java	(working copy)
@@ -400,7 +400,7 @@
   public void printDocStatistics() {
     boolean print = false;
     String col = "                  ";
-    StringBuffer sb = new StringBuffer();
+    StringBuilder sb = new StringBuilder();
     String newline = System.getProperty("line.separator");
     sb.append("------------> ").append(getClass().getSimpleName()).append(" statistics (").append(printNum).append("): ").append(newline);
     int nut = source.getTotalDocsCount();
Index: lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DemoHTMLParser.java
===================================================================
--- lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DemoHTMLParser.java	(revision 1052021)
+++ lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DemoHTMLParser.java	(working copy)
@@ -40,7 +40,7 @@
     // body
     Reader r = p.getReader();
     char c[] = new char[1024];
-    StringBuffer bodyBuf = new StringBuffer();
+    StringBuilder bodyBuf = new StringBuilder();
     int n;
     while ((n = r.read(c)) >= 0) {
       if (n>0) {
@@ -67,12 +67,4 @@
     return docData;
   }
 
-  /*
-   *  (non-Javadoc)
-   * @see org.apache.lucene.benchmark.byTask.feeds.HTMLParser#parse(java.lang.String, java.util.Date, java.lang.StringBuffer, java.text.DateFormat)
-   */
-  public DocData parse(DocData docData, String name, Date date, StringBuffer inputText, DateFormat dateFormat) throws IOException, InterruptedException {
-    return parse(docData, name, date, new StringReader(inputText.toString()), dateFormat);
-  }
-
 }
Index: lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DirContentSource.java
===================================================================
--- lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DirContentSource.java	(revision 1052021)
+++ lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DirContentSource.java	(working copy)
@@ -202,7 +202,7 @@
     reader.readLine();//skip an empty line
     String title = reader.readLine();
     reader.readLine();//skip an empty line
-    StringBuffer bodyBuf = new StringBuffer(1024);
+    StringBuilder bodyBuf = new StringBuilder(1024);
     while ((line = reader.readLine()) != null) {
       bodyBuf.append(line).append(' ');
     }
Index: lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/stats/TaskStats.java
===================================================================
--- lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/stats/TaskStats.java	(revision 1052021)
+++ lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/stats/TaskStats.java	(working copy)
@@ -120,7 +120,7 @@
    */
   @Override
   public String toString() {
-    StringBuffer res = new StringBuffer(task.getName());
+    StringBuilder res = new StringBuilder(task.getName());
     res.append(" ");
     res.append(count);
     res.append(" ");
Index: lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/MemUsage.java
===================================================================
--- lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/MemUsage.java	(revision 1052021)
+++ lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/MemUsage.java	(working copy)
@@ -31,7 +31,7 @@
 
   /** Scale down the values by divisor, append the unit string. */
   public String toScaledString(int div, String unit) {
-    StringBuffer sb = new StringBuffer();
+    StringBuilder sb = new StringBuilder();
       sb.append("free=").append(minFree / div);
       sb.append("/").append(avgFree / div);
       sb.append("/").append(maxFree / div).append(" ").append(unit);
Index: lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TimeData.java
===================================================================
--- lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TimeData.java	(revision 1052021)
+++ lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TimeData.java	(working copy)
@@ -95,7 +95,7 @@
    * @return The String
    */
   public String toString(boolean withMem) {
-    StringBuffer sb = new StringBuffer();
+    StringBuilder sb = new StringBuilder();
     sb.append(count + "\t" + elapsed + "\t" + getRate());
     if (withMem) sb.append("\t" + freeMem + "\t" + totalMem);
     return sb.toString();
Index: lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TestData.java
===================================================================
--- lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TestData.java	(revision 1052021)
+++ lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TestData.java	(working copy)
@@ -133,7 +133,7 @@
             return "# [NO RUN DATA]";
         }
         HashMap<String,LDCounter> resByTask = new HashMap<String,LDCounter>(); 
-        StringBuffer sb = new StringBuffer();
+        StringBuilder sb = new StringBuilder();
         String lineSep = System.getProperty("line.separator");
         sb.append("warm = Warm Index Reader").append(lineSep).append("srch = Search Index").append(lineSep).append("trav = Traverse Hits list, optionally retrieving document").append(lineSep).append(lineSep);
         for (int i = 0; i < COLS.length; i++) {
@@ -446,7 +446,7 @@
     @Override
     public String toString()
     {
-        StringBuffer res = new StringBuffer();
+        StringBuilder res = new StringBuilder();
         res.append("#-- ID: ").append(id).append(", ").append(new Date()).append(", heap=").append(heap).append(" --\n");
         res.append("# source=").append(source).append(", directory=").append(directory).append("\n");
         res.append("# maxBufferedDocs=").append(maxBufferedDocs).append(", mergeFactor=").append(mergeFactor);
Index: lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TestRunData.java
===================================================================
--- lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TestRunData.java	(revision 1052021)
+++ lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TestRunData.java	(working copy)
@@ -162,7 +162,7 @@
   /** Return a string representation. */
   @Override
   public String toString() {
-    StringBuffer sb = new StringBuffer();
+    StringBuilder sb = new StringBuilder();
     for (final String label : getLabels()) {
         sb.append(id).append("-").append(label).append(" ").append(getTotals(label).toString(false)).append(" ");
         sb.append(getMemUsage(label).toScaledString(1024 * 1024, "MB")).append("\n");
