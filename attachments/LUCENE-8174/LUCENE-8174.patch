From 8a0fcf287400eaaa711d272de2920128185039e7 Mon Sep 17 00:00:00 2001
From: Oliver Kaleske <oliver.kaleske@ptvgroup.com>
Date: Thu, 15 Feb 2018 11:30:02 +0100
Subject: [PATCH] LUCENE-8174: Fixed toString method of
 (Double|Float|Int|Long)Range classes.

The previous implementation produced an ArrayOutOfBoundsException because of an incorrect calculation of the dimension index.
Also, the ranges for each dimension were never appended to the StringBuilder at all (which, however, could not actually be observed due to the exception).
---
 .../org/apache/lucene/document/DoubleRange.java    |  4 ++--
 .../org/apache/lucene/document/FloatRange.java     |  4 ++--
 .../java/org/apache/lucene/document/IntRange.java  |  4 ++--
 .../java/org/apache/lucene/document/LongRange.java |  4 ++--
 .../apache/lucene/document/TestDoubleRange.java    | 26 +++++++++++++++++++++
 .../org/apache/lucene/document/TestFloatRange.java | 27 ++++++++++++++++++++++
 .../org/apache/lucene/document/TestIntRange.java   | 26 +++++++++++++++++++++
 .../org/apache/lucene/document/TestLongRange.java  | 26 +++++++++++++++++++++
 8 files changed, 113 insertions(+), 8 deletions(-)
 create mode 100644 lucene/core/src/test/org/apache/lucene/document/TestDoubleRange.java
 create mode 100644 lucene/core/src/test/org/apache/lucene/document/TestFloatRange.java
 create mode 100644 lucene/core/src/test/org/apache/lucene/document/TestIntRange.java
 create mode 100644 lucene/core/src/test/org/apache/lucene/document/TestLongRange.java

diff --git a/lucene/core/src/java/org/apache/lucene/document/DoubleRange.java b/lucene/core/src/java/org/apache/lucene/document/DoubleRange.java
index c1d2dc50aa..cf308c37a6 100644
--- a/lucene/core/src/java/org/apache/lucene/document/DoubleRange.java
+++ b/lucene/core/src/java/org/apache/lucene/document/DoubleRange.java
@@ -244,9 +244,9 @@ public class DoubleRange extends Field {
     sb.append(':');
     byte[] b = ((BytesRef)fieldsData).bytes;
     toString(b, 0);
-    for (int d=1; d<type.pointDimensionCount(); ++d) {
+    for (int d = 0; d < type.pointDimensionCount() / 2; ++d) {
       sb.append(' ');
-      toString(b, d);
+      sb.append(toString(b, d));
     }
     sb.append('>');
 
diff --git a/lucene/core/src/java/org/apache/lucene/document/FloatRange.java b/lucene/core/src/java/org/apache/lucene/document/FloatRange.java
index facf23b660..9b555d68f7 100644
--- a/lucene/core/src/java/org/apache/lucene/document/FloatRange.java
+++ b/lucene/core/src/java/org/apache/lucene/document/FloatRange.java
@@ -244,9 +244,9 @@ public class FloatRange extends Field {
     sb.append(':');
     byte[] b = ((BytesRef)fieldsData).bytes;
     toString(b, 0);
-    for (int d=1; d<type.pointDimensionCount(); ++d) {
+    for (int d = 0; d < type.pointDimensionCount() / 2; ++d) {
       sb.append(' ');
-      toString(b, d);
+      sb.append(toString(b, d));
     }
     sb.append('>');
 
diff --git a/lucene/core/src/java/org/apache/lucene/document/IntRange.java b/lucene/core/src/java/org/apache/lucene/document/IntRange.java
index b4266133bf..e67b94f31d 100644
--- a/lucene/core/src/java/org/apache/lucene/document/IntRange.java
+++ b/lucene/core/src/java/org/apache/lucene/document/IntRange.java
@@ -244,9 +244,9 @@ public class IntRange extends Field {
     sb.append(':');
     byte[] b = ((BytesRef)fieldsData).bytes;
     toString(b, 0);
-    for (int d=1; d<type.pointDimensionCount(); ++d) {
+    for (int d = 0; d < type.pointDimensionCount() / 2; ++d) {
       sb.append(' ');
-      toString(b, d);
+      sb.append(toString(b, d));
     }
     sb.append('>');
 
diff --git a/lucene/core/src/java/org/apache/lucene/document/LongRange.java b/lucene/core/src/java/org/apache/lucene/document/LongRange.java
index 5c1c7632c6..1a1b19a5a8 100644
--- a/lucene/core/src/java/org/apache/lucene/document/LongRange.java
+++ b/lucene/core/src/java/org/apache/lucene/document/LongRange.java
@@ -242,9 +242,9 @@ public class LongRange extends Field {
     sb.append(':');
     byte[] b = ((BytesRef)fieldsData).bytes;
     toString(b, 0);
-    for (int d=1; d<type.pointDimensionCount(); ++d) {
+    for (int d = 0; d < type.pointDimensionCount() / 2; ++d) {
       sb.append(' ');
-      toString(b, d);
+      sb.append(toString(b, d));
     }
     sb.append('>');
 
diff --git a/lucene/core/src/test/org/apache/lucene/document/TestDoubleRange.java b/lucene/core/src/test/org/apache/lucene/document/TestDoubleRange.java
new file mode 100644
index 0000000000..45a11cf340
--- /dev/null
+++ b/lucene/core/src/test/org/apache/lucene/document/TestDoubleRange.java
@@ -0,0 +1,26 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.lucene.document;
+
+import org.apache.lucene.util.LuceneTestCase;
+
+public class TestDoubleRange extends LuceneTestCase {
+  public void testToString() {
+    DoubleRange range = new DoubleRange("foo", new double[] { 0.1, 1.1, 2.1, 3.1 }, new double[] { .2, 1.2, 2.2, 3.2 });
+    assertEquals("DoubleRange <foo: [0.1 : 0.2] [1.1 : 1.2] [2.1 : 2.2] [3.1 : 3.2]>", range.toString());
+  }
+}
diff --git a/lucene/core/src/test/org/apache/lucene/document/TestFloatRange.java b/lucene/core/src/test/org/apache/lucene/document/TestFloatRange.java
new file mode 100644
index 0000000000..00f8c7b613
--- /dev/null
+++ b/lucene/core/src/test/org/apache/lucene/document/TestFloatRange.java
@@ -0,0 +1,27 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.lucene.document;
+
+import org.apache.lucene.util.LuceneTestCase;
+
+public class TestFloatRange extends LuceneTestCase {
+  public void testToString() {
+    FloatRange range = new FloatRange("foo", new float[] { 0.1f, 1.1f, 2.1f, 3.1f },
+        new float[] { 0.2f, 1.2f, 2.2f, 3.2f });
+    assertEquals("FloatRange <foo: [0.1 : 0.2] [1.1 : 1.2] [2.1 : 2.2] [3.1 : 3.2]>", range.toString());
+  }
+}
diff --git a/lucene/core/src/test/org/apache/lucene/document/TestIntRange.java b/lucene/core/src/test/org/apache/lucene/document/TestIntRange.java
new file mode 100644
index 0000000000..78697c6bc8
--- /dev/null
+++ b/lucene/core/src/test/org/apache/lucene/document/TestIntRange.java
@@ -0,0 +1,26 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.lucene.document;
+
+import org.apache.lucene.util.LuceneTestCase;
+
+public class TestIntRange extends LuceneTestCase {
+  public void testToString() {
+    IntRange range = new IntRange("foo", new int[] { 1, 11, 21, 31 }, new int[] { 2, 12, 22, 32 });
+    assertEquals("IntRange <foo: [1 : 2] [11 : 12] [21 : 22] [31 : 32]>", range.toString());
+  }
+}
diff --git a/lucene/core/src/test/org/apache/lucene/document/TestLongRange.java b/lucene/core/src/test/org/apache/lucene/document/TestLongRange.java
new file mode 100644
index 0000000000..b99e4da8c1
--- /dev/null
+++ b/lucene/core/src/test/org/apache/lucene/document/TestLongRange.java
@@ -0,0 +1,26 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.lucene.document;
+
+import org.apache.lucene.util.LuceneTestCase;
+
+public class TestLongRange extends LuceneTestCase {
+  public void testToString() {
+    LongRange range = new LongRange("foo", new long[] { 1, 11, 21, 31 }, new long[] { 2, 12, 22, 32 });
+    assertEquals("LongRange <foo: [1 : 2] [11 : 12] [21 : 22] [31 : 32]>", range.toString());
+  }
+}
-- 
2.15.0.windows.1

