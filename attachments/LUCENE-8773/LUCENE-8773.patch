From 874c39c3558e295938f548f7f5e2b1adce1f12d7 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Thomas=20Lemm=C3=A9?= <huzi@gmx.at>
Date: Tue, 30 Apr 2019 21:39:18 +0200
Subject: [PATCH] LUCENE-8773

---
 .../prefix/tree/DateRangePrefixTree.java      |  6 ++--
 .../prefix/tree/DateRangePrefixTreeTest.java  | 28 +++++++++++++++++++
 2 files changed, 32 insertions(+), 2 deletions(-)

diff --git a/lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree.java b/lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree.java
index 2466b235da..e832245342 100644
--- a/lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree.java
+++ b/lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree.java
@@ -504,8 +504,10 @@ public class DateRangePrefixTree extends NumberRangePrefixTree {
       checkDelimeter(str, offset-1, '.');
       //ms:
 
-      cal.set(Calendar.MILLISECOND, Integer.parseInt(str.substring(offset, offset+3)));
-      offset += 3;//last one, move to next char
+      int maxOffset = lastOffset - offset;
+      int millis = (int) (Integer.parseInt(str.substring(offset, offset + maxOffset)) / Math.pow(10, maxOffset - 3));
+      cal.set(Calendar.MILLISECOND, millis);
+      offset += maxOffset;//last one, move to next char
       if (lastOffset == offset)
         return cal;
     } catch (Exception e) {
diff --git a/lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTreeTest.java b/lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTreeTest.java
index 0670a268c8..c14026fbd0 100644
--- a/lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTreeTest.java
+++ b/lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTreeTest.java
@@ -17,8 +17,11 @@
 package org.apache.lucene.spatial.prefix.tree;
 
 import java.text.ParseException;
+import java.time.Instant;
+import java.time.OffsetDateTime;
 import java.time.ZoneOffset;
 import java.time.ZonedDateTime;
+import java.time.temporal.ChronoField;
 import java.util.Arrays;
 import java.util.Calendar;
 import java.util.GregorianCalendar;
@@ -30,6 +33,8 @@ import org.apache.lucene.util.LuceneTestCase;
 import org.locationtech.spatial4j.shape.Shape;
 import org.locationtech.spatial4j.shape.SpatialRelation;
 
+import static java.time.format.DateTimeFormatter.ISO_DATE_TIME;
+
 public class DateRangePrefixTreeTest extends LuceneTestCase {
 
   @ParametersFactory(argumentFormatting = "calendar=%s")
@@ -113,6 +118,29 @@ public class DateRangePrefixTreeTest extends LuceneTestCase {
     assertEquals(cal, tree.parseCalendar(expectedISO8601));
   }
 
+  public void testParseCalendar() throws ParseException {
+    Instant expected = OffsetDateTime.of(1984, 12, 18, 12, 34, 56, 100000000, ZoneOffset.UTC).toInstant();
+
+    assertEquals(expected, tree.parseCalendar("1984-12-18T12:34:56.1Z").toInstant());
+    assertEquals(expected.with(ChronoField.MILLI_OF_SECOND, 10), tree.parseCalendar("1984-12-18T12:34:56.01Z").toInstant());
+    assertEquals(expected.with(ChronoField.MILLI_OF_SECOND, 1), tree.parseCalendar("1984-12-18T12:34:56.001Z").toInstant());
+    assertEquals(expected, tree.parseCalendar("1984-12-18T12:34:56.1000Z").toInstant());
+    assertEquals(expected, tree.parseCalendar("1984-12-18T12:34:56.100000000Z").toInstant());
+    assertEquals(expected.with(ChronoField.NANO_OF_SECOND, 0), tree.parseCalendar("1984-12-18T12:34:56Z").toInstant());
+    // decimal places are simply cut off as rounding may affect the "seconds" part of the calender which was set before
+    assertEquals(expected.with(ChronoField.MILLI_OF_SECOND, 999), tree.parseCalendar("1984-12-18T12:34:56.9999Z").toInstant());
+
+    assertEquals(expected, tree.parseCalendar("1984-12-18T12:34:56.1").toInstant());
+    assertEquals(expected.with(ChronoField.MILLI_OF_SECOND, 10), tree.parseCalendar("1984-12-18T12:34:56.01").toInstant());
+    assertEquals(expected.with(ChronoField.MILLI_OF_SECOND, 1), tree.parseCalendar("1984-12-18T12:34:56.001").toInstant());
+    assertEquals(expected, tree.parseCalendar("1984-12-18T12:34:56.1000").toInstant());
+    assertEquals(expected, tree.parseCalendar("1984-12-18T12:34:56.100000000").toInstant());
+    assertEquals(expected.with(ChronoField.NANO_OF_SECOND, 0), tree.parseCalendar("1984-12-18T12:34:56").toInstant());
+    assertEquals(expected.with(ChronoField.MILLI_OF_SECOND, 999), tree.parseCalendar("1984-12-18T12:34:56.9999").toInstant());
+    
+    assertEquals(OffsetDateTime.parse("1984-12-18T12:34:56.01Z", ISO_DATE_TIME).get(ChronoField.MILLI_OF_SECOND), 10);
+  }
+
   //copies from DateRangePrefixTree
   private static final int[] CAL_FIELDS = {
       Calendar.YEAR, Calendar.MONTH, Calendar.DAY_OF_MONTH,
-- 
2.19.1.windows.1

