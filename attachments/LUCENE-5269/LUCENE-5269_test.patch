Index: lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestBugInSomething.java
===================================================================
--- lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestBugInSomething.java	(revision 1530798)
+++ lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestBugInSomething.java	(working copy)
@@ -1,8 +1,10 @@
 package org.apache.lucene.analysis.core;
 
+import java.io.IOException;
 import java.io.Reader;
 import java.io.StringReader;
 import java.nio.CharBuffer;
+import java.util.regex.Pattern;
 
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.BaseTokenStreamTestCase;
@@ -11,11 +13,20 @@
 import org.apache.lucene.analysis.MockTokenFilter;
 import org.apache.lucene.analysis.MockTokenizer;
 import org.apache.lucene.analysis.TokenFilter;
+import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.Tokenizer;
 import org.apache.lucene.analysis.charfilter.MappingCharFilter;
 import org.apache.lucene.analysis.charfilter.NormalizeCharMap;
 import org.apache.lucene.analysis.commongrams.CommonGramsFilter;
+import org.apache.lucene.analysis.de.GermanLightStemFilter;
+import org.apache.lucene.analysis.fa.PersianCharFilter;
+import org.apache.lucene.analysis.ngram.EdgeNGramTokenizer;
+import org.apache.lucene.analysis.ngram.NGramTokenFilter;
+import org.apache.lucene.analysis.pattern.PatternReplaceCharFilter;
+import org.apache.lucene.analysis.payloads.TypeAsPayloadTokenFilter;
+import org.apache.lucene.analysis.shingle.ShingleFilter;
 import org.apache.lucene.analysis.util.CharArraySet;
+import org.apache.lucene.util.Version;
 
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
@@ -195,4 +206,75 @@
       assertEquals("read(char[], int, int)", e.getMessage());
     }
   }
+  
+  // todo: test framework?
+  
+  static final class SopTokenFilter extends TokenFilter {
+
+    SopTokenFilter(TokenStream input) {
+      super(input);
+    }
+
+    @Override
+    public boolean incrementToken() throws IOException {
+      if (input.incrementToken()) {
+        System.out.println(input.getClass().getSimpleName() + "->" + this.reflectAsString(false));
+        return true;
+      } else {
+        return false;
+      }
+    }
+
+    @Override
+    public void end() throws IOException {
+      super.end();
+      System.out.println(input.getClass().getSimpleName() + ".end()");
+    }
+
+    @Override
+    public void close() throws IOException {
+      super.close();
+      System.out.println(input.getClass().getSimpleName() + ".close()");
+    }
+
+    @Override
+    public void reset() throws IOException {
+      super.reset();
+      System.out.println(input.getClass().getSimpleName() + ".reset()");
+    }
+  }
+  
+  public void testSomethingBuggy() throws Exception {
+    Analyzer analyzer = new Analyzer() {
+      @Override
+      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {
+        Tokenizer tokenizer = new EdgeNGramTokenizer(Version.LUCENE_46, reader, 2, 94);
+        TokenStream stream = new SopTokenFilter(tokenizer);
+        stream = new ShingleFilter(stream, 54);
+        stream = new SopTokenFilter(stream);
+        stream = new NGramTokenFilter(Version.LUCENE_46, stream, 55, 83);
+        // VERY NOISY 
+        stream = new SopTokenFilter(stream);
+        return new TokenStreamComponents(tokenizer, stream);
+      }  
+    };
+    checkRandomData(random(), analyzer, 10000);
+    // note original fail doesnt want to reproduce on exact text and config.
+    // but shove random data at it and it fails well.
+    //  [junit4]   2> TEST FAIL: useCharFilter=false text='\ucd6f\u8537\uab05d\uf3cd qkt  \u0136'
+    //  [junit4]   2> Exception from random analyzer: 
+    //  [junit4]   2> charfilters=
+    //  [junit4]   2>   org.apache.lucene.analysis.fa.PersianCharFilter(java.io.StringReader@2e5d69b4)
+    //  [junit4]   2>   org.apache.lucene.analysis.pattern.PatternReplaceCharFilter(a, , org.apache.lucene.analysis.fa.PersianCharFilter@76c6c033)
+    //  [junit4]   2> tokenizer=
+    //  [junit4]   2>   org.apache.lucene.analysis.ngram.EdgeNGramTokenizer(LUCENE_46, org.apache.lucene.util.AttributeSource$AttributeFactory$DefaultAttributeFactory@9f6c439, org.apache.lucene.analysis.core.TestRandomChains$CheckThatYouDidntReadAnythingReaderWrapper@72749130, 2, 94)
+    //  [junit4]   2> filters=
+    //  [junit4]   2>   org.apache.lucene.analysis.payloads.TypeAsPayloadTokenFilter(org.apache.lucene.analysis.ValidatingTokenFilter@4652ea)
+    //  [junit4]   2>   org.apache.lucene.analysis.de.GermanLightStemFilter(org.apache.lucene.analysis.ValidatingTokenFilter@8840a7b)
+    //  [junit4]   2>   org.apache.lucene.analysis.shingle.ShingleFilter(org.apache.lucene.analysis.ValidatingTokenFilter@8840a7b, 54)
+    //  [junit4]   2>   org.apache.lucene.analysis.ngram.NGramTokenFilter(LUCENE_46, org.apache.lucene.analysis.ValidatingTokenFilter@8840a7b, 55, 83)
+    //  [junit4]   2> offsetsAreCorrect=true
+    //  [junit4]   2> NOTE: download the large Jenkins line-docs file by running 'ant get-jenkins-line-docs' in the lucene directory.
+    //
+  }
 }
