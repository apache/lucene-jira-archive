Index: src/test/org/apache/lucene/analysis/TestStandardAnalyzer.java
===================================================================
--- src/test/org/apache/lucene/analysis/TestStandardAnalyzer.java	(revision 692319)
+++ src/test/org/apache/lucene/analysis/TestStandardAnalyzer.java	(working copy)
@@ -23,8 +23,14 @@
 
 public class TestStandardAnalyzer extends LuceneTestCase {
 
-  private Analyzer a = new StandardAnalyzer();
+  private Analyzer a;
 
+  protected void setUp() throws Exception {
+    super.setUp();
+    // reset the StandardAnalyzer, to ensure no unexpected side-effects of previous tests.
+    a = new StandardAnalyzer();
+  }
+
   public void assertAnalyzesTo(Analyzer a, String input, String[] expected) throws Exception {
     assertAnalyzesTo(a, input, expected, null);
   }
Index: src/test/org/apache/lucene/analysis/TestStandardTokenizer.java
===================================================================
--- src/test/org/apache/lucene/analysis/TestStandardTokenizer.java	(revision 0)
+++ src/test/org/apache/lucene/analysis/TestStandardTokenizer.java	(revision 0)
@@ -0,0 +1,45 @@
+package org.apache.lucene.analysis;
+
+import java.io.StringReader;
+
+import org.apache.lucene.analysis.standard.StandardTokenizer;
+import org.apache.lucene.util.LuceneTestCase;
+
+public class TestStandardTokenizer extends LuceneTestCase {
+	protected void setUp() throws Exception {
+		super.setUp();
+	}
+
+	public static void assertTokenizesTo(Tokenizer tokenizer, String[] expectedImages, String[] expectedTypes) throws Exception {
+		assertTokenizesTo(tokenizer, expectedImages, expectedTypes, null);
+	}
+
+	public static void assertTokenizesTo(Tokenizer tokenizer, String[] expectedImages, String[] expectedTypes, int[] expectedPosIncrs) throws Exception {
+		final Token reusableToken = new Token();
+		for (int i = 0; i < expectedImages.length; i++) {
+			Token nextToken = tokenizer.next(reusableToken);
+			assertNotNull(nextToken);
+			assertEquals(expectedImages[i], nextToken.term());
+			if (expectedTypes != null) {
+				assertEquals(expectedTypes[i], nextToken.type());
+			}
+			if (expectedPosIncrs != null) {
+				assertEquals(expectedPosIncrs[i], nextToken.getPositionIncrement());
+			}
+		}
+		assertNull(tokenizer.next(reusableToken));
+		tokenizer.close();
+	}
+
+	public void testDomainNames() throws Exception {
+		// domain names
+		assertTokenizesTo(new StandardTokenizer(new StringReader("www.nutch.org")), new String[]{"www.nutch.org"}, new String[] { "<HOST>" });
+		//Notice the trailing .  See https://issues.apache.org/jira/browse/LUCENE-1068.
+		// the following should be recognized as HOST:
+		// Default behaviour - ReplaceInvalidAcronym = true
+		assertTokenizesTo(new StandardTokenizer(new StringReader("www.nutch.org.")), new String[]{ "www.nutch.org" }, new String[] { "<HOST>" });
+		// Change Default behaviour to ReplaceInvalidAcronym = false
+		StandardTokenizer.setDefaultReplaceInvalidAcronym(false);
+		assertTokenizesTo(new StandardTokenizer(new StringReader("www.nutch.org.")), new String[]{ "www.nutch.org." }, new String[] { "<ACRONYM>" });
+	}
+}
Index: src/java/org/apache/lucene/analysis/standard/StandardAnalyzer.java
===================================================================
--- src/java/org/apache/lucene/analysis/standard/StandardAnalyzer.java	(revision 692319)
+++ src/java/org/apache/lucene/analysis/standard/StandardAnalyzer.java	(working copy)
@@ -35,55 +35,13 @@
 
   /**
    * Specifies whether deprecated acronyms should be replaced with HOST type.
-   * This is false by default to support backward compatibility.
    * 
    * @deprecated this should be removed in the next release (3.0).
    *
    * See https://issues.apache.org/jira/browse/LUCENE-1068
    */
-  private boolean replaceInvalidAcronym = defaultReplaceInvalidAcronym;
+  private boolean replaceInvalidAcronym = StandardTokenizer.getDefaultReplaceInvalidAcronym();
 
-  private static boolean defaultReplaceInvalidAcronym;
-
-  // Default to false (fixed the bug), unless the system prop is set
-  static {
-    final String v = System.getProperty("org.apache.lucene.analysis.standard.StandardAnalyzer.replaceInvalidAcronym");
-    if (v == null || v.equals("true"))
-      defaultReplaceInvalidAcronym = true;
-    else
-      defaultReplaceInvalidAcronym = false;
-  }
-
-  /**
-   *
-   * @return true if new instances of StandardTokenizer will
-   * replace mischaracterized acronyms
-   *
-   * See https://issues.apache.org/jira/browse/LUCENE-1068
-   * @deprecated This will be removed (hardwired to true) in 3.0
-   */
-  public static boolean getDefaultReplaceInvalidAcronym() {
-    return defaultReplaceInvalidAcronym;
-  }
-
-  /**
-   *
-   * @param replaceInvalidAcronym Set to true to have new
-   * instances of StandardTokenizer replace mischaracterized
-   * acronyms by default.  Set to false to preseve the
-   * previous (before 2.4) buggy behavior.  Alternatively,
-   * set the system property
-   * org.apache.lucene.analysis.standard.StandardAnalyzer.replaceInvalidAcronym
-   * to false.
-   *
-   * See https://issues.apache.org/jira/browse/LUCENE-1068
-   * @deprecated This will be removed (hardwired to true) in 3.0
-   */
-  public static void setDefaultReplaceInvalidAcronym(boolean replaceInvalidAcronym) {
-    defaultReplaceInvalidAcronym = replaceInvalidAcronym;
-  }
-
-
   /** An array containing some common English words that are usually not
   useful for searching. */
   public static final String[] STOP_WORDS = StopAnalyzer.ENGLISH_STOP_WORDS;
Index: src/java/org/apache/lucene/analysis/standard/StandardTokenizer.java
===================================================================
--- src/java/org/apache/lucene/analysis/standard/StandardTokenizer.java	(revision 692319)
+++ src/java/org/apache/lucene/analysis/standard/StandardTokenizer.java	(working copy)
@@ -78,13 +78,53 @@
 
   /**
    * Specifies whether deprecated acronyms should be replaced with HOST type.
-   * This is false by default to support backward compatibility.
+   * 
    *<p/>
    * See http://issues.apache.org/jira/browse/LUCENE-1068
    * 
    * @deprecated this should be removed in the next release (3.0).
    */
-  private boolean replaceInvalidAcronym = false;
+  private boolean replaceInvalidAcronym = defaultReplaceInvalidAcronym;
+
+  private static boolean defaultReplaceInvalidAcronym;
+
+  // Default to true (fixed the bug), unless the system prop is set
+  static {
+    final String v = System.getProperty("org.apache.lucene.analysis.standard.StandardTokenizer.replaceInvalidAcronym");
+    if (v == null || v.equals("true"))
+      defaultReplaceInvalidAcronym = true;
+    else
+      defaultReplaceInvalidAcronym = false;
+  }
+
+  /**
+   *
+   * @return true if new instances of StandardTokenizer will
+   * replace mischaracterized acronyms
+   *
+   * See https://issues.apache.org/jira/browse/LUCENE-1068
+   * @deprecated This will be removed (hardwired to true) in 3.0
+   */
+  public static boolean getDefaultReplaceInvalidAcronym() {
+    return defaultReplaceInvalidAcronym;
+  }
+
+  /**
+   *
+   * @param replaceInvalidAcronym Set to true to have new
+   * instances of StandardTokenizer replace mischaracterized
+   * acronyms by default.  Set to false to preseve the
+   * previous (before 2.4) buggy behavior.  Alternatively,
+   * set the system property
+   * org.apache.lucene.analysis.standard.StandardAnalyzer.replaceInvalidAcronym
+   * to false.
+   *
+   * See https://issues.apache.org/jira/browse/LUCENE-1068
+   * @deprecated This will be removed (hardwired to true) in 3.0
+   */
+  public static void setDefaultReplaceInvalidAcronym(boolean replaceInvalidAcronym) {
+    defaultReplaceInvalidAcronym = replaceInvalidAcronym;
+  }
     
   void setInput(Reader reader) {
     this.input = reader;
