Index: src/java/org/apache/lucene/search/FieldCacheImpl.java
===================================================================
--- src/java/org/apache/lucene/search/FieldCacheImpl.java	(revision 826792)
+++ src/java/org/apache/lucene/search/FieldCacheImpl.java	(working copy)
@@ -21,13 +21,10 @@
 import java.io.PrintStream;
 import java.util.ArrayList;
 import java.util.HashMap;
-import java.util.Iterator;
 import java.util.List;
-import java.util.Locale;
 import java.util.Map;
 import java.util.WeakHashMap;
 
-import org.apache.lucene.document.NumericField; // javadoc
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.index.TermDocs;
@@ -45,12 +42,12 @@
  */
 class FieldCacheImpl implements FieldCache {
 	
-  private Map caches;
+  private Map<Class,Cache> caches;
   FieldCacheImpl() {
     init();
   }
   private synchronized void init() {
-    caches = new HashMap(7);
+    caches = new HashMap<Class,Cache>(7);
     caches.put(Byte.TYPE, new ByteCache(this));
     caches.put(Short.TYPE, new ShortCache(this));
     caches.put(Integer.TYPE, new IntCache(this));
@@ -66,23 +63,18 @@
   }
   
   public CacheEntry[] getCacheEntries() {
-    List result = new ArrayList(17);
-    Iterator outerKeys = caches.keySet().iterator();
-    while (outerKeys.hasNext()) {
-      Class cacheType = (Class)outerKeys.next();
-      Cache cache = (Cache)caches.get(cacheType);
-      Iterator innerKeys = cache.readerCache.keySet().iterator();
-      while (innerKeys.hasNext()) {
+    List<CacheEntry> result = new ArrayList<CacheEntry>(17);
+    for(final Class cacheType: caches.keySet()) {
+      Cache cache = caches.get(cacheType);
+      for (final Object readerKey : cache.readerCache.keySet()) {
         // we've now materialized a hard ref
-        Object readerKey = innerKeys.next();
+        
         // innerKeys was backed by WeakHashMap, sanity check
         // that it wasn't GCed before we made hard ref
         if (null != readerKey && cache.readerCache.containsKey(readerKey)) {
-          Map innerCache = ((Map)cache.readerCache.get(readerKey));
-          Iterator entrySetIterator = innerCache.entrySet().iterator();
-          while (entrySetIterator.hasNext()) {
-            Map.Entry mapEntry = (Map.Entry) entrySetIterator.next();
-            Entry entry = (Entry) mapEntry.getKey();
+          Map<Entry, Object> innerCache = cache.readerCache.get(readerKey);
+          for (final Map.Entry<Entry, Object> mapEntry : innerCache.entrySet()) {
+            Entry entry = mapEntry.getKey();
             result.add(new CacheEntryImpl(readerKey, entry.field,
                                           cacheType, entry.custom,
                                           mapEntry.getValue()));
@@ -90,7 +82,7 @@
         }
       }
     }
-    return (CacheEntry[]) result.toArray(new CacheEntry[result.size()]);
+    return result.toArray(new CacheEntry[result.size()]);
   }
   
   private static final class CacheEntryImpl extends CacheEntry {
@@ -142,19 +134,19 @@
 
     final FieldCache wrapper;
 
-    final Map readerCache = new WeakHashMap();
+    final Map<Object,Map<Entry,Object>> readerCache = new WeakHashMap<Object,Map<Entry,Object>>();
     
     protected abstract Object createValue(IndexReader reader, Entry key)
         throws IOException;
 
     public Object get(IndexReader reader, Entry key) throws IOException {
-      Map innerCache;
+      Map<Entry,Object> innerCache;
       Object value;
       final Object readerKey = reader.getFieldCacheKey();
       synchronized (readerCache) {
-        innerCache = (Map) readerCache.get(readerKey);
+        innerCache = readerCache.get(readerKey);
         if (innerCache == null) {
-          innerCache = new HashMap();
+          innerCache = new HashMap<Entry,Object>();
           readerCache.put(readerKey, innerCache);
           value = null;
         } else {
@@ -248,7 +240,7 @@
   // inherit javadocs
   public byte[] getBytes(IndexReader reader, String field, ByteParser parser)
       throws IOException {
-    return (byte[]) ((Cache)caches.get(Byte.TYPE)).get(reader, new Entry(field, parser));
+    return (byte[]) caches.get(Byte.TYPE).get(reader, new Entry(field, parser));
   }
 
   static final class ByteCache extends Cache {
@@ -257,7 +249,7 @@
     }
     protected Object createValue(IndexReader reader, Entry entryKey)
         throws IOException {
-      Entry entry = (Entry) entryKey;
+      Entry entry = entryKey;
       String field = entry.field;
       ByteParser parser = (ByteParser) entry.custom;
       if (parser == null) {
@@ -293,7 +285,7 @@
   // inherit javadocs
   public short[] getShorts(IndexReader reader, String field, ShortParser parser)
       throws IOException {
-    return (short[]) ((Cache)caches.get(Short.TYPE)).get(reader, new Entry(field, parser));
+    return (short[]) caches.get(Short.TYPE).get(reader, new Entry(field, parser));
   }
 
   static final class ShortCache extends Cache {
@@ -303,7 +295,7 @@
 
     protected Object createValue(IndexReader reader, Entry entryKey)
         throws IOException {
-      Entry entry = (Entry) entryKey;
+      Entry entry =  entryKey;
       String field = entry.field;
       ShortParser parser = (ShortParser) entry.custom;
       if (parser == null) {
@@ -339,7 +331,7 @@
   // inherit javadocs
   public int[] getInts(IndexReader reader, String field, IntParser parser)
       throws IOException {
-    return (int[]) ((Cache)caches.get(Integer.TYPE)).get(reader, new Entry(field, parser));
+    return (int[]) caches.get(Integer.TYPE).get(reader, new Entry(field, parser));
   }
 
   static final class IntCache extends Cache {
@@ -349,7 +341,7 @@
 
     protected Object createValue(IndexReader reader, Entry entryKey)
         throws IOException {
-      Entry entry = (Entry) entryKey;
+      Entry entry = entryKey;
       String field = entry.field;
       IntParser parser = (IntParser) entry.custom;
       if (parser == null) {
@@ -396,7 +388,7 @@
   public float[] getFloats(IndexReader reader, String field, FloatParser parser)
     throws IOException {
 
-    return (float[]) ((Cache)caches.get(Float.TYPE)).get(reader, new Entry(field, parser));
+    return (float[]) caches.get(Float.TYPE).get(reader, new Entry(field, parser));
   }
 
   static final class FloatCache extends Cache {
@@ -406,7 +398,7 @@
 
     protected Object createValue(IndexReader reader, Entry entryKey)
         throws IOException {
-      Entry entry = (Entry) entryKey;
+      Entry entry = entryKey;
       String field = entry.field;
       FloatParser parser = (FloatParser) entry.custom;
       if (parser == null) {
@@ -450,7 +442,7 @@
   // inherit javadocs
   public long[] getLongs(IndexReader reader, String field, FieldCache.LongParser parser)
       throws IOException {
-    return (long[]) ((Cache)caches.get(Long.TYPE)).get(reader, new Entry(field, parser));
+    return (long[]) caches.get(Long.TYPE).get(reader, new Entry(field, parser));
   }
 
   static final class LongCache extends Cache {
@@ -505,7 +497,7 @@
   // inherit javadocs
   public double[] getDoubles(IndexReader reader, String field, FieldCache.DoubleParser parser)
       throws IOException {
-    return (double[]) ((Cache)caches.get(Double.TYPE)).get(reader, new Entry(field, parser));
+    return (double[]) caches.get(Double.TYPE).get(reader, new Entry(field, parser));
   }
 
   static final class DoubleCache extends Cache {
@@ -515,7 +507,7 @@
 
     protected Object createValue(IndexReader reader, Entry entryKey)
         throws IOException {
-      Entry entry = (Entry) entryKey;
+      Entry entry = entryKey;
       String field = entry.field;
       FieldCache.DoubleParser parser = (FieldCache.DoubleParser) entry.custom;
       if (parser == null) {
@@ -554,7 +546,7 @@
   // inherit javadocs
   public String[] getStrings(IndexReader reader, String field)
       throws IOException {
-    return (String[]) ((Cache)caches.get(String.class)).get(reader, new Entry(field, (Parser)null));
+    return (String[]) caches.get(String.class).get(reader, new Entry(field, (Parser)null));
   }
 
   static final class StringCache extends Cache {
@@ -589,7 +581,7 @@
   // inherit javadocs
   public StringIndex getStringIndex(IndexReader reader, String field)
       throws IOException {
-    return (StringIndex) ((Cache)caches.get(StringIndex.class)).get(reader, new Entry(field, (Parser)null));
+    return (StringIndex) caches.get(StringIndex.class).get(reader, new Entry(field, (Parser)null));
   }
 
   static final class StringIndexCache extends Cache {
