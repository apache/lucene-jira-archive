Index: contrib/misc/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser.java
===================================================================
--- contrib/misc/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser.java	(revision 829579)
+++ contrib/misc/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser.java	(working copy)
@@ -250,17 +250,17 @@
   /**
    * @deprecated use {@link #addClause(List, int, int, Query)} instead.
    */
-  protected void addClause(Vector clauses, int conj, int modifier, Query q) {
-    addClause((List) clauses, conj, modifier, q);
+  protected void addClause(Vector<BooleanClause> clauses, int conj, int modifier, Query q) {
+    addClause(clauses, conj, modifier, q);
   }
 
-  protected void addClause(List clauses, int conj, int modifier, Query q) {
+  protected void addClause(List<BooleanClause> clauses, int conj, int modifier, Query q) {
     boolean required, prohibited;
 
     // If this term is introduced by AND, make the preceding term required,
     // unless it's already prohibited
     if (clauses.size() > 0 && conj == CONJ_AND) {
-      BooleanClause c = (BooleanClause) clauses.get(clauses.size()-1);
+      BooleanClause c = clauses.get(clauses.size()-1);
       if (!c.isProhibited())
         c.setOccur(BooleanClause.Occur.MUST);
     }
@@ -270,7 +270,7 @@
       // unless it's prohibited (that means we leave -a OR b but +a OR b-->a OR b)
       // notice if the input is a OR b, first term is parsed as required; without
       // this modification a OR b would parsed as +a OR b
-      BooleanClause c = (BooleanClause) clauses.get(clauses.size()-1);
+      BooleanClause c = clauses.get(clauses.size()-1);
       if (!c.isProhibited())
         c.setOccur(BooleanClause.Occur.SHOULD);
     }
@@ -357,12 +357,12 @@
           for (int i = 0; i < list.size(); i++) {
             source.restoreState(list.get(i));
             if (posincrAtt.getPositionIncrement() == 1 && multiTerms.size() > 0) {
-              mpq.add((Term[])multiTerms.toArray(new Term[0]));
+              mpq.add(multiTerms.toArray(new Term[0]));
               multiTerms.clear();
             }
             multiTerms.add(new Term(field, termAtt.term()));
           }
-          mpq.add((Term[])multiTerms.toArray(new Term[0]));
+          mpq.add(multiTerms.toArray(new Term[0]));
           return mpq;
         }
       }
@@ -438,9 +438,9 @@
    * @exception ParseException throw in overridden method to disallow
    * @deprecated use {@link #getBooleanQuery(List)} instead
    */
-  protected Query getBooleanQuery(Vector clauses) throws ParseException
+  protected Query getBooleanQuery(Vector<BooleanClause> clauses) throws ParseException
   {
-    return getBooleanQuery((List) clauses, false);
+    return getBooleanQuery(clauses, false);
   }
 
   /**
@@ -456,7 +456,7 @@
    * @return Resulting {@link Query} object.
    * @exception ParseException throw in overridden method to disallow
    */
-  protected Query getBooleanQuery(List clauses) throws ParseException
+  protected Query getBooleanQuery(List<BooleanClause> clauses) throws ParseException
   {
     return getBooleanQuery(clauses, false);
   }
@@ -476,10 +476,10 @@
    * @exception ParseException throw in overridden method to disallow
    * @deprecated use {@link #getBooleanQuery(List, boolean)} instead
    */
-  protected Query getBooleanQuery(Vector clauses, boolean disableCoord)
+  protected Query getBooleanQuery(Vector<BooleanClause> clauses, boolean disableCoord)
     throws ParseException
   {
-    return getBooleanQuery((List) clauses, disableCoord);
+    return getBooleanQuery(clauses, disableCoord);
   }
 
   /**
@@ -496,14 +496,14 @@
    * @return Resulting {@link Query} object.
    * @exception ParseException throw in overridden method to disallow
    */
-  protected Query getBooleanQuery(List clauses, boolean disableCoord)
+  protected Query getBooleanQuery(List<BooleanClause> clauses, boolean disableCoord)
       throws ParseException {
     if (clauses == null || clauses.size() == 0)
       return null;
 
     BooleanQuery query = new BooleanQuery(disableCoord);
     for (int i = 0; i < clauses.size(); i++) {
-      query.add((BooleanClause)clauses.get(i));
+      query.add(clauses.get(i));
     }
     return query;
   }
@@ -705,7 +705,7 @@
   }
 
   final public Query Query(String field) throws ParseException {
-  List clauses = new ArrayList();
+  List<BooleanClause> clauses = new ArrayList<BooleanClause>();
   Query q, firstQuery=null;
   boolean orPresent = false;
   int modifier;
@@ -757,7 +757,7 @@
   }
 
   final public Query andExpression(String field) throws ParseException {
-  List clauses = new ArrayList();
+  List<BooleanClause> clauses = new ArrayList<BooleanClause>();
   Query q, firstQuery=null;
   int modifier;
     q = Clause(field);
Index: contrib/misc/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser.jj
===================================================================
--- contrib/misc/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser.jj	(revision 829579)
+++ contrib/misc/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser.jj	(working copy)
@@ -274,17 +274,17 @@
   /**
    * @deprecated use {@link #addClause(List, int, int, Query)} instead.
    */
-  protected void addClause(Vector clauses, int conj, int modifier, Query q) {
-    addClause((List) clauses, conj, modifier, q);
+  protected void addClause(Vector<BooleanClause> clauses, int conj, int modifier, Query q) {
+    addClause(clauses, conj, modifier, q);
   }
 
-  protected void addClause(List clauses, int conj, int modifier, Query q) {
+  protected void addClause(List<BooleanClause> clauses, int conj, int modifier, Query q) {
     boolean required, prohibited;
 
     // If this term is introduced by AND, make the preceding term required,
     // unless it's already prohibited
     if (clauses.size() > 0 && conj == CONJ_AND) {
-      BooleanClause c = (BooleanClause) clauses.get(clauses.size()-1);
+      BooleanClause c = clauses.get(clauses.size()-1);
       if (!c.isProhibited())
         c.setOccur(BooleanClause.Occur.MUST);
     }
@@ -294,7 +294,7 @@
       // unless it's prohibited (that means we leave -a OR b but +a OR b-->a OR b)
       // notice if the input is a OR b, first term is parsed as required; without
       // this modification a OR b would parsed as +a OR b
-      BooleanClause c = (BooleanClause) clauses.get(clauses.size()-1);
+      BooleanClause c = clauses.get(clauses.size()-1);
       if (!c.isProhibited())
         c.setOccur(BooleanClause.Occur.SHOULD);
     }
@@ -381,12 +381,12 @@
           for (int i = 0; i < list.size(); i++) {
             source.restoreState(list.get(i));
             if (posincrAtt.getPositionIncrement() == 1 && multiTerms.size() > 0) {
-              mpq.add((Term[])multiTerms.toArray(new Term[0]));
+              mpq.add(multiTerms.toArray(new Term[0]));
               multiTerms.clear();
             }
             multiTerms.add(new Term(field, termAtt.term()));
           }
-          mpq.add((Term[])multiTerms.toArray(new Term[0]));
+          mpq.add(multiTerms.toArray(new Term[0]));
           return mpq;
         }
       }
@@ -462,9 +462,9 @@
    * @exception ParseException throw in overridden method to disallow
    * @deprecated use {@link #getBooleanQuery(List)} instead
    */
-  protected Query getBooleanQuery(Vector clauses) throws ParseException
+  protected Query getBooleanQuery(Vector<BooleanClause> clauses) throws ParseException
   {
-    return getBooleanQuery((List) clauses, false);
+    return getBooleanQuery(clauses, false);
   }
 
   /**
@@ -480,7 +480,7 @@
    * @return Resulting {@link Query} object.
    * @exception ParseException throw in overridden method to disallow
    */
-  protected Query getBooleanQuery(List clauses) throws ParseException
+  protected Query getBooleanQuery(List<BooleanClause> clauses) throws ParseException
   {
     return getBooleanQuery(clauses, false);
   }
@@ -500,10 +500,10 @@
    * @exception ParseException throw in overridden method to disallow
    * @deprecated use {@link #getBooleanQuery(List, boolean)} instead
    */
-  protected Query getBooleanQuery(Vector clauses, boolean disableCoord)
+  protected Query getBooleanQuery(Vector<BooleanClause> clauses, boolean disableCoord)
     throws ParseException
   {
-    return getBooleanQuery((List) clauses, disableCoord);
+    return getBooleanQuery(clauses, disableCoord);
   }
 
   /**
@@ -520,14 +520,14 @@
    * @return Resulting {@link Query} object.
    * @exception ParseException throw in overridden method to disallow
    */
-  protected Query getBooleanQuery(List clauses, boolean disableCoord)
+  protected Query getBooleanQuery(List<BooleanClause> clauses, boolean disableCoord)
       throws ParseException {
     if (clauses == null || clauses.size() == 0)
       return null;
 
     BooleanQuery query = new BooleanQuery(disableCoord);
     for (int i = 0; i < clauses.size(); i++) {
-      query.add((BooleanClause)clauses.get(i));
+      query.add(clauses.get(i));
     }
     return query;
   }
@@ -763,7 +763,7 @@
 
 Query Query(String field) :
 {
-  List clauses = new ArrayList();
+  List<BooleanClause> clauses = new ArrayList<BooleanClause>();
   Query q, firstQuery=null;
   boolean orPresent = false;
   int modifier;
@@ -790,7 +790,7 @@
 
 Query andExpression(String field) :
 {
-  List clauses = new ArrayList();
+  List<BooleanClause> clauses = new ArrayList<BooleanClause>();
   Query q, firstQuery=null;
   int modifier;
 }

