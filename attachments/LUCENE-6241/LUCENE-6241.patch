Index: lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextCompoundFormat.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextCompoundFormat.java	(revision 1659151)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextCompoundFormat.java	(working copy)
@@ -118,6 +118,11 @@
       }
       
       @Override
+      public boolean isDirectory(String name) throws IOException {
+        return false;
+      }
+
+      @Override
       public long fileLength(String name) throws IOException {
         ensureOpen();
         int index = getIndex(name);
Index: lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50CompoundReader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50CompoundReader.java	(revision 1659151)
+++ lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50CompoundReader.java	(working copy)
@@ -144,6 +144,11 @@
     return res;
   }
   
+  @Override
+  public boolean isDirectory(String name) throws IOException {
+    return false;
+  }
+
   /** Not implemented
    * @throws UnsupportedOperationException always: not supported by CFS */
   @Override
Index: lucene/core/src/java/org/apache/lucene/store/Directory.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/store/Directory.java	(revision 1659151)
+++ lucene/core/src/java/org/apache/lucene/store/Directory.java	(working copy)
@@ -43,11 +43,18 @@
 public abstract class Directory implements Closeable {
 
   /**
-   * Returns an array of strings, one for each file in the directory.
+   * Returns an array of strings, one for each entry in the directory.
    * 
    * @throws IOException in case of IO error
    */
   public abstract String[] listAll() throws IOException;
+  
+  /**
+   * Returns true if the name represents a subdirectory.
+   * <p>
+   * Please try to avoid adding extraneous files to lucene index folders.
+   */
+  public abstract boolean isDirectory(String name) throws IOException;
 
   /** Removes an existing file in the directory. */
   public abstract void deleteFile(String name)
Index: lucene/core/src/java/org/apache/lucene/store/FSDirectory.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/store/FSDirectory.java	(revision 1659151)
+++ lucene/core/src/java/org/apache/lucene/store/FSDirectory.java	(working copy)
@@ -166,7 +166,7 @@
     }
   }
 
-  /** Lists all files (not subdirectories) in the
+  /** Lists all files (including subdirectories) in the
    *  directory.
    *
    *  @throws IOException if there was an I/O error during listing */
@@ -173,12 +173,7 @@
   public static String[] listAll(Path dir) throws IOException {
     List<String> entries = new ArrayList<>();
     
-    try (DirectoryStream<Path> stream = Files.newDirectoryStream(dir, new DirectoryStream.Filter<Path>() {
-      @Override
-      public boolean accept(Path entry) throws IOException {
-        return !Files.isDirectory(entry); // filter out entries that are definitely directories.
-      }
-    })) {
+    try (DirectoryStream<Path> stream = Files.newDirectoryStream(dir)) {
       for (Path path : stream) {
         entries.add(path.getFileName().toString());
       }
@@ -187,9 +182,6 @@
     return entries.toArray(new String[entries.size()]);
   }
 
-  /** Lists all files (not subdirectories) in the
-   * directory.
-   * @see #listAll(Path) */
   @Override
   public String[] listAll() throws IOException {
     ensureOpen();
@@ -196,6 +188,12 @@
     return listAll(directory);
   }
 
+  @Override
+  public boolean isDirectory(String name) throws IOException {
+    ensureOpen();
+    return Files.isDirectory(directory.resolve(name));
+  }
+
   /** Returns the length in bytes of a file in the directory. */
   @Override
   public long fileLength(String name) throws IOException {
Index: lucene/core/src/java/org/apache/lucene/store/FileSwitchDirectory.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/store/FileSwitchDirectory.java	(revision 1659151)
+++ lucene/core/src/java/org/apache/lucene/store/FileSwitchDirectory.java	(working copy)
@@ -141,6 +141,11 @@
   }
 
   @Override
+  public boolean isDirectory(String name) throws IOException {
+    return getDirectory(name).isDirectory(name);
+  }
+  
+  @Override
   public void deleteFile(String name) throws IOException {
     getDirectory(name).deleteFile(name);
   }
Index: lucene/core/src/java/org/apache/lucene/store/FilterDirectory.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/store/FilterDirectory.java	(revision 1659151)
+++ lucene/core/src/java/org/apache/lucene/store/FilterDirectory.java	(working copy)
@@ -58,6 +58,11 @@
   }
 
   @Override
+  public boolean isDirectory(String name) throws IOException {
+    return in.isDirectory(name);
+  }
+
+  @Override
   public void deleteFile(String name) throws IOException {
     in.deleteFile(name);
   }
Index: lucene/core/src/java/org/apache/lucene/store/RAMDirectory.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/store/RAMDirectory.java	(revision 1659151)
+++ lucene/core/src/java/org/apache/lucene/store/RAMDirectory.java	(working copy)
@@ -94,7 +94,9 @@
   private RAMDirectory(Directory dir, boolean closeDir, IOContext context) throws IOException {
     this();
     for (String file : dir.listAll()) {
-      copyFrom(dir, file, file, context);
+      if (!dir.isDirectory(file)) {
+        copyFrom(dir, file, file, context);
+      }
     }
     if (closeDir) {
       dir.close();
@@ -114,6 +116,11 @@
     return names.toArray(new String[names.size()]);
   }
 
+  @Override
+  public boolean isDirectory(String name) throws IOException {
+    return false; // we don't have to deal with "outside" directories on the filesystem!
+  }
+
   public final boolean fileNameExists(String name) {
     ensureOpen();
     return fileMap.containsKey(name);
Index: solr/core/src/java/org/apache/solr/core/DirectoryFactory.java
===================================================================
--- solr/core/src/java/org/apache/solr/core/DirectoryFactory.java	(revision 1659151)
+++ solr/core/src/java/org/apache/solr/core/DirectoryFactory.java	(working copy)
@@ -209,6 +209,9 @@
     long size = 0;
     
     for (final String file : files) {
+      if (directory.isDirectory(file)) {
+        continue;
+      }
       size += sizeOf(directory, file);
       if (size < 0) {
         break;
Index: solr/core/src/java/org/apache/solr/handler/SnapPuller.java
===================================================================
--- solr/core/src/java/org/apache/solr/handler/SnapPuller.java	(revision 1659151)
+++ solr/core/src/java/org/apache/solr/handler/SnapPuller.java	(working copy)
@@ -575,7 +575,7 @@
     Set<String> currentFiles = new HashSet<>(infos.files(indexDir, true));
     String[] allFiles = indexDir.listAll();
     for (String file : allFiles) {
-      if (!file.equals(segmentsFileName) && !currentFiles.contains(file) && !file.endsWith(".lock")) {
+      if (!file.equals(segmentsFileName) && !currentFiles.contains(file) && !file.endsWith(".lock") && !indexDir.isDirectory(file)) {
         LOG.info("Found unused file: " + file);
         return true;
       }
Index: solr/core/src/java/org/apache/solr/store/blockcache/BlockDirectory.java
===================================================================
--- solr/core/src/java/org/apache/solr/store/blockcache/BlockDirectory.java	(revision 1659151)
+++ solr/core/src/java/org/apache/solr/store/blockcache/BlockDirectory.java	(working copy)
@@ -229,7 +229,9 @@
       String[] files = listAll();
       
       for (String file : files) {
-        cache.delete(getFileCacheName(file));
+        if (!isDirectory(file)) {
+          cache.delete(getFileCacheName(file));
+        }
       }
       
     } catch (FileNotFoundException e) {
Index: solr/core/src/java/org/apache/solr/store/hdfs/HdfsDirectory.java
===================================================================
--- solr/core/src/java/org/apache/solr/store/hdfs/HdfsDirectory.java	(revision 1659151)
+++ solr/core/src/java/org/apache/solr/store/hdfs/HdfsDirectory.java	(working copy)
@@ -168,13 +168,16 @@
       return new String[] {};
     }
     for (FileStatus status : listStatus) {
-      if (!status.isDirectory()) {
-        files.add(status.getPath().getName());
-      }
+      files.add(status.getPath().getName());
     }
     return getNormalNames(files);
   }
   
+  @Override
+  public boolean isDirectory(String name) throws IOException {
+    return getFileSystem().isDirectory(new Path(hdfsDirPath, name));
+  }
+
   public Path getHdfsDirPath() {
     return hdfsDirPath;
   }
