Index: lucene/CHANGES.txt
===================================================================
--- lucene/CHANGES.txt	(revision 1671493)
+++ lucene/CHANGES.txt	(working copy)
@@ -139,6 +139,9 @@
   that up to 3X (X = current index size) spare disk space may be needed
   to complete forceMerge(1).  (Robert Muir, Shai Erera, Mike McCandless)
 
+* LUCENE-6395: Seeking by term ordinal was failing to set the term's
+  bytes in MemoryIndex (Mike McCandless)
+
 Optimizations
 
 * LUCENE-6183, LUCENE-5647: Avoid recompressing stored fields
Index: lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java
===================================================================
--- lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java	(revision 1671493)
+++ lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java	(working copy)
@@ -949,6 +949,7 @@
       public void seekExact(long ord) {
         assert ord < info.terms.size();
         termUpto = (int) ord;
+        info.terms.get(info.sortedTerms[termUpto], br);
       }
       
       @Override
Index: lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex.java
===================================================================
--- lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex.java	(revision 1671493)
+++ lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex.java	(working copy)
@@ -17,10 +17,13 @@
  * limitations under the License.
  */
 
+import java.io.IOException;
+
 import org.apache.lucene.analysis.MockAnalyzer;
+import org.apache.lucene.index.FieldInvertState;
 import org.apache.lucene.index.LeafReader;
-import org.apache.lucene.index.FieldInvertState;
 import org.apache.lucene.index.Term;
+import org.apache.lucene.index.TermsEnum;
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.MatchAllDocsQuery;
 import org.apache.lucene.search.TermQuery;
@@ -30,8 +33,6 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import java.io.IOException;
-
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.CoreMatchers.not;
 import static org.junit.internal.matchers.StringContains.containsString;
@@ -90,6 +91,16 @@
 
   }
 
+  public void testSeekByTermOrd() throws IOException {
+    MemoryIndex mi = new MemoryIndex();
+    mi.addField("field", "some terms be here", analyzer);
+    IndexSearcher searcher = mi.createSearcher();
+    LeafReader reader = (LeafReader) searcher.getIndexReader();
+    TermsEnum terms = reader.fields().terms("field").iterator(null);
+    terms.seekExact(0);
+    assertEquals("be", terms.term().utf8ToString());
+  }
+
   @Test
   public void testSimilarities() throws IOException {
 
