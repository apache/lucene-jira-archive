Index: lucene/CHANGES.txt
===================================================================
--- lucene/CHANGES.txt	(revision 1570208)
+++ lucene/CHANGES.txt	(working copy)
@@ -208,6 +208,10 @@
 
 * LUCENE-5447: StandardTokenizer should break at consecutive chars matching
   Word_Break = MidLetter, MidNum and/or MidNumLet (Steve Rowe)
+
+* LUCENE-5462: RamUsageEstimator.sizeOf(Object) is not used anymore to
+  estimate memory usage of segments. This used to make
+  SegmentReader.ramBytesUsed very CPU-intensive. (Adrien Grand)
   
 API Changes
 
Index: lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xFields.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xFields.java	(revision 1570208)
+++ lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xFields.java	(working copy)
@@ -1077,6 +1077,11 @@
   
   @Override
   public long ramBytesUsed() {
-    return RamUsageEstimator.sizeOf(this);
+    if (tis != null) {
+      return tis.ramBytesUsed();
+    } else {
+      // when there is no index, there is almost nothing loaded into RAM
+      return 0L;
+    }
   }
 }
Index: lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xNormsProducer.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xNormsProducer.java	(revision 1570208)
+++ lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xNormsProducer.java	(working copy)
@@ -23,6 +23,7 @@
 import java.util.IdentityHashMap;
 import java.util.Map;
 import java.util.Set;
+import java.util.concurrent.atomic.AtomicLong;
 
 import org.apache.lucene.codecs.DocValuesProducer;
 import org.apache.lucene.index.BinaryDocValues;
@@ -66,6 +67,8 @@
   IndexInput singleNormStream;
   final int maxdoc;
   
+  private final AtomicLong ramBytesUsed;
+
   // note: just like segmentreader in 3.x, we open up all the files here (including separate norms) up front.
   // but we just don't do any seeks or reading yet.
   public Lucene3xNormsProducer(Directory dir, SegmentInfo info, FieldInfos fields, IOContext context) throws IOException {
@@ -125,6 +128,7 @@
         IOUtils.closeWhileHandlingException(openFiles);
       }
     }
+    ramBytesUsed = new AtomicLong();
   }
   
   @Override
@@ -182,6 +186,7 @@
           openFiles.remove(file);
           file.close();
         }
+        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(bytes));
         instance = new NumericDocValues() {
           @Override
           public long get(int docID) {
@@ -222,6 +227,6 @@
   
   @Override
   public long ramBytesUsed() {
-    return RamUsageEstimator.sizeOf(this);
+    return ramBytesUsed.get();
   }
 }
Index: lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xStoredFieldsReader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xStoredFieldsReader.java	(revision 1570208)
+++ lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xStoredFieldsReader.java	(working copy)
@@ -301,6 +301,7 @@
   
   @Override
   public long ramBytesUsed() {
-    return RamUsageEstimator.sizeOf(this);
+    // everything is stored on disk
+    return 0;
   }
 }
Index: lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xTermVectorsReader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xTermVectorsReader.java	(revision 1570208)
+++ lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xTermVectorsReader.java	(working copy)
@@ -740,7 +740,8 @@
 
   @Override
   public long ramBytesUsed() {
-    return RamUsageEstimator.sizeOf(this);
+    // everything is disk-based
+    return 0;
   }
 }
 
Index: lucene/core/src/java/org/apache/lucene/codecs/lucene3x/TermInfosReader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/lucene3x/TermInfosReader.java	(revision 1570208)
+++ lucene/core/src/java/org/apache/lucene/codecs/lucene3x/TermInfosReader.java	(working copy)
@@ -352,4 +352,8 @@
     get(term, true);
     return getThreadResources().termEnum.clone();
   }
+
+  long ramBytesUsed() {
+    return index == null ? 0 : index.ramBytesUsed();
+  }
 }
Index: lucene/core/src/java/org/apache/lucene/codecs/lucene3x/TermInfosReaderIndex.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/lucene3x/TermInfosReaderIndex.java	(revision 1570208)
+++ lucene/core/src/java/org/apache/lucene/codecs/lucene3x/TermInfosReaderIndex.java	(working copy)
@@ -25,6 +25,7 @@
 import org.apache.lucene.index.Term;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.MathUtil;
+import org.apache.lucene.util.RamUsageEstimator;
 import org.apache.lucene.util.PagedBytes.PagedBytesDataInput;
 import org.apache.lucene.util.PagedBytes.PagedBytesDataOutput;
 import org.apache.lucene.util.PagedBytes;
@@ -49,6 +50,7 @@
   private final PackedInts.Reader indexToDataOffset;
   private final int indexSize;
   private final int skipInterval;
+  private final long ramBytesUsed;
 
   /**
    * Loads the segment information at segment load time.
@@ -111,6 +113,9 @@
     dataPagedBytes.freeze(true);
     dataInput = dataPagedBytes.getDataInput();
     indexToDataOffset = indexToTerms.getMutable();
+
+    ramBytesUsed = fields.length * (RamUsageEstimator.NUM_BYTES_OBJECT_REF + RamUsageEstimator.shallowSizeOfInstance(Term.class))
+        + dataPagedBytes.ramBytesUsed() + indexToDataOffset.ramBytesUsed();
   }
 
   private static int estimatePageBits(long estSize) {
@@ -253,4 +258,9 @@
     input.setPosition(indexToDataOffset.get(termIndex));
     return term.field().compareTo(fields[input.readVInt()].field());
   }
+
+  long ramBytesUsed() {
+    return ramBytesUsed;
+  }
+
 }
