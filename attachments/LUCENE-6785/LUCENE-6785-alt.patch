Index: lucene/core/src/java/org/apache/lucene/search/BlendedTermQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/BlendedTermQuery.java	(revision 1705263)
+++ lucene/core/src/java/org/apache/lucene/search/BlendedTermQuery.java	(working copy)
@@ -299,6 +299,11 @@
     return rewriteMethod.rewrite(termQueries);
   }
 
+  @Override
+  protected Weight doCreateWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
+    throw new Error("Call createWeight instead");
+  }
+
   private static TermContext adjustFrequencies(TermContext ctx, int artificialDf, long artificialTtf) {
     List<LeafReaderContext> leaves = ctx.topReaderContext.leaves();
     final int len;
Index: lucene/core/src/java/org/apache/lucene/search/BooleanQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/BooleanQuery.java	(revision 1705263)
+++ lucene/core/src/java/org/apache/lucene/search/BooleanQuery.java	(working copy)
@@ -188,7 +188,7 @@
   }
 
   @Override
-  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
+  protected Weight doCreateWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
     BooleanQuery query = this;
     if (needsScores == false) {
       query = rewriteNoScoring();
Index: lucene/core/src/java/org/apache/lucene/search/BoostQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/BoostQuery.java	(revision 1705263)
+++ lucene/core/src/java/org/apache/lucene/search/BoostQuery.java	(working copy)
@@ -137,7 +137,7 @@
   }
 
   @Override
-  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
+  protected Weight doCreateWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
     final Weight weight = query.createWeight(searcher, needsScores);
     if (needsScores == false) {
       return weight;
Index: lucene/core/src/java/org/apache/lucene/search/CachingWrapperQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/CachingWrapperQuery.java	(revision 1705263)
+++ lucene/core/src/java/org/apache/lucene/search/CachingWrapperQuery.java	(working copy)
@@ -98,7 +98,7 @@
   int hitCount, missCount;
 
   @Override
-  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
+  protected Weight doCreateWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
     final Weight weight = query.createWeight(searcher, needsScores);
     if (needsScores) {
       // our cache is not sufficient, we need scores too
Index: lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery.java	(revision 1705263)
+++ lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery.java	(working copy)
@@ -110,7 +110,7 @@
   }
 
   @Override
-  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
+  protected Weight doCreateWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
     final Weight innerWeight = searcher.createWeight(query, false);
     if (needsScores) {
       return new ConstantScoreWeight(this) {
Index: lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.java	(revision 1705263)
+++ lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.java	(working copy)
@@ -206,7 +206,7 @@
 
   /** Create the Weight used to score us */
   @Override
-  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
+  protected Weight doCreateWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
     return new DisjunctionMaxWeight(searcher, needsScores);
   }
 
Index: lucene/core/src/java/org/apache/lucene/search/DocValuesRewriteMethod.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/DocValuesRewriteMethod.java	(revision 1705263)
+++ lucene/core/src/java/org/apache/lucene/search/DocValuesRewriteMethod.java	(working copy)
@@ -76,7 +76,7 @@
     public final String getField() { return query.getField(); }
     
     @Override
-    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
+    public Weight doCreateWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
       return new RandomAccessWeight(this) {
         @Override
         protected Bits getMatchingDocs(LeafReaderContext context) throws IOException {
Index: lucene/core/src/java/org/apache/lucene/search/FieldValueQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/FieldValueQuery.java	(revision 1705263)
+++ lucene/core/src/java/org/apache/lucene/search/FieldValueQuery.java	(working copy)
@@ -58,7 +58,7 @@
   }
 
   @Override
-  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
+  protected Weight doCreateWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
     return new RandomAccessWeight(this) {
 
       @Override
Index: lucene/core/src/java/org/apache/lucene/search/Filter.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/Filter.java	(revision 1705263)
+++ lucene/core/src/java/org/apache/lucene/search/Filter.java	(working copy)
@@ -80,7 +80,7 @@
   //
 
   @Override
-  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
+  public Weight doCreateWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
     return new Weight(this) {
 
       @Override
Index: lucene/core/src/java/org/apache/lucene/search/IndexSearcher.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/IndexSearcher.java	(revision 1705263)
+++ lucene/core/src/java/org/apache/lucene/search/IndexSearcher.java	(working copy)
@@ -662,7 +662,7 @@
   public Query rewrite(Query original) throws IOException {
     Query query = original;
     for (Query rewrittenQuery = query.rewrite(reader); rewrittenQuery != query;
-         rewrittenQuery = query.rewrite(reader)) {
+        rewrittenQuery = query.rewrite(reader)) {
       query = rewrittenQuery;
     }
     return query;
@@ -711,7 +711,6 @@
    * @lucene.internal
    */
   public Weight createNormalizedWeight(Query query, boolean needsScores) throws IOException {
-    query = rewrite(query);
     Weight weight = createWeight(query, needsScores);
     float v = weight.getValueForNormalization();
     float norm = getSimilarity(needsScores).queryNorm(v);
Index: lucene/core/src/java/org/apache/lucene/search/MatchAllDocsQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/MatchAllDocsQuery.java	(revision 1705263)
+++ lucene/core/src/java/org/apache/lucene/search/MatchAllDocsQuery.java	(working copy)
@@ -29,7 +29,7 @@
 public final class MatchAllDocsQuery extends Query {
 
   @Override
-  public Weight createWeight(IndexSearcher searcher, boolean needsScores) {
+  protected Weight doCreateWeight(IndexSearcher searcher, boolean needsScores) {
     return new ConstantScoreWeight(this) {
       @Override
       public String toString() {
Index: lucene/core/src/java/org/apache/lucene/search/MatchNoDocsQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/MatchNoDocsQuery.java	(revision 1705263)
+++ lucene/core/src/java/org/apache/lucene/search/MatchNoDocsQuery.java	(working copy)
@@ -33,6 +33,11 @@
     }
 
     @Override
+    protected Weight doCreateWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
+      throw new Error("Call createWeight instead");
+    }
+
+    @Override
     public String toString(String field) {
         return "";
     }
Index: lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.java	(revision 1705263)
+++ lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.java	(working copy)
@@ -267,7 +267,7 @@
   }
 
   @Override
-  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
+  protected Weight doCreateWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
     return new MultiPhraseWeight(searcher, needsScores);
   }
 
Index: lucene/core/src/java/org/apache/lucene/search/MultiTermQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/MultiTermQuery.java	(revision 1705263)
+++ lucene/core/src/java/org/apache/lucene/search/MultiTermQuery.java	(working copy)
@@ -314,6 +314,11 @@
     return rewriteMethod.rewrite(reader, this);
   }
 
+  @Override
+  protected Weight doCreateWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
+    throw new Error("Call createWeight instead");
+  }
+
   /**
    * @see #setRewriteMethod
    */
Index: lucene/core/src/java/org/apache/lucene/search/MultiTermQueryConstantScoreWrapper.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/MultiTermQueryConstantScoreWrapper.java	(revision 1705263)
+++ lucene/core/src/java/org/apache/lucene/search/MultiTermQueryConstantScoreWrapper.java	(working copy)
@@ -108,7 +108,7 @@
   public final String getField() { return query.getField(); }
 
   @Override
-  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
+  protected Weight doCreateWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
     return new ConstantScoreWeight(this) {
 
       /** Try to collect terms from the given terms enum and return true iff all
@@ -157,7 +157,7 @@
             bq.add(new TermQuery(new Term(query.field, t.term), termContext), Occur.SHOULD);
           }
           Query q = new ConstantScoreQuery(bq.build());
-          final Weight weight = searcher.rewrite(q).createWeight(searcher, needsScores);
+          final Weight weight = q.createWeight(searcher, needsScores);
           weight.normalize(1f, score());
           return new WeightOrDocIdSet(weight);
         }
Index: lucene/core/src/java/org/apache/lucene/search/NGramPhraseQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/NGramPhraseQuery.java	(revision 1705263)
+++ lucene/core/src/java/org/apache/lucene/search/NGramPhraseQuery.java	(working copy)
@@ -78,6 +78,11 @@
   }
 
   @Override
+  protected Weight doCreateWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
+    throw new Error("Call createWeight instead");
+  }
+
+  @Override
   public boolean equals(Object o) {
     if (super.equals(o) == false) {
       return false;
Index: lucene/core/src/java/org/apache/lucene/search/PhraseQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/PhraseQuery.java	(revision 1705263)
+++ lucene/core/src/java/org/apache/lucene/search/PhraseQuery.java	(working copy)
@@ -458,7 +458,7 @@
   }
 
   @Override
-  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
+  protected Weight doCreateWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
     return new PhraseWeight(searcher, needsScores);
   }
 
Index: lucene/core/src/java/org/apache/lucene/search/Query.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/Query.java	(revision 1705263)
+++ lucene/core/src/java/org/apache/lucene/search/Query.java	(working copy)
@@ -57,18 +57,28 @@
   /**
    * Expert: Constructs an appropriate Weight implementation for this query.
    * <p>
-   * Only implemented by primitive queries, which re-write to themselves.
+   * This method will first {@link #rewrite(IndexReader)} the query and then
+   * construct a concrete {@link Weight} on the rewritten query using
+   * {@link #doCreateWeight(IndexSearcher, boolean)}.
    *
    * @param needsScores   True if document scores ({@link Scorer#score}) or match
    *                      frequencies ({@link Scorer#freq}) are needed.
    */
-  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
-    throw new UnsupportedOperationException("Query " + this + " does not implement createWeight");
+  public final Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
+    Query query = this;
+    Query rewritten = searcher.rewrite(query);
+    return rewritten.doCreateWeight(searcher, needsScores);
   }
 
-  /** Expert: called to re-write queries into primitive queries. For example,
-   * a PrefixQuery will be rewritten into a BooleanQuery that consists
-   * of TermQuerys.
+  /** Construct a Weight for this {@link Query}. In case this {@link Query} object
+   *  always {@link #rewrite(IndexReader) rewrites} to a different Query
+   *  implementation, it is safe to implement this method by just throwing an
+   *  exception as it will never get called. */
+  protected abstract Weight doCreateWeight(IndexSearcher searcher, boolean needsScores) throws IOException;
+
+  /** Internal: called to re-write queries into primitive queries. This method
+   *  only exists as an implementation detail of
+   *  {@link #createWeight(IndexSearcher, boolean)}. Do not call directly.
    */
   public Query rewrite(IndexReader reader) throws IOException {
     return this;
Index: lucene/core/src/java/org/apache/lucene/search/SynonymQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/SynonymQuery.java	(revision 1705263)
+++ lucene/core/src/java/org/apache/lucene/search/SynonymQuery.java	(working copy)
@@ -112,7 +112,7 @@
   }
 
   @Override
-  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
+  protected Weight doCreateWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
     if (needsScores) {
       return new SynonymWeight(this, searcher);
     } else {
@@ -121,7 +121,7 @@
       for (Term term : terms) {
         bq.add(new TermQuery(term), BooleanClause.Occur.SHOULD);
       }
-      return searcher.rewrite(bq.build()).createWeight(searcher, needsScores);
+      return bq.build().createWeight(searcher, needsScores);
     }
   }
   
Index: lucene/core/src/java/org/apache/lucene/search/TermQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/TermQuery.java	(revision 1705263)
+++ lucene/core/src/java/org/apache/lucene/search/TermQuery.java	(working copy)
@@ -181,7 +181,7 @@
   }
 
   @Override
-  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
+  protected Weight doCreateWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
     final IndexReaderContext context = searcher.getTopReaderContext();
     final TermContext termState;
     if (perReaderTermState == null
Index: lucene/core/src/java/org/apache/lucene/search/spans/FieldMaskingSpanQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/spans/FieldMaskingSpanQuery.java	(revision 1705263)
+++ lucene/core/src/java/org/apache/lucene/search/spans/FieldMaskingSpanQuery.java	(working copy)
@@ -89,8 +89,8 @@
   // ...this is done to be more consistent with things like SpanFirstQuery
 
   @Override
-  public SpanWeight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
-    return maskedQuery.createWeight(searcher, needsScores);
+  protected SpanWeight doCreateWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
+    return (SpanWeight) maskedQuery.createWeight(searcher, needsScores);
   }
 
   @Override
Index: lucene/core/src/java/org/apache/lucene/search/spans/SpanBoostQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/spans/SpanBoostQuery.java	(revision 1705263)
+++ lucene/core/src/java/org/apache/lucene/search/spans/SpanBoostQuery.java	(working copy)
@@ -139,8 +139,8 @@
   }
 
   @Override
-  public SpanWeight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
-    final SpanWeight weight = query.createWeight(searcher, needsScores);
+  protected SpanWeight doCreateWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
+    final SpanWeight weight = query.doCreateWeight(searcher, needsScores);
     if (needsScores == false) {
       return weight;
     }
Index: lucene/core/src/java/org/apache/lucene/search/spans/SpanContainingQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/spans/SpanContainingQuery.java	(revision 1705263)
+++ lucene/core/src/java/org/apache/lucene/search/spans/SpanContainingQuery.java	(working copy)
@@ -43,9 +43,9 @@
   }
 
   @Override
-  public SpanWeight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
-    SpanWeight bigWeight = big.createWeight(searcher, false);
-    SpanWeight littleWeight = little.createWeight(searcher, false);
+  protected SpanWeight doCreateWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
+    SpanWeight bigWeight = (SpanWeight) big.createWeight(searcher, false);
+    SpanWeight littleWeight = (SpanWeight) little.createWeight(searcher, false);
     return new SpanContainingWeight(searcher, needsScores ? getTermContexts(bigWeight, littleWeight) : null,
                                       bigWeight, littleWeight);
   }
Index: lucene/core/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper.java	(revision 1705263)
+++ lucene/core/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper.java	(working copy)
@@ -96,7 +96,7 @@
   }
 
   @Override
-  public SpanWeight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
+  protected SpanWeight doCreateWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
     throw new IllegalArgumentException("Rewrite first!");
   }
 
Index: lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery.java	(revision 1705263)
+++ lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery.java	(working copy)
@@ -33,7 +33,6 @@
 import org.apache.lucene.index.Terms;
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.Query;
-import org.apache.lucene.util.ToStringUtils;
 
 /** Matches spans which are near one another.  One can specify <i>slop</i>, the
  * maximum number of intervening unmatched positions, as well as whether
@@ -177,10 +176,10 @@
   }
 
   @Override
-  public SpanWeight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
+  protected SpanWeight doCreateWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
     List<SpanWeight> subWeights = new ArrayList<>();
     for (SpanQuery q : clauses) {
-      subWeights.add(q.createWeight(searcher, false));
+      subWeights.add((SpanWeight) q.createWeight(searcher, false));
     }
     return new SpanNearWeight(subWeights, searcher, needsScores ? getTermContexts(subWeights) : null);
   }
@@ -297,7 +296,7 @@
     }
 
     @Override
-    public SpanWeight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
+    protected SpanWeight doCreateWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
       return new SpanGapWeight(searcher);
     }
 
Index: lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery.java	(revision 1705263)
+++ lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery.java	(working copy)
@@ -94,9 +94,9 @@
 
 
   @Override
-  public SpanWeight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
-    SpanWeight includeWeight = include.createWeight(searcher, false);
-    SpanWeight excludeWeight = exclude.createWeight(searcher, false);
+  protected SpanWeight doCreateWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
+    SpanWeight includeWeight = (SpanWeight) include.createWeight(searcher, false);
+    SpanWeight excludeWeight = (SpanWeight) exclude.createWeight(searcher, false);
     return new SpanNotWeight(searcher, needsScores ? getTermContexts(includeWeight, excludeWeight) : null,
                                   includeWeight, excludeWeight);
   }
Index: lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery.java	(revision 1705263)
+++ lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery.java	(working copy)
@@ -119,10 +119,10 @@
   }
 
   @Override
-  public SpanWeight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
+  protected SpanWeight doCreateWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
     List<SpanWeight> subWeights = new ArrayList<>(clauses.size());
     for (SpanQuery q : clauses) {
-      subWeights.add(q.createWeight(searcher, false));
+      subWeights.add(q.doCreateWeight(searcher, false));
     }
     return new SpanOrWeight(searcher, needsScores ? getTermContexts(subWeights) : null, subWeights);
   }
Index: lucene/core/src/java/org/apache/lucene/search/spans/SpanPositionCheckQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/spans/SpanPositionCheckQuery.java	(revision 1705263)
+++ lucene/core/src/java/org/apache/lucene/search/spans/SpanPositionCheckQuery.java	(working copy)
@@ -67,8 +67,8 @@
   protected abstract AcceptStatus acceptPosition(Spans spans) throws IOException;
 
   @Override
-  public SpanWeight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
-    SpanWeight matchWeight = match.createWeight(searcher, false);
+  protected SpanWeight doCreateWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
+    SpanWeight matchWeight = (SpanWeight) match.createWeight(searcher, false);
     return new SpanPositionCheckWeight(matchWeight, searcher, needsScores ? getTermContexts(matchWeight) : null);
   }
 
Index: lucene/core/src/java/org/apache/lucene/search/spans/SpanQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/spans/SpanQuery.java	(revision 1705263)
+++ lucene/core/src/java/org/apache/lucene/search/spans/SpanQuery.java	(working copy)
@@ -36,7 +36,7 @@
   public abstract String getField();
 
   @Override
-  public abstract SpanWeight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException;
+  protected abstract SpanWeight doCreateWeight(IndexSearcher searcher, boolean needsScores) throws IOException;
 
   /**
    * Build a map of terms to termcontexts, for use in constructing SpanWeights
Index: lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery.java	(revision 1705263)
+++ lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery.java	(working copy)
@@ -65,7 +65,7 @@
   public String getField() { return term.field(); }
 
   @Override
-  public SpanWeight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
+  protected SpanWeight doCreateWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
     final TermContext context;
     final IndexReaderContext topContext = searcher.getTopReaderContext();
     if (termContext == null || termContext.topReaderContext != topContext) {
Index: lucene/core/src/java/org/apache/lucene/search/spans/SpanWithinQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/spans/SpanWithinQuery.java	(revision 1705263)
+++ lucene/core/src/java/org/apache/lucene/search/spans/SpanWithinQuery.java	(working copy)
@@ -44,9 +44,9 @@
   }
 
   @Override
-  public SpanWeight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
-    SpanWeight bigWeight = big.createWeight(searcher, false);
-    SpanWeight littleWeight = little.createWeight(searcher, false);
+  protected SpanWeight doCreateWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
+    SpanWeight bigWeight = (SpanWeight) big.createWeight(searcher, false);
+    SpanWeight littleWeight = (SpanWeight) little.createWeight(searcher, false);
     return new SpanWithinWeight(searcher, needsScores ? getTermContexts(bigWeight, littleWeight) : null,
                                       bigWeight, littleWeight);
   }
Index: lucene/core/src/test/org/apache/lucene/search/JustCompileSearch.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/JustCompileSearch.java	(revision 1705263)
+++ lucene/core/src/test/org/apache/lucene/search/JustCompileSearch.java	(working copy)
@@ -181,6 +181,11 @@
     public String toString(String field) {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
+
+    @Override
+    protected Weight doCreateWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
+      throw new UnsupportedOperationException(UNSUPPORTED_MSG);
+    }
     
   }
   
Index: lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer.java	(revision 1705263)
+++ lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer.java	(working copy)
@@ -71,7 +71,7 @@
     }
 
     @Override
-    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
+    public Weight doCreateWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
       return new Weight(CrazyMustUseBulkScorerQuery.this) {
         @Override
         public void extractTerms(Set<Term> terms) {
Index: lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache.java	(revision 1705263)
+++ lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache.java	(working copy)
@@ -345,7 +345,7 @@
     }
 
     @Override
-    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
+    public Weight doCreateWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
       return new ConstantScoreWeight(this) {
         @Override
         public Scorer scorer(LeafReaderContext context) throws IOException {
@@ -931,7 +931,7 @@
     int[] i = new int[] {42}; // an array so that clone keeps the reference
     
     @Override
-    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
+    public Weight doCreateWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
       return new ConstantScoreWeight(this) {
         @Override
         public Scorer scorer(LeafReaderContext context) throws IOException {
Index: lucene/core/src/test/org/apache/lucene/search/TestNeedsScores.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestNeedsScores.java	(revision 1705263)
+++ lucene/core/src/test/org/apache/lucene/search/TestNeedsScores.java	(working copy)
@@ -107,7 +107,7 @@
     }
 
     @Override
-    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
+    public Weight doCreateWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
       final Weight w = in.createWeight(searcher, needsScores);
       return new Weight(AssertNeedsScores.this) {
         @Override
Index: lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.java	(revision 1705263)
+++ lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.java	(working copy)
@@ -412,7 +412,7 @@
     }
 
     @Override
-    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
+    public Weight doCreateWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
 
       return new Weight(FixedScoreQuery.this) {
 
Index: lucene/core/src/test/org/apache/lucene/search/spans/JustCompileSearchSpans.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/spans/JustCompileSearchSpans.java	(revision 1705263)
+++ lucene/core/src/test/org/apache/lucene/search/spans/JustCompileSearchSpans.java	(working copy)
@@ -89,7 +89,7 @@
     }
 
     @Override
-    public SpanWeight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
+    public SpanWeight doCreateWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
Index: lucene/test-framework/src/java/org/apache/lucene/search/AssertingQuery.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/search/AssertingQuery.java	(revision 1705263)
+++ lucene/test-framework/src/java/org/apache/lucene/search/AssertingQuery.java	(working copy)
@@ -40,7 +40,7 @@
   }
 
   @Override
-  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
+  public Weight doCreateWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
     return new AssertingWeight(new Random(random.nextLong()), in.createWeight(searcher, needsScores), needsScores);
   }
 
Index: lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils.java	(revision 1705263)
+++ lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils.java	(working copy)
@@ -67,6 +67,11 @@
       public String toString(String field) {
         return "My Whacky Query";
       }
+
+      @Override
+      protected Weight doCreateWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
+        throw new Error("Call rewrite");
+      }
     };
     checkUnequal(q, whacky);
     
Index: lucene/test-framework/src/java/org/apache/lucene/search/RandomApproximationQuery.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/search/RandomApproximationQuery.java	(revision 1705263)
+++ lucene/test-framework/src/java/org/apache/lucene/search/RandomApproximationQuery.java	(working copy)
@@ -73,7 +73,7 @@
   }
 
   @Override
-  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
+  public Weight doCreateWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
     final Weight weight = query.createWeight(searcher, needsScores);
     return new RandomApproximationWeight(weight, new Random(random.nextLong()));
   }
Index: lucene/test-framework/src/java/org/apache/lucene/search/spans/AssertingSpanQuery.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/search/spans/AssertingSpanQuery.java	(revision 1705263)
+++ lucene/test-framework/src/java/org/apache/lucene/search/spans/AssertingSpanQuery.java	(working copy)
@@ -42,8 +42,8 @@
   }
 
   @Override
-  public SpanWeight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
-    SpanWeight weight = in.createWeight(searcher, needsScores);
+  public SpanWeight doCreateWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
+    SpanWeight weight = (SpanWeight) in.createWeight(searcher, needsScores);
     return new AssertingSpanWeight(searcher, weight);
   }
 
Index: lucene/test-framework/src/java/org/apache/lucene/search/spans/MultiSpansWrapper.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/search/spans/MultiSpansWrapper.java	(revision 1705263)
+++ lucene/test-framework/src/java/org/apache/lucene/search/spans/MultiSpansWrapper.java	(working copy)
@@ -45,7 +45,7 @@
     IndexSearcher searcher = new IndexSearcher(lr);
     searcher.setQueryCache(null);
 
-    SpanWeight w = spanQuery.createWeight(searcher, false);
+    SpanWeight w = spanQuery.doCreateWeight(searcher, false);
 
     return w.getSpans(lrContext, requiredPostings);
   }
