Index: lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysScorer.java
===================================================================
--- lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysScorer.java	(revision 1662287)
+++ lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysScorer.java	(working copy)
@@ -90,6 +90,24 @@
     // change up the order of the conjuntions below
     assert baseScorer != null;
 
+    // some scorers, eg ReqExlScorer, can hit NPE if cost is called after nextDoc
+    long baseQueryCost = baseScorer.cost();
+
+    final int numDims = dims.length;
+
+    long drillDownCost = 0;
+    for (int dim=0;dim<numDims;dim++) {
+      DocIdSetIterator disi = dims[dim].disi;
+      if (dims[dim].bits == null && disi != null) {
+        drillDownCost += disi.cost();
+      }
+    }
+
+    long drillDownAdvancedCost = 0;
+    if (numDims > 1 && dims[1].disi == null) {
+      drillDownAdvancedCost = dims[1].disi.cost();
+    }
+
     // Position all scorers to their first matching doc:
     baseScorer.nextDoc();
     int numBits = 0;
@@ -101,14 +119,11 @@
       }
     }
 
-    final int numDims = dims.length;
-
     Bits[] bits = new Bits[numBits];
     LeafCollector[] bitsSidewaysCollectors = new LeafCollector[numBits];
 
     DocIdSetIterator[] disis = new DocIdSetIterator[numDims-numBits];
     LeafCollector[] sidewaysCollectors = new LeafCollector[numDims-numBits];
-    long drillDownCost = 0;
     int disiUpto = 0;
     int bitsUpto = 0;
     for (int dim=0;dim<numDims;dim++) {
@@ -117,9 +132,6 @@
         disis[disiUpto] = disi;
         sidewaysCollectors[disiUpto] = dims[dim].sidewaysLeafCollector;
         disiUpto++;
-        if (disi != null) {
-          drillDownCost += disi.cost();
-        }
       } else {
         bits[bitsUpto] = dims[dim].bits;
         bitsSidewaysCollectors[bitsUpto] = dims[dim].sidewaysLeafCollector;
@@ -127,8 +139,6 @@
       }
     }
 
-    long baseQueryCost = baseScorer.cost();
-
     /*
     System.out.println("\nbaseDocID=" + baseScorer.docID() + " est=" + estBaseHitCount);
     System.out.println("  maxDoc=" + context.reader().maxDoc());
@@ -142,7 +152,7 @@
     if (bitsUpto > 0 || scoreSubDocsAtOnce || baseQueryCost < drillDownCost/10) {
       //System.out.println("queryFirst: baseScorer=" + baseScorer + " disis.length=" + disis.length + " bits.length=" + bits.length);
       doQueryFirstScoring(collector, disis, sidewaysCollectors, bits, bitsSidewaysCollectors);
-    } else if (numDims > 1 && (dims[1].disi == null || dims[1].disi.cost() < baseQueryCost/10)) {
+    } else if (numDims > 1 && (dims[1].disi == null || drillDownAdvancedCost < baseQueryCost/10)) {
       //System.out.println("drillDownAdvance");
       doDrillDownAdvanceScoring(collector, disis, sidewaysCollectors);
     } else {
Index: lucene/facet/src/test/org/apache/lucene/facet/TestDrillSideways.java
===================================================================
--- lucene/facet/src/test/org/apache/lucene/facet/TestDrillSideways.java	(revision 1662287)
+++ lucene/facet/src/test/org/apache/lucene/facet/TestDrillSideways.java	(working copy)
@@ -44,6 +44,8 @@
 import org.apache.lucene.index.IndexWriterConfig;
 import org.apache.lucene.index.RandomIndexWriter;
 import org.apache.lucene.index.Term;
+import org.apache.lucene.search.BooleanClause;
+import org.apache.lucene.search.BooleanQuery;
 import org.apache.lucene.search.DocIdSet;
 import org.apache.lucene.search.Filter;
 import org.apache.lucene.search.IndexSearcher;
@@ -1062,5 +1064,46 @@
     writer.close();
     IOUtils.close(taxoWriter, searcher.getIndexReader(), taxoReader, dir, taxoDir);
   }
+
+  public void testScorer() throws Exception {
+    // LUCENE-6001 some scorers, eg ReqExlScorer, can hit NPE if cost is called after nextDoc
+    Directory dir = newDirectory();
+    Directory taxoDir = newDirectory();
+
+    // Writes facet ords to a separate directory from the
+    // main index:
+    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);
+
+    FacetsConfig config = new FacetsConfig();
+
+    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);
+
+    Document doc = new Document();
+    doc.add(newTextField("field", "foo bar", Field.Store.NO));
+    doc.add(new FacetField("Author", "Bob"));
+    doc.add(new FacetField("dim", "a"));
+    writer.addDocument(config.build(taxoWriter, doc));
+
+    // NRT open
+    IndexSearcher searcher = newSearcher(writer.getReader());
+
+    // NRT open
+    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);
+
+    DrillSideways ds = new DrillSideways(searcher, config, taxoReader);
+
+    BooleanQuery bq = new BooleanQuery(true);
+    bq.add(new TermQuery(new Term("field", "foo")), BooleanClause.Occur.MUST);
+    bq.add(new TermQuery(new Term("field", "bar")), BooleanClause.Occur.MUST_NOT);
+    DrillDownQuery ddq = new DrillDownQuery(config, bq);
+    ddq.add("field", "foo");
+    ddq.add("author", bq);
+    ddq.add("dim", bq);
+    DrillSidewaysResult r = ds.search(null, ddq, 10);
+    assertEquals(0, r.hits.totalHits);
+
+    writer.close();
+    IOUtils.close(searcher.getIndexReader(), taxoReader, taxoWriter, dir, taxoDir);
+  }
 }
 
