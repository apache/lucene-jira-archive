Index: src/test/org/apache/lucene/search/payloads/TestBoostingTermQuery.java
===================================================================
--- src/test/org/apache/lucene/search/payloads/TestBoostingTermQuery.java	(revision 564290)
+++ src/test/org/apache/lucene/search/payloads/TestBoostingTermQuery.java	(working copy)
@@ -97,11 +97,14 @@
     //writer.infoStream = System.out;
     for (int i = 0; i < 1000; i++) {
       Document doc = new Document();
+      Field noPayloadField = new Field("noPayLoad", English.intToEnglish(i), Field.Store.YES, Field.Index.TOKENIZED);
+      noPayloadField.setBoost(0);
+      doc.add(noPayloadField);
       doc.add(new Field("field", English.intToEnglish(i), Field.Store.YES, Field.Index.TOKENIZED));
       doc.add(new Field("multiField", English.intToEnglish(i) + "  " + English.intToEnglish(i), Field.Store.YES, Field.Index.TOKENIZED));
       writer.addDocument(doc);
     }
-    //writer.optimize();
+    writer.optimize();
     writer.close();
 
     searcher = new IndexSearcher(directory);
@@ -192,6 +195,18 @@
 
   }
 
+  public void testNoPayload() throws Exception {
+	BoostingTermQuery q1 = new BoostingTermQuery(new Term("noPayLoad", "zero"));
+	BoostingTermQuery q2 = new BoostingTermQuery(new Term("noPayLoad", "foo"));
+	BooleanClause c1 = new BooleanClause(q1, BooleanClause.Occur.MUST);
+	BooleanClause c2 = new BooleanClause(q2, BooleanClause.Occur.MUST_NOT);
+	BooleanQuery query = new BooleanQuery();
+	query.add(c1);
+	query.add(c2);
+	int [] results = new int[1];
+	results[0] = 0;
+    CheckHits.checkHitCollector(query, "noPayLoad", searcher, results);
+  }
 
   class BoostingSimilarity extends DefaultSimilarity
   {
