diff --git a/lucene/sandbox/src/test/org/apache/lucene/search/TestGeoPointQuery.java b/lucene/sandbox/src/test/org/apache/lucene/search/TestGeoPointQuery.java
index 5d0de98..f3cc81b 100644
--- a/lucene/sandbox/src/test/org/apache/lucene/search/TestGeoPointQuery.java
+++ b/lucene/sandbox/src/test/org/apache/lucene/search/TestGeoPointQuery.java
@@ -348,4 +348,40 @@ public class TestGeoPointQuery extends BaseGeoPointTestCase {
     assertEquals(180.0, GeoUtils.mortonUnhashLon(hash), 0);
     assertEquals(90.0, GeoUtils.mortonUnhashLat(hash), 0);
   }
+
+  public void testEncodeDecode() throws Exception {
+    int iters = atLeast(10000);
+    boolean small = random().nextBoolean();
+    for(int iter=0;iter<iters;iter++) {
+      double lat = randomLat(small);
+      double lon = randomLon(small);
+
+      long enc = GeoUtils.mortonHash(lon, lat);
+      double latEnc = GeoUtils.mortonUnhashLat(enc);
+      double lonEnc = GeoUtils.mortonUnhashLon(enc);
+
+      // NOTE: fails
+      assertEquals("lat=" + lat + " latEnc=" + latEnc + " diff=" + (lat - latEnc), lat, latEnc, 1e-7);
+      assertEquals("lon=" + lon + " lonEnc=" + lonEnc + " diff=" + (lon - lonEnc), lon, lonEnc, 1e-7);
+    }
+  }
+
+  public void testScaleUnscaleIsStable() throws Exception {
+    int iters = atLeast(1000);
+    boolean small = random().nextBoolean();
+    for(int iter=0;iter<iters;iter++) {
+      double lat = randomLat(small);
+      double lon = randomLon(small);
+
+      long enc = GeoUtils.mortonHash(lon, lat);
+      double latEnc = GeoUtils.mortonUnhashLat(enc);
+      double lonEnc = GeoUtils.mortonUnhashLon(enc);
+
+      long enc2 = GeoUtils.mortonHash(lon, lat);
+      double latEnc2 = GeoUtils.mortonUnhashLat(enc2);
+      double lonEnc2 = GeoUtils.mortonUnhashLon(enc2);
+      assertEquals(latEnc, latEnc2, 0.0);
+      assertEquals(lonEnc, lonEnc2, 0.0);
+    }
+  }
 }
diff --git a/lucene/sandbox/src/test/org/apache/lucene/search/TestLatLonPointQueries.java b/lucene/sandbox/src/test/org/apache/lucene/search/TestLatLonPointQueries.java
index 313ec21..897c507 100644
--- a/lucene/sandbox/src/test/org/apache/lucene/search/TestLatLonPointQueries.java
+++ b/lucene/sandbox/src/test/org/apache/lucene/search/TestLatLonPointQueries.java
@@ -112,12 +112,29 @@ public class TestLatLonPointQueries extends BaseGeoPointTestCase {
     boolean small = random().nextBoolean();
     for(int iter=0;iter<iters;iter++) {
       double lat = randomLat(small);
-      double latQuantized = LatLonPoint.decodeLat(LatLonPoint.encodeLat(lat));
-      assertEquals(lat, latQuantized, LatLonPoint.TOLERANCE);
+      double latEnc = LatLonPoint.decodeLat(LatLonPoint.encodeLat(lat));
+      assertEquals(lat, latEnc, LatLonPoint.TOLERANCE);
 
       double lon = randomLon(small);
-      double lonQuantized = LatLonPoint.decodeLon(LatLonPoint.encodeLon(lon));
-      assertEquals(lon, lonQuantized, LatLonPoint.TOLERANCE);
+      double lonEnc = LatLonPoint.decodeLon(LatLonPoint.encodeLon(lon));
+      assertEquals(lon, lonEnc, LatLonPoint.TOLERANCE);
+    }
+  }
+
+  public void testScaleUnscaleIsStable() throws Exception {
+    int iters = atLeast(1000);
+    boolean small = random().nextBoolean();
+    for(int iter=0;iter<iters;iter++) {
+      double lat = randomLat(false);
+      double lon = randomLon(false);
+
+      double latEnc = LatLonPoint.decodeLat(LatLonPoint.encodeLat(lat));
+      double lonEnc = LatLonPoint.decodeLon(LatLonPoint.encodeLon(lon));
+
+      double latEnc2 = LatLonPoint.decodeLat(LatLonPoint.encodeLat(latEnc));
+      double lonEnc2 = LatLonPoint.decodeLon(LatLonPoint.encodeLon(lonEnc));
+      assertEquals(latEnc, latEnc2, 0.0);
+      assertEquals(lonEnc, lonEnc2, 0.0);
     }
   }
 }
diff --git a/lucene/sandbox/src/test/org/apache/lucene/util/BaseGeoPointTestCase.java b/lucene/sandbox/src/test/org/apache/lucene/util/BaseGeoPointTestCase.java
index 4904d1f..eb093f6 100644
--- a/lucene/sandbox/src/test/org/apache/lucene/util/BaseGeoPointTestCase.java
+++ b/lucene/sandbox/src/test/org/apache/lucene/util/BaseGeoPointTestCase.java
@@ -437,7 +437,8 @@ public abstract class BaseGeoPointTestCase extends LuceneTestCase {
       result = -90 + 180.0 * random().nextDouble();
     }
     // TODO: we should not do this here!  it weakens the test, and users don't pre-quantize the lat/lons they send us:
-    return unscaleLat(scaleLat(result));
+    //return unscaleLat(scaleLat(result));
+    return result;
   }
 
   public double randomLon(boolean small) {
@@ -448,7 +449,8 @@ public abstract class BaseGeoPointTestCase extends LuceneTestCase {
       result = -180 + 360.0 * random().nextDouble();
     }
     // TODO: we should not do this here!  it weakens the test, and users don't pre-quantize the lat/lons they send us:
-    return unscaleLon(scaleLon(result));
+    //return unscaleLon(scaleLon(result));
+    return result;
   }
 
   protected GeoRect randomRect(boolean small, boolean canCrossDateLine) {
