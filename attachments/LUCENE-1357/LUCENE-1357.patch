Index: contrib/highlighter/src/java/org/apache/lucene/search/highlight/SpanScorer.java
===================================================================
--- contrib/highlighter/src/java/org/apache/lucene/search/highlight/SpanScorer.java	(revision 693053)
+++ contrib/highlighter/src/java/org/apache/lucene/search/highlight/SpanScorer.java	(working copy)
@@ -25,7 +25,7 @@
   private float maxTermWeight;

   private int position = -1;

   private String defaultField;

-  private boolean highlightCnstScrRngQuery;

+  private static boolean highlightCnstScrRngQuery;

 

   /**

    * @param query

@@ -184,7 +184,7 @@
   /**

    * @return whether ConstantScoreRangeQuerys are set to be highlighted

    */

-  public boolean isHighlightCnstScrRngQuery() {

+  public static boolean isHighlightCnstScrRngQuery() {

     return highlightCnstScrRngQuery;

   }

 

@@ -198,12 +198,12 @@
 

   /**

    * Turns highlighting of ConstantScoreRangeQuery on/off. ConstantScoreRangeQuerys cannot be

-   * highlighted if you rewrite the query first.

+   * highlighted if you rewrite the query first. Must be called before SpanScorer construction.

    * 

    * @param highlightCnstScrRngQuery

    */

-  public void setHighlightCnstScrRngQuery(boolean highlightCnstScrRngQuery) {

-    this.highlightCnstScrRngQuery = highlightCnstScrRngQuery;

+  public static void setHighlightCnstScrRngQuery(boolean highlight) {

+    highlightCnstScrRngQuery = highlight;

   }

 

   /*

Index: contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor.java
===================================================================
--- contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor.java	(revision 693053)
+++ contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor.java	(working copy)
@@ -179,7 +179,7 @@
         sp.setBoost(query.getBoost());
         extractWeightedSpanTerms(terms, sp);
       }
-    } else if (query instanceof ConstantScoreRangeQuery) {
+    } else if (highlightCnstScrRngQuery && query instanceof ConstantScoreRangeQuery) {
       ConstantScoreRangeQuery q = (ConstantScoreRangeQuery) query;
       Term lower = new Term(fieldName, q.getLowerVal());
       Term upper = new Term(fieldName, q.getUpperVal());
Index: contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java
===================================================================
--- contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java	(revision 693053)
+++ contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java	(working copy)
@@ -488,9 +488,10 @@
 
       tokenStream = new CachingTokenFilter(analyzer.tokenStream(HighlighterTest.FIELD_NAME,
           new StringReader(text)));
+      
+      SpanScorer.setHighlightCnstScrRngQuery(true);
       scorer = new SpanScorer(query, HighlighterTest.FIELD_NAME, (CachingTokenFilter) tokenStream);
-      scorer.setHighlightCnstScrRngQuery(true);
-
+      
       Highlighter highlighter = new Highlighter(this, scorer);
 
       ((CachingTokenFilter) tokenStream).reset();
