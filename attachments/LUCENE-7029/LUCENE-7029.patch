From 98052b2112bfd5fd61682d7d9be0c60f2079a826 Mon Sep 17 00:00:00 2001
From: Jacek Migdal <jacek@sumologic.com>
Date: Tue, 16 Feb 2016 11:51:52 +0100
Subject: [PATCH 1/4] LUCENE-7029 Add new methods

---
 .../document/MultiDocumentStoredFieldVisitor.java  | 109 +++++++++++++++++++++
 .../java/org/apache/lucene/index/IndexReader.java  |  27 +++++
 2 files changed, 136 insertions(+)
 create mode 100644 lucene/core/src/java/org/apache/lucene/document/MultiDocumentStoredFieldVisitor.java

diff --git a/lucene/core/src/java/org/apache/lucene/document/MultiDocumentStoredFieldVisitor.java b/lucene/core/src/java/org/apache/lucene/document/MultiDocumentStoredFieldVisitor.java
new file mode 100644
index 0000000..7871e1b
--- /dev/null
+++ b/lucene/core/src/java/org/apache/lucene/document/MultiDocumentStoredFieldVisitor.java
@@ -0,0 +1,109 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.lucene.document;
+
+import java.io.IOException;
+import java.nio.charset.StandardCharsets;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Set;
+
+import org.apache.lucene.index.FieldInfo;
+import org.apache.lucene.index.StoredFieldVisitor;
+
+/** A {@link org.apache.lucene.index.StoredFieldVisitor} that creates a list of {@link
+ *  Document} containing all stored fields, or only specific
+ *  requested fields provided to {@link #MultiDocumentStoredFieldVisitor(Set)}.
+ *  <p>
+ *  This is used by {@link org.apache.lucene.index.IndexReader#documents(int[])} to load a
+ *  document.
+ *
+ * @lucene.experimental */
+public class MultiDocumentStoredFieldVisitor extends StoredFieldVisitor {
+  private final Set<String> fieldsToAdd;
+  private Document currentDocument = new Document();
+  private final ArrayList<Document> documents = new ArrayList<Document>();
+
+  /**
+   * Load only fields named in the provided <code>Set&lt;String&gt;</code>.
+   * @param fieldsToAdd Set of fields to load, or <code>null</code> (all fields).
+   */
+  public MultiDocumentStoredFieldVisitor(Set<String> fieldsToAdd) {
+    this.fieldsToAdd = fieldsToAdd;
+  }
+
+  /** Load all stored fields. */
+  public MultiDocumentStoredFieldVisitor() {
+    this.fieldsToAdd = null;
+  }
+
+  public void newDocument() {
+    documents.add(currentDocument);
+    currentDocument = new Document();
+  }
+
+  @Override
+  public void binaryField(FieldInfo fieldInfo, byte[] value) throws IOException {
+    currentDocument.add(new StoredField(fieldInfo.name, value));
+  }
+
+  @Override
+  public void stringField(FieldInfo fieldInfo, byte[] value) throws IOException {
+    final FieldType ft = new FieldType(TextField.TYPE_STORED);
+    ft.setStoreTermVectors(fieldInfo.hasVectors());
+    ft.setOmitNorms(fieldInfo.omitsNorms());
+    ft.setIndexOptions(fieldInfo.getIndexOptions());
+    currentDocument.add(new StoredField(fieldInfo.name, new String(value, StandardCharsets.UTF_8), ft));
+  }
+
+  @Override
+  public void intField(FieldInfo fieldInfo, int value) {
+    currentDocument.add(new StoredField(fieldInfo.name, value));
+  }
+
+  @Override
+  public void longField(FieldInfo fieldInfo, long value) {
+    currentDocument.add(new StoredField(fieldInfo.name, value));
+  }
+
+  @Override
+  public void floatField(FieldInfo fieldInfo, float value) {
+    currentDocument.add(new StoredField(fieldInfo.name, value));
+  }
+
+  @Override
+  public void doubleField(FieldInfo fieldInfo, double value) {
+    currentDocument.add(new StoredField(fieldInfo.name, value));
+  }
+
+  @Override
+  public Status needsField(FieldInfo fieldInfo) throws IOException {
+    return fieldsToAdd == null || fieldsToAdd.contains(fieldInfo.name) ? Status.YES : Status.NO;
+  }
+
+  /**
+   * Retrieve the visited documents.
+   * @return List of {@link Document} populated with stored fields. Note that only
+   *         the stored information in the field instances is valid,
+   *         data such as indexing options, term vector options,
+   *         etc is not set.
+   */
+  public List<Document> getDocuments() {
+    return documents;
+  }
+}
\ No newline at end of file
diff --git a/lucene/core/src/java/org/apache/lucene/index/IndexReader.java b/lucene/core/src/java/org/apache/lucene/index/IndexReader.java
index 865f816..3d1f05f 100644
--- a/lucene/core/src/java/org/apache/lucene/index/IndexReader.java
+++ b/lucene/core/src/java/org/apache/lucene/index/IndexReader.java
@@ -28,6 +28,7 @@ import java.util.concurrent.atomic.AtomicInteger;
 
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.DocumentStoredFieldVisitor;
+import org.apache.lucene.document.MultiDocumentStoredFieldVisitor;
 import org.apache.lucene.store.AlreadyClosedException;
 import org.apache.lucene.util.Bits;  // javadocs
 import org.apache.lucene.util.IOUtils;
@@ -342,6 +343,12 @@ public abstract class IndexReader implements Closeable {
    *  #document(int)}.  If you want to load a subset, use
    *  {@link DocumentStoredFieldVisitor}.  */
   public abstract void document(int docID, StoredFieldVisitor visitor) throws IOException;
+
+  /** Expert: Like {@link #document(int, StoredFieldVisitor)},
+   * but loads many documents at onceto get better performance.
+   * If you want to load a subset, use
+   *  {@link MultiDocumentStoredFieldVisitor}.  */
+   public abstract void documents(int[] docIDs, MultiDocumentStoredFieldVisitor visitor) throws IOException;
   
   /**
    * Returns the stored fields of the <code>n</code><sup>th</sup>
@@ -384,6 +391,26 @@ public abstract class IndexReader implements Closeable {
     return visitor.getDocument();
   }
 
+  /**
+   * Like {@link #document(int)} but loads many document at same time and only the specified
+   * fields.
+   */
+  public final List<Document> documents(int[] docIDs) throws IOException {
+    final MultiDocumentStoredFieldVisitor visitor = new MultiDocumentStoredFieldVisitor();
+    documents(docIDs, visitor);
+    return visitor.getDocuments();
+  }
+
+  /**
+   * Like {@link #documents(int[])} but loads many document at same time and only the specified
+   * fields.
+   */
+  public final List<Document> documents(int[] docIDs, Set<String> fieldsToLoad) throws IOException {
+    final MultiDocumentStoredFieldVisitor visitor = new MultiDocumentStoredFieldVisitor(fieldsToLoad);
+    documents(docIDs, visitor);
+    return visitor.getDocuments();
+  }
+
   /** Returns true if any documents have been deleted. Implementers should
    *  consider overriding this method if {@link #maxDoc()} or {@link #numDocs()}
    *  are not constant-time operations. */
-- 
2.6.3


From 0f572c80e667941e3de7008d12df725ee251e374 Mon Sep 17 00:00:00 2001
From: Jacek Migdal <jacek@sumologic.com>
Date: Tue, 16 Feb 2016 12:07:01 +0100
Subject: [PATCH 2/4] LUCENE-7029 Implement IndexReader.documents

---
 .../simpletext/SimpleTextStoredFieldsReader.java    |  7 +++++++
 .../apache/lucene/codecs/StoredFieldsReader.java    |  7 ++++++-
 .../compressing/CompressingStoredFieldsReader.java  |  7 +++++++
 .../apache/lucene/index/BaseCompositeReader.java    | 21 +++++++++++++++++++++
 .../java/org/apache/lucene/index/CodecReader.java   |  9 +++++++++
 .../org/apache/lucene/index/FilterLeafReader.java   |  7 +++++++
 .../org/apache/lucene/index/ParallelLeafReader.java |  8 ++++++++
 .../apache/lucene/index/SlowCodecReaderWrapper.java |  6 ++++++
 .../lucene/index/SlowCompositeReaderWrapper.java    |  7 +++++++
 .../search/highlight/TermVectorLeafReader.java      |  4 ++++
 .../org/apache/lucene/index/memory/MemoryIndex.java |  7 +++++++
 .../org/apache/lucene/index/MergeReaderWrapper.java | 10 ++++++++++
 12 files changed, 99 insertions(+), 1 deletion(-)

diff --git a/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader.java b/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader.java
index ead8ecc..20e313c 100644
--- a/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader.java
+++ b/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader.java
@@ -20,6 +20,7 @@ package org.apache.lucene.codecs.simpletext;
 import java.io.IOException;
 
 import org.apache.lucene.codecs.StoredFieldsReader;
+import org.apache.lucene.document.MultiDocumentStoredFieldVisitor;
 import org.apache.lucene.index.FieldInfo;
 import org.apache.lucene.index.FieldInfos;
 import org.apache.lucene.index.IndexFileNames;
@@ -147,6 +148,12 @@ public class SimpleTextStoredFieldsReader extends StoredFieldsReader {
       }
     }
   }
+
+  @Override
+  public void visitDocuments(int[] docIDs, MultiDocumentStoredFieldVisitor visitor)
+      throws IOException {
+    throw new UnsupportedOperationException();
+  }
   
   private void readField(BytesRef type, FieldInfo fieldInfo, StoredFieldVisitor visitor) throws IOException {
     readLine();
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/StoredFieldsReader.java b/lucene/core/src/java/org/apache/lucene/codecs/StoredFieldsReader.java
index 6258df5..3d987b5 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/StoredFieldsReader.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/StoredFieldsReader.java
@@ -19,13 +19,15 @@ package org.apache.lucene.codecs;
 import java.io.Closeable;
 import java.io.IOException;
 
+import org.apache.lucene.document.MultiDocumentStoredFieldVisitor;
 import org.apache.lucene.index.StoredFieldVisitor;
 import org.apache.lucene.util.Accountable;
 
 /**
  * Codec API for reading stored fields.
  * <p>
- * You need to implement {@link #visitDocument(int, StoredFieldVisitor)} to
+ * You need to implement {@link #visitDocument(int, StoredFieldVisitor)} and
+ * {@link #visitDocuments(int[], MultiDocumentStoredFieldVisitor)} to
  * read the stored fields for a document, implement {@link #clone()} (creating
  * clones of any IndexInputs used, etc), and {@link #close()}
  * @lucene.experimental
@@ -39,6 +41,9 @@ public abstract class StoredFieldsReader implements Cloneable, Closeable, Accoun
   /** Visit the stored fields for document <code>docID</code> */
   public abstract void visitDocument(int docID, StoredFieldVisitor visitor) throws IOException;
 
+  /** Visit the stored fields for document <code>docIDs</code> */
+  public abstract void visitDocuments(int[] docIDs, MultiDocumentStoredFieldVisitor visitor) throws IOException;
+
   @Override
   public abstract StoredFieldsReader clone();
   
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.java b/lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.java
index f496928..e5937fc 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.java
@@ -48,6 +48,7 @@ import java.util.Collections;
 import org.apache.lucene.codecs.CodecUtil;
 import org.apache.lucene.codecs.StoredFieldsReader;
 import org.apache.lucene.document.Document;
+import org.apache.lucene.document.MultiDocumentStoredFieldVisitor;
 import org.apache.lucene.index.CorruptIndexException;
 import org.apache.lucene.index.FieldInfo;
 import org.apache.lucene.index.FieldInfos;
@@ -607,6 +608,12 @@ public final class CompressingStoredFieldsReader extends StoredFieldsReader {
   }
 
   @Override
+  public void visitDocuments(int[] docIDs, MultiDocumentStoredFieldVisitor visitor)
+      throws IOException {
+    throw new UnsupportedOperationException();
+  }
+
+  @Override
   public StoredFieldsReader clone() {
     ensureOpen();
     return new CompressingStoredFieldsReader(this, false);
diff --git a/lucene/core/src/java/org/apache/lucene/index/BaseCompositeReader.java b/lucene/core/src/java/org/apache/lucene/index/BaseCompositeReader.java
index 3256107..bb71faa 100644
--- a/lucene/core/src/java/org/apache/lucene/index/BaseCompositeReader.java
+++ b/lucene/core/src/java/org/apache/lucene/index/BaseCompositeReader.java
@@ -22,6 +22,8 @@ import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
 
+import org.apache.lucene.document.MultiDocumentStoredFieldVisitor;
+
 /** Base class for implementing {@link CompositeReader}s based on an array
  * of sub-readers. The implementing class has to add code for
  * correctly refcounting and closing the sub-readers.
@@ -119,6 +121,25 @@ public abstract class BaseCompositeReader<R extends IndexReader> extends Composi
   }
 
   @Override
+  public void documents(int[] docIDs, MultiDocumentStoredFieldVisitor visitor) throws IOException {
+    ensureOpen();
+    int[] sortedDocIds = Arrays.copyOf(docIDs, docIDs.length);
+    Arrays.sort(sortedDocIds);
+    for (int i = 0, step; i < sortedDocIds.length; i += step) {
+      step = 1;
+      int sub = readerIndex(sortedDocIds[i]);
+      while (i + step < sortedDocIds.length && sub == readerIndex(sortedDocIds[i + step])) {
+        step++;
+      }
+      int[] subDocIds = Arrays.copyOfRange(sortedDocIds, i, i + step);
+      for (int j = 0; j < subDocIds.length; j++) {
+        subDocIds[j] -= starts[sub];
+      }
+      subReaders[sub].documents(subDocIds, visitor);
+    }
+  }
+
+  @Override
   public final int docFreq(Term term) throws IOException {
     ensureOpen();
     int total = 0;          // sum freqs in subreaders
diff --git a/lucene/core/src/java/org/apache/lucene/index/CodecReader.java b/lucene/core/src/java/org/apache/lucene/index/CodecReader.java
index 8a492c2..b24e810 100644
--- a/lucene/core/src/java/org/apache/lucene/index/CodecReader.java
+++ b/lucene/core/src/java/org/apache/lucene/index/CodecReader.java
@@ -31,6 +31,7 @@ import org.apache.lucene.codecs.FieldsProducer;
 import org.apache.lucene.codecs.NormsProducer;
 import org.apache.lucene.codecs.StoredFieldsReader;
 import org.apache.lucene.codecs.TermVectorsReader;
+import org.apache.lucene.document.MultiDocumentStoredFieldVisitor;
 import org.apache.lucene.util.Accountable;
 import org.apache.lucene.util.Accountables;
 import org.apache.lucene.util.Bits;
@@ -87,6 +88,14 @@ public abstract class CodecReader extends LeafReader implements Accountable {
     checkBounds(docID);
     getFieldsReader().visitDocument(docID, visitor);
   }
+
+  @Override
+  public void documents(int[] docIDs, MultiDocumentStoredFieldVisitor visitor) throws IOException {
+    for (int i = 0; i < docIDs.length; i++) {
+      checkBounds(docIDs[i]);
+    }
+    getFieldsReader().visitDocuments(docIDs, visitor);
+  }
   
   @Override
   public final Fields getTermVectors(int docID) throws IOException {
diff --git a/lucene/core/src/java/org/apache/lucene/index/FilterLeafReader.java b/lucene/core/src/java/org/apache/lucene/index/FilterLeafReader.java
index 98365a6..eab2311 100644
--- a/lucene/core/src/java/org/apache/lucene/index/FilterLeafReader.java
+++ b/lucene/core/src/java/org/apache/lucene/index/FilterLeafReader.java
@@ -21,6 +21,7 @@ import java.io.IOException;
 import java.util.Iterator;
 import java.util.Objects;
 
+import org.apache.lucene.document.MultiDocumentStoredFieldVisitor;
 import org.apache.lucene.search.QueryCache;
 import org.apache.lucene.util.AttributeSource;
 import org.apache.lucene.util.Bits;
@@ -411,6 +412,12 @@ public class FilterLeafReader extends LeafReader {
   }
 
   @Override
+  public void documents(int[] docIDs, MultiDocumentStoredFieldVisitor visitor) throws IOException {
+    ensureOpen();
+    in.documents(docIDs, visitor);
+  }
+
+  @Override
   protected void doClose() throws IOException {
     in.close();
   }
diff --git a/lucene/core/src/java/org/apache/lucene/index/ParallelLeafReader.java b/lucene/core/src/java/org/apache/lucene/index/ParallelLeafReader.java
index 3d51a0b..43834c3 100644
--- a/lucene/core/src/java/org/apache/lucene/index/ParallelLeafReader.java
+++ b/lucene/core/src/java/org/apache/lucene/index/ParallelLeafReader.java
@@ -26,6 +26,7 @@ import java.util.Set;
 import java.util.SortedMap;
 import java.util.TreeMap;
 
+import org.apache.lucene.document.MultiDocumentStoredFieldVisitor;
 import org.apache.lucene.util.Bits;
 
 /** An {@link LeafReader} which reads multiple, parallel indexes.  Each index
@@ -227,6 +228,13 @@ public class ParallelLeafReader extends LeafReader {
       reader.document(docID, visitor);
     }
   }
+  @Override
+  public void documents(int[] docIDs, MultiDocumentStoredFieldVisitor visitor) throws IOException {
+    ensureOpen();
+    for (final LeafReader reader : storedFieldsReaders) {
+      reader.documents(docIDs, visitor);
+    }
+  }
   
   @Override
   public Fields getTermVectors(int docID) throws IOException {
diff --git a/lucene/core/src/java/org/apache/lucene/index/SlowCodecReaderWrapper.java b/lucene/core/src/java/org/apache/lucene/index/SlowCodecReaderWrapper.java
index 50d9778..00d3ad8 100644
--- a/lucene/core/src/java/org/apache/lucene/index/SlowCodecReaderWrapper.java
+++ b/lucene/core/src/java/org/apache/lucene/index/SlowCodecReaderWrapper.java
@@ -26,6 +26,7 @@ import org.apache.lucene.codecs.FieldsProducer;
 import org.apache.lucene.codecs.NormsProducer;
 import org.apache.lucene.codecs.StoredFieldsReader;
 import org.apache.lucene.codecs.TermVectorsReader;
+import org.apache.lucene.document.MultiDocumentStoredFieldVisitor;
 import org.apache.lucene.util.Bits;
 
 /**
@@ -256,6 +257,11 @@ public final class SlowCodecReaderWrapper {
       }
 
       @Override
+      public void visitDocuments(int[] docIDs, MultiDocumentStoredFieldVisitor visitor) throws IOException {
+        reader.documents(docIDs, visitor);
+      }
+
+      @Override
       public StoredFieldsReader clone() {
         return readerToStoredFieldsReader(reader);
       }
diff --git a/lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper.java b/lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper.java
index db9579c..9a97a7d 100644
--- a/lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper.java
+++ b/lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper.java
@@ -21,6 +21,7 @@ import java.io.IOException;
 import java.util.HashMap;
 import java.util.Map;
 
+import org.apache.lucene.document.MultiDocumentStoredFieldVisitor;
 import org.apache.lucene.index.MultiDocValues.MultiSortedDocValues;
 import org.apache.lucene.index.MultiDocValues.MultiSortedSetDocValues;
 import org.apache.lucene.index.MultiDocValues.OrdinalMap;
@@ -228,6 +229,12 @@ public final class SlowCompositeReaderWrapper extends LeafReader {
   }
 
   @Override
+  public void documents(int[] docIDs, MultiDocumentStoredFieldVisitor visitor) throws IOException {
+    ensureOpen();
+    in.documents(docIDs, visitor);
+  }
+
+  @Override
   public Bits getLiveDocs() {
     ensureOpen();
     return MultiFields.getLiveDocs(in);
diff --git a/lucene/highlighter/src/java/org/apache/lucene/search/highlight/TermVectorLeafReader.java b/lucene/highlighter/src/java/org/apache/lucene/search/highlight/TermVectorLeafReader.java
index 4d76fa9..4256cc3 100644
--- a/lucene/highlighter/src/java/org/apache/lucene/search/highlight/TermVectorLeafReader.java
+++ b/lucene/highlighter/src/java/org/apache/lucene/search/highlight/TermVectorLeafReader.java
@@ -20,6 +20,7 @@ import java.io.IOException;
 import java.util.Collections;
 import java.util.Iterator;
 
+import org.apache.lucene.document.MultiDocumentStoredFieldVisitor;
 import org.apache.lucene.index.BinaryDocValues;
 import org.apache.lucene.index.PointValues;
 import org.apache.lucene.index.DocValuesType;
@@ -178,4 +179,7 @@ public class TermVectorLeafReader extends LeafReader {
   public void document(int docID, StoredFieldVisitor visitor) throws IOException {
   }
 
+  @Override
+  public void documents(int[] docIDs, MultiDocumentStoredFieldVisitor visitor) {
+  }
 }
diff --git a/lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java b/lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java
index 5003ec5..35cfa6b 100644
--- a/lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java
+++ b/lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java
@@ -33,6 +33,7 @@ import org.apache.lucene.analysis.tokenattributes.PayloadAttribute;
 import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute;
 import org.apache.lucene.analysis.tokenattributes.TermToBytesRefAttribute;
 import org.apache.lucene.document.Document;
+import org.apache.lucene.document.MultiDocumentStoredFieldVisitor;
 import org.apache.lucene.index.*;
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.Query;
@@ -1173,6 +1174,12 @@ public class MemoryIndex {
       if (DEBUG) System.err.println("MemoryIndexReader.document");
       // no-op: there are no stored fields
     }
+
+    @Override
+    public void documents(int[] docIDs, MultiDocumentStoredFieldVisitor visitor) {
+      if (DEBUG) System.err.println("MemoryIndexReader.documents");
+      // no-op: there are no stored fields
+    }
   
     @Override
     protected void doClose() {
diff --git a/lucene/misc/src/java/org/apache/lucene/index/MergeReaderWrapper.java b/lucene/misc/src/java/org/apache/lucene/index/MergeReaderWrapper.java
index dba5c91..3b0103a 100644
--- a/lucene/misc/src/java/org/apache/lucene/index/MergeReaderWrapper.java
+++ b/lucene/misc/src/java/org/apache/lucene/index/MergeReaderWrapper.java
@@ -23,6 +23,7 @@ import org.apache.lucene.codecs.FieldsProducer;
 import org.apache.lucene.codecs.NormsProducer;
 import org.apache.lucene.codecs.StoredFieldsReader;
 import org.apache.lucene.codecs.TermVectorsReader;
+import org.apache.lucene.document.MultiDocumentStoredFieldVisitor;
 import org.apache.lucene.util.Bits;
 
 /** this is a hack to make SortingMP fast! */
@@ -232,6 +233,15 @@ class MergeReaderWrapper extends LeafReader {
   }
 
   @Override
+  public void documents(int[] docIDs, MultiDocumentStoredFieldVisitor visitor) throws IOException {
+    ensureOpen();
+    for (int i = 0; i < docIDs.length; i++) {
+      checkBounds(docIDs[i]);
+    }
+    store.visitDocuments(docIDs, visitor);
+  }
+
+  @Override
   protected void doClose() throws IOException {
     in.close();
   }
-- 
2.6.3


From 202bfd0b9342fa24a0331b8a9f5af60404bd1ea6 Mon Sep 17 00:00:00 2001
From: Jacek Migdal <jacek@sumologic.com>
Date: Tue, 16 Feb 2016 12:39:08 +0100
Subject: [PATCH 3/4] LUCENE-7029 Basic implementation

---
 .../simpletext/SimpleTextStoredFieldsReader.java   | 10 ++++++++-
 .../compressing/CompressingStoredFieldsReader.java | 26 +++++++++++++++++-----
 2 files changed, 29 insertions(+), 7 deletions(-)

diff --git a/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader.java b/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader.java
index 20e313c..c84cf25 100644
--- a/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader.java
+++ b/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader.java
@@ -18,6 +18,7 @@ package org.apache.lucene.codecs.simpletext;
 
 
 import java.io.IOException;
+import java.util.Arrays;
 
 import org.apache.lucene.codecs.StoredFieldsReader;
 import org.apache.lucene.document.MultiDocumentStoredFieldVisitor;
@@ -152,7 +153,14 @@ public class SimpleTextStoredFieldsReader extends StoredFieldsReader {
   @Override
   public void visitDocuments(int[] docIDs, MultiDocumentStoredFieldVisitor visitor)
       throws IOException {
-    throw new UnsupportedOperationException();
+    // Sort ids to make IO reads sequential
+    final int[] sortedDocIDs = Arrays.copyOf(docIDs, docIDs.length);
+    Arrays.sort(sortedDocIDs);
+
+    for (int sortedDocID : sortedDocIDs) {
+      visitDocument(sortedDocID, visitor);
+      visitor.newDocument();
+    }
   }
   
   private void readField(BytesRef type, FieldInfo fieldInfo, StoredFieldVisitor visitor) throws IOException {
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.java b/lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.java
index e5937fc..b9b6f08 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.java
@@ -577,12 +577,8 @@ public final class CompressingStoredFieldsReader extends StoredFieldsReader {
     return state.document(docID);
   }
 
-  @Override
-  public void visitDocument(int docID, StoredFieldVisitor visitor)
+  private void visitSerializedDocument(SerializedDocument doc, StoredFieldVisitor visitor)
       throws IOException {
-
-    final SerializedDocument doc = document(docID);
-
     for (int fieldIDX = 0; fieldIDX < doc.numStoredFields; fieldIDX++) {
       final long infoAndBits = doc.in.readVLong();
       final int fieldNumber = (int) (infoAndBits >>> TYPE_BITS);
@@ -608,9 +604,27 @@ public final class CompressingStoredFieldsReader extends StoredFieldsReader {
   }
 
   @Override
+  public void visitDocument(int docID, StoredFieldVisitor visitor)
+      throws IOException {
+
+    final SerializedDocument doc = document(docID);
+
+    visitSerializedDocument(doc, visitor);
+  }
+
+  @Override
   public void visitDocuments(int[] docIDs, MultiDocumentStoredFieldVisitor visitor)
       throws IOException {
-    throw new UnsupportedOperationException();
+    // Sort ids to make IO reads sequential
+    final int[] sortedDocIDs = Arrays.copyOf(docIDs, docIDs.length);
+    Arrays.sort(sortedDocIDs);
+
+    // TODO: take advantage of different optimizations
+    for (int sortedDocID : sortedDocIDs) {
+      final SerializedDocument doc = document(sortedDocID);
+
+      visitSerializedDocument(doc, visitor);
+    }
   }
 
   @Override
-- 
2.6.3


From e28fff1ad6eccc75bab3e75a5656c9b3300553ca Mon Sep 17 00:00:00 2001
From: Jacek Migdal <jacek@sumologic.com>
Date: Tue, 16 Feb 2016 14:00:00 +0100
Subject: [PATCH 4/4] LUCENE-7029 Implement better decompressor

---
 .../compressing/CompressingStoredFieldsReader.java | 76 ++++++++++++++++++++--
 1 file changed, 72 insertions(+), 4 deletions(-)

diff --git a/lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.java b/lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.java
index b9b6f08..4157a97 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.java
@@ -566,6 +566,57 @@ public final class CompressingStoredFieldsReader extends StoredFieldsReader {
       return new SerializedDocument(documentInput, length, numStoredFields);
     }
 
+    /**
+     * Get the serialized representation of the given docIDs. The docIDs
+     * have to be sorted and contained in the current block.
+     */
+    SerializedDocument[] documents(int[] docIDs) throws IOException {
+      if (docIDs == null || docIDs.length == 0 ||
+          docIDs[0] < docBase ||
+          docIDs[docIDs.length - 1] >= docBase + chunkDocs) {
+        throw new IllegalArgumentException();
+      }
+      for (int i = 0; i + 1 < docIDs.length; i++) {
+        if (docIDs[i] > docIDs[i + 1]) {
+          throw new IllegalArgumentException();
+        }
+      }
+
+      // Sliced block doesn't take advantage of this optimization, so it's easier to use original document call.
+      final SerializedDocument[] result = new SerializedDocument[docIDs.length];
+      if (sliced) {
+        for (int i = 0; i < docIDs.length; i++) {
+          result[i] = document(docIDs[i]);
+        }
+        return result;
+      }
+
+      // Decompress if needed
+      if (!merging) {
+        final int firstOffset = offsets[docIDs[0] - docBase];
+        final int lastLength = offsets[docIDs[docIDs.length - 1] - docBase + 1];
+        final int totalLength = offsets[chunkDocs];
+
+        fieldsStream.seek(startPointer);
+        decompressor.decompress(fieldsStream, totalLength, firstOffset, lastLength, bytes);
+        assert bytes.length == lastLength;
+      }
+
+      // Fill results
+      for (int i = 0; i < docIDs.length; i++) {
+        final int index = docIDs[i] - docBase;
+        final int offset = offsets[index];
+        final int length = offsets[index+1] - offset;
+        final int numStoredFields = this.numStoredFields[index];
+
+        final DataInput documentInput = new ByteArrayDataInput(bytes.bytes, bytes.offset + offset, length);
+
+        result[i] = new SerializedDocument(documentInput, length, numStoredFields);
+      }
+
+      return result;
+    }
+
   }
 
   SerializedDocument document(int docID) throws IOException {
@@ -619,11 +670,28 @@ public final class CompressingStoredFieldsReader extends StoredFieldsReader {
     final int[] sortedDocIDs = Arrays.copyOf(docIDs, docIDs.length);
     Arrays.sort(sortedDocIDs);
 
-    // TODO: take advantage of different optimizations
-    for (int sortedDocID : sortedDocIDs) {
-      final SerializedDocument doc = document(sortedDocID);
+    for (int i = 0; i < sortedDocIDs.length; ) {
+      int step = 1;
+      if (state.contains(sortedDocIDs[i]) == false) {
+        fieldsStream.seek(indexReader.getStartPointer(sortedDocIDs[i]));
+        state.reset(sortedDocIDs[i]);
+      }
+      while (i + step < sortedDocIDs.length && state.contains(sortedDocIDs[i + step])) {
+        step += 1;
+      }
+
+      if (step == 1) {
+        visitSerializedDocument(state.document(sortedDocIDs[i]), visitor);
+        visitor.newDocument();
+      } else {
+        final SerializedDocument[] docs = state.documents(Arrays.copyOfRange(sortedDocIDs, i, i + step));
+        for (SerializedDocument doc : docs) {
+          visitSerializedDocument(doc, visitor);
+          visitor.newDocument();
+        }
+      }
 
-      visitSerializedDocument(doc, visitor);
+      i += step;
     }
   }
 
-- 
2.6.3

