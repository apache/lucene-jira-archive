diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl.java
index fca8386c67..3483b64064 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl.java
@@ -64,8 +64,9 @@ public abstract class QueryNodeImpl implements QueryNode, Cloneable {
     }
 
     this.clauses.add(child);
-    ((QueryNodeImpl) child).setParent(this);
-
+    if (child instanceof QueryNodeImpl) {
+      ((QueryNodeImpl) child).setParent(this);
+    }
   }
 
   @Override
diff --git a/lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/core/nodes/TestQueryNode.java b/lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/core/nodes/TestQueryNode.java
index b10d15f5c8..71827a49be 100644
--- a/lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/core/nodes/TestQueryNode.java
+++ b/lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/core/nodes/TestQueryNode.java
@@ -18,7 +18,10 @@ package org.apache.lucene.queryparser.flexible.core.nodes;
 
 import java.util.Arrays;
 import java.util.Collections;
+import java.util.List;
+import java.util.Map;
 
+import org.apache.lucene.queryparser.flexible.core.parser.EscapeQuerySyntax;
 import org.apache.lucene.util.LuceneTestCase;
 
 public class TestQueryNode extends LuceneTestCase {
@@ -77,5 +80,106 @@ public class TestQueryNode extends LuceneTestCase {
     assertTrue(booleanNode.getChildren().size()==0);
     assertNull(fieldNode.getParent());
   }
-  
+
+  public void testAddNonQueryNodeImplChild() throws Exception {
+    BooleanQueryNode booleanNode = new BooleanQueryNode(Collections.<QueryNode>emptyList());
+    FieldQueryNode fieldNode = new FieldQueryNode("foo", "A", 0, 1);
+    ForwardingQueryNode wrappedNode = new ForwardingQueryNode(fieldNode);
+
+    booleanNode.add(wrappedNode);
+    assertTrue(booleanNode.getChildren().size() == 1);
+    assertEquals(wrappedNode, booleanNode.getChildren().get(0));
+  }
+
+  /**
+   * Basic implementation which does not extend {@link QueryNodeImpl}.
+   * Template for decoration.
+   */
+  static class ForwardingQueryNode implements QueryNode {
+      final QueryNode delegate;
+
+      public ForwardingQueryNode(QueryNode delegate) {
+        this.delegate = delegate;
+      }
+
+      @Override
+      public CharSequence toQueryString(EscapeQuerySyntax escapeSyntaxParser) {
+        return delegate.toQueryString(escapeSyntaxParser);
+      }
+
+      @Override
+      public String toString() {
+        return delegate.toString();
+      }
+
+      @Override
+      public List<QueryNode> getChildren() {
+        return delegate.getChildren();
+      }
+
+      @Override
+      public boolean isLeaf() {
+        return delegate.isLeaf();
+      }
+
+      @Override
+      public boolean containsTag(String tagName) {
+        return delegate.containsTag(tagName);
+      }
+
+      @Override
+      public Object getTag(String tagName) {
+        return delegate.getTag(tagName);
+      }
+
+      @Override
+      public QueryNode getParent() {
+        return delegate.getParent();
+      }
+
+      @Override
+      public QueryNode cloneTree() throws CloneNotSupportedException {
+        return delegate.cloneTree();
+      }
+
+      @Override
+      public void add(QueryNode child) {
+        delegate.add(child);
+      }
+
+      @Override
+      public void add(List<QueryNode> children) {
+        delegate.add(children);
+      }
+
+      @Override
+      public void set(List<QueryNode> children) {
+        delegate.set(children);
+      }
+
+      @Override
+      public void setTag(String tagName, Object value) {
+        delegate.setTag(tagName, value);
+      }
+
+      @Override
+      public void unsetTag(String tagName) {
+        delegate.unsetTag(tagName);
+      }
+
+      @Override
+      public Map<String, Object> getTagMap() {
+        return delegate.getTagMap();
+      }
+
+      @Override
+      public void removeFromParent() {
+        delegate.removeFromParent();
+      }
+
+      @Override
+      public void removeChildren(QueryNode childNode) {
+        delegate.removeChildren(childNode);
+      }
+  }
 }
