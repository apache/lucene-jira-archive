diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter.java
index 613f8a173c..e016fe1931 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter.java
@@ -144,4 +144,10 @@ public final class EdgeNGramTokenFilter extends TokenFilter {
     curTermBuffer = null;
     curPosIncr = 0;
   }
+
+  @Override
+  public void end() throws IOException {
+    super.end();
+    posIncrAtt.setPositionIncrement(curPosIncr);
+  }
 }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter.java
index 5b6147b8ea..51f3bd69a9 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter.java
@@ -154,4 +154,10 @@ public final class NGramTokenFilter extends TokenFilter {
     curTermBuffer = null;
     curPosIncr = 0;
   }
+
+  @Override
+  public void end() throws IOException {
+    super.end();
+    posIncrAtt.setPositionIncrement(curPosIncr);
+  }
 }
diff --git a/lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilterTest.java b/lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilterTest.java
index fd1949a035..8fcf7a14cf 100644
--- a/lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilterTest.java
+++ b/lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilterTest.java
@@ -269,4 +269,14 @@ public class EdgeNGramTokenFilterTest extends BaseTokenStreamTestCase {
       tk.close();
     }
   }
+
+  public void testEndPositionIncrement() throws IOException {
+    TokenStream source = whitespaceMockTokenizer("seventeen one two three four");
+    TokenStream input = new EdgeNGramTokenFilter(source, 8, 8, false);
+    PositionIncrementAttribute posIncAtt = input.addAttribute(PositionIncrementAttribute.class);
+    input.reset();
+    while (input.incrementToken()) {}
+    input.end();
+    assertEquals(4, posIncAtt.getPositionIncrement());
+  }
 }
diff --git a/lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenFilterTest.java b/lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenFilterTest.java
index 2a473961c0..c3ef231afe 100644
--- a/lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenFilterTest.java
+++ b/lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenFilterTest.java
@@ -17,23 +17,24 @@
 package org.apache.lucene.analysis.ngram;
 
 
+import java.io.IOException;
+import java.io.StringReader;
+import java.util.Random;
+
 import org.apache.lucene.analysis.Analyzer;
+import org.apache.lucene.analysis.BaseTokenStreamTestCase;
 import org.apache.lucene.analysis.MockTokenizer;
 import org.apache.lucene.analysis.TokenFilter;
 import org.apache.lucene.analysis.TokenStream;
-import org.apache.lucene.analysis.BaseTokenStreamTestCase;
 import org.apache.lucene.analysis.Tokenizer;
 import org.apache.lucene.analysis.core.KeywordTokenizer;
 import org.apache.lucene.analysis.core.WhitespaceTokenizer;
 import org.apache.lucene.analysis.miscellaneous.ASCIIFoldingFilter;
 import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
 import org.apache.lucene.analysis.tokenattributes.OffsetAttribute;
+import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute;
 import org.apache.lucene.util.TestUtil;
 
-import java.io.IOException;
-import java.io.StringReader;
-import java.util.Random;
-
 /**
  * Tests {@link NGramTokenFilter} for correctness.
  */
@@ -169,6 +170,16 @@ public class NGramTokenFilterTest extends BaseTokenStreamTestCase {
         new int[]    {     1,   0,    0,    0,    0,    0,    0,    0,    0,    0,    0  });
     analyzer.close();
   }
+
+  public void testEndPositionIncrement() throws IOException {
+    TokenStream source = whitespaceMockTokenizer("seventeen one two three four");
+    TokenStream input = new NGramTokenFilter(source, 8, 8, false);
+    PositionIncrementAttribute posIncAtt = input.addAttribute(PositionIncrementAttribute.class);
+    input.reset();
+    while (input.incrementToken()) {}
+    input.end();
+    assertEquals(4, posIncAtt.getPositionIncrement());
+  }
   
   /** blast some random strings through the analyzer */
   public void testRandomStrings() throws Exception {
