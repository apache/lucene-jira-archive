Index: src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery.java
===================================================================
--- src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery.java	(revision 824507)
+++ src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery.java	(working copy)
@@ -17,28 +17,22 @@
  * limitations under the License.
  */
 
-import org.apache.lucene.search.IndexSearcher;
-import org.apache.lucene.search.Query;
-import org.apache.lucene.search.Scorer;
-import org.apache.lucene.search.Weight;
-import org.apache.lucene.search.CheckHits;
-import org.apache.lucene.search.QueryUtils;
+import java.util.HashSet;
+import java.util.Set;
 
-import org.apache.lucene.store.RAMDirectory;
-
-import org.apache.lucene.index.IndexWriter;
-import org.apache.lucene.index.IndexReader;
-import org.apache.lucene.index.Term;
-
 import org.apache.lucene.analysis.WhitespaceAnalyzer;
-
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
-
+import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.IndexWriter;
+import org.apache.lucene.index.Term;
+import org.apache.lucene.search.CheckHits;
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.Query;
+import org.apache.lucene.search.QueryUtils;
+import org.apache.lucene.store.RAMDirectory;
 import org.apache.lucene.util.LuceneTestCase;
 
-import java.util.HashSet;
-
 public class TestFieldMaskingSpanQuery extends LuceneTestCase {
 
   protected static Document doc(Field[] fields) {
@@ -137,7 +131,9 @@
 
     QueryUtils.checkEqual(q, qr);
 
-    assertEquals(1, qr.getTerms().size());
+    Set<Term> terms = new HashSet<Term>();
+    qr.extractTerms(terms);
+    assertEquals(1, terms.size());
   }
   
   public void testRewrite1() throws Exception {
@@ -155,7 +151,9 @@
 
     QueryUtils.checkUnequal(q, qr);
 
-    assertEquals(2, qr.getTerms().size());
+    Set<Term> terms = new HashSet<Term>();
+    qr.extractTerms(terms);
+    assertEquals(2, terms.size());
   }
   
   public void testRewrite2() throws Exception {
Index: src/test/org/apache/lucene/search/spans/JustCompileSearchSpans.java
===================================================================
--- src/test/org/apache/lucene/search/spans/JustCompileSearchSpans.java	(revision 824507)
+++ src/test/org/apache/lucene/search/spans/JustCompileSearchSpans.java	(working copy)
@@ -77,11 +77,6 @@
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
-    /** @deprecated delete in 3.0. */
-    public Collection getTerms() {
-      throw new UnsupportedOperationException(UNSUPPORTED_MSG);
-    }
-
     public String toString(String field) {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
Index: src/java/org/apache/lucene/search/ConstantScoreQuery.java
===================================================================
--- src/java/org/apache/lucene/search/ConstantScoreQuery.java	(revision 824507)
+++ src/java/org/apache/lucene/search/ConstantScoreQuery.java	(working copy)
@@ -18,6 +18,7 @@
  */
 
 import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.Term;
 
 import java.io.IOException;
 import java.util.Set;
@@ -42,7 +43,7 @@
     return this;
   }
 
-  public void extractTerms(Set terms) {
+  public void extractTerms(Set<Term> terms) {
     // OK to not add any terms when used for MultiSearcher,
     // but may not be OK for highlighting
   }
Index: src/java/org/apache/lucene/search/MatchAllDocsQuery.java
===================================================================
--- src/java/org/apache/lucene/search/MatchAllDocsQuery.java	(revision 824507)
+++ src/java/org/apache/lucene/search/MatchAllDocsQuery.java	(working copy)
@@ -18,6 +18,7 @@
  */
 
 import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.Term;
 import org.apache.lucene.index.TermDocs;
 import org.apache.lucene.util.ToStringUtils;
 
@@ -131,7 +132,7 @@
     return new MatchAllDocsWeight(searcher);
   }
 
-  public void extractTerms(Set terms) {
+  public void extractTerms(Set<Term> terms) {
   }
 
   public String toString(String field) {
Index: src/java/org/apache/lucene/search/DisjunctionMaxQuery.java
===================================================================
--- src/java/org/apache/lucene/search/DisjunctionMaxQuery.java	(revision 824507)
+++ src/java/org/apache/lucene/search/DisjunctionMaxQuery.java	(working copy)
@@ -23,6 +23,7 @@
 import java.util.Set;
 
 import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.Term;
 
 /**
  * A query that generates the union of documents produced by its subqueries, and that scores each document with the maximum
@@ -213,7 +214,7 @@
   }
 
   // inherit javadoc
-  public void extractTerms(Set terms) {
+  public void extractTerms(Set<Term> terms) {
     for (Iterator iter = disjuncts.iterator(); iter.hasNext();) {
       ((Query) iter.next()).extractTerms(terms);
     }
Index: src/java/org/apache/lucene/search/spans/SpanFirstQuery.java
===================================================================
--- src/java/org/apache/lucene/search/spans/SpanFirstQuery.java	(revision 824507)
+++ src/java/org/apache/lucene/search/spans/SpanFirstQuery.java	(working copy)
@@ -24,6 +24,7 @@
 import java.util.ArrayList;
 
 import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.Term;
 import org.apache.lucene.search.Query;
 import org.apache.lucene.util.ToStringUtils;
 
@@ -47,12 +48,6 @@
 
   public String getField() { return match.getField(); }
 
-  /** Returns a collection of all terms matched by this query.
-   * @deprecated use extractTerms instead
-   * @see #extractTerms(Set)
-   */
-  public Collection getTerms() { return match.getTerms(); }
-
   public String toString(String field) {
     StringBuilder buffer = new StringBuilder();
     buffer.append("spanFirst(");
@@ -70,7 +65,7 @@
     return spanFirstQuery;
   }
   
-  public void extractTerms(Set terms) {
+  public void extractTerms(Set<Term> terms) {
 	    match.extractTerms(terms);
   }
 
Index: src/java/org/apache/lucene/search/spans/SpanTermQuery.java
===================================================================
--- src/java/org/apache/lucene/search/spans/SpanTermQuery.java	(revision 824507)
+++ src/java/org/apache/lucene/search/spans/SpanTermQuery.java	(working copy)
@@ -38,16 +38,7 @@
 
   public String getField() { return term.field(); }
   
-  /** Returns a collection of all terms matched by this query.
-   * @deprecated use extractTerms instead
-   * @see #extractTerms(Set)
-   */
-  public Collection getTerms() {
-    Collection terms = new ArrayList();
-    terms.add(term);
-    return terms;
-  }
-  public void extractTerms(Set terms) {
+  public void extractTerms(Set<Term> terms) {
 	  terms.add(term);
   }
 
Index: src/java/org/apache/lucene/search/spans/FieldMaskingSpanQuery.java
===================================================================
--- src/java/org/apache/lucene/search/spans/FieldMaskingSpanQuery.java	(revision 824507)
+++ src/java/org/apache/lucene/search/spans/FieldMaskingSpanQuery.java	(working copy)
@@ -22,6 +22,7 @@
 import java.util.Set;
 
 import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.Term;
 import org.apache.lucene.search.Query;
 import org.apache.lucene.search.Weight;
 import org.apache.lucene.search.Searcher;
@@ -94,12 +95,7 @@
     return maskedQuery.getSpans(reader);
   }
 
-  /** @deprecated use {@link #extractTerms(Set)} instead. */
-  public Collection getTerms() {
-    return maskedQuery.getTerms();
-  }
-  
-  public void extractTerms(Set terms) {
+  public void extractTerms(Set<Term> terms) {
     maskedQuery.extractTerms(terms);
   }  
 
Index: src/java/org/apache/lucene/search/spans/SpanQuery.java
===================================================================
--- src/java/org/apache/lucene/search/spans/SpanQuery.java	(revision 824507)
+++ src/java/org/apache/lucene/search/spans/SpanQuery.java	(working copy)
@@ -19,6 +19,7 @@
 
 import java.io.IOException;
 import java.util.Collection;
+import java.util.Set;
 
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.search.Query;
@@ -34,12 +35,6 @@
   /** Returns the name of the field matched by this query.*/
   public abstract String getField();
 
-  /** Returns a collection of all terms matched by this query.
-   * @deprecated use extractTerms instead
-   * @see Query#extractTerms(Set)
-   */
-  public abstract Collection getTerms();
-  
   public Weight createWeight(Searcher searcher) throws IOException {
     return new SpanWeight(this, searcher);
   }
Index: src/java/org/apache/lucene/search/spans/SpanNotQuery.java
===================================================================
--- src/java/org/apache/lucene/search/spans/SpanNotQuery.java	(revision 824507)
+++ src/java/org/apache/lucene/search/spans/SpanNotQuery.java	(working copy)
@@ -18,6 +18,7 @@
  */
 
 import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.Term;
 import org.apache.lucene.search.Query;
 import org.apache.lucene.util.ToStringUtils;
 
@@ -49,13 +50,7 @@
 
   public String getField() { return include.getField(); }
 
-  /** Returns a collection of all terms matched by this query.
-   * @deprecated use extractTerms instead
-   * @see #extractTerms(Set)
-   */
-  public Collection getTerms() { return include.getTerms(); }
-  
-  public void extractTerms(Set terms) { include.extractTerms(terms); }
+  public void extractTerms(Set<Term> terms) { include.extractTerms(terms); }
 
   public String toString(String field) {
     StringBuilder buffer = new StringBuilder();
Index: src/java/org/apache/lucene/search/spans/SpanOrQuery.java
===================================================================
--- src/java/org/apache/lucene/search/spans/SpanOrQuery.java	(revision 824507)
+++ src/java/org/apache/lucene/search/spans/SpanOrQuery.java	(working copy)
@@ -26,6 +26,7 @@
 import java.util.Set;
 
 import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.Term;
 import org.apache.lucene.util.PriorityQueue;
 import org.apache.lucene.util.ToStringUtils;
 import org.apache.lucene.search.Query;
@@ -58,24 +59,10 @@
 
   public String getField() { return field; }
 
-  /** Returns a collection of all terms matched by this query.
-   * @deprecated use extractTerms instead
-   * @see #extractTerms(Set)
-   */
-  public Collection getTerms() {
-    Collection terms = new ArrayList();
+  public void extractTerms(Set<Term> terms) {
     Iterator i = clauses.iterator();
     while (i.hasNext()) {
       SpanQuery clause = (SpanQuery)i.next();
-      terms.addAll(clause.getTerms());
-    }
-    return terms;
-  }
-  
-  public void extractTerms(Set terms) {
-    Iterator i = clauses.iterator();
-    while (i.hasNext()) {
-      SpanQuery clause = (SpanQuery)i.next();
       clause.extractTerms(terms);
     }
   }
Index: src/java/org/apache/lucene/search/spans/SpanNearQuery.java
===================================================================
--- src/java/org/apache/lucene/search/spans/SpanNearQuery.java	(revision 824507)
+++ src/java/org/apache/lucene/search/spans/SpanNearQuery.java	(working copy)
@@ -27,6 +27,7 @@
 
 
 import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.Term;
 import org.apache.lucene.search.Query;
 import org.apache.lucene.util.ToStringUtils;
 
@@ -80,21 +81,7 @@
 
   public String getField() { return field; }
   
-  /** Returns a collection of all terms matched by this query.
-   * @deprecated use extractTerms instead
-   * @see #extractTerms(Set)
-   */
-  public Collection getTerms() {
-    Collection terms = new ArrayList();
-    Iterator i = clauses.iterator();
-    while (i.hasNext()) {
-      SpanQuery clause = (SpanQuery)i.next();
-      terms.addAll(clause.getTerms());
-    }
-    return terms;
-  }
-  
-  public void extractTerms(Set terms) {
+  public void extractTerms(Set<Term> terms) {
 	    Iterator i = clauses.iterator();
 	    while (i.hasNext()) {
 	      SpanQuery clause = (SpanQuery)i.next();
Index: src/java/org/apache/lucene/search/MultiPhraseQuery.java
===================================================================
--- src/java/org/apache/lucene/search/MultiPhraseQuery.java	(revision 824507)
+++ src/java/org/apache/lucene/search/MultiPhraseQuery.java	(working copy)
@@ -113,7 +113,7 @@
   }
 
   // inherit javadoc
-  public void extractTerms(Set terms) {
+  public void extractTerms(Set<Term> terms) {
     for (Iterator iter = termArrays.iterator(); iter.hasNext();) {
       Term[] arr = (Term[])iter.next();
       for (int i=0; i<arr.length; i++) {
Index: src/java/org/apache/lucene/search/FilteredQuery.java
===================================================================
--- src/java/org/apache/lucene/search/FilteredQuery.java	(revision 824507)
+++ src/java/org/apache/lucene/search/FilteredQuery.java	(working copy)
@@ -18,6 +18,7 @@
  */
 
 import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.Term;
 import org.apache.lucene.util.ToStringUtils;
 
 import java.io.IOException;
@@ -187,7 +188,7 @@
   }
 
   // inherit javadoc
-  public void extractTerms(Set terms) {
+  public void extractTerms(Set<Term> terms) {
       getQuery().extractTerms(terms);
   }
 
Index: src/java/org/apache/lucene/search/function/ValueSourceQuery.java
===================================================================
--- src/java/org/apache/lucene/search/function/ValueSourceQuery.java	(revision 824507)
+++ src/java/org/apache/lucene/search/function/ValueSourceQuery.java	(working copy)
@@ -18,6 +18,7 @@
  */
 
 import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.Term;
 import org.apache.lucene.index.TermDocs;
 import org.apache.lucene.search.*;
 import org.apache.lucene.util.ToStringUtils;
@@ -58,7 +59,7 @@
   }
 
   /*(non-Javadoc) @see org.apache.lucene.search.Query#extractTerms(java.util.Set) */
-  public void extractTerms(Set terms) {
+  public void extractTerms(Set<Term> terms) {
     // no terms involved here
   }
 
Index: src/java/org/apache/lucene/search/function/CustomScoreQuery.java
===================================================================
--- src/java/org/apache/lucene/search/function/CustomScoreQuery.java	(revision 824507)
+++ src/java/org/apache/lucene/search/function/CustomScoreQuery.java	(working copy)
@@ -21,6 +21,7 @@
 import java.util.Set;
 
 import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.Term;
 import org.apache.lucene.search.ComplexExplanation;
 import org.apache.lucene.search.Explanation;
 import org.apache.lucene.search.Query;
@@ -98,7 +99,7 @@
   }
 
   /*(non-Javadoc) @see org.apache.lucene.search.Query#extractTerms(java.util.Set) */
-  public void extractTerms(Set terms) {
+  public void extractTerms(Set<Term> terms) {
     subQuery.extractTerms(terms);
     for(int i = 0; i < valSrcQueries.length; i++) {
       valSrcQueries[i].extractTerms(terms);
Index: src/java/org/apache/lucene/search/BooleanQuery.java
===================================================================
--- src/java/org/apache/lucene/search/BooleanQuery.java	(revision 824507)
+++ src/java/org/apache/lucene/search/BooleanQuery.java	(working copy)
@@ -18,6 +18,7 @@
  */
 
 import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.Term;
 import org.apache.lucene.util.ToStringUtils;
 import org.apache.lucene.search.BooleanClause.Occur;
 
@@ -449,7 +450,7 @@
   }
 
   // inherit javadoc
-  public void extractTerms(Set terms) {
+  public void extractTerms(Set<Term> terms) {
       for (Iterator i = clauses.iterator(); i.hasNext();) {
           BooleanClause clause = (BooleanClause) i.next();
           clause.getQuery().extractTerms(terms);
Index: src/java/org/apache/lucene/search/Query.java
===================================================================
--- src/java/org/apache/lucene/search/Query.java	(revision 824507)
+++ src/java/org/apache/lucene/search/Query.java	(working copy)
@@ -24,6 +24,7 @@
 import java.util.Set;
 
 import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.Term;
 
 /** The abstract base class for queries.
     <p>Instantiable subclasses are:
@@ -165,7 +166,7 @@
    * 
    * @throws UnsupportedOperationException if this query is not yet rewritten
    */
-  public void extractTerms(Set terms) {
+  public void extractTerms(Set<Term> terms) {
     // needs to be implemented by query subclasses
     throw new UnsupportedOperationException();
   }
Index: src/java/org/apache/lucene/search/PhraseQuery.java
===================================================================
--- src/java/org/apache/lucene/search/PhraseQuery.java	(revision 824507)
+++ src/java/org/apache/lucene/search/PhraseQuery.java	(working copy)
@@ -251,9 +251,9 @@
   }
 
   /**
-   * @see org.apache.lucene.search.Query#extractTerms(java.util.Set)
+   * @see org.apache.lucene.search.Query#extractTerms(Set)
    */
-  public void extractTerms(Set queryTerms) {
+  public void extractTerms(Set<Term> queryTerms) {
     queryTerms.addAll(terms);
   }
 
Index: src/java/org/apache/lucene/search/TermQuery.java
===================================================================
--- src/java/org/apache/lucene/search/TermQuery.java	(revision 824507)
+++ src/java/org/apache/lucene/search/TermQuery.java	(working copy)
@@ -146,7 +146,7 @@
     return new TermWeight(searcher);
   }
 
-  public void extractTerms(Set terms) {
+  public void extractTerms(Set<Term> terms) {
     terms.add(getTerm());
   }
 
