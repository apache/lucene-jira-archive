diff --git a/gradle/generation/icu.gradle b/gradle/generation/icu.gradle
index fca3d8a5ca8..8e1a166d2c3 100644
--- a/gradle/generation/icu.gradle
+++ b/gradle/generation/icu.gradle
@@ -19,6 +19,43 @@ import java.nio.file.Files
  * limitations under the License.
  */
 
+project.ext.quietExec = { closure ->
+  resolveStrategy = Closure.DELEGATE_ONLY
+  delegate = closure.delegate
+
+  def outputFile = getTemporaryDir().createTempFile("exec-output-", ".txt")
+  def result
+
+  outputFile.withOutputStream { output ->
+    // we want to capture both stdout and stderr to the same
+    // stream but gradle attempts to close these separately
+    // (it has two independent pumping threads) and it can happen
+    // that one still tries to write something when the other closed
+    // the underlying output stream.
+    def wrapped = new java.io.FilterOutputStream(output) {
+      public void close() {
+        // no-op. we close this stream manually.
+      }
+    }
+
+    result = project.exec { execSpec ->
+      project.configure(execSpec, closure)
+
+      standardOutput = wrapped
+      errorOutput = wrapped
+      ignoreExitValue true
+    }
+  }
+
+  if (result.getExitValue() != 0) {
+    // Pipe the output to console. Intentionally skips any encoding conversion
+    // and pumps raw bytes.
+    System.out.write(outputFile.bytes)
+    System.out.flush()
+    result.rethrowFailure()
+  }
+}
+
 /* Regenerates ICU data files.
  *
  * The icu4c version must match exactly the icu4j version in version.props:
@@ -63,7 +100,7 @@ configure(project(":lucene:analysis:icu")) {
         ]
       }
 
-      project.exec {
+      project.quietExec {
         executable gennorm
         ignoreExitValue = false
         args = [
@@ -77,7 +114,8 @@ configure(project(":lucene:analysis:icu")) {
             "NativeDigitFolding.txt"
         ]
       }
-      project.exec {
+
+      project.quietExec {
         executable icupkg
         ignoreExitValue = false
         args = [
@@ -157,7 +195,7 @@ configure(project(":lucene:analysis:icu")) {
       project.delete icuSrcDir
 
       // Extract the tgz
-      project.exec {
+      project.quietExec {
         executable "tar"
         ignoreExitValue false
 
@@ -169,7 +207,7 @@ configure(project(":lucene:analysis:icu")) {
       }
 
       // Compile: (cd icu/source && ./configure --prefix=$(pwd) --enable-rpath && make -j4)
-      project.exec {
+      project.quietExec {
         executable "sh"
         ignoreExitValue false
 
@@ -181,7 +219,7 @@ configure(project(":lucene:analysis:icu")) {
         ]
       }
 
-      project.exec {
+      project.quietExec {
         executable "make"
         ignoreExitValue false
         workingDir icuSrcDir
@@ -192,7 +230,7 @@ configure(project(":lucene:analysis:icu")) {
 
       // Test that the binaries work:  derb -V
       logger.lifecycle("Compiled ICU, checking...")
-      project.exec {
+      project.quietExec {
         executable "./derb"
         ignoreExitValue false
         workingDir icuBinDir
