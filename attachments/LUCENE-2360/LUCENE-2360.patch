Index: lucene/src/test/org/apache/lucene/index/TestByteSlices.java
===================================================================
--- lucene/src/test/org/apache/lucene/index/TestByteSlices.java	(revision 929732)
+++ lucene/src/test/org/apache/lucene/index/TestByteSlices.java	(working copy)
@@ -16,6 +16,7 @@
 
 import java.util.Random;
 import java.util.ArrayList;
+import java.util.List;
 import org.apache.lucene.util.LuceneTestCase;
 
 public class TestByteSlices extends LuceneTestCase {
@@ -41,6 +42,13 @@
       for(int i=start;i<end;i++)
         freeByteBlocks.add(blocks[i]);
     }
+
+    @Override
+    synchronized void recycleByteBlocks(List<byte[]> blocks) {
+      final int size = blocks.size();
+      for(int i=0;i<size;i++)
+        freeByteBlocks.add(blocks.get(i));
+    }
   }
 
   public void testBasic() throws Throwable {
Index: lucene/src/java/org/apache/lucene/index/ByteBlockPool.java
===================================================================
--- lucene/src/java/org/apache/lucene/index/ByteBlockPool.java	(revision 929732)
+++ lucene/src/java/org/apache/lucene/index/ByteBlockPool.java	(working copy)
@@ -34,6 +34,7 @@
  * hit a non-zero byte. */
 
 import java.util.Arrays;
+import java.util.List;
 import static org.apache.lucene.util.RamUsageEstimator.NUM_BYTES_OBJECT_REF;
 import org.apache.lucene.util.ArrayUtil;
 
@@ -42,6 +43,7 @@
 
   abstract static class Allocator {
     abstract void recycleByteBlocks(byte[][] blocks, int start, int end);
+    abstract void recycleByteBlocks(List<byte[]> blocks);
     abstract byte[] getByteBlock(boolean trackAllocations);
   }
 
Index: lucene/src/java/org/apache/lucene/index/DocumentsWriter.java
===================================================================
--- lucene/src/java/org/apache/lucene/index/DocumentsWriter.java	(revision 929732)
+++ lucene/src/java/org/apache/lucene/index/DocumentsWriter.java	(working copy)
@@ -207,8 +207,7 @@
         // Recycle the blocks
         final int blockCount = buffers.size();
         
-        final byte[][] blocks = buffers.toArray( new byte[blockCount][] );
-        perDocAllocator.recycleByteBlocks(blocks, 0, blockCount);
+        perDocAllocator.recycleByteBlocks(buffers);
         buffers.clear();
         sizeInBytes = 0;
         
@@ -1285,6 +1284,15 @@
           freeByteBlocks.add(blocks[i]);
       }
     }
+
+    @Override
+    void recycleByteBlocks(List<byte[]> blocks) {
+      synchronized(DocumentsWriter.this) {
+        final int size = blocks.size();
+        for(int i=0;i<size;i++)
+          freeByteBlocks.add(blocks.get(i));
+      }
+    }
   }
 
   /* Initial chunks size of the shared int[] blocks used to
