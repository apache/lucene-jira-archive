Index: lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery.java	(revision 1663552)
+++ lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery.java	(working copy)
@@ -34,7 +34,7 @@
  * It therefore simply strips of all scores and returns a constant one.
  */
 public class ConstantScoreQuery extends Query {
-  protected final Query query;
+  protected Query query;
 
   /** Strips off scores from the passed in Query. The hits will get a constant score
    * dependent on the boost factor of this query. */
@@ -50,10 +50,16 @@
   @Override
   public Query rewrite(IndexReader reader) throws IOException {
     Query sub = query;
-    if (sub instanceof QueryWrapperFilter) {
+    while (sub instanceof QueryWrapperFilter) {
       sub = ((QueryWrapperFilter) sub).getQuery();
     }
-    Query rewritten = sub.rewrite(reader);
+    Query rewritten;
+    if (sub instanceof Filter) {
+      // filters rewrite to a CSQ, so we need a special case to avoid an infinite loop
+      rewritten = sub;
+    } else {
+      rewritten = sub.rewrite(reader);
+    }
     if (rewritten != query) {
       rewritten = new ConstantScoreQuery(rewritten);
       rewritten.setBoost(this.getBoost());
@@ -251,11 +257,17 @@
 
   @Override
   public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
-    final Weight innerWeight = searcher.createWeight(query, false);
-    if (needsScores) {
-      return new ConstantScoreQuery.ConstantWeight(innerWeight);
+    if (query instanceof Filter) {
+      // do not expose the sub query directly as it does not support operations
+      // such as boosting or cloning
+      return new ConstantScoreQuery.ConstantWeight(query.createWeight(searcher, false));
     } else {
-      return innerWeight;
+      final Weight innerWeight = searcher.createWeight(query, false);
+      if (needsScores) {
+        return new ConstantScoreQuery.ConstantWeight(innerWeight);
+      } else {
+        return innerWeight;
+      }
     }
   }
 
@@ -285,4 +297,14 @@
     return 31 * super.hashCode() + query.hashCode();
   }
 
+  @Override
+  public Query clone() {
+    ConstantScoreQuery clone = (ConstantScoreQuery) super.clone();
+    if (query instanceof Filter == false) {
+      // filers do not support cloning
+      clone.query = query.clone();
+    }
+    return clone;
+  }
+
 }
Index: lucene/core/src/java/org/apache/lucene/search/Filter.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/Filter.java	(revision 1663552)
+++ lucene/core/src/java/org/apache/lucene/search/Filter.java	(working copy)
@@ -19,6 +19,7 @@
 
 import java.io.IOException;
 
+import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.LeafReaderContext;
 import org.apache.lucene.util.Bits;
 
@@ -75,33 +76,30 @@
   }
 
   @Override
-  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
-    return new Weight(this) {
+  public final Query rewrite(IndexReader reader) throws IOException {
+    // rewrite to a CSQ so that clone/setBoost/... will be called on
+    // the CSQ instead of the filter
+    final ConstantScoreQuery rewritten = new ConstantScoreQuery(this);
+    rewritten.setBoost(0);
+    return rewritten;
+  }
 
-      @Override
-      public float getValueForNormalization() throws IOException {
-        return 0f;
-      }
+  @Override
+  public final void setBoost(float b) {
+    throw new UnsupportedOperationException("Filters do not support boosts, wrap in a ConstantScoreQuery if you need scoring");
+  }
 
-      @Override
-      public void normalize(float norm, float topLevelBoost) {}
+  @Override
+  public final Query clone() {
+    throw new UnsupportedOperationException("Filters do not support cloning, wrap in a ConstantScoreQuery if you need cloning");
+  }
 
-      @Override
-      public Explanation explain(LeafReaderContext context, int doc) throws IOException {
-        final Scorer scorer = scorer(context, context.reader().getLiveDocs());
-        final boolean match = (scorer != null && scorer.advance(doc) == doc);
-        final String desc;
-        if (match) {
-          assert scorer.score() == 0f;
-          desc = "Match on id " + doc;
-        } else {
-          desc = "No match on id " + doc;
-        }
-        return new ComplexExplanation(match, 0f, desc);
-      }
+  @Override
+  public final Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
+    return new ConstantScoreWeight(this) {
 
       @Override
-      public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {
+      public Scorer scorer(LeafReaderContext context, Bits acceptDocs, float score) throws IOException {
         final DocIdSet set = getDocIdSet(context, acceptDocs);
         if (set == null) {
           return null;
Index: lucene/core/src/java/org/apache/lucene/search/QueryWrapperFilter.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/QueryWrapperFilter.java	(revision 1663552)
+++ lucene/core/src/java/org/apache/lucene/search/QueryWrapperFilter.java	(working copy)
@@ -19,7 +19,6 @@
 
 import java.io.IOException;
 
-import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.LeafReaderContext;
 import org.apache.lucene.util.Bits;
 
@@ -44,13 +43,6 @@
     this.query = query;
   }
   
-  @Override
-  public Query rewrite(IndexReader reader) throws IOException {
-    ConstantScoreQuery rewritten = new ConstantScoreQuery(query);
-    rewritten.setBoost(0);
-    return rewritten;
-  }
-  
   /** returns the inner Query */
   public final Query getQuery() {
     return query;
Index: lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperQuery.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperQuery.java	(revision 1663552)
+++ lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperQuery.java	(working copy)
@@ -121,8 +121,7 @@
   
   /** test dense filters (match entire index) */
   public void testDense() throws Exception {
-    Query query = new MatchAllDocsQuery();
-    Filter expected = new QueryWrapperFilter(query);
+    Query expected = new MatchAllDocsQuery();
     Query cached = new CachingWrapperQuery(expected, MAYBE_CACHE_POLICY);
     assertQueryEquals(expected, cached);
   }
Index: lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery.java	(revision 1663552)
+++ lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery.java	(working copy)
@@ -26,9 +26,11 @@
 import org.apache.lucene.index.LeafReaderContext;
 import org.apache.lucene.index.RandomIndexWriter;
 import org.apache.lucene.index.Term;
+import org.apache.lucene.search.BooleanClause.Occur;
 import org.apache.lucene.search.similarities.DefaultSimilarity;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.Bits;
+import org.apache.lucene.util.IOUtils;
 import org.apache.lucene.util.LuceneTestCase;
 
 /** This class only tests some basic functionality in CSQ, the main parts are mostly
@@ -231,4 +233,44 @@
     w.close();
     dir.close();
   }
+
+  public void testFilterRewrite() throws IOException {
+    Directory dir = newDirectory();
+    RandomIndexWriter w = new RandomIndexWriter(random(), dir);
+    w.addDocument(new Document());
+    w.commit();
+
+    DirectoryReader reader = w.getReader();
+    final IndexSearcher searcher = newSearcher(reader);
+    searcher.setQueryCache(null);
+
+    Filter dummyFilter = new Filter() {
+
+      @Override
+      public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {
+        return null;
+      }
+
+      @Override
+      public String toString(String field) {
+        return "dummy";
+      }
+      
+    };
+
+    // assert filters rewrite to a CSQ
+    BooleanQuery bq = new BooleanQuery();
+    bq.add(dummyFilter, Occur.MUST);
+    bq.setBoost(random().nextFloat());
+    final Query rewritten = searcher.rewrite(bq);
+    final ConstantScoreQuery expected = new ConstantScoreQuery(dummyFilter);
+    expected.setBoost(0);
+    assertEquals(expected, rewritten);
+
+    // make sure Filters pass QueryUtils tests thanks to the fact that they rewrite to a CSQ
+    searcher.search(dummyFilter, 1); // needs scores
+    searcher.count(dummyFilter); // does not need scores
+
+    IOUtils.close(w, reader, dir);
+  }
 }
Index: lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils.java	(revision 1663552)
+++ lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils.java	(working copy)
@@ -51,12 +51,15 @@
 
   /** check very basic hashCode and equals */
   public static void checkHashEquals(Query q) {
-    Query q2 = q.clone();
-    checkEqual(q,q2);
+    if (q instanceof Filter == false) {
+      // filters do not support cloning + boosting
+      Query q2 = q.clone();
+      checkEqual(q,q2);
 
-    Query q3 = q.clone();
-    q3.setBoost(7.21792348f);
-    checkUnequal(q,q3);
+      Query q3 = q.clone();
+      q3.setBoost(7.21792348f);
+      checkUnequal(q,q3);
+    }
 
     // test that a class check is done so that no exception is thrown
     // in the implementation of equals()
Index: lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase.java	(revision 1663552)
+++ lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase.java	(working copy)
@@ -172,16 +172,6 @@
       this.query = query;
       this.useBits = useBits;
     }
-    
-    @Override
-    public Query rewrite(IndexReader reader) throws IOException {
-      Query q = query.rewrite(reader);
-      if (q != query) {
-        return new SlowWrapperFilter(q, useBits);
-      } else {
-        return this;
-      }
-    }
 
     @Override
     public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {
