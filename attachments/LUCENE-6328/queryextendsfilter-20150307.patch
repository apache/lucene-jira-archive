diff --git a/lucene/core/src/java/org/apache/lucene/search/Filter.java b/lucene/core/src/java/org/apache/lucene/search/Filter.java
index 623e4d9..71b35c5 100644
--- a/lucene/core/src/java/org/apache/lucene/search/Filter.java
+++ b/lucene/core/src/java/org/apache/lucene/search/Filter.java
@@ -19,9 +19,6 @@ package org.apache.lucene.search;
 
 import java.io.IOException;
 
-import org.apache.lucene.index.LeafReaderContext;
-import org.apache.lucene.util.Bits;
-
 /** 
  *  Abstract base class for restricting which documents may
  *  be returned during searching.
@@ -29,7 +26,7 @@ import org.apache.lucene.util.Bits;
 public abstract class Filter {
   
   /**
-   * Creates a {@link DocIdSet} enumerating the documents that should be
+   * Creates a {@link IndexDocIdSet} enumerating the documents that should be
    * permitted in search results. <b>NOTE:</b> null can be
    * returned if no documents are accepted by this Filter.
    * <p>
@@ -38,22 +35,11 @@ public abstract class Filter {
    * must refer to document IDs for that segment, not for
    * the top-level reader.
    * 
-   * @param context a {@link org.apache.lucene.index.LeafReaderContext} instance opened on the index currently
-   *         searched on. Note, it is likely that the provided reader info does not
-   *         represent the whole underlying index i.e. if the index has more than
-   *         one segment the given reader only represents a single segment.
-   *         The provided context is always an atomic context, so you can call 
-   *         {@link org.apache.lucene.index.LeafReader#fields()}
-   *         on the context's reader, for example.
-   *
-   * @param acceptDocs
-   *          Bits that represent the allowable docs to match (typically deleted docs
-   *          but possibly filtering other documents)
-   *          
-   * @return a DocIdSet that provides the documents which should be permitted or
+   * @return a IndexDocIdSet that provides the documents which should be permitted or
    *         prohibited in search results. <b>NOTE:</b> <code>null</code> should be returned if
    *         the filter doesn't accept any documents otherwise internal optimization might not apply
    *         in the case an <i>empty</i> {@link DocIdSet} is returned.
    */
-  public abstract DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException;
+  public abstract IndexDocIdSet getDocIdSet(IndexSearcher searcher)
+  throws IOException;
 }
diff --git a/lucene/core/src/java/org/apache/lucene/search/IndexDocIdSet.java b/lucene/core/src/java/org/apache/lucene/search/IndexDocIdSet.java
new file mode 100644
index 0000000..0b68c5f
--- /dev/null
+++ b/lucene/core/src/java/org/apache/lucene/search/IndexDocIdSet.java
@@ -0,0 +1,37 @@
+package org.apache.lucene.search;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.IOException;
+import org.apache.lucene.index.LeafReaderContext;
+import org.apache.lucene.util.Bits;
+
+/**
+ * A IndexDocIdSet represents the documents in an index.
+ */
+public abstract class IndexDocIdSet {
+  /** Provides a {@link DocIdSetIterator} to access the documents in the index.
+   * @param context
+   *          the {@link org.apache.lucene.index.LeafReaderContext} for which to return the {@link DocIdSetIterator}.
+   * @param acceptDocs
+   *          Bits that represent the allowable docs to match (typically deleted docs
+   *          but possibly filtering other documents)
+   */
+  // FIXME: Rename this method to iterator. Use scorer as name to easily investigate Query extending Filter.
+  public abstract DocIdSetIterator scorer(LeafReaderContext context, Bits acceptDocs) throws IOException;
+}
diff --git a/lucene/core/src/java/org/apache/lucene/search/Query.java b/lucene/core/src/java/org/apache/lucene/search/Query.java
index cd03ccb..6895c77 100644
--- a/lucene/core/src/java/org/apache/lucene/search/Query.java
+++ b/lucene/core/src/java/org/apache/lucene/search/Query.java
@@ -43,7 +43,7 @@ import org.apache.lucene.index.Term;
     <p>See also the family of {@link org.apache.lucene.search.spans Span Queries}
        and additional queries available in the <a href="{@docRoot}/../queries/overview-summary.html">Queries module</a>
 */
-public abstract class Query implements Cloneable {
+public abstract class Query extends Filter implements Cloneable {
   private float boost = 1.0f;                     // query boost factor
 
   /** Sets the boost for this query clause to <code>b</code>.  Documents
@@ -68,6 +68,15 @@ public abstract class Query implements Cloneable {
   public String toString() {
     return toString("");
   }
+  
+  public Weight getDocIdSet(IndexSearcher searcher, boolean needsScores) throws IOException {
+    return createWeight(searcher, needsScores);
+  }
+
+  public Weight getDocIdSet(IndexSearcher searcher) throws IOException {
+    boolean needsScores = true;
+    return getDocIdSet(searcher, needsScores);
+  }
 
   /**
    * Expert: Constructs an appropriate Weight implementation for this query.
diff --git a/lucene/core/src/java/org/apache/lucene/search/Weight.java b/lucene/core/src/java/org/apache/lucene/search/Weight.java
index 8ba2403..e842fc4 100644
--- a/lucene/core/src/java/org/apache/lucene/search/Weight.java
+++ b/lucene/core/src/java/org/apache/lucene/search/Weight.java
@@ -54,7 +54,7 @@ import org.apache.lucene.util.Bits;
  * 
  * @since 2.9
  */
-public abstract class Weight {
+public abstract class Weight extends IndexDocIdSet {
 
   protected final Query parentQuery;
 
