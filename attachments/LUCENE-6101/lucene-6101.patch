Index: lucene/core/src/java/org/apache/lucene/index/MultiDocValues.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/MultiDocValues.java	(revision 1643712)
+++ lucene/core/src/java/org/apache/lucene/index/MultiDocValues.java	(working copy)
@@ -290,14 +290,20 @@
       };
     }
   }
-  
+
   /** Returns a SortedDocValues for a reader's docvalues (potentially doing extremely slow things).
    * <p>
    * This is an extremely slow way to access sorted values. Instead, access them per-segment
    * with {@link LeafReader#getSortedDocValues(String)}
-   * </p>  
+   * </p>
    */
+
   public static SortedDocValues getSortedValues(final IndexReader r, final String field) throws IOException {
+    return getSortedValues(r, field, PackedInts.DEFAULT);
+  }
+  
+
+  public static SortedDocValues getSortedValues(final IndexReader r, final String field, final float acceptableOverheadRatio) throws IOException {
     final List<LeafReaderContext> leaves = r.leaves();
     final int size = leaves.size();
     
@@ -326,18 +332,23 @@
     if (!anyReal) {
       return null;
     } else {
-      OrdinalMap mapping = OrdinalMap.build(r.getCoreCacheKey(), values, PackedInts.DEFAULT);
+      OrdinalMap mapping = OrdinalMap.build(r.getCoreCacheKey(), values, acceptableOverheadRatio);
       return new MultiSortedDocValues(values, starts, mapping);
     }
   }
-  
-  /** Returns a SortedSetDocValues for a reader's docvalues (potentially doing extremely slow things).
+
+   /** Returns a SortedSetDocValues for a reader's docvalues (potentially doing extremely slow things).
    * <p>
    * This is an extremely slow way to access sorted values. Instead, access them per-segment
    * with {@link LeafReader#getSortedSetDocValues(String)}
-   * </p>  
+   * </p>
    */
+
   public static SortedSetDocValues getSortedSetValues(final IndexReader r, final String field) throws IOException {
+    return getSortedSetValues(r, field, PackedInts.DEFAULT);
+  }
+
+  public static SortedSetDocValues getSortedSetValues(final IndexReader r, final String field, final float acceptableOverheadRatio) throws IOException {
     final List<LeafReaderContext> leaves = r.leaves();
     final int size = leaves.size();
     
@@ -366,7 +377,7 @@
     if (!anyReal) {
       return null;
     } else {
-      OrdinalMap mapping = OrdinalMap.build(r.getCoreCacheKey(), values, PackedInts.DEFAULT);
+      OrdinalMap mapping = OrdinalMap.build(r.getCoreCacheKey(), values, acceptableOverheadRatio);
       return new MultiSortedSetDocValues(values, starts, mapping);
     }
   }
Index: lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper.java	(revision 1643712)
+++ lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper.java	(working copy)
@@ -26,6 +26,7 @@
 import org.apache.lucene.index.MultiDocValues.MultiSortedDocValues;
 import org.apache.lucene.index.MultiDocValues.MultiSortedSetDocValues;
 import org.apache.lucene.index.MultiDocValues.OrdinalMap;
+import org.apache.lucene.util.packed.PackedInts;
 
 /**
  * This class forces a composite reader (eg a {@link
@@ -116,13 +117,17 @@
 
   @Override
   public SortedDocValues getSortedDocValues(String field) throws IOException {
+    return getSortedDocValues(field, PackedInts.DEFAULT);
+  }
+
+  public SortedDocValues getSortedDocValues(String field, float acceptableOverheadRatio) throws IOException {
     ensureOpen();
     OrdinalMap map = null;
     synchronized (cachedOrdMaps) {
       map = cachedOrdMaps.get(field);
       if (map == null) {
         // uncached, or not a multi dv
-        SortedDocValues dv = MultiDocValues.getSortedValues(in, field);
+        SortedDocValues dv = MultiDocValues.getSortedValues(in, field, acceptableOverheadRatio);
         if (dv instanceof MultiSortedDocValues) {
           map = ((MultiSortedDocValues)dv).mapping;
           if (map.owner == getCoreCacheKey()) {
@@ -153,14 +158,20 @@
   }
   
   @Override
+
   public SortedSetDocValues getSortedSetDocValues(String field) throws IOException {
+    return getSortedSetDocValues(field, PackedInts.DEFAULT);
+  }
+
+
+  public SortedSetDocValues getSortedSetDocValues(String field, float acceptableOverheadRatio) throws IOException {
     ensureOpen();
     OrdinalMap map = null;
     synchronized (cachedOrdMaps) {
       map = cachedOrdMaps.get(field);
       if (map == null) {
         // uncached, or not a multi dv
-        SortedSetDocValues dv = MultiDocValues.getSortedSetValues(in, field);
+        SortedSetDocValues dv = MultiDocValues.getSortedSetValues(in, field, acceptableOverheadRatio);
         if (dv instanceof MultiSortedSetDocValues) {
           map = ((MultiSortedSetDocValues)dv).mapping;
           if (map.owner == getCoreCacheKey()) {
