Index: src/test/org/apache/lucene/analysis/TestAnalyzers.java
===================================================================
--- src/test/org/apache/lucene/analysis/TestAnalyzers.java	(revision 832941)
+++ src/test/org/apache/lucene/analysis/TestAnalyzers.java	(working copy)
@@ -125,6 +125,7 @@
       super(org.apache.lucene.util.Version.LUCENE_CURRENT);
     }
   
+    @Override
     public TokenStream tokenStream(String field, Reader reader) {
       return new WhitespaceAnalyzer().tokenStream(field, reader);
     }
@@ -150,6 +151,7 @@
   byte[] data = new byte[1];
   Payload p = new Payload(data,0,1);
 
+  @Override
   public boolean incrementToken() throws IOException {
     boolean hasNext = input.incrementToken();
     if (!hasNext) return false;
Index: src/test/org/apache/lucene/analysis/TestCachingTokenFilter.java
===================================================================
--- src/test/org/apache/lucene/analysis/TestCachingTokenFilter.java	(revision 832941)
+++ src/test/org/apache/lucene/analysis/TestCachingTokenFilter.java	(working copy)
@@ -44,6 +44,7 @@
       private TermAttribute termAtt = addAttribute(TermAttribute.class);
       private OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);
       
+      @Override
       public boolean incrementToken() throws IOException {
         if (index == tokens.length) {
           return false;
Index: src/test/org/apache/lucene/analysis/TestCharFilter.java
===================================================================
--- src/test/org/apache/lucene/analysis/TestCharFilter.java	(revision 832941)
+++ src/test/org/apache/lucene/analysis/TestCharFilter.java	(working copy)
@@ -49,6 +49,7 @@
       super(in);
     }
 
+    @Override
     protected int correct(int currentOff) {
       return currentOff + 1;
     }
@@ -60,6 +61,7 @@
       super(in);
     }
 
+    @Override
     protected int correct(int currentOff) {
       return currentOff + 2;
     }
Index: src/test/org/apache/lucene/analysis/TestKeywordAnalyzer.java
===================================================================
--- src/test/org/apache/lucene/analysis/TestKeywordAnalyzer.java	(revision 832941)
+++ src/test/org/apache/lucene/analysis/TestKeywordAnalyzer.java	(working copy)
@@ -38,6 +38,7 @@
   private RAMDirectory directory;
   private IndexSearcher searcher;
 
+  @Override
   public void setUp() throws Exception {
     super.setUp();
     directory = new RAMDirectory();
Index: src/test/org/apache/lucene/analysis/TestMappingCharFilter.java
===================================================================
--- src/test/org/apache/lucene/analysis/TestMappingCharFilter.java	(revision 832941)
+++ src/test/org/apache/lucene/analysis/TestMappingCharFilter.java	(working copy)
@@ -24,6 +24,7 @@
 
   NormalizeCharMap normMap;
 
+  @Override
   public void setUp() throws Exception {
     super.setUp();
     normMap = new NormalizeCharMap();
Index: src/test/org/apache/lucene/analysis/TestStopAnalyzer.java
===================================================================
--- src/test/org/apache/lucene/analysis/TestStopAnalyzer.java	(revision 832941)
+++ src/test/org/apache/lucene/analysis/TestStopAnalyzer.java	(working copy)
@@ -36,6 +36,7 @@
     super(s);
   }
 
+  @Override
   protected void setUp() throws Exception {
     super.setUp();
     
Index: src/test/org/apache/lucene/analysis/TestTeeSinkTokenFilter.java
===================================================================
--- src/test/org/apache/lucene/analysis/TestTeeSinkTokenFilter.java	(revision 832941)
+++ src/test/org/apache/lucene/analysis/TestTeeSinkTokenFilter.java	(working copy)
@@ -43,6 +43,7 @@
     super(s);
   }
 
+  @Override
   protected void setUp() throws Exception {
     super.setUp();
     tokens1 = new String[]{"The", "quick", "Burgundy", "Fox", "jumped", "over", "the", "lazy", "Red", "Dogs"};
@@ -59,6 +60,7 @@
   }
 
   static final TeeSinkTokenFilter.SinkFilter theFilter = new TeeSinkTokenFilter.SinkFilter() {
+    @Override
     public boolean accept(AttributeSource a) {
       TermAttribute termAtt = a.getAttribute(TermAttribute.class);
       return termAtt.term().equalsIgnoreCase("The");
@@ -66,6 +68,7 @@
   };
 
   static final TeeSinkTokenFilter.SinkFilter dogFilter = new TeeSinkTokenFilter.SinkFilter() {
+    @Override
     public boolean accept(AttributeSource a) {
       TermAttribute termAtt = a.getAttribute(TermAttribute.class);
       return termAtt.term().equalsIgnoreCase("Dogs");
@@ -236,6 +239,7 @@
     int count = 0;
 
     //return every 100 tokens
+    @Override
     public boolean incrementToken() throws IOException {
       boolean hasNext;
       for (hasNext = input.incrementToken();
@@ -256,6 +260,7 @@
       modCount = mc;
     }
 
+    @Override
     public boolean accept(AttributeSource a) {
       boolean b = (a != null && count % modCount == 0);
       count++;
Index: src/test/org/apache/lucene/analysis/TestToken.java
===================================================================
--- src/test/org/apache/lucene/analysis/TestToken.java	(revision 832941)
+++ src/test/org/apache/lucene/analysis/TestToken.java	(working copy)
@@ -224,9 +224,13 @@
   public interface SenselessAttribute extends Attribute {}
   
   public static final class SenselessAttributeImpl extends AttributeImpl implements SenselessAttribute {
+    @Override
     public void copyTo(AttributeImpl target) {}
+    @Override
     public void clear() {}
+    @Override
     public boolean equals(Object o) { return (o instanceof SenselessAttributeImpl); }
+    @Override
     public int hashCode() { return 0; }
   }
 
Index: src/test/org/apache/lucene/index/MockIndexInput.java
===================================================================
--- src/test/org/apache/lucene/index/MockIndexInput.java	(revision 832941)
+++ src/test/org/apache/lucene/index/MockIndexInput.java	(working copy)
@@ -29,6 +29,7 @@
         length = bytes.length;
     }
 
+    @Override
     protected void readInternal(byte[] dest, int destOffset, int len) {
         int remainder = len;
         int start = pointer;
@@ -45,14 +46,17 @@
         pointer += len;
     }
 
+    @Override
     public void close() {
         // ignore
     }
 
+    @Override
     protected void seekInternal(long pos) {
         pointer = (int) pos;
     }
 
+    @Override
     public long length() {
       return length;
     }
Index: src/test/org/apache/lucene/index/TestAtomicUpdate.java
===================================================================
--- src/test/org/apache/lucene/index/TestAtomicUpdate.java	(revision 832941)
+++ src/test/org/apache/lucene/index/TestAtomicUpdate.java	(working copy)
@@ -37,6 +37,7 @@
       super(dir, a, create, mfl);
     }
 
+    @Override
     boolean testPoint(String name) {
       //      if (name.equals("startCommit")) {
       if (RANDOM.nextInt(4) == 2)
@@ -57,6 +58,7 @@
       this.allThreads = threads;
     }
 
+    @Override
     public void run() {
       final long stopTime = System.currentTimeMillis() + 1000*RUN_TIME_SEC;
 
@@ -91,6 +93,7 @@
       this.writer = writer;
     }
 
+    @Override
     public void doWork() throws Exception {
       // Update all 100 docs...
       for(int i=0; i<100; i++) {
@@ -110,6 +113,7 @@
       this.directory = directory;
     }
 
+    @Override
     public void doWork() throws Throwable {
       IndexReader r = IndexReader.open(directory, true);
       assertEquals(100, r.numDocs());
Index: src/test/org/apache/lucene/index/TestByteSlices.java
===================================================================
--- src/test/org/apache/lucene/index/TestByteSlices.java	(revision 832941)
+++ src/test/org/apache/lucene/index/TestByteSlices.java	(working copy)
@@ -24,6 +24,7 @@
     ArrayList freeByteBlocks = new ArrayList();
     
     /* Allocate another byte[] from the shared pool */
+    @Override
     synchronized byte[] getByteBlock(boolean trackAllocations) {
       final int size = freeByteBlocks.size();
       final byte[] b;
@@ -35,6 +36,7 @@
     }
 
     /* Return a byte[] to the pool */
+    @Override
     synchronized void recycleByteBlocks(byte[][] blocks, int start, int end) {
       for(int i=start;i<end;i++)
         freeByteBlocks.add(blocks[i]);
Index: src/test/org/apache/lucene/index/TestCompoundFile.java
===================================================================
--- src/test/org/apache/lucene/index/TestCompoundFile.java	(revision 832941)
+++ src/test/org/apache/lucene/index/TestCompoundFile.java	(working copy)
@@ -54,6 +54,7 @@
     private Directory dir;
 
 
+    @Override
     public void setUp() throws Exception {
        super.setUp();
        File file = new File(System.getProperty("tempDir"), "testIndex");
@@ -62,6 +63,7 @@
        dir = new SimpleFSDirectory(file,null);
     }
 
+    @Override
     public void tearDown() throws Exception {
        dir.close();
        super.tearDown();
Index: src/test/org/apache/lucene/index/TestConcurrentMergeScheduler.java
===================================================================
--- src/test/org/apache/lucene/index/TestConcurrentMergeScheduler.java	(revision 832941)
+++ src/test/org/apache/lucene/index/TestConcurrentMergeScheduler.java	(working copy)
@@ -36,14 +36,17 @@
     boolean doFail;
     boolean hitExc;
 
+    @Override
     public void setDoFail() {
       this.doFail = true;
       hitExc = false;
     }
+    @Override
     public void clearDoFail() {
       this.doFail = false;
     }
 
+    @Override
     public void eval(MockRAMDirectory dir)  throws IOException {
       if (doFail && Thread.currentThread().getName().equals("main")) {
         StackTraceElement[] trace = new Exception().getStackTrace();
Index: src/test/org/apache/lucene/index/TestDirectoryReader.java
===================================================================
--- src/test/org/apache/lucene/index/TestDirectoryReader.java	(revision 832941)
+++ src/test/org/apache/lucene/index/TestDirectoryReader.java	(working copy)
@@ -39,6 +39,7 @@
     super(s);
   }
 
+  @Override
   protected void setUp() throws Exception {
     super.setUp();
     dir = new RAMDirectory();
Index: src/test/org/apache/lucene/index/TestDoc.java
===================================================================
--- src/test/org/apache/lucene/index/TestDoc.java	(revision 832941)
+++ src/test/org/apache/lucene/index/TestDoc.java	(working copy)
@@ -54,6 +54,7 @@
     /** Set the test case. This test case needs
      *  a few text files created in the current working directory.
      */
+    @Override
     public void setUp() throws Exception {
         super.setUp();
         workDir = new File(System.getProperty("tempDir"),"TestDoc");
Index: src/test/org/apache/lucene/index/TestDocumentWriter.java
===================================================================
--- src/test/org/apache/lucene/index/TestDocumentWriter.java	(revision 832941)
+++ src/test/org/apache/lucene/index/TestDocumentWriter.java	(working copy)
@@ -48,6 +48,7 @@
     super(s);
   }
 
+  @Override
   protected void setUp() throws Exception {
     super.setUp();
     dir = new RAMDirectory();
@@ -107,10 +108,12 @@
 
   public void testPositionIncrementGap() throws IOException {
     Analyzer analyzer = new Analyzer() {
+      @Override
       public TokenStream tokenStream(String fieldName, Reader reader) {
         return new WhitespaceTokenizer(reader);
       }
 
+      @Override
       public int getPositionIncrementGap(String fieldName) {
         return 500;
       }
@@ -138,11 +141,13 @@
 
   public void testTokenReuse() throws IOException {
     Analyzer analyzer = new Analyzer() {
+      @Override
       public TokenStream tokenStream(String fieldName, Reader reader) {
         return new TokenFilter(new WhitespaceTokenizer(reader)) {
           boolean first=true;
           AttributeSource.State state;
 
+          @Override
           public boolean incrementToken() throws IOException {
             if (state != null) {
               restoreState(state);
@@ -211,6 +216,7 @@
       
       private TermAttribute termAtt = addAttribute(TermAttribute.class);
       
+      @Override
       public boolean incrementToken() throws IOException {
         if (index == tokens.length) {
           return false;
Index: src/test/org/apache/lucene/index/TestFieldInfos.java
===================================================================
--- src/test/org/apache/lucene/index/TestFieldInfos.java	(revision 832941)
+++ src/test/org/apache/lucene/index/TestFieldInfos.java	(working copy)
@@ -34,6 +34,7 @@
     super(s);
   }
 
+  @Override
   protected void setUp() throws Exception {
     super.setUp();
     DocHelper.setupDoc(testDoc);
Index: src/test/org/apache/lucene/index/TestFieldsReader.java
===================================================================
--- src/test/org/apache/lucene/index/TestFieldsReader.java	(revision 832941)
+++ src/test/org/apache/lucene/index/TestFieldsReader.java	(working copy)
@@ -44,6 +44,7 @@
     super(s);
   }
 
+  @Override
   protected void setUp() throws Exception {
     super.setUp();
     fieldInfos = new FieldInfos();
@@ -307,30 +308,39 @@
       fsDir = FSDirectory.open(dir);
       lockFactory = fsDir.getLockFactory();
     }
+    @Override
     public IndexInput openInput(String name) throws IOException {
       return new FaultyIndexInput(fsDir.openInput(name));
     }
+    @Override
     public String[] listAll() throws IOException {
       return fsDir.listAll();
     }
+    @Override
     public boolean fileExists(String name) throws IOException {
       return fsDir.fileExists(name);
     }
+    @Override
     public long fileModified(String name) throws IOException {
       return fsDir.fileModified(name);
     }
+    @Override
     public void touchFile(String name) throws IOException {
       fsDir.touchFile(name);
     }
+    @Override
     public void deleteFile(String name) throws IOException {
       fsDir.deleteFile(name);
     }
+    @Override
     public long fileLength(String name) throws IOException {
       return fsDir.fileLength(name);
     }
+    @Override
     public IndexOutput createOutput(String name) throws IOException {
       return fsDir.createOutput(name);
     }
+    @Override
     public void close() throws IOException {
       fsDir.close();
     }
@@ -348,20 +358,25 @@
         throw new IOException("Simulated network outage");
       }
     }
+    @Override
     public void readInternal(byte[] b, int offset, int length) throws IOException {
       simOutage();
       delegate.readBytes(b, offset, length);
     }
+    @Override
     public void seekInternal(long pos) throws IOException {
       //simOutage();
       delegate.seek(pos);
     }
+    @Override
     public long length() {
       return delegate.length();
     }
+    @Override
     public void close() throws IOException {
       delegate.close();
     }
+    @Override
     public Object clone() {
       return new FaultyIndexInput((IndexInput) delegate.clone());
     }
Index: src/test/org/apache/lucene/index/TestFilterIndexReader.java
===================================================================
--- src/test/org/apache/lucene/index/TestFilterIndexReader.java	(revision 832941)
+++ src/test/org/apache/lucene/index/TestFilterIndexReader.java	(working copy)
@@ -41,6 +41,7 @@
       }
 
       /** Scan for terms containing the letter 'e'.*/
+      @Override
       public boolean next() throws IOException {
         while (in.next()) {
           if (in.term().text().indexOf('e') != -1)
@@ -57,6 +58,7 @@
       }
 
       /** Scan for odd numbered documents. */
+      @Override
       public boolean next() throws IOException {
         while (in.next()) {
           if ((in.doc() % 2) == 1)
@@ -71,11 +73,13 @@
     }
 
     /** Filter terms with TestTermEnum. */
+    @Override
     public TermEnum terms() throws IOException {
       return new TestTermEnum(in.terms());
     }
 
     /** Filter positions with TestTermPositions. */
+    @Override
     public TermPositions termPositions() throws IOException {
       return new TestTermPositions(in.termPositions());
     }
Index: src/test/org/apache/lucene/index/TestIndexReaderCloneNorms.java
===================================================================
--- src/test/org/apache/lucene/index/TestIndexReaderCloneNorms.java	(revision 832941)
+++ src/test/org/apache/lucene/index/TestIndexReaderCloneNorms.java	(working copy)
@@ -41,6 +41,7 @@
 public class TestIndexReaderCloneNorms extends LuceneTestCase {
 
   private class SimilarityOne extends DefaultSimilarity {
+    @Override
     public float lengthNorm(String fieldName, int numTerms) {
       return 1;
     }
@@ -66,6 +67,7 @@
     super(s);
   }
 
+  @Override
   protected void setUp() throws Exception {
     super.setUp();
     similarityOne = new SimilarityOne();
Index: src/test/org/apache/lucene/index/TestIndexReaderReopen.java
===================================================================
--- src/test/org/apache/lucene/index/TestIndexReaderReopen.java	(revision 832941)
+++ src/test/org/apache/lucene/index/TestIndexReaderReopen.java	(working copy)
@@ -57,10 +57,12 @@
     createIndex(dir1, false);
     performDefaultTests(new TestReopen() {
 
+      @Override
       protected void modifyIndex(int i) throws IOException {
         TestIndexReaderReopen.modifyIndex(i, dir1);
       }
 
+      @Override
       protected IndexReader openReader() throws IOException {
         return IndexReader.open(dir1, false);
       }
@@ -73,10 +75,12 @@
     createIndex(dir2, true);
     performDefaultTests(new TestReopen() {
 
+      @Override
       protected void modifyIndex(int i) throws IOException {
         TestIndexReaderReopen.modifyIndex(i, dir2);
       }
 
+      @Override
       protected IndexReader openReader() throws IOException {
         return IndexReader.open(dir2, false);
       }
@@ -93,11 +97,13 @@
     
     performDefaultTests(new TestReopen() {
 
+      @Override
       protected void modifyIndex(int i) throws IOException {
         TestIndexReaderReopen.modifyIndex(i, dir1);
         TestIndexReaderReopen.modifyIndex(i, dir2);
       }
 
+      @Override
       protected IndexReader openReader() throws IOException {
         ParallelReader pr = new ParallelReader();
         pr.add(IndexReader.open(dir1, false));
@@ -116,11 +122,13 @@
 
     performTestsWithExceptionInReopen(new TestReopen() {
 
+      @Override
       protected void modifyIndex(int i) throws IOException {
         TestIndexReaderReopen.modifyIndex(i, dir3);
         TestIndexReaderReopen.modifyIndex(i, dir4);
       }
 
+      @Override
       protected IndexReader openReader() throws IOException {
         ParallelReader pr = new ParallelReader();
         pr.add(IndexReader.open(dir3, false));
@@ -213,11 +221,13 @@
 
     performDefaultTests(new TestReopen() {
 
+      @Override
       protected void modifyIndex(int i) throws IOException {
         TestIndexReaderReopen.modifyIndex(i, dir1);
         TestIndexReaderReopen.modifyIndex(i, dir2);
       }
 
+      @Override
       protected IndexReader openReader() throws IOException {
         return new MultiReader(new IndexReader[] 
                         {IndexReader.open(dir1, false), 
@@ -237,11 +247,13 @@
 
     performTestsWithExceptionInReopen(new TestReopen() {
 
+      @Override
       protected void modifyIndex(int i) throws IOException {
         TestIndexReaderReopen.modifyIndex(i, dir3);
         TestIndexReaderReopen.modifyIndex(i, dir4);
       }
 
+      @Override
       protected IndexReader openReader() throws IOException {
         return new MultiReader(new IndexReader[] 
                         {IndexReader.open(dir3, false), 
@@ -270,6 +282,7 @@
     
     performDefaultTests(new TestReopen() {
 
+      @Override
       protected void modifyIndex(int i) throws IOException {
         // only change norms in this index to maintain the same number of docs for each of ParallelReader's subreaders
         if (i == 1) TestIndexReaderReopen.modifyIndex(i, dir1);  
@@ -278,6 +291,7 @@
         TestIndexReaderReopen.modifyIndex(i, dir5);
       }
 
+      @Override
       protected IndexReader openReader() throws IOException {
         ParallelReader pr = new ParallelReader();
         pr.add(IndexReader.open(dir1, false));
@@ -695,6 +709,7 @@
     writer.close();
 
     final TestReopen test = new TestReopen() {      
+      @Override
       protected void modifyIndex(int i) throws IOException {
         if (i % 3 == 0) {
           IndexReader modifier = IndexReader.open(dir, false);
@@ -711,6 +726,7 @@
         }
       }
 
+      @Override
       protected IndexReader openReader() throws IOException {
         return IndexReader.open(dir, false);
       }      
@@ -741,6 +757,7 @@
       if (i < 20 ||( i >=50 && i < 70) || i > 90) {
         task = new ReaderThreadTask() {
           
+          @Override
           public void run() throws Exception {
             while (!stopped) {
               if (index % 2 == 0) {
@@ -784,6 +801,7 @@
         };
       } else {
         task = new ReaderThreadTask() {
+          @Override
           public void run() throws Exception {
             while (!stopped) {
               int numReaders = readers.size();
@@ -878,6 +896,7 @@
       this.task.stop();
     }
     
+    @Override
     public void run() {
       try {
         this.task.run();
@@ -1073,6 +1092,7 @@
   }
 
 
+  @Override
   protected void setUp() throws Exception {
     super.setUp();
     String tempDir = System.getProperty("java.io.tmpdir");
Index: src/test/org/apache/lucene/index/TestIndexWriter.java
===================================================================
--- src/test/org/apache/lucene/index/TestIndexWriter.java	(revision 832941)
+++ src/test/org/apache/lucene/index/TestIndexWriter.java	(working copy)
@@ -1451,6 +1451,7 @@
           lockFactory = null;
           myLockFactory = new SingleInstanceLockFactory();
         }
+        @Override
         public Lock makeLock(String name) {
           return myLockFactory.makeLock(name);
         }
@@ -1658,6 +1659,7 @@
   // Just intercepts all merges & verifies that we are never
   // merging a segment with >= 20 (maxMergeDocs) docs
   private class MyMergeScheduler extends MergeScheduler {
+    @Override
     synchronized public void merge(IndexWriter writer)
       throws CorruptIndexException, IOException {
 
@@ -1671,6 +1673,7 @@
       }
     }
 
+    @Override
     public void close() {}
   }
 
@@ -1695,10 +1698,12 @@
     RAMDirectory dir = new MockRAMDirectory();
     IndexWriter writer = new IndexWriter(dir, new Analyzer() {
 
+      @Override
       public TokenStream tokenStream(String fieldName, Reader reader) {
         return new TokenFilter(new StandardTokenizer(Version.LUCENE_CURRENT, reader)) {
           private int count = 0;
 
+          @Override
           public boolean incrementToken() throws IOException {
             if (count++ == 5) {
               throw new IOException();
@@ -1755,13 +1760,16 @@
     boolean doFail = false;
     int count;
 
+    @Override
     public void setDoFail() {
       this.doFail = true;
     }
+    @Override
     public void clearDoFail() {
       this.doFail = false;
     }
 
+    @Override
     public void eval(MockRAMDirectory dir)  throws IOException {
       if (doFail) {
         StackTraceElement[] trace = new Exception().getStackTrace();
@@ -1822,12 +1830,14 @@
       this.fieldName = fieldName;
     }
 
+    @Override
     public boolean incrementToken() throws IOException {
       if (this.fieldName.equals("crash") && count++ >= 4)
         throw new IOException("I'm experiencing problems");
       return input.incrementToken();
     }
 
+    @Override
     public void reset() throws IOException {
       super.reset();
       count = 0;
@@ -1836,6 +1846,7 @@
 
   public void testDocumentsWriterExceptions() throws IOException {
     Analyzer analyzer = new Analyzer() {
+      @Override
       public TokenStream tokenStream(String fieldName, Reader reader) {
         return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));
       }
@@ -1918,6 +1929,7 @@
 
   public void testDocumentsWriterExceptionThreads() throws Exception {
     Analyzer analyzer = new Analyzer() {
+      @Override
       public TokenStream tokenStream(String fieldName, Reader reader) {
         return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));
       }
@@ -1937,6 +1949,7 @@
         Thread[] threads = new Thread[NUM_THREAD];
         for(int t=0;t<NUM_THREAD;t++) {
           threads[t] = new Thread() {
+              @Override
               public void run() {
                 try {
                   for(int iter=0;iter<NUM_ITER;iter++) {
@@ -2118,6 +2131,7 @@
         final IndexWriter finalWriter = writer;
         final ArrayList failure = new ArrayList();
         Thread t1 = new Thread() {
+            @Override
             public void run() {
               boolean done = false;
               while(!done) {
@@ -2179,6 +2193,7 @@
       this.noErrors = noErrors;
     }
 
+    @Override
     public void run() {
 
       final Document doc = new Document();
@@ -2366,6 +2381,7 @@
     public FailOnlyOnAbortOrFlush(boolean onlyOnce) {
       this.onlyOnce = onlyOnce;
     }
+    @Override
     public void eval(MockRAMDirectory dir)  throws IOException {
       if (doFail) {
         StackTraceElement[] trace = new Exception().getStackTrace();
@@ -2498,6 +2514,7 @@
     public FailOnlyInCloseDocStore(boolean onlyOnce) {
       this.onlyOnce = onlyOnce;
     }
+    @Override
     public void eval(MockRAMDirectory dir)  throws IOException {
       if (doFail) {
         StackTraceElement[] trace = new Exception().getStackTrace();
@@ -2538,6 +2555,7 @@
     public FailOnlyInWriteSegment(boolean onlyOnce) {
       this.onlyOnce = onlyOnce;
     }
+    @Override
     public void eval(MockRAMDirectory dir)  throws IOException {
       if (doFail) {
         StackTraceElement[] trace = new Exception().getStackTrace();
@@ -2670,6 +2688,7 @@
   // Throws IOException during MockRAMDirectory.sync
   private static class FailOnlyInSync extends MockRAMDirectory.Failure {
     boolean didFail;
+    @Override
     public void eval(MockRAMDirectory dir)  throws IOException {
       if (doFail) {
         StackTraceElement[] trace = new Exception().getStackTrace();
@@ -3038,6 +3057,7 @@
 
     boolean doFail;
 
+    @Override
     boolean testPoint(String name) {
       if (doFail && name.equals("DocumentsWriter.ThreadState.init start"))
         throw new RuntimeException("intentionally failing");
@@ -3075,6 +3095,7 @@
     w.addDocument(doc);
 
     Analyzer analyzer = new Analyzer() {
+      @Override
       public TokenStream tokenStream(String fieldName, Reader reader) {
         return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));
       }
@@ -3103,6 +3124,7 @@
     boolean doFail;
     boolean failed;
 
+    @Override
     boolean testPoint(String name) {
       if (doFail && name.equals("startMergeInit")) {
         failed = true;
@@ -3144,6 +3166,7 @@
 
     boolean wasCalled;
 
+    @Override
     public void doAfterFlush() {
       wasCalled = true;
     }
@@ -3177,6 +3200,7 @@
 
     boolean fail1, fail2;
 
+    @Override
     public void eval(MockRAMDirectory dir)  throws IOException {
       StackTraceElement[] trace = new Exception().getStackTrace();
       boolean isCommit = false;
@@ -3453,6 +3477,7 @@
       final Iterator tokens = Arrays.asList(new String[]{"a","b","c"}).iterator();
       boolean first = true;
       
+      @Override
       public boolean incrementToken() {
         if (!tokens.hasNext()) return false;
         clearAttributes();
@@ -3647,6 +3672,7 @@
 
       for(int i=0;i<NUM_THREADS;i++) {
         threads[i] = new Thread() {
+            @Override
             public void run() {
               try {
 
@@ -3698,6 +3724,7 @@
       super(numCopy);
     }
 
+    @Override
     void handle(Throwable t) {
       t.printStackTrace(System.out);
       synchronized(failures) {
@@ -3705,6 +3732,7 @@
       }
     }
 
+    @Override
     void doBody(int j, Directory[] dirs) throws Throwable {
       switch(j%4) {
       case 0:
@@ -3757,6 +3785,7 @@
       super(numCopy);
     }
 
+    @Override
     void handle(Throwable t) {
       if (!(t instanceof AlreadyClosedException) && !(t instanceof NullPointerException)) {
         t.printStackTrace(System.out);
@@ -3792,6 +3821,7 @@
       super(numCopy);
     }
 
+    @Override
     void doBody(int j, Directory[] dirs) throws Throwable {
       switch(j%5) {
       case 0:
@@ -3811,6 +3841,7 @@
       }
     }
 
+    @Override
     void handle(Throwable t) {
       boolean report = true;
 
@@ -3883,6 +3914,7 @@
 
     boolean doFail;
 
+    @Override
     boolean testPoint(String name) {
       if (doFail && name.equals("rollback before checkpoint"))
         throw new RuntimeException("intentionally failing");
@@ -4010,6 +4042,7 @@
     final List thrown = new ArrayList();
 
     final IndexWriter writer = new IndexWriter(new MockRAMDirectory(), new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED) {
+        @Override
         public void message(final String message) {
           if (message.startsWith("now flush at close") && 0 == thrown.size()) {
             thrown.add(null);
@@ -4334,6 +4367,7 @@
   private class IndexerThreadInterrupt extends Thread {
     volatile boolean failed;
     volatile boolean finish;
+    @Override
     public void run() {
       RAMDirectory dir = new RAMDirectory();
       IndexWriter w = null;
Index: src/test/org/apache/lucene/index/TestIndexWriterDelete.java
===================================================================
--- src/test/org/apache/lucene/index/TestIndexWriterDelete.java	(revision 832941)
+++ src/test/org/apache/lucene/index/TestIndexWriterDelete.java	(working copy)
@@ -609,11 +609,13 @@
     MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {
         boolean sawMaybe = false;
         boolean failed = false;
+        @Override
         public MockRAMDirectory.Failure reset() {
           sawMaybe = false;
           failed = false;
           return this;
         }
+        @Override
         public void eval(MockRAMDirectory dir)  throws IOException {
           if (sawMaybe && !failed) {
             boolean seen = false;
@@ -737,10 +739,12 @@
     
     MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {
         boolean failed = false;
+        @Override
         public MockRAMDirectory.Failure reset() {
           failed = false;
           return this;
         }
+        @Override
         public void eval(MockRAMDirectory dir)  throws IOException {
           if (!failed) {
             failed = true;
Index: src/test/org/apache/lucene/index/TestIndexWriterExceptions.java
===================================================================
--- src/test/org/apache/lucene/index/TestIndexWriterExceptions.java	(revision 832941)
+++ src/test/org/apache/lucene/index/TestIndexWriterExceptions.java	(working copy)
@@ -45,6 +45,7 @@
       this.writer = writer;
     }
 
+    @Override
     public void run() {
 
       final Document doc = new Document();
@@ -117,6 +118,7 @@
       super(dir, a, create, mfl);
     }
 
+    @Override
     boolean testPoint(String name) {
       if (doFail.get() != null && !name.equals("startDoFlush") && r.nextInt(20) == 17) {
         if (DEBUG) {
Index: src/test/org/apache/lucene/index/TestIndexWriterLockRelease.java
===================================================================
--- src/test/org/apache/lucene/index/TestIndexWriterLockRelease.java	(revision 832941)
+++ src/test/org/apache/lucene/index/TestIndexWriterLockRelease.java	(working copy)
@@ -35,6 +35,7 @@
 public class TestIndexWriterLockRelease extends LuceneTestCase {
     private java.io.File __test_dir;
 
+    @Override
     public void setUp() throws Exception {
         super.setUp();
         if (this.__test_dir == null) {
@@ -52,6 +53,7 @@
         }
     }
 
+    @Override
     public void tearDown() throws Exception {
         super.tearDown();
         if (this.__test_dir != null) {
Index: src/test/org/apache/lucene/index/TestIndexWriterReader.java
===================================================================
--- src/test/org/apache/lucene/index/TestIndexWriterReader.java	(revision 832941)
+++ src/test/org/apache/lucene/index/TestIndexWriterReader.java	(working copy)
@@ -332,6 +332,7 @@
     void launchThreads(final int numIter) {
       for (int i = 0; i < NUM_THREADS; i++) {
         threads[i] = new Thread() {
+          @Override
           public void run() {
             try {
               Term term = getDeleteTerm();
@@ -426,6 +427,7 @@
     void launchThreads(final int numIter) {
       for (int i = 0; i < NUM_THREADS; i++) {
         threads[i] = new Thread() {
+          @Override
           public void run() {
             try {
               final Directory[] dirs = new Directory[numDirs];
@@ -593,6 +595,7 @@
 
   private static class MyWarmer extends IndexWriter.IndexReaderWarmer {
     int warmCount;
+    @Override
     public void warm(IndexReader reader) throws IOException {
       warmCount++;
     }
@@ -724,6 +727,7 @@
     final Thread[] threads = new Thread[NUM_THREAD];
     for(int i=0;i<NUM_THREAD;i++) {
       threads[i] = new Thread() {
+          @Override
           public void run() {
             while(System.currentTimeMillis() < endTime) {
               try {
@@ -787,6 +791,7 @@
     final Thread[] threads = new Thread[NUM_THREAD];
     for(int i=0;i<NUM_THREAD;i++) {
       threads[i] = new Thread() {
+          @Override
           public void run() {
             int count = 0;
             final Random r = new Random();
Index: src/test/org/apache/lucene/index/TestLazyProxSkipping.java
===================================================================
--- src/test/org/apache/lucene/index/TestLazyProxSkipping.java	(revision 832941)
+++ src/test/org/apache/lucene/index/TestLazyProxSkipping.java	(working copy)
@@ -45,6 +45,7 @@
     private String term3 = "zz";
 
     private class SeekCountingDirectory extends RAMDirectory {
+      @Override
       public IndexInput openInput(String name) throws IOException {
         IndexInput ii = super.openInput(name);
         if (name.endsWith(".prx")) {
@@ -154,31 +155,38 @@
               this.input = input;
           }      
                 
+          @Override
           public byte readByte() throws IOException {
               return this.input.readByte();
           }
     
+          @Override
           public void readBytes(byte[] b, int offset, int len) throws IOException {
               this.input.readBytes(b, offset, len);        
           }
     
+          @Override
           public void close() throws IOException {
               this.input.close();
           }
     
+          @Override
           public long getFilePointer() {
               return this.input.getFilePointer();
           }
     
+          @Override
           public void seek(long pos) throws IOException {
               TestLazyProxSkipping.this.seeksCounter++;
               this.input.seek(pos);
           }
     
+          @Override
           public long length() {
               return this.input.length();
           }
           
+          @Override
           public Object clone() {
               return new SeeksCountingStream((IndexInput) this.input.clone());
           }
Index: src/test/org/apache/lucene/index/TestMultiLevelSkipList.java
===================================================================
--- src/test/org/apache/lucene/index/TestMultiLevelSkipList.java	(revision 832941)
+++ src/test/org/apache/lucene/index/TestMultiLevelSkipList.java	(working copy)
@@ -89,6 +89,7 @@
   }
 
   private static class PayloadAnalyzer extends Analyzer {
+    @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {
       return new PayloadFilter(new LowerCaseTokenizer(reader));
     }
@@ -105,6 +106,7 @@
       payloadAtt = addAttribute(PayloadAttribute.class);
     }
 
+    @Override
     public boolean incrementToken() throws IOException {
       boolean hasNext = input.incrementToken();
       if (hasNext) {
@@ -126,32 +128,39 @@
       this.input = input;
     }
 
+    @Override
     public byte readByte() throws IOException {
       TestMultiLevelSkipList.this.counter++;
       return this.input.readByte();
     }
 
+    @Override
     public void readBytes(byte[] b, int offset, int len) throws IOException {
       TestMultiLevelSkipList.this.counter += len;
       this.input.readBytes(b, offset, len);
     }
 
+    @Override
     public void close() throws IOException {
       this.input.close();
     }
 
+    @Override
     public long getFilePointer() {
       return this.input.getFilePointer();
     }
 
+    @Override
     public void seek(long pos) throws IOException {
       this.input.seek(pos);
     }
 
+    @Override
     public long length() {
       return this.input.length();
     }
 
+    @Override
     public Object clone() {
       return new CountingStream((IndexInput) this.input.clone());
     }
Index: src/test/org/apache/lucene/index/TestMultiReader.java
===================================================================
--- src/test/org/apache/lucene/index/TestMultiReader.java	(revision 832941)
+++ src/test/org/apache/lucene/index/TestMultiReader.java	(working copy)
@@ -24,6 +24,7 @@
     super(s);
   }
 
+  @Override
   protected IndexReader openReader() throws IOException {
     IndexReader reader;
 
Index: src/test/org/apache/lucene/index/TestNorms.java
===================================================================
--- src/test/org/apache/lucene/index/TestNorms.java	(revision 832941)
+++ src/test/org/apache/lucene/index/TestNorms.java	(working copy)
@@ -41,6 +41,7 @@
 public class TestNorms extends LuceneTestCase {
 
   private class SimilarityOne extends DefaultSimilarity {
+    @Override
     public float lengthNorm(String fieldName, int numTerms) {
       return 1;
     }
@@ -60,6 +61,7 @@
     super(s);
   }
 
+  @Override
   protected void setUp() throws Exception {
     super.setUp();
     similarityOne = new SimilarityOne();
Index: src/test/org/apache/lucene/index/TestNRTReaderWithThreads.java
===================================================================
--- src/test/org/apache/lucene/index/TestNRTReaderWithThreads.java	(revision 832941)
+++ src/test/org/apache/lucene/index/TestNRTReaderWithThreads.java	(working copy)
@@ -80,6 +80,7 @@
       this.writer = writer;
     }
 
+    @Override
     public void run() {
       try {
         while (run) {
Index: src/test/org/apache/lucene/index/TestOmitTf.java
===================================================================
--- src/test/org/apache/lucene/index/TestOmitTf.java	(revision 832941)
+++ src/test/org/apache/lucene/index/TestOmitTf.java	(working copy)
@@ -292,9 +292,11 @@
     searcher.search(q1,
                     new CountingHitCollector() {
                       private Scorer scorer;
+                      @Override
                       public final void setScorer(Scorer scorer) {
                         this.scorer = scorer;
                       }
+                      @Override
                       public final void collect(int doc) throws IOException {
                         //System.out.println("Q1: Doc=" + doc + " score=" + score);
                         float score = scorer.score();
@@ -308,9 +310,11 @@
     searcher.search(q2,
                     new CountingHitCollector() {
                       private Scorer scorer;
+                      @Override
                       public final void setScorer(Scorer scorer) {
                         this.scorer = scorer;
                       }
+                      @Override
                       public final void collect(int doc) throws IOException {
                         //System.out.println("Q2: Doc=" + doc + " score=" + score);
                         float score = scorer.score();
@@ -327,9 +331,11 @@
     searcher.search(q3,
                     new CountingHitCollector() {
                       private Scorer scorer;
+                      @Override
                       public final void setScorer(Scorer scorer) {
                         this.scorer = scorer;
                       }
+                      @Override
                       public final void collect(int doc) throws IOException {
                         //System.out.println("Q1: Doc=" + doc + " score=" + score);
                         float score = scorer.score();
@@ -344,9 +350,11 @@
     searcher.search(q4,
                     new CountingHitCollector() {
                       private Scorer scorer;
+                      @Override
                       public final void setScorer(Scorer scorer) {
                         this.scorer = scorer;
                       }
+                      @Override
                       public final void collect(int doc) throws IOException {
                         float score = scorer.score();
                         //System.out.println("Q1: Doc=" + doc + " score=" + score);
@@ -365,6 +373,7 @@
         
     searcher.search(bq,
                     new CountingHitCollector() {
+                      @Override
                       public final void collect(int doc) throws IOException {
                         //System.out.println("BQ: Doc=" + doc + " score=" + score);
                         super.collect(doc);
@@ -381,7 +390,9 @@
     static int sum=0;
     private int docBase = -1;
     CountingHitCollector(){count=0;sum=0;}
+    @Override
     public void setScorer(Scorer scorer) throws IOException {}
+    @Override
     public void collect(int doc) throws IOException {
       count++;
       sum += doc + docBase;  // use it to avoid any possibility of being optimized away
@@ -390,9 +401,11 @@
     public static int getCount() { return count; }
     public static int getSum() { return sum; }
     
+    @Override
     public void setNextReader(IndexReader reader, int docBase) {
       this.docBase = docBase;
     }
+    @Override
     public boolean acceptsDocsOutOfOrder() {
       return true;
     }
Index: src/test/org/apache/lucene/index/TestParallelReader.java
===================================================================
--- src/test/org/apache/lucene/index/TestParallelReader.java	(revision 832941)
+++ src/test/org/apache/lucene/index/TestParallelReader.java	(working copy)
@@ -42,6 +42,7 @@
   private Searcher parallel;
   private Searcher single;
   
+  @Override
   protected void setUp() throws Exception {
     super.setUp();
     single = single();
Index: src/test/org/apache/lucene/index/TestParallelTermEnum.java
===================================================================
--- src/test/org/apache/lucene/index/TestParallelTermEnum.java	(revision 832941)
+++ src/test/org/apache/lucene/index/TestParallelTermEnum.java	(working copy)
@@ -32,6 +32,7 @@
     private IndexReader ir1;
     private IndexReader ir2;
 
+    @Override
     protected void setUp() throws Exception {
         super.setUp();
         Document doc;
@@ -65,6 +66,7 @@
         this.ir2 = IndexReader.open(rd2, true);
     }
 
+    @Override
     protected void tearDown() throws Exception {
         super.tearDown();
 
Index: src/test/org/apache/lucene/index/TestPayloads.java
===================================================================
--- src/test/org/apache/lucene/index/TestPayloads.java	(revision 832941)
+++ src/test/org/apache/lucene/index/TestPayloads.java	(working copy)
@@ -392,6 +392,7 @@
             fieldToData.put(field, new PayloadData(numFieldInstancesToSkip, data, offset, length));
         }
         
+        @Override
         public TokenStream tokenStream(String fieldName, Reader reader) {
             PayloadData payload = (PayloadData) fieldToData.get(fieldName);
             TokenStream ts = new WhitespaceTokenizer(reader);
@@ -439,6 +440,7 @@
             payloadAtt = addAttribute(PayloadAttribute.class);
         }
         
+        @Override
         public boolean incrementToken() throws IOException {
             boolean hasNext = input.incrementToken();
             if (hasNext) {
@@ -472,6 +474,7 @@
         Thread[] ingesters = new Thread[numThreads];
         for (int i = 0; i < numThreads; i++) {
             ingesters[i] = new Thread() {
+                @Override
                 public void run() {
                     try {
                         for (int j = 0; j < numDocs; j++) {
@@ -530,6 +533,7 @@
             termAtt = addAttribute(TermAttribute.class);
         }
         
+        @Override
         public boolean incrementToken() throws IOException {
             if (!first) return false;
             first = false;
@@ -538,6 +542,7 @@
             return true;
         }
         
+        @Override
         public void close() throws IOException {
             pool.release(payload);
         }
Index: src/test/org/apache/lucene/index/TestPositionBasedTermVectorMapper.java
===================================================================
--- src/test/org/apache/lucene/index/TestPositionBasedTermVectorMapper.java	(revision 832941)
+++ src/test/org/apache/lucene/index/TestPositionBasedTermVectorMapper.java	(working copy)
@@ -33,6 +33,7 @@
     super(s);
   }
 
+  @Override
   protected void setUp() throws Exception {
     super.setUp();
     tokens = new String[]{"here", "is", "some", "text", "to", "test", "extra"};
Index: src/test/org/apache/lucene/index/TestSegmentMerger.java
===================================================================
--- src/test/org/apache/lucene/index/TestSegmentMerger.java	(revision 832941)
+++ src/test/org/apache/lucene/index/TestSegmentMerger.java	(working copy)
@@ -43,6 +43,7 @@
     super(s);
   }
 
+  @Override
   protected void setUp() throws Exception {
     super.setUp();
     DocHelper.setupDoc(doc1);
Index: src/test/org/apache/lucene/index/TestSegmentReader.java
===================================================================
--- src/test/org/apache/lucene/index/TestSegmentReader.java	(revision 832941)
+++ src/test/org/apache/lucene/index/TestSegmentReader.java	(working copy)
@@ -39,6 +39,7 @@
   }
   
   //TODO: Setup the reader w/ multiple documents
+  @Override
   protected void setUp() throws Exception {
     super.setUp();
     DocHelper.setupDoc(testDoc);
Index: src/test/org/apache/lucene/index/TestSegmentTermDocs.java
===================================================================
--- src/test/org/apache/lucene/index/TestSegmentTermDocs.java	(revision 832941)
+++ src/test/org/apache/lucene/index/TestSegmentTermDocs.java	(working copy)
@@ -36,6 +36,7 @@
     super(s);
   }
 
+  @Override
   protected void setUp() throws Exception {
     super.setUp();
     DocHelper.setupDoc(testDoc);
Index: src/test/org/apache/lucene/index/TestStressIndexing.java
===================================================================
--- src/test/org/apache/lucene/index/TestStressIndexing.java	(revision 832941)
+++ src/test/org/apache/lucene/index/TestStressIndexing.java	(working copy)
@@ -42,6 +42,7 @@
       this.allThreads = threads;
     }
 
+    @Override
     public void run() {
       final long stopTime = System.currentTimeMillis() + 1000*RUN_TIME_SEC;
 
@@ -77,6 +78,7 @@
       this.writer = writer;
     }
 
+    @Override
     public void doWork() throws Exception {
       // Add 10 docs:
       for(int j=0; j<10; j++) {
@@ -104,6 +106,7 @@
       this.directory = directory;
     }
 
+    @Override
     public void doWork() throws Throwable {
       for (int i=0; i<100; i++)
         (new IndexSearcher(directory, true)).close();
Index: src/test/org/apache/lucene/index/TestStressIndexing2.java
===================================================================
--- src/test/org/apache/lucene/index/TestStressIndexing2.java	(revision 832941)
+++ src/test/org/apache/lucene/index/TestStressIndexing2.java	(working copy)
@@ -44,6 +44,7 @@
       super(dir, a, create, mfl);
     }
 
+    @Override
     boolean testPoint(String name) {
       //      if (name.equals("startCommit")) {
       if (r.nextInt(4) == 2)
@@ -627,6 +628,7 @@
       docs.remove(idString);
     }
 
+    @Override
     public void run() {
       try {
         r = new Random(base+range+seed);
Index: src/test/org/apache/lucene/index/TestTermdocPerf.java
===================================================================
--- src/test/org/apache/lucene/index/TestTermdocPerf.java	(revision 832941)
+++ src/test/org/apache/lucene/index/TestTermdocPerf.java	(working copy)
@@ -44,6 +44,7 @@
      this.termAtt = addAttribute(TermAttribute.class);
    }
 
+   @Override
    public boolean incrementToken() throws IOException {
      num--;
      if (num >= 0) {
@@ -62,6 +63,7 @@
     final RepeatingTokenStream ts = new RepeatingTokenStream(val);
 
     Analyzer analyzer = new Analyzer() {
+      @Override
       public TokenStream tokenStream(String fieldName, Reader reader) {
         if (random.nextFloat() < percentDocs) ts.num = random.nextInt(maxTF)+1;
         else ts.num=0;
Index: src/test/org/apache/lucene/index/TestTermVectorsReader.java
===================================================================
--- src/test/org/apache/lucene/index/TestTermVectorsReader.java	(revision 832941)
+++ src/test/org/apache/lucene/index/TestTermVectorsReader.java	(working copy)
@@ -64,6 +64,7 @@
 
   TestToken[] tokens = new TestToken[testTerms.length * TERM_FREQ];
 
+  @Override
   protected void setUp() throws Exception {
     super.setUp();
     /*
@@ -132,6 +133,7 @@
       offsetAtt = addAttribute(OffsetAttribute.class);
     }
     
+    @Override
     public boolean incrementToken() {
       if (tokenUpto >= tokens.length)
         return false;
@@ -150,6 +152,7 @@
   }
 
   private class MyAnalyzer extends Analyzer {
+    @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {
       return new MyTokenStream();
     }
@@ -412,12 +415,14 @@
 
     private int documentNumber = -1;
 
+    @Override
     public void setExpectations(String field, int numTerms, boolean storeOffsets, boolean storePositions) {
       if (documentNumber == -1) {
         throw new RuntimeException("Documentnumber should be set at this point!");
       }
     }
 
+    @Override
     public void map(String term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {
       if (documentNumber == -1) {
         throw new RuntimeException("Documentnumber should be set at this point!");
@@ -428,6 +433,7 @@
       return documentNumber;
     }
 
+    @Override
     public void setDocumentNumber(int documentNumber) {
       this.documentNumber = documentNumber;
     }
Index: src/test/org/apache/lucene/index/TestThreadedOptimize.java
===================================================================
--- src/test/org/apache/lucene/index/TestThreadedOptimize.java	(revision 832941)
+++ src/test/org/apache/lucene/index/TestThreadedOptimize.java	(working copy)
@@ -79,6 +79,7 @@
         final int iFinal = i;
         final IndexWriter writerFinal = writer;
         threads[i] = new Thread() {
+          @Override
           public void run() {
             try {
               for(int j=0;j<NUM_ITER2;j++) {
Index: src/test/org/apache/lucene/index/TestTransactionRollback.java
===================================================================
--- src/test/org/apache/lucene/index/TestTransactionRollback.java	(revision 832941)
+++ src/test/org/apache/lucene/index/TestTransactionRollback.java	(working copy)
@@ -121,6 +121,7 @@
   }
   */
 
+  @Override
   protected void setUp() throws Exception {
     super.setUp();
     dir = new MockRAMDirectory();
Index: src/test/org/apache/lucene/index/TestTransactions.java
===================================================================
--- src/test/org/apache/lucene/index/TestTransactions.java	(revision 832941)
+++ src/test/org/apache/lucene/index/TestTransactions.java	(working copy)
@@ -30,6 +30,7 @@
   private static volatile boolean doFail;
 
   private class RandomFailure extends MockRAMDirectory.Failure {
+    @Override
     public void eval(MockRAMDirectory dir) throws IOException {
       if (TestTransactions.doFail && RANDOM.nextInt() % 10 <= 3)
         throw new IOException("now failing randomly but on purpose");
@@ -47,6 +48,7 @@
       this.allThreads = threads;
     }
 
+    @Override
     public void run() {
       final long stopTime = System.currentTimeMillis() + 1000*RUN_TIME_SEC;
 
@@ -81,6 +83,7 @@
       this.dir2 = dir2;
     }
 
+    @Override
     public void doWork() throws Throwable {
 
       IndexWriter writer1 = new IndexWriter(dir1, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);
@@ -158,6 +161,7 @@
       this.dir2 = dir2;
     }
 
+    @Override
     public void doWork() throws Throwable {
       IndexReader r1, r2;
       synchronized(lock) {
Index: src/test/org/apache/lucene/queryParser/TestMultiAnalyzer.java
===================================================================
--- src/test/org/apache/lucene/queryParser/TestMultiAnalyzer.java	(revision 832941)
+++ src/test/org/apache/lucene/queryParser/TestMultiAnalyzer.java	(working copy)
@@ -134,6 +134,7 @@
     public MultiAnalyzer() {
     }
 
+    @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {
       TokenStream result = new StandardTokenizer(Version.LUCENE_CURRENT, reader);
       result = new TestFilter(result);
@@ -161,6 +162,7 @@
       typeAtt = addAttribute(TypeAttribute.class);
     }
 
+    @Override
     public final boolean incrementToken() throws java.io.IOException {
       if (multiToken > 0) {
         termAtt.setTermBuffer("multi"+(multiToken+1));
@@ -200,6 +202,7 @@
     public PosIncrementAnalyzer() {
     }
 
+    @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {
       TokenStream result = new StandardTokenizer(Version.LUCENE_CURRENT, reader);
       result = new TestPosIncrementFilter(result);
@@ -219,6 +222,7 @@
       posIncrAtt = addAttribute(PositionIncrementAttribute.class);
     }
 
+    @Override
     public final boolean incrementToken () throws java.io.IOException {
       while(input.incrementToken()) {
         if (termAtt.term().equals("the")) {
@@ -248,6 +252,7 @@
             return super.getFieldQuery(f,t);
         }
         /** wrap super's version */
+        @Override
         protected Query getFieldQuery(String f, String t)
             throws ParseException {
             return new DumbQueryWrapper(getSuperFieldQuery(f,t));
@@ -265,6 +270,7 @@
             super();
             this.q = q;
         }
+        @Override
         public String toString(String f) {
             return q.toString(f);
         }
Index: src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser.java
===================================================================
--- src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser.java	(revision 832941)
+++ src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser.java	(working copy)
@@ -310,6 +310,7 @@
     public AnalyzerReturningNull() {
     }
 
+    @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {
       if ("f1".equals(fieldName)) {
         return new EmptyTokenStream();
@@ -319,6 +320,7 @@
     }
 
     private static class EmptyTokenStream extends TokenStream {
+      @Override
       public boolean incrementToken() throws IOException {
         return false;
       }
Index: src/test/org/apache/lucene/queryParser/TestQueryParser.java
===================================================================
--- src/test/org/apache/lucene/queryParser/TestQueryParser.java	(revision 832941)
+++ src/test/org/apache/lucene/queryParser/TestQueryParser.java	(working copy)
@@ -98,6 +98,7 @@
     boolean inPhrase = false;
     int savedStart = 0, savedEnd = 0;
 
+    @Override
     public boolean incrementToken() throws IOException {
       if (inPhrase) {
         inPhrase = false;
@@ -124,6 +125,7 @@
   public static class QPTestAnalyzer extends Analyzer {
 
     /** Filters LowerCaseTokenizer with StopFilter. */
+    @Override
     public final TokenStream tokenStream(String fieldName, Reader reader) {
       return new QPTestFilter(new LowerCaseTokenizer(reader));
     }
@@ -134,10 +136,12 @@
       super(Version.LUCENE_CURRENT, f, a);
     }
 
+    @Override
     protected Query getFuzzyQuery(String field, String termStr, float minSimilarity) throws ParseException {
       throw new ParseException("Fuzzy queries not allowed");
     }
 
+    @Override
     protected Query getWildcardQuery(String field, String termStr) throws ParseException {
       throw new ParseException("Wildcard queries not allowed");
     }
@@ -145,6 +149,7 @@
 
   private int originalMaxClauses;
 
+  @Override
   public void setUp() throws Exception {
     super.setUp();
     originalMaxClauses = BooleanQuery.getMaxClauseCount();
@@ -893,17 +898,20 @@
   public void testStarParsing() throws Exception {
     final int[] type = new int[1];
     QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, "field", new WhitespaceAnalyzer()) {
+      @Override
       protected Query getWildcardQuery(String field, String termStr) throws ParseException {
         // override error checking of superclass
         type[0]=1;
         return new TermQuery(new Term(field,termStr));
       }
+      @Override
       protected Query getPrefixQuery(String field, String termStr) throws ParseException {
         // override error checking of superclass
         type[0]=2;        
         return new TermQuery(new Term(field,termStr));
       }
 
+      @Override
       protected Query getFieldQuery(String field, String queryText) throws ParseException {
         type[0]=3;
         return super.getFieldQuery(field, queryText);
@@ -1007,6 +1015,7 @@
     iw.addDocument(d);
   }
 
+  @Override
   public void tearDown() throws Exception {
     super.tearDown();
     BooleanQuery.setMaxClauseCount(originalMaxClauses);
Index: src/test/org/apache/lucene/search/CachingWrapperFilterHelper.java
===================================================================
--- src/test/org/apache/lucene/search/CachingWrapperFilterHelper.java	(revision 832941)
+++ src/test/org/apache/lucene/search/CachingWrapperFilterHelper.java	(working copy)
@@ -43,6 +43,7 @@
     this.shouldHaveCache = shouldHaveCache;
   }
   
+  @Override
   public DocIdSet getDocIdSet(IndexReader reader) throws IOException {
     if (cache == null) {
       cache = new WeakHashMap();
@@ -69,15 +70,18 @@
     return bits;
   }
 
+  @Override
   public String toString() {
     return "CachingWrapperFilterHelper("+filter+")";
   }
 
+  @Override
   public boolean equals(Object o) {
     if (!(o instanceof CachingWrapperFilterHelper)) return false;
     return this.filter.equals((CachingWrapperFilterHelper)o);
   }
   
+  @Override
   public int hashCode() {
     return this.filter.hashCode() ^ 0x5525aacb;
   }
Index: src/test/org/apache/lucene/search/CheckHits.java
===================================================================
--- src/test/org/apache/lucene/search/CheckHits.java	(revision 832941)
+++ src/test/org/apache/lucene/search/CheckHits.java	(working copy)
@@ -122,13 +122,17 @@
       this.bag = bag;
     }
     private int base = 0;
+    @Override
     public void setScorer(Scorer scorer) throws IOException {}
+    @Override
     public void collect(int doc) {
       bag.add(Integer.valueOf(doc + base));
     }
+    @Override
     public void setNextReader(IndexReader reader, int docBase) {
       base = docBase;
     }
+    @Override
     public boolean acceptsDocsOutOfOrder() {
       return true;
     }
@@ -412,6 +416,7 @@
                    new ExplanationAsserter
                    (q, null, this));
     }
+    @Override
     public TopFieldDocs search(Query query,
                                Filter filter,
                                int n,
@@ -420,14 +425,17 @@
       checkExplanations(query);
       return super.search(query,filter,n,sort);
     }
+    @Override
     public void search(Query query, Collector results) throws IOException {
       checkExplanations(query);
       super.search(query, results);
     }
+    @Override
     public void search(Query query, Filter filter, Collector results) throws IOException {
       checkExplanations(query);
       super.search(query, filter, results);
     }
+    @Override
     public TopDocs search(Query query, Filter filter,
                           int n) throws IOException {
 
@@ -472,10 +480,12 @@
       this.deep=deep;
     }      
     
+    @Override
     public void setScorer(Scorer scorer) throws IOException {
       this.scorer = scorer;     
     }
     
+    @Override
     public void collect(int doc) throws IOException {
       Explanation exp = null;
       doc = doc + base;
@@ -489,9 +499,11 @@
       Assert.assertNotNull("Explanation of [["+d+"]] for #"+doc+" is null", exp);
       verifyExplanation(d,doc,scorer.score(),deep,exp);
     }
+    @Override
     public void setNextReader(IndexReader reader, int docBase) {
       base = docBase;
     }
+    @Override
     public boolean acceptsDocsOutOfOrder() {
       return true;
     }
Index: src/test/org/apache/lucene/search/function/FunctionTestSetup.java
===================================================================
--- src/test/org/apache/lucene/search/function/FunctionTestSetup.java	(revision 832941)
+++ src/test/org/apache/lucene/search/function/FunctionTestSetup.java	(working copy)
@@ -74,6 +74,7 @@
   }
 
   /* @override */
+  @Override
   protected void tearDown() throws Exception {
     super.tearDown();
     dir = null;
@@ -81,6 +82,7 @@
   }
 
   /* @override */
+  @Override
   protected void setUp() throws Exception {
     super.setUp();
     // prepare a small index with just a few documents.  
Index: src/test/org/apache/lucene/search/function/JustCompileSearchSpans.java
===================================================================
--- src/test/org/apache/lucene/search/function/JustCompileSearchSpans.java	(revision 832941)
+++ src/test/org/apache/lucene/search/function/JustCompileSearchSpans.java	(working copy)
@@ -35,10 +35,12 @@
 
   static final class JustCompileDocValues extends DocValues {
 
+    @Override
     public float floatVal(int doc) {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
     public String toString(int doc) {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
@@ -51,14 +53,17 @@
       super(field);
     }
 
+    @Override
     public boolean cachedFieldSourceEquals(FieldCacheSource other) {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
     public int cachedFieldSourceHashCode() {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
     public DocValues getCachedFieldValues(FieldCache cache, String field,
         IndexReader reader) throws IOException {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
@@ -68,18 +73,22 @@
 
   static final class JustCompileValueSource extends ValueSource {
 
+    @Override
     public String description() {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
     public boolean equals(Object o) {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
     public DocValues getValues(IndexReader reader) throws IOException {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
     public int hashCode() {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
Index: src/test/org/apache/lucene/search/function/TestCustomScoreQuery.java
===================================================================
--- src/test/org/apache/lucene/search/function/TestCustomScoreQuery.java	(revision 832941)
+++ src/test/org/apache/lucene/search/function/TestCustomScoreQuery.java	(working copy)
@@ -77,14 +77,17 @@
       super(q,qValSrc);
     }
     /*(non-Javadoc) @see org.apache.lucene.search.function.CustomScoreQuery#name() */
+    @Override
     public String name() {
       return "customAdd";
     }
     /*(non-Javadoc) @see org.apache.lucene.search.function.CustomScoreQuery#customScore(int, float, float) */
+    @Override
     public float customScore(int doc, float subQueryScore, float valSrcScore) {
       return subQueryScore + valSrcScore;
     }
     /* (non-Javadoc)@see org.apache.lucene.search.function.CustomScoreQuery#customExplain(int, org.apache.lucene.search.Explanation, org.apache.lucene.search.Explanation)*/
+    @Override
     public Explanation customExplain(int doc, Explanation subQueryExpl, Explanation valSrcExpl) {
       float valSrcScore = valSrcExpl==null ? 0 : valSrcExpl.getValue();
       Explanation exp = new Explanation( valSrcScore + subQueryExpl.getValue(), "custom score: sum of:");
@@ -103,10 +106,12 @@
       super(q,new ValueSourceQuery[]{qValSrc1,qValSrc2});
     }
     /*(non-Javadoc) @see org.apache.lucene.search.function.CustomScoreQuery#name() */
+    @Override
     public String name() {
       return "customMulAdd";
     }
     /*(non-Javadoc) @see org.apache.lucene.search.function.CustomScoreQuery#customScore(int, float, float) */
+    @Override
     public float customScore(int doc, float subQueryScore, float valSrcScores[]) {
       if (valSrcScores.length == 0) {
         return subQueryScore;
@@ -117,6 +122,7 @@
       return (subQueryScore + valSrcScores[0]) * valSrcScores[1]; // we know there are two
     } 
     /* (non-Javadoc)@see org.apache.lucene.search.function.CustomScoreQuery#customExplain(int, org.apache.lucene.search.Explanation, org.apache.lucene.search.Explanation)*/
+    @Override
     public Explanation customExplain(int doc, Explanation subQueryExpl, Explanation valSrcExpls[]) {
       if (valSrcExpls.length == 0) {
         return subQueryExpl;
Index: src/test/org/apache/lucene/search/function/TestDocValues.java
===================================================================
--- src/test/org/apache/lucene/search/function/TestDocValues.java	(revision 832941)
+++ src/test/org/apache/lucene/search/function/TestDocValues.java	(working copy)
@@ -99,6 +99,7 @@
      * @see org.apache.lucene.search.function.DocValues#floatVal(int)
      */
     /* @Override */
+    @Override
     public float floatVal(int doc) {
       return innerArray[doc];
     }
@@ -107,6 +108,7 @@
      * @see org.apache.lucene.search.function.DocValues#toString(int)
      */
     /* @Override */
+    @Override
     public String toString(int doc) {
       return Integer.toString(doc);
     }
Index: src/test/org/apache/lucene/search/JustCompileSearch.java
===================================================================
--- src/test/org/apache/lucene/search/JustCompileSearch.java	(revision 832941)
+++ src/test/org/apache/lucene/search/JustCompileSearch.java	(working copy)
@@ -40,82 +40,101 @@
 
   static final class JustCompileSearcher extends Searcher {
 
+    @Override
     protected Weight createWeight(Query query) throws IOException {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
     
+    @Override
     public void close() throws IOException {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
     public Document doc(int i) throws CorruptIndexException, IOException {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
     public int[] docFreqs(Term[] terms) throws IOException {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
     public Explanation explain(Query query, int doc) throws IOException {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
     public Similarity getSimilarity() {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
     public void search(Query query, Collector results) throws IOException {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
     public void search(Query query, Filter filter, Collector results)
         throws IOException {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
     public TopDocs search(Query query, Filter filter, int n) throws IOException {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
     
+    @Override
     public TopFieldDocs search(Query query, Filter filter, int n, Sort sort)
         throws IOException {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
     
+    @Override
     public TopDocs search(Query query, int n) throws IOException {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
     
+    @Override
     public void setSimilarity(Similarity similarity) {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
     
+    @Override
     public int docFreq(Term term) throws IOException {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
     public Explanation explain(Weight weight, int doc) throws IOException {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
     public int maxDoc() throws IOException {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
     public Query rewrite(Query query) throws IOException {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
     public void search(Weight weight, Filter filter, Collector results)
         throws IOException {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
     public TopDocs search(Weight weight, Filter filter, int n)
         throws IOException {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
     public TopFieldDocs search(Weight weight, Filter filter, int n, Sort sort)
         throws IOException {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
@@ -130,19 +149,23 @@
   
   static final class JustCompileCollector extends Collector {
 
+    @Override
     public void collect(int doc) throws IOException {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
     public void setNextReader(IndexReader reader, int docBase)
         throws IOException {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
     public void setScorer(Scorer scorer) throws IOException {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
     
+    @Override
     public boolean acceptsDocsOutOfOrder() {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
@@ -151,6 +174,7 @@
   
   static final class JustCompileDocIdSet extends DocIdSet {
 
+    @Override
     public DocIdSetIterator iterator() throws IOException {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
@@ -159,14 +183,17 @@
 
   static final class JustCompileDocIdSetIterator extends DocIdSetIterator {
 
+    @Override
     public int docID() {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
     public int nextDoc() throws IOException {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
     
+    @Override
     public int advance(int target) throws IOException {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
@@ -190,27 +217,33 @@
 
   static final class JustCompileFieldComparator extends FieldComparator {
 
+    @Override
     public int compare(int slot1, int slot2) {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
     public int compareBottom(int doc) throws IOException {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
     public void copy(int slot, int doc) throws IOException {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
     public void setBottom(int slot) {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
     public void setNextReader(IndexReader reader, int docBase)
         throws IOException {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
     public Comparable value(int slot) {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
@@ -219,6 +252,7 @@
 
   static final class JustCompileFieldComparatorSource extends FieldComparatorSource {
 
+    @Override
     public FieldComparator newComparator(String fieldname, int numHits,
         int sortPos, boolean reversed) throws IOException {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
@@ -242,6 +276,7 @@
       super(innerSet);
     }
 
+    @Override
     protected boolean match(int docid) {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
@@ -254,6 +289,7 @@
       super(innerIter);
     }
 
+    @Override
     protected boolean match(int doc) {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
@@ -262,14 +298,17 @@
 
   static final class JustCompileFilteredTermEnum extends FilteredTermEnum {
 
+    @Override
     public float difference() {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
     protected boolean endEnum() {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
     protected boolean termCompare(Term term) {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
@@ -283,6 +322,7 @@
       super(weight, tps, offsets, similarity, norms);
     }
 
+    @Override
     protected float phraseFreq() throws IOException {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
@@ -291,6 +331,7 @@
 
   static final class JustCompileQuery extends Query {
 
+    @Override
     public String toString(String field) {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
@@ -303,23 +344,28 @@
       super(similarity);
     }
 
+    @Override
     protected boolean score(Collector collector, int max, int firstDocID)
         throws IOException {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
     
+    @Override
     public float score() throws IOException {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
     public int docID() {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
     public int nextDoc() throws IOException {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
     
+    @Override
     public int advance(int target) throws IOException {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
@@ -327,26 +373,32 @@
   
   static final class JustCompileSimilarity extends Similarity {
 
+    @Override
     public float coord(int overlap, int maxOverlap) {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
     public float idf(int docFreq, int numDocs) {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
     public float lengthNorm(String fieldName, int numTokens) {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
     public float queryNorm(float sumOfSquaredWeights) {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
     public float sloppyFreq(int distance) {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
     public float tf(float freq) {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
@@ -355,6 +407,7 @@
 
   static final class JustCompileSpanFilter extends SpanFilter {
 
+    @Override
     public SpanFilterResult bitSpans(IndexReader reader) throws IOException {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
@@ -371,19 +424,23 @@
       super(pq);
     }
 
+    @Override
     public void collect(int doc) throws IOException {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
     public void setNextReader(IndexReader reader, int docBase)
         throws IOException {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
     public void setScorer(Scorer scorer) throws IOException {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
     
+    @Override
     public boolean acceptsDocsOutOfOrder() {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
@@ -392,26 +449,32 @@
 
   static final class JustCompileWeight extends Weight {
 
+    @Override
     public Explanation explain(IndexReader reader, int doc) throws IOException {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
     public Query getQuery() {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
     public float getValue() {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
     public void normalize(float norm) {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
     public float sumOfSquaredWeights() throws IOException {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
     public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder, boolean topScorer)
         throws IOException {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
Index: src/test/org/apache/lucene/search/MockFilter.java
===================================================================
--- src/test/org/apache/lucene/search/MockFilter.java	(revision 832941)
+++ src/test/org/apache/lucene/search/MockFilter.java	(working copy)
@@ -24,6 +24,7 @@
 public class MockFilter extends Filter {
   private boolean wasCalled;
 
+  @Override
   public DocIdSet getDocIdSet(IndexReader reader) {
     wasCalled = true;
     return new DocIdBitSet(new BitSet());
Index: src/test/org/apache/lucene/search/payloads/PayloadHelper.java
===================================================================
--- src/test/org/apache/lucene/search/payloads/PayloadHelper.java	(revision 832941)
+++ src/test/org/apache/lucene/search/payloads/PayloadHelper.java	(working copy)
@@ -48,6 +48,7 @@
 
 
 
+    @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {
       TokenStream result = new LowerCaseTokenizer(reader);
       result = new PayloadFilter(result, fieldName);
@@ -66,6 +67,7 @@
       payloadAtt = addAttribute(PayloadAttribute.class);
     }
 
+    @Override
     public boolean incrementToken() throws IOException {
       
       if (input.incrementToken()) {
Index: src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery.java
===================================================================
--- src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery.java	(revision 832941)
+++ src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery.java	(working copy)
@@ -55,6 +55,7 @@
   }
 
   private class PayloadAnalyzer extends Analyzer {
+    @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {
       TokenStream result = new LowerCaseTokenizer(reader);
       result = new PayloadFilter(result, fieldName);
@@ -73,6 +74,7 @@
       payAtt = addAttribute(PayloadAttribute.class);
     }
 
+    @Override
     public boolean incrementToken() throws IOException {
       boolean result = false;
       if (input.incrementToken() == true){
@@ -98,6 +100,7 @@
     return new PayloadNearQuery(clauses, 0, inOrder);
   }
 
+  @Override
   protected void setUp() throws Exception {
     super.setUp();
     RAMDirectory directory = new RAMDirectory();
Index: src/test/org/apache/lucene/search/payloads/TestPayloadTermQuery.java
===================================================================
--- src/test/org/apache/lucene/search/payloads/TestPayloadTermQuery.java	(revision 832941)
+++ src/test/org/apache/lucene/search/payloads/TestPayloadTermQuery.java	(working copy)
@@ -64,6 +64,7 @@
   private class PayloadAnalyzer extends Analyzer {
 
 
+    @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {
       TokenStream result = new LowerCaseTokenizer(reader);
       result = new PayloadFilter(result, fieldName);
@@ -83,6 +84,7 @@
       payloadAtt = addAttribute(PayloadAttribute.class);
     }
     
+    @Override
     public boolean incrementToken() throws IOException {
       boolean hasNext = input.incrementToken();
       if (hasNext) {
@@ -103,6 +105,7 @@
     }
   }
 
+  @Override
   protected void setUp() throws Exception {
     super.setUp();
     directory = new RAMDirectory();
@@ -279,6 +282,7 @@
   static class BoostingSimilarity extends DefaultSimilarity {
 
     // TODO: Remove warning after API has been finalized
+    @Override
     public float scorePayload(int docId, String fieldName, int start, int end, byte[] payload, int offset, int length) {
       //we know it is size 4 here, so ignore the offset/length
       return payload[0];
@@ -287,26 +291,32 @@
     //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
     //Make everything else 1 so we see the effect of the payload
     //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
+    @Override
     public float lengthNorm(String fieldName, int numTerms) {
       return 1;
     }
 
+    @Override
     public float queryNorm(float sumOfSquaredWeights) {
       return 1;
     }
 
+    @Override
     public float sloppyFreq(int distance) {
       return 1;
     }
 
+    @Override
     public float coord(int overlap, int maxOverlap) {
       return 1;
     }
 
+    @Override
     public float idf(int docFreq, int numDocs) {
       return 1;
     }
 
+    @Override
     public float tf(float freq) {
       return freq == 0 ? 0 : 1;
     }
Index: src/test/org/apache/lucene/search/QueryUtils.java
===================================================================
--- src/test/org/apache/lucene/search/QueryUtils.java	(revision 832941)
+++ src/test/org/apache/lucene/search/QueryUtils.java	(working copy)
@@ -56,6 +56,7 @@
     // test that a class check is done so that no exception is thrown
     // in the implementation of equals()
     Query whacky = new Query() {
+      @Override
       public String toString(String field) {
         return "My Whacky Query";
       }
@@ -287,10 +288,12 @@
           private IndexReader reader;
           private Scorer scorer;
 
+          @Override
           public void setScorer(Scorer scorer) throws IOException {
             this.sc = scorer;
           }
 
+          @Override
           public void collect(int doc) throws IOException {
             float score = sc.score();
             lastDoc[0] = doc;
@@ -334,12 +337,14 @@
             }
           }
 
+          @Override
           public void setNextReader(IndexReader reader, int docBase) {
             this.reader = reader;
             this.scorer = null;
             lastDoc[0] = -1;
           }
 
+          @Override
           public boolean acceptsDocsOutOfOrder() {
             return true;
           }
@@ -371,9 +376,11 @@
     s.search(q,new Collector() {
       private Scorer scorer;
       private IndexReader reader;
+      @Override
       public void setScorer(Scorer scorer) throws IOException {
         this.scorer = scorer;
       }
+      @Override
       public void collect(int doc) throws IOException {
         //System.out.println("doc="+doc);
         float score = scorer.score();
@@ -393,10 +400,12 @@
           throw new RuntimeException(e);
         }
       }
+      @Override
       public void setNextReader(IndexReader reader, int docBase) {
         this.reader = reader;
         lastDoc[0] = -1;
       }
+      @Override
       public boolean acceptsDocsOutOfOrder() {
         return false;
       }
Index: src/test/org/apache/lucene/search/SingleDocTestFilter.java
===================================================================
--- src/test/org/apache/lucene/search/SingleDocTestFilter.java	(revision 832941)
+++ src/test/org/apache/lucene/search/SingleDocTestFilter.java	(working copy)
@@ -30,6 +30,7 @@
     this.doc = doc;
   }
 
+  @Override
   public DocIdSet getDocIdSet(IndexReader reader) throws IOException {
     BitSet bits = new BitSet(reader.maxDoc());
     bits.set(doc);
Index: src/test/org/apache/lucene/search/spans/JustCompileSearchSpans.java
===================================================================
--- src/test/org/apache/lucene/search/spans/JustCompileSearchSpans.java	(revision 832941)
+++ src/test/org/apache/lucene/search/spans/JustCompileSearchSpans.java	(working copy)
@@ -37,30 +37,37 @@
 
   static final class JustCompileSpans extends Spans {
 
+    @Override
     public int doc() {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
     public int end() {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
     public boolean next() throws IOException {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
     public boolean skipTo(int target) throws IOException {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
     public int start() {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
     public Collection getPayload() throws IOException {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
     public boolean isPayloadAvailable() {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
@@ -69,14 +76,17 @@
 
   static final class JustCompileSpanQuery extends SpanQuery {
 
+    @Override
     public String getField() {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
     public Spans getSpans(IndexReader reader) throws IOException {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
     public String toString(String field) {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
@@ -85,30 +95,37 @@
 
   static final class JustCompilePayloadSpans extends Spans {
 
+    @Override
     public Collection getPayload() throws IOException {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
     public boolean isPayloadAvailable() {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
     public int doc() {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
     public int end() {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
     public boolean next() throws IOException {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
     public boolean skipTo(int target) throws IOException {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
     public int start() {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
@@ -122,6 +139,7 @@
       super(spans, weight, similarity, norms);
     }
 
+    @Override
     protected boolean setFreqCurrentDoc() throws IOException {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
Index: src/test/org/apache/lucene/search/spans/TestBasics.java
===================================================================
--- src/test/org/apache/lucene/search/spans/TestBasics.java	(revision 832941)
+++ src/test/org/apache/lucene/search/spans/TestBasics.java	(working copy)
@@ -51,6 +51,7 @@
 public class TestBasics extends LuceneTestCase {
   private IndexSearcher searcher;
 
+  @Override
   public void setUp() throws Exception {
     super.setUp();
     RAMDirectory directory = new RAMDirectory();
Index: src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery.java
===================================================================
--- src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery.java	(revision 832941)
+++ src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery.java	(working copy)
@@ -49,6 +49,7 @@
 
   protected IndexSearcher searcher;
   
+  @Override
   public void setUp() throws Exception {
     super.setUp();
     RAMDirectory directory = new RAMDirectory();
@@ -114,6 +115,7 @@
     searcher = new IndexSearcher(directory, true);
   }
 
+  @Override
   public void tearDown() throws Exception {
     super.tearDown();
     searcher.close();
@@ -140,6 +142,7 @@
     // mask an anon SpanQuery class that rewrites to something else.
     SpanQuery q = new FieldMaskingSpanQuery
       (new SpanTermQuery(new Term("last", "sally")) {
+          @Override
           public Query rewrite(IndexReader reader) {
             return new SpanOrQuery(new SpanQuery[] {
               new SpanTermQuery(new Term("first", "sally")),
Index: src/test/org/apache/lucene/search/spans/TestNearSpansOrdered.java
===================================================================
--- src/test/org/apache/lucene/search/spans/TestNearSpansOrdered.java	(revision 832941)
+++ src/test/org/apache/lucene/search/spans/TestNearSpansOrdered.java	(working copy)
@@ -39,11 +39,13 @@
   public static final QueryParser qp =
     new QueryParser(Version.LUCENE_CURRENT, FIELD, new WhitespaceAnalyzer());
 
+  @Override
   public void tearDown() throws Exception {
     super.tearDown();
     searcher.close();
   }
   
+  @Override
   public void setUp() throws Exception {
     super.setUp();
     RAMDirectory directory = new RAMDirectory();
Index: src/test/org/apache/lucene/search/spans/TestPayloadSpans.java
===================================================================
--- src/test/org/apache/lucene/search/spans/TestPayloadSpans.java	(revision 832941)
+++ src/test/org/apache/lucene/search/spans/TestPayloadSpans.java	(working copy)
@@ -59,6 +59,7 @@
     super(s);
   }
 
+  @Override
   protected void setUp() throws Exception {
     super.setUp();
     PayloadHelper helper = new PayloadHelper();
@@ -472,6 +473,7 @@
 
   class PayloadAnalyzer extends Analyzer {
 
+    @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {
       TokenStream result = new LowerCaseTokenizer(reader);
       result = new PayloadFilter(result, fieldName);
@@ -502,6 +504,7 @@
       payloadAtt = addAttribute(PayloadAttribute.class);
     }
 
+    @Override
     public boolean incrementToken() throws IOException {
       if (input.incrementToken()) {
         String token = new String(termAtt.termBuffer(), 0, termAtt.termLength());
@@ -522,6 +525,7 @@
   
   public class TestPayloadAnalyzer extends Analyzer {
 
+    @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {
       TokenStream result = new LowerCaseTokenizer(reader);
       result = new PayloadFilter(result, fieldName);
Index: src/test/org/apache/lucene/search/spans/TestSpanExplanationsOfNonMatches.java
===================================================================
--- src/test/org/apache/lucene/search/spans/TestSpanExplanationsOfNonMatches.java	(revision 832941)
+++ src/test/org/apache/lucene/search/spans/TestSpanExplanationsOfNonMatches.java	(working copy)
@@ -33,6 +33,7 @@
    *
    * @see CheckHits#checkNoMatchExplanations
    */
+  @Override
   public void qtest(Query q, int[] expDocNrs) throws Exception {
     CheckHits.checkNoMatchExplanations(q, FIELD, searcher, expDocNrs);
   }
Index: src/test/org/apache/lucene/search/spans/TestSpans.java
===================================================================
--- src/test/org/apache/lucene/search/spans/TestSpans.java	(revision 832941)
+++ src/test/org/apache/lucene/search/spans/TestSpans.java	(working copy)
@@ -46,6 +46,7 @@
 
   public static final String field = "field";
 
+  @Override
   public void setUp() throws Exception {
     super.setUp();
     RAMDirectory directory = new RAMDirectory();
@@ -393,6 +394,7 @@
     int slop = 1;
 
     final Similarity sim = new DefaultSimilarity() {
+      @Override
       public float sloppyFreq(int distance) {
         return 0.0f;
       }
@@ -404,6 +406,7 @@
                                 makeSpanTermQuery("t2") },
                               slop,
                               ordered) {
+      @Override
       public Similarity getSimilarity(Searcher s) {
         return sim;
       }
Index: src/test/org/apache/lucene/search/spans/TestSpansAdvanced.java
===================================================================
--- src/test/org/apache/lucene/search/spans/TestSpansAdvanced.java	(revision 832941)
+++ src/test/org/apache/lucene/search/spans/TestSpansAdvanced.java	(working copy)
@@ -49,6 +49,7 @@
     /**
      * Initializes the tests by adding 4 identical documents to the index.
      */
+    @Override
     protected void setUp() throws Exception {
         super.setUp();
         super.setUp();
@@ -64,6 +65,7 @@
         searcher = new IndexSearcher(mDirectory, true);
     }
 
+    @Override
     protected void tearDown() throws Exception {
         super.tearDown();
         searcher.close();
Index: src/test/org/apache/lucene/search/spans/TestSpansAdvanced2.java
===================================================================
--- src/test/org/apache/lucene/search/spans/TestSpansAdvanced2.java	(revision 832941)
+++ src/test/org/apache/lucene/search/spans/TestSpansAdvanced2.java	(working copy)
@@ -35,6 +35,7 @@
     /**
      * Initializes the tests by adding documents to the index.
      */
+    @Override
     protected void setUp() throws Exception {
         super.setUp();
 
@@ -99,6 +100,7 @@
      *
      * @throws IOException
      */
+    @Override
     public void testBooleanQueryWithSpanQueries() throws IOException {
 
         doTestBooleanQueryWithSpanQueries(searcher2, 0.73500174f);
Index: src/test/org/apache/lucene/search/TestBoolean2.java
===================================================================
--- src/test/org/apache/lucene/search/TestBoolean2.java	(revision 832941)
+++ src/test/org/apache/lucene/search/TestBoolean2.java	(working copy)
@@ -47,6 +47,7 @@
   private Directory dir2;
   private int mulFactor;
 
+  @Override
   public void setUp() throws Exception {
     super.setUp();
     RAMDirectory directory = new RAMDirectory();
@@ -92,6 +93,7 @@
     bigSearcher = new IndexSearcher(reader);
   }
 
+  @Override
   public void tearDown() throws Exception {
     reader.close();
     dir2.close();
@@ -187,6 +189,7 @@
     String queryText = "+w3 +xx +w2 zz";
     int[] expDocNrs = {2, 3};
     searcher.setSimilarity(new DefaultSimilarity(){
+      @Override
       public float coord(int overlap, int maxOverlap) {
         return overlap / ((float)maxOverlap - 1);
       }
Index: src/test/org/apache/lucene/search/TestBooleanMinShouldMatch.java
===================================================================
--- src/test/org/apache/lucene/search/TestBooleanMinShouldMatch.java	(revision 832941)
+++ src/test/org/apache/lucene/search/TestBooleanMinShouldMatch.java	(working copy)
@@ -41,6 +41,7 @@
     public IndexReader r;
     public IndexSearcher s;
 
+    @Override
     public void setUp() throws Exception {
         super.setUp();
 
Index: src/test/org/apache/lucene/search/TestBooleanOr.java
===================================================================
--- src/test/org/apache/lucene/search/TestBooleanOr.java	(revision 832941)
+++ src/test/org/apache/lucene/search/TestBooleanOr.java	(working copy)
@@ -33,128 +33,128 @@
 
 public class TestBooleanOr extends LuceneTestCase {
 
-	private static String FIELD_T = "T";
-	private static String FIELD_C = "C";
+  private static String FIELD_T = "T";
+  private static String FIELD_C = "C";
 
-	private TermQuery t1 = new TermQuery(new Term(FIELD_T, "files"));
-	private TermQuery t2 = new TermQuery(new Term(FIELD_T, "deleting"));
-	private TermQuery c1 = new TermQuery(new Term(FIELD_C, "production"));
-	private TermQuery c2 = new TermQuery(new Term(FIELD_C, "optimize"));
+  private TermQuery t1 = new TermQuery(new Term(FIELD_T, "files"));
+  private TermQuery t2 = new TermQuery(new Term(FIELD_T, "deleting"));
+  private TermQuery c1 = new TermQuery(new Term(FIELD_C, "production"));
+  private TermQuery c2 = new TermQuery(new Term(FIELD_C, "optimize"));
 
-	private IndexSearcher searcher = null;
+  private IndexSearcher searcher = null;
 
-	private int search(Query q) throws IOException {
+  private int search(Query q) throws IOException {
     QueryUtils.check(q,searcher);
     return searcher.search(q, null, 1000).totalHits;
-	}
+  }
 
-	public void testElements() throws IOException {
-		assertEquals(1, search(t1));
-		assertEquals(1, search(t2));
-		assertEquals(1, search(c1));
-		assertEquals(1, search(c2));
-	}
+  public void testElements() throws IOException {
+    assertEquals(1, search(t1));
+    assertEquals(1, search(t2));
+    assertEquals(1, search(c1));
+    assertEquals(1, search(c2));
+  }
 
-	/**
-	 * <code>T:files T:deleting C:production C:optimize </code>
-	 * it works.
-	 *
-	 * @throws IOException
-	 */
-	public void testFlat() throws IOException {
-		BooleanQuery q = new BooleanQuery();
-		q.add(new BooleanClause(t1, BooleanClause.Occur.SHOULD));
-		q.add(new BooleanClause(t2, BooleanClause.Occur.SHOULD));
-		q.add(new BooleanClause(c1, BooleanClause.Occur.SHOULD));
-		q.add(new BooleanClause(c2, BooleanClause.Occur.SHOULD));
-		assertEquals(1, search(q));
-	}
+  /**
+   * <code>T:files T:deleting C:production C:optimize </code>
+   * it works.
+   *
+   * @throws IOException
+   */
+  public void testFlat() throws IOException {
+    BooleanQuery q = new BooleanQuery();
+    q.add(new BooleanClause(t1, BooleanClause.Occur.SHOULD));
+    q.add(new BooleanClause(t2, BooleanClause.Occur.SHOULD));
+    q.add(new BooleanClause(c1, BooleanClause.Occur.SHOULD));
+    q.add(new BooleanClause(c2, BooleanClause.Occur.SHOULD));
+    assertEquals(1, search(q));
+  }
 
-	/**
-	 * <code>(T:files T:deleting) (+C:production +C:optimize)</code>
-	 * it works.
-	 *
-	 * @throws IOException
-	 */
-	public void testParenthesisMust() throws IOException {
-		BooleanQuery q3 = new BooleanQuery();
-		q3.add(new BooleanClause(t1, BooleanClause.Occur.SHOULD));
-		q3.add(new BooleanClause(t2, BooleanClause.Occur.SHOULD));
-		BooleanQuery q4 = new BooleanQuery();
-		q4.add(new BooleanClause(c1, BooleanClause.Occur.MUST));
-		q4.add(new BooleanClause(c2, BooleanClause.Occur.MUST));
-		BooleanQuery q2 = new BooleanQuery();
-		q2.add(q3, BooleanClause.Occur.SHOULD);
-		q2.add(q4, BooleanClause.Occur.SHOULD);
-		assertEquals(1, search(q2));
-	}
+  /**
+   * <code>(T:files T:deleting) (+C:production +C:optimize)</code>
+   * it works.
+   *
+   * @throws IOException
+   */
+  public void testParenthesisMust() throws IOException {
+    BooleanQuery q3 = new BooleanQuery();
+    q3.add(new BooleanClause(t1, BooleanClause.Occur.SHOULD));
+    q3.add(new BooleanClause(t2, BooleanClause.Occur.SHOULD));
+    BooleanQuery q4 = new BooleanQuery();
+    q4.add(new BooleanClause(c1, BooleanClause.Occur.MUST));
+    q4.add(new BooleanClause(c2, BooleanClause.Occur.MUST));
+    BooleanQuery q2 = new BooleanQuery();
+    q2.add(q3, BooleanClause.Occur.SHOULD);
+    q2.add(q4, BooleanClause.Occur.SHOULD);
+    assertEquals(1, search(q2));
+  }
 
-	/**
-	 * <code>(T:files T:deleting) +(C:production C:optimize)</code>
-	 * not working. results NO HIT.
-	 *
-	 * @throws IOException
-	 */
-	public void testParenthesisMust2() throws IOException {
-		BooleanQuery q3 = new BooleanQuery();
-		q3.add(new BooleanClause(t1, BooleanClause.Occur.SHOULD));
-		q3.add(new BooleanClause(t2, BooleanClause.Occur.SHOULD));
-		BooleanQuery q4 = new BooleanQuery();
-		q4.add(new BooleanClause(c1, BooleanClause.Occur.SHOULD));
-		q4.add(new BooleanClause(c2, BooleanClause.Occur.SHOULD));
-		BooleanQuery q2 = new BooleanQuery();
-		q2.add(q3, BooleanClause.Occur.SHOULD);
-		q2.add(q4, BooleanClause.Occur.MUST);
-		assertEquals(1, search(q2));
-	}
+  /**
+   * <code>(T:files T:deleting) +(C:production C:optimize)</code>
+   * not working. results NO HIT.
+   *
+   * @throws IOException
+   */
+  public void testParenthesisMust2() throws IOException {
+    BooleanQuery q3 = new BooleanQuery();
+    q3.add(new BooleanClause(t1, BooleanClause.Occur.SHOULD));
+    q3.add(new BooleanClause(t2, BooleanClause.Occur.SHOULD));
+    BooleanQuery q4 = new BooleanQuery();
+    q4.add(new BooleanClause(c1, BooleanClause.Occur.SHOULD));
+    q4.add(new BooleanClause(c2, BooleanClause.Occur.SHOULD));
+    BooleanQuery q2 = new BooleanQuery();
+    q2.add(q3, BooleanClause.Occur.SHOULD);
+    q2.add(q4, BooleanClause.Occur.MUST);
+    assertEquals(1, search(q2));
+  }
 
-	/**
-	 * <code>(T:files T:deleting) (C:production C:optimize)</code>
-	 * not working. results NO HIT.
-	 *
-	 * @throws IOException
-	 */
-	public void testParenthesisShould() throws IOException {
-		BooleanQuery q3 = new BooleanQuery();
-		q3.add(new BooleanClause(t1, BooleanClause.Occur.SHOULD));
-		q3.add(new BooleanClause(t2, BooleanClause.Occur.SHOULD));
-		BooleanQuery q4 = new BooleanQuery();
-		q4.add(new BooleanClause(c1, BooleanClause.Occur.SHOULD));
-		q4.add(new BooleanClause(c2, BooleanClause.Occur.SHOULD));
-		BooleanQuery q2 = new BooleanQuery();
-		q2.add(q3, BooleanClause.Occur.SHOULD);
-		q2.add(q4, BooleanClause.Occur.SHOULD);
-		assertEquals(1, search(q2));
-	}
+  /**
+   * <code>(T:files T:deleting) (C:production C:optimize)</code>
+   * not working. results NO HIT.
+   *
+   * @throws IOException
+   */
+  public void testParenthesisShould() throws IOException {
+    BooleanQuery q3 = new BooleanQuery();
+    q3.add(new BooleanClause(t1, BooleanClause.Occur.SHOULD));
+    q3.add(new BooleanClause(t2, BooleanClause.Occur.SHOULD));
+    BooleanQuery q4 = new BooleanQuery();
+    q4.add(new BooleanClause(c1, BooleanClause.Occur.SHOULD));
+    q4.add(new BooleanClause(c2, BooleanClause.Occur.SHOULD));
+    BooleanQuery q2 = new BooleanQuery();
+    q2.add(q3, BooleanClause.Occur.SHOULD);
+    q2.add(q4, BooleanClause.Occur.SHOULD);
+    assertEquals(1, search(q2));
+  }
 
-	protected void setUp() throws Exception {
-		super.setUp();
-		super.setUp();
+  @Override
+  protected void setUp() throws Exception {
+    super.setUp();
 
-		//
-		RAMDirectory rd = new RAMDirectory();
+    //
+    RAMDirectory rd = new RAMDirectory();
 
-		//
-		IndexWriter writer = new IndexWriter(rd, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);
+    //
+    IndexWriter writer = new IndexWriter(rd, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);
 
-		//
-		Document d = new Document();
-		d.add(new Field(
-				FIELD_T,
-				"Optimize not deleting all files",
-				Field.Store.YES,
-				Field.Index.ANALYZED));
-		d.add(new Field(
-				FIELD_C,
-				"Deleted When I run an optimize in our production environment.",
-				Field.Store.YES,
-				Field.Index.ANALYZED));
+    //
+    Document d = new Document();
+    d.add(new Field(
+        FIELD_T,
+        "Optimize not deleting all files",
+        Field.Store.YES,
+        Field.Index.ANALYZED));
+    d.add(new Field(
+        FIELD_C,
+        "Deleted When I run an optimize in our production environment.",
+        Field.Store.YES,
+        Field.Index.ANALYZED));
 
-		//
-		writer.addDocument(d);
-		writer.close();
+    //
+    writer.addDocument(d);
+    writer.close();
 
-		//
-		searcher = new IndexSearcher(rd, true);
-	}
+    //
+    searcher = new IndexSearcher(rd, true);
+  }
 }
Index: src/test/org/apache/lucene/search/TestCachingWrapperFilter.java
===================================================================
--- src/test/org/apache/lucene/search/TestCachingWrapperFilter.java	(revision 832941)
+++ src/test/org/apache/lucene/search/TestCachingWrapperFilter.java	(working copy)
@@ -84,6 +84,7 @@
     assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange("test", Integer.valueOf(10), Integer.valueOf(20), true, true), true);
     // a openbitset filter is always cacheable
     assertDocIdSetCacheable(reader, new Filter() {
+      @Override
       public DocIdSet getDocIdSet(IndexReader reader) {
         return new OpenBitSet();
       }
Index: src/test/org/apache/lucene/search/TestComplexExplanations.java
===================================================================
--- src/test/org/apache/lucene/search/TestComplexExplanations.java	(revision 832941)
+++ src/test/org/apache/lucene/search/TestComplexExplanations.java	(working copy)
@@ -31,6 +31,7 @@
    * Override the Similarity used in our searcher with one that plays
    * nice with boosts of 0.0
    */
+  @Override
   public void setUp() throws Exception {
     super.setUp();
     searcher.setSimilarity(createQnorm1Similarity());
@@ -39,6 +40,7 @@
   // must be static for weight serialization tests 
   private static DefaultSimilarity createQnorm1Similarity() {
     return new DefaultSimilarity() {
+        @Override
         public float queryNorm(float sumOfSquaredWeights) {
           return 1.0f; // / (float) Math.sqrt(1.0f + sumOfSquaredWeights);
         }
Index: src/test/org/apache/lucene/search/TestComplexExplanationsOfNonMatches.java
===================================================================
--- src/test/org/apache/lucene/search/TestComplexExplanationsOfNonMatches.java	(revision 832941)
+++ src/test/org/apache/lucene/search/TestComplexExplanationsOfNonMatches.java	(working copy)
@@ -48,6 +48,7 @@
    *
    * @see CheckHits#checkNoMatchExplanations
    */
+  @Override
   public void qtest(Query q, int[] expDocNrs) throws Exception {
     CheckHits.checkNoMatchExplanations(q, FIELD, searcher, expDocNrs);
   }
Index: src/test/org/apache/lucene/search/TestCustomSearcherSort.java
===================================================================
--- src/test/org/apache/lucene/search/TestCustomSearcherSort.java	(revision 832941)
+++ src/test/org/apache/lucene/search/TestCustomSearcherSort.java	(working copy)
@@ -53,105 +53,106 @@
     // reduced from 20000 to 2000 to speed up test...
     private final static int INDEX_SIZE = 2000;
 
-	public TestCustomSearcherSort (String name) {
-		super (name);
-	}
+  public TestCustomSearcherSort (String name) {
+    super (name);
+  }
 
-	public static void main (String[] argv) {
-	    TestRunner.run (suite());
-	}
+  public static void main (String[] argv) {
+      TestRunner.run (suite());
+  }
 
-	public static Test suite() {
-		return new TestSuite (TestCustomSearcherSort.class);
-	}
+  public static Test suite() {
+    return new TestSuite (TestCustomSearcherSort.class);
+  }
 
 
-	// create an index for testing
-	private Directory getIndex()
-	throws IOException {
-	        RAMDirectory indexStore = new RAMDirectory ();
-	        IndexWriter writer = new IndexWriter (indexStore, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);
-	        RandomGen random = new RandomGen(newRandom());
-	        for (int i=0; i<INDEX_SIZE; ++i) { // don't decrease; if to low the problem doesn't show up
-	        Document doc = new Document();
-	            if((i%5)!=0) { // some documents must not have an entry in the first sort field
-	                doc.add (new Field("publicationDate_", random.getLuceneDate(), Field.Store.YES, Field.Index.NOT_ANALYZED));
-	            }
-	            if((i%7)==0) { // some documents to match the query (see below) 
-	                doc.add (new Field("content", "test", Field.Store.YES, Field.Index.ANALYZED));
-	            }
-	            // every document has a defined 'mandant' field
-	            doc.add(new Field("mandant", Integer.toString(i%3), Field.Store.YES, Field.Index.NOT_ANALYZED));
-	            writer.addDocument (doc);
-	        }
-	        writer.optimize ();
-	        writer.close ();
-	    return indexStore;
-	}
+  // create an index for testing
+  private Directory getIndex()
+  throws IOException {
+          RAMDirectory indexStore = new RAMDirectory ();
+          IndexWriter writer = new IndexWriter (indexStore, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);
+          RandomGen random = new RandomGen(newRandom());
+          for (int i=0; i<INDEX_SIZE; ++i) { // don't decrease; if to low the problem doesn't show up
+          Document doc = new Document();
+              if((i%5)!=0) { // some documents must not have an entry in the first sort field
+                  doc.add (new Field("publicationDate_", random.getLuceneDate(), Field.Store.YES, Field.Index.NOT_ANALYZED));
+              }
+              if((i%7)==0) { // some documents to match the query (see below) 
+                  doc.add (new Field("content", "test", Field.Store.YES, Field.Index.ANALYZED));
+              }
+              // every document has a defined 'mandant' field
+              doc.add(new Field("mandant", Integer.toString(i%3), Field.Store.YES, Field.Index.NOT_ANALYZED));
+              writer.addDocument (doc);
+          }
+          writer.optimize ();
+          writer.close ();
+      return indexStore;
+  }
 
-	/**
-	 * Create index and query for test cases. 
-	 */
-	public void setUp() throws Exception {
+  /**
+   * Create index and query for test cases. 
+   */
+  @Override
+  public void setUp() throws Exception {
           super.setUp();
           index = getIndex();
           query = new TermQuery( new Term("content", "test"));
-	}
+  }
 
-	/**
-	 * Run the test using two CustomSearcher instances. 
-	 */
-	public void testFieldSortCustomSearcher() throws Exception {
-	  // log("Run testFieldSortCustomSearcher");
-		// define the sort criteria
-	    Sort custSort = new Sort(
-	            new SortField("publicationDate_", SortField.STRING), 
-	            SortField.FIELD_SCORE
-	    );
-	    Searcher searcher = new CustomSearcher (index, 2);
-	    // search and check hits
-		matchHits(searcher, custSort);
-	}
-	/**
-	 * Run the test using one CustomSearcher wrapped by a MultiSearcher. 
-	 */
-	public void testFieldSortSingleSearcher() throws Exception {
-	  // log("Run testFieldSortSingleSearcher");
-		// define the sort criteria
-	    Sort custSort = new Sort(
-	            new SortField("publicationDate_", SortField.STRING), 
-	            SortField.FIELD_SCORE
-	    );
-	    Searcher searcher = new MultiSearcher(new Searcher[] { new CustomSearcher(
+  /**
+   * Run the test using two CustomSearcher instances. 
+   */
+  public void testFieldSortCustomSearcher() throws Exception {
+    // log("Run testFieldSortCustomSearcher");
+    // define the sort criteria
+      Sort custSort = new Sort(
+              new SortField("publicationDate_", SortField.STRING), 
+              SortField.FIELD_SCORE
+      );
+      Searcher searcher = new CustomSearcher (index, 2);
+      // search and check hits
+    matchHits(searcher, custSort);
+  }
+  /**
+   * Run the test using one CustomSearcher wrapped by a MultiSearcher. 
+   */
+  public void testFieldSortSingleSearcher() throws Exception {
+    // log("Run testFieldSortSingleSearcher");
+    // define the sort criteria
+      Sort custSort = new Sort(
+              new SortField("publicationDate_", SortField.STRING), 
+              SortField.FIELD_SCORE
+      );
+      Searcher searcher = new MultiSearcher(new Searcher[] { new CustomSearcher(
         index, 2) });
-	    // search and check hits
-		matchHits(searcher, custSort);
-	}
-	/**
-	 * Run the test using two CustomSearcher instances. 
-	 */
-	public void testFieldSortMultiCustomSearcher() throws Exception {
-	  // log("Run testFieldSortMultiCustomSearcher");
-		// define the sort criteria
-	    Sort custSort = new Sort(
-	            new SortField("publicationDate_", SortField.STRING), 
-	            SortField.FIELD_SCORE
-	    );
-	    Searcher searcher = 
-	        new MultiSearcher(new Searchable[] {
-	                new CustomSearcher (index, 0),
-	                new CustomSearcher (index, 2)});
-	    // search and check hits
-		matchHits(searcher, custSort);
-	}
+      // search and check hits
+    matchHits(searcher, custSort);
+  }
+  /**
+   * Run the test using two CustomSearcher instances. 
+   */
+  public void testFieldSortMultiCustomSearcher() throws Exception {
+    // log("Run testFieldSortMultiCustomSearcher");
+    // define the sort criteria
+      Sort custSort = new Sort(
+              new SortField("publicationDate_", SortField.STRING), 
+              SortField.FIELD_SCORE
+      );
+      Searcher searcher = 
+          new MultiSearcher(new Searchable[] {
+                  new CustomSearcher (index, 0),
+                  new CustomSearcher (index, 2)});
+      // search and check hits
+    matchHits(searcher, custSort);
+  }
 
 
-	// make sure the documents returned by the search match the expected list
-	private void matchHits (Searcher searcher, Sort sort)
-	throws IOException {
-	    // make a query without sorting first
+  // make sure the documents returned by the search match the expected list
+  private void matchHits (Searcher searcher, Sort sort)
+  throws IOException {
+      // make a query without sorting first
     ScoreDoc[] hitsByRank = searcher.search(query, null, 1000).scoreDocs;
-		checkHits(hitsByRank, "Sort by rank: "); // check for duplicates
+    checkHits(hitsByRank, "Sort by rank: "); // check for duplicates
         Map resultMap = new TreeMap();
         // store hits in TreeMap - TreeMap does not allow duplicates; existing entries are silently overwritten
         for(int hitid=0;hitid<hitsByRank.length; ++hitid) {
@@ -162,8 +163,8 @@
         
         // now make a query using the sort criteria
     ScoreDoc[] resultSort = searcher.search (query, null, 1000, sort).scoreDocs;
-		checkHits(resultSort, "Sort by custom criteria: "); // check for duplicates
-		
+    checkHits(resultSort, "Sort by custom criteria: "); // check for duplicates
+    
         // besides the sorting both sets of hits must be identical
         for(int hitid=0;hitid<resultSort.length; ++hitid) {
             Integer idHitDate = Integer.valueOf(resultSort[hitid].doc); // document ID from sorted search
@@ -181,12 +182,12 @@
         log("Couldn't match "+resultMap.size()+" hits.");
         }
         assertEquals(resultMap.size(), 0);
-	}
+  }
 
-	/**
-	 * Check the hits for duplicates.
-	 * @param hits
-	 */
+  /**
+   * Check the hits for duplicates.
+   * @param hits
+   */
     private void checkHits(ScoreDoc[] hits, String prefix) {
         if(hits!=null) {
             Map idMap = new TreeMap();
@@ -235,6 +236,7 @@
         /* (non-Javadoc)
          * @see org.apache.lucene.search.Searchable#search(org.apache.lucene.search.Query, org.apache.lucene.search.Filter, int, org.apache.lucene.search.Sort)
          */
+        @Override
         public TopFieldDocs search(Query query, Filter filter, int nDocs,
                 Sort sort) throws IOException {
             BooleanQuery bq = new BooleanQuery();
@@ -245,6 +247,7 @@
         /* (non-Javadoc)
          * @see org.apache.lucene.search.Searchable#search(org.apache.lucene.search.Query, org.apache.lucene.search.Filter, int)
          */
+        @Override
         public TopDocs search(Query query, Filter filter, int nDocs)
         throws IOException {
             BooleanQuery bq = new BooleanQuery();
Index: src/test/org/apache/lucene/search/TestDateSort.java
===================================================================
--- src/test/org/apache/lucene/search/TestDateSort.java	(revision 832941)
+++ src/test/org/apache/lucene/search/TestDateSort.java	(working copy)
@@ -46,6 +46,7 @@
 
   private static Directory directory;
 
+  @Override
   public void setUp() throws Exception {
     super.setUp();
     // Create an index writer.
Index: src/test/org/apache/lucene/search/TestDisjunctionMaxQuery.java
===================================================================
--- src/test/org/apache/lucene/search/TestDisjunctionMaxQuery.java	(revision 832941)
+++ src/test/org/apache/lucene/search/TestDisjunctionMaxQuery.java	(working copy)
@@ -53,13 +53,16 @@
 
         public TestSimilarity() {
         }
+        @Override
         public float tf(float freq) {
             if (freq > 0.0f) return 1.0f;
             else return 0.0f;
         }
+        @Override
         public float lengthNorm(String fieldName, int numTerms) {
             return 1.0f;
         }
+        @Override
         public float idf(int docFreq, int numDocs) {
             return 1.0f;
         }
@@ -70,6 +73,7 @@
     public IndexReader r;
     public IndexSearcher s;
 
+    @Override
     public void setUp() throws Exception {
         super.setUp();
 
Index: src/test/org/apache/lucene/search/TestDocBoost.java
===================================================================
--- src/test/org/apache/lucene/search/TestDocBoost.java	(revision 832941)
+++ src/test/org/apache/lucene/search/TestDocBoost.java	(working copy)
@@ -71,15 +71,19 @@
        new Collector() {
          private int base = 0;
          private Scorer scorer;
+         @Override
          public void setScorer(Scorer scorer) throws IOException {
           this.scorer = scorer;
          }
+         @Override
          public final void collect(int doc) throws IOException {
            scores[doc + base] = scorer.score();
          }
+         @Override
          public void setNextReader(IndexReader reader, int docBase) {
            base = docBase;
          }
+         @Override
          public boolean acceptsDocsOutOfOrder() {
            return true;
          }
Index: src/test/org/apache/lucene/search/TestDocIdSet.java
===================================================================
--- src/test/org/apache/lucene/search/TestDocIdSet.java	(revision 832941)
+++ src/test/org/apache/lucene/search/TestDocIdSet.java	(working copy)
@@ -48,6 +48,7 @@
 
             int docid = -1;
             
+            @Override
             public int docID() {
               return docid;
             }
@@ -116,6 +117,7 @@
     
     // Now search w/ a Filter which returns a null DocIdSet
     Filter f = new Filter() {
+      @Override
       public DocIdSet getDocIdSet(IndexReader reader) throws IOException {
         return null;
       }
Index: src/test/org/apache/lucene/search/TestElevationComparator.java
===================================================================
--- src/test/org/apache/lucene/search/TestElevationComparator.java	(revision 832941)
+++ src/test/org/apache/lucene/search/TestElevationComparator.java	(working copy)
@@ -130,19 +130,22 @@
 
   public ElevationComparatorSource(final Map/*<String, Integer>*/ boosts) {
    this.priority = boosts;
- }
+  }
 
- public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {
+  @Override
+  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {
    return new FieldComparator() {
 
      FieldCache.StringIndex idIndex;
      private final int[] values = new int[numHits];
      int bottomVal;
 
+     @Override
      public int compare(int slot1, int slot2) {
        return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern
      }
 
+     @Override
      public void setBottom(int slot) {
        bottomVal = values[slot];
      }
@@ -153,18 +156,22 @@
        return prio == null ? 0 : prio.intValue();
      }
 
+     @Override
      public int compareBottom(int doc) throws IOException {
        return docVal(doc) - bottomVal;
      }
 
+     @Override
      public void copy(int slot, int doc) throws IOException {
        values[slot] = docVal(doc);
      }
 
+     @Override
      public void setNextReader(IndexReader reader, int docBase) throws IOException {
        idIndex = FieldCache.DEFAULT.getStringIndex(reader, fieldname);
      }
 
+     @Override
      public Comparable value(int slot) {
        return Integer.valueOf(values[slot]);
      }
Index: src/test/org/apache/lucene/search/TestExplanations.java
===================================================================
--- src/test/org/apache/lucene/search/TestExplanations.java	(revision 832941)
+++ src/test/org/apache/lucene/search/TestExplanations.java	(working copy)
@@ -54,11 +54,13 @@
   public static final QueryParser qp =
     new QueryParser(Version.LUCENE_CURRENT, FIELD, new WhitespaceAnalyzer());
 
+  @Override
   public void tearDown() throws Exception {
     super.tearDown();
     searcher.close();
   }
   
+  @Override
   public void setUp() throws Exception {
     super.setUp();
     RAMDirectory directory = new RAMDirectory();
Index: src/test/org/apache/lucene/search/TestFieldCache.java
===================================================================
--- src/test/org/apache/lucene/search/TestFieldCache.java	(revision 832941)
+++ src/test/org/apache/lucene/search/TestFieldCache.java	(working copy)
@@ -36,6 +36,7 @@
     super(s);
   }
 
+  @Override
   protected void setUp() throws Exception {
     super.setUp();
     RAMDirectory directory = new RAMDirectory();
Index: src/test/org/apache/lucene/search/TestFilteredQuery.java
===================================================================
--- src/test/org/apache/lucene/search/TestFilteredQuery.java	(revision 832941)
+++ src/test/org/apache/lucene/search/TestFilteredQuery.java	(working copy)
@@ -45,6 +45,7 @@
   private Query query;
   private Filter filter;
 
+  @Override
   public void setUp() throws Exception {
     super.setUp();
     directory = new RAMDirectory();
@@ -81,6 +82,7 @@
   // must be static for serialization tests
   private static Filter newStaticFilterB() {
     return new Filter() {
+      @Override
       public DocIdSet getDocIdSet (IndexReader reader) {
         BitSet bitset = new BitSet(5);
         bitset.set (1);
@@ -90,6 +92,7 @@
     };
   }
 
+  @Override
   public void tearDown()
   throws Exception {
     searcher.close();
@@ -150,6 +153,7 @@
   // must be static for serialization tests 
   private static Filter newStaticFilterA() {
     return new Filter() {
+      @Override
       public DocIdSet getDocIdSet (IndexReader reader) {
         BitSet bitset = new BitSet(5);
         bitset.set(0, 5);
Index: src/test/org/apache/lucene/search/TestFilteredSearch.java
===================================================================
--- src/test/org/apache/lucene/search/TestFilteredSearch.java	(revision 832941)
+++ src/test/org/apache/lucene/search/TestFilteredSearch.java	(working copy)
@@ -84,6 +84,7 @@
       
     }
 
+    @Override
     public DocIdSet getDocIdSet(IndexReader reader) {
       return bits;
     }
Index: src/test/org/apache/lucene/search/TestMultiSearcher.java
===================================================================
--- src/test/org/apache/lucene/search/TestMultiSearcher.java	(revision 832941)
+++ src/test/org/apache/lucene/search/TestMultiSearcher.java	(working copy)
@@ -367,11 +367,17 @@
         
         Similarity customSimilarity = new DefaultSimilarity() {
             // overide all
+            @Override
             public float idf(int docFreq, int numDocs) { return 100.0f; }
+            @Override
             public float coord(int overlap, int maxOverlap) { return 1.0f; }
+            @Override
             public float lengthNorm(String fieldName, int numTokens) { return 1.0f; }
+            @Override
             public float queryNorm(float sumOfSquaredWeights) { return 1.0f; }
+            @Override
             public float sloppyFreq(int distance) { return 1.0f; }
+            @Override
             public float tf(float freq) { return 1.0f; }
         };
         
Index: src/test/org/apache/lucene/search/TestMultiSearcherRanking.java
===================================================================
--- src/test/org/apache/lucene/search/TestMultiSearcherRanking.java	(revision 832941)
+++ src/test/org/apache/lucene/search/TestMultiSearcherRanking.java	(working copy)
@@ -110,6 +110,7 @@
   /**
    * initializes multiSearcher and singleSearcher with the same document set
    */
+  @Override
   protected void setUp() throws Exception {
     super.setUp();
     // create MultiSearcher from two seperate searchers
Index: src/test/org/apache/lucene/search/TestMultiTermConstantScore.java
===================================================================
--- src/test/org/apache/lucene/search/TestMultiTermConstantScore.java	(revision 832941)
+++ src/test/org/apache/lucene/search/TestMultiTermConstantScore.java	(working copy)
@@ -56,6 +56,7 @@
     Assert.assertEquals(m, e, a);
   }
 
+  @Override
   public void setUp() throws Exception {
     super.setUp();
 
@@ -185,15 +186,19 @@
     search.search(q, null, new Collector() {
       private int base = 0;
       private Scorer scorer;
+      @Override
       public void setScorer(Scorer scorer) throws IOException {
         this.scorer = scorer;
       }
+      @Override
       public void collect(int doc) throws IOException {
         assertEquals("score for doc " + (doc + base) + " was not correct", 1.0f, scorer.score());
       }
+      @Override
       public void setNextReader(IndexReader reader, int docBase) {
         base = docBase;
       }
+      @Override
       public boolean acceptsDocsOutOfOrder() {
         return true;
       }
Index: src/test/org/apache/lucene/search/TestMultiThreadTermVectors.java
===================================================================
--- src/test/org/apache/lucene/search/TestMultiThreadTermVectors.java	(revision 832941)
+++ src/test/org/apache/lucene/search/TestMultiThreadTermVectors.java	(working copy)
@@ -37,6 +37,7 @@
     super(s);
   }
   
+  @Override
   public void setUp() throws Exception {
     super.setUp();
     IndexWriter writer
Index: src/test/org/apache/lucene/search/TestParallelMultiSearcher.java
===================================================================
--- src/test/org/apache/lucene/search/TestParallelMultiSearcher.java	(revision 832941)
+++ src/test/org/apache/lucene/search/TestParallelMultiSearcher.java	(working copy)
@@ -24,13 +24,14 @@
  */
 public class TestParallelMultiSearcher extends TestMultiSearcher {
 
-	public TestParallelMultiSearcher(String name) {
-		super(name);
-	}
+  public TestParallelMultiSearcher(String name) {
+    super(name);
+  }
 
-	protected MultiSearcher getMultiSearcherInstance(Searcher[] searchers)
-		throws IOException {
-		return new ParallelMultiSearcher(searchers);
-	}
+  @Override
+  protected MultiSearcher getMultiSearcherInstance(Searcher[] searchers)
+    throws IOException {
+    return new ParallelMultiSearcher(searchers);
+  }
 
 }
Index: src/test/org/apache/lucene/search/TestPhraseQuery.java
===================================================================
--- src/test/org/apache/lucene/search/TestPhraseQuery.java	(revision 832941)
+++ src/test/org/apache/lucene/search/TestPhraseQuery.java	(working copy)
@@ -44,14 +44,17 @@
   private PhraseQuery query;
   private RAMDirectory directory;
 
+  @Override
   public void setUp() throws Exception {
     super.setUp();
     directory = new RAMDirectory();
     Analyzer analyzer = new Analyzer() {
+      @Override
       public TokenStream tokenStream(String fieldName, Reader reader) {
         return new WhitespaceTokenizer(reader);
       }
 
+      @Override
       public int getPositionIncrementGap(String fieldName) {
         return 100;
       }
@@ -82,6 +85,7 @@
     query = new PhraseQuery();
   }
 
+  @Override
   public void tearDown() throws Exception {
     super.tearDown();
     searcher.close();
Index: src/test/org/apache/lucene/search/TestPositionIncrement.java
===================================================================
--- src/test/org/apache/lucene/search/TestPositionIncrement.java	(revision 832941)
+++ src/test/org/apache/lucene/search/TestPositionIncrement.java	(working copy)
@@ -63,6 +63,7 @@
 
   public void testSetPosition() throws Exception {
     Analyzer analyzer = new Analyzer() {
+      @Override
       public TokenStream tokenStream(String fieldName, Reader reader) {
         return new TokenStream() {
           private final String[] TOKENS = {"1", "2", "3", "4", "5"};
@@ -73,6 +74,7 @@
           TermAttribute termAtt = addAttribute(TermAttribute.class);
           OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);
           
+          @Override
           public boolean incrementToken() {
             if (i == TOKENS.length)
               return false;
@@ -227,6 +229,7 @@
     public StopWhitespaceAnalyzer(boolean enablePositionIncrements) {
       this.enablePositionIncrements = enablePositionIncrements;
     }
+    @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {
       TokenStream ts = a.tokenStream(fieldName,reader);
       return new StopFilter(enablePositionIncrements, ts, new CharArraySet(Collections.singleton("stop"), true));
@@ -316,6 +319,7 @@
 
 class TestPayloadAnalyzer extends Analyzer {
 
+  @Override
   public TokenStream tokenStream(String fieldName, Reader reader) {
     TokenStream result = new LowerCaseTokenizer(reader);
     return new PayloadFilter(result, fieldName);
@@ -343,6 +347,7 @@
     termAttr = input.addAttribute(TermAttribute.class);
   }
 
+  @Override
   public boolean incrementToken() throws IOException {
     if (input.incrementToken()) {
       payloadAttr.setPayload(new Payload(("pos: " + pos).getBytes()));
Index: src/test/org/apache/lucene/search/TestPrefixInBooleanQuery.java
===================================================================
--- src/test/org/apache/lucene/search/TestPrefixInBooleanQuery.java	(revision 832941)
+++ src/test/org/apache/lucene/search/TestPrefixInBooleanQuery.java	(working copy)
@@ -41,6 +41,7 @@
   private static final String FIELD = "name";
   private RAMDirectory directory = new RAMDirectory();
 
+  @Override
   protected void setUp() throws Exception {
     super.setUp();
     
Index: src/test/org/apache/lucene/search/TestScorerPerf.java
===================================================================
--- src/test/org/apache/lucene/search/TestScorerPerf.java	(revision 832941)
+++ src/test/org/apache/lucene/search/TestScorerPerf.java	(working copy)
@@ -101,8 +101,10 @@
     int sum=0;
     protected int docBase = 0;
 
+    @Override
     public void setScorer(Scorer scorer) throws IOException {}
     
+    @Override
     public void collect(int doc) {
       count++;
       sum += docBase + doc;  // use it to avoid any possibility of being optimized away
@@ -111,9 +113,11 @@
     public int getCount() { return count; }
     public int getSum() { return sum; }
 
+    @Override
     public void setNextReader(IndexReader reader, int base) {
       docBase = base;
     }
+    @Override
     public boolean acceptsDocsOutOfOrder() {
       return true;
     }
@@ -141,6 +145,7 @@
   BitSet addClause(BooleanQuery bq, BitSet result) {
     final BitSet rnd = sets[r.nextInt(sets.length)];
     Query q = new ConstantScoreQuery(new Filter() {
+      @Override
       public DocIdSet getDocIdSet(IndexReader reader) {
         return new DocIdBitSet(rnd);
       };
Index: src/test/org/apache/lucene/search/TestSetNorm.java
===================================================================
--- src/test/org/apache/lucene/search/TestSetNorm.java	(revision 832941)
+++ src/test/org/apache/lucene/search/TestSetNorm.java	(working copy)
@@ -67,15 +67,19 @@
        new Collector() {
          private int base = 0;
          private Scorer scorer;
+         @Override
          public void setScorer(Scorer scorer) throws IOException {
           this.scorer = scorer;
          }
+         @Override
          public final void collect(int doc) throws IOException {
            scores[doc + base] = scorer.score();
          }
+         @Override
          public void setNextReader(IndexReader reader, int docBase) {
            base = docBase;
          }
+         @Override
          public boolean acceptsDocsOutOfOrder() {
            return true;
          }
Index: src/test/org/apache/lucene/search/TestSimilarity.java
===================================================================
--- src/test/org/apache/lucene/search/TestSimilarity.java	(revision 832941)
+++ src/test/org/apache/lucene/search/TestSimilarity.java	(working copy)
@@ -88,14 +88,18 @@
 
     searcher.search(new TermQuery(b), new Collector() {
          private Scorer scorer;
-         public void setScorer(Scorer scorer) throws IOException {
+         @Override
+        public void setScorer(Scorer scorer) throws IOException {
            this.scorer = scorer; 
          }
-         public final void collect(int doc) throws IOException {
+         @Override
+        public final void collect(int doc) throws IOException {
            assertEquals(1.0f, scorer.score());
          }
-         public void setNextReader(IndexReader reader, int docBase) {}
-         public boolean acceptsDocsOutOfOrder() {
+         @Override
+        public void setNextReader(IndexReader reader, int docBase) {}
+         @Override
+        public boolean acceptsDocsOutOfOrder() {
            return true;
          }
        });
@@ -107,17 +111,21 @@
     searcher.search(bq, new Collector() {
          private int base = 0;
          private Scorer scorer;
-         public void setScorer(Scorer scorer) throws IOException {
+         @Override
+        public void setScorer(Scorer scorer) throws IOException {
            this.scorer = scorer; 
          }
-         public final void collect(int doc) throws IOException {
+         @Override
+        public final void collect(int doc) throws IOException {
            //System.out.println("Doc=" + doc + " score=" + score);
            assertEquals((float)doc+base+1, scorer.score());
          }
-         public void setNextReader(IndexReader reader, int docBase) {
+         @Override
+        public void setNextReader(IndexReader reader, int docBase) {
            base = docBase;
          }
-         public boolean acceptsDocsOutOfOrder() {
+         @Override
+        public boolean acceptsDocsOutOfOrder() {
            return true;
          }
        });
@@ -128,15 +136,19 @@
     //System.out.println(pq.toString("field"));
     searcher.search(pq,
        new Collector() {
-        private Scorer scorer;
-        public void setScorer(Scorer scorer) throws IOException {
+         private Scorer scorer;
+         @Override
+         public void setScorer(Scorer scorer) throws IOException {
           this.scorer = scorer; 
-        }
+         }
+         @Override
          public final void collect(int doc) throws IOException {
            //System.out.println("Doc=" + doc + " score=" + score);
            assertEquals(1.0f, scorer.score());
          }
+         @Override
          public void setNextReader(IndexReader reader, int docBase) {}
+         @Override
          public boolean acceptsDocsOutOfOrder() {
            return true;
          }
@@ -145,18 +157,22 @@
     pq.setSlop(2);
     //System.out.println(pq.toString("field"));
     searcher.search(pq, new Collector() {
-        private Scorer scorer;
-        public void setScorer(Scorer scorer) throws IOException {
-          this.scorer = scorer; 
-        }
-         public final void collect(int doc) throws IOException {
-           //System.out.println("Doc=" + doc + " score=" + score);
-           assertEquals(2.0f, scorer.score());
-         }
-         public void setNextReader(IndexReader reader, int docBase) {}
-         public boolean acceptsDocsOutOfOrder() {
-           return true;
-         }
-       });
+      private Scorer scorer;
+      @Override
+      public void setScorer(Scorer scorer) throws IOException {
+        this.scorer = scorer; 
+      }
+      @Override
+      public final void collect(int doc) throws IOException {
+        //System.out.println("Doc=" + doc + " score=" + score);
+        assertEquals(2.0f, scorer.score());
+      }
+      @Override
+      public void setNextReader(IndexReader reader, int docBase) {}
+      @Override
+      public boolean acceptsDocsOutOfOrder() {
+        return true;
+      }
+    });
   }
 }
Index: src/test/org/apache/lucene/search/TestSimpleExplanationsOfNonMatches.java
===================================================================
--- src/test/org/apache/lucene/search/TestSimpleExplanationsOfNonMatches.java	(revision 832941)
+++ src/test/org/apache/lucene/search/TestSimpleExplanationsOfNonMatches.java	(working copy)
@@ -48,6 +48,7 @@
    *
    * @see CheckHits#checkNoMatchExplanations
    */
+  @Override
   public void qtest(Query q, int[] expDocNrs) throws Exception {
     CheckHits.checkNoMatchExplanations(q, FIELD, searcher, expDocNrs);
   }
Index: src/test/org/apache/lucene/search/TestSort.java
===================================================================
--- src/test/org/apache/lucene/search/TestSort.java	(revision 832941)
+++ src/test/org/apache/lucene/search/TestSort.java	(working copy)
@@ -206,6 +206,7 @@
     return getIndex (false, false);
   }
 
+  @Override
   public void setUp() throws Exception {
     super.setUp();
     full = getFullIndex();
@@ -415,22 +416,27 @@
       slotValues = new int[numHits];
     }
 
+    @Override
     public void copy(int slot, int doc) {
       slotValues[slot] = docValues[doc];
     }
 
+    @Override
     public int compare(int slot1, int slot2) {
       return slotValues[slot1] - slotValues[slot2];
     }
 
+    @Override
     public int compareBottom(int doc) {
       return bottomValue - docValues[doc];
     }
 
+    @Override
     public void setBottom(int bottom) {
       bottomValue = slotValues[bottom];
     }
 
+    @Override
     public void setNextReader(IndexReader reader, int docBase) throws IOException {
       docValues = FieldCache.DEFAULT.getInts(reader, "parser", new FieldCache.IntParser() {
           public final int parseInt(final String val) {
@@ -439,12 +445,14 @@
         });
     }
 
+    @Override
     public Comparable value(int slot) {
       return Integer.valueOf(slotValues[slot]);
     }
   }
 
   static class MyFieldComparatorSource extends FieldComparatorSource {
+    @Override
     public FieldComparator newComparator(String fieldname, int numHits, int sortPos, boolean reversed) {
       return new MyFieldComparator(numHits);
     }
@@ -715,6 +723,7 @@
 
     // a filter that only allows through the first hit
     Filter filt = new Filter() {
+      @Override
       public DocIdSet getDocIdSet(IndexReader reader) throws IOException {
         BitSet bs = new BitSet(reader.maxDoc());
         bs.set(0, reader.maxDoc());
Index: src/test/org/apache/lucene/search/TestTermRangeQuery.java
===================================================================
--- src/test/org/apache/lucene/search/TestTermRangeQuery.java	(revision 832941)
+++ src/test/org/apache/lucene/search/TestTermRangeQuery.java	(working copy)
@@ -40,6 +40,7 @@
   private int docCount = 0;
   private RAMDirectory dir;
 
+  @Override
   public void setUp() throws Exception {
     super.setUp();
     dir = new RAMDirectory();
@@ -230,6 +231,7 @@
         termAtt = addAttribute(TermAttribute.class);
       }
 
+      @Override
       public boolean incrementToken() throws IOException {
         int count = input.read(buffer);
         if (done)
@@ -245,12 +247,14 @@
         }
       }
 
+      @Override
       public final void reset(Reader reader) throws IOException {
         super.reset(reader);
         done = false;
       }
     }
 
+    @Override
     public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {
       Tokenizer tokenizer = (Tokenizer) getPreviousTokenStream();
       if (tokenizer == null) {
@@ -261,6 +265,7 @@
       return tokenizer;
     }
 
+    @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {
       return new SingleCharTokenizer(reader);
     }
Index: src/test/org/apache/lucene/search/TestTermScorer.java
===================================================================
--- src/test/org/apache/lucene/search/TestTermScorer.java	(revision 832941)
+++ src/test/org/apache/lucene/search/TestTermScorer.java	(working copy)
@@ -45,6 +45,7 @@
         super(s);
     }
 
+    @Override
     protected void setUp() throws Exception {
         super.setUp();
         directory = new RAMDirectory();
@@ -82,10 +83,12 @@
         ts.score(new Collector() {
             private int base = 0;
             private Scorer scorer;
+            @Override
             public void setScorer(Scorer scorer) throws IOException {
               this.scorer = scorer; 
             }
 
+            @Override
             public void collect(int doc) throws IOException {
               float score = scorer.score();
               doc = doc + base;
@@ -94,9 +97,11 @@
               assertTrue("Doc: " + doc + " does not equal 0 or doc does not equal 5",
                             doc == 0 || doc == 5);
             }
+            @Override
             public void setNextReader(IndexReader reader, int docBase) {
               base = docBase;
             }
+            @Override
             public boolean acceptsDocsOutOfOrder() {
               return true;
             }
@@ -167,6 +172,7 @@
             this.score = score;
         }
 
+        @Override
         public String toString() {
             return "TestHit{" + "doc=" + doc + ", score=" + score + "}";
         }
Index: src/test/org/apache/lucene/search/TestTermVectors.java
===================================================================
--- src/test/org/apache/lucene/search/TestTermVectors.java	(revision 832941)
+++ src/test/org/apache/lucene/search/TestTermVectors.java	(working copy)
@@ -39,6 +39,7 @@
     super(s);
   }
 
+  @Override
   public void setUp() throws Exception {                  
     super.setUp();
     IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true,
Index: src/test/org/apache/lucene/search/TestThreadSafe.java
===================================================================
--- src/test/org/apache/lucene/search/TestThreadSafe.java	(revision 832941)
+++ src/test/org/apache/lucene/search/TestThreadSafe.java	(working copy)
@@ -49,6 +49,7 @@
       this.rand = rand;
     }
 
+    @Override
     public void run() {
       try {
         for (int i=0; i<iter; i++) {
Index: src/test/org/apache/lucene/search/TestTimeLimitingCollector.java
===================================================================
--- src/test/org/apache/lucene/search/TestTimeLimitingCollector.java	(revision 832941)
+++ src/test/org/apache/lucene/search/TestTimeLimitingCollector.java	(working copy)
@@ -61,6 +61,7 @@
   /**
    * initializes searcher with a document set
    */
+  @Override
   protected void setUp() throws Exception {
     super.setUp();
     final String docText[] = {
@@ -94,6 +95,7 @@
 
   }
 
+  @Override
   public void tearDown() throws Exception {
     searcher.close();
     super.tearDown();
@@ -269,6 +271,7 @@
     for( int i = 0; i < threadArray.length; ++i ) {
       final int num = i;
       threadArray[num] = new Thread() {
+          @Override
           public void run() {
             if (withTimeout) {
               doTestTimeout(true,true);
@@ -312,10 +315,12 @@
       return lastDocCollected;
     }
 
+    @Override
     public void setScorer(Scorer scorer) throws IOException {
       // scorer is not needed
     }
     
+    @Override
     public void collect(final int doc) throws IOException {
       int docId = doc + docBase;
       if( slowdown > 0 ) {
@@ -331,10 +336,12 @@
       lastDocCollected = docId;
     }
     
+    @Override
     public void setNextReader(IndexReader reader, int base) {
       docBase = base;
     }
     
+    @Override
     public boolean acceptsDocsOutOfOrder() {
       return false;
     }
Index: src/test/org/apache/lucene/search/TestTopDocsCollector.java
===================================================================
--- src/test/org/apache/lucene/search/TestTopDocsCollector.java	(revision 832941)
+++ src/test/org/apache/lucene/search/TestTopDocsCollector.java	(working copy)
@@ -39,6 +39,7 @@
       super(new HitQueue(size, false));
     }
     
+    @Override
     protected TopDocs newTopDocs(ScoreDoc[] results, int start) {
       if (results == null) {
         return EMPTY_TOPDOCS;
@@ -55,20 +56,24 @@
       return new TopDocs(totalHits, results, maxScore);
     }
     
+    @Override
     public void collect(int doc) throws IOException {
       ++totalHits;
       pq.insertWithOverflow(new ScoreDoc(doc + base, scores[idx++]));
     }
 
+    @Override
     public void setNextReader(IndexReader reader, int docBase)
         throws IOException {
       base = docBase;
     }
 
+    @Override
     public void setScorer(Scorer scorer) throws IOException {
       // Don't do anything. Assign scores in random
     }
     
+    @Override
     public boolean acceptsDocsOutOfOrder() {
       return true;
     }
@@ -98,6 +103,7 @@
     return tdc;
   }
   
+  @Override
   protected void setUp() throws Exception {
     super.setUp();
     
@@ -110,6 +116,7 @@
     writer.close();
   }
   
+  @Override
   protected void tearDown() throws Exception {
     dir.close();
     dir = null;
Index: src/test/org/apache/lucene/store/MockRAMDirectory.java
===================================================================
--- src/test/org/apache/lucene/store/MockRAMDirectory.java	(revision 832941)
+++ src/test/org/apache/lucene/store/MockRAMDirectory.java	(working copy)
@@ -77,6 +77,7 @@
     preventDoubleWrite = value;
   }
 
+  @Override
   public synchronized void sync(String name) throws IOException {
     maybeThrowDeterministicException();
     if (crashed)
@@ -170,6 +171,7 @@
     }
   }
 
+  @Override
   public synchronized void deleteFile(String name) throws IOException {
     deleteFile(name, false);
   }
@@ -191,6 +193,7 @@
     super.deleteFile(name);
   }
 
+  @Override
   public synchronized IndexOutput createOutput(String name) throws IOException {
     if (crashed)
       throw new IOException("cannot createOutput after crash");
@@ -220,6 +223,7 @@
     return new MockRAMOutputStream(this, file, name);
   }
 
+  @Override
   public synchronized IndexInput openInput(String name) throws IOException {
     RAMFile file = fileMap.get(name);
     if (file == null)
@@ -258,6 +262,7 @@
     return size;
   }
 
+  @Override
   public synchronized void close() {
     if (openFiles == null) {
       openFiles = new HashMap();
Index: src/test/org/apache/lucene/store/MockRAMInputStream.java
===================================================================
--- src/test/org/apache/lucene/store/MockRAMInputStream.java	(revision 832941)
+++ src/test/org/apache/lucene/store/MockRAMInputStream.java	(working copy)
@@ -37,6 +37,7 @@
     this.dir = dir;
   }
 
+  @Override
   public void close() {
     super.close();
     // Pending resolution on LUCENE-686 we may want to
@@ -58,6 +59,7 @@
     }
   }
 
+  @Override
   public Object clone() {
     MockRAMInputStream clone = (MockRAMInputStream) super.clone();
     clone.isClone = true;
Index: src/test/org/apache/lucene/store/MockRAMOutputStream.java
===================================================================
--- src/test/org/apache/lucene/store/MockRAMOutputStream.java	(revision 832941)
+++ src/test/org/apache/lucene/store/MockRAMOutputStream.java	(working copy)
@@ -40,6 +40,7 @@
     this.name = name;
   }
 
+  @Override
   public void close() throws IOException {
     super.close();
 
@@ -51,16 +52,19 @@
     }
   }
 
+  @Override
   public void flush() throws IOException {
     dir.maybeThrowDeterministicException();
     super.flush();
   }
 
+  @Override
   public void writeByte(byte b) throws IOException {
     singleByte[0] = b;
     writeBytes(singleByte, 0, 1);
   }
   
+  @Override
   public void writeBytes(byte[] b, int offset, int len) throws IOException {
     long freeSpace = dir.maxSize - dir.sizeInBytes();
     long realUsage = 0;
Index: src/test/org/apache/lucene/store/TestBufferedIndexInput.java
===================================================================
--- src/test/org/apache/lucene/store/TestBufferedIndexInput.java	(revision 832941)
+++ src/test/org/apache/lucene/store/TestBufferedIndexInput.java	(working copy)
@@ -176,31 +176,31 @@
    // reads up to the EOF will succeed. The EOF is determined by the
    // BufferedIndexInput's arbitrary length() value.
    public void testEOF() throws Exception {
-	   MyBufferedIndexInput input = new MyBufferedIndexInput(1024);
-	   // see that we can read all the bytes at one go:
-	   checkReadBytes(input, (int)input.length(), 0);  
-	   // go back and see that we can't read more than that, for small and
-	   // large overflows:
-	   int pos = (int)input.length()-10;
-	   input.seek(pos);
-	   checkReadBytes(input, 10, pos);  
-	   input.seek(pos);
-	   try {
-		   checkReadBytes(input, 11, pos);
+     MyBufferedIndexInput input = new MyBufferedIndexInput(1024);
+     // see that we can read all the bytes at one go:
+     checkReadBytes(input, (int)input.length(), 0);  
+     // go back and see that we can't read more than that, for small and
+     // large overflows:
+     int pos = (int)input.length()-10;
+     input.seek(pos);
+     checkReadBytes(input, 10, pos);  
+     input.seek(pos);
+     try {
+       checkReadBytes(input, 11, pos);
            fail("Block read past end of file");
        } catch (IOException e) {
            /* success */
        }
-	   input.seek(pos);
-	   try {
-		   checkReadBytes(input, 50, pos);
+     input.seek(pos);
+     try {
+       checkReadBytes(input, 50, pos);
            fail("Block read past end of file");
        } catch (IOException e) {
            /* success */
        }
-	   input.seek(pos);
-	   try {
-		   checkReadBytes(input, 100000, pos);
+     input.seek(pos);
+     try {
+       checkReadBytes(input, 100000, pos);
            fail("Block read past end of file");
        } catch (IOException e) {
            /* success */
@@ -210,35 +210,39 @@
     // byten emulates a file - byten(n) returns the n'th byte in that file.
     // MyBufferedIndexInput reads this "file".
     private static byte byten(long n){
-    	return (byte)(n*n%256);
+      return (byte)(n*n%256);
     }
     private static class MyBufferedIndexInput extends BufferedIndexInput {
-    	private long pos;
-    	private long len;
-    	public MyBufferedIndexInput(long len){
-    		this.len = len;
-    		this.pos = 0;
-    	}
-    	public MyBufferedIndexInput(){
-    		// an infinite file
-    		this(Long.MAX_VALUE);
-    	}
-		protected void readInternal(byte[] b, int offset, int length) throws IOException {
-			for(int i=offset; i<offset+length; i++)
-				b[i] = byten(pos++);
-		}
+      private long pos;
+      private long len;
+      public MyBufferedIndexInput(long len){
+        this.len = len;
+        this.pos = 0;
+      }
+      public MyBufferedIndexInput(){
+        // an infinite file
+        this(Long.MAX_VALUE);
+      }
+    @Override
+    protected void readInternal(byte[] b, int offset, int length) throws IOException {
+      for(int i=offset; i<offset+length; i++)
+        b[i] = byten(pos++);
+    }
 
-		protected void seekInternal(long pos) throws IOException {
-			this.pos = pos;
-		}
+    @Override
+    protected void seekInternal(long pos) throws IOException {
+      this.pos = pos;
+    }
 
-		public void close() throws IOException {
-		}
+    @Override
+    public void close() throws IOException {
+    }
 
-		public long length() {
-			return len;
-		}
+    @Override
+    public long length() {
+      return len;
     }
+    }
 
     public void testSetBufferSize() throws IOException {
       File indexDir = new File(System.getProperty("tempDir"), "testSetBufferSize");
@@ -300,6 +304,7 @@
         dir = new SimpleFSDirectory(path, null);
       }
 
+      @Override
       public IndexInput openInput(String name) throws IOException {
         return openInput(name, BufferedIndexInput.BUFFER_SIZE);
       }
@@ -316,6 +321,7 @@
         //System.out.println("tweak'd " + count + " buffer sizes");
       }
       
+      @Override
       public IndexInput openInput(String name, int bufferSize) throws IOException {
         // Make random changes to buffer size
         bufferSize = 1+(int) Math.abs(rand.nextInt() % 10);
@@ -324,40 +330,48 @@
         return f;
       }
 
+      @Override
       public IndexOutput createOutput(String name) throws IOException {
         return dir.createOutput(name);
       }
 
+      @Override
       public void close() throws IOException {
         dir.close();
       }
 
+      @Override
       public void deleteFile(String name)
         throws IOException
       {
         dir.deleteFile(name);
       }
+      @Override
       public void touchFile(String name)
         throws IOException
       {
         dir.touchFile(name);
       }
+      @Override
       public long fileModified(String name)
         throws IOException
       {
         return dir.fileModified(name);
       }
+      @Override
       public boolean fileExists(String name)
         throws IOException
       {
         return dir.fileExists(name);
       }
+      @Override
       public String[] listAll()
         throws IOException
       {
         return dir.listAll();
       }
 
+      @Override
       public long fileLength(String name) throws IOException {
         return dir.fileLength(name);
       }
Index: src/test/org/apache/lucene/store/TestHugeRamFile.java
===================================================================
--- src/test/org/apache/lucene/store/TestHugeRamFile.java	(revision 832941)
+++ src/test/org/apache/lucene/store/TestHugeRamFile.java	(working copy)
@@ -32,6 +32,7 @@
   private static class DenseRAMFile extends RAMFile {
     private long capacity = 0;
     private HashMap singleBuffers = new HashMap();
+    @Override
     byte[] newBuffer(int size) {
       capacity += size;
       if (capacity <= MAX_VALUE) {
Index: src/test/org/apache/lucene/store/TestLock.java
===================================================================
--- src/test/org/apache/lucene/store/TestLock.java	(revision 832941)
+++ src/test/org/apache/lucene/store/TestLock.java	(working copy)
@@ -38,13 +38,16 @@
     private class LockMock extends Lock {
         public int lockAttempts;
 
+        @Override
         public boolean obtain() {
             lockAttempts++;
             return false;
         }
+        @Override
         public void release() {
             // do nothing
         }
+        @Override
         public boolean isLocked() {
             return false;
         }
Index: src/test/org/apache/lucene/store/TestLockFactory.java
===================================================================
--- src/test/org/apache/lucene/store/TestLockFactory.java	(revision 832941)
+++ src/test/org/apache/lucene/store/TestLockFactory.java	(working copy)
@@ -242,6 +242,7 @@
             this.numIteration = numIteration;
             this.dir = dir;
         }
+        @Override
         public void run() {
             WhitespaceAnalyzer analyzer = new WhitespaceAnalyzer();
             IndexWriter writer = null;
@@ -299,6 +300,7 @@
             this.numIteration = numIteration;
             this.dir = dir;
         }
+        @Override
         public void run() {
             IndexSearcher searcher = null;
             Query query = new TermQuery(new Term("content", "aaa"));
@@ -342,11 +344,13 @@
         public Map locksCreated = Collections.synchronizedMap(new HashMap());
         public int makeLockCount = 0;
 
+        @Override
         public void setLockPrefix(String lockPrefix) {    
             super.setLockPrefix(lockPrefix);
             lockPrefixSet = true;
         }
 
+        @Override
         synchronized public Lock makeLock(String lockName) {
             Lock lock = new MockLock();
             locksCreated.put(lockName, lock);
@@ -354,18 +358,22 @@
             return lock;
         }
 
+        @Override
         public void clearLock(String specificLockName) {}
 
         public class MockLock extends Lock {
             public int lockAttempts;
 
+            @Override
             public boolean obtain() {
                 lockAttempts++;
                 return true;
             }
+            @Override
             public void release() {
                 // do nothing
             }
+            @Override
             public boolean isLocked() {
                 return false;
             }
Index: src/test/org/apache/lucene/store/TestRAMDirectory.java
===================================================================
--- src/test/org/apache/lucene/store/TestRAMDirectory.java	(revision 832941)
+++ src/test/org/apache/lucene/store/TestRAMDirectory.java	(working copy)
@@ -46,6 +46,7 @@
   private final int docsToAdd = 500;
   
   // setup the index
+  @Override
   public void setUp () throws Exception {
     super.setUp();
     String tempDir = System.getProperty("java.io.tmpdir");
@@ -114,6 +115,7 @@
     for (int i=0; i<numThreads; i++) {
       final int num = i;
       threads[i] = new Thread(){
+        @Override
         public void run() {
           for (int j=1; j<docsPerThread; j++) {
             Document doc = new Document();
@@ -153,6 +155,7 @@
     assertTrue("contains more then just header", headerSize < bos.size());
   } 
 
+  @Override
   public void tearDown() throws Exception {
     super.tearDown();
     // cleanup 
Index: src/test/org/apache/lucene/store/TestWindowsMMap.java
===================================================================
--- src/test/org/apache/lucene/store/TestWindowsMMap.java	(revision 832941)
+++ src/test/org/apache/lucene/store/TestWindowsMMap.java	(working copy)
@@ -30,60 +30,61 @@
 import org.apache.lucene.search.IndexSearcher;
 
 public class TestWindowsMMap extends LuceneTestCase {
-	
-	private final static String alphabet = "abcdefghijklmnopqrstuvwzyz";
-	private Random random;
-	
-	public void setUp() throws Exception {
-		super.setUp();
-		random = newRandom();
-	}
-	
-	private String randomToken() {
-		int tl = 1 + random.nextInt(7);
-		StringBuilder sb = new StringBuilder();
-		for(int cx = 0; cx < tl; cx ++) {
-			int c = random.nextInt(25);
-			sb.append(alphabet.substring(c, c+1));
-		}
-		return sb.toString();
-	}
-	
-	private String randomField() {
-		int fl = 1 + random.nextInt(3);
-		StringBuilder fb = new StringBuilder();
-		for(int fx = 0; fx < fl; fx ++) {
-			fb.append(randomToken());
-			fb.append(" ");
-		}
-		return fb.toString();
-	}
-	
-	private final static String storePathname = 
+  
+  private final static String alphabet = "abcdefghijklmnopqrstuvwzyz";
+  private Random random;
+  
+  @Override
+  public void setUp() throws Exception {
+    super.setUp();
+    random = newRandom();
+  }
+  
+  private String randomToken() {
+    int tl = 1 + random.nextInt(7);
+    StringBuilder sb = new StringBuilder();
+    for(int cx = 0; cx < tl; cx ++) {
+      int c = random.nextInt(25);
+      sb.append(alphabet.substring(c, c+1));
+    }
+    return sb.toString();
+  }
+  
+  private String randomField() {
+    int fl = 1 + random.nextInt(3);
+    StringBuilder fb = new StringBuilder();
+    for(int fx = 0; fx < fl; fx ++) {
+      fb.append(randomToken());
+      fb.append(" ");
+    }
+    return fb.toString();
+  }
+  
+  private final static String storePathname = 
     new File(System.getProperty("tempDir"),"testLuceneMmap").getAbsolutePath();
 
-	public void testMmapIndex() throws Exception {
-		FSDirectory storeDirectory;
-		storeDirectory = new MMapDirectory(new File(storePathname), null);
+  public void testMmapIndex() throws Exception {
+    FSDirectory storeDirectory;
+    storeDirectory = new MMapDirectory(new File(storePathname), null);
 
-		// plan to add a set of useful stopwords, consider changing some of the
-		// interior filters.
-		StandardAnalyzer analyzer = new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT, Collections.emptySet());
-		// TODO: something about lock timeouts and leftover locks.
-		IndexWriter writer = new IndexWriter(storeDirectory, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);
-		IndexSearcher searcher = new IndexSearcher(storeDirectory, true);
-		
-		for(int dx = 0; dx < 1000; dx ++) {
-			String f = randomField();
-			Document doc = new Document();
-			doc.add(new Field("data", f, Field.Store.YES, Field.Index.ANALYZED));	
-			writer.addDocument(doc);
-		}
-		
-		searcher.close();
-		writer.close();
+    // plan to add a set of useful stopwords, consider changing some of the
+    // interior filters.
+    StandardAnalyzer analyzer = new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT, Collections.emptySet());
+    // TODO: something about lock timeouts and leftover locks.
+    IndexWriter writer = new IndexWriter(storeDirectory, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);
+    IndexSearcher searcher = new IndexSearcher(storeDirectory, true);
+    
+    for(int dx = 0; dx < 1000; dx ++) {
+      String f = randomField();
+      Document doc = new Document();
+      doc.add(new Field("data", f, Field.Store.YES, Field.Index.ANALYZED));	
+      writer.addDocument(doc);
+    }
+    
+    searcher.close();
+    writer.close();
                 rmDir(new File(storePathname));
-	}
+  }
 
         private void rmDir(File dir) {
           File[] files = dir.listFiles();
Index: src/test/org/apache/lucene/TestMergeSchedulerExternal.java
===================================================================
--- src/test/org/apache/lucene/TestMergeSchedulerExternal.java	(revision 832941)
+++ src/test/org/apache/lucene/TestMergeSchedulerExternal.java	(working copy)
@@ -55,6 +55,7 @@
       }
     }
 
+    @Override
     protected MergeThread getMergeThread(IndexWriter writer, MergePolicy.OneMerge merge) throws IOException {
       MergeThread thread = new MyMergeThread(writer, merge);
       thread.setThreadPriority(getMergeThreadPriority());
@@ -63,10 +64,12 @@
       return thread;
     }
 
+    @Override
     protected void handleMergeException(Throwable t) {
       excCalled = true;
     }
 
+    @Override
     protected void doMerge(MergePolicy.OneMerge merge) throws IOException {
       mergeCalled = true;
       super.doMerge(merge);
@@ -74,6 +77,7 @@
   }
 
   private static class FailOnlyOnMerge extends MockRAMDirectory.Failure {
+    @Override
     public void eval(MockRAMDirectory dir)  throws IOException {
       StackTraceElement[] trace = new Exception().getStackTrace();
       for (int i = 0; i < trace.length; i++) {
Index: src/test/org/apache/lucene/TestSnapshotDeletionPolicy.java
===================================================================
--- src/test/org/apache/lucene/TestSnapshotDeletionPolicy.java	(revision 832941)
+++ src/test/org/apache/lucene/TestSnapshotDeletionPolicy.java	(working copy)
@@ -118,6 +118,7 @@
     writer.setMaxBufferedDocs(2);
 
     final Thread t = new Thread() {
+        @Override
         public void run() {
           Document doc = new Document();
           doc.add(new Field("content", "aaa", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));
Index: src/test/org/apache/lucene/util/LuceneTestCase.java
===================================================================
--- src/test/org/apache/lucene/util/LuceneTestCase.java	(revision 832941)
+++ src/test/org/apache/lucene/util/LuceneTestCase.java	(working copy)
@@ -58,6 +58,7 @@
     super(name);
   }
 
+  @Override
   protected void setUp() throws Exception {
     super.setUp();
     ConcurrentMergeScheduler.setTestMode();
@@ -81,6 +82,7 @@
     return getClass().getName() + "." + getName();
   }
 
+  @Override
   protected void tearDown() throws Exception {
     try {
       // this isn't as useful as calling directly from the scope where the 
Index: src/test/org/apache/lucene/util/TestCloseableThreadLocal.java
===================================================================
--- src/test/org/apache/lucene/util/TestCloseableThreadLocal.java	(revision 832941)
+++ src/test/org/apache/lucene/util/TestCloseableThreadLocal.java	(working copy)
@@ -43,6 +43,7 @@
   }
 
   public class InitValueThreadLocal extends CloseableThreadLocal {
+    @Override
     protected Object initialValue() {
       return TEST_VALUE;
     } 
Index: src/test/org/apache/lucene/util/TestFieldCacheSanityChecker.java
===================================================================
--- src/test/org/apache/lucene/util/TestFieldCacheSanityChecker.java	(revision 832941)
+++ src/test/org/apache/lucene/util/TestFieldCacheSanityChecker.java	(working copy)
@@ -38,6 +38,7 @@
 
   private static final int NUM_DOCS = 1000;
 
+  @Override
   protected void setUp() throws Exception {
     super.setUp();
 
@@ -76,6 +77,7 @@
     readerX = new MultiReader(new IndexReader[] { readerA, readerB });
   }
 
+  @Override
   public void tearDown() throws Exception {
     super.tearDown();
     readerA.close();
Index: src/test/org/apache/lucene/util/TestPriorityQueue.java
===================================================================
--- src/test/org/apache/lucene/util/TestPriorityQueue.java	(revision 832941)
+++ src/test/org/apache/lucene/util/TestPriorityQueue.java	(working copy)
@@ -30,6 +30,7 @@
             initialize(count);
         }
 
+        @Override
         protected boolean lessThan(Integer a, Integer b) {
             return (a < b);
         }
Index: src/test/org/apache/lucene/util/TestStringIntern.java
===================================================================
--- src/test/org/apache/lucene/util/TestStringIntern.java	(revision 832941)
+++ src/test/org/apache/lucene/util/TestStringIntern.java	(working copy)
@@ -57,6 +57,7 @@
     for (int i=0; i<nThreads; i++) {
       final int seed = i;
       threads[i] = new Thread() {
+        @Override
         public void run() {
           Random rand = new Random(seed);
           String[] myInterned = new String[testStrings.length];
