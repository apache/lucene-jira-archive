Index: src/demo/org/apache/lucene/demo/html/ParserThread.java
===================================================================
--- src/demo/org/apache/lucene/demo/html/ParserThread.java	(revision 833861)
+++ src/demo/org/apache/lucene/demo/html/ParserThread.java	(working copy)
@@ -26,6 +26,7 @@
     parser = p;
   }
 
+  @Override
   public void run() {				  // convert pipeOut to pipeIn
     try {
       try {					  // parse document to pipeOut
Index: src/demo/org/apache/lucene/demo/SearchFiles.java
===================================================================
--- src/demo/org/apache/lucene/demo/SearchFiles.java	(revision 833861)
+++ src/demo/org/apache/lucene/demo/SearchFiles.java	(working copy)
@@ -56,6 +56,7 @@
       this.field = field;
     }
 
+    @Override
     public byte[] norms(String field) throws IOException {
       return in.norms(this.field);
     }
@@ -176,19 +177,23 @@
       private int docBase;
       
       // simply print docId and score of every matching document
+      @Override
       public void collect(int doc) throws IOException {
         System.out.println("doc=" + doc + docBase + " score=" + scorer.score());
       }
 
+      @Override
       public boolean acceptsDocsOutOfOrder() {
         return true;
       }
 
+      @Override
       public void setNextReader(IndexReader reader, int docBase)
           throws IOException {
         this.docBase = docBase;
       }
 
+      @Override
       public void setScorer(Scorer scorer) throws IOException {
         this.scorer = scorer;
       }
Index: contrib/snowball/src/test/org/apache/lucene/analysis/snowball/TestSnowball.java
===================================================================
--- contrib/snowball/src/test/org/apache/lucene/analysis/snowball/TestSnowball.java	(revision 833861)
+++ contrib/snowball/src/test/org/apache/lucene/analysis/snowball/TestSnowball.java	(working copy)
@@ -57,6 +57,7 @@
       super(Version.LUCENE_CURRENT, name);
     }
     
+    @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {
       return new WhitespaceTokenizer(reader);
     }
@@ -106,6 +107,7 @@
       flagsAtt = addAttribute(FlagsAttribute.class);
     }
     
+    @Override
     public boolean incrementToken() {
       termAtt.setTermBuffer("accents");
       offsetAtt.setOffset(2, 7);
Index: contrib/snowball/src/java/org/apache/lucene/analysis/snowball/SnowballAnalyzer.java
===================================================================
--- contrib/snowball/src/java/org/apache/lucene/analysis/snowball/SnowballAnalyzer.java	(revision 833861)
+++ contrib/snowball/src/java/org/apache/lucene/analysis/snowball/SnowballAnalyzer.java	(working copy)
@@ -56,6 +56,7 @@
   /** Constructs a {@link StandardTokenizer} filtered by a {@link
       StandardFilter}, a {@link LowerCaseFilter}, a {@link StopFilter},
       and a {@link SnowballFilter} */
+  @Override
   public TokenStream tokenStream(String fieldName, Reader reader) {
     TokenStream result = new StandardTokenizer(matchVersion, reader);
     result = new StandardFilter(result);
@@ -75,6 +76,7 @@
   /** Returns a (possibly reused) {@link StandardTokenizer} filtered by a 
    * {@link StandardFilter}, a {@link LowerCaseFilter}, 
    * a {@link StopFilter}, and a {@link SnowballFilter} */
+  @Override
   public TokenStream reusableTokenStream(String fieldName, Reader reader)
       throws IOException {
     if (overridesTokenStreamMethod) {
Index: contrib/snowball/src/java/org/apache/lucene/analysis/snowball/SnowballFilter.java
===================================================================
--- contrib/snowball/src/java/org/apache/lucene/analysis/snowball/SnowballFilter.java	(revision 833861)
+++ contrib/snowball/src/java/org/apache/lucene/analysis/snowball/SnowballFilter.java	(working copy)
@@ -64,6 +64,7 @@
   }
 
   /** Returns the next input Token, after being stemmed */
+  @Override
   public final boolean incrementToken() throws IOException {
     if (input.incrementToken()) {
       String originalTerm = termAtt.term();
Index: contrib/surround/src/test/org/apache/lucene/queryParser/surround/query/BooleanQueryTst.java
===================================================================
--- contrib/surround/src/test/org/apache/lucene/queryParser/surround/query/BooleanQueryTst.java	(revision 833861)
+++ contrib/surround/src/test/org/apache/lucene/queryParser/surround/query/BooleanQueryTst.java	(working copy)
@@ -67,18 +67,22 @@
       encountered = new boolean[expectedDocNrs.length];
     }
 
+    @Override
     public void setScorer(Scorer scorer) throws IOException {
       this.scorer = scorer;
     }
 
+    @Override
     public boolean acceptsDocsOutOfOrder() {
       return true;
     }
 
+    @Override
     public void setNextReader(IndexReader reader, int docBase) throws IOException {
       this.docBase = docBase;
     }
     
+    @Override
     public void collect(int docNr) throws IOException {
       float score = scorer.score();
       docNr += docBase;
Index: contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/ComposedQuery.java
===================================================================
--- contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/ComposedQuery.java	(revision 833861)
+++ contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/ComposedQuery.java	(working copy)
@@ -56,6 +56,7 @@
     return luceneSubQueries;
   }
 
+  @Override
   public String toString() {
     StringBuilder r = new StringBuilder();
     if (isOperatorInfix()) {
@@ -103,6 +104,7 @@
   }
   
   
+  @Override
   public boolean isFieldsSubQueryAcceptable() {
     /* at least one subquery should be acceptable */
     Iterator sqi = getSubQueriesIterator();
Index: contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/OrQuery.java
===================================================================
--- contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/OrQuery.java	(revision 833861)
+++ contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/OrQuery.java	(working copy)
@@ -28,6 +28,7 @@
     super(queries, infix, opName);
   }
   
+  @Override
   public Query makeLuceneQueryFieldNoBoost(String fieldName, BasicQueryFactory qf) {
     return SrndBooleanQuery.makeBooleanQuery(
       /* subqueries can be individually boosted */
Index: contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SrndTruncQuery.java
===================================================================
--- contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SrndTruncQuery.java	(revision 833861)
+++ contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SrndTruncQuery.java	(working copy)
@@ -45,6 +45,7 @@
   
   public String getTruncated() {return truncated;}
   
+  @Override
   public String toStringUnquoted() {return getTruncated();}
 
   
@@ -76,6 +77,7 @@
     pattern = Pattern.compile(re.toString());
   }
   
+  @Override
   public void visitMatchingTerms(
     IndexReader reader,
     String fieldName,
Index: contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SrndPrefixQuery.java
===================================================================
--- contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SrndPrefixQuery.java	(revision 833861)
+++ contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SrndPrefixQuery.java	(working copy)
@@ -40,10 +40,13 @@
     return new Term(fieldName, getPrefix());
   }
   
+  @Override
   public String toStringUnquoted() {return getPrefix();}
   
+  @Override
   protected void suffixToString(StringBuilder r) {r.append(getSuffixOperator());}
   
+  @Override
   public void visitMatchingTerms(
     IndexReader reader,
     String fieldName,
Index: contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/DistanceQuery.java
===================================================================
--- contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/DistanceQuery.java	(revision 833861)
+++ contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/DistanceQuery.java	(working copy)
@@ -71,13 +71,16 @@
     sncf.addSpanNearQuery(snq);
   }
 
+  @Override
   public Query makeLuceneQueryFieldNoBoost(final String fieldName, final BasicQueryFactory qf) {
     return new Query () {
       
+      @Override
       public String toString(String fn) {
         return getClass().toString() + " " + fieldName + " (" + fn + "?)";
       }
       
+      @Override
       public Query rewrite(IndexReader reader) throws IOException {
         return getSpanNearQuery(reader, fieldName, getBoost(), qf);
       }
Index: contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SimpleTerm.java
===================================================================
--- contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SimpleTerm.java	(revision 833861)
+++ contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SimpleTerm.java	(working copy)
@@ -46,6 +46,7 @@
   
   protected void suffixToString(StringBuilder r) {;} /* override for prefix query */
   
+  @Override
   public String toString() {
     StringBuilder r = new StringBuilder();
     if (isQuoted()) {
@@ -72,12 +73,15 @@
   public String distanceSubQueryNotAllowed() {return null;}
 
   
+  @Override
   public Query makeLuceneQueryFieldNoBoost(final String fieldName, final BasicQueryFactory qf) {
     return new Query() {
+      @Override
       public String toString(String fn) {
         return getClass().toString() + " " + fieldName + " (" + fn + "?)";
       }
       
+      @Override
       public Query rewrite(IndexReader reader) throws IOException {
         final List luceneSubQueries = new ArrayList();
         visitMatchingTerms( reader, fieldName,
Index: contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SrndTermQuery.java
===================================================================
--- contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SrndTermQuery.java	(revision 833861)
+++ contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SrndTermQuery.java	(working copy)
@@ -36,8 +36,10 @@
     return new Term(fieldName, getTermText());
   }
   
+  @Override
   public String toStringUnquoted() {return getTermText();}
   
+  @Override
   public void visitMatchingTerms(
     IndexReader reader,
     String fieldName,
Index: contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/NotQuery.java
===================================================================
--- contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/NotQuery.java	(revision 833861)
+++ contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/NotQuery.java	(working copy)
@@ -24,6 +24,7 @@
 public class NotQuery extends ComposedQuery { 
   public NotQuery(List queries, String opName) { super(queries, true /* infix */, opName); }
   
+  @Override
   public Query makeLuceneQueryFieldNoBoost(String fieldName, BasicQueryFactory qf) {
     List luceneSubQueries = makeLuceneSubQueriesField(fieldName, qf);
     BooleanQuery bq = new BooleanQuery();
Index: contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/AndQuery.java
===================================================================
--- contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/AndQuery.java	(revision 833861)
+++ contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/AndQuery.java	(working copy)
@@ -26,6 +26,7 @@
     super(queries, inf, opName);
   }
   
+  @Override
   public Query makeLuceneQueryFieldNoBoost(String fieldName, BasicQueryFactory qf) {
     return SrndBooleanQuery.makeBooleanQuery( /* subqueries can be individually boosted */
       makeLuceneSubQueriesField(fieldName, qf), BooleanClause.Occur.MUST);
Index: contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SrndQuery.java
===================================================================
--- contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SrndQuery.java	(revision 833861)
+++ contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SrndQuery.java	(working copy)
@@ -53,10 +53,12 @@
   
   public abstract Query makeLuceneQueryFieldNoBoost(String fieldName, BasicQueryFactory qf);
   
+  @Override
   public abstract String toString();
   
   public boolean isFieldsSubQueryAcceptable() {return true;}
     
+  @Override
   public Object clone() {
     try {
       return super.clone();
@@ -67,12 +69,15 @@
   
 /* An empty Lucene query */
   public final static Query theEmptyLcnQuery = new BooleanQuery() { /* no changes allowed */
+    @Override
     public void setBoost(float boost) {
       throw new UnsupportedOperationException();
     }
+    @Override
     public void add(BooleanClause clause) {
       throw new UnsupportedOperationException();
     }
+    @Override
     public void add(Query query, BooleanClause.Occur occur) {
       throw new UnsupportedOperationException();
     }
Index: contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/FieldsQuery.java
===================================================================
--- contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/FieldsQuery.java	(revision 833861)
+++ contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/FieldsQuery.java	(working copy)
@@ -41,6 +41,7 @@
     this.fieldOp = fieldOp;
   }
   
+  @Override
   public boolean isFieldsSubQueryAcceptable() {
     return false;
   }
@@ -65,6 +66,7 @@
     }
   }
 
+  @Override
   public Query makeLuceneQueryFieldNoBoost(String fieldName, BasicQueryFactory qf) {
     return makeLuceneQueryNoBoost(qf); /* use this.fieldNames instead of fieldName */
   }
@@ -74,6 +76,7 @@
 
   public char getFieldOperator() { return fieldOp;}
   
+  @Override
   public String toString() {
     StringBuilder r = new StringBuilder();
     r.append("(");
Index: contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper.java
===================================================================
--- contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper.java	(revision 833861)
+++ contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper.java	(working copy)
@@ -350,6 +350,7 @@
     public AnalyzerReturningNull() {
     }
 
+    @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {
       if ("f1".equals(fieldName)) {
         return new EmptyTokenStream();
@@ -359,6 +360,7 @@
     }
 
     private static class EmptyTokenStream extends TokenStream {
+      @Override
       public boolean incrementToken() {
         return false;
       }
Index: contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper.java
===================================================================
--- contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper.java	(revision 833861)
+++ contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper.java	(working copy)
@@ -115,6 +115,7 @@
     boolean inPhrase = false;
     int savedStart = 0, savedEnd = 0;
 
+    @Override
     public boolean incrementToken() throws IOException {
       if (inPhrase) {
         inPhrase = false;
@@ -140,6 +141,7 @@
   public static class QPTestAnalyzer extends Analyzer {
 
     /** Filters LowerCaseTokenizer with StopFilter. */
+    @Override
     public final TokenStream tokenStream(String fieldName, Reader reader) {
       return new QPTestFilter(new LowerCaseTokenizer(reader));
     }
@@ -156,6 +158,7 @@
     private static class QPTestParserQueryNodeProcessor extends
         QueryNodeProcessorImpl {
 
+      @Override
       protected QueryNode postProcessNode(QueryNode node)
           throws QueryNodeException {
 
@@ -163,6 +166,7 @@
 
       }
 
+      @Override
       protected QueryNode preProcessNode(QueryNode node)
           throws QueryNodeException {
 
@@ -177,6 +181,7 @@
 
       }
 
+      @Override
       protected List<QueryNode> setChildrenOrder(List<QueryNode> children)
           throws QueryNodeException {
 
@@ -190,6 +195,7 @@
 
   private int originalMaxClauses;
 
+  @Override
   public void setUp() throws Exception {
     super.setUp();
     originalMaxClauses = BooleanQuery.getMaxClauseCount();
@@ -1145,6 +1151,7 @@
     iw.addDocument(d);
   }
 
+  @Override
   public void tearDown() throws Exception {
     super.tearDown();
     BooleanQuery.setMaxClauseCount(originalMaxClauses);
@@ -1154,6 +1161,7 @@
     private int upto = 0;
     final PositionIncrementAttribute posIncr = addAttribute(PositionIncrementAttribute.class);
     final TermAttribute term = addAttribute(TermAttribute.class);
+    @Override
     public boolean incrementToken() {
       if (upto == 4) {
         return false;
@@ -1177,6 +1185,7 @@
   }
 
   private class CannedAnalyzer extends Analyzer {
+    @Override
     public TokenStream tokenStream(String ignored, Reader alsoIgnored) {
       return new CannedTokenStream();
     }
Index: contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiAnalyzerQPHelper.java
===================================================================
--- contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiAnalyzerQPHelper.java	(revision 833861)
+++ contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiAnalyzerQPHelper.java	(working copy)
@@ -154,6 +154,7 @@
     public MultiAnalyzer() {
     }
 
+    @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {
       TokenStream result = new StandardTokenizer(Version.LUCENE_CURRENT, reader);
       result = new TestFilter(result);
@@ -182,6 +183,7 @@
 
     }
 
+    @Override
     public final boolean incrementToken() throws java.io.IOException {
       if (multiToken > 0) {
         termAtt.setTermBuffer("multi" + (multiToken + 1));
@@ -222,6 +224,7 @@
     public PosIncrementAnalyzer() {
     }
 
+    @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {
       TokenStream result = new StandardTokenizer(Version.LUCENE_CURRENT, reader);
       result = new TestPosIncrementFilter(result);
@@ -241,6 +244,7 @@
       posIncrAtt = addAttribute(PositionIncrementAttribute.class);
     }
 
+    @Override
     public final boolean incrementToken() throws java.io.IOException {
       while (input.incrementToken()) {
         if (termAtt.term().equals("the")) {
Index: contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiAnalyzerWrapper.java
===================================================================
--- contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiAnalyzerWrapper.java	(revision 833861)
+++ contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiAnalyzerWrapper.java	(working copy)
@@ -148,6 +148,7 @@
     public MultiAnalyzer() {
     }
 
+    @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {
       TokenStream result = new StandardTokenizer(Version.LUCENE_CURRENT, reader);
       result = new TestFilter(result);
@@ -176,6 +177,7 @@
 
     }
 
+    @Override
     public final boolean incrementToken() throws java.io.IOException {
       if (multiToken > 0) {
         termAtt.setTermBuffer("multi" + (multiToken + 1));
@@ -216,6 +218,7 @@
     public PosIncrementAnalyzer() {
     }
 
+    @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {
       TokenStream result = new StandardTokenizer(Version.LUCENE_CURRENT, reader);
       result = new TestPosIncrementFilter(result);
@@ -235,6 +238,7 @@
       posIncrAtt = addAttribute(PositionIncrementAttribute.class);
     }
 
+    @Override
     public final boolean incrementToken() throws java.io.IOException {
       while (input.incrementToken()) {
         if (termAtt.term().equals("the")) {
Index: contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQueryParserWrapper.java
===================================================================
--- contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQueryParserWrapper.java	(revision 833861)
+++ contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQueryParserWrapper.java	(working copy)
@@ -348,6 +348,7 @@
     public AnalyzerReturningNull() {
     }
 
+    @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {
       if ("f1".equals(fieldName)) {
         return new EmptyTokenStream();
@@ -357,6 +358,7 @@
     }
 
     private static class EmptyTokenStream extends TokenStream {
+      @Override
       public boolean incrementToken() {
         return false;
       }
Index: contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper.java
===================================================================
--- contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper.java	(revision 833861)
+++ contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper.java	(working copy)
@@ -110,6 +110,7 @@
     boolean inPhrase = false;
     int savedStart = 0, savedEnd = 0;
 
+    @Override
     public boolean incrementToken() throws IOException {
       if (inPhrase) {
         inPhrase = false;
@@ -135,6 +136,7 @@
   public static class QPTestAnalyzer extends Analyzer {
 
     /** Filters LowerCaseTokenizer with StopFilter. */
+    @Override
     public final TokenStream tokenStream(String fieldName, Reader reader) {
       return new QPTestFilter(new LowerCaseTokenizer(reader));
     }
@@ -154,11 +156,13 @@
 
     }
 
+    @Override
     protected Query getFuzzyQuery(String field, String termStr,
         float minSimilarity) throws ParseException {
       throw new ParseException("Fuzzy queries not allowed");
     }
 
+    @Override
     protected Query getWildcardQuery(String field, String termStr)
         throws ParseException {
       throw new ParseException("Wildcard queries not allowed");
@@ -167,6 +171,7 @@
     private static class QPTestParserQueryNodeProcessor extends
         QueryNodeProcessorImpl {
 
+      @Override
       protected QueryNode postProcessNode(QueryNode node)
           throws QueryNodeException {
 
@@ -174,6 +179,7 @@
 
       }
 
+      @Override
       protected QueryNode preProcessNode(QueryNode node)
           throws QueryNodeException {
 
@@ -188,6 +194,7 @@
 
       }
 
+      @Override
       protected List<QueryNode> setChildrenOrder(List<QueryNode> children)
           throws QueryNodeException {
 
@@ -201,6 +208,7 @@
 
   private int originalMaxClauses;
 
+  @Override
   public void setUp() throws Exception {
     super.setUp();
     originalMaxClauses = BooleanQuery.getMaxClauseCount();
@@ -1115,6 +1123,7 @@
     iw.addDocument(d);
   }
 
+  @Override
   public void tearDown() throws Exception {
     super.tearDown();
     BooleanQuery.setMaxClauseCount(originalMaxClauses);
Index: contrib/queryparser/src/test/org/apache/lucene/queryParser/spans/SpansQueryTreeBuilder.java
===================================================================
--- contrib/queryparser/src/test/org/apache/lucene/queryParser/spans/SpansQueryTreeBuilder.java	(revision 833861)
+++ contrib/queryparser/src/test/org/apache/lucene/queryParser/spans/SpansQueryTreeBuilder.java	(working copy)
@@ -44,6 +44,7 @@
 
   }
 
+  @Override
   public SpanQuery build(QueryNode queryTree) throws QueryNodeException {
     return (SpanQuery) super.build(queryTree);
   }
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/ParametricRangeQueryNodeProcessor.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/ParametricRangeQueryNodeProcessor.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/ParametricRangeQueryNodeProcessor.java	(working copy)
@@ -72,6 +72,7 @@
     // empty constructor
   }
 
+  @Override
   protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {
 
     if (node instanceof ParametricRangeQueryNode) {
@@ -165,12 +166,14 @@
 
   }
 
+  @Override
   protected QueryNode preProcessNode(QueryNode node) throws QueryNodeException {
 
     return node;
 
   }
 
+  @Override
   protected List<QueryNode> setChildrenOrder(List<QueryNode> children)
       throws QueryNodeException {
 
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/LowercaseExpandedTermsQueryNodeProcessor.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/LowercaseExpandedTermsQueryNodeProcessor.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/LowercaseExpandedTermsQueryNodeProcessor.java	(working copy)
@@ -47,6 +47,7 @@
     // empty constructor
   }
 
+  @Override
   public QueryNode process(QueryNode queryTree) throws QueryNodeException {
 
     if (getQueryConfigHandler().hasAttribute(
@@ -65,6 +66,7 @@
 
   }
 
+  @Override
   protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {
 
     if (node instanceof WildcardQueryNode || node instanceof FuzzyQueryNode
@@ -78,12 +80,14 @@
 
   }
 
+  @Override
   protected QueryNode preProcessNode(QueryNode node) throws QueryNodeException {
 
     return node;
 
   }
 
+  @Override
   protected List<QueryNode> setChildrenOrder(List<QueryNode> children)
       throws QueryNodeException {
 
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/RemoveEmptyNonLeafQueryNodeProcessor.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/RemoveEmptyNonLeafQueryNodeProcessor.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/RemoveEmptyNonLeafQueryNodeProcessor.java	(working copy)
@@ -48,6 +48,7 @@
     // empty constructor
   }
 
+  @Override
   public QueryNode process(QueryNode queryTree) throws QueryNodeException {
     queryTree = super.process(queryTree);
 
@@ -65,18 +66,21 @@
 
   }
 
+  @Override
   protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {
 
     return node;
 
   }
 
+  @Override
   protected QueryNode preProcessNode(QueryNode node) throws QueryNodeException {
 
     return node;
 
   }
 
+  @Override
   protected List<QueryNode> setChildrenOrder(List<QueryNode> children)
       throws QueryNodeException {
 
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/AllowLeadingWildcardProcessor.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/AllowLeadingWildcardProcessor.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/AllowLeadingWildcardProcessor.java	(working copy)
@@ -45,6 +45,7 @@
     // empty constructor
   }
 
+  @Override
   public QueryNode process(QueryNode queryTree) throws QueryNodeException {
 
     if (getQueryConfigHandler().hasAttribute(AllowLeadingWildcardAttribute.class)) {
@@ -59,6 +60,7 @@
     return queryTree;
   }
 
+  @Override
   protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {
 
     if (node instanceof WildcardQueryNode) {
@@ -85,12 +87,14 @@
 
   }
 
+  @Override
   protected QueryNode preProcessNode(QueryNode node) throws QueryNodeException {
 
     return node;
 
   }
 
+  @Override
   protected List<QueryNode> setChildrenOrder(List<QueryNode> children)
       throws QueryNodeException {
 
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/PhraseSlopQueryNodeProcessor.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/PhraseSlopQueryNodeProcessor.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/PhraseSlopQueryNodeProcessor.java	(working copy)
@@ -39,6 +39,7 @@
     // empty constructor
   }
 
+  @Override
   protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {
 
     if (node instanceof SlopQueryNode) {
@@ -55,12 +56,14 @@
 
   }
 
+  @Override
   protected QueryNode preProcessNode(QueryNode node) throws QueryNodeException {
 
     return node;
 
   }
 
+  @Override
   protected List<QueryNode> setChildrenOrder(List<QueryNode> children)
       throws QueryNodeException {
 
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/AnalyzerQueryNodeProcessor.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/AnalyzerQueryNodeProcessor.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/AnalyzerQueryNodeProcessor.java	(working copy)
@@ -76,6 +76,7 @@
     // empty constructor
   }
 
+  @Override
   public QueryNode process(QueryNode queryTree) throws QueryNodeException {
 
     if (getQueryConfigHandler().hasAttribute(AnalyzerAttribute.class)) {
@@ -323,12 +324,14 @@
 
   }
 
+  @Override
   protected QueryNode preProcessNode(QueryNode node) throws QueryNodeException {
 
     return node;
 
   }
 
+  @Override
   protected List<QueryNode> setChildrenOrder(List<QueryNode> children)
       throws QueryNodeException {
 
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/DefaultPhraseSlopQueryNodeProcessor.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/DefaultPhraseSlopQueryNodeProcessor.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/DefaultPhraseSlopQueryNodeProcessor.java	(working copy)
@@ -49,6 +49,7 @@
     // empty constructor
   }
 
+  @Override
   public QueryNode process(QueryNode queryTree) throws QueryNodeException {
     QueryConfigHandler queryConfig = getQueryConfigHandler();
 
@@ -68,6 +69,7 @@
 
   }
 
+  @Override
   protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {
 
     if (node instanceof TokenizedPhraseQueryNode
@@ -81,6 +83,7 @@
 
   }
 
+  @Override
   protected QueryNode preProcessNode(QueryNode node) throws QueryNodeException {
 
     if (node instanceof SlopQueryNode) {
@@ -92,6 +95,7 @@
 
   }
 
+  @Override
   protected void processChildren(QueryNode queryTree) throws QueryNodeException {
 
     if (this.processChildren) {
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/MultiTermRewriteMethodProcessor.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/MultiTermRewriteMethodProcessor.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/MultiTermRewriteMethodProcessor.java	(working copy)
@@ -34,6 +34,7 @@
  */
 public class MultiTermRewriteMethodProcessor extends QueryNodeProcessorImpl {
 
+  @Override
   protected QueryNode postProcessNode(QueryNode node) {
 
     // set setMultiTermRewriteMethod for WildcardQueryNode and
@@ -61,10 +62,12 @@
     return node;
   }
 
+  @Override
   protected QueryNode preProcessNode(QueryNode node) {
     return node;
   }
 
+  @Override
   protected List<QueryNode> setChildrenOrder(List<QueryNode> children) {
     return children;
   }
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/WildcardQueryNodeProcessor.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/WildcardQueryNodeProcessor.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/WildcardQueryNodeProcessor.java	(working copy)
@@ -48,6 +48,7 @@
     // empty constructor
   }
 
+  @Override
   protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {
 
     // the old Lucene Parser ignores FuzzyQueryNode that are also PrefixWildcardQueryNode or WildcardQueryNode
@@ -120,12 +121,14 @@
     return false;
   }
 
+  @Override
   protected QueryNode preProcessNode(QueryNode node) throws QueryNodeException {
 
     return node;
 
   }
 
+  @Override
   protected List<QueryNode> setChildrenOrder(List<QueryNode> children)
       throws QueryNodeException {
 
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/BooleanSingleChildOptimizationQueryNodeProcessor.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/BooleanSingleChildOptimizationQueryNodeProcessor.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/BooleanSingleChildOptimizationQueryNodeProcessor.java	(working copy)
@@ -42,6 +42,7 @@
     // empty constructor
   }
 
+  @Override
   protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {
 
     if (node instanceof BooleanQueryNode) {
@@ -72,12 +73,14 @@
 
   }
 
+  @Override
   protected QueryNode preProcessNode(QueryNode node) throws QueryNodeException {
 
     return node;
 
   }
 
+  @Override
   protected List<QueryNode> setChildrenOrder(List<QueryNode> children)
       throws QueryNodeException {
 
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/MultiFieldQueryNodeProcessor.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/MultiFieldQueryNodeProcessor.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/MultiFieldQueryNodeProcessor.java	(working copy)
@@ -51,12 +51,14 @@
     // empty constructor
   }
 
+  @Override
   protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {
 
     return node;
 
   }
 
+  @Override
   protected void processChildren(QueryNode queryTree) throws QueryNodeException {
 
     if (this.processChildren) {
@@ -68,6 +70,7 @@
 
   }
 
+  @Override
   protected QueryNode preProcessNode(QueryNode node) throws QueryNodeException {
 
     if (node instanceof FieldableNode) {
@@ -121,6 +124,7 @@
 
   }
 
+  @Override
   protected List<QueryNode> setChildrenOrder(List<QueryNode> children)
       throws QueryNodeException {
 
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/MatchAllDocsQueryNodeProcessor.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/MatchAllDocsQueryNodeProcessor.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/MatchAllDocsQueryNodeProcessor.java	(working copy)
@@ -40,6 +40,7 @@
     // empty constructor
   }
 
+  @Override
   protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {
 
     if (node instanceof FieldQueryNode) {
@@ -58,12 +59,14 @@
 
   }
 
+  @Override
   protected QueryNode preProcessNode(QueryNode node) throws QueryNodeException {
 
     return node;
 
   }
 
+  @Override
   protected List<QueryNode> setChildrenOrder(List<QueryNode> children)
       throws QueryNodeException {
 
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/StandardQueryParser.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/StandardQueryParser.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/StandardQueryParser.java	(working copy)
@@ -150,6 +150,7 @@
     this.setAnalyzer(analyzer);
   }
   
+  @Override
   public String toString(){
     return "<StandardQueryParser config=\"" + this.getQueryConfigHandler() + "\"/>";
   }
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/RangeCollatorAttributeImpl.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/RangeCollatorAttributeImpl.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/RangeCollatorAttributeImpl.java	(working copy)
@@ -51,14 +51,17 @@
     return this.rangeCollator;
   }
 
+  @Override
   public void clear() {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public void copyTo(AttributeImpl target) {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public boolean equals(Object other) {
 
     if (other instanceof RangeCollatorAttributeImpl) {
@@ -77,10 +80,12 @@
 
   }
 
+  @Override
   public int hashCode() {
     return (this.rangeCollator == null) ? 0 : this.rangeCollator.hashCode();
   }
 
+  @Override
   public String toString() {
     return "<rangeCollatorAttribute rangeCollator='" + this.rangeCollator
         + "'/>";
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/MultiFieldAttributeImpl.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/MultiFieldAttributeImpl.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/MultiFieldAttributeImpl.java	(working copy)
@@ -49,14 +49,17 @@
     return this.fields;
   }
 
+  @Override
   public void clear() {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public void copyTo(AttributeImpl target) {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public boolean equals(Object other) {
 
     if (other instanceof MultiFieldAttributeImpl) {
@@ -70,10 +73,12 @@
 
   }
 
+  @Override
   public int hashCode() {
     return Arrays.hashCode(this.fields);
   }
 
+  @Override
   public String toString() {
     return "<fieldsAttribute fields=" + Arrays.toString(this.fields) + "/>";
   }
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/DefaultOperatorAttributeImpl.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/DefaultOperatorAttributeImpl.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/DefaultOperatorAttributeImpl.java	(working copy)
@@ -54,14 +54,17 @@
     return this.operator;
   }
 
+  @Override
   public void clear() {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public void copyTo(AttributeImpl target) {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public boolean equals(Object other) {
 
     if (other instanceof DefaultOperatorAttributeImpl) {
@@ -78,10 +81,12 @@
 
   }
 
+  @Override
   public int hashCode() {
     return getOperator().hashCode() * 31;
   }
 
+  @Override
   public String toString() {
     return "<defaultOperatorAttribute operator=" + this.operator.name() + "/>";
   }
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/LowercaseExpandedTermsAttributeImpl.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/LowercaseExpandedTermsAttributeImpl.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/LowercaseExpandedTermsAttributeImpl.java	(working copy)
@@ -49,14 +49,17 @@
     return this.lowercaseExpandedTerms;
   }
 
+  @Override
   public void clear() {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public void copyTo(AttributeImpl target) {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public boolean equals(Object other) {
 
     if (other instanceof LowercaseExpandedTermsAttributeImpl
@@ -70,10 +73,12 @@
 
   }
 
+  @Override
   public int hashCode() {
     return this.lowercaseExpandedTerms ? -1 : Integer.MAX_VALUE;
   }
 
+  @Override
   public String toString() {
     return "<lowercaseExpandedTerms lowercaseExpandedTerms="
         + this.lowercaseExpandedTerms + "/>";
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/DefaultPhraseSlopAttributeImpl.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/DefaultPhraseSlopAttributeImpl.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/DefaultPhraseSlopAttributeImpl.java	(working copy)
@@ -48,14 +48,17 @@
     return this.defaultPhraseSlop;
   }
 
+  @Override
   public void clear() {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public void copyTo(AttributeImpl target) {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public boolean equals(Object other) {
 
     if (other instanceof DefaultPhraseSlopAttributeImpl
@@ -70,10 +73,12 @@
 
   }
 
+  @Override
   public int hashCode() {
     return Integer.valueOf(this.defaultPhraseSlop).hashCode();
   }
 
+  @Override
   public String toString() {
     return "<defaultPhraseSlop defaultPhraseSlop=" + this.defaultPhraseSlop
         + "/>";
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/FieldBoostMapAttributeImpl.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/FieldBoostMapAttributeImpl.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/FieldBoostMapAttributeImpl.java	(working copy)
@@ -53,14 +53,17 @@
     return this.boosts;
   }
 
+  @Override
   public void clear() {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public void copyTo(AttributeImpl target) {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public boolean equals(Object other) {
 
     if (other instanceof FieldBoostMapAttributeImpl && other != null
@@ -74,6 +77,7 @@
 
   }
 
+  @Override
   public int hashCode() {
     final int prime = 97;
     if (this.boosts != null) 
@@ -82,6 +86,7 @@
       return Float.valueOf(prime).hashCode();
   }
 
+  @Override
   public String toString() {
     return "<fieldBoostMapAttribute map=" + this.boosts + "/>";
   }
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/PositionIncrementsAttributeImpl.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/PositionIncrementsAttributeImpl.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/PositionIncrementsAttributeImpl.java	(working copy)
@@ -47,14 +47,17 @@
     return this.positionIncrementsEnabled;
   }
 
+  @Override
   public void clear() {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public void copyTo(AttributeImpl target) {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public boolean equals(Object other) {
 
     if (other instanceof PositionIncrementsAttributeImpl
@@ -69,10 +72,12 @@
 
   }
 
+  @Override
   public int hashCode() {
     return this.positionIncrementsEnabled ? -1 : Integer.MAX_VALUE;
   }
 
+  @Override
   public String toString() {
     return "<positionIncrements positionIncrementsEnabled="
         + this.positionIncrementsEnabled + "/>";
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/LocaleAttributeImpl.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/LocaleAttributeImpl.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/LocaleAttributeImpl.java	(working copy)
@@ -49,14 +49,17 @@
     return this.locale;
   }
 
+  @Override
   public void clear() {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public void copyTo(AttributeImpl target) {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public boolean equals(Object other) {
 
     if (other instanceof LocaleAttributeImpl) {
@@ -76,10 +79,12 @@
 
   }
 
+  @Override
   public int hashCode() {
     return (this.locale == null) ? 0 : this.locale.hashCode();
   }
 
+  @Override
   public String toString() {
     return "<localeAttribute locale=" + this.locale + "/>";
   }
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/DateResolutionAttributeImpl.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/DateResolutionAttributeImpl.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/DateResolutionAttributeImpl.java	(working copy)
@@ -49,14 +49,17 @@
     return this.dateResolution;
   }
 
+  @Override
   public void clear() {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public void copyTo(AttributeImpl target) {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public boolean equals(Object other) {
 
     if (other instanceof DateResolutionAttributeImpl) {
@@ -75,10 +78,12 @@
 
   }
 
+  @Override
   public int hashCode() {
     return (this.dateResolution == null) ? 0 : this.dateResolution.hashCode();
   }
 
+  @Override
   public String toString() {
     return "<dateResolutionAttribute dateResolution='" + this.dateResolution
         + "'/>";
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/FieldDateResolutionMapAttributeImpl.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/FieldDateResolutionMapAttributeImpl.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/FieldDateResolutionMapAttributeImpl.java	(working copy)
@@ -50,14 +50,17 @@
     return this.dateRes;
   }
 
+  @Override
   public void clear() {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public void copyTo(AttributeImpl target) {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public boolean equals(Object other) {
 
     if (other instanceof FieldDateResolutionMapAttributeImpl && other != null
@@ -71,6 +74,7 @@
 
   }
 
+  @Override
   public int hashCode() {
     final int prime = 97;
     if (this.dateRes != null) 
@@ -79,6 +83,7 @@
       return Float.valueOf(prime).hashCode();
   }
 
+  @Override
   public String toString() {
     return "<fieldDateResolutionMapAttribute map=" + this.dateRes + "/>";
   }
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/AllowLeadingWildcardAttributeImpl.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/AllowLeadingWildcardAttributeImpl.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/AllowLeadingWildcardAttributeImpl.java	(working copy)
@@ -43,14 +43,17 @@
     return this.allowLeadingWildcard;
   }
 
+  @Override
   public void clear() {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public void copyTo(AttributeImpl target) {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public boolean equals(Object other) {
 
     if (other instanceof AllowLeadingWildcardAttributeImpl
@@ -64,10 +67,12 @@
 
   }
 
+  @Override
   public int hashCode() {
     return this.allowLeadingWildcard ? -1 : Integer.MAX_VALUE;
   }
 
+  @Override
   public String toString() {
     return "<allowLeadingWildcard allowLeadingWildcard="
         + this.allowLeadingWildcard + "/>";
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/AnalyzerAttributeImpl.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/AnalyzerAttributeImpl.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/AnalyzerAttributeImpl.java	(working copy)
@@ -49,14 +49,17 @@
     return this.analyzer;
   }
 
+  @Override
   public void clear() {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public void copyTo(AttributeImpl target) {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public boolean equals(Object other) {
 
     if (other instanceof AnalyzerAttributeImpl) {
@@ -76,10 +79,12 @@
 
   }
 
+  @Override
   public int hashCode() {
     return (this.analyzer == null) ? 0 : this.analyzer.hashCode();
   }
 
+  @Override
   public String toString() {
     return "<analyzerAttribute analyzer='" + this.analyzer + "'/>";
   }
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/MultiTermRewriteMethodAttributeImpl.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/MultiTermRewriteMethodAttributeImpl.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/MultiTermRewriteMethodAttributeImpl.java	(working copy)
@@ -50,14 +50,17 @@
     return multiTermRewriteMethod;
   }
 
+  @Override
   public void clear() {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public void copyTo(AttributeImpl target) {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public boolean equals(Object other) {
 
     if (other instanceof MultiTermRewriteMethodAttributeImpl
@@ -71,10 +74,12 @@
 
   }
 
+  @Override
   public int hashCode() {
     return multiTermRewriteMethod.hashCode();
   }
 
+  @Override
   public String toString() {
     return "<multiTermRewriteMethod multiTermRewriteMethod="
         + this.multiTermRewriteMethod + "/>";
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/BoostAttributeImpl.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/BoostAttributeImpl.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/BoostAttributeImpl.java	(working copy)
@@ -49,14 +49,17 @@
     return this.boost;
   }
 
+  @Override
   public void clear() {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public void copyTo(AttributeImpl target) {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public boolean equals(Object other) {
 
     if (other instanceof BoostAttributeImpl && other != null
@@ -70,10 +73,12 @@
 
   }
 
+  @Override
   public int hashCode() {
     return Float.valueOf(this.boost).hashCode();
   }
 
+  @Override
   public String toString() {
     return "<boostAttribute boost=" + this.boost + "/>";
   }
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/FuzzyAttributeImpl.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/FuzzyAttributeImpl.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/FuzzyAttributeImpl.java	(working copy)
@@ -59,14 +59,17 @@
     return this.minSimilarity;
   }
 
+  @Override
   public void clear() {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public void copyTo(AttributeImpl target) {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public boolean equals(Object other) {
 
     if (other instanceof FuzzyAttributeImpl && other != null
@@ -80,10 +83,12 @@
 
   }
 
+  @Override
   public int hashCode() {
     return Integer.valueOf(this.prefixLength).hashCode();
   }
 
+  @Override
   public String toString() {
     return "<fuzzyAttribute prefixLength=" + this.prefixLength + "/>";
   }
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/nodes/PrefixWildcardQueryNode.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/nodes/PrefixWildcardQueryNode.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/nodes/PrefixWildcardQueryNode.java	(working copy)
@@ -48,11 +48,13 @@
     this(fqn.getField(), fqn.getText(), fqn.getBegin(), fqn.getEnd());
   }
 
+  @Override
   public String toString() {
     return "<prefixWildcard field='" + this.field + "' term='" + this.text
         + "'/>";
   }
 
+  @Override
   public PrefixWildcardQueryNode cloneTree() throws CloneNotSupportedException {
     PrefixWildcardQueryNode clone = (PrefixWildcardQueryNode) super.cloneTree();
 
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/nodes/WildcardQueryNode.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/nodes/WildcardQueryNode.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/nodes/WildcardQueryNode.java	(working copy)
@@ -46,6 +46,7 @@
     this(fqn.getField(), fqn.getText(), fqn.getBegin(), fqn.getEnd());
   }
 
+  @Override
   public CharSequence toQueryString(EscapeQuerySyntax escaper) {
     if (isDefaultField(this.field)) {
       return getTermEscaped(escaper);
@@ -54,10 +55,12 @@
     }
   }
 
+  @Override
   public String toString() {
     return "<wildcard field='" + this.field + "' term='" + this.text + "'/>";
   }
 
+  @Override
   public WildcardQueryNode cloneTree() throws CloneNotSupportedException {
     WildcardQueryNode clone = (WildcardQueryNode) super.cloneTree();
 
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/nodes/RangeQueryNode.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/nodes/RangeQueryNode.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/nodes/RangeQueryNode.java	(working copy)
@@ -49,6 +49,7 @@
 
   }
 
+  @Override
   public String toString() {
     StringBuilder sb = new StringBuilder("<range>\n\t");
     sb.append(this.getUpperBound()).append("\n\t");
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/nodes/MultiPhraseQueryNode.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/nodes/MultiPhraseQueryNode.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/nodes/MultiPhraseQueryNode.java	(working copy)
@@ -41,6 +41,7 @@
 
   }
 
+  @Override
   public String toString() {
     if (getChildren() == null || getChildren().size() == 0)
       return "<multiPhrase/>";
@@ -68,6 +69,7 @@
     return "[MTP[" + sb.toString() + "]]";
   }
 
+  @Override
   public QueryNode cloneTree() throws CloneNotSupportedException {
     MultiPhraseQueryNode clone = (MultiPhraseQueryNode) super.cloneTree();
 
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/builders/StandardQueryTreeBuilder.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/builders/StandardQueryTreeBuilder.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/builders/StandardQueryTreeBuilder.java	(working copy)
@@ -71,6 +71,7 @@
 
   }
 
+  @Override
   public Query build(QueryNode queryNode) throws QueryNodeException {
     return (Query) super.build(queryNode);
   }
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/core/processors/NoChildOptimizationQueryNodeProcessor.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/core/processors/NoChildOptimizationQueryNodeProcessor.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/core/processors/NoChildOptimizationQueryNodeProcessor.java	(working copy)
@@ -46,6 +46,7 @@
     // empty constructor
   }
 
+  @Override
   protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {
 
     if (node instanceof BooleanQueryNode || node instanceof BoostQueryNode
@@ -74,12 +75,14 @@
 
   }
 
+  @Override
   protected QueryNode preProcessNode(QueryNode node) throws QueryNodeException {
 
     return node;
 
   }
 
+  @Override
   protected List<QueryNode> setChildrenOrder(List<QueryNode> children)
       throws QueryNodeException {
 
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/core/processors/RemoveDeletedQueryNodesProcessor.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/core/processors/RemoveDeletedQueryNodesProcessor.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/core/processors/RemoveDeletedQueryNodesProcessor.java	(working copy)
@@ -37,6 +37,7 @@
     // empty constructor
   }
 
+  @Override
   public QueryNode process(QueryNode queryTree) throws QueryNodeException {
     queryTree = super.process(queryTree);
 
@@ -51,6 +52,7 @@
 
   }
 
+  @Override
   protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {
 
     if (!node.isLeaf()) {
@@ -85,6 +87,7 @@
 
   }
 
+  @Override
   protected List<QueryNode> setChildrenOrder(List<QueryNode> children)
       throws QueryNodeException {
 
@@ -100,6 +103,7 @@
 
   }
 
+  @Override
   protected QueryNode preProcessNode(QueryNode node) throws QueryNodeException {
 
     return node;
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/core/config/FieldConfig.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/core/config/FieldConfig.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/core/config/FieldConfig.java	(working copy)
@@ -57,6 +57,7 @@
     return this.fieldName;
   }
   
+  @Override
   public String toString(){
     return "<fieldconfig name=\"" + this.fieldName + "\" attributes=\"" + super.toString() + "\"/>";
   }
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/ProximityQueryNode.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/ProximityQueryNode.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/ProximityQueryNode.java	(working copy)
@@ -36,9 +36,18 @@
   private static final long serialVersionUID = 9018220596680832916L;
 
   public enum Type {
-    PARAGRAPH { CharSequence toQueryString() { return "WITHIN PARAGRAPH"; } },
-    SENTENCE  { CharSequence toQueryString() { return "WITHIN SENTENCE";  } },
-    NUMBER    { CharSequence toQueryString() { return "WITHIN";           } };
+    PARAGRAPH {
+      @Override
+      CharSequence toQueryString() { return "WITHIN PARAGRAPH"; } 
+    },
+    SENTENCE  { 
+      @Override
+      CharSequence toQueryString() { return "WITHIN SENTENCE";  }
+    },
+    NUMBER    {
+      @Override
+      CharSequence toQueryString() { return "WITHIN";           }
+    };
 
     abstract CharSequence toQueryString();
   }
@@ -131,6 +140,7 @@
     return this.proximityType;
   }
 
+  @Override
   public String toString() {
     String distanceSTR = ((this.distance == -1) ? ("")
         : (" distance='" + this.distance) + "'");
@@ -150,6 +160,7 @@
     return sb.toString();
   }
 
+  @Override
   public CharSequence toQueryString(EscapeQuerySyntax escapeSyntaxParser) {
     String withinSTR = this.proximityType.toQueryString()
         + ((this.distance == -1) ? ("") : (" " + this.distance))
@@ -173,6 +184,7 @@
     }
   }
 
+  @Override
   public QueryNode cloneTree() throws CloneNotSupportedException {
     ProximityQueryNode clone = (ProximityQueryNode) super.cloneTree();
 
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/ParametricRangeQueryNode.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/ParametricRangeQueryNode.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/ParametricRangeQueryNode.java	(working copy)
@@ -91,6 +91,7 @@
 
   }
 
+  @Override
   public ParametricRangeQueryNode cloneTree() throws CloneNotSupportedException {
     ParametricRangeQueryNode clone = (ParametricRangeQueryNode) super
         .cloneTree();
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/QuotedFieldQueryNode.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/QuotedFieldQueryNode.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/QuotedFieldQueryNode.java	(working copy)
@@ -42,6 +42,7 @@
     super(field, text, begin, end);
   }
 
+  @Override
   public CharSequence toQueryString(EscapeQuerySyntax escaper) {
     if (isDefaultField(this.field)) {
       return "\"" + getTermEscapeQuoted(escaper) + "\"";
@@ -50,11 +51,13 @@
     }
   }
 
+  @Override
   public String toString() {
     return "<quotedfield start='" + this.begin + "' end='" + this.end
         + "' field='" + this.field + "' term='" + this.text + "'/>";
   }
 
+  @Override
   public QuotedFieldQueryNode cloneTree() throws CloneNotSupportedException {
     QuotedFieldQueryNode clone = (QuotedFieldQueryNode) super.cloneTree();
     // nothing to do here
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/DeletedQueryNode.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/DeletedQueryNode.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/DeletedQueryNode.java	(working copy)
@@ -37,10 +37,12 @@
     return "[DELETEDCHILD]";
   }
 
+  @Override
   public String toString() {
     return "<deleted/>";
   }
 
+  @Override
   public QueryNode cloneTree() throws CloneNotSupportedException {
     DeletedQueryNode clone = (DeletedQueryNode) super.cloneTree();
 
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/NoTokenFoundQueryNode.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/NoTokenFoundQueryNode.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/NoTokenFoundQueryNode.java	(working copy)
@@ -31,14 +31,17 @@
     super();
   }
 
+  @Override
   public CharSequence toQueryString(EscapeQuerySyntax escaper) {
     return "[NTF]";
   }
 
+  @Override
   public String toString() {
     return "<notokenfound/>";
   }
 
+  @Override
   public QueryNode cloneTree() throws CloneNotSupportedException {
     NoTokenFoundQueryNode clone = (NoTokenFoundQueryNode) super.cloneTree();
 
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/SlopQueryNode.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/SlopQueryNode.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/SlopQueryNode.java	(working copy)
@@ -73,6 +73,7 @@
 
   }
 
+  @Override
   public String toString() {
     return "<slop value='" + getValueString() + "'>" + "\n"
         + getChild().toString() + "\n</slop>";
@@ -85,6 +86,7 @@
         + getValueString();
   }
 
+  @Override
   public QueryNode cloneTree() throws CloneNotSupportedException {
     SlopQueryNode clone = (SlopQueryNode) super.cloneTree();
 
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/BooleanQueryNode.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/BooleanQueryNode.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/BooleanQueryNode.java	(working copy)
@@ -40,6 +40,7 @@
     set(clauses);
   }
 
+  @Override
   public String toString() {
     if (getChildren() == null || getChildren().size() == 0)
       return "<boolean operation='default'/>";
@@ -72,6 +73,7 @@
       return "( " + sb.toString() + " )";
   }
 
+  @Override
   public QueryNode cloneTree() throws CloneNotSupportedException {
     BooleanQueryNode clone = (BooleanQueryNode) super.cloneTree();
 
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/PhraseSlopQueryNode.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/PhraseSlopQueryNode.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/PhraseSlopQueryNode.java	(working copy)
@@ -66,6 +66,7 @@
 
   }
 
+  @Override
   public String toString() {
     return "<phraseslop value='" + getValueString() + "'>" + "\n"
         + getChild().toString() + "\n</phraseslop>";
@@ -78,6 +79,7 @@
         + getValueString();
   }
 
+  @Override
   public QueryNode cloneTree() throws CloneNotSupportedException {
     PhraseSlopQueryNode clone = (PhraseSlopQueryNode) super.cloneTree();
 
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/OrQueryNode.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/OrQueryNode.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/OrQueryNode.java	(working copy)
@@ -43,6 +43,7 @@
     }
   }
 
+  @Override
   public String toString() {
     if (getChildren() == null || getChildren().size() == 0)
       return "<boolean operation='or'/>";
@@ -57,6 +58,7 @@
     return sb.toString();
   }
 
+  @Override
   public CharSequence toQueryString(EscapeQuerySyntax escapeSyntaxParser) {
     if (getChildren() == null || getChildren().size() == 0)
       return "";
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/FieldQueryNode.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/FieldQueryNode.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/FieldQueryNode.java	(working copy)
@@ -91,6 +91,7 @@
     }
   }
 
+  @Override
   public String toString() {
     return "<field start='" + this.begin + "' end='" + this.end + "' field='"
         + this.field + "' text='" + this.text + "'/>";
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/BoostQueryNode.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/BoostQueryNode.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/BoostQueryNode.java	(working copy)
@@ -99,6 +99,7 @@
 
   }
 
+  @Override
   public String toString() {
     return "<boost value='" + getValueString() + "'>" + "\n"
         + getChild().toString() + "\n</boost>";
@@ -111,6 +112,7 @@
         + getValueString();
   }
 
+  @Override
   public QueryNode cloneTree() throws CloneNotSupportedException {
     BoostQueryNode clone = (BoostQueryNode) super.cloneTree();
 
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/ParametricQueryNode.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/ParametricQueryNode.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/ParametricQueryNode.java	(working copy)
@@ -30,12 +30,30 @@
   private CompareOperator operator;
 
   public enum CompareOperator {
-    LE { public String toString() { return "<="; } },
-    LT { public String toString() { return "<";  } },
-    GE { public String toString() { return ">="; } },
-    GT { public String toString() { return ">";  } },
-    EQ { public String toString() { return "=";  } },
-    NE { public String toString() { return "!="; } };
+    LE { 
+      @Override
+      public String toString() { return "<="; }
+    },
+    LT {
+      @Override
+      public String toString() { return "<";  }
+    },
+    GE {
+      @Override
+      public String toString() { return ">="; }
+    },
+    GT {
+      @Override
+      public String toString() { return ">";  }
+    },
+    EQ {
+      @Override
+      public String toString() { return "=";  }
+    },
+    NE {
+      @Override
+      public String toString() { return "!="; }
+    };
   }
 
   /**
@@ -61,15 +79,18 @@
     return getText();
   }
 
+  @Override
   public CharSequence toQueryString(EscapeQuerySyntax escapeSyntaxParser) {
     return this.field + "" + this.operator.toString() + "\"" + this.text + "\"";
   }
 
+  @Override
   public String toString() {
     return "<parametric field='" + this.field + "' operator='"
         + this.operator.toString() + "' text='" + this.text + "'/>";
   }
 
+  @Override
   public ParametricQueryNode cloneTree() throws CloneNotSupportedException {
     ParametricQueryNode clone = (ParametricQueryNode) super.cloneTree();
 
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/FuzzyQueryNode.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/FuzzyQueryNode.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/FuzzyQueryNode.java	(working copy)
@@ -64,6 +64,7 @@
     return this.prefixLength;
   }
 
+  @Override
   public CharSequence toQueryString(EscapeQuerySyntax escaper) {
     if (isDefaultField(this.field)) {
       return getTermEscaped(escaper) + "~" + this.similarity;
@@ -72,6 +73,7 @@
     }
   }
 
+  @Override
   public String toString() {
     return "<fuzzy field='" + this.field + "' similarity='" + this.similarity
         + "' term='" + this.text + "'/>";
@@ -81,6 +83,7 @@
     this.similarity = similarity;
   }
 
+  @Override
   public FuzzyQueryNode cloneTree() throws CloneNotSupportedException {
     FuzzyQueryNode clone = (FuzzyQueryNode) super.cloneTree();
 
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/AnyQueryNode.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/AnyQueryNode.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/AnyQueryNode.java	(working copy)
@@ -95,6 +95,7 @@
     this.field = field;
   }
 
+  @Override
   public QueryNode cloneTree() throws CloneNotSupportedException {
     AnyQueryNode clone = (AnyQueryNode) super.cloneTree();
 
@@ -104,6 +105,7 @@
     return clone;
   }
 
+  @Override
   public String toString() {
     if (getChildren() == null || getChildren().size() == 0)
       return "<any field='" + this.field + "'  matchelements="
@@ -119,6 +121,7 @@
     return sb.toString();
   }
 
+  @Override
   public CharSequence toQueryString(EscapeQuerySyntax escapeSyntaxParser) {
     String anySTR = "ANY " + this.minimumMatchingmElements;
 
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/OpaqueQueryNode.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/OpaqueQueryNode.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/OpaqueQueryNode.java	(working copy)
@@ -46,6 +46,7 @@
 
   }
 
+  @Override
   public String toString() {
     return "<opaque schema='" + this.schema + "' value='" + this.value + "'/>";
   }
@@ -54,6 +55,7 @@
     return "@" + this.schema + ":'" + this.value + "'";
   }
 
+  @Override
   public QueryNode cloneTree() throws CloneNotSupportedException {
     OpaqueQueryNode clone = (OpaqueQueryNode) super.cloneTree();
 
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/GroupQueryNode.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/GroupQueryNode.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/GroupQueryNode.java	(working copy)
@@ -54,6 +54,7 @@
     return getChildren().get(0);
   }
 
+  @Override
   public String toString() {
     return "<group>" + "\n" + getChild().toString() + "\n</group>";
   }
@@ -65,6 +66,7 @@
     return "( " + getChild().toQueryString(escapeSyntaxParser) + " )";
   }
 
+  @Override
   public QueryNode cloneTree() throws CloneNotSupportedException {
     GroupQueryNode clone = (GroupQueryNode) super.cloneTree();
 
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/PathQueryNode.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/PathQueryNode.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/PathQueryNode.java	(working copy)
@@ -70,6 +70,7 @@
       this.end = end;
     }
 
+    @Override
     public QueryText clone() throws CloneNotSupportedException {
       QueryText clone = (QueryText) super.clone();
       clone.value = this.value;
@@ -99,6 +100,7 @@
       return end;
     }
 
+    @Override
     public String toString() {
       return value + ", " + begin + ", " + end;
     }
@@ -191,6 +193,7 @@
     return path.toString();
   }
 
+  @Override
   public String toString() {
     QueryText text = this.values.get(0);
 
@@ -198,6 +201,7 @@
         + getPathString() + "'/>";
   }
 
+  @Override
   public QueryNode cloneTree() throws CloneNotSupportedException {
     PathQueryNode clone = (PathQueryNode) super.cloneTree();
 
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/ModifierQueryNode.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/ModifierQueryNode.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/ModifierQueryNode.java	(working copy)
@@ -41,6 +41,7 @@
   public enum Modifier {
     MOD_NONE, MOD_NOT, MOD_REQ;
 
+    @Override
     public String toString() {
       switch (this) {
       case MOD_NONE:
@@ -111,6 +112,7 @@
     return this.modifier;
   }
 
+  @Override
   public String toString() {
     return "<modifier operation='" + this.modifier.toString() + "'>" + "\n"
         + getChild().toString() + "\n</modifier>";
@@ -137,6 +139,7 @@
     }
   }
 
+  @Override
   public QueryNode cloneTree() throws CloneNotSupportedException {
     ModifierQueryNode clone = (ModifierQueryNode) super.cloneTree();
 
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/MatchAllDocsQueryNode.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/MatchAllDocsQueryNode.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/MatchAllDocsQueryNode.java	(working copy)
@@ -31,6 +31,7 @@
     // empty constructor
   }
 
+  @Override
   public String toString() {
     return "<matchAllDocs field='*' term='*'>";
   }
@@ -39,6 +40,7 @@
     return "*:*";
   }
 
+  @Override
   public MatchAllDocsQueryNode cloneTree() throws CloneNotSupportedException {
     MatchAllDocsQueryNode clone = (MatchAllDocsQueryNode) super.cloneTree();
 
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/TokenizedPhraseQueryNode.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/TokenizedPhraseQueryNode.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/TokenizedPhraseQueryNode.java	(working copy)
@@ -35,6 +35,7 @@
     allocate();
   }
 
+  @Override
   public String toString() {
     if (getChildren() == null || getChildren().size() == 0)
       return "<tokenizedphrase/>";
@@ -63,6 +64,7 @@
     return "[TP[" + sb.toString() + "]]";
   }
 
+  @Override
   public QueryNode cloneTree() throws CloneNotSupportedException {
     TokenizedPhraseQueryNode clone = (TokenizedPhraseQueryNode) super
         .cloneTree();
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/QueryNodeImpl.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/QueryNodeImpl.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/QueryNodeImpl.java	(working copy)
@@ -131,6 +131,7 @@
     return clone;
   }
 
+  @Override
   public Object clone() throws CloneNotSupportedException {
     return cloneTree();
   }
@@ -209,6 +210,7 @@
    * 
    * @see org.apache.lucene.queryParser.core.nodes.QueryNode#toString()
    */
+  @Override
   public String toString() {
     return super.toString();
   }
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/MatchNoDocsQueryNode.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/MatchNoDocsQueryNode.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/MatchNoDocsQueryNode.java	(working copy)
@@ -30,6 +30,7 @@
     // empty constructor
   }
 
+  @Override
   public String toString() {
     return "<matchNoDocsQueryNode/>";
   }
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/AndQueryNode.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/AndQueryNode.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/AndQueryNode.java	(working copy)
@@ -41,6 +41,7 @@
     }
   }
 
+  @Override
   public String toString() {
     if (getChildren() == null || getChildren().size() == 0)
       return "<boolean operation='and'/>";
@@ -55,6 +56,7 @@
     return sb.toString();
   }
 
+  @Override
   public CharSequence toQueryString(EscapeQuerySyntax escapeSyntaxParser) {
     if (getChildren() == null || getChildren().size() == 0)
       return "";
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/core/QueryNodeException.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/core/QueryNodeException.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/core/QueryNodeException.java	(working copy)
@@ -68,10 +68,12 @@
     return this.message;
   }
 
+  @Override
   public String getMessage() {
     return getLocalizedMessage();
   }
 
+  @Override
   public String getLocalizedMessage() {
     return getLocalizedMessage(Locale.getDefault());
   }
@@ -80,6 +82,7 @@
     return this.message.getLocalizedMessage(locale);
   }
 
+  @Override
   public String toString() {
     return this.message.getKey() + ": " + getLocalizedMessage();
   }
Index: contrib/queryparser/src/java/org/apache/lucene/queryParser/core/util/UnescapedCharSequence.java
===================================================================
--- contrib/queryparser/src/java/org/apache/lucene/queryParser/core/util/UnescapedCharSequence.java	(revision 833861)
+++ contrib/queryparser/src/java/org/apache/lucene/queryParser/core/util/UnescapedCharSequence.java	(working copy)
@@ -85,6 +85,7 @@
         newLength);
   }
 
+  @Override
   public String toString() {
     return new String(this.chars);
   }
Index: contrib/ant/src/test/org/apache/lucene/ant/HtmlDocumentTest.java
===================================================================
--- contrib/ant/src/test/org/apache/lucene/ant/HtmlDocumentTest.java	(revision 833861)
+++ contrib/ant/src/test/org/apache/lucene/ant/HtmlDocumentTest.java	(working copy)
@@ -30,6 +30,7 @@
     
     HtmlDocument doc;
     
+    @Override
     public void setUp() throws IOException {
         doc = new HtmlDocument(getFile("test.html"));
     }
@@ -39,6 +40,7 @@
         assertTrue("Body", doc.getBody().startsWith("This is some test"));
     }
     
+    @Override
     public void tearDown() {
         doc = null;
     }
Index: contrib/ant/src/test/org/apache/lucene/ant/TextDocumentTest.java
===================================================================
--- contrib/ant/src/test/org/apache/lucene/ant/TextDocumentTest.java	(revision 833861)
+++ contrib/ant/src/test/org/apache/lucene/ant/TextDocumentTest.java	(working copy)
@@ -30,6 +30,7 @@
     
     TextDocument doc;
     
+    @Override
     public void setUp() throws IOException {
         doc = new TextDocument(getFile("test.txt"));
     }
@@ -38,6 +39,7 @@
         assertEquals("Contents", "Test Contents", doc.getContents());
     }
     
+    @Override
     public void tearDown() {
         doc = null;
     }
Index: contrib/ant/src/test/org/apache/lucene/ant/IndexTaskTest.java
===================================================================
--- contrib/ant/src/test/org/apache/lucene/ant/IndexTaskTest.java	(revision 833861)
+++ contrib/ant/src/test/org/apache/lucene/ant/IndexTaskTest.java	(working copy)
@@ -54,6 +54,7 @@
      *
      *@exception  IOException  Description of Exception
      */
+    @Override
     public void setUp() throws Exception {
         Project project = new Project();
 
@@ -86,6 +87,7 @@
      *  The teardown method for JUnit
      * TODO: remove indexDir?
      */
+    @Override
     public void tearDown() throws IOException {
         searcher.close();
         dir.close();
Index: contrib/ant/src/java/org/apache/lucene/ant/IndexTask.java
===================================================================
--- contrib/ant/src/java/org/apache/lucene/ant/IndexTask.java	(revision 833861)
+++ contrib/ant/src/java/org/apache/lucene/ant/IndexTask.java	(working copy)
@@ -220,6 +220,7 @@
    *@exception  BuildException  If an error occurs indexing the
    *      fileset
    */
+  @Override
   public void execute() throws BuildException {
 
     // construct handler and analyzer dynamically
@@ -426,6 +427,7 @@
     /**
      * @see EnumeratedAttribute#getValues
      */
+    @Override
     public String[] getValues() {
       Set keys = analyzerLookup.keySet();
       return (String[]) keys.toArray(new String[0]);
Index: contrib/ant/src/java/org/apache/lucene/ant/DocumentHandlerException.java
===================================================================
--- contrib/ant/src/java/org/apache/lucene/ant/DocumentHandlerException.java	(revision 833861)
+++ contrib/ant/src/java/org/apache/lucene/ant/DocumentHandlerException.java	(working copy)
@@ -53,10 +53,12 @@
         return cause;
     }
 
+    @Override
     public void printStackTrace() {
         printStackTrace(System.err);
     }
 
+    @Override
     public void printStackTrace(PrintStream ps) {
         synchronized (ps) {
             super.printStackTrace(ps);
@@ -67,6 +69,7 @@
         }
     }
 
+    @Override
     public void printStackTrace(PrintWriter pw) {
         synchronized (pw) {
             super.printStackTrace(pw);
Index: contrib/wordnet/src/test/org/apache/lucene/wordnet/TestSynonymTokenFilter.java
===================================================================
--- contrib/wordnet/src/test/org/apache/lucene/wordnet/TestSynonymTokenFilter.java	(revision 833861)
+++ contrib/wordnet/src/test/org/apache/lucene/wordnet/TestSynonymTokenFilter.java	(working copy)
@@ -93,6 +93,7 @@
       this.maxSynonyms = maxSynonyms;
     }
     
+    @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {
       TokenStream ts = new WhitespaceTokenizer(reader);
       ts = new LowerCaseFilter(ts);
@@ -105,6 +106,7 @@
       TokenStream result;
     };
     
+    @Override
     public TokenStream reusableTokenStream(String fieldName, Reader reader)
         throws IOException {
       SavedStreams streams = (SavedStreams) getPreviousTokenStream();
Index: contrib/wordnet/src/java/org/apache/lucene/wordnet/AnalyzerUtil.java
===================================================================
--- contrib/wordnet/src/java/org/apache/lucene/wordnet/AnalyzerUtil.java	(revision 833861)
+++ contrib/wordnet/src/java/org/apache/lucene/wordnet/AnalyzerUtil.java	(working copy)
@@ -72,6 +72,7 @@
       throw new IllegalArgumentException("logStream must not be null");
 
     return new Analyzer() {
+      @Override
       public TokenStream tokenStream(final String fieldName, Reader reader) {
         return new TokenFilter(child.tokenStream(fieldName, reader)) {
           private int position = -1;
@@ -80,6 +81,7 @@
           private OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);
           private TypeAttribute typeAtt = addAttribute(TypeAttribute.class);
          
+          @Override
           public boolean incrementToken() throws IOException {
             boolean hasNext = input.incrementToken();
             log.println(toString(hasNext));
@@ -124,10 +126,12 @@
       return child; // no need to wrap
   
     return new Analyzer() {
+      @Override
       public TokenStream tokenStream(String fieldName, Reader reader) {
         return new TokenFilter(child.tokenStream(fieldName, reader)) {
           private int todo = maxTokens;
           
+          @Override
           public boolean incrementToken() throws IOException {
             return --todo >= 0 ? input.incrementToken() : false;
           }
@@ -163,6 +167,7 @@
       throw new IllegalArgumentException("child analyzer must not be null");
   
     return new Analyzer() {
+      @Override
       public TokenStream tokenStream(String fieldName, Reader reader) {
         return new PorterStemFilter(
             child.tokenStream(fieldName, reader));
@@ -201,6 +206,7 @@
       return child; // no need to wrap
   
     return new Analyzer() {
+      @Override
       public TokenStream tokenStream(String fieldName, Reader reader) {
         return new SynonymTokenFilter(
           child.tokenStream(fieldName, reader), synonyms, maxSynonyms);
@@ -240,12 +246,14 @@
 
       private final HashMap<String,ArrayList<AttributeSource.State>> cache = new HashMap<String,ArrayList<AttributeSource.State>>();
 
+      @Override
       public TokenStream tokenStream(String fieldName, Reader reader) {
         final ArrayList<AttributeSource.State> tokens = cache.get(fieldName);
         if (tokens == null) { // not yet cached
           final ArrayList<AttributeSource.State> tokens2 = new ArrayList<AttributeSource.State>();
           TokenStream tokenStream = new TokenFilter(child.tokenStream(fieldName, reader)) {
 
+            @Override
             public boolean incrementToken() throws IOException {
               boolean hasNext = input.incrementToken();
               if (hasNext) tokens2.add(captureState());
@@ -260,6 +268,7 @@
 
             private Iterator<AttributeSource.State> iter = tokens.iterator();
 
+            @Override
             public boolean incrementToken() {
               if (!iter.hasNext()) return false;
               restoreState(iter.next());
@@ -356,6 +365,7 @@
     public MutableInteger(int value) { this.value = value; }
     public int intValue() { return value; }
     public void setValue(int value) { this.value = value; }
+    @Override
     public String toString() { return String.valueOf(value); }
   };
   
Index: contrib/wordnet/src/java/org/apache/lucene/wordnet/SynLookup.java
===================================================================
--- contrib/wordnet/src/java/org/apache/lucene/wordnet/SynLookup.java	(revision 833861)
+++ contrib/wordnet/src/java/org/apache/lucene/wordnet/SynLookup.java	(working copy)
@@ -52,12 +52,16 @@
   final static class CountingCollector extends Collector {
     public int numHits = 0;
     
+    @Override
     public void setScorer(Scorer scorer) throws IOException {}
+    @Override
     public void collect(int doc) throws IOException {
       numHits++;
     }
 
+    @Override
     public void setNextReader(IndexReader reader, int docBase) {}
+    @Override
     public boolean acceptsDocsOutOfOrder() {
       return true;
     }    
Index: contrib/wordnet/src/java/org/apache/lucene/wordnet/SynonymTokenFilter.java
===================================================================
--- contrib/wordnet/src/java/org/apache/lucene/wordnet/SynonymTokenFilter.java	(revision 833861)
+++ contrib/wordnet/src/java/org/apache/lucene/wordnet/SynonymTokenFilter.java	(working copy)
@@ -78,6 +78,7 @@
   }
   
   /** Returns the next token in the stream, or null at EOS. */
+  @Override
   public final boolean incrementToken() throws IOException {
     while (todo > 0 && index < stack.length) { // pop from stack
       if (createToken(stack[index++], current)) {
@@ -140,6 +141,7 @@
     }   
   }
 
+  @Override
   public void reset() throws IOException {
     super.reset();
     stack = null;
Index: contrib/wordnet/src/java/org/apache/lucene/wordnet/SynonymMap.java
===================================================================
--- contrib/wordnet/src/java/org/apache/lucene/wordnet/SynonymMap.java	(revision 833861)
+++ contrib/wordnet/src/java/org/apache/lucene/wordnet/SynonymMap.java	(working copy)
@@ -121,6 +121,7 @@
    * 
    * @return a String representation
    */
+  @Override
   public String toString() {
     StringBuilder buf = new StringBuilder();
     Iterator<String> iter = new TreeMap<String,String[]>(table).keySet().iterator();
Index: contrib/collation/src/test/org/apache/lucene/collation/TestCollationKeyFilter.java
===================================================================
--- contrib/collation/src/test/org/apache/lucene/collation/TestCollationKeyFilter.java	(revision 833861)
+++ contrib/collation/src/test/org/apache/lucene/collation/TestCollationKeyFilter.java	(working copy)
@@ -52,6 +52,7 @@
       this.collator = collator;
     }
 
+    @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {
       TokenStream result = new KeywordTokenizer(reader);
       result = new CollationKeyFilter(result, collator);
Index: contrib/collation/src/test/org/apache/lucene/collation/TestICUCollationKeyFilter.java
===================================================================
--- contrib/collation/src/test/org/apache/lucene/collation/TestICUCollationKeyFilter.java	(revision 833861)
+++ contrib/collation/src/test/org/apache/lucene/collation/TestICUCollationKeyFilter.java	(working copy)
@@ -49,6 +49,7 @@
       this.collator = collator;
     }
 
+    @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {
       TokenStream result = new KeywordTokenizer(reader);
       result = new ICUCollationKeyFilter(result, collator);
Index: contrib/collation/src/java/org/apache/lucene/collation/CollationKeyAnalyzer.java
===================================================================
--- contrib/collation/src/java/org/apache/lucene/collation/CollationKeyAnalyzer.java	(revision 833861)
+++ contrib/collation/src/java/org/apache/lucene/collation/CollationKeyAnalyzer.java	(working copy)
@@ -82,6 +82,7 @@
     this.collator = collator;
   }
 
+  @Override
   public TokenStream tokenStream(String fieldName, Reader reader) {
     TokenStream result = new KeywordTokenizer(reader);
     result = new CollationKeyFilter(result, collator);
@@ -93,6 +94,7 @@
     TokenStream result;
   }
   
+  @Override
   public TokenStream reusableTokenStream(String fieldName, Reader reader) 
     throws IOException {
     
Index: contrib/collation/src/java/org/apache/lucene/collation/CollationKeyFilter.java
===================================================================
--- contrib/collation/src/java/org/apache/lucene/collation/CollationKeyFilter.java	(revision 833861)
+++ contrib/collation/src/java/org/apache/lucene/collation/CollationKeyFilter.java	(working copy)
@@ -88,6 +88,7 @@
     termAtt = addAttribute(TermAttribute.class);
   }
 
+  @Override
   public boolean incrementToken() throws IOException {
     if (input.incrementToken()) {
       char[] termBuffer = termAtt.termBuffer();
Index: contrib/collation/src/java/org/apache/lucene/collation/ICUCollationKeyAnalyzer.java
===================================================================
--- contrib/collation/src/java/org/apache/lucene/collation/ICUCollationKeyAnalyzer.java	(revision 833861)
+++ contrib/collation/src/java/org/apache/lucene/collation/ICUCollationKeyAnalyzer.java	(working copy)
@@ -76,6 +76,7 @@
     this.collator = collator;
   }
 
+  @Override
   public TokenStream tokenStream(String fieldName, Reader reader) {
     TokenStream result = new KeywordTokenizer(reader);
     result = new ICUCollationKeyFilter(result, collator);
@@ -87,6 +88,7 @@
     TokenStream result;
   }
   
+  @Override
   public TokenStream reusableTokenStream(String fieldName, Reader reader) 
     throws IOException {
     
Index: contrib/collation/src/java/org/apache/lucene/collation/ICUCollationKeyFilter.java
===================================================================
--- contrib/collation/src/java/org/apache/lucene/collation/ICUCollationKeyFilter.java	(revision 833861)
+++ contrib/collation/src/java/org/apache/lucene/collation/ICUCollationKeyFilter.java	(working copy)
@@ -86,6 +86,7 @@
     termAtt = addAttribute(TermAttribute.class);
   }
 
+  @Override
   public boolean incrementToken() throws IOException {
     if (input.incrementToken()) {
       char[] termBuffer = termAtt.termBuffer();
Index: contrib/db/bdb-je/src/test/org/apache/lucene/store/je/JEStoreTest.java
===================================================================
--- contrib/db/bdb-je/src/test/org/apache/lucene/store/je/JEStoreTest.java	(revision 833861)
+++ contrib/db/bdb-je/src/test/org/apache/lucene/store/je/JEStoreTest.java	(working copy)
@@ -52,6 +52,7 @@
 
     protected Database index, blocks;
 
+    @Override
     public void setUp() throws Exception {
 
         if (!dbHome.exists())
@@ -97,6 +98,7 @@
         }
     }
 
+    @Override
     public void tearDown() throws Exception {
 
         if (index != null)
Index: contrib/db/bdb-je/src/java/org/apache/lucene/store/je/JEDirectory.java
===================================================================
--- contrib/db/bdb-je/src/java/org/apache/lucene/store/je/JEDirectory.java	(revision 833861)
+++ contrib/db/bdb-je/src/java/org/apache/lucene/store/je/JEDirectory.java	(working copy)
@@ -89,6 +89,7 @@
         this(txn, files, blocks, 0);
     }
 
+    @Override
     public void close() throws IOException {
         flush();
     }
@@ -110,18 +111,22 @@
         }
     }
 
+    @Override
     public IndexOutput createOutput(String name) throws IOException {
         return new JEIndexOutput(this, name, true);
     }
 
+    @Override
     public void deleteFile(String name) throws IOException {
         new File(name).delete(this);
     }
 
+    @Override
     public boolean fileExists(String name) throws IOException {
         return new File(name).exists(this);
     }
 
+    @Override
     public long fileLength(String name) throws IOException {
         File file = new File(name);
 
@@ -131,6 +136,7 @@
         throw new IOException("File does not exist: " + name);
     }
 
+    @Override
     public long fileModified(String name) throws IOException {
         File file = new File(name);
 
@@ -140,6 +146,7 @@
         throw new IOException("File does not exist: " + name);
     }
 
+    @Override
     public String[] listAll() throws IOException {
         Cursor cursor = null;
         List list = new ArrayList();
@@ -182,14 +189,17 @@
         return (String[]) list.toArray(new String[list.size()]);
     }
 
+    @Override
     public IndexInput openInput(String name) throws IOException {
         return new JEIndexInput(this, name);
     }
 
+    @Override
     public Lock makeLock(String name) {
         return new JELock();
     }
 
+    @Override
     public void touchFile(String name) throws IOException {
         File file = new File(name);
         long length = 0L;
Index: contrib/db/bdb-je/src/java/org/apache/lucene/store/je/JEIndexInput.java
===================================================================
--- contrib/db/bdb-je/src/java/org/apache/lucene/store/je/JEIndexInput.java	(revision 833861)
+++ contrib/db/bdb-je/src/java/org/apache/lucene/store/je/JEIndexInput.java	(working copy)
@@ -51,6 +51,7 @@
         block.get(directory);
     }
 
+    @Override
     public Object clone() {
         try {
             JEIndexInput clone = (JEIndexInput) super.clone();
@@ -65,13 +66,16 @@
         }
     }
 
+    @Override
     public void close() throws IOException {
     }
 
+    @Override
     public long length() {
         return length;
     }
 
+    @Override
     public byte readByte() throws IOException {
         if (position + 1 > length)
             throw new IOException(file.getName() + ": Reading past end of file");
@@ -87,6 +91,7 @@
         return b;
     }
 
+    @Override
     public void readBytes(byte[] b, int offset, int len) throws IOException {
         if (position + len > length)
             throw new IOException("Reading past end of file");
@@ -116,6 +121,7 @@
         }
     }
 
+    @Override
     public void seek(long pos) throws IOException {
         if (pos > length)
             throw new IOException("seeking past end of file");
@@ -128,6 +134,7 @@
         position = pos;
     }
 
+    @Override
     public long getFilePointer() {
         return position;
     }
Index: contrib/db/bdb-je/src/java/org/apache/lucene/store/je/JEIndexOutput.java
===================================================================
--- contrib/db/bdb-je/src/java/org/apache/lucene/store/je/JEIndexOutput.java	(revision 833861)
+++ contrib/db/bdb-je/src/java/org/apache/lucene/store/je/JEIndexOutput.java	(working copy)
@@ -62,6 +62,7 @@
         directory.openFiles.add(this);
     }
 
+    @Override
     public void close() throws IOException {
         flush();
         file.modify(directory, length, System.currentTimeMillis());
@@ -69,11 +70,13 @@
         directory.openFiles.remove(this);
     }
 
+    @Override
     public void flush() throws IOException {
         if (length > 0)
             block.put(directory);
     }
 
+    @Override
     public void writeByte(byte b) throws IOException {
         int blockPos = (int) (position++ & BLOCK_MASK);
 
@@ -89,6 +92,7 @@
             length = position;
     }
 
+    @Override
     public void writeBytes(byte[] b, int offset, int len) throws IOException {
         int blockPos = (int) (position & BLOCK_MASK);
 
@@ -116,10 +120,12 @@
             length = position;
     }
 
+    @Override
     public long length() throws IOException {
         return length;
     }
 
+    @Override
     public void seek(long pos) throws IOException {
         if (pos > length)
             throw new IOException("seeking past end of file");
@@ -134,6 +140,7 @@
         }
     }
 
+    @Override
     public long getFilePointer() {
         return position;
     }
Index: contrib/db/bdb-je/src/java/org/apache/lucene/store/je/JELock.java
===================================================================
--- contrib/db/bdb-je/src/java/org/apache/lucene/store/je/JELock.java	(revision 833861)
+++ contrib/db/bdb-je/src/java/org/apache/lucene/store/je/JELock.java	(working copy)
@@ -32,16 +32,19 @@
     {
     }
 
+    @Override
     public boolean obtain()
     {
         return (isLocked = true);
     }
 
+    @Override
     public void release()
     {
         isLocked = false;
     }
 
+    @Override
     public boolean isLocked()
     {
         return isLocked;
Index: contrib/db/bdb/src/test/org/apache/lucene/store/db/DbStoreTest.java
===================================================================
--- contrib/db/bdb/src/test/org/apache/lucene/store/db/DbStoreTest.java	(revision 833861)
+++ contrib/db/bdb/src/test/org/apache/lucene/store/db/DbStoreTest.java	(working copy)
@@ -47,6 +47,7 @@
     protected Environment env;
     protected Database index, blocks;
     
+    @Override
     public void setUp()
         throws Exception
     {
@@ -99,6 +100,7 @@
         }
     }
 
+    @Override
     public void tearDown()
         throws Exception
     {
Index: contrib/db/bdb/src/java/org/apache/lucene/store/db/DbDirectory.java
===================================================================
--- contrib/db/bdb/src/java/org/apache/lucene/store/db/DbDirectory.java	(revision 833861)
+++ contrib/db/bdb/src/java/org/apache/lucene/store/db/DbDirectory.java	(working copy)
@@ -97,6 +97,7 @@
         this(txn, files, blocks, 0);
     }
 
+    @Override
     public void close()
         throws IOException
     {
@@ -118,24 +119,28 @@
             ((IndexOutput) iterator.next()).flush();
     }
 
+    @Override
     public IndexOutput createOutput(String name)
         throws IOException
     {
         return new DbIndexOutput(this, name, true);
     }
 
+    @Override
     public void deleteFile(String name)
         throws IOException
     {
         new File(name).delete(this);
     }
 
+    @Override
     public boolean fileExists(String name)
         throws IOException
     {
         return new File(name).exists(this);
     }
 
+    @Override
     public long fileLength(String name)
         throws IOException
     {
@@ -147,6 +152,7 @@
         throw new IOException("File does not exist: " + name);
     }
     
+    @Override
     public long fileModified(String name)
         throws IOException
     {
@@ -158,6 +164,7 @@
         throw new IOException("File does not exist: " + name);
     }
 
+    @Override
     public String[] listAll()
         throws IOException
     {
@@ -205,17 +212,20 @@
         return (String[]) list.toArray(new String[list.size()]);
     }
 
+    @Override
     public IndexInput openInput(String name)
         throws IOException
     {
         return new DbIndexInput(this, name);
     }
 
+    @Override
     public Lock makeLock(String name)
     {
         return new DbLock();
     }
 
+    @Override
     public void touchFile(String name)
         throws IOException
     {
Index: contrib/db/bdb/src/java/org/apache/lucene/store/db/DbIndexInput.java
===================================================================
--- contrib/db/bdb/src/java/org/apache/lucene/store/db/DbIndexInput.java	(revision 833861)
+++ contrib/db/bdb/src/java/org/apache/lucene/store/db/DbIndexInput.java	(working copy)
@@ -47,6 +47,7 @@
         block.get(directory);
     }
 
+    @Override
     public Object clone()
     {
         try {
@@ -62,16 +63,19 @@
         }
     }
 
+    @Override
     public void close()
         throws IOException
     {
     }
 
+    @Override
     public long length()
     {
         return length;
     }
 
+    @Override
     public byte readByte()
         throws IOException
     {
@@ -90,6 +94,7 @@
         return b;
     }
 
+    @Override
     public void readBytes(byte[] b, int offset, int len)
         throws IOException
     {
@@ -122,6 +127,7 @@
         }
     }
 
+    @Override
     public void seek(long pos)
         throws IOException
     {
@@ -138,6 +144,7 @@
         position = pos;
     }
 
+    @Override
     public long getFilePointer()
     {
         return position;
Index: contrib/db/bdb/src/java/org/apache/lucene/store/db/DbIndexOutput.java
===================================================================
--- contrib/db/bdb/src/java/org/apache/lucene/store/db/DbIndexOutput.java	(revision 833861)
+++ contrib/db/bdb/src/java/org/apache/lucene/store/db/DbIndexOutput.java	(working copy)
@@ -55,6 +55,7 @@
         directory.openFiles.add(this);
     }
 
+    @Override
     public void close()
         throws IOException
     {
@@ -64,6 +65,7 @@
         directory.openFiles.remove(this);
     }
 
+    @Override
     public void flush()
         throws IOException
     {
@@ -71,6 +73,7 @@
             block.put(directory);
     }
 
+    @Override
     public void writeByte(byte b)
         throws IOException
     {
@@ -89,6 +92,7 @@
             length = position;
     }
 
+    @Override
     public void writeBytes(byte[] b, int offset, int len)
         throws IOException
     {
@@ -119,12 +123,14 @@
             length = position;
     }
 
+    @Override
     public long length()
         throws IOException
     {
         return length;
     }
 
+    @Override
     public void seek(long pos)
         throws IOException
     {
@@ -142,6 +148,7 @@
         }
     }
 
+    @Override
     public long getFilePointer()
     {
         return position;
Index: contrib/db/bdb/src/java/org/apache/lucene/store/db/DbLock.java
===================================================================
--- contrib/db/bdb/src/java/org/apache/lucene/store/db/DbLock.java	(revision 833861)
+++ contrib/db/bdb/src/java/org/apache/lucene/store/db/DbLock.java	(working copy)
@@ -34,16 +34,19 @@
     {
     }
 
+    @Override
     public boolean obtain()
     {
         return (isLocked = true);
     }
 
+    @Override
     public void release()
     {
         isLocked = false;
     }
 
+    @Override
     public boolean isLocked()
     {
         return isLocked;
Index: contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestRealTime.java
===================================================================
--- contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestRealTime.java	(revision 833861)
+++ contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestRealTime.java	(working copy)
@@ -64,9 +64,13 @@
 
   public static class Collector extends org.apache.lucene.search.Collector {
     private int hits = 0;
+    @Override
     public void setScorer(Scorer scorer) {}
+    @Override
     public void setNextReader(IndexReader reader, int docBase) {}
+    @Override
     public boolean acceptsDocsOutOfOrder() { return true; }
+    @Override
     public void collect(int doc) {
       hits++;
     }
Index: contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals.java
===================================================================
--- contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals.java	(revision 833861)
+++ contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals.java	(working copy)
@@ -179,6 +179,7 @@
                 final AttributeImpl reusableToken = (AttributeImpl) addAttribute(TermAttribute.class);
                 Iterator<Token> it = tokens.iterator();
                 
+                @Override
                 public final boolean incrementToken() throws IOException {
                   if (!it.hasNext()) {
                     return false;
@@ -188,6 +189,7 @@
                   return true;
                 }
 
+                @Override
                 public void reset() throws IOException {
                   it = tokens.iterator();
                 }
Index: contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader.java
===================================================================
--- contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader.java	(revision 833861)
+++ contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader.java	(working copy)
@@ -58,6 +58,7 @@
   /**
    * @return always true.
    */
+  @Override
   public boolean isOptimized() {
     return true;
   }
@@ -68,10 +69,12 @@
    * 
    * @return output from {@link InstantiatedIndex#getVersion()} in associated instantiated index.
    */
+  @Override
   public long getVersion() {
     return index.getVersion();
   }
 
+  @Override
   public Directory directory() {
     throw new UnsupportedOperationException();
   }
@@ -93,6 +96,7 @@
    * @throws IOException if there is a low-level IO error
    * @throws UnsupportedOperationException unless overridden in subclass
    */
+  @Override
   public boolean isCurrent() throws IOException {
     return true;
   }
@@ -115,22 +119,27 @@
     }
   }
 
+  @Override
   public int numDocs() {
     return getIndex().getDocumentsByNumber().length - index.getDeletedDocuments().size() - deletedDocuments.size();
   }
 
+  @Override
   public int maxDoc() {
     return getIndex().getDocumentsByNumber().length;
   }
 
+  @Override
   public boolean isDeleted(int n) {
     return getIndex().getDeletedDocuments().contains(n) || deletedDocumentNumbers.contains(n);
   }
 
+  @Override
   public boolean hasDeletions() {
     return getIndex().getDeletedDocuments().size() > 0 || deletedDocumentNumbers.size() > 0;
   }
 
+  @Override
   protected void doDelete(int docNum) throws IOException {
     if (!getIndex().getDeletedDocuments().contains(docNum)) {
       if (deletedDocumentNumbers.add(docNum)) {
@@ -139,11 +148,13 @@
     }
   }
 
+  @Override
   protected void doUndeleteAll() throws IOException {
     deletedDocumentNumbers.clear();
     deletedDocuments.clear();
   }
 
+  @Override
   protected void doCommit(Map commitUserData) throws IOException {
     // todo: read/write lock
 
@@ -177,11 +188,13 @@
     // todo unlock read/writelock
   }
 
+  @Override
   protected void doClose() throws IOException {
     // ignored
     // todo perhaps release all associated instances?
   }
 
+  @Override
   public Collection getFieldNames(FieldOption fieldOption) {
     Set<String> fieldSet = new HashSet<String>();
     for (FieldSetting fi : index.getFieldSettings().values()) {
@@ -245,6 +258,7 @@
    * @see org.apache.lucene.document.SetBasedFieldSelector
    * @see org.apache.lucene.document.LoadFirstFieldSelector
    */
+  @Override
   public Document document(int n, FieldSelector fieldSelector) throws CorruptIndexException, IOException {
     return document(n);
   }
@@ -270,6 +284,7 @@
    * @throws IOException if there is a low-level IO error
    */
 
+  @Override
   public Document document(int n) throws IOException {
     return isDeleted(n) ? null : getIndex().getDocumentsByNumber()[n].getDocument();
   }
@@ -278,6 +293,7 @@
    * never ever touch these values. it is the true values, unless norms have
    * been touched.
    */
+  @Override
   public byte[] norms(String field) throws IOException {
     byte[] norms = getIndex().getNormsByFieldNameAndDocumentNumber().get(field);
     if (norms == null) {
@@ -295,6 +311,7 @@
     return norms;
   }
 
+  @Override
   public void norms(String field, byte[] bytes, int offset) throws IOException {
     byte[] norms = getIndex().getNormsByFieldNameAndDocumentNumber().get(field);
     if (norms == null) {
@@ -303,6 +320,7 @@
     System.arraycopy(norms, 0, bytes, offset, norms.length);
   }
 
+  @Override
   protected void doSetNorm(int doc, String field, byte value) throws IOException {
     if (updatedNormsByFieldNameAndDocumentNumber == null) {
       updatedNormsByFieldNameAndDocumentNumber = new HashMap<String,List<NormUpdate>>(getIndex().getNormsByFieldNameAndDocumentNumber().size());
@@ -315,6 +333,7 @@
     list.add(new NormUpdate(doc, value));
   }
 
+  @Override
   public int docFreq(Term t) throws IOException {
     InstantiatedTerm term = getIndex().findTerm(t);
     if (term == null) {
@@ -324,10 +343,12 @@
     }
   }
 
+  @Override
   public TermEnum terms() throws IOException {
     return new InstantiatedTermEnum(this);
   }
 
+  @Override
   public TermEnum terms(Term t) throws IOException {
     InstantiatedTerm it = getIndex().findTerm(t);
     if (it != null) {
@@ -341,14 +362,17 @@
     }
   }
 
+  @Override
   public TermDocs termDocs() throws IOException {
     return new InstantiatedTermDocs(this);
   }
 
+  @Override
   public TermPositions termPositions() throws IOException {
     return new InstantiatedTermPositions(this);
   }
 
+  @Override
   public TermFreqVector[] getTermFreqVectors(int docNumber) throws IOException {
     InstantiatedDocument doc = getIndex().getDocumentsByNumber()[docNumber];
     if (doc.getVectorSpace() == null) {
@@ -362,6 +386,7 @@
     return ret;
   }
 
+  @Override
   public TermFreqVector getTermFreqVector(int docNumber, String field) throws IOException {
     InstantiatedDocument doc = getIndex().getDocumentsByNumber()[docNumber];
     if (doc.getVectorSpace() == null || doc.getVectorSpace().get(field) == null) {
@@ -371,6 +396,7 @@
     }
   }
 
+  @Override
   public void getTermFreqVector(int docNumber, String field, TermVectorMapper mapper) throws IOException {
     InstantiatedDocument doc = getIndex().getDocumentsByNumber()[docNumber];
     if (doc.getVectorSpace() != null && doc.getVectorSpace().get(field) == null) {
@@ -382,6 +408,7 @@
     }
   }
 
+  @Override
   public void getTermFreqVector(int docNumber, TermVectorMapper mapper) throws IOException {
     InstantiatedDocument doc = getIndex().getDocumentsByNumber()[docNumber];
     for (Map.Entry<String,List<InstantiatedTermDocumentInformation>> e : doc.getVectorSpace().entrySet()) {
Index: contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedTermEnum.java
===================================================================
--- contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedTermEnum.java	(revision 833861)
+++ contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedTermEnum.java	(working copy)
@@ -47,6 +47,7 @@
   /**
    * Increments the enumeration to the next element.  True if one exists.
    */
+  @Override
   public boolean next() {
     if (reader.getIndex().getOrderedTerms().length <= nextTermIndex) {
       return false;
@@ -60,6 +61,7 @@
   /**
    * Returns the current Term in the enumeration.
    */
+  @Override
   public Term term() {
     return term == null ? null : term.getTerm();
   }
@@ -67,6 +69,7 @@
   /**
    * Returns the docFreq of the current Term in the enumeration.
    */
+  @Override
   public int docFreq() {
     return term.getAssociatedDocuments().length;
   }
@@ -74,6 +77,7 @@
   /**
    * Closes the enumeration to further activity, freeing resources.
    */
+  @Override
   public void close() {
   }
 
Index: contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedTerm.java
===================================================================
--- contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedTerm.java	(revision 833861)
+++ contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedTerm.java	(working copy)
@@ -235,6 +235,7 @@
     return term.text();
   }
 
+  @Override
   public String toString() {
     return term.toString();
   }
Index: contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedTermFreqVector.java
===================================================================
--- contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedTermFreqVector.java	(revision 833861)
+++ contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedTermFreqVector.java	(working copy)
@@ -57,6 +57,7 @@
     return field;
   }
 
+  @Override
   public String toString() {
     StringBuilder sb = new StringBuilder();
     sb.append('{');
Index: contrib/instantiated/src/java/org/apache/lucene/store/instantiated/FieldSetting.java
===================================================================
--- contrib/instantiated/src/java/org/apache/lucene/store/instantiated/FieldSetting.java	(revision 833861)
+++ contrib/instantiated/src/java/org/apache/lucene/store/instantiated/FieldSetting.java	(working copy)
@@ -42,6 +42,7 @@
     this.fieldName = fieldName;
   }
 
+  @Override
   public boolean equals(Object o) {
     if (this == o)
       return true;
@@ -54,6 +55,7 @@
 
   }
 
+  @Override
   public int hashCode() {
     return fieldName.hashCode();
   }
Index: contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedDocument.java
===================================================================
--- contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedDocument.java	(revision 833861)
+++ contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedDocument.java	(working copy)
@@ -73,6 +73,7 @@
   }
 
 
+  @Override
   public String toString() {
     return document.toString();
   }
Index: contrib/swing/src/test/org/apache/lucene/swing/models/TestSearchingList.java
===================================================================
--- contrib/swing/src/test/org/apache/lucene/swing/models/TestSearchingList.java	(revision 833861)
+++ contrib/swing/src/test/org/apache/lucene/swing/models/TestSearchingList.java	(working copy)
@@ -26,6 +26,7 @@
     private ListModel baseListModel;
     private ListSearcher listSearcher;
 
+    @Override
     protected void setUp() throws Exception {
         baseListModel = new BaseListModel(DataStore.getRestaurants());
         listSearcher = new ListSearcher(baseListModel);
Index: contrib/swing/src/test/org/apache/lucene/swing/models/BaseTableModel.java
===================================================================
--- contrib/swing/src/test/org/apache/lucene/swing/models/BaseTableModel.java	(revision 833861)
+++ contrib/swing/src/test/org/apache/lucene/swing/models/BaseTableModel.java	(working copy)
@@ -60,10 +60,12 @@
         fireTableDataChanged();
     }
 
+    @Override
     public boolean isCellEditable(int rowIndex, int columnIndex) {
         return false;
     }
 
+    @Override
     public Class getColumnClass(int columnIndex) {
         return String.class;
     }
@@ -89,10 +91,12 @@
         }
     }
 
+    @Override
     public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
         //no op
     }
 
+    @Override
     public String getColumnName(int columnIndex) {
         return columnNames.get(columnIndex).toString();
     }
Index: contrib/swing/src/test/org/apache/lucene/swing/models/TestUpdatingTable.java
===================================================================
--- contrib/swing/src/test/org/apache/lucene/swing/models/TestUpdatingTable.java	(revision 833861)
+++ contrib/swing/src/test/org/apache/lucene/swing/models/TestUpdatingTable.java	(working copy)
@@ -25,6 +25,7 @@
 
     RestaurantInfo infoToAdd1, infoToAdd2;
 
+    @Override
     protected void setUp() throws Exception {
         baseTableModel = new BaseTableModel(DataStore.getRestaurants());
         tableSearcher = new TableSearcher(baseTableModel);
Index: contrib/swing/src/test/org/apache/lucene/swing/models/RestaurantInfo.java
===================================================================
--- contrib/swing/src/test/org/apache/lucene/swing/models/RestaurantInfo.java	(revision 833861)
+++ contrib/swing/src/test/org/apache/lucene/swing/models/RestaurantInfo.java	(working copy)
@@ -93,6 +93,7 @@
         this.type = type;
     }
 
+    @Override
     public String toString() {
         return getName() + " - " + getPhone();
     }
Index: contrib/swing/src/test/org/apache/lucene/swing/models/TestUpdatingList.java
===================================================================
--- contrib/swing/src/test/org/apache/lucene/swing/models/TestUpdatingList.java	(revision 833861)
+++ contrib/swing/src/test/org/apache/lucene/swing/models/TestUpdatingList.java	(working copy)
@@ -25,6 +25,7 @@
 
     RestaurantInfo infoToAdd1, infoToAdd2;
 
+    @Override
     protected void setUp() throws Exception {
         baseListModel = new BaseListModel(DataStore.getRestaurants());
         listSearcher = new ListSearcher(baseListModel);
Index: contrib/swing/src/test/org/apache/lucene/swing/models/TestBasicTable.java
===================================================================
--- contrib/swing/src/test/org/apache/lucene/swing/models/TestBasicTable.java	(revision 833861)
+++ contrib/swing/src/test/org/apache/lucene/swing/models/TestBasicTable.java	(working copy)
@@ -29,6 +29,7 @@
     private TableSearcher tableSearcher;
     private List list;
 
+    @Override
     protected void setUp() throws Exception {
         list = new ArrayList();
         list.add(DataStore.canolis);
Index: contrib/swing/src/test/org/apache/lucene/swing/models/TestSearchingTable.java
===================================================================
--- contrib/swing/src/test/org/apache/lucene/swing/models/TestSearchingTable.java	(revision 833861)
+++ contrib/swing/src/test/org/apache/lucene/swing/models/TestSearchingTable.java	(working copy)
@@ -25,6 +25,7 @@
     private TableModel baseTableModel;
     private TableSearcher tableSearcher;
 
+    @Override
     protected void setUp() throws Exception {
         baseTableModel = new BaseTableModel(DataStore.getRestaurants());
         tableSearcher = new TableSearcher(baseTableModel);
Index: contrib/swing/src/test/org/apache/lucene/swing/models/TestBasicList.java
===================================================================
--- contrib/swing/src/test/org/apache/lucene/swing/models/TestBasicList.java	(revision 833861)
+++ contrib/swing/src/test/org/apache/lucene/swing/models/TestBasicList.java	(working copy)
@@ -30,6 +30,7 @@
     private ListSearcher listSearcher;
     private List list;
 
+    @Override
     protected void setUp() throws Exception {
         list = new ArrayList();
         list.add(DataStore.canolis);
Index: contrib/swing/src/java/org/apache/lucene/swing/models/TableSearcher.java
===================================================================
--- contrib/swing/src/java/org/apache/lucene/swing/models/TableSearcher.java	(revision 833861)
+++ contrib/swing/src/java/org/apache/lucene/swing/models/TableSearcher.java	(working copy)
@@ -310,14 +310,17 @@
         return (tableModel == null) ? 0 : tableModel.getColumnCount();
     }
 
+    @Override
     public String getColumnName(int column) {
         return tableModel.getColumnName(column);
     }
 
+    @Override
     public Class getColumnClass(int column) {
         return tableModel.getColumnClass(column);
     }
 
+    @Override
     public boolean isCellEditable(int row, int column) {
         return tableModel.isCellEditable(getModelRow(row), column);
     }
@@ -326,6 +329,7 @@
         return tableModel.getValueAt(getModelRow(row), column);
     }
 
+    @Override
     public void setValueAt(Object aValue, int row, int column) {
         tableModel.setValueAt(aValue, getModelRow(row), column);
     }
Index: contrib/swing/src/java/org/apache/lucene/swing/models/ListSearcher.java
===================================================================
--- contrib/swing/src/java/org/apache/lucene/swing/models/ListSearcher.java	(revision 833861)
+++ contrib/swing/src/java/org/apache/lucene/swing/models/ListSearcher.java	(working copy)
@@ -183,12 +183,16 @@
     final static class CountingCollector extends Collector {
       public int numHits = 0;
       
+      @Override
       public void setScorer(Scorer scorer) throws IOException {}
+      @Override
       public void collect(int doc) throws IOException {
         numHits++;
       }
 
+      @Override
       public void setNextReader(IndexReader reader, int docBase) {}
+      @Override
       public boolean acceptsDocsOutOfOrder() {
         return true;
       }    
Index: contrib/fast-vector-highlighter/src/test/org/apache/lucene/search/vectorhighlight/AbstractTestCase.java
===================================================================
--- contrib/fast-vector-highlighter/src/test/org/apache/lucene/search/vectorhighlight/AbstractTestCase.java	(revision 833861)
+++ contrib/fast-vector-highlighter/src/test/org/apache/lucene/search/vectorhighlight/AbstractTestCase.java	(working copy)
@@ -76,6 +76,7 @@
     "\nWhen you talk about processing speed, the"
   };
 
+  @Override
   protected void setUp() throws Exception {
     analyzerW = new WhitespaceAnalyzer();
     analyzerB = new BigramAnalyzer();
@@ -84,6 +85,7 @@
     dir = new RAMDirectory();
   }
   
+  @Override
   protected void tearDown() throws Exception {
     if( reader != null ){
       reader.close();
@@ -147,6 +149,7 @@
   }
 
   static class BigramAnalyzer extends Analyzer {
+    @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {
       return new BasicNGramTokenizer( reader );
     }
@@ -198,6 +201,7 @@
 
     TermAttribute termAtt = addAttribute(TermAttribute.class);
     OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);
+    @Override
     public boolean incrementToken() throws IOException {
       if( !getNextPartialSnippet() )
         return false;
@@ -211,6 +215,7 @@
       return nextStartOffset;
     }
     
+    @Override
     public final void end(){
       offsetAtt.setOffset(getFinalOffset(),getFinalOffset());
     }
Index: contrib/fast-vector-highlighter/src/test/org/apache/lucene/search/vectorhighlight/IndexTimeSynonymTest.java
===================================================================
--- contrib/fast-vector-highlighter/src/test/org/apache/lucene/search/vectorhighlight/IndexTimeSynonymTest.java	(revision 833861)
+++ contrib/fast-vector-highlighter/src/test/org/apache/lucene/search/vectorhighlight/IndexTimeSynonymTest.java	(working copy)
@@ -298,11 +298,13 @@
       this.tokens = tokens;
     }
     
+    @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {      
       TokenStream ts = new TokenStream(Token.TOKEN_ATTRIBUTE_FACTORY) {
         final AttributeImpl reusableToken = (AttributeImpl) addAttribute(TermAttribute.class);
         int p = 0;
         
+        @Override
         public boolean incrementToken() throws IOException {
           if( p >= tokens.length ) return false;
           clearAttributes();
Index: contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldFragList.java
===================================================================
--- contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldFragList.java	(revision 833861)
+++ contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldFragList.java	(working copy)
@@ -70,6 +70,7 @@
       }
     }
     
+    @Override
     public String toString(){
       StringBuilder sb = new StringBuilder();
       sb.append( "subInfos=(" );
@@ -90,6 +91,7 @@
         this.seqnum = seqnum;
       }
       
+      @Override
       public String toString(){
         StringBuilder sb = new StringBuilder();
         sb.append( text ).append( '(' );
Index: contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack.java
===================================================================
--- contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack.java	(revision 833861)
+++ contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack.java	(working copy)
@@ -159,6 +159,7 @@
     public int getEndOffset(){ return endOffset; }
     public int getPosition(){ return position; }
     
+    @Override
     public String toString(){
       StringBuilder sb = new StringBuilder();
       sb.append( text ).append( '(' ).append(startOffset).append( ',' ).append( endOffset ).append( ',' ).append( position ).append( ')' );
Index: contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldPhraseList.java
===================================================================
--- contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldPhraseList.java	(revision 833861)
+++ contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldPhraseList.java	(working copy)
@@ -153,6 +153,7 @@
       return false;
     }
     
+    @Override
     public String toString(){
       StringBuilder sb = new StringBuilder();
       sb.append( text ).append( '(' ).append( boost ).append( ")(" );
@@ -173,6 +174,7 @@
       void setEndOffset( int endOffset ){
         this.endOffset = endOffset;
       }
+      @Override
       public String toString(){
         StringBuilder sb = new StringBuilder();
         sb.append( '(' ).append( startOffset ).append( ',' ).append( endOffset ).append( ')' );
Index: contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/ScoreOrderFragmentsBuilder.java
===================================================================
--- contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/ScoreOrderFragmentsBuilder.java	(revision 833861)
+++ contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/ScoreOrderFragmentsBuilder.java	(working copy)
@@ -48,6 +48,7 @@
   /**
    * Sort by score the list of WeightedFragInfo
    */
+  @Override
   public List<WeightedFragInfo> getWeightedFragInfoList( List<WeightedFragInfo> src ) {
     Collections.sort( src, new ScoreComparator() );
     return src;
Index: contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/SimpleFragmentsBuilder.java
===================================================================
--- contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/SimpleFragmentsBuilder.java	(revision 833861)
+++ contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/SimpleFragmentsBuilder.java	(working copy)
@@ -47,6 +47,7 @@
   /**
    * do nothing. return the source list.
    */
+  @Override
   public List<WeightedFragInfo> getWeightedFragInfoList( List<WeightedFragInfo> src ) {
     return src;
   }
Index: contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic.java
===================================================================
--- contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic.java	(revision 833861)
+++ contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic.java	(working copy)
@@ -518,6 +518,7 @@
   public static class Reuters20ContentSource extends ReutersContentSource {
     private int nDocs = 0;
 
+    @Override
     public synchronized DocData getNextDocData(DocData docData)
         throws NoMoreDataException, IOException {
       if (nDocs >= 20 && !forever) {
@@ -527,6 +528,7 @@
       return super.getNextDocData(docData);
     }
 
+    @Override
     public synchronized void resetInputs() throws IOException {
       super.resetInputs();
       nDocs = 0;
Index: contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/CountingSearchTestTask.java
===================================================================
--- contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/CountingSearchTestTask.java	(revision 833861)
+++ contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/CountingSearchTestTask.java	(working copy)
@@ -33,6 +33,7 @@
     super(runData);
   }
 
+  @Override
   public int doLogic() throws Exception {
     int res = super.doLogic();
     incrNumSearches();
Index: contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/PerfTaskTest.java
===================================================================
--- contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/PerfTaskTest.java	(revision 833861)
+++ contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/PerfTaskTest.java	(working copy)
@@ -32,6 +32,7 @@
       super(runData);
     }
 
+    @Override
     public int doLogic() throws Exception {
       return 0;
     }
Index: contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/CountingHighlighterTestTask.java
===================================================================
--- contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/CountingHighlighterTestTask.java	(revision 833861)
+++ contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/CountingHighlighterTestTask.java	(working copy)
@@ -43,6 +43,7 @@
     super(runData);
   }
 
+  @Override
   protected Document retrieveDoc(IndexReader ir, int id) throws IOException {
     Document document = ir.document(id);
     if (document != null) {
@@ -51,9 +52,11 @@
     return document;
   }
 
+  @Override
   public BenchmarkHighlighter getBenchmarkHighlighter(Query q) {
     highlighter = new Highlighter(new SimpleHTMLFormatter(), new QueryScorer(q));
     return new BenchmarkHighlighter() {
+      @Override
       public int doHighlight(IndexReader reader, int doc, String field, Document document, Analyzer analyzer, String text) throws Exception {
         TokenStream ts = TokenSources.getAnyTokenStream(reader, doc, field, document, analyzer);
         TextFragment[] frag = highlighter.getBestTextFragments(ts, text, mergeContiguous, maxFrags);
Index: contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTaskTest.java
===================================================================
--- contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTaskTest.java	(revision 833861)
+++ contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTaskTest.java	(working copy)
@@ -40,6 +40,7 @@
   // class has to be public so that Class.forName.newInstance() will work
   public static final class WriteLineDocMaker extends DocMaker {
   
+    @Override
     public Document makeDocument() throws Exception {
       Document doc = new Document();
       doc.add(new Field(BODY_FIELD, "body", Store.NO, Index.NOT_ANALYZED_NO_NORMS));
@@ -53,6 +54,7 @@
   // class has to be public so that Class.forName.newInstance() will work
   public static final class NewLinesDocMaker extends DocMaker {
   
+    @Override
     public Document makeDocument() throws Exception {
       Document doc = new Document();
       doc.add(new Field(BODY_FIELD, "body\r\ntext\ttwo", Store.NO, Index.NOT_ANALYZED_NO_NORMS));
@@ -65,6 +67,7 @@
   
   // class has to be public so that Class.forName.newInstance() will work
   public static final class NoBodyDocMaker extends DocMaker {
+    @Override
     public Document makeDocument() throws Exception {
       Document doc = new Document();
       doc.add(new Field(TITLE_FIELD, "title", Store.NO, Index.NOT_ANALYZED_NO_NORMS));
@@ -75,6 +78,7 @@
   
   // class has to be public so that Class.forName.newInstance() will work
   public static final class NoTitleDocMaker extends DocMaker {
+    @Override
     public Document makeDocument() throws Exception {
       Document doc = new Document();
       doc.add(new Field(BODY_FIELD, "body", Store.NO, Index.NOT_ANALYZED_NO_NORMS));
@@ -85,6 +89,7 @@
   
   // class has to be public so that Class.forName.newInstance() will work
   public static final class JustDateDocMaker extends DocMaker {
+    @Override
     public Document makeDocument() throws Exception {
       Document doc = new Document();
       doc.add(new Field(DATE_FIELD, "date", Store.NO, Index.NOT_ANALYZED_NO_NORMS));
Index: contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest.java
===================================================================
--- contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest.java	(revision 833861)
+++ contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest.java	(working copy)
@@ -41,9 +41,11 @@
 
     private boolean finish = false;
     
+    @Override
     public void close() throws IOException {
     }
 
+    @Override
     public DocData getNextDocData(DocData docData) throws NoMoreDataException,
         IOException {
       if (finish) {
Index: contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/TrecContentSourceTest.java
===================================================================
--- contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/TrecContentSourceTest.java	(revision 833861)
+++ contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/TrecContentSourceTest.java	(working copy)
@@ -40,6 +40,7 @@
       this.forever = forever;
     }
     
+    @Override
     void openNextFile() throws NoMoreDataException, IOException {
       if (reader != null) {
         if (!forever) {
@@ -51,6 +52,7 @@
       reader = new BufferedReader(new StringReader(docs));
     }
     
+    @Override
     public void setConfig(Config config) {
       htmlParser = new DemoHTMLParser();
     }
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder.java	(working copy)
@@ -125,6 +125,7 @@
     TermsDfQueue (int maxSize) {
       initialize(maxSize);
     }
+    @Override
     protected boolean lessThan(TermDf tf1, TermDf tf2) {
       return tf1.df < tf2.df;
     }
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/StringBufferReader.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/StringBufferReader.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/StringBufferReader.java	(working copy)
@@ -72,6 +72,7 @@
     }
   }
 
+  @Override
   public void close() {
     synchronized (lock) {
       sb = null;
@@ -89,6 +90,7 @@
    * @exception IllegalArgumentException If readAheadLimit is < 0
    * @exception IOException If an I/O error occurs
    */
+  @Override
   public void mark(int readAheadLimit) throws IOException {
     if (readAheadLimit < 0){
       throw new IllegalArgumentException("Read-ahead limit cannpt be negative: " + readAheadLimit);
@@ -99,10 +101,12 @@
     }
   }
 
+  @Override
   public boolean markSupported() {
     return true;
   }
 
+  @Override
   public int read() throws IOException {
     synchronized (lock) {
       ensureOpen();
@@ -110,6 +114,7 @@
     }
   }
 
+  @Override
   public int read(char cbuf[], int off, int len) throws IOException {
     synchronized (lock) {
       ensureOpen();
@@ -134,6 +139,7 @@
     }
   }
 
+  @Override
   public boolean ready() throws IOException {
     synchronized (lock) {
       ensureOpen();
@@ -141,6 +147,7 @@
     }
   }
 
+  @Override
   public void reset() throws IOException {
     synchronized (lock) {
       ensureOpen();
@@ -155,6 +162,7 @@
       length = sb.length();
     }
   }
+  @Override
   public long skip(long ns) throws IOException {
     synchronized (lock) {
       ensureOpen();
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Algorithm.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Algorithm.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Algorithm.java	(working copy)
@@ -228,6 +228,7 @@
   /* (non-Javadoc)
    * @see java.lang.Object#toString()
    */
+  @Override
   public String toString() {
     String newline = System.getProperty("line.separator");
     StringBuffer sb = new StringBuffer();
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetTask.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetTask.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetTask.java	(working copy)
@@ -37,6 +37,7 @@
     super(runData);
   }
 
+  @Override
   public boolean withRetrieve() {
     return true;
   }
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PrintReaderTask.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PrintReaderTask.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PrintReaderTask.java	(working copy)
@@ -29,15 +29,18 @@
     super(runData);
   }
   
+  @Override
   public void setParams(String params) {
     super.setParams(params);
     userData = params;
   }
   
+  @Override
   public boolean supportsParams() {
     return true;
   }
   
+  @Override
   public int doLogic() throws Exception {
     Directory dir = getRunData().getDirectory();
     Config config = getRunData().getConfig();
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CommitIndexTask.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CommitIndexTask.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CommitIndexTask.java	(working copy)
@@ -34,15 +34,18 @@
     super(runData);
   }
   
+  @Override
   public boolean supportsParams() {
     return true;
   }
   
+  @Override
   public void setParams(String params) {
     commitUserData = new HashMap<String,String>();
     commitUserData.put(OpenReaderTask.USER_DATA, params);
   }
   
+  @Override
   public int doLogic() throws Exception {
     IndexWriter iw = getRunData().getIndexWriter();
     if (iw != null) {
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ResetSystemSoftTask.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ResetSystemSoftTask.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ResetSystemSoftTask.java	(working copy)
@@ -34,6 +34,7 @@
     super(runData);
   }
 
+  @Override
   public int doLogic() throws Exception {
     getRunData().reinit(false);
     return 0;
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSumByPrefTask.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSumByPrefTask.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSumByPrefTask.java	(working copy)
@@ -36,6 +36,7 @@
 
   protected String prefix;
 
+  @Override
   public int doLogic() throws Exception {
     Report rp = reportSumByPrefix(getRunData().getPoints().taskStats());
     
@@ -81,6 +82,7 @@
   /* (non-Javadoc)
    * @see PerfTask#toString()
    */
+  @Override
   public String toString() {
     return super.toString()+" "+prefix;
   }
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ResetInputsTask.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ResetInputsTask.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ResetInputsTask.java	(working copy)
@@ -31,6 +31,7 @@
     super(runData);
   }
 
+  @Override
   public int doLogic() throws Exception {
     getRunData().resetInputs();
     return 0;
@@ -40,6 +41,7 @@
    * (non-Javadoc)
    * @see org.apache.lucene.benchmark.byTask.tasks.PerfTask#shouldNotRecordStats()
    */
+  @Override
   protected boolean shouldNotRecordStats() {
     return true;
   }
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetVectorHighlightTask.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetVectorHighlightTask.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetVectorHighlightTask.java	(working copy)
@@ -66,6 +66,7 @@
     super(runData);
   }
 
+  @Override
   public void setup() throws Exception {
     super.setup();
     //check to make sure either the doc is being stored
@@ -81,18 +82,22 @@
     }
   }
 
+  @Override
   public boolean withRetrieve() {
     return true;
   }
 
+  @Override
   public int numToHighlight() {
     return numToHighlight;
   }
   
+  @Override
   protected BenchmarkHighlighter getBenchmarkHighlighter(Query q){
     highlighter = new FastVectorHighlighter( false, false );
     final FieldQuery fq = highlighter.getFieldQuery( q );
     return new BenchmarkHighlighter(){
+      @Override
       public int doHighlight(IndexReader reader, int doc, String field,
           Document document, Analyzer analyzer, String text) throws Exception {
         String[] fragments = highlighter.getBestFragments(fq, reader, doc, field, fragSize, maxFrags);
@@ -101,6 +106,7 @@
     };
   }
 
+  @Override
   protected Collection<String> getFieldsToHighlight(Document document) {
     Collection<String> result = super.getFieldsToHighlight(document);
     //if stored is false, then result will be empty, in which case just get all the param fields
@@ -112,6 +118,7 @@
     return result;
   }
 
+  @Override
   public void setParams(String params) {
     String [] splits = params.split(",");
     for (int i = 0; i < splits.length; i++) {
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenIndexTask.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenIndexTask.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenIndexTask.java	(working copy)
@@ -42,6 +42,7 @@
     super(runData);
   }
 
+  @Override
   public int doLogic() throws IOException {
     PerfRunData runData = getRunData();
     Config config = runData.getConfig();
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask.java	(working copy)
@@ -122,6 +122,7 @@
     return indexDeletionPolicy;
   }
   
+  @Override
   public int doLogic() throws IOException {
     PerfRunData runData = getRunData();
     Config config = runData.getConfig();
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask.java	(working copy)
@@ -59,6 +59,7 @@
       setDaemon(true);
     }
 
+    @Override
     public void run() {
 
       IndexReader reader = null;
@@ -106,6 +107,7 @@
     super(runData);
   }
 
+  @Override
   public int doLogic() throws IOException {
     if (t == null) {
       IndexWriter w = getRunData().getIndexWriter();
@@ -115,16 +117,19 @@
     return 1;
   }
 
+  @Override
   public void setParams(String params) {
     super.setParams(params);
     pauseSec = Float.parseFloat(params);
   }
 
+  @Override
   public boolean supportsParams() {
     return true;
   }
 
   // Close the thread
+  @Override
   public void close() throws InterruptedException {
     if (t != null) {
       t.done = true;
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PerfTask.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PerfTask.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PerfTask.java	(working copy)
@@ -117,6 +117,7 @@
     checkObsoleteSettings(config);
   }
   
+  @Override
   protected Object clone() throws CloneNotSupportedException {
     // tasks having non primitive data structures should override this.
     // otherwise parallel running of a task sequence might not run correctly. 
@@ -208,6 +209,7 @@
   /* (non-Javadoc)
    * @see java.lang.Object#toString()
    */
+  @Override
   public String toString() {
     String padd = getPadding();
     StringBuffer sb = new StringBuffer(padd);
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SetPropTask.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SetPropTask.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SetPropTask.java	(working copy)
@@ -37,6 +37,7 @@
   private String name;
   private String value;
   
+  @Override
   public int doLogic() throws Exception {
     if (name==null || value==null) {
       throw new Exception(getName()+" - undefined name or value: name="+name+" value="+value);
@@ -49,6 +50,7 @@
    * Set the params (property name and value).
    * @param params property name and value separated by ','.
    */
+  @Override
   public void setParams(String params) {
     super.setParams(params);
     int k = params.indexOf(",");
@@ -59,6 +61,7 @@
   /* (non-Javadoc)
    * @see org.apache.lucene.benchmark.byTask.tasks.PerfTask#supportsParams()
    */
+  @Override
   public boolean supportsParams() {
     return true;
   }
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CloseIndexTask.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CloseIndexTask.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CloseIndexTask.java	(working copy)
@@ -36,6 +36,7 @@
 
   boolean doWait = true;
 
+  @Override
   public int doLogic() throws IOException {
     IndexWriter iw = getRunData().getIndexWriter();
     if (iw != null) {
@@ -51,11 +52,13 @@
     return 1;
   }
 
+  @Override
   public void setParams(String params) {
     super.setParams(params);
     doWait = Boolean.valueOf(params).booleanValue();
   }
 
+  @Override
   public boolean supportsParams() {
     return true;
   }
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSelectByPrefTask.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSelectByPrefTask.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSelectByPrefTask.java	(working copy)
@@ -33,6 +33,7 @@
     super(runData);
   }
 
+  @Override
   public int doLogic() throws Exception {
     Report rp = reportSelectByPrefix(getRunData().getPoints().taskStats());
     
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTokensTask.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTokensTask.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTokensTask.java	(working copy)
@@ -43,21 +43,25 @@
   // volatile data passed between setup(), doLogic(), tearDown().
   private Document doc = null;
   
+  @Override
   public void setup() throws Exception {
     super.setup();
     DocMaker docMaker = getRunData().getDocMaker();
     doc = docMaker.makeDocument();
   }
 
+  @Override
   protected String getLogMessage(int recsCount) {
     return "read " + recsCount + " docs; " + totalTokenCount + " tokens";
   }
   
+  @Override
   public void tearDown() throws Exception {
     doc = null;
     super.tearDown();
   }
 
+  @Override
   public int doLogic() throws Exception {
     List<Fieldable> fields = doc.getFields();
     Analyzer analyzer = getRunData().getAnalyzer();
@@ -112,9 +116,11 @@
       left = s.length();
       this.upto = 0;
     }
+    @Override
     public int read(char[] c) {
       return read(c, 0, c.length);
     }
+    @Override
     public int read(char[] c, int off, int len) {
       if (left > len) {
         s.getChars(upto, upto+len, c, off);
@@ -131,6 +137,7 @@
         return r;
       }
     }
+    @Override
     public void close() {};
   }
 }
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OptimizeTask.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OptimizeTask.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OptimizeTask.java	(working copy)
@@ -32,6 +32,7 @@
 
   int maxNumSegments = 1;
 
+  @Override
   public int doLogic() throws Exception {
     IndexWriter iw = getRunData().getIndexWriter();
     iw.optimize(maxNumSegments);
@@ -39,11 +40,13 @@
     return 1;
   }
 
+  @Override
   public void setParams(String params) {
     super.setParams(params);
     maxNumSegments = Double.valueOf(params).intValue();
   }
 
+  @Override
   public boolean supportsParams() {
     return true;
   }
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewRoundTask.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewRoundTask.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewRoundTask.java	(working copy)
@@ -30,6 +30,7 @@
     super(runData);
   }
 
+  @Override
   public int doLogic() throws Exception {
     getRunData().getConfig().newRound();
     return 0;
@@ -38,6 +39,7 @@
   /* (non-Javadoc)
    * @see PerfTask#shouldNotRecordStats()
    */
+  @Override
   protected boolean shouldNotRecordStats() {
     return true;
   }
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetHighlightTask.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetHighlightTask.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetHighlightTask.java	(working copy)
@@ -73,6 +73,7 @@
     super(runData);
   }
 
+  @Override
   public void setup() throws Exception {
     super.setup();
     //check to make sure either the doc is being stored
@@ -83,18 +84,22 @@
     maxDocCharsToAnalyze = data.getConfig().get("highlighter.maxDocCharsToAnalyze", Highlighter.DEFAULT_MAX_CHARS_TO_ANALYZE);
   }
 
+  @Override
   public boolean withRetrieve() {
     return true;
   }
 
+  @Override
   public int numToHighlight() {
     return numToHighlight;
   }
   
+  @Override
   protected BenchmarkHighlighter getBenchmarkHighlighter(Query q){
     highlighter = new Highlighter(new SimpleHTMLFormatter(), new QueryScorer(q));
     highlighter.setMaxDocCharsToAnalyze(maxDocCharsToAnalyze);
     return new BenchmarkHighlighter(){
+      @Override
       public int doHighlight(IndexReader reader, int doc, String field,
           Document document, Analyzer analyzer, String text) throws Exception {
         TokenStream ts = TokenSources.getAnyTokenStream(reader, doc, field, document, analyzer);
@@ -104,6 +109,7 @@
     };
   }
 
+  @Override
   protected Collection<String> getFieldsToHighlight(Document document) {
     Collection<String> result = super.getFieldsToHighlight(document);
     //if stored is false, then result will be empty, in which case just get all the param fields
@@ -115,6 +121,7 @@
     return result;
   }
 
+  @Override
   public void setParams(String params) {
     String [] splits = params.split(",");
     for (int i = 0; i < splits.length; i++) {
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTask.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTask.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTask.java	(working copy)
@@ -32,22 +32,27 @@
     super(runData);
   }
 
+  @Override
   public boolean withRetrieve() {
     return false;
   }
 
+  @Override
   public boolean withSearch() {
     return true;
   }
 
+  @Override
   public boolean withTraverse() {
     return false;
   }
 
+  @Override
   public boolean withWarm() {
     return false;
   }
 
+  @Override
   public QueryMaker getQueryMaker() {
     return getRunData().getQueryMaker(this);
   }
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ClearStatsTask.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ClearStatsTask.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ClearStatsTask.java	(working copy)
@@ -29,6 +29,7 @@
     super(runData);
   }
 
+  @Override
   public int doLogic() throws Exception {
     getRunData().getPoints().clearData();
     return 0;
@@ -37,6 +38,7 @@
   /* (non-Javadoc)
    * @see PerfTask#shouldNotRecordStats()
    */
+  @Override
   protected boolean shouldNotRecordStats() {
     return true;
   }
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ResetSystemEraseTask.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ResetSystemEraseTask.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ResetSystemEraseTask.java	(working copy)
@@ -34,6 +34,7 @@
     super(runData);
   }
 
+  @Override
   public int doLogic() throws Exception {
     getRunData().reinit(true);
     return 0;
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/UpdateDocTask.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/UpdateDocTask.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/UpdateDocTask.java	(working copy)
@@ -39,6 +39,7 @@
   // volatile data passed between setup(), doLogic(), tearDown().
   private Document doc = null;
   
+  @Override
   public void setup() throws Exception {
     super.setup();
     DocMaker docMaker = getRunData().getDocMaker();
@@ -49,11 +50,13 @@
     }
   }
 
+  @Override
   public void tearDown() throws Exception {
     doc = null;
     super.tearDown();
   }
 
+  @Override
   public int doLogic() throws Exception {
     final String docID = doc.get(DocMaker.ID_FIELD);
     if (docID == null) {
@@ -63,6 +66,7 @@
     return 1;
   }
 
+  @Override
   protected String getLogMessage(int recsCount) {
     return "updated " + recsCount + " docs";
   }
@@ -71,6 +75,7 @@
    * Set the params (docSize only)
    * @param params docSize, or 0 for no limit.
    */
+  @Override
   public void setParams(String params) {
     super.setParams(params);
     docSize = (int) Float.parseFloat(params); 
@@ -79,6 +84,7 @@
   /* (non-Javadoc)
    * @see org.apache.lucene.benchmark.byTask.tasks.PerfTask#supportsParams()
    */
+  @Override
   public boolean supportsParams() {
     return true;
   }
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask.java	(working copy)
@@ -46,6 +46,7 @@
    * name:string,page:int,subject:string
    * 
    */
+  @Override
   public void setParams(String sortField) {
     super.setParams(sortField);
     String[] fields = sortField.split(",");
@@ -112,38 +113,47 @@
     return type;
   }
 
+  @Override
   public boolean supportsParams() {
     return true;
   }
 
+  @Override
   public QueryMaker getQueryMaker() {
     return getRunData().getQueryMaker(this);
   }
 
+  @Override
   public boolean withRetrieve() {
     return false;
   }
 
+  @Override
   public boolean withSearch() {
     return true;
   }
 
+  @Override
   public boolean withTraverse() {
     return false;
   }
 
+  @Override
   public boolean withWarm() {
     return false;
   }
 
+  @Override
   public boolean withScore() {
     return doScore;
   }
 
+  @Override
   public boolean withMaxScore() {
     return doMaxScore;
   }
   
+  @Override
   public Sort getSort() {
     if (sort == null) {
       throw new IllegalStateException("No sort field was set");
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReopenReaderTask.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReopenReaderTask.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReopenReaderTask.java	(working copy)
@@ -31,6 +31,7 @@
     super(runData);
   }
 
+  @Override
   public int doLogic() throws IOException {
     IndexReader ir = getRunData().getIndexReader();
     IndexReader or = ir;
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReportTask.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReportTask.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReportTask.java	(working copy)
@@ -36,6 +36,7 @@
   /* (non-Javadoc)
    * @see PerfTask#shouldNeverLogAtStart()
    */
+  @Override
   protected boolean shouldNeverLogAtStart() {
     return true;
   }
@@ -43,6 +44,7 @@
   /* (non-Javadoc)
    * @see PerfTask#shouldNotRecordStats()
    */
+  @Override
   protected boolean shouldNotRecordStats() {
     return true;
   }
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/DeleteByPercentTask.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/DeleteByPercentTask.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/DeleteByPercentTask.java	(working copy)
@@ -49,19 +49,23 @@
     random = new Random(runData.getConfig().get("delete.percent.rand.seed", 1717));
   }
   
+  @Override
   public void setup() throws Exception {
     super.setup();
   }
 
+  @Override
   public void setParams(String params) {
     super.setParams(params);
     percent = Double.parseDouble(params)/100;
   }
 
+  @Override
   public boolean supportsParams() {
     return true;
   }
 
+  @Override
   public int doLogic() throws Exception {
     IndexReader r = getRunData().getIndexReader();
     int maxDoc = r.maxDoc();
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/AddDocTask.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/AddDocTask.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/AddDocTask.java	(working copy)
@@ -37,6 +37,7 @@
   // volatile data passed between setup(), doLogic(), tearDown().
   private Document doc = null;
   
+  @Override
   public void setup() throws Exception {
     super.setup();
     DocMaker docMaker = getRunData().getDocMaker();
@@ -47,15 +48,18 @@
     }
   }
 
+  @Override
   public void tearDown() throws Exception {
     doc = null;
     super.tearDown();
   }
 
+  @Override
   protected String getLogMessage(int recsCount) {
     return "added " + recsCount + " docs";
   }
   
+  @Override
   public int doLogic() throws Exception {
     getRunData().getIndexWriter().addDocument(doc);
     return 1;
@@ -65,6 +69,7 @@
    * Set the params (docSize only)
    * @param params docSize, or 0 for no limit.
    */
+  @Override
   public void setParams(String params) {
     super.setParams(params);
     docSize = (int) Float.parseFloat(params); 
@@ -73,6 +78,7 @@
   /* (non-Javadoc)
    * @see org.apache.lucene.benchmark.byTask.tasks.PerfTask#supportsParams()
    */
+  @Override
   public boolean supportsParams() {
     return true;
   }
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepAllTask.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepAllTask.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepAllTask.java	(working copy)
@@ -33,6 +33,7 @@
     super(runData);
    }
 
+  @Override
   public int doLogic() throws Exception {
     Report rp = reportAll(getRunData().getPoints().taskStats());
     
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSumByNameRoundTask.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSumByNameRoundTask.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSumByNameRoundTask.java	(working copy)
@@ -34,6 +34,7 @@
     super(runData);
   }
 
+  @Override
   public int doLogic() throws Exception {
     Report rp = reportSumByNameRound(getRunData().getPoints().taskStats());
 
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetLoadFieldSelectorTask.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetLoadFieldSelectorTask.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetLoadFieldSelectorTask.java	(working copy)
@@ -47,15 +47,18 @@
     
   }
 
+  @Override
   public boolean withRetrieve() {
     return true;
   }
 
 
+  @Override
   protected Document retrieveDoc(IndexReader ir, int id) throws IOException {
     return ir.document(id, fieldSelector);
   }
 
+  @Override
   public void setParams(String params) {
     this.params = params; // cannot just call super.setParams(), b/c it's params differ.
     Set<String> fieldsToLoad = new HashSet<String>();
@@ -70,6 +73,7 @@
   /* (non-Javadoc)
   * @see org.apache.lucene.benchmark.byTask.tasks.PerfTask#supportsParams()
   */
+  @Override
   public boolean supportsParams() {
     return true;
   }
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenReaderTask.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenReaderTask.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenReaderTask.java	(working copy)
@@ -42,6 +42,7 @@
     super(runData);
   }
 
+  @Override
   public int doLogic() throws IOException {
     Directory dir = getRunData().getDirectory();
     Config config = getRunData().getConfig();
@@ -75,6 +76,7 @@
     return r;
   }
   
+  @Override
   public void setParams(String params) {
     super.setParams(params);
     if (params != null) {
@@ -88,6 +90,7 @@
     }
   }
 
+  @Override
   public boolean supportsParams() {
     return true;
   }
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ConsumeContentSourceTask.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ConsumeContentSourceTask.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ConsumeContentSourceTask.java	(working copy)
@@ -50,15 +50,18 @@
     }
   }
 
+  @Override
   protected String getLogMessage(int recsCount) {
     return "read " + recsCount + " documents from the content source";
   }
   
+  @Override
   public void close() throws Exception {
     source.close();
     super.close();
   }
 
+  @Override
   public int doLogic() throws Exception {
     dd = source.getNextDocData(dd);
     return 1;
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CloseReaderTask.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CloseReaderTask.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CloseReaderTask.java	(working copy)
@@ -33,6 +33,7 @@
     super(runData);
   }
 
+  @Override
   public int doLogic() throws IOException {
     IndexReader reader= getRunData().getIndexReader();
     if (reader!=null) {
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/DeleteDocTask.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/DeleteDocTask.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/DeleteDocTask.java	(working copy)
@@ -40,6 +40,7 @@
   private int docid = -1;
   private boolean byStep = true;
   
+  @Override
   public int doLogic() throws Exception {
     getRunData().getIndexReader().deleteDocument(docid);
     lastDeleted = docid;
@@ -49,6 +50,7 @@
   /* (non-Javadoc)
    * @see org.apache.lucene.benchmark.byTask.tasks.PerfTask#setup()
    */
+  @Override
   public void setup() throws Exception {
     super.setup();
     if (deleteStep<0) {
@@ -58,6 +60,7 @@
     docid = (byStep ? lastDeleted + deleteStep : docid);
   }
 
+  @Override
   protected String getLogMessage(int recsCount) {
     return "deleted " + recsCount + " docs, last deleted: " + lastDeleted;
   }
@@ -66,6 +69,7 @@
    * Set the params (docid only)
    * @param params docid to delete, or -1 for deleting by delete gap settings.
    */
+  @Override
   public void setParams(String params) {
     super.setParams(params);
     docid = (int) Float.parseFloat(params);
@@ -75,6 +79,7 @@
   /* (non-Javadoc)
    * @see org.apache.lucene.benchmark.byTask.tasks.PerfTask#supportsParams()
    */
+  @Override
   public boolean supportsParams() {
     return true;
   }
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask.java	(working copy)
@@ -89,10 +89,12 @@
     docMaker = runData.getDocMaker();
   }
 
+  @Override
   protected String getLogMessage(int recsCount) {
     return "Wrote " + recsCount + " line docs";
   }
   
+  @Override
   public int doLogic() throws Exception {
     Document doc = docSize > 0 ? docMaker.makeDocument(docSize) : docMaker.makeDocument();
 
@@ -117,6 +119,7 @@
     return 1;
   }
 
+  @Override
   public void close() throws Exception {
     lineFileOut.close();
     super.close();
@@ -126,6 +129,7 @@
    * Set the params (docSize only)
    * @param params docSize, or 0 for no limit.
    */
+  @Override
   public void setParams(String params) {
     if (super.supportsParams()) {
       super.setParams(params);
@@ -133,6 +137,7 @@
     docSize = (int) Float.parseFloat(params); 
   }
 
+  @Override
   public boolean supportsParams() {
     return true;
   }
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSumByPrefRoundTask.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSumByPrefRoundTask.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSumByPrefRoundTask.java	(working copy)
@@ -34,6 +34,7 @@
     super(runData);
   }
 
+  @Override
   public int doLogic() throws Exception {
     Report rp = reportSumByPrefixRound(getRunData().getPoints().taskStats());
     
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewAnalyzerTask.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewAnalyzerTask.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewAnalyzerTask.java	(working copy)
@@ -50,6 +50,7 @@
     }
   }
 
+  @Override
   public int doLogic() throws IOException {
     String className = null;
     try {
@@ -81,6 +82,7 @@
    * Example Declaration: {"NewAnalyzer" NewAnalyzer(WhitespaceAnalyzer, SimpleAnalyzer, StopAnalyzer, standard.StandardAnalyzer) >
    * @param params analyzerClassName, or empty for the StandardAnalyzer
    */
+  @Override
   public void setParams(String params) {
     super.setParams(params);
     for (StringTokenizer tokenizer = new StringTokenizer(params, ","); tokenizer.hasMoreTokens();) {
@@ -92,6 +94,7 @@
   /* (non-Javadoc)
    * @see org.apache.lucene.benchmark.byTask.tasks.PerfTask#supportsParams()
    */
+  @Override
   public boolean supportsParams() {
     return true;
   }
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravTask.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravTask.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravTask.java	(working copy)
@@ -38,32 +38,39 @@
     super(runData);
   }
 
+  @Override
   public boolean withRetrieve() {
     return false;
   }
 
+  @Override
   public boolean withSearch() {
     return true;
   }
 
+  @Override
   public boolean withTraverse() {
     return true;
   }
 
+  @Override
   public boolean withWarm() {
     return false;
   }
 
   
 
+  @Override
   public QueryMaker getQueryMaker() {
     return getRunData().getQueryMaker(this);
   }
 
+  @Override
   public int traversalSize() {
     return traversalSize;
   }
 
+  @Override
   public void setParams(String params) {
     super.setParams(params);
     traversalSize = (int)Float.parseFloat(params);
@@ -72,6 +79,7 @@
   /* (non-Javadoc)
    * @see org.apache.lucene.benchmark.byTask.tasks.PerfTask#supportsParams()
    */
+  @Override
   public boolean supportsParams() {
     return true;
   }
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/FlushReaderTask.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/FlushReaderTask.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/FlushReaderTask.java	(working copy)
@@ -31,15 +31,18 @@
     super(runData);
   }
   
+  @Override
   public boolean supportsParams() {
     return true;
   }
   
+  @Override
   public void setParams(String params) {
     super.setParams(params);
     userData = params;
   }
   
+  @Override
   public int doLogic() throws IOException {
     IndexReader reader = getRunData().getIndexReader();
     if (userData != null) {
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WarmTask.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WarmTask.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WarmTask.java	(working copy)
@@ -36,22 +36,27 @@
     super(runData);
   }
 
+  @Override
   public boolean withRetrieve() {
     return false;
   }
 
+  @Override
   public boolean withSearch() {
     return false;
   }
 
+  @Override
   public boolean withTraverse() {
     return false;
   }
 
+  @Override
   public boolean withWarm() {
     return true;
   }
 
+  @Override
   public QueryMaker getQueryMaker() {
     return null; // not required for this task.
   }
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSumByNameTask.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSumByNameTask.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSumByNameTask.java	(working copy)
@@ -34,6 +34,7 @@
     super(runData);
   }
 
+  @Override
   public int doLogic() throws Exception {
     Report rp = reportSumByName(getRunData().getPoints().taskStats());
 
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence.java	(working copy)
@@ -56,6 +56,7 @@
     tasks = new ArrayList<PerfTask>();
   }
 
+  @Override
   public void close() throws Exception {
     initTasksArray();
     for(int i=0;i<tasksArray.length;i++) {
@@ -124,6 +125,7 @@
    * (non-Javadoc)
    * @see org.apache.lucene.benchmark.byTask.tasks.PerfTask#doLogic()
    */
+  @Override
   public int doLogic() throws Exception {
     exhausted = resetExhausted = false;
     return ( parallel ? doParallelTasks() : doSerialTasks());
@@ -212,6 +214,7 @@
       for (int i = 0; i < tasksArray.length; i++) {
         final PerfTask task = (PerfTask) tasksArray[i].clone();
         t[indx++] = new Thread() {
+          @Override
           public void run() {
             try {
               int n = task.runAndMaybeStats(letChildReport);
@@ -273,6 +276,7 @@
   /* (non-Javadoc)
    * @see java.lang.Object#toString()
    */
+  @Override
   public String toString() {
     String padd = getPadding();
     StringBuffer sb = new StringBuffer(super.toString());
@@ -342,6 +346,7 @@
     }
   }
 
+  @Override
   public String getName() {
     return seqName; // override to include more info 
   }
@@ -356,6 +361,7 @@
   /* (non-Javadoc)
    * @see java.lang.Object#clone()
    */
+  @Override
   protected Object clone() throws CloneNotSupportedException {
     TaskSequence res = (TaskSequence) super.clone();
     res.tasks = new ArrayList<PerfTask>();
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask.java	(working copy)
@@ -63,6 +63,7 @@
   public ReadTask(PerfRunData runData) {
     super(runData);
   }
+  @Override
   public int doLogic() throws Exception {
     int res = 0;
     boolean closeReader = false;
@@ -224,6 +225,7 @@
   static final int DEFAULT_SEARCH_NUM_HITS = 10;
   private int numHits;
 
+  @Override
   public void setup() throws Exception {
     super.setup();
     numHits = getRunData().getConfig().get("search.num.hits", DEFAULT_SEARCH_NUM_HITS);
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleQueryMaker.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleQueryMaker.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleQueryMaker.java	(working copy)
@@ -42,6 +42,7 @@
    * @return prepared queries.
    * @throws Exception if cannot prepare the queries.
    */
+  @Override
   protected Query[] prepareQueries() throws Exception {
     // analyzer (default is standard analyzer)
     Analyzer anlzr= NewAnalyzerTask.createAnalyzer(config.get("analyzer",
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersQueryMaker.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersQueryMaker.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersQueryMaker.java	(working copy)
@@ -102,6 +102,7 @@
     return queries.toArray(new Query[0]);
   }
   
+  @Override
   protected Query[] prepareQueries() throws Exception {
     // analyzer (default is standard analyzer)
     Analyzer anlzr= NewAnalyzerTask.createAnalyzer(config.get("analyzer",
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiContentSource.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiContentSource.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiContentSource.java	(working copy)
@@ -103,10 +103,12 @@
       return buffer.toString();
     }
     
+    @Override
     public void characters(char[] ch, int start, int length) {
       contents.append(ch, start, length);
     }
 
+    @Override
     public void endElement(String namespace, String simple, String qualified)
       throws SAXException {
       int elemType = getElementType(qualified);
@@ -197,6 +199,7 @@
       }
     }
 
+    @Override
     public void startElement(String namespace, String simple, String qualified,
                              Attributes attributes) {
       int elemType = getElementType(qualified);
@@ -257,6 +260,7 @@
   private InputStream is;
   private Parser parser = new Parser();
   
+  @Override
   public void close() throws IOException {
     synchronized (EnwikiContentSource.this) {
       if (is != null) {
@@ -266,6 +270,7 @@
     }
   }
   
+  @Override
   public synchronized DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {
     String[] tuple = parser.next();
     docData.clear();
@@ -276,11 +281,13 @@
     return docData;
   }
 
+  @Override
   public void resetInputs() throws IOException {
     super.resetInputs();
     is = getInputStream(file);
   }
   
+  @Override
   public void setConfig(Config config) {
     super.setConfig(config);
     keepImages = config.get("keep.image.only.docs", true);
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersContentSource.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersContentSource.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersContentSource.java	(working copy)
@@ -53,6 +53,7 @@
   private int nextFile = 0;
   private int iteration = 0;
   
+  @Override
   public void setConfig(Config config) {
     super.setConfig(config);
     File workDir = new File(config.get("work.dir", "work"));
@@ -89,10 +90,12 @@
   }
 
 
+  @Override
   public void close() throws IOException {
     // TODO implement?
   }
   
+  @Override
   public DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {
     File f = null;
     String name = null;
@@ -138,6 +141,7 @@
     }
   }
 
+  @Override
   public synchronized void resetInputs() throws IOException {
     super.resetInputs();
     nextFile = 0;
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource.java	(working copy)
@@ -216,6 +216,7 @@
     return null; 
   }
   
+  @Override
   public void close() throws IOException {
     if (reader == null) {
       return;
@@ -232,6 +233,7 @@
     reader = null;
   }
 
+  @Override
   public DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {
     String dateStr = null, name = null;
     Reader r = null;
@@ -306,6 +308,7 @@
     return docData;
   }
 
+  @Override
   public void resetInputs() throws IOException {
     synchronized (lock) {
       super.resetInputs();
@@ -315,6 +318,7 @@
     }
   }
 
+  @Override
   public void setConfig(Config config) {
     super.setConfig(config);
     File workDir = new File(config.get("work.dir", "work"));
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleSloppyPhraseQueryMaker.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleSloppyPhraseQueryMaker.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleSloppyPhraseQueryMaker.java	(working copy)
@@ -32,6 +32,7 @@
   /* (non-Javadoc)
    * @see org.apache.lucene.benchmark.byTask.feeds.SimpleQueryMaker#prepareQueries()
    */
+  @Override
   protected Query[] prepareQueries() throws Exception {
     // extract some 100 words from doc text to an array
     String words[];
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SortableSingleDocSource.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SortableSingleDocSource.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SortableSingleDocSource.java	(working copy)
@@ -78,6 +78,7 @@
   private int sortRange;
   private Random r;
 
+  @Override
   public DocData getNextDocData(DocData docData) throws NoMoreDataException {
     docData = super.getNextDocData(docData);
     Properties props = new Properties();
@@ -103,6 +104,7 @@
     return start + r.nextInt(end - start);
   }
 
+  @Override
   public void setConfig(Config config) {
     super.setConfig(config);
     sortRange = config.get("sort.rng", 20000);
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker.java	(working copy)
@@ -44,6 +44,7 @@
 public class FileBasedQueryMaker extends AbstractQueryMaker implements QueryMaker{
 
 
+  @Override
   protected Query[] prepareQueries() throws Exception {
 
     Analyzer anlzr = NewAnalyzerTask.createAnalyzer(config.get("analyzer",
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SingleDocSource.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SingleDocSource.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SingleDocSource.java	(working copy)
@@ -50,8 +50,10 @@
     return docID++;
   }
 
+  @Override
   public void close() throws IOException {}
   
+  @Override
   public DocData getNextDocData(DocData docData) throws NoMoreDataException {
     int id = newdocid();
     addBytes(DOC_TEXT.length());
@@ -61,6 +63,7 @@
     return docData;
   }
 
+  @Override
   public synchronized void resetInputs() throws IOException {
     super.resetInputs();
     docID = 0;
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DirContentSource.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DirContentSource.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DirContentSource.java	(working copy)
@@ -174,10 +174,12 @@
     return dfi.df.parse(dateStr.trim(), dfi.pos);
   }
 
+  @Override
   public void close() throws IOException {
     inputFiles = null;
   }
   
+  @Override
   public DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {
     File f = null;
     String name = null;
@@ -219,12 +221,14 @@
     return docData;
   }
   
+  @Override
   public synchronized void resetInputs() throws IOException {
     super.resetInputs();
     inputFiles = new Iterator(dataDir);
     iteration = 0;
   }
 
+  @Override
   public void setConfig(Config config) {
     super.setConfig(config);
     
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiQueryMaker.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiQueryMaker.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiQueryMaker.java	(working copy)
@@ -122,6 +122,7 @@
     return queries.toArray(new Query[0]);
   }
 
+  @Override
   protected Query[] prepareQueries() throws Exception {
     // analyzer (default is standard analyzer)
     Analyzer anlzr = NewAnalyzerTask.createAnalyzer(config.get("analyzer", StandardAnalyzer.class.getName()));
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiDocMaker.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiDocMaker.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiDocMaker.java	(working copy)
@@ -26,6 +26,7 @@
  * @deprecated Please use {@link DocMaker} instead, with content.source=EnwikiContentSource
  */
 public class EnwikiDocMaker extends DocMaker {
+  @Override
   public void setConfig(Config config) {
     super.setConfig(config);
     // Override whatever content source was set in the config
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LineDocMaker.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LineDocMaker.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LineDocMaker.java	(working copy)
@@ -39,6 +39,7 @@
  * @deprecated Please use {@link DocMaker} instead, with content.source=LineDocSource
  */
 public class LineDocMaker extends DocMaker {
+  @Override
   public void setConfig(Config config) {
     super.setConfig(config);
     source = new LineDocSource();
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LineDocSource.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LineDocSource.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LineDocSource.java	(working copy)
@@ -61,6 +61,7 @@
     }
   }
 
+  @Override
   public void close() throws IOException {
     if (reader != null) {
       reader.close();
@@ -68,6 +69,7 @@
     }
   }
   
+  @Override
   public DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {
     String line;
     synchronized(this) {
@@ -100,11 +102,13 @@
     return docData;
   }
 
+  @Override
   public void resetInputs() throws IOException {
     super.resetInputs();
     openFile();
   }
   
+  @Override
   public void setConfig(Config config) {
     super.setConfig(config);
     String fileName = config.get("docs.file", null);
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/stats/TaskStats.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/stats/TaskStats.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/stats/TaskStats.java	(working copy)
@@ -102,6 +102,7 @@
   /* (non-Javadoc)
    * @see java.lang.Object#toString()
    */
+  @Override
   public String toString() {
     StringBuffer res = new StringBuffer(task.getName());
     res.append(" ");
@@ -178,6 +179,7 @@
   /* (non-Javadoc)
    * @see java.lang.Object#clone()
    */
+  @Override
   public Object clone() throws CloneNotSupportedException {
     return super.clone();
   }
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/QueryData.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/QueryData.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/QueryData.java	(working copy)
@@ -71,6 +71,7 @@
     return "# Query data: R-reopen, W-warmup, T-retrieve, N-no";
   }
 
+  @Override
   public String toString() {
     return id + " " + (reopen ? "R" : "NR") + " " + (warmup ? "W" : "NW") +
       " " + (retrieve ? "T" : "NT") + " [" + q.toString() + "]";
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/MemUsage.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/MemUsage.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/MemUsage.java	(working copy)
@@ -24,6 +24,7 @@
 
   public long maxTotal, minTotal, avgTotal;
 
+  @Override
   public String toString() {
     return toScaledString(1, "B");
   }
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TimeData.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TimeData.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TimeData.java	(working copy)
@@ -64,6 +64,7 @@
     delta = elapsed;
   }
 
+  @Override
   protected Object clone() {
     TimeData td = new TimeData(name);
     td.name = name;
@@ -86,6 +87,7 @@
     return "# count\telapsed\trec/s\tfreeMem\ttotalMem";
   }
 
+  @Override
   public String toString() { return toString(true); }
   /**
    * Return a tab-separated string containing this data.
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TestData.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TestData.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TestData.java	(working copy)
@@ -426,6 +426,7 @@
         return res.toArray(new TestData[0]);
     }
 
+    @Override
     protected Object clone()
     {
         TestData cl = new TestData();
@@ -442,6 +443,7 @@
         return cl;
     }
 
+    @Override
     public String toString()
     {
         StringBuffer res = new StringBuffer();
Index: contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TestRunData.java
===================================================================
--- contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TestRunData.java	(revision 833861)
+++ contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TestRunData.java	(working copy)
@@ -160,6 +160,7 @@
   }
 
   /** Return a string representation. */
+  @Override
   public String toString() {
     StringBuffer sb = new StringBuffer();
     for (final String label : getLabels()) {
Index: contrib/misc/src/test/org/apache/lucene/queryParser/complexPhrase/TestComplexPhraseQuery.java
===================================================================
--- contrib/misc/src/test/org/apache/lucene/queryParser/complexPhrase/TestComplexPhraseQuery.java	(revision 833861)
+++ contrib/misc/src/test/org/apache/lucene/queryParser/complexPhrase/TestComplexPhraseQuery.java	(working copy)
@@ -111,6 +111,7 @@
 
   }
 
+  @Override
   protected void setUp() throws Exception {
     RAMDirectory rd = new RAMDirectory();
     IndexWriter w = new IndexWriter(rd, analyzer, MaxFieldLength.UNLIMITED);
@@ -126,6 +127,7 @@
     searcher = new IndexSearcher(rd, true);
   }
 
+  @Override
   protected void tearDown() throws Exception {
     searcher.close();
   }
Index: contrib/misc/src/test/org/apache/lucene/queryParser/analyzing/TestAnalyzingQueryParser.java
===================================================================
--- contrib/misc/src/test/org/apache/lucene/queryParser/analyzing/TestAnalyzingQueryParser.java	(revision 833861)
+++ contrib/misc/src/test/org/apache/lucene/queryParser/analyzing/TestAnalyzingQueryParser.java	(working copy)
@@ -46,6 +46,7 @@
   private String[] fuzzyInput;
   private String[] fuzzyExpected;
 
+  @Override
   public void setUp() {
     wildcardInput = new String[] { "übersetzung über*ung",
         "Mötley Cr\u00fce Mötl?* Crü?", "Renée Zellweger Ren?? Zellw?ger" };
@@ -109,6 +110,7 @@
   public ASCIIAnalyzer() {
   }
 
+  @Override
   public TokenStream tokenStream(String fieldName, Reader reader) {
     TokenStream result = new StandardTokenizer(Version.LUCENE_CURRENT, reader);
     result = new StandardFilter(result);
Index: contrib/misc/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser.java
===================================================================
--- contrib/misc/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser.java	(revision 833861)
+++ contrib/misc/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser.java	(working copy)
@@ -71,6 +71,7 @@
     TermAttribute termAtt = addAttribute(TermAttribute.class);
     OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);
     
+    @Override
     public boolean incrementToken() throws IOException {
       if (inPhrase) {
         inPhrase = false;
@@ -95,6 +96,7 @@
   public static class QPTestAnalyzer extends Analyzer {
 
     /** Filters LowerCaseTokenizer with StopFilter. */
+    @Override
     public final TokenStream tokenStream(String fieldName, Reader reader) {
       return new QPTestFilter(new LowerCaseTokenizer(reader));
     }
@@ -105,10 +107,12 @@
       super(f, a);
     }
 
+    @Override
     protected Query getFuzzyQuery(String field, String termStr, float minSimilarity) throws ParseException {
       throw new ParseException("Fuzzy queries not allowed");
     }
 
+    @Override
     protected Query getWildcardQuery(String field, String termStr) throws ParseException {
       throw new ParseException("Wildcard queries not allowed");
     }
@@ -116,6 +120,7 @@
 
   private int originalMaxClauses;
 
+  @Override
   public void setUp() throws Exception {
     super.setUp();
     originalMaxClauses = BooleanQuery.getMaxClauseCount();
@@ -593,6 +598,7 @@
   }
 
 
+  @Override
   public void tearDown() {
     BooleanQuery.setMaxClauseCount(originalMaxClauses);
   }
Index: contrib/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter.java
===================================================================
--- contrib/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter.java	(revision 833861)
+++ contrib/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter.java	(working copy)
@@ -29,6 +29,7 @@
   IndexReader input;
   int NUM_DOCS = 11;
 
+  @Override
   public void setUp() throws Exception {
     RAMDirectory dir = new RAMDirectory();
     IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), true,
Index: contrib/misc/src/test/org/apache/lucene/index/TestFieldNormModifier.java
===================================================================
--- contrib/misc/src/test/org/apache/lucene/index/TestFieldNormModifier.java	(revision 833861)
+++ contrib/misc/src/test/org/apache/lucene/index/TestFieldNormModifier.java	(working copy)
@@ -53,11 +53,13 @@
   
   /** inverts the normal notion of lengthNorm */
   public static Similarity s = new DefaultSimilarity() {
+    @Override
     public float lengthNorm(String fieldName, int numTokens) {
       return numTokens;
     }
   };
   
+  @Override
   public void setUp() throws Exception {
     IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, MaxFieldLength.UNLIMITED);
     
@@ -125,15 +127,19 @@
       private int docBase = 0;
       private Scorer scorer;
       
+      @Override
       public final void collect(int doc) throws IOException {
         scores[doc + docBase] = scorer.score();
       }
+      @Override
       public void setNextReader(IndexReader reader, int docBase) {
         this.docBase = docBase;
       }
+      @Override
       public void setScorer(Scorer scorer) throws IOException {
         this.scorer = scorer;
       }
+      @Override
       public boolean acceptsDocsOutOfOrder() {
         return true;
       }
@@ -156,15 +162,19 @@
     searcher.search(new TermQuery(new Term("field", "word")),  new Collector() {
       private int docBase = 0;
       private Scorer scorer;
+      @Override
       public final void collect(int doc) throws IOException {
         scores[doc + docBase] = scorer.score();
       }
+      @Override
       public void setNextReader(IndexReader reader, int docBase) {
         this.docBase = docBase;
       }
+      @Override
       public void setScorer(Scorer scorer) throws IOException {
         this.scorer = scorer;
       }
+      @Override
       public boolean acceptsDocsOutOfOrder() {
         return true;
       }
@@ -204,15 +214,19 @@
     searcher.search(new TermQuery(new Term("untokfield", "20061212")), new Collector() {
       private int docBase = 0;
       private Scorer scorer;
+      @Override
       public final void collect(int doc) throws IOException {
         scores[doc + docBase] = scorer.score();
       }
+      @Override
       public void setNextReader(IndexReader reader, int docBase) {
         this.docBase = docBase;
       }
+      @Override
       public void setScorer(Scorer scorer) throws IOException {
         this.scorer = scorer;
       }
+      @Override
       public boolean acceptsDocsOutOfOrder() {
         return true;
       }
Index: contrib/misc/src/test/org/apache/lucene/misc/ChainedFilterTest.java
===================================================================
--- contrib/misc/src/test/org/apache/lucene/misc/ChainedFilterTest.java	(revision 833861)
+++ contrib/misc/src/test/org/apache/lucene/misc/ChainedFilterTest.java	(working copy)
@@ -54,6 +54,7 @@
   private QueryWrapperFilter bobFilter;
   private QueryWrapperFilter sueFilter;
 
+  @Override
   public void setUp() throws Exception {
     directory = new RAMDirectory();
     IndexWriter writer =
Index: contrib/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest.java
===================================================================
--- contrib/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest.java	(revision 833861)
+++ contrib/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest.java	(working copy)
@@ -182,6 +182,7 @@
   public void testHyperbolicSweetSpot() {
   
     SweetSpotSimilarity ss = new SweetSpotSimilarity() {
+        @Override
         public float tf(int freq) {
           return hyperbolicTf(freq);
         }
Index: contrib/misc/src/test/org/apache/lucene/misc/TestLengthNormModifier.java
===================================================================
--- contrib/misc/src/test/org/apache/lucene/misc/TestLengthNormModifier.java	(revision 833861)
+++ contrib/misc/src/test/org/apache/lucene/misc/TestLengthNormModifier.java	(working copy)
@@ -56,11 +56,13 @@
 
     /** inverts the normal notion of lengthNorm */
     public static Similarity s = new DefaultSimilarity() {
+	    @Override
 	    public float lengthNorm(String fieldName, int numTokens) {
 		return numTokens;
 	    }
 	};
     
+    @Override
     public void setUp() throws Exception {
 	IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, MaxFieldLength.UNLIMITED);
 	
@@ -132,15 +134,19 @@
   searcher.search(new TermQuery(new Term("field", "word")), new Collector() {
     private int docBase = 0;
     private Scorer scorer;
+    @Override
     public final void collect(int doc) throws IOException {
       scores[doc + docBase] = scorer.score();
     }
+    @Override
     public void setNextReader(IndexReader reader, int docBase) {
       this.docBase = docBase;
     }
+    @Override
     public void setScorer(Scorer scorer) throws IOException {
       this.scorer = scorer;
     }
+    @Override
     public boolean acceptsDocsOutOfOrder() {
       return true;
     }
@@ -157,6 +163,7 @@
 
 	// override the norms to be inverted
 	Similarity s = new DefaultSimilarity() {
+		@Override
 		public float lengthNorm(String fieldName, int numTokens) {
 		    return numTokens;
 		}
@@ -169,15 +176,19 @@
 	searcher.search(new TermQuery(new Term("field", "word")), new Collector() {
       private int docBase = 0;
       private Scorer scorer;
+      @Override
       public final void collect(int doc) throws IOException {
         scores[doc + docBase] = scorer.score();
       }
+      @Override
       public void setNextReader(IndexReader reader, int docBase) {
         this.docBase = docBase;
       }
+      @Override
       public void setScorer(Scorer scorer) throws IOException {
         this.scorer = scorer;
       }
+      @Override
       public boolean acceptsDocsOutOfOrder() {
         return true;
       }
Index: contrib/misc/src/java/org/apache/lucene/queryParser/complexPhrase/ComplexPhraseQueryParser.java
===================================================================
--- contrib/misc/src/java/org/apache/lucene/queryParser/complexPhrase/ComplexPhraseQueryParser.java	(revision 833861)
+++ contrib/misc/src/java/org/apache/lucene/queryParser/complexPhrase/ComplexPhraseQueryParser.java	(working copy)
@@ -72,6 +72,7 @@
     super(matchVersion, f, a);
   }
 
+  @Override
   protected Query getFieldQuery(String field, String queryText, int slop) {
     ComplexPhraseQuery cpq = new ComplexPhraseQuery(field, queryText, slop);
     complexPhrases.add(cpq); // add to list of phrases to be parsed once
@@ -80,6 +81,7 @@
     return cpq;
   }
 
+  @Override
   public Query parse(String query) throws ParseException {
     if (isPass2ResolvingPhrases) {
       MultiTermQuery.RewriteMethod oldMethod = getMultiTermRewriteMethod();
@@ -126,6 +128,7 @@
   // unfortunately need
   // to throw a runtime exception here if a term for another field is embedded
   // in phrase query
+  @Override
   protected Query newTermQuery(Term term) {
     if (isPass2ResolvingPhrases) {
       try {
@@ -147,6 +150,7 @@
     }
   }
 
+  @Override
   protected Query getWildcardQuery(String field, String termStr)
       throws ParseException {
     if (isPass2ResolvingPhrases) {
@@ -155,6 +159,7 @@
     return super.getWildcardQuery(field, termStr);
   }
 
+  @Override
   protected Query getRangeQuery(String field, String part1, String part2,
       boolean inclusive) throws ParseException {
     if (isPass2ResolvingPhrases) {
@@ -163,6 +168,7 @@
     return super.getRangeQuery(field, part1, part2, inclusive);
   }
 
+  @Override
   protected Query newRangeQuery(String field, String part1, String part2,
       boolean inclusive) {
     if (isPass2ResolvingPhrases) {
@@ -176,6 +182,7 @@
     return super.newRangeQuery(field, part1, part2, inclusive);
   }
 
+  @Override
   protected Query getFuzzyQuery(String field, String termStr,
       float minSimilarity) throws ParseException {
     if (isPass2ResolvingPhrases) {
@@ -218,6 +225,7 @@
       contents = qp.parse(phrasedQueryStringContents);
     }
 
+    @Override
     public Query rewrite(IndexReader reader) throws IOException {
       // ArrayList spanClauses = new ArrayList();
       if (contents instanceof TermQuery) {
@@ -348,10 +356,12 @@
       }
     }
 
+    @Override
     public String toString(String field) {
       return "\"" + phrasedQueryStringContents + "\"";
     }
 
+    @Override
     public int hashCode() {
       final int prime = 31;
       int result = 1;
@@ -364,6 +374,7 @@
       return result;
     }
 
+    @Override
     public boolean equals(Object obj) {
       if (this == obj)
         return true;
Index: contrib/misc/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser.java
===================================================================
--- contrib/misc/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser.java	(revision 833861)
+++ contrib/misc/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser.java	(working copy)
@@ -74,6 +74,7 @@
    * @return Resulting {@link Query} built for the term
    * @throws ParseException
    */
+  @Override
   protected Query getWildcardQuery(String field, String termStr) throws ParseException {
     List<String> tlist = new ArrayList<String>();
     List<String> wlist = new ArrayList<String>();
@@ -184,6 +185,7 @@
    * @return Resulting {@link Query} built for the term
    * @throws ParseException
    */
+  @Override
   protected Query getPrefixQuery(String field, String termStr) throws ParseException {
     // get Analyzer from superclass and tokenize the term
     TokenStream source = getAnalyzer().tokenStream(field, new StringReader(termStr));
@@ -230,6 +232,7 @@
    * @return Resulting {@link Query} built for the term
    * @exception ParseException
    */
+  @Override
   protected Query getFuzzyQuery(String field, String termStr, float minSimilarity)
       throws ParseException {
     // get Analyzer from superclass and tokenize the term
@@ -265,6 +268,7 @@
    * Overrides super class, by passing terms through analyzer.
    * @exception ParseException
    */
+  @Override
   protected Query getRangeQuery(String field, String part1, String part2, boolean inclusive)
       throws ParseException {
     // get Analyzer from superclass and tokenize the terms
Index: contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy.java
===================================================================
--- contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy.java	(revision 833861)
+++ contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy.java	(working copy)
@@ -55,6 +55,7 @@
     }
   }
   
+  @Override
   protected long size(SegmentInfo info) throws IOException {
     long byteSize = info.sizeInBytes();
     float delRatio = (info.docCount <= 0 ? 0.0f : ((float)info.getDelCount() / (float)info.docCount));
Index: contrib/misc/src/java/org/apache/lucene/index/TermVectorAccessor.java
===================================================================
--- contrib/misc/src/java/org/apache/lucene/index/TermVectorAccessor.java	(revision 833861)
+++ contrib/misc/src/java/org/apache/lucene/index/TermVectorAccessor.java	(working copy)
@@ -138,25 +138,30 @@
 
     private TermVectorMapper decorated;
 
+    @Override
     public boolean isIgnoringPositions() {
       return decorated.isIgnoringPositions();
     }
 
+    @Override
     public boolean isIgnoringOffsets() {
       return decorated.isIgnoringOffsets();
     }
 
     private boolean termVectorStored = false;
 
+    @Override
     public void setExpectations(String field, int numTerms, boolean storeOffsets, boolean storePositions) {
       decorated.setExpectations(field, numTerms, storeOffsets, storePositions);
       termVectorStored = true;
     }
 
+    @Override
     public void map(String term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {
       decorated.map(term, frequency, offsets, positions);
     }
 
+    @Override
     public void setDocumentNumber(int documentNumber) {
       decorated.setDocumentNumber(documentNumber);
     }
Index: contrib/misc/src/java/org/apache/lucene/misc/ChainedFilter.java
===================================================================
--- contrib/misc/src/java/org/apache/lucene/misc/ChainedFilter.java	(revision 833861)
+++ contrib/misc/src/java/org/apache/lucene/misc/ChainedFilter.java	(working copy)
@@ -96,6 +96,7 @@
     /**
      * {@link Filter#getDocIdSet}.
      */
+    @Override
     public DocIdSet getDocIdSet(IndexReader reader) throws IOException
     {
         int[] index = new int[1]; // use array as reference to modifiable int; 
@@ -199,6 +200,7 @@
         return finalResult(result, reader.maxDoc());
     }
 
+    @Override
     public String toString()
     {
         StringBuilder sb = new StringBuilder();
Index: contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity.java
===================================================================
--- contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity.java	(revision 833861)
+++ contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity.java	(working copy)
@@ -134,6 +134,7 @@
    * numTokens does not count overlap tokens if
    * discountOverlaps is true by default or true for this
    * specific field. */
+  @Override
   public float computeNorm(String fieldName, FieldInvertState state) {
     final int numTokens;
     boolean overlaps = discountOverlaps;
@@ -166,6 +167,7 @@
    *
    * @see #setLengthNormFactors
    */
+  @Override
   public float lengthNorm(String fieldName, int numTerms) {
     int l = ln_min;
     int h = ln_max;
@@ -199,6 +201,7 @@
    *
    * @see #baselineTf
    */
+  @Override
   public float tf(int freq) {
     return baselineTf(freq);
   }
Index: contrib/misc/src/java/org/apache/lucene/misc/HighFreqTerms.java
===================================================================
--- contrib/misc/src/java/org/apache/lucene/misc/HighFreqTerms.java	(revision 833861)
+++ contrib/misc/src/java/org/apache/lucene/misc/HighFreqTerms.java	(working copy)
@@ -92,6 +92,7 @@
   TermInfoQueue(int size) {
     initialize(size);
   }
+  @Override
   protected final boolean lessThan(TermInfo termInfoA, TermInfo termInfoB) {
     return termInfoA.docFreq < termInfoB.docFreq;
   }
Index: contrib/remote/src/test/org/apache/lucene/search/RemoteCachingWrapperFilterHelper.java
===================================================================
--- contrib/remote/src/test/org/apache/lucene/search/RemoteCachingWrapperFilterHelper.java	(revision 833861)
+++ contrib/remote/src/test/org/apache/lucene/search/RemoteCachingWrapperFilterHelper.java	(working copy)
@@ -41,6 +41,7 @@
     this.shouldHaveCache = shouldHaveCache;
   }
 
+  @Override
   public DocIdSet getDocIdSet(IndexReader reader) throws IOException {
     Filter cachedFilter = FilterManager.getInstance().getFilter(filter);
     
Index: contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort.java
===================================================================
--- contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort.java	(revision 833861)
+++ contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort.java	(working copy)
@@ -174,6 +174,7 @@
     return randInt;
   }
 
+  @Override
   public void setUp() throws Exception {
     super.setUp();
     full = getFullIndex();
@@ -194,22 +195,27 @@
       slotValues = new int[numHits];
     }
 
+    @Override
     public void copy(int slot, int doc) {
       slotValues[slot] = docValues[doc];
     }
 
+    @Override
     public int compare(int slot1, int slot2) {
       return slotValues[slot1] - slotValues[slot2];
     }
 
+    @Override
     public int compareBottom(int doc) {
       return bottomValue - docValues[doc];
     }
 
+    @Override
     public void setBottom(int bottom) {
       bottomValue = slotValues[bottom];
     }
 
+    @Override
     public void setNextReader(IndexReader reader, int docBase) throws IOException {
       docValues = FieldCache.DEFAULT.getInts(reader, "parser", new FieldCache.IntParser() {
           public final int parseInt(final String val) {
@@ -218,12 +224,14 @@
         });
     }
 
+    @Override
     public Comparable value(int slot) {
       return Integer.valueOf(slotValues[slot]);
     }
   }
 
   static class MyFieldComparatorSource extends FieldComparatorSource {
+    @Override
     public FieldComparator newComparator(String fieldname, int numHits, int sortPos, boolean reversed) {
       return new MyFieldComparator(numHits);
     }
Index: contrib/remote/src/java/org/apache/lucene/search/RemoteCachingWrapperFilter.java
===================================================================
--- contrib/remote/src/java/org/apache/lucene/search/RemoteCachingWrapperFilter.java	(revision 833861)
+++ contrib/remote/src/java/org/apache/lucene/search/RemoteCachingWrapperFilter.java	(working copy)
@@ -51,6 +51,7 @@
    * @param reader the index reader for the Filter
    * @return the DocIdSet
    */
+  @Override
   public DocIdSet getDocIdSet(IndexReader reader) throws IOException {
     Filter cachedFilter = FilterManager.getInstance().getFilter(filter);
     return cachedFilter.getDocIdSet(reader);
Index: contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser.java
===================================================================
--- contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser.java	(revision 833861)
+++ contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser.java	(working copy)
@@ -51,6 +51,7 @@
 	/*
 	 * @see TestCase#setUp()
 	 */
+	@Override
 	protected void setUp() throws Exception {
 		super.setUp();
 		
@@ -86,6 +87,7 @@
 	
 	
 	
+	@Override
 	protected void tearDown() throws Exception {
 		reader.close();
 		searcher.close();
Index: contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestQueryTemplateManager.java
===================================================================
--- contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestQueryTemplateManager.java	(revision 833861)
+++ contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestQueryTemplateManager.java	(working copy)
@@ -135,6 +135,7 @@
 	/*
 	 * @see TestCase#setUp()
 	 */
+	@Override
 	protected void setUp() throws Exception {
 		super.setUp();
 		
@@ -156,6 +157,7 @@
 	}
 	
 	
+	@Override
 	protected void tearDown() throws Exception {
 		searcher.close();
 	}
Index: contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/CachedFilterBuilder.java
===================================================================
--- contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/CachedFilterBuilder.java	(revision 833861)
+++ contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/CachedFilterBuilder.java	(working copy)
@@ -119,6 +119,7 @@
 
 	    protected int maxsize;
 
+	    @Override
 	    protected boolean removeEldestEntry(Entry eldest)
 	    {
 	        return size() > maxsize;
Index: contrib/xml-query-parser/src/demo/java/org/apache/lucene/xmlparser/webdemo/FormBasedXmlQueryDemo.java
===================================================================
--- contrib/xml-query-parser/src/demo/java/org/apache/lucene/xmlparser/webdemo/FormBasedXmlQueryDemo.java	(revision 833861)
+++ contrib/xml-query-parser/src/demo/java/org/apache/lucene/xmlparser/webdemo/FormBasedXmlQueryDemo.java	(working copy)
@@ -53,6 +53,7 @@
 	private IndexSearcher searcher;
 	private Analyzer analyzer=new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT);
 
+	@Override
 	public void init(ServletConfig config) throws ServletException {
 		super.init(config);
 		try {
@@ -74,6 +75,7 @@
 		}
 	}
 
+	@Override
 	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
 		//Take all completed form fields and add to a Properties object
 		Properties completedFormFields=new Properties();
Index: contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian.java
===================================================================
--- contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian.java	(revision 833861)
+++ contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian.java	(working copy)
@@ -72,6 +72,7 @@
   
 
 
+  @Override
   protected void setUp() throws IOException {
     directory = new RAMDirectory();
 
Index: contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceFilter.java
===================================================================
--- contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceFilter.java	(revision 833861)
+++ contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceFilter.java	(working copy)
@@ -88,9 +88,11 @@
   }
 
   /** Returns true if <code>o</code> is equal to this. */
+  @Override
   public abstract boolean equals(Object o);
 
   /** Returns a hash code value for this object.*/
+  @Override
   public abstract int hashCode();
 
   /*
Index: contrib/spatial/src/java/org/apache/lucene/spatial/tier/LatLongDistanceFilter.java
===================================================================
--- contrib/spatial/src/java/org/apache/lucene/spatial/tier/LatLongDistanceFilter.java	(revision 833861)
+++ contrib/spatial/src/java/org/apache/lucene/spatial/tier/LatLongDistanceFilter.java	(working copy)
@@ -72,6 +72,7 @@
     nextDocBase += reader.maxDoc();
 
     return new FilteredDocIdSet(startingFilter.getDocIdSet(reader)) {
+      @Override
       protected boolean match(int doc) {
         double x = latIndex[doc];
         double y = lngIndex[doc];
Index: contrib/spatial/src/java/org/apache/lucene/spatial/geometry/LatLng.java
===================================================================
--- contrib/spatial/src/java/org/apache/lucene/spatial/geometry/LatLng.java	(revision 833861)
+++ contrib/spatial/src/java/org/apache/lucene/spatial/geometry/LatLng.java	(working copy)
@@ -152,7 +152,9 @@
    */
   public abstract LatLng calculateMidpoint(LatLng other);
   
+  @Override
   public abstract int hashCode();
 
+  @Override
   public abstract boolean equals(Object obj);
 }
Index: contrib/spatial/src/java/org/apache/lucene/spatial/geohash/GeoHashDistanceFilter.java
===================================================================
--- contrib/spatial/src/java/org/apache/lucene/spatial/geohash/GeoHashDistanceFilter.java	(revision 833861)
+++ contrib/spatial/src/java/org/apache/lucene/spatial/geohash/GeoHashDistanceFilter.java	(working copy)
@@ -68,6 +68,7 @@
     nextDocBase += reader.maxDoc();
 
     return new FilteredDocIdSet(startingFilter.getDocIdSet(reader)) {
+      @Override
       public boolean match(int doc) {
         
         String geoHash = geoHashValues[doc];
Index: contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java
===================================================================
--- contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java	(revision 833861)
+++ contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java	(working copy)
@@ -503,6 +503,7 @@
 
     TestHighlightRunner helper = new TestHighlightRunner() {
 
+      @Override
       public void run() throws Exception {
         mode = QUERY;
         doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);
@@ -545,6 +546,7 @@
     doSearching(bquery);
     TestHighlightRunner helper = new TestHighlightRunner() {
 
+      @Override
       public void run() throws Exception {
         mode = QUERY;
         doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);
@@ -563,6 +565,7 @@
         new Term(FIELD_NAME, "john"))));
     TestHighlightRunner helper = new TestHighlightRunner() {
 
+      @Override
       public void run() throws Exception {
         mode = QUERY;
         doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);
@@ -577,6 +580,7 @@
   public void testGetBestFragmentsSimpleQuery() throws Exception {
     TestHighlightRunner helper = new TestHighlightRunner() {
 
+      @Override
       public void run() throws Exception {
         numHighlights = 0;
         doSearching("Kennedy");
@@ -592,6 +596,7 @@
   public void testGetFuzzyFragments() throws Exception {
     TestHighlightRunner helper = new TestHighlightRunner() {
 
+      @Override
       public void run() throws Exception {
         numHighlights = 0;
         doSearching("Kinnedy~");
@@ -607,6 +612,7 @@
   public void testGetWildCardFragments() throws Exception {
     TestHighlightRunner helper = new TestHighlightRunner() {
 
+      @Override
       public void run() throws Exception {
         numHighlights = 0;
         doSearching("K?nnedy");
@@ -622,6 +628,7 @@
   public void testGetMidWildCardFragments() throws Exception {
     TestHighlightRunner helper = new TestHighlightRunner() {
 
+      @Override
       public void run() throws Exception {
         numHighlights = 0;
         doSearching("K*dy");
@@ -637,6 +644,7 @@
   public void testGetRangeFragments() throws Exception {
     TestHighlightRunner helper = new TestHighlightRunner() {
 
+      @Override
       public void run() throws Exception {
         numHighlights = 0;
         String queryString = FIELD_NAME + ":[kannedy TO kznnedy]";
@@ -753,6 +761,7 @@
   public void testGetBestFragmentsPhrase() throws Exception {
     TestHighlightRunner helper = new TestHighlightRunner() {
 
+      @Override
       public void run() throws Exception {
         numHighlights = 0;
         doSearching("\"John Kennedy\"");
@@ -769,6 +778,7 @@
   public void testGetBestFragmentsQueryScorer() throws Exception {
     TestHighlightRunner helper = new TestHighlightRunner() {
 
+      @Override
       public void run() throws Exception {
         numHighlights = 0;
         SpanQuery clauses[] = { new SpanTermQuery(new Term("contents", "john")),
@@ -789,6 +799,7 @@
   public void testOffByOne() throws Exception {
     TestHighlightRunner helper = new TestHighlightRunner() {
 
+      @Override
       public void run() throws Exception {
         TermQuery query = new TermQuery(new Term("data", "help"));
         Highlighter hg = new Highlighter(new SimpleHTMLFormatter(), new QueryTermScorer(query));
@@ -807,6 +818,7 @@
   public void testGetBestFragmentsFilteredQuery() throws Exception {
     TestHighlightRunner helper = new TestHighlightRunner() {
 
+      @Override
       public void run() throws Exception {
         numHighlights = 0;
         TermRangeFilter rf = new TermRangeFilter("contents", "john", "john", true, true);
@@ -829,6 +841,7 @@
   public void testGetBestFragmentsFilteredPhraseQuery() throws Exception {
     TestHighlightRunner helper = new TestHighlightRunner() {
 
+      @Override
       public void run() throws Exception {
         numHighlights = 0;
         TermRangeFilter rf = new TermRangeFilter("contents", "john", "john", true, true);
@@ -851,6 +864,7 @@
   public void testGetBestFragmentsMultiTerm() throws Exception {
     TestHighlightRunner helper = new TestHighlightRunner() {
 
+      @Override
       public void run() throws Exception {
         numHighlights = 0;
         doSearching("John Kenn*");
@@ -866,6 +880,7 @@
   public void testGetBestFragmentsWithOr() throws Exception {
     TestHighlightRunner helper = new TestHighlightRunner() {
 
+      @Override
       public void run() throws Exception {
         numHighlights = 0;
         doSearching("JFK OR Kennedy");
@@ -881,6 +896,7 @@
 
     TestHighlightRunner helper = new TestHighlightRunner() {
 
+      @Override
       public void run() throws Exception {
         doSearching("Kennedy");
         numHighlights = 0;
@@ -932,6 +948,7 @@
 
     TestHighlightRunner helper = new TestHighlightRunner() {
 
+      @Override
       public void run() throws Exception {
         WeightedSpanTerm[] wTerms = new WeightedSpanTerm[2];
         wTerms[0] = new WeightedSpanTerm(10f, "hello");
@@ -977,6 +994,7 @@
   public void testOverlapAnalyzer() throws Exception {
     TestHighlightRunner helper = new TestHighlightRunner() {
 
+      @Override
       public void run() throws Exception {
         HashMap synonyms = new HashMap();
         synonyms.put("football", "soccer,footie");
@@ -1009,6 +1027,7 @@
   public void testGetSimpleHighlight() throws Exception {
     TestHighlightRunner helper = new TestHighlightRunner() {
 
+      @Override
       public void run() throws Exception {
         numHighlights = 0;
         doSearching("Kennedy");
@@ -1032,6 +1051,7 @@
   public void testGetTextFragments() throws Exception {
     TestHighlightRunner helper = new TestHighlightRunner() {
 
+      @Override
       public void run() throws Exception {
 
         doSearching("Kennedy");
@@ -1068,6 +1088,7 @@
   public void testMaxSizeHighlight() throws Exception {
     TestHighlightRunner helper = new TestHighlightRunner() {
 
+      @Override
       public void run() throws Exception {
         numHighlights = 0;
         doSearching("meat");
@@ -1090,6 +1111,7 @@
   public void testMaxSizeHighlightTruncates() throws Exception {
     TestHighlightRunner helper = new TestHighlightRunner() {
 
+      @Override
       public void run() throws Exception {
         String goodWord = "goodtoken";
         Set stopWords = new HashSet(1);
@@ -1135,6 +1157,7 @@
   
   public void testMaxSizeEndHighlight() throws Exception {
     TestHighlightRunner helper = new TestHighlightRunner() {
+      @Override
       public void run() throws Exception {
         Set stopWords = new HashSet();
         stopWords.add("in");
@@ -1159,6 +1182,7 @@
   public void testUnRewrittenQuery() throws Exception {
     final TestHighlightRunner helper = new TestHighlightRunner() {
 
+      @Override
       public void run() throws Exception {
         numHighlights = 0;
         // test to show how rewritten query can still be used
@@ -1206,6 +1230,7 @@
   public void testNoFragments() throws Exception {
     TestHighlightRunner helper = new TestHighlightRunner() {
 
+      @Override
       public void run() throws Exception {
         doSearching("AnInvalidQueryWhichShouldYieldNoResults");
 
@@ -1330,6 +1355,7 @@
   public void testFieldSpecificHighlighting() throws Exception {
     TestHighlightRunner helper = new TestHighlightRunner() {
 
+      @Override
       public void run() throws Exception {
         String docMainText = "fred is one of the people";
         QueryParser parser = new QueryParser(TEST_VERSION, FIELD_NAME, analyzer);
@@ -1403,6 +1429,7 @@
         iter = lst.iterator();
       }
 
+      @Override
       public boolean incrementToken() throws IOException {
         if(iter.hasNext()) {
           Token token = (Token) iter.next();
@@ -1450,6 +1477,7 @@
         iter = lst.iterator();
       }
 
+      @Override
       public boolean incrementToken() throws IOException {
         if(iter.hasNext()) {
           Token token = (Token) iter.next();
@@ -1466,6 +1494,7 @@
   public void testOverlapAnalyzer2() throws Exception {
     TestHighlightRunner helper = new TestHighlightRunner() {
 
+      @Override
       public void run() throws Exception {
         String s = "Hi-Speed10 foo";
 
@@ -1664,6 +1693,7 @@
     }
   }
 
+  @Override
   protected void setUp() throws Exception {
     super.setUp();
     ramDir = new RAMDirectory();
@@ -1705,6 +1735,7 @@
 
   }
 
+  @Override
   protected void tearDown() throws Exception {
     super.tearDown();
   }
@@ -1741,6 +1772,7 @@
    * @see org.apache.lucene.analysis.Analyzer#tokenStream(java.lang.String,
    *      java.io.Reader)
    */
+  @Override
   public TokenStream tokenStream(String arg0, Reader arg1) {
     LowerCaseTokenizer stream = new LowerCaseTokenizer(arg1);
     stream.addAttribute(TermAttribute.class);
@@ -1779,6 +1811,7 @@
     offsetAtt = addAttribute(OffsetAttribute.class);
   }
 
+  @Override
   public boolean incrementToken() throws IOException {
 
     if (currentRealToken == null) {
Index: contrib/highlighter/src/java/org/apache/lucene/search/highlight/SpanGradientFormatter.java
===================================================================
--- contrib/highlighter/src/java/org/apache/lucene/search/highlight/SpanGradientFormatter.java	(revision 833861)
+++ contrib/highlighter/src/java/org/apache/lucene/search/highlight/SpanGradientFormatter.java	(working copy)
@@ -39,6 +39,7 @@
 	
 
 	
+	@Override
 	public String highlightTerm(String originalText, TokenGroup tokenGroup)
     {
         if (tokenGroup.getTotalScore() == 0)
Index: contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor.java
===================================================================
--- contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor.java	(revision 833861)
+++ contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor.java	(working copy)
@@ -504,6 +504,7 @@
    */
   static private class PositionCheckingMap<K> extends HashMap<K,WeightedSpanTerm> {
 
+    @Override
     public void putAll(Map m) {
       Iterator<Map.Entry<K, WeightedSpanTerm>> it = m.entrySet().iterator();
       while (it.hasNext()) {
@@ -512,6 +513,7 @@
       }
     }
 
+    @Override
     public WeightedSpanTerm put(K key, WeightedSpanTerm value) {
       WeightedSpanTerm prev = super.put(key, value);
       if (prev == null) return prev;
Index: contrib/highlighter/src/java/org/apache/lucene/search/highlight/TextFragment.java
===================================================================
--- contrib/highlighter/src/java/org/apache/lucene/search/highlight/TextFragment.java	(revision 833861)
+++ contrib/highlighter/src/java/org/apache/lucene/search/highlight/TextFragment.java	(working copy)
@@ -79,6 +79,7 @@
 
 	/* Returns the marked-up text for this text fragment 
 	 */
+	@Override
 	public String toString() {
 		return markedUpText.subSequence(textStartPos, textEndPos).toString();
 	}
Index: contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources.java
===================================================================
--- contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources.java	(revision 833861)
+++ contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources.java	(working copy)
@@ -151,6 +151,7 @@
             offsetAtt = addAttribute(OffsetAttribute.class);
           }
     
+          @Override
           public boolean incrementToken() throws IOException {
             if (currentToken >= tokens.length) {
               return false;
Index: contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter.java
===================================================================
--- contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter.java	(revision 833861)
+++ contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter.java	(working copy)
@@ -574,6 +574,7 @@
 		initialize(size);
 	}
 
+	@Override
 	public final boolean lessThan(TextFragment fragA, TextFragment fragB)
 	{
 		if (fragA.getScore() == fragB.getScore())
Index: contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestLuceneDictionary.java
===================================================================
--- contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestLuceneDictionary.java	(revision 833861)
+++ contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestLuceneDictionary.java	(working copy)
@@ -45,6 +45,7 @@
   private LuceneDictionary ld;
   private Iterator it;
 
+  @Override
   public void setUp() throws Exception {
 
     IndexWriter writer = new IndexWriter(store, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);
Index: contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker.java
===================================================================
--- contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker.java	(revision 833861)
+++ contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker.java	(working copy)
@@ -41,6 +41,7 @@
   private SpellChecker spellChecker;
   private Directory userindex, spellindex;
 
+  @Override
   protected void setUp() throws Exception {
     super.setUp();
     
Index: contrib/spellchecker/src/java/org/apache/lucene/search/spell/SuggestWordQueue.java
===================================================================
--- contrib/spellchecker/src/java/org/apache/lucene/search/spell/SuggestWordQueue.java	(revision 833861)
+++ contrib/spellchecker/src/java/org/apache/lucene/search/spell/SuggestWordQueue.java	(working copy)
@@ -31,6 +31,7 @@
     initialize(size);
   }
 
+  @Override
   protected final boolean lessThan (SuggestWord wa, SuggestWord wb) {
     int val = wa.compareTo(wb);
     return val < 0;
Index: contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizer.java
===================================================================
--- contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizer.java	(revision 833861)
+++ contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizer.java	(working copy)
@@ -191,6 +191,7 @@
   *
   * @see org.apache.lucene.analysis.TokenStream#next()
   */
+  @Override
   public final boolean incrementToken() throws IOException {
     if (tokens != null && tokens.hasNext()){
       AttributeSource.State state = (AttributeSource.State) tokens.next();
@@ -307,11 +308,13 @@
   *
   * @see org.apache.lucene.analysis.TokenStream#reset()
   */
+  @Override
   public void reset() throws IOException {
     super.reset();
     scanner.yyreset(input);
   }
 
+  @Override
   public void reset(Reader reader) throws IOException {
     super.reset(reader);
     reset();
Index: contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest.java
===================================================================
--- contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest.java	(revision 833861)
+++ contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest.java	(working copy)
@@ -216,6 +216,7 @@
 
   /* all files will be open relative to this */
   public String fileDir;
+  @Override
   protected void setUp() throws Exception {
     super.setUp();
     fileDir = System.getProperty("lucene.common.dir", null);
@@ -430,18 +431,22 @@
       searcher.search(query, new Collector() {
         private Scorer scorer;
 
+        @Override
         public void collect(int doc) throws IOException {
           scores[0] = scorer.score();
         }
 
+        @Override
         public void setScorer(Scorer scorer) throws IOException {
           this.scorer = scorer;
         }
 
+        @Override
         public boolean acceptsDocsOutOfOrder() {
           return true;
         }
 
+        @Override
         public void setNextReader(IndexReader reader, int docBase) { }
       });
       float score = scores[0];
Index: contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java
===================================================================
--- contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java	(revision 833861)
+++ contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java	(working copy)
@@ -278,6 +278,7 @@
       private TermAttribute termAtt = addAttribute(TermAttribute.class);
       private OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);
       
+      @Override
       public boolean incrementToken() {
         if (!iter.hasNext()) return false;
         
@@ -416,18 +417,22 @@
       searcher.search(query, new Collector() {
         private Scorer scorer;
 
+        @Override
         public void collect(int doc) throws IOException {
           scores[0] = scorer.score();
         }
 
+        @Override
         public void setScorer(Scorer scorer) throws IOException {
           this.scorer = scorer;
         }
 
+        @Override
         public boolean acceptsDocsOutOfOrder() {
           return true;
         }
 
+        @Override
         public void setNextReader(IndexReader reader, int docBase) { }
       });
       float score = scores[0];
@@ -515,6 +520,7 @@
    * 
    * @return the string representation
    */
+  @Override
   public String toString() {
     StringBuilder result = new StringBuilder(256);    
     sortFields();   
@@ -735,6 +741,7 @@
       return sortedFields[pos].getValue();
     }
     
+    @Override
     public int docFreq(Term term) {
       Info info = getInfo(term.field());
       int freq = 0;
@@ -743,11 +750,13 @@
       return freq;
     }
   
+    @Override
     public TermEnum terms() {
       if (DEBUG) System.err.println("MemoryIndexReader.terms()");
       return terms(MATCH_ALL_TERM);
     }
     
+    @Override
     public TermEnum terms(Term term) {
       if (DEBUG) System.err.println("MemoryIndexReader.terms: " + term);
   
@@ -786,6 +795,7 @@
         private int i = ix; // index into info.sortedTerms
         private int j = jx; // index into sortedFields
           
+        @Override
         public boolean next() {
           if (DEBUG) System.err.println("TermEnum.next");
           if (j >= sortedFields.length) return false;
@@ -800,6 +810,7 @@
           return true;
         }
   
+        @Override
         public Term term() {
           if (DEBUG) System.err.println("TermEnum.term: " + i);
           if (j >= sortedFields.length) return null;
@@ -809,6 +820,7 @@
           return createTerm(info, j, info.sortedTerms[i].getKey());
         }
         
+        @Override
         public int docFreq() {
           if (DEBUG) System.err.println("TermEnum.docFreq");
           if (j >= sortedFields.length) return 0;
@@ -817,6 +829,7 @@
           return numPositions(info.getPositions(i));
         }
   
+        @Override
         public void close() {
           if (DEBUG) System.err.println("TermEnum.close");
         }
@@ -837,6 +850,7 @@
       };
     }
   
+    @Override
     public TermPositions termPositions() {
       if (DEBUG) System.err.println("MemoryIndexReader.termPositions");
       
@@ -932,11 +946,13 @@
       };
     }
   
+    @Override
     public TermDocs termDocs() {
       if (DEBUG) System.err.println("MemoryIndexReader.termDocs");
       return termPositions();
     }
   
+    @Override
     public TermFreqVector[] getTermFreqVectors(int docNumber) {
       if (DEBUG) System.err.println("MemoryIndexReader.getTermFreqVectors");
       TermFreqVector[] vectors = new TermFreqVector[fields.size()];
@@ -948,6 +964,7 @@
       return vectors;
     }
 
+      @Override
       public void getTermFreqVector(int docNumber, TermVectorMapper mapper) throws IOException
       {
           if (DEBUG) System.err.println("MemoryIndexReader.getTermFreqVectors");
@@ -959,6 +976,7 @@
           }
       }
 
+      @Override
       public void getTermFreqVector(int docNumber, String field, TermVectorMapper mapper) throws IOException
       {
         if (DEBUG) System.err.println("MemoryIndexReader.getTermFreqVector");
@@ -986,6 +1004,7 @@
           }
       }
 
+      @Override
       public TermFreqVector getTermFreqVector(int docNumber, final String fieldName) {
       if (DEBUG) System.err.println("MemoryIndexReader.getTermFreqVector");
       final Info info = getInfo(fieldName);
@@ -1072,6 +1091,7 @@
     private String cachedFieldName;
     private Similarity cachedSimilarity;
     
+    @Override
     public byte[] norms(String fieldName) {
       byte[] norms = cachedNorms;
       Similarity sim = getSimilarity();
@@ -1094,64 +1114,77 @@
       return norms;
     }
   
+    @Override
     public void norms(String fieldName, byte[] bytes, int offset) {
       if (DEBUG) System.err.println("MemoryIndexReader.norms*: " + fieldName);
       byte[] norms = norms(fieldName);
       System.arraycopy(norms, 0, bytes, offset, norms.length);
     }
   
+    @Override
     protected void doSetNorm(int doc, String fieldName, byte value) {
       throw new UnsupportedOperationException();
     }
   
+    @Override
     public int numDocs() {
       if (DEBUG) System.err.println("MemoryIndexReader.numDocs");
       return fields.size() > 0 ? 1 : 0;
     }
   
+    @Override
     public int maxDoc() {
       if (DEBUG) System.err.println("MemoryIndexReader.maxDoc");
       return 1;
     }
   
+    @Override
     public Document document(int n) {
       if (DEBUG) System.err.println("MemoryIndexReader.document");
       return new Document(); // there are no stored fields
     }
 
     //When we convert to JDK 1.5 make this Set<String>
+    @Override
     public Document document(int n, FieldSelector fieldSelector) throws IOException {
       if (DEBUG) System.err.println("MemoryIndexReader.document");
       return new Document(); // there are no stored fields
     }
 
+    @Override
     public boolean isDeleted(int n) {
       if (DEBUG) System.err.println("MemoryIndexReader.isDeleted");
       return false;
     }
   
+    @Override
     public boolean hasDeletions() {
       if (DEBUG) System.err.println("MemoryIndexReader.hasDeletions");
       return false;
     }
   
+    @Override
     protected void doDelete(int docNum) {
       throw new UnsupportedOperationException();
     }
   
+    @Override
     protected void doUndeleteAll() {
       throw new UnsupportedOperationException();
     }
   
+    @Override
     protected void doCommit(Map<String,String> commitUserData) {
       if (DEBUG) System.err.println("MemoryIndexReader.doCommit");
     }
   
+    @Override
     protected void doClose() {
       if (DEBUG) System.err.println("MemoryIndexReader.doClose");
     }
     
     // lucene >= 1.9 (remove this method for lucene-1.4.3)
+    @Override
     public Collection<String> getFieldNames(FieldOption fieldOption) {
       if (DEBUG) System.err.println("MemoryIndexReader.getFieldNamesOption");
       if (fieldOption == FieldOption.UNINDEXED) 
Index: contrib/lucli/src/java/lucli/LuceneMethods.java
===================================================================
--- contrib/lucli/src/java/lucli/LuceneMethods.java	(revision 833861)
+++ contrib/lucli/src/java/lucli/LuceneMethods.java	(working copy)
@@ -224,12 +224,16 @@
   final static class CountingCollector extends Collector {
     public int numHits = 0;
     
+    @Override
     public void setScorer(Scorer scorer) throws IOException {}
+    @Override
     public void collect(int doc) throws IOException {
       numHits++;
     }
 
+    @Override
     public void setNextReader(IndexReader reader, int docBase) {}
+    @Override
     public boolean acceptsDocsOutOfOrder() {
       return true;
     }    
Index: contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/SentenceTokenizer.java
===================================================================
--- contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/SentenceTokenizer.java	(revision 833861)
+++ contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/SentenceTokenizer.java	(working copy)
@@ -73,6 +73,7 @@
     typeAtt = addAttribute(TypeAttribute.class);    
   }
   
+  @Override
   public boolean incrementToken() throws IOException {
     clearAttributes();
     buffer.setLength(0);
@@ -122,11 +123,13 @@
     }
   }
 
+  @Override
   public void reset() throws IOException {
     super.reset();
     tokenStart = tokenEnd = 0;
   }
 
+  @Override
   public void reset(Reader input) throws IOException {
     super.reset(input);
     reset();
Index: contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/WordTokenFilter.java
===================================================================
--- contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/WordTokenFilter.java	(revision 833861)
+++ contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/WordTokenFilter.java	(working copy)
@@ -61,6 +61,7 @@
     typeAtt = addAttribute(TypeAttribute.class);
   }
   
+  @Override
   public boolean incrementToken() throws IOException {   
     if (tokenIter == null || !tokenIter.hasNext()) {
       // there are no remaining tokens from the current sentence... are there more sentences?
@@ -88,6 +89,7 @@
     return true;
   }
 
+  @Override
   public void reset() throws IOException {
     super.reset();
     tokenIter = null;
Index: contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegToken.java
===================================================================
--- contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegToken.java	(revision 833861)
+++ contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegToken.java	(working copy)
@@ -80,6 +80,7 @@
   /**
    * @see java.lang.Object#hashCode()
    */
+  @Override
   public int hashCode() {
     final int prime = 31;
     int result = 1;
@@ -97,6 +98,7 @@
   /**
    * @see java.lang.Object#equals(java.lang.Object)
    */
+  @Override
   public boolean equals(Object obj) {
     if (this == obj)
       return true;
Index: contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegGraph.java
===================================================================
--- contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegGraph.java	(revision 833861)
+++ contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegGraph.java	(working copy)
@@ -136,6 +136,7 @@
     return result;
   }
 
+  @Override
   public String toString() {
     List<SegToken> tokenList = this.toTokenList();
     StringBuilder sb = new StringBuilder();
Index: contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/PathNode.java
===================================================================
--- contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/PathNode.java	(revision 833861)
+++ contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/PathNode.java	(working copy)
@@ -45,6 +45,7 @@
   /**
    * @see java.lang.Object#hashCode()
    */
+  @Override
   public int hashCode() {
     final int prime = 31;
     int result = 1;
@@ -58,6 +59,7 @@
   /**
    * @see java.lang.Object#equals(java.lang.Object)
    */
+  @Override
   public boolean equals(Object obj) {
     if (this == obj)
       return true;
Index: contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BiSegGraph.java
===================================================================
--- contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BiSegGraph.java	(revision 833861)
+++ contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BiSegGraph.java	(working copy)
@@ -221,6 +221,7 @@
 
   }
 
+  @Override
   public String toString() {
     StringBuilder sb = new StringBuilder();
     Collection<ArrayList<SegTokenPair>>  values = tokenPairListTable.values();
Index: contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegTokenPair.java
===================================================================
--- contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegTokenPair.java	(revision 833861)
+++ contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegTokenPair.java	(working copy)
@@ -53,6 +53,7 @@
   /**
    * @see java.lang.Object#hashCode()
    */
+  @Override
   public int hashCode() {
     final int prime = 31;
     int result = 1;
@@ -70,6 +71,7 @@
   /**
    * @see java.lang.Object#equals(java.lang.Object)
    */
+  @Override
   public boolean equals(Object obj) {
     if (this == obj)
       return true;
Index: contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/SmartChineseAnalyzer.java
===================================================================
--- contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/SmartChineseAnalyzer.java	(revision 833861)
+++ contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/SmartChineseAnalyzer.java	(working copy)
@@ -144,6 +144,7 @@
     this.matchVersion = matchVersion;
   }
 
+  @Override
   public TokenStream tokenStream(String fieldName, Reader reader) {
     TokenStream result = new SentenceTokenizer(reader);
     result = new WordTokenFilter(result);
@@ -163,6 +164,7 @@
     TokenStream filteredTokenStream;
   }
   
+  @Override
   public TokenStream reusableTokenStream(String fieldName, Reader reader)
       throws IOException {
     SavedStreams streams = (SavedStreams) getPreviousTokenStream();
Index: contrib/analyzers/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter.java
===================================================================
--- contrib/analyzers/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter.java	(revision 833861)
+++ contrib/analyzers/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter.java	(working copy)
@@ -51,6 +51,7 @@
 
   private static byte[] patternsFileContent;
 
+  @Override
   protected void setUp() throws Exception {
     super.setUp();
     getHyphenationPatternFileContents();
Index: contrib/analyzers/common/src/test/org/apache/lucene/analysis/ru/TestRussianAnalyzer.java
===================================================================
--- contrib/analyzers/common/src/test/org/apache/lucene/analysis/ru/TestRussianAnalyzer.java	(revision 833861)
+++ contrib/analyzers/common/src/test/org/apache/lucene/analysis/ru/TestRussianAnalyzer.java	(working copy)
@@ -42,6 +42,7 @@
 
     private File dataDir;
 
+    @Override
     protected void setUp() throws Exception
     {
       super.setUp();
Index: contrib/analyzers/common/src/test/org/apache/lucene/analysis/ru/TestRussianStem.java
===================================================================
--- contrib/analyzers/common/src/test/org/apache/lucene/analysis/ru/TestRussianStem.java	(revision 833861)
+++ contrib/analyzers/common/src/test/org/apache/lucene/analysis/ru/TestRussianStem.java	(working copy)
@@ -37,6 +37,7 @@
     /**
      * @see TestCase#setUp()
      */
+    @Override
     protected void setUp() throws Exception
     {
         super.setUp();
@@ -73,6 +74,7 @@
     /**
      * @see TestCase#tearDown()
      */
+    @Override
     protected void tearDown() throws Exception
     {
         super.tearDown();
Index: contrib/analyzers/common/src/test/org/apache/lucene/analysis/sinks/TokenTypeSinkTokenizerTest.java
===================================================================
--- contrib/analyzers/common/src/test/org/apache/lucene/analysis/sinks/TokenTypeSinkTokenizerTest.java	(revision 833861)
+++ contrib/analyzers/common/src/test/org/apache/lucene/analysis/sinks/TokenTypeSinkTokenizerTest.java	(working copy)
@@ -76,6 +76,7 @@
       typeAtt = addAttribute(TypeAttribute.class);
     }
 
+    @Override
     public final boolean incrementToken() throws IOException {
       if (!input.incrementToken()) return false;
       
Index: contrib/analyzers/common/src/test/org/apache/lucene/analysis/de/TestGermanStemFilter.java
===================================================================
--- contrib/analyzers/common/src/test/org/apache/lucene/analysis/de/TestGermanStemFilter.java	(revision 833861)
+++ contrib/analyzers/common/src/test/org/apache/lucene/analysis/de/TestGermanStemFilter.java	(working copy)
@@ -76,6 +76,7 @@
       super(matchVersion);
     }
 
+    @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {
       return new WhitespaceTokenizer(reader);
     }
Index: contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleFilterTest.java
===================================================================
--- contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleFilterTest.java	(revision 833861)
+++ contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleFilterTest.java	(working copy)
@@ -48,6 +48,7 @@
       this.typeAtt = addAttribute(TypeAttribute.class);
     }
 
+    @Override
     public final boolean incrementToken() throws IOException {
       clearAttributes();
       if (index < testToken.length) {
@@ -201,6 +202,7 @@
   };
 
 
+  @Override
   protected void setUp() throws Exception {
     super.setUp();
     testTokenWithHoles = new Token[] {
Index: contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest.java
===================================================================
--- contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest.java	(revision 833861)
+++ contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest.java	(working copy)
@@ -221,6 +221,7 @@
       super(org.apache.lucene.util.Version.LUCENE_CURRENT);
     }
   
+    @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {
       return new WhitespaceTokenizer(reader);
     }  
@@ -240,6 +241,7 @@
    */
   private class NonreusableAnalyzer extends Analyzer {
     int invocationCount = 0;
+    @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {
       if (++invocationCount % 2 == 0)
         return new WhitespaceTokenizer(reader);
Index: contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter.java
===================================================================
--- contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter.java	(revision 833861)
+++ contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter.java	(working copy)
@@ -537,6 +537,7 @@
 
     private Iterator iterator;
 
+    @Override
     public boolean incrementToken() throws IOException {
       if (iterator == null) {
         iterator = tokens.iterator();
@@ -556,6 +557,7 @@
     }
 
 
+    @Override
     public void reset() throws IOException {
       iterator = null;
     }
Index: contrib/analyzers/common/src/test/org/apache/lucene/analysis/cn/TestChineseTokenizer.java
===================================================================
--- contrib/analyzers/common/src/test/org/apache/lucene/analysis/cn/TestChineseTokenizer.java	(revision 833861)
+++ contrib/analyzers/common/src/test/org/apache/lucene/analysis/cn/TestChineseTokenizer.java	(working copy)
@@ -65,6 +65,7 @@
      * convenience to show the behavior of the tokenizer
      */
     private class JustChineseTokenizerAnalyzer extends Analyzer {
+      @Override
       public TokenStream tokenStream(String fieldName, Reader reader) {
         return new ChineseTokenizer(reader);
       }   
@@ -75,6 +76,7 @@
      * convenience to show the behavior of the filter.
      */
     private class JustChineseFilterAnalyzer extends Analyzer {
+      @Override
       public TokenStream tokenStream(String fieldName, Reader reader) {
         return new ChineseFilter(new WhitespaceTokenizer(reader));
       }
Index: contrib/analyzers/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenizerTest.java
===================================================================
--- contrib/analyzers/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenizerTest.java	(revision 833861)
+++ contrib/analyzers/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenizerTest.java	(working copy)
@@ -30,6 +30,7 @@
 public class NGramTokenizerTest extends BaseTokenStreamTestCase {
     private StringReader input;
     
+    @Override
     public void setUp() throws Exception {
         super.setUp();
         input = new StringReader("abcde");
Index: contrib/analyzers/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilterTest.java
===================================================================
--- contrib/analyzers/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilterTest.java	(revision 833861)
+++ contrib/analyzers/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilterTest.java	(working copy)
@@ -29,6 +29,7 @@
 public class EdgeNGramTokenFilterTest extends BaseTokenStreamTestCase {
   private TokenStream input;
 
+  @Override
   public void setUp() throws Exception {
     super.setUp();
     input = new WhitespaceTokenizer(new StringReader("abcde"));
Index: contrib/analyzers/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenizerTest.java
===================================================================
--- contrib/analyzers/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenizerTest.java	(revision 833861)
+++ contrib/analyzers/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenizerTest.java	(working copy)
@@ -28,6 +28,7 @@
 public class EdgeNGramTokenizerTest extends BaseTokenStreamTestCase {
   private StringReader input;
 
+  @Override
   public void setUp() throws Exception {
     super.setUp();
     input = new StringReader("abcde");
Index: contrib/analyzers/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenFilterTest.java
===================================================================
--- contrib/analyzers/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenFilterTest.java	(revision 833861)
+++ contrib/analyzers/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenFilterTest.java	(working copy)
@@ -30,6 +30,7 @@
 public class NGramTokenFilterTest extends BaseTokenStreamTestCase {
     private TokenStream input;
     
+    @Override
     public void setUp() throws Exception {
         super.setUp();
         input = new WhitespaceTokenizer(new StringReader("abcde"));
Index: contrib/analyzers/common/src/test/org/apache/lucene/analysis/position/PositionFilterTest.java
===================================================================
--- contrib/analyzers/common/src/test/org/apache/lucene/analysis/position/PositionFilterTest.java	(revision 833861)
+++ contrib/analyzers/common/src/test/org/apache/lucene/analysis/position/PositionFilterTest.java	(working copy)
@@ -38,6 +38,7 @@
       termAtt = addAttribute(TermAttribute.class);
     }
 
+    @Override
     public final boolean incrementToken() throws IOException {
       clearAttributes();
       if (index < testToken.length) {
@@ -47,6 +48,7 @@
         return false;
       }
     }
+    @Override
     public void reset() {
       index = 0;
     }
Index: contrib/analyzers/common/src/test/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzerTest.java
===================================================================
--- contrib/analyzers/common/src/test/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzerTest.java	(revision 833861)
+++ contrib/analyzers/common/src/test/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzerTest.java	(working copy)
@@ -47,6 +47,7 @@
   IndexReader reader;
   QueryAutoStopWordAnalyzer protectedAnalyzer;
 
+  @Override
   protected void setUp() throws Exception {
     super.setUp();
     dir = new RAMDirectory();
@@ -66,6 +67,7 @@
     protectedAnalyzer = new QueryAutoStopWordAnalyzer(Version.LUCENE_CURRENT, appAnalyzer);
   }
 
+  @Override
   protected void tearDown() throws Exception {
     reader.close();
     super.tearDown();
@@ -154,6 +156,7 @@
       super(matchVersion, new WhitespaceAnalyzer());
     }
     
+    @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {
       return new WhitespaceTokenizer(reader);
     }    
@@ -172,6 +175,7 @@
    */
   private class NonreusableAnalyzer extends Analyzer {
     int invocationCount = 0;
+    @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {
       if (++invocationCount % 2 == 0)
         return new WhitespaceTokenizer(reader);
Index: contrib/analyzers/common/src/test/org/apache/lucene/analysis/nl/TestDutchStemmer.java
===================================================================
--- contrib/analyzers/common/src/test/org/apache/lucene/analysis/nl/TestDutchStemmer.java	(revision 833861)
+++ contrib/analyzers/common/src/test/org/apache/lucene/analysis/nl/TestDutchStemmer.java	(working copy)
@@ -134,6 +134,7 @@
     public DutchSubclassAnalyzer(Version matchVersion) {
       super(matchVersion);
     }
+    @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {
       return new WhitespaceTokenizer(reader);
     }
Index: contrib/analyzers/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer.java
===================================================================
--- contrib/analyzers/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer.java	(revision 833861)
+++ contrib/analyzers/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer.java	(working copy)
@@ -132,6 +132,7 @@
           public ThaiSubclassAnalyzer(Version matchVersion) {
             super(matchVersion);
           }
+	  @Override
 	  public TokenStream tokenStream(String fieldName, Reader reader) {
 	    return new WhitespaceTokenizer(reader);
 	  }
Index: contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/NumericPayloadTokenFilterTest.java
===================================================================
--- contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/NumericPayloadTokenFilterTest.java	(revision 833861)
+++ contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/NumericPayloadTokenFilterTest.java	(working copy)
@@ -69,6 +69,7 @@
       typeAtt = addAttribute(TypeAttribute.class);
     }
     
+    @Override
     public boolean incrementToken() throws IOException {
       if (input.incrementToken()) {
         if (termAtt.term().equals("dogs"))
Index: contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilterTest.java
===================================================================
--- contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilterTest.java	(revision 833861)
+++ contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilterTest.java	(working copy)
@@ -65,6 +65,7 @@
       typeAtt = addAttribute(TypeAttribute.class);
     }
 
+    @Override
     public boolean incrementToken() throws IOException {
       if (input.incrementToken()) {
         typeAtt.setType(String.valueOf(Character.toUpperCase(termAtt.termBuffer()[0])));
Index: contrib/analyzers/common/src/test/org/apache/lucene/analysis/cz/TestCzechAnalyzer.java
===================================================================
--- contrib/analyzers/common/src/test/org/apache/lucene/analysis/cz/TestCzechAnalyzer.java	(revision 833861)
+++ contrib/analyzers/common/src/test/org/apache/lucene/analysis/cz/TestCzechAnalyzer.java	(working copy)
@@ -51,6 +51,7 @@
    * An input stream that always throws IOException for testing.
    */
   private class UnreliableInputStream extends InputStream {
+    @Override
     public int read() throws IOException {
       throw new IOException();
     }
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase.java	(working copy)
@@ -137,6 +137,7 @@
     payloadAtt.setPayload(token.getPayload());
   }
   
+  @Override
   public final boolean incrementToken() throws IOException {
     if (tokens.size() > 0) {
       setToken((Token)tokens.removeFirst());
@@ -205,6 +206,7 @@
   
   protected abstract void decomposeInternal(final Token token);
 
+  @Override
   public void reset() throws IOException {
     super.reset();
     tokens.clear();
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/CharVector.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/CharVector.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/CharVector.java	(working copy)
@@ -81,6 +81,7 @@
     n = 0;
   }
 
+  @Override
   public Object clone() {
     CharVector cv = new CharVector((char[]) array.clone(), blockSize);
     cv.n = this.n;
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree.java	(working copy)
@@ -348,6 +348,7 @@
     return length;
   }
 
+  @Override
   public Object clone() {
     TernaryTree t = new TernaryTree();
     t.lo = (char[]) this.lo.clone();
@@ -483,6 +484,7 @@
         child = c;
       }
 
+      @Override
       public Object clone() {
         return new Item(parent, child);
       }
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/HyphenationTree.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/HyphenationTree.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/HyphenationTree.java	(working copy)
@@ -466,6 +466,7 @@
     insert(pattern, (char) k);
   }
 
+  @Override
   public void printStats() {
     System.out.println("Value space size = "
         + Integer.toString(vspace.length()));
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/PatternParser.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/PatternParser.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/PatternParser.java	(working copy)
@@ -266,6 +266,7 @@
   //
   // EntityResolver methods
   //
+  @Override
   public InputSource resolveEntity(String publicId, String systemId) {
     return HyphenationDTDGenerator.generateDTD();
   }
@@ -278,6 +279,7 @@
    * @see org.xml.sax.ContentHandler#startElement(java.lang.String,
    *      java.lang.String, java.lang.String, org.xml.sax.Attributes)
    */
+  @Override
   public void startElement(String uri, String local, String raw,
       Attributes attrs) {
     if (local.equals("hyphen-char")) {
@@ -307,6 +309,7 @@
    * @see org.xml.sax.ContentHandler#endElement(java.lang.String,
    *      java.lang.String, java.lang.String)
    */
+  @Override
   public void endElement(String uri, String local, String raw) {
 
     if (token.length() > 0) {
@@ -343,6 +346,7 @@
   /**
    * @see org.xml.sax.ContentHandler#characters(char[], int, int)
    */
+  @Override
   public void characters(char ch[], int start, int length) {
     StringBuffer chars = new StringBuffer(length);
     chars.append(ch, start, length);
@@ -376,6 +380,7 @@
   /**
    * @see org.xml.sax.ErrorHandler#warning(org.xml.sax.SAXParseException)
    */
+  @Override
   public void warning(SAXParseException ex) {
     errMsg = "[Warning] " + getLocationString(ex) + ": " + ex.getMessage();
   }
@@ -383,6 +388,7 @@
   /**
    * @see org.xml.sax.ErrorHandler#error(org.xml.sax.SAXParseException)
    */
+  @Override
   public void error(SAXParseException ex) {
     errMsg = "[Error] " + getLocationString(ex) + ": " + ex.getMessage();
   }
@@ -390,6 +396,7 @@
   /**
    * @see org.xml.sax.ErrorHandler#fatalError(org.xml.sax.SAXParseException)
    */
+  @Override
   public void fatalError(SAXParseException ex) throws SAXException {
     errMsg = "[Fatal Error] " + getLocationString(ex) + ": " + ex.getMessage();
     throw ex;
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/Hyphen.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/Hyphen.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/Hyphen.java	(working copy)
@@ -51,6 +51,7 @@
     postBreak = null;
   }
 
+  @Override
   public String toString() {
     if (noBreak == null && postBreak == null && preBreak != null
         && preBreak.equals("-")) {
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilter.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilter.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilter.java	(working copy)
@@ -81,6 +81,7 @@
     super(input, dictionary, minWordSize, minSubwordSize, maxSubwordSize, onlyLongestMatch);
   }
 
+  @Override
   protected void decomposeInternal(final Token token) {
     // Only words longer than minWordSize get processed
     if (token.termLength() < this.minWordSize) {
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter.java	(working copy)
@@ -149,6 +149,7 @@
     return tree;
   }
 
+  @Override
   protected void decomposeInternal(final Token token) {
     // get the hyphenation points
     Hyphenation hyphens = hyphenator.hyphenate(token.termBuffer(), 0, token
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianLetterTokenizer.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianLetterTokenizer.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianLetterTokenizer.java	(working copy)
@@ -49,6 +49,7 @@
      * Collects only characters which satisfy
      * {@link Character#isLetter(char)}.
      */
+    @Override
     protected boolean isTokenChar(char c)
     {
         if (Character.isLetter(c) || (c >= '0' && c <= '9'))
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianLowerCaseFilter.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianLowerCaseFilter.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianLowerCaseFilter.java	(working copy)
@@ -39,6 +39,7 @@
         termAtt = addAttribute(TermAttribute.class);
     }
 
+    @Override
     public final boolean incrementToken() throws IOException
     {
       if (input.incrementToken()) {
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianStemFilter.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianStemFilter.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianStemFilter.java	(working copy)
@@ -51,6 +51,7 @@
     /**
      * Returns the next token in the stream, or null at EOS
      */
+    @Override
     public final boolean incrementToken() throws IOException
     {
       if (input.incrementToken()) {
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianAnalyzer.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianAnalyzer.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianAnalyzer.java	(working copy)
@@ -97,6 +97,7 @@
      *   {@link RussianLowerCaseFilter}, {@link StopFilter}, 
      *   and {@link RussianStemFilter}
      */
+    @Override
     public TokenStream tokenStream(String fieldName, Reader reader)
     {
         TokenStream result = new RussianLetterTokenizer(reader);
@@ -121,6 +122,7 @@
      *   {@link RussianLowerCaseFilter}, {@link StopFilter}, 
      *   and {@link RussianStemFilter}
      */
+    @Override
     public TokenStream reusableTokenStream(String fieldName, Reader reader) 
       throws IOException {
     SavedStreams streams = (SavedStreams) getPreviousTokenStream();
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/fa/PersianAnalyzer.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/fa/PersianAnalyzer.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/fa/PersianAnalyzer.java	(working copy)
@@ -152,6 +152,7 @@
    *         {@link ArabicNormalizationFilter},
    *         {@link PersianNormalizationFilter} and Persian Stop words
    */
+  @Override
   public TokenStream tokenStream(String fieldName, Reader reader) {
     TokenStream result = new ArabicLetterTokenizer(reader);
     result = new LowerCaseFilter(result);
@@ -181,6 +182,7 @@
    *         {@link ArabicNormalizationFilter},
    *         {@link PersianNormalizationFilter} and Persian Stop words
    */
+  @Override
   public TokenStream reusableTokenStream(String fieldName, Reader reader)
       throws IOException {
     SavedStreams streams = (SavedStreams) getPreviousTokenStream();
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/fa/PersianNormalizationFilter.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/fa/PersianNormalizationFilter.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/fa/PersianNormalizationFilter.java	(working copy)
@@ -40,6 +40,7 @@
     termAtt = addAttribute(TermAttribute.class);
   }
 
+  @Override
   public boolean incrementToken() throws IOException {
     if (input.incrementToken()) {
       final int newlen = normalizer.normalize(termAtt.termBuffer(), termAtt
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/sinks/DateRecognizerSinkFilter.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/sinks/DateRecognizerSinkFilter.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/sinks/DateRecognizerSinkFilter.java	(working copy)
@@ -49,6 +49,7 @@
     this.dateFormat = dateFormat; 
   }
 
+  @Override
   public boolean accept(AttributeSource source) {
     if (termAtt == null) {
       termAtt = source.addAttribute(TermAttribute.class);
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/sinks/TokenRangeSinkFilter.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/sinks/TokenRangeSinkFilter.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/sinks/TokenRangeSinkFilter.java	(working copy)
@@ -37,6 +37,7 @@
   }
 
   
+  @Override
   public boolean accept(AttributeSource source) {
     try {
       if (count >= lower && count < upper){
@@ -48,6 +49,7 @@
     }
   }
 
+  @Override
   public void reset() throws IOException {
     count = 0;
   }
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/sinks/TokenTypeSinkFilter.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/sinks/TokenTypeSinkFilter.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/sinks/TokenTypeSinkFilter.java	(working copy)
@@ -29,6 +29,7 @@
     this.typeToMatch = typeToMatch;
   }
 
+  @Override
   public boolean accept(AttributeSource source) {
     if (typeAtt == null) {
       typeAtt = source.addAttribute(TypeAttribute.class);
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/de/GermanAnalyzer.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/de/GermanAnalyzer.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/de/GermanAnalyzer.java	(working copy)
@@ -149,6 +149,7 @@
    *         {@link StandardFilter}, {@link LowerCaseFilter}, {@link StopFilter}, and
    *         {@link GermanStemFilter}
    */
+  @Override
   public TokenStream tokenStream(String fieldName, Reader reader) {
     TokenStream result = new StandardTokenizer(matchVersion, reader);
     result = new StandardFilter(result);
@@ -172,6 +173,7 @@
    *         {@link StandardFilter}, {@link LowerCaseFilter}, {@link StopFilter}, and
    *         {@link GermanStemFilter}
    */
+  @Override
   public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {
     if (overridesTokenStreamMethod) {
       // LUCENE-1678: force fallback to tokenStream() if we
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/de/GermanStemFilter.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/de/GermanStemFilter.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/de/GermanStemFilter.java	(working copy)
@@ -61,6 +61,7 @@
     /**
      * @return  Returns true for next token in the stream, or false at EOS
      */
+    @Override
     public boolean incrementToken() throws IOException {
       if (input.incrementToken()) {
         String term = termAtt.term();
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter.java	(working copy)
@@ -163,6 +163,7 @@
   /* (non-Javadoc)
    * @see org.apache.lucene.analysis.TokenStream#next()
    */
+  @Override
   public final boolean incrementToken() throws IOException {
     while (true) {
       if (nextToken == null) {
@@ -328,6 +329,7 @@
     return true;
   }
 
+  @Override
   public void reset() throws IOException {
     super.reset();
     nextToken = null;
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapper.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapper.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapper.java	(working copy)
@@ -98,6 +98,7 @@
     this.outputUnigrams = outputUnigrams;
   }
 
+  @Override
   public TokenStream tokenStream(String fieldName, Reader reader) {
     TokenStream wrapped;
     try {
@@ -116,6 +117,7 @@
     ShingleFilter shingle;
   };
   
+  @Override
   public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {
     if (overridesTokenStreamMethod) {
       // LUCENE-1678: force fallback to tokenStream() if we
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter.java	(working copy)
@@ -345,6 +345,7 @@
   private Set<List<Token>> shinglesSeen = new HashSet<List<Token>>();
 
 
+  @Override
   public void reset() throws IOException {
     permutations = null;
     shinglesSeen.clear();
@@ -355,6 +356,7 @@
 
   private Token reusableToken = new Token();
 
+  @Override
   public final boolean incrementToken() throws IOException {
     if (matrix == null) {
       matrix = new Matrix();
@@ -743,6 +745,7 @@
         return Matrix.this.columns.indexOf(this);
       }
 
+      @Override
       public String toString() {
         return "Column{" +
             "first=" + first +
@@ -807,6 +810,7 @@
 //          return ret;
 //        }
 
+        @Override
         public String toString() {
           return "Row{" +
               "index=" + getIndex() +
@@ -863,6 +867,7 @@
       };
     }
 
+    @Override
     public String toString() {
       return "Matrix{" +
           "columns=" + columns +
@@ -920,17 +925,21 @@
    */
   public static class OneDimensionalNonWeightedTokenSettingsCodec extends TokenSettingsCodec {
 
+    @Override
     public TokenPositioner getTokenPositioner(Token token) throws IOException {
       return TokenPositioner.newColumn;
     }
 
+    @Override
     public void setTokenPositioner(Token token, TokenPositioner tokenPositioner) {
     }
 
+    @Override
     public float getWeight(Token token) {
       return 1f;
     }
 
+    @Override
     public void setWeight(Token token, float weight) {
     }
 
@@ -944,6 +953,7 @@
    */
   public static class TwoDimensionalNonWeightedSynonymTokenSettingsCodec extends TokenSettingsCodec {
 
+    @Override
     public TokenPositioner getTokenPositioner(Token token) throws IOException {
       if (token.getPositionIncrement() == 0) {
         return TokenPositioner.newRow;
@@ -952,14 +962,17 @@
       }
     }
 
+    @Override
     public void setTokenPositioner(Token token, TokenPositioner tokenPositioner) {
       throw new UnsupportedOperationException();
     }
 
+    @Override
     public float getWeight(Token token) {
       return 1f;
     }
 
+    @Override
     public void setWeight(Token token, float weight) {
     }
 
@@ -981,6 +994,7 @@
      * @return the token flags int value as TokenPosition
      * @throws IOException
      */
+    @Override
     public TokenPositioner getTokenPositioner(Token token) throws IOException {
       switch (token.getFlags()) {
         case 0:
@@ -999,6 +1013,7 @@
      * @param token
      * @param tokenPositioner
      */
+    @Override
     public void setTokenPositioner(Token token, TokenPositioner tokenPositioner) {
       token.setFlags(tokenPositioner.getIndex());
     }
@@ -1009,6 +1024,7 @@
      * @param token
      * @return 32 bit float
      */
+    @Override
     public float getWeight(Token token) {
       if (token.getPayload() == null || token.getPayload().getData() == null) {
         return 1f;
@@ -1022,6 +1038,7 @@
      * @param token
      * @param weight
      */
+    @Override
     public void setWeight(Token token, float weight) {
       if (weight == 1f) {
         token.setPayload(null);
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/cn/ChineseAnalyzer.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/cn/ChineseAnalyzer.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/cn/ChineseAnalyzer.java	(working copy)
@@ -40,6 +40,7 @@
     * @return  A {@link TokenStream} built from a {@link ChineseTokenizer} 
     *   filtered with {@link ChineseFilter}.
     */
+    @Override
     public final TokenStream tokenStream(String fieldName, Reader reader) {
         TokenStream result = new ChineseTokenizer(reader);
         result = new ChineseFilter(result);
@@ -58,6 +59,7 @@
     * @return A {@link TokenStream} built from a {@link ChineseTokenizer} 
     *   filtered with {@link ChineseFilter}.
     */
+    @Override
     public final TokenStream reusableTokenStream(String fieldName, Reader reader)
       throws IOException {
       /* tokenStream() is final, no back compat issue */
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/cn/ChineseFilter.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/cn/ChineseFilter.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/cn/ChineseFilter.java	(working copy)
@@ -67,6 +67,7 @@
         termAtt = addAttribute(TermAttribute.class);
     }
 
+    @Override
     public boolean incrementToken() throws IOException {
 
         while (input.incrementToken()) {
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/cn/ChineseTokenizer.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/cn/ChineseTokenizer.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/cn/ChineseTokenizer.java	(working copy)
@@ -111,6 +111,7 @@
             return false;
     }
 
+    @Override
     public boolean incrementToken() throws IOException {
         clearAttributes();
 
@@ -158,17 +159,20 @@
         }
     }
     
+    @Override
     public final void end() {
       // set final offset
       final int finalOffset = offset;
       this.offsetAtt.setOffset(finalOffset, finalOffset);
     }
 
+    @Override
     public void reset() throws IOException {
       super.reset();
       offset = bufferIndex = dataLen = 0;
     }
     
+    @Override
     public void reset(Reader input) throws IOException {
       super.reset(input);
       reset();
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/el/GreekAnalyzer.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/el/GreekAnalyzer.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/el/GreekAnalyzer.java	(working copy)
@@ -99,6 +99,7 @@
      * @return  A {@link TokenStream} built from a {@link StandardTokenizer} filtered with
      *                  {@link GreekLowerCaseFilter} and {@link StopFilter}
      */
+    @Override
     public TokenStream tokenStream(String fieldName, Reader reader)
     {
         TokenStream result = new StandardTokenizer(matchVersion, reader);
@@ -120,6 +121,7 @@
      * @return  A {@link TokenStream} built from a {@link StandardTokenizer} filtered with
      *                  {@link GreekLowerCaseFilter} and {@link StopFilter}
      */
+    @Override
     public TokenStream reusableTokenStream(String fieldName, Reader reader) 
       throws IOException {
       SavedStreams streams = (SavedStreams) getPreviousTokenStream();
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/el/GreekLowerCaseFilter.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/el/GreekLowerCaseFilter.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/el/GreekLowerCaseFilter.java	(working copy)
@@ -37,6 +37,7 @@
     	termAtt = addAttribute(TermAttribute.class);
     }
 
+    @Override
     public boolean incrementToken() throws IOException {
       if (input.incrementToken()) {
         char[] chArray = termAtt.termBuffer();
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/ar/ArabicStemFilter.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/ar/ArabicStemFilter.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/ar/ArabicStemFilter.java	(working copy)
@@ -39,6 +39,7 @@
     termAtt = addAttribute(TermAttribute.class);
   }
 
+  @Override
   public boolean incrementToken() throws IOException {
     if (input.incrementToken()) {
       int newlen = stemmer.stem(termAtt.termBuffer(), termAtt.termLength());
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/ar/ArabicAnalyzer.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/ar/ArabicAnalyzer.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/ar/ArabicAnalyzer.java	(working copy)
@@ -152,6 +152,7 @@
    * 			{@link LowerCaseFilter}, {@link StopFilter}, {@link ArabicNormalizationFilter}
    *            and {@link ArabicStemFilter}.
    */
+  @Override
   public final TokenStream tokenStream(String fieldName, Reader reader) {
     TokenStream result = new ArabicLetterTokenizer( reader );
     result = new LowerCaseFilter(result);
@@ -177,6 +178,7 @@
    *            {@link LowerCaseFilter}, {@link StopFilter}, {@link ArabicNormalizationFilter}
    *            and {@link ArabicStemFilter}.
    */
+  @Override
   public TokenStream reusableTokenStream(String fieldName, Reader reader)
       throws IOException {
     SavedStreams streams = (SavedStreams) getPreviousTokenStream();
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/ar/ArabicLetterTokenizer.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/ar/ArabicLetterTokenizer.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/ar/ArabicLetterTokenizer.java	(working copy)
@@ -47,6 +47,7 @@
    * Allows for Letter category or NonspacingMark category
    * @see org.apache.lucene.analysis.LetterTokenizer#isTokenChar(char)
    */
+  @Override
   protected boolean isTokenChar(char c) {
     return super.isTokenChar(c) || Character.getType(c) == Character.NON_SPACING_MARK;
   }
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/ar/ArabicNormalizationFilter.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/ar/ArabicNormalizationFilter.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/ar/ArabicNormalizationFilter.java	(working copy)
@@ -39,6 +39,7 @@
     termAtt = addAttribute(TermAttribute.class);
   }
 
+  @Override
   public boolean incrementToken() throws IOException {
     if (input.incrementToken()) {
       int newlen = normalizer.normalize(termAtt.termBuffer(), termAtt.termLength());
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/br/BrazilianAnalyzer.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/br/BrazilianAnalyzer.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/br/BrazilianAnalyzer.java	(working copy)
@@ -146,6 +146,7 @@
 	 * 			{@link LowerCaseFilter}, {@link StandardFilter}, {@link StopFilter}, and 
 	 *          {@link BrazilianStemFilter}.
 	 */
+	@Override
 	public final TokenStream tokenStream(String fieldName, Reader reader) {
                 TokenStream result = new StandardTokenizer( matchVersion, reader );
 		result = new LowerCaseFilter( result );
@@ -169,6 +170,7 @@
      *          {@link LowerCaseFilter}, {@link StandardFilter}, {@link StopFilter}, and 
      *          {@link BrazilianStemFilter}.
      */
+    @Override
     public TokenStream reusableTokenStream(String fieldName, Reader reader)
       throws IOException {
       SavedStreams streams = (SavedStreams) getPreviousTokenStream();
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/br/BrazilianStemFilter.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/br/BrazilianStemFilter.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/br/BrazilianStemFilter.java	(working copy)
@@ -48,6 +48,7 @@
     this.exclusions = exclusiontable;
   }
 
+  @Override
   public boolean incrementToken() throws IOException {
     if (input.incrementToken()) {
       String term = termAtt.term();
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/SingleTokenTokenStream.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/SingleTokenTokenStream.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/SingleTokenTokenStream.java	(working copy)
@@ -45,6 +45,7 @@
     assert (tokenAtt instanceof Token);
   }
 
+  @Override
   public final boolean incrementToken() throws IOException {
     if (exhausted) {
       return false;
@@ -56,6 +57,7 @@
     }
   }
 
+  @Override
   public void reset() throws IOException {
     exhausted = false;
   }
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer.java	(working copy)
@@ -216,6 +216,7 @@
    *            the reader delivering the text
    * @return a new token stream
    */
+  @Override
   public TokenStream tokenStream(String fieldName, Reader reader) {
     if (reader instanceof FastStringReader) { // fast path
       return tokenStream(fieldName, ((FastStringReader)reader).getString());
@@ -236,6 +237,7 @@
    *            the reference object with which to compare.
    * @return true if equal, false otherwise
    */
+  @Override
   public boolean equals(Object other) {
     if (this  == other) return true;
     if (this  == DEFAULT_ANALYZER && other == EXTENDED_ANALYZER) return false;
@@ -256,6 +258,7 @@
    * 
    * @return the hash code.
    */
+  @Override
   public int hashCode() {
     if (this == DEFAULT_ANALYZER) return -1218418418; // fast path
     if (this == EXTENDED_ANALYZER) return 1303507063; // fast path
@@ -335,6 +338,7 @@
       this.toLowerCase = toLowerCase;
     }
 
+    @Override
     public final boolean incrementToken() {
       if (matcher == null) return false;
       clearAttributes();
@@ -361,6 +365,7 @@
       }
     }
     
+    @Override
     public final void end() {
       // set final offset
       final int finalOffset = str.length();
@@ -394,6 +399,7 @@
       this.stopWords = stopWords;
     }
 
+    @Override
     public boolean incrementToken() {
       clearAttributes();
       // cache loop instance vars (performance)
@@ -442,6 +448,7 @@
       return true;
     }
     
+    @Override
     public final void end() {
       // set final offset
       final int finalOffset = str.length();
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/PrefixAwareTokenFilter.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/PrefixAwareTokenFilter.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/PrefixAwareTokenFilter.java	(working copy)
@@ -84,6 +84,7 @@
 
   private boolean prefixExhausted;
 
+  @Override
   public final boolean incrementToken() throws IOException {
     if (!prefixExhausted) {
       Token nextToken = getNextPrefixInputToken(reusableToken);
@@ -156,11 +157,13 @@
     return suffixToken;
   }
 
+  @Override
   public void close() throws IOException {
     prefix.close();
     suffix.close();
   }
 
+  @Override
   public void reset() throws IOException {
     super.reset();
     if (prefix != null) {
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/EmptyTokenStream.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/EmptyTokenStream.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/EmptyTokenStream.java	(working copy)
@@ -27,6 +27,7 @@
  */
 public final class EmptyTokenStream extends TokenStream {
 
+  @Override
   public final boolean incrementToken() throws IOException {
     return false;
   }
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/PrefixAndSuffixAwareTokenFilter.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/PrefixAndSuffixAwareTokenFilter.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/PrefixAndSuffixAwareTokenFilter.java	(working copy)
@@ -35,11 +35,13 @@
   public PrefixAndSuffixAwareTokenFilter(TokenStream prefix, TokenStream input, TokenStream suffix) {
     super(suffix);
     prefix = new PrefixAwareTokenFilter(prefix, input) {
+      @Override
       public Token updateSuffixToken(Token suffixToken, Token lastInputToken) {
         return PrefixAndSuffixAwareTokenFilter.this.updateInputToken(suffixToken, lastInputToken);
       }
     };
     this.suffix = new PrefixAwareTokenFilter(prefix, suffix) {
+      @Override
       public Token updateSuffixToken(Token suffixToken, Token lastInputToken) {
         return PrefixAndSuffixAwareTokenFilter.this.updateSuffixToken(suffixToken, lastInputToken);
       }
@@ -59,15 +61,18 @@
   }
 
 
+  @Override
   public final boolean incrementToken() throws IOException {
     return suffix.incrementToken();
   }
 
+  @Override
   public void reset() throws IOException {
     suffix.reset();
   }
 
 
+  @Override
   public void close() throws IOException {
     suffix.close();
   }
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenizer.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenizer.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenizer.java	(working copy)
@@ -101,6 +101,7 @@
   }
 
   /** Returns the next token in the stream, or null at EOS. */
+  @Override
   public final boolean incrementToken() throws IOException {
     clearAttributes();
     if (!started) {
@@ -128,17 +129,20 @@
     return true;
   }
   
+  @Override
   public final void end() {
     // set final offset
     final int finalOffset = inLen;
     this.offsetAtt.setOffset(finalOffset, finalOffset);
   }    
   
+  @Override
   public void reset(Reader input) throws IOException {
     super.reset(input);
     reset();
   }
 
+  @Override
   public void reset() throws IOException {
     super.reset();
     started = false;
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter.java	(working copy)
@@ -39,10 +39,16 @@
   public static enum Side {
 
     /** Get the n-gram from the front of the input */
-    FRONT { public String getLabel() { return "front"; } },
+    FRONT {
+      @Override
+      public String getLabel() { return "front"; }
+    },
 
     /** Get the n-gram from the end of the input */
-    BACK  { public String getLabel() { return "back"; } };
+    BACK  {
+      @Override
+      public String getLabel() { return "back"; }
+    };
 
     public abstract String getLabel();
 
@@ -117,6 +123,7 @@
     this(input, Side.getSide(sideLabel), minGram, maxGram);
   }
 
+  @Override
   public final boolean incrementToken() throws IOException {
     while (true) {
       if (curTermBuffer == null) {
@@ -144,6 +151,7 @@
     }
   }
 
+  @Override
   public void reset() throws IOException {
     super.reset();
     curTermBuffer = null;
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenizer.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenizer.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenizer.java	(working copy)
@@ -44,10 +44,16 @@
   public static enum Side {
 
     /** Get the n-gram from the front of the input */
-    FRONT { public String getLabel() { return "front"; } },
+    FRONT {
+      @Override
+      public String getLabel() { return "front"; }
+    },
 
     /** Get the n-gram from the end of the input */
-    BACK  { public String getLabel() { return "back"; } };
+    BACK  {
+      @Override
+      public String getLabel() { return "back"; }
+    };
 
     public abstract String getLabel();
 
@@ -174,6 +180,7 @@
   }
 
   /** Returns the next token in the stream, or null at EOS. */
+  @Override
   public final boolean incrementToken() throws IOException {
     clearAttributes();
     // if we are just starting, read the whole input
@@ -205,17 +212,20 @@
     return true;
   }
   
+  @Override
   public final void end() {
     // set final offset
     final int finalOffset = inLen;
     this.offsetAtt.setOffset(finalOffset, finalOffset);
   }    
 
+  @Override
   public void reset(Reader input) throws IOException {
     super.reset(input);
     reset();
   }
 
+  @Override
   public void reset() throws IOException {
     super.reset();
     started = false;
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter.java	(working copy)
@@ -72,6 +72,7 @@
   }
 
   /** Returns the next token in the stream, or null at EOS. */
+  @Override
   public final boolean incrementToken() throws IOException {
     while (true) {
       if (curTermBuffer == null) {
@@ -98,6 +99,7 @@
     }
   }
 
+  @Override
   public void reset() throws IOException {
     super.reset();
     curTermBuffer = null;
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/position/PositionFilter.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/position/PositionFilter.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/position/PositionFilter.java	(working copy)
@@ -62,6 +62,7 @@
     this.positionIncrement = positionIncrement;
   }
 
+  @Override
   public final boolean incrementToken() throws IOException {
     if (input.incrementToken()) {
       if (firstTokenPositioned) {
@@ -75,6 +76,7 @@
     }
   }
 
+  @Override
   public void reset() throws IOException {
     super.reset();
     firstTokenPositioned = false;
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer.java	(working copy)
@@ -169,6 +169,7 @@
     return stopWords.size();
   }
 
+  @Override
   public TokenStream tokenStream(String fieldName, Reader reader) {
     TokenStream result;
     try {
@@ -195,6 +196,7 @@
     TokenStream withStopFilter;
   };
   
+  @Override
   public TokenStream reusableTokenStream(String fieldName, Reader reader)
       throws IOException {
     if (overridesTokenStreamMethod) {
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/cjk/CJKTokenizer.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/cjk/CJKTokenizer.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/cjk/CJKTokenizer.java	(working copy)
@@ -145,6 +145,7 @@
      *         happened in the InputStream
      *
      */
+    @Override
     public boolean incrementToken() throws IOException {
         clearAttributes();
         /** how many character(s) has been stored in buffer */
@@ -297,12 +298,14 @@
       }
     }
     
+    @Override
     public final void end() {
       // set final offset
       final int finalOffset = offset;
       this.offsetAtt.setOffset(finalOffset, finalOffset);
     }
     
+    @Override
     public void reset() throws IOException {
       super.reset();
       offset = bufferIndex = dataLen = 0;
@@ -310,6 +313,7 @@
       tokenType = WORD_TYPE;
     }
     
+    @Override
     public void reset(Reader reader) throws IOException {
       super.reset(reader);
       reset();
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/cjk/CJKAnalyzer.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/cjk/CJKAnalyzer.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/cjk/CJKAnalyzer.java	(working copy)
@@ -89,6 +89,7 @@
    * @return A {@link TokenStream} built from {@link CJKTokenizer}, filtered with
    *    {@link StopFilter}
    */
+  @Override
   public final TokenStream tokenStream(String fieldName, Reader reader) {
     return new StopFilter(StopFilter.getEnablePositionIncrementsVersionDefault(matchVersion),
                           new CJKTokenizer(reader), stopTable);
@@ -108,6 +109,7 @@
    * @return A {@link TokenStream} built from {@link CJKTokenizer}, filtered with
    *    {@link StopFilter}
    */
+  @Override
   public final TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {
     /* tokenStream() is final, no back compat issue */
     SavedStreams streams = (SavedStreams) getPreviousTokenStream();
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/FrenchStemFilter.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/FrenchStemFilter.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/FrenchStemFilter.java	(working copy)
@@ -59,6 +59,7 @@
 	/**
 	 * @return  Returns true for the next token in the stream, or false at EOS
 	 */
+	@Override
 	public boolean incrementToken() throws IOException {
 	  if (input.incrementToken()) {
 	    String term = termAtt.term();
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/ElisionFilter.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/ElisionFilter.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/ElisionFilter.java	(working copy)
@@ -78,6 +78,7 @@
   /**
    * Increments the {@link TokenStream} with a {@link TermAttribute} without elisioned start
    */
+  @Override
   public final boolean incrementToken() throws IOException {
     if (input.incrementToken()) {
       char[] termBuffer = termAtt.termBuffer();
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer.java	(working copy)
@@ -155,6 +155,7 @@
    *         filtered with {@link StandardFilter}, {@link StopFilter}, 
    *         {@link FrenchStemFilter} and {@link LowerCaseFilter}
    */
+  @Override
   public final TokenStream tokenStream(String fieldName, Reader reader) {
     TokenStream result = new StandardTokenizer(matchVersion, reader);
     result = new StandardFilter(result);
@@ -179,6 +180,7 @@
    *         filtered with {@link StandardFilter}, {@link StopFilter}, 
    *         {@link FrenchStemFilter} and {@link LowerCaseFilter}
    */
+  @Override
   public TokenStream reusableTokenStream(String fieldName, Reader reader)
       throws IOException {
     SavedStreams streams = (SavedStreams) getPreviousTokenStream();
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/nl/DutchStemFilter.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/nl/DutchStemFilter.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/nl/DutchStemFilter.java	(working copy)
@@ -69,6 +69,7 @@
   /**
    * Returns the next token in the stream, or null at EOS
    */
+  @Override
   public boolean incrementToken() throws IOException {
     if (input.incrementToken()) {
       String term = termAtt.term();
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer.java	(working copy)
@@ -188,6 +188,7 @@
    *   filtered with {@link StandardFilter}, {@link StopFilter}, 
    *   and {@link DutchStemFilter}
    */
+  @Override
   public TokenStream tokenStream(String fieldName, Reader reader) {
     TokenStream result = new StandardTokenizer(matchVersion, reader);
     result = new StandardFilter(result);
@@ -210,6 +211,7 @@
    *   filtered with {@link StandardFilter}, {@link StopFilter}, 
    *   and {@link DutchStemFilter}
    */
+  @Override
   public TokenStream reusableTokenStream(String fieldName, Reader reader)
       throws IOException {
     if (overridesTokenStreamMethod) {
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/reverse/ReverseStringFilter.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/reverse/ReverseStringFilter.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/reverse/ReverseStringFilter.java	(working copy)
@@ -88,6 +88,7 @@
     termAtt = addAttribute(TermAttribute.class);
   }
 
+  @Override
   public boolean incrementToken() throws IOException {
     if (input.incrementToken()) {
       int len = termAtt.termLength();
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/th/ThaiWordFilter.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/th/ThaiWordFilter.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/th/ThaiWordFilter.java	(working copy)
@@ -48,6 +48,7 @@
     offsetAtt = addAttribute(OffsetAttribute.class);
   }
   
+  @Override
   public final boolean incrementToken() throws IOException {
     if (thaiState != null) {
       int start = breaker.current();
@@ -82,6 +83,7 @@
     return false;
   }
   
+  @Override
   public void reset() throws IOException {
     super.reset();
     thaiState = null;
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/th/ThaiAnalyzer.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/th/ThaiAnalyzer.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/th/ThaiAnalyzer.java	(working copy)
@@ -43,6 +43,7 @@
     this.matchVersion = matchVersion;
   }
   
+  @Override
   public TokenStream tokenStream(String fieldName, Reader reader) {
     TokenStream ts = new StandardTokenizer(matchVersion, reader);
     ts = new StandardFilter(ts);
@@ -57,6 +58,7 @@
     TokenStream result;
   };
   
+  @Override
   public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {
     if (overridesTokenStreamMethod) {
       // LUCENE-1678: force fallback to tokenStream() if we
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilter.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilter.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilter.java	(working copy)
@@ -59,6 +59,7 @@
     this.encoder = encoder;
   }
 
+  @Override
   public boolean incrementToken() throws IOException {
     boolean result = false;
     if (input.incrementToken()) {
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/payloads/NumericPayloadTokenFilter.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/payloads/NumericPayloadTokenFilter.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/payloads/NumericPayloadTokenFilter.java	(working copy)
@@ -48,6 +48,7 @@
     typeAtt = addAttribute(TypeAttribute.class);
   }
 
+  @Override
   public final boolean incrementToken() throws IOException {
     if (input.incrementToken()) {
       if (typeAtt.type().equals(typeMatch))
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilter.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilter.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilter.java	(working copy)
@@ -44,6 +44,7 @@
   }
 
 
+  @Override
   public final boolean incrementToken() throws IOException {
     if (input.incrementToken()) {
       String type = typeAtt.type();
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilter.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilter.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilter.java	(working copy)
@@ -43,6 +43,7 @@
     payAtt = addAttribute(PayloadAttribute.class);
   }
 
+  @Override
   public final boolean incrementToken() throws IOException {
     if (input.incrementToken()) {
       byte[] data = new byte[8];
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/cz/CzechAnalyzer.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/cz/CzechAnalyzer.java	(revision 833861)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/cz/CzechAnalyzer.java	(working copy)
@@ -140,6 +140,7 @@
 	 * @return  A {@link TokenStream} built from a {@link StandardTokenizer} filtered with
 	 * 			{@link StandardFilter}, {@link LowerCaseFilter}, and {@link StopFilter}
 	 */
+	@Override
 	public final TokenStream tokenStream( String fieldName, Reader reader ) {
                 TokenStream result = new StandardTokenizer( matchVersion, reader );
 		result = new StandardFilter( result );
@@ -161,6 +162,7 @@
      * @return  A {@link TokenStream} built from a {@link StandardTokenizer} filtered with
      *          {@link StandardFilter}, {@link LowerCaseFilter}, and {@link StopFilter}
      */
+	@Override
 	public TokenStream reusableTokenStream(String fieldName, Reader reader)
       throws IOException {
       SavedStreams streams = (SavedStreams) getPreviousTokenStream();
Index: contrib/regex/src/test/org/apache/lucene/search/regex/TestRegexQuery.java
===================================================================
--- contrib/regex/src/test/org/apache/lucene/search/regex/TestRegexQuery.java	(revision 833861)
+++ contrib/regex/src/test/org/apache/lucene/search/regex/TestRegexQuery.java	(working copy)
@@ -35,6 +35,7 @@
   private final String FN = "field";
 
 
+  @Override
   public void setUp() {
     RAMDirectory directory = new RAMDirectory();
     try {
@@ -51,6 +52,7 @@
     }
   }
 
+  @Override
   public void tearDown() {
     try {
       searcher.close();
Index: contrib/regex/src/java/org/apache/lucene/search/regex/RegexQuery.java
===================================================================
--- contrib/regex/src/java/org/apache/lucene/search/regex/RegexQuery.java	(revision 833861)
+++ contrib/regex/src/java/org/apache/lucene/search/regex/RegexQuery.java	(working copy)
@@ -58,10 +58,12 @@
     return regexImpl;
   }
 
+  @Override
   protected FilteredTermEnum getEnum(IndexReader reader) throws IOException {
     return new RegexTermEnum(reader, term, regexImpl);
   }
 
+  @Override
   public String toString(String field) {
     StringBuilder buffer = new StringBuilder();
     if (!term.field().equals(field)) {
@@ -74,6 +76,7 @@
   }
 
   /* generated by IntelliJ IDEA */
+  @Override
   public boolean equals(Object o) {
     if (this == o) return true;
     if (o == null || getClass() != o.getClass()) return false;
@@ -85,6 +88,7 @@
   }
 
   /* generated by IntelliJ IDEA */
+  @Override
   public int hashCode() {
     int result = super.hashCode();
     result = 29 * result + regexImpl.hashCode();
Index: contrib/regex/src/java/org/apache/lucene/search/regex/JakartaRegexpCapabilities.java
===================================================================
--- contrib/regex/src/java/org/apache/lucene/search/regex/JakartaRegexpCapabilities.java	(revision 833861)
+++ contrib/regex/src/java/org/apache/lucene/search/regex/JakartaRegexpCapabilities.java	(working copy)
@@ -72,6 +72,7 @@
     return prefix == null ? null : new String(prefix);
   }
 
+  @Override
   public boolean equals(Object o) {
     if (this == o) return true;
     if (o == null || getClass() != o.getClass()) return false;
@@ -83,6 +84,7 @@
     return true;
   }
 
+  @Override
   public int hashCode() {
     return (regexp != null ? regexp.hashCode() : 0);
   }
Index: contrib/regex/src/java/org/apache/lucene/search/regex/SpanRegexQuery.java
===================================================================
--- contrib/regex/src/java/org/apache/lucene/search/regex/SpanRegexQuery.java	(revision 833861)
+++ contrib/regex/src/java/org/apache/lucene/search/regex/SpanRegexQuery.java	(working copy)
@@ -47,6 +47,7 @@
 
   public Term getTerm() { return term; }
 
+  @Override
   public Query rewrite(IndexReader reader) throws IOException {
     RegexQuery orig = new RegexQuery(term);
     orig.setRegexImplementation(regexImpl);
@@ -71,10 +72,12 @@
     return query;
   }
 
+  @Override
   public Spans getSpans(IndexReader reader) throws IOException {
     throw new UnsupportedOperationException("Query should have been rewritten");
   }
 
+  @Override
   public String getField() {
     return term.field();
   }
@@ -86,6 +89,7 @@
   }
 
   /* generated by IntelliJ IDEA */
+  @Override
   public boolean equals(Object o) {
     if (this == o) return true;
     if (o == null || getClass() != o.getClass()) return false;
@@ -99,6 +103,7 @@
   }
 
   /* generated by IntelliJ IDEA */
+  @Override
   public int hashCode() {
     int result;
     result = regexImpl.hashCode();
@@ -106,6 +111,7 @@
     return result;
   }
 
+  @Override
   public String toString(String field) {
     StringBuilder buffer = new StringBuilder();
     buffer.append("spanRegexQuery(");
Index: contrib/regex/src/java/org/apache/lucene/search/regex/JavaUtilRegexCapabilities.java
===================================================================
--- contrib/regex/src/java/org/apache/lucene/search/regex/JavaUtilRegexCapabilities.java	(revision 833861)
+++ contrib/regex/src/java/org/apache/lucene/search/regex/JavaUtilRegexCapabilities.java	(working copy)
@@ -78,6 +78,7 @@
     return null;
   }
 
+  @Override
   public boolean equals(Object o) {
     if (this == o) return true;
     if (o == null || getClass() != o.getClass()) return false;
@@ -89,6 +90,7 @@
     return true;
   }
 
+  @Override
   public int hashCode() {
     return (pattern != null ? pattern.hashCode() : 0);
   }
Index: contrib/regex/src/java/org/apache/lucene/search/regex/RegexTermEnum.java
===================================================================
--- contrib/regex/src/java/org/apache/lucene/search/regex/RegexTermEnum.java	(revision 833861)
+++ contrib/regex/src/java/org/apache/lucene/search/regex/RegexTermEnum.java	(working copy)
@@ -52,6 +52,7 @@
     setEnum(reader.terms(new Term(term.field(), pre)));
   }
 
+  @Override
   protected final boolean termCompare(Term term) {
     if (field == term.field()) {
       String searchText = term.text();
@@ -63,15 +64,18 @@
     return false;
   }
 
+  @Override
   public final float difference() {
 // TODO: adjust difference based on distance of searchTerm.text() and term().text()
     return 1.0f;
   }
 
+  @Override
   public final boolean endEnum() {
     return endEnum;
   }
 
+  @Override
   public void close() throws IOException {
     super.close();
     field = null;
Index: contrib/queries/src/test/org/apache/lucene/search/similar/TestMoreLikeThis.java
===================================================================
--- contrib/queries/src/test/org/apache/lucene/search/similar/TestMoreLikeThis.java	(revision 833861)
+++ contrib/queries/src/test/org/apache/lucene/search/similar/TestMoreLikeThis.java	(working copy)
@@ -41,6 +41,7 @@
     private IndexReader reader;
     private IndexSearcher searcher;
 
+    @Override
     protected void setUp() throws Exception {
 	directory = new RAMDirectory();
 	IndexWriter writer = new IndexWriter(directory, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT),
@@ -56,6 +57,7 @@
 
     }
 
+    @Override
     protected void tearDown() throws Exception {
 	reader.close();
 	searcher.close();
Index: contrib/queries/src/test/org/apache/lucene/search/DuplicateFilterTest.java
===================================================================
--- contrib/queries/src/test/org/apache/lucene/search/DuplicateFilterTest.java	(revision 833861)
+++ contrib/queries/src/test/org/apache/lucene/search/DuplicateFilterTest.java	(working copy)
@@ -39,6 +39,7 @@
 	TermQuery tq=new TermQuery(new Term("text","lucene"));
 	private IndexSearcher searcher;
 
+	@Override
 	protected void setUp() throws Exception
 	{
 		directory = new RAMDirectory();
@@ -60,6 +61,7 @@
 		
 	}
 	
+	@Override
 	protected void tearDown() throws Exception
 	{
 		reader.close();
Index: contrib/queries/src/test/org/apache/lucene/search/BooleanFilterTest.java
===================================================================
--- contrib/queries/src/test/org/apache/lucene/search/BooleanFilterTest.java	(revision 833861)
+++ contrib/queries/src/test/org/apache/lucene/search/BooleanFilterTest.java	(working copy)
@@ -34,6 +34,7 @@
 	private RAMDirectory directory;
 	private IndexReader reader;
 
+	@Override
 	protected void setUp() throws Exception
 	{
 		directory = new RAMDirectory();
Index: contrib/queries/src/test/org/apache/lucene/search/FuzzyLikeThisQueryTest.java
===================================================================
--- contrib/queries/src/test/org/apache/lucene/search/FuzzyLikeThisQueryTest.java	(revision 833861)
+++ contrib/queries/src/test/org/apache/lucene/search/FuzzyLikeThisQueryTest.java	(working copy)
@@ -37,6 +37,7 @@
 	private IndexSearcher searcher;
 	private Analyzer analyzer=new WhitespaceAnalyzer();
 
+	@Override
 	protected void setUp() throws Exception
 	{
 		directory = new RAMDirectory();
Index: contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis.java
===================================================================
--- contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis.java	(revision 833861)
+++ contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis.java	(working copy)
@@ -1015,6 +1015,7 @@
             initialize(s);
         }
 
+        @Override
         protected boolean lessThan(Object[] aa, Object[] bb) {
             Float fa = (Float) aa[2];
             Float fb = (Float) bb[2];
Index: contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThisQuery.java
===================================================================
--- contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThisQuery.java	(revision 833861)
+++ contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThisQuery.java	(working copy)
@@ -60,6 +60,7 @@
         this.analyzer=analyzer;
     }
     
+    @Override
     public Query rewrite(IndexReader reader) throws IOException
     {
         MoreLikeThis mlt=new MoreLikeThis(reader);
@@ -82,6 +83,7 @@
     /* (non-Javadoc)
      * @see org.apache.lucene.search.Query#toString(java.lang.String)
      */
+    @Override
     public String toString(String field)
     {       
         return "like:"+likeText;
Index: contrib/queries/src/java/org/apache/lucene/search/DuplicateFilter.java
===================================================================
--- contrib/queries/src/java/org/apache/lucene/search/DuplicateFilter.java	(revision 833861)
+++ contrib/queries/src/java/org/apache/lucene/search/DuplicateFilter.java	(working copy)
@@ -67,6 +67,7 @@
 		this.processingMode = processingMode;
 	}
 
+  @Override
   public DocIdSet getDocIdSet(IndexReader reader) throws IOException
 	{
 		if(processingMode==PM_FAST_INVALIDATION)
@@ -186,6 +187,7 @@
 	}
 
 
+	@Override
 	public boolean equals(Object obj)
 	{
 		if(this == obj)
@@ -200,6 +202,7 @@
 
 
 
+	@Override
 	public int hashCode()
 	{
 		int hash = 217;
Index: contrib/queries/src/java/org/apache/lucene/search/TermsFilter.java
===================================================================
--- contrib/queries/src/java/org/apache/lucene/search/TermsFilter.java	(revision 833861)
+++ contrib/queries/src/java/org/apache/lucene/search/TermsFilter.java	(working copy)
@@ -52,6 +52,7 @@
 /* (non-Javadoc)
    * @see org.apache.lucene.search.Filter#getDocIdSet(org.apache.lucene.index.IndexReader)
 	 */
+  @Override
   public DocIdSet getDocIdSet(IndexReader reader) throws IOException
 	{
     OpenBitSet result=new OpenBitSet(reader.maxDoc());
@@ -75,6 +76,7 @@
         return result;
 	}
 	
+	@Override
 	public boolean equals(Object obj)
 	{
 		if(this == obj)
@@ -86,6 +88,7 @@
 					 (terms != null && terms.equals(test.terms)));
 	}
 
+	@Override
 	public int hashCode()
 	{
 		int hash=9;
Index: contrib/queries/src/java/org/apache/lucene/search/BooleanFilter.java
===================================================================
--- contrib/queries/src/java/org/apache/lucene/search/BooleanFilter.java	(revision 833861)
+++ contrib/queries/src/java/org/apache/lucene/search/BooleanFilter.java	(working copy)
@@ -52,6 +52,7 @@
    * Returns the a DocIdSetIterator representing the Boolean composition
    * of the filters that have been added.
    */
+  @Override
   public DocIdSet getDocIdSet(IndexReader reader) throws IOException
   {
     OpenBitSetDISI res = null;
@@ -156,6 +157,7 @@
               ((filters1 != null) && filters1.equals(filters2));
   }
   
+  @Override
   public boolean equals(Object obj)
   {
     if (this == obj)
@@ -170,6 +172,7 @@
         && equalFilters(shouldFilters, other.shouldFilters);
   }
 
+  @Override
   public int hashCode()
   {
     int hash=7;
@@ -180,6 +183,7 @@
   }
   
   /** Prints a user-readable version of this query. */
+  @Override
   public String toString()
   {
     StringBuilder buffer = new StringBuilder();
Index: contrib/queries/src/java/org/apache/lucene/search/BoostingQuery.java
===================================================================
--- contrib/queries/src/java/org/apache/lucene/search/BoostingQuery.java	(revision 833861)
+++ contrib/queries/src/java/org/apache/lucene/search/BoostingQuery.java	(working copy)
@@ -53,12 +53,15 @@
       this.context.setBoost(0.0f);                      // ignore context-only matches
     }
 
+    @Override
     public Query rewrite(IndexReader reader) throws IOException {
       BooleanQuery result = new BooleanQuery() {
 
+        @Override
         public Similarity getSimilarity(Searcher searcher) {
           return new DefaultSimilarity() {
 
+            @Override
             public float coord(int overlap, int max) {
               switch (overlap) {
 
@@ -83,6 +86,7 @@
       return result;
     }
 
+    @Override
     public int hashCode() {
       final int prime = 31;
       int result = 1;
@@ -92,6 +96,7 @@
       return result;
     }
 
+    @Override
     public boolean equals(Object obj) {
       if (this == obj)
         return true;
@@ -115,6 +120,7 @@
       return true;
     }
 
+    @Override
     public String toString(String field) {
       return match.toString(field) + "/" + context.toString(field);
     }
Index: contrib/queries/src/java/org/apache/lucene/search/FuzzyLikeThisQuery.java
===================================================================
--- contrib/queries/src/java/org/apache/lucene/search/FuzzyLikeThisQuery.java	(revision 833861)
+++ contrib/queries/src/java/org/apache/lucene/search/FuzzyLikeThisQuery.java	(working copy)
@@ -60,6 +60,7 @@
     boolean ignoreTF=false;
     private int maxNumTerms;
 
+    @Override
     public int hashCode() {
       final int prime = 31;
       int result = 1;
@@ -71,6 +72,7 @@
       return result;
     }
 
+    @Override
     public boolean equals(Object obj) {
       if (this == obj)
         return true;
@@ -123,6 +125,7 @@
 			this.queryString = queryString;
 		}
 
+    @Override
     public int hashCode() {
       final int prime = 31;
       int result = 1;
@@ -135,6 +138,7 @@
       return result;
     }
 
+    @Override
     public boolean equals(Object obj) {
       if (this == obj)
         return true;
@@ -244,6 +248,7 @@
         }     
     }
             
+    @Override
     public Query rewrite(IndexReader reader) throws IOException
     {
         if(rewrittenQuery!=null)
@@ -334,6 +339,7 @@
         /* (non-Javadoc)
          * @see org.apache.lucene.util.PriorityQueue#lessThan(java.lang.Object, java.lang.Object)
          */
+        @Override
         protected boolean lessThan(ScoreTerm termA, ScoreTerm termB) {
           if (termA.score== termB.score)
             return termA.term.compareTo(termB.term) > 0;
@@ -352,11 +358,13 @@
         	  super(t);
         	  this.ignoreTF=ignoreTF;
           }
+          @Override
           public Similarity getSimilarity(Searcher searcher)
           {            
               Similarity result = super.getSimilarity(searcher);
               result = new SimilarityDelegator(result) {
                   
+                  @Override
                   public float tf(float freq)
                   {
                 	  if(ignoreTF)
@@ -365,6 +373,7 @@
                 	  }
             		  return super.tf(freq);
                   }
+                  @Override
                   public float idf(int docFreq, int numDocs)
                   {
                       //IDF is already factored into individual term boosts
@@ -380,6 +389,7 @@
     /* (non-Javadoc)
      * @see org.apache.lucene.search.Query#toString(java.lang.String)
      */
+    @Override
     public String toString(String field)
     {
         return null;
