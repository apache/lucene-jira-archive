From ddfa0d1cdf1f8e3411f4fd6db03e76aa8edf9b20 Mon Sep 17 00:00:00 2001
From: Nicola Buso <nbuso@ebi.ac.uk>
Date: Thu, 27 May 2021 15:47:41 +0100
Subject: [PATCH] Implement negate facet path in DrillDownQuery

---
 .../apache/lucene/facet/DrillDownQuery.java   | 33 ++++++++-
 .../lucene/facet/TestDrillDownQuery.java      | 68 +++++++++++++++++++
 2 files changed, 100 insertions(+), 1 deletion(-)

diff --git a/lucene/facet/src/java/org/apache/lucene/facet/DrillDownQuery.java b/lucene/facet/src/java/org/apache/lucene/facet/DrillDownQuery.java
index 5797801009c..8b1e13ec4ed 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/DrillDownQuery.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/DrillDownQuery.java
@@ -111,14 +111,45 @@ public final class DrillDownQuery extends Query {
    * on the dimension than the indexed facet ordinals.
    */
   public void add(String dim, Query subQuery) {
+    //    assert drillDownDims.size() == dimQueries.size();
+    //    if (drillDownDims.containsKey(dim) == false) {
+    //      drillDownDims.put(dim, drillDownDims.size());
+    //      BooleanQuery.Builder builder = new BooleanQuery.Builder();
+    //      dimQueries.add(builder);
+    //    }
+    validateDim(dim);
+    final int index = drillDownDims.get(dim);
+    dimQueries.get(index).add(subQuery, Occur.SHOULD);
+  }
+
+  /** validate dim data structures and add <i>dim</i> if not present */
+  private void validateDim(String dim) {
     assert drillDownDims.size() == dimQueries.size();
     if (drillDownDims.containsKey(dim) == false) {
       drillDownDims.put(dim, drillDownDims.size());
       BooleanQuery.Builder builder = new BooleanQuery.Builder();
       dimQueries.add(builder);
     }
+  }
+
+  /**
+   * Remove one dimension of drill downs; if you pass the same dimension more than once it is NOT'd
+   * with the previous constraints on that dimension, and all dimensions are AND'd against each
+   * other and the base query.
+   */
+  public void remove(String dim, String... path) {
+    String indexedField = config.getDimConfig(dim).indexFieldName;
+    remove(dim, new TermQuery(term(indexedField, dim, path)));
+  }
+
+  /**
+   * Expert: remove a custom drill-down subQuery. Use this when you have a separate way to
+   * drill-down on the dimension than the indexed facet ordinals.
+   */
+  public void remove(String dim, Query subQuery) {
+    validateDim(dim);
     final int index = drillDownDims.get(dim);
-    dimQueries.get(index).add(subQuery, Occur.SHOULD);
+    dimQueries.get(index).add(subQuery, Occur.MUST_NOT);
   }
 
   @Override
diff --git a/lucene/facet/src/test/org/apache/lucene/facet/TestDrillDownQuery.java b/lucene/facet/src/test/org/apache/lucene/facet/TestDrillDownQuery.java
index e69090fbf80..d8d1fd76868 100644
--- a/lucene/facet/src/test/org/apache/lucene/facet/TestDrillDownQuery.java
+++ b/lucene/facet/src/test/org/apache/lucene/facet/TestDrillDownQuery.java
@@ -529,4 +529,72 @@ public class TestDrillDownQuery extends FacetTestCase {
 
     IOUtils.close(taxoReader, reader, writer, dir, taxoDir);
   }
+
+  public void testDrillDownHierarchyNotSubPaths() throws Exception {
+    Directory dir = newDirectory();
+    RandomIndexWriter writer =
+        new RandomIndexWriter(
+            random(),
+            dir,
+            newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)));
+    Directory taxoDir = newDirectory();
+    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);
+    FacetsConfig config = new FacetsConfig();
+    config.setHierarchical("a", true);
+    config.setHierarchical("b", true);
+    config.setHierarchical("c", true);
+
+    Document doc = new Document();
+    doc.add(new FacetField("a", "a1", "a1.1"));
+    doc.add(new FacetField("b", "b1", "b1.1"));
+    doc.add(new FacetField("c", "c1", "c1.1"));
+    writer.addDocument(config.build(taxoWriter, doc));
+
+    doc = new Document();
+    doc.add(new FacetField("a", "a1", "a1.2"));
+    doc.add(new FacetField("b", "b2", "b2.1"));
+    doc.add(new FacetField("c", "c2", "c2.1"));
+    writer.addDocument(config.build(taxoWriter, doc));
+
+    doc = new Document();
+    doc.add(new FacetField("a", "a1", "a1.2"));
+    doc.add(new FacetField("b", "b2", "b2.2"));
+    doc.add(new FacetField("c", "c2", "c2.1"));
+    writer.addDocument(config.build(taxoWriter, doc));
+
+    taxoWriter.close();
+
+    IndexReader reader = writer.getReader();
+    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);
+    IndexSearcher searcher = newSearcher(reader);
+
+    DrillDownQuery q = new DrillDownQuery(config);
+    q.add("a");
+    assertEquals(3, searcher.count(q));
+
+    q = new DrillDownQuery(config);
+    q.add("a");
+    q.remove("a", "a1", "a1.1");
+    assertEquals(2, searcher.count(q));
+
+    q = new DrillDownQuery(config);
+    q.add("a");
+    q.add("b");
+    assertEquals(3, searcher.count(q));
+
+    q = new DrillDownQuery(config);
+    q.add("a");
+    q.add("b");
+    q.remove("b", "b2");
+    assertEquals(1, searcher.count(q));
+
+    q = new DrillDownQuery(config);
+    q.add("a");
+    q.add("b");
+    q.add("c");
+    q.remove("c", "c1", "c1.1");
+    assertEquals(2, searcher.count(q));
+
+    IOUtils.close(taxoReader, reader, writer, dir, taxoDir);
+  }
 }
-- 
2.31.1

