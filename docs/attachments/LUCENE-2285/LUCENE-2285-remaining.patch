Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/cjk/CJKTokenizer.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/cjk/CJKTokenizer.java	(revision 917020)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/cjk/CJKTokenizer.java	(working copy)
@@ -197,7 +197,7 @@
                     || (ub == Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS)
                ) {
                 if (ub == Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS) {
-                  int i = (int) c;
+                  int i = c;
                   if (i >= 65281 && i <= 65374) {
                     // convert certain HALFWIDTH_AND_FULLWIDTH_FORMS to BASIC_LATIN
                     i = i - 65248;
Index: contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree.java
===================================================================
--- contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree.java	(revision 917020)
+++ contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree.java	(working copy)
@@ -249,7 +249,7 @@
   public static int strcmp(String str, char[] a, int start) {
     int i, d, len = str.length();
     for (i = 0; i < len; i++) {
-      d = (int) str.charAt(i) - a[start + i];
+      d = str.charAt(i) - a[start + i];
       if (d != 0) {
         return d;
       }
@@ -258,7 +258,7 @@
       }
     }
     if (a[start + i] != 0) {
-      return (int) -a[start + i];
+      return -a[start + i];
     }
     return 0;
 
Index: contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.java
===================================================================
--- contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.java	(revision 917020)
+++ contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.java	(working copy)
@@ -223,7 +223,7 @@
         @Override
         public boolean next() throws IOException {
           boolean res;
-          while ((res = super.next())) {
+          while ((res = super.next()) == true) {
             if (!dels.get(doc())) {
               break;
             }
Index: contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity.java
===================================================================
--- contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity.java	(revision 917020)
+++ contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity.java	(working copy)
@@ -189,7 +189,7 @@
        (
         (
          s *
-         (float)(Math.abs(numTerms - l) + Math.abs(numTerms - h) - (h-l))
+         (Math.abs(numTerms - l) + Math.abs(numTerms - h) - (h-l))
          )
         + 1.0f
         )
@@ -248,7 +248,7 @@
     final float max = tf_hyper_max;
     final double base = tf_hyper_base;
     final float xoffset = tf_hyper_xoffset;
-    final double x = (double)(freq - xoffset);
+    final double x = (freq - xoffset);
   
     final float result = min +
       (float)(
Index: contrib/misc/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser.java
===================================================================
--- contrib/misc/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser.java	(revision 917020)
+++ contrib/misc/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser.java	(working copy)
@@ -141,7 +141,7 @@
     if (tlist.size() == 0) {
       return null;
     } else if (tlist.size() == 1) {
-      if (wlist != null && wlist.size() == 1) {
+      if (wlist.size() == 1) {
         /* if wlist contains one wildcard, it must be at the end, because:
          * 1) wildcards are not allowed in 1st position of a term by QueryParser
          * 2) if wildcard was *not* in end, there would be *two* or more tokens */
Index: src/java/org/apache/lucene/util/UnicodeUtil.java
===================================================================
--- src/java/org/apache/lucene/util/UnicodeUtil.java	(revision 917020)
+++ src/java/org/apache/lucene/util/UnicodeUtil.java	(working copy)
@@ -118,7 +118,7 @@
 
     while(true) {
       
-      final int code = (int) source[i++];
+      final int code = source[i++];
 
       if (upto+4 > out.length) {
         out = result.result = ArrayUtil.grow(out, upto+4);
@@ -139,7 +139,7 @@
         // surrogate pair
         // confirm valid high surrogate
         if (code < 0xDC00 && source[i] != 0xffff) {
-          int utf32 = (int) source[i];
+          int utf32 = source[i];
           // confirm valid low surrogate and write pair
           if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) { 
             utf32 = ((code - 0xD7C0) << 10) + (utf32 & 0x3FF);
@@ -174,7 +174,7 @@
 
     while(i < end) {
       
-      final int code = (int) source[i++];
+      final int code = source[i++];
 
       if (upto+4 > out.length) {
         out = result.result = ArrayUtil.grow(out, upto+4);
@@ -192,7 +192,7 @@
         // surrogate pair
         // confirm valid high surrogate
         if (code < 0xDC00 && i < end && source[i] != 0xffff) {
-          int utf32 = (int) source[i];
+          int utf32 = source[i];
           // confirm valid low surrogate and write pair
           if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) { 
             utf32 = ((code - 0xD7C0) << 10) + (utf32 & 0x3FF);
@@ -225,7 +225,7 @@
 
     int upto = 0;
     for(int i=offset;i<end;i++) {
-      final int code = (int) s.charAt(i);
+      final int code = s.charAt(i);
 
       if (upto+4 > out.length) {
         out = result.result = ArrayUtil.grow(out, upto+4);
@@ -243,7 +243,7 @@
         // surrogate pair
         // confirm valid high surrogate
         if (code < 0xDC00 && (i < end-1)) {
-          int utf32 = (int) s.charAt(i+1);
+          int utf32 = s.charAt(i+1);
           // confirm valid low surrogate and write pair
           if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) { 
             utf32 = ((code - 0xD7C0) << 10) + (utf32 & 0x3FF);
Index: src/test/org/apache/lucene/util/TestCharacterUtils.java
===================================================================
--- src/test/org/apache/lucene/util/TestCharacterUtils.java	(revision 917020)
+++ src/test/org/apache/lucene/util/TestCharacterUtils.java	(working copy)
@@ -37,9 +37,9 @@
     CharacterUtils java4 = CharacterUtils.getInstance(Version.LUCENE_30);
     char[] cpAt3 = "Abc\ud801\udc1c".toCharArray();
     char[] highSurrogateAt3 = "Abc\ud801".toCharArray();
-    assertEquals((int) 'A', java4.codePointAt(cpAt3, 0));
-    assertEquals((int) '\ud801', java4.codePointAt(cpAt3, 3));
-    assertEquals((int) '\ud801', java4.codePointAt(highSurrogateAt3, 3));
+    assertEquals('A', java4.codePointAt(cpAt3, 0));
+    assertEquals('\ud801', java4.codePointAt(cpAt3, 3));
+    assertEquals('\ud801', java4.codePointAt(highSurrogateAt3, 3));
     try {
       java4.codePointAt(highSurrogateAt3, 4);
       fail("array index out of bounds");
@@ -47,10 +47,10 @@
     }
 
     CharacterUtils java5 = CharacterUtils.getInstance(TEST_VERSION_CURRENT);
-    assertEquals((int) 'A', java5.codePointAt(cpAt3, 0));
+    assertEquals('A', java5.codePointAt(cpAt3, 0));
     assertEquals(Character.toCodePoint('\ud801', '\udc1c'), java5.codePointAt(
         cpAt3, 3));
-    assertEquals((int) '\ud801', java5.codePointAt(highSurrogateAt3, 3));
+    assertEquals('\ud801', java5.codePointAt(highSurrogateAt3, 3));
     try {
       java5.codePointAt(highSurrogateAt3, 4);
       fail("array index out of bounds");
@@ -63,9 +63,9 @@
     CharacterUtils java4 = CharacterUtils.getInstance(Version.LUCENE_30);
     String cpAt3 = "Abc\ud801\udc1c";
     String highSurrogateAt3 = "Abc\ud801";
-    assertEquals((int) 'A', java4.codePointAt(cpAt3, 0));
-    assertEquals((int) '\ud801', java4.codePointAt(cpAt3, 3));
-    assertEquals((int) '\ud801', java4.codePointAt(highSurrogateAt3, 3));
+    assertEquals('A', java4.codePointAt(cpAt3, 0));
+    assertEquals('\ud801', java4.codePointAt(cpAt3, 3));
+    assertEquals('\ud801', java4.codePointAt(highSurrogateAt3, 3));
     try {
       java4.codePointAt(highSurrogateAt3, 4);
       fail("string index out of bounds");
@@ -73,10 +73,10 @@
     }
 
     CharacterUtils java5 = CharacterUtils.getInstance(TEST_VERSION_CURRENT);
-    assertEquals((int) 'A', java5.codePointAt(cpAt3, 0));
+    assertEquals('A', java5.codePointAt(cpAt3, 0));
     assertEquals(Character.toCodePoint('\ud801', '\udc1c'), java5.codePointAt(
         cpAt3, 3));
-    assertEquals((int) '\ud801', java5.codePointAt(highSurrogateAt3, 3));
+    assertEquals('\ud801', java5.codePointAt(highSurrogateAt3, 3));
     try {
       java5.codePointAt(highSurrogateAt3, 4);
       fail("string index out of bounds");
@@ -90,15 +90,15 @@
     CharacterUtils java4 = CharacterUtils.getInstance(Version.LUCENE_30);
     char[] cpAt3 = "Abc\ud801\udc1c".toCharArray();
     char[] highSurrogateAt3 = "Abc\ud801".toCharArray();
-    assertEquals((int) 'A', java4.codePointAt(cpAt3, 0, 2));
-    assertEquals((int) '\ud801', java4.codePointAt(cpAt3, 3, 5));
-    assertEquals((int) '\ud801', java4.codePointAt(highSurrogateAt3, 3, 4));
+    assertEquals('A', java4.codePointAt(cpAt3, 0, 2));
+    assertEquals('\ud801', java4.codePointAt(cpAt3, 3, 5));
+    assertEquals('\ud801', java4.codePointAt(highSurrogateAt3, 3, 4));
 
     CharacterUtils java5 = CharacterUtils.getInstance(TEST_VERSION_CURRENT);
-    assertEquals((int) 'A', java5.codePointAt(cpAt3, 0, 2));
+    assertEquals('A', java5.codePointAt(cpAt3, 0, 2));
     assertEquals(Character.toCodePoint('\ud801', '\udc1c'), java5.codePointAt(
         cpAt3, 3, 5));
-    assertEquals((int) '\ud801', java5.codePointAt(highSurrogateAt3, 3, 4));
+    assertEquals('\ud801', java5.codePointAt(highSurrogateAt3, 3, 4));
 
   }
 
