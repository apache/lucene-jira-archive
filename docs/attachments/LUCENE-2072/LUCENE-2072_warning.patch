Index: contrib/regex/src/test/org/apache/lucene/search/regex/TestJakartaRegexpCapabilities.java
===================================================================
--- contrib/regex/src/test/org/apache/lucene/search/regex/TestJakartaRegexpCapabilities.java	(revision 884151)
+++ contrib/regex/src/test/org/apache/lucene/search/regex/TestJakartaRegexpCapabilities.java	(working copy)
@@ -34,4 +34,13 @@
     assertTrue(cap.match("lucene"));
     assertEquals("lucene", cap.prefix());
   }
+  
+  public void testShakyPrefix(){
+    JakartaRegexpCapabilities cap = new JakartaRegexpCapabilities();
+    cap.compile("(ab|ac)");
+    assertTrue(cap.match("ab"));
+    assertTrue(cap.match("ac"));
+    // why is it not a???
+    assertNull(cap.prefix());
+  }
 }
Index: contrib/regex/src/java/org/apache/lucene/search/regex/JakartaRegexpCapabilities.java
===================================================================
--- contrib/regex/src/java/org/apache/lucene/search/regex/JakartaRegexpCapabilities.java	(revision 884151)
+++ contrib/regex/src/java/org/apache/lucene/search/regex/JakartaRegexpCapabilities.java	(working copy)
@@ -22,8 +22,8 @@
 
 /**
  * Implementation tying <a href="http://jakarta.apache.org/regexp">Jakarta Regexp</a>
- * to RegexQuery.  Thanks to some internals of Jakarta Regexp, this
- * has a solid {@link #prefix} implementation.
+ * to RegexQuery.  Due to some internals of Jakarta Regexp, this
+ * has a shaky {@link #prefix} implementation.
  */
 public class JakartaRegexpCapabilities implements RegexCapabilities {
   private RE regexp;
