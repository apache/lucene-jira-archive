Index: lucene/expressions/src/java/org/apache/lucene/expressions/ExpressionSortField.java
===================================================================
--- lucene/expressions/src/java/org/apache/lucene/expressions/ExpressionSortField.java	(revision 1524593)
+++ lucene/expressions/src/java/org/apache/lucene/expressions/ExpressionSortField.java	(working copy)
@@ -18,15 +18,14 @@
 
 import java.io.IOException;
 
-import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.search.FieldComparator;
 import org.apache.lucene.search.SortField;
 
 /** A {@link SortField} which sorts documents by the evaluated value of an expression for each document */
 class ExpressionSortField extends SortField {
-  private final ValueSource source;
+  private final ExpressionValueSource source;
 
-  ExpressionSortField(String name, ValueSource source, boolean reverse) {
+  ExpressionSortField(String name, ExpressionValueSource source, boolean reverse) {
     super(name, Type.CUSTOM, reverse);
     this.source = source;
   }
@@ -73,6 +72,6 @@
 
   @Override
   public boolean needsScores() {
-    return true; // TODO: maybe we can optimize by "figuring this out" somehow...
+    return source.needsScores();
   }
 }
\ No newline at end of file
Index: lucene/expressions/src/java/org/apache/lucene/expressions/ExpressionValueSource.java
===================================================================
--- lucene/expressions/src/java/org/apache/lucene/expressions/ExpressionValueSource.java	(revision 1524593)
+++ lucene/expressions/src/java/org/apache/lucene/expressions/ExpressionValueSource.java	(working copy)
@@ -85,4 +85,19 @@
   public boolean equals(Object obj) {
     return obj == this;
   }
+  
+  boolean needsScores() {
+    for (int i = 0; i < expression.variables.length; i++) {
+      String externalName = expression.variables[i];
+      ValueSource source = bindings.getValueSource(externalName);
+      if (source instanceof ScoreValueSource) {
+        return true;
+      } else if (source instanceof ExpressionValueSource) {
+        if (((ExpressionValueSource)source).needsScores()) {
+          return true;
+        }
+      }
+    }
+    return false;
+  }
 }
Index: lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionSortField.java
===================================================================
--- lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionSortField.java	(revision 1524588)
+++ lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionSortField.java	(working copy)
@@ -66,4 +66,51 @@
     // same instance:
     assertEquals(sf1, sf1);
   }
+  
+  public void testNeedsScores() throws Exception {
+    SimpleBindings bindings = new SimpleBindings();
+    // refers to score directly
+    Expression exprA = JavascriptCompiler.compile("_score");
+    // constant
+    Expression exprB = JavascriptCompiler.compile("0");
+    // field
+    Expression exprC = JavascriptCompiler.compile("intfield");
+    
+    // score + constant
+    Expression exprD = JavascriptCompiler.compile("_score + 0");
+    // field + constant
+    Expression exprE = JavascriptCompiler.compile("intfield + 0");
+    
+    // expression + constant (score ref'd)
+    Expression exprF = JavascriptCompiler.compile("a + 0");
+    // expression + constant
+    Expression exprG = JavascriptCompiler.compile("e + 0");
+    
+    // several variables (score ref'd)
+    Expression exprH = JavascriptCompiler.compile("b / c + e * g - sqrt(f)");
+    // several variables
+    Expression exprI = JavascriptCompiler.compile("b / c + e * g");
+    
+    bindings.add(new SortField("_score", SortField.Type.SCORE));
+    bindings.add(new SortField("intfield", SortField.Type.INT));
+    bindings.add("a", exprA);
+    bindings.add("b", exprB);
+    bindings.add("c", exprC);
+    bindings.add("d", exprD);
+    bindings.add("e", exprE);
+    bindings.add("f", exprF);
+    bindings.add("g", exprG);
+    bindings.add("h", exprH);
+    bindings.add("i", exprI);
+    
+    assertTrue(exprA.getSortField(bindings, true).needsScores());
+    assertFalse(exprB.getSortField(bindings, true).needsScores());
+    assertFalse(exprC.getSortField(bindings, true).needsScores());
+    assertTrue(exprD.getSortField(bindings, true).needsScores());
+    assertFalse(exprE.getSortField(bindings, true).needsScores());
+    assertTrue(exprF.getSortField(bindings, true).needsScores());
+    assertFalse(exprG.getSortField(bindings, true).needsScores());
+    assertTrue(exprH.getSortField(bindings, true).needsScores());
+    assertFalse(exprI.getSortField(bindings, false).needsScores());
+  }
 }
