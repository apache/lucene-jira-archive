Index: lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter.java
===================================================================
--- lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter.java	(revision 1715206)
+++ lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter.java	(working copy)
@@ -25,6 +25,7 @@
 import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute;
 import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
 import org.apache.lucene.analysis.tokenattributes.TypeAttribute;
+import org.apache.lucene.analysis.tokenattributes.KeywordAttribute;
 import org.apache.lucene.analysis.util.CharArraySet;
 import org.apache.lucene.util.ArrayUtil;
 import org.apache.lucene.util.AttributeSource;
@@ -156,6 +157,11 @@
   public static final int STEM_ENGLISH_POSSESSIVE = 256;
   
   /**
+   * If not set, causes keyword tokens to be ignored
+   */
+  public static final int SPLIT_KEYWORD_TOKENS = 512;
+  
+  /**
    * If not null is the set of tokens to protect from being delimited
    *
    */
@@ -167,6 +173,7 @@
   private final OffsetAttribute offsetAttribute = addAttribute(OffsetAttribute.class);
   private final PositionIncrementAttribute posIncAttribute = addAttribute(PositionIncrementAttribute.class);
   private final TypeAttribute typeAttribute = addAttribute(TypeAttribute.class);
+  private final KeywordAttribute keywordAttr = addAttribute(KeywordAttribute.class);
 
   // used for iterating word delimiter breaks
   private final WordDelimiterIterator iterator;
@@ -242,9 +249,13 @@
         iterator.setText(termBuffer, termLength);
         iterator.next();
 
-        // word of no delimiters, or protected word: just return it
+        /*
+         * word of no delimiters, or protected word, or keyword and we aren't
+         * splitting keywords: just return it
+         */
         if ((iterator.current == 0 && iterator.end == termLength) ||
-            (protWords != null && protWords.contains(termBuffer, 0, termLength))) {
+            (protWords != null && protWords.contains(termBuffer, 0, termLength)) ||
+            (!has(SPLIT_KEYWORD_TOKENS) && keywordAttr.isKeyword())) {
           posIncAttribute.setPositionIncrement(accumPosInc);
           accumPosInc = 0;
           first = false;
Index: lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilterFactory.java
===================================================================
--- lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilterFactory.java	(revision 1715206)
+++ lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilterFactory.java	(working copy)
@@ -46,6 +46,7 @@
  *             preserveOriginal="0" splitOnNumerics="1" splitOnCaseChange="1"
  *             catenateWords="0" catenateNumbers="0" catenateAll="0"
  *             generateWordParts="1" generateNumberParts="1" stemEnglishPossessive="1"
+ *             splitKeywordTokens="0"
  *             types="wdfftypes.txt" /&gt;
  *   &lt;/analyzer&gt;
  * &lt;/fieldType&gt;</pre>
@@ -91,6 +92,19 @@
     if (getInt(args, "stemEnglishPossessive", 1) != 0) {
       flags |= STEM_ENGLISH_POSSESSIVE;
     }
+    if(luceneMatchVersion.onOrAfter(Version.LUCENE_6_0_0)) {
+      // splitKeywordTokens is false by default for LUCENE >= 6.0.0
+      if (getInt(args, "splitKeywordTokens", 0) != 0) {
+        flags |= SPLIT_KEYWORD_TOKENS;
+      }
+    }
+    else {
+      // splitKeywordTokens is true by default for LUCENE < 6.0.0
+      if (getInt(args, "splitKeywordTokens", 1) != 0) {
+        flags |= SPLIT_KEYWORD_TOKENS;
+      }
+    }
+    
     wordFiles = get(args, PROTECTED_TOKENS);
     types = get(args, TYPES);
     this.flags = flags;
