Index: lucene/queryparser/src/test/org/apache/lucene/queryparser/spans/TestSpanQPBasedOnQPTestBase.java
===================================================================
--- lucene/queryparser/src/test/org/apache/lucene/queryparser/spans/TestSpanQPBasedOnQPTestBase.java	(revision 1570510)
+++ lucene/queryparser/src/test/org/apache/lucene/queryparser/spans/TestSpanQPBasedOnQPTestBase.java	(working copy)
@@ -107,6 +107,24 @@
     return exception instanceof ParseException;
   }
 
+  @Override
+  protected String escapeDateString(String s) {
+    if (s.indexOf(" ") > -1 || s.indexOf("/") > -1 || s.indexOf("-") > -1) {
+      return "\'" + s + "\'";
+    } else {
+      return s;
+    }
+  }
+
+  @Override
+  public void assertQueryEquals(CommonQueryParserConfiguration cqpC, String field, String query, String result) throws Exception {
+    Query q = getQuery(query, cqpC);
+    if (q instanceof SpanMultiTermQueryWrapper){
+      q = ((SpanMultiTermQueryWrapper)q).getWrappedQuery();
+    }
+    assertEquals(result, q.toString(field));
+  }
+
   public void assertBoostEquals(String query, float b) throws Exception {
     Query q = getQuery(query);
     assertEquals(b, q.getBoost(), 0.00001);
@@ -532,8 +550,6 @@
     assertQueryEquals("[\"*\" TO *]",null,"SpanMultiTermQueryWrapper([\\* TO *])");
   }
 
-  // nocommit: what is happening here (fails under some locales)
-  @Ignore
   public void testDateRange() throws Exception {
     String startDate = getLocalizedDate(2002, 1, 1);
     String endDate = getLocalizedDate(2002, 1, 4);
Index: lucene/queryparser/src/java/org/apache/lucene/queryparser/spans/SpanQueryParserBase.java
===================================================================
--- lucene/queryparser/src/java/org/apache/lucene/queryparser/spans/SpanQueryParserBase.java	(revision 1570510)
+++ lucene/queryparser/src/java/org/apache/lucene/queryparser/spans/SpanQueryParserBase.java	(working copy)
@@ -66,7 +66,7 @@
  * This should also allow for an easy transfer to javacc or similar.
  * 
  */
-public abstract class SpanQueryParserBase extends AnalyzingQueryParserBase {
+abstract class SpanQueryParserBase extends AnalyzingQueryParserBase {
 
   //better to make these public in QueryParserBase
 
Index: lucene/queryparser/src/java/org/apache/lucene/queryparser/spans/AbstractSpanQueryParser.java
===================================================================
--- lucene/queryparser/src/java/org/apache/lucene/queryparser/spans/AbstractSpanQueryParser.java	(revision 1570510)
+++ lucene/queryparser/src/java/org/apache/lucene/queryparser/spans/AbstractSpanQueryParser.java	(working copy)
@@ -27,7 +27,7 @@
 import org.apache.lucene.search.spans.SpanQuery;
 import org.apache.lucene.search.spans.SpanTermQuery;
 
-public abstract class AbstractSpanQueryParser extends SpanQueryParserBase {
+abstract class AbstractSpanQueryParser extends SpanQueryParserBase {
 
   @Override
   abstract public Query parse(String s) throws ParseException;
Index: lucene/queryparser/src/java/org/apache/lucene/queryparser/spans/AnalyzingQueryParserBase.java
===================================================================
--- lucene/queryparser/src/java/org/apache/lucene/queryparser/spans/AnalyzingQueryParserBase.java	(revision 1570510)
+++ lucene/queryparser/src/java/org/apache/lucene/queryparser/spans/AnalyzingQueryParserBase.java	(working copy)
@@ -37,7 +37,7 @@
  * This class also has hooks to allow subclassing to enable different
  * strategies of per field analyzer handling.
  */
-public abstract class AnalyzingQueryParserBase extends QueryParserBase {
+abstract class AnalyzingQueryParserBase extends QueryParserBase {
 
   public enum NORM_MULTI_TERMS {
     ANALYZE,
