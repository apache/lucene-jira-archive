diff --git lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestClassicAnalyzer.java lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestClassicAnalyzer.java
index e1ae2d5..225ceaa 100644
--- lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestClassicAnalyzer.java
+++ lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestClassicAnalyzer.java
@@ -254,7 +254,7 @@ public class TestClassicAnalyzer extends BaseTokenStreamTestCase {
   public void testWickedLongTerm() throws IOException {
     RAMDirectory dir = new RAMDirectory();
     IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(
-      TEST_VERSION_CURRENT, new ClassicAnalyzer(TEST_VERSION_CURRENT)));
+      new ClassicAnalyzer(TEST_VERSION_CURRENT)));
 
     char[] chars = new char[IndexWriter.MAX_TERM_LENGTH];
     Arrays.fill(chars, 'x');
@@ -270,7 +270,7 @@ public class TestClassicAnalyzer extends BaseTokenStreamTestCase {
     doc = new Document();
     doc.add(new TextField("content", "abc bbb ccc", Field.Store.NO));
     writer.addDocument(doc);
-    writer.shutdown();
+    writer.close();
 
     IndexReader reader = DirectoryReader.open(dir);
 
@@ -302,9 +302,9 @@ public class TestClassicAnalyzer extends BaseTokenStreamTestCase {
     doc.add(new TextField("content", bigTerm, Field.Store.NO));
     ClassicAnalyzer sa = new ClassicAnalyzer(TEST_VERSION_CURRENT);
     sa.setMaxTokenLength(100000);
-    writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, sa));
+    writer  = new IndexWriter(dir, new IndexWriterConfig(sa));
     writer.addDocument(doc);
-    writer.shutdown();
+    writer.close();
     reader = DirectoryReader.open(dir);
     assertEquals(1, reader.docFreq(new Term("content", bigTerm)));
     reader.close();
diff --git lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestKeywordAnalyzer.java lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestKeywordAnalyzer.java
index 6de3c4a..e0ed580 100644
--- lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestKeywordAnalyzer.java
+++ lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestKeywordAnalyzer.java
@@ -50,14 +50,14 @@ public class TestKeywordAnalyzer extends BaseTokenStreamTestCase {
     super.setUp();
     directory = newDirectory();
     IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(
-        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));
+        new SimpleAnalyzer(TEST_VERSION_CURRENT)));
 
     Document doc = new Document();
     doc.add(new StringField("partnum", "Q36", Field.Store.YES));
     doc.add(new TextField("description", "Illidium Space Modulator", Field.Store.YES));
     writer.addDocument(doc);
 
-    writer.shutdown();
+    writer.close();
 
     reader = DirectoryReader.open(directory);
     searcher = newSearcher(reader);
@@ -87,14 +87,14 @@ public class TestKeywordAnalyzer extends BaseTokenStreamTestCase {
 
   public void testMutipleDocument() throws Exception {
     RAMDirectory dir = new RAMDirectory();
-    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new KeywordAnalyzer()));
+    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(new KeywordAnalyzer()));
     Document doc = new Document();
     doc.add(new TextField("partnum", "Q36", Field.Store.YES));
     writer.addDocument(doc);
     doc = new Document();
     doc.add(new TextField("partnum", "Q37", Field.Store.YES));
     writer.addDocument(doc);
-    writer.shutdown();
+    writer.close();
 
     IndexReader reader = DirectoryReader.open(dir);
     DocsEnum td = TestUtil.docs(random(),
diff --git lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestEmptyTokenStream.java lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestEmptyTokenStream.java
index 2daf253..0f86147 100644
--- lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestEmptyTokenStream.java
+++ lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestEmptyTokenStream.java
@@ -19,7 +19,6 @@ package org.apache.lucene.analysis.miscellaneous;
 
 import java.io.IOException;
 
-import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.analysis.tokenattributes.TermToBytesRefAttribute;
 import org.apache.lucene.analysis.BaseTokenStreamTestCase;
 import org.apache.lucene.analysis.TokenStream;
@@ -28,7 +27,6 @@ import org.apache.lucene.document.Field;
 import org.apache.lucene.document.StringField;
 import org.apache.lucene.document.TextField;
 import org.apache.lucene.index.IndexWriter;
-import org.apache.lucene.index.IndexWriterConfig;
 import org.apache.lucene.store.Directory;
 
 public class TestEmptyTokenStream extends BaseTokenStreamTestCase {
@@ -66,7 +64,7 @@ public class TestEmptyTokenStream extends BaseTokenStreamTestCase {
     
     assertEquals(1, writer.numDocs());
 
-    writer.shutdown();
+    writer.close();
     directory.close();
   }
 
diff --git lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestLimitTokenCountAnalyzer.java lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestLimitTokenCountAnalyzer.java
index bbe34e3..e42ad3f 100644
--- lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestLimitTokenCountAnalyzer.java
+++ lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestLimitTokenCountAnalyzer.java
@@ -67,8 +67,7 @@ public class TestLimitTokenCountAnalyzer extends BaseTokenStreamTestCase {
       mock.setEnableChecks(consumeAll);
       Analyzer a = new LimitTokenCountAnalyzer(mock, limit, consumeAll);
 
-      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig
-                                           (TEST_VERSION_CURRENT, a));
+      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(a));
 
       Document doc = new Document();
       StringBuilder b = new StringBuilder();
@@ -78,7 +77,7 @@ public class TestLimitTokenCountAnalyzer extends BaseTokenStreamTestCase {
       b.append(" z");
       doc.add(newTextField("field", b.toString(), Field.Store.NO));
       writer.addDocument(doc);
-      writer.shutdown();
+      writer.close();
       
       IndexReader reader = DirectoryReader.open(dir);
       Term t = new Term("field", "x");
diff --git lucene/analysis/common/src/test/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzerTest.java lucene/analysis/common/src/test/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzerTest.java
index b0a6c24..33c8451 100644
--- lucene/analysis/common/src/test/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzerTest.java
+++ lucene/analysis/common/src/test/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzerTest.java
@@ -42,7 +42,7 @@ public class QueryAutoStopWordAnalyzerTest extends BaseTokenStreamTestCase {
     super.setUp();
     dir = new RAMDirectory();
     appAnalyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);
-    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, appAnalyzer));
+    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(appAnalyzer));
     int numDocs = 200;
     for (int i = 0; i < numDocs; i++) {
       Document doc = new Document();
@@ -52,7 +52,7 @@ public class QueryAutoStopWordAnalyzerTest extends BaseTokenStreamTestCase {
       doc.add(new TextField("repetitiveField", repetitiveFieldValue, Field.Store.YES));
       writer.addDocument(doc);
     }
-    writer.shutdown();
+    writer.close();
     reader = DirectoryReader.open(dir);
   }
 
diff --git lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest.java lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest.java
index bf747bd..7b83cbb 100644
--- lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest.java
+++ lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest.java
@@ -58,7 +58,7 @@ public class ShingleAnalyzerWrapperTest extends BaseTokenStreamTestCase {
     super.setUp();
     analyzer = new ShingleAnalyzerWrapper(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false), 2);
     directory = newDirectory();
-    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));
+    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(analyzer));
 
     Document doc;
     doc = new Document();
@@ -73,7 +73,7 @@ public class ShingleAnalyzerWrapperTest extends BaseTokenStreamTestCase {
     doc.add(new TextField("content", "a sentence which contains no test", Field.Store.YES));
     writer.addDocument(doc);
 
-    writer.shutdown();
+    writer.close();
 
     reader = DirectoryReader.open(directory);
     searcher = newSearcher(reader);
diff --git lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter.java lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter.java
index addf2d8..a5bb86b 100644
--- lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter.java
+++ lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter.java
@@ -22,7 +22,6 @@ import java.util.Locale;
 
 import org.apache.lucene.analysis.*;
 import org.apache.lucene.analysis.core.LowerCaseFilter;
-import org.apache.lucene.analysis.standard.StandardAnalyzer;
 import org.apache.lucene.analysis.standard.StandardFilter;
 import org.apache.lucene.analysis.standard.StandardTokenizer;
 import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
@@ -104,7 +103,7 @@ public class TestTeeSinkTokenFilter extends BaseTokenStreamTestCase {
     doc.add(f1);
     doc.add(f2);
     w.addDocument(doc);
-    w.shutdown();
+    w.close();
 
     IndexReader r = DirectoryReader.open(dir);
     Terms vector = r.getTermVectors(0).terms("field");
diff --git lucene/analysis/common/src/test/org/apache/lucene/collation/TestCollationDocValuesField.java lucene/analysis/common/src/test/org/apache/lucene/collation/TestCollationDocValuesField.java
index 054f64b..692f2f6 100644
--- lucene/analysis/common/src/test/org/apache/lucene/collation/TestCollationDocValuesField.java
+++ lucene/analysis/common/src/test/org/apache/lucene/collation/TestCollationDocValuesField.java
@@ -67,7 +67,7 @@ public class TestCollationDocValuesField extends LuceneTestCase {
     iw.addDocument(doc);
     
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     
     IndexSearcher is = newSearcher(ir);
     
@@ -102,7 +102,7 @@ public class TestCollationDocValuesField extends LuceneTestCase {
     }
     
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     IndexSearcher is = newSearcher(ir);
     
     int numChecks = atLeast(100);
diff --git lucene/analysis/icu/src/test/org/apache/lucene/collation/TestICUCollationDocValuesField.java lucene/analysis/icu/src/test/org/apache/lucene/collation/TestICUCollationDocValuesField.java
index 34114b0..59fdb12 100644
--- lucene/analysis/icu/src/test/org/apache/lucene/collation/TestICUCollationDocValuesField.java
+++ lucene/analysis/icu/src/test/org/apache/lucene/collation/TestICUCollationDocValuesField.java
@@ -67,7 +67,7 @@ public class TestICUCollationDocValuesField extends LuceneTestCase {
     iw.addDocument(doc);
     
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     
     IndexSearcher is = newSearcher(ir);
     
@@ -102,7 +102,7 @@ public class TestICUCollationDocValuesField extends LuceneTestCase {
     }
     
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     IndexSearcher is = newSearcher(ir);
     
     int numChecks = atLeast(100);
diff --git lucene/analysis/uima/src/test/org/apache/lucene/analysis/uima/UIMABaseAnalyzerTest.java lucene/analysis/uima/src/test/org/apache/lucene/analysis/uima/UIMABaseAnalyzerTest.java
index b7f567f..a280141 100644
--- lucene/analysis/uima/src/test/org/apache/lucene/analysis/uima/UIMABaseAnalyzerTest.java
+++ lucene/analysis/uima/src/test/org/apache/lucene/analysis/uima/UIMABaseAnalyzerTest.java
@@ -31,7 +31,6 @@ import org.apache.lucene.search.MatchAllDocsQuery;
 import org.apache.lucene.search.TopDocs;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.RAMDirectory;
-import org.apache.lucene.util.LuceneTestCase.SuppressSysoutChecks;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -69,7 +68,7 @@ public class UIMABaseAnalyzerTest extends BaseTokenStreamTestCase {
   @Test
   public void baseUIMAAnalyzerIntegrationTest() throws Exception {
     Directory dir = new RAMDirectory();
-    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));
+    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(analyzer));
     // add the first doc
     Document doc = new Document();
     String dummyTitle = "this is a dummy title ";
@@ -114,7 +113,7 @@ public class UIMABaseAnalyzerTest extends BaseTokenStreamTestCase {
     // do a matchalldocs query to retrieve both docs
     result = indexSearcher.search(new MatchAllDocsQuery(), 2);
     assertEquals(2, result.totalHits);
-    writer.shutdown();
+    writer.close();
     indexSearcher.getIndexReader().close();
     dir.close();
   }
diff --git lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData.java lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData.java
index 33221db..42584db 100644
--- lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData.java
+++ lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData.java
@@ -143,7 +143,7 @@ public class PerfRunData implements Closeable {
   @Override
   public void close() throws IOException {
     if (indexWriter != null) {
-      indexWriter.shutdown();
+      indexWriter.close();
     }
     IOUtils.close(indexReader, directory, 
                   taxonomyWriter, taxonomyReader, taxonomyDir, 
@@ -164,7 +164,7 @@ public class PerfRunData implements Closeable {
 
     // cleanup index
     if (indexWriter != null) {
-      indexWriter.shutdown();
+      indexWriter.close();
     }
     IOUtils.close(indexReader, directory);
     indexWriter = null;
diff --git lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CloseIndexTask.java lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CloseIndexTask.java
index e6eeb99..701908e 100644
--- lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CloseIndexTask.java
+++ lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CloseIndexTask.java
@@ -48,7 +48,7 @@ public class CloseIndexTask extends PerfTask {
       if (doWait == false) {
         iw.abortMerges();
       }
-      iw.shutdown();
+      iw.close();
       getRunData().setIndexWriter(null);
     }
     return 1;
diff --git lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask.java lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask.java
index 37e38bc..5cad3b4 100644
--- lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask.java
+++ lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask.java
@@ -99,8 +99,7 @@ public class CreateIndexTask extends PerfTask {
   
   public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {
     @SuppressWarnings("deprecation")
-    Version version = Version.parseLeniently(config.get("writer.version", Version.LUCENE_CURRENT.toString()));
-    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());
+    IndexWriterConfig iwConf = new IndexWriterConfig(runData.getAnalyzer());
     iwConf.setOpenMode(mode);
     IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);
     iwConf.setIndexDeletionPolicy(indexDeletionPolicy);
diff --git lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic.java lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic.java
index 6d284e6..87a1e8a 100644
--- lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic.java
+++ lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic.java
@@ -100,9 +100,9 @@ public class TestPerfTasksLogic extends BenchmarkTestCase {
     assertTrue("Index does not exist?...!", DirectoryReader.indexExists(benchmark.getRunData().getDirectory()));
     // now we should be able to open the index for write. 
     IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),
-        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))
+        new IndexWriterConfig(new MockAnalyzer(random()))
             .setOpenMode(OpenMode.APPEND));
-    iw.shutdown();
+    iw.close();
     IndexReader ir = DirectoryReader.open(benchmark.getRunData().getDirectory());
     assertEquals("1000 docs were added to the index, this is what we expect to find!",1000,ir.numDocs());
     ir.close();
@@ -192,8 +192,8 @@ public class TestPerfTasksLogic extends BenchmarkTestCase {
 
     assertTrue("Index does not exist?...!", DirectoryReader.indexExists(benchmark.getRunData().getDirectory()));
     // now we should be able to open the index for write.
-    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));
-    iw.shutdown();
+    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));
+    iw.close();
     IndexReader ir = DirectoryReader.open(benchmark.getRunData().getDirectory());
     assertEquals("100 docs were added to the index, this is what we expect to find!",100,ir.numDocs());
     ir.close();
@@ -232,8 +232,8 @@ public class TestPerfTasksLogic extends BenchmarkTestCase {
 
     assertTrue("Index does not exist?...!", DirectoryReader.indexExists(benchmark.getRunData().getDirectory()));
     // now we should be able to open the index for write.
-    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));
-    iw.shutdown();
+    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));
+    iw.close();
     IndexReader ir = DirectoryReader.open(benchmark.getRunData().getDirectory());
     assertEquals("1000 docs were added to the index, this is what we expect to find!",1000,ir.numDocs());
     ir.close();
@@ -305,8 +305,8 @@ public class TestPerfTasksLogic extends BenchmarkTestCase {
     assertEquals("TestSearchTask was supposed to be called!",139,CountingSearchTestTask.numSearches);
     assertTrue("Index does not exist?...!", DirectoryReader.indexExists(benchmark.getRunData().getDirectory()));
     // now we should be able to open the index for write. 
-    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));
-    iw.shutdown();
+    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));
+    iw.close();
     IndexReader ir = DirectoryReader.open(benchmark.getRunData().getDirectory());
     assertEquals("1 docs were added to the index, this is what we expect to find!",1,ir.numDocs());
     ir.close();
@@ -436,9 +436,9 @@ public class TestPerfTasksLogic extends BenchmarkTestCase {
 
     // now we should be able to open the index for write. 
     IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),
-        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))
+        new IndexWriterConfig(new MockAnalyzer(random()))
             .setOpenMode(OpenMode.APPEND));
-    iw.shutdown();
+    iw.close();
 
     IndexReader ir = DirectoryReader.open(benchmark.getRunData().getDirectory());
     assertEquals(numLines + " lines were created but " + ir.numDocs() + " docs are in the index", numLines, ir.numDocs());
@@ -661,7 +661,7 @@ public class TestPerfTasksLogic extends BenchmarkTestCase {
     assertTrue("did not use the specified MergeScheduler",
         ((MyMergeScheduler) benchmark.getRunData().getIndexWriter().getConfig()
             .getMergeScheduler()).called);
-    benchmark.getRunData().getIndexWriter().shutdown();
+    benchmark.getRunData().getIndexWriter().close();
 
     // 3. test number of docs in the index
     IndexReader ir = DirectoryReader.open(benchmark.getRunData().getDirectory());
@@ -707,7 +707,7 @@ public class TestPerfTasksLogic extends BenchmarkTestCase {
     // 2. execute the algorithm  (required in every "logic" test)
     Benchmark benchmark = execBenchmark(algLines);
     assertTrue("did not use the specified MergePolicy", ((MyMergePolicy) benchmark.getRunData().getIndexWriter().getConfig().getMergePolicy()).called);
-    benchmark.getRunData().getIndexWriter().shutdown();
+    benchmark.getRunData().getIndexWriter().close();
     
     // 3. test number of docs in the index
     IndexReader ir = DirectoryReader.open(benchmark.getRunData().getDirectory());
@@ -752,7 +752,7 @@ public class TestPerfTasksLogic extends BenchmarkTestCase {
     assertEquals(IndexWriterConfig.DISABLE_AUTO_FLUSH, (int) writer.getConfig().getRAMBufferSizeMB());
     assertEquals(3, ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor());
     assertEquals(0.0d, writer.getConfig().getMergePolicy().getNoCFSRatio(), 0.0);
-    writer.shutdown();
+    writer.close();
     Directory dir = benchmark.getRunData().getDirectory();
     IndexReader reader = DirectoryReader.open(dir);
     Fields tfv = reader.getTermVectors(0);
diff --git lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/AddIndexesTaskTest.java lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/AddIndexesTaskTest.java
index 71d2293..0d6233e 100644
--- lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/AddIndexesTaskTest.java
+++ lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/AddIndexesTaskTest.java
@@ -30,8 +30,6 @@ import org.apache.lucene.index.IndexWriter;
 import org.apache.lucene.index.IndexWriterConfig;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.RAMDirectory;
-import org.apache.lucene.util.TestUtil;
-import org.apache.lucene.util.TestUtil;
 import org.junit.BeforeClass;
 
 /** Tests the functionality of {@link AddIndexesTask}. */
@@ -47,11 +45,11 @@ public class AddIndexesTaskTest extends BenchmarkTestCase {
     inputDir = new File(testDir, "input");
     Directory tmpDir = newFSDirectory(inputDir);
     try {
-      IndexWriter writer = new IndexWriter(tmpDir, new IndexWriterConfig(TEST_VERSION_CURRENT, null));
+      IndexWriter writer = new IndexWriter(tmpDir, new IndexWriterConfig(null));
       for (int i = 0; i < 10; i++) {
         writer.addDocument(new Document());
       }
-      writer.shutdown();
+      writer.close();
     } finally {
       tmpDir.close();
     }
diff --git lucene/classification/src/java/org/apache/lucene/classification/utils/DatasetSplitter.java lucene/classification/src/java/org/apache/lucene/classification/utils/DatasetSplitter.java
index d487b5d..bb0f741 100644
--- lucene/classification/src/java/org/apache/lucene/classification/utils/DatasetSplitter.java
+++ lucene/classification/src/java/org/apache/lucene/classification/utils/DatasetSplitter.java
@@ -31,7 +31,6 @@ import org.apache.lucene.search.MatchAllDocsQuery;
 import org.apache.lucene.search.ScoreDoc;
 import org.apache.lucene.search.TopDocs;
 import org.apache.lucene.store.Directory;
-import org.apache.lucene.util.Version;
 
 import java.io.IOException;
 
@@ -70,9 +69,9 @@ public class DatasetSplitter {
 
     // create IWs for train / test / cv IDXs
     // :Post-Release-Update-Version.LUCENE_XY:
-    IndexWriter testWriter = new IndexWriter(testIndex, new IndexWriterConfig(Version.LUCENE_5_0, analyzer));
-    IndexWriter cvWriter = new IndexWriter(crossValidationIndex, new IndexWriterConfig(Version.LUCENE_5_0, analyzer));
-    IndexWriter trainingWriter = new IndexWriter(trainingIndex, new IndexWriterConfig(Version.LUCENE_5_0, analyzer));
+    IndexWriter testWriter = new IndexWriter(testIndex, new IndexWriterConfig(analyzer));
+    IndexWriter cvWriter = new IndexWriter(crossValidationIndex, new IndexWriterConfig(analyzer));
+    IndexWriter trainingWriter = new IndexWriter(trainingIndex, new IndexWriterConfig(analyzer));
 
     try {
       int size = originalIndex.maxDoc();
@@ -128,9 +127,9 @@ public class DatasetSplitter {
       cvWriter.commit();
       trainingWriter.commit();
       // close IWs
-      testWriter.shutdown();
-      cvWriter.shutdown();
-      trainingWriter.shutdown();
+      testWriter.close();
+      cvWriter.close();
+      trainingWriter.close();
     }
   }
 
diff --git lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase.java lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase.java
index c14cd86..86ef649 100644
--- lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase.java
+++ lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase.java
@@ -74,7 +74,7 @@ public abstract class ClassificationTestBase<T> extends LuceneTestCase {
   @After
   public void tearDown() throws Exception {
     super.tearDown();
-    indexWriter.shutdown();
+    indexWriter.close();
     dir.close();
   }
 
diff --git lucene/classification/src/test/org/apache/lucene/classification/utils/DataSplitterTest.java lucene/classification/src/test/org/apache/lucene/classification/utils/DataSplitterTest.java
index f6b9cb0..84cccb7 100644
--- lucene/classification/src/test/org/apache/lucene/classification/utils/DataSplitterTest.java
+++ lucene/classification/src/test/org/apache/lucene/classification/utils/DataSplitterTest.java
@@ -86,7 +86,7 @@ public class DataSplitterTest extends LuceneTestCase {
   @After
   public void tearDown() throws Exception {
     originalIndex.close();
-    indexWriter.shutdown();
+    indexWriter.close();
     dir.close();
     super.tearDown();
   }
diff --git lucene/codecs/src/test/org/apache/lucene/codecs/blocktreeords/TestOrdsBlockTree.java lucene/codecs/src/test/org/apache/lucene/codecs/blocktreeords/TestOrdsBlockTree.java
index f1a6c4d..9c418c5 100644
--- lucene/codecs/src/test/org/apache/lucene/codecs/blocktreeords/TestOrdsBlockTree.java
+++ lucene/codecs/src/test/org/apache/lucene/codecs/blocktreeords/TestOrdsBlockTree.java
@@ -237,7 +237,7 @@ public class TestOrdsBlockTree extends BasePostingsFormatTestCase {
 
   public void testFloorBlocks() throws Exception {
     Directory dir = newDirectory();
-    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));
+    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));
     IndexWriter w = new IndexWriter(dir, iwc);
     for(int i=0;i<128;i++) {
       Document doc = new Document();
@@ -275,7 +275,7 @@ public class TestOrdsBlockTree extends BasePostingsFormatTestCase {
 
   public void testNonRootFloorBlocks() throws Exception {
     Directory dir = newDirectory();
-    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));
+    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));
     IndexWriter w = new IndexWriter(dir, iwc);
     List<String> terms = new ArrayList<>();
     for(int i=0;i<36;i++) {
@@ -321,7 +321,7 @@ public class TestOrdsBlockTree extends BasePostingsFormatTestCase {
 
   public void testSeveralNonRootBlocks() throws Exception {
     Directory dir = newDirectory();
-    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));
+    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));
     IndexWriter w = new IndexWriter(dir, iwc);
     List<String> terms = new ArrayList<>();
     for(int i=0;i<30;i++) {
diff --git lucene/codecs/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings.java lucene/codecs/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings.java
index 3c2e1a9..4d7bde6 100644
--- lucene/codecs/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings.java
+++ lucene/codecs/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings.java
@@ -78,7 +78,7 @@ public class Test10KPulsings extends LuceneTestCase {
     }
     
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
 
     TermsEnum te = MultiFields.getTerms(ir, "field").iterator(null);
     DocsEnum de = null;
@@ -136,7 +136,7 @@ public class Test10KPulsings extends LuceneTestCase {
     }
     
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
 
     TermsEnum te = MultiFields.getTerms(ir, "field").iterator(null);
     DocsEnum de = null;
diff --git lucene/codecs/src/test/org/apache/lucene/codecs/pulsing/TestPulsingReuse.java lucene/codecs/src/test/org/apache/lucene/codecs/pulsing/TestPulsingReuse.java
index 1df6251..7f80329 100644
--- lucene/codecs/src/test/org/apache/lucene/codecs/pulsing/TestPulsingReuse.java
+++ lucene/codecs/src/test/org/apache/lucene/codecs/pulsing/TestPulsingReuse.java
@@ -52,7 +52,7 @@ public class TestPulsingReuse extends LuceneTestCase {
     doc.add(new TextField("foo", "a b b c c c d e f g g h i i j j k", Field.Store.NO));
     iw.addDocument(doc);
     DirectoryReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     
     AtomicReader segment = getOnlySegmentReader(ir);
     DocsEnum reuse = null;
@@ -93,7 +93,7 @@ public class TestPulsingReuse extends LuceneTestCase {
     // but this seems 'good enough' for now.
     iw.addDocument(doc);
     DirectoryReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     
     AtomicReader segment = getOnlySegmentReader(ir);
     DocsEnum reuse = null;
diff --git lucene/core/src/java/org/apache/lucene/index/IndexUpgrader.java lucene/core/src/java/org/apache/lucene/index/IndexUpgrader.java
index 6e65b98..f168be1 100644
--- lucene/core/src/java/org/apache/lucene/index/IndexUpgrader.java
+++ lucene/core/src/java/org/apache/lucene/index/IndexUpgrader.java
@@ -23,7 +23,6 @@ import org.apache.lucene.util.CommandLineUtil;
 import org.apache.lucene.util.Constants;
 import org.apache.lucene.util.InfoStream;
 import org.apache.lucene.util.PrintStreamInfoStream;
-import org.apache.lucene.util.Version;
 
 import java.io.File;
 import java.io.IOException;
@@ -42,7 +41,7 @@ import java.util.Collection;
   * refuses to run by default. Specify {@code -delete-prior-commits}
   * to override this, allowing the tool to delete all but the last commit.
   * From Java code this can be enabled by passing {@code true} to
-  * {@link #IndexUpgrader(Directory,Version,InfoStream,boolean)}.
+  * {@link #IndexUpgrader(Directory,InfoStream,boolean)}.
   * <p><b>Warning:</b> This tool may reorder documents if the index was partially
   * upgraded before execution (e.g., documents were added). If your application relies
   * on &quot;monotonicity&quot; of doc IDs (which means that the order in which the documents
@@ -109,7 +108,7 @@ public final class IndexUpgrader {
     } else {
       dir = CommandLineUtil.newFSDirectory(dirImpl, new File(path));
     }
-    return new IndexUpgrader(dir, Version.LUCENE_CURRENT, out, deletePriorCommits);
+    return new IndexUpgrader(dir, out, deletePriorCommits);
   }
   
   private final Directory dir;
@@ -118,15 +117,15 @@ public final class IndexUpgrader {
   
   /** Creates index upgrader on the given directory, using an {@link IndexWriter} using the given
    * {@code matchVersion}. The tool refuses to upgrade indexes with multiple commit points. */
-  public IndexUpgrader(Directory dir, Version matchVersion) {
-    this(dir, new IndexWriterConfig(matchVersion, null), false);
+  public IndexUpgrader(Directory dir) {
+    this(dir, new IndexWriterConfig(null), false);
   }
   
   /** Creates index upgrader on the given directory, using an {@link IndexWriter} using the given
    * {@code matchVersion}. You have the possibility to upgrade indexes with multiple commit points by removing
    * all older ones. If {@code infoStream} is not {@code null}, all logging output will be sent to this stream. */
-  public IndexUpgrader(Directory dir, Version matchVersion, InfoStream infoStream, boolean deletePriorCommits) {
-    this(dir, new IndexWriterConfig(matchVersion, null), deletePriorCommits);
+  public IndexUpgrader(Directory dir, InfoStream infoStream, boolean deletePriorCommits) {
+    this(dir, new IndexWriterConfig(null), deletePriorCommits);
     if (null != infoStream) {
       this.iwc.setInfoStream(infoStream);
     }
@@ -168,7 +167,7 @@ public final class IndexUpgrader {
         infoStream.message("IndexUpgrader", "All segments upgraded to version " + Constants.LUCENE_MAIN_VERSION);
       }
     } finally {
-      w.shutdown();
+      w.close();
     }
   }
   
diff --git lucene/core/src/java/org/apache/lucene/index/IndexWriter.java lucene/core/src/java/org/apache/lucene/index/IndexWriter.java
index bdcf61a..824e020 100644
--- lucene/core/src/java/org/apache/lucene/index/IndexWriter.java
+++ lucene/core/src/java/org/apache/lucene/index/IndexWriter.java
@@ -64,7 +64,6 @@ import org.apache.lucene.util.Constants;
 import org.apache.lucene.util.IOUtils;
 import org.apache.lucene.util.InfoStream;
 import org.apache.lucene.util.ThreadInterruptedException;
-import org.apache.lucene.util.Version;
 
 /**
   An <code>IndexWriter</code> creates and maintains an index.
@@ -891,48 +890,22 @@ public class IndexWriter implements Closeable, TwoPhaseCommit, Accountable {
     }
   }
 
-  /** Gracefully shuts down this {@code IndexWriter} instance,
-   *  by writing any changes, waiting for any running
-   *  merges, committing, and closing.  If you don't want to
-   *  wait for merges, use {@link #shutdown(boolean)} instead.
-   *
-   *  <p>If you called prepareCommit but failed to call
-   *  commit, this method will throw {@code
-   *  IllegalStateException} and the {@code IndexWriter}
-   *  will not be closed.
-   *
-   *  <p>If this method throws any other
-   *  exception, the {@code IndexWriter} will be closed, but
-   *  changes may have been lost.
-   *
-   *  <p><b>NOTE</b>: You must ensure no
-   *  other threads are still making changes at the same
-   *  time that this method is invoked.  */
-  public void shutdown() throws IOException {
-    shutdown(true);
-  }
-
-  /** Gracefully shut down this {@code IndexWriter}
-   *  instance, with control over whether to wait for
-   *  merges.  See {@link #shutdown()}. */
-  public void shutdown(boolean waitForMerges) throws IOException {
+  /**
+   * Implementation for {@link #close()} when {@link IndexWriterConfig#commitOnClose} is true.
+   */
+  private void shutdown() throws IOException {
     if (pendingCommit != null) {
-      throw new IllegalStateException("cannot shutdown: prepareCommit was already called with no corresponding call to commit");
+      throw new IllegalStateException("cannot close: prepareCommit was already called with no corresponding call to commit");
     }
     if (infoStream.isEnabled("IW")) {
-      infoStream.message("IW", "now flush at shutdown");
+      infoStream.message("IW", "now flush at close");
     }
     boolean success = false;
     try {
-      flush(waitForMerges, true);
-      finishMerges(waitForMerges);
+      flush(true, true);
+      finishMerges(true);
       commit();
-      // TODO: we could just call rollback, but ... it's nice
-      // to catch IW bugs where after waitForMerges/commit we
-      // still have running merges / uncommitted changes, or
-      // tests that illegally leave threads indexing and then
-      // try to use shutdown:
-      close();
+      rollback(); // ie close, since we just committed
       success = true;
     } finally {
       if (success == false) {
@@ -945,58 +918,33 @@ public class IndexWriter implements Closeable, TwoPhaseCommit, Accountable {
       }
     }
   }
-  
+
   /**
    * Closes all open resources and releases the write lock.
-   * If there are running merges or uncommitted
-   * changes:
+   *
+   * If {@link IndexWriterConfig#commitOnClose} is <code>true</code>,
+   * this will attempt to gracefully shut down by writing any
+   * changes, waiting for any running merges, committing, and closing.
+   * In this case, note that:
    * <ul>
-   *   <li> If config.matchVersion >= LUCENE_5_0 then the
-   *        changes are silently discarded.
-   *   <li> Otherwise, a RuntimeException is thrown to
-   *        indicate what was lost, but the IndexWriter is
-   *        still closed.
+   *   <li>If you called prepareCommit but failed to call commit, this
+   *       method will throw {@code IllegalStateException} and the {@code IndexWriter}
+   *       will not be closed.</li>
+   *   <li>If this method throws any other exception, the {@code IndexWriter}
+   *       will be closed, but changes may have been lost.</li>
    * </ul>
    *
-   * Use {@link #shutdown} if you want to flush, commit, and
-   * wait for merges, before closing.
-   * 
-   * @throws IOException if there is a low-level IO error
-   *   (the IndexWriter will still be closed)
-   * @throws RuntimeException if config.matchVersion <
-   *   LUCENE_5_0 and there were pending changes that were
-   *   lost (the IndexWriter will still be closed)
+   * <p><b>NOTE</b>: You must ensure no other threads are still making
+   * changes at the same time that this method is invoked.</p>
    */
   @Override
   public void close() throws IOException {
-
-    // If there are uncommitted changes, or still running
-    // merges, we will in fact close, but we'll throw an
-    // exception notifying the caller that they lost
-    // changes, if IWC.matchVersion is < 5.0:
-    boolean lostChanges = false;
-
-    // Only check for lost changes if the version earlier than 5.0:
-    if (config.getMatchVersion().onOrAfter(Version.LUCENE_5_0) == false) {
-      lostChanges = hasUncommittedChanges();
-      if (lostChanges == false) {
-        synchronized(this) {
-          if (pendingMerges.isEmpty() == false) {
-            lostChanges = true;
-          }
-          if (runningMerges.isEmpty() == false) {
-            lostChanges = true;
-          }
-        }
+    if (config.getCommitOnClose()) {
+      if (closed == false) {
+        shutdown();
       }
-    }
-
-    // As long as there are no pending changes and no
-    // running merges, we just rollback to close:
-    rollback();
-
-    if (lostChanges) {
-      throw new RuntimeException("this writer is closed, but some pending changes or running merges were discarded; use shutdown to save pending changes and finish merges before closing");
+    } else {
+      rollback();
     }
   }
 
diff --git lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig.java lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig.java
index 915da44..dbea5ea 100644
--- lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig.java
+++ lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig.java
@@ -28,7 +28,6 @@ import org.apache.lucene.util.InfoStream;
 import org.apache.lucene.util.PrintStreamInfoStream;
 import org.apache.lucene.util.SetOnce;
 import org.apache.lucene.util.SetOnce.AlreadySetException;
-import org.apache.lucene.util.Version;
 
 /**
  * Holds all the configuration that is used to create an {@link IndexWriter}.
@@ -115,6 +114,9 @@ public final class IndexWriterConfig extends LiveIndexWriterConfig {
    *  merging segments (set to <code>false</code>). You can set this
    *  to <code>true</code> for additional safety. */
   public final static boolean DEFAULT_CHECK_INTEGRITY_AT_MERGE = false;
+
+  /** Default value for whether calls to {@link IndexWriter#close()} include a commit. */
+  public final static boolean DEFAULT_COMMIT_ON_CLOSE = true;
   
   /**
    * Sets the default (for any instance) maximum time to wait for a write lock
@@ -150,8 +152,7 @@ public final class IndexWriterConfig extends LiveIndexWriterConfig {
   }
   
   /**
-   * Creates a new config that with defaults that match the specified
-   * {@link Version} as well as the default {@link
+   * Creates a new config that with the default {@link
    * Analyzer}. By default, {@link TieredMergePolicy} is used
    * for merging;
    * Note that {@link TieredMergePolicy} is free to select
@@ -160,8 +161,8 @@ public final class IndexWriterConfig extends LiveIndexWriterConfig {
    * should switch to {@link LogByteSizeMergePolicy} or
    * {@link LogDocMergePolicy}.
    */
-  public IndexWriterConfig(Version matchVersion, Analyzer analyzer) {
-    super(analyzer, matchVersion);
+  public IndexWriterConfig(Analyzer analyzer) {
+    super(analyzer);
   }
 
   /** Specifies {@link OpenMode} of the index.
@@ -520,6 +521,15 @@ public final class IndexWriterConfig extends LiveIndexWriterConfig {
     return (IndexWriterConfig) super.setUseCompoundFile(useCompoundFile);
   }
 
+  /**
+   * Sets if calls {@link IndexWriter#close()} should first commit
+   * before closing.  Use <code>true</code> to match behavior of Lucene 4.x.
+   */
+  public IndexWriterConfig setCommitOnClose(boolean commitOnClose) {
+    this.commitOnClose = commitOnClose;
+    return this;
+  }
+
   @Override
   public String toString() {
     StringBuilder sb = new StringBuilder(super.toString());
diff --git lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig.java lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig.java
index 5dd4c96..5adb3a3 100644
--- lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig.java
+++ lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig.java
@@ -25,7 +25,6 @@ import org.apache.lucene.index.IndexWriterConfig.OpenMode;
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.similarities.Similarity;
 import org.apache.lucene.util.InfoStream;
-import org.apache.lucene.util.Version;
 
 /**
  * Holds all the configuration used by {@link IndexWriter} with few setters for
@@ -92,19 +91,18 @@ public class LiveIndexWriterConfig {
    *  segment, after which the segment is forced to flush. */
   protected volatile int perThreadHardLimitMB;
 
-  /** {@link Version} that {@link IndexWriter} should emulate. */
-  protected final Version matchVersion;
-
   /** True if segment flushes should use compound file format */
   protected volatile boolean useCompoundFile = IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM;
   
   /** True if merging should check integrity of segments before merge */
   protected volatile boolean checkIntegrityAtMerge = IndexWriterConfig.DEFAULT_CHECK_INTEGRITY_AT_MERGE;
 
+  /** True if calls to {@link IndexWriter#close()} should first do a commit. */
+  protected boolean commitOnClose = IndexWriterConfig.DEFAULT_COMMIT_ON_CLOSE;
+
   // used by IndexWriterConfig
-  LiveIndexWriterConfig(Analyzer analyzer, Version matchVersion) {
+  LiveIndexWriterConfig(Analyzer analyzer) {
     this.analyzer = analyzer;
-    this.matchVersion = matchVersion;
     ramBufferSizeMB = IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB;
     maxBufferedDocs = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS;
     maxBufferedDeleteTerms = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS;
@@ -465,11 +463,17 @@ public class LiveIndexWriterConfig {
   public boolean getCheckIntegrityAtMerge() {
     return checkIntegrityAtMerge;
   }
-  
+
+  /**
+   * Returns <code>true</code> if {@link IndexWriter#close()} should first commit before closing.
+   */
+  public boolean getCommitOnClose() {
+    return commitOnClose;
+  }
+
   @Override
   public String toString() {
     StringBuilder sb = new StringBuilder();
-    sb.append("matchVersion=").append(matchVersion).append("\n");
     sb.append("analyzer=").append(analyzer == null ? "null" : analyzer.getClass().getName()).append("\n");
     sb.append("ramBufferSizeMB=").append(getRAMBufferSizeMB()).append("\n");
     sb.append("maxBufferedDocs=").append(getMaxBufferedDocs()).append("\n");
@@ -491,12 +495,7 @@ public class LiveIndexWriterConfig {
     sb.append("perThreadHardLimitMB=").append(getRAMPerThreadHardLimitMB()).append("\n");
     sb.append("useCompoundFile=").append(getUseCompoundFile()).append("\n");
     sb.append("checkIntegrityAtMerge=").append(getCheckIntegrityAtMerge()).append("\n");
+    sb.append("commitOnClose=").append(getCommitOnClose()).append("\n");
     return sb.toString();
   }
-
-  /** Returns the {@code matchVersion} that was provided to
-   *  the constructor. */
-  public Version getMatchVersion() {
-    return matchVersion;
-  }
 }
diff --git lucene/core/src/java/org/apache/lucene/search/IndexSearcher.java lucene/core/src/java/org/apache/lucene/search/IndexSearcher.java
index 8f1a5f6..116304e 100644
--- lucene/core/src/java/org/apache/lucene/search/IndexSearcher.java
+++ lucene/core/src/java/org/apache/lucene/search/IndexSearcher.java
@@ -112,7 +112,7 @@ public class IndexSearcher {
 
   /** Runs searches for each segment separately, using the
    *  provided ExecutorService.  IndexSearcher will not
-   *  shutdown/awaitTermination this ExecutorService on
+   *  close/awaitTermination this ExecutorService on
    *  close; you must do so, eventually, on your own.  NOTE:
    *  if you are using {@link NIOFSDirectory}, do not use
    *  the shutdownNow method of ExecutorService as this uses
@@ -130,7 +130,7 @@ public class IndexSearcher {
    * <p>
    * Given a non-<code>null</code> {@link ExecutorService} this method runs
    * searches for each segment separately, using the provided ExecutorService.
-   * IndexSearcher will not shutdown/awaitTermination this ExecutorService on
+   * IndexSearcher will not close/awaitTermination this ExecutorService on
    * close; you must do so, eventually, on your own. NOTE: if you are using
    * {@link NIOFSDirectory}, do not use the shutdownNow method of
    * ExecutorService as this uses Thread.interrupt under-the-hood which can
diff --git lucene/core/src/test/org/apache/lucene/TestDemo.java lucene/core/src/test/org/apache/lucene/TestDemo.java
index 5111fa4..b512b5f 100644
--- lucene/core/src/test/org/apache/lucene/TestDemo.java
+++ lucene/core/src/test/org/apache/lucene/TestDemo.java
@@ -53,7 +53,7 @@ public class TestDemo extends LuceneTestCase {
     String text = "This is the text to be indexed. " + longTerm;
     doc.add(newTextField("fieldname", text, Field.Store.YES));
     iwriter.addDocument(doc);
-    iwriter.shutdown();
+    iwriter.close();
     
     // Now search the index:
     IndexReader ireader = DirectoryReader.open(directory); // read-only=true
diff --git lucene/core/src/test/org/apache/lucene/TestExternalCodecs.java lucene/core/src/test/org/apache/lucene/TestExternalCodecs.java
index 1e26260..f6bc579 100644
--- lucene/core/src/test/org/apache/lucene/TestExternalCodecs.java
+++ lucene/core/src/test/org/apache/lucene/TestExternalCodecs.java
@@ -130,7 +130,7 @@ public class TestExternalCodecs extends LuceneTestCase {
     }
     r.close();
 
-    w.shutdown();
+    w.close();
 
     dir.close();
   }
diff --git lucene/core/src/test/org/apache/lucene/TestMergeSchedulerExternal.java lucene/core/src/test/org/apache/lucene/TestMergeSchedulerExternal.java
index 7ad2346..4442add 100644
--- lucene/core/src/test/org/apache/lucene/TestMergeSchedulerExternal.java
+++ lucene/core/src/test/org/apache/lucene/TestMergeSchedulerExternal.java
@@ -103,7 +103,7 @@ public class TestMergeSchedulerExternal extends LuceneTestCase {
       writer.addDocument(doc);
 
     ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();
-    writer.shutdown();
+    writer.close();
     
     assertTrue(mergeThreadCreated);
     assertTrue(mergeCalled);
@@ -134,7 +134,7 @@ public class TestMergeSchedulerExternal extends LuceneTestCase {
     // compiles. But ensure that it can be used as well, e.g., no other hidden
     // dependencies or something. Therefore, don't use any random API !
     Directory dir = new RAMDirectory();
-    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, null);
+    IndexWriterConfig conf = new IndexWriterConfig(null);
     conf.setMergeScheduler(new ReportingMergeScheduler());
     IndexWriter writer = new IndexWriter(dir, conf);
     writer.addDocument(new Document());
@@ -142,7 +142,7 @@ public class TestMergeSchedulerExternal extends LuceneTestCase {
     writer.addDocument(new Document());
     writer.commit(); // trigger flush
     writer.forceMerge(1);
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
   
diff --git lucene/core/src/test/org/apache/lucene/TestSearch.java lucene/core/src/test/org/apache/lucene/TestSearch.java
index 5a18c65..37875ec 100644
--- lucene/core/src/test/org/apache/lucene/TestSearch.java
+++ lucene/core/src/test/org/apache/lucene/TestSearch.java
@@ -50,7 +50,7 @@ public class TestSearch extends LuceneTestCase {
         d.add(newTextField("foo", "bar", Field.Store.YES));
         writer.addDocument(d);
       } finally {
-        writer.shutdown();
+        writer.close();
       }
       
       IndexReader reader = DirectoryReader.open(directory);
@@ -130,7 +130,7 @@ public class TestSearch extends LuceneTestCase {
         d.add(new IntField("id", j, Field.Store.NO));
         writer.addDocument(d);
       }
-      writer.shutdown();
+      writer.close();
 
       IndexReader reader = DirectoryReader.open(directory);
       IndexSearcher searcher = newSearcher(reader);
diff --git lucene/core/src/test/org/apache/lucene/TestSearchForDuplicates.java lucene/core/src/test/org/apache/lucene/TestSearchForDuplicates.java
index c7ea509..4747557 100644
--- lucene/core/src/test/org/apache/lucene/TestSearchForDuplicates.java
+++ lucene/core/src/test/org/apache/lucene/TestSearchForDuplicates.java
@@ -85,7 +85,7 @@ public class TestSearchForDuplicates extends LuceneTestCase {
         d.add(new NumericDocValuesField(ID_FIELD, j));
         writer.addDocument(d);
       }
-      writer.shutdown();
+      writer.close();
 
       // try a search without OR
       IndexReader reader = DirectoryReader.open(directory);
diff --git lucene/core/src/test/org/apache/lucene/analysis/TestCachingTokenFilter.java lucene/core/src/test/org/apache/lucene/analysis/TestCachingTokenFilter.java
index 54bea01..af307bb 100644
--- lucene/core/src/test/org/apache/lucene/analysis/TestCachingTokenFilter.java
+++ lucene/core/src/test/org/apache/lucene/analysis/TestCachingTokenFilter.java
@@ -97,7 +97,7 @@ public class TestCachingTokenFilter extends BaseTokenStreamTestCase {
     assertEquals(1, termPositions.freq());
     assertEquals(2, termPositions.nextPosition());
     reader.close();
-    writer.shutdown();
+    writer.close();
     // 3) reset stream and consume tokens again
     stream.reset();
     checkTokens(stream);
diff --git lucene/core/src/test/org/apache/lucene/analysis/TestGraphTokenizers.java lucene/core/src/test/org/apache/lucene/analysis/TestGraphTokenizers.java
index 6802688..684338e 100644
--- lucene/core/src/test/org/apache/lucene/analysis/TestGraphTokenizers.java
+++ lucene/core/src/test/org/apache/lucene/analysis/TestGraphTokenizers.java
@@ -448,7 +448,7 @@ public class TestGraphTokenizers extends BaseTokenStreamTestCase {
     final String s = a.toDot();
     Writer w = new OutputStreamWriter(new FileOutputStream("/x/tmp/out.dot"));
     w.write(s);
-    w.shutdown();
+    w.close();
     System.out.println("TEST: saved to /x/tmp/out.dot");
   }
   */
diff --git lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer.java lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer.java
index 4b7202a..957b4d1 100644
--- lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer.java
+++ lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer.java
@@ -329,7 +329,7 @@ public class TestMockAnalyzer extends BaseTokenStreamTestCase {
     assertEquals(1 + endOffset + offsetGap, dpe.endOffset());
     assertEquals(null, te.next());
     reader.close();
-    writer.shutdown();
+    writer.close();
     writer.w.getDirectory().close();
   }
 
diff --git lucene/core/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat.java lucene/core/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat.java
index d7bf6b2..fccc78a 100644
--- lucene/core/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat.java
+++ lucene/core/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat.java
@@ -89,7 +89,7 @@ public class TestCompressingStoredFieldsFormat extends BaseStoredFieldsFormatTes
       }
       // Only one .fdt and one .fdx files must have been found
       assertEquals(2, counter);
-      iw.shutdown();
+      iw.close();
       dir.close();
     }
   }
diff --git lucene/core/src/test/org/apache/lucene/codecs/compressing/TestCompressingTermVectorsFormat.java lucene/core/src/test/org/apache/lucene/codecs/compressing/TestCompressingTermVectorsFormat.java
index 911ee68..70fc572 100644
--- lucene/core/src/test/org/apache/lucene/codecs/compressing/TestCompressingTermVectorsFormat.java
+++ lucene/core/src/test/org/apache/lucene/codecs/compressing/TestCompressingTermVectorsFormat.java
@@ -69,7 +69,7 @@ public class TestCompressingTermVectorsFormat extends BaseTermVectorsFormatTestC
       // expected exception
     }
     ir.close();
-    iw.shutdown();
+    iw.close();
     dir.close();
   }
 }
diff --git lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestLucene40PostingsReader.java lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestLucene40PostingsReader.java
index 096b966..a3f6bc9 100644
--- lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestLucene40PostingsReader.java
+++ lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestLucene40PostingsReader.java
@@ -98,7 +98,7 @@ public class TestLucene40PostingsReader extends LuceneTestCase {
       // delete 1-100% of docs
       iw.deleteDocuments(new Term("title", terms[random().nextInt(terms.length)]));
     }
-    iw.shutdown();
+    iw.close();
     dir.close(); // checkindex
   }
   
diff --git lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestReuseDocsEnum.java lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestReuseDocsEnum.java
index 968d8cb..9ac520d 100644
--- lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestReuseDocsEnum.java
+++ lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestReuseDocsEnum.java
@@ -116,7 +116,7 @@ public class TestReuseDocsEnum extends LuceneTestCase {
       }
       assertEquals(1, enums.size());  
     }
-    writer.shutdown();
+    writer.close();
     IOUtils.close(open, dir);
   }
   
@@ -161,7 +161,7 @@ public class TestReuseDocsEnum extends LuceneTestCase {
       }
       assertEquals(terms.size(), enums.size());
     }
-    writer.shutdown();
+    writer.close();
     IOUtils.close(firstReader, secondReader, dir);
   }
   
diff --git lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat2.java lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat2.java
index fafd577..7f7b2ce 100644
--- lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat2.java
+++ lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat2.java
@@ -52,14 +52,14 @@ public class TestBlockPostingsFormat2 extends LuceneTestCase {
   
   @Override
   public void tearDown() throws Exception {
-    iw.shutdown();
+    iw.close();
     TestUtil.checkIndex(dir); // for some extra coverage, checkIndex before we forceMerge
     IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));
     iwc.setCodec(TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat()));
     iwc.setOpenMode(OpenMode.APPEND);
     IndexWriter iw = new IndexWriter(dir, iwc);
     iw.forceMerge(1);
-    iw.shutdown();
+    iw.close();
     dir.close(); // just force a checkindex for now
     super.tearDown();
   }
diff --git lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3.java lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3.java
index 59ee086..cf92df3 100644
--- lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3.java
+++ lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3.java
@@ -53,7 +53,6 @@ import org.apache.lucene.util.English;
 import org.apache.lucene.util.FixedBitSet;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.TestUtil;
-import org.apache.lucene.util.TestUtil;
 import org.apache.lucene.util.automaton.AutomatonTestUtil;
 import org.apache.lucene.util.automaton.CompiledAutomaton;
 import org.apache.lucene.util.automaton.RegExp;
@@ -134,7 +133,7 @@ public class TestBlockPostingsFormat3 extends LuceneTestCase {
       field8.setStringValue(stringValue);
       iw.addDocument(doc);
     }
-    iw.shutdown();
+    iw.close();
     verify(dir);
     TestUtil.checkIndex(dir); // for some extra coverage, checkIndex before we forceMerge
     iwc = newIndexWriterConfig(analyzer);
@@ -142,7 +141,7 @@ public class TestBlockPostingsFormat3 extends LuceneTestCase {
     iwc.setOpenMode(OpenMode.APPEND);
     IndexWriter iw2 = new IndexWriter(dir, iwc);
     iw2.forceMerge(1);
-    iw2.shutdown();
+    iw2.close();
     verify(dir);
     dir.close();
   }
diff --git lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestLucene41PostingsFormat.java lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestLucene41PostingsFormat.java
index 3f89226..a454615 100644
--- lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestLucene41PostingsFormat.java
+++ lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestLucene41PostingsFormat.java
@@ -45,7 +45,7 @@ public class TestLucene41PostingsFormat extends BasePostingsFormatTestCase {
   /** Make sure the final sub-block(s) are not skipped. */
   public void testFinalBlock() throws Exception {
     Directory d = newDirectory();
-    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));
+    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));
     for(int i=0;i<25;i++) {
       Document doc = new Document();
       doc.add(newStringField("field", Character.toString((char) (97+i)), Field.Store.NO));
diff --git lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldDocValuesFormat.java lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldDocValuesFormat.java
index 6bb347f..39be724 100644
--- lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldDocValuesFormat.java
+++ lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldDocValuesFormat.java
@@ -47,7 +47,6 @@ import org.apache.lucene.search.TopDocs;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.TestUtil;
-import org.apache.lucene.util.TestUtil;
 
 /**
  * Basic tests of PerFieldDocValuesFormat
@@ -100,7 +99,7 @@ public class TestPerFieldDocValuesFormat extends BaseDocValuesFormatTestCase {
     doc.add(new NumericDocValuesField("dv1", 5));
     doc.add(new BinaryDocValuesField("dv2", new BytesRef("hello world")));
     iwriter.addDocument(doc);
-    iwriter.shutdown();
+    iwriter.close();
     
     // Now search the index:
     IndexReader ireader = DirectoryReader.open(directory); // read-only=true
diff --git lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat2.java lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat2.java
index 259e7fb..229a167 100644
--- lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat2.java
+++ lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat2.java
@@ -110,7 +110,7 @@ public class TestPerFieldPostingsFormat2 extends LuceneTestCase {
     TestUtil.checkIndex(dir);
     writer.forceMerge(1);
     assertEquals(30, writer.maxDoc());
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
 
@@ -138,7 +138,7 @@ public class TestPerFieldPostingsFormat2 extends LuceneTestCase {
     }
     addDocs3(writer, 10);
     writer.commit();
-    writer.shutdown();
+    writer.close();
 
     assertQuery(new Term("content", "ccc"), dir, 10);
     assertQuery(new Term("content", "aaa"), dir, 10);
@@ -179,7 +179,7 @@ public class TestPerFieldPostingsFormat2 extends LuceneTestCase {
     }
     writer.forceMerge(1);
     assertEquals(40, writer.maxDoc());
-    writer.shutdown();
+    writer.close();
     assertQuery(new Term("content", "ccc"), dir, 10);
     assertQuery(new Term("content", "bbb"), dir, 20);
     assertQuery(new Term("content", "aaa"), dir, 10);
@@ -242,7 +242,7 @@ public class TestPerFieldPostingsFormat2 extends LuceneTestCase {
     for (int i = 0; i < numRounds; i++) {
       int num = TestUtil.nextInt(random(), 30, 60);
       IndexWriterConfig config = newIndexWriterConfig(random(),
-          TEST_VERSION_CURRENT, new MockAnalyzer(random()));
+          new MockAnalyzer(random()));
       config.setOpenMode(OpenMode.CREATE_OR_APPEND);
       IndexWriter writer = newWriter(dir, config);
       for (int j = 0; j < docsPerRound; j++) {
@@ -262,7 +262,7 @@ public class TestPerFieldPostingsFormat2 extends LuceneTestCase {
       }
       writer.commit();
       assertEquals((i + 1) * docsPerRound, writer.maxDoc());
-      writer.shutdown();
+      writer.close();
     }
     dir.close();
   }
@@ -319,7 +319,7 @@ public class TestPerFieldPostingsFormat2 extends LuceneTestCase {
       dateField.setStringValue(Integer.toString(random().nextInt(100)));
       iw.addDocument(doc);
     }
-    iw.shutdown();
+    iw.close();
     dir.close(); // checkindex
   }
 }
diff --git lucene/core/src/test/org/apache/lucene/document/TestBinaryDocument.java lucene/core/src/test/org/apache/lucene/document/TestBinaryDocument.java
index 25ca0fe..7048a0a 100644
--- lucene/core/src/test/org/apache/lucene/document/TestBinaryDocument.java
+++ lucene/core/src/test/org/apache/lucene/document/TestBinaryDocument.java
@@ -3,7 +3,6 @@ package org.apache.lucene.document;
 import java.nio.charset.StandardCharsets;
 
 import org.apache.lucene.index.IndexReader;
-import org.apache.lucene.index.IndexableField;
 import org.apache.lucene.index.RandomIndexWriter;
 import org.apache.lucene.index.StoredDocument;
 import org.apache.lucene.store.Directory;
@@ -72,7 +71,7 @@ public class TestBinaryDocument extends LuceneTestCase {
     String stringFldStoredTest = docFromReader.get("stringStored");
     assertTrue(stringFldStoredTest.equals(binaryValStored));
     
-    writer.shutdown();    
+    writer.close();
     reader.close();
     dir.close();
   }
@@ -101,7 +100,7 @@ public class TestBinaryDocument extends LuceneTestCase {
     assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));
     assertTrue(CompressionTools.decompressString(docFromReader.getBinaryValue("stringCompressed")).equals(binaryValCompressed));
 
-    writer.shutdown();
+    writer.close();
     reader.close();
     dir.close();
   }
diff --git lucene/core/src/test/org/apache/lucene/document/TestDocument.java lucene/core/src/test/org/apache/lucene/document/TestDocument.java
index dd6876e..b8bcd67 100644
--- lucene/core/src/test/org/apache/lucene/document/TestDocument.java
+++ lucene/core/src/test/org/apache/lucene/document/TestDocument.java
@@ -221,7 +221,7 @@ public class TestDocument extends LuceneTestCase {
     assertEquals(1, hits.length);
     
     doAssert(searcher.doc(hits[0].doc));
-    writer.shutdown();
+    writer.close();
     reader.close();
     dir.close();
   }
@@ -253,7 +253,7 @@ public class TestDocument extends LuceneTestCase {
     assertEquals(1, hits.length);
     
     doAssert(searcher.doc(hits[0].doc));
-    writer.shutdown();
+    writer.close();
     reader.close();
     dir.close();    
   }
@@ -344,7 +344,7 @@ public class TestDocument extends LuceneTestCase {
       else if (f.stringValue().equals("id3")) result |= 4;
       else fail("unexpected id field");
     }
-    writer.shutdown();
+    writer.close();
     reader.close();
     dir.close();
     assertEquals("did not see all IDs", 7, result);
@@ -381,7 +381,7 @@ public class TestDocument extends LuceneTestCase {
     assertNull(sdoc.get("somethingElse"));
     assertArrayEquals(new String[] { "5", "4" }, sdoc.getValues("int"));
     ir.close();
-    iw.shutdown();
+    iw.close();
     dir.close();
   }
 }
diff --git lucene/core/src/test/org/apache/lucene/index/Test2BBinaryDocValues.java lucene/core/src/test/org/apache/lucene/index/Test2BBinaryDocValues.java
index 8ed4499..c98778c 100644
--- lucene/core/src/test/org/apache/lucene/index/Test2BBinaryDocValues.java
+++ lucene/core/src/test/org/apache/lucene/index/Test2BBinaryDocValues.java
@@ -45,7 +45,7 @@ public class Test2BBinaryDocValues extends LuceneTestCase {
     }
     
     IndexWriter w = new IndexWriter(dir,
-        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))
+        new IndexWriterConfig(new MockAnalyzer(random()))
         .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)
         .setRAMBufferSizeMB(256.0)
         .setMergeScheduler(new ConcurrentMergeScheduler())
@@ -71,7 +71,7 @@ public class Test2BBinaryDocValues extends LuceneTestCase {
     }
     
     w.forceMerge(1);
-    w.shutdown();
+    w.close();
     
     System.out.println("verifying...");
     System.out.flush();
@@ -104,7 +104,7 @@ public class Test2BBinaryDocValues extends LuceneTestCase {
     }
     
     IndexWriter w = new IndexWriter(dir,
-        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))
+        new IndexWriterConfig(new MockAnalyzer(random()))
         .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)
         .setRAMBufferSizeMB(256.0)
         .setMergeScheduler(new ConcurrentMergeScheduler())
@@ -130,7 +130,7 @@ public class Test2BBinaryDocValues extends LuceneTestCase {
     }
     
     w.forceMerge(1);
-    w.shutdown();
+    w.close();
     
     System.out.println("verifying...");
     System.out.flush();
diff --git lucene/core/src/test/org/apache/lucene/index/Test2BNumericDocValues.java lucene/core/src/test/org/apache/lucene/index/Test2BNumericDocValues.java
index 01fbdc5..adc0239 100644
--- lucene/core/src/test/org/apache/lucene/index/Test2BNumericDocValues.java
+++ lucene/core/src/test/org/apache/lucene/index/Test2BNumericDocValues.java
@@ -42,7 +42,7 @@ public class Test2BNumericDocValues extends LuceneTestCase {
     }
     
     IndexWriter w = new IndexWriter(dir,
-        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))
+        new IndexWriterConfig(new MockAnalyzer(random()))
         .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)
         .setRAMBufferSizeMB(256.0)
         .setMergeScheduler(new ConcurrentMergeScheduler())
@@ -63,7 +63,7 @@ public class Test2BNumericDocValues extends LuceneTestCase {
     }
     
     w.forceMerge(1);
-    w.shutdown();
+    w.close();
     
     System.out.println("verifying...");
     System.out.flush();
diff --git lucene/core/src/test/org/apache/lucene/index/Test2BPositions.java lucene/core/src/test/org/apache/lucene/index/Test2BPositions.java
index 9145485..98dbaa5 100644
--- lucene/core/src/test/org/apache/lucene/index/Test2BPositions.java
+++ lucene/core/src/test/org/apache/lucene/index/Test2BPositions.java
@@ -28,12 +28,9 @@ import org.apache.lucene.document.TextField;
 import org.apache.lucene.store.BaseDirectoryWrapper;
 import org.apache.lucene.store.MockDirectoryWrapper;
 import org.apache.lucene.util.LuceneTestCase;
-import org.apache.lucene.util.TestUtil;
 import org.apache.lucene.util.TimeUnits;
-import org.apache.lucene.util.TestUtil;
 import org.apache.lucene.util.LuceneTestCase.Monster;
 import org.apache.lucene.util.LuceneTestCase.SuppressCodecs;
-import org.junit.Ignore;
 
 import com.carrotsearch.randomizedtesting.annotations.TimeoutSuite;
 
@@ -53,7 +50,7 @@ public class Test2BPositions extends LuceneTestCase {
     }
     
     IndexWriter w = new IndexWriter(dir,
-        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))
+        new IndexWriterConfig(new MockAnalyzer(random()))
         .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)
         .setRAMBufferSizeMB(256.0)
         .setMergeScheduler(new ConcurrentMergeScheduler())
@@ -80,7 +77,7 @@ public class Test2BPositions extends LuceneTestCase {
       }
     }
     w.forceMerge(1);
-    w.shutdown();
+    w.close();
     dir.close();
   }
   
diff --git lucene/core/src/test/org/apache/lucene/index/Test2BPostings.java lucene/core/src/test/org/apache/lucene/index/Test2BPostings.java
index 4ee5029..3152893 100644
--- lucene/core/src/test/org/apache/lucene/index/Test2BPostings.java
+++ lucene/core/src/test/org/apache/lucene/index/Test2BPostings.java
@@ -29,9 +29,7 @@ import org.apache.lucene.store.BaseDirectoryWrapper;
 import org.apache.lucene.store.MockDirectoryWrapper;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.LuceneTestCase.SuppressCodecs;
-import org.apache.lucene.util.TestUtil;
 import org.apache.lucene.util.TimeUnits;
-import org.apache.lucene.util.TestUtil;
 
 import com.carrotsearch.randomizedtesting.annotations.TimeoutSuite;
 
@@ -50,7 +48,7 @@ public class Test2BPostings extends LuceneTestCase {
       ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);
     }
 
-    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))
+    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))
         .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)
         .setRAMBufferSizeMB(256.0)
         .setMergeScheduler(new ConcurrentMergeScheduler())
@@ -80,7 +78,7 @@ public class Test2BPostings extends LuceneTestCase {
       }
     }
     w.forceMerge(1);
-    w.shutdown();
+    w.close();
     dir.close();
   }
   
diff --git lucene/core/src/test/org/apache/lucene/index/Test2BPostingsBytes.java lucene/core/src/test/org/apache/lucene/index/Test2BPostingsBytes.java
index 06321c1..a6b1d60 100644
--- lucene/core/src/test/org/apache/lucene/index/Test2BPostingsBytes.java
+++ lucene/core/src/test/org/apache/lucene/index/Test2BPostingsBytes.java
@@ -30,7 +30,6 @@ import org.apache.lucene.index.FieldInfo.IndexOptions;
 import org.apache.lucene.store.BaseDirectoryWrapper;
 import org.apache.lucene.store.MockDirectoryWrapper;
 import org.apache.lucene.util.LuceneTestCase;
-import org.apache.lucene.util.TestUtil;
 import org.apache.lucene.util.TimeUnits;
 import org.apache.lucene.util.LuceneTestCase.Monster;
 import org.apache.lucene.util.LuceneTestCase.SuppressCodecs;
@@ -54,7 +53,7 @@ public class Test2BPostingsBytes extends LuceneTestCase {
     }
     
     IndexWriter w = new IndexWriter(dir,
-        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))
+        new IndexWriterConfig(new MockAnalyzer(random()))
         .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)
         .setRAMBufferSizeMB(256.0)
         .setMergeScheduler(new ConcurrentMergeScheduler())
@@ -85,7 +84,7 @@ public class Test2BPostingsBytes extends LuceneTestCase {
       w.addDocument(doc);
     }
     w.forceMerge(1);
-    w.shutdown();
+    w.close();
     
     DirectoryReader oneThousand = DirectoryReader.open(dir);
     IndexReader subReaders[] = new IndexReader[1000];
@@ -96,10 +95,10 @@ public class Test2BPostingsBytes extends LuceneTestCase {
       ((MockDirectoryWrapper)dir2).setThrottling(MockDirectoryWrapper.Throttling.NEVER);
     }
     IndexWriter w2 = new IndexWriter(dir2,
-        new IndexWriterConfig(TEST_VERSION_CURRENT, null));
+        new IndexWriterConfig(null));
     w2.addIndexes(mr);
     w2.forceMerge(1);
-    w2.shutdown();
+    w2.close();
     oneThousand.close();
     
     DirectoryReader oneMillion = DirectoryReader.open(dir2);
@@ -111,10 +110,10 @@ public class Test2BPostingsBytes extends LuceneTestCase {
       ((MockDirectoryWrapper)dir3).setThrottling(MockDirectoryWrapper.Throttling.NEVER);
     }
     IndexWriter w3 = new IndexWriter(dir3,
-        new IndexWriterConfig(TEST_VERSION_CURRENT, null));
+        new IndexWriterConfig(null));
     w3.addIndexes(mr);
     w3.forceMerge(1);
-    w3.shutdown();
+    w3.close();
     oneMillion.close();
     
     dir.close();
diff --git lucene/core/src/test/org/apache/lucene/index/Test2BSortedDocValues.java lucene/core/src/test/org/apache/lucene/index/Test2BSortedDocValues.java
index b9f1696..20e2de7 100644
--- lucene/core/src/test/org/apache/lucene/index/Test2BSortedDocValues.java
+++ lucene/core/src/test/org/apache/lucene/index/Test2BSortedDocValues.java
@@ -17,8 +17,6 @@ package org.apache.lucene.index;
  * limitations under the License.
  */
 
-import java.util.Random;
-
 import org.apache.lucene.analysis.MockAnalyzer;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.SortedDocValuesField;
@@ -45,7 +43,7 @@ public class Test2BSortedDocValues extends LuceneTestCase {
     }
     
     IndexWriter w = new IndexWriter(dir,
-        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))
+        new IndexWriterConfig(new MockAnalyzer(random()))
         .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)
         .setRAMBufferSizeMB(256.0)
         .setMergeScheduler(new ConcurrentMergeScheduler())
@@ -69,7 +67,7 @@ public class Test2BSortedDocValues extends LuceneTestCase {
     }
     
     w.forceMerge(1);
-    w.shutdown();
+    w.close();
     
     System.out.println("verifying...");
     System.out.flush();
@@ -100,7 +98,7 @@ public class Test2BSortedDocValues extends LuceneTestCase {
     }
     
     IndexWriter w = new IndexWriter(dir,
-        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))
+        new IndexWriterConfig(new MockAnalyzer(random()))
         .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)
         .setRAMBufferSizeMB(256.0)
         .setMergeScheduler(new ConcurrentMergeScheduler())
@@ -126,7 +124,7 @@ public class Test2BSortedDocValues extends LuceneTestCase {
     }
     
     w.forceMerge(1);
-    w.shutdown();
+    w.close();
     
     System.out.println("verifying...");
     System.out.flush();
diff --git lucene/core/src/test/org/apache/lucene/index/Test2BTerms.java lucene/core/src/test/org/apache/lucene/index/Test2BTerms.java
index 0287dc4..819a9d1 100644
--- lucene/core/src/test/org/apache/lucene/index/Test2BTerms.java
+++ lucene/core/src/test/org/apache/lucene/index/Test2BTerms.java
@@ -181,7 +181,7 @@ public class Test2BTerms extends LuceneTestCase {
     if (true) {
 
       IndexWriter w = new IndexWriter(dir,
-                                      new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))
+                                      new IndexWriterConfig(new MockAnalyzer(random()))
                                       .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)
                                       .setRAMBufferSizeMB(256.0)
                                       .setMergeScheduler(new ConcurrentMergeScheduler())
@@ -218,7 +218,7 @@ public class Test2BTerms extends LuceneTestCase {
       System.out.println("TEST: full merge");
       w.forceMerge(1);
       System.out.println("TEST: close writer");
-      w.shutdown();
+      w.close();
     }
 
     System.out.println("TEST: open reader");
diff --git lucene/core/src/test/org/apache/lucene/index/Test4GBStoredFields.java lucene/core/src/test/org/apache/lucene/index/Test4GBStoredFields.java
index 825148f..7bde609 100644
--- lucene/core/src/test/org/apache/lucene/index/Test4GBStoredFields.java
+++ lucene/core/src/test/org/apache/lucene/index/Test4GBStoredFields.java
@@ -25,9 +25,7 @@ import org.apache.lucene.store.MMapDirectory;
 import org.apache.lucene.store.MockDirectoryWrapper;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.LuceneTestCase;
-import org.apache.lucene.util.TestUtil;
 import org.apache.lucene.util.TimeUnits;
-import org.apache.lucene.util.TestUtil;
 import org.apache.lucene.util.LuceneTestCase.SuppressCodecs;
 
 import com.carrotsearch.randomizedtesting.annotations.TimeoutSuite;
@@ -46,7 +44,7 @@ public class Test4GBStoredFields extends LuceneTestCase {
     dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);
 
     IndexWriter w = new IndexWriter(dir,
-        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))
+        new IndexWriterConfig(new MockAnalyzer(random()))
         .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)
         .setRAMBufferSizeMB(256.0)
         .setMergeScheduler(new ConcurrentMergeScheduler())
@@ -81,7 +79,7 @@ public class Test4GBStoredFields extends LuceneTestCase {
       }
     }
     w.forceMerge(1);
-    w.shutdown();
+    w.close();
     if (VERBOSE) {
       boolean found = false;
       for (String file : dir.listAll()) {
diff --git lucene/core/src/test/org/apache/lucene/index/TestAddIndexes.java lucene/core/src/test/org/apache/lucene/index/TestAddIndexes.java
index cb2c75b..06e42f5 100644
--- lucene/core/src/test/org/apache/lucene/index/TestAddIndexes.java
+++ lucene/core/src/test/org/apache/lucene/index/TestAddIndexes.java
@@ -64,7 +64,7 @@ public class TestAddIndexes extends LuceneTestCase {
     // add 100 documents
     addDocs(writer, 100);
     assertEquals(100, writer.maxDoc());
-    writer.shutdown();
+    writer.close();
     TestUtil.checkIndex(dir);
 
     writer = newWriter(
@@ -76,20 +76,20 @@ public class TestAddIndexes extends LuceneTestCase {
     // add 40 documents in separate files
     addDocs(writer, 40);
     assertEquals(40, writer.maxDoc());
-    writer.shutdown();
+    writer.close();
 
     writer = newWriter(aux2, newIndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));
     // add 50 documents in compound files
     addDocs2(writer, 50);
     assertEquals(50, writer.maxDoc());
-    writer.shutdown();
+    writer.close();
 
     // test doc count before segments are merged
     writer = newWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));
     assertEquals(100, writer.maxDoc());
     writer.addIndexes(aux, aux2);
     assertEquals(190, writer.maxDoc());
-    writer.shutdown();
+    writer.close();
     TestUtil.checkIndex(dir);
 
     // make sure the old index is correct
@@ -104,14 +104,14 @@ public class TestAddIndexes extends LuceneTestCase {
     // add 40 documents
     addDocs(writer, 40);
     assertEquals(40, writer.maxDoc());
-    writer.shutdown();
+    writer.close();
 
     // test doc count before segments are merged
     writer = newWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));
     assertEquals(190, writer.maxDoc());
     writer.addIndexes(aux3);
     assertEquals(230, writer.maxDoc());
-    writer.shutdown();
+    writer.close();
 
     // make sure the new index is correct
     verifyNumDocs(dir, 230);
@@ -123,7 +123,7 @@ public class TestAddIndexes extends LuceneTestCase {
     // now fully merge it.
     writer = newWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));
     writer.forceMerge(1);
-    writer.shutdown();
+    writer.close();
 
     // make sure the new index is correct
     verifyNumDocs(dir, 230);
@@ -136,13 +136,13 @@ public class TestAddIndexes extends LuceneTestCase {
     Directory aux4 = newDirectory();
     writer = newWriter(aux4, newIndexWriterConfig(new MockAnalyzer(random())));
     addDocs2(writer, 1);
-    writer.shutdown();
+    writer.close();
 
     writer = newWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));
     assertEquals(230, writer.maxDoc());
     writer.addIndexes(aux4);
     assertEquals(231, writer.maxDoc());
-    writer.shutdown();
+    writer.close();
 
     verifyNumDocs(dir, 231);
 
@@ -185,7 +185,7 @@ public class TestAddIndexes extends LuceneTestCase {
     verifyTermDocs(dir, new Term("content", "aaa"), 1030);
     verifyTermDocs(dir, new Term("content", "bbb"), 9);
 
-    writer.shutdown();
+    writer.close();
     dir.close();
     aux.close();
   }
@@ -223,7 +223,7 @@ public class TestAddIndexes extends LuceneTestCase {
     verifyTermDocs(dir, new Term("content", "aaa"), 1030);
     verifyTermDocs(dir, new Term("content", "bbb"), 9);
 
-    writer.shutdown();
+    writer.close();
     dir.close();
     aux.close();
   }
@@ -261,7 +261,7 @@ public class TestAddIndexes extends LuceneTestCase {
     verifyTermDocs(dir, new Term("content", "aaa"), 1030);
     verifyTermDocs(dir, new Term("content", "bbb"), 9);
 
-    writer.shutdown();
+    writer.close();
     dir.close();
     aux.close();
   }
@@ -279,7 +279,7 @@ public class TestAddIndexes extends LuceneTestCase {
     // add 100 documents
     addDocs(writer, 100);
     assertEquals(100, writer.maxDoc());
-    writer.shutdown();
+    writer.close();
 
     writer = newWriter(
         aux,
@@ -290,7 +290,7 @@ public class TestAddIndexes extends LuceneTestCase {
     );
     // add 140 documents in separate files
     addDocs(writer, 40);
-    writer.shutdown();
+    writer.close();
     writer = newWriter(
         aux,
         newIndexWriterConfig(new MockAnalyzer(random())).
@@ -299,7 +299,7 @@ public class TestAddIndexes extends LuceneTestCase {
             setMergePolicy(newLogMergePolicy(false))
     );
     addDocs(writer, 100);
-    writer.shutdown();
+    writer.close();
 
     writer = newWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));
     try {
@@ -310,7 +310,7 @@ public class TestAddIndexes extends LuceneTestCase {
     catch (IllegalArgumentException e) {
       assertEquals(100, writer.maxDoc());
     }
-    writer.shutdown();
+    writer.close();
 
     // make sure the index is correct
     verifyNumDocs(dir, 100);
@@ -341,7 +341,7 @@ public class TestAddIndexes extends LuceneTestCase {
     writer.addIndexes(aux);
     assertEquals(1040, writer.maxDoc());
     assertEquals(1000, writer.getDocCount(0));
-    writer.shutdown();
+    writer.close();
 
     // make sure the index is correct
     verifyNumDocs(dir, 1040);
@@ -370,7 +370,7 @@ public class TestAddIndexes extends LuceneTestCase {
     writer.addIndexes(aux);
     assertEquals(1032, writer.maxDoc());
     assertEquals(1000, writer.getDocCount(0));
-    writer.shutdown();
+    writer.close();
 
     // make sure the index is correct
     verifyNumDocs(dir, 1032);
@@ -398,7 +398,7 @@ public class TestAddIndexes extends LuceneTestCase {
     writer.addIndexes(aux, new MockDirectoryWrapper(random(), new RAMDirectory(aux, newIOContext(random()))));
     assertEquals(1060, writer.maxDoc());
     assertEquals(1000, writer.getDocCount(0));
-    writer.shutdown();
+    writer.close();
 
     // make sure the index is correct
     verifyNumDocs(dir, 1060);
@@ -415,13 +415,13 @@ public class TestAddIndexes extends LuceneTestCase {
 
     setUpDirs(dir, aux, true);
 
-    IndexWriterConfig dontMergeConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))
+    IndexWriterConfig dontMergeConfig = new IndexWriterConfig(new MockAnalyzer(random()))
       .setMergePolicy(NoMergePolicy.INSTANCE);
     IndexWriter writer = new IndexWriter(aux, dontMergeConfig);
     for (int i = 0; i < 20; i++) {
       writer.deleteDocuments(new Term("id", "" + i));
     }
-    writer.shutdown();
+    writer.close();
     IndexReader reader = DirectoryReader.open(aux);
     assertEquals(10, reader.numDocs());
     reader.close();
@@ -440,7 +440,7 @@ public class TestAddIndexes extends LuceneTestCase {
     writer.addIndexes(aux, new MockDirectoryWrapper(random(), new RAMDirectory(aux, newIOContext(random()))));
     assertEquals(1020, writer.maxDoc());
     assertEquals(1000, writer.getDocCount(0));
-    writer.shutdown();
+    writer.close();
     dir.close();
     aux.close();
   }
@@ -465,26 +465,26 @@ public class TestAddIndexes extends LuceneTestCase {
     writer.addIndexes(aux);
     assertEquals(30, writer.maxDoc());
     assertEquals(3, writer.getSegmentCount());
-    writer.shutdown();
+    writer.close();
 
-    IndexWriterConfig dontMergeConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))
+    IndexWriterConfig dontMergeConfig = new IndexWriterConfig(new MockAnalyzer(random()))
       .setMergePolicy(NoMergePolicy.INSTANCE);
     writer = new IndexWriter(aux, dontMergeConfig);
     for (int i = 0; i < 27; i++) {
       writer.deleteDocuments(new Term("id", "" + i));
     }
-    writer.shutdown();
+    writer.close();
     IndexReader reader = DirectoryReader.open(aux);
     assertEquals(3, reader.numDocs());
     reader.close();
 
-    dontMergeConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))
+    dontMergeConfig = new IndexWriterConfig(new MockAnalyzer(random()))
     .setMergePolicy(NoMergePolicy.INSTANCE);
     writer = new IndexWriter(aux2, dontMergeConfig);
     for (int i = 0; i < 8; i++) {
       writer.deleteDocuments(new Term("id", "" + i));
     }
-    writer.shutdown();
+    writer.close();
     reader = DirectoryReader.open(aux2);
     assertEquals(22, reader.numDocs());
     reader.close();
@@ -500,7 +500,7 @@ public class TestAddIndexes extends LuceneTestCase {
     writer.addIndexes(aux, aux2);
     assertEquals(1040, writer.maxDoc());
     assertEquals(1000, writer.getDocCount(0));
-    writer.shutdown();
+    writer.close();
     dir.close();
     aux.close();
     aux2.close();
@@ -563,7 +563,7 @@ public class TestAddIndexes extends LuceneTestCase {
     }
     assertEquals(1000, writer.maxDoc());
     assertEquals(1, writer.getSegmentCount());
-    writer.shutdown();
+    writer.close();
 
     writer = newWriter(
         aux,
@@ -579,7 +579,7 @@ public class TestAddIndexes extends LuceneTestCase {
       } else {
         addDocs(writer, 10);
       }
-      writer.shutdown();
+      writer.close();
       writer = newWriter(
           aux,
           newIndexWriterConfig(new MockAnalyzer(random())).
@@ -590,7 +590,7 @@ public class TestAddIndexes extends LuceneTestCase {
     }
     assertEquals(30, writer.maxDoc());
     assertEquals(3, writer.getSegmentCount());
-    writer.shutdown();
+    writer.close();
   }
 
   // LUCENE-1270
@@ -622,7 +622,7 @@ public class TestAddIndexes extends LuceneTestCase {
     doc2.add(newField("content", "aaa bbb ccc ddd eee fff ggg hhh iii", customType2));
     for(int i=0;i<10;i++)
       writer.addDocument(doc2);
-    writer.shutdown();
+    writer.close();
 
     Directory dir2 = newDirectory();
     lmp = new LogByteSizeMergePolicy();
@@ -632,7 +632,7 @@ public class TestAddIndexes extends LuceneTestCase {
     writer = new IndexWriter(dir2, newIndexWriterConfig(new MockAnalyzer(random()))
         .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(lmp));
     writer.addIndexes(dir);
-    writer.shutdown();
+    writer.close();
     dir.close();
     dir2.close();
   }
@@ -661,15 +661,14 @@ public class TestAddIndexes extends LuceneTestCase {
     public RunAddIndexesThreads(int numCopy) throws Throwable {
       NUM_COPY = numCopy;
       dir = new MockDirectoryWrapper(random(), new RAMDirectory());
-      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(
-          TEST_VERSION_CURRENT, new MockAnalyzer(random()))
+      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random()))
           .setMaxBufferedDocs(2));
       for (int i = 0; i < NUM_INIT_DOCS; i++)
         addDoc(writer);
-      writer.shutdown();
+      writer.close();
 
       dir2 = newDirectory();
-      writer2 = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));
+      writer2 = new IndexWriter(dir2, new IndexWriterConfig(new MockAnalyzer(random())));
       writer2.commit();
       
 
@@ -719,7 +718,7 @@ public class TestAddIndexes extends LuceneTestCase {
       if (doWait == false) {
         writer2.abortMerges();
       }
-      //writer2.shutdown();
+      //writer2.close();
       writer2.rollback();
     }
 
@@ -976,10 +975,10 @@ public class TestAddIndexes extends LuceneTestCase {
       Document doc = new Document();
       doc.add(new StringField("id", "myid", Field.Store.NO));
       writer.addDocument(doc);
-      writer.shutdown();
+      writer.close();
     }
 
-    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));
+    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));
     IndexWriter writer = new IndexWriter(dirs[0], conf);
 
     // Now delete the document
@@ -992,7 +991,7 @@ public class TestAddIndexes extends LuceneTestCase {
     }
     writer.commit();
     assertEquals("Documents from the incoming index should not have been deleted", 1, writer.numDocs());
-    writer.shutdown();
+    writer.close();
 
     for (Directory dir : dirs) {
       dir.close();
@@ -1025,7 +1024,7 @@ public class TestAddIndexes extends LuceneTestCase {
     addDocsWithID(writer, 100, 0);
     assertEquals(100, writer.maxDoc());
     writer.commit();
-    writer.shutdown();
+    writer.close();
     TestUtil.checkIndex(dir);
 
     writer = newWriter(
@@ -1040,7 +1039,7 @@ public class TestAddIndexes extends LuceneTestCase {
     addDocs(writer, 40);
     assertEquals(40, writer.maxDoc());
     writer.commit();
-    writer.shutdown();
+    writer.close();
 
     writer = newWriter(
         aux2,
@@ -1052,7 +1051,7 @@ public class TestAddIndexes extends LuceneTestCase {
     addDocs2(writer, 50);
     assertEquals(50, writer.maxDoc());
     writer.commit();
-    writer.shutdown();
+    writer.close();
 
     // test doc count before segments are merged
     writer = newWriter(
@@ -1064,7 +1063,7 @@ public class TestAddIndexes extends LuceneTestCase {
     assertEquals(100, writer.maxDoc());
     writer.addIndexes(aux, aux2);
     assertEquals(190, writer.maxDoc());
-    writer.shutdown();
+    writer.close();
 
     dir.close();
     aux.close();
@@ -1094,26 +1093,26 @@ public class TestAddIndexes extends LuceneTestCase {
     Directory[] dirs = new Directory[2];
     for (int i = 0; i < dirs.length; i++) {
       dirs[i] = new RAMDirectory();
-      IndexWriter w = new IndexWriter(dirs[i], new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));
+      IndexWriter w = new IndexWriter(dirs[i], new IndexWriterConfig(new MockAnalyzer(random())));
       Document d = new Document();
       FieldType customType = new FieldType(TextField.TYPE_STORED);
       customType.setStoreTermVectors(true);
       d.add(new Field("c", "v", customType));
       w.addDocument(d);
-      w.shutdown();
+      w.close();
     }
     
     IndexReader[] readers = new IndexReader[] { DirectoryReader.open(dirs[0]), DirectoryReader.open(dirs[1]) };
     
     Directory dir = new MockDirectoryWrapper(random(), new RAMDirectory());
-    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy(true));
+    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy(true));
     MergePolicy lmp = conf.getMergePolicy();
     // Force creation of CFS:
     lmp.setNoCFSRatio(1.0);
     lmp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);
     IndexWriter w3 = new IndexWriter(dir, conf);
     w3.addIndexes(readers);
-    w3.shutdown();
+    w3.close();
     // we should now see segments_X,
     // segments.gen,_Y.cfs,_Y.cfe, _Z.si
     assertEquals("Only one compound segment should exist, but got: " + Arrays.toString(dir.listAll()), 5, dir.listAll().length);
@@ -1143,7 +1142,7 @@ public class TestAddIndexes extends LuceneTestCase {
       customType.setIndexed(true); 
       doc.add(newField("foo", "bar", customType));
       w.addDocument(doc);
-      w.shutdown();
+      w.close();
     }
 
     {
@@ -1157,7 +1156,7 @@ public class TestAddIndexes extends LuceneTestCase {
       } catch (IllegalArgumentException ex) {
         // expected
       }
-      w.shutdown();
+      w.close();
       IndexReader open = DirectoryReader.open(dir);
       assertEquals(0, open.numDocs());
       open.close();
@@ -1182,7 +1181,7 @@ public class TestAddIndexes extends LuceneTestCase {
     doc.add(newStringField("id", "1", Field.Store.YES));
     w.addDocument(doc);
     IndexReader r1 = w.getReader();
-    w.shutdown();
+    w.close();
 
     Directory d2 = newDirectory();
     w = new RandomIndexWriter(random(), d2);
@@ -1191,7 +1190,7 @@ public class TestAddIndexes extends LuceneTestCase {
     doc.add(newStringField("id", "2", Field.Store.YES));
     w.addDocument(doc);
     IndexReader r2 = w.getReader();
-    w.shutdown();
+    w.close();
 
     Directory d3 = newDirectory();
     w = new RandomIndexWriter(random(), d3);
@@ -1202,7 +1201,7 @@ public class TestAddIndexes extends LuceneTestCase {
     d2.close();
 
     IndexReader r3 = w.getReader();
-    w.shutdown();
+    w.close();
     assertEquals(2, r3.numDocs());
     for(int docID=0;docID<2;docID++) {
       StoredDocument d = r3.document(docID);
@@ -1221,7 +1220,7 @@ public class TestAddIndexes extends LuceneTestCase {
     RandomIndexWriter w = new RandomIndexWriter(random(), d1);
     MultiReader empty = new MultiReader();
     w.addIndexes(empty);
-    w.shutdown();
+    w.close();
     DirectoryReader dr = DirectoryReader.open(d1);
     for (AtomicReaderContext ctx : dr.leaves()) {
       assertTrue("empty segments should be dropped by addIndexes", ctx.reader().maxDoc() > 0);
@@ -1239,11 +1238,11 @@ public class TestAddIndexes extends LuceneTestCase {
     RandomIndexWriter w = new RandomIndexWriter(random(), src);
     w.addDocument(new Document());
     IndexReader allDeletedReader = new AllDeletedFilterReader(w.getReader().leaves().get(0).reader());
-    w.shutdown();
+    w.close();
     
     w = new RandomIndexWriter(random(), dest);
     w.addIndexes(allDeletedReader);
-    w.shutdown();
+    w.close();
     DirectoryReader dr = DirectoryReader.open(src);
     for (AtomicReaderContext ctx : dr.leaves()) {
       assertTrue("empty segments should be dropped by addIndexes", ctx.reader().maxDoc() > 0);
@@ -1275,8 +1274,8 @@ public class TestAddIndexes extends LuceneTestCase {
       // expected
     }
 
-    w1.shutdown();
-    w2.shutdown();
+    w1.close();
+    w2.close();
     IOUtils.close(src, dest);
   }
 }
diff --git lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveChecksumFooter.java lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveChecksumFooter.java
index 00a6917..b8ddf8a 100644
--- lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveChecksumFooter.java
+++ lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveChecksumFooter.java
@@ -60,7 +60,7 @@ public class TestAllFilesHaveChecksumFooter extends LuceneTestCase {
         riw.deleteDocuments(new Term("id", Integer.toString(i)));
       }
     }
-    riw.shutdown();
+    riw.close();
     checkHeaders(dir);
     dir.close();
   }
diff --git lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader.java lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader.java
index cb3192b..a93df49 100644
--- lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader.java
+++ lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader.java
@@ -61,7 +61,7 @@ public class TestAllFilesHaveCodecHeader extends LuceneTestCase {
       //  riw.deleteDocuments(new Term("id", Integer.toString(i)));
       // }
     }
-    riw.shutdown();
+    riw.close();
     checkHeaders(dir);
     dir.close();
   }
diff --git lucene/core/src/test/org/apache/lucene/index/TestAtomicUpdate.java lucene/core/src/test/org/apache/lucene/index/TestAtomicUpdate.java
index 4e08d10..e887e85 100644
--- lucene/core/src/test/org/apache/lucene/index/TestAtomicUpdate.java
+++ lucene/core/src/test/org/apache/lucene/index/TestAtomicUpdate.java
@@ -108,8 +108,7 @@ public class TestAtomicUpdate extends LuceneTestCase {
 
     TimedThread[] threads = new TimedThread[4];
 
-    IndexWriterConfig conf = new IndexWriterConfig(
-        TEST_VERSION_CURRENT, new MockAnalyzer(random()))
+    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()))
         .setMaxBufferedDocs(7);
     ((TieredMergePolicy) conf.getMergePolicy()).setMaxMergeAtOnce(3);
     IndexWriter writer = RandomIndexWriter.mockIndexWriter(directory, conf, random());
@@ -151,7 +150,7 @@ public class TestAtomicUpdate extends LuceneTestCase {
     searcherThread1.join();
     searcherThread2.join();
 
-    writer.shutdown();
+    writer.close();
 
     assertTrue("hit unexpected exception in indexer", !indexerThread.failed);
     assertTrue("hit unexpected exception in indexer2", !indexerThread2.failed);
diff --git lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility.java lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility.java
index 4858931..c209e3a 100644
--- lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility.java
+++ lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility.java
@@ -146,7 +146,7 @@ public class TestBackwardsCompatibility extends LuceneTestCase {
     analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));
 
     // TODO: remove randomness
-    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer)
+    IndexWriterConfig conf = new IndexWriterConfig(analyzer)
       .setMergePolicy(mp);
     conf.setCodec(Codec.forName("Lucene40"));
     IndexWriter writer = new IndexWriter(dir, conf);
@@ -154,7 +154,7 @@ public class TestBackwardsCompatibility extends LuceneTestCase {
     for(int i=0;i<50;i++) {
       writer.addDocument(docs.nextDoc());
     }
-    writer.shutdown();
+    writer.close();
     dir.close();
 
     // Gives you time to copy the index out!: (there is also
@@ -182,7 +182,7 @@ public class TestBackwardsCompatibility extends LuceneTestCase {
     TestUtil.rm(indexDir);
     Directory dir = newFSDirectory(indexDir);
     
-    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))
+    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()))
       .setUseCompoundFile(false).setMergePolicy(NoMergePolicy.INSTANCE);
     IndexWriter writer = new IndexWriter(dir, conf);
     // create an index w/ few doc-values fields, some with updates and some without
@@ -217,7 +217,7 @@ public class TestBackwardsCompatibility extends LuceneTestCase {
     updateNumeric(writer, "22", "ndv1", "ndv1_c", 200L); // update the field again
     writer.commit();
     
-    writer.shutdown();
+    writer.close();
     dir.close();
   }*/
 
@@ -273,9 +273,8 @@ public class TestBackwardsCompatibility extends LuceneTestCase {
     final boolean streamType = random().nextBoolean();
     final int choice = TestUtil.nextInt(random(), 0, 2);
     switch (choice) {
-      case 0: return new IndexUpgrader(dir, TEST_VERSION_CURRENT);
-      case 1: return new IndexUpgrader(dir, TEST_VERSION_CURRENT, 
-                                       streamType ? null : InfoStream.NO_OUTPUT, false);
+      case 0: return new IndexUpgrader(dir);
+      case 1: return new IndexUpgrader(dir, streamType ? null : InfoStream.NO_OUTPUT, false);
       case 2: return new IndexUpgrader(dir, newIndexWriterConfig(null), false);
       default: fail("case statement didn't get updated when random bounds changed");
     }
@@ -330,7 +329,7 @@ public class TestBackwardsCompatibility extends LuceneTestCase {
       }
 
       try {
-        writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));
+        writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())).setCommitOnClose(false));
         fail("IndexWriter creation should not pass for "+unsupportedNames[i]);
       } catch (IndexFormatTooOldException e) {
         // pass
@@ -347,7 +346,11 @@ public class TestBackwardsCompatibility extends LuceneTestCase {
         // IndexFormatTooOldException, and we don't want to mask the fail()
         // above, so close without waiting for merges.
         if (writer != null) {
-          writer.shutdown(false);
+          try {
+            writer.commit();
+          } finally {
+            writer.close();
+          }
         }
         writer = null;
       }
@@ -370,10 +373,9 @@ public class TestBackwardsCompatibility extends LuceneTestCase {
         System.out.println("\nTEST: index=" + name);
       }
       Directory dir = newDirectory(oldIndexDirs.get(name));
-      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(
-          TEST_VERSION_CURRENT, new MockAnalyzer(random())));
+      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));
       w.forceMerge(1);
-      w.shutdown();
+      w.close();
       
       dir.close();
     }
@@ -390,7 +392,7 @@ public class TestBackwardsCompatibility extends LuceneTestCase {
       if (VERBOSE) {
         System.out.println("\nTEST: done adding indices; now close");
       }
-      w.shutdown();
+      w.close();
       
       targetDir.close();
     }
@@ -403,7 +405,7 @@ public class TestBackwardsCompatibility extends LuceneTestCase {
       Directory targetDir = newDirectory();
       IndexWriter w = new IndexWriter(targetDir, newIndexWriterConfig(new MockAnalyzer(random())));
       w.addIndexes(reader);
-      w.shutdown();
+      w.close();
       reader.close();
             
       targetDir.close();
@@ -617,7 +619,7 @@ public class TestBackwardsCompatibility extends LuceneTestCase {
       expected = 45;
     }
     assertEquals("wrong doc count", expected, writer.numDocs());
-    writer.shutdown();
+    writer.close();
 
     // make sure searching sees right # hits
     IndexReader reader = DirectoryReader.open(dir);
@@ -633,7 +635,7 @@ public class TestBackwardsCompatibility extends LuceneTestCase {
                                     .setOpenMode(OpenMode.APPEND)
                                     .setMergePolicy(newLogMergePolicy()));
     writer.forceMerge(1);
-    writer.shutdown();
+    writer.close();
 
     reader = DirectoryReader.open(dir);
     searcher = newSearcher(reader);
@@ -659,7 +661,7 @@ public class TestBackwardsCompatibility extends LuceneTestCase {
     IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))
                                                 .setOpenMode(OpenMode.APPEND));
     writer.forceMerge(1);
-    writer.shutdown();
+    writer.close();
 
     reader = DirectoryReader.open(dir);
     searcher = newSearcher(reader);
@@ -678,7 +680,7 @@ public class TestBackwardsCompatibility extends LuceneTestCase {
     mp.setNoCFSRatio(doCFS ? 1.0 : 0.0);
     mp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);
     // TODO: remove randomness
-    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))
+    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()))
       .setMaxBufferedDocs(10).setMergePolicy(mp);
     IndexWriter writer = new IndexWriter(dir, conf);
     
@@ -689,23 +691,23 @@ public class TestBackwardsCompatibility extends LuceneTestCase {
     if (fullyMerged) {
       writer.forceMerge(1);
     }
-    writer.shutdown();
+    writer.close();
 
     if (!fullyMerged) {
       // open fresh writer so we get no prx file in the added segment
       mp = new LogByteSizeMergePolicy();
       mp.setNoCFSRatio(doCFS ? 1.0 : 0.0);
       // TODO: remove randomness
-      conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))
+      conf = new IndexWriterConfig(new MockAnalyzer(random()))
         .setMaxBufferedDocs(10).setMergePolicy(mp);
       writer = new IndexWriter(dir, conf);
       addNoProxDoc(writer);
-      writer.shutdown();
+      writer.close();
 
       writer = new IndexWriter(dir, conf.setMergePolicy(NoMergePolicy.INSTANCE));
       Term searchTerm = new Term("id", "7");
       writer.deleteDocuments(searchTerm);
-      writer.shutdown();
+      writer.close();
     }
     
     dir.close();
@@ -842,7 +844,7 @@ public class TestBackwardsCompatibility extends LuceneTestCase {
     Directory currentDir = newDirectory();
     RandomIndexWriter riw = new RandomIndexWriter(random(), currentDir);
     riw.addDocument(new Document());
-    riw.shutdown();
+    riw.close();
     DirectoryReader ir = DirectoryReader.open(currentDir);
     SegmentReader air = (SegmentReader)ir.leaves().get(0).reader();
     String currentVersion = air.getSegmentInfo().info.getVersion();
@@ -1015,24 +1017,32 @@ public class TestBackwardsCompatibility extends LuceneTestCase {
       for (int i = 0; i < 3; i++) {
         // only use Log- or TieredMergePolicy, to make document addition predictable and not suddenly merge:
         MergePolicy mp = random().nextBoolean() ? newLogMergePolicy() : newTieredMergePolicy();
-        IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))
-          .setMergePolicy(mp);
+        IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))
+          .setMergePolicy(mp).setCommitOnClose(false);
         IndexWriter w = new IndexWriter(ramDir, iwc);
         // add few more docs:
         for(int j = 0; j < RANDOM_MULTIPLIER * random().nextInt(30); j++) {
           addDoc(w, id++);
         }
-        w.shutdown(false);
+        try {
+          w.commit();
+        } finally {
+          w.close();
+        }
       }
       
       // add dummy segments (which are all in current
       // version) to single segment index
       MergePolicy mp = random().nextBoolean() ? newLogMergePolicy() : newTieredMergePolicy();
-      IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, null)
-        .setMergePolicy(mp);
+      IndexWriterConfig iwc = new IndexWriterConfig(null)
+        .setMergePolicy(mp).setCommitOnClose(false);
       IndexWriter w = new IndexWriter(dir, iwc);
       w.addIndexes(ramDir);
-      w.shutdown(false);
+      try {
+        w.commit();
+      } finally {
+        w.close();
+      }
       
       // determine count of segments in modified index
       final int origSegCount = getNumberOfSegments(dir);
@@ -1096,7 +1106,7 @@ public class TestBackwardsCompatibility extends LuceneTestCase {
     verifyDocValues(dir);
     
     // update fields and verify index
-    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));
+    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));
     IndexWriter writer = new IndexWriter(dir, conf);
     updateNumeric(writer, "1", "ndv1", "ndv1_c", 300L);
     updateNumeric(writer, "1", "ndv2", "ndv2_c", 300L);
@@ -1110,7 +1120,7 @@ public class TestBackwardsCompatibility extends LuceneTestCase {
     writer.commit();
     verifyDocValues(dir);
     
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
   
diff --git lucene/core/src/test/org/apache/lucene/index/TestBagOfPositions.java lucene/core/src/test/org/apache/lucene/index/TestBagOfPositions.java
index d057130..5fe850d 100644
--- lucene/core/src/test/org/apache/lucene/index/TestBagOfPositions.java
+++ lucene/core/src/test/org/apache/lucene/index/TestBagOfPositions.java
@@ -48,7 +48,7 @@ public class TestBagOfPositions extends LuceneTestCase {
     final int maxTermsPerDoc = TestUtil.nextInt(random(), 10, 20);
     boolean isSimpleText = "SimpleText".equals(TestUtil.getPostingsFormat("field"));
 
-    IndexWriterConfig iwc = newIndexWriterConfig(random(), TEST_VERSION_CURRENT, new MockAnalyzer(random()));
+    IndexWriterConfig iwc = newIndexWriterConfig(random(), new MockAnalyzer(random()));
 
     if ((isSimpleText || iwc.getMergePolicy() instanceof MockRandomMergePolicy) && (TEST_NIGHTLY || RANDOM_MULTIPLIER > 1)) {
       // Otherwise test can take way too long (> 2 hours)
@@ -148,7 +148,7 @@ public class TestBagOfPositions extends LuceneTestCase {
       // from a docsAndPositionsEnum.
     }
     ir.close();
-    iw.shutdown();
+    iw.close();
     dir.close();
   }
 }
diff --git lucene/core/src/test/org/apache/lucene/index/TestBagOfPostings.java lucene/core/src/test/org/apache/lucene/index/TestBagOfPostings.java
index adc415d..cb0e8db 100644
--- lucene/core/src/test/org/apache/lucene/index/TestBagOfPostings.java
+++ lucene/core/src/test/org/apache/lucene/index/TestBagOfPostings.java
@@ -33,7 +33,6 @@ import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.LuceneTestCase.SuppressCodecs;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.TestUtil;
-import org.apache.lucene.util.TestUtil;
 
 /**
  * Simple test that adds numeric terms, where each term has the 
@@ -48,7 +47,7 @@ public class TestBagOfPostings extends LuceneTestCase {
 
     boolean isSimpleText = "SimpleText".equals(TestUtil.getPostingsFormat("field"));
 
-    IndexWriterConfig iwc = newIndexWriterConfig(random(), TEST_VERSION_CURRENT, new MockAnalyzer(random()));
+    IndexWriterConfig iwc = newIndexWriterConfig(random(), new MockAnalyzer(random()));
 
     if ((isSimpleText || iwc.getMergePolicy() instanceof MockRandomMergePolicy) && (TEST_NIGHTLY || RANDOM_MULTIPLIER > 1)) {
       // Otherwise test can take way too long (> 2 hours)
@@ -140,7 +139,7 @@ public class TestBagOfPostings extends LuceneTestCase {
       // from a docsAndPositionsEnum.
     }
     ir.close();
-    iw.shutdown();
+    iw.close();
     dir.close();
   }
 }
diff --git lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates.java lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates.java
index 2f83c1e..e24eb44 100644
--- lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates.java
+++ lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates.java
@@ -15,7 +15,6 @@ import org.apache.lucene.codecs.asserting.AssertingDocValuesFormat;
 import org.apache.lucene.codecs.lucene40.Lucene40RWCodec;
 import org.apache.lucene.codecs.lucene41.Lucene41RWCodec;
 import org.apache.lucene.codecs.lucene42.Lucene42RWCodec;
-import org.apache.lucene.codecs.lucene45.Lucene45DocValuesFormat;
 import org.apache.lucene.codecs.lucene45.Lucene45RWCodec;
 import org.apache.lucene.codecs.lucene49.Lucene49Codec;
 import org.apache.lucene.codecs.lucene49.Lucene49DocValuesFormat;
@@ -109,7 +108,7 @@ public class TestBinaryDocValuesUpdates extends LuceneTestCase {
     writer.getConfig().setRAMBufferSizeMB(1000d);
     writer.updateBinaryDocValue(new Term("id", "doc-2"), "val", toBytes(7));
     assertEquals(4, writer.getFlushDeletesCount());
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
   
@@ -129,11 +128,11 @@ public class TestBinaryDocValuesUpdates extends LuceneTestCase {
     
     final DirectoryReader reader;
     if (random().nextBoolean()) { // not NRT
-      writer.shutdown();
+      writer.close();
       reader = DirectoryReader.open(dir);
     } else { // NRT
       reader = DirectoryReader.open(writer, true);
-      writer.shutdown();
+      writer.close();
     }
     
     assertEquals(1, reader.leaves().size());
@@ -171,11 +170,11 @@ public class TestBinaryDocValuesUpdates extends LuceneTestCase {
     
     final DirectoryReader reader;
     if (random().nextBoolean()) { // not NRT
-      writer.shutdown();
+      writer.close();
       reader = DirectoryReader.open(dir);
     } else { // NRT
       reader = DirectoryReader.open(writer, true);
-      writer.shutdown();
+      writer.close();
     }
     
     for (AtomicReaderContext context : reader.leaves()) {
@@ -225,7 +224,7 @@ public class TestBinaryDocValuesUpdates extends LuceneTestCase {
     assertEquals(1, getValue(bdv1, 0));
     assertEquals(10, getValue(bdv2, 0));
 
-    writer.shutdown();
+    writer.close();
     IOUtils.close(reader1, reader2, dir);
   }
   
@@ -254,11 +253,11 @@ public class TestBinaryDocValuesUpdates extends LuceneTestCase {
     
     final DirectoryReader reader;
     if (random().nextBoolean()) { // not NRT
-      writer.shutdown();
+      writer.close();
       reader = DirectoryReader.open(dir);
     } else { // NRT
       reader = DirectoryReader.open(writer, true);
-      writer.shutdown();
+      writer.close();
     }
     
     AtomicReader slow = SlowCompositeReaderWrapper.wrap(reader);
@@ -298,11 +297,11 @@ public class TestBinaryDocValuesUpdates extends LuceneTestCase {
     
     final DirectoryReader reader;
     if (random().nextBoolean()) { // not NRT
-      writer.shutdown();
+      writer.close();
       reader = DirectoryReader.open(dir);
     } else { // NRT
       reader = DirectoryReader.open(writer, true);
-      writer.shutdown();
+      writer.close();
     }
     
     AtomicReader r = reader.leaves().get(0).reader();
@@ -332,11 +331,11 @@ public class TestBinaryDocValuesUpdates extends LuceneTestCase {
     
     final DirectoryReader reader;
     if (random().nextBoolean()) { // not NRT
-      writer.shutdown();
+      writer.close();
       reader = DirectoryReader.open(dir);
     } else { // NRT
       reader = DirectoryReader.open(writer, true);
-      writer.shutdown();
+      writer.close();
     }
     
     AtomicReader r = reader.leaves().get(0).reader();
@@ -367,7 +366,7 @@ public class TestBinaryDocValuesUpdates extends LuceneTestCase {
     
     // update all docs' bdv field
     writer.updateBinaryDocValue(new Term("dvUpdateKey", "dv"), "bdv", toBytes(17L));
-    writer.shutdown();
+    writer.close();
     
     final DirectoryReader reader = DirectoryReader.open(dir);
     AtomicReader r = reader.leaves().get(0).reader();
@@ -413,7 +412,7 @@ public class TestBinaryDocValuesUpdates extends LuceneTestCase {
     
     // update all docs' bdv1 field
     writer.updateBinaryDocValue(new Term("dvUpdateKey", "dv"), "bdv1", toBytes(17L));
-    writer.shutdown();
+    writer.close();
     
     final DirectoryReader reader = DirectoryReader.open(dir);
     AtomicReader r = reader.leaves().get(0).reader();
@@ -446,7 +445,7 @@ public class TestBinaryDocValuesUpdates extends LuceneTestCase {
     
     // update all docs' bdv field
     writer.updateBinaryDocValue(new Term("dvUpdateKey", "dv"), "bdv", toBytes(17L));
-    writer.shutdown();
+    writer.close();
     
     final DirectoryReader reader = DirectoryReader.open(dir);
     AtomicReader r = reader.leaves().get(0).reader();
@@ -487,7 +486,7 @@ public class TestBinaryDocValuesUpdates extends LuceneTestCase {
       // ok
     }
     
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
   
@@ -511,7 +510,7 @@ public class TestBinaryDocValuesUpdates extends LuceneTestCase {
     writer.addDocument(doc); // in-memory document
     
     writer.updateBinaryDocValue(new Term("key", "doc"), "bdv", toBytes(17L));
-    writer.shutdown();
+    writer.close();
     
     final DirectoryReader reader = DirectoryReader.open(dir);
     
@@ -542,7 +541,7 @@ public class TestBinaryDocValuesUpdates extends LuceneTestCase {
     
     writer.updateBinaryDocValue(new Term("key", "doc"), "bdv", toBytes(17L)); // update existing field
     writer.updateBinaryDocValue(new Term("key", "doc"), "bdv", toBytes(3L)); // update existing field 2nd time in this commit
-    writer.shutdown();
+    writer.close();
     
     final DirectoryReader reader = DirectoryReader.open(dir);
     final AtomicReader r = SlowCompositeReaderWrapper.wrap(reader);
@@ -584,7 +583,7 @@ public class TestBinaryDocValuesUpdates extends LuceneTestCase {
       if (random.nextDouble() < 0.4) {
         writer.commit();
       } else if (random.nextDouble() < 0.1) {
-        writer.shutdown();
+        writer.close();
         conf = newIndexWriterConfig(new MockAnalyzer(random));
         writer = new IndexWriter(dir, conf);
       }
@@ -621,7 +620,7 @@ public class TestBinaryDocValuesUpdates extends LuceneTestCase {
       reader.close();
     }
     
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
   
@@ -641,7 +640,7 @@ public class TestBinaryDocValuesUpdates extends LuceneTestCase {
     
     writer.updateBinaryDocValue(new Term("k1", "v1"), "bdv", toBytes(17L));
     writer.updateBinaryDocValue(new Term("k2", "v2"), "bdv", toBytes(3L));
-    writer.shutdown();
+    writer.close();
     
     final DirectoryReader reader = DirectoryReader.open(dir);
     final AtomicReader r = SlowCompositeReaderWrapper.wrap(reader);
@@ -739,7 +738,7 @@ public class TestBinaryDocValuesUpdates extends LuceneTestCase {
 //      System.out.println();
     }
 
-    writer.shutdown();
+    writer.close();
     IOUtils.close(reader, dir);
   }
   
@@ -747,7 +746,7 @@ public class TestBinaryDocValuesUpdates extends LuceneTestCase {
     Directory dir = newDirectory();
     IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));
     // prevent merges, otherwise by the time updates are applied
-    // (writer.shutdown()), the segments might have merged and that update becomes
+    // (writer.close()), the segments might have merged and that update becomes
     // legit.
     conf.setMergePolicy(NoMergePolicy.INSTANCE);
     IndexWriter writer = new IndexWriter(dir, conf);
@@ -778,7 +777,7 @@ public class TestBinaryDocValuesUpdates extends LuceneTestCase {
     // update document in the second segment - field should be added and we should
     // be able to handle the other document correctly (e.g. no NPE)
     writer.updateBinaryDocValue(new Term("id", "doc1"), "bdv", toBytes(5L));
-    writer.shutdown();
+    writer.close();
 
     DirectoryReader reader = DirectoryReader.open(dir);
     for (AtomicReaderContext context : reader.leaves()) {
@@ -801,7 +800,7 @@ public class TestBinaryDocValuesUpdates extends LuceneTestCase {
     Directory dir = newDirectory();
     IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));
     // prevent merges, otherwise by the time updates are applied
-    // (writer.shutdown()), the segments might have merged and that update becomes
+    // (writer.close()), the segments might have merged and that update becomes
     // legit.
     conf.setMergePolicy(NoMergePolicy.INSTANCE);
     IndexWriter writer = new IndexWriter(dir, conf);
@@ -823,7 +822,7 @@ public class TestBinaryDocValuesUpdates extends LuceneTestCase {
     
     // update document in the second segment
     writer.updateBinaryDocValue(new Term("id", "doc1"), "bdv", toBytes(5L));
-    writer.shutdown();
+    writer.close();
 
     DirectoryReader reader = DirectoryReader.open(dir);
     for (AtomicReaderContext context : reader.leaves()) {
@@ -851,7 +850,7 @@ public class TestBinaryDocValuesUpdates extends LuceneTestCase {
     writer.addDocument(doc);
     writer.commit();
     writer.updateBinaryDocValue(new Term("f", "mock-value"), "f", toBytes(17L));
-    writer.shutdown();
+    writer.close();
     
     DirectoryReader r = DirectoryReader.open(dir);
     BinaryDocValues bdv = r.leaves().get(0).reader().getBinaryDocValues("f");
@@ -875,14 +874,14 @@ public class TestBinaryDocValuesUpdates extends LuceneTestCase {
     doc.add(new StringField("id", "doc", Store.NO));
     doc.add(new BinaryDocValuesField("f", toBytes(5L)));
     writer.addDocument(doc);
-    writer.shutdown();
+    writer.close();
     
     conf = newIndexWriterConfig(new MockAnalyzer(random()));
     writer = new IndexWriter(dir, conf);
     writer.updateBinaryDocValue(new Term("id", "doc"), "f", toBytes(4L));
     OLD_FORMAT_IMPERSONATION_IS_ACTIVE = false;
     try {
-      writer.shutdown();
+      writer.close();
       fail("should not have succeeded to update a segment written with an old Codec");
     } catch (UnsupportedOperationException e) {
       writer.rollback(); 
@@ -996,7 +995,7 @@ public class TestBinaryDocValuesUpdates extends LuceneTestCase {
     
     for (Thread t : threads) t.start();
     done.await();
-    writer.shutdown();
+    writer.close();
     
     DirectoryReader reader = DirectoryReader.open(dir);
     for (AtomicReaderContext context : reader.leaves()) {
@@ -1054,7 +1053,7 @@ public class TestBinaryDocValuesUpdates extends LuceneTestCase {
       }
       reader.close();
     }
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
 
@@ -1074,7 +1073,7 @@ public class TestBinaryDocValuesUpdates extends LuceneTestCase {
     doc.add(new BinaryDocValuesField("f1", toBytes(5L)));
     doc.add(new BinaryDocValuesField("f2", toBytes(13L)));
     writer.addDocument(doc);
-    writer.shutdown();
+    writer.close();
     
     // change format
     conf = newIndexWriterConfig(new MockAnalyzer(random()));
@@ -1092,7 +1091,7 @@ public class TestBinaryDocValuesUpdates extends LuceneTestCase {
     doc.add(new BinaryDocValuesField("f2", toBytes(2L)));
     writer.addDocument(doc);
     writer.updateBinaryDocValue(new Term("id", "d0"), "f1", toBytes(12L));
-    writer.shutdown();
+    writer.close();
     
     DirectoryReader reader = DirectoryReader.open(dir);
     AtomicReader r = SlowCompositeReaderWrapper.wrap(reader);
@@ -1135,7 +1134,7 @@ public class TestBinaryDocValuesUpdates extends LuceneTestCase {
     long value = random().nextInt();
     Term term = new Term("id", RandomPicks.randomFrom(random(), randomTerms));
     writer.updateDocValues(term, new BinaryDocValuesField("bdv", toBytes(value)), new BinaryDocValuesField("control", toBytes(value * 2)));
-    writer.shutdown();
+    writer.close();
     
     Directory dir2 = newDirectory();
     conf = newIndexWriterConfig(new MockAnalyzer(random()));
@@ -1147,7 +1146,7 @@ public class TestBinaryDocValuesUpdates extends LuceneTestCase {
       writer.addIndexes(reader);
       reader.close();
     }
-    writer.shutdown();
+    writer.close();
     
     DirectoryReader reader = DirectoryReader.open(dir2);
     for (AtomicReaderContext context : reader.leaves()) {
@@ -1188,7 +1187,7 @@ public class TestBinaryDocValuesUpdates extends LuceneTestCase {
       assertEquals(numFiles, dir.listAll().length);
     }
 
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
 
@@ -1242,7 +1241,7 @@ public class TestBinaryDocValuesUpdates extends LuceneTestCase {
           new BinaryDocValuesField("cf" + field, toBytes(value * 2)));
     }
 
-    writer.shutdown();
+    writer.close();
     
     DirectoryReader reader = DirectoryReader.open(dir);
     for (AtomicReaderContext context : reader.leaves()) {
@@ -1276,7 +1275,7 @@ public class TestBinaryDocValuesUpdates extends LuceneTestCase {
     writer.updateBinaryDocValue(new Term("upd", "t2"), "f1", toBytes(3L)); // update f1 to 3
     writer.updateBinaryDocValue(new Term("upd", "t2"), "f2", toBytes(3L)); // update f2 to 3
     writer.updateBinaryDocValue(new Term("upd", "t1"), "f1", toBytes(4L)); // update f1 to 4 (but not f2)
-    writer.shutdown();
+    writer.close();
     
     DirectoryReader reader = DirectoryReader.open(dir);
     assertEquals(4, getValue(reader.leaves().get(0).reader().getBinaryDocValues("f1"), 0));
@@ -1300,7 +1299,7 @@ public class TestBinaryDocValuesUpdates extends LuceneTestCase {
     writer.deleteDocuments(new Term("id", "doc")); // delete all docs in the first segment
     writer.addDocument(doc);
     writer.updateBinaryDocValue(new Term("id", "doc"), "f1", toBytes(2L));
-    writer.shutdown();
+    writer.close();
     
     DirectoryReader reader = DirectoryReader.open(dir);
     assertEquals(1, reader.leaves().size());
@@ -1322,7 +1321,7 @@ public class TestBinaryDocValuesUpdates extends LuceneTestCase {
     // update w/ multiple nonexisting terms in same field
     writer.updateBinaryDocValue(new Term("c", "foo"), "f1", toBytes(2L));
     writer.updateBinaryDocValue(new Term("c", "bar"), "f1", toBytes(2L));
-    writer.shutdown();
+    writer.close();
     
     DirectoryReader reader = DirectoryReader.open(dir);
     assertEquals(1, reader.leaves().size());
diff --git lucene/core/src/test/org/apache/lucene/index/TestBinaryTerms.java lucene/core/src/test/org/apache/lucene/index/TestBinaryTerms.java
index 4dc78bf..9953fc7 100644
--- lucene/core/src/test/org/apache/lucene/index/TestBinaryTerms.java
+++ lucene/core/src/test/org/apache/lucene/index/TestBinaryTerms.java
@@ -53,7 +53,7 @@ public class TestBinaryTerms extends LuceneTestCase {
     }
     
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     
     IndexSearcher is = newSearcher(ir);
     
diff --git lucene/core/src/test/org/apache/lucene/index/TestCheckIndex.java lucene/core/src/test/org/apache/lucene/index/TestCheckIndex.java
index 6cb526c..ff335aa 100644
--- lucene/core/src/test/org/apache/lucene/index/TestCheckIndex.java
+++ lucene/core/src/test/org/apache/lucene/index/TestCheckIndex.java
@@ -20,7 +20,6 @@ package org.apache.lucene.index;
 import java.io.IOException;
 import java.io.ByteArrayOutputStream;
 import java.io.PrintStream;
-import java.nio.charset.StandardCharsets;
 import java.util.List;
 import java.util.ArrayList;
 
@@ -53,7 +52,7 @@ public class TestCheckIndex extends LuceneTestCase {
     writer.forceMerge(1);
     writer.commit();
     writer.deleteDocuments(new Term("field","aaa5"));
-    writer.shutdown();
+    writer.close();
 
     ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);
     CheckIndex checker = new CheckIndex(dir);
@@ -113,7 +112,7 @@ public class TestCheckIndex extends LuceneTestCase {
     ));
     doc.add(field);
     iw.addDocument(doc);
-    iw.shutdown();
+    iw.close();
     dir.close(); // checkindex
   }
 }
diff --git lucene/core/src/test/org/apache/lucene/index/TestCodecHoldsOpenFiles.java lucene/core/src/test/org/apache/lucene/index/TestCodecHoldsOpenFiles.java
index 4b04d56..908d366 100644
--- lucene/core/src/test/org/apache/lucene/index/TestCodecHoldsOpenFiles.java
+++ lucene/core/src/test/org/apache/lucene/index/TestCodecHoldsOpenFiles.java
@@ -24,7 +24,6 @@ import org.apache.lucene.document.TextField;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.TestUtil;
-import org.apache.lucene.util.TestUtil;
 
 public class TestCodecHoldsOpenFiles extends LuceneTestCase {
   public void test() throws Exception {
@@ -38,7 +37,7 @@ public class TestCodecHoldsOpenFiles extends LuceneTestCase {
     }
 
     IndexReader r = w.getReader();
-    w.shutdown();
+    w.close();
 
     for(String fileName : d.listAll()) {
       try {
diff --git lucene/core/src/test/org/apache/lucene/index/TestCodecs.java lucene/core/src/test/org/apache/lucene/index/TestCodecs.java
index e8466b7..b24a6f6 100644
--- lucene/core/src/test/org/apache/lucene/index/TestCodecs.java
+++ lucene/core/src/test/org/apache/lucene/index/TestCodecs.java
@@ -32,15 +32,12 @@ import org.apache.lucene.codecs.lucene41.Lucene41RWCodec;
 import org.apache.lucene.codecs.lucene42.Lucene42RWCodec;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field.Store;
-import org.apache.lucene.document.FieldType;
 import org.apache.lucene.document.NumericDocValuesField;
 import org.apache.lucene.document.StringField;
-import org.apache.lucene.document.TextField;
 import org.apache.lucene.index.FieldInfo.DocValuesType;
 import org.apache.lucene.index.FieldInfo.IndexOptions;
 import org.apache.lucene.search.DocIdSetIterator;
 import org.apache.lucene.search.IndexSearcher;
-import org.apache.lucene.search.PhraseQuery;
 import org.apache.lucene.search.Query;
 import org.apache.lucene.search.ScoreDoc;
 import org.apache.lucene.store.Directory;
@@ -838,7 +835,7 @@ public class TestCodecs extends LuceneTestCase {
       doc.add(new StringField("f", "doc", Store.NO));
       writer.addDocument(doc);
     }
-    writer.shutdown();
+    writer.close();
     
     Term term = new Term("f", new BytesRef("doc"));
     DirectoryReader reader = DirectoryReader.open(dir);
@@ -867,7 +864,7 @@ public class TestCodecs extends LuceneTestCase {
     
     OLD_FORMAT_IMPERSONATION_IS_ACTIVE = false;
     try {
-      writer.shutdown();
+      writer.close();
       fail("should not have succeeded to impersonate an old format!");
     } catch (UnsupportedOperationException e) {
       writer.rollback();
diff --git lucene/core/src/test/org/apache/lucene/index/TestCompoundFile.java lucene/core/src/test/org/apache/lucene/index/TestCompoundFile.java
index 4cebe64..a7465ef 100644
--- lucene/core/src/test/org/apache/lucene/index/TestCompoundFile.java
+++ lucene/core/src/test/org/apache/lucene/index/TestCompoundFile.java
@@ -820,7 +820,7 @@ public class TestCompoundFile extends LuceneTestCase
         riw.commit();
       }
     }
-    riw.shutdown();
+    riw.close();
     checkFiles(dir);
     dir.close();
   }
diff --git lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler.java lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler.java
index b0b7cf3..61173ac 100644
--- lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler.java
+++ lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler.java
@@ -123,7 +123,7 @@ public class TestConcurrentMergeScheduler extends LuceneTestCase {
       assertEquals(20*(i+1)+extraCount, writer.numDocs());
     }
 
-    writer.shutdown();
+    writer.close();
     IndexReader reader = DirectoryReader.open(directory);
     assertEquals(200+extraCount, reader.numDocs());
     reader.close();
@@ -167,7 +167,7 @@ public class TestConcurrentMergeScheduler extends LuceneTestCase {
       writer.commit();
     }
 
-    writer.shutdown();
+    writer.close();
     IndexReader reader = DirectoryReader.open(directory);
     // Verify that we did not lose any deletes...
     assertEquals(450, reader.numDocs());
@@ -191,7 +191,7 @@ public class TestConcurrentMergeScheduler extends LuceneTestCase {
         writer.addDocument(doc);
       }
         
-      writer.shutdown();
+      writer.close();
       TestIndexWriter.assertNoUnreferencedFiles(directory, "testNoExtraFiles");
 
       // Reopen
@@ -199,7 +199,7 @@ public class TestConcurrentMergeScheduler extends LuceneTestCase {
                                             .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(2));
     }
 
-    writer.shutdown();
+    writer.close();
 
     directory.close();
   }
@@ -215,7 +215,8 @@ public class TestConcurrentMergeScheduler extends LuceneTestCase {
         newIndexWriterConfig(new MockAnalyzer(random())).
             // Force excessive merging:
             setMaxBufferedDocs(2).
-            setMergePolicy(newLogMergePolicy(100))
+            setMergePolicy(newLogMergePolicy(100)).
+            setCommitOnClose(false)
     );
 
     for(int iter=0;iter<10;iter++) {
@@ -237,7 +238,11 @@ public class TestConcurrentMergeScheduler extends LuceneTestCase {
       writer.addDocument(doc);
       writer.commit();
 
-      writer.shutdown(false);
+      try {
+        writer.commit();
+      } finally {
+        writer.close();
+      }
 
       IndexReader reader = DirectoryReader.open(directory);
       assertEquals((1+iter)*182, reader.numDocs());
@@ -253,7 +258,7 @@ public class TestConcurrentMergeScheduler extends LuceneTestCase {
               setMaxBufferedDocs(2)
       );
     }
-    writer.shutdown();
+    writer.close();
 
     directory.close();
   }
@@ -261,7 +266,7 @@ public class TestConcurrentMergeScheduler extends LuceneTestCase {
   // LUCENE-4544
   public void testMaxMergeCount() throws Exception {
     Directory dir = newDirectory();
-    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));
+    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random())).setCommitOnClose(false);
 
     final int maxMergeCount = TestUtil.nextInt(random(), 1, 5);
     final int maxMergeThreads = TestUtil.nextInt(random(), 1, maxMergeCount);
@@ -323,7 +328,11 @@ public class TestConcurrentMergeScheduler extends LuceneTestCase {
         w.addDocument(doc);
       }
     }
-    w.shutdown(false);
+    try {
+      w.commit();
+    } finally {
+      w.close();
+    }
     dir.close();
   }
 
@@ -370,13 +379,13 @@ public class TestConcurrentMergeScheduler extends LuceneTestCase {
     }
     atLeastOneMerge.await();
     assertTrue(((TrackingCMS) w.getConfig().getMergeScheduler()).totMergedBytes != 0);
-    w.shutdown();
+    w.close();
     d.close();
   }
 
   public void testLiveMaxMergeCount() throws Exception {
     Directory d = newDirectory();
-    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));
+    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));
     TieredMergePolicy tmp = new TieredMergePolicy();
     tmp.setSegmentsPerTier(1000);
     tmp.setMaxMergeAtOnce(1000);
diff --git lucene/core/src/test/org/apache/lucene/index/TestConsistentFieldNumbers.java lucene/core/src/test/org/apache/lucene/index/TestConsistentFieldNumbers.java
index 91c9a46..d085337 100644
--- lucene/core/src/test/org/apache/lucene/index/TestConsistentFieldNumbers.java
+++ lucene/core/src/test/org/apache/lucene/index/TestConsistentFieldNumbers.java
@@ -46,7 +46,7 @@ public class TestConsistentFieldNumbers extends LuceneTestCase {
       writer.addDocument(d1);
 
       if (i == 1) {
-        writer.shutdown();
+        writer.close();
         writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))
                                          .setMergePolicy(NoMergePolicy.INSTANCE));
       } else {
@@ -62,7 +62,7 @@ public class TestConsistentFieldNumbers extends LuceneTestCase {
       d2.add(new TextField("f4", "fourth field", Field.Store.NO));
       writer.addDocument(d2);
 
-      writer.shutdown();
+      writer.close();
 
       SegmentInfos sis = new SegmentInfos();
       sis.read(dir);
@@ -80,7 +80,7 @@ public class TestConsistentFieldNumbers extends LuceneTestCase {
 
       writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));
       writer.forceMerge(1);
-      writer.shutdown();
+      writer.close();
 
       sis = new SegmentInfos();
       sis.read(dir);
@@ -110,7 +110,7 @@ public class TestConsistentFieldNumbers extends LuceneTestCase {
     d1.add(new TextField("f2", "second field", Field.Store.YES));
     writer.addDocument(d1);
 
-    writer.shutdown();
+    writer.close();
     writer = new IndexWriter(dir2, newIndexWriterConfig(new MockAnalyzer(random()))
                                      .setMergePolicy(NoMergePolicy.INSTANCE));
 
@@ -123,12 +123,12 @@ public class TestConsistentFieldNumbers extends LuceneTestCase {
     d2.add(new TextField("f4", "fourth field", Field.Store.YES));
     writer.addDocument(d2);
 
-    writer.shutdown();
+    writer.close();
 
     writer = new IndexWriter(dir1, newIndexWriterConfig(new MockAnalyzer(random()))
                                      .setMergePolicy(NoMergePolicy.INSTANCE));
     writer.addIndexes(dir2);
-    writer.shutdown();
+    writer.close();
 
     SegmentInfos sis = new SegmentInfos();
     sis.read(dir1);
@@ -160,7 +160,7 @@ public class TestConsistentFieldNumbers extends LuceneTestCase {
         d.add(new TextField("f1", "d1 first field", Field.Store.YES));
         d.add(new TextField("f2", "d1 second field", Field.Store.YES));
         writer.addDocument(d);
-        writer.shutdown();
+        writer.close();
         SegmentInfos sis = new SegmentInfos();
         sis.read(dir);
         assertEquals(1, sis.size());
@@ -177,7 +177,7 @@ public class TestConsistentFieldNumbers extends LuceneTestCase {
         d.add(new TextField("f1", "d2 first field", Field.Store.YES));
         d.add(new StoredField("f3", new byte[] { 1, 2, 3 }));
         writer.addDocument(d);
-        writer.shutdown();
+        writer.close();
         SegmentInfos sis = new SegmentInfos();
         sis.read(dir);
         assertEquals(2, sis.size());
@@ -198,7 +198,7 @@ public class TestConsistentFieldNumbers extends LuceneTestCase {
         d.add(new TextField("f2", "d3 second field", Field.Store.YES));
         d.add(new StoredField("f3", new byte[] { 1, 2, 3, 4, 5 }));
         writer.addDocument(d);
-        writer.shutdown();
+        writer.close();
         SegmentInfos sis = new SegmentInfos();
         sis.read(dir);
         assertEquals(3, sis.size());
@@ -222,14 +222,14 @@ public class TestConsistentFieldNumbers extends LuceneTestCase {
         // nuke the first segment entirely so that the segment with gaps is
         // loaded first!
         writer.forceMergeDeletes();
-        writer.shutdown();
+        writer.close();
       }
 
       IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))
                                                   .setMergePolicy(new LogByteSizeMergePolicy())
                                                   .setInfoStream(new FailOnNonBulkMergesInfoStream()));
       writer.forceMerge(1);
-      writer.shutdown();
+      writer.close();
 
       SegmentInfos sis = new SegmentInfos();
       sis.read(dir);
@@ -267,7 +267,7 @@ public class TestConsistentFieldNumbers extends LuceneTestCase {
     }
 
     writer.forceMerge(1);
-    writer.shutdown();
+    writer.close();
 
     SegmentInfos sis = new SegmentInfos();
     sis.read(dir);
diff --git lucene/core/src/test/org/apache/lucene/index/TestCrash.java lucene/core/src/test/org/apache/lucene/index/TestCrash.java
index 7001ec6..8a5fbaa 100644
--- lucene/core/src/test/org/apache/lucene/index/TestCrash.java
+++ lucene/core/src/test/org/apache/lucene/index/TestCrash.java
@@ -31,14 +31,14 @@ import org.apache.lucene.util.LuceneTestCase;
 public class TestCrash extends LuceneTestCase {
 
   private IndexWriter initIndex(Random random, boolean initialCommit) throws IOException {
-    return initIndex(random, newMockDirectory(random), initialCommit);
+    return initIndex(random, newMockDirectory(random), initialCommit, true);
   }
 
-  private IndexWriter initIndex(Random random, MockDirectoryWrapper dir, boolean initialCommit) throws IOException {
+  private IndexWriter initIndex(Random random, MockDirectoryWrapper dir, boolean initialCommit, boolean commitOnClose) throws IOException {
     dir.setLockFactory(NoLockFactory.getNoLockFactory());
 
     IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))
-        .setMaxBufferedDocs(10).setMergeScheduler(new ConcurrentMergeScheduler()));
+        .setMaxBufferedDocs(10).setMergeScheduler(new ConcurrentMergeScheduler()).setCommitOnClose(commitOnClose));
     ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();
     if (initialCommit) {
       writer.commit();
@@ -85,7 +85,7 @@ public class TestCrash extends LuceneTestCase {
     Directory dir2 = newDirectory(dir);
     dir.close();
 
-    new RandomIndexWriter(random(), dir2).shutdown();
+    new RandomIndexWriter(random(), dir2).close();
     dir2.close();
   }
 
@@ -111,8 +111,8 @@ public class TestCrash extends LuceneTestCase {
       System.out.println("TEST: now crash");
     }
     crash(writer);
-    writer = initIndex(random(), dir, false);
-    writer.shutdown();
+    writer = initIndex(random(), dir, false, true);
+    writer.close();
 
     IndexReader reader = DirectoryReader.open(dir);
     assertTrue(reader.numDocs() < 314);
@@ -124,7 +124,7 @@ public class TestCrash extends LuceneTestCase {
     Directory dir2 = newDirectory(dir);
     dir.close();
 
-    new RandomIndexWriter(random(), dir2).shutdown();
+    new RandomIndexWriter(random(), dir2).close();
     dir2.close();
   }
 
@@ -136,8 +136,8 @@ public class TestCrash extends LuceneTestCase {
     // running when we crash:
     dir.setAssertNoUnrefencedFilesOnClose(false);
 
-    writer.shutdown();
-    writer = initIndex(random(), dir, false);
+    writer.close();
+    writer = initIndex(random(), dir, false, true);
     assertEquals(314, writer.maxDoc());
     crash(writer);
 
@@ -160,7 +160,7 @@ public class TestCrash extends LuceneTestCase {
     Directory dir2 = newDirectory(dir);
     dir.close();
 
-    new RandomIndexWriter(random(), dir2).shutdown();
+    new RandomIndexWriter(random(), dir2).close();
     dir2.close();
   }
 
@@ -169,7 +169,7 @@ public class TestCrash extends LuceneTestCase {
     IndexWriter writer = initIndex(random(), false);
     MockDirectoryWrapper dir = (MockDirectoryWrapper) writer.getDirectory();
 
-    writer.shutdown();
+    writer.close();
     dir.crash();
 
     /*
@@ -186,11 +186,15 @@ public class TestCrash extends LuceneTestCase {
   }
 
   public void testCrashAfterCloseNoWait() throws IOException {
-    
-    IndexWriter writer = initIndex(random(), false);
-    MockDirectoryWrapper dir = (MockDirectoryWrapper) writer.getDirectory();
+    Random random = random();
+    MockDirectoryWrapper dir = newMockDirectory(random);
+    IndexWriter writer = initIndex(random, dir, false, false);
 
-    writer.shutdown(false);
+    try {
+      writer.commit();
+    } finally {
+      writer.close();
+    }
 
     dir.crash();
 
diff --git lucene/core/src/test/org/apache/lucene/index/TestCrashCausesCorruptIndex.java lucene/core/src/test/org/apache/lucene/index/TestCrashCausesCorruptIndex.java
index 2413020..579d378 100644
--- lucene/core/src/test/org/apache/lucene/index/TestCrashCausesCorruptIndex.java
+++ lucene/core/src/test/org/apache/lucene/index/TestCrashCausesCorruptIndex.java
@@ -32,7 +32,6 @@ import org.apache.lucene.store.FilterDirectory;
 import org.apache.lucene.store.IOContext;
 import org.apache.lucene.store.IndexOutput;
 import org.apache.lucene.util.LuceneTestCase;
-import org.apache.lucene.util.TestUtil;
 
 public class TestCrashCausesCorruptIndex extends LuceneTestCase  {
 
@@ -81,7 +80,7 @@ public class TestCrashCausesCorruptIndex extends LuceneTestCase  {
       // expected
     }
     // writes segments_3
-    indexWriter.shutdown();
+    indexWriter.close();
     assertFalse(slowFileExists(realDirectory, "segments_2"));
     crashAfterCreateOutput.close();
   }
@@ -101,7 +100,7 @@ public class TestCrashCausesCorruptIndex extends LuceneTestCase  {
     // currently the test fails above.
     // however, to test the fix, the following lines should pass as well.
     indexWriter.addDocument(getDocument());
-    indexWriter.shutdown();
+    indexWriter.close();
     assertFalse(slowFileExists(realDirectory, "segments_2"));
     realDirectory.close();
   }
diff --git lucene/core/src/test/org/apache/lucene/index/TestCustomNorms.java lucene/core/src/test/org/apache/lucene/index/TestCustomNorms.java
index d098227..0f95286 100644
--- lucene/core/src/test/org/apache/lucene/index/TestCustomNorms.java
+++ lucene/core/src/test/org/apache/lucene/index/TestCustomNorms.java
@@ -65,7 +65,7 @@ public class TestCustomNorms extends LuceneTestCase {
       }
     }
     writer.commit();
-    writer.shutdown();
+    writer.close();
     AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));
     NumericDocValues norms = open.getNormValues(floatTestField);
     assertNotNull(norms);
diff --git lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy.java lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy.java
index a84105a..deffdf0 100644
--- lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy.java
+++ lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy.java
@@ -231,7 +231,7 @@ public class TestDeletionPolicy extends LuceneTestCase {
     commitData.put("commitTime", String.valueOf(System.currentTimeMillis()));
     writer.setCommitData(commitData);
     writer.commit();
-    writer.shutdown();
+    writer.close();
 
     long lastDeleteTime = 0;
     final int targetNumDelete = TestUtil.nextInt(random(), 1, 5);
@@ -253,7 +253,7 @@ public class TestDeletionPolicy extends LuceneTestCase {
       commitData.put("commitTime", String.valueOf(System.currentTimeMillis()));
       writer.setCommitData(commitData);
       writer.commit();
-      writer.shutdown();
+      writer.close();
 
       Thread.sleep((int) (1000.0*(SECONDS/5.0)));
     }
@@ -326,7 +326,7 @@ public class TestDeletionPolicy extends LuceneTestCase {
       for(int i=0;i<107;i++) {
         addDoc(writer);
       }
-      writer.shutdown();
+      writer.close();
 
       final boolean needsMerging;
       {
@@ -346,7 +346,7 @@ public class TestDeletionPolicy extends LuceneTestCase {
         writer = new IndexWriter(dir, conf);
         policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();
         writer.forceMerge(1);
-        writer.shutdown();
+        writer.close();
       }
 
       assertEquals(needsMerging ? 2:1, policy.numOnInit);
@@ -385,7 +385,7 @@ public class TestDeletionPolicy extends LuceneTestCase {
           writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))
               .setOpenMode(OpenMode.APPEND)
               .setIndexDeletionPolicy(policy));
-          writer.shutdown();
+          writer.close();
           int postCount = dir.listAll().length;
           assertTrue(postCount < preCount);
         }
@@ -414,7 +414,7 @@ public class TestDeletionPolicy extends LuceneTestCase {
       if ((1+i)%2 == 0)
         writer.commit();
     }
-    writer.shutdown();
+    writer.close();
 
     Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);
     assertEquals(5, commits.size());
@@ -431,7 +431,7 @@ public class TestDeletionPolicy extends LuceneTestCase {
     addDoc(writer);
     assertEquals(11, writer.numDocs());
     writer.forceMerge(1);
-    writer.shutdown();
+    writer.close();
 
     assertEquals(6, DirectoryReader.listCommits(dir).size());
 
@@ -455,7 +455,7 @@ public class TestDeletionPolicy extends LuceneTestCase {
                                     .setIndexCommit(lastCommit));
     assertEquals(10, writer.numDocs());
     // Commits the rollback:
-    writer.shutdown();
+    writer.close();
 
     // Now 8 because we made another commit
     assertEquals(7, DirectoryReader.listCommits(dir).size());
@@ -471,7 +471,7 @@ public class TestDeletionPolicy extends LuceneTestCase {
     writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))
                                     .setIndexDeletionPolicy(policy));
     writer.forceMerge(1);
-    writer.shutdown();
+    writer.close();
 
     r = DirectoryReader.open(dir);
     assertEquals(1, r.leaves().size());
@@ -491,7 +491,7 @@ public class TestDeletionPolicy extends LuceneTestCase {
     assertEquals(10, r.numDocs());
     r.close();
 
-    writer.shutdown();
+    writer.close();
 
     // Now reader sees not-fully-merged index:
     r = DirectoryReader.open(dir);
@@ -525,7 +525,7 @@ public class TestDeletionPolicy extends LuceneTestCase {
       for(int i=0;i<107;i++) {
         addDoc(writer);
       }
-      writer.shutdown();
+      writer.close();
 
       conf = newIndexWriterConfig(new MockAnalyzer(random()))
           .setOpenMode(OpenMode.APPEND)
@@ -535,7 +535,7 @@ public class TestDeletionPolicy extends LuceneTestCase {
       writer = new IndexWriter(dir, conf);
       policy = (KeepNoneOnInitDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();
       writer.forceMerge(1);
-      writer.shutdown();
+      writer.close();
 
       assertEquals(2, policy.numOnInit);
       // If we are not auto committing then there should
@@ -577,7 +577,7 @@ public class TestDeletionPolicy extends LuceneTestCase {
           addDoc(writer);
         }
         writer.forceMerge(1);
-        writer.shutdown();
+        writer.close();
       }
 
       assertTrue(policy.numDelete > 0);
@@ -631,7 +631,7 @@ public class TestDeletionPolicy extends LuceneTestCase {
       mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);
       IndexWriter writer = new IndexWriter(dir, conf);
       KeepLastNDeletionPolicy policy = (KeepLastNDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();
-      writer.shutdown();
+      writer.close();
       Term searchTerm = new Term("content", "aaa");        
       Query query = new TermQuery(searchTerm);
 
@@ -649,15 +649,15 @@ public class TestDeletionPolicy extends LuceneTestCase {
           addDocWithID(writer, i*(N+1)+j);
         }
         // this is a commit
-        writer.shutdown();
-        conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))
+        writer.close();
+        conf = new IndexWriterConfig(new MockAnalyzer(random()))
           .setIndexDeletionPolicy(policy)
           .setMergePolicy(NoMergePolicy.INSTANCE);
         writer = new IndexWriter(dir, conf);
         policy = (KeepLastNDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();
         writer.deleteDocuments(new Term("id", "" + (i*(N+1)+3)));
         // this is a commit
-        writer.shutdown();
+        writer.close();
         IndexReader reader = DirectoryReader.open(dir);
         IndexSearcher searcher = newSearcher(reader);
         ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;
@@ -670,7 +670,7 @@ public class TestDeletionPolicy extends LuceneTestCase {
         policy = (KeepLastNDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();
         // This will not commit: there are no changes
         // pending because we opened for "create":
-        writer.shutdown();
+        writer.close();
       }
 
       assertEquals(3*(N+1)+1, policy.numOnInit);
diff --git lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader.java lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader.java
index 9bb1c35..9923172 100644
--- lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader.java
+++ lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader.java
@@ -129,14 +129,14 @@ public class TestDirectoryReader extends LuceneTestCase {
     Document doc = new Document();
     doc.add(newTextField("body", s, Field.Store.NO));
     iw.addDocument(doc);
-    iw.shutdown();
+    iw.close();
   }
   
   public void testIsCurrent() throws Exception {
     Directory d = newDirectory();
     IndexWriter writer = new IndexWriter(d, newIndexWriterConfig(new MockAnalyzer(random())));
     addDocumentWithFields(writer);
-    writer.shutdown();
+    writer.close();
     // set up reader:
     DirectoryReader reader = DirectoryReader.open(d);
     assertTrue(reader.isCurrent());
@@ -144,13 +144,13 @@ public class TestDirectoryReader extends LuceneTestCase {
     writer = new IndexWriter(d, newIndexWriterConfig(new MockAnalyzer(random()))
                                   .setOpenMode(OpenMode.APPEND));
     addDocumentWithFields(writer);
-    writer.shutdown();
+    writer.close();
     assertFalse(reader.isCurrent());
     // re-create index:
     writer = new IndexWriter(d, newIndexWriterConfig(new MockAnalyzer(random()))
                                   .setOpenMode(OpenMode.CREATE));
     addDocumentWithFields(writer);
-    writer.shutdown();
+    writer.close();
     assertFalse(reader.isCurrent());
     reader.close();
     d.close();
@@ -179,7 +179,7 @@ public class TestDirectoryReader extends LuceneTestCase {
       doc.add(new TextField("unstored","test1", Field.Store.NO));
       writer.addDocument(doc);
 
-      writer.shutdown();
+      writer.close();
       // set up reader
       DirectoryReader reader = DirectoryReader.open(d);
       FieldInfos fieldInfos = MultiFields.getMergedFieldInfos(reader);
@@ -239,7 +239,7 @@ public class TestDirectoryReader extends LuceneTestCase {
         writer.addDocument(doc);
       }
       
-      writer.shutdown();
+      writer.close();
 
       // verify fields again
       reader = DirectoryReader.open(d);
@@ -337,7 +337,7 @@ public void testTermVectors() throws Exception {
       
       writer.addDocument(doc);
   }
-  writer.shutdown();
+  writer.close();
   d.close();
 }
 
@@ -375,7 +375,7 @@ void assertTermDocsCount(String msg,
       addDocumentWithDifferentFields(writer);
       addDocumentWithTermVectorFields(writer);
     }
-    writer.shutdown();
+    writer.close();
     writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))
                                     .setOpenMode(OpenMode.APPEND)
                                     .setMergePolicy(newLogMergePolicy()));
@@ -383,7 +383,7 @@ void assertTermDocsCount(String msg,
     doc.add(new StoredField("bin1", bin));
     doc.add(new TextField("junk", "junk text", Field.Store.NO));
     writer.addDocument(doc);
-    writer.shutdown();
+    writer.close();
     DirectoryReader reader = DirectoryReader.open(dir);
     StoredDocument doc2 = reader.document(reader.maxDoc() - 1);
     StorableField[] fields = doc2.getFields("bin1");
@@ -404,7 +404,7 @@ void assertTermDocsCount(String msg,
                                     .setOpenMode(OpenMode.APPEND)
                                     .setMergePolicy(newLogMergePolicy()));
     writer.forceMerge(1);
-    writer.shutdown();
+    writer.close();
     reader = DirectoryReader.open(dir);
     doc2 = reader.document(reader.maxDoc() - 1);
     fields = doc2.getFields("bin1");
@@ -442,7 +442,7 @@ public void testFilesOpenClose() throws IOException {
       Directory dir = newFSDirectory(dirFile);
       IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));
       addDoc(writer, "test");
-      writer.shutdown();
+      writer.close();
       dir.close();
 
       // Try to erase the data - this ensures that the writer closed all files
@@ -453,7 +453,7 @@ public void testFilesOpenClose() throws IOException {
       writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))
                                        .setOpenMode(OpenMode.CREATE));
       addDoc(writer, "test");
-      writer.shutdown();
+      writer.close();
       dir.close();
 
       // Now open existing directory and test that reader closes all files
@@ -657,7 +657,7 @@ public void testFilesOpenClose() throws IOException {
     );
     for(int i=0;i<27;i++)
       addDocumentWithFields(writer);
-    writer.shutdown();
+    writer.close();
 
     SegmentInfos sis = new SegmentInfos();
     sis.read(d);
@@ -678,7 +678,7 @@ public void testFilesOpenClose() throws IOException {
     );
     for(int i=0;i<7;i++)
       addDocumentWithFields(writer);
-    writer.shutdown();
+    writer.close();
 
     DirectoryReader r2 = DirectoryReader.openIfChanged(r);
     assertNotNull(r2);
@@ -689,7 +689,7 @@ public void testFilesOpenClose() throws IOException {
     writer = new IndexWriter(d, newIndexWriterConfig(new MockAnalyzer(random()))
                                   .setOpenMode(OpenMode.APPEND));
     writer.forceMerge(1);
-    writer.shutdown();
+    writer.close();
 
     r2 = DirectoryReader.openIfChanged(r);
     assertNotNull(r2);
@@ -737,7 +737,7 @@ public void testFilesOpenClose() throws IOException {
     writer.addDocument(createDocument("a"));
     writer.addDocument(createDocument("a"));
     writer.addDocument(createDocument("a"));
-    writer.shutdown();
+    writer.close();
     
     Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);
     for (final IndexCommit commit : commits) {
@@ -778,7 +778,7 @@ public void testFilesOpenClose() throws IOException {
       assertEquals(10, s.reader().terms("number").size());
     }
     r2.close();
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
   
@@ -798,7 +798,7 @@ public void testFilesOpenClose() throws IOException {
     assertNull(r2);
     writer.commit();
     assertFalse(r.isCurrent());
-    writer.shutdown();
+    writer.close();
     r.close();
     dir.close();
   }
@@ -818,7 +818,7 @@ public void testFilesOpenClose() throws IOException {
     writer.addDocument(new Document());
     writer.commit();
     sdp.snapshot();
-    writer.shutdown();
+    writer.close();
     long currentGen = 0;
     for (IndexCommit ic : DirectoryReader.listCommits(dir)) {
       assertTrue("currentGen=" + currentGen + " commitGen=" + ic.getGeneration(), currentGen < ic.getGeneration());
@@ -836,7 +836,7 @@ public void testFilesOpenClose() throws IOException {
     d.add(newTextField("f", "a a b", Field.Store.NO));
     writer.addDocument(d);
     DirectoryReader r = writer.getReader();
-    writer.shutdown();
+    writer.close();
     try {
       // Make sure codec impls totalTermFreq (eg PreFlex doesn't)
       Assume.assumeTrue(r.totalTermFreq(new Term("f", new BytesRef("b"))) != -1);
@@ -859,7 +859,7 @@ public void testFilesOpenClose() throws IOException {
     d.add(newTextField("f", "b", Field.Store.NO));
     writer.addDocument(d);
     DirectoryReader r = writer.getReader();
-    writer.shutdown();
+    writer.close();
     try {
       // Make sure codec impls getSumDocFreq (eg PreFlex doesn't)
       Assume.assumeTrue(r.getSumDocFreq("f") != -1);
@@ -880,7 +880,7 @@ public void testFilesOpenClose() throws IOException {
     d.add(newTextField("f", "a", Field.Store.NO));
     writer.addDocument(d);
     DirectoryReader r = writer.getReader();
-    writer.shutdown();
+    writer.close();
     try {
       // Make sure codec impls getSumDocFreq (eg PreFlex doesn't)
       Assume.assumeTrue(r.getDocCount("f") != -1);
@@ -901,7 +901,7 @@ public void testFilesOpenClose() throws IOException {
     d.add(newTextField("f", "a a b", Field.Store.NO));
     writer.addDocument(d);
     DirectoryReader r = writer.getReader();
-    writer.shutdown();
+    writer.close();
     try {
       // Make sure codec impls getSumDocFreq (eg PreFlex doesn't)
       Assume.assumeTrue(r.getSumTotalTermFreq("f") != -1);
@@ -937,7 +937,7 @@ public void testFilesOpenClose() throws IOException {
   
     // Close the top reader, its the only one that should be closed
     assertEquals(1, closeCount[0]);
-    writer.shutdown();
+    writer.close();
   
     DirectoryReader reader2 = DirectoryReader.open(dir);
     reader2.addReaderClosedListener(listener);
@@ -953,7 +953,7 @@ public void testFilesOpenClose() throws IOException {
     IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));
     writer.addDocument(new Document());
     DirectoryReader r = writer.getReader();
-    writer.shutdown();
+    writer.close();
     r.document(0);
     try {
       r.document(1);
@@ -975,7 +975,7 @@ public void testFilesOpenClose() throws IOException {
     r.decRef();
     r.close();
     assertFalse(r.tryIncRef());
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
   
@@ -1003,7 +1003,7 @@ public void testFilesOpenClose() throws IOException {
       assertNull(threads[i].failed);
     }
     assertFalse(r.tryIncRef());
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
   
@@ -1039,7 +1039,7 @@ public void testFilesOpenClose() throws IOException {
     doc.add(newStringField("field2", "foobaz", Field.Store.YES));
     writer.addDocument(doc);
     DirectoryReader r = writer.getReader();
-    writer.shutdown();
+    writer.close();
     Set<String> fieldsToLoad = new HashSet<>();
     assertEquals(0, r.document(0, fieldsToLoad).getFields().size());
     fieldsToLoad.add("field1");
diff --git lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen.java lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen.java
index c7bb891..6870332 100644
--- lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen.java
+++ lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen.java
@@ -148,7 +148,7 @@ public class TestDirectoryReaderReopen extends LuceneTestCase {
         }
       }
     } finally {
-      iwriter.shutdown();
+      iwriter.close();
       reader.close();
     }
   }
@@ -208,15 +208,14 @@ public class TestDirectoryReaderReopen extends LuceneTestCase {
       writer.addDocument(createDocument(i, 3));
     }
     writer.forceMerge(1);
-    writer.shutdown();
+    writer.close();
 
     final TestReopen test = new TestReopen() {      
       @Override
       protected void modifyIndex(int i) throws IOException {
-       IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(
-         TEST_VERSION_CURRENT, new MockAnalyzer(random())));
+       IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));
        modifier.addDocument(createDocument(n + i, 6));
-       modifier.shutdown();
+       modifier.close();
       }
 
       @Override
@@ -434,8 +433,7 @@ public class TestDirectoryReaderReopen extends LuceneTestCase {
   
   public static void createIndex(Random random, Directory dir, boolean multiSegment) throws IOException {
     IndexWriter.unlock(dir);
-    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random,
-        TEST_VERSION_CURRENT, new MockAnalyzer(random))
+    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random, new MockAnalyzer(random))
         .setMergePolicy(new LogDocMergePolicy()));
     
     for (int i = 0; i < 100; i++) {
@@ -449,7 +447,7 @@ public class TestDirectoryReaderReopen extends LuceneTestCase {
       w.forceMerge(1);
     }
     
-    w.shutdown();
+    w.close();
 
     DirectoryReader r = DirectoryReader.open(dir);
     if (multiSegment) {
@@ -487,31 +485,31 @@ public class TestDirectoryReaderReopen extends LuceneTestCase {
         if (VERBOSE) {
           System.out.println("TEST: modify index");
         }
-        IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));
+        IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));
         w.deleteDocuments(new Term("field2", "a11"));
         w.deleteDocuments(new Term("field2", "b30"));
-        w.shutdown();
+        w.close();
         break;
       }
       case 1: {
-        IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));
+        IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));
         w.forceMerge(1);
-        w.shutdown();
+        w.close();
         break;
       }
       case 2: {
-        IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));
+        IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));
         w.addDocument(createDocument(101, 4));
         w.forceMerge(1);
         w.addDocument(createDocument(102, 4));
         w.addDocument(createDocument(103, 4));
-        w.shutdown();
+        w.close();
         break;
       }
       case 3: {
-        IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));
+        IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));
         w.addDocument(createDocument(101, 4));
-        w.shutdown();
+        w.close();
         break;
       }
     }
@@ -569,7 +567,7 @@ public class TestDirectoryReaderReopen extends LuceneTestCase {
       writer.setCommitData(data);
       writer.commit();
     }
-    writer.shutdown();
+    writer.close();
 
     DirectoryReader r = DirectoryReader.open(dir);
     assertEquals(0, r.numDocs());
@@ -619,7 +617,7 @@ public class TestDirectoryReaderReopen extends LuceneTestCase {
     assertNotNull(r2);
     r.close();
     assertEquals(1, r2.numDocs());
-    w.shutdown();
+    w.close();
     r2.close();
     dir.close();
   }
@@ -627,7 +625,7 @@ public class TestDirectoryReaderReopen extends LuceneTestCase {
   public void testOverDecRefDuringReopen() throws Exception {
     MockDirectoryWrapper dir = newMockDirectory();
 
-    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));
+    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));
     iwc.setCodec(Codec.forName("Lucene49"));
     IndexWriter w = new IndexWriter(dir, iwc);
     Document doc = new Document();
@@ -696,7 +694,7 @@ public class TestDirectoryReaderReopen extends LuceneTestCase {
   public void testNPEAfterInvalidReindex1() throws Exception {
     Directory dir = new RAMDirectory();
 
-    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));
+    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));
     Document doc = new Document();
     doc.add(newStringField("id", "id", Field.Store.NO));
     w.addDocument(doc);
@@ -715,7 +713,7 @@ public class TestDirectoryReaderReopen extends LuceneTestCase {
       dir.deleteFile(fileName);
     }
 
-    w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));
+    w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));
     doc = new Document();
     doc.add(newStringField("id", "id", Field.Store.NO));
     doc.add(new NumericDocValuesField("ndv", 13));
@@ -746,7 +744,7 @@ public class TestDirectoryReaderReopen extends LuceneTestCase {
   public void testNPEAfterInvalidReindex2() throws Exception {
     Directory dir = new RAMDirectory();
 
-    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));
+    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));
     Document doc = new Document();
     doc.add(newStringField("id", "id", Field.Store.NO));
     w.addDocument(doc);
@@ -765,7 +763,7 @@ public class TestDirectoryReaderReopen extends LuceneTestCase {
       dir.deleteFile(fileName);
     }
 
-    w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));
+    w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));
     doc = new Document();
     doc.add(newStringField("id", "id", Field.Store.NO));
     doc.add(new NumericDocValuesField("ndv", 13));
@@ -785,7 +783,6 @@ public class TestDirectoryReaderReopen extends LuceneTestCase {
     }
 
     r.close();
-    w.close();
     dir.close();
   }
 }
diff --git lucene/core/src/test/org/apache/lucene/index/TestDoc.java lucene/core/src/test/org/apache/lucene/index/TestDoc.java
index 4c006fb..6c322a9 100644
--- lucene/core/src/test/org/apache/lucene/index/TestDoc.java
+++ lucene/core/src/test/org/apache/lucene/index/TestDoc.java
@@ -134,7 +134,7 @@ public class TestDoc extends LuceneTestCase {
 
       SegmentCommitInfo si2 = indexDoc(writer, "test2.txt");
       printSegment(out, si2);
-      writer.shutdown();
+      writer.close();
 
       SegmentCommitInfo siMerge = merge(directory, si1, si2, "_merge", false);
       printSegment(out, siMerge);
@@ -176,7 +176,7 @@ public class TestDoc extends LuceneTestCase {
 
       si2 = indexDoc(writer, "test2.txt");
       printSegment(out, si2);
-      writer.shutdown();
+      writer.close();
 
       siMerge = merge(directory, si1, si2, "_merge", true);
       printSegment(out, siMerge);
diff --git lucene/core/src/test/org/apache/lucene/index/TestDocCount.java lucene/core/src/test/org/apache/lucene/index/TestDocCount.java
index 1290c90..6518319 100644
--- lucene/core/src/test/org/apache/lucene/index/TestDocCount.java
+++ lucene/core/src/test/org/apache/lucene/index/TestDocCount.java
@@ -43,7 +43,7 @@ public class TestDocCount extends LuceneTestCase {
     ir = iw.getReader();
     verifyCount(ir);
     ir.close();
-    iw.shutdown();
+    iw.close();
     dir.close();
   }
   
diff --git lucene/core/src/test/org/apache/lucene/index/TestDocInverterPerFieldErrorInfo.java lucene/core/src/test/org/apache/lucene/index/TestDocInverterPerFieldErrorInfo.java
index fe94dc1..c426bb5 100644
--- lucene/core/src/test/org/apache/lucene/index/TestDocInverterPerFieldErrorInfo.java
+++ lucene/core/src/test/org/apache/lucene/index/TestDocInverterPerFieldErrorInfo.java
@@ -18,7 +18,6 @@ package org.apache.lucene.index;
  */
 
 import org.apache.lucene.analysis.Analyzer;
-import org.apache.lucene.analysis.MockAnalyzer;
 import org.apache.lucene.analysis.MockTokenizer;
 import org.apache.lucene.analysis.TokenFilter;
 import org.apache.lucene.analysis.Tokenizer;
@@ -69,7 +68,7 @@ public class TestDocInverterPerFieldErrorInfo extends LuceneTestCase {
   public void testInfoStreamGetsFieldName() throws Exception {
     Directory dir = newDirectory();
     IndexWriter writer;
-    IndexWriterConfig c = new IndexWriterConfig(TEST_VERSION_CURRENT, new ThrowingAnalyzer());
+    IndexWriterConfig c = new IndexWriterConfig(new ThrowingAnalyzer());
     final ByteArrayOutputStream infoBytes = new ByteArrayOutputStream();
     PrintStream infoPrintStream = new PrintStream(infoBytes, true, IOUtils.UTF_8);
     PrintStreamInfoStream printStreamInfoStream = new PrintStreamInfoStream(infoPrintStream);
@@ -86,7 +85,7 @@ public class TestDocInverterPerFieldErrorInfo extends LuceneTestCase {
       assertTrue(infoStream.contains("distinctiveFieldName"));
     }
 
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
 
@@ -94,7 +93,7 @@ public class TestDocInverterPerFieldErrorInfo extends LuceneTestCase {
   public void testNoExtraNoise() throws Exception {
     Directory dir = newDirectory();
     IndexWriter writer;
-    IndexWriterConfig c = new IndexWriterConfig(TEST_VERSION_CURRENT, new ThrowingAnalyzer());
+    IndexWriterConfig c = new IndexWriterConfig(new ThrowingAnalyzer());
     final ByteArrayOutputStream infoBytes = new ByteArrayOutputStream();
     PrintStream infoPrintStream = new PrintStream(infoBytes, true, IOUtils.UTF_8);
     PrintStreamInfoStream printStreamInfoStream = new PrintStreamInfoStream(infoPrintStream);
@@ -111,7 +110,7 @@ public class TestDocInverterPerFieldErrorInfo extends LuceneTestCase {
     String infoStream = new String(infoBytes.toByteArray(), IOUtils.UTF_8);
     assertFalse(infoStream.contains("boringFieldName"));
 
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
 
diff --git lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing.java lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing.java
index e7c5a08..8111447 100644
--- lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing.java
+++ lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing.java
@@ -56,7 +56,7 @@ public class TestDocValuesIndexing extends LuceneTestCase {
     doc.add(new NumericDocValuesField("dv", 1));
     w.addDocument(doc);
     IndexReader r1 = w.getReader();
-    w.shutdown();
+    w.close();
 
     Directory d2 = newDirectory();
     w = new RandomIndexWriter(random(), d2);
@@ -65,7 +65,7 @@ public class TestDocValuesIndexing extends LuceneTestCase {
     doc.add(new NumericDocValuesField("dv", 2));
     w.addDocument(doc);
     IndexReader r2 = w.getReader();
-    w.shutdown();
+    w.close();
 
     Directory d3 = newDirectory();
     w = new RandomIndexWriter(random(), d3);
@@ -77,7 +77,7 @@ public class TestDocValuesIndexing extends LuceneTestCase {
 
     w.forceMerge(1);
     DirectoryReader r3 = w.getReader();
-    w.shutdown();
+    w.close();
     AtomicReader sr = getOnlySegmentReader(r3);
     assertEquals(2, sr.numDocs());
     NumericDocValues docValues = sr.getNumericDocValues("dv");
@@ -107,7 +107,7 @@ public class TestDocValuesIndexing extends LuceneTestCase {
     }
 
     DirectoryReader r = w.getReader();
-    w.shutdown();
+    w.close();
     assertEquals(17, DocValues.getNumeric(getOnlySegmentReader(r), "field").get(0));
     r.close();
     d.close();
@@ -131,7 +131,7 @@ public class TestDocValuesIndexing extends LuceneTestCase {
     }
 
     DirectoryReader r = w.getReader();
-    w.shutdown();
+    w.close();
     assertEquals(17, DocValues.getNumeric(getOnlySegmentReader(r), "field").get(0));
     r.close();
     d.close();
@@ -156,14 +156,14 @@ public class TestDocValuesIndexing extends LuceneTestCase {
     DirectoryReader r = w.getReader();
     assertEquals(17, getOnlySegmentReader(r).getNumericDocValues("field").get(0));
     r.close();
-    w.shutdown();
+    w.close();
     d.close();
   }
 
   // LUCENE-3870
   public void testLengthPrefixAcrossTwoPages() throws Exception {
     Directory d = newDirectory();
-    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));
+    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));
     Document doc = new Document();
     byte[] bytes = new byte[32764];
     BytesRef b = new BytesRef();
@@ -187,7 +187,7 @@ public class TestDocValuesIndexing extends LuceneTestCase {
     bytes[0] = 1;
     assertEquals(b, bytes1);
     r.close();
-    w.shutdown();
+    w.close();
     d.close();
   }
 
@@ -216,7 +216,7 @@ public class TestDocValuesIndexing extends LuceneTestCase {
       assertEquals(Integer.toString(i), d.get("docId"));
     }
     slow.close();
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
 
@@ -237,7 +237,7 @@ public class TestDocValuesIndexing extends LuceneTestCase {
     IndexReader ir = w.getReader();
     assertEquals(1, ir.numDocs());
     ir.close();
-    w.shutdown();
+    w.close();
     dir.close();
   }
 
@@ -259,7 +259,7 @@ public class TestDocValuesIndexing extends LuceneTestCase {
     IndexReader ir = w.getReader();
     assertEquals(1, ir.numDocs());
     ir.close();
-    w.shutdown();
+    w.close();
     dir.close();
   }
   
@@ -289,7 +289,7 @@ public class TestDocValuesIndexing extends LuceneTestCase {
     IndexReader ir = iwriter.getReader();
     assertEquals(1, ir.numDocs());
     ir.close();
-    iwriter.shutdown();
+    iwriter.close();
     directory.close();
   }
   
@@ -317,7 +317,7 @@ public class TestDocValuesIndexing extends LuceneTestCase {
     assertEquals(1, ir.numDocs());
     ir.close();
     
-    iwriter.shutdown();
+    iwriter.close();
     directory.close();
   }
   
@@ -343,7 +343,7 @@ public class TestDocValuesIndexing extends LuceneTestCase {
     IndexReader ir = iwriter.getReader();
     assertEquals(1, ir.numDocs());
     ir.close();
-    iwriter.shutdown();
+    iwriter.close();
     directory.close();
   }
 
@@ -373,7 +373,7 @@ public class TestDocValuesIndexing extends LuceneTestCase {
     IndexReader ir = iwriter.getReader();
     assertEquals(1, ir.numDocs());
     ir.close();
-    iwriter.shutdown();
+    iwriter.close();
     directory.close();
   }
   
@@ -404,7 +404,7 @@ public class TestDocValuesIndexing extends LuceneTestCase {
     IndexReader ir = iwriter.getReader();
     assertEquals(1, ir.numDocs());
     ir.close();
-    iwriter.shutdown();
+    iwriter.close();
     directory.close();
   }
 
@@ -424,7 +424,7 @@ public class TestDocValuesIndexing extends LuceneTestCase {
     } catch (IllegalArgumentException iae) {
       // expected
     }
-    w.shutdown();
+    w.close();
     dir.close();
   }
 
@@ -440,7 +440,7 @@ public class TestDocValuesIndexing extends LuceneTestCase {
     doc = new Document();
     doc.add(new SortedDocValuesField("foo", new BytesRef("hello")));
     w.addDocument(doc);
-    w.shutdown();
+    w.close();
     dir.close();
   }
 
@@ -451,7 +451,7 @@ public class TestDocValuesIndexing extends LuceneTestCase {
     Document doc = new Document();
     doc.add(new NumericDocValuesField("foo", 0));
     w.addDocument(doc);
-    w.shutdown();
+    w.close();
 
     IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));
     iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);
@@ -459,7 +459,7 @@ public class TestDocValuesIndexing extends LuceneTestCase {
     doc = new Document();
     doc.add(new SortedDocValuesField("foo", new BytesRef("hello")));
     w.addDocument(doc);
-    w.shutdown();
+    w.close();
     dir.close();
   }
 
@@ -507,7 +507,7 @@ public class TestDocValuesIndexing extends LuceneTestCase {
       t.join();
     }
     assertTrue(hitExc.get());
-    w.shutdown();
+    w.close();
     dir.close();
   }
 
@@ -525,7 +525,7 @@ public class TestDocValuesIndexing extends LuceneTestCase {
     doc = new Document();
     doc.add(new SortedDocValuesField("foo", new BytesRef("hello")));
     w2.addDocument(doc);
-    w2.shutdown();
+    w2.close();
 
     try {
       w.addIndexes(new Directory[] {dir2});
@@ -542,7 +542,7 @@ public class TestDocValuesIndexing extends LuceneTestCase {
 
     r.close();
     dir2.close();
-    w.shutdown();
+    w.close();
     dir.close();
   }
 
@@ -564,7 +564,7 @@ public class TestDocValuesIndexing extends LuceneTestCase {
     IndexReader ir = writer.getReader();
     assertEquals(1, ir.numDocs());
     ir.close();
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
 
@@ -575,7 +575,7 @@ public class TestDocValuesIndexing extends LuceneTestCase {
     Document doc = new Document();
     doc.add(new NumericDocValuesField("dv", 0L));
     writer.addDocument(doc);
-    writer.shutdown();
+    writer.close();
 
     conf = newIndexWriterConfig(new MockAnalyzer(random()));
     writer = new IndexWriter(dir, conf);
@@ -587,7 +587,7 @@ public class TestDocValuesIndexing extends LuceneTestCase {
     } catch (IllegalArgumentException iae) {
       // expected
     }
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
 
@@ -598,7 +598,7 @@ public class TestDocValuesIndexing extends LuceneTestCase {
     Document doc = new Document();
     doc.add(new NumericDocValuesField("dv", 0L));
     writer.addDocument(doc);
-    writer.shutdown();
+    writer.close();
 
     conf = newIndexWriterConfig(new MockAnalyzer(random()));
     writer = new IndexWriter(dir, conf);
@@ -606,7 +606,7 @@ public class TestDocValuesIndexing extends LuceneTestCase {
     doc = new Document();
     doc.add(new SortedDocValuesField("dv", new BytesRef("foo")));
     writer.addDocument(doc);
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
 
@@ -621,7 +621,7 @@ public class TestDocValuesIndexing extends LuceneTestCase {
     doc = new Document();
     doc.add(new SortedDocValuesField("dv", new BytesRef("foo")));
     writer.addDocument(doc);
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
 
@@ -637,7 +637,7 @@ public class TestDocValuesIndexing extends LuceneTestCase {
     doc = new Document();
     doc.add(new SortedDocValuesField("dv", new BytesRef("foo")));
     writer.addDocument(doc);
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
 
@@ -648,14 +648,14 @@ public class TestDocValuesIndexing extends LuceneTestCase {
     Document doc = new Document();
     doc.add(new NumericDocValuesField("dv", 0L));
     writer.addDocument(doc);
-    writer.shutdown();
+    writer.close();
     conf = newIndexWriterConfig(new MockAnalyzer(random()));
     conf.setOpenMode(IndexWriterConfig.OpenMode.CREATE);
     writer = new IndexWriter(dir, conf);
     doc = new Document();
     doc.add(new SortedDocValuesField("dv", new BytesRef("foo")));
     writer.addDocument(doc);
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
 
@@ -666,7 +666,7 @@ public class TestDocValuesIndexing extends LuceneTestCase {
     Document doc = new Document();
     doc.add(new NumericDocValuesField("dv", 0L));
     writer.addDocument(doc);
-    writer.shutdown();
+    writer.close();
 
     Directory dir2 = newDirectory();
     conf = newIndexWriterConfig(new MockAnalyzer(random()));
@@ -680,7 +680,7 @@ public class TestDocValuesIndexing extends LuceneTestCase {
     } catch (IllegalArgumentException iae) {
       // expected
     }
-    writer.shutdown();
+    writer.close();
 
     dir.close();
     dir2.close();
@@ -693,7 +693,7 @@ public class TestDocValuesIndexing extends LuceneTestCase {
     Document doc = new Document();
     doc.add(new NumericDocValuesField("dv", 0L));
     writer.addDocument(doc);
-    writer.shutdown();
+    writer.close();
 
     Directory dir2 = newDirectory();
     conf = newIndexWriterConfig(new MockAnalyzer(random()));
@@ -709,7 +709,7 @@ public class TestDocValuesIndexing extends LuceneTestCase {
       // expected
     }
     readers[0].close();
-    writer.shutdown();
+    writer.close();
 
     dir.close();
     dir2.close();
@@ -722,7 +722,7 @@ public class TestDocValuesIndexing extends LuceneTestCase {
     Document doc = new Document();
     doc.add(new NumericDocValuesField("dv", 0L));
     writer.addDocument(doc);
-    writer.shutdown();
+    writer.close();
 
     Directory dir2 = newDirectory();
     conf = newIndexWriterConfig(new MockAnalyzer(random()));
@@ -736,7 +736,7 @@ public class TestDocValuesIndexing extends LuceneTestCase {
     } catch (IllegalArgumentException iae) {
       // expected
     }
-    writer.shutdown();
+    writer.close();
     dir2.close();
     dir.close();
   }
@@ -748,7 +748,7 @@ public class TestDocValuesIndexing extends LuceneTestCase {
     Document doc = new Document();
     doc.add(new NumericDocValuesField("dv", 0L));
     writer.addDocument(doc);
-    writer.shutdown();
+    writer.close();
 
     Directory dir2 = newDirectory();
     conf = newIndexWriterConfig(new MockAnalyzer(random()));
@@ -764,7 +764,7 @@ public class TestDocValuesIndexing extends LuceneTestCase {
     } catch (IllegalArgumentException iae) {
       // expected
     }
-    writer.shutdown();
+    writer.close();
     dir2.close();
     dir.close();
   }
@@ -783,7 +783,7 @@ public class TestDocValuesIndexing extends LuceneTestCase {
     writer.addDocument(doc);
     
     DirectoryReader r = writer.getReader();
-    writer.shutdown();
+    writer.close();
 
     AtomicReader subR = r.leaves().get(0).reader();
     assertEquals(2, subR.numDocs());
diff --git lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions.java lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions.java
index d14286b..edb81cc 100644
--- lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions.java
+++ lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions.java
@@ -58,7 +58,7 @@ public class TestDocsAndPositions extends LuceneTestCase {
       writer.addDocument(doc);
     }
     IndexReader reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
 
     int num = atLeast(13);
     for (int i = 0; i < num; i++) {
@@ -141,7 +141,7 @@ public class TestDocsAndPositions extends LuceneTestCase {
     }
 
     IndexReader reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
 
     int num = atLeast(13);
     for (int i = 0; i < num; i++) {
@@ -218,7 +218,7 @@ public class TestDocsAndPositions extends LuceneTestCase {
     }
 
     IndexReader reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
 
     int num = atLeast(13);
     for (int i = 0; i < num; i++) {
@@ -295,7 +295,7 @@ public class TestDocsAndPositions extends LuceneTestCase {
 
     // now do searches
     IndexReader reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
 
     int num = atLeast(13);
     for (int i = 0; i < num; i++) {
@@ -348,7 +348,7 @@ public class TestDocsAndPositions extends LuceneTestCase {
     docid = disi.docID();
     assertEquals(-1, docid);
     assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);
-    writer.shutdown();
+    writer.close();
     r.close();
     dir.close();
   }
@@ -373,7 +373,7 @@ public class TestDocsAndPositions extends LuceneTestCase {
     docid = disi.docID();
     assertEquals(-1, docid);
     assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);
-    writer.shutdown();
+    writer.close();
     r.close();
     dir.close();
   }
diff --git lucene/core/src/test/org/apache/lucene/index/TestDocumentWriter.java lucene/core/src/test/org/apache/lucene/index/TestDocumentWriter.java
index a3f2bc4..991b676 100644
--- lucene/core/src/test/org/apache/lucene/index/TestDocumentWriter.java
+++ lucene/core/src/test/org/apache/lucene/index/TestDocumentWriter.java
@@ -26,7 +26,6 @@ import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.FieldType;
-import org.apache.lucene.document.StringField;
 import org.apache.lucene.document.TextField;
 import org.apache.lucene.index.FieldInfo.IndexOptions;
 import org.apache.lucene.search.DocIdSetIterator;
@@ -62,7 +61,7 @@ public class TestDocumentWriter extends LuceneTestCase {
     writer.addDocument(testDoc);
     writer.commit();
     SegmentCommitInfo info = writer.newestSegment();
-    writer.shutdown();
+    writer.close();
     //After adding the document, we should be able to read it back in
     SegmentReader reader = new SegmentReader(info, newIOContext(random()));
     assertTrue(reader != null);
@@ -124,7 +123,7 @@ public class TestDocumentWriter extends LuceneTestCase {
     writer.addDocument(doc);
     writer.commit();
     SegmentCommitInfo info = writer.newestSegment();
-    writer.shutdown();
+    writer.close();
     SegmentReader reader = new SegmentReader(info, newIOContext(random()));
 
     DocsAndPositionsEnum termPositions = MultiFields.getTermPositionsEnum(reader, MultiFields.getLiveDocs(reader),
@@ -196,7 +195,7 @@ public class TestDocumentWriter extends LuceneTestCase {
     writer.addDocument(doc);
     writer.commit();
     SegmentCommitInfo info = writer.newestSegment();
-    writer.shutdown();
+    writer.close();
     SegmentReader reader = new SegmentReader(info, newIOContext(random()));
 
     DocsAndPositionsEnum termPositions = MultiFields.getTermPositionsEnum(reader, reader.getLiveDocs(), "f1", new BytesRef("a"));
@@ -238,7 +237,7 @@ public class TestDocumentWriter extends LuceneTestCase {
     writer.addDocument(doc);
     writer.commit();
     SegmentCommitInfo info = writer.newestSegment();
-    writer.shutdown();
+    writer.close();
     SegmentReader reader = new SegmentReader(info, newIOContext(random()));
 
     DocsAndPositionsEnum termPositions = reader.termPositionsEnum(new Term("preanalyzed", "term1"));
@@ -283,7 +282,7 @@ public class TestDocumentWriter extends LuceneTestCase {
     IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));
     writer.addDocument(doc);
     writer.forceMerge(1); // be sure to have a single segment
-    writer.shutdown();
+    writer.close();
 
     TestUtil.checkIndex(dir);
 
diff --git lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs.java lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs.java
index c35d3db..6fa47f1 100644
--- lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs.java
+++ lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs.java
@@ -90,9 +90,9 @@ public class TestDuelingCodecs extends LuceneTestCase {
     createRandomIndex(numdocs, rightWriter, seed);
 
     leftReader = maybeWrapReader(leftWriter.getReader());
-    leftWriter.shutdown();
+    leftWriter.close();
     rightReader = maybeWrapReader(rightWriter.getReader());
-    rightWriter.shutdown();
+    rightWriter.close();
     
     // check that our readers are valid
     TestUtil.checkReader(leftReader);
diff --git lucene/core/src/test/org/apache/lucene/index/TestExceedMaxTermLength.java lucene/core/src/test/org/apache/lucene/index/TestExceedMaxTermLength.java
index 05773bf..1c2008e 100644
--- lucene/core/src/test/org/apache/lucene/index/TestExceedMaxTermLength.java
+++ lucene/core/src/test/org/apache/lucene/index/TestExceedMaxTermLength.java
@@ -55,9 +55,7 @@ public class TestExceedMaxTermLength extends LuceneTestCase {
   public void test() throws Exception {
     
     IndexWriter w = new IndexWriter
-      (dir, newIndexWriterConfig(random(), 
-                                 TEST_VERSION_CURRENT,
-                                 new MockAnalyzer(random())));
+      (dir, newIndexWriterConfig(random(), new MockAnalyzer(random())));
     try {
       final FieldType ft = new FieldType();
       ft.setIndexed(true);
@@ -101,7 +99,7 @@ public class TestExceedMaxTermLength extends LuceneTestCase {
             msg.contains("bytes can be at most") && msg.contains("in length; got"));
       }
     } finally {
-      w.shutdown();
+      w.close();
     }
   }
 }
diff --git lucene/core/src/test/org/apache/lucene/index/TestFieldReuse.java lucene/core/src/test/org/apache/lucene/index/TestFieldReuse.java
index 94de4c6..43e6c71 100644
--- lucene/core/src/test/org/apache/lucene/index/TestFieldReuse.java
+++ lucene/core/src/test/org/apache/lucene/index/TestFieldReuse.java
@@ -128,7 +128,7 @@ public class TestFieldReuse extends BaseTokenStreamTestCase {
   
   public void testIndexWriterActuallyReuses() throws IOException {
     Directory dir = newDirectory();
-    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, null);
+    IndexWriterConfig iwc = new IndexWriterConfig(null);
     IndexWriter iw = new IndexWriter(dir, iwc);
     final MyField field1 = new MyField();
     iw.addDocument(new IndexDocument() {
@@ -156,7 +156,7 @@ public class TestFieldReuse extends BaseTokenStreamTestCase {
       }
     });
     assertSame(previous, field2.lastSeen);
-    iw.shutdown();
+    iw.close();
     dir.close();
   }
   
diff --git lucene/core/src/test/org/apache/lucene/index/TestFieldsReader.java lucene/core/src/test/org/apache/lucene/index/TestFieldsReader.java
index d5678fe..9ac0e86 100644
--- lucene/core/src/test/org/apache/lucene/index/TestFieldsReader.java
+++ lucene/core/src/test/org/apache/lucene/index/TestFieldsReader.java
@@ -57,7 +57,7 @@ public class TestFieldsReader extends LuceneTestCase {
     conf.getMergePolicy().setNoCFSRatio(0.0);
     IndexWriter writer = new IndexWriter(dir, conf);
     writer.addDocument(testDoc);
-    writer.shutdown();
+    writer.close();
     FaultyIndexInput.doFail = false;
   }
   
@@ -204,7 +204,7 @@ public class TestFieldsReader extends LuceneTestCase {
       for(int i=0;i<2;i++)
         writer.addDocument(testDoc);
       writer.forceMerge(1);
-      writer.shutdown();
+      writer.close();
 
       IndexReader reader = DirectoryReader.open(dir);
 
diff --git lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader.java lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader.java
index 0901693..0995133 100644
--- lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader.java
+++ lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader.java
@@ -130,7 +130,7 @@ public class TestFilterAtomicReader extends LuceneTestCase {
     d3.add(newTextField("default", "two four", Field.Store.YES));
     writer.addDocument(d3);
 
-    writer.shutdown();
+    writer.close();
 
     Directory target = newDirectory();
 
@@ -140,7 +140,7 @@ public class TestFilterAtomicReader extends LuceneTestCase {
     writer = new IndexWriter(target, newIndexWriterConfig(new MockAnalyzer(random())));
     IndexReader reader = new TestReader(DirectoryReader.open(directory));
     writer.addIndexes(reader);
-    writer.shutdown();
+    writer.close();
     reader.close();
     reader = DirectoryReader.open(target);
     
diff --git lucene/core/src/test/org/apache/lucene/index/TestFlex.java lucene/core/src/test/org/apache/lucene/index/TestFlex.java
index ff938f6..7f37884 100644
--- lucene/core/src/test/org/apache/lucene/index/TestFlex.java
+++ lucene/core/src/test/org/apache/lucene/index/TestFlex.java
@@ -33,7 +33,7 @@ public class TestFlex extends LuceneTestCase {
 
     IndexWriter w = new IndexWriter(
         d,
-        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).
+        new IndexWriterConfig(new MockAnalyzer(random())).
             setMaxBufferedDocs(7).setMergePolicy(newLogMergePolicy())
     );
 
@@ -58,7 +58,7 @@ public class TestFlex extends LuceneTestCase {
       r.close();
     }
 
-    w.shutdown();
+    w.close();
     d.close();
   }
 
@@ -79,7 +79,7 @@ public class TestFlex extends LuceneTestCase {
       // ok -- codec is not required to support this op
     }
     r.close();
-    w.shutdown();
+    w.close();
     d.close();
   }
 }
diff --git lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.java lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.java
index 0b85237..1c9e8b7 100644
--- lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.java
+++ lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.java
@@ -111,7 +111,7 @@ public class TestFlushByRamOrCountsPolicy extends LuceneTestCase {
     if (ensureNotStalled) {
       assertFalse(docsWriter.flushControl.stallControl.wasStalled());
     }
-    writer.shutdown();
+    writer.close();
     assertEquals(0, flushControl.activeBytes());
     dir.close();
   }
@@ -162,7 +162,7 @@ public class TestFlushByRamOrCountsPolicy extends LuceneTestCase {
       assertTrue("peak bytes without flush exceeded watermark",
           flushPolicy.peakDocCountWithoutFlush <= iwc.getMaxBufferedDocs());
       assertActiveBytesAfter(flushControl);
-      writer.shutdown();
+      writer.close();
       assertEquals(0, flushControl.activeBytes());
       dir.close();
     }
@@ -224,7 +224,7 @@ public class TestFlushByRamOrCountsPolicy extends LuceneTestCase {
       assertFalse("never block if we don't flush on RAM", docsWriter.flushControl.stallControl.hasBlocked());
     }
     r.close();
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
 
@@ -274,7 +274,7 @@ public class TestFlushByRamOrCountsPolicy extends LuceneTestCase {
         assertTrue(docsWriter.flushControl.stallControl.wasStalled());
       }
       assertActiveBytesAfter(flushControl);
-      writer.shutdown();
+      writer.close();
       dir.close();
     }
   }
diff --git lucene/core/src/test/org/apache/lucene/index/TestForTooMuchCloning.java lucene/core/src/test/org/apache/lucene/index/TestForTooMuchCloning.java
index dff1377..bd1e94d 100644
--- lucene/core/src/test/org/apache/lucene/index/TestForTooMuchCloning.java
+++ lucene/core/src/test/org/apache/lucene/index/TestForTooMuchCloning.java
@@ -28,7 +28,6 @@ import org.apache.lucene.store.MockDirectoryWrapper;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.TestUtil;
-import org.apache.lucene.util.TestUtil;
 
 public class TestForTooMuchCloning extends LuceneTestCase {
 
@@ -57,7 +56,7 @@ public class TestForTooMuchCloning extends LuceneTestCase {
       w.addDocument(doc);
     }
     final IndexReader r = w.getReader();
-    w.shutdown();
+    w.close();
 
     final int cloneCount = dir.getInputCloneCount();
     //System.out.println("merge clone count=" + cloneCount);
diff --git lucene/core/src/test/org/apache/lucene/index/TestForceMergeForever.java lucene/core/src/test/org/apache/lucene/index/TestForceMergeForever.java
index 4ecd9da..54f1008 100644
--- lucene/core/src/test/org/apache/lucene/index/TestForceMergeForever.java
+++ lucene/core/src/test/org/apache/lucene/index/TestForceMergeForever.java
@@ -74,7 +74,7 @@ public class TestForceMergeForever extends LuceneTestCase {
       ((LogMergePolicy) mp).setMergeFactor(mergeAtOnce);
     } else {
       // skip test
-      w.shutdown();
+      w.close();
       d.close();
       return;
     }
@@ -101,7 +101,7 @@ public class TestForceMergeForever extends LuceneTestCase {
     doStop.set(true);
     t.join();
     assertTrue("merge count is " + w.mergeCount.get(), w.mergeCount.get() <= 1);
-    w.shutdown();
+    w.close();
     d.close();
     docs.close();
   }
diff --git lucene/core/src/test/org/apache/lucene/index/TestIndexFileDeleter.java lucene/core/src/test/org/apache/lucene/index/TestIndexFileDeleter.java
index 749a3f7..73a05be 100644
--- lucene/core/src/test/org/apache/lucene/index/TestIndexFileDeleter.java
+++ lucene/core/src/test/org/apache/lucene/index/TestIndexFileDeleter.java
@@ -66,7 +66,7 @@ public class TestIndexFileDeleter extends LuceneTestCase {
     for(;i<45;i++) {
       addDoc(writer, i);
     }
-    writer.shutdown();
+    writer.close();
 
     // Delete one doc so we get a .del file:
     writer = new IndexWriter(
@@ -77,7 +77,7 @@ public class TestIndexFileDeleter extends LuceneTestCase {
     );
     Term searchTerm = new Term("id", "7");
     writer.deleteDocuments(searchTerm);
-    writer.shutdown();
+    writer.close();
 
     // Now, artificially create an extra .del file & extra
     // .s0 file:
@@ -127,7 +127,7 @@ public class TestIndexFileDeleter extends LuceneTestCase {
     // files and nothing more:
     writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))
                                     .setOpenMode(OpenMode.APPEND));
-    writer.shutdown();
+    writer.close();
 
     String[] files2 = dir.listAll();
     dir.close();
diff --git lucene/core/src/test/org/apache/lucene/index/TestIndexReaderClose.java lucene/core/src/test/org/apache/lucene/index/TestIndexReaderClose.java
index 8aa3219..9e7741b 100644
--- lucene/core/src/test/org/apache/lucene/index/TestIndexReaderClose.java
+++ lucene/core/src/test/org/apache/lucene/index/TestIndexReaderClose.java
@@ -38,9 +38,9 @@ public class TestIndexReaderClose extends LuceneTestCase {
     final int iters = 1000 +  1 + random().nextInt(20);
     for (int j = 0; j < iters; j++) {
       Directory dir = newDirectory();
-      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), TEST_VERSION_CURRENT, new MockAnalyzer(random())));
+      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), new MockAnalyzer(random())));
       writer.commit();
-      writer.shutdown();
+      writer.close();
       DirectoryReader open = DirectoryReader.open(dir);
       final boolean throwOnClose = !rarely();
       AtomicReader wrap = SlowCompositeReaderWrapper.wrap(open);
diff --git lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.java lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.java
index 1bb805c..4061be5 100644
--- lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.java
+++ lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.java
@@ -83,11 +83,9 @@ import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.SetOnce;
 import org.apache.lucene.util.TestUtil;
 import org.apache.lucene.util.ThreadInterruptedException;
-import org.apache.lucene.util.Version;
 import org.apache.lucene.util.automaton.Automata;
 import org.apache.lucene.util.automaton.CharacterRunAutomaton;
 import org.apache.lucene.util.automaton.Automaton;
-import org.apache.lucene.util.packed.PackedInts;
 import org.junit.Test;
 
 public class TestIndexWriter extends LuceneTestCase {
@@ -114,7 +112,7 @@ public class TestIndexWriter extends LuceneTestCase {
             addDocWithIndex(writer,i);
         }
         assertEquals(100, writer.maxDoc());
-        writer.shutdown();
+        writer.close();
 
         // delete 40 documents
         writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))
@@ -122,7 +120,7 @@ public class TestIndexWriter extends LuceneTestCase {
         for (i = 0; i < 40; i++) {
             writer.deleteDocuments(new Term("id", ""+i));
         }
-        writer.shutdown();
+        writer.close();
 
         reader = DirectoryReader.open(dir);
         assertEquals(60, reader.numDocs());
@@ -134,7 +132,7 @@ public class TestIndexWriter extends LuceneTestCase {
         writer.forceMerge(1);
         assertEquals(60, writer.maxDoc());
         assertEquals(60, writer.numDocs());
-        writer.shutdown();
+        writer.close();
 
         // check that the index reader gives the same numbers.
         reader = DirectoryReader.open(dir);
@@ -148,7 +146,7 @@ public class TestIndexWriter extends LuceneTestCase {
                                         .setOpenMode(OpenMode.CREATE));
         assertEquals(0, writer.maxDoc());
         assertEquals(0, writer.numDocs());
-        writer.shutdown();
+        writer.close();
         dir.close();
     }
 
@@ -171,7 +169,7 @@ public class TestIndexWriter extends LuceneTestCase {
 
     public static void assertNoUnreferencedFiles(Directory dir, String message) throws IOException {
       String[] startFiles = dir.listAll();
-      new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))).rollback();
+      new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random()))).rollback();
       String[] endFiles = dir.listAll();
 
       Arrays.sort(startFiles);
@@ -202,7 +200,7 @@ public class TestIndexWriter extends LuceneTestCase {
       // add one document & close writer
       IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));
       addDoc(writer);
-      writer.shutdown();
+      writer.close();
 
       // now open reader:
       IndexReader reader = DirectoryReader.open(dir);
@@ -213,7 +211,7 @@ public class TestIndexWriter extends LuceneTestCase {
                                       .setOpenMode(OpenMode.CREATE));
       assertEquals("should be zero documents", writer.maxDoc(), 0);
       addDoc(writer);
-      writer.shutdown();
+      writer.close();
 
       assertEquals("should be one document", reader.numDocs(), 1);
       IndexReader reader2 = DirectoryReader.open(dir);
@@ -233,7 +231,7 @@ public class TestIndexWriter extends LuceneTestCase {
         addDoc(writer);
 
         // close
-        writer.shutdown();
+        writer.close();
         try {
           addDoc(writer);
           fail("did not hit AlreadyClosedException");
@@ -249,7 +247,7 @@ public class TestIndexWriter extends LuceneTestCase {
       Directory dir = newDirectory();
       IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));
       writer.commit();
-      writer.shutdown();
+      writer.close();
 
       IndexReader reader = DirectoryReader.open(dir);
       assertEquals(0, reader.maxDoc());
@@ -259,7 +257,7 @@ public class TestIndexWriter extends LuceneTestCase {
       writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))
                                        .setOpenMode(OpenMode.APPEND));
       writer.commit();
-      writer.shutdown();
+      writer.close();
 
       reader = DirectoryReader.open(dir);
       assertEquals(0, reader.maxDoc());
@@ -282,7 +280,7 @@ public class TestIndexWriter extends LuceneTestCase {
         doc.add(newField("f"+j, "aaa", storedTextType));
         writer.addDocument(doc);
       }
-      writer.shutdown();
+      writer.close();
 
       IndexReader reader = DirectoryReader.open(dir);
       assertEquals(100, reader.maxDoc());
@@ -318,7 +316,7 @@ public class TestIndexWriter extends LuceneTestCase {
         assertTrue(numFile > lastNumFile);
         lastNumFile = numFile;
       }
-      writer.shutdown();
+      writer.close();
       dir.close();
     }
 
@@ -374,7 +372,7 @@ public class TestIndexWriter extends LuceneTestCase {
           assertTrue(flushCount > lastFlushCount);
         }
       }
-      writer.shutdown();
+      writer.close();
       dir.close();
     }
 
@@ -435,7 +433,7 @@ public class TestIndexWriter extends LuceneTestCase {
           assertTrue(flushCount > lastFlushCount);
         }
       }
-      writer.shutdown();
+      writer.close();
       dir.close();
     }
 
@@ -478,7 +476,7 @@ public class TestIndexWriter extends LuceneTestCase {
           writer.addDocument(doc);
         }
       }
-      writer.shutdown();
+      writer.close();
 
       IndexReader reader = DirectoryReader.open(dir);
       IndexSearcher searcher = newSearcher(reader);
@@ -508,7 +506,7 @@ public class TestIndexWriter extends LuceneTestCase {
         doc.add(f);
         writer.addDocument(doc);
       }
-      writer.shutdown();
+      writer.close();
 
       Term searchTerm = new Term("field", "aaa");
 
@@ -533,7 +531,7 @@ public class TestIndexWriter extends LuceneTestCase {
         doc.add(f);
         writer.addDocument(doc);
       }
-      writer.shutdown();
+      writer.close();
       reader = DirectoryReader.open(dir);
       searcher = newSearcher(reader);
       hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;
@@ -565,7 +563,7 @@ public class TestIndexWriter extends LuceneTestCase {
       customType.setStoreTermVectorOffsets(true);
       doc.add(newField("field", b.toString(), customType));
       writer.addDocument(doc);
-      writer.shutdown();
+      writer.close();
 
       IndexReader reader = DirectoryReader.open(dir);
       assertEquals(1, reader.maxDoc());
@@ -609,7 +607,7 @@ public class TestIndexWriter extends LuceneTestCase {
       for (int i = 0; i < 100; i++) {
         addDoc(writer);
       }
-      writer.shutdown();
+      writer.close();
       Term searchTerm = new Term("content", "aaa");
       IndexReader reader = DirectoryReader.open(dir);
       IndexSearcher searcher = newSearcher(reader);
@@ -619,7 +617,7 @@ public class TestIndexWriter extends LuceneTestCase {
 
       writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))
         .setOpenMode(OpenMode.CREATE));
-      writer.shutdown();
+      writer.close();
       dir.close();
     }
 
@@ -640,7 +638,7 @@ public class TestIndexWriter extends LuceneTestCase {
       for(int i=0;i<19;i++)
         writer.addDocument(doc);
       writer.flush(false, true);
-      writer.shutdown();
+      writer.close();
       SegmentInfos sis = new SegmentInfos();
       sis.read(dir);
       // Since we flushed w/o allowing merging we should now
@@ -666,7 +664,7 @@ public class TestIndexWriter extends LuceneTestCase {
         System.out.println("\nTEST: now add empty doc");
       }
       writer.addDocument(new Document());
-      writer.shutdown();
+      writer.close();
       IndexReader reader = DirectoryReader.open(dir);
       assertEquals(2, reader.numDocs());
       reader.close();
@@ -689,7 +687,7 @@ public class TestIndexWriter extends LuceneTestCase {
     customType.setStoreTermVectors(true);
     document.add(newField("tvtest", "", customType));
     iw.addDocument(document);
-    iw.shutdown();
+    iw.close();
     dir.close();
   }
 
@@ -710,7 +708,7 @@ public class TestIndexWriter extends LuceneTestCase {
       Thread.currentThread().setPriority(Thread.MAX_PRIORITY);
       for(int i=0;i<4;i++)
         iw.addDocument(document);
-      iw.shutdown();
+      iw.close();
       dir.close();
     } finally {
       Thread.currentThread().setPriority(pri);
@@ -751,14 +749,14 @@ public class TestIndexWriter extends LuceneTestCase {
       for(int j=0;j<4;j++)
         writer.addDocument(doc);
 
-      writer.shutdown();
+      writer.close();
 
       if (0 == i % 4) {
         writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));
         //LogMergePolicy lmp2 = (LogMergePolicy) writer.getConfig().getMergePolicy();
         //lmp2.setNoCFSRatio(0.0);
         writer.forceMerge(1);
-        writer.shutdown();
+        writer.close();
       }
     }
     dir.close();
@@ -777,7 +775,7 @@ public class TestIndexWriter extends LuceneTestCase {
     b.append(" x");
     doc.add(newTextField("field", b.toString(), Field.Store.NO));
     writer.addDocument(doc);
-    writer.shutdown();
+    writer.close();
 
     IndexReader reader = DirectoryReader.open(dir);
     Term t = new Term("field", "x");
@@ -795,7 +793,7 @@ public class TestIndexWriter extends LuceneTestCase {
     Document doc = new Document();
     doc.add(newTextField("", "a b c", Field.Store.NO));
     writer.addDocument(doc);
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
   
@@ -805,7 +803,7 @@ public class TestIndexWriter extends LuceneTestCase {
     Document doc = new Document();
     doc.add(newTextField("", "a b c", Field.Store.NO));
     writer.addDocument(doc);  
-    writer.shutdown();
+    writer.close();
     DirectoryReader reader = DirectoryReader.open(dir);
     AtomicReader subreader = getOnlySegmentReader(reader);
     TermsEnum te = subreader.fields().terms("").iterator(null);
@@ -826,7 +824,7 @@ public class TestIndexWriter extends LuceneTestCase {
     doc.add(newStringField("", "b", Field.Store.NO));
     doc.add(newStringField("", "c", Field.Store.NO));
     writer.addDocument(doc);  
-    writer.shutdown();
+    writer.close();
     DirectoryReader reader = DirectoryReader.open(dir);
     AtomicReader subreader = getOnlySegmentReader(reader);
     TermsEnum te = subreader.fields().terms("").iterator(null);
@@ -879,7 +877,7 @@ public class TestIndexWriter extends LuceneTestCase {
     w.commit();
     assertTrue(w.beforeWasCalled);
     assertTrue(w.afterWasCalled);
-    w.shutdown();
+    w.close();
 
     IndexReader ir = DirectoryReader.open(dir);
     assertEquals(0, ir.numDocs());
@@ -918,7 +916,7 @@ public class TestIndexWriter extends LuceneTestCase {
     } catch (IllegalArgumentException iea) {
       // expected
     }
-    w.shutdown();
+    w.close();
     dir.close();
   }
 
@@ -937,7 +935,7 @@ public class TestIndexWriter extends LuceneTestCase {
     doc.add(f);
     doc.add(f2);
     w.addDocument(doc);
-    w.shutdown();
+    w.close();
 
     IndexReader r = DirectoryReader.open(dir);
     Terms tpv = r.getTermVectors(0).terms("field");
@@ -982,11 +980,11 @@ public class TestIndexWriter extends LuceneTestCase {
     Directory dir2 = newDirectory();
     IndexWriter writer2 = new IndexWriter(dir2, newIndexWriterConfig(new MockAnalyzer(random())));
     writer2.addDocument(doc);
-    writer2.shutdown();
+    writer2.close();
 
     IndexReader r1 = DirectoryReader.open(dir2);
     writer.addIndexes(r1, r1);
-    writer.shutdown();
+    writer.close();
 
     IndexReader r3 = DirectoryReader.open(dir);
     assertEquals(5, r3.numDocs());
@@ -1013,8 +1011,7 @@ public class TestIndexWriter extends LuceneTestCase {
       // make a little directory for addIndexes
       // LUCENE-2239: won't work with NIOFS/MMAP
       adder = new MockDirectoryWrapper(random, new RAMDirectory());
-      IndexWriterConfig conf = newIndexWriterConfig(random,
-          TEST_VERSION_CURRENT, new MockAnalyzer(random));
+      IndexWriterConfig conf = newIndexWriterConfig(random, new MockAnalyzer(random));
       IndexWriter w = new IndexWriter(adder, conf);
       Document doc = new Document();
       doc.add(newStringField(random, "id", "500", Field.Store.NO));
@@ -1047,7 +1044,7 @@ public class TestIndexWriter extends LuceneTestCase {
       }
       w.addDocument(doc);
       w.deleteDocuments(new Term("id", "500"));
-      w.shutdown();
+      w.close();
     }
 
     @Override
@@ -1055,7 +1052,7 @@ public class TestIndexWriter extends LuceneTestCase {
       // LUCENE-2239: won't work with NIOFS/MMAP
       MockDirectoryWrapper dir = new MockDirectoryWrapper(random, new RAMDirectory());
 
-      // When interrupt arrives in w.shutdown(), this can
+      // When interrupt arrives in w.close(), this can
       // lead to double-write of files:
       dir.setPreventDoubleWrite(false);
 
@@ -1072,14 +1069,14 @@ public class TestIndexWriter extends LuceneTestCase {
               // until this one successfully closes:
               // w.rollback();
               try {
-                w.shutdown();
+                w.close();
               } catch (AlreadyClosedException ace) {
                 // OK
               }
               w = null;
             }
             IndexWriterConfig conf = newIndexWriterConfig(random,
-                                                          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2);
+                                                          new MockAnalyzer(random)).setMaxBufferedDocs(2);
             w = new IndexWriter(dir, conf);
 
             Document doc = new Document();
@@ -1131,7 +1128,7 @@ public class TestIndexWriter extends LuceneTestCase {
                 w.forceMerge(1);
               }
             }
-            w.shutdown();
+            w.close();
             w = null;
             DirectoryReader.open(dir).close();
 
@@ -1337,7 +1334,7 @@ public class TestIndexWriter extends LuceneTestCase {
     w.addDocument(doc);
     w.commit();
     w.forceMerge(1);   // force segment merge.
-    w.shutdown();
+    w.close();
 
     IndexReader ir = DirectoryReader.open(dir);
     StoredDocument doc2 = ir.document(0);
@@ -1373,7 +1370,7 @@ public class TestIndexWriter extends LuceneTestCase {
     Directory dir = newDirectory();
     IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));
     writer.addDocument(new Document());
-    writer.shutdown();
+    writer.close();
 
     dir.close();
   }
@@ -1463,7 +1460,7 @@ public class TestIndexWriter extends LuceneTestCase {
       }
       //assertTrue(files.contains("_2.cfs"));
 
-      w.shutdown();
+      w.close();
       r2.close();
 
       dir.close();
@@ -1506,7 +1503,7 @@ public class TestIndexWriter extends LuceneTestCase {
     writer.deleteUnusedFiles();
     assertEquals(1, DirectoryReader.listCommits(dir).size());
 
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
 
@@ -1515,7 +1512,7 @@ public class TestIndexWriter extends LuceneTestCase {
     // then IndexWriter ctor succeeds. Previously (LUCENE-2386) it failed
     // when listAll() was called in IndexFileDeleter.
     Directory dir = newFSDirectory(createTempDir("emptyFSDirNoLock"), NoLockFactory.getNoLockFactory());
-    new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))).shutdown();
+    new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))).close();
     dir.close();
   }
 
@@ -1599,7 +1596,7 @@ public class TestIndexWriter extends LuceneTestCase {
                                             .setMaxBufferedDocs(2)
                                             .setOpenMode(OpenMode.CREATE));
 
-    w2.shutdown();
+    w2.close();
     // If we don't do that, the test fails on Windows
     w.rollback();
 
@@ -1637,7 +1634,7 @@ public class TestIndexWriter extends LuceneTestCase {
       indexWriter.addDocument(doc);
     }
 
-    indexWriter.shutdown();
+    indexWriter.close();
 
     TestUtil.checkIndex(dir);
 
@@ -1727,7 +1724,7 @@ public class TestIndexWriter extends LuceneTestCase {
     w.forceMerge(1);
 
     IndexReader reader = w.getReader();
-    w.shutdown();
+    w.close();
 
     // Make sure all terms < max size were indexed
     assertEquals(1, reader.docFreq(new Term("content", "abc")));
@@ -1765,7 +1762,7 @@ public class TestIndexWriter extends LuceneTestCase {
     w.addDocument(doc);
 
     reader = w.getReader();
-    w.shutdown();
+    w.close();
     assertEquals(1, reader.docFreq(new Term("content", bigTerm)));
 
     reader.close();
@@ -1775,7 +1772,7 @@ public class TestIndexWriter extends LuceneTestCase {
   public void testDeleteAllNRTLeftoverFiles() throws Exception {
 
     Directory d = new MockDirectoryWrapper(random(), new RAMDirectory());
-    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));
+    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));
     Document doc = new Document();
     for(int i = 0; i < 20; i++) {
       for(int j = 0; j < 100; ++j) {
@@ -1791,13 +1788,13 @@ public class TestIndexWriter extends LuceneTestCase {
       assertTrue(d.listAll().length <= 2);
     }
 
-    w.shutdown();
+    w.close();
     d.close();
   }
 
   public void testNRTReaderVersion() throws Exception {
     Directory d = new MockDirectoryWrapper(random(), new RAMDirectory());
-    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));
+    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));
     Document doc = new Document();
     doc.add(newStringField("id", "0", Field.Store.YES));
     w.addDocument(doc);
@@ -1813,7 +1810,7 @@ public class TestIndexWriter extends LuceneTestCase {
 
     w.deleteDocuments(new Term("id", "0"));
     r = w.getReader();
-    w.shutdown();
+    w.close();
     long version3 = r.getVersion();
     r.close();
     assert(version3 > version2);
@@ -1835,14 +1832,14 @@ public class TestIndexWriter extends LuceneTestCase {
     } catch (LockObtainFailedException lofe) {
       // expected
     }
-    w1.shutdown();
+    w1.close();
     d.close();
   }
 
   public void testChangeIndexOptions() throws Exception {
     Directory dir = newDirectory();
     IndexWriter w = new IndexWriter(dir,
-                                    new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));
+                                    new IndexWriterConfig(new MockAnalyzer(random())));
 
     FieldType docsAndFreqs = new FieldType(TextField.TYPE_NOT_STORED);
     docsAndFreqs.setIndexOptions(IndexOptions.DOCS_AND_FREQS);
@@ -1858,20 +1855,20 @@ public class TestIndexWriter extends LuceneTestCase {
     doc = new Document();
     doc.add(new Field("field", "a b c", docsOnly));
     w.addDocument(doc);
-    w.shutdown();
+    w.close();
     dir.close();
   }
 
   public void testOnlyUpdateDocuments() throws Exception {
     Directory dir = newDirectory();
     IndexWriter w = new IndexWriter(dir,
-                                    new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));
+                                    new IndexWriterConfig(new MockAnalyzer(random())));
 
     final List<Document> docs = new ArrayList<>();
     docs.add(new Document());
     w.updateDocuments(new Term("foo", "bar"),
                       docs);
-    w.shutdown();
+    w.close();
     dir.close();
   }
 
@@ -1879,17 +1876,17 @@ public class TestIndexWriter extends LuceneTestCase {
   public void testPrepareCommitThenClose() throws Exception {
     Directory dir = newDirectory();
     IndexWriter w = new IndexWriter(dir,
-                                    new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));
+                                    new IndexWriterConfig(new MockAnalyzer(random())));
 
     w.prepareCommit();
     try {
-      w.shutdown();
+      w.close();
       fail("should have hit exception");
     } catch (IllegalStateException ise) {
       // expected
     }
     w.commit();
-    w.shutdown();
+    w.close();
     IndexReader r = DirectoryReader.open(dir);
     assertEquals(0, r.maxDoc());
     r.close();
@@ -1900,7 +1897,7 @@ public class TestIndexWriter extends LuceneTestCase {
   public void testPrepareCommitThenRollback() throws Exception {
     Directory dir = newDirectory();
     IndexWriter w = new IndexWriter(dir,
-                                    new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));
+                                    new IndexWriterConfig(new MockAnalyzer(random())));
 
     w.prepareCommit();
     w.rollback();
@@ -1912,7 +1909,7 @@ public class TestIndexWriter extends LuceneTestCase {
   public void testPrepareCommitThenRollback2() throws Exception {
     Directory dir = newDirectory();
     IndexWriter w = new IndexWriter(dir,
-                                    new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));
+                                    new IndexWriterConfig(new MockAnalyzer(random())));
 
     w.commit();
     w.addDocument(new Document());
@@ -1956,7 +1953,7 @@ public class TestIndexWriter extends LuceneTestCase {
     doc.add(f2);
     doc.add(f);
     w.addDocument(doc);
-    w.shutdown();
+    w.close();
     dir.close();
   }
   
@@ -1968,14 +1965,14 @@ public class TestIndexWriter extends LuceneTestCase {
     IndexWriter iw = new IndexWriter(dir, 
         newIndexWriterConfig(new MockAnalyzer(random())));
     iw.addDocument(new Document());
-    iw.shutdown();
+    iw.close();
     try {
       // Create my own random file:
       IndexOutput out = dir.createOutput("myrandomfile", newIOContext(random()));
       out.writeByte((byte) 42);
       out.close();
       
-      new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))).shutdown();
+      new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))).close();
       
       assertTrue(slowFileExists(dir, "myrandomfile"));
     } finally {
@@ -2000,7 +1997,7 @@ public class TestIndexWriter extends LuceneTestCase {
     doc.add(new TextField("body", "test of gaps", Field.Store.NO));
     iw.addDocument(doc);
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     IndexSearcher is = newSearcher(ir);
     PhraseQuery pq = new PhraseQuery();
     pq.add(new Term("body", "just"), 0);
@@ -2031,7 +2028,7 @@ public class TestIndexWriter extends LuceneTestCase {
     doc.add(new TextField("body", "test of gaps", Field.Store.NO));
     iw.addDocument(doc);
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     IndexSearcher is = newSearcher(ir);
     PhraseQuery pq = new PhraseQuery();
     pq.add(new Term("body", "just"), 0);
@@ -2045,7 +2042,7 @@ public class TestIndexWriter extends LuceneTestCase {
   // LUCENE-4398
   public void testRotatingFieldNames() throws Exception {
     Directory dir = newFSDirectory(createTempDir("TestIndexWriter.testChangingFields"));
-    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));
+    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));
     iwc.setRAMBufferSizeMB(0.2);
     iwc.setMaxBufferedDocs(-1);
     IndexWriter w = new IndexWriter(dir, iwc);
@@ -2084,7 +2081,7 @@ public class TestIndexWriter extends LuceneTestCase {
         upto = 0;
       }
     }
-    w.shutdown();
+    w.close();
     dir.close();
   }
   
@@ -2126,7 +2123,7 @@ public class TestIndexWriter extends LuceneTestCase {
         "value2", r.getIndexCommit().getUserData().get("key"));
     r.close();
     
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
   
@@ -2138,13 +2135,13 @@ public class TestIndexWriter extends LuceneTestCase {
       put("key", "value");
     }});
     assertEquals("value", writer.getCommitData().get("key"));
-    writer.shutdown();
+    writer.close();
     
     // validate that it's also visible when opening a new IndexWriter
     writer = new IndexWriter(dir, newIndexWriterConfig(null)
                                     .setOpenMode(OpenMode.APPEND));
     assertEquals("value", writer.getCommitData().get("key"));
-    writer.shutdown();
+    writer.close();
     
     dir.close();
   }
@@ -2170,7 +2167,7 @@ public class TestIndexWriter extends LuceneTestCase {
     IndexReader ir = iw.getReader();
     assertEquals(3, ir.numDocs());
     ir.close();
-    iw.shutdown();
+    iw.close();
     dir.close();
   }
   
@@ -2192,7 +2189,7 @@ public class TestIndexWriter extends LuceneTestCase {
     IndexReader ir = iw.getReader();
     assertEquals(3, ir.numDocs());
     ir.close();
-    iw.shutdown();
+    iw.close();
     dir.close();
   }
   
@@ -2214,7 +2211,7 @@ public class TestIndexWriter extends LuceneTestCase {
     IndexReader ir = iw.getReader();
     assertEquals(3, ir.numDocs());
     ir.close();
-    iw.shutdown();
+    iw.close();
     dir.close();
   }
   
@@ -2246,7 +2243,7 @@ public class TestIndexWriter extends LuceneTestCase {
     IndexReader ir = iw.getReader();
     assertEquals(3, ir.numDocs());
     ir.close();
-    iw.shutdown();
+    iw.close();
     dir.close();
   }
   
@@ -2277,7 +2274,7 @@ public class TestIndexWriter extends LuceneTestCase {
     IndexReader ir = iw.getReader();
     assertEquals(3, ir.numDocs());
     ir.close();
-    iw.shutdown();
+    iw.close();
     dir.close();
   }
   
@@ -2338,7 +2335,7 @@ public class TestIndexWriter extends LuceneTestCase {
       }
     }
     assertTrue(liveIds.isEmpty());
-    w.shutdown();
+    w.close();
     IOUtils.close(reader, dir);
   }
   
@@ -2390,7 +2387,7 @@ public class TestIndexWriter extends LuceneTestCase {
       }
     }
     assertTrue(liveIds.isEmpty());
-    w.shutdown();
+    w.close();
     IOUtils.close(reader, dir);
   }
   
@@ -2422,7 +2419,7 @@ public class TestIndexWriter extends LuceneTestCase {
       assertNotNull(e.getMessage());
       assertEquals("boom", e.getMessage());
     }
-    w.shutdown();
+    w.close();
     IOUtils.close(dir);
   }
 
@@ -2482,7 +2479,7 @@ public class TestIndexWriter extends LuceneTestCase {
 
       try {
         if ((i & 1) == 0) {
-          new IndexWriter(dir, iwc).shutdown();
+          new IndexWriter(dir, iwc).close();
         } else {
           new IndexWriter(dir, iwc).rollback();
         }
@@ -2547,14 +2544,14 @@ public class TestIndexWriter extends LuceneTestCase {
     writer.waitForMerges();
     writer.commit();
     assertFalse(writer.hasUncommittedChanges());
-    writer.shutdown();
+    writer.close();
 
     writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));
     assertFalse(writer.hasUncommittedChanges());
     writer.addDocument(doc);
     assertTrue(writer.hasUncommittedChanges());
 
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
   
@@ -2582,14 +2579,14 @@ public class TestIndexWriter extends LuceneTestCase {
     }
     evilWriter.deleteDocuments(new MatchAllDocsQuery());
     evilWriter.forceMerge(1);
-    evilWriter.shutdown();
+    evilWriter.close();
     dir.close();
   }
 
   // LUCENE-5239
   public void testDeleteSameTermAcrossFields() throws Exception {
     Directory dir = newDirectory();
-    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));
+    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));
     IndexWriter w = new IndexWriter(dir, iwc);
     Document doc = new Document();
     doc.add(new TextField("a", "foo", Field.Store.NO));
@@ -2601,7 +2598,7 @@ public class TestIndexWriter extends LuceneTestCase {
     w.deleteDocuments(new Term("a", "xxx"));
     w.deleteDocuments(new Term("b", "foo"));
     IndexReader r = w.getReader();
-    w.shutdown();
+    w.close();
 
     // Make sure document was not (incorrectly) deleted:
     assertEquals(1, r.numDocs());
@@ -2628,7 +2625,7 @@ public class TestIndexWriter extends LuceneTestCase {
     }
     iwriter.commit();
     assertFalse(iwriter.hasUncommittedChanges());
-    iwriter.shutdown();
+    iwriter.close();
     directory.close();
   }
 
@@ -2668,35 +2665,14 @@ public class TestIndexWriter extends LuceneTestCase {
     dir.close();
   }
 
-  public void testUncommittedChanges() throws IOException {
-    Directory dir = newDirectory();
-    // If version is < 50 IW.close should throw an exception
-    // on uncommitted changes:
-    IndexWriterConfig iwc = newIndexWriterConfig(random(), Version.LUCENE_4_8, new MockAnalyzer(random()));
-    IndexWriter w = new IndexWriter(dir, iwc);
-    Document doc = new Document();
-    doc.add(new SortedDocValuesField("dv", new BytesRef("foo!")));
-    w.addDocument(doc);
-    try {
-      w.close();
-      fail("didn't hit exception");
-    } catch (RuntimeException re) {
-      // expected
-      assertTrue(re.getMessage().contains("this writer is closed, but some pending changes or running merges were discarded"));
-    }
-    w.rollback();
-    dir.close();
-  }
-
   public void testCloseWhileMergeIsRunning() throws IOException {
+    // nocommit: this test should maybe be reworked?
     Directory dir = newDirectory();
 
     final CountDownLatch mergeStarted = new CountDownLatch(1);
     final CountDownLatch closeStarted = new CountDownLatch(1);
 
-    // If version is < 50 IW.close should throw an exception
-    // on still-running merges:
-    IndexWriterConfig iwc = newIndexWriterConfig(random(), Version.LUCENE_4_8, new MockAnalyzer(random()));
+    IndexWriterConfig iwc = newIndexWriterConfig(random(), new MockAnalyzer(random())).setCommitOnClose(false);
     LogDocMergePolicy mp = new LogDocMergePolicy();
     mp.setMergeFactor(2);
     iwc.setMergePolicy(mp);
@@ -2742,17 +2718,7 @@ public class TestIndexWriter extends LuceneTestCase {
     w.commit();
     w.addDocument(doc);
     w.commit();
-    try {
-      w.close();
-      fail("didn't hit exception");
-    } catch (RuntimeException re) {
-      // expected
-      if (VERBOSE) {
-        System.out.println("GOT: " + re.getMessage());
-      }
-      assertTrue(re.getMessage().contains("this writer is closed, but some pending changes or running merges were discarded"));
-    }
-    w.rollback();
+    w.close();
     dir.close();
   }
 
diff --git lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit.java lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit.java
index b4f4388..abcfd27 100644
--- lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit.java
+++ lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit.java
@@ -46,7 +46,7 @@ public class TestIndexWriterCommit extends LuceneTestCase {
       for (int i = 0; i < 14; i++) {
         TestIndexWriter.addDoc(writer);
       }
-      writer.shutdown();
+      writer.close();
 
       Term searchTerm = new Term("content", "aaa");
       DirectoryReader reader = DirectoryReader.open(dir);
@@ -71,7 +71,7 @@ public class TestIndexWriterCommit extends LuceneTestCase {
       }
 
       // Now, close the writer:
-      writer.shutdown();
+      writer.close();
       assertFalse("reader should not be current now", reader.isCurrent());
 
       IndexReader r = DirectoryReader.open(dir);
@@ -98,7 +98,7 @@ public class TestIndexWriterCommit extends LuceneTestCase {
     for (int i = 0; i < 14; i++) {
       TestIndexWriter.addDoc(writer);
     }
-    writer.shutdown();
+    writer.close();
 
     Term searchTerm = new Term("content", "aaa");
     IndexReader reader = DirectoryReader.open(dir);
@@ -156,7 +156,7 @@ public class TestIndexWriterCommit extends LuceneTestCase {
       r.close();
     }
 
-    writer.shutdown();
+    writer.close();
     IndexReader r = DirectoryReader.open(dir);
     searcher = newSearcher(r);
     hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;
@@ -215,7 +215,7 @@ public class TestIndexWriterCommit extends LuceneTestCase {
     for(int j=0;j<30;j++) {
       TestIndexWriter.addDocWithIndex(writer, j);
     }
-    writer.shutdown();
+    writer.close();
     dir.resetMaxUsedSizeInBytes();
 
     dir.setTrackDiskUsage(true);
@@ -236,7 +236,7 @@ public class TestIndexWriterCommit extends LuceneTestCase {
     long midDiskUsage = dir.getMaxUsedSizeInBytes();
     dir.resetMaxUsedSizeInBytes();
     writer.forceMerge(1);
-    writer.shutdown();
+    writer.close();
 
     DirectoryReader.open(dir).close();
 
@@ -278,7 +278,7 @@ public class TestIndexWriterCommit extends LuceneTestCase {
     for(int j=0;j<17;j++) {
       TestIndexWriter.addDocWithIndex(writer, j);
     }
-    writer.shutdown();
+    writer.close();
 
     writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))
                                      .setOpenMode(OpenMode.APPEND));
@@ -309,7 +309,7 @@ public class TestIndexWriterCommit extends LuceneTestCase {
     writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))
                                     .setOpenMode(OpenMode.APPEND));
     writer.forceMerge(1);
-    writer.shutdown();
+    writer.close();
 
     if (VERBOSE) {
       System.out.println("TEST: writer closed");
@@ -378,7 +378,7 @@ public class TestIndexWriterCommit extends LuceneTestCase {
       threads[i].join();
     }
     assertFalse(failed.get());
-    w.shutdown();
+    w.close();
     dir.close();
   }
 
@@ -418,7 +418,7 @@ public class TestIndexWriterCommit extends LuceneTestCase {
     reader = DirectoryReader.open(dir);
     assertEquals(40, reader.numDocs());
     reader.close();
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
   
@@ -440,7 +440,7 @@ public class TestIndexWriterCommit extends LuceneTestCase {
     w.addDocument(doc);
     commitData.put("tag", "second");
     w.setCommitData(commitData);
-    w.shutdown();
+    w.close();
 
     // open "first" with IndexWriter
     IndexCommit commit = null;
@@ -463,7 +463,7 @@ public class TestIndexWriterCommit extends LuceneTestCase {
     w.addDocument(doc);
     commitData.put("tag", "third");
     w.setCommitData(commitData);
-    w.shutdown();
+    w.close();
 
     // make sure "second" commit is still there
     commit = null;
@@ -492,7 +492,7 @@ public class TestIndexWriterCommit extends LuceneTestCase {
       // that's expected !
     }
     // No changes still should generate a commit, because it's a new index.
-    writer.shutdown();
+    writer.close();
     assertEquals("expected 1 commits!", 1, DirectoryReader.listCommits(dir).size());
     dir.close();
   }
@@ -549,7 +549,7 @@ public class TestIndexWriterCommit extends LuceneTestCase {
     reader = DirectoryReader.open(dir);
     assertEquals(40, reader.numDocs());
     reader.close();
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
 
@@ -606,7 +606,7 @@ public class TestIndexWriterCommit extends LuceneTestCase {
     reader = DirectoryReader.open(dir);
     assertEquals(17, reader.numDocs());
     reader.close();
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
 
@@ -617,7 +617,7 @@ public class TestIndexWriterCommit extends LuceneTestCase {
     IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));
     writer.prepareCommit();
     writer.commit();
-    writer.shutdown();
+    writer.close();
 
     IndexReader reader = DirectoryReader.open(dir);
     assertEquals(0, reader.numDocs());
@@ -632,7 +632,7 @@ public class TestIndexWriterCommit extends LuceneTestCase {
                                            .setMaxBufferedDocs(2));
     for(int j=0;j<17;j++)
       TestIndexWriter.addDoc(w);
-    w.shutdown();
+    w.close();
 
     DirectoryReader r = DirectoryReader.open(dir);
     // commit(Map) never called for this index
@@ -646,7 +646,7 @@ public class TestIndexWriterCommit extends LuceneTestCase {
     Map<String,String> data = new HashMap<>();
     data.put("label", "test1");
     w.setCommitData(data);
-    w.shutdown();
+    w.close();
 
     r = DirectoryReader.open(dir);
     assertEquals("test1", r.getIndexCommit().getUserData().get("label"));
@@ -654,7 +654,7 @@ public class TestIndexWriterCommit extends LuceneTestCase {
 
     w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));
     w.forceMerge(1);
-    w.shutdown();
+    w.close();
 
     dir.close();
   }
diff --git lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig.java lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig.java
index 3071d3f..a2125ab 100644
--- lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig.java
+++ lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig.java
@@ -20,14 +20,11 @@ package org.apache.lucene.index;
 import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
-import java.util.Arrays;
 import java.util.HashSet;
 import java.util.Set;
 
 import org.apache.lucene.analysis.MockAnalyzer;
 import org.apache.lucene.codecs.Codec;
-import org.apache.lucene.codecs.FieldInfosFormat;
-import org.apache.lucene.codecs.StoredFieldsFormat;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field.Store;
 import org.apache.lucene.index.DocumentsWriterPerThread.IndexingChain;
@@ -58,7 +55,7 @@ public class TestIndexWriterConfig extends LuceneTestCase {
 
   @Test
   public void testDefaults() throws Exception {
-    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));
+    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));
     assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());
     assertNull(conf.getIndexCommit());
     assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());
@@ -144,7 +141,7 @@ public class TestIndexWriterConfig extends LuceneTestCase {
     Directory dir = newDirectory();
     // test that IWC cannot be reused across two IWs
     IndexWriterConfig conf = newIndexWriterConfig(null);
-    new RandomIndexWriter(random(), dir, conf).shutdown();
+    new RandomIndexWriter(random(), dir, conf).close();
 
     // this should fail
     try {
@@ -193,7 +190,7 @@ public class TestIndexWriterConfig extends LuceneTestCase {
 
   @Test
   public void testToString() throws Exception {
-    String str = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).toString();
+    String str = new IndexWriterConfig(new MockAnalyzer(random())).toString();
     for (Field f : IndexWriterConfig.class.getDeclaredFields()) {
       int modifiers = f.getModifiers();
       if (Modifier.isStatic(modifiers) && Modifier.isFinal(modifiers)) {
@@ -213,7 +210,7 @@ public class TestIndexWriterConfig extends LuceneTestCase {
 
   @Test
   public void testInvalidValues() throws Exception {
-    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));
+    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));
 
     // Test IndexDeletionPolicy
     assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());
@@ -321,7 +318,7 @@ public class TestIndexWriterConfig extends LuceneTestCase {
 
   public void testLiveChangeToCFS() throws Exception {
     Directory dir = newDirectory();
-    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));
+    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));
     iwc.setMergePolicy(newLogMergePolicy(true));
     // Start false:
     iwc.setUseCompoundFile(false); 
@@ -353,7 +350,7 @@ public class TestIndexWriterConfig extends LuceneTestCase {
     w.forceMerge(1);
     w.commit();
     assertTrue("Expected CFS after merge", w.newestSegment().info.getUseCompoundFile());
-    w.shutdown();
+    w.close();
     dir.close();
   }
 
diff --git lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete.java lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete.java
index 9c328fb..7ccc6b2 100644
--- lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete.java
+++ lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete.java
@@ -89,7 +89,7 @@ public class TestIndexWriterDelete extends LuceneTestCase {
     hitCount = getHitCount(dir, term);
     assertEquals(0, hitCount);
 
-    modifier.shutdown();
+    modifier.close();
     dir.close();
   }
 
@@ -124,7 +124,7 @@ public class TestIndexWriterDelete extends LuceneTestCase {
     reader = DirectoryReader.open(dir);
     assertEquals(0, reader.numDocs());
     reader.close();
-    modifier.shutdown();
+    modifier.close();
     dir.close();
   }
 
@@ -138,7 +138,7 @@ public class TestIndexWriterDelete extends LuceneTestCase {
     writer.deleteDocuments(new Term("foobar", "1"));
     writer.deleteDocuments(new Term("foobar", "1"));
     assertEquals(3, writer.getFlushDeletesCount());
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
   
@@ -179,7 +179,7 @@ public class TestIndexWriterDelete extends LuceneTestCase {
       int hitCount = getHitCount(dir, new Term("id", String.valueOf(id)));
       assertEquals(1, hitCount);
       reader.close();
-      modifier.shutdown();
+      modifier.close();
       dir.close();
     }
   }
@@ -213,7 +213,7 @@ public class TestIndexWriterDelete extends LuceneTestCase {
 
     IndexReader reader = DirectoryReader.open(dir);
     assertEquals(5, reader.numDocs());
-    modifier.shutdown();
+    modifier.close();
     reader.close();
     dir.close();
   }
@@ -257,7 +257,7 @@ public class TestIndexWriterDelete extends LuceneTestCase {
     assertEquals(2, reader.numDocs());
     reader.close();
 
-    modifier.shutdown();
+    modifier.close();
     dir.close();
   }
 
@@ -303,7 +303,7 @@ public class TestIndexWriterDelete extends LuceneTestCase {
     assertEquals(2, reader.numDocs());
     reader.close();
 
-    modifier.shutdown();
+    modifier.close();
     dir.close();
   }
   
@@ -360,7 +360,7 @@ public class TestIndexWriterDelete extends LuceneTestCase {
       thread.join();
     }
     
-    modifier.shutdown();
+    modifier.close();
     DirectoryReader reader = DirectoryReader.open(dir);
     assertEquals(reader.maxDoc(), 0);
     assertEquals(reader.numDocs(), 0);
@@ -507,7 +507,7 @@ public class TestIndexWriterDelete extends LuceneTestCase {
       d.add(new NumericDocValuesField("dv", i));
       writer.addDocument(d);
     }
-    writer.shutdown();
+    writer.close();
 
     long diskUsage = startDir.sizeInBytes();
     long diskFree = diskUsage + 10;
@@ -593,7 +593,7 @@ public class TestIndexWriterDelete extends LuceneTestCase {
               }
               docId += 12;
             }
-            modifier.shutdown();
+            modifier.close();
           }
           success = true;
           if (0 == x) {
@@ -858,7 +858,7 @@ public class TestIndexWriterDelete extends LuceneTestCase {
     // Make sure the delete was successfully flushed:
     assertEquals(0, hitCount);
 
-    modifier.shutdown();
+    modifier.close();
     dir.close();
   }
 
@@ -915,14 +915,14 @@ public class TestIndexWriterDelete extends LuceneTestCase {
       }
     }
 
-    modifier.shutdown();
+    modifier.close();
     TestIndexWriter.assertNoUnreferencedFiles(dir, "docsWriter.abort() failed to delete unreferenced files");
     dir.close();
   }
 
   public void testDeleteNullQuery() throws IOException {
     Directory dir = newDirectory();
-    IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));
+    IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));
 
     for (int i = 0; i < 5; i++) {
       addDoc(modifier, i, 2*i);
@@ -931,7 +931,7 @@ public class TestIndexWriterDelete extends LuceneTestCase {
     modifier.deleteDocuments(new TermQuery(new Term("nada", "nada")));
     modifier.commit();
     assertEquals(5, modifier.numDocs());
-    modifier.shutdown();
+    modifier.close();
     dir.close();
   }
   
@@ -963,7 +963,7 @@ public class TestIndexWriterDelete extends LuceneTestCase {
       r.close();
     }
 
-    w.shutdown();
+    w.close();
     dir.close();
   }
   
@@ -1014,7 +1014,7 @@ public class TestIndexWriterDelete extends LuceneTestCase {
       }
       assertTrue("flush happened too quickly during " + (doIndexing ? "indexing" : "deleting") + " count=" + count, count > 2500);
     }
-    w.shutdown();
+    w.close();
     dir.close();
   }
 
@@ -1063,7 +1063,7 @@ public class TestIndexWriterDelete extends LuceneTestCase {
         fail("delete's were not applied");
       }
     }
-    w.shutdown();
+    w.close();
     dir.close();
   }
 
@@ -1106,7 +1106,7 @@ public class TestIndexWriterDelete extends LuceneTestCase {
         fail("delete's were not applied at count=" + flushAtDelCount);
       }
     }
-    w.shutdown();
+    w.close();
     dir.close();
   }
 
@@ -1158,14 +1158,14 @@ public class TestIndexWriterDelete extends LuceneTestCase {
     }
     closing.set(true);
     assertTrue(sawAfterFlush.get());
-    w.shutdown();
+    w.close();
     dir.close();
   }
 
   // LUCENE-4455
   public void testDeletesCheckIndexOutput() throws Exception {
     Directory dir = newDirectory();
-    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));
+    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));
     iwc.setMaxBufferedDocs(2);
     IndexWriter w = new IndexWriter(dir, iwc);
     Document doc = new Document();
@@ -1181,7 +1181,7 @@ public class TestIndexWriterDelete extends LuceneTestCase {
     w.deleteDocuments(new Term("field", "0"));
     w.commit();
     assertEquals(1, w.getSegmentCount());
-    w.shutdown();
+    w.close();
 
     ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);
     CheckIndex checker = new CheckIndex(dir);
@@ -1192,10 +1192,10 @@ public class TestIndexWriterDelete extends LuceneTestCase {
 
     // Segment should have deletions:
     assertTrue(s.contains("has deletions"));
-    iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));
+    iwc = new IndexWriterConfig(new MockAnalyzer(random()));
     w = new IndexWriter(dir, iwc);
     w.forceMerge(1);
-    w.shutdown();
+    w.close();
 
     bos = new ByteArrayOutputStream(1024);
     checker.setInfoStream(new PrintStream(bos, false, IOUtils.UTF_8), false);
@@ -1210,22 +1210,22 @@ public class TestIndexWriterDelete extends LuceneTestCase {
 
     Directory d = newDirectory();
 
-    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));
+    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));
     IndexWriter w = new IndexWriter(d, iwc);
     Document doc = new Document();
     w.addDocument(doc);
     w.addDocument(doc);
     w.addDocument(doc);
-    w.shutdown();
+    w.close();
 
-    iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));
+    iwc = new IndexWriterConfig(new MockAnalyzer(random()));
     iwc.setOpenMode(IndexWriterConfig.OpenMode.APPEND);
     w = new IndexWriter(d, iwc);
     IndexReader r = DirectoryReader.open(w, false);
     assertTrue(w.tryDeleteDocument(r, 1));
     assertTrue(w.tryDeleteDocument(r.leaves().get(0).reader(), 0));
     r.close();
-    w.shutdown();
+    w.close();
 
     r = DirectoryReader.open(d);
     assertEquals(2, r.numDeletedDocs());
diff --git lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java
index d089d65..c1f783f 100644
--- lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java
+++ lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java
@@ -271,7 +271,7 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
     writer.commit();
 
     try {
-      writer.shutdown();
+      writer.close();
     } catch (Throwable t) {
       System.out.println("exception during close:");
       t.printStackTrace(System.out);
@@ -318,7 +318,7 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
     writer.commit();
 
     try {
-      writer.shutdown();
+      writer.close();
     } catch (Throwable t) {
       System.out.println("exception during close:");
       t.printStackTrace(System.out);
@@ -385,7 +385,7 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
     } catch (RuntimeException re) {
       // expected
     }
-    w.shutdown();
+    w.close();
     dir.close();
   }
 
@@ -418,7 +418,7 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
       // expected
     }
     w.addDocument(doc);
-    w.shutdown();
+    w.close();
     dir.close();
   }
 
@@ -459,7 +459,7 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
 
     ((ConcurrentMergeScheduler) w.getConfig().getMergeScheduler()).sync();
     assertTrue(testPoint.failed);
-    w.shutdown();
+    w.close();
     dir.close();
   }
 
@@ -515,7 +515,7 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
     doc.add(newTextField("content", "aa bb cc dd", Field.Store.NO));
     writer.addDocument(doc);
 
-    writer.shutdown();
+    writer.close();
     IndexReader reader = DirectoryReader.open(dir);
     final Term t = new Term("content", "aa");
     assertEquals(3, reader.docFreq(t));
@@ -600,7 +600,7 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
       }
     }
     assertTrue(hitError);
-    writer.shutdown();
+    writer.close();
     IndexReader reader = DirectoryReader.open(dir);
     assertEquals(198, reader.docFreq(new Term("content", "aa")));
     reader.close();
@@ -652,7 +652,7 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
         writer.addDocument(doc);
         writer.addDocument(doc);
       }
-      writer.shutdown();
+      writer.close();
 
       if (VERBOSE) {
         System.out.println("TEST: open reader");
@@ -684,7 +684,7 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
       for(int j=0;j<17;j++)
         writer.addDocument(doc);
       writer.forceMerge(1);
-      writer.shutdown();
+      writer.close();
 
       reader = DirectoryReader.open(dir);
       int expected = 19+(1-i)*2;
@@ -767,7 +767,7 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
         for(int t=0;t<NUM_THREAD;t++)
           threads[t].join();
 
-        writer.shutdown();
+        writer.close();
       }
 
       IndexReader reader = DirectoryReader.open(dir);
@@ -796,7 +796,7 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
       for(int j=0;j<17;j++)
         writer.addDocument(doc);
       writer.forceMerge(1);
-      writer.shutdown();
+      writer.close();
 
       reader = DirectoryReader.open(dir);
       expected += 17-NUM_THREAD*NUM_ITER;
@@ -871,7 +871,7 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
     ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();
     assertTrue(failure.didFail);
     failure.clearDoFail();
-    writer.shutdown();
+    writer.close();
 
     IndexReader reader = DirectoryReader.open(dir);
     assertEquals(23, reader.numDocs());
@@ -945,7 +945,7 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
       w.addDocument(doc);
       dir.failOn(failure);
       try {
-        w.shutdown();
+        w.close();
         fail();
       } catch (IOException ioe) {
         fail("expected only RuntimeException");
@@ -969,7 +969,7 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
     IndexWriter w = new IndexWriter(startDir, conf);
     for(int i=0;i<27;i++)
       addDoc(w);
-    w.shutdown();
+    w.close();
 
     int iter = TEST_NIGHTLY ? 200 : 10;
     for(int i=0;i<iter;i++) {
@@ -989,7 +989,7 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
           fail("forceMerge threw IOException without root cause");
       }
       dir.setRandomIOExceptionRate(0);
-      w.shutdown();
+      w.close();
       dir.close();
     }
     startDir.close();
@@ -1005,7 +1005,7 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
           .setInfoStream(new InfoStream() {
         @Override
         public void message(String component, final String message) {
-          if (message.startsWith("now flush at shutdown") && thrown.compareAndSet(false, true)) {
+          if (message.startsWith("now flush at close") && thrown.compareAndSet(false, true)) {
             throw new OutOfMemoryError("fake OOME at " + message);
           }
         }
@@ -1020,13 +1020,13 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
       }));
 
     try {
-      writer.shutdown();
+      writer.close();
       fail("OutOfMemoryError expected");
     }
     catch (final OutOfMemoryError expected) {}
 
     // throws IllegalStateEx w/o bug fix
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
 
@@ -1077,7 +1077,7 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
     }
 
     // close
-    writer.shutdown();
+    writer.close();
 
     long gen = SegmentInfos.getLastCommitGeneration(dir);
     assertTrue("segment generation should be > 0 but got " + gen, gen > 0);
@@ -1101,7 +1101,7 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
     reader.close();
     
     // should remove the corrumpted segments_N
-    new IndexWriter(dir, newIndexWriterConfig(null)).shutdown();
+    new IndexWriter(dir, newIndexWriterConfig(null)).close();
     dir.close();
   }
 
@@ -1122,7 +1122,7 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
       }
 
       // close
-      writer.shutdown();
+      writer.close();
 
       long gen = SegmentInfos.getLastCommitGeneration(dir);
       assertTrue("segment generation should be > 0 but got " + gen, gen > 0);
@@ -1178,7 +1178,7 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
     }
 
     // close
-    writer.shutdown();
+    writer.close();
 
     long gen = SegmentInfos.getLastCommitGeneration(dir);
     assertTrue("segment generation should be > 0 but got " + gen, gen > 0);
@@ -1226,7 +1226,7 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
       }
 
       // close
-      writer.shutdown();
+      writer.close();
 
       long gen = SegmentInfos.getLastCommitGeneration(dir);
       assertTrue("segment generation should be > 0 but got " + gen, gen > 0);
@@ -1269,7 +1269,7 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
       }
 
       // close
-      writer.shutdown();
+      writer.close();
       dir.close();
   }
 
@@ -1324,7 +1324,7 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
         document = new Document();
         document.add(new TextField("field", "a field", Field.Store.YES));
         w.addDocument(document);
-        w.shutdown();
+        w.close();
         IndexReader reader = DirectoryReader.open(dir);
         assertTrue(reader.numDocs() > 0);
         SegmentInfos sis = new SegmentInfos();
@@ -1409,7 +1409,7 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
     }
 
     final IndexReader r = w.getReader();
-    w.shutdown();
+    w.close();
 
     final IndexSearcher s = newSearcher(r);
     PhraseQuery pq = new PhraseQuery();
@@ -1490,7 +1490,7 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
     }
 
     final IndexReader r = w.getReader();
-    w.shutdown();
+    w.close();
 
     final IndexSearcher s = newSearcher(r);
     PhraseQuery pq = new PhraseQuery();
@@ -1510,7 +1510,7 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
   public void testNullStoredField() throws Exception {
     Directory dir = newDirectory();
     Analyzer analyzer = new MockAnalyzer(random());
-    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));
+    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(analyzer));
     // add good document
     Document doc = new Document();
     iw.addDocument(doc);
@@ -1521,7 +1521,7 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
       iw.addDocument(doc);
       fail("didn't get expected exception");
     } catch (IllegalArgumentException expected) {}
-    iw.shutdown();
+    iw.close();
     // make sure we see our good doc
     DirectoryReader r = DirectoryReader.open(dir);
     assertEquals(1, r.numDocs());
@@ -1533,7 +1533,7 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
   public void testNullStoredFieldReuse() throws Exception {
     Directory dir = newDirectory();
     Analyzer analyzer = new MockAnalyzer(random());
-    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));
+    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(analyzer));
     // add good document
     Document doc = new Document();
     Field theField = new StoredField("foo", "hello", StoredField.TYPE);
@@ -1545,7 +1545,7 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
       iw.addDocument(doc);
       fail("didn't get expected exception");
     } catch (IllegalArgumentException expected) {}
-    iw.shutdown();
+    iw.close();
     // make sure we see our good doc
     DirectoryReader r = DirectoryReader.open(dir);
     assertEquals(1, r.numDocs());
@@ -1557,7 +1557,7 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
   public void testNullStoredBytesField() throws Exception {
     Directory dir = newDirectory();
     Analyzer analyzer = new MockAnalyzer(random());
-    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));
+    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(analyzer));
     // add good document
     Document doc = new Document();
     iw.addDocument(doc);
@@ -1570,7 +1570,7 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
       iw.addDocument(doc);
       fail("didn't get expected exception");
     } catch (NullPointerException expected) {}
-    iw.shutdown();
+    iw.close();
     // make sure we see our good doc
     DirectoryReader r = DirectoryReader.open(dir);
     assertEquals(1, r.numDocs());
@@ -1582,7 +1582,7 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
   public void testNullStoredBytesFieldReuse() throws Exception {
     Directory dir = newDirectory();
     Analyzer analyzer = new MockAnalyzer(random());
-    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));
+    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(analyzer));
     // add good document
     Document doc = new Document();
     Field theField = new StoredField("foo", new BytesRef("hello").bytes);
@@ -1595,7 +1595,7 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
       iw.addDocument(doc);
       fail("didn't get expected exception");
     } catch (NullPointerException expected) {}
-    iw.shutdown();
+    iw.close();
     // make sure we see our good doc
     DirectoryReader r = DirectoryReader.open(dir);
     assertEquals(1, r.numDocs());
@@ -1607,7 +1607,7 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
   public void testNullStoredBytesRefField() throws Exception {
     Directory dir = newDirectory();
     Analyzer analyzer = new MockAnalyzer(random());
-    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));
+    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(analyzer));
     // add good document
     Document doc = new Document();
     iw.addDocument(doc);
@@ -1620,7 +1620,7 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
       iw.addDocument(doc);
       fail("didn't get expected exception");
     } catch (IllegalArgumentException expected) {}
-    iw.shutdown();
+    iw.close();
     // make sure we see our good doc
     DirectoryReader r = DirectoryReader.open(dir);
     assertEquals(1, r.numDocs());
@@ -1632,7 +1632,7 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
   public void testNullStoredBytesRefFieldReuse() throws Exception {
     Directory dir = newDirectory();
     Analyzer analyzer = new MockAnalyzer(random());
-    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));
+    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(analyzer));
     // add good document
     Document doc = new Document();
     Field theField = new StoredField("foo", new BytesRef("hello"));
@@ -1645,7 +1645,7 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
       iw.addDocument(doc);
       fail("didn't get expected exception");
     } catch (IllegalArgumentException expected) {}
-    iw.shutdown();
+    iw.close();
     // make sure we see our good doc
     DirectoryReader r = DirectoryReader.open(dir);
     assertEquals(1, r.numDocs());
@@ -1666,7 +1666,7 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
         return -2;
       }
     };
-    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));
+    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(analyzer));
     // add good document
     Document doc = new Document();
     iw.addDocument(doc);
@@ -1676,7 +1676,7 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
       iw.addDocument(doc);
       fail("didn't get expected exception");
     } catch (IllegalArgumentException expected) {}
-    iw.shutdown();
+    iw.close();
 
     // make sure we see our good doc
     DirectoryReader r = DirectoryReader.open(dir);   
@@ -1709,7 +1709,7 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
     Directory d = new MockDirectoryWrapper(random(), uoe);
     IndexWriter iw = new IndexWriter(d, newIndexWriterConfig(null));
     iw.addDocument(new Document());
-    iw.shutdown();
+    iw.close();
     uoe.doFail = true;
     try {
       new IndexWriter(d, newIndexWriterConfig(null));
@@ -1740,7 +1740,7 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
     } catch (IllegalArgumentException expected) {
       // expected exception
     }
-    iw.shutdown();
+    iw.close();
     dir.close();
   }
   
@@ -1759,13 +1759,13 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
     Field field = new TextField("foo", overflowingTokenStream);
     doc.add(field);
     iw.addDocument(doc);
-    iw.shutdown();
+    iw.close();
     dir.close();
   }
   
   public void testBoostOmitNorms() throws Exception {
     Directory dir = newDirectory();
-    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));
+    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));
     iwc.setMergePolicy(newLogMergePolicy());
     IndexWriter iw = new IndexWriter(dir, iwc);
     Document doc = new Document();
@@ -1824,7 +1824,7 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
     assertEquals(1, ir.numDocs());
     assertEquals("sometext", ir.document(0).get("field1"));
     ir.close();
-    iw.shutdown();
+    iw.close();
     dir.close();
   }
   
@@ -1857,7 +1857,7 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
     dir.failOn(failure);
 
     // Create an index with one document
-    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));
+    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));
     IndexWriter iw = new IndexWriter(dir, iwc);
     Document doc = new Document();
     doc.add(new StringField("foo", "bar", Field.Store.NO));
@@ -1866,12 +1866,12 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
     DirectoryReader ir = DirectoryReader.open(dir);
     assertEquals(1, ir.numDocs());
     ir.close();
-    iw.shutdown();
+    iw.close();
 
     // Open and close the index a few times
     for (int i = 0; i < 10; i++) {
       failure.setDoFail();
-      iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));
+      iwc = new IndexWriterConfig(new MockAnalyzer(random()));
       try {
         iw = new IndexWriter(dir, iwc);
       } catch (CorruptIndexException ex) {
@@ -1881,7 +1881,7 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
         continue;
       }
       failure.clearDoFail();
-      iw.shutdown();
+      iw.close();
       ir = DirectoryReader.open(dir);
       assertEquals("lost document after iteration: " + i, 1, ir.numDocs());
       ir.close();
@@ -2047,7 +2047,7 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
           }
           doClose = true;
           w.commit();
-          w.shutdown();
+          w.close();
           w = null;
         }
 
@@ -2058,7 +2058,7 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
         if (ioe instanceof FakeIOException || (ioe.getCause() != null && ioe.getCause() instanceof FakeIOException)) {
           // expected
           if (VERBOSE) {
-            System.out.println("TEST: w.shutdown() hit expected IOE");
+            System.out.println("TEST: w.close() hit expected IOE");
           }
         } else {
           throw ioe;
@@ -2073,7 +2073,7 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
           System.out.println("  now 2nd close writer");
         }
         try {
-          w.shutdown();
+          w.close();
         } catch (AlreadyClosedException ace) {
           // OK
         }
@@ -2120,7 +2120,7 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
         if (VERBOSE) {
           System.out.println("TEST: close writer");
         }
-        w.shutdown();
+        w.close();
         w = null;
       }
 
@@ -2128,7 +2128,7 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
     }
 
     if (w != null) {
-      w.shutdown();
+      w.close();
     }
 
     // Final verify:
@@ -2163,7 +2163,7 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
     };
     
     Directory dir = newMockDirectory(); // we want to ensure we don't leak any locks or file handles
-    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, null);
+    IndexWriterConfig iwc = new IndexWriterConfig(null);
     iwc.setInfoStream(evilInfoStream);
     IndexWriter iw = new IndexWriter(dir, iwc);
     Document doc = new Document();
@@ -2232,7 +2232,7 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
         }
       });
       
-      IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, null);
+      IndexWriterConfig iwc = new IndexWriterConfig(null);
       IndexWriter iw = new IndexWriter(dir, iwc);
       Document doc = new Document();
       for (int i = 0; i < 10; i++) {
diff --git lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions2.java lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions2.java
index 5eaed56..713fa80 100644
--- lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions2.java
+++ lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions2.java
@@ -200,7 +200,7 @@ public class TestIndexWriterExceptions2 extends LuceneTestCase {
       }
       
       try {
-        iw.shutdown();
+        iw.close();
       } catch (Exception e) {
         if (e.getMessage() != null && e.getMessage().startsWith("Fake IOException")) {
           exceptionStream.println("\nTEST: got expected fake exc:" + e.getMessage());
diff --git lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge.java lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge.java
index 1610878..c141cc0 100644
--- lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge.java
+++ lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge.java
@@ -46,7 +46,7 @@ public class TestIndexWriterForceMerge extends LuceneTestCase {
                                                   .setMergePolicy(ldmp));
       for(int j=0;j<numDocs;j++)
         writer.addDocument(doc);
-      writer.shutdown();
+      writer.close();
 
       SegmentInfos sis = new SegmentInfos();
       sis.read(dir);
@@ -57,7 +57,7 @@ public class TestIndexWriterForceMerge extends LuceneTestCase {
       writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))
                                       .setMergePolicy(ldmp));
       writer.forceMerge(3);
-      writer.shutdown();
+      writer.close();
 
       sis = new SegmentInfos();
       sis.read(dir);
@@ -110,7 +110,7 @@ public class TestIndexWriterForceMerge extends LuceneTestCase {
       else
         assertEquals("seg: " + segCount, 7, optSegCount);
     }
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
 
@@ -136,7 +136,7 @@ public class TestIndexWriterForceMerge extends LuceneTestCase {
     // we see the doc stores get merged
     writer.commit();
     TestIndexWriter.addDocWithIndex(writer, 500);
-    writer.shutdown();
+    writer.close();
 
     if (VERBOSE) {
       System.out.println("TEST: start disk usage");
@@ -157,7 +157,7 @@ public class TestIndexWriterForceMerge extends LuceneTestCase {
                                     .setOpenMode(OpenMode.APPEND)
                                     .setMergePolicy(newLogMergePolicy()));
     writer.forceMerge(1);
-    writer.shutdown();
+    writer.close();
     long maxDiskUsage = dir.getMaxUsedSizeInBytes();
     assertTrue("forceMerge used too much temporary space: starting usage was " + startDiskUsage + " bytes; max temp usage was " + maxDiskUsage + " but should have been " + (4*startDiskUsage) + " (= 4X starting usage)",
                maxDiskUsage <= 4*startDiskUsage);
@@ -166,7 +166,7 @@ public class TestIndexWriterForceMerge extends LuceneTestCase {
   
   // Test calling forceMerge(1, false) whereby forceMerge is kicked
   // off but we don't wait for it to finish (but
-  // writer.shutdown()) does wait
+  // writer.close()) does wait
   public void testBackgroundForceMerge() throws IOException {
 
     Directory dir = newDirectory();
@@ -185,7 +185,7 @@ public class TestIndexWriterForceMerge extends LuceneTestCase {
       writer.forceMerge(1, false);
 
       if (0 == pass) {
-        writer.shutdown();
+        writer.close();
         DirectoryReader reader = DirectoryReader.open(dir);
         assertEquals(1, reader.leaves().size());
         reader.close();
@@ -194,7 +194,7 @@ public class TestIndexWriterForceMerge extends LuceneTestCase {
         // NOT included in the merging
         writer.addDocument(doc);
         writer.addDocument(doc);
-        writer.shutdown();
+        writer.close();
 
         DirectoryReader reader = DirectoryReader.open(dir);
         assertTrue(reader.leaves().size() > 1);
diff --git lucene/core/src/test/org/apache/lucene/index/TestIndexWriterLockRelease.java lucene/core/src/test/org/apache/lucene/index/TestIndexWriterLockRelease.java
index 6cc6a0e..a7231c2 100644
--- lucene/core/src/test/org/apache/lucene/index/TestIndexWriterLockRelease.java
+++ lucene/core/src/test/org/apache/lucene/index/TestIndexWriterLockRelease.java
@@ -38,10 +38,10 @@ public class TestIndexWriterLockRelease extends LuceneTestCase {
   public void testIndexWriterLockRelease() throws IOException {
     Directory dir = newFSDirectory(createTempDir("testLockRelease"));
     try {
-      new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));
+      new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));
     } catch (FileNotFoundException | NoSuchFileException e) {
       try {
-        new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));
+        new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));
       } catch (FileNotFoundException | NoSuchFileException e1) {
       }
     } finally {
diff --git lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMaxDocs.java lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMaxDocs.java
index d386966..c69540b 100644
--- lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMaxDocs.java
+++ lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMaxDocs.java
@@ -28,7 +28,6 @@ import org.apache.lucene.search.SortField;
 import org.apache.lucene.search.TermQuery;
 import org.apache.lucene.search.TopDocs;
 import org.apache.lucene.store.Directory;
-import org.apache.lucene.util.LuceneTestCase.Monster;
 import org.apache.lucene.util.LuceneTestCase.SuppressCodecs;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.TimeUnits;
@@ -41,7 +40,7 @@ public class TestIndexWriterMaxDocs extends LuceneTestCase {
   @Monster("takes a long time")
   public void testExactlyAtTrueLimit() throws Exception {
     Directory dir = newFSDirectory(createTempDir("2BDocs3"));
-    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, null));
+    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(null));
     Document doc = new Document();
     doc.add(newStringField("field", "text", Field.Store.NO));
     for (int i = 0; i < IndexWriter.MAX_DOCS; i++) {
@@ -73,7 +72,7 @@ public class TestIndexWriterMaxDocs extends LuceneTestCase {
       iw.forceMerge(1);
     }
 
-    iw.shutdown();
+    iw.close();
     dir.close();
   }
 
@@ -81,7 +80,7 @@ public class TestIndexWriterMaxDocs extends LuceneTestCase {
     setIndexWriterMaxDocs(10);
     try {
       Directory dir = newDirectory();
-      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, null));
+      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(null));
       for(int i=0;i<10;i++) {
         w.addDocument(new Document());
       }
@@ -104,7 +103,7 @@ public class TestIndexWriterMaxDocs extends LuceneTestCase {
     setIndexWriterMaxDocs(10);
     try {
       Directory dir = newDirectory();
-      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, null));
+      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(null));
       for(int i=0;i<10;i++) {
         w.addDocument(new Document());
       }
@@ -127,7 +126,7 @@ public class TestIndexWriterMaxDocs extends LuceneTestCase {
     setIndexWriterMaxDocs(10);
     try {
       Directory dir = newDirectory();
-      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, null));
+      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(null));
       for(int i=0;i<10;i++) {
         w.addDocument(new Document());
       }
@@ -150,7 +149,7 @@ public class TestIndexWriterMaxDocs extends LuceneTestCase {
     setIndexWriterMaxDocs(10);
     try {
       Directory dir = newDirectory();
-      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, null));
+      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(null));
       for(int i=0;i<10;i++) {
         w.addDocument(new Document());
       }
@@ -173,7 +172,7 @@ public class TestIndexWriterMaxDocs extends LuceneTestCase {
     setIndexWriterMaxDocs(10);
     try {
       Directory dir = newDirectory();
-      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, null));
+      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(null));
       for(int i=0;i<10;i++) {
         Document doc = new Document();
         doc.add(newStringField("id", ""+i, Field.Store.NO));
@@ -213,7 +212,7 @@ public class TestIndexWriterMaxDocs extends LuceneTestCase {
     setIndexWriterMaxDocs(10);
     try {
       Directory dir = newDirectory();
-      IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, null);
+      IndexWriterConfig iwc = new IndexWriterConfig(null);
       iwc.setMergePolicy(NoMergePolicy.INSTANCE);
       IndexWriter w = new IndexWriter(dir, iwc);
       for(int i=0;i<10;i++) {
@@ -258,14 +257,14 @@ public class TestIndexWriterMaxDocs extends LuceneTestCase {
     setIndexWriterMaxDocs(10);
     try {
       Directory dir = newDirectory();
-      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, null));
+      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(null));
       for(int i=0;i<10;i++) {
         w.addDocument(new Document());
       }
-      w.shutdown();
+      w.close();
 
       Directory dir2 = newDirectory();
-      IndexWriter w2 = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, null));
+      IndexWriter w2 = new IndexWriter(dir2, new IndexWriterConfig(null));
       w2.addDocument(new Document());
       try {
         w2.addIndexes(new Directory[] {dir});
@@ -294,19 +293,19 @@ public class TestIndexWriterMaxDocs extends LuceneTestCase {
   public void testMultiReaderExactLimit() throws Exception {
     Directory dir = newDirectory();
     Document doc = new Document();
-    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, null));
+    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(null));
     for (int i = 0; i < 100000; i++) {
       w.addDocument(doc);
     }
-    w.shutdown();
+    w.close();
 
     int remainder = IndexWriter.MAX_DOCS % 100000;
     Directory dir2 = newDirectory();
-    w = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, null));
+    w = new IndexWriter(dir2, new IndexWriterConfig(null));
     for (int i = 0; i < remainder; i++) {
       w.addDocument(doc);
     }
-    w.shutdown();
+    w.close();
 
     int copies = IndexWriter.MAX_DOCS / 100000;
 
@@ -329,11 +328,11 @@ public class TestIndexWriterMaxDocs extends LuceneTestCase {
   public void testMultiReaderBeyondLimit() throws Exception {
     Directory dir = newDirectory();
     Document doc = new Document();
-    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, null));
+    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(null));
     for (int i = 0; i < 100000; i++) {
       w.addDocument(doc);
     }
-    w.shutdown();
+    w.close();
 
     int remainder = IndexWriter.MAX_DOCS % 100000;
 
@@ -341,11 +340,11 @@ public class TestIndexWriterMaxDocs extends LuceneTestCase {
     remainder++;
 
     Directory dir2 = newDirectory();
-    w = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, null));
+    w = new IndexWriter(dir2, new IndexWriterConfig(null));
     for (int i = 0; i < remainder; i++) {
       w.addDocument(doc);
     }
-    w.shutdown();
+    w.close();
 
     int copies = IndexWriter.MAX_DOCS / 100000;
 
diff --git lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy.java lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy.java
index 653c933..bf83ee8 100644
--- lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy.java
+++ lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy.java
@@ -42,7 +42,7 @@ public class TestIndexWriterMergePolicy extends LuceneTestCase {
       checkInvariants(writer);
     }
 
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
 
@@ -64,7 +64,7 @@ public class TestIndexWriterMergePolicy extends LuceneTestCase {
     }
     assertTrue(noOverMerge);
 
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
 
@@ -81,7 +81,7 @@ public class TestIndexWriterMergePolicy extends LuceneTestCase {
 
     for (int i = 0; i < 100; i++) {
       addDoc(writer);
-      writer.shutdown();
+      writer.close();
 
       mp = new LogDocMergePolicy();
       mp.setMergeFactor(10);
@@ -93,7 +93,7 @@ public class TestIndexWriterMergePolicy extends LuceneTestCase {
       checkInvariants(writer);
     }
 
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
 
@@ -123,7 +123,7 @@ public class TestIndexWriterMergePolicy extends LuceneTestCase {
     }
     checkInvariants(writer);
 
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
 
@@ -143,7 +143,7 @@ public class TestIndexWriterMergePolicy extends LuceneTestCase {
         addDoc(writer);
         checkInvariants(writer);
       }
-      writer.shutdown();
+      writer.close();
 
       writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))
                                       .setOpenMode(OpenMode.APPEND)
@@ -152,7 +152,7 @@ public class TestIndexWriterMergePolicy extends LuceneTestCase {
                                       .setMergeScheduler(new SerialMergeScheduler()));
     }
 
-    writer.shutdown();
+    writer.close();
     LogDocMergePolicy ldmp = new LogDocMergePolicy();
     ldmp.setMergeFactor(10);
     writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))
@@ -176,7 +176,7 @@ public class TestIndexWriterMergePolicy extends LuceneTestCase {
     writer.commit();
     checkInvariants(writer);
 
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
 
@@ -194,7 +194,7 @@ public class TestIndexWriterMergePolicy extends LuceneTestCase {
       addDoc(writer);
       checkInvariants(writer);
     }
-    writer.shutdown();
+    writer.close();
 
     // delete some docs without merging
     writer = new IndexWriter(
@@ -203,7 +203,7 @@ public class TestIndexWriterMergePolicy extends LuceneTestCase {
           .setMergePolicy(NoMergePolicy.INSTANCE)
     );
     writer.deleteDocuments(new Term("content", "aaa"));
-    writer.shutdown();
+    writer.close();
 
     ldmp = new LogDocMergePolicy();
     ldmp.setMergeFactor(5);
@@ -223,7 +223,7 @@ public class TestIndexWriterMergePolicy extends LuceneTestCase {
     checkInvariants(writer);
     assertEquals(10, writer.maxDoc());
 
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
 
diff --git lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging.java lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging.java
index 2ce0d4c..0b79b96 100644
--- lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging.java
+++ lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging.java
@@ -67,7 +67,7 @@ public class TestIndexWriterMerging extends LuceneTestCase
     );
     writer.addIndexes(indexA, indexB);
     writer.forceMerge(1);
-    writer.shutdown();
+    writer.close();
 
     fail = verifyIndex(merged, 0);
 
@@ -115,7 +115,7 @@ public class TestIndexWriterMerging extends LuceneTestCase
 
       writer.addDocument(temp);
     }
-    writer.shutdown();
+    writer.close();
   }
   
   // LUCENE-325: test forceMergeDeletes, when 2 singular merges
@@ -146,19 +146,19 @@ public class TestIndexWriterMerging extends LuceneTestCase
       idField.setStringValue("" + i);
       writer.addDocument(document);
     }
-    writer.shutdown();
+    writer.close();
 
     IndexReader ir = DirectoryReader.open(dir);
     assertEquals(10, ir.maxDoc());
     assertEquals(10, ir.numDocs());
     ir.close();
 
-    IndexWriterConfig dontMergeConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))
+    IndexWriterConfig dontMergeConfig = new IndexWriterConfig(new MockAnalyzer(random()))
       .setMergePolicy(NoMergePolicy.INSTANCE);
     writer = new IndexWriter(dir, dontMergeConfig);
     writer.deleteDocuments(new Term("id", "0"));
     writer.deleteDocuments(new Term("id", "7"));
-    writer.shutdown();
+    writer.close();
     
     ir = DirectoryReader.open(dir);
     assertEquals(8, ir.numDocs());
@@ -170,7 +170,7 @@ public class TestIndexWriterMerging extends LuceneTestCase
     assertEquals(10, writer.maxDoc());
     writer.forceMergeDeletes();
     assertEquals(8, writer.numDocs());
-    writer.shutdown();
+    writer.close();
     ir = DirectoryReader.open(dir);
     assertEquals(8, ir.maxDoc());
     assertEquals(8, ir.numDocs());
@@ -210,20 +210,20 @@ public class TestIndexWriterMerging extends LuceneTestCase
       idField.setStringValue("" + i);
       writer.addDocument(document);
     }
-    writer.shutdown();
+    writer.close();
 
     IndexReader ir = DirectoryReader.open(dir);
     assertEquals(98, ir.maxDoc());
     assertEquals(98, ir.numDocs());
     ir.close();
     
-    IndexWriterConfig dontMergeConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))
+    IndexWriterConfig dontMergeConfig = new IndexWriterConfig(new MockAnalyzer(random()))
       .setMergePolicy(NoMergePolicy.INSTANCE);
     writer = new IndexWriter(dir, dontMergeConfig);
     for(int i=0;i<98;i+=2) {
       writer.deleteDocuments(new Term("id", "" + i));
     }
-    writer.shutdown();
+    writer.close();
     
     ir = DirectoryReader.open(dir);
     assertEquals(49, ir.numDocs());
@@ -236,7 +236,7 @@ public class TestIndexWriterMerging extends LuceneTestCase
     );
     assertEquals(49, writer.numDocs());
     writer.forceMergeDeletes();
-    writer.shutdown();
+    writer.close();
     ir = DirectoryReader.open(dir);
     assertEquals(49, ir.maxDoc());
     assertEquals(49, ir.numDocs());
@@ -276,20 +276,20 @@ public class TestIndexWriterMerging extends LuceneTestCase
       idField.setStringValue("" + i);
       writer.addDocument(document);
     }
-    writer.shutdown();
+    writer.close();
 
     IndexReader ir = DirectoryReader.open(dir);
     assertEquals(98, ir.maxDoc());
     assertEquals(98, ir.numDocs());
     ir.close();
     
-    IndexWriterConfig dontMergeConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))
+    IndexWriterConfig dontMergeConfig = new IndexWriterConfig(new MockAnalyzer(random()))
       .setMergePolicy(NoMergePolicy.INSTANCE);
     writer = new IndexWriter(dir, dontMergeConfig);
     for(int i=0;i<98;i+=2) {
       writer.deleteDocuments(new Term("id", "" + i));
     }
-    writer.shutdown();
+    writer.close();
     ir = DirectoryReader.open(dir);
     assertEquals(49, ir.numDocs());
     ir.close();
@@ -300,7 +300,7 @@ public class TestIndexWriterMerging extends LuceneTestCase
            .setMergePolicy(newLogMergePolicy(3))
     );
     writer.forceMergeDeletes(false);
-    writer.shutdown();
+    writer.close();
     ir = DirectoryReader.open(dir);
     assertEquals(49, ir.maxDoc());
     assertEquals(49, ir.numDocs());
@@ -349,7 +349,7 @@ public class TestIndexWriterMerging extends LuceneTestCase
     document.add(newField("tvtest", "a b c", customType));
     for(int i=0;i<177;i++)
       iw.addDocument(document);
-    iw.shutdown();
+    iw.close();
     dir.close();
   }
   
@@ -375,7 +375,8 @@ public class TestIndexWriterMerging extends LuceneTestCase
       IndexWriterConfig conf =  newIndexWriterConfig(new MockAnalyzer(random())).
               setOpenMode(OpenMode.CREATE).
               setMaxBufferedDocs(2).
-              setMergePolicy(newLogMergePolicy());
+              setMergePolicy(newLogMergePolicy()).
+              setCommitOnClose(false);
       if (pass == 2) {
         conf.setMergeScheduler(new SerialMergeScheduler());
       }
@@ -449,9 +450,10 @@ public class TestIndexWriterMerging extends LuceneTestCase
         // Reopen
         writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random()))
                                               .setOpenMode(OpenMode.APPEND)
-                                              .setMergePolicy(newLogMergePolicy()));
+                                              .setMergePolicy(newLogMergePolicy())
+                                              .setCommitOnClose(false));
       }
-      writer.shutdown();
+      writer.close();
     }
 
     directory.close();
diff --git lucene/core/src/test/org/apache/lucene/index/TestIndexWriterNRTIsCurrent.java lucene/core/src/test/org/apache/lucene/index/TestIndexWriterNRTIsCurrent.java
index 6037b96..a9ec0f5 100644
--- lucene/core/src/test/org/apache/lucene/index/TestIndexWriterNRTIsCurrent.java
+++ lucene/core/src/test/org/apache/lucene/index/TestIndexWriterNRTIsCurrent.java
@@ -63,7 +63,7 @@ public class TestIndexWriterNRTIsCurrent extends LuceneTestCase {
       }
     }
     assertFalse(failed);
-    writer.shutdown();
+    writer.close();
     dir.close();
 
   }
diff --git lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnDiskFull.java lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnDiskFull.java
index a24735d..f82d6fb 100644
--- lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnDiskFull.java
+++ lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnDiskFull.java
@@ -100,7 +100,7 @@ public class TestIndexWriterOnDiskFull extends LuceneTestCase {
               if (VERBOSE) {
                 System.out.println("TEST: now close");
               }
-              writer.shutdown();
+              writer.close();
             } catch (IOException e) {
               if (VERBOSE) {
                 System.out.println("TEST: exception on close; retry w/ no disk space limit");
@@ -108,7 +108,7 @@ public class TestIndexWriterOnDiskFull extends LuceneTestCase {
               }
               dir.setMaxSizeInBytes(0);
               try {
-                writer.shutdown();
+                writer.close();
               } catch (AlreadyClosedException ace) {
                 // OK
               }
@@ -131,7 +131,7 @@ public class TestIndexWriterOnDiskFull extends LuceneTestCase {
         } else {
           //_TestUtil.syncConcurrentMerges(writer);
           dir.setMaxSizeInBytes(0);
-          writer.shutdown();
+          writer.close();
           dir.close();
           break;
         }
@@ -179,7 +179,7 @@ public class TestIndexWriterOnDiskFull extends LuceneTestCase {
       for(int j=0;j<25;j++) {
         addDocWithIndex(writer, 25*i+j);
       }
-      writer.shutdown();
+      writer.close();
       String[] files = dirs[i].listAll();
       for(int j=0;j<files.length;j++) {
         inputDiskUsage += dirs[i].fileLength(files[j]);
@@ -193,7 +193,7 @@ public class TestIndexWriterOnDiskFull extends LuceneTestCase {
     for(int j=0;j<START_COUNT;j++) {
       addDocWithIndex(writer, j);
     }
-    writer.shutdown();
+    writer.close();
     
     // Make sure starting index seems to be working properly:
     Term searchTerm = new Term("content", "aaa");        
@@ -444,7 +444,7 @@ public class TestIndexWriterOnDiskFull extends LuceneTestCase {
         dir.setRandomIOExceptionRate(0.0);
         dir.setRandomIOExceptionRateOnOpen(0.0);
         
-        writer.shutdown();
+        writer.close();
         
         // Wait for all BG threads to finish else
         // dir.close() will throw IOException because
@@ -524,7 +524,7 @@ public class TestIndexWriterOnDiskFull extends LuceneTestCase {
     TestUtil.checkIndex(dir);
     ftdm.clearDoFail();
     w.addDocument(doc);
-    w.shutdown();
+    w.close();
 
     dir.close();
   }
@@ -536,7 +536,8 @@ public class TestIndexWriterOnDiskFull extends LuceneTestCase {
     MockDirectoryWrapper dir = newMockDirectory();
     IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))
                                                 .setMaxBufferedDocs(2)
-                                                .setMergeScheduler(new ConcurrentMergeScheduler()));
+                                                .setMergeScheduler(new ConcurrentMergeScheduler())
+                                                .setCommitOnClose(false));
     dir.setMaxSizeInBytes(Math.max(1, dir.getRecomputedActualSizeInBytes()));
     final Document doc = new Document();
     FieldType customType = new FieldType(TextField.TYPE_STORED);
@@ -553,9 +554,11 @@ public class TestIndexWriterOnDiskFull extends LuceneTestCase {
     } catch (IOException ioe) {
     }
     try {
-      writer.shutdown(false);
+      writer.commit();
       fail("did not hit disk full");
     } catch (IOException ioe) {
+    } finally {
+      writer.close();
     }
 
     // Make sure once disk space is avail again, we can
diff --git lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOutOfFileDescriptors.java lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOutOfFileDescriptors.java
index fbaad52..2880c1f 100644
--- lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOutOfFileDescriptors.java
+++ lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOutOfFileDescriptors.java
@@ -84,7 +84,7 @@ public class TestIndexWriterOutOfFileDescriptors extends LuceneTestCase {
           w.addDocument(docs.nextDoc());
         }
         dir.setRandomIOExceptionRateOnOpen(0.0);
-        w.shutdown();
+        w.close();
         w = null;
 
         // NOTE: This is O(N^2)!  Only enable for temporary debugging:
@@ -143,7 +143,7 @@ public class TestIndexWriterOutOfFileDescriptors extends LuceneTestCase {
         // files ... we can easily have leftover files at
         // the time we take a copy because we are holding
         // open a reader:
-        new IndexWriter(dirCopy, newIndexWriterConfig(new MockAnalyzer(random()))).shutdown();
+        new IndexWriter(dirCopy, newIndexWriterConfig(new MockAnalyzer(random()))).close();
         dirCopy.setRandomIOExceptionRate(rate);
         dir.setRandomIOExceptionRateOnOpen(rate);
       }
diff --git lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOutOfMemory.java lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOutOfMemory.java
index 8b40fee..52cc8ac 100644
--- lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOutOfMemory.java
+++ lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOutOfMemory.java
@@ -232,7 +232,7 @@ public class TestIndexWriterOutOfMemory extends LuceneTestCase {
         }
         
         try {
-          iw.shutdown();
+          iw.close();
         } catch (OutOfMemoryError e) {
           if (e.getMessage() != null && e.getMessage().startsWith("Fake OutOfMemoryError")) {
             exceptionStream.println("\nTEST: got expected fake exc:" + e.getMessage());
diff --git lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader.java lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader.java
index 3322c16..ff69720 100644
--- lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader.java
+++ lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader.java
@@ -102,14 +102,14 @@ public class TestIndexWriterReader extends LuceneTestCase {
     DirectoryReader reader = writer.getReader();
     writer.commit(); // no changes that are not visible to the reader
     assertTrue(reader.isCurrent());
-    writer.shutdown();
+    writer.close();
     assertTrue(reader.isCurrent()); // all changes are visible to the reader
     iwc = newIndexWriterConfig(new MockAnalyzer(random()));
     writer = new IndexWriter(dir1, iwc);
     assertTrue(reader.isCurrent());
     writer.addDocument(DocHelper.createDocument(1, "x", 1+random().nextInt(5)));
     assertTrue(reader.isCurrent()); // segments in ram but IW is different to the readers one
-    writer.shutdown();
+    writer.close();
     assertFalse(reader.isCurrent()); // segments written
     reader.close();
     dir1.close();
@@ -157,7 +157,7 @@ public class TestIndexWriterReader extends LuceneTestCase {
     
     r1.close();
     assertTrue(r2.isCurrent());
-    writer.shutdown();
+    writer.close();
     assertTrue(r2.isCurrent());
     
     DirectoryReader r3 = DirectoryReader.open(dir1);
@@ -173,7 +173,7 @@ public class TestIndexWriterReader extends LuceneTestCase {
     assertTrue(r2.isCurrent());
     assertTrue(r3.isCurrent());
 
-    writer.shutdown();
+    writer.close();
 
     assertFalse(r2.isCurrent());
     assertTrue(!r3.isCurrent());
@@ -192,7 +192,7 @@ public class TestIndexWriterReader extends LuceneTestCase {
     Document doc = new Document();
     doc.add(newTextField("field", "a b c", Field.Store.NO));
     writer.addDocument(doc);
-    writer.shutdown();
+    writer.close();
     
     iwc = newIndexWriterConfig(new MockAnalyzer(random()));
     writer = new IndexWriter(dir, iwc);
@@ -213,7 +213,7 @@ public class TestIndexWriterReader extends LuceneTestCase {
     assertTrue(nrtReader.isCurrent()); // nothing was committed yet so we are still current
     assertEquals(2, nrtReader.maxDoc()); // sees the actual document added
     assertEquals(1, dirReader.maxDoc());
-    writer.shutdown(); // close is actually a commit both should see the changes
+    writer.close(); // close is actually a commit both should see the changes
     assertTrue(nrtReader.isCurrent()); 
     assertFalse(dirReader.isCurrent()); // this reader has been opened before the writer was closed / committed
     
@@ -245,7 +245,7 @@ public class TestIndexWriterReader extends LuceneTestCase {
     Directory dir2 = newDirectory();
     IndexWriter writer2 = new IndexWriter(dir2, newIndexWriterConfig(new MockAnalyzer(random())));
     createIndexNoClose(!doFullMerge, "index2", writer2);
-    writer2.shutdown();
+    writer2.close();
 
     DirectoryReader r0 = writer.getReader();
     assertTrue(r0.isCurrent());
@@ -271,7 +271,7 @@ public class TestIndexWriterReader extends LuceneTestCase {
     StoredDocument doc150 = r1.document(150);
     assertEquals("index2", doc150.get("indexname"));
     r1.close();
-    writer.shutdown();
+    writer.close();
     dir1.close();
     dir2.close();
   }
@@ -286,7 +286,7 @@ public class TestIndexWriterReader extends LuceneTestCase {
     Directory dir2 = newDirectory();
     IndexWriter writer2 = new IndexWriter(dir2, newIndexWriterConfig(new MockAnalyzer(random())));
     createIndexNoClose(!doFullMerge, "index2", writer2);
-    writer2.shutdown();
+    writer2.close();
 
     writer.addIndexes(dir2);
     writer.addIndexes(dir2);
@@ -298,7 +298,7 @@ public class TestIndexWriterReader extends LuceneTestCase {
     assertEquals(500, r1.maxDoc());
     
     r1.close();
-    writer.shutdown();
+    writer.close();
     dir1.close();
     dir2.close();
   }
@@ -344,14 +344,14 @@ public class TestIndexWriterReader extends LuceneTestCase {
     r2.close();
     r3.close();
     r4.close();
-    writer.shutdown();
+    writer.close();
         
     // reopen the writer to verify the delete made it to the directory
     writer = new IndexWriter(dir1, newIndexWriterConfig(new MockAnalyzer(random())));
     IndexReader w2r1 = writer.getReader();
     assertEquals(0, count(new Term("id", id10), w2r1));
     w2r1.close();
-    writer.shutdown();
+    writer.close();
     dir1.close();
   }
 
@@ -413,7 +413,7 @@ public class TestIndexWriterReader extends LuceneTestCase {
         writer.addDocument(doc);
       }
         
-      writer.shutdown();
+      writer.close();
       
       readers = new IndexReader[numDirs];
       for (int i = 0; i < numDirs; i++)
@@ -436,7 +436,7 @@ public class TestIndexWriterReader extends LuceneTestCase {
       } else {
         mainWriter.abortMerges();
       }
-      mainWriter.shutdown();
+      mainWriter.close();
     }
 
     void closeDir() throws Throwable {
@@ -551,7 +551,7 @@ public class TestIndexWriterReader extends LuceneTestCase {
     r2.close();
     r3.close();
     iwr2.close();
-    writer.shutdown();
+    writer.close();
 
     // test whether the changes made it to the directory
     writer = new IndexWriter(dir1, newIndexWriterConfig(new MockAnalyzer(random())));
@@ -559,7 +559,7 @@ public class TestIndexWriterReader extends LuceneTestCase {
     // insure the deletes were actually flushed to the directory
     assertEquals(200, w2r1.maxDoc());
     w2r1.close();
-    writer.shutdown();
+    writer.close();
 
     dir1.close();
   }
@@ -575,8 +575,7 @@ public class TestIndexWriterReader extends LuceneTestCase {
   
   public static void createIndex(Random random, Directory dir1, String indexName,
       boolean multiSegment) throws IOException {
-    IndexWriter w = new IndexWriter(dir1, LuceneTestCase.newIndexWriterConfig(random,
-        TEST_VERSION_CURRENT, new MockAnalyzer(random))
+    IndexWriter w = new IndexWriter(dir1, LuceneTestCase.newIndexWriterConfig(random, new MockAnalyzer(random))
         .setMergePolicy(new LogDocMergePolicy()));
     for (int i = 0; i < 100; i++) {
       w.addDocument(DocHelper.createDocument(i, indexName, 4));
@@ -584,7 +583,7 @@ public class TestIndexWriterReader extends LuceneTestCase {
     if (!multiSegment) {
       w.forceMerge(1);
     }
-    w.shutdown();
+    w.close();
   }
 
   public static void createIndexNoClose(boolean multiSegment, String indexName,
@@ -640,7 +639,7 @@ public class TestIndexWriterReader extends LuceneTestCase {
     writer.forceMerge(1);
     assertTrue(warmer.warmCount > count);
     
-    writer.shutdown();
+    writer.close();
     r1.close();
     dir1.close();
   }
@@ -672,7 +671,7 @@ public class TestIndexWriterReader extends LuceneTestCase {
       r1 = r2;
     }
     assertEquals(110, r1.numDocs());
-    writer.shutdown();
+    writer.close();
     r1.close();
     dir1.close();
   }
@@ -686,7 +685,7 @@ public class TestIndexWriterReader extends LuceneTestCase {
     createIndexNoClose(false, "test", writer);
 
     DirectoryReader r = writer.getReader();
-    writer.shutdown();
+    writer.close();
 
     TestUtil.checkIndex(dir1);
 
@@ -787,7 +786,7 @@ public class TestIndexWriterReader extends LuceneTestCase {
       assertEquals("openDeleted=" + openDeletedFiles, 0, openDeletedFiles.size());
     }
 
-    writer.shutdown();
+    writer.close();
 
     dir1.close();
   }
@@ -876,7 +875,7 @@ public class TestIndexWriterReader extends LuceneTestCase {
     assertTrue("no documents found at all", sum > 0);
 
     assertEquals(0, excs.size());
-    writer.shutdown();
+    writer.close();
 
     r.close();
     dir1.close();
@@ -898,7 +897,7 @@ public class TestIndexWriterReader extends LuceneTestCase {
 
     IndexReader r = w.getReader();
     w.forceMergeDeletes();
-    w.shutdown();
+    w.close();
     r.close();
     r = DirectoryReader.open(dir);
     assertEquals(1, r.numDocs());
@@ -932,7 +931,7 @@ public class TestIndexWriterReader extends LuceneTestCase {
     assertEquals(0, r.numDocs());
     r.close();
 
-    w.shutdown();
+    w.close();
     dir.close();
   }
   
@@ -943,7 +942,7 @@ public class TestIndexWriterReader extends LuceneTestCase {
     IndexReader r = w.getReader();
     assertEquals(0, r.numDocs());
     r.close();
-    w.shutdown();
+    w.close();
     dir.close();
   }
 
@@ -973,7 +972,7 @@ public class TestIndexWriterReader extends LuceneTestCase {
       w.addDocument(doc);
     }
     w.waitForMerges();
-    w.shutdown();
+    w.close();
     dir.close();
     assertTrue(didWarm.get());
   }
@@ -1013,7 +1012,7 @@ public class TestIndexWriterReader extends LuceneTestCase {
       w.addDocument(doc);
     }
     w.waitForMerges();
-    w.shutdown();
+    w.close();
     dir.close();
     assertTrue(didWarm.get());
   }
@@ -1050,7 +1049,7 @@ public class TestIndexWriterReader extends LuceneTestCase {
 
     r3.close();
 
-    w.shutdown();
+    w.close();
     d.close();
   }
   
@@ -1105,7 +1104,7 @@ public class TestIndexWriterReader extends LuceneTestCase {
       }
     }
     
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
 
@@ -1115,7 +1114,7 @@ public class TestIndexWriterReader extends LuceneTestCase {
     Directory dir = getAssertNoDeletesDirectory(newDirectory());
     // Don't use newIndexWriterConfig, because we need a
     // "sane" mergePolicy:
-    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));
+    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));
     IndexWriter w = new IndexWriter(dir, iwc);
     // Create 500 segments:
     for(int i=0;i<500;i++) {
@@ -1127,7 +1126,7 @@ public class TestIndexWriterReader extends LuceneTestCase {
       assertTrue(r.leaves().size() < 100);
       r.close();
     }
-    w.shutdown();
+    w.close();
     dir.close();
   }
 }
diff --git lucene/core/src/test/org/apache/lucene/index/TestIndexWriterThreadsToSegments.java lucene/core/src/test/org/apache/lucene/index/TestIndexWriterThreadsToSegments.java
index 0cc6db6..c660e4d 100644
--- lucene/core/src/test/org/apache/lucene/index/TestIndexWriterThreadsToSegments.java
+++ lucene/core/src/test/org/apache/lucene/index/TestIndexWriterThreadsToSegments.java
@@ -20,6 +20,7 @@ package org.apache.lucene.index;
 import java.io.Closeable;
 import java.io.IOException;
 import java.util.HashSet;
+import java.util.Random;
 import java.util.Set;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.CyclicBarrier;
@@ -44,7 +45,7 @@ public class TestIndexWriterThreadsToSegments extends LuceneTestCase {
   // doc NOT at the same time, and should have shared the same thread state / segment
   public void testSegmentCountOnFlushBasic() throws Exception {
     Directory dir = newDirectory();
-    final IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));
+    final IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));
     final CountDownLatch startingGun = new CountDownLatch(1);
     final CountDownLatch startDone = new CountDownLatch(2);
     final CountDownLatch middleGun = new CountDownLatch(1);
@@ -161,7 +162,7 @@ public class TestIndexWriterThreadsToSegments extends LuceneTestCase {
   // iteration, and then verify that no more segments were flushed than number of threads:
   public void testSegmentCountOnFlushRandom() throws Exception {
     Directory dir = newFSDirectory(createTempDir());
-    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));
+    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));
 
     int maxThreadStates = TestUtil.nextInt(random(), 1, 12);
 
@@ -237,7 +238,10 @@ public class TestIndexWriterThreadsToSegments extends LuceneTestCase {
 
   public void testManyThreadsClose() throws Exception {
     Directory dir = newDirectory();
-    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);
+    Random r = random();
+    IndexWriterConfig iwc = newIndexWriterConfig(r, new MockAnalyzer(r));
+    iwc.setCommitOnClose(false);
+    final RandomIndexWriter w = new RandomIndexWriter(r, dir, iwc);
     w.setDoRandomForceMerge(false);
     Thread[] threads = new Thread[TestUtil.nextInt(random(), 4, 30)];
     final CountDownLatch startingGun = new CountDownLatch(1);
@@ -274,7 +278,7 @@ public class TestIndexWriterThreadsToSegments extends LuceneTestCase {
 
   public void testDocsStuckInRAMForever() throws Exception {
     Directory dir = newDirectory();
-    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));
+    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));
     iwc.setRAMBufferSizeMB(.2);
     Codec codec = Codec.forName("Lucene49");
     iwc.setCodec(codec);
diff --git lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode.java lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode.java
index e406327..8c881ad 100644
--- lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode.java
+++ lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode.java
@@ -243,7 +243,7 @@ public class TestIndexWriterUnicode extends LuceneTestCase {
     IndexReader r = w.getReader();
     assertEquals(1, r.docFreq(new Term("field", "a\uffffb")));
     r.close();
-    w.shutdown();
+    w.close();
     d.close();
   }
 
@@ -257,7 +257,7 @@ public class TestIndexWriterUnicode extends LuceneTestCase {
     for(int i=0;i<count;i++)
       doc.add(newTextField("f" + i, utf8Data[2*i], Field.Store.YES));
     w.addDocument(doc);
-    w.shutdown();
+    w.close();
 
     IndexReader ir = DirectoryReader.open(dir);
     StoredDocument doc2 = ir.document(0);
@@ -331,7 +331,7 @@ public class TestIndexWriterUnicode extends LuceneTestCase {
     checkTermsOrder(r, allTerms, true);
     r.close();
 
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
 }
diff --git lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.java lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.java
index e5e7ffa..5438e56 100644
--- lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.java
+++ lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.java
@@ -141,6 +141,7 @@ public class TestIndexWriterWithThreads extends LuceneTestCase {
             .setMaxBufferedDocs(2)
             .setMergeScheduler(new ConcurrentMergeScheduler())
             .setMergePolicy(newLogMergePolicy(4))
+            .setCommitOnClose(false)
       );
       ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();
       dir.setMaxSizeInBytes(4*1024+20*iter);
@@ -163,7 +164,11 @@ public class TestIndexWriterWithThreads extends LuceneTestCase {
       // Make sure once disk space is avail again, we can
       // cleanly close:
       dir.setMaxSizeInBytes(0);
-      writer.shutdown(false);
+      try {
+        writer.commit();
+      } finally {
+        writer.close();
+      }
       dir.close();
     }
   }
@@ -188,6 +193,7 @@ public class TestIndexWriterWithThreads extends LuceneTestCase {
             .setMaxBufferedDocs(10)
             .setMergeScheduler(new ConcurrentMergeScheduler())
             .setMergePolicy(newLogMergePolicy(4))
+            .setCommitOnClose(false)
       );
       ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();
 
@@ -215,7 +221,11 @@ public class TestIndexWriterWithThreads extends LuceneTestCase {
       if (VERBOSE) {
         System.out.println("\nTEST: now close");
       }
-      writer.shutdown(false);
+      try {
+        writer.commit();
+      } finally {
+        writer.close();
+      }
 
       // Make sure threads that are adding docs are not hung:
       for(int i=0;i<NUM_THREADS;i++) {
@@ -263,6 +273,7 @@ public class TestIndexWriterWithThreads extends LuceneTestCase {
              .setMaxBufferedDocs(2)
              .setMergeScheduler(new ConcurrentMergeScheduler())
              .setMergePolicy(newLogMergePolicy(4))
+             .setCommitOnClose(false)
       );
       ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();
 
@@ -286,11 +297,12 @@ public class TestIndexWriterWithThreads extends LuceneTestCase {
 
       boolean success = false;
       try {
-        writer.shutdown(false);
+        writer.commit();
+        writer.close();
         success = true;
       } catch (IOException ioe) {
+        writer.rollback();
         failure.clearDoFail();
-        writer.close();
       }
       if (VERBOSE) {
         System.out.println("TEST: success=" + success);
@@ -319,7 +331,8 @@ public class TestIndexWriterWithThreads extends LuceneTestCase {
 
     IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))
                                                 .setMaxBufferedDocs(2)
-                                                .setMergeScheduler(new ConcurrentMergeScheduler()));
+                                                .setMergeScheduler(new ConcurrentMergeScheduler())
+                                                .setCommitOnClose(false));
     final Document doc = new Document();
     FieldType customType = new FieldType(TextField.TYPE_STORED);
     customType.setStoreTermVectors(true);
@@ -341,7 +354,11 @@ public class TestIndexWriterWithThreads extends LuceneTestCase {
     }
     failure.clearDoFail();
     writer.addDocument(doc);
-    writer.shutdown(false);
+    try {
+      writer.commit();
+    } finally {
+      writer.close();
+    }
     dir.close();
   }
 
@@ -528,7 +545,7 @@ public class TestIndexWriterWithThreads extends LuceneTestCase {
         iwConstructed.countDown();
         startIndexing.await();
         writer.addDocument(doc);
-        writer.shutdown();
+        writer.close();
       } catch (Throwable e) {
         failed = true;
         failure = e;
@@ -630,7 +647,7 @@ public class TestIndexWriterWithThreads extends LuceneTestCase {
     }
 
     assertTrue(!failed.get());
-    writerRef.get().shutdown();
+    writerRef.get().close();
     d.close();
   }
 }
diff --git lucene/core/src/test/org/apache/lucene/index/TestIndexableField.java lucene/core/src/test/org/apache/lucene/index/TestIndexableField.java
index 2343b08..1540667 100644
--- lucene/core/src/test/org/apache/lucene/index/TestIndexableField.java
+++ lucene/core/src/test/org/apache/lucene/index/TestIndexableField.java
@@ -283,7 +283,7 @@ public class TestIndexableField extends LuceneTestCase {
     }
 
     final IndexReader r = w.getReader();
-    w.shutdown();
+    w.close();
 
     final IndexSearcher s = newSearcher(r);
     int counter = 0;
diff --git lucene/core/src/test/org/apache/lucene/index/TestIsCurrent.java lucene/core/src/test/org/apache/lucene/index/TestIsCurrent.java
index c049a94..d942196 100644
--- lucene/core/src/test/org/apache/lucene/index/TestIsCurrent.java
+++ lucene/core/src/test/org/apache/lucene/index/TestIsCurrent.java
@@ -50,7 +50,7 @@ public class TestIsCurrent extends LuceneTestCase {
   @Override
   public void tearDown() throws Exception {
     super.tearDown();
-    writer.shutdown();
+    writer.close();
     directory.close();
   }
 
diff --git lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping.java lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping.java
index 632e61d..9e4ae9c 100644
--- lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping.java
+++ lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping.java
@@ -102,7 +102,7 @@ public class TestLazyProxSkipping extends LuceneTestCase {
         
         // make sure the index has only a single segment
         writer.forceMerge(1);
-        writer.shutdown();
+        writer.close();
 
       SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(directory));
 
@@ -151,7 +151,7 @@ public class TestLazyProxSkipping extends LuceneTestCase {
             writer.addDocument(doc);
         }
         
-        writer.shutdown();
+        writer.close();
         IndexReader reader = DirectoryReader.open(directory);
 
         DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,
diff --git lucene/core/src/test/org/apache/lucene/index/TestLongPostings.java lucene/core/src/test/org/apache/lucene/index/TestLongPostings.java
index 482cf4f..7731c57 100644
--- lucene/core/src/test/org/apache/lucene/index/TestLongPostings.java
+++ lucene/core/src/test/org/apache/lucene/index/TestLongPostings.java
@@ -34,7 +34,6 @@ import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.LuceneTestCase.SuppressCodecs;
 import org.apache.lucene.util.FixedBitSet;
 import org.apache.lucene.util.TestUtil;
-import org.apache.lucene.util.TestUtil;
 
 @SuppressCodecs({ "SimpleText", "Memory", "Direct" })
 public class TestLongPostings extends LuceneTestCase {
@@ -128,7 +127,7 @@ public class TestLongPostings extends LuceneTestCase {
     }
 
     r = riw.getReader();
-    riw.shutdown();
+    riw.close();
 
     /*
     if (VERBOSE) {
@@ -328,7 +327,7 @@ public class TestLongPostings extends LuceneTestCase {
       }
 
       r = riw.getReader();
-      riw.shutdown();
+      riw.close();
     } else {
       r = DirectoryReader.open(dir);
     }
diff --git lucene/core/src/test/org/apache/lucene/index/TestMaxTermFrequency.java lucene/core/src/test/org/apache/lucene/index/TestMaxTermFrequency.java
index 7e839a7..c2dc509 100644
--- lucene/core/src/test/org/apache/lucene/index/TestMaxTermFrequency.java
+++ lucene/core/src/test/org/apache/lucene/index/TestMaxTermFrequency.java
@@ -57,7 +57,7 @@ public class TestMaxTermFrequency extends LuceneTestCase {
       writer.addDocument(doc);
     }
     reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
   }
   
   @Override
diff --git lucene/core/src/test/org/apache/lucene/index/TestMixedCodecs.java lucene/core/src/test/org/apache/lucene/index/TestMixedCodecs.java
index eddcd84..6fc5c84 100644
--- lucene/core/src/test/org/apache/lucene/index/TestMixedCodecs.java
+++ lucene/core/src/test/org/apache/lucene/index/TestMixedCodecs.java
@@ -53,7 +53,7 @@ public class TestMixedCodecs extends LuceneTestCase {
           iwc.setCodec(Codec.forName("SimpleText"));
         }
         if (w != null) {
-          w.shutdown();
+          w.close();
         }
         w = new RandomIndexWriter(random(), dir, iwc);
         docsLeftInThisSegment = TestUtil.nextInt(random(), 10, 100);
@@ -84,7 +84,7 @@ public class TestMixedCodecs extends LuceneTestCase {
       }
     }
 
-    w.shutdown();
+    w.close();
     dir.close();
   }
 }
diff --git lucene/core/src/test/org/apache/lucene/index/TestMixedDocValuesUpdates.java lucene/core/src/test/org/apache/lucene/index/TestMixedDocValuesUpdates.java
index 061b8ee..59f111d 100644
--- lucene/core/src/test/org/apache/lucene/index/TestMixedDocValuesUpdates.java
+++ lucene/core/src/test/org/apache/lucene/index/TestMixedDocValuesUpdates.java
@@ -149,7 +149,7 @@ public class TestMixedDocValuesUpdates extends LuceneTestCase {
 //      System.out.println();
     }
     
-    writer.shutdown();
+    writer.close();
     IOUtils.close(reader, dir);
   }
   
@@ -257,7 +257,7 @@ public class TestMixedDocValuesUpdates extends LuceneTestCase {
     
     for (Thread t : threads) t.start();
     done.await();
-    writer.shutdown();
+    writer.close();
     
     DirectoryReader reader = DirectoryReader.open(dir);
     BytesRef scratch = new BytesRef();
@@ -322,7 +322,7 @@ public class TestMixedDocValuesUpdates extends LuceneTestCase {
       }
       reader.close();
     }
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
 
@@ -376,7 +376,7 @@ public class TestMixedDocValuesUpdates extends LuceneTestCase {
           new NumericDocValuesField("cf"+field, value*2));
     }
 
-    writer.shutdown();
+    writer.close();
     
     DirectoryReader reader = DirectoryReader.open(dir);
     for (AtomicReaderContext context : reader.leaves()) {
diff --git lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues.java lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues.java
index e08a384..623ba15 100644
--- lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues.java
+++ lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues.java
@@ -31,7 +31,6 @@ import org.apache.lucene.util.Bits;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.TestUtil;
-import org.apache.lucene.util.TestUtil;
 
 /** Tests MultiDocValues versus ordinary segment merging */
 public class TestMultiDocValues extends LuceneTestCase {
@@ -42,7 +41,7 @@ public class TestMultiDocValues extends LuceneTestCase {
     Field field = new NumericDocValuesField("numbers", 0);
     doc.add(field);
     
-    IndexWriterConfig iwc = newIndexWriterConfig(random(), TEST_VERSION_CURRENT, null);
+    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);
     iwc.setMergePolicy(newLogMergePolicy());
     RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);
 
@@ -58,7 +57,7 @@ public class TestMultiDocValues extends LuceneTestCase {
     iw.forceMerge(1);
     DirectoryReader ir2 = iw.getReader();
     AtomicReader merged = getOnlySegmentReader(ir2);
-    iw.shutdown();
+    iw.close();
     
     NumericDocValues multi = MultiDocValues.getNumericValues(ir, "numbers");
     NumericDocValues single = merged.getNumericDocValues("numbers");
@@ -77,7 +76,7 @@ public class TestMultiDocValues extends LuceneTestCase {
     Field field = new BinaryDocValuesField("bytes", ref);
     doc.add(field);
     
-    IndexWriterConfig iwc = newIndexWriterConfig(random(), TEST_VERSION_CURRENT, null);
+    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);
     iwc.setMergePolicy(newLogMergePolicy());
     RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);
 
@@ -93,7 +92,7 @@ public class TestMultiDocValues extends LuceneTestCase {
     iw.forceMerge(1);
     DirectoryReader ir2 = iw.getReader();
     AtomicReader merged = getOnlySegmentReader(ir2);
-    iw.shutdown();
+    iw.close();
     
     BinaryDocValues multi = MultiDocValues.getBinaryValues(ir, "bytes");
     BinaryDocValues single = merged.getBinaryDocValues("bytes");
@@ -114,7 +113,7 @@ public class TestMultiDocValues extends LuceneTestCase {
     Field field = new SortedDocValuesField("bytes", ref);
     doc.add(field);
     
-    IndexWriterConfig iwc = newIndexWriterConfig(random(), TEST_VERSION_CURRENT, null);
+    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);
     iwc.setMergePolicy(newLogMergePolicy());
     RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);
 
@@ -133,7 +132,7 @@ public class TestMultiDocValues extends LuceneTestCase {
     iw.forceMerge(1);
     DirectoryReader ir2 = iw.getReader();
     AtomicReader merged = getOnlySegmentReader(ir2);
-    iw.shutdown();
+    iw.close();
     
     SortedDocValues multi = MultiDocValues.getSortedValues(ir, "bytes");
     SortedDocValues single = merged.getSortedDocValues("bytes");
@@ -159,7 +158,7 @@ public class TestMultiDocValues extends LuceneTestCase {
     Field field = new SortedDocValuesField("bytes", ref);
     doc.add(field);
     
-    IndexWriterConfig iwc = newIndexWriterConfig(random(), TEST_VERSION_CURRENT, null);
+    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);
     iwc.setMergePolicy(newLogMergePolicy());
     RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);
 
@@ -175,7 +174,7 @@ public class TestMultiDocValues extends LuceneTestCase {
     iw.forceMerge(1);
     DirectoryReader ir2 = iw.getReader();
     AtomicReader merged = getOnlySegmentReader(ir2);
-    iw.shutdown();
+    iw.close();
     
     SortedDocValues multi = MultiDocValues.getSortedValues(ir, "bytes");
     SortedDocValues single = merged.getSortedDocValues("bytes");
@@ -197,7 +196,7 @@ public class TestMultiDocValues extends LuceneTestCase {
     assumeTrue("codec does not support SORTED_SET", defaultCodecSupportsSortedSet());
     Directory dir = newDirectory();
     
-    IndexWriterConfig iwc = newIndexWriterConfig(random(), TEST_VERSION_CURRENT, null);
+    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);
     iwc.setMergePolicy(newLogMergePolicy());
     RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);
 
@@ -217,7 +216,7 @@ public class TestMultiDocValues extends LuceneTestCase {
     iw.forceMerge(1);
     DirectoryReader ir2 = iw.getReader();
     AtomicReader merged = getOnlySegmentReader(ir2);
-    iw.shutdown();
+    iw.close();
     
     SortedSetDocValues multi = MultiDocValues.getSortedSetValues(ir, "bytes");
     SortedSetDocValues single = merged.getSortedSetDocValues("bytes");
@@ -260,7 +259,7 @@ public class TestMultiDocValues extends LuceneTestCase {
     assumeTrue("codec does not support SORTED_SET", defaultCodecSupportsSortedSet());
     Directory dir = newDirectory();
     
-    IndexWriterConfig iwc = newIndexWriterConfig(random(), TEST_VERSION_CURRENT, null);
+    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);
     iwc.setMergePolicy(newLogMergePolicy());
     RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);
 
@@ -280,7 +279,7 @@ public class TestMultiDocValues extends LuceneTestCase {
     iw.forceMerge(1);
     DirectoryReader ir2 = iw.getReader();
     AtomicReader merged = getOnlySegmentReader(ir2);
-    iw.shutdown();
+    iw.close();
     
     SortedSetDocValues multi = MultiDocValues.getSortedSetValues(ir, "bytes");
     SortedSetDocValues single = merged.getSortedSetDocValues("bytes");
@@ -322,7 +321,7 @@ public class TestMultiDocValues extends LuceneTestCase {
     assumeTrue("codec does not support SORTED_NUMERIC", defaultCodecSupportsSortedNumeric());
     Directory dir = newDirectory();
     
-    IndexWriterConfig iwc = newIndexWriterConfig(random(), TEST_VERSION_CURRENT, null);
+    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);
     iwc.setMergePolicy(newLogMergePolicy());
     RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);
 
@@ -342,7 +341,7 @@ public class TestMultiDocValues extends LuceneTestCase {
     iw.forceMerge(1);
     DirectoryReader ir2 = iw.getReader();
     AtomicReader merged = getOnlySegmentReader(ir2);
-    iw.shutdown();
+    iw.close();
     
     SortedNumericDocValues multi = MultiDocValues.getSortedNumericValues(ir, "nums");
     SortedNumericDocValues single = merged.getSortedNumericDocValues("nums");
@@ -374,7 +373,7 @@ public class TestMultiDocValues extends LuceneTestCase {
     assumeTrue("codec does not support docsWithField", defaultCodecSupportsDocsWithField());
     Directory dir = newDirectory();
     
-    IndexWriterConfig iwc = newIndexWriterConfig(random(), TEST_VERSION_CURRENT, null);
+    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);
     iwc.setMergePolicy(newLogMergePolicy());
     RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);
 
@@ -394,7 +393,7 @@ public class TestMultiDocValues extends LuceneTestCase {
     iw.forceMerge(1);
     DirectoryReader ir2 = iw.getReader();
     AtomicReader merged = getOnlySegmentReader(ir2);
-    iw.shutdown();
+    iw.close();
     
     Bits multi = MultiDocValues.getDocsWithField(ir, "numbers");
     Bits single = merged.getDocsWithField("numbers");
diff --git lucene/core/src/test/org/apache/lucene/index/TestMultiFields.java lucene/core/src/test/org/apache/lucene/index/TestMultiFields.java
index cb04247..a0b6170 100644
--- lucene/core/src/test/org/apache/lucene/index/TestMultiFields.java
+++ lucene/core/src/test/org/apache/lucene/index/TestMultiFields.java
@@ -107,7 +107,7 @@ public class TestMultiFields extends LuceneTestCase {
       }
 
       IndexReader reader = w.getReader();
-      w.shutdown();
+      w.close();
       if (VERBOSE) {
         System.out.println("TEST: reader=" + reader);
       }
@@ -163,7 +163,7 @@ public class TestMultiFields extends LuceneTestCase {
     w.commit();
     w.addDocument(d);
     IndexReader r = w.getReader();
-    w.shutdown();
+    w.close();
     DocsEnum d1 = TestUtil.docs(random(), r, "f", new BytesRef("j"), null, null, DocsEnum.FLAG_NONE);
     DocsEnum d2 = TestUtil.docs(random(), r, "f", new BytesRef("j"), null, null, DocsEnum.FLAG_NONE);
     assertEquals(0, d1.nextDoc());
@@ -181,7 +181,7 @@ public class TestMultiFields extends LuceneTestCase {
     w.commit();
     w.addDocument(d);
     IndexReader r = w.getReader();
-    w.shutdown();
+    w.close();
     DocsEnum de = MultiFields.getTermDocsEnum(r, null, "f", new BytesRef("j"));
     assertEquals(0, de.nextDoc());
     assertEquals(1, de.nextDoc());
diff --git lucene/core/src/test/org/apache/lucene/index/TestMultiLevelSkipList.java lucene/core/src/test/org/apache/lucene/index/TestMultiLevelSkipList.java
index a6d5466..caf1cdc 100644
--- lucene/core/src/test/org/apache/lucene/index/TestMultiLevelSkipList.java
+++ lucene/core/src/test/org/apache/lucene/index/TestMultiLevelSkipList.java
@@ -79,7 +79,7 @@ public class TestMultiLevelSkipList extends LuceneTestCase {
     }
     writer.commit();
     writer.forceMerge(1);
-    writer.shutdown();
+    writer.close();
 
     AtomicReader reader = getOnlySegmentReader(DirectoryReader.open(dir));
     
diff --git lucene/core/src/test/org/apache/lucene/index/TestNRTReaderWithThreads.java lucene/core/src/test/org/apache/lucene/index/TestNRTReaderWithThreads.java
index 7dd95f9..41da4de 100644
--- lucene/core/src/test/org/apache/lucene/index/TestNRTReaderWithThreads.java
+++ lucene/core/src/test/org/apache/lucene/index/TestNRTReaderWithThreads.java
@@ -69,7 +69,7 @@ public class TestNRTReaderWithThreads extends LuceneTestCase {
     }
     //System.out.println("addCount:"+addCount);
     //System.out.println("delCount:"+delCount);
-    writer.shutdown();
+    writer.close();
     mainDir.close();
   }
 
diff --git lucene/core/src/test/org/apache/lucene/index/TestNeverDelete.java lucene/core/src/test/org/apache/lucene/index/TestNeverDelete.java
index 373643b..b88d8b2 100644
--- lucene/core/src/test/org/apache/lucene/index/TestNeverDelete.java
+++ lucene/core/src/test/org/apache/lucene/index/TestNeverDelete.java
@@ -104,7 +104,7 @@ public class TestNeverDelete extends LuceneTestCase {
     for(Thread t : indexThreads) {
       t.join();
     }
-    w.shutdown();
+    w.close();
     d.close();
 
     TestUtil.rm(tmpDir);
diff --git lucene/core/src/test/org/apache/lucene/index/TestNewestSegment.java lucene/core/src/test/org/apache/lucene/index/TestNewestSegment.java
index 7e98115..5c40861 100644
--- lucene/core/src/test/org/apache/lucene/index/TestNewestSegment.java
+++ lucene/core/src/test/org/apache/lucene/index/TestNewestSegment.java
@@ -26,7 +26,7 @@ public class TestNewestSegment extends LuceneTestCase {
     Directory directory = newDirectory();
     IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));
     assertNull(writer.newestSegment());
-    writer.shutdown();
+    writer.close();
     directory.close();
   }
 }
diff --git lucene/core/src/test/org/apache/lucene/index/TestNoDeletionPolicy.java lucene/core/src/test/org/apache/lucene/index/TestNoDeletionPolicy.java
index ec64751..7377b46 100644
--- lucene/core/src/test/org/apache/lucene/index/TestNoDeletionPolicy.java
+++ lucene/core/src/test/org/apache/lucene/index/TestNoDeletionPolicy.java
@@ -26,7 +26,6 @@ import org.apache.lucene.analysis.MockAnalyzer;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.store.Directory;
-import org.apache.lucene.store.MockDirectoryWrapper;
 import org.apache.lucene.util.LuceneTestCase;
 import org.junit.Test;
 
@@ -79,7 +78,7 @@ public class TestNoDeletionPolicy extends LuceneTestCase {
       writer.commit();
       assertEquals("wrong number of commits !", i + 1, DirectoryReader.listCommits(dir).size());
     }
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
   
diff --git lucene/core/src/test/org/apache/lucene/index/TestNorms.java lucene/core/src/test/org/apache/lucene/index/TestNorms.java
index 61d3e64..fa9e0ac 100644
--- lucene/core/src/test/org/apache/lucene/index/TestNorms.java
+++ lucene/core/src/test/org/apache/lucene/index/TestNorms.java
@@ -92,7 +92,7 @@ public class TestNorms extends LuceneTestCase {
     }
     
     IndexReader reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     NumericDocValues fooNorms = MultiDocValues.getNormValues(reader, "foo");
     for (int i = 0; i < reader.maxDoc(); i++) {
@@ -148,7 +148,7 @@ public class TestNorms extends LuceneTestCase {
       }
     }
     writer.commit();
-    writer.shutdown();
+    writer.close();
     docs.close();
   }
 
diff --git lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates.java lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates.java
index 525ac83..4cbe3b1 100644
--- lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates.java
+++ lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates.java
@@ -85,7 +85,7 @@ public class TestNumericDocValuesUpdates extends LuceneTestCase {
     writer.getConfig().setRAMBufferSizeMB(1000d);
     writer.updateNumericDocValue(new Term("id", "doc-2"), "val", 7L);
     assertEquals(4, writer.getFlushDeletesCount());
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
   
@@ -106,11 +106,11 @@ public class TestNumericDocValuesUpdates extends LuceneTestCase {
     
     final DirectoryReader reader;
     if (random().nextBoolean()) { // not NRT
-      writer.shutdown();
+      writer.close();
       reader = DirectoryReader.open(dir);
     } else { // NRT
       reader = DirectoryReader.open(writer, true);
-      writer.shutdown();
+      writer.close();
     }
     
     assertEquals(1, reader.leaves().size());
@@ -149,11 +149,11 @@ public class TestNumericDocValuesUpdates extends LuceneTestCase {
     
     final DirectoryReader reader;
     if (random().nextBoolean()) { // not NRT
-      writer.shutdown();
+      writer.close();
       reader = DirectoryReader.open(dir);
     } else { // NRT
       reader = DirectoryReader.open(writer, true);
-      writer.shutdown();
+      writer.close();
     }
     
     for (AtomicReaderContext context : reader.leaves()) {
@@ -202,7 +202,7 @@ public class TestNumericDocValuesUpdates extends LuceneTestCase {
     assertEquals(1, reader1.leaves().get(0).reader().getNumericDocValues("val").get(0));
     assertEquals(10, reader2.leaves().get(0).reader().getNumericDocValues("val").get(0));
 
-    writer.shutdown();
+    writer.close();
     IOUtils.close(reader1, reader2, dir);
   }
   
@@ -232,11 +232,11 @@ public class TestNumericDocValuesUpdates extends LuceneTestCase {
     
     final DirectoryReader reader;
     if (random().nextBoolean()) { // not NRT
-      writer.shutdown();
+      writer.close();
       reader = DirectoryReader.open(dir);
     } else { // NRT
       reader = DirectoryReader.open(writer, true);
-      writer.shutdown();
+      writer.close();
     }
     
     AtomicReader slow = SlowCompositeReaderWrapper.wrap(reader);
@@ -277,11 +277,11 @@ public class TestNumericDocValuesUpdates extends LuceneTestCase {
     
     final DirectoryReader reader;
     if (random().nextBoolean()) { // not NRT
-      writer.shutdown();
+      writer.close();
       reader = DirectoryReader.open(dir);
     } else { // NRT
       reader = DirectoryReader.open(writer, true);
-      writer.shutdown();
+      writer.close();
     }
     
     AtomicReader r = reader.leaves().get(0).reader();
@@ -312,11 +312,11 @@ public class TestNumericDocValuesUpdates extends LuceneTestCase {
     
     final DirectoryReader reader;
     if (random().nextBoolean()) { // not NRT
-      writer.shutdown();
+      writer.close();
       reader = DirectoryReader.open(dir);
     } else { // NRT
       reader = DirectoryReader.open(writer, true);
-      writer.shutdown();
+      writer.close();
     }
     
     AtomicReader r = reader.leaves().get(0).reader();
@@ -348,7 +348,7 @@ public class TestNumericDocValuesUpdates extends LuceneTestCase {
     
     // update all docs' ndv field
     writer.updateNumericDocValue(new Term("dvUpdateKey", "dv"), "ndv", 17L);
-    writer.shutdown();
+    writer.close();
     
     final DirectoryReader reader = DirectoryReader.open(dir);
     AtomicReader r = reader.leaves().get(0).reader();
@@ -396,7 +396,7 @@ public class TestNumericDocValuesUpdates extends LuceneTestCase {
     
     // update all docs' ndv1 field
     writer.updateNumericDocValue(new Term("dvUpdateKey", "dv"), "ndv1", 17L);
-    writer.shutdown();
+    writer.close();
     
     final DirectoryReader reader = DirectoryReader.open(dir);
     AtomicReader r = reader.leaves().get(0).reader();
@@ -429,7 +429,7 @@ public class TestNumericDocValuesUpdates extends LuceneTestCase {
     
     // update all docs' ndv field
     writer.updateNumericDocValue(new Term("dvUpdateKey", "dv"), "ndv", 17L);
-    writer.shutdown();
+    writer.close();
     
     final DirectoryReader reader = DirectoryReader.open(dir);
     AtomicReader r = reader.leaves().get(0).reader();
@@ -471,7 +471,7 @@ public class TestNumericDocValuesUpdates extends LuceneTestCase {
       // ok
     }
     
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
   
@@ -496,7 +496,7 @@ public class TestNumericDocValuesUpdates extends LuceneTestCase {
     writer.addDocument(doc); // in-memory document
     
     writer.updateNumericDocValue(new Term("key", "doc"), "ndv", 17L);
-    writer.shutdown();
+    writer.close();
     
     final DirectoryReader reader = DirectoryReader.open(dir);
     
@@ -528,7 +528,7 @@ public class TestNumericDocValuesUpdates extends LuceneTestCase {
     
     writer.updateNumericDocValue(new Term("key", "doc"), "ndv", 17L); // update existing field
     writer.updateNumericDocValue(new Term("key", "doc"), "ndv", 3L); // update existing field 2nd time in this commit
-    writer.shutdown();
+    writer.close();
     
     final DirectoryReader reader = DirectoryReader.open(dir);
     final AtomicReader r = SlowCompositeReaderWrapper.wrap(reader);
@@ -571,7 +571,7 @@ public class TestNumericDocValuesUpdates extends LuceneTestCase {
       if (random.nextDouble() < 0.4) {
         writer.commit();
       } else if (random.nextDouble() < 0.1) {
-        writer.shutdown();
+        writer.close();
         conf = newIndexWriterConfig(new MockAnalyzer(random));
         writer = new IndexWriter(dir, conf);
       }
@@ -608,7 +608,7 @@ public class TestNumericDocValuesUpdates extends LuceneTestCase {
       reader.close();
     }
     
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
   
@@ -629,7 +629,7 @@ public class TestNumericDocValuesUpdates extends LuceneTestCase {
     
     writer.updateNumericDocValue(new Term("k1", "v1"), "ndv", 17L);
     writer.updateNumericDocValue(new Term("k2", "v2"), "ndv", 3L);
-    writer.shutdown();
+    writer.close();
     
     final DirectoryReader reader = DirectoryReader.open(dir);
     final AtomicReader r = SlowCompositeReaderWrapper.wrap(reader);
@@ -728,7 +728,7 @@ public class TestNumericDocValuesUpdates extends LuceneTestCase {
 //      System.out.println();
     }
 
-    writer.shutdown();
+    writer.close();
     IOUtils.close(reader, dir);
   }
   
@@ -737,7 +737,7 @@ public class TestNumericDocValuesUpdates extends LuceneTestCase {
     Directory dir = newDirectory();
     IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));
     // prevent merges, otherwise by the time updates are applied
-    // (writer.shutdown()), the segments might have merged and that update becomes
+    // (writer.close()), the segments might have merged and that update becomes
     // legit.
     conf.setMergePolicy(NoMergePolicy.INSTANCE);
     IndexWriter writer = new IndexWriter(dir, conf);
@@ -768,7 +768,7 @@ public class TestNumericDocValuesUpdates extends LuceneTestCase {
     // update document in the second segment - field should be added and we should
     // be able to handle the other document correctly (e.g. no NPE)
     writer.updateNumericDocValue(new Term("id", "doc1"), "ndv", 5L);
-    writer.shutdown();
+    writer.close();
 
     DirectoryReader reader = DirectoryReader.open(dir);
     for (AtomicReaderContext context : reader.leaves()) {
@@ -791,7 +791,7 @@ public class TestNumericDocValuesUpdates extends LuceneTestCase {
     Directory dir = newDirectory();
     IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));
     // prevent merges, otherwise by the time updates are applied
-    // (writer.shutdown()), the segments might have merged and that update becomes
+    // (writer.close()), the segments might have merged and that update becomes
     // legit.
     conf.setMergePolicy(NoMergePolicy.INSTANCE);
     IndexWriter writer = new IndexWriter(dir, conf);
@@ -813,7 +813,7 @@ public class TestNumericDocValuesUpdates extends LuceneTestCase {
     
     // update document in the second segment
     writer.updateNumericDocValue(new Term("id", "doc1"), "ndv", 5L);
-    writer.shutdown();
+    writer.close();
 
     DirectoryReader reader = DirectoryReader.open(dir);
     for (AtomicReaderContext context : reader.leaves()) {
@@ -842,7 +842,7 @@ public class TestNumericDocValuesUpdates extends LuceneTestCase {
     writer.addDocument(doc);
     writer.commit();
     writer.updateNumericDocValue(new Term("f", "mock-value"), "f", 17L);
-    writer.shutdown();
+    writer.close();
     
     DirectoryReader r = DirectoryReader.open(dir);
     NumericDocValues ndv = r.leaves().get(0).reader().getNumericDocValues("f");
@@ -867,14 +867,14 @@ public class TestNumericDocValuesUpdates extends LuceneTestCase {
     doc.add(new StringField("id", "doc", Store.NO));
     doc.add(new NumericDocValuesField("f", 5));
     writer.addDocument(doc);
-    writer.shutdown();
+    writer.close();
     
     conf = newIndexWriterConfig(new MockAnalyzer(random()));
     writer = new IndexWriter(dir, conf);
     writer.updateNumericDocValue(new Term("id", "doc"), "f", 4L);
     OLD_FORMAT_IMPERSONATION_IS_ACTIVE = false;
     try {
-      writer.shutdown();
+      writer.close();
       fail("should not have succeeded to update a segment written with an old Codec");
     } catch (UnsupportedOperationException e) {
       writer.rollback(); 
@@ -989,7 +989,7 @@ public class TestNumericDocValuesUpdates extends LuceneTestCase {
     
     for (Thread t : threads) t.start();
     done.await();
-    writer.shutdown();
+    writer.close();
     
     DirectoryReader reader = DirectoryReader.open(dir);
     for (AtomicReaderContext context : reader.leaves()) {
@@ -1048,7 +1048,7 @@ public class TestNumericDocValuesUpdates extends LuceneTestCase {
       }
       reader.close();
     }
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
 
@@ -1069,7 +1069,7 @@ public class TestNumericDocValuesUpdates extends LuceneTestCase {
     doc.add(new NumericDocValuesField("f1", 5L));
     doc.add(new NumericDocValuesField("f2", 13L));
     writer.addDocument(doc);
-    writer.shutdown();
+    writer.close();
     
     // change format
     conf = newIndexWriterConfig(new MockAnalyzer(random()));
@@ -1087,7 +1087,7 @@ public class TestNumericDocValuesUpdates extends LuceneTestCase {
     doc.add(new NumericDocValuesField("f2", 2L));
     writer.addDocument(doc);
     writer.updateNumericDocValue(new Term("id", "d0"), "f1", 12L);
-    writer.shutdown();
+    writer.close();
     
     DirectoryReader reader = DirectoryReader.open(dir);
     AtomicReader r = SlowCompositeReaderWrapper.wrap(reader);
@@ -1131,7 +1131,7 @@ public class TestNumericDocValuesUpdates extends LuceneTestCase {
     long value = random().nextInt();
     Term term = new Term("id", RandomPicks.randomFrom(random(), randomTerms));
     writer.updateDocValues(term, new NumericDocValuesField("ndv", value), new NumericDocValuesField("control", value*2));
-    writer.shutdown();
+    writer.close();
     
     Directory dir2 = newDirectory();
     conf = newIndexWriterConfig(new MockAnalyzer(random()));
@@ -1143,7 +1143,7 @@ public class TestNumericDocValuesUpdates extends LuceneTestCase {
       writer.addIndexes(reader);
       reader.close();
     }
-    writer.shutdown();
+    writer.close();
     
     DirectoryReader reader = DirectoryReader.open(dir2);
     for (AtomicReaderContext context : reader.leaves()) {
@@ -1185,7 +1185,7 @@ public class TestNumericDocValuesUpdates extends LuceneTestCase {
       assertEquals(numFiles, dir.listAll().length);
     }
     
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
 
@@ -1239,7 +1239,7 @@ public class TestNumericDocValuesUpdates extends LuceneTestCase {
       writer.updateDocValues(updateTerm, new NumericDocValuesField("f"+field, value), new NumericDocValuesField("cf"+field, value*2));
     }
 
-    writer.shutdown();
+    writer.close();
     
     DirectoryReader reader = DirectoryReader.open(dir);
     for (AtomicReaderContext context : reader.leaves()) {
@@ -1274,7 +1274,7 @@ public class TestNumericDocValuesUpdates extends LuceneTestCase {
     writer.updateNumericDocValue(new Term("upd", "t2"), "f1", 3L); // update f1 to 3
     writer.updateNumericDocValue(new Term("upd", "t2"), "f2", 3L); // update f2 to 3
     writer.updateNumericDocValue(new Term("upd", "t1"), "f1", 4L); // update f1 to 4 (but not f2)
-    writer.shutdown();
+    writer.close();
     
     DirectoryReader reader = DirectoryReader.open(dir);
     assertEquals(4, reader.leaves().get(0).reader().getNumericDocValues("f1").get(0));
@@ -1299,7 +1299,7 @@ public class TestNumericDocValuesUpdates extends LuceneTestCase {
     writer.deleteDocuments(new Term("id", "doc")); // delete all docs in the first segment
     writer.addDocument(doc);
     writer.updateNumericDocValue(new Term("id", "doc"), "f1", 2L);
-    writer.shutdown();
+    writer.close();
     
     DirectoryReader reader = DirectoryReader.open(dir);
     assertEquals(1, reader.leaves().size());
@@ -1322,7 +1322,7 @@ public class TestNumericDocValuesUpdates extends LuceneTestCase {
     // update w/ multiple nonexisting terms in same field
     writer.updateNumericDocValue(new Term("c", "foo"), "f1", 2L);
     writer.updateNumericDocValue(new Term("c", "bar"), "f1", 2L);
-    writer.shutdown();
+    writer.close();
     
     DirectoryReader reader = DirectoryReader.open(dir);
     assertEquals(1, reader.leaves().size());
diff --git lucene/core/src/test/org/apache/lucene/index/TestOmitNorms.java lucene/core/src/test/org/apache/lucene/index/TestOmitNorms.java
index 745bfd3..317310e 100644
--- lucene/core/src/test/org/apache/lucene/index/TestOmitNorms.java
+++ lucene/core/src/test/org/apache/lucene/index/TestOmitNorms.java
@@ -64,7 +64,7 @@ public class TestOmitNorms extends LuceneTestCase {
     // force merge
     writer.forceMerge(1);
     // flush
-    writer.shutdown();
+    writer.close();
 
     SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(ram));
     FieldInfos fi = reader.getFieldInfos();
@@ -118,7 +118,7 @@ public class TestOmitNorms extends LuceneTestCase {
     // force merge
     writer.forceMerge(1);
     // flush
-    writer.shutdown();
+    writer.close();
 
     SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(ram));
     FieldInfos fi = reader.getFieldInfos();
@@ -166,7 +166,7 @@ public class TestOmitNorms extends LuceneTestCase {
     writer.forceMerge(1);
 
     // flush
-    writer.shutdown();
+    writer.close();
 
     SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(ram));
     FieldInfos fi = reader.getFieldInfos();
@@ -213,7 +213,7 @@ public class TestOmitNorms extends LuceneTestCase {
     // force merge
     writer.forceMerge(1);
     // flush
-    writer.shutdown();
+    writer.close();
 
     assertNoNrm(ram);
     ram.close();
@@ -308,7 +308,7 @@ public class TestOmitNorms extends LuceneTestCase {
     }
     ir1.close();
     ir2.close();
-    riw.shutdown();
+    riw.close();
     dir.close();
     return norms1;
   }
diff --git lucene/core/src/test/org/apache/lucene/index/TestOmitPositions.java lucene/core/src/test/org/apache/lucene/index/TestOmitPositions.java
index 71927dc..da17033 100644
--- lucene/core/src/test/org/apache/lucene/index/TestOmitPositions.java
+++ lucene/core/src/test/org/apache/lucene/index/TestOmitPositions.java
@@ -49,7 +49,7 @@ public class TestOmitPositions extends LuceneTestCase {
     }
     
     IndexReader reader = w.getReader();
-    w.shutdown();
+    w.close();
     
     assertNull(MultiFields.getTermPositionsEnum(reader, null, "foo", new BytesRef("test")));
     
@@ -151,7 +151,7 @@ public class TestOmitPositions extends LuceneTestCase {
     // force merge
     writer.forceMerge(1);
     // flush
-    writer.shutdown();
+    writer.close();
 
     SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(ram));
     FieldInfos fi = reader.getFieldInfos();
@@ -221,7 +221,7 @@ public class TestOmitPositions extends LuceneTestCase {
     // force merge
     writer.forceMerge(1);
     // flush
-    writer.shutdown();
+    writer.close();
 
     assertNoPrx(ram);
     ram.close();
@@ -259,7 +259,7 @@ public class TestOmitPositions extends LuceneTestCase {
     FieldInfos fis = MultiFields.getMergedFieldInfos(ir);
     assertEquals(IndexOptions.DOCS_AND_FREQS, fis.fieldInfo("foo").getIndexOptions());
     assertFalse(fis.fieldInfo("foo").hasPayloads());
-    iw.shutdown();
+    iw.close();
     ir.close();
     dir.close(); // checkindex
   }
diff --git lucene/core/src/test/org/apache/lucene/index/TestOmitTf.java lucene/core/src/test/org/apache/lucene/index/TestOmitTf.java
index 095e683..6786cda 100644
--- lucene/core/src/test/org/apache/lucene/index/TestOmitTf.java
+++ lucene/core/src/test/org/apache/lucene/index/TestOmitTf.java
@@ -26,11 +26,9 @@ import org.apache.lucene.document.Field;
 import org.apache.lucene.document.FieldType;
 import org.apache.lucene.document.TextField;
 import org.apache.lucene.index.FieldInfo.IndexOptions;
-import org.apache.lucene.search.LeafCollector;
 import org.apache.lucene.search.BooleanClause.Occur;
 import org.apache.lucene.search.BooleanQuery;
 import org.apache.lucene.search.CollectionStatistics;
-import org.apache.lucene.search.Collector;
 import org.apache.lucene.search.Explanation;
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.PhraseQuery;
@@ -104,7 +102,7 @@ public class TestOmitTf extends LuceneTestCase {
     // force merge
     writer.forceMerge(1);
     // flush
-    writer.shutdown();
+    writer.close();
 
     SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(ram));
     FieldInfos fi = reader.getFieldInfos();
@@ -156,7 +154,7 @@ public class TestOmitTf extends LuceneTestCase {
     // force merge
     writer.forceMerge(1);
     // flush
-    writer.shutdown();
+    writer.close();
 
     SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(ram));
     FieldInfos fi = reader.getFieldInfos();
@@ -199,7 +197,7 @@ public class TestOmitTf extends LuceneTestCase {
     writer.forceMerge(1);
 
     // flush
-    writer.shutdown();
+    writer.close();
 
     SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(ram));
     FieldInfos fi = reader.getFieldInfos();
@@ -252,7 +250,7 @@ public class TestOmitTf extends LuceneTestCase {
     // force merge
     writer.forceMerge(1);
     // flush
-    writer.shutdown();
+    writer.close();
 
     assertNoPrx(ram);
     ram.close();
@@ -288,7 +286,7 @@ public class TestOmitTf extends LuceneTestCase {
         
     writer.forceMerge(1);
     // flush
-    writer.shutdown();
+    writer.close();
 
     /*
      * Verify the index
@@ -454,7 +452,7 @@ public class TestOmitTf extends LuceneTestCase {
     doc.add(f);
     iw.addDocument(doc);
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     assertEquals(-1, ir.totalTermFreq(new Term("foo", new BytesRef("bar"))));
     assertEquals(-1, ir.getSumTotalTermFreq("foo"));
     ir.close();
diff --git lucene/core/src/test/org/apache/lucene/index/TestOrdinalMap.java lucene/core/src/test/org/apache/lucene/index/TestOrdinalMap.java
index 21d491c..20e85d5 100644
--- lucene/core/src/test/org/apache/lucene/index/TestOrdinalMap.java
+++ lucene/core/src/test/org/apache/lucene/index/TestOrdinalMap.java
@@ -64,7 +64,7 @@ public class TestOrdinalMap extends LuceneTestCase {
 
   public void testRamBytesUsed() throws IOException {
     Directory dir = newDirectory();
-    IndexWriterConfig cfg = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(TestUtil.alwaysDocValuesFormat(new Lucene49DocValuesFormat()));
+    IndexWriterConfig cfg = new IndexWriterConfig(new MockAnalyzer(random())).setCodec(TestUtil.alwaysDocValuesFormat(new Lucene49DocValuesFormat()));
     RandomIndexWriter iw = new RandomIndexWriter(random(), dir, cfg);
     final int maxDoc = TestUtil.nextInt(random(), 10, 1000);
     final int maxTermLength = TestUtil.nextInt(random(), 1, 4);
diff --git lucene/core/src/test/org/apache/lucene/index/TestParallelAtomicReader.java lucene/core/src/test/org/apache/lucene/index/TestParallelAtomicReader.java
index ee070aa..e049033 100644
--- lucene/core/src/test/org/apache/lucene/index/TestParallelAtomicReader.java
+++ lucene/core/src/test/org/apache/lucene/index/TestParallelAtomicReader.java
@@ -149,7 +149,7 @@ public class TestParallelAtomicReader extends LuceneTestCase {
 
     d3.add(newTextField("f3", "v1", Field.Store.YES));
     w2.addDocument(d3);
-    w2.shutdown();
+    w2.close();
     
     AtomicReader ir1 = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir1));
     AtomicReader ir2 = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir2));
@@ -274,7 +274,7 @@ public class TestParallelAtomicReader extends LuceneTestCase {
     d2.add(newTextField("f3", "v2", Field.Store.YES));
     d2.add(newTextField("f4", "v2", Field.Store.YES));
     w.addDocument(d2);
-    w.shutdown();
+    w.close();
 
     DirectoryReader ir = DirectoryReader.open(dir);
     return newSearcher(ir);
@@ -302,7 +302,7 @@ public class TestParallelAtomicReader extends LuceneTestCase {
     d2.add(newTextField("f1", "v2", Field.Store.YES));
     d2.add(newTextField("f2", "v2", Field.Store.YES));
     w1.addDocument(d2);
-    w1.shutdown();
+    w1.close();
     return dir1;
   }
 
@@ -317,7 +317,7 @@ public class TestParallelAtomicReader extends LuceneTestCase {
     d4.add(newTextField("f3", "v2", Field.Store.YES));
     d4.add(newTextField("f4", "v2", Field.Store.YES));
     w2.addDocument(d4);
-    w2.shutdown();
+    w2.close();
     return dir2;
   }
 
diff --git lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader.java lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader.java
index 8b8176c..c544254 100644
--- lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader.java
+++ lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader.java
@@ -225,7 +225,7 @@ public class TestParallelCompositeReader extends LuceneTestCase {
 
     d3.add(newTextField("f3", "v1", Field.Store.YES));
     w2.addDocument(d3);
-    w2.shutdown();
+    w2.close();
     
     DirectoryReader ir1 = DirectoryReader.open(dir1),
         ir2 = DirectoryReader.open(dir2);
@@ -444,7 +444,7 @@ public class TestParallelCompositeReader extends LuceneTestCase {
     d4.add(newTextField("f3", "v4", Field.Store.YES));
     d4.add(newTextField("f4", "v4", Field.Store.YES));
     w.addDocument(d4);
-    w.shutdown();
+    w.close();
 
     final CompositeReader ir;
     if (compositeComposite) {
@@ -498,7 +498,7 @@ public class TestParallelCompositeReader extends LuceneTestCase {
     d4.add(newTextField("f1", "v4", Field.Store.YES));
     d4.add(newTextField("f2", "v4", Field.Store.YES));
     w1.addDocument(d4);
-    w1.shutdown();
+    w1.close();
     return dir1;
   }
 
@@ -525,7 +525,7 @@ public class TestParallelCompositeReader extends LuceneTestCase {
     d4.add(newTextField("f3", "v4", Field.Store.YES));
     d4.add(newTextField("f4", "v4", Field.Store.YES));
     w2.addDocument(d4);
-    w2.shutdown();
+    w2.close();
     return dir2;
   }
 
@@ -552,7 +552,7 @@ public class TestParallelCompositeReader extends LuceneTestCase {
     d4.add(newTextField("f3", "v4", Field.Store.YES));
     d4.add(newTextField("f4", "v4", Field.Store.YES));
     w2.addDocument(d4);
-    w2.shutdown();
+    w2.close();
     return dir2;
   }
 
diff --git lucene/core/src/test/org/apache/lucene/index/TestParallelReaderEmptyIndex.java lucene/core/src/test/org/apache/lucene/index/TestParallelReaderEmptyIndex.java
index a27f6d9..c0607c9 100644
--- lucene/core/src/test/org/apache/lucene/index/TestParallelReaderEmptyIndex.java
+++ lucene/core/src/test/org/apache/lucene/index/TestParallelReaderEmptyIndex.java
@@ -40,7 +40,7 @@ public class TestParallelReaderEmptyIndex extends LuceneTestCase {
   public void testEmptyIndex() throws IOException {
     Directory rd1 = newDirectory();
     IndexWriter iw = new IndexWriter(rd1, newIndexWriterConfig(new MockAnalyzer(random())));
-    iw.shutdown();
+    iw.close();
     // create a copy:
     Directory rd2 = newDirectory(rd1);
 
@@ -72,7 +72,7 @@ public class TestParallelReaderEmptyIndex extends LuceneTestCase {
     iwOut.addIndexes(new ParallelCompositeReader());
     iwOut.forceMerge(1);
     
-    iwOut.shutdown();
+    iwOut.close();
     rdOut.close();
     rd1.close();
     rd2.close();
@@ -101,9 +101,9 @@ public class TestParallelReaderEmptyIndex extends LuceneTestCase {
       doc.add(newField("test", "", customType));
       idField.setStringValue("2");
       iw.addDocument(doc);
-      iw.shutdown();
+      iw.close();
 
-      IndexWriterConfig dontMergeConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))
+      IndexWriterConfig dontMergeConfig = new IndexWriterConfig(new MockAnalyzer(random()))
         .setMergePolicy(NoMergePolicy.INSTANCE);
       if (VERBOSE) {
         System.out.println("\nTEST: make 2nd writer");
@@ -111,7 +111,7 @@ public class TestParallelReaderEmptyIndex extends LuceneTestCase {
       IndexWriter writer = new IndexWriter(rd1, dontMergeConfig);
       
       writer.deleteDocuments(new Term("id", "1"));
-      writer.shutdown();
+      writer.close();
       IndexReader ir = DirectoryReader.open(rd1);
       assertEquals(2, ir.maxDoc());
       assertEquals(1, ir.numDocs());
@@ -120,7 +120,7 @@ public class TestParallelReaderEmptyIndex extends LuceneTestCase {
       iw = new IndexWriter(rd1, newIndexWriterConfig(new MockAnalyzer(random()))
                                   .setOpenMode(OpenMode.APPEND));
       iw.forceMerge(1);
-      iw.shutdown();
+      iw.close();
     }
 
     Directory rd2 = newDirectory();
@@ -128,7 +128,7 @@ public class TestParallelReaderEmptyIndex extends LuceneTestCase {
       IndexWriter iw = new IndexWriter(rd2, newIndexWriterConfig(new MockAnalyzer(random())));
       Document doc = new Document();
       iw.addDocument(doc);
-      iw.shutdown();
+      iw.close();
     }
 
     Directory rdOut = newDirectory();
@@ -153,7 +153,7 @@ public class TestParallelReaderEmptyIndex extends LuceneTestCase {
     rd2.close();
 
     iwOut.forceMerge(1);
-    iwOut.shutdown();
+    iwOut.close();
     
     rdOut.close();
   }
diff --git lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum.java lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum.java
index 2712086..20fdbcd 100644
--- lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum.java
+++ lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum.java
@@ -48,7 +48,7 @@ public class TestParallelTermEnum extends LuceneTestCase {
     doc.add(newTextField("field2", "the quick brown fox jumps", Field.Store.YES));
     iw1.addDocument(doc);
 
-    iw1.shutdown();
+    iw1.close();
     rd2 = newDirectory();
     IndexWriter iw2 = new IndexWriter(rd2, newIndexWriterConfig(new MockAnalyzer(random())));
 
@@ -57,7 +57,7 @@ public class TestParallelTermEnum extends LuceneTestCase {
     doc.add(newTextField("field3", "the fox jumps over the lazy dog", Field.Store.YES));
     iw2.addDocument(doc);
 
-    iw2.shutdown();
+    iw2.close();
 
     this.ir1 = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(rd1));
     this.ir2 = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(rd2));
diff --git lucene/core/src/test/org/apache/lucene/index/TestPayloads.java lucene/core/src/test/org/apache/lucene/index/TestPayloads.java
index 292c3af..2ce4614 100644
--- lucene/core/src/test/org/apache/lucene/index/TestPayloads.java
+++ lucene/core/src/test/org/apache/lucene/index/TestPayloads.java
@@ -76,7 +76,7 @@ public class TestPayloads extends LuceneTestCase {
         analyzer.setPayloadData("f2", "somedata".getBytes(StandardCharsets.UTF_8), 0, 1);
         writer.addDocument(d);
         // flush
-        writer.shutdown();
+        writer.close();
 
       SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(ram));
         FieldInfos fi = reader.getFieldInfos();
@@ -103,7 +103,7 @@ public class TestPayloads extends LuceneTestCase {
         // force merge
         writer.forceMerge(1);
         // flush
-        writer.shutdown();
+        writer.close();
 
       reader = getOnlySegmentReader(DirectoryReader.open(ram));
         fi = reader.getFieldInfos();
@@ -172,7 +172,7 @@ public class TestPayloads extends LuceneTestCase {
         
         writer.forceMerge(1);
         // flush
-        writer.shutdown();
+        writer.close();
         
         
         /*
@@ -277,7 +277,7 @@ public class TestPayloads extends LuceneTestCase {
         
         writer.forceMerge(1);
         // flush
-        writer.shutdown();
+        writer.close();
         
         reader = DirectoryReader.open(dir);
         tp = MultiFields.getTermPositionsEnum(reader,
@@ -477,7 +477,7 @@ public class TestPayloads extends LuceneTestCase {
         for (int i = 0; i < numThreads; i++) {
           ingesters[i].join();
         }
-        writer.shutdown();
+        writer.close();
         IndexReader reader = DirectoryReader.open(dir);
         TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator(null);
         Bits liveDocs = MultiFields.getLiveDocs(reader);
@@ -565,7 +565,7 @@ public class TestPayloads extends LuceneTestCase {
     Document doc = new Document();
     doc.add(new TextField("hasMaybepayload", "here we go", Field.Store.YES));
     writer.addDocument(doc);
-    writer.shutdown();
+    writer.close();
 
     writer = new RandomIndexWriter(random(), dir,
                                    new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true));
@@ -574,7 +574,7 @@ public class TestPayloads extends LuceneTestCase {
     writer.addDocument(doc);
     writer.addDocument(doc);
     writer.forceMerge(1);
-    writer.shutdown();
+    writer.close();
 
     dir.close();
   }
@@ -608,7 +608,7 @@ public class TestPayloads extends LuceneTestCase {
     de.nextDoc();
     de.nextPosition();
     assertEquals(new BytesRef("test"), de.getPayload());
-    writer.shutdown();
+    writer.close();
     reader.close();
     dir.close();
   }
@@ -642,7 +642,7 @@ public class TestPayloads extends LuceneTestCase {
     de.nextDoc();
     de.nextPosition();
     assertEquals(new BytesRef("test"), de.getPayload());
-    writer.shutdown();
+    writer.close();
     reader.close();
     dir.close();
   }
diff --git lucene/core/src/test/org/apache/lucene/index/TestPayloadsOnVectors.java lucene/core/src/test/org/apache/lucene/index/TestPayloadsOnVectors.java
index ccf7be2..3fa9a81 100644
--- lucene/core/src/test/org/apache/lucene/index/TestPayloadsOnVectors.java
+++ lucene/core/src/test/org/apache/lucene/index/TestPayloadsOnVectors.java
@@ -76,7 +76,7 @@ public class TestPayloadsOnVectors extends LuceneTestCase {
     assertEquals(0, de.nextDoc());
     assertEquals(0, de.nextPosition());
     assertEquals(new BytesRef("test"), de.getPayload());
-    writer.shutdown();
+    writer.close();
     reader.close();
     dir.close();
   }
@@ -118,7 +118,7 @@ public class TestPayloadsOnVectors extends LuceneTestCase {
     assertEquals(0, de.nextDoc());
     assertEquals(3, de.nextPosition());
     assertEquals(new BytesRef("test"), de.getPayload());
-    writer.shutdown();
+    writer.close();
     reader.close();
     dir.close();
   }
@@ -139,7 +139,7 @@ public class TestPayloadsOnVectors extends LuceneTestCase {
     } catch (IllegalArgumentException expected) {
       // expected
     }
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
 
diff --git lucene/core/src/test/org/apache/lucene/index/TestPerSegmentDeletes.java lucene/core/src/test/org/apache/lucene/index/TestPerSegmentDeletes.java
index a1d6daf..1ec6a4e 100644
--- lucene/core/src/test/org/apache/lucene/index/TestPerSegmentDeletes.java
+++ lucene/core/src/test/org/apache/lucene/index/TestPerSegmentDeletes.java
@@ -38,8 +38,7 @@ public class TestPerSegmentDeletes extends LuceneTestCase {
   public void testDeletes1() throws Exception {
     //IndexWriter.debug2 = System.out;
     Directory dir = new MockDirectoryWrapper(new Random(random().nextLong()), new RAMDirectory());
-    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT,
-        new MockAnalyzer(random()));
+    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));
     iwc.setMergeScheduler(new SerialMergeScheduler());
     iwc.setMaxBufferedDocs(5000);
     iwc.setRAMBufferSizeMB(100);
@@ -160,7 +159,7 @@ public class TestPerSegmentDeletes extends LuceneTestCase {
     **/
     // System.out.println("segdels2:"+writer.docWriter.segmentDeletes.toString());
     //System.out.println("close");
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
 
diff --git lucene/core/src/test/org/apache/lucene/index/TestPersistentSnapshotDeletionPolicy.java lucene/core/src/test/org/apache/lucene/index/TestPersistentSnapshotDeletionPolicy.java
index a85ba84..82183ae 100644
--- lucene/core/src/test/org/apache/lucene/index/TestPersistentSnapshotDeletionPolicy.java
+++ lucene/core/src/test/org/apache/lucene/index/TestPersistentSnapshotDeletionPolicy.java
@@ -55,7 +55,7 @@ public class TestPersistentSnapshotDeletionPolicy extends TestSnapshotDeletionPo
     assertNull(psdp.getLastSaveFile());
     prepareIndexAndSnapshots(psdp, writer, numSnapshots);
     assertNotNull(psdp.getLastSaveFile());
-    writer.shutdown();
+    writer.close();
 
     // Make sure only 1 save file exists:
     int count = 0;
@@ -88,7 +88,7 @@ public class TestPersistentSnapshotDeletionPolicy extends TestSnapshotDeletionPo
     assertEquals(numSnapshots+1, psdp.getSnapshotCount());
     assertSnapshotExists(dir, psdp, numSnapshots+1, false);
 
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
 
@@ -142,7 +142,7 @@ public class TestPersistentSnapshotDeletionPolicy extends TestSnapshotDeletionPo
       }
     }
     assertEquals(0, psdp.getSnapshotCount());
-    writer.shutdown();
+    writer.close();
     assertEquals(1, DirectoryReader.listCommits(dir).size());
     dir.close();
   }
@@ -153,7 +153,7 @@ public class TestPersistentSnapshotDeletionPolicy extends TestSnapshotDeletionPo
     IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy(dir)));
     PersistentSnapshotDeletionPolicy psdp = (PersistentSnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();
     prepareIndexAndSnapshots(psdp, writer, 1);
-    writer.shutdown();
+    writer.close();
 
     psdp.release(snapshots.get(0));
 
@@ -169,7 +169,7 @@ public class TestPersistentSnapshotDeletionPolicy extends TestSnapshotDeletionPo
     IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy(dir)));
     PersistentSnapshotDeletionPolicy psdp = (PersistentSnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();
     prepareIndexAndSnapshots(psdp, writer, 1);
-    writer.shutdown();
+    writer.close();
 
     psdp.release(snapshots.get(0).getGeneration());
 
diff --git lucene/core/src/test/org/apache/lucene/index/TestPostingsOffsets.java lucene/core/src/test/org/apache/lucene/index/TestPostingsOffsets.java
index ef0e5ca..2722f74 100644
--- lucene/core/src/test/org/apache/lucene/index/TestPostingsOffsets.java
+++ lucene/core/src/test/org/apache/lucene/index/TestPostingsOffsets.java
@@ -30,7 +30,6 @@ import org.apache.lucene.analysis.MockPayloadAnalyzer;
 import org.apache.lucene.analysis.MockTokenizer;
 import org.apache.lucene.analysis.Token;
 import org.apache.lucene.analysis.TokenStream;
-import org.apache.lucene.analysis.Analyzer.TokenStreamComponents;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.FieldType;
@@ -82,7 +81,7 @@ public class TestPostingsOffsets extends LuceneTestCase {
 
     w.addDocument(doc);
     IndexReader r = w.getReader();
-    w.shutdown();
+    w.close();
 
     DocsAndPositionsEnum dp = MultiFields.getTermPositionsEnum(r, null, "content", new BytesRef("a"));
     assertNotNull(dp);
@@ -151,7 +150,7 @@ public class TestPostingsOffsets extends LuceneTestCase {
     }
     
     IndexReader reader = w.getReader();
-    w.shutdown();
+    w.close();
     
     String terms[] = { "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "hundred" };
     
@@ -288,7 +287,7 @@ public class TestPostingsOffsets extends LuceneTestCase {
       w.addDocument(doc);
     }
     final DirectoryReader r = w.getReader();
-    w.shutdown();
+    w.close();
 
     final String[] terms = new String[] {"a", "b", "c", "d"};
     for(AtomicReaderContext ctx : r.leaves()) {
@@ -385,7 +384,7 @@ public class TestPostingsOffsets extends LuceneTestCase {
     assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, fis.fieldInfo("foo").getIndexOptions());
     slow.close();
     ir.close();
-    riw.shutdown();
+    riw.close();
     dir.close();
   }
   
@@ -401,7 +400,7 @@ public class TestPostingsOffsets extends LuceneTestCase {
     doc.add(new Field("content3", "here is more content with aaa aaa aaa", customType3));
     doc.add(new Field("content3", "here is more content with aaa aaa aaa", customType3));
     iw.addDocument(doc);
-    iw.shutdown();
+    iw.close();
     dir.close(); // checkindex
   }
   
@@ -462,7 +461,7 @@ public class TestPostingsOffsets extends LuceneTestCase {
         return -10;
       }
     };
-    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));
+    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(analyzer));
     // add good document
     Document doc = new Document();
     iw.addDocument(doc);
@@ -474,7 +473,7 @@ public class TestPostingsOffsets extends LuceneTestCase {
       iw.addDocument(doc);
       fail("didn't get expected exception");
     } catch (IllegalArgumentException expected) {}
-    iw.shutdown();
+    iw.close();
 
     // make sure we see our good doc
     DirectoryReader r = DirectoryReader.open(dir);   
@@ -504,7 +503,7 @@ public class TestPostingsOffsets extends LuceneTestCase {
     Field field = new Field("foo", tokenStream, ft);
     doc.add(field);
     iw.addDocument(doc);
-    iw.shutdown();
+    iw.close();
     dir.close();
   }
   // TODO: more tests with other possibilities
@@ -524,7 +523,7 @@ public class TestPostingsOffsets extends LuceneTestCase {
       Document doc = new Document();
       doc.add(new Field("body", new CannedTokenStream(tokens), ft));
       riw.addDocument(doc);
-      riw.shutdown();
+      riw.close();
       success = true;
     } finally {
       if (success) {
diff --git lucene/core/src/test/org/apache/lucene/index/TestReaderClosed.java lucene/core/src/test/org/apache/lucene/index/TestReaderClosed.java
index 1f6be5e..9505576 100644
--- lucene/core/src/test/org/apache/lucene/index/TestReaderClosed.java
+++ lucene/core/src/test/org/apache/lucene/index/TestReaderClosed.java
@@ -52,7 +52,7 @@ public class TestReaderClosed extends LuceneTestCase {
       writer.addDocument(doc);
     }
     reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
   }
   
   public void test() throws Exception {
@@ -87,7 +87,7 @@ public class TestReaderClosed extends LuceneTestCase {
         ace.getMessage()
       );
     } finally {
-      // shutdown executor: in case of wrap-wrap-wrapping
+      // close executor: in case of wrap-wrap-wrapping
       searcher.getIndexReader().close();
     }
   }
diff --git lucene/core/src/test/org/apache/lucene/index/TestRollback.java lucene/core/src/test/org/apache/lucene/index/TestRollback.java
index 64e8c9e..8232ee5 100644
--- lucene/core/src/test/org/apache/lucene/index/TestRollback.java
+++ lucene/core/src/test/org/apache/lucene/index/TestRollback.java
@@ -34,7 +34,7 @@ public class TestRollback extends LuceneTestCase {
       doc.add(newStringField("pk", Integer.toString(i), Field.Store.YES));
       rw.addDocument(doc);
     }
-    rw.shutdown();
+    rw.close();
 
     // If buffer size is small enough to cause a flush, errors ensue...
     IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))
diff --git lucene/core/src/test/org/apache/lucene/index/TestRollingUpdates.java lucene/core/src/test/org/apache/lucene/index/TestRollingUpdates.java
index 4712fefc..ca4a4fd 100644
--- lucene/core/src/test/org/apache/lucene/index/TestRollingUpdates.java
+++ lucene/core/src/test/org/apache/lucene/index/TestRollingUpdates.java
@@ -131,7 +131,7 @@ public class TestRollingUpdates extends LuceneTestCase {
     w.commit();
     assertEquals(SIZE, w.numDocs());
 
-    w.shutdown();
+    w.close();
 
     TestIndexWriter.assertNoUnreferencedFiles(dir, "leftover files after rolling updates");
 
@@ -174,7 +174,7 @@ public class TestRollingUpdates extends LuceneTestCase {
         threads[i].join();
       }
 
-      w.shutdown();
+      w.close();
     }
 
     IndexReader open = DirectoryReader.open(dir);
diff --git lucene/core/src/test/org/apache/lucene/index/TestSameTokenSamePosition.java lucene/core/src/test/org/apache/lucene/index/TestSameTokenSamePosition.java
index 431301e..52b8ce8 100644
--- lucene/core/src/test/org/apache/lucene/index/TestSameTokenSamePosition.java
+++ lucene/core/src/test/org/apache/lucene/index/TestSameTokenSamePosition.java
@@ -40,7 +40,7 @@ public class TestSameTokenSamePosition extends LuceneTestCase {
     Document doc = new Document();
     doc.add(new TextField("eng", new BugReproTokenStream()));
     riw.addDocument(doc);
-    riw.shutdown();
+    riw.close();
     dir.close();
   }
   
@@ -55,7 +55,7 @@ public class TestSameTokenSamePosition extends LuceneTestCase {
       doc.add(new TextField("eng", new BugReproTokenStream()));
       riw.addDocument(doc);
     }
-    riw.shutdown();
+    riw.close();
     dir.close();
   }
 }
diff --git lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs.java lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs.java
index 2ddea49..3f5686e 100644
--- lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs.java
+++ lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs.java
@@ -117,7 +117,7 @@ public class TestSegmentTermDocs extends LuceneTestCase {
       
     // assure that we deal with a single segment  
     writer.forceMerge(1);
-    writer.shutdown();
+    writer.close();
     
     IndexReader reader = DirectoryReader.open(dir);
 
diff --git lucene/core/src/test/org/apache/lucene/index/TestSegmentTermEnum.java lucene/core/src/test/org/apache/lucene/index/TestSegmentTermEnum.java
index 1981cf3..1051dbf 100644
--- lucene/core/src/test/org/apache/lucene/index/TestSegmentTermEnum.java
+++ lucene/core/src/test/org/apache/lucene/index/TestSegmentTermEnum.java
@@ -59,7 +59,7 @@ public class TestSegmentTermEnum extends LuceneTestCase {
       addDoc(writer, "aaa bbb");
     }
 
-    writer.shutdown();
+    writer.close();
 
     // verify document frequency of terms in an multi segment index
     verifyDocFreq();
@@ -68,7 +68,7 @@ public class TestSegmentTermEnum extends LuceneTestCase {
     writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))
                                     .setOpenMode(OpenMode.APPEND));
     writer.forceMerge(1);
-    writer.shutdown();
+    writer.close();
 
     // verify document frequency of terms in a single segment index
     verifyDocFreq();
@@ -79,7 +79,7 @@ public class TestSegmentTermEnum extends LuceneTestCase {
     IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))
                                 .setCodec(TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat())));
     addDoc(writer, "aaa bbb");
-    writer.shutdown();
+    writer.close();
     SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(dir));
     TermsEnum terms = reader.fields().terms("content").iterator(null);
     assertNotNull(terms.next());
diff --git lucene/core/src/test/org/apache/lucene/index/TestSizeBoundedForceMerge.java lucene/core/src/test/org/apache/lucene/index/TestSizeBoundedForceMerge.java
index f41d428..48ab078 100644
--- lucene/core/src/test/org/apache/lucene/index/TestSizeBoundedForceMerge.java
+++ lucene/core/src/test/org/apache/lucene/index/TestSizeBoundedForceMerge.java
@@ -64,7 +64,7 @@ public class TestSizeBoundedForceMerge extends LuceneTestCase {
       int numDocs = i == 7 ? 30 : 1;
       addDocs(writer, numDocs);
     }
-    writer.shutdown();
+    writer.close();
 
     SegmentInfos sis = new SegmentInfos();
     sis.read(dir);
@@ -77,7 +77,7 @@ public class TestSizeBoundedForceMerge extends LuceneTestCase {
     
     writer = new IndexWriter(dir, conf);
     writer.forceMerge(1);
-    writer.shutdown();
+    writer.close();
 
     // Should only be 3 segments in the index, because one of them exceeds the size limit
     sis = new SegmentInfos();
@@ -101,7 +101,7 @@ public class TestSizeBoundedForceMerge extends LuceneTestCase {
     addDocs(writer, 3);
     addDocs(writer, 3);
     
-    writer.shutdown();
+    writer.close();
 
     conf = newWriterConfig();
     LogMergePolicy lmp = new LogDocMergePolicy();
@@ -110,7 +110,7 @@ public class TestSizeBoundedForceMerge extends LuceneTestCase {
     
     writer = new IndexWriter(dir, conf);
     writer.forceMerge(1);
-    writer.shutdown();
+    writer.close();
 
     // Should only be 3 segments in the index, because one of them exceeds the size limit
     SegmentInfos sis = new SegmentInfos();
@@ -129,7 +129,7 @@ public class TestSizeBoundedForceMerge extends LuceneTestCase {
     addDocs(writer, 3);
     addDocs(writer, 5);
     
-    writer.shutdown();
+    writer.close();
 
     conf = newWriterConfig();
     LogMergePolicy lmp = new LogDocMergePolicy();
@@ -138,7 +138,7 @@ public class TestSizeBoundedForceMerge extends LuceneTestCase {
     
     writer = new IndexWriter(dir, conf);
     writer.forceMerge(1);
-    writer.shutdown();
+    writer.close();
 
     SegmentInfos sis = new SegmentInfos();
     sis.read(dir);
@@ -156,7 +156,7 @@ public class TestSizeBoundedForceMerge extends LuceneTestCase {
     addDocs(writer, 3);
     addDocs(writer, 3);
     
-    writer.shutdown();
+    writer.close();
     
     conf = newWriterConfig();
     LogMergePolicy lmp = new LogDocMergePolicy();
@@ -165,7 +165,7 @@ public class TestSizeBoundedForceMerge extends LuceneTestCase {
     
     writer = new IndexWriter(dir, conf);
     writer.forceMerge(1);
-    writer.shutdown();
+    writer.close();
     
     SegmentInfos sis = new SegmentInfos();
     sis.read(dir);
@@ -183,7 +183,7 @@ public class TestSizeBoundedForceMerge extends LuceneTestCase {
     addDocs(writer, 3);
     addDocs(writer, 3);
     
-    writer.shutdown();
+    writer.close();
     
     conf = newWriterConfig();
     LogMergePolicy lmp = new LogDocMergePolicy();
@@ -192,7 +192,7 @@ public class TestSizeBoundedForceMerge extends LuceneTestCase {
     
     writer = new IndexWriter(dir, conf);
     writer.forceMerge(1);
-    writer.shutdown();
+    writer.close();
     
     SegmentInfos sis = new SegmentInfos();
     sis.read(dir);
@@ -209,7 +209,7 @@ public class TestSizeBoundedForceMerge extends LuceneTestCase {
     addDocs(writer, 3);
     addDocs(writer, 3);
     
-    writer.shutdown();
+    writer.close();
     
     conf = newWriterConfig();
     LogMergePolicy lmp = new LogDocMergePolicy();
@@ -218,7 +218,7 @@ public class TestSizeBoundedForceMerge extends LuceneTestCase {
     
     writer = new IndexWriter(dir, conf);
     writer.forceMerge(1);
-    writer.shutdown();
+    writer.close();
     
     SegmentInfos sis = new SegmentInfos();
     sis.read(dir);
@@ -236,7 +236,7 @@ public class TestSizeBoundedForceMerge extends LuceneTestCase {
     addDocs(writer, 3);
     addDocs(writer, 5);
     
-    writer.shutdown();
+    writer.close();
     
     conf = newWriterConfig();
     LogMergePolicy lmp = new LogDocMergePolicy();
@@ -245,7 +245,7 @@ public class TestSizeBoundedForceMerge extends LuceneTestCase {
     
     writer = new IndexWriter(dir, conf);
     writer.forceMerge(1);
-    writer.shutdown();
+    writer.close();
     
     SegmentInfos sis = new SegmentInfos();
     sis.read(dir);
@@ -266,7 +266,7 @@ public class TestSizeBoundedForceMerge extends LuceneTestCase {
     addDocs(writer, 3);
     addDocs(writer, 3);
     
-    writer.shutdown();
+    writer.close();
     
     conf = newWriterConfig();
     LogMergePolicy lmp = new LogDocMergePolicy();
@@ -276,7 +276,7 @@ public class TestSizeBoundedForceMerge extends LuceneTestCase {
     
     writer = new IndexWriter(dir, conf);
     writer.forceMerge(1);
-    writer.shutdown();
+    writer.close();
     
     // Should only be 4 segments in the index, because of the merge factor and
     // max merge docs settings.
@@ -297,7 +297,7 @@ public class TestSizeBoundedForceMerge extends LuceneTestCase {
     
     // delete the last document, so that the last segment is merged.
     writer.deleteDocuments(new Term("id", "10"));
-    writer.shutdown();
+    writer.close();
     
     conf = newWriterConfig();
     LogMergePolicy lmp = new LogDocMergePolicy();
@@ -306,7 +306,7 @@ public class TestSizeBoundedForceMerge extends LuceneTestCase {
     
     writer = new IndexWriter(dir, conf);
     writer.forceMerge(1);
-    writer.shutdown();
+    writer.close();
     
     // Verify that the last segment does not have deletions.
     SegmentInfos sis = new SegmentInfos();
@@ -323,7 +323,7 @@ public class TestSizeBoundedForceMerge extends LuceneTestCase {
     
     addDocs(writer, 3, true);
     
-    writer.shutdown();
+    writer.close();
     
     conf = newWriterConfig();
     LogMergePolicy lmp = new LogDocMergePolicy();
@@ -332,7 +332,7 @@ public class TestSizeBoundedForceMerge extends LuceneTestCase {
     
     writer = new IndexWriter(dir, conf);
     writer.forceMerge(1);
-    writer.shutdown();
+    writer.close();
     
     // Verify that the last segment does not have deletions.
     SegmentInfos sis = new SegmentInfos();
@@ -351,7 +351,7 @@ public class TestSizeBoundedForceMerge extends LuceneTestCase {
     // delete the last document
     
     writer.deleteDocuments(new Term("id", "4"));
-    writer.shutdown();
+    writer.close();
     
     conf = newWriterConfig();
     LogMergePolicy lmp = new LogDocMergePolicy();
@@ -360,7 +360,7 @@ public class TestSizeBoundedForceMerge extends LuceneTestCase {
     
     writer = new IndexWriter(dir, conf);
     writer.forceMerge(1);
-    writer.shutdown();
+    writer.close();
     
     // Verify that the last segment does not have deletions.
     SegmentInfos sis = new SegmentInfos();
diff --git lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy.java lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy.java
index 7d527e9..6f83645 100644
--- lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy.java
+++ lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy.java
@@ -177,7 +177,7 @@ public class TestSnapshotDeletionPolicy extends LuceneTestCase {
 
     // Make sure we don't have any leftover files in the
     // directory:
-    writer.shutdown();
+    writer.close();
     TestIndexWriter.assertNoUnreferencedFiles(dir, "some files were not deleted but should have been");
   }
 
@@ -254,7 +254,7 @@ public class TestSnapshotDeletionPolicy extends LuceneTestCase {
     IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));
     SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();
     prepareIndexAndSnapshots(sdp, writer, numSnapshots);
-    writer.shutdown();
+    writer.close();
     
     assertEquals(numSnapshots, sdp.getSnapshots().size());
     assertEquals(numSnapshots, sdp.getSnapshotCount());
@@ -267,7 +267,7 @@ public class TestSnapshotDeletionPolicy extends LuceneTestCase {
     sdp = getDeletionPolicy();
     writer = new IndexWriter(dir, getConfig(random(), sdp));
     writer.deleteUnusedFiles();
-    writer.shutdown();
+    writer.close();
     assertEquals("no snapshots should exist", 1, DirectoryReader.listCommits(dir).size());
     dir.close();
   }
@@ -314,7 +314,7 @@ public class TestSnapshotDeletionPolicy extends LuceneTestCase {
       writer.deleteUnusedFiles();
     }
     assertEquals(1, DirectoryReader.listCommits(dir).size());
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
 
@@ -326,7 +326,7 @@ public class TestSnapshotDeletionPolicy extends LuceneTestCase {
     SnapshotDeletionPolicy sdp = getDeletionPolicy();
     IndexWriter writer = new IndexWriter(dir, getConfig(random(), sdp));
     prepareIndexAndSnapshots(sdp, writer, numSnapshots);
-    writer.shutdown();
+    writer.close();
 
     // now open the writer on "snapshot0" - make sure it succeeds
     writer = new IndexWriter(dir, getConfig(random(), sdp).setIndexCommit(snapshots.get(0)));
@@ -334,7 +334,7 @@ public class TestSnapshotDeletionPolicy extends LuceneTestCase {
     writer.commit();
     writer.deleteUnusedFiles();
     assertSnapshotExists(dir, sdp, numSnapshots - 1, false);
-    writer.shutdown();
+    writer.close();
 
     // but 'snapshot1' files will still exist (need to release snapshot before they can be deleted).
     String segFileName = snapshots.get(1).getSegmentsFileName();
@@ -359,7 +359,7 @@ public class TestSnapshotDeletionPolicy extends LuceneTestCase {
     String segFileName = snapshots.get(0).getSegmentsFileName();
     sdp.release(snapshots.get(0));
     writer.deleteUnusedFiles();
-    writer.shutdown();
+    writer.close();
     assertFalse("segments file should not be found in dirctory: " + segFileName, slowFileExists(dir, segFileName));
     dir.close();
   }
@@ -386,7 +386,7 @@ public class TestSnapshotDeletionPolicy extends LuceneTestCase {
     writer.deleteUnusedFiles();
     checkSnapshotExists(dir, s2);
     
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
   
@@ -403,11 +403,11 @@ public class TestSnapshotDeletionPolicy extends LuceneTestCase {
 
     // create another commit, not snapshotted.
     writer.addDocument(new Document());
-    writer.shutdown();
+    writer.close();
 
     // open a new writer w/ KeepOnlyLastCommit policy, so it will delete "s1"
     // commit.
-    new IndexWriter(dir, getConfig(random(), null)).shutdown();
+    new IndexWriter(dir, getConfig(random(), null)).close();
     
     assertFalse("snapshotted commit should not exist", slowFileExists(dir, s1.getSegmentsFileName()));
     dir.close();
diff --git lucene/core/src/test/org/apache/lucene/index/TestStressAdvance.java lucene/core/src/test/org/apache/lucene/index/TestStressAdvance.java
index 83cb1e7..bd35b50 100644
--- lucene/core/src/test/org/apache/lucene/index/TestStressAdvance.java
+++ lucene/core/src/test/org/apache/lucene/index/TestStressAdvance.java
@@ -90,7 +90,7 @@ public class TestStressAdvance extends LuceneTestCase {
         testOne(de, bDocIDs);
       }
 
-      w.shutdown();
+      w.close();
       r.close();
       dir.close();
     }
diff --git lucene/core/src/test/org/apache/lucene/index/TestStressDeletes.java lucene/core/src/test/org/apache/lucene/index/TestStressDeletes.java
index bd18621..0087a9f 100644
--- lucene/core/src/test/org/apache/lucene/index/TestStressDeletes.java
+++ lucene/core/src/test/org/apache/lucene/index/TestStressDeletes.java
@@ -42,7 +42,7 @@ public class TestStressDeletes extends LuceneTestCase {
     }
 
     Directory dir = newDirectory();
-    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));
+    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));
     final IndexWriter w = new IndexWriter(dir, iwc);
     final int iters = atLeast(2000);
     final Map<Integer,Boolean> exists = new ConcurrentHashMap<>();
diff --git lucene/core/src/test/org/apache/lucene/index/TestStressIndexing.java lucene/core/src/test/org/apache/lucene/index/TestStressIndexing.java
index 08850de..1050991 100644
--- lucene/core/src/test/org/apache/lucene/index/TestStressIndexing.java
+++ lucene/core/src/test/org/apache/lucene/index/TestStressIndexing.java
@@ -149,7 +149,7 @@ public class TestStressIndexing extends LuceneTestCase {
     for(int i=0;i<numThread;i++)
       threads[i].join();
 
-    modifier.shutdown();
+    modifier.close();
 
     for(int i=0;i<numThread;i++)
       assertTrue(! threads[i].failed);
diff --git lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2.java lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2.java
index 58cfaf3..e0a501d 100644
--- lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2.java
+++ lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2.java
@@ -25,8 +25,6 @@ import java.util.List;
 import java.util.Map;
 import java.util.Random;
 
-import junit.framework.Assert;
-
 import org.apache.lucene.analysis.MockAnalyzer;
 import org.apache.lucene.analysis.tokenattributes.OffsetAttribute;
 import org.apache.lucene.document.Document;
@@ -66,7 +64,7 @@ public class TestStressIndexing2 extends LuceneTestCase {
     dw.writer.commit();
     verifyEquals(random(), reader, dir, "id");
     reader.close();
-    dw.writer.shutdown();
+    dw.writer.close();
     dir.close();
   }
   
@@ -180,7 +178,7 @@ public class TestStressIndexing2 extends LuceneTestCase {
     }
 
     // w.forceMerge(1);
-    //w.shutdown();    
+    //w.close();
 
     for (int i=0; i<threads.length; i++) {
       IndexingThread th = threads[i];
@@ -228,7 +226,7 @@ public class TestStressIndexing2 extends LuceneTestCase {
     }
 
     //w.forceMerge(1);
-    w.shutdown();    
+    w.close();
 
     for (int i=0; i<threads.length; i++) {
       IndexingThread th = threads[i];
@@ -245,7 +243,7 @@ public class TestStressIndexing2 extends LuceneTestCase {
 
   
   public static void indexSerial(Random random, Map<String,Document> docs, Directory dir) throws IOException {
-    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));
+    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));
 
     // index all docs in a single thread
     Iterator<Document> iter = docs.values().iterator();
@@ -264,7 +262,7 @@ public class TestStressIndexing2 extends LuceneTestCase {
       // System.out.println("indexing "+d1);
     }
     
-    w.shutdown();
+    w.close();
   }
   
   public void verifyEquals(Random r, DirectoryReader r1, Directory dir2, String idField) throws Throwable {
diff --git lucene/core/src/test/org/apache/lucene/index/TestStressNRT.java lucene/core/src/test/org/apache/lucene/index/TestStressNRT.java
index 2c6360d..7637eea 100644
--- lucene/core/src/test/org/apache/lucene/index/TestStressNRT.java
+++ lucene/core/src/test/org/apache/lucene/index/TestStressNRT.java
@@ -390,7 +390,7 @@ public class TestStressNRT extends LuceneTestCase {
       thread.join();
     }
 
-    writer.shutdown();
+    writer.close();
     if (VERBOSE) {
       System.out.println("TEST: close reader=" + reader);
     }
diff --git lucene/core/src/test/org/apache/lucene/index/TestSumDocFreq.java lucene/core/src/test/org/apache/lucene/index/TestSumDocFreq.java
index d8b7d10..223fa70 100644
--- lucene/core/src/test/org/apache/lucene/index/TestSumDocFreq.java
+++ lucene/core/src/test/org/apache/lucene/index/TestSumDocFreq.java
@@ -63,7 +63,7 @@ public class TestSumDocFreq extends LuceneTestCase {
       writer.deleteDocuments(new Term("id", "" + random().nextInt(numDocs)));
     }
     writer.forceMerge(1);
-    writer.shutdown();
+    writer.close();
     
     ir = DirectoryReader.open(dir);
     assertSumDocFreq(ir);
diff --git lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader.java lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader.java
index 75003b5..e726517 100644
--- lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader.java
+++ lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader.java
@@ -127,7 +127,7 @@ public class TestTermVectorsReader extends LuceneTestCase {
     }
     writer.commit();
     seg = writer.newestSegment();
-    writer.shutdown();
+    writer.close();
 
     fieldInfos = SegmentReader.readFieldInfos(seg);
   }
@@ -452,7 +452,7 @@ public class TestTermVectorsReader extends LuceneTestCase {
       assertEquals("cannot store term vector payloads for a field that is not indexed (field=\"field\")", iae.getMessage());
     }
 
-    w.shutdown();
+    w.close();
     
     dir.close();
   }
diff --git lucene/core/src/test/org/apache/lucene/index/TestTermVectorsWriter.java lucene/core/src/test/org/apache/lucene/index/TestTermVectorsWriter.java
index 5523f9e..bfa5963 100644
--- lucene/core/src/test/org/apache/lucene/index/TestTermVectorsWriter.java
+++ lucene/core/src/test/org/apache/lucene/index/TestTermVectorsWriter.java
@@ -56,7 +56,7 @@ public class TestTermVectorsWriter extends LuceneTestCase {
     doc.add(f2);
     doc.add(f);
     w.addDocument(doc);
-    w.shutdown();
+    w.close();
 
     IndexReader r = DirectoryReader.open(dir);
     Terms vector = r.getTermVectors(0).terms("field");
@@ -112,7 +112,7 @@ public class TestTermVectorsWriter extends LuceneTestCase {
     doc.add(f);
     doc.add(f);
     w.addDocument(doc);
-    w.shutdown();
+    w.close();
 
     IndexReader r = DirectoryReader.open(dir);
     TermsEnum termsEnum = r.getTermVectors(0).terms("field").iterator(null);
@@ -147,7 +147,7 @@ public class TestTermVectorsWriter extends LuceneTestCase {
     doc.add(f);
     doc.add(f);
     w.addDocument(doc);
-    w.shutdown();
+    w.close();
 
     IndexReader r = DirectoryReader.open(dir);
     TermsEnum termsEnum = r.getTermVectors(0).terms("field").iterator(null);
@@ -187,7 +187,7 @@ public class TestTermVectorsWriter extends LuceneTestCase {
       doc.add(f);
       w.addDocument(doc);
     }
-    w.shutdown();
+    w.close();
 
     IndexReader r = DirectoryReader.open(dir);
     TermsEnum termsEnum = r.getTermVectors(0).terms("field").iterator(null);
@@ -222,7 +222,7 @@ public class TestTermVectorsWriter extends LuceneTestCase {
     doc.add(f);
     doc.add(f);
     w.addDocument(doc);
-    w.shutdown();
+    w.close();
 
     IndexReader r = DirectoryReader.open(dir);
     TermsEnum termsEnum = r.getTermVectors(0).terms("field").iterator(null);
@@ -258,7 +258,7 @@ public class TestTermVectorsWriter extends LuceneTestCase {
     doc.add(f);
     doc.add(f2);
     w.addDocument(doc);
-    w.shutdown();
+    w.close();
 
     IndexReader r = DirectoryReader.open(dir);
     TermsEnum termsEnum = r.getTermVectors(0).terms("field").iterator(null);
@@ -302,7 +302,7 @@ public class TestTermVectorsWriter extends LuceneTestCase {
     doc.add(f);
     doc.add(f2);
     w.addDocument(doc);
-    w.shutdown();
+    w.close();
 
     IndexReader r = DirectoryReader.open(dir);
     TermsEnum termsEnum = r.getTermVectors(0).terms("field").iterator(null);
@@ -344,7 +344,7 @@ public class TestTermVectorsWriter extends LuceneTestCase {
     doc.add(f2);
 
     w.addDocument(doc);
-    w.shutdown();
+    w.close();
 
     IndexReader r = DirectoryReader.open(dir);
     TermsEnum termsEnum = r.getTermVectors(0).terms("field").iterator(null);
@@ -400,7 +400,7 @@ public class TestTermVectorsWriter extends LuceneTestCase {
       document.add(termVectorField);
       writer.addDocument(document);
       writer.forceMerge(1);
-      writer.shutdown();
+      writer.close();
 
       IndexReader reader = DirectoryReader.open(dir);
       for(int i=0;i<reader.numDocs();i++) {
@@ -418,7 +418,7 @@ public class TestTermVectorsWriter extends LuceneTestCase {
       Directory[] indexDirs = {new MockDirectoryWrapper(random(), new RAMDirectory(dir, newIOContext(random())))};
       writer.addIndexes(indexDirs);
       writer.forceMerge(1);
-      writer.shutdown();
+      writer.close();
     }
     dir.close();
   }
@@ -453,7 +453,7 @@ public class TestTermVectorsWriter extends LuceneTestCase {
       document.add(termVectorField);
       writer.addDocument(document);
       writer.forceMerge(1);
-      writer.shutdown();
+      writer.close();
 
       IndexReader reader = DirectoryReader.open(dir);
       assertNull(reader.getTermVectors(0));
@@ -487,7 +487,7 @@ public class TestTermVectorsWriter extends LuceneTestCase {
     document.add(termVectorField);
     for(int i=0;i<10;i++)
       writer.addDocument(document);
-    writer.shutdown();
+    writer.close();
 
     writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))
         .setMaxBufferedDocs(2)
@@ -498,7 +498,7 @@ public class TestTermVectorsWriter extends LuceneTestCase {
       writer.addDocument(document);
 
     writer.forceMerge(1);
-    writer.shutdown();
+    writer.close();
 
     IndexReader reader = DirectoryReader.open(dir);
     for(int i=0;i<10;i++) {
@@ -535,7 +535,7 @@ public class TestTermVectorsWriter extends LuceneTestCase {
     iw.commit();
 
     iw.forceMerge(1);
-    iw.shutdown();
+    iw.close();
     dir.close();
   }
 
@@ -567,7 +567,7 @@ public class TestTermVectorsWriter extends LuceneTestCase {
     iw.commit();
     iw.forceMerge(1);
 
-    iw.shutdown();
+    iw.close();
     dir.close();
   }
   
@@ -658,7 +658,7 @@ public class TestTermVectorsWriter extends LuceneTestCase {
   public void testNoAbortOnBadTVSettings() throws Exception {
     Directory dir = newDirectory();
     // Don't use RandomIndexWriter because we want to be sure both docs go to 1 seg:
-    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));
+    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));
     IndexWriter iw = new IndexWriter(dir, iwc);
 
     Document doc = new Document();
diff --git lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf.java lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf.java
index 0218b69..a1d3a77 100644
--- lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf.java
+++ lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf.java
@@ -100,7 +100,7 @@ public class TestTermdocPerf extends LuceneTestCase {
     }
 
     writer.forceMerge(1);
-    writer.shutdown();
+    writer.close();
   }
 
 
diff --git lucene/core/src/test/org/apache/lucene/index/TestTermsEnum.java lucene/core/src/test/org/apache/lucene/index/TestTermsEnum.java
index 1081ef2..5df59e0 100644
--- lucene/core/src/test/org/apache/lucene/index/TestTermsEnum.java
+++ lucene/core/src/test/org/apache/lucene/index/TestTermsEnum.java
@@ -27,7 +27,6 @@ import org.apache.lucene.document.IntField;
 import org.apache.lucene.document.NumericDocValuesField;
 import org.apache.lucene.search.DocIdSetIterator;
 import org.apache.lucene.store.Directory;
-import org.apache.lucene.util.Bits;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.LineFileDocs;
 import org.apache.lucene.util.LuceneTestCase.SuppressCodecs;
@@ -53,7 +52,7 @@ public class TestTermsEnum extends LuceneTestCase {
       w.addDocument(docs.nextDoc());
     }
     final IndexReader r = w.getReader();
-    w.shutdown();
+    w.close();
 
     final List<BytesRef> terms = new ArrayList<>();
     final TermsEnum termsEnum = MultiFields.getTerms(r, "body").iterator(null);
@@ -226,7 +225,7 @@ public class TestTermsEnum extends LuceneTestCase {
     }
 
     final IndexReader r = w.getReader();
-    w.shutdown();
+    w.close();
 
     final NumericDocValues docIDToID = MultiDocValues.getNumericValues(r, "id");
 
@@ -368,7 +367,7 @@ public class TestTermsEnum extends LuceneTestCase {
       close();
     }
     r = w.getReader();
-    w.shutdown();
+    w.close();
     return r;
   }
 
@@ -507,7 +506,7 @@ public class TestTermsEnum extends LuceneTestCase {
     w.deleteDocuments(new Term("field", "one"));
     w.forceMerge(1);
     IndexReader r = w.getReader();
-    w.shutdown();
+    w.close();
     assertEquals(1, r.numDocs());
     assertEquals(1, r.maxDoc());
     Terms terms = MultiFields.getTerms(r, "field");
@@ -735,7 +734,7 @@ public class TestTermsEnum extends LuceneTestCase {
 
     w.forceMerge(1);
     DirectoryReader r = w.getReader();
-    w.shutdown();
+    w.close();
     AtomicReader sub = getOnlySegmentReader(r);
     Terms terms = sub.fields().terms("field");
     Automaton automaton = new RegExp(".*", RegExp.NONE).toAutomaton();
@@ -789,7 +788,7 @@ public class TestTermsEnum extends LuceneTestCase {
 
     w.forceMerge(1);
     DirectoryReader r = w.getReader();
-    w.shutdown();
+    w.close();
     AtomicReader sub = getOnlySegmentReader(r);
     Terms terms = sub.fields().terms("field");
 
@@ -843,7 +842,7 @@ public class TestTermsEnum extends LuceneTestCase {
 
     w.forceMerge(1);
     DirectoryReader r = w.getReader();
-    w.shutdown();
+    w.close();
     AtomicReader sub = getOnlySegmentReader(r);
     Terms terms = sub.fields().terms("field");
 
@@ -993,7 +992,7 @@ public class TestTermsEnum extends LuceneTestCase {
         assertFalse("term '" + termsList.get(i) + "' shouldn't exist but does", te.seekExact(termsList.get(i)));
       }
       r.close();
-      w.shutdown();
+      w.close();
     }
     dir.close();
   }
diff --git lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2.java lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2.java
index 6a7fc03..3a0c971 100644
--- lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2.java
+++ lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2.java
@@ -36,7 +36,6 @@ import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.TestUtil;
-import org.apache.lucene.util.TestUtil;
 import org.apache.lucene.util.automaton.*;
 
 public class TestTermsEnum2 extends LuceneTestCase {
@@ -72,7 +71,7 @@ public class TestTermsEnum2 extends LuceneTestCase {
     
     reader = writer.getReader();
     searcher = newSearcher(reader);
-    writer.shutdown();
+    writer.close();
   }
   
   @Override
diff --git lucene/core/src/test/org/apache/lucene/index/TestThreadedForceMerge.java lucene/core/src/test/org/apache/lucene/index/TestThreadedForceMerge.java
index ecf90e6..6c8235d 100644
--- lucene/core/src/test/org/apache/lucene/index/TestThreadedForceMerge.java
+++ lucene/core/src/test/org/apache/lucene/index/TestThreadedForceMerge.java
@@ -124,7 +124,7 @@ public class TestThreadedForceMerge extends LuceneTestCase {
       assertEquals("index=" + writer.segString() + " numDocs=" + writer.numDocs() + " maxDoc=" + writer.maxDoc() + " config=" + writer.getConfig(), expectedDocCount, writer.numDocs());
       assertEquals("index=" + writer.segString() + " numDocs=" + writer.numDocs() + " maxDoc=" + writer.maxDoc() + " config=" + writer.getConfig(), expectedDocCount, writer.maxDoc());
 
-      writer.shutdown();
+      writer.close();
       writer = new IndexWriter(directory, newIndexWriterConfig(ANALYZER)
           .setOpenMode(OpenMode.APPEND)
           .setMaxBufferedDocs(2));
@@ -134,7 +134,7 @@ public class TestThreadedForceMerge extends LuceneTestCase {
       assertEquals(expectedDocCount, reader.numDocs());
       reader.close();
     }
-    writer.shutdown();
+    writer.close();
   }
 
   /*
diff --git lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy.java lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy.java
index d5b9fbd..8bd4fcf 100644
--- lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy.java
+++ lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy.java
@@ -64,7 +64,7 @@ public class TestTieredMergePolicy extends BaseMergePolicyTestCase {
     w.forceMergeDeletes();
     assertEquals(60, w.maxDoc());
     assertEquals(60, w.numDocs());
-    w.shutdown();
+    w.close();
     dir.close();
   }
 
@@ -105,7 +105,7 @@ public class TestTieredMergePolicy extends BaseMergePolicyTestCase {
       w.forceMerge(targetCount);
       assertEquals(targetCount, w.getSegmentCount());
 
-      w.shutdown();
+      w.close();
       dir.close();
     }
   }
@@ -152,7 +152,7 @@ public class TestTieredMergePolicy extends BaseMergePolicyTestCase {
     assertEquals(numDocs-1, r.numDocs());
     r.close();
 
-    w.shutdown();
+    w.close();
 
     dir.close();
   }
@@ -216,7 +216,7 @@ public class TestTieredMergePolicy extends BaseMergePolicyTestCase {
   // LUCENE-5668
   public void testUnbalancedMergeSelection() throws Exception {
     Directory dir = newDirectory();
-    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));
+    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));
     TieredMergePolicy tmp = (TieredMergePolicy) iwc.getMergePolicy();
     tmp.setFloorSegmentMB(0.00001);
     // We need stable sizes for each segment:
diff --git lucene/core/src/test/org/apache/lucene/index/TestTransactionRollback.java lucene/core/src/test/org/apache/lucene/index/TestTransactionRollback.java
index 8b09a36..afc3dfd 100644
--- lucene/core/src/test/org/apache/lucene/index/TestTransactionRollback.java
+++ lucene/core/src/test/org/apache/lucene/index/TestTransactionRollback.java
@@ -72,7 +72,7 @@ public class TestTransactionRollback extends LuceneTestCase {
     Map<String,String> data = new HashMap<>();
     data.put("index", "Rolled back to 1-"+id);
     w.setCommitData(data);
-    w.shutdown();
+    w.close();
   }
 
   public void testRepeatedRollBacks() throws Exception {
@@ -147,7 +147,7 @@ public class TestTransactionRollback extends LuceneTestCase {
       }
     }
 
-    w.shutdown();
+    w.close();
   }
   
   @Override
@@ -214,7 +214,7 @@ public class TestTransactionRollback extends LuceneTestCase {
       // Unless you specify a prior commit point, rollback
       // should not work:
       new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))
-          .setIndexDeletionPolicy(new DeleteLastCommitPolicy())).shutdown();
+          .setIndexDeletionPolicy(new DeleteLastCommitPolicy())).close();
       IndexReader r = DirectoryReader.open(dir);
       assertEquals(100, r.numDocs());
       r.close();
diff --git lucene/core/src/test/org/apache/lucene/index/TestTransactions.java lucene/core/src/test/org/apache/lucene/index/TestTransactions.java
index b976d7c..8228e27 100644
--- lucene/core/src/test/org/apache/lucene/index/TestTransactions.java
+++ lucene/core/src/test/org/apache/lucene/index/TestTransactions.java
@@ -146,8 +146,8 @@ public class TestTransactions extends LuceneTestCase {
         TestTransactions.doFail = false;
       }  
 
-      writer1.shutdown();
-      writer2.shutdown();
+      writer1.close();
+      writer2.close();
     }
 
     public void update(IndexWriter writer) throws IOException {
@@ -219,7 +219,7 @@ public class TestTransactions extends LuceneTestCase {
       d.add(newTextField("contents", English.intToEnglish(n), Field.Store.NO));
       writer.addDocument(d);
     }
-    writer.shutdown();
+    writer.close();
   }
 
   public void testTransactions() throws Throwable {
diff --git lucene/core/src/test/org/apache/lucene/index/TestTryDelete.java lucene/core/src/test/org/apache/lucene/index/TestTryDelete.java
index 87fdae3..4ad2475 100644
--- lucene/core/src/test/org/apache/lucene/index/TestTryDelete.java
+++ lucene/core/src/test/org/apache/lucene/index/TestTryDelete.java
@@ -41,8 +41,7 @@ public class TestTryDelete extends LuceneTestCase
     throws IOException
   {
     MergePolicy policy = new LogByteSizeMergePolicy();
-    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT,
-                                                   new MockAnalyzer(random()));
+    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));
     conf.setMergePolicy(policy);
     conf.setOpenMode(OpenMode.CREATE_OR_APPEND);
 
@@ -65,7 +64,7 @@ public class TestTryDelete extends LuceneTestCase
     }
 
     writer.commit();
-    writer.shutdown();
+    writer.close();
 
     return directory;
   }
@@ -153,7 +152,7 @@ public class TestTryDelete extends LuceneTestCase
 
     assertEquals(0, topDocs.totalHits);
 
-    writer.shutdown();
+    writer.close();
 
     searcher = new IndexSearcher(DirectoryReader.open(directory));
 
diff --git lucene/core/src/test/org/apache/lucene/index/TestUniqueTermCount.java lucene/core/src/test/org/apache/lucene/index/TestUniqueTermCount.java
index 546bbd7..8378a76 100644
--- lucene/core/src/test/org/apache/lucene/index/TestUniqueTermCount.java
+++ lucene/core/src/test/org/apache/lucene/index/TestUniqueTermCount.java
@@ -58,7 +58,7 @@ public class TestUniqueTermCount extends LuceneTestCase {
       writer.addDocument(doc);
     }
     reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
   }
   
   @Override
diff --git lucene/core/src/test/org/apache/lucene/search/BaseTestRangeFilter.java lucene/core/src/test/org/apache/lucene/search/BaseTestRangeFilter.java
index 7eb0130..46d2bfd 100644
--- lucene/core/src/test/org/apache/lucene/search/BaseTestRangeFilter.java
+++ lucene/core/src/test/org/apache/lucene/search/BaseTestRangeFilter.java
@@ -152,7 +152,7 @@ public class BaseTestRangeFilter extends LuceneTestCase {
     doc.add(bodyDVField);
 
     RandomIndexWriter writer = new RandomIndexWriter(random, index.index, 
-                                                     newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer(random))
+                                                     newIndexWriterConfig(random, new MockAnalyzer(random))
                                                      .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(TestUtil.nextInt(random, 50, 1000)).setMergePolicy(newLogMergePolicy()));
     TestUtil.reduceOpenFiles(writer.w);
 
@@ -200,7 +200,7 @@ public class BaseTestRangeFilter extends LuceneTestCase {
         // exceedingly rare (Yonik calculates 1 in ~429,000)
         // times) that this loop requires more than one try:
         IndexReader ir = writer.getReader();
-        writer.shutdown();
+        writer.close();
         return ir;
       }
 
diff --git lucene/core/src/test/org/apache/lucene/search/FuzzyTermOnShortTermsTest.java lucene/core/src/test/org/apache/lucene/search/FuzzyTermOnShortTermsTest.java
index 1c51bef..427888b 100644
--- lucene/core/src/test/org/apache/lucene/search/FuzzyTermOnShortTermsTest.java
+++ lucene/core/src/test/org/apache/lucene/search/FuzzyTermOnShortTermsTest.java
@@ -92,7 +92,7 @@ public class FuzzyTermOnShortTermsTest extends LuceneTestCase {
          writer.addDocument(d);
             
       }
-      writer.shutdown();
+      writer.close();
       return directory;
    }
 }
diff --git lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery.java lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery.java
index c1cc032..02c4b3a 100644
--- lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery.java
+++ lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery.java
@@ -65,7 +65,7 @@ public class TestAutomatonQuery extends LuceneTestCase {
     writer.addDocument(doc);
     reader = writer.getReader();
     searcher = newSearcher(reader);
-    writer.shutdown();
+    writer.close();
   }
   
   @Override
diff --git lucene/core/src/test/org/apache/lucene/search/TestAutomatonQueryUnicode.java lucene/core/src/test/org/apache/lucene/search/TestAutomatonQueryUnicode.java
index 0d176d8..0606ad3 100644
--- lucene/core/src/test/org/apache/lucene/search/TestAutomatonQueryUnicode.java
+++ lucene/core/src/test/org/apache/lucene/search/TestAutomatonQueryUnicode.java
@@ -80,7 +80,7 @@ public class TestAutomatonQueryUnicode extends LuceneTestCase {
     writer.addDocument(doc);
     reader = writer.getReader();
     searcher = newSearcher(reader);
-    writer.shutdown();
+    writer.close();
   }
 
   @Override
diff --git lucene/core/src/test/org/apache/lucene/search/TestBoolean2.java lucene/core/src/test/org/apache/lucene/search/TestBoolean2.java
index ce50204..c15e9f7 100644
--- lucene/core/src/test/org/apache/lucene/search/TestBoolean2.java
+++ lucene/core/src/test/org/apache/lucene/search/TestBoolean2.java
@@ -35,7 +35,6 @@ import org.apache.lucene.store.MockDirectoryWrapper;
 import org.apache.lucene.store.RAMDirectory;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.TestUtil;
-import org.apache.lucene.util.TestUtil;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;
@@ -64,7 +63,7 @@ public class TestBoolean2 extends LuceneTestCase {
       doc.add(newTextField(field, docFields[i], Field.Store.NO));
       writer.addDocument(doc);
     }
-    writer.shutdown();
+    writer.close();
     littleReader = DirectoryReader.open(directory);
     searcher = newSearcher(littleReader);
     // this is intentionally using the baseline sim, because it compares against bigSearcher (which uses a random one)
@@ -87,7 +86,7 @@ public class TestBoolean2 extends LuceneTestCase {
       RandomIndexWriter w = new RandomIndexWriter(random(), dir2);
       w.addIndexes(copy);
       docCount = w.maxDoc();
-      w.shutdown();
+      w.close();
       mulFactor *= 2;
     } while(docCount < 3000);
 
@@ -106,7 +105,7 @@ public class TestBoolean2 extends LuceneTestCase {
     }
     reader = w.getReader();
     bigSearcher = newSearcher(reader);
-    w.shutdown();
+    w.close();
   }
 
   @AfterClass
diff --git lucene/core/src/test/org/apache/lucene/search/TestBooleanCoord.java lucene/core/src/test/org/apache/lucene/search/TestBooleanCoord.java
index 41b2fbe..181b64b 100644
--- lucene/core/src/test/org/apache/lucene/search/TestBooleanCoord.java
+++ lucene/core/src/test/org/apache/lucene/search/TestBooleanCoord.java
@@ -47,7 +47,7 @@ public class TestBooleanCoord extends LuceneTestCase {
   @BeforeClass
   public static void beforeClass() throws Exception {
     dir = newDirectory();
-    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, null));
+    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(null));
     
     // we only add two documents for testing:
     // the first document has 3 terms A,B,C (for positive matching). we test scores against this.
@@ -66,7 +66,7 @@ public class TestBooleanCoord extends LuceneTestCase {
     doc.add(new StringField("field", "3", Field.Store.NO));
     iw.addDocument(doc);
 
-    iw.shutdown();
+    iw.close();
     reader = DirectoryReader.open(dir);
     searcher = new IndexSearcher(reader);
     // we set a similarity that just returns 1, the idea is to test coord
diff --git lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch.java lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch.java
index e8474bd..719a192 100644
--- lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch.java
+++ lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch.java
@@ -71,7 +71,7 @@ public class TestBooleanMinShouldMatch extends LuceneTestCase {
 
         r = w.getReader();
         s = newSearcher(r);
-        w.shutdown();
+        w.close();
 //System.out.println("Set up " + getName());
     }
     
diff --git lucene/core/src/test/org/apache/lucene/search/TestBooleanOr.java lucene/core/src/test/org/apache/lucene/search/TestBooleanOr.java
index e173f49..bf07fe6 100644
--- lucene/core/src/test/org/apache/lucene/search/TestBooleanOr.java
+++ lucene/core/src/test/org/apache/lucene/search/TestBooleanOr.java
@@ -21,7 +21,6 @@ import java.util.concurrent.atomic.AtomicInteger;
 import org.apache.lucene.analysis.MockAnalyzer;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.TextField;
-import org.apache.lucene.index.AtomicReaderContext;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.RandomIndexWriter;
 import org.apache.lucene.index.Term;
@@ -149,7 +148,7 @@ public class TestBooleanOr extends LuceneTestCase {
     reader = writer.getReader();
     //
     searcher = newSearcher(reader);
-    writer.shutdown();
+    writer.close();
   }
 
   @Override
@@ -173,7 +172,7 @@ public class TestBooleanOr extends LuceneTestCase {
 
     riw.forceMerge(1);
     IndexReader r = riw.getReader();
-    riw.shutdown();
+    riw.close();
 
     IndexSearcher s = newSearcher(r);
     BooleanQuery bq = new BooleanQuery();
diff --git lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery.java lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery.java
index 55ed7e6..d8e05fb 100644
--- lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery.java
+++ lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery.java
@@ -138,7 +138,7 @@ public class TestBooleanQuery extends LuceneTestCase {
     assertEquals(1, s.search(dmq, 10).totalHits);
     
     r.close();
-    w.shutdown();
+    w.close();
     dir.close();
   }
 
@@ -149,7 +149,7 @@ public class TestBooleanQuery extends LuceneTestCase {
     doc1.add(newTextField("field", "foo bar", Field.Store.NO));
     iw1.addDocument(doc1);
     IndexReader reader1 = iw1.getReader();
-    iw1.shutdown();
+    iw1.close();
     
     Directory dir2 = newDirectory();
     RandomIndexWriter iw2 = new RandomIndexWriter(random(), dir2);
@@ -157,7 +157,7 @@ public class TestBooleanQuery extends LuceneTestCase {
     doc2.add(newTextField("field", "foo baz", Field.Store.NO));
     iw2.addDocument(doc2);
     IndexReader reader2 = iw2.getReader();
-    iw2.shutdown();
+    iw2.close();
 
     BooleanQuery query = new BooleanQuery(); // Query: +foo -ba*
     query.add(new TermQuery(new Term("field", "foo")), BooleanClause.Occur.MUST);
@@ -212,7 +212,7 @@ public class TestBooleanQuery extends LuceneTestCase {
     w.forceMerge(1);
     final IndexReader r = w.getReader();
     final IndexSearcher s = newSearcher(r);
-    w.shutdown();
+    w.close();
 
     for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {
       if (VERBOSE) {
@@ -298,13 +298,13 @@ public class TestBooleanQuery extends LuceneTestCase {
     Directory directory = newDirectory();
     Analyzer indexerAnalyzer = new MockAnalyzer(random());
 
-    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, indexerAnalyzer);
+    IndexWriterConfig config = new IndexWriterConfig(indexerAnalyzer);
     IndexWriter writer = new IndexWriter(directory, config);
     String FIELD = "content";
     Document d = new Document();
     d.add(new TextField(FIELD, "clockwork orange", Field.Store.YES));
     writer.addDocument(d);
-    writer.shutdown();
+    writer.close();
 
     IndexReader indexReader = DirectoryReader.open(directory);
     IndexSearcher searcher = newSearcher(indexReader);
@@ -334,7 +334,7 @@ public class TestBooleanQuery extends LuceneTestCase {
     doc.add(newTextField("field", "some text here", Field.Store.NO));
     w.addDocument(doc);
     IndexReader r = w.getReader();
-    w.shutdown();
+    w.close();
     IndexSearcher s = new IndexSearcher(r) {
         @Override
         protected void search(List<AtomicReaderContext> leaves, Weight weight, Collector collector) throws IOException {
@@ -358,7 +358,7 @@ public class TestBooleanQuery extends LuceneTestCase {
     final String VALUE = "foo";
       
     Directory dir = newDirectory();
-    (new RandomIndexWriter(random(), dir)).shutdown();
+    (new RandomIndexWriter(random(), dir)).close();
     IndexReader r = DirectoryReader.open(dir);
 
     TermQuery expected = new TermQuery(new Term(FIELD, VALUE));
diff --git lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers.java lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers.java
index 93f3bff..15e42fe 100644
--- lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers.java
+++ lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers.java
@@ -63,7 +63,7 @@ public class TestBooleanQueryVisitSubscorers extends LuceneTestCase {
     writer.addDocument(doc("solr", "solr is a very popular search server and is using lucene"));
     writer.addDocument(doc("nutch", "nutch is an internet search engine with web crawler and is using lucene and hadoop"));
     reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
     searcher = newSearcher(reader);
   }
   
diff --git lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer.java lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer.java
index 358a513..f1ed5bc 100644
--- lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer.java
+++ lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer.java
@@ -50,7 +50,7 @@ public class TestBooleanScorer extends LuceneTestCase {
       writer.addDocument(doc);
     }
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
 
     BooleanQuery booleanQuery1 = new BooleanQuery();
     booleanQuery1.add(new TermQuery(new Term(FIELD, "1")), BooleanClause.Occur.SHOULD);
@@ -77,7 +77,7 @@ public class TestBooleanScorer extends LuceneTestCase {
     RandomIndexWriter writer = new RandomIndexWriter(random(), directory);
     writer.commit();
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
     IndexSearcher searcher = newSearcher(ir);
     BooleanWeight weight = (BooleanWeight) new BooleanQuery().createWeight(searcher);
     BulkScorer[] scorers = new BulkScorer[] {new BulkScorer() {
@@ -137,7 +137,7 @@ public class TestBooleanScorer extends LuceneTestCase {
     doc.add(new TextField("field", "33", Field.Store.NO));
     w.addDocument(doc);
     final IndexReader r = w.getReader();
-    w.shutdown();
+    w.close();
     // we don't wrap with AssertingIndexSearcher in order to have the original scorer in setScorer.
     final IndexSearcher s = newSearcher(r, true, false);
 
@@ -236,7 +236,7 @@ public class TestBooleanScorer extends LuceneTestCase {
     doc.add(newTextField("field", "doctors are people who prescribe medicines of which they know little, to cure diseases of which they know less, in human beings of whom they know nothing", Field.Store.NO));
     w.addDocument(doc);
     IndexReader r = w.getReader();
-    w.shutdown();
+    w.close();
 
     IndexSearcher s = newSearcher(r);
     BooleanQuery q1 = new BooleanQuery();
diff --git lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter.java lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter.java
index 9841d96..d2e4433 100644
--- lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter.java
+++ lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter.java
@@ -35,7 +35,6 @@ import org.apache.lucene.util.Bits;
 import org.apache.lucene.util.FixedBitSet;
 import org.apache.lucene.util.IOUtils;
 import org.apache.lucene.util.LuceneTestCase;
-import org.apache.lucene.util.TestUtil;
 
 public class TestCachingWrapperFilter extends LuceneTestCase {
   Directory dir;
@@ -66,7 +65,7 @@ public class TestCachingWrapperFilter extends LuceneTestCase {
   
   @Override
   public void tearDown() throws Exception {
-    iw.shutdown();
+    iw.close();
     IOUtils.close(ir, dir);
     super.tearDown();
   }
@@ -144,7 +143,7 @@ public class TestCachingWrapperFilter extends LuceneTestCase {
   public void testCachingWorks() throws Exception {
     Directory dir = newDirectory();
     RandomIndexWriter writer = new RandomIndexWriter(random(), dir);
-    writer.shutdown();
+    writer.close();
 
     IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));
     AtomicReaderContext context = (AtomicReaderContext) reader.getContext();
@@ -170,7 +169,7 @@ public class TestCachingWrapperFilter extends LuceneTestCase {
   public void testNullDocIdSet() throws Exception {
     Directory dir = newDirectory();
     RandomIndexWriter writer = new RandomIndexWriter(random(), dir);
-    writer.shutdown();
+    writer.close();
 
     IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));
     AtomicReaderContext context = (AtomicReaderContext) reader.getContext();
@@ -193,7 +192,7 @@ public class TestCachingWrapperFilter extends LuceneTestCase {
   public void testNullDocIdSetIterator() throws Exception {
     Directory dir = newDirectory();
     RandomIndexWriter writer = new RandomIndexWriter(random(), dir);
-    writer.shutdown();
+    writer.close();
 
     IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));
     AtomicReaderContext context = (AtomicReaderContext) reader.getContext();
@@ -250,7 +249,7 @@ public class TestCachingWrapperFilter extends LuceneTestCase {
     Directory dir = newDirectory();
     RandomIndexWriter writer = new RandomIndexWriter(random(), dir);
     writer.addDocument(new Document());
-    writer.shutdown();
+    writer.close();
 
     IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));
 
@@ -409,7 +408,7 @@ public class TestCachingWrapperFilter extends LuceneTestCase {
     assertTrue(oldReader != null);
 
     reader.close();
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
 
diff --git lucene/core/src/test/org/apache/lucene/search/TestConjunctions.java lucene/core/src/test/org/apache/lucene/search/TestConjunctions.java
index 4c0520b..5c57bef 100644
--- lucene/core/src/test/org/apache/lucene/search/TestConjunctions.java
+++ lucene/core/src/test/org/apache/lucene/search/TestConjunctions.java
@@ -57,7 +57,7 @@ public class TestConjunctions extends LuceneTestCase {
     writer.addDocument(doc("solr", "solr is a very popular search server and is using lucene"));
     writer.addDocument(doc("nutch", "nutch is an internet search engine with web crawler and is using lucene and hadoop"));
     reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
     searcher = newSearcher(reader);
     searcher.setSimilarity(new TFSimilarity());
   }
diff --git lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery.java lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery.java
index a83386b..10a1893 100644
--- lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery.java
+++ lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery.java
@@ -19,7 +19,6 @@ package org.apache.lucene.search;
 
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
-import org.apache.lucene.index.AtomicReaderContext;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.RandomIndexWriter;
 import org.apache.lucene.index.Term;
@@ -90,7 +89,7 @@ public class TestConstantScoreQuery extends LuceneTestCase {
       writer.addDocument(doc);
 
       reader = writer.getReader();
-      writer.shutdown();
+      writer.close();
       // we don't wrap with AssertingIndexSearcher in order to have the original scorer in setScorer.
       searcher = newSearcher(reader, true, false);
       
@@ -137,7 +136,7 @@ public class TestConstantScoreQuery extends LuceneTestCase {
     doc.add(newStringField("field", "b", Field.Store.NO));
     w.addDocument(doc);
     IndexReader r = w.getReader();
-    w.shutdown();
+    w.close();
 
     Filter filterB = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term("field", "b"))));
     Query query = new ConstantScoreQuery(filterB);
@@ -163,7 +162,7 @@ public class TestConstantScoreQuery extends LuceneTestCase {
     doc.add(newStringField("field", "a", Field.Store.NO));
     w.addDocument(doc);
     IndexReader r = w.getReader();
-    w.shutdown();
+    w.close();
 
     Filter filter = new QueryWrapperFilter(AssertingQuery.wrap(random(), new TermQuery(new Term("field", "a"))));
     IndexSearcher s = newSearcher(r);
diff --git lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread.java lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread.java
index f9ada23..7cead0e 100644
--- lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread.java
+++ lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread.java
@@ -45,11 +45,9 @@ import org.apache.lucene.index.TrackingIndexWriter;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.NRTCachingDirectory;
 import org.apache.lucene.util.IOUtils;
-import org.apache.lucene.util.LuceneTestCase.AwaitsFix;
 import org.apache.lucene.util.LuceneTestCase.SuppressCodecs;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.ThreadInterruptedException;
-import org.apache.lucene.util.Version;
 
 @SuppressCodecs({ "SimpleText", "Memory", "Direct" })
 public class TestControlledRealTimeReopenThread extends ThreadedIndexingAndSearchingTestCase {
@@ -371,7 +369,7 @@ public class TestControlledRealTimeReopenThread extends ThreadedIndexingAndSearc
     }
     thread.close();
     thread.join();
-    _writer.shutdown();
+    _writer.close();
     IOUtils.close(manager, d);
   }
   
@@ -426,14 +424,14 @@ public class TestControlledRealTimeReopenThread extends ThreadedIndexingAndSearc
     } catch (IllegalStateException ise) {
       // expected
     }
-    w.shutdown();
+    w.close();
     other.close();
     dir.close();
   }
 
   public void testListenerCalled() throws Exception {
     Directory dir = newDirectory();
-    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, null));
+    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(null));
     final AtomicBoolean afterRefreshCalled = new AtomicBoolean(false);
     SearcherManager sm = new SearcherManager(iw, true, new SearcherFactory());
     sm.addListener(new ReferenceManager.RefreshListener() {
@@ -453,7 +451,7 @@ public class TestControlledRealTimeReopenThread extends ThreadedIndexingAndSearc
     sm.maybeRefreshBlocking();
     assertTrue(afterRefreshCalled.get());
     sm.close();
-    iw.shutdown();
+    iw.close();
     dir.close();
   }
 
@@ -477,8 +475,8 @@ public class TestControlledRealTimeReopenThread extends ThreadedIndexingAndSearc
 
     final SnapshotDeletionPolicy sdp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());
     final Directory dir = new NRTCachingDirectory(newFSDirectory(createTempDir("nrt")), 5, 128);
-    IndexWriterConfig config = new IndexWriterConfig(Version.LUCENE_4_6,
-                                                     new MockAnalyzer(random()));
+    IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));
+    config.setCommitOnClose(true);
     config.setIndexDeletionPolicy(sdp);
     config.setOpenMode(IndexWriterConfig.OpenMode.CREATE_OR_APPEND);
     final IndexWriter iw = new IndexWriter(dir, config);
@@ -534,7 +532,7 @@ public class TestControlledRealTimeReopenThread extends ThreadedIndexingAndSearc
 
     controlledRealTimeReopenThread.close();
     sm.close();
-    iw.shutdown();
+    iw.close();
     dir.close();
   }
 }
diff --git lucene/core/src/test/org/apache/lucene/search/TestCustomSearcherSort.java lucene/core/src/test/org/apache/lucene/search/TestCustomSearcherSort.java
index e22fe0f..a42c8f8 100644
--- lucene/core/src/test/org/apache/lucene/search/TestCustomSearcherSort.java
+++ lucene/core/src/test/org/apache/lucene/search/TestCustomSearcherSort.java
@@ -68,7 +68,7 @@ public class TestCustomSearcherSort extends LuceneTestCase {
       writer.addDocument(doc);
     }
     reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
     query = new TermQuery(new Term("content", "test"));
   }
   
diff --git lucene/core/src/test/org/apache/lucene/search/TestDateFilter.java lucene/core/src/test/org/apache/lucene/search/TestDateFilter.java
index 5aaadb3..2226d8a 100644
--- lucene/core/src/test/org/apache/lucene/search/TestDateFilter.java
+++ lucene/core/src/test/org/apache/lucene/search/TestDateFilter.java
@@ -52,7 +52,7 @@ public class TestDateFilter extends LuceneTestCase {
     writer.addDocument(doc);
     
     IndexReader reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
     IndexSearcher searcher = newSearcher(reader);
     
     // filter that should preserve matches
@@ -115,7 +115,7 @@ public class TestDateFilter extends LuceneTestCase {
     writer.addDocument(doc);
     
     IndexReader reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
     IndexSearcher searcher = newSearcher(reader);
     
     // filter that should preserve matches
diff --git lucene/core/src/test/org/apache/lucene/search/TestDateSort.java lucene/core/src/test/org/apache/lucene/search/TestDateSort.java
index 5f2a45f..6182d93 100644
--- lucene/core/src/test/org/apache/lucene/search/TestDateSort.java
+++ lucene/core/src/test/org/apache/lucene/search/TestDateSort.java
@@ -65,7 +65,7 @@ public class TestDateSort extends LuceneTestCase {
     writer.addDocument(createDocument("Document 5", 1192209943000L));
 
     reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
   }
 
   @Override
diff --git lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery.java lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery.java
index d19eb76..7c7aaa6 100644
--- lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery.java
+++ lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery.java
@@ -159,7 +159,7 @@ public class TestDisjunctionMaxQuery extends LuceneTestCase {
     }
     
     r = SlowCompositeReaderWrapper.wrap(writer.getReader());
-    writer.shutdown();
+    writer.close();
     s = newSearcher(r);
     s.setSimilarity(sim);
   }
@@ -482,13 +482,13 @@ public class TestDisjunctionMaxQuery extends LuceneTestCase {
     Directory directory = newDirectory();
     Analyzer indexerAnalyzer = new MockAnalyzer(random());
 
-    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, indexerAnalyzer);
+    IndexWriterConfig config = new IndexWriterConfig(indexerAnalyzer);
     IndexWriter writer = new IndexWriter(directory, config);
     String FIELD = "content";
     Document d = new Document();
     d.add(new TextField(FIELD, "clockwork orange", Field.Store.YES));
     writer.addDocument(d);
-    writer.shutdown();
+    writer.close();
 
     IndexReader indexReader = DirectoryReader.open(directory);
     IndexSearcher searcher = newSearcher(indexReader);
diff --git lucene/core/src/test/org/apache/lucene/search/TestDocBoost.java lucene/core/src/test/org/apache/lucene/search/TestDocBoost.java
index fd280ab..33d6983 100644
--- lucene/core/src/test/org/apache/lucene/search/TestDocBoost.java
+++ lucene/core/src/test/org/apache/lucene/search/TestDocBoost.java
@@ -52,7 +52,7 @@ public class TestDocBoost extends LuceneTestCase {
     writer.addDocument(d2);
 
     IndexReader reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
 
     final float[] scores = new float[4];
 
diff --git lucene/core/src/test/org/apache/lucene/search/TestDocIdSet.java lucene/core/src/test/org/apache/lucene/search/TestDocIdSet.java
index d0d018c..59b7f8d 100644
--- lucene/core/src/test/org/apache/lucene/search/TestDocIdSet.java
+++ lucene/core/src/test/org/apache/lucene/search/TestDocIdSet.java
@@ -115,7 +115,7 @@ public class TestDocIdSet extends LuceneTestCase {
     doc.add(newStringField("c", "val", Field.Store.NO));
     writer.addDocument(doc);
     IndexReader reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     // First verify the document is searchable.
     IndexSearcher searcher = newSearcher(reader);
@@ -141,7 +141,7 @@ public class TestDocIdSet extends LuceneTestCase {
     doc.add(newStringField("c", "val", Field.Store.NO));
     writer.addDocument(doc);
     IndexReader reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     // First verify the document is searchable.
     IndexSearcher searcher = newSearcher(reader);
diff --git lucene/core/src/test/org/apache/lucene/search/TestDocTermOrdsRangeFilter.java lucene/core/src/test/org/apache/lucene/search/TestDocTermOrdsRangeFilter.java
index b817b4f..8d2ee40 100644
--- lucene/core/src/test/org/apache/lucene/search/TestDocTermOrdsRangeFilter.java
+++ lucene/core/src/test/org/apache/lucene/search/TestDocTermOrdsRangeFilter.java
@@ -88,7 +88,7 @@ public class TestDocTermOrdsRangeFilter extends LuceneTestCase {
     reader = writer.getReader();
     searcher1 = newSearcher(reader);
     searcher2 = newSearcher(reader);
-    writer.shutdown();
+    writer.close();
   }
   
   @Override
diff --git lucene/core/src/test/org/apache/lucene/search/TestDocTermOrdsRewriteMethod.java lucene/core/src/test/org/apache/lucene/search/TestDocTermOrdsRewriteMethod.java
index a4d25db..4975266 100644
--- lucene/core/src/test/org/apache/lucene/search/TestDocTermOrdsRewriteMethod.java
+++ lucene/core/src/test/org/apache/lucene/search/TestDocTermOrdsRewriteMethod.java
@@ -90,7 +90,7 @@ public class TestDocTermOrdsRewriteMethod extends LuceneTestCase {
     reader = writer.getReader();
     searcher1 = newSearcher(reader);
     searcher2 = newSearcher(reader);
-    writer.shutdown();
+    writer.close();
   }
   
   @Override
diff --git lucene/core/src/test/org/apache/lucene/search/TestDocValuesScoring.java lucene/core/src/test/org/apache/lucene/search/TestDocValuesScoring.java
index 90628d2..436d3d0 100644
--- lucene/core/src/test/org/apache/lucene/search/TestDocValuesScoring.java
+++ lucene/core/src/test/org/apache/lucene/search/TestDocValuesScoring.java
@@ -64,7 +64,7 @@ public class TestDocValuesScoring extends LuceneTestCase {
     dvField.setFloatValue(4f); // boost x4
     iw.addDocument(doc);
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     
     // no boosting
     IndexSearcher searcher1 = newSearcher(ir, false);
diff --git lucene/core/src/test/org/apache/lucene/search/TestEarlyTermination.java lucene/core/src/test/org/apache/lucene/search/TestEarlyTermination.java
index 8a54733..7388d00 100644
--- lucene/core/src/test/org/apache/lucene/search/TestEarlyTermination.java
+++ lucene/core/src/test/org/apache/lucene/search/TestEarlyTermination.java
@@ -48,7 +48,7 @@ public class TestEarlyTermination extends LuceneTestCase {
   @Override
   public void tearDown() throws Exception {
     super.tearDown();
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
 
diff --git lucene/core/src/test/org/apache/lucene/search/TestElevationComparator.java lucene/core/src/test/org/apache/lucene/search/TestElevationComparator.java
index 736aebe..d17a7a9 100644
--- lucene/core/src/test/org/apache/lucene/search/TestElevationComparator.java
+++ lucene/core/src/test/org/apache/lucene/search/TestElevationComparator.java
@@ -53,7 +53,7 @@ public class TestElevationComparator extends LuceneTestCase {
     writer.addDocument(adoc(new String[] {"id", "z", "title", "boosted boosted boosted","str_s", "z"}));
 
     IndexReader r = DirectoryReader.open(writer, true);
-    writer.shutdown();
+    writer.close();
 
     IndexSearcher searcher = newSearcher(r);
     searcher.setSimilarity(new DefaultSimilarity());
diff --git lucene/core/src/test/org/apache/lucene/search/TestExplanations.java lucene/core/src/test/org/apache/lucene/search/TestExplanations.java
index 41bf085..faf1240 100644
--- lucene/core/src/test/org/apache/lucene/search/TestExplanations.java
+++ lucene/core/src/test/org/apache/lucene/search/TestExplanations.java
@@ -83,7 +83,7 @@ public class TestExplanations extends LuceneTestCase {
       writer.addDocument(doc);
     }
     reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
     searcher = newSearcher(reader);
   }
 
diff --git lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter.java lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter.java
index 3a2094f..0537a2c 100644
--- lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter.java
+++ lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter.java
@@ -450,7 +450,7 @@ public class TestFieldCacheRangeFilter extends BaseTestRangeFilter {
     BytesRef term0 = new BytesRef();
     NumericUtils.intToPrefixCoded(0, 0, term0);
     writer.deleteDocuments(new Term("id_int", term0));
-    writer.shutdown();
+    writer.close();
 
     IndexReader reader = DirectoryReader.open(dir);
     IndexSearcher search = newSearcher(reader);
diff --git lucene/core/src/test/org/apache/lucene/search/TestFieldCacheTermsFilter.java lucene/core/src/test/org/apache/lucene/search/TestFieldCacheTermsFilter.java
index 800e6b7..9863fa5 100644
--- lucene/core/src/test/org/apache/lucene/search/TestFieldCacheTermsFilter.java
+++ lucene/core/src/test/org/apache/lucene/search/TestFieldCacheTermsFilter.java
@@ -49,7 +49,7 @@ public class TestFieldCacheTermsFilter extends LuceneTestCase {
       w.addDocument(doc);
     }
     IndexReader reader = w.getReader();
-    w.shutdown();
+    w.close();
 
     IndexSearcher searcher = newSearcher(reader);
     int numDocs = reader.numDocs();
diff --git lucene/core/src/test/org/apache/lucene/search/TestFieldValueFilter.java lucene/core/src/test/org/apache/lucene/search/TestFieldValueFilter.java
index a38bfac..e27578b 100644
--- lucene/core/src/test/org/apache/lucene/search/TestFieldValueFilter.java
+++ lucene/core/src/test/org/apache/lucene/search/TestFieldValueFilter.java
@@ -115,7 +115,7 @@ public class TestFieldValueFilter extends LuceneTestCase {
       writer.deleteDocuments(new Term("id", "" + docID));
       docStates[docID] = 2;
     }
-    writer.shutdown();
+    writer.close();
     return docStates;
   }
 
diff --git lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery.java lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery.java
index b4c5078..9b314f0 100644
--- lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery.java
+++ lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery.java
@@ -87,7 +87,7 @@ public class TestFilteredQuery extends LuceneTestCase {
     writer.forceMerge(1);
 
     reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
 
     searcher = newSearcher(reader);
 
@@ -415,7 +415,7 @@ public class TestFilteredQuery extends LuceneTestCase {
       writer.addDocument(doc);
     }
     IndexReader reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(reader);
     Query query = new FilteredQuery(new TermQuery(new Term("field", "0")),
@@ -499,7 +499,7 @@ public class TestFilteredQuery extends LuceneTestCase {
       writer.addDocument (doc);  
     }
     IndexReader reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
     final boolean queryFirst = random().nextBoolean();
     IndexSearcher searcher = newSearcher(reader);
     Query query = new FilteredQuery(new TermQuery(new Term("field", "0")), new Filter() {
diff --git lucene/core/src/test/org/apache/lucene/search/TestFilteredSearch.java lucene/core/src/test/org/apache/lucene/search/TestFilteredSearch.java
index c758785..4e4554a 100644
--- lucene/core/src/test/org/apache/lucene/search/TestFilteredSearch.java
+++ lucene/core/src/test/org/apache/lucene/search/TestFilteredSearch.java
@@ -66,7 +66,7 @@ public class TestFilteredSearch extends LuceneTestCase {
     if (fullMerge) {
       writer.forceMerge(1);
     }
-    writer.shutdown();
+    writer.close();
 
     BooleanQuery booleanQuery = new BooleanQuery();
     booleanQuery.add(new TermQuery(new Term(FIELD, "36")), BooleanClause.Occur.SHOULD);
diff --git lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery.java lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery.java
index bfb09d7..8284410 100644
--- lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery.java
+++ lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery.java
@@ -45,7 +45,7 @@ public class TestFuzzyQuery extends LuceneTestCase {
     addDoc("abc", writer);
     IndexReader reader = writer.getReader();
     IndexSearcher searcher = newSearcher(reader);
-    writer.shutdown();
+    writer.close();
 
     FuzzyQuery query = new FuzzyQuery(new Term("field", "abc"), FuzzyQuery.defaultMaxEdits, 1);
     ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;
@@ -67,7 +67,7 @@ public class TestFuzzyQuery extends LuceneTestCase {
 
     IndexReader reader = writer.getReader();
     IndexSearcher searcher = newSearcher(reader);
-    writer.shutdown();
+    writer.close();
 
     FuzzyQuery query = new FuzzyQuery(new Term("field", "aaaaa"), FuzzyQuery.defaultMaxEdits, 0);   
     ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;
@@ -230,7 +230,7 @@ public class TestFuzzyQuery extends LuceneTestCase {
 
     IndexReader reader = writer.getReader();
     IndexSearcher searcher = newSearcher(reader);
-    writer.shutdown();
+    writer.close();
 
     FuzzyQuery query = new FuzzyQuery(new Term("field", "WEBER"), 2, 1);
     //query.setRewriteMethod(FuzzyQuery.SCORING_BOOLEAN_QUERY_REWRITE);
@@ -276,8 +276,8 @@ public class TestFuzzyQuery extends LuceneTestCase {
     mr.close();
     ir1.close();
     ir2.close();
-    writer.shutdown();
-    writer2.shutdown();
+    writer.close();
+    writer2.close();
     directory.close();
     directory2.close(); 
   }
@@ -292,7 +292,7 @@ public class TestFuzzyQuery extends LuceneTestCase {
 
     IndexReader reader = writer.getReader();
     IndexSearcher searcher = newSearcher(reader);
-    writer.shutdown();
+    writer.close();
     
     FuzzyQuery query = new FuzzyQuery(new Term("field", "lucene"));
     query.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(50));
@@ -330,7 +330,7 @@ public class TestFuzzyQuery extends LuceneTestCase {
     addDoc("Brute willis", w);
     addDoc("B. willis", w);
     IndexReader r = w.getReader();
-    w.shutdown();
+    w.close();
 
     Query q = new FuzzyQuery(new Term("field", "giga"), 0);
 
@@ -351,7 +351,7 @@ public class TestFuzzyQuery extends LuceneTestCase {
     addDoc("working", w);
     IndexReader reader = w.getReader();
     IndexSearcher searcher = newSearcher(reader);
-    w.shutdown();
+    w.close();
     
     FuzzyQuery q = new FuzzyQuery(new Term("field", "fouba"), 2);
     ScoreDoc[] hits = searcher.search(q, 10).scoreDocs;
diff --git lucene/core/src/test/org/apache/lucene/search/TestIndexSearcher.java lucene/core/src/test/org/apache/lucene/search/TestIndexSearcher.java
index f7b268e..a16e545 100644
--- lucene/core/src/test/org/apache/lucene/search/TestIndexSearcher.java
+++ lucene/core/src/test/org/apache/lucene/search/TestIndexSearcher.java
@@ -51,7 +51,7 @@ public class TestIndexSearcher extends LuceneTestCase {
       iw.addDocument(doc);
     }
     reader = iw.getReader();
-    iw.shutdown();
+    iw.close();
   }
   
   @Override
@@ -126,7 +126,7 @@ public class TestIndexSearcher extends LuceneTestCase {
     RandomIndexWriter w = new RandomIndexWriter(random(), dir);
     w.addDocument(new Document());
     IndexReader r = w.getReader();
-    w.shutdown();
+    w.close();
     
     IndexSearcher s = new IndexSearcher(r);
     try {
diff --git lucene/core/src/test/org/apache/lucene/search/TestLiveFieldValues.java lucene/core/src/test/org/apache/lucene/search/TestLiveFieldValues.java
index b4d1201..ee8aefc 100644
--- lucene/core/src/test/org/apache/lucene/search/TestLiveFieldValues.java
+++ lucene/core/src/test/org/apache/lucene/search/TestLiveFieldValues.java
@@ -170,7 +170,7 @@ public class TestLiveFieldValues extends LuceneTestCase {
 
     rt.close();
     mgr.close();
-    w.shutdown();
+    w.close();
     dir.close();
   }
 }
diff --git lucene/core/src/test/org/apache/lucene/search/TestMatchAllDocsQuery.java lucene/core/src/test/org/apache/lucene/search/TestMatchAllDocsQuery.java
index 7fac7bc..f41497e 100644
--- lucene/core/src/test/org/apache/lucene/search/TestMatchAllDocsQuery.java
+++ lucene/core/src/test/org/apache/lucene/search/TestMatchAllDocsQuery.java
@@ -82,7 +82,7 @@ public class TestMatchAllDocsQuery extends LuceneTestCase {
     hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;
     assertEquals(2, hits.length);
 
-    iw.shutdown();
+    iw.close();
     ir.close();
     dir.close();
   }
diff --git lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.java lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.java
index 33d1a57..16aae88 100644
--- lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.java
+++ lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.java
@@ -82,7 +82,7 @@ public class TestMinShouldMatch2 extends LuceneTestCase {
       iw.addDocument(doc);
     }
     iw.forceMerge(1);
-    iw.shutdown();
+    iw.close();
     r = DirectoryReader.open(dir);
     reader = getOnlySegmentReader(r);
     searcher = new IndexSearcher(reader);
diff --git lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery.java lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery.java
index 5feccd7..dc5a249 100644
--- lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery.java
+++ lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery.java
@@ -24,7 +24,6 @@ import org.apache.lucene.analysis.CannedTokenStream;
 import org.apache.lucene.analysis.Token;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
-import org.apache.lucene.document.StringField;
 import org.apache.lucene.document.TextField;
 import org.apache.lucene.index.DirectoryReader;
 import org.apache.lucene.index.IndexReader;
@@ -34,7 +33,6 @@ import org.apache.lucene.index.MultiFields;
 import org.apache.lucene.index.RandomIndexWriter;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.index.TermsEnum;
-import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.similarities.DefaultSimilarity;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.RAMDirectory;
@@ -135,7 +133,7 @@ public class TestMultiPhraseQuery extends LuceneTestCase {
       // okay, all terms must belong to the same field
     }
     
-    writer.shutdown();
+    writer.close();
     reader.close();
     indexStore.close();
   }
@@ -147,7 +145,7 @@ public class TestMultiPhraseQuery extends LuceneTestCase {
     add("blueberry chocolate pie", writer);
     add("blueberry chocolate tart", writer);
     IndexReader r = writer.getReader();
-    writer.shutdown();
+    writer.close();
 
     IndexSearcher searcher = newSearcher(r);
     MultiPhraseQuery q = new MultiPhraseQuery();
@@ -165,7 +163,7 @@ public class TestMultiPhraseQuery extends LuceneTestCase {
     RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);
     add("a b c d e f g h i k", writer);
     IndexReader r = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(r);
     
@@ -185,7 +183,7 @@ public class TestMultiPhraseQuery extends LuceneTestCase {
     RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);
     add("a b c d e f g h i k", writer);
     IndexReader r = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(r);
     MultiPhraseQuery q = new MultiPhraseQuery();
@@ -233,7 +231,7 @@ public class TestMultiPhraseQuery extends LuceneTestCase {
     // just make sure no exc:
     searcher.explain(q, 0);
     
-    writer.shutdown();
+    writer.close();
     reader.close();
     indexStore.close();
   }
@@ -260,7 +258,7 @@ public class TestMultiPhraseQuery extends LuceneTestCase {
     // exception will be thrown here without fix for #35626:
     ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;
     assertEquals("Wrong number of hits", 0, hits.length);
-    writer.shutdown();
+    writer.close();
     reader.close();
     indexStore.close();
   }
@@ -282,7 +280,7 @@ public class TestMultiPhraseQuery extends LuceneTestCase {
     // just make sure no exc:
     searcher.explain(q, 0);
     
-    writer.shutdown();
+    writer.close();
     reader.close();
     indexStore.close();
   }
@@ -349,7 +347,7 @@ public class TestMultiPhraseQuery extends LuceneTestCase {
     Weight weight = query.createWeight(searcher);
     assertEquals(10f * 10f, weight.getValueForNormalization(), 0.001f);
 
-    writer.shutdown();
+    writer.close();
     reader.close();
     indexStore.close();
   }
@@ -375,7 +373,7 @@ public class TestMultiPhraseQuery extends LuceneTestCase {
     doc.add(new TextField("field", new CannedTokenStream(tokens)));
     writer.addDocument(doc);
     IndexReader r = writer.getReader();
-    writer.shutdown();
+    writer.close();
     IndexSearcher s = newSearcher(r);
     MultiPhraseQuery mpq = new MultiPhraseQuery();
     //mpq.setSlop(1);
@@ -473,7 +471,7 @@ public class TestMultiPhraseQuery extends LuceneTestCase {
     doc.add(new TextField("field", new CannedTokenStream(INCR_0_DOC_TOKENS)));
     writer.addDocument(doc);
     IndexReader r = DirectoryReader.open(writer,false);
-    writer.shutdown();
+    writer.close();
     IndexSearcher s = newSearcher(r);
     
     if (VERBOSE) {
diff --git lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore.java lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore.java
index 1ebec18..3b3786c 100644
--- lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore.java
+++ lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore.java
@@ -73,7 +73,7 @@ public class TestMultiTermConstantScore extends BaseTestRangeFilter {
     }
 
     reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
   }
 
   @AfterClass
diff --git lucene/core/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites.java lucene/core/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites.java
index 0b00384..dc2754e 100644
--- lucene/core/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites.java
+++ lucene/core/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites.java
@@ -58,7 +58,7 @@ public class TestMultiTermQueryRewrites extends LuceneTestCase {
       ((i % 2 == 0) ? swriter1 : swriter2).addDocument(doc);
     }
     writer.forceMerge(1); swriter1.forceMerge(1); swriter2.forceMerge(1);
-    writer.shutdown(); swriter1.shutdown(); swriter2.shutdown();
+    writer.close(); swriter1.close(); swriter2.close();
     
     reader = DirectoryReader.open(dir);
     searcher = newSearcher(reader);
diff --git lucene/core/src/test/org/apache/lucene/search/TestMultiThreadTermVectors.java lucene/core/src/test/org/apache/lucene/search/TestMultiThreadTermVectors.java
index c24d86c..ed052d9 100644
--- lucene/core/src/test/org/apache/lucene/search/TestMultiThreadTermVectors.java
+++ lucene/core/src/test/org/apache/lucene/search/TestMultiThreadTermVectors.java
@@ -52,7 +52,7 @@ public class TestMultiThreadTermVectors extends LuceneTestCase {
       doc.add(fld);
       writer.addDocument(doc);
     }
-    writer.shutdown();
+    writer.close();
     
   }
   
diff --git lucene/core/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery.java lucene/core/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery.java
index 3f9db8e..ffd231a 100644
--- lucene/core/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery.java
+++ lucene/core/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery.java
@@ -30,7 +30,6 @@ import org.apache.lucene.index.RandomIndexWriter;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.TestUtil;
-import org.apache.lucene.util.TestUtil;
 
 public class TestMultiValuedNumericRangeQuery extends LuceneTestCase {
 
@@ -58,7 +57,7 @@ public class TestMultiValuedNumericRangeQuery extends LuceneTestCase {
       writer.addDocument(doc);
     }
     IndexReader reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher=newSearcher(reader);
     num = atLeast(50);
diff --git lucene/core/src/test/org/apache/lucene/search/TestNGramPhraseQuery.java lucene/core/src/test/org/apache/lucene/search/TestNGramPhraseQuery.java
index 73728ab..648b2a8 100644
--- lucene/core/src/test/org/apache/lucene/search/TestNGramPhraseQuery.java
+++ lucene/core/src/test/org/apache/lucene/search/TestNGramPhraseQuery.java
@@ -35,7 +35,7 @@ public class TestNGramPhraseQuery extends LuceneTestCase {
   public static void beforeClass() throws Exception {
     directory = newDirectory();
     RandomIndexWriter writer = new RandomIndexWriter(random(), directory);
-    writer.shutdown();
+    writer.close();
     reader = DirectoryReader.open(directory);
   }
 
diff --git lucene/core/src/test/org/apache/lucene/search/TestNot.java lucene/core/src/test/org/apache/lucene/search/TestNot.java
index 74f4c9c..a7591b3 100644
--- lucene/core/src/test/org/apache/lucene/search/TestNot.java
+++ lucene/core/src/test/org/apache/lucene/search/TestNot.java
@@ -50,7 +50,7 @@ public class TestNot extends LuceneTestCase {
 
     ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;
     assertEquals(0, hits.length);
-    writer.shutdown();
+    writer.close();
     reader.close();
     store.close();
   }
diff --git lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32.java lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32.java
index 5bea673..70a1f1b 100644
--- lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32.java
+++ lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32.java
@@ -123,7 +123,7 @@ public class TestNumericRangeQuery32 extends LuceneTestCase {
   
     reader = writer.getReader();
     searcher=newSearcher(reader);
-    writer.shutdown();
+    writer.close();
   }
   
   @AfterClass
@@ -322,7 +322,7 @@ public class TestNumericRangeQuery32 extends LuceneTestCase {
       writer.addDocument(doc);
     }
     
-    writer.shutdown();
+    writer.close();
     
     IndexReader r = DirectoryReader.open(dir);
     IndexSearcher s = newSearcher(r);
diff --git lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64.java lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64.java
index 7ffd89d..f8cf71c 100644
--- lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64.java
+++ lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64.java
@@ -132,7 +132,7 @@ public class TestNumericRangeQuery64 extends LuceneTestCase {
     }
     reader = writer.getReader();
     searcher=newSearcher(reader);
-    writer.shutdown();
+    writer.close();
   }
   
   @AfterClass
@@ -349,7 +349,7 @@ public class TestNumericRangeQuery64 extends LuceneTestCase {
       writer.addDocument(doc);
     }
     
-    writer.shutdown();
+    writer.close();
     
     IndexReader r = DirectoryReader.open(dir);
     IndexSearcher s = newSearcher(r);
diff --git lucene/core/src/test/org/apache/lucene/search/TestPhrasePrefixQuery.java lucene/core/src/test/org/apache/lucene/search/TestPhrasePrefixQuery.java
index 7f53253..26cf76a 100644
--- lucene/core/src/test/org/apache/lucene/search/TestPhrasePrefixQuery.java
+++ lucene/core/src/test/org/apache/lucene/search/TestPhrasePrefixQuery.java
@@ -58,7 +58,7 @@ public class TestPhrasePrefixQuery extends LuceneTestCase {
     writer.addDocument(doc4);
     writer.addDocument(doc5);
     IndexReader reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(reader);
     
diff --git lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery.java lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery.java
index 4d2f009..68e958e 100644
--- lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery.java
+++ lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery.java
@@ -79,7 +79,7 @@ public class TestPhraseQuery extends LuceneTestCase {
     writer.addDocument(doc);
 
     reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
 
     searcher = newSearcher(reader);
   }
@@ -220,7 +220,7 @@ public class TestPhraseQuery extends LuceneTestCase {
     doc.add(newTextField("field", "the stop words are here", Field.Store.YES));
     writer.addDocument(doc);
     IndexReader reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
 
     IndexSearcher searcher = newSearcher(reader);
 
@@ -250,7 +250,7 @@ public class TestPhraseQuery extends LuceneTestCase {
     writer.addDocument(doc);
     
     IndexReader reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(reader);
     
@@ -288,7 +288,7 @@ public class TestPhraseQuery extends LuceneTestCase {
     writer.addDocument(doc);
 
     reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     searcher = newSearcher(reader);
     
@@ -341,7 +341,7 @@ public class TestPhraseQuery extends LuceneTestCase {
     writer.addDocument(doc3);
     
     IndexReader reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
 
     IndexSearcher searcher = newSearcher(reader);
     searcher.setSimilarity(new DefaultSimilarity());
@@ -644,7 +644,7 @@ public class TestPhraseQuery extends LuceneTestCase {
 
     IndexReader reader = w.getReader();
     IndexSearcher s = newSearcher(reader);
-    w.shutdown();
+    w.close();
 
     // now search
     int num = atLeast(10);
diff --git lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement.java lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement.java
index 9e67c04..bd512e8 100644
--- lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement.java
+++ lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement.java
@@ -18,7 +18,6 @@ package org.apache.lucene.search;
  */
 
 import java.io.IOException;
-import java.io.Reader;
 import java.io.StringReader;
 import java.nio.charset.StandardCharsets;
 import java.util.Collection;
@@ -96,7 +95,7 @@ public class TestPositionIncrement extends LuceneTestCase {
     d.add(newTextField("field", "bogus", Field.Store.YES));
     writer.addDocument(d);
     IndexReader reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
 
     IndexSearcher searcher = newSearcher(reader);
@@ -283,7 +282,7 @@ public class TestPositionIncrement extends LuceneTestCase {
     }
     assertEquals(5, count);
     assertTrue(sawZero);
-    writer.shutdown();
+    writer.close();
     is.getIndexReader().close();
     dir.close();
   }
diff --git lucene/core/src/test/org/apache/lucene/search/TestPositiveScoresOnlyCollector.java lucene/core/src/test/org/apache/lucene/search/TestPositiveScoresOnlyCollector.java
index c856c69..4a51978 100644
--- lucene/core/src/test/org/apache/lucene/search/TestPositiveScoresOnlyCollector.java
+++ lucene/core/src/test/org/apache/lucene/search/TestPositiveScoresOnlyCollector.java
@@ -82,7 +82,7 @@ public class TestPositiveScoresOnlyCollector extends LuceneTestCase {
     writer.addDocument(new Document());
     writer.commit();
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
     IndexSearcher searcher = newSearcher(ir);
     Weight fake = new TermQuery(new Term("fake", "weight")).createWeight(searcher);
     Scorer s = new SimpleScorer(fake);
diff --git lucene/core/src/test/org/apache/lucene/search/TestPrefixFilter.java lucene/core/src/test/org/apache/lucene/search/TestPrefixFilter.java
index d4afc4c..b41b6dd 100644
--- lucene/core/src/test/org/apache/lucene/search/TestPrefixFilter.java
+++ lucene/core/src/test/org/apache/lucene/search/TestPrefixFilter.java
@@ -100,7 +100,7 @@ public class TestPrefixFilter extends LuceneTestCase {
     hits = searcher.search(query, null, 1000).scoreDocs;
     assertEquals(0, hits.length);
     
-    writer.shutdown();
+    writer.close();
     reader.close();
     directory.close();
   }
diff --git lucene/core/src/test/org/apache/lucene/search/TestPrefixInBooleanQuery.java lucene/core/src/test/org/apache/lucene/search/TestPrefixInBooleanQuery.java
index c1e3f5a..b8a0e11 100644
--- lucene/core/src/test/org/apache/lucene/search/TestPrefixInBooleanQuery.java
+++ lucene/core/src/test/org/apache/lucene/search/TestPrefixInBooleanQuery.java
@@ -70,7 +70,7 @@ public class TestPrefixInBooleanQuery extends LuceneTestCase {
     
     reader = writer.getReader();
     searcher = newSearcher(reader);
-    writer.shutdown();
+    writer.close();
   }
   
   @AfterClass
diff --git lucene/core/src/test/org/apache/lucene/search/TestPrefixQuery.java lucene/core/src/test/org/apache/lucene/search/TestPrefixQuery.java
index d5212db..06f0595 100644
--- lucene/core/src/test/org/apache/lucene/search/TestPrefixQuery.java
+++ lucene/core/src/test/org/apache/lucene/search/TestPrefixQuery.java
@@ -60,7 +60,7 @@ public class TestPrefixQuery extends LuceneTestCase {
     assertFalse(query.getTermsEnum(terms) instanceof PrefixTermsEnum);
     hits = searcher.search(query, null, 1000).scoreDocs;
     assertEquals("everything", 3, hits.length);
-    writer.shutdown();
+    writer.close();
     reader.close();
     directory.close();
   }
diff --git lucene/core/src/test/org/apache/lucene/search/TestPrefixRandom.java lucene/core/src/test/org/apache/lucene/search/TestPrefixRandom.java
index 1fc52c0..3675716 100644
--- lucene/core/src/test/org/apache/lucene/search/TestPrefixRandom.java
+++ lucene/core/src/test/org/apache/lucene/search/TestPrefixRandom.java
@@ -35,7 +35,6 @@ import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.StringHelper;
 import org.apache.lucene.util.TestUtil;
-import org.apache.lucene.util.TestUtil;
 
 /**
  * Create an index with random unicode terms
@@ -65,7 +64,7 @@ public class TestPrefixRandom extends LuceneTestCase {
     }
     reader = writer.getReader();
     searcher = newSearcher(reader);
-    writer.shutdown();
+    writer.close();
   }
 
   @Override
diff --git lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.java lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.java
index 28f78b0..63b3075 100644
--- lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.java
+++ lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.java
@@ -64,7 +64,7 @@ public class TestQueryRescorer extends LuceneTestCase {
     doc.add(newTextField("field", "wizard oz the the the the the the", Field.Store.NO));
     w.addDocument(doc);
     IndexReader r = w.getReader();
-    w.shutdown();
+    w.close();
 
     // Do ordinary BooleanQuery:
     BooleanQuery bq = new BooleanQuery();
@@ -122,7 +122,7 @@ public class TestQueryRescorer extends LuceneTestCase {
     doc.add(newTextField("field", "wizard oz the the the the the the", Field.Store.NO));
     w.addDocument(doc);
     IndexReader r = w.getReader();
-    w.shutdown();
+    w.close();
 
     // Do ordinary BooleanQuery:
     BooleanQuery bq = new BooleanQuery();
@@ -161,7 +161,7 @@ public class TestQueryRescorer extends LuceneTestCase {
     doc.add(newTextField("field", "wizard oz the the the the the the", Field.Store.NO));
     w.addDocument(doc);
     IndexReader r = w.getReader();
-    w.shutdown();
+    w.close();
 
     // Do ordinary BooleanQuery:
     BooleanQuery bq = new BooleanQuery();
@@ -215,7 +215,7 @@ public class TestQueryRescorer extends LuceneTestCase {
     doc.add(newTextField("field", "wizard oz the the the the the the", Field.Store.NO));
     w.addDocument(doc);
     IndexReader r = w.getReader();
-    w.shutdown();
+    w.close();
 
     // Do ordinary BooleanQuery:
     BooleanQuery bq = new BooleanQuery();
@@ -293,7 +293,7 @@ public class TestQueryRescorer extends LuceneTestCase {
     doc.add(newTextField("field", "wizard oz the the the the the the", Field.Store.NO));
     w.addDocument(doc);
     IndexReader r = w.getReader();
-    w.shutdown();
+    w.close();
 
     // Do ordinary BooleanQuery:
     BooleanQuery bq = new BooleanQuery();
@@ -355,7 +355,7 @@ public class TestQueryRescorer extends LuceneTestCase {
       w.addDocument(doc);
     }
     final IndexReader r = w.getReader();
-    w.shutdown();
+    w.close();
 
     IndexSearcher s = newSearcher(r);
     int numHits = TestUtil.nextInt(random(), 1, numDocs);
diff --git lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter.java lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter.java
index a9a5806..d727aec 100644
--- lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter.java
+++ lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter.java
@@ -38,7 +38,7 @@ public class TestQueryWrapperFilter extends LuceneTestCase {
     doc.add(newTextField("field", "value", Field.Store.NO));
     writer.addDocument(doc);
     IndexReader reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
 
     TermQuery termQuery = new TermQuery(new Term("field", "value"));
 
@@ -112,7 +112,7 @@ public class TestQueryWrapperFilter extends LuceneTestCase {
     }
 
     final IndexReader r = w.getReader();
-    w.shutdown();
+    w.close();
     final TopDocs hits = newSearcher(r).search(new MatchAllDocsQuery(),
                                                      new QueryWrapperFilter(new TermQuery(new Term("field", "a"))),
                                                      numDocs);
@@ -134,7 +134,7 @@ public class TestQueryWrapperFilter extends LuceneTestCase {
     }
     
     IndexReader reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(reader);
     
diff --git lucene/core/src/test/org/apache/lucene/search/TestRegexpQuery.java lucene/core/src/test/org/apache/lucene/search/TestRegexpQuery.java
index 6ed3140..e51d162 100644
--- lucene/core/src/test/org/apache/lucene/search/TestRegexpQuery.java
+++ lucene/core/src/test/org/apache/lucene/search/TestRegexpQuery.java
@@ -51,7 +51,7 @@ public class TestRegexpQuery extends LuceneTestCase {
     doc.add(newTextField(FN, "the quick brown fox jumps over the lazy ??? dog 493432 49344", Field.Store.NO));
     writer.addDocument(doc);
     reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
     searcher = newSearcher(reader);
   }
   
diff --git lucene/core/src/test/org/apache/lucene/search/TestRegexpRandom.java lucene/core/src/test/org/apache/lucene/search/TestRegexpRandom.java
index 85623e3..7e78dd6 100644
--- lucene/core/src/test/org/apache/lucene/search/TestRegexpRandom.java
+++ lucene/core/src/test/org/apache/lucene/search/TestRegexpRandom.java
@@ -65,7 +65,7 @@ public class TestRegexpRandom extends LuceneTestCase {
     }
     
     reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
     searcher = newSearcher(reader);
   }
   
diff --git lucene/core/src/test/org/apache/lucene/search/TestRegexpRandom2.java lucene/core/src/test/org/apache/lucene/search/TestRegexpRandom2.java
index c0fc842..55ce34a 100644
--- lucene/core/src/test/org/apache/lucene/search/TestRegexpRandom2.java
+++ lucene/core/src/test/org/apache/lucene/search/TestRegexpRandom2.java
@@ -91,7 +91,7 @@ public class TestRegexpRandom2 extends LuceneTestCase {
     reader = writer.getReader();
     searcher1 = newSearcher(reader);
     searcher2 = newSearcher(reader);
-    writer.shutdown();
+    writer.close();
   }
 
   @Override
diff --git lucene/core/src/test/org/apache/lucene/search/TestSameScoresWithThreads.java lucene/core/src/test/org/apache/lucene/search/TestSameScoresWithThreads.java
index f643f99..3abd501 100644
--- lucene/core/src/test/org/apache/lucene/search/TestSameScoresWithThreads.java
+++ lucene/core/src/test/org/apache/lucene/search/TestSameScoresWithThreads.java
@@ -58,7 +58,7 @@ public class TestSameScoresWithThreads extends LuceneTestCase {
     }
     IndexReader r = w.getReader();
     //System.out.println("numDocs=" + r.numDocs());
-    w.shutdown();
+    w.close();
 
     final IndexSearcher s = newSearcher(r);
     Terms terms = MultiFields.getFields(r).terms("body");
diff --git lucene/core/src/test/org/apache/lucene/search/TestScoreCachingWrappingScorer.java lucene/core/src/test/org/apache/lucene/search/TestScoreCachingWrappingScorer.java
index c79c843..b082da9 100644
--- lucene/core/src/test/org/apache/lucene/search/TestScoreCachingWrappingScorer.java
+++ lucene/core/src/test/org/apache/lucene/search/TestScoreCachingWrappingScorer.java
@@ -19,7 +19,6 @@ package org.apache.lucene.search;
 
 import java.io.IOException;
 
-import org.apache.lucene.index.AtomicReaderContext;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.RandomIndexWriter;
 import org.apache.lucene.index.Term;
@@ -107,7 +106,7 @@ public class TestScoreCachingWrappingScorer extends LuceneTestCase {
     RandomIndexWriter writer = new RandomIndexWriter(random(), directory);
     writer.commit();
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
     IndexSearcher searcher = newSearcher(ir);
     Weight fake = new TermQuery(new Term("fake", "weight")).createWeight(searcher);
     Scorer s = new SimpleScorer(fake);
diff --git lucene/core/src/test/org/apache/lucene/search/TestScorerPerf.java lucene/core/src/test/org/apache/lucene/search/TestScorerPerf.java
index f0247de..8629dc1 100644
--- lucene/core/src/test/org/apache/lucene/search/TestScorerPerf.java
+++ lucene/core/src/test/org/apache/lucene/search/TestScorerPerf.java
@@ -51,7 +51,7 @@ public class TestScorerPerf extends LuceneTestCase {
     d = newDirectory();
     IndexWriter iw = new IndexWriter(d, newIndexWriterConfig(new MockAnalyzer(random())));
     iw.addDocument(new Document());
-    iw.shutdown();
+    iw.close();
     r = DirectoryReader.open(d);
     s = newSearcher(r);
   }
@@ -77,7 +77,7 @@ public class TestScorerPerf extends LuceneTestCase {
       iw.addDocument(d);
     }
     iw.forceMerge(1);
-    iw.shutdown();
+    iw.close();
   }
 
 
diff --git lucene/core/src/test/org/apache/lucene/search/TestSearchAfter.java lucene/core/src/test/org/apache/lucene/search/TestSearchAfter.java
index 8be7f19..fda7b64 100644
--- lucene/core/src/test/org/apache/lucene/search/TestSearchAfter.java
+++ lucene/core/src/test/org/apache/lucene/search/TestSearchAfter.java
@@ -179,7 +179,7 @@ public class TestSearchAfter extends LuceneTestCase {
       }
     }
     reader = iw.getReader();
-    iw.shutdown();
+    iw.close();
     searcher = newSearcher(reader);
     if (VERBOSE) {
       System.out.println("  searcher=" + searcher);
diff --git lucene/core/src/test/org/apache/lucene/search/TestSearchWithThreads.java lucene/core/src/test/org/apache/lucene/search/TestSearchWithThreads.java
index 0d71abf..cd5ac03 100644
--- lucene/core/src/test/org/apache/lucene/search/TestSearchWithThreads.java
+++ lucene/core/src/test/org/apache/lucene/search/TestSearchWithThreads.java
@@ -65,7 +65,7 @@ public class TestSearchWithThreads extends LuceneTestCase {
       sb.delete(0, sb.length());
     }
     final IndexReader r = w.getReader();
-    w.shutdown();
+    w.close();
 
     final long endTime = System.currentTimeMillis();
     if (VERBOSE) System.out.println("BUILD took " + (endTime-startTime));
diff --git lucene/core/src/test/org/apache/lucene/search/TestSearcherManager.java lucene/core/src/test/org/apache/lucene/search/TestSearcherManager.java
index 12b54a9..58d49d2 100644
--- lucene/core/src/test/org/apache/lucene/search/TestSearcherManager.java
+++ lucene/core/src/test/org/apache/lucene/search/TestSearcherManager.java
@@ -285,7 +285,7 @@ public class TestSearcherManager extends ThreadedIndexingAndSearchingTestCase {
     assertFalse(success.get());
     assertTrue(triedReopen.get());
     assertNull("" + exc[0], exc[0]);
-    writer.shutdown();
+    writer.close();
     dir.close();
     if (es != null) {
       es.shutdown();
@@ -296,7 +296,7 @@ public class TestSearcherManager extends ThreadedIndexingAndSearchingTestCase {
   public void testCloseTwice() throws Exception {
     // test that we can close SM twice (per Closeable's contract).
     Directory dir = newDirectory();
-    new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, null)).shutdown();
+    new IndexWriter(dir, new IndexWriterConfig(null)).close();
     SearcherManager sm = new SearcherManager(dir, null);
     sm.close();
     sm.close();
@@ -329,14 +329,14 @@ public class TestSearcherManager extends ThreadedIndexingAndSearchingTestCase {
     }
 
     // sm.close(); -- already closed
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
 
 
   public void testEnsureOpen() throws Exception {
     Directory dir = newDirectory();
-    new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, null)).shutdown();
+    new IndexWriter(dir, new IndexWriterConfig(null)).close();
     SearcherManager sm = new SearcherManager(dir, null);
     IndexSearcher s = sm.acquire();
     sm.close();
@@ -362,7 +362,7 @@ public class TestSearcherManager extends ThreadedIndexingAndSearchingTestCase {
 
   public void testListenerCalled() throws Exception {
     Directory dir = newDirectory();
-    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, null));
+    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(null));
     final AtomicBoolean afterRefreshCalled = new AtomicBoolean(false);
     SearcherManager sm = new SearcherManager(iw, false, new SearcherFactory());
     sm.addListener(new ReferenceManager.RefreshListener() {
@@ -382,7 +382,7 @@ public class TestSearcherManager extends ThreadedIndexingAndSearchingTestCase {
     sm.maybeRefreshBlocking();
     assertTrue(afterRefreshCalled.get());
     sm.close();
-    iw.shutdown();
+    iw.close();
     dir.close();
   }
 
@@ -411,7 +411,7 @@ public class TestSearcherManager extends ThreadedIndexingAndSearchingTestCase {
     } catch (IllegalStateException ise) {
       // expected
     }
-    w.shutdown();
+    w.close();
     other.close();
     dir.close();
   }
@@ -421,7 +421,7 @@ public class TestSearcherManager extends ThreadedIndexingAndSearchingTestCase {
     // threads cannot obtain it.
     final Directory dir = newDirectory();
     final RandomIndexWriter w = new RandomIndexWriter(random(), dir);
-    w.shutdown();
+    w.close();
     
     final SearcherManager sm = new SearcherManager(dir, null);
     
diff --git lucene/core/src/test/org/apache/lucene/search/TestSimilarity.java lucene/core/src/test/org/apache/lucene/search/TestSimilarity.java
index 8df8b14..a884585 100644
--- lucene/core/src/test/org/apache/lucene/search/TestSimilarity.java
+++ lucene/core/src/test/org/apache/lucene/search/TestSimilarity.java
@@ -67,7 +67,7 @@ public class TestSimilarity extends LuceneTestCase {
     writer.addDocument(d1);
     writer.addDocument(d2);
     IndexReader reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
 
     IndexSearcher searcher = newSearcher(reader);
     searcher.setSimilarity(new SimpleSimilarity());
diff --git lucene/core/src/test/org/apache/lucene/search/TestSimilarityProvider.java lucene/core/src/test/org/apache/lucene/search/TestSimilarityProvider.java
index 8d3f202..f30f017 100644
--- lucene/core/src/test/org/apache/lucene/search/TestSimilarityProvider.java
+++ lucene/core/src/test/org/apache/lucene/search/TestSimilarityProvider.java
@@ -60,7 +60,7 @@ public class TestSimilarityProvider extends LuceneTestCase {
     field2.setStringValue("jumps over lazy brown dog");
     iw.addDocument(doc);
     reader = iw.getReader();
-    iw.shutdown();
+    iw.close();
     searcher = newSearcher(reader);
     searcher.setSimilarity(sim);
   }
diff --git lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery.java lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery.java
index 951d26c..75200e3 100644
--- lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery.java
+++ lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery.java
@@ -26,7 +26,6 @@ import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.FieldType;
 import org.apache.lucene.document.TextField;
-import org.apache.lucene.index.AtomicReaderContext;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.RandomIndexWriter;
 import org.apache.lucene.index.Term;
@@ -148,7 +147,7 @@ public class TestSloppyPhraseQuery extends LuceneTestCase {
     assertEquals("slop: "+slop+"  query: "+query+"  doc: "+doc+"  Wrong number of hits", expectedNumResults, c.totalHits);
 
     //QueryUtils.check(query,searcher);
-    writer.shutdown();
+    writer.close();
     reader.close();
     ramDir.close();
 
@@ -239,7 +238,7 @@ public class TestSloppyPhraseQuery extends LuceneTestCase {
     f.setStringValue("drug druggy drug druggy drug");
     iw.addDocument(doc);
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     IndexSearcher is = newSearcher(ir);
     
     PhraseQuery pq = new PhraseQuery();
@@ -266,7 +265,7 @@ public class TestSloppyPhraseQuery extends LuceneTestCase {
     doc.add(newField("lyrics", document, new FieldType(TextField.TYPE_NOT_STORED)));
     iw.addDocument(doc);
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     
     IndexSearcher is = newSearcher(ir);
     PhraseQuery pq = new PhraseQuery();
@@ -319,7 +318,7 @@ public class TestSloppyPhraseQuery extends LuceneTestCase {
      doc.add(newField("lyrics", document, new FieldType(TextField.TYPE_NOT_STORED)));
      iw.addDocument(doc);
      IndexReader ir = iw.getReader();
-     iw.shutdown();
+     iw.close();
         
      IndexSearcher is = newSearcher(ir);
      
diff --git lucene/core/src/test/org/apache/lucene/search/TestSort.java lucene/core/src/test/org/apache/lucene/search/TestSort.java
index aae7ea1..c6c13e1 100644
--- lucene/core/src/test/org/apache/lucene/search/TestSort.java
+++ lucene/core/src/test/org/apache/lucene/search/TestSort.java
@@ -64,7 +64,7 @@ public class TestSort extends LuceneTestCase {
     doc.add(newStringField("value", "bar", Field.Store.YES));
     writer.addDocument(doc);
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     Sort sort = new Sort(new SortField("value", SortField.Type.STRING));
@@ -92,7 +92,7 @@ public class TestSort extends LuceneTestCase {
     doc.add(newStringField("value", "foo", Field.Store.YES));
     writer.addDocument(doc);
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     Sort sort = new Sort(new SortField("value", SortField.Type.STRING, true));
@@ -120,7 +120,7 @@ public class TestSort extends LuceneTestCase {
     doc.add(newStringField("value", "bar", Field.Store.YES));
     writer.addDocument(doc);
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     Sort sort = new Sort(new SortField("value", SortField.Type.STRING_VAL));
@@ -148,7 +148,7 @@ public class TestSort extends LuceneTestCase {
     doc.add(newStringField("value", "foo", Field.Store.YES));
     writer.addDocument(doc);
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     Sort sort = new Sort(new SortField("value", SortField.Type.STRING_VAL, true));
@@ -176,7 +176,7 @@ public class TestSort extends LuceneTestCase {
     doc.add(newStringField("value", "bar", Field.Store.YES));
     writer.addDocument(doc);
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     Sort sort = new Sort(new SortField("value", SortField.Type.STRING_VAL));
@@ -204,7 +204,7 @@ public class TestSort extends LuceneTestCase {
     doc.add(newStringField("value", "foo", Field.Store.YES));
     writer.addDocument(doc);
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     Sort sort = new Sort(new SortField("value", SortField.Type.STRING_VAL, true));
@@ -236,7 +236,7 @@ public class TestSort extends LuceneTestCase {
     doc.add(newStringField("value", "4", Field.Store.YES));
     writer.addDocument(doc);
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     Sort sort = new Sort(new SortField("value", SortField.Type.INT));
@@ -269,7 +269,7 @@ public class TestSort extends LuceneTestCase {
     doc.add(newStringField("value", "4", Field.Store.YES));
     writer.addDocument(doc);
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     Sort sort = new Sort(new SortField("value", SortField.Type.INT, true));
@@ -300,7 +300,7 @@ public class TestSort extends LuceneTestCase {
     doc.add(newStringField("value", "4", Field.Store.YES));
     writer.addDocument(doc);
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     Sort sort = new Sort(new SortField("value", SortField.Type.INT));
@@ -331,7 +331,7 @@ public class TestSort extends LuceneTestCase {
     doc.add(newStringField("value", "4", Field.Store.YES));
     writer.addDocument(doc);
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     SortField sortField = new SortField("value", SortField.Type.INT);
@@ -366,7 +366,7 @@ public class TestSort extends LuceneTestCase {
     doc.add(newStringField("value", "4", Field.Store.YES));
     writer.addDocument(doc);
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     Sort sort = new Sort(new SortField("value", SortField.Type.LONG));
@@ -399,7 +399,7 @@ public class TestSort extends LuceneTestCase {
     doc.add(newStringField("value", "4", Field.Store.YES));
     writer.addDocument(doc);
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     Sort sort = new Sort(new SortField("value", SortField.Type.LONG, true));
@@ -430,7 +430,7 @@ public class TestSort extends LuceneTestCase {
     doc.add(newStringField("value", "4", Field.Store.YES));
     writer.addDocument(doc);
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     Sort sort = new Sort(new SortField("value", SortField.Type.LONG));
@@ -461,7 +461,7 @@ public class TestSort extends LuceneTestCase {
     doc.add(newStringField("value", "4", Field.Store.YES));
     writer.addDocument(doc);
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     SortField sortField = new SortField("value", SortField.Type.LONG);
@@ -496,7 +496,7 @@ public class TestSort extends LuceneTestCase {
     doc.add(newStringField("value", "4.2", Field.Store.YES));
     writer.addDocument(doc);
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     Sort sort = new Sort(new SortField("value", SortField.Type.FLOAT));
@@ -529,7 +529,7 @@ public class TestSort extends LuceneTestCase {
     doc.add(newStringField("value", "4.2", Field.Store.YES));
     writer.addDocument(doc);
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     Sort sort = new Sort(new SortField("value", SortField.Type.FLOAT, true));
@@ -560,7 +560,7 @@ public class TestSort extends LuceneTestCase {
     doc.add(newStringField("value", "4.2", Field.Store.YES));
     writer.addDocument(doc);
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     Sort sort = new Sort(new SortField("value", SortField.Type.FLOAT));
@@ -591,7 +591,7 @@ public class TestSort extends LuceneTestCase {
     doc.add(newStringField("value", "4.2", Field.Store.YES));
     writer.addDocument(doc);
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     SortField sortField = new SortField("value", SortField.Type.FLOAT);
@@ -630,7 +630,7 @@ public class TestSort extends LuceneTestCase {
     doc.add(newStringField("value", "4.2333333333332", Field.Store.YES));
     writer.addDocument(doc);
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     Sort sort = new Sort(new SortField("value", SortField.Type.DOUBLE));
@@ -661,7 +661,7 @@ public class TestSort extends LuceneTestCase {
     writer.addDocument(doc);
     doc = new Document();
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     Sort sort = new Sort(new SortField("value", SortField.Type.DOUBLE));
@@ -697,7 +697,7 @@ public class TestSort extends LuceneTestCase {
     doc.add(newStringField("value", "4.2333333333332", Field.Store.YES));
     writer.addDocument(doc);
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     Sort sort = new Sort(new SortField("value", SortField.Type.DOUBLE, true));
@@ -733,7 +733,7 @@ public class TestSort extends LuceneTestCase {
     doc.add(newStringField("value", "4.2333333333332", Field.Store.YES));
     writer.addDocument(doc);
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     Sort sort = new Sort(new SortField("value", SortField.Type.DOUBLE));
@@ -769,7 +769,7 @@ public class TestSort extends LuceneTestCase {
     doc.add(newStringField("value", "4.2333333333332", Field.Store.YES));
     writer.addDocument(doc);
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     SortField sortField = new SortField("value", SortField.Type.DOUBLE);
diff --git lucene/core/src/test/org/apache/lucene/search/TestSortRandom.java lucene/core/src/test/org/apache/lucene/search/TestSortRandom.java
index fa24f89..0f0fb9b 100644
--- lucene/core/src/test/org/apache/lucene/search/TestSortRandom.java
+++ lucene/core/src/test/org/apache/lucene/search/TestSortRandom.java
@@ -27,7 +27,6 @@ import java.util.Random;
 import java.util.Set;
 
 import org.apache.lucene.document.Document;
-import org.apache.lucene.document.Field;
 import org.apache.lucene.document.NumericDocValuesField;
 import org.apache.lucene.document.SortedDocValuesField;
 import org.apache.lucene.document.StoredField;
@@ -119,7 +118,7 @@ public class TestSortRandom extends LuceneTestCase {
     }
 
     final IndexReader r = writer.getReader();
-    writer.shutdown();
+    writer.close();
     if (VERBOSE) {
       System.out.println("  reader=" + r);
     }
diff --git lucene/core/src/test/org/apache/lucene/search/TestSortRescorer.java lucene/core/src/test/org/apache/lucene/search/TestSortRescorer.java
index 2b23c39..033b37f 100644
--- lucene/core/src/test/org/apache/lucene/search/TestSortRescorer.java
+++ lucene/core/src/test/org/apache/lucene/search/TestSortRescorer.java
@@ -63,7 +63,7 @@ public class TestSortRescorer extends LuceneTestCase {
     
     reader = iw.getReader();
     searcher = new IndexSearcher(reader);
-    iw.shutdown();
+    iw.close();
   }
   
   @Override
@@ -129,7 +129,7 @@ public class TestSortRescorer extends LuceneTestCase {
       w.addDocument(doc);
     }
     final IndexReader r = w.getReader();
-    w.shutdown();
+    w.close();
 
     IndexSearcher s = newSearcher(r);
     int numHits = TestUtil.nextInt(random(), 1, numDocs);
diff --git lucene/core/src/test/org/apache/lucene/search/TestSortedNumericSortField.java lucene/core/src/test/org/apache/lucene/search/TestSortedNumericSortField.java
index dac4200..5b025be 100644
--- lucene/core/src/test/org/apache/lucene/search/TestSortedNumericSortField.java
+++ lucene/core/src/test/org/apache/lucene/search/TestSortedNumericSortField.java
@@ -20,20 +20,11 @@ package org.apache.lucene.search;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.SortedNumericDocValuesField;
-import org.apache.lucene.document.SortedSetDocValuesField;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.MultiReader;
 import org.apache.lucene.index.RandomIndexWriter;
 import org.apache.lucene.index.Term;
-import org.apache.lucene.search.IndexSearcher;
-import org.apache.lucene.search.MatchAllDocsQuery;
-import org.apache.lucene.search.Query;
-import org.apache.lucene.search.Sort;
-import org.apache.lucene.search.SortField;
-import org.apache.lucene.search.TermQuery;
-import org.apache.lucene.search.TopDocs;
 import org.apache.lucene.store.Directory;
-import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.LuceneTestCase.SuppressCodecs;
 import org.apache.lucene.util.NumericUtils;
@@ -90,7 +81,7 @@ public class TestSortedNumericSortField extends LuceneTestCase {
     doc.add(newStringField("id", "1", Field.Store.YES));
     writer.addDocument(doc);
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     Sort sort = new Sort(new SortedNumericSortField("value", SortField.Type.INT));
@@ -119,7 +110,7 @@ public class TestSortedNumericSortField extends LuceneTestCase {
     writer.addDocument(doc);
 
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     Sort sort = new Sort(new SortedNumericSortField("value", SortField.Type.INT, true));
@@ -150,7 +141,7 @@ public class TestSortedNumericSortField extends LuceneTestCase {
     doc.add(newStringField("id", "3", Field.Store.YES));
     writer.addDocument(doc);
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     SortField sortField = new SortedNumericSortField("value", SortField.Type.INT);
@@ -185,7 +176,7 @@ public class TestSortedNumericSortField extends LuceneTestCase {
     doc.add(newStringField("id", "3", Field.Store.YES));
     writer.addDocument(doc);
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     SortField sortField = new SortedNumericSortField("value", SortField.Type.INT);
@@ -216,7 +207,7 @@ public class TestSortedNumericSortField extends LuceneTestCase {
     doc.add(newStringField("id", "1", Field.Store.YES));
     writer.addDocument(doc);
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     Sort sort = new Sort(new SortedNumericSortField("value", SortField.Type.INT));
@@ -244,7 +235,7 @@ public class TestSortedNumericSortField extends LuceneTestCase {
     doc.add(newStringField("id", "1", Field.Store.YES));
     writer.addDocument(doc);
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     Sort sort = new Sort(new SortedNumericSortField("value", SortField.Type.FLOAT));
@@ -272,7 +263,7 @@ public class TestSortedNumericSortField extends LuceneTestCase {
     doc.add(newStringField("id", "1", Field.Store.YES));
     writer.addDocument(doc);
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     Sort sort = new Sort(new SortedNumericSortField("value", SortField.Type.DOUBLE));
diff --git lucene/core/src/test/org/apache/lucene/search/TestSortedSetSelector.java lucene/core/src/test/org/apache/lucene/search/TestSortedSetSelector.java
index 6a9836f..c610f26 100644
--- lucene/core/src/test/org/apache/lucene/search/TestSortedSetSelector.java
+++ lucene/core/src/test/org/apache/lucene/search/TestSortedSetSelector.java
@@ -25,11 +25,6 @@ import org.apache.lucene.document.Field;
 import org.apache.lucene.document.SortedSetDocValuesField;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.RandomIndexWriter;
-import org.apache.lucene.search.IndexSearcher;
-import org.apache.lucene.search.MatchAllDocsQuery;
-import org.apache.lucene.search.Sort;
-import org.apache.lucene.search.SortField;
-import org.apache.lucene.search.TopDocs;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.LuceneTestCase;
@@ -71,7 +66,7 @@ public class TestSortedSetSelector extends LuceneTestCase {
     doc.add(newStringField("id", "2", Field.Store.YES));
     writer.addDocument(doc);
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
 
     // slow wrapper does not support random access ordinals (there is no need for that!)
     IndexSearcher searcher = newSearcher(ir, false);
@@ -101,7 +96,7 @@ public class TestSortedSetSelector extends LuceneTestCase {
     doc.add(newStringField("id", "2", Field.Store.YES));
     writer.addDocument(doc);
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     // slow wrapper does not support random access ordinals (there is no need for that!)
     IndexSearcher searcher = newSearcher(ir, false);
@@ -134,7 +129,7 @@ public class TestSortedSetSelector extends LuceneTestCase {
     doc.add(newStringField("id", "3", Field.Store.YES));
     writer.addDocument(doc);
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
 
     // slow wrapper does not support random access ordinals (there is no need for that!)
     IndexSearcher searcher = newSearcher(ir, false);
@@ -171,7 +166,7 @@ public class TestSortedSetSelector extends LuceneTestCase {
     doc.add(newStringField("id", "3", Field.Store.YES));
     writer.addDocument(doc);
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
 
     // slow wrapper does not support random access ordinals (there is no need for that!)
     IndexSearcher searcher = newSearcher(ir, false);
@@ -204,7 +199,7 @@ public class TestSortedSetSelector extends LuceneTestCase {
     doc.add(newStringField("id", "1", Field.Store.YES));
     writer.addDocument(doc);
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     // slow wrapper does not support random access ordinals (there is no need for that!)
     IndexSearcher searcher = newSearcher(ir, false);
@@ -235,7 +230,7 @@ public class TestSortedSetSelector extends LuceneTestCase {
     doc.add(newStringField("id", "1", Field.Store.YES));
     writer.addDocument(doc);
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     // slow wrapper does not support random access ordinals (there is no need for that!)
     IndexSearcher searcher = newSearcher(ir, false);
@@ -266,7 +261,7 @@ public class TestSortedSetSelector extends LuceneTestCase {
     doc.add(newStringField("id", "2", Field.Store.YES));
     writer.addDocument(doc);
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     // slow wrapper does not support random access ordinals (there is no need for that!)
     IndexSearcher searcher = newSearcher(ir, false);
@@ -300,7 +295,7 @@ public class TestSortedSetSelector extends LuceneTestCase {
     doc.add(newStringField("id", "1", Field.Store.YES));
     writer.addDocument(doc);
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     // slow wrapper does not support random access ordinals (there is no need for that!)
     IndexSearcher searcher = newSearcher(ir, false);
@@ -338,7 +333,7 @@ public class TestSortedSetSelector extends LuceneTestCase {
     doc.add(newStringField("id", "1", Field.Store.YES));
     writer.addDocument(doc);
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     // slow wrapper does not support random access ordinals (there is no need for that!)
     IndexSearcher searcher = newSearcher(ir, false);
@@ -370,7 +365,7 @@ public class TestSortedSetSelector extends LuceneTestCase {
     doc.add(newStringField("id", "1", Field.Store.YES));
     writer.addDocument(doc);
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     // slow wrapper does not support random access ordinals (there is no need for that!)
     IndexSearcher searcher = newSearcher(ir, false);
@@ -401,7 +396,7 @@ public class TestSortedSetSelector extends LuceneTestCase {
     doc.add(newStringField("id", "2", Field.Store.YES));
     writer.addDocument(doc);
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     // slow wrapper does not support random access ordinals (there is no need for that!)
     IndexSearcher searcher = newSearcher(ir, false);
@@ -432,7 +427,7 @@ public class TestSortedSetSelector extends LuceneTestCase {
     doc.add(newStringField("id", "1", Field.Store.YES));
     writer.addDocument(doc);
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     // slow wrapper does not support random access ordinals (there is no need for that!)
     IndexSearcher searcher = newSearcher(ir, false);
@@ -466,7 +461,7 @@ public class TestSortedSetSelector extends LuceneTestCase {
     doc.add(newStringField("id", "2", Field.Store.YES));
     writer.addDocument(doc);
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     // slow wrapper does not support random access ordinals (there is no need for that!)
     IndexSearcher searcher = newSearcher(ir, false);
@@ -504,7 +499,7 @@ public class TestSortedSetSelector extends LuceneTestCase {
     doc.add(newStringField("id", "2", Field.Store.YES));
     writer.addDocument(doc);
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     // slow wrapper does not support random access ordinals (there is no need for that!)
     IndexSearcher searcher = newSearcher(ir, false);
@@ -536,7 +531,7 @@ public class TestSortedSetSelector extends LuceneTestCase {
     doc.add(newStringField("id", "1", Field.Store.YES));
     writer.addDocument(doc);
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     // slow wrapper does not support random access ordinals (there is no need for that!)
     IndexSearcher searcher = newSearcher(ir, false);
diff --git lucene/core/src/test/org/apache/lucene/search/TestSortedSetSortField.java lucene/core/src/test/org/apache/lucene/search/TestSortedSetSortField.java
index 6a35e42..6f43ecc 100644
--- lucene/core/src/test/org/apache/lucene/search/TestSortedSetSortField.java
+++ lucene/core/src/test/org/apache/lucene/search/TestSortedSetSortField.java
@@ -24,13 +24,6 @@ import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.MultiReader;
 import org.apache.lucene.index.RandomIndexWriter;
 import org.apache.lucene.index.Term;
-import org.apache.lucene.search.IndexSearcher;
-import org.apache.lucene.search.MatchAllDocsQuery;
-import org.apache.lucene.search.Query;
-import org.apache.lucene.search.Sort;
-import org.apache.lucene.search.SortField;
-import org.apache.lucene.search.TermQuery;
-import org.apache.lucene.search.TopDocs;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.LuceneTestCase;
@@ -86,7 +79,7 @@ public class TestSortedSetSortField extends LuceneTestCase {
     doc.add(newStringField("id", "1", Field.Store.YES));
     writer.addDocument(doc);
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     Sort sort = new Sort(new SortedSetSortField("value", false));
@@ -115,7 +108,7 @@ public class TestSortedSetSortField extends LuceneTestCase {
     writer.addDocument(doc);
 
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     Sort sort = new Sort(new SortedSetSortField("value", true));
@@ -146,7 +139,7 @@ public class TestSortedSetSortField extends LuceneTestCase {
     doc.add(newStringField("id", "3", Field.Store.YES));
     writer.addDocument(doc);
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     SortField sortField = new SortedSetSortField("value", false);
@@ -181,7 +174,7 @@ public class TestSortedSetSortField extends LuceneTestCase {
     doc.add(newStringField("id", "3", Field.Store.YES));
     writer.addDocument(doc);
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     SortField sortField = new SortedSetSortField("value", false);
@@ -212,7 +205,7 @@ public class TestSortedSetSortField extends LuceneTestCase {
     doc.add(newStringField("id", "1", Field.Store.YES));
     writer.addDocument(doc);
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     Sort sort = new Sort(new SortedSetSortField("value", false));
diff --git lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs.java lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs.java
index 08435dc..8ddc53d 100644
--- lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs.java
+++ lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs.java
@@ -54,7 +54,7 @@ public class TestSubScorerFreqs extends LuceneTestCase {
     }
 
     s = newSearcher(w.getReader());
-    w.shutdown();
+    w.close();
   }
 
   @AfterClass
diff --git lucene/core/src/test/org/apache/lucene/search/TestTermRangeQuery.java lucene/core/src/test/org/apache/lucene/search/TestTermRangeQuery.java
index e03d216..b954e33 100644
--- lucene/core/src/test/org/apache/lucene/search/TestTermRangeQuery.java
+++ lucene/core/src/test/org/apache/lucene/search/TestTermRangeQuery.java
@@ -18,7 +18,6 @@ package org.apache.lucene.search;
  */
 
 import java.io.IOException;
-import java.io.Reader;
 import java.util.Set;
 
 import org.apache.lucene.analysis.*;
@@ -248,14 +247,14 @@ public class TestTermRangeQuery extends LuceneTestCase {
     for (int i = 0; i < values.length; i++) {
       insertDoc(writer, values[i]);
     }
-    writer.shutdown();
+    writer.close();
   }
 
   // shouldnt create an analyzer for every doc?
   private void addDoc(String content) throws IOException {
     IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)).setOpenMode(OpenMode.APPEND));
     insertDoc(writer, content);
-    writer.shutdown();
+    writer.close();
   }
 
   private void insertDoc(IndexWriter writer, String content) throws IOException {
diff --git lucene/core/src/test/org/apache/lucene/search/TestTermScorer.java lucene/core/src/test/org/apache/lucene/search/TestTermScorer.java
index 6eb18c5..c33e35a 100644
--- lucene/core/src/test/org/apache/lucene/search/TestTermScorer.java
+++ lucene/core/src/test/org/apache/lucene/search/TestTermScorer.java
@@ -58,7 +58,7 @@ public class TestTermScorer extends LuceneTestCase {
       writer.addDocument(doc);
     }
     indexReader = SlowCompositeReaderWrapper.wrap(writer.getReader());
-    writer.shutdown();
+    writer.close();
     indexSearcher = newSearcher(indexReader);
     indexSearcher.setSimilarity(new DefaultSimilarity());
   }
diff --git lucene/core/src/test/org/apache/lucene/search/TestTermVectors.java lucene/core/src/test/org/apache/lucene/search/TestTermVectors.java
index 24e1b0e..bac1e39 100644
--- lucene/core/src/test/org/apache/lucene/search/TestTermVectors.java
+++ lucene/core/src/test/org/apache/lucene/search/TestTermVectors.java
@@ -28,7 +28,6 @@ import org.apache.lucene.document.TextField;
 import org.apache.lucene.index.DirectoryReader;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.IndexWriter;
-import org.apache.lucene.index.IndexWriterConfig.OpenMode;
 import org.apache.lucene.index.RandomIndexWriter;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.English;
@@ -71,7 +70,7 @@ public class TestTermVectors extends LuceneTestCase {
       writer.addDocument(doc);
     }
     reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
   }
   
   @AfterClass
@@ -90,7 +89,7 @@ public class TestTermVectors extends LuceneTestCase {
   private void createDir(Directory dir) throws IOException {
     IndexWriter writer = createWriter(dir);
     writer.addDocument(createDoc());
-    writer.shutdown();
+    writer.close();
   }
 
   private Document createDoc() {
@@ -121,7 +120,7 @@ public class TestTermVectors extends LuceneTestCase {
       writer.addDocument(createDoc());
     }
     writer.forceMerge(1);
-    writer.shutdown();
+    writer.close();
     
     verifyIndex(target);
     target.close();
@@ -138,7 +137,7 @@ public class TestTermVectors extends LuceneTestCase {
     IndexWriter writer = createWriter(target);
     writer.addIndexes(input);
     writer.forceMerge(1);
-    writer.shutdown();
+    writer.close();
 
     verifyIndex(target);
 
@@ -160,7 +159,7 @@ public class TestTermVectors extends LuceneTestCase {
       r.close();
     }
     writer.forceMerge(1);
-    writer.shutdown();
+    writer.close();
     
     verifyIndex(target);
     IOUtils.close(target, input[0], input[1]);
diff --git lucene/core/src/test/org/apache/lucene/search/TestTimeLimitingCollector.java lucene/core/src/test/org/apache/lucene/search/TestTimeLimitingCollector.java
index 3f8234a..7dd0379 100644
--- lucene/core/src/test/org/apache/lucene/search/TestTimeLimitingCollector.java
+++ lucene/core/src/test/org/apache/lucene/search/TestTimeLimitingCollector.java
@@ -88,7 +88,7 @@ public class TestTimeLimitingCollector extends LuceneTestCase {
       add(docText[i%docText.length], iw);
     }
     reader = iw.getReader();
-    iw.shutdown();
+    iw.close();
     searcher = newSearcher(reader);
 
     BooleanQuery booleanQuery = new BooleanQuery();
diff --git lucene/core/src/test/org/apache/lucene/search/TestTopDocsCollector.java lucene/core/src/test/org/apache/lucene/search/TestTopDocsCollector.java
index 22431b0..0c56e11 100644
--- lucene/core/src/test/org/apache/lucene/search/TestTopDocsCollector.java
+++ lucene/core/src/test/org/apache/lucene/search/TestTopDocsCollector.java
@@ -112,7 +112,7 @@ public class TestTopDocsCollector extends LuceneTestCase {
       writer.addDocument(new Document());
     }
     reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
   }
   
   @Override
diff --git lucene/core/src/test/org/apache/lucene/search/TestTopDocsMerge.java lucene/core/src/test/org/apache/lucene/search/TestTopDocsMerge.java
index 9a5b6e1..716d5f8 100644
--- lucene/core/src/test/org/apache/lucene/search/TestTopDocsMerge.java
+++ lucene/core/src/test/org/apache/lucene/search/TestTopDocsMerge.java
@@ -122,7 +122,7 @@ public class TestTopDocsMerge extends LuceneTestCase {
       }
 
       reader = w.getReader();
-      w.shutdown();
+      w.close();
     }
 
     // NOTE: sometimes reader has just one segment, which is
diff --git lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector.java lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector.java
index 4353483..0492c2d 100644
--- lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector.java
+++ lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector.java
@@ -41,7 +41,7 @@ public class TestTopFieldCollector extends LuceneTestCase {
       iw.addDocument(doc);
     }
     ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     is = newSearcher(ir);
   }
   
diff --git lucene/core/src/test/org/apache/lucene/search/TestTopScoreDocCollector.java lucene/core/src/test/org/apache/lucene/search/TestTopScoreDocCollector.java
index dbf2aaa..409dd1a 100644
--- lucene/core/src/test/org/apache/lucene/search/TestTopScoreDocCollector.java
+++ lucene/core/src/test/org/apache/lucene/search/TestTopScoreDocCollector.java
@@ -60,7 +60,7 @@ public class TestTopScoreDocCollector extends LuceneTestCase {
         assertEquals("expected doc Id " + j + " found " + sd[j].doc, j, sd[j].doc);
       }
     }
-    writer.shutdown();
+    writer.close();
     reader.close();
     dir.close();
   }
diff --git lucene/core/src/test/org/apache/lucene/search/TestTotalHitCountCollector.java lucene/core/src/test/org/apache/lucene/search/TestTotalHitCountCollector.java
index 25869c1..409ef71 100644
--- lucene/core/src/test/org/apache/lucene/search/TestTotalHitCountCollector.java
+++ lucene/core/src/test/org/apache/lucene/search/TestTotalHitCountCollector.java
@@ -37,7 +37,7 @@ public class TestTotalHitCountCollector extends LuceneTestCase {
       writer.addDocument(doc);
     }
     IndexReader reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
 
     IndexSearcher searcher = newSearcher(reader);
     TotalHitCountCollector c = new TotalHitCountCollector();
diff --git lucene/core/src/test/org/apache/lucene/search/TestWildcard.java lucene/core/src/test/org/apache/lucene/search/TestWildcard.java
index 9de674d..ac60c88 100644
--- lucene/core/src/test/org/apache/lucene/search/TestWildcard.java
+++ lucene/core/src/test/org/apache/lucene/search/TestWildcard.java
@@ -253,7 +253,7 @@ public class TestWildcard
       doc.add(newTextField(field, contents[i], Field.Store.YES));
       writer.addDocument(doc);
     }
-    writer.shutdown();
+    writer.close();
 
     return indexStore;
   }
@@ -352,7 +352,7 @@ public class TestWildcard
       doc.add(newTextField(field, docs[i], Field.Store.NO));
       iw.addDocument(doc);
     }
-    iw.shutdown();
+    iw.close();
     
     IndexReader reader = DirectoryReader.open(dir);
     IndexSearcher searcher = newSearcher(reader);
diff --git lucene/core/src/test/org/apache/lucene/search/TestWildcardRandom.java lucene/core/src/test/org/apache/lucene/search/TestWildcardRandom.java
index 3365944..c722506 100644
--- lucene/core/src/test/org/apache/lucene/search/TestWildcardRandom.java
+++ lucene/core/src/test/org/apache/lucene/search/TestWildcardRandom.java
@@ -31,7 +31,6 @@ import org.apache.lucene.index.Term;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.TestUtil;
-import org.apache.lucene.util.TestUtil;
 
 /**
  * Create an index with terms from 000-999.
@@ -63,7 +62,7 @@ public class TestWildcardRandom extends LuceneTestCase {
     
     reader = writer.getReader();
     searcher = newSearcher(reader);
-    writer.shutdown();
+    writer.close();
     if (VERBOSE) {
       System.out.println("TEST: setUp searcher=" + searcher);
     }
diff --git lucene/core/src/test/org/apache/lucene/search/payloads/PayloadHelper.java lucene/core/src/test/org/apache/lucene/search/payloads/PayloadHelper.java
index 6758449..144b727 100644
--- lucene/core/src/test/org/apache/lucene/search/payloads/PayloadHelper.java
+++ lucene/core/src/test/org/apache/lucene/search/payloads/PayloadHelper.java
@@ -35,9 +35,6 @@ import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.MockDirectoryWrapper;
 import org.apache.lucene.store.RAMDirectory;
 
-import static org.apache.lucene.util.LuceneTestCase.TEST_VERSION_CURRENT;
-
-import java.io.Reader;
 import java.io.IOException;
 import java.util.Random;
 
@@ -121,7 +118,7 @@ public class PayloadHelper {
 
     // TODO randomize this
     IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(
-        TEST_VERSION_CURRENT, analyzer).setSimilarity(similarity));
+        analyzer).setSimilarity(similarity));
     // writer.infoStream = System.out;
     for (int i = 0; i < numDocs; i++) {
       Document doc = new Document();
@@ -131,7 +128,7 @@ public class PayloadHelper {
       writer.addDocument(doc);
     }
     reader = DirectoryReader.open(writer, true);
-    writer.shutdown();
+    writer.close();
 
     IndexSearcher searcher = LuceneTestCase.newSearcher(reader);
     searcher.setSimilarity(similarity);
diff --git lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery.java lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery.java
index 66c9260..0ddb46a 100644
--- lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery.java
+++ lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery.java
@@ -16,7 +16,6 @@ package org.apache.lucene.search.payloads;
  * limitations under the License.
  */
 import java.io.IOException;
-import java.io.Reader;
 
 import org.apache.lucene.analysis.*;
 import org.apache.lucene.analysis.tokenattributes.PayloadAttribute;
@@ -118,7 +117,7 @@ public class TestPayloadNearQuery extends LuceneTestCase {
       writer.addDocument(doc);
     }
     reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
 
     searcher = newSearcher(reader);
     searcher.setSimilarity(similarity);
diff --git lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadTermQuery.java lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadTermQuery.java
index b04a206..7833f57 100644
--- lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadTermQuery.java
+++ lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadTermQuery.java
@@ -44,7 +44,6 @@ import org.apache.lucene.document.Field;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 
-import java.io.Reader;
 import java.io.IOException;
 
 
@@ -130,7 +129,7 @@ public class TestPayloadTermQuery extends LuceneTestCase {
       writer.addDocument(doc);
     }
     reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
 
     searcher = newSearcher(reader);
     searcher.setSimilarity(similarity);
diff --git lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarity2.java lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarity2.java
index 1b860aa..abe5a6d 100644
--- lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarity2.java
+++ lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarity2.java
@@ -78,7 +78,7 @@ public class TestSimilarity2 extends LuceneTestCase {
     Directory dir = newDirectory();
     RandomIndexWriter iw = new RandomIndexWriter(random(), dir);
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     IndexSearcher is = newSearcher(ir);
     
     for (Similarity sim : sims) {
@@ -97,7 +97,7 @@ public class TestSimilarity2 extends LuceneTestCase {
     doc.add(newTextField("foo", "bar", Field.Store.NO));
     iw.addDocument(doc);
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     IndexSearcher is = newSearcher(ir);
     
     for (Similarity sim : sims) {
@@ -119,7 +119,7 @@ public class TestSimilarity2 extends LuceneTestCase {
     doc.add(newTextField("foo", "bar", Field.Store.NO));
     iw.addDocument(doc);
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     IndexSearcher is = newSearcher(ir);
     
     for (Similarity sim : sims) {
@@ -144,7 +144,7 @@ public class TestSimilarity2 extends LuceneTestCase {
     doc.add(newField("foo", "bar", ft));
     iw.addDocument(doc);
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     IndexSearcher is = newSearcher(ir);
     
     for (Similarity sim : sims) {
@@ -169,7 +169,7 @@ public class TestSimilarity2 extends LuceneTestCase {
     doc.add(f);
     iw.addDocument(doc);
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     IndexSearcher is = newSearcher(ir);
     
     for (Similarity sim : sims) {
@@ -195,7 +195,7 @@ public class TestSimilarity2 extends LuceneTestCase {
     doc.add(f);
     iw.addDocument(doc);
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     IndexSearcher is = newSearcher(ir);
     
     for (Similarity sim : sims) {
@@ -221,7 +221,7 @@ public class TestSimilarity2 extends LuceneTestCase {
     doc.add(newField("foo", "bar", ft));
     iw.addDocument(doc);
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     IndexSearcher is = newSearcher(ir);
     
     for (Similarity sim : sims) {
diff --git lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarityBase.java lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarityBase.java
index a5e3580..91861f9 100644
--- lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarityBase.java
+++ lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarityBase.java
@@ -119,7 +119,7 @@ public class TestSimilarityBase extends LuceneTestCase {
     
     reader = writer.getReader();
     searcher = newSearcher(reader);
-    writer.shutdown();
+    writer.close();
     
     sims = new ArrayList<>();
     for (BasicModel basicModel : BASIC_MODELS) {
diff --git lucene/core/src/test/org/apache/lucene/search/spans/TestBasics.java lucene/core/src/test/org/apache/lucene/search/spans/TestBasics.java
index 23ef957..6c29159 100644
--- lucene/core/src/test/org/apache/lucene/search/spans/TestBasics.java
+++ lucene/core/src/test/org/apache/lucene/search/spans/TestBasics.java
@@ -120,7 +120,7 @@ public class TestBasics extends LuceneTestCase {
     }
     reader = writer.getReader();
     searcher = newSearcher(reader);
-    writer.shutdown();
+    writer.close();
   }
 
   @AfterClass
diff --git lucene/core/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery.java lucene/core/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery.java
index 86154bb..e05832b 100644
--- lucene/core/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery.java
+++ lucene/core/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery.java
@@ -113,7 +113,7 @@ public class TestFieldMaskingSpanQuery extends LuceneTestCase {
                                          field("first",  "bubba"),
                                          field("last",   "jones")     }));
     reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
     searcher = newSearcher(reader);
   }
 
diff --git lucene/core/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered.java lucene/core/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered.java
index 2d19dfc..475fb28 100644
--- lucene/core/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered.java
+++ lucene/core/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered.java
@@ -58,7 +58,7 @@ public class TestNearSpansOrdered extends LuceneTestCase {
       writer.addDocument(doc);
     }
     reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
     searcher = newSearcher(reader);
   }
 
diff --git lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans.java lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans.java
index 6dcb415..3d02ea5 100644
--- lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans.java
+++ lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans.java
@@ -17,7 +17,6 @@ package org.apache.lucene.search.spans;
  */
 
 import java.io.IOException;
-import java.io.Reader;
 import java.io.StringReader;
 import java.nio.charset.StandardCharsets;
 import java.util.Collection;
@@ -117,7 +116,7 @@ public class TestPayloadSpans extends LuceneTestCase {
     doc.add(newTextField(PayloadHelper.FIELD, "one two three one four three", Field.Store.YES));
     writer.addDocument(doc);
     IndexReader reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
 
     checkSpans(MultiSpansWrapper.wrap(reader.getContext(), snq), 1,new int[]{2});
@@ -262,7 +261,7 @@ public class TestPayloadSpans extends LuceneTestCase {
 
     IndexReader reader = writer.getReader();
     IndexSearcher is = newSearcher(reader);
-    writer.shutdown();
+    writer.close();
 
     SpanTermQuery stq1 = new SpanTermQuery(new Term("content", "a"));
     SpanTermQuery stq2 = new SpanTermQuery(new Term("content", "k"));
@@ -298,7 +297,7 @@ public class TestPayloadSpans extends LuceneTestCase {
     writer.addDocument(doc);
     IndexReader reader = writer.getReader();
     IndexSearcher is = newSearcher(reader);
-    writer.shutdown();
+    writer.close();
 
     SpanTermQuery stq1 = new SpanTermQuery(new Term("content", "a"));
     SpanTermQuery stq2 = new SpanTermQuery(new Term("content", "k"));
@@ -333,7 +332,7 @@ public class TestPayloadSpans extends LuceneTestCase {
     writer.addDocument(doc);
     IndexReader reader = writer.getReader();
     IndexSearcher is = newSearcher(reader);
-    writer.shutdown();
+    writer.close();
 
     SpanTermQuery stq1 = new SpanTermQuery(new Term("content", "a"));
     SpanTermQuery stq2 = new SpanTermQuery(new Term("content", "k"));
@@ -374,7 +373,7 @@ public class TestPayloadSpans extends LuceneTestCase {
     writer.addDocument(doc);
   
     IndexReader reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
     IndexSearcher searcher = newSearcher(reader);
 
     PayloadSpanUtil psu = new PayloadSpanUtil(searcher.getTopReaderContext());
@@ -438,7 +437,7 @@ public class TestPayloadSpans extends LuceneTestCase {
     }
 
     closeIndexReader = writer.getReader();
-    writer.shutdown();
+    writer.close();
 
     IndexSearcher searcher = newSearcher(closeIndexReader);
     return searcher;
diff --git lucene/core/src/test/org/apache/lucene/search/spans/TestSpanFirstQuery.java lucene/core/src/test/org/apache/lucene/search/spans/TestSpanFirstQuery.java
index 9dd2735..3567285 100644
--- lucene/core/src/test/org/apache/lucene/search/spans/TestSpanFirstQuery.java
+++ lucene/core/src/test/org/apache/lucene/search/spans/TestSpanFirstQuery.java
@@ -59,7 +59,7 @@ public class TestSpanFirstQuery extends LuceneTestCase {
     sfq = new SpanNotQuery(include, sfq);
     assertEquals(1, searcher.search(sfq, 10).totalHits);
     
-    writer.shutdown();
+    writer.close();
     reader.close();
     dir.close();
   }
diff --git lucene/core/src/test/org/apache/lucene/search/spans/TestSpanMultiTermQueryWrapper.java lucene/core/src/test/org/apache/lucene/search/spans/TestSpanMultiTermQueryWrapper.java
index 85f6c21..c5023c7 100644
--- lucene/core/src/test/org/apache/lucene/search/spans/TestSpanMultiTermQueryWrapper.java
+++ lucene/core/src/test/org/apache/lucene/search/spans/TestSpanMultiTermQueryWrapper.java
@@ -54,7 +54,7 @@ public class TestSpanMultiTermQueryWrapper extends LuceneTestCase {
     field.setStringValue("jumps over extremely very lazy broxn dog");
     iw.addDocument(doc);
     reader = iw.getReader();
-    iw.shutdown();
+    iw.close();
     searcher = newSearcher(reader);
   }
   
diff --git lucene/core/src/test/org/apache/lucene/search/spans/TestSpans.java lucene/core/src/test/org/apache/lucene/search/spans/TestSpans.java
index ee3ad31..de0038c 100644
--- lucene/core/src/test/org/apache/lucene/search/spans/TestSpans.java
+++ lucene/core/src/test/org/apache/lucene/search/spans/TestSpans.java
@@ -61,7 +61,7 @@ public class TestSpans extends LuceneTestCase {
       writer.addDocument(doc);
     }
     reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
     searcher = newSearcher(reader);
   }
   
@@ -475,15 +475,14 @@ public class TestSpans extends LuceneTestCase {
   // LUCENE-1404
   public void testNPESpanQuery() throws Throwable {
     final Directory dir = newDirectory();
-    final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(
-        TEST_VERSION_CURRENT, new MockAnalyzer(random())));
+    final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));
 
     // Add documents
     addDoc(writer, "1", "the big dogs went running to the market");
     addDoc(writer, "2", "the cat chased the mouse, then the cat ate the mouse quickly");
     
     // Commit
-    writer.shutdown();
+    writer.close();
 
     // Get searcher
     final IndexReader reader = DirectoryReader.open(dir);
diff --git lucene/core/src/test/org/apache/lucene/search/spans/TestSpansAdvanced.java lucene/core/src/test/org/apache/lucene/search/spans/TestSpansAdvanced.java
index f431387..1ae6168 100644
--- lucene/core/src/test/org/apache/lucene/search/spans/TestSpansAdvanced.java
+++ lucene/core/src/test/org/apache/lucene/search/spans/TestSpansAdvanced.java
@@ -66,7 +66,7 @@ public class TestSpansAdvanced extends LuceneTestCase {
     addDocument(writer, "3", "I think it should work.");
     addDocument(writer, "4", "I think it should work.");
     reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
     searcher = newSearcher(reader);
     searcher.setSimilarity(new DefaultSimilarity());
   }
diff --git lucene/core/src/test/org/apache/lucene/search/spans/TestSpansAdvanced2.java lucene/core/src/test/org/apache/lucene/search/spans/TestSpansAdvanced2.java
index 63a83cf..6658907 100644
--- lucene/core/src/test/org/apache/lucene/search/spans/TestSpansAdvanced2.java
+++ lucene/core/src/test/org/apache/lucene/search/spans/TestSpansAdvanced2.java
@@ -56,7 +56,7 @@ public class TestSpansAdvanced2 extends TestSpansAdvanced {
     addDocument(writer, "C", "It shouldn't.");
     addDocument(writer, "D", "Should we, should we, should we.");
     reader2 = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     // re-open the searcher since we added more docs
     searcher2 = newSearcher(reader2);
diff --git lucene/core/src/test/org/apache/lucene/store/TestBufferedIndexInput.java lucene/core/src/test/org/apache/lucene/store/TestBufferedIndexInput.java
index 3578728..52401e8 100644
--- lucene/core/src/test/org/apache/lucene/store/TestBufferedIndexInput.java
+++ lucene/core/src/test/org/apache/lucene/store/TestBufferedIndexInput.java
@@ -232,7 +232,7 @@ public class TestBufferedIndexInput extends LuceneTestCase {
       try {
         IndexWriter writer = new IndexWriter(
             dir,
-            new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).
+            new IndexWriterConfig(new MockAnalyzer(random())).
                 setOpenMode(OpenMode.CREATE).
                 setMergePolicy(newLogMergePolicy(false))
         );
@@ -276,7 +276,7 @@ public class TestBufferedIndexInput extends LuceneTestCase {
         hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;
         dir.tweakBufferSizes();
         assertEquals(35, hits.length);
-        writer.shutdown();
+        writer.close();
         reader.close();
       } finally {
         TestUtil.rm(indexDir);
diff --git lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory.java lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory.java
index 3b37d26..9e62f2b 100644
--- lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory.java
+++ lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory.java
@@ -19,7 +19,6 @@ package org.apache.lucene.store;
 
 import java.io.File;
 import java.io.IOException;
-import java.util.Arrays;
 import java.util.Collections;
 import java.util.HashSet;
 import java.util.Set;
@@ -32,7 +31,6 @@ import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.IndexWriter;
 import org.apache.lucene.index.IndexWriterConfig;
 import org.apache.lucene.index.TestIndexWriterReader;
-import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.TestUtil;
 
 public class TestFileSwitchDirectory extends BaseDirectoryTestCase {
@@ -56,7 +54,7 @@ public class TestFileSwitchDirectory extends BaseDirectoryTestCase {
     OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;
     IndexWriter writer = new IndexWriter(
         fsd,
-        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).
+        new IndexWriterConfig(new MockAnalyzer(random())).
             setMergePolicy(newLogMergePolicy(false)).setCodec(Codec.forName("Lucene40")).setUseCompoundFile(false)
     );
     TestIndexWriterReader.createIndexNoClose(true, "ram", writer);
@@ -78,7 +76,7 @@ public class TestFileSwitchDirectory extends BaseDirectoryTestCase {
       assertFalse(fileExtensions.contains(ext));
     }
     reader.close();
-    writer.shutdown();
+    writer.close();
 
     files = fsd.listAll();
     for(int i=0;i<files.length;i++) {
diff --git lucene/core/src/test/org/apache/lucene/store/TestLockFactory.java lucene/core/src/test/org/apache/lucene/store/TestLockFactory.java
index dc6567d..d28228f 100644
--- lucene/core/src/test/org/apache/lucene/store/TestLockFactory.java
+++ lucene/core/src/test/org/apache/lucene/store/TestLockFactory.java
@@ -37,7 +37,6 @@ import org.apache.lucene.search.Query;
 import org.apache.lucene.search.TermQuery;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.TestUtil;
-import org.apache.lucene.util.TestUtil;
 
 public class TestLockFactory extends LuceneTestCase {
 
@@ -52,7 +51,7 @@ public class TestLockFactory extends LuceneTestCase {
         // Lock prefix should have been set:
         assertTrue("lock prefix was not set by the RAMDirectory", lf.lockPrefixSet);
 
-        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));
+        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));
 
         // add 100 documents (so that commit lock is used)
         for (int i = 0; i < 100; i++) {
@@ -71,7 +70,7 @@ public class TestLockFactory extends LuceneTestCase {
                        lock.lockAttempts > 0);
         }
         
-        writer.shutdown();
+        writer.close();
     }
 
     // Verify: we can use the NoLockFactory with RAMDirectory w/ no
@@ -84,21 +83,21 @@ public class TestLockFactory extends LuceneTestCase {
         assertTrue("RAMDirectory.setLockFactory did not take",
                    NoLockFactory.class.isInstance(dir.getLockFactory()));
 
-        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));
+        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));
         writer.commit(); // required so the second open succeed 
         // Create a 2nd IndexWriter.  This is normally not allowed but it should run through since we're not
         // using any locks:
         IndexWriter writer2 = null;
         try {
-            writer2 = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));
+            writer2 = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));
         } catch (Exception e) {
             e.printStackTrace(System.out);
             fail("Should not have hit an IOException with no locking");
         }
 
-        writer.shutdown();
+        writer.close();
         if (writer2 != null) {
-            writer2.shutdown();
+            writer2.close();
         }
     }
 
@@ -110,19 +109,19 @@ public class TestLockFactory extends LuceneTestCase {
         assertTrue("RAMDirectory did not use correct LockFactory: got " + dir.getLockFactory(),
                    SingleInstanceLockFactory.class.isInstance(dir.getLockFactory()));
 
-        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));
+        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));
 
         // Create a 2nd IndexWriter.  This should fail:
         IndexWriter writer2 = null;
         try {
-            writer2 = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));
+            writer2 = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));
             fail("Should have hit an IOException with two IndexWriters on default SingleInstanceLockFactory");
         } catch (IOException e) {
         }
 
-        writer.shutdown();
+        writer.close();
         if (writer2 != null) {
-            writer2.shutdown();
+            writer2.close();
         }
     }
     
@@ -153,9 +152,9 @@ public class TestLockFactory extends LuceneTestCase {
         Directory dir = newFSDirectory(indexDir, lockFactory);
 
         // First create a 1 doc index:
-        IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));
+        IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));
         addDoc(w);
-        w.shutdown();
+        w.close();
 
         WriterThread writer = new WriterThread(100, dir);
         SearcherThread searcher = new SearcherThread(100, dir);
@@ -270,7 +269,7 @@ public class TestLockFactory extends LuceneTestCase {
             IndexWriter writer = null;
             for(int i=0;i<this.numIteration;i++) {
                 try {
-                    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));
+                    writer = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));
                 } catch (IOException e) {
                     if (e.toString().indexOf(" timed out:") == -1) {
                         hitException = true;
@@ -300,7 +299,7 @@ public class TestLockFactory extends LuceneTestCase {
                         break;
                     }
                     try {
-                        writer.shutdown();
+                        writer.close();
                     } catch (IOException e) {
                         hitException = true;
                         System.out.println("Stress Test Index Writer: close hit unexpected exception: " + e.toString());
diff --git lucene/core/src/test/org/apache/lucene/store/TestMockDirectoryWrapper.java lucene/core/src/test/org/apache/lucene/store/TestMockDirectoryWrapper.java
index 8c6371d..f88ac03 100644
--- lucene/core/src/test/org/apache/lucene/store/TestMockDirectoryWrapper.java
+++ lucene/core/src/test/org/apache/lucene/store/TestMockDirectoryWrapper.java
@@ -27,28 +27,28 @@ public class TestMockDirectoryWrapper extends LuceneTestCase {
   
   public void testFailIfIndexWriterNotClosed() throws IOException {
     MockDirectoryWrapper dir = newMockDirectory();
-    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, null));
+    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(null));
     try {
       dir.close();
       fail();
     } catch (Exception expected) {
       assertTrue(expected.getMessage().contains("there are still open locks"));
     }
-    iw.shutdown();
+    iw.close();
     dir.close();
   }
   
   public void testFailIfIndexWriterNotClosedChangeLockFactory() throws IOException {
     MockDirectoryWrapper dir = newMockDirectory();
     dir.setLockFactory(new SingleInstanceLockFactory());
-    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, null));
+    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(null));
     try {
       dir.close();
       fail();
     } catch (Exception expected) {
       assertTrue(expected.getMessage().contains("there are still open locks"));
     }
-    iw.shutdown();
+    iw.close();
     dir.close();
   }
   
diff --git lucene/core/src/test/org/apache/lucene/store/TestMultiMMap.java lucene/core/src/test/org/apache/lucene/store/TestMultiMMap.java
index 0f1c65f..79caa27 100644
--- lucene/core/src/test/org/apache/lucene/store/TestMultiMMap.java
+++ lucene/core/src/test/org/apache/lucene/store/TestMultiMMap.java
@@ -355,7 +355,7 @@ public class TestMultiMMap extends BaseDirectoryTestCase {
       writer.addDocument(doc);
     }
     IndexReader reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     int numAsserts = atLeast(100);
     for (int i = 0; i < numAsserts; i++) {
@@ -363,7 +363,6 @@ public class TestMultiMMap extends BaseDirectoryTestCase {
       assertEquals("" + docID, reader.document(docID).get("docid"));
     }
     reader.close();
-    writer.close();
     dir.close();
   }
   
diff --git lucene/core/src/test/org/apache/lucene/store/TestNRTCachingDirectory.java lucene/core/src/test/org/apache/lucene/store/TestNRTCachingDirectory.java
index 840156c..8d9a5a1 100644
--- lucene/core/src/test/org/apache/lucene/store/TestNRTCachingDirectory.java
+++ lucene/core/src/test/org/apache/lucene/store/TestNRTCachingDirectory.java
@@ -93,7 +93,7 @@ public class TestNRTCachingDirectory extends BaseDirectoryTestCase {
     }
 
     // Close should force cache to clear since all files are sync'd
-    w.shutdown();
+    w.close();
 
     final String[] cachedFiles = cachedDir.listCachedFiles();
     for(String file : cachedFiles) {
@@ -117,7 +117,7 @@ public class TestNRTCachingDirectory extends BaseDirectoryTestCase {
 
     Directory fsDir = FSDirectory.open(new File("/path/to/index"));
     NRTCachingDirectory cachedFSDir = new NRTCachingDirectory(fsDir, 2.0, 25.0);
-    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer);
+    IndexWriterConfig conf = new IndexWriterConfig(analyzer);
     IndexWriter writer = new IndexWriter(cachedFSDir, conf);
     writer.close();
     cachedFSDir.close();
diff --git lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory.java lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory.java
index 8c8eadd..ffb7260 100644
--- lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory.java
+++ lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory.java
@@ -53,7 +53,7 @@ public class TestRAMDirectory extends BaseDirectoryTestCase {
     
     Directory dir = newFSDirectory(path);
     IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(
-        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));
+        new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));
     // add some documents
     Document doc = null;
     for (int i = 0; i < docsToAdd; i++) {
@@ -62,7 +62,7 @@ public class TestRAMDirectory extends BaseDirectoryTestCase {
       writer.addDocument(doc);
     }
     assertEquals(docsToAdd, writer.maxDoc());
-    writer.shutdown();
+    writer.close();
     dir.close();
 
     return path;
@@ -124,7 +124,7 @@ public class TestRAMDirectory extends BaseDirectoryTestCase {
     dir.close();
     
     final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(
-        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));
+        new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));
     writer.forceMerge(1);
     
     assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());
@@ -155,6 +155,6 @@ public class TestRAMDirectory extends BaseDirectoryTestCase {
     writer.forceMerge(1);
     assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());
     
-    writer.shutdown();
+    writer.close();
   }
 }
diff --git lucene/core/src/test/org/apache/lucene/store/TestWindowsMMap.java lucene/core/src/test/org/apache/lucene/store/TestWindowsMMap.java
index 5d8e5b3..fa35a94 100644
--- lucene/core/src/test/org/apache/lucene/store/TestWindowsMMap.java
+++ lucene/core/src/test/org/apache/lucene/store/TestWindowsMMap.java
@@ -21,7 +21,6 @@ import java.io.File;
 
 import org.apache.lucene.document.Field;
 import org.apache.lucene.util.LuceneTestCase;
-import org.apache.lucene.util.TestUtil;
 
 import org.apache.lucene.analysis.MockAnalyzer;
 import org.apache.lucene.document.Document;
@@ -73,8 +72,7 @@ public class TestWindowsMMap extends LuceneTestCase {
     // interior filters.
     MockAnalyzer analyzer = new MockAnalyzer(random());
     // TODO: something about lock timeouts and leftover locks.
-    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(
-        TEST_VERSION_CURRENT, analyzer)
+    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(analyzer)
         .setOpenMode(OpenMode.CREATE));
     writer.commit();
     IndexReader reader = DirectoryReader.open(dir);
@@ -89,7 +87,7 @@ public class TestWindowsMMap extends LuceneTestCase {
     }
     
     reader.close();
-    writer.shutdown();
+    writer.close();
     rmDir(dirPath);
   }
 
diff --git lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.java lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.java
index ba43e0f..fb8183e 100644
--- lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.java
+++ lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.java
@@ -321,7 +321,7 @@ public class TestFSTs extends LuceneTestCase {
       docCount++;
     }
     IndexReader r = DirectoryReader.open(writer, true);
-    writer.shutdown();
+    writer.close();
     final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();
 
     final boolean doRewrite = random().nextBoolean();
@@ -779,14 +779,14 @@ public class TestFSTs extends LuceneTestCase {
     System.out.println("DOT before rewrite");
     Writer w = new OutputStreamWriter(new FileOutputStream("/mnt/scratch/before.dot"));
     Util.toDot(fst, w, false, false);
-    w.shutdown();
+    w.close();
 
     final FST<Object> rewrite = new FST<Object>(fst, 1, 100);
 
     System.out.println("DOT after rewrite");
     w = new OutputStreamWriter(new FileOutputStream("/mnt/scratch/after.dot"));
     Util.toDot(rewrite, w, false, false);
-    w.shutdown();
+    w.close();
   }
   */
 
@@ -885,7 +885,7 @@ public class TestFSTs extends LuceneTestCase {
       // turn writer into reader:
       final IndexReader r = w.getReader();
       final IndexSearcher s = newSearcher(r);
-      w.shutdown();
+      w.close();
 
       final List<String> allIDsList = new ArrayList<>(allIDs);
       final List<String> sortedAllIDsList = new ArrayList<>(allIDsList);
@@ -1009,7 +1009,7 @@ public class TestFSTs extends LuceneTestCase {
       System.out.println("TEST: got reader=" + r);
     }
     IndexSearcher s = newSearcher(r);
-    w.shutdown();
+    w.close();
 
     final List<String> allTermsList = new ArrayList<>(allTerms);
     Collections.shuffle(allTermsList, random());
@@ -1237,7 +1237,7 @@ public class TestFSTs extends LuceneTestCase {
     final FST<Long> fst = builder.finish();
     //Writer w = new OutputStreamWriter(new FileOutputStream("out.dot"));
     //Util.toDot(fst, w, false, false);
-    //w.shutdown();
+    //w.close();
 
     Util.TopResults<Long> res = Util.shortestPaths(fst,
                                                   fst.getFirstArc(new FST.Arc<Long>()),
@@ -1332,7 +1332,7 @@ public class TestFSTs extends LuceneTestCase {
     final FST<Pair<Long,Long>> fst = builder.finish();
     //Writer w = new OutputStreamWriter(new FileOutputStream("out.dot"));
     //Util.toDot(fst, w, false, false);
-    //w.shutdown();
+    //w.close();
 
     Util.TopResults<Pair<Long,Long>> res = Util.shortestPaths(fst,
                                                              fst.getFirstArc(new FST.Arc<Pair<Long,Long>>()),
@@ -1392,7 +1392,7 @@ public class TestFSTs extends LuceneTestCase {
     //System.out.println("SAVE out.dot");
     //Writer w = new OutputStreamWriter(new FileOutputStream("out.dot"));
     //Util.toDot(fst, w, false, false);
-    //w.shutdown();
+    //w.close();
 
     BytesReader reader = fst.getBytesReader();
 
@@ -1514,7 +1514,7 @@ public class TestFSTs extends LuceneTestCase {
     //System.out.println("SAVE out.dot");
     //Writer w = new OutputStreamWriter(new FileOutputStream("out.dot"));
     //Util.toDot(fst, w, false, false);
-    //w.shutdown();
+    //w.close();
 
     BytesReader reader = fst.getBytesReader();
 
diff --git lucene/core/src/test/org/apache/lucene/util/junitcompat/TestFailIfUnreferencedFiles.java lucene/core/src/test/org/apache/lucene/util/junitcompat/TestFailIfUnreferencedFiles.java
index 52a5bdd..3680e56 100644
--- lucene/core/src/test/org/apache/lucene/util/junitcompat/TestFailIfUnreferencedFiles.java
+++ lucene/core/src/test/org/apache/lucene/util/junitcompat/TestFailIfUnreferencedFiles.java
@@ -42,9 +42,9 @@ public class TestFailIfUnreferencedFiles extends WithNestedTests {
     public void testDummy() throws Exception {
       MockDirectoryWrapper dir = newMockDirectory();
       dir.setAssertNoUnrefencedFilesOnClose(true);
-      IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, null));
+      IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(null));
       iw.addDocument(new Document());
-      iw.shutdown();
+      iw.close();
       IndexOutput output = dir.createOutput("_hello.world", IOContext.DEFAULT);
       output.writeString("i am unreferenced!");
       output.close();
diff --git lucene/demo/src/java/org/apache/lucene/demo/IndexFiles.java lucene/demo/src/java/org/apache/lucene/demo/IndexFiles.java
index 43816aa..3d5ae6d 100644
--- lucene/demo/src/java/org/apache/lucene/demo/IndexFiles.java
+++ lucene/demo/src/java/org/apache/lucene/demo/IndexFiles.java
@@ -89,7 +89,7 @@ public class IndexFiles {
       Directory dir = FSDirectory.open(new File(indexPath));
       // :Post-Release-Update-Version.LUCENE_XY:
       Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_5_0);
-      IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_5_0, analyzer);
+      IndexWriterConfig iwc = new IndexWriterConfig(analyzer);
 
       if (create) {
         // Create a new index in the directory, removing any
@@ -118,7 +118,7 @@ public class IndexFiles {
       //
       // writer.forceMerge(1);
 
-      writer.shutdown();
+      writer.close();
 
       Date end = new Date();
       System.out.println(end.getTime() - start.getTime() + " total milliseconds");
diff --git lucene/demo/src/java/org/apache/lucene/demo/facet/AssociationsFacetsExample.java lucene/demo/src/java/org/apache/lucene/demo/facet/AssociationsFacetsExample.java
index 48ba664..95bdd50 100644
--- lucene/demo/src/java/org/apache/lucene/demo/facet/AssociationsFacetsExample.java
+++ lucene/demo/src/java/org/apache/lucene/demo/facet/AssociationsFacetsExample.java
@@ -61,8 +61,7 @@ public class AssociationsFacetsExample {
   
   /** Build the example index. */
   private void index() throws IOException {
-    IndexWriterConfig iwc = new IndexWriterConfig(FacetExamples.EXAMPLES_VER, 
-                                                  new WhitespaceAnalyzer(FacetExamples.EXAMPLES_VER));
+    IndexWriterConfig iwc = new IndexWriterConfig(new WhitespaceAnalyzer(FacetExamples.EXAMPLES_VER));
     IndexWriter indexWriter = new IndexWriter(indexDir, iwc);
 
     // Writes facet ords to a separate directory from the main index
@@ -86,7 +85,7 @@ public class AssociationsFacetsExample {
     doc.add(new FloatAssociationFacetField(0.34f, "genre", "software"));
     indexWriter.addDocument(config.build(taxoWriter, doc));
 
-    indexWriter.shutdown();
+    indexWriter.close();
     taxoWriter.close();
   }
 
diff --git lucene/demo/src/java/org/apache/lucene/demo/facet/DistanceFacetsExample.java lucene/demo/src/java/org/apache/lucene/demo/facet/DistanceFacetsExample.java
index 07adc28..19da8a9 100644
--- lucene/demo/src/java/org/apache/lucene/demo/facet/DistanceFacetsExample.java
+++ lucene/demo/src/java/org/apache/lucene/demo/facet/DistanceFacetsExample.java
@@ -87,7 +87,7 @@ public class DistanceFacetsExample implements Closeable {
   
   /** Build the example index. */
   public void index() throws IOException {
-    IndexWriter writer = new IndexWriter(indexDir, new IndexWriterConfig(FacetExamples.EXAMPLES_VER, 
+    IndexWriter writer = new IndexWriter(indexDir, new IndexWriterConfig(
         new WhitespaceAnalyzer(FacetExamples.EXAMPLES_VER)));
 
     // TODO: we could index in radians instead ... saves all the conversions in getBoundingBoxFilter
@@ -117,7 +117,7 @@ public class DistanceFacetsExample implements Closeable {
 
     // Open near-real-time searcher
     searcher = new IndexSearcher(DirectoryReader.open(writer, true));
-    writer.shutdown();
+    writer.close();
   }
 
   private ValueSource getDistanceValueSource() {
diff --git lucene/demo/src/java/org/apache/lucene/demo/facet/ExpressionAggregationFacetsExample.java lucene/demo/src/java/org/apache/lucene/demo/facet/ExpressionAggregationFacetsExample.java
index 961b1d8..20413f2 100644
--- lucene/demo/src/java/org/apache/lucene/demo/facet/ExpressionAggregationFacetsExample.java
+++ lucene/demo/src/java/org/apache/lucene/demo/facet/ExpressionAggregationFacetsExample.java
@@ -58,7 +58,7 @@ public class ExpressionAggregationFacetsExample {
   
   /** Build the example index. */
   private void index() throws IOException {
-    IndexWriter indexWriter = new IndexWriter(indexDir, new IndexWriterConfig(FacetExamples.EXAMPLES_VER, 
+    IndexWriter indexWriter = new IndexWriter(indexDir, new IndexWriterConfig(
         new WhitespaceAnalyzer(FacetExamples.EXAMPLES_VER)));
 
     // Writes facet ords to a separate directory from the main index
@@ -76,7 +76,7 @@ public class ExpressionAggregationFacetsExample {
     doc.add(new FacetField("A", "C"));
     indexWriter.addDocument(config.build(taxoWriter, doc));
     
-    indexWriter.shutdown();
+    indexWriter.close();
     taxoWriter.close();
   }
 
diff --git lucene/demo/src/java/org/apache/lucene/demo/facet/MultiCategoryListsFacetsExample.java lucene/demo/src/java/org/apache/lucene/demo/facet/MultiCategoryListsFacetsExample.java
index a311c04..2ad6fc6 100644
--- lucene/demo/src/java/org/apache/lucene/demo/facet/MultiCategoryListsFacetsExample.java
+++ lucene/demo/src/java/org/apache/lucene/demo/facet/MultiCategoryListsFacetsExample.java
@@ -56,7 +56,7 @@ public class MultiCategoryListsFacetsExample {
 
   /** Build the example index. */
   private void index() throws IOException {
-    IndexWriter indexWriter = new IndexWriter(indexDir, new IndexWriterConfig(FacetExamples.EXAMPLES_VER, 
+    IndexWriter indexWriter = new IndexWriter(indexDir, new IndexWriterConfig(
         new WhitespaceAnalyzer(FacetExamples.EXAMPLES_VER)));
 
     // Writes facet ords to a separate directory from the main index
@@ -87,7 +87,7 @@ public class MultiCategoryListsFacetsExample {
     doc.add(new FacetField("Publish Date", "1999", "5", "5"));
     indexWriter.addDocument(config.build(taxoWriter, doc));
     
-    indexWriter.shutdown();
+    indexWriter.close();
     taxoWriter.close();
   }
 
diff --git lucene/demo/src/java/org/apache/lucene/demo/facet/RangeFacetsExample.java lucene/demo/src/java/org/apache/lucene/demo/facet/RangeFacetsExample.java
index fea6f70..69f6097 100644
--- lucene/demo/src/java/org/apache/lucene/demo/facet/RangeFacetsExample.java
+++ lucene/demo/src/java/org/apache/lucene/demo/facet/RangeFacetsExample.java
@@ -60,7 +60,7 @@ public class RangeFacetsExample implements Closeable {
   
   /** Build the example index. */
   public void index() throws IOException {
-    IndexWriter indexWriter = new IndexWriter(indexDir, new IndexWriterConfig(FacetExamples.EXAMPLES_VER, 
+    IndexWriter indexWriter = new IndexWriter(indexDir, new IndexWriterConfig(
         new WhitespaceAnalyzer(FacetExamples.EXAMPLES_VER)));
 
     // Add documents with a fake timestamp, 1000 sec before
@@ -77,7 +77,7 @@ public class RangeFacetsExample implements Closeable {
 
     // Open near-real-time searcher
     searcher = new IndexSearcher(DirectoryReader.open(indexWriter, true));
-    indexWriter.shutdown();
+    indexWriter.close();
   }
 
   private FacetsConfig getConfig() {
diff --git lucene/demo/src/java/org/apache/lucene/demo/facet/SimpleFacetsExample.java lucene/demo/src/java/org/apache/lucene/demo/facet/SimpleFacetsExample.java
index 6f2bd2f..942399a 100644
--- lucene/demo/src/java/org/apache/lucene/demo/facet/SimpleFacetsExample.java
+++ lucene/demo/src/java/org/apache/lucene/demo/facet/SimpleFacetsExample.java
@@ -57,7 +57,7 @@ public class SimpleFacetsExample {
   
   /** Build the example index. */
   private void index() throws IOException {
-    IndexWriter indexWriter = new IndexWriter(indexDir, new IndexWriterConfig(FacetExamples.EXAMPLES_VER, 
+    IndexWriter indexWriter = new IndexWriter(indexDir, new IndexWriterConfig(
         new WhitespaceAnalyzer(FacetExamples.EXAMPLES_VER)));
 
     // Writes facet ords to a separate directory from the main index
@@ -88,7 +88,7 @@ public class SimpleFacetsExample {
     doc.add(new FacetField("Publish Date", "1999", "5", "5"));
     indexWriter.addDocument(config.build(taxoWriter, doc));
     
-    indexWriter.shutdown();
+    indexWriter.close();
     taxoWriter.close();
   }
 
diff --git lucene/demo/src/java/org/apache/lucene/demo/facet/SimpleSortedSetFacetsExample.java lucene/demo/src/java/org/apache/lucene/demo/facet/SimpleSortedSetFacetsExample.java
index f7eb35e..b61f4bd 100644
--- lucene/demo/src/java/org/apache/lucene/demo/facet/SimpleSortedSetFacetsExample.java
+++ lucene/demo/src/java/org/apache/lucene/demo/facet/SimpleSortedSetFacetsExample.java
@@ -55,7 +55,7 @@ public class SimpleSortedSetFacetsExample {
 
   /** Build the example index. */
   private void index() throws IOException {
-    IndexWriter indexWriter = new IndexWriter(indexDir, new IndexWriterConfig(FacetExamples.EXAMPLES_VER, 
+    IndexWriter indexWriter = new IndexWriter(indexDir, new IndexWriterConfig(
         new WhitespaceAnalyzer(FacetExamples.EXAMPLES_VER)));
     Document doc = new Document();
     doc.add(new SortedSetDocValuesFacetField("Author", "Bob"));
@@ -82,7 +82,7 @@ public class SimpleSortedSetFacetsExample {
     doc.add(new SortedSetDocValuesFacetField("Publish Year", "1999"));
     indexWriter.addDocument(config.build(doc));
     
-    indexWriter.shutdown();
+    indexWriter.close();
   }
 
   /** User runs a query and counts facets. */
diff --git lucene/demo/src/java/org/apache/lucene/demo/xmlparser/FormBasedXmlQueryDemo.java lucene/demo/src/java/org/apache/lucene/demo/xmlparser/FormBasedXmlQueryDemo.java
index ba09c33..3618047 100644
--- lucene/demo/src/java/org/apache/lucene/demo/xmlparser/FormBasedXmlQueryDemo.java
+++ lucene/demo/src/java/org/apache/lucene/demo/xmlparser/FormBasedXmlQueryDemo.java
@@ -51,7 +51,6 @@ import org.apache.lucene.search.Query;
 import org.apache.lucene.search.ScoreDoc;
 import org.apache.lucene.search.TopDocs;
 import org.apache.lucene.store.RAMDirectory;
-import org.apache.lucene.util.Version;
 
 /**
  * Example servlet that uses the XML queryparser.
@@ -134,7 +133,7 @@ public class FormBasedXmlQueryDemo extends HttpServlet {
   private void openExampleIndex() throws IOException {
     //Create a RAM-based index from our test data file
     RAMDirectory rd = new RAMDirectory();
-    IndexWriterConfig iwConfig = new IndexWriterConfig(Version.LUCENE_CURRENT, analyzer);
+    IndexWriterConfig iwConfig = new IndexWriterConfig(analyzer);
     IndexWriter writer = new IndexWriter(rd, iwConfig);
     InputStream dataIn = getServletContext().getResourceAsStream("/WEB-INF/data.tsv");
     BufferedReader br = new BufferedReader(new InputStreamReader(dataIn, StandardCharsets.UTF_8));
@@ -155,7 +154,7 @@ public class FormBasedXmlQueryDemo extends HttpServlet {
       }
       line = br.readLine();
     }
-    writer.shutdown();
+    writer.close();
 
     //open searcher
     // this example never closes it reader!
diff --git lucene/expressions/src/test/org/apache/lucene/expressions/TestDemoExpressions.java lucene/expressions/src/test/org/apache/lucene/expressions/TestDemoExpressions.java
index b7f6f52..7502f3a 100644
--- lucene/expressions/src/test/org/apache/lucene/expressions/TestDemoExpressions.java
+++ lucene/expressions/src/test/org/apache/lucene/expressions/TestDemoExpressions.java
@@ -82,7 +82,7 @@ public class  TestDemoExpressions extends LuceneTestCase {
     
     reader = iw.getReader();
     searcher = new IndexSearcher(reader);
-    iw.shutdown();
+    iw.close();
   }
   
   @Override
diff --git lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionRescorer.java lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionRescorer.java
index 8d85618..828f60f 100644
--- lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionRescorer.java
+++ lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionRescorer.java
@@ -65,7 +65,7 @@ public class TestExpressionRescorer extends LuceneTestCase {
     
     reader = iw.getReader();
     searcher = new IndexSearcher(reader);
-    iw.shutdown();
+    iw.close();
   }
   
   @Override
diff --git lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionSorts.java lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionSorts.java
index b4bc502..f98f40d 100644
--- lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionSorts.java
+++ lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionSorts.java
@@ -81,7 +81,7 @@ public class TestExpressionSorts extends LuceneTestCase {
       iw.addDocument(document);
     }
     reader = iw.getReader();
-    iw.shutdown();
+    iw.close();
     searcher = newSearcher(reader);
   }
 
diff --git lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionValueSource.java lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionValueSource.java
index b2e0152..20a500a 100644
--- lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionValueSource.java
+++ lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionValueSource.java
@@ -70,7 +70,7 @@ public class TestExpressionValueSource extends LuceneTestCase {
     iw.forceMerge(1);
     
     reader = iw.getReader();
-    iw.shutdown();
+    iw.close();
   }
   
   @Override
diff --git lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter.java lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter.java
index 5041c8d..ef260a3 100644
--- lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter.java
+++ lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter.java
@@ -49,7 +49,6 @@ import org.apache.lucene.store.LockObtainFailedException; // javadocs
 import org.apache.lucene.store.NativeFSLockFactory;
 import org.apache.lucene.store.SimpleFSLockFactory;
 import org.apache.lucene.util.BytesRef;
-import org.apache.lucene.util.Version;
 
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
@@ -286,7 +285,7 @@ public class DirectoryTaxonomyWriter implements TaxonomyWriter {
     // :Post-Release-Update-Version.LUCENE_XY:
     // Make sure we use a MergePolicy which always merges adjacent segments and thus
     // keeps the doc IDs ordered as well (this is crucial for the taxonomy index).
-    return new IndexWriterConfig(Version.LUCENE_5_0, null).setOpenMode(openMode).setMergePolicy(
+    return new IndexWriterConfig(null).setOpenMode(openMode).setMergePolicy(
         new LogByteSizeMergePolicy());
   }
   
@@ -340,7 +339,7 @@ public class DirectoryTaxonomyWriter implements TaxonomyWriter {
   public synchronized void close() throws IOException {
     if (!isClosed) {
       commit();
-      indexWriter.shutdown();
+      indexWriter.close();
       doClose();
     }
   }
diff --git lucene/facet/src/test/org/apache/lucene/facet/TestDrillDownQuery.java lucene/facet/src/test/org/apache/lucene/facet/TestDrillDownQuery.java
index 21f0999..6743f23 100644
--- lucene/facet/src/test/org/apache/lucene/facet/TestDrillDownQuery.java
+++ lucene/facet/src/test/org/apache/lucene/facet/TestDrillDownQuery.java
@@ -110,7 +110,7 @@ public class TestDrillDownQuery extends FacetTestCase {
     
     taxoWriter.close();
     reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     taxo = new DirectoryTaxonomyReader(taxoDir);
   }
diff --git lucene/facet/src/test/org/apache/lucene/facet/TestDrillSideways.java lucene/facet/src/test/org/apache/lucene/facet/TestDrillSideways.java
index 8b9555a..bbfd161 100644
--- lucene/facet/src/test/org/apache/lucene/facet/TestDrillSideways.java
+++ lucene/facet/src/test/org/apache/lucene/facet/TestDrillSideways.java
@@ -44,15 +44,12 @@ import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.IndexWriterConfig;
 import org.apache.lucene.index.RandomIndexWriter;
 import org.apache.lucene.index.Term;
-import org.apache.lucene.search.LeafCollector;
-import org.apache.lucene.search.Collector;
 import org.apache.lucene.search.DocIdSet;
 import org.apache.lucene.search.Filter;
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.MatchAllDocsQuery;
 import org.apache.lucene.search.Query;
 import org.apache.lucene.search.ScoreDoc;
-import org.apache.lucene.search.Scorer;
 import org.apache.lucene.search.SimpleCollector;
 import org.apache.lucene.search.Sort;
 import org.apache.lucene.search.SortField;
@@ -243,7 +240,7 @@ public class TestDrillSideways extends FacetTestCase {
     assertEquals(0, r.hits.totalHits);
     assertNull(r.facets.getTopChildren(10, "Publish Date"));
     assertNull(r.facets.getTopChildren(10, "Author"));
-    writer.shutdown();
+    writer.close();
     IOUtils.close(searcher.getIndexReader(), taxoReader, taxoWriter, dir, taxoDir);
   }
 
@@ -298,7 +295,7 @@ public class TestDrillSideways extends FacetTestCase {
     // published once:
     assertEquals("dim=Author path=[] value=2 childCount=2\n  Bob (1)\n  Lisa (1)\n", r.facets.getTopChildren(10, "Author").toString());
 
-    writer.shutdown();
+    writer.close();
     IOUtils.close(searcher.getIndexReader(), taxoReader, taxoWriter, dir, taxoDir);
   }
 
@@ -354,7 +351,7 @@ public class TestDrillSideways extends FacetTestCase {
     assertEquals("dim=dim path=[] value=6 childCount=4\n  a (3)\n  b (1)\n  c (1)\n  d (1)\n", r.facets.getTopChildren(10, "dim").toString());
     assertEquals("dim=dim path=[a] value=3 childCount=3\n  x (1)\n  y (1)\n  z (1)\n", r.facets.getTopChildren(10, "dim", "a").toString());
 
-    writer.shutdown();
+    writer.close();
     IOUtils.close(searcher.getIndexReader(), taxoReader, taxoWriter, dir, taxoDir);
   }
 
@@ -760,7 +757,7 @@ public class TestDrillSideways extends FacetTestCase {
       }
     }
 
-    w.shutdown();
+    w.close();
     IOUtils.close(r, tr, tw, d, td);
   }
 
@@ -1068,7 +1065,7 @@ public class TestDrillSideways extends FacetTestCase {
     r = ds.search(ddq, null, null, 10, new Sort(new SortField("foo", SortField.Type.INT)), false, false); // this used to fail on IllegalArgEx
     assertEquals(0, r.hits.totalHits);
 
-    writer.shutdown();
+    writer.close();
     IOUtils.close(taxoWriter, searcher.getIndexReader(), taxoReader, dir, taxoDir);
   }
 }
diff --git lucene/facet/src/test/org/apache/lucene/facet/TestFacetsConfig.java lucene/facet/src/test/org/apache/lucene/facet/TestFacetsConfig.java
index 37db4b0..3c217b4 100644
--- lucene/facet/src/test/org/apache/lucene/facet/TestFacetsConfig.java
+++ lucene/facet/src/test/org/apache/lucene/facet/TestFacetsConfig.java
@@ -68,7 +68,7 @@ public class TestFacetsConfig extends FacetTestCase {
     // these two addDocument() used to fail
     indexWriter.addDocument(doc);
     indexWriter.addDocument(doc);
-    indexWriter.shutdown();
+    indexWriter.close();
     IOUtils.close(taxoWriter);
     
     DirectoryReader indexReader = DirectoryReader.open(indexDir);
diff --git lucene/facet/src/test/org/apache/lucene/facet/TestMultipleIndexFields.java lucene/facet/src/test/org/apache/lucene/facet/TestMultipleIndexFields.java
index 40fb297..df9242d 100644
--- lucene/facet/src/test/org/apache/lucene/facet/TestMultipleIndexFields.java
+++ lucene/facet/src/test/org/apache/lucene/facet/TestMultipleIndexFields.java
@@ -91,7 +91,7 @@ public class TestMultipleIndexFields extends FacetTestCase {
 
     assertOrdinalsExist("$facets", ir);
 
-    iw.shutdown();
+    iw.close();
     IOUtils.close(tr, ir, tw, indexDir, taxoDir);
   }
 
@@ -131,7 +131,7 @@ public class TestMultipleIndexFields extends FacetTestCase {
     assertOrdinalsExist("$facets", ir);
     assertOrdinalsExist("$author", ir);
 
-    iw.shutdown();
+    iw.close();
     IOUtils.close(tr, ir, tw, indexDir, taxoDir);
   }
 
@@ -175,7 +175,7 @@ public class TestMultipleIndexFields extends FacetTestCase {
     assertOrdinalsExist("$music", ir);
     assertOrdinalsExist("$music", ir);
 
-    iw.shutdown();
+    iw.close();
     IOUtils.close(tr, ir, tw, indexDir, taxoDir);
   }
 
@@ -227,7 +227,7 @@ public class TestMultipleIndexFields extends FacetTestCase {
     assertOrdinalsExist("$bands", ir);
     assertOrdinalsExist("$composers", ir);
 
-    iw.shutdown();
+    iw.close();
     IOUtils.close(tr, ir, tw, indexDir, taxoDir);
   }
 
@@ -271,7 +271,7 @@ public class TestMultipleIndexFields extends FacetTestCase {
     assertOrdinalsExist("$music", ir);
     assertOrdinalsExist("$literature", ir);
 
-    iw.shutdown();
+    iw.close();
     IOUtils.close(tr, ir, iw, tw, indexDir, taxoDir);
   }
 
diff --git lucene/facet/src/test/org/apache/lucene/facet/TestRandomSamplingFacetsCollector.java lucene/facet/src/test/org/apache/lucene/facet/TestRandomSamplingFacetsCollector.java
index b5ba819..d5a5dc9 100644
--- lucene/facet/src/test/org/apache/lucene/facet/TestRandomSamplingFacetsCollector.java
+++ lucene/facet/src/test/org/apache/lucene/facet/TestRandomSamplingFacetsCollector.java
@@ -58,7 +58,7 @@ public class TestRandomSamplingFacetsCollector extends FacetTestCase {
     // NRT open
     IndexSearcher searcher = newSearcher(writer.getReader());
     TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);
-    writer.shutdown();
+    writer.close();
     IOUtils.close(taxoWriter);
     
     // Test empty results
diff --git lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts.java lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts.java
index 154b997..edb4d06 100644
--- lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts.java
+++ lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts.java
@@ -88,7 +88,7 @@ public class TestRangeFacetCounts extends FacetTestCase {
     w.addDocument(doc);
 
     IndexReader r = w.getReader();
-    w.shutdown();
+    w.close();
 
     FacetsCollector fc = new FacetsCollector();
     IndexSearcher s = newSearcher(r);
@@ -152,7 +152,7 @@ public class TestRangeFacetCounts extends FacetTestCase {
     w.addDocument(doc);
 
     IndexReader r = w.getReader();
-    w.shutdown();
+    w.close();
 
     FacetsCollector fc = new FacetsCollector();
     IndexSearcher s = newSearcher(r);
@@ -188,7 +188,7 @@ public class TestRangeFacetCounts extends FacetTestCase {
     w.addDocument(doc);
 
     IndexReader r = w.getReader();
-    w.shutdown();
+    w.close();
 
     FacetsCollector fc = new FacetsCollector();
     IndexSearcher s = newSearcher(r);
@@ -306,7 +306,7 @@ public class TestRangeFacetCounts extends FacetTestCase {
     assertEquals("dim=dim path=[] value=11 childCount=2\n  b (8)\n  a (3)\n", dsr.facets.getTopChildren(10, "dim").toString());
     assertEquals("dim=field path=[] value=21 childCount=5\n  less than 10 (10)\n  less than or equal to 10 (11)\n  over 90 (9)\n  90 or above (10)\n  over 1000 (0)\n",
                  dsr.facets.getTopChildren(10, "field").toString());
-    w.shutdown();
+    w.close();
     IOUtils.close(tw, tr, td, r, d);
   }
 
@@ -336,7 +336,7 @@ public class TestRangeFacetCounts extends FacetTestCase {
                                          
     assertEquals("dim=field path=[] value=21 childCount=5\n  less than 10 (10)\n  less than or equal to 10 (11)\n  over 90 (9)\n  90 or above (10)\n  over 1000 (0)\n",
                  facets.getTopChildren(10, "field").toString());
-    w.shutdown();
+    w.close();
     IOUtils.close(r, d);
   }
 
@@ -367,7 +367,7 @@ public class TestRangeFacetCounts extends FacetTestCase {
     
     assertEquals("dim=field path=[] value=21 childCount=5\n  less than 10 (10)\n  less than or equal to 10 (11)\n  over 90 (9)\n  90 or above (10)\n  over 1000 (0)\n",
                  facets.getTopChildren(10, "field").toString());
-    w.shutdown();
+    w.close();
     IOUtils.close(r, d);
   }
 
@@ -515,7 +515,7 @@ public class TestRangeFacetCounts extends FacetTestCase {
       }
     }
 
-    w.shutdown();
+    w.close();
     IOUtils.close(r, dir);
   }
 
@@ -674,7 +674,7 @@ public class TestRangeFacetCounts extends FacetTestCase {
       }
     }
 
-    w.shutdown();
+    w.close();
     IOUtils.close(r, dir);
   }
 
@@ -818,7 +818,7 @@ public class TestRangeFacetCounts extends FacetTestCase {
       }
     }
 
-    w.shutdown();
+    w.close();
     IOUtils.close(r, dir);
   }
 
@@ -856,7 +856,7 @@ public class TestRangeFacetCounts extends FacetTestCase {
     assertEquals("dim=field path=[] value=16 childCount=5\n  less than 10 (8)\n  less than or equal to 10 (8)\n  over 90 (8)\n  90 or above (8)\n  over 1000 (0)\n",
                  facets.getTopChildren(10, "field").toString());
 
-    w.shutdown();
+    w.close();
     IOUtils.close(r, d);
   }
 
@@ -970,7 +970,7 @@ public class TestRangeFacetCounts extends FacetTestCase {
     assertEquals("dim=field path=[] value=3 childCount=6\n  < 1 (0)\n  < 2 (1)\n  < 5 (3)\n  < 10 (3)\n  < 20 (3)\n  < 50 (3)\n",
                  dsr.facets.getTopChildren(10, "field").toString());
 
-    writer.shutdown();
+    writer.close();
     IOUtils.close(r, dir);
   }
 }
diff --git lucene/facet/src/test/org/apache/lucene/facet/sortedset/TestSortedSetDocValuesFacets.java lucene/facet/src/test/org/apache/lucene/facet/sortedset/TestSortedSetDocValuesFacets.java
index 76058fd..ad026ce 100644
--- lucene/facet/src/test/org/apache/lucene/facet/sortedset/TestSortedSetDocValuesFacets.java
+++ lucene/facet/src/test/org/apache/lucene/facet/sortedset/TestSortedSetDocValuesFacets.java
@@ -92,7 +92,7 @@ public class TestSortedSetDocValuesFacets extends FacetTestCase {
     TopDocs hits = searcher.search(q, 1);
     assertEquals(1, hits.totalHits);
 
-    writer.shutdown();
+    writer.close();
     IOUtils.close(searcher.getIndexReader(), dir);
   }
 
@@ -135,7 +135,7 @@ public class TestSortedSetDocValuesFacets extends FacetTestCase {
     }
 
     r.close();
-    writer.shutdown();
+    writer.close();
     searcher.getIndexReader().close();
     dir.close();
   }
@@ -174,7 +174,7 @@ public class TestSortedSetDocValuesFacets extends FacetTestCase {
 
     // NRT open
     IndexSearcher searcher = newSearcher(writer.getReader());
-    writer.shutdown();
+    writer.close();
 
     // Per-top-reader state:
     SortedSetDocValuesReaderState state = new DefaultSortedSetDocValuesReaderState(searcher.getIndexReader());
@@ -219,7 +219,7 @@ public class TestSortedSetDocValuesFacets extends FacetTestCase {
 
     // NRT open
     IndexSearcher searcher = newSearcher(writer.getReader());
-    writer.shutdown();
+    writer.close();
 
     // Per-top-reader state:
     SortedSetDocValuesReaderState state = new DefaultSortedSetDocValuesReaderState(searcher.getIndexReader());
@@ -266,7 +266,7 @@ public class TestSortedSetDocValuesFacets extends FacetTestCase {
     // Ask for top 10 labels for any dims that have counts:
     assertEquals("dim=a path=[] value=2 childCount=2\n  foo1 (1)\n  foo2 (1)\n", facets.getTopChildren(10, "a").toString());
 
-    writer.shutdown();
+    writer.close();
     IOUtils.close(searcher.getIndexReader(), dir);
   }
 
@@ -355,7 +355,7 @@ public class TestSortedSetDocValuesFacets extends FacetTestCase {
       assertEquals(expected, actual);
     }
 
-    w.shutdown();
+    w.close();
     IOUtils.close(searcher.getIndexReader(), indexDir, taxoDir);
   }
 }
diff --git lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCachedOrdinalsReader.java lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCachedOrdinalsReader.java
index bbc1abe..3749a23 100644
--- lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCachedOrdinalsReader.java
+++ lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCachedOrdinalsReader.java
@@ -81,7 +81,7 @@ public class TestCachedOrdinalsReader extends FacetTestCase {
       }
     }
 
-    writer.shutdown();
+    writer.close();
     IOUtils.close(taxoWriter, reader, indexDir, taxoDir);
   }
 }
diff --git lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestSearcherTaxonomyManager.java lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestSearcherTaxonomyManager.java
index 581cb21..eb5e123 100644
--- lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestSearcherTaxonomyManager.java
+++ lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestSearcherTaxonomyManager.java
@@ -203,7 +203,7 @@ public class TestSearcherTaxonomyManager extends FacetTestCase {
       System.out.println("TEST: now stop");
     }
 
-    w.shutdown();
+    w.close();
     IOUtils.close(mgr, tw, taxoDir, dir);
   }
   
@@ -256,7 +256,7 @@ public class TestSearcherTaxonomyManager extends FacetTestCase {
       System.out.println("TEST: now stop");
     }
 
-    w.shutdown();
+    w.close();
     IOUtils.close(mgr, tw, taxoDir, indexDir);
   }
   
@@ -282,7 +282,7 @@ public class TestSearcherTaxonomyManager extends FacetTestCase {
       // expected
     }
 
-    w.shutdown();
+    w.close();
     IOUtils.close(mgr, tw, taxoDir, dir);
   }
   
@@ -321,7 +321,7 @@ public class TestSearcherTaxonomyManager extends FacetTestCase {
       mgr.release(pair);
     }
 
-    w.shutdown();
+    w.close();
     IOUtils.close(mgr, tw, taxoDir, indexDir);
   }
 
diff --git lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetAssociations.java lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetAssociations.java
index 80209e3..334ecdd 100644
--- lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetAssociations.java
+++ lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetAssociations.java
@@ -24,12 +24,6 @@ import org.apache.lucene.facet.FacetTestCase;
 import org.apache.lucene.facet.Facets;
 import org.apache.lucene.facet.FacetsCollector;
 import org.apache.lucene.facet.FacetsConfig;
-import org.apache.lucene.facet.taxonomy.FloatAssociationFacetField;
-import org.apache.lucene.facet.taxonomy.IntAssociationFacetField;
-import org.apache.lucene.facet.taxonomy.TaxonomyFacetSumFloatAssociations;
-import org.apache.lucene.facet.taxonomy.TaxonomyFacetSumIntAssociations;
-import org.apache.lucene.facet.taxonomy.TaxonomyReader;
-import org.apache.lucene.facet.taxonomy.TaxonomyWriter;
 import org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader;
 import org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter;
 import org.apache.lucene.index.IndexReader;
@@ -86,7 +80,7 @@ public class TestTaxonomyFacetAssociations extends FacetTestCase {
     
     taxoWriter.close();
     reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
     taxoReader = new DirectoryTaxonomyReader(taxoDir);
   }
   
@@ -182,7 +176,7 @@ public class TestTaxonomyFacetAssociations extends FacetTestCase {
     } catch (IllegalArgumentException exc) {
       // expected
     }
-    writer.shutdown();
+    writer.close();
     IOUtils.close(taxoWriter, dir, taxoDir);
   }
 
@@ -203,7 +197,7 @@ public class TestTaxonomyFacetAssociations extends FacetTestCase {
     } catch (IllegalArgumentException exc) {
       // expected
     }
-    writer.shutdown();
+    writer.close();
     IOUtils.close(taxoWriter, dir, taxoDir);
   }
 
@@ -224,7 +218,7 @@ public class TestTaxonomyFacetAssociations extends FacetTestCase {
     } catch (IllegalArgumentException exc) {
       // expected
     }
-    writer.shutdown();
+    writer.close();
     IOUtils.close(taxoWriter, dir, taxoDir);
   }
   
diff --git lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts.java lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts.java
index 98db24e..d04cfb1 100644
--- lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts.java
+++ lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts.java
@@ -141,7 +141,7 @@ public class TestTaxonomyFacetCounts extends FacetTestCase {
     assertTrue(result.indexOf("  /2012") != -1);
     assertTrue(result.indexOf("      /20") != -1);
 
-    writer.shutdown();
+    writer.close();
     IOUtils.close(taxoWriter, searcher.getIndexReader(), taxoReader, taxoDir, dir);
   }
 
@@ -199,7 +199,7 @@ public class TestTaxonomyFacetCounts extends FacetTestCase {
     assertEquals("dim=b path=[] value=2 childCount=2\n  bar1 (1)\n  bar2 (1)\n", results.get(1).toString());
     assertEquals("dim=c path=[] value=1 childCount=1\n  baz1 (1)\n", results.get(2).toString());
 
-    writer.shutdown();
+    writer.close();
     IOUtils.close(taxoWriter, searcher.getIndexReader(), taxoReader, taxoDir, dir);
   }
 
@@ -258,7 +258,7 @@ public class TestTaxonomyFacetCounts extends FacetTestCase {
       // expected
     }
 
-    writer.shutdown();
+    writer.close();
     IOUtils.close(taxoWriter, searcher.getIndexReader(), taxoReader, taxoDir, dir);
   }
 
@@ -283,7 +283,7 @@ public class TestTaxonomyFacetCounts extends FacetTestCase {
     doc.add(newTextField("field", "text", Field.Store.NO));
     doc.add(new FacetField("a", "path"));
     writer.addDocument(config.build(taxoWriter, doc));
-    writer.shutdown();
+    writer.close();
     IOUtils.close(taxoWriter, dir, taxoDir);
   }
 
@@ -329,7 +329,7 @@ public class TestTaxonomyFacetCounts extends FacetTestCase {
     assertEquals(1, result.labelValues.length);
     assertEquals(1, result.labelValues[0].value.intValue());
 
-    writer.shutdown();
+    writer.close();
     IOUtils.close(taxoWriter, searcher.getIndexReader(), taxoReader, dir, taxoDir);
   }
 
@@ -363,7 +363,7 @@ public class TestTaxonomyFacetCounts extends FacetTestCase {
 
     FacetResult result = facets.getTopChildren(10, "dim");
     assertEquals("dim=dim path=[] value=-1 childCount=2\n  test\u001Fone (1)\n  test\u001Etwo (1)\n", result.toString());
-    writer.shutdown();
+    writer.close();
     IOUtils.close(taxoWriter, searcher.getIndexReader(), taxoReader, dir, taxoDir);
   }
 
@@ -413,7 +413,7 @@ public class TestTaxonomyFacetCounts extends FacetTestCase {
     }
     assertEquals(1, facets.getSpecificValue("dim2"));
     assertEquals(1, facets.getSpecificValue("dim3"));
-    writer.shutdown();
+    writer.close();
     IOUtils.close(taxoWriter, searcher.getIndexReader(), taxoReader, dir, taxoDir);
   }
 
@@ -464,7 +464,7 @@ public class TestTaxonomyFacetCounts extends FacetTestCase {
     }
     assertEquals(numLabels, allLabels.size());
 
-    writer.shutdown();
+    writer.close();
     IOUtils.close(searcher.getIndexReader(), taxoWriter, taxoReader, dir, taxoDir);
   }
 
@@ -486,7 +486,7 @@ public class TestTaxonomyFacetCounts extends FacetTestCase {
     } catch (IllegalArgumentException iae) {
       // expected
     }
-    writer.shutdown();
+    writer.close();
     IOUtils.close(taxoWriter, dir, taxoDir);
   }
 
@@ -509,7 +509,7 @@ public class TestTaxonomyFacetCounts extends FacetTestCase {
     } catch (IllegalArgumentException iae) {
       // expected
     }
-    writer.shutdown();
+    writer.close();
     IOUtils.close(taxoWriter, dir, taxoDir);
   }
 
@@ -539,7 +539,7 @@ public class TestTaxonomyFacetCounts extends FacetTestCase {
     Facets facets2 = getTaxonomyFacetCounts(taxoReader, config, sfc, "$b");
     assertEquals(r.maxDoc(), facets1.getTopChildren(10, "a").value.intValue());
     assertEquals(r.maxDoc(), facets2.getTopChildren(10, "b").value.intValue());
-    iw.shutdown();
+    iw.close();
     IOUtils.close(taxoWriter, taxoReader, taxoDir, r, indexDir);
   }
   
@@ -568,7 +568,7 @@ public class TestTaxonomyFacetCounts extends FacetTestCase {
       assertEquals(r.numDocs(), result.value.intValue());
     }
 
-    iw.shutdown();
+    iw.close();
     IOUtils.close(taxoWriter, taxoReader, taxoDir, r, indexDir);
   }
 
@@ -597,7 +597,7 @@ public class TestTaxonomyFacetCounts extends FacetTestCase {
     List<FacetResult> res2 = facets.getAllDims(10);
     assertEquals("calling getFacetResults twice should return the .equals()=true result", res1, res2);
 
-    iw.shutdown();
+    iw.close();
     IOUtils.close(taxoWriter, taxoReader, taxoDir, r, indexDir);
   }
   
@@ -624,7 +624,7 @@ public class TestTaxonomyFacetCounts extends FacetTestCase {
     
     assertEquals(10, facets.getTopChildren(2, "a").childCount);
 
-    iw.shutdown();
+    iw.close();
     IOUtils.close(taxoWriter, taxoReader, taxoDir, r, indexDir);
   }
 
@@ -663,7 +663,7 @@ public class TestTaxonomyFacetCounts extends FacetTestCase {
     indexTwoDocs(taxoWriter, indexWriter, null, true);         // 5th segment, with content, no categories
     indexTwoDocs(taxoWriter, indexWriter, config, true);  // 6th segment, with content, with categories
     indexTwoDocs(taxoWriter, indexWriter, null, true);         // 7th segment, with content, no categories
-    indexWriter.shutdown();
+    indexWriter.close();
     IOUtils.close(taxoWriter);
 
     DirectoryReader indexReader = DirectoryReader.open(indexDir);
@@ -768,7 +768,7 @@ public class TestTaxonomyFacetCounts extends FacetTestCase {
       assertEquals(expected, actual);
     }
 
-    w.shutdown();
+    w.close();
     IOUtils.close(tw, searcher.getIndexReader(), tr, indexDir, taxoDir);
   }
 }
diff --git lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts2.java lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts2.java
index a736c9d..0300bd1 100644
--- lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts2.java
+++ lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts2.java
@@ -37,8 +37,6 @@ import org.apache.lucene.facet.Facets;
 import org.apache.lucene.facet.FacetsCollector;
 import org.apache.lucene.facet.FacetsConfig;
 import org.apache.lucene.facet.LabelAndValue;
-import org.apache.lucene.facet.taxonomy.TaxonomyReader;
-import org.apache.lucene.facet.taxonomy.TaxonomyWriter;
 import org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader;
 import org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter;
 import org.apache.lucene.index.DirectoryReader;
@@ -261,7 +259,7 @@ public class TestTaxonomyFacetCounts2 extends FacetTestCase {
     // segment w/ categories and some content
     indexDocsWithFacetsAndSomeTerms(indexWriter, taxoWriter, allExpectedCounts);
 
-    indexWriter.shutdown();
+    indexWriter.close();
     IOUtils.close(taxoWriter);
   }
   
diff --git lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetSumValueSource.java lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetSumValueSource.java
index c3d8c7f..9c32685 100644
--- lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetSumValueSource.java
+++ lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetSumValueSource.java
@@ -106,7 +106,7 @@ public class TestTaxonomyFacetSumValueSource extends FacetTestCase {
 
     // NRT open
     IndexSearcher searcher = newSearcher(writer.getReader());
-    writer.shutdown();
+    writer.close();
 
     // NRT open
     TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);
@@ -172,7 +172,7 @@ public class TestTaxonomyFacetSumValueSource extends FacetTestCase {
 
     // NRT open
     IndexSearcher searcher = newSearcher(writer.getReader());
-    writer.shutdown();
+    writer.close();
 
     // NRT open
     TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);
@@ -215,7 +215,7 @@ public class TestTaxonomyFacetSumValueSource extends FacetTestCase {
 
     // NRT open
     IndexSearcher searcher = newSearcher(writer.getReader());
-    writer.shutdown();
+    writer.close();
 
     // NRT open
     TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);
@@ -279,7 +279,7 @@ public class TestTaxonomyFacetSumValueSource extends FacetTestCase {
     int expected = (int) (td.getMaxScore() * td.totalHits);
     assertEquals(expected, facets.getSpecificValue("dim", "a").intValue());
 
-    iw.shutdown();
+    iw.close();
     IOUtils.close(taxoWriter, taxoReader, taxoDir, r, indexDir);
   }
   
@@ -305,7 +305,7 @@ public class TestTaxonomyFacetSumValueSource extends FacetTestCase {
     Facets facets = new TaxonomyFacetSumValueSource(taxoReader, config, sfc, new LongFieldSource("price"));
     assertEquals("dim=a path=[] value=10.0 childCount=2\n  1 (6.0)\n  0 (4.0)\n", facets.getTopChildren(10, "a").toString());
 
-    iw.shutdown();
+    iw.close();
     IOUtils.close(taxoWriter, taxoReader, taxoDir, r, indexDir);
   }
 
@@ -357,7 +357,7 @@ public class TestTaxonomyFacetSumValueSource extends FacetTestCase {
     
     assertEquals("dim=a path=[] value=10.0 childCount=2\n  1 (6.0)\n  0 (4.0)\n", facets.getTopChildren(10, "a").toString());
 
-    iw.shutdown();
+    iw.close();
     IOUtils.close(taxoWriter, taxoReader, taxoDir, r, indexDir);
   }
 
@@ -388,7 +388,7 @@ public class TestTaxonomyFacetSumValueSource extends FacetTestCase {
     
     assertEquals("dim=a path=[] value=10.0 childCount=2\n  1 (6.0)\n  0 (4.0)\n", facets.getTopChildren(10, "a").toString());
 
-    iw.shutdown();
+    iw.close();
     IOUtils.close(taxoWriter, taxoReader, taxoDir, r, indexDir);
   }
 
@@ -420,7 +420,7 @@ public class TestTaxonomyFacetSumValueSource extends FacetTestCase {
 
     assertEquals(r.maxDoc(), facets1.getTopChildren(10, "a").value.intValue());
     assertEquals(r.maxDoc(), facets2.getTopChildren(10, "b").value.doubleValue(), 1E-10);
-    iw.shutdown();
+    iw.close();
     IOUtils.close(taxoWriter, taxoReader, taxoDir, r, indexDir);
   }
 
@@ -517,7 +517,7 @@ public class TestTaxonomyFacetSumValueSource extends FacetTestCase {
       assertFloatValuesEquals(expected, actual);
     }
 
-    w.shutdown();
+    w.close();
     IOUtils.close(tw, searcher.getIndexReader(), tr, indexDir, taxoDir);
   }
 }
diff --git lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestConcurrentFacetedIndexing.java lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestConcurrentFacetedIndexing.java
index 1fade1c..679f6a8 100644
--- lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestConcurrentFacetedIndexing.java
+++ lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestConcurrentFacetedIndexing.java
@@ -153,7 +153,7 @@ public class TestConcurrentFacetedIndexing extends FacetTestCase {
       }
     }
 
-    iw.shutdown();
+    iw.close();
     IOUtils.close(tw, tr, taxoDir, indexDir);
   }
 
diff --git lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader.java lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader.java
index 623af36..edf10f4 100644
--- lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader.java
+++ lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader.java
@@ -260,7 +260,7 @@ public class TestDirectoryTaxonomyReader extends FacetTestCase {
     // hold onto IW to forceMerge
     // note how we don't close it, since DTW will close it.
     final IndexWriter iw = new IndexWriter(dir,
-        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))
+        new IndexWriterConfig(new MockAnalyzer(random()))
             .setMergePolicy(new LogByteSizeMergePolicy()));
     DirectoryTaxonomyWriter writer = new DirectoryTaxonomyWriter(dir) {
       @Override
@@ -303,7 +303,7 @@ public class TestDirectoryTaxonomyReader extends FacetTestCase {
     // hold onto IW to forceMerge
     // note how we don't close it, since DTW will close it.
     final IndexWriter iw = new IndexWriter(dir,
-        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))
+        new IndexWriterConfig(new MockAnalyzer(random()))
             .setMergePolicy(new LogByteSizeMergePolicy()));
     DirectoryTaxonomyWriter writer = new DirectoryTaxonomyWriter(dir) {
       @Override
diff --git lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter.java lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter.java
index 1293de4..762e5eb 100644
--- lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter.java
+++ lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter.java
@@ -30,7 +30,6 @@ import org.apache.lucene.store.AlreadyClosedException;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.IOUtils;
 import org.apache.lucene.util.TestUtil;
-import org.apache.lucene.util.TestUtil;
 import org.junit.Test;
 
 /*
@@ -225,7 +224,7 @@ public class TestDirectoryTaxonomyWriter extends FacetTestCase {
     Directory dir = newDirectory();
     
     // create an empty index first, so that DirTaxoWriter initializes indexEpoch to 1.
-    new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, null)).shutdown();
+    new IndexWriter(dir, new IndexWriterConfig(null)).close();
     
     DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(dir, OpenMode.CREATE_OR_APPEND, NO_OP_CACHE);
     taxoWriter.close();
@@ -466,7 +465,7 @@ public class TestDirectoryTaxonomyWriter extends FacetTestCase {
     // when too large components were allowed to be added, this resulted in a new added category
     assertEquals(ordinal, taxoWriter.addCategory(cp));
 
-    indexWriter.shutdown();
+    indexWriter.close();
     IOUtils.close(taxoWriter);
     
     DirectoryReader indexReader = DirectoryReader.open(indexDir);
diff --git lucene/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest.java lucene/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest.java
index 3bc5319..fbb5723 100644
--- lucene/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest.java
+++ lucene/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest.java
@@ -34,20 +34,17 @@ import org.apache.lucene.document.Field;
 import org.apache.lucene.document.IntField;
 import org.apache.lucene.document.NumericDocValuesField;
 import org.apache.lucene.document.SortedDocValuesField;
-import org.apache.lucene.document.TextField;
 import org.apache.lucene.index.DirectoryReader;
 import org.apache.lucene.index.FieldInfo.DocValuesType;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.MultiDocValues;
 import org.apache.lucene.index.NumericDocValues;
 import org.apache.lucene.index.RandomIndexWriter;
-import org.apache.lucene.index.SlowCompositeReaderWrapper;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.queries.function.valuesource.BytesRefFieldSource;
 import org.apache.lucene.search.DocIdSetIterator;
 import org.apache.lucene.search.IndexSearcher;
-import org.apache.lucene.search.QueryUtils;
 import org.apache.lucene.search.ScoreDoc;
 import org.apache.lucene.search.Sort;
 import org.apache.lucene.search.SortField;
@@ -137,7 +134,7 @@ public class AllGroupHeadsCollectorTest extends LuceneTestCase {
     IndexReader reader = w.getReader();
     IndexSearcher indexSearcher = newSearcher(reader);
 
-    w.shutdown();
+    w.close();
     int maxDoc = reader.maxDoc();
 
     Sort sortWithinGroup = new Sort(new SortField("id_1", SortField.Type.INT, true));
@@ -288,7 +285,7 @@ public class AllGroupHeadsCollectorTest extends LuceneTestCase {
       }
 
       final DirectoryReader r = w.getReader();
-      w.shutdown();
+      w.close();
 
       final NumericDocValues docIdToFieldId = MultiDocValues.getNumericValues(r, "id");
       final int[] fieldIdToDocID = new int[numDocs];
diff --git lucene/grouping/src/test/org/apache/lucene/search/grouping/AllGroupsCollectorTest.java lucene/grouping/src/test/org/apache/lucene/search/grouping/AllGroupsCollectorTest.java
index 8dcdd50..7b72864 100644
--- lucene/grouping/src/test/org/apache/lucene/search/grouping/AllGroupsCollectorTest.java
+++ lucene/grouping/src/test/org/apache/lucene/search/grouping/AllGroupsCollectorTest.java
@@ -101,7 +101,7 @@ public class AllGroupsCollectorTest extends LuceneTestCase {
     w.addDocument(doc);
 
     IndexSearcher indexSearcher = newSearcher(w.getReader());
-    w.shutdown();
+    w.close();
 
     AbstractAllGroupsCollector<?> allGroupsCollector = createRandomCollector(groupField);
     indexSearcher.search(new TermQuery(new Term("content", "random")), allGroupsCollector);
diff --git lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest.java lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest.java
index a8cf987..adea0dd 100644
--- lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest.java
+++ lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest.java
@@ -128,7 +128,7 @@ public class DistinctValuesCollectorTest extends AbstractGroupingTestCase {
     w.addDocument(doc);
 
     IndexSearcher indexSearcher = newSearcher(w.getReader());
-    w.shutdown();
+    w.close();
 
     Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> cmp = new Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>>() {
 
@@ -460,7 +460,7 @@ public class DistinctValuesCollectorTest extends AbstractGroupingTestCase {
       }
     }
 
-    w.shutdown();
+    w.close();
     return new IndexContext(dir, reader, searchTermToGroupCounts, contentStrings.toArray(new String[contentStrings.size()]));
   }
 
diff --git lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest.java lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest.java
index 732d4fb..277c594 100644
--- lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest.java
+++ lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest.java
@@ -275,7 +275,7 @@ public class GroupFacetCollectorTest extends AbstractGroupingTestCase {
     assertEquals("15", entries.get(1).getValue().utf8ToString());
     assertEquals(2, entries.get(1).getCount());
 
-    w.shutdown();
+    w.close();
     indexSearcher.getIndexReader().close();
     dir.close();
   }
@@ -346,7 +346,7 @@ public class GroupFacetCollectorTest extends AbstractGroupingTestCase {
     w.addDocument(doc);
     w.commit();
 
-    w.shutdown();
+    w.close();
     IndexSearcher indexSearcher = newSearcher(DirectoryReader.open(dir));
     AbstractGroupFacetCollector groupedAirportFacetCollector = createRandomCollector(groupField + "_dv", "airport", null, true);
     indexSearcher.search(new MatchAllDocsQuery(), groupedAirportFacetCollector);
@@ -633,7 +633,7 @@ public class GroupFacetCollectorTest extends AbstractGroupingTestCase {
     }
 
     DirectoryReader reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
 
     return new IndexContext(searchTermToFacetToGroups, reader, numDocs, dir, facetWithMostGroups, numGroups, contentBrs, uniqueFacetValues);
   }
diff --git lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest.java lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest.java
index 66462a1..4283490 100644
--- lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest.java
+++ lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest.java
@@ -118,7 +118,7 @@ public class GroupingSearchTest extends LuceneTestCase {
     w.addDocument(doc);
 
     IndexSearcher indexSearcher = newSearcher(w.getReader());
-    w.shutdown();
+    w.close();
 
     Sort groupSort = Sort.RELEVANCE;
     GroupingSearch groupingSearch = createRandomGroupingSearch(groupField, groupSort, 5, canUseIDV);
@@ -232,7 +232,7 @@ public class GroupingSearchTest extends LuceneTestCase {
     w.addDocument(doc);
 
     IndexSearcher indexSearcher = newSearcher(w.getReader());
-    w.shutdown();
+    w.close();
 
     GroupingSearch gs = new GroupingSearch("group");
     gs.setAllGroups(true);
diff --git lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping.java lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping.java
index 6835f09..77fc360 100644
--- lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping.java
+++ lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping.java
@@ -119,7 +119,7 @@ public class TestGrouping extends LuceneTestCase {
     w.addDocument(doc);
 
     IndexSearcher indexSearcher = newSearcher(w.getReader());
-    w.shutdown();
+    w.close();
 
     final Sort groupSort = Sort.RELEVANCE;
 
@@ -593,7 +593,7 @@ public class TestGrouping extends LuceneTestCase {
     }
 
     final DirectoryReader r = w.getReader();
-    w.shutdown();
+    w.close();
 
     return r;
   }
@@ -739,7 +739,7 @@ public class TestGrouping extends LuceneTestCase {
       System.arraycopy(groupDocs, 0, groupDocsByID, 0, groupDocs.length);
 
       final DirectoryReader r = w.getReader();
-      w.shutdown();
+      w.close();
 
       final NumericDocValues docIDToID = MultiDocValues.getNumericValues(r, "id");
       DirectoryReader rBlocks = null;
diff --git lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterPhraseTest.java lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterPhraseTest.java
index 4b278cc..7a2c6d3 100644
--- lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterPhraseTest.java
+++ lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterPhraseTest.java
@@ -35,8 +35,6 @@ import org.apache.lucene.index.DirectoryReader;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.IndexWriter;
 import org.apache.lucene.index.Term;
-import org.apache.lucene.search.LeafCollector;
-import org.apache.lucene.search.Collector;
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.PhraseQuery;
 import org.apache.lucene.search.Query;
@@ -65,7 +63,7 @@ public class HighlighterPhraseTest extends LuceneTestCase {
       document.add(new Field(FIELD, new TokenStreamConcurrent(), customType));
       indexWriter.addDocument(document);
     } finally {
-      indexWriter.shutdown();
+      indexWriter.close();
     }
     final IndexReader indexReader = DirectoryReader.open(directory);
     try {
@@ -107,7 +105,7 @@ public class HighlighterPhraseTest extends LuceneTestCase {
       document.add(new Field(FIELD, new TokenStreamConcurrent(), customType));
       indexWriter.addDocument(document);
     } finally {
-      indexWriter.shutdown();
+      indexWriter.close();
     }
     final IndexReader indexReader = DirectoryReader.open(directory);
     try {
@@ -175,7 +173,7 @@ public class HighlighterPhraseTest extends LuceneTestCase {
       document.add(new Field(FIELD, new TokenStreamSparse(), customType));
       indexWriter.addDocument(document);
     } finally {
-      indexWriter.shutdown();
+      indexWriter.close();
     }
     final IndexReader indexReader = DirectoryReader.open(directory);
     try {
@@ -216,7 +214,7 @@ public class HighlighterPhraseTest extends LuceneTestCase {
       document.add(new Field(FIELD, TEXT, customType));
       indexWriter.addDocument(document);
     } finally {
-      indexWriter.shutdown();
+      indexWriter.close();
     }
     final IndexReader indexReader = DirectoryReader.open(directory);
     try {
@@ -255,7 +253,7 @@ public class HighlighterPhraseTest extends LuceneTestCase {
       document.add(new Field(FIELD, new TokenStreamSparse(), customType));
       indexWriter.addDocument(document);
     } finally {
-      indexWriter.shutdown();
+      indexWriter.close();
     }
     final IndexReader indexReader = DirectoryReader.open(directory);
     try {
diff --git lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java
index 3601dff..daa609d 100644
--- lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java
+++ lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java
@@ -19,7 +19,6 @@ package org.apache.lucene.search.highlight;
 
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
-import java.io.Reader;
 import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -1770,21 +1769,21 @@ public class HighlighterTest extends BaseTokenStreamTestCase implements Formatte
   }
   
   private void makeIndex() throws IOException {
-    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));
+    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));
     writer.addDocument( doc( "t_text1", "random words for highlighting tests del" ) );
     writer.addDocument( doc( "t_text1", "more random words for second field del" ) );
     writer.addDocument( doc( "t_text1", "random words for highlighting tests del" ) );
     writer.addDocument( doc( "t_text1", "more random words for second field" ) );
     writer.forceMerge(1);
-    writer.shutdown();
+    writer.close();
   }
   
   private void deleteDocument() throws IOException {
-    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)).setOpenMode(OpenMode.APPEND));
+    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)).setOpenMode(OpenMode.APPEND));
     writer.deleteDocuments( new Term( "t_text1", "del" ) );
     // To see negative idf, keep comment the following line
     //writer.forceMerge(1);
-    writer.shutdown();
+    writer.close();
   }
   
   private void searchIndex() throws IOException, InvalidTokenOffsetsException {
@@ -1903,7 +1902,7 @@ public class HighlighterTest extends BaseTokenStreamTestCase implements Formatte
     writer.addDocument(doc, analyzer);
 
     writer.forceMerge(1);
-    writer.shutdown();
+    writer.close();
     reader = DirectoryReader.open(ramDir);
     numHighlights = 0;
   }
diff --git lucene/highlighter/src/test/org/apache/lucene/search/highlight/TokenSourcesTest.java lucene/highlighter/src/test/org/apache/lucene/search/highlight/TokenSourcesTest.java
index 4d804f1..6d68ea2 100644
--- lucene/highlighter/src/test/org/apache/lucene/search/highlight/TokenSourcesTest.java
+++ lucene/highlighter/src/test/org/apache/lucene/search/highlight/TokenSourcesTest.java
@@ -101,7 +101,7 @@ public class TokenSourcesTest extends LuceneTestCase {
       document.add(new Field(FIELD, new OverlappingTokenStream(), customType));
       indexWriter.addDocument(document);
     } finally {
-      indexWriter.shutdown();
+      indexWriter.close();
     }
     final IndexReader indexReader = DirectoryReader.open(directory);
     assertEquals(1, indexReader.numDocs());
@@ -146,7 +146,7 @@ public class TokenSourcesTest extends LuceneTestCase {
       document.add(new Field(FIELD, new OverlappingTokenStream(), customType));
       indexWriter.addDocument(document);
     } finally {
-      indexWriter.shutdown();
+      indexWriter.close();
     }
     final IndexReader indexReader = DirectoryReader.open(directory);
     try {
@@ -190,7 +190,7 @@ public class TokenSourcesTest extends LuceneTestCase {
       document.add(new Field(FIELD, new OverlappingTokenStream(), customType));
       indexWriter.addDocument(document);
     } finally {
-      indexWriter.shutdown();
+      indexWriter.close();
     }
     final IndexReader indexReader = DirectoryReader.open(directory);
     try {
@@ -234,7 +234,7 @@ public class TokenSourcesTest extends LuceneTestCase {
       document.add(new Field(FIELD, new OverlappingTokenStream(), customType));
       indexWriter.addDocument(document);
     } finally {
-      indexWriter.shutdown();
+      indexWriter.close();
     }
     final IndexReader indexReader = DirectoryReader.open(directory);
     try {
@@ -278,7 +278,7 @@ public class TokenSourcesTest extends LuceneTestCase {
       document.add(new Field(FIELD, new OverlappingTokenStream(), customType));
       indexWriter.addDocument(document);
     } finally {
-      indexWriter.shutdown();
+      indexWriter.close();
     }
     final IndexReader indexReader = DirectoryReader.open(directory);
     try {
@@ -332,7 +332,7 @@ public class TokenSourcesTest extends LuceneTestCase {
     writer.addDocument(doc);
   
     IndexReader reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
     assertEquals(1, reader.numDocs());
 
     for(int i=0;i<2;i++) {
diff --git lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestMultiTermHighlighting.java lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestMultiTermHighlighting.java
index 548fe92..741fd25 100644
--- lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestMultiTermHighlighting.java
+++ lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestMultiTermHighlighting.java
@@ -81,7 +81,7 @@ public class TestMultiTermHighlighting extends LuceneTestCase {
     iw.addDocument(doc);
     
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     
     IndexSearcher searcher = newSearcher(ir);
     PostingsHighlighter highlighter = new PostingsHighlighter() {
@@ -133,7 +133,7 @@ public class TestMultiTermHighlighting extends LuceneTestCase {
     iw.addDocument(doc);
     
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     
     IndexSearcher searcher = newSearcher(ir);
     PostingsHighlighter highlighter = new PostingsHighlighter() {
@@ -185,7 +185,7 @@ public class TestMultiTermHighlighting extends LuceneTestCase {
     iw.addDocument(doc);
     
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     
     IndexSearcher searcher = newSearcher(ir);
     PostingsHighlighter highlighter = new PostingsHighlighter() {
@@ -237,7 +237,7 @@ public class TestMultiTermHighlighting extends LuceneTestCase {
     iw.addDocument(doc);
     
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     
     IndexSearcher searcher = newSearcher(ir);
     PostingsHighlighter highlighter = new PostingsHighlighter() {
@@ -298,7 +298,7 @@ public class TestMultiTermHighlighting extends LuceneTestCase {
     iw.addDocument(doc);
     
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     
     IndexSearcher searcher = newSearcher(ir);
     PostingsHighlighter highlighter = new PostingsHighlighter() {
@@ -408,7 +408,7 @@ public class TestMultiTermHighlighting extends LuceneTestCase {
     iw.addDocument(doc);
     
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     
     IndexSearcher searcher = newSearcher(ir);
     PostingsHighlighter highlighter = new PostingsHighlighter() {
@@ -461,7 +461,7 @@ public class TestMultiTermHighlighting extends LuceneTestCase {
     iw.addDocument(doc);
 
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
 
     IndexSearcher searcher = newSearcher(ir);
     PostingsHighlighter highlighter = new PostingsHighlighter() {
@@ -504,7 +504,7 @@ public class TestMultiTermHighlighting extends LuceneTestCase {
     iw.addDocument(doc);
 
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
 
     IndexSearcher searcher = newSearcher(ir);
     PostingsHighlighter highlighter = new PostingsHighlighter() {
@@ -545,7 +545,7 @@ public class TestMultiTermHighlighting extends LuceneTestCase {
     iw.addDocument(doc);
     
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     
     IndexSearcher searcher = newSearcher(ir);
     PostingsHighlighter highlighter = new PostingsHighlighter() {
@@ -587,7 +587,7 @@ public class TestMultiTermHighlighting extends LuceneTestCase {
     iw.addDocument(doc);
     
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     
     IndexSearcher searcher = newSearcher(ir);
     PostingsHighlighter highlighter = new PostingsHighlighter() {
@@ -628,7 +628,7 @@ public class TestMultiTermHighlighting extends LuceneTestCase {
     iw.addDocument(doc);
     
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     
     IndexSearcher searcher = newSearcher(ir);
     PostingsHighlighter highlighter = new PostingsHighlighter() {
@@ -670,7 +670,7 @@ public class TestMultiTermHighlighting extends LuceneTestCase {
     iw.addDocument(doc);
     
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     
     IndexSearcher searcher = newSearcher(ir);
     PostingsHighlighter highlighter = new PostingsHighlighter() {
@@ -712,7 +712,7 @@ public class TestMultiTermHighlighting extends LuceneTestCase {
     iw.addDocument(doc);
     
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     
     IndexSearcher searcher = newSearcher(ir);
     PostingsHighlighter highlighter = new PostingsHighlighter() {
@@ -755,7 +755,7 @@ public class TestMultiTermHighlighting extends LuceneTestCase {
     iw.addDocument(doc);
     
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     
     IndexSearcher searcher = newSearcher(ir);
     PostingsHighlighter highlighter = new PostingsHighlighter() {
@@ -797,7 +797,7 @@ public class TestMultiTermHighlighting extends LuceneTestCase {
     iw.addDocument(doc);
     
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     
     IndexSearcher searcher = newSearcher(ir);
     PostingsHighlighter highlighter = new PostingsHighlighter() {
diff --git lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter.java lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter.java
index a496c71..d920f28 100644
--- lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter.java
+++ lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter.java
@@ -71,7 +71,7 @@ public class TestPostingsHighlighter extends LuceneTestCase {
     iw.addDocument(doc);
     
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     
     IndexSearcher searcher = newSearcher(ir);
     PostingsHighlighter highlighter = new PostingsHighlighter();
@@ -139,7 +139,7 @@ public class TestPostingsHighlighter extends LuceneTestCase {
     iw.addDocument(doc);
     
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     
     IndexSearcher searcher = newSearcher(ir);
     
@@ -174,7 +174,7 @@ public class TestPostingsHighlighter extends LuceneTestCase {
     iw.addDocument(doc);
     
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     
     IndexSearcher searcher = newSearcher(ir);
     PostingsHighlighter highlighter = new PostingsHighlighter();
@@ -209,7 +209,7 @@ public class TestPostingsHighlighter extends LuceneTestCase {
     iw.addDocument(doc);
     
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     
     IndexSearcher searcher = newSearcher(ir);
     PostingsHighlighter highlighter = new PostingsHighlighter();
@@ -246,7 +246,7 @@ public class TestPostingsHighlighter extends LuceneTestCase {
     iw.addDocument(doc);
     
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     
     IndexSearcher searcher = newSearcher(ir);
     PostingsHighlighter highlighter = new PostingsHighlighter(40);
@@ -284,7 +284,7 @@ public class TestPostingsHighlighter extends LuceneTestCase {
     iw.addDocument(doc);
     
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     
     IndexSearcher searcher = newSearcher(ir);
     PostingsHighlighter highlighter = new PostingsHighlighter();
@@ -321,7 +321,7 @@ public class TestPostingsHighlighter extends LuceneTestCase {
     iw.addDocument(doc);
     
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     
     IndexSearcher searcher = newSearcher(ir);
     PostingsHighlighter highlighter = new PostingsHighlighter();
@@ -358,7 +358,7 @@ public class TestPostingsHighlighter extends LuceneTestCase {
     iw.addDocument(doc);
     
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     
     IndexSearcher searcher = newSearcher(ir);
     PostingsHighlighter highlighter = new PostingsHighlighter();
@@ -396,7 +396,7 @@ public class TestPostingsHighlighter extends LuceneTestCase {
     iw.addDocument(doc);
     
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     
     IndexSearcher searcher = newSearcher(ir);
     PostingsHighlighter highlighter = new PostingsHighlighter();
@@ -441,7 +441,7 @@ public class TestPostingsHighlighter extends LuceneTestCase {
     document.add(body);
     iw.addDocument(document);
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     IndexSearcher searcher = newSearcher(ir);
     PhraseQuery query = new PhraseQuery();
     query.add(new Term("body", "buddhist"));
@@ -471,7 +471,7 @@ public class TestPostingsHighlighter extends LuceneTestCase {
     document.add(body);
     iw.addDocument(document);
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     IndexSearcher searcher = newSearcher(ir);
     PhraseQuery query = new PhraseQuery();
     query.add(new Term("body", "curious"));
@@ -501,7 +501,7 @@ public class TestPostingsHighlighter extends LuceneTestCase {
     document.add(body);
     iw.addDocument(document);
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     IndexSearcher searcher = newSearcher(ir);
     BooleanQuery query = new BooleanQuery();
     query.add(new TermQuery(new Term("body", "porter")), BooleanClause.Occur.SHOULD);
@@ -534,7 +534,7 @@ public class TestPostingsHighlighter extends LuceneTestCase {
     iw.addDocument(doc);
     
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     
     IndexSearcher searcher = newSearcher(ir);
     PostingsHighlighter highlighter = new PostingsHighlighter();
@@ -560,7 +560,7 @@ public class TestPostingsHighlighter extends LuceneTestCase {
     document.add(body);
     iw.addDocument(document);
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     IndexSearcher searcher = newSearcher(ir);
     BooleanQuery query = new BooleanQuery();
     query.add(new TermQuery(new Term("body", "terms")), BooleanClause.Occur.SHOULD);
@@ -593,7 +593,7 @@ public class TestPostingsHighlighter extends LuceneTestCase {
     iw.addDocument(doc);
     
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     
     IndexSearcher searcher = newSearcher(ir);
     PostingsHighlighter highlighter = new PostingsHighlighter(10000) {
@@ -631,7 +631,7 @@ public class TestPostingsHighlighter extends LuceneTestCase {
     iw.addDocument(doc);
     
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     
     IndexSearcher searcher = newSearcher(ir);
     PostingsHighlighter highlighter = new PostingsHighlighter();
@@ -667,7 +667,7 @@ public class TestPostingsHighlighter extends LuceneTestCase {
     iw.addDocument(doc);
     
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     
     IndexSearcher searcher = newSearcher(ir);
 
@@ -715,7 +715,7 @@ public class TestPostingsHighlighter extends LuceneTestCase {
     iw.addDocument(doc);
     
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     
     IndexSearcher searcher = newSearcher(ir);
     PostingsHighlighter highlighter = new PostingsHighlighter();
@@ -746,7 +746,7 @@ public class TestPostingsHighlighter extends LuceneTestCase {
     iw.addDocument(doc);
     
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     
     IndexSearcher searcher = newSearcher(ir);
     PostingsHighlighter highlighter = new PostingsHighlighter() {
@@ -782,7 +782,7 @@ public class TestPostingsHighlighter extends LuceneTestCase {
     iw.addDocument(doc);
     
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     
     IndexSearcher searcher = newSearcher(ir);
     PostingsHighlighter highlighter = new PostingsHighlighter(10000) {
@@ -818,7 +818,7 @@ public class TestPostingsHighlighter extends LuceneTestCase {
     iw.addDocument(doc);
     
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     
     IndexSearcher searcher = newSearcher(ir);
     PostingsHighlighter highlighter = new PostingsHighlighter();
@@ -851,7 +851,7 @@ public class TestPostingsHighlighter extends LuceneTestCase {
     iw.addDocument(doc);
     
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     
     IndexSearcher searcher = newSearcher(ir);
     PostingsHighlighter highlighter = new PostingsHighlighter();
@@ -887,7 +887,7 @@ public class TestPostingsHighlighter extends LuceneTestCase {
     iw.addDocument(doc);
     
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     
     IndexSearcher searcher = newSearcher(ir);
     PostingsHighlighter highlighter = new PostingsHighlighter();
@@ -930,7 +930,7 @@ public class TestPostingsHighlighter extends LuceneTestCase {
     }
 
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     
     IndexSearcher searcher = newSearcher(ir);
     PostingsHighlighter highlighter = new PostingsHighlighter();
@@ -973,7 +973,7 @@ public class TestPostingsHighlighter extends LuceneTestCase {
     iw.addDocument(doc);
     
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     
     IndexSearcher searcher = newSearcher(ir);
     PostingsHighlighter highlighter = new PostingsHighlighter();
@@ -1005,7 +1005,7 @@ public class TestPostingsHighlighter extends LuceneTestCase {
     iw.addDocument(doc);
     
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     
     IndexSearcher searcher = newSearcher(ir);
     PostingsHighlighter highlighter = new PostingsHighlighter() {
@@ -1048,7 +1048,7 @@ public class TestPostingsHighlighter extends LuceneTestCase {
     iw.addDocument(doc);
     
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     
     IndexSearcher searcher = newSearcher(ir);
     PostingsHighlighter highlighter = new PostingsHighlighter() {
@@ -1086,7 +1086,7 @@ public class TestPostingsHighlighter extends LuceneTestCase {
     iw.addDocument(doc);
     
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     
     IndexSearcher searcher = newSearcher(ir);
     PostingsHighlighter highlighter = new PostingsHighlighter() {
diff --git lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighterRanking.java lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighterRanking.java
index 26af9b6..78060c3 100644
--- lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighterRanking.java
+++ lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighterRanking.java
@@ -87,7 +87,7 @@ public class TestPostingsHighlighterRanking extends LuceneTestCase {
     for (int i = 0; i < numDocs; i++) {
       checkDocument(searcher, i, maxTopN);
     }
-    iw.shutdown();
+    iw.close();
     ir.close();
     dir.close();
   }
@@ -262,7 +262,7 @@ public class TestPostingsHighlighterRanking extends LuceneTestCase {
     iw.addDocument(doc);
     
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     
     IndexSearcher searcher = newSearcher(ir);
     PostingsHighlighter highlighter = new PostingsHighlighter(10000) {
@@ -301,7 +301,7 @@ public class TestPostingsHighlighterRanking extends LuceneTestCase {
     iw.addDocument(doc);
     
     IndexReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     
     IndexSearcher searcher = newSearcher(ir);
     PostingsHighlighter highlighter = new PostingsHighlighter(10000) {
diff --git lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/AbstractTestCase.java lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/AbstractTestCase.java
index cfeceb9..385fa74 100644
--- lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/AbstractTestCase.java
+++ lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/AbstractTestCase.java
@@ -18,7 +18,6 @@ package org.apache.lucene.search.vectorhighlight;
  */
 
 import java.io.IOException;
-import java.io.Reader;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
@@ -349,8 +348,7 @@ public abstract class AbstractTestCase extends LuceneTestCase {
   
   // make 1 doc with multi valued field
   protected void make1dmfIndex( Analyzer analyzer, String... values ) throws Exception {
-    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(
-        TEST_VERSION_CURRENT, analyzer).setOpenMode(OpenMode.CREATE));
+    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(analyzer).setOpenMode(OpenMode.CREATE));
     Document doc = new Document();
     FieldType customType = new FieldType(TextField.TYPE_STORED);
     customType.setStoreTermVectors(true);
@@ -360,15 +358,14 @@ public abstract class AbstractTestCase extends LuceneTestCase {
       doc.add( new Field( F, value, customType) );
     }
     writer.addDocument( doc );
-    writer.shutdown();
+    writer.close();
     if (reader != null) reader.close();
     reader = DirectoryReader.open(dir);
   }
   
   // make 1 doc with multi valued & not analyzed field
   protected void make1dmfIndexNA( String... values ) throws Exception {
-    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(
-        TEST_VERSION_CURRENT, analyzerK).setOpenMode(OpenMode.CREATE));
+    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(analyzerK).setOpenMode(OpenMode.CREATE));
     Document doc = new Document();
     FieldType customType = new FieldType(TextField.TYPE_STORED);
     customType.setStoreTermVectors(true);
@@ -379,7 +376,7 @@ public abstract class AbstractTestCase extends LuceneTestCase {
       //doc.add( new Field( F, value, Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS ) );
     }
     writer.addDocument( doc );
-    writer.shutdown();
+    writer.close();
     if (reader != null) reader.close();
     reader = DirectoryReader.open(dir);
   }
diff --git lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest.java lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest.java
index 6aaf517..e3f697f 100644
--- lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest.java
+++ lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest.java
@@ -83,7 +83,7 @@ public class FastVectorHighlighterTest extends LuceneTestCase {
     bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, "field", 30, 1);
     assertEquals("a test where <b>foo</b> is highlighed", bestFragments[0]);
     reader.close();
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
   
@@ -128,7 +128,7 @@ public class FastVectorHighlighterTest extends LuceneTestCase {
       assertEquals("first browser war it lost virtually all of its share to <b>Internet Explorer</b> Netscape was discontinued and support for all Netscape browsers", bestFragments[0]);
     }
     reader.close();
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
   
@@ -256,7 +256,7 @@ public class FastVectorHighlighterTest extends LuceneTestCase {
           bestFragments[0]);
     }
     reader.close();
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
 
@@ -301,7 +301,7 @@ public class FastVectorHighlighterTest extends LuceneTestCase {
     assertEquals( "junk junk junk junk junk junk junk junk <b>highlight words together</b> junk junk junk junk junk junk junk junk", fragment );
 
     reader.close();
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
 
@@ -344,7 +344,7 @@ public class FastVectorHighlighterTest extends LuceneTestCase {
     assertEquals("Hello this is a piece of <b>text</b> that is <b>very</b> <b>long</b> and contains too much preamble and the meat is really here which says kennedy has been shot", bestFragments[0]);
 
     reader.close();
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
   
@@ -503,7 +503,7 @@ public class FastVectorHighlighterTest extends LuceneTestCase {
     }
 
     reader.close();
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
   
@@ -566,7 +566,7 @@ public class FastVectorHighlighterTest extends LuceneTestCase {
     assertEquals("<b>Test: http://www.facebook.com</b>", bestFragments[0]);
     
     reader.close();
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
 
@@ -648,7 +648,7 @@ public class FastVectorHighlighterTest extends LuceneTestCase {
     assertEquals( expected, bestFragments[ 0 ] );
 
     reader.close();
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
 
diff --git lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragmentsBuilderTest.java lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragmentsBuilderTest.java
index eb814c5..70a7b87 100644
--- lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragmentsBuilderTest.java
+++ lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragmentsBuilderTest.java
@@ -148,8 +148,7 @@ public class SimpleFragmentsBuilderTest extends AbstractTestCase {
   }
   
   protected void makeUnstoredIndex() throws Exception {
-    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(
-        TEST_VERSION_CURRENT, analyzerW).setOpenMode(OpenMode.CREATE));
+    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(analyzerW).setOpenMode(OpenMode.CREATE));
     Document doc = new Document();
     FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);
     customType.setStoreTermVectors(true);
@@ -158,7 +157,7 @@ public class SimpleFragmentsBuilderTest extends AbstractTestCase {
     doc.add( new Field( F, "aaa", customType) );
     //doc.add( new Field( F, "aaa", Store.NO, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS ) );
     writer.addDocument( doc );
-    writer.shutdown();
+    writer.close();
     if (reader != null) reader.close();
     reader = DirectoryReader.open(dir);
   }
@@ -268,7 +267,7 @@ public class SimpleFragmentsBuilderTest extends AbstractTestCase {
       documents.add(document);
     }
     writer.addDocuments(documents);
-    writer.shutdown();
+    writer.close();
     IndexReader reader = DirectoryReader.open(dir);
 
     try {
diff --git lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java
index 752bed6..68d6856 100644
--- lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java
+++ lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java
@@ -66,7 +66,7 @@ public class TestBlockJoin extends LuceneTestCase {
   
   public void testEmptyChildFilter() throws Exception {
     final Directory dir = newDirectory();
-    final IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));
+    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));
     config.setMergePolicy(NoMergePolicy.INSTANCE);
     // we don't want to merge - since we rely on certain segment setup
     final IndexWriter w = new IndexWriter(dir, config);
@@ -92,7 +92,7 @@ public class TestBlockJoin extends LuceneTestCase {
     }
     
     IndexReader r = DirectoryReader.open(w, random().nextBoolean());
-    w.shutdown();
+    w.close();
     assertTrue(r.leaves().size() > 1);
     IndexSearcher s = new IndexSearcher(r);
     Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term("docType", "resume"))));
@@ -143,7 +143,7 @@ public class TestBlockJoin extends LuceneTestCase {
     w.addDocuments(docs);
     
     IndexReader r = w.getReader();
-    w.shutdown();
+    w.close();
     IndexSearcher s = newSearcher(r);
 
     // Create a filter that defines "parent" documents in the index - in this case resumes
@@ -230,7 +230,7 @@ public class TestBlockJoin extends LuceneTestCase {
     }
 
     IndexReader r = w.getReader();
-    w.shutdown();
+    w.close();
     IndexSearcher s = newSearcher(r);
 
     MultiTermQuery qc = NumericRangeQuery.newIntRange("year", 2007, 2007, true, true);
@@ -295,7 +295,7 @@ public class TestBlockJoin extends LuceneTestCase {
     addSkillless(w);
 
     IndexReader r = w.getReader();
-    w.shutdown();
+    w.close();
     IndexSearcher s = newSearcher(r);
 
     // Create a filter that defines "parent" documents in the index - in this case resumes
@@ -369,7 +369,7 @@ public class TestBlockJoin extends LuceneTestCase {
     final Directory dir = newDirectory();
     final RandomIndexWriter w = new RandomIndexWriter(random(), dir);
     IndexReader r = w.getReader();
-    w.shutdown();
+    w.close();
     IndexSearcher s = newSearcher(r);
     
     ToParentBlockJoinQuery q = new ToParentBlockJoinQuery(new MatchAllDocsQuery(), new QueryWrapperFilter(new MatchAllDocsQuery()), ScoreMode.Avg);
@@ -424,7 +424,7 @@ public class TestBlockJoin extends LuceneTestCase {
 
     s.getIndexReader().close();
     w.deleteDocuments(new Term("skill", "java"));
-    w.shutdown();
+    w.close();
     s = newSearcher(DirectoryReader.open(dir));
 
     topDocs = s.search(q, 10);
@@ -614,9 +614,9 @@ public class TestBlockJoin extends LuceneTestCase {
     }
 
     final IndexReader r = w.getReader();
-    w.shutdown();
+    w.close();
     final IndexReader joinR = joinW.getReader();
-    joinW.shutdown();
+    joinW.close();
 
     if (VERBOSE) {
       System.out.println("TEST: reader=" + r);
@@ -1060,7 +1060,7 @@ public class TestBlockJoin extends LuceneTestCase {
     w.addDocuments(docs);
 
     IndexReader r = w.getReader();
-    w.shutdown();
+    w.close();
     IndexSearcher s = newSearcher(r);
 
     // Create a filter that defines "parent" documents in the index - in this case resumes
@@ -1141,7 +1141,7 @@ public class TestBlockJoin extends LuceneTestCase {
     parentDoc.add(newStringField("parent", "1", Field.Store.NO));
     w.addDocuments(Arrays.asList(childDoc, parentDoc));
     IndexReader r = w.getReader();
-    w.shutdown();
+    w.close();
     IndexSearcher s = newSearcher(r);
     Query tq = new TermQuery(new Term("child", "1"));
     Filter parentFilter = new FixedBitSetCachingWrapperFilter(
@@ -1175,7 +1175,7 @@ public class TestBlockJoin extends LuceneTestCase {
     // Need single seg:
     w.forceMerge(1);
     IndexReader r = w.getReader();
-    w.shutdown();
+    w.close();
     IndexSearcher s = newSearcher(r);
     Query tq = new TermQuery(new Term("child", "2"));
     Filter parentFilter = new FixedBitSetCachingWrapperFilter(
@@ -1208,7 +1208,7 @@ public class TestBlockJoin extends LuceneTestCase {
     addSkillless(w);
 
     IndexReader r = w.getReader();
-    w.shutdown();
+    w.close();
     IndexSearcher s = new IndexSearcher(r);
 
     // Create a filter that defines "parent" documents in the index - in this case resumes
@@ -1312,7 +1312,7 @@ public class TestBlockJoin extends LuceneTestCase {
     w.addDocuments(docs);
     
     IndexReader r = w.getReader();
-    w.shutdown();
+    w.close();
 
     Query childQuery = new TermQuery(new Term("childText", "text"));
     Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term("isParent", "yes"))));
@@ -1376,7 +1376,7 @@ public class TestBlockJoin extends LuceneTestCase {
     w.addDocuments(docs);
     
     IndexReader r = w.getReader();
-    w.shutdown();
+    w.close();
 
     // never matches:
     Query childQuery = new TermQuery(new Term("childText", "bogus"));
@@ -1441,7 +1441,7 @@ public class TestBlockJoin extends LuceneTestCase {
     w.addDocuments(docs);
     
     IndexReader r = w.getReader();
-    w.shutdown();
+    w.close();
 
     // illegally matches parent:
     Query childQuery = new TermQuery(new Term("parentText", "text"));
@@ -1493,7 +1493,7 @@ public class TestBlockJoin extends LuceneTestCase {
     w.addDocuments(Arrays.asList(childDoc, parentDoc));
 
     IndexReader r = w.getReader();
-    w.shutdown();
+    w.close();
     IndexSearcher s = newSearcher(r);
 
     // Create a filter that defines "parent" documents in the index - in this case resumes
diff --git lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinSorting.java lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinSorting.java
index 68ce315..76a46a9 100644
--- lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinSorting.java
+++ lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinSorting.java
@@ -26,7 +26,6 @@ import org.apache.lucene.index.DirectoryReader;
 import org.apache.lucene.index.NoMergePolicy;
 import org.apache.lucene.index.RandomIndexWriter;
 import org.apache.lucene.index.Term;
-import org.apache.lucene.search.CachingWrapperFilter;
 import org.apache.lucene.search.FieldDoc;
 import org.apache.lucene.search.Filter;
 import org.apache.lucene.search.FilteredQuery;
@@ -231,7 +230,7 @@ public class TestBlockJoinSorting extends LuceneTestCase {
     w.addDocument(document);
 
     IndexSearcher searcher = new IndexSearcher(DirectoryReader.open(w.w, false));
-    w.shutdown();
+    w.close();
     Filter parentFilter = new QueryWrapperFilter(new TermQuery(new Term("__type", "parent")));
     Filter childFilter = new QueryWrapperFilter(new PrefixQuery(new Term("field2")));
     ToParentBlockJoinQuery query = new ToParentBlockJoinQuery(
diff --git lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation.java lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation.java
index 5d20b5e..057ec44 100644
--- lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation.java
+++ lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation.java
@@ -62,7 +62,7 @@ public class TestBlockJoinValidation extends LuceneTestCase {
   @Before
   public void before() throws Exception {
     directory = newDirectory();
-    final IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));
+    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));
     final IndexWriter indexWriter = new IndexWriter(directory, config);
     for (int i = 0; i < AMOUNT_OF_SEGMENTS; i++) {
       List<Document> segmentDocs = createDocsForSegment(i);
@@ -70,7 +70,7 @@ public class TestBlockJoinValidation extends LuceneTestCase {
       indexWriter.commit();
     }
     indexReader = DirectoryReader.open(indexWriter, random().nextBoolean());
-    indexWriter.shutdown();
+    indexWriter.close();
     indexSearcher = new IndexSearcher(indexReader);
     parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new WildcardQuery(new Term("parent", "*"))));
   }
diff --git lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil.java lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil.java
index 4f619e2..cd842c1 100644
--- lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil.java
+++ lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil.java
@@ -50,10 +50,8 @@ import org.apache.lucene.index.SortedSetDocValues;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.index.Terms;
 import org.apache.lucene.index.TermsEnum;
-import org.apache.lucene.search.LeafCollector;
 import org.apache.lucene.search.BooleanClause;
 import org.apache.lucene.search.BooleanQuery;
-import org.apache.lucene.search.Collector;
 import org.apache.lucene.search.DocIdSetIterator;
 import org.apache.lucene.search.Explanation;
 import org.apache.lucene.search.IndexSearcher;
@@ -141,7 +139,7 @@ public class TestJoinUtil extends LuceneTestCase {
     w.addDocument(doc);
 
     IndexSearcher indexSearcher = new IndexSearcher(w.getReader());
-    w.shutdown();
+    w.close();
 
     // Search for product
     Query joinQuery =
@@ -208,7 +206,7 @@ public class TestJoinUtil extends LuceneTestCase {
     w.addDocument(doc);
 
     IndexSearcher indexSearcher = new IndexSearcher(w.getReader());
-    w.shutdown();
+    w.close();
 
     // Search for product
     Query joinQuery =
@@ -281,7 +279,7 @@ public class TestJoinUtil extends LuceneTestCase {
     w.forceMerge(1);
 
     IndexSearcher indexSearcher = new IndexSearcher(w.getReader());
-    w.shutdown();
+    w.close();
 
     // Search for product
     Query joinQuery =
@@ -378,7 +376,7 @@ public class TestJoinUtil extends LuceneTestCase {
     w.addDocument(doc);
 
     IndexSearcher indexSearcher = new IndexSearcher(w.getReader());
-    w.shutdown();
+    w.close();
 
     // Search for movie via subtitle
     Query joinQuery =
@@ -445,7 +443,7 @@ public class TestJoinUtil extends LuceneTestCase {
       IndexIterationContext context = createContext(numberOfDocumentsToIndex, w, multipleValuesPerDocument, scoreDocsInOrder);
 
       IndexReader topLevelReader = w.getReader();
-      w.shutdown();
+      w.close();
       for (int searchIter = 1; searchIter <= maxSearchIter; searchIter++) {
         if (VERBOSE) {
           System.out.println("searchIter=" + searchIter);
diff --git lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest.java lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest.java
index 7967fcd..f89ed5a 100644
--- lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest.java
+++ lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest.java
@@ -73,7 +73,6 @@ import org.apache.lucene.util.ByteBlockPool;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.IOUtils;
 import org.apache.lucene.util.LineFileDocs;
-import org.apache.lucene.util.RamUsageEstimator;
 import org.apache.lucene.util.RecyclingByteBlockAllocator;
 import org.apache.lucene.util.TestUtil;
 
@@ -149,14 +148,14 @@ public class MemoryIndexTest extends BaseTokenStreamTestCase {
     Directory ramdir = new RAMDirectory();
     Analyzer analyzer = randomAnalyzer();
     IndexWriter writer = new IndexWriter(ramdir,
-                                         new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer).setCodec(TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat())));
+                                         new IndexWriterConfig(analyzer).setCodec(TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat())));
     Document doc = new Document();
     Field field1 = newTextField("foo", fooField.toString(), Field.Store.NO);
     Field field2 = newTextField("term", termField.toString(), Field.Store.NO);
     doc.add(field1);
     doc.add(field2);
     writer.addDocument(doc);
-    writer.shutdown();
+    writer.close();
     
     memory.addField("foo", fooField.toString(), analyzer);
     memory.addField("term", termField.toString(), analyzer);
@@ -430,7 +429,7 @@ public class MemoryIndexTest extends BaseTokenStreamTestCase {
       Directory dir = newDirectory();
       MockAnalyzer mockAnalyzer = new MockAnalyzer(random());
       mockAnalyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));
-      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), TEST_VERSION_CURRENT, mockAnalyzer));
+      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), mockAnalyzer));
       Document nextDoc = lineFileDocs.nextDoc();
       Document doc = new Document();
       for (Field field : nextDoc.getFields()) {
@@ -443,7 +442,7 @@ public class MemoryIndexTest extends BaseTokenStreamTestCase {
       }
       
       writer.addDocument(doc);
-      writer.shutdown();
+      writer.close();
       for (IndexableField field : doc.indexableFields()) {
           memory.addField(field.name(), ((Field)field).stringValue(), mockAnalyzer);  
       }
@@ -486,10 +485,10 @@ public class MemoryIndexTest extends BaseTokenStreamTestCase {
     doc.add(new Field(field_name, "foo bar foo bar foo", type));
 
     Directory dir = newDirectory();
-    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), TEST_VERSION_CURRENT, mockAnalyzer));
+    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), mockAnalyzer));
     writer.updateDocument(new Term("id", "1"), doc);
     writer.commit();
-    writer.shutdown();
+    writer.close();
     DirectoryReader reader = DirectoryReader.open(dir);
 
     //Index document in Memory index
diff --git lucene/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.java lucene/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.java
index 61489a4..bf1e11a 100644
--- lucene/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.java
+++ lucene/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.java
@@ -95,15 +95,13 @@ public class MultiPassIndexSplitter {
           }
         }
       }
-      IndexWriter w = new IndexWriter(outputs[i], new IndexWriterConfig(
-          version,
-          null)
+      IndexWriter w = new IndexWriter(outputs[i], new IndexWriterConfig(null)
           .setOpenMode(OpenMode.CREATE));
       System.err.println("Writing part " + (i + 1) + " ...");
       // pass the subreaders directly, as our wrapper's numDocs/hasDeletetions are not up-to-date
       final List<? extends FakeDeleteAtomicIndexReader> sr = input.getSequentialSubReaders();
       w.addIndexes(sr.toArray(new IndexReader[sr.size()])); // TODO: maybe take List<IR> here?
-      w.shutdown();
+      w.close();
     }
     System.err.println("Done.");
   }
diff --git lucene/misc/src/java/org/apache/lucene/index/PKIndexSplitter.java lucene/misc/src/java/org/apache/lucene/index/PKIndexSplitter.java
index 8eb15eb..f71db1e 100644
--- lucene/misc/src/java/org/apache/lucene/index/PKIndexSplitter.java
+++ lucene/misc/src/java/org/apache/lucene/index/PKIndexSplitter.java
@@ -29,7 +29,6 @@ import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.Bits;
 import org.apache.lucene.util.FixedBitSet;
 import org.apache.lucene.util.IOUtils;
-import org.apache.lucene.util.Version;
 
 /**
  * Split an index based on a {@link Filter}.
@@ -47,12 +46,12 @@ public class PKIndexSplitter {
    * Split an index based on a {@link Filter}. All documents that match the filter
    * are sent to dir1, remaining ones to dir2.
    */
-  public PKIndexSplitter(Version version, Directory input, Directory dir1, Directory dir2, Filter docsInFirstIndex) {
-    this(input, dir1, dir2, docsInFirstIndex, newDefaultConfig(version), newDefaultConfig(version));
+  public PKIndexSplitter(Directory input, Directory dir1, Directory dir2, Filter docsInFirstIndex) {
+    this(input, dir1, dir2, docsInFirstIndex, newDefaultConfig(), newDefaultConfig());
   }
   
-  private static IndexWriterConfig newDefaultConfig(Version version) {
-    return  new IndexWriterConfig(version, null).setOpenMode(OpenMode.CREATE);
+  private static IndexWriterConfig newDefaultConfig() {
+    return  new IndexWriterConfig(null).setOpenMode(OpenMode.CREATE);
   }
   
   public PKIndexSplitter(Directory input, Directory dir1, 
@@ -70,8 +69,8 @@ public class PKIndexSplitter {
    * and a 'middle' term.  If the middle term is present, it's
    * sent to dir2.
    */
-  public PKIndexSplitter(Version version, Directory input, Directory dir1, Directory dir2, Term midTerm) {
-    this(version, input, dir1, dir2,
+  public PKIndexSplitter(Directory input, Directory dir1, Directory dir2, Term midTerm) {
+    this(input, dir1, dir2,
       new TermRangeFilter(midTerm.field(), null, midTerm.bytes(), true, false));
   }
   
@@ -112,7 +111,7 @@ public class PKIndexSplitter {
       success = true;
     } finally {
       if (success) {
-        w.shutdown();
+        w.close();
       } else {
         IOUtils.closeWhileHandlingException(w);
       }
diff --git lucene/misc/src/java/org/apache/lucene/misc/IndexMergeTool.java lucene/misc/src/java/org/apache/lucene/misc/IndexMergeTool.java
index 5982960..90f1455 100644
--- lucene/misc/src/java/org/apache/lucene/misc/IndexMergeTool.java
+++ lucene/misc/src/java/org/apache/lucene/misc/IndexMergeTool.java
@@ -21,7 +21,6 @@ import org.apache.lucene.index.IndexWriterConfig;
 import org.apache.lucene.index.IndexWriterConfig.OpenMode;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.FSDirectory;
-import org.apache.lucene.util.Version;
 
 import java.io.File;
 import java.io.IOException;
@@ -38,8 +37,7 @@ public class IndexMergeTool {
     }
     FSDirectory mergedIndex = FSDirectory.open(new File(args[0]));
 
-    IndexWriter writer = new IndexWriter(mergedIndex, new IndexWriterConfig(
-        Version.LUCENE_CURRENT, null)
+    IndexWriter writer = new IndexWriter(mergedIndex, new IndexWriterConfig(null)
         .setOpenMode(OpenMode.CREATE));
 
     Directory[] indexes = new Directory[args.length - 1];
@@ -52,7 +50,7 @@ public class IndexMergeTool {
 
     System.out.println("Full merge...");
     writer.forceMerge(1);
-    writer.shutdown();
+    writer.close();
     System.out.println("Done.");
   }
 }
diff --git lucene/misc/src/test/org/apache/lucene/document/TestLazyDocument.java lucene/misc/src/test/org/apache/lucene/document/TestLazyDocument.java
index 4f51741..7b12499 100644
--- lucene/misc/src/test/org/apache/lucene/document/TestLazyDocument.java
+++ lucene/misc/src/test/org/apache/lucene/document/TestLazyDocument.java
@@ -71,7 +71,7 @@ public class TestLazyDocument extends LuceneTestCase {
         writer.addDocument(d);
       }
     } finally {
-      writer.shutdown();
+      writer.close();
     }
   }
 
diff --git lucene/misc/src/test/org/apache/lucene/index/TestIndexSplitter.java lucene/misc/src/test/org/apache/lucene/index/TestIndexSplitter.java
index 7b0c9fe..252abc3 100644
--- lucene/misc/src/test/org/apache/lucene/index/TestIndexSplitter.java
+++ lucene/misc/src/test/org/apache/lucene/index/TestIndexSplitter.java
@@ -24,7 +24,6 @@ import org.apache.lucene.index.IndexWriterConfig.OpenMode;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.MockDirectoryWrapper;
 import org.apache.lucene.util.LuceneTestCase;
-import org.apache.lucene.util.TestUtil;
 
 public class TestIndexSplitter extends LuceneTestCase {
   public void test() throws Exception {
@@ -42,7 +41,7 @@ public class TestIndexSplitter extends LuceneTestCase {
     mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);
     IndexWriter iw = new IndexWriter(
         fsDir,
-        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).
+        new IndexWriterConfig(new MockAnalyzer(random())).
             setOpenMode(OpenMode.CREATE).
             setMergePolicy(mergePolicy)
     );
@@ -64,7 +63,7 @@ public class TestIndexSplitter extends LuceneTestCase {
     DirectoryReader iwReader = iw.getReader();
     assertEquals(3, iwReader.leaves().size());
     iwReader.close();
-    iw.shutdown();
+    iw.close();
     // we should have 2 segments now
     IndexSplitter is = new IndexSplitter(dir);
     String splitSegName = is.infos.info(1).info.name;
diff --git lucene/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter.java lucene/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter.java
index 7e6401b..143c2cd 100644
--- lucene/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter.java
+++ lucene/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter.java
@@ -44,7 +44,7 @@ public class TestMultiPassIndexSplitter extends LuceneTestCase {
     }
     w.commit();
     w.deleteDocuments(new Term("id", "" + (NUM_DOCS-1)));
-    w.shutdown();
+    w.close();
     input = DirectoryReader.open(dir);
   }
   
diff --git lucene/misc/src/test/org/apache/lucene/index/TestPKIndexSplitter.java lucene/misc/src/test/org/apache/lucene/index/TestPKIndexSplitter.java
index dec8807..b615764 100644
--- lucene/misc/src/test/org/apache/lucene/index/TestPKIndexSplitter.java
+++ lucene/misc/src/test/org/apache/lucene/index/TestPKIndexSplitter.java
@@ -48,7 +48,7 @@ public class TestPKIndexSplitter extends LuceneTestCase {
       w.addDocument(doc);
       if (x%3==0) w.commit();
     }
-    w.shutdown();
+    w.close();
     
     final Term midTerm = new Term("id", format.format(11));
     
@@ -59,7 +59,7 @@ public class TestPKIndexSplitter extends LuceneTestCase {
         .setOpenMode(OpenMode.APPEND).setMergePolicy(NoMergePolicy.INSTANCE));
     w.deleteDocuments(midTerm);
     w.deleteDocuments(new Term("id", format.format(2)));
-    w.shutdown();
+    w.close();
     
     checkSplitting(dir, midTerm, 10, 8);
     
diff --git lucene/misc/src/test/org/apache/lucene/index/sorter/IndexSortingTest.java lucene/misc/src/test/org/apache/lucene/index/sorter/IndexSortingTest.java
index 6b6995d..5a3bcdb 100644
--- lucene/misc/src/test/org/apache/lucene/index/sorter/IndexSortingTest.java
+++ lucene/misc/src/test/org/apache/lucene/index/sorter/IndexSortingTest.java
@@ -70,7 +70,7 @@ public class IndexSortingTest extends SorterTestBase {
     IndexWriter writer = new IndexWriter(target, newIndexWriterConfig(null));
     reader = SortingAtomicReader.wrap(reader, sorter);
     writer.addIndexes(reader);
-    writer.shutdown();
+    writer.close();
     reader.close();
     dir.close();
     
diff --git lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase.java lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase.java
index 3142e2f..dafc32a 100644
--- lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase.java
+++ lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase.java
@@ -225,7 +225,7 @@ public abstract class SorterTestBase extends LuceneTestCase {
         writer.deleteDocuments(new Term(ID_FIELD, id.toString()));
       }
     }
-    writer.shutdown();
+    writer.close();
   }
   
   @BeforeClass
diff --git lucene/misc/src/test/org/apache/lucene/index/sorter/TestBlockJoinSorter.java lucene/misc/src/test/org/apache/lucene/index/sorter/TestBlockJoinSorter.java
index da13807..89fd008 100644
--- lucene/misc/src/test/org/apache/lucene/index/sorter/TestBlockJoinSorter.java
+++ lucene/misc/src/test/org/apache/lucene/index/sorter/TestBlockJoinSorter.java
@@ -86,7 +86,7 @@ public class TestBlockJoinSorter extends LuceneTestCase {
     }
     writer.forceMerge(1);
     final DirectoryReader indexReader = writer.getReader();
-    writer.shutdown();
+    writer.close();
 
     final AtomicReader reader = getOnlySegmentReader(indexReader);
     final Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term("parent", "true"))));
diff --git lucene/misc/src/test/org/apache/lucene/index/sorter/TestEarlyTermination.java lucene/misc/src/test/org/apache/lucene/index/sorter/TestEarlyTermination.java
index e165512..fd3b022 100644
--- lucene/misc/src/test/org/apache/lucene/index/sorter/TestEarlyTermination.java
+++ lucene/misc/src/test/org/apache/lucene/index/sorter/TestEarlyTermination.java
@@ -107,7 +107,7 @@ public class TestEarlyTermination extends LuceneTestCase {
   
   private void closeIndex() throws IOException {
     reader.close();
-    iw.shutdown();
+    iw.close();
     dir.close();
   }
 
diff --git lucene/misc/src/test/org/apache/lucene/index/sorter/TestSortingMergePolicy.java lucene/misc/src/test/org/apache/lucene/index/sorter/TestSortingMergePolicy.java
index 27f3e0d..5b752ee 100644
--- lucene/misc/src/test/org/apache/lucene/index/sorter/TestSortingMergePolicy.java
+++ lucene/misc/src/test/org/apache/lucene/index/sorter/TestSortingMergePolicy.java
@@ -145,8 +145,8 @@ public class TestSortingMergePolicy extends LuceneTestCase {
     
     iw1.forceMerge(1);
     iw2.forceMerge(1);
-    iw1.shutdown();
-    iw2.shutdown();
+    iw1.close();
+    iw2.close();
     reader = DirectoryReader.open(dir1);
     sortedReader = DirectoryReader.open(dir2);
   }
diff --git lucene/misc/src/test/org/apache/lucene/misc/TestHighFreqTerms.java lucene/misc/src/test/org/apache/lucene/misc/TestHighFreqTerms.java
index 110126e..fcc9fe7 100644
--- lucene/misc/src/test/org/apache/lucene/misc/TestHighFreqTerms.java
+++ lucene/misc/src/test/org/apache/lucene/misc/TestHighFreqTerms.java
@@ -42,7 +42,7 @@ public class TestHighFreqTerms extends LuceneTestCase {
   public static void setUpClass() throws Exception {
     dir = newDirectory();
     writer = new IndexWriter(dir, newIndexWriterConfig(random(),
-       TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false))
+       new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false))
        .setMaxBufferedDocs(2));
     indexDocs(writer);
     reader = DirectoryReader.open(dir);
@@ -227,7 +227,7 @@ public class TestHighFreqTerms extends LuceneTestCase {
     }
     doc.add(newTextField(rnd, "different_field", content, Field.Store.YES));
     writer.addDocument(doc);
-    writer.shutdown();
+    writer.close();
     
   }
   
diff --git lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds.java lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds.java
index f05cf4c..bd9a42f 100644
--- lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds.java
+++ lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds.java
@@ -80,7 +80,7 @@ public class TestDocTermOrds extends LuceneTestCase {
     w.addDocument(doc);
     
     final IndexReader r = w.getReader();
-    w.shutdown();
+    w.close();
 
     final AtomicReader ar = SlowCompositeReaderWrapper.wrap(r);
     final DocTermOrds dto = new DocTermOrds(ar, ar.getLiveDocs(), "field");
@@ -167,7 +167,7 @@ public class TestDocTermOrds extends LuceneTestCase {
     }
     
     final DirectoryReader r = w.getReader();
-    w.shutdown();
+    w.close();
 
     if (VERBOSE) {
       System.out.println("TEST: reader=" + r);
@@ -264,7 +264,7 @@ public class TestDocTermOrds extends LuceneTestCase {
     }
     
     final DirectoryReader r = w.getReader();
-    w.shutdown();
+    w.close();
 
     if (VERBOSE) {
       System.out.println("TEST: reader=" + r);
@@ -419,7 +419,7 @@ public class TestDocTermOrds extends LuceneTestCase {
     v.setDocument(1);
     assertEquals(1, v.nextOrd());
     
-    iw.shutdown();
+    iw.close();
     r1.close();
     r2.close();
     dir.close();
@@ -439,7 +439,7 @@ public class TestDocTermOrds extends LuceneTestCase {
     iw.addDocument(doc);
     
     iw.forceMerge(1);
-    iw.shutdown();
+    iw.close();
     
     DirectoryReader ir = DirectoryReader.open(dir);
     AtomicReader ar = getOnlySegmentReader(ir);
@@ -480,7 +480,7 @@ public class TestDocTermOrds extends LuceneTestCase {
     iw.addDocument(doc);
     
     iw.forceMerge(1);
-    iw.shutdown();
+    iw.close();
     
     DirectoryReader ir = DirectoryReader.open(dir);
     AtomicReader ar = getOnlySegmentReader(ir);
@@ -530,7 +530,7 @@ public class TestDocTermOrds extends LuceneTestCase {
     iwriter.forceMerge(1);
     
     DirectoryReader ireader = iwriter.getReader();
-    iwriter.shutdown();
+    iwriter.close();
 
     AtomicReader ar = getOnlySegmentReader(ireader);
     SortedSetDocValues dv = FieldCache.DEFAULT.getDocTermOrds(ar, "field", null);
@@ -614,7 +614,7 @@ public class TestDocTermOrds extends LuceneTestCase {
     iw.addDocument(doc);
     
     iw.forceMerge(1);
-    iw.shutdown();
+    iw.close();
     
     DirectoryReader ir = DirectoryReader.open(dir);
     AtomicReader ar = getOnlySegmentReader(ir);
diff --git lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache.java lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache.java
index e8f7597..2f5ceca 100644
--- lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache.java
+++ lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache.java
@@ -119,7 +119,7 @@ public class TestFieldCache extends LuceneTestCase {
     }
     IndexReader r = writer.getReader();
     reader = SlowCompositeReaderWrapper.wrap(r);
-    writer.shutdown();
+    writer.close();
   }
 
   @AfterClass
@@ -290,7 +290,7 @@ public class TestFieldCache extends LuceneTestCase {
   public void testEmptyIndex() throws Exception {
     Directory dir = newDirectory();
     IndexWriter writer= new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())).setMaxBufferedDocs(500));
-    writer.shutdown();
+    writer.close();
     IndexReader r = DirectoryReader.open(dir);
     AtomicReader reader = SlowCompositeReaderWrapper.wrap(r);
     FieldCache.DEFAULT.getTerms(reader, "foobar", true);
@@ -436,7 +436,7 @@ public class TestFieldCache extends LuceneTestCase {
     }
     iw.addDocument(doc);
     DirectoryReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     AtomicReader ar = getOnlySegmentReader(ir);
     
     // Binary type: can be retrieved via getTerms()
@@ -567,7 +567,7 @@ public class TestFieldCache extends LuceneTestCase {
     Document doc = new Document();
     iw.addDocument(doc);
     DirectoryReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     
     AtomicReader ar = getOnlySegmentReader(ir);
     
@@ -625,7 +625,7 @@ public class TestFieldCache extends LuceneTestCase {
     doc.add(new StoredField("bogusbits", "bogus"));
     iw.addDocument(doc);
     DirectoryReader ir = iw.getReader();
-    iw.shutdown();
+    iw.close();
     
     AtomicReader ar = getOnlySegmentReader(ir);
     
@@ -709,7 +709,7 @@ public class TestFieldCache extends LuceneTestCase {
       assertEquals(values[i], longs.get(i));
     }
     reader.close();
-    iw.shutdown();
+    iw.close();
     dir.close();
   }
 
@@ -755,7 +755,7 @@ public class TestFieldCache extends LuceneTestCase {
       assertEquals(values[i], ints.get(i));
     }
     reader.close();
-    iw.shutdown();
+    iw.close();
     dir.close();
   }
 
diff --git lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheReopen.java lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheReopen.java
index 225196e..de5baa7 100644
--- lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheReopen.java
+++ lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheReopen.java
@@ -66,7 +66,7 @@ public class TestFieldCacheReopen extends LuceneTestCase {
     r2.close();
     assertTrue(ints == ints2);
   
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
 }
diff --git lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSanityChecker.java lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSanityChecker.java
index 6672c61..52e5030 100644
--- lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSanityChecker.java
+++ lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSanityChecker.java
@@ -69,8 +69,8 @@ public class TestFieldCacheSanityChecker extends LuceneTestCase {
         wB.addDocument(doc);
       }
     }
-    wA.shutdown();
-    wB.shutdown();
+    wA.close();
+    wB.close();
     DirectoryReader rA = DirectoryReader.open(dirA);
     readerA = SlowCompositeReaderWrapper.wrap(rA);
     readerAclone = SlowCompositeReaderWrapper.wrap(rA);
diff --git lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort.java lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort.java
index 02a9639..541e772 100644
--- lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort.java
+++ lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort.java
@@ -77,7 +77,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     Type type = sortType == SortField.Type.STRING ? Type.SORTED : Type.BINARY;
     IndexReader ir = UninvertingReader.wrap(writer.getReader(), 
                      Collections.singletonMap("value", type));
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     Sort sort = new Sort(new SortField("value", sortType));
@@ -116,7 +116,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     Type type = sortType == SortField.Type.STRING ? Type.SORTED : Type.BINARY;
     IndexReader ir = UninvertingReader.wrap(writer.getReader(), 
                      Collections.singletonMap("value", type));
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     Sort sort = new Sort(new SortField("value", sortType));
@@ -153,7 +153,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     Type type = sortType == SortField.Type.STRING ? Type.SORTED : Type.BINARY;
     IndexReader ir = UninvertingReader.wrap(writer.getReader(), 
                      Collections.singletonMap("value", type));
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     Sort sort = new Sort(new SortField("value", sortType, true));
@@ -192,7 +192,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     Type type = sortType == SortField.Type.STRING ? Type.SORTED : Type.BINARY;
     IndexReader ir = UninvertingReader.wrap(writer.getReader(), 
                      Collections.singletonMap("value", type));
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     SortField sf = new SortField("value", sortType);
@@ -233,7 +233,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     Type type = sortType == SortField.Type.STRING ? Type.SORTED : Type.BINARY;
     IndexReader ir = UninvertingReader.wrap(writer.getReader(), 
                      Collections.singletonMap("value", type));
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     SortField sf = new SortField("value", sortType, true);
@@ -274,7 +274,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     Type type = sortType == SortField.Type.STRING ? Type.SORTED : Type.BINARY;
     IndexReader ir = UninvertingReader.wrap(writer.getReader(), 
                      Collections.singletonMap("value", type));
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     SortField sf = new SortField("value", sortType);
@@ -316,7 +316,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     Type type = sortType == SortField.Type.STRING ? Type.SORTED : Type.BINARY;
     IndexReader ir = UninvertingReader.wrap(writer.getReader(), 
                      Collections.singletonMap("value", type));
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     SortField sf = new SortField("value", sortType, true);
@@ -345,7 +345,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     doc.add(newStringField("value", "bar", Field.Store.NO));
     writer.addDocument(doc);
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     Sort sort = new Sort(SortField.FIELD_DOC);
@@ -371,7 +371,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     doc.add(newStringField("value", "bar", Field.Store.NO));
     writer.addDocument(doc);
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     Sort sort = new Sort(new SortField(null, SortField.Type.DOC, true));
@@ -397,7 +397,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     doc.add(newTextField("value", "foo foo foo foo foo", Field.Store.NO));
     writer.addDocument(doc);
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     Sort sort = new Sort();
@@ -427,7 +427,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     doc.add(newTextField("value", "foo foo foo foo foo", Field.Store.NO));
     writer.addDocument(doc);
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     Sort sort = new Sort(new SortField(null, SortField.Type.SCORE, true));
@@ -460,7 +460,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     writer.addDocument(doc);
     IndexReader ir = UninvertingReader.wrap(writer.getReader(), 
                      Collections.singletonMap("value", Type.INTEGER));
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     Sort sort = new Sort(new SortField("value", SortField.Type.INT));
@@ -490,7 +490,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     writer.addDocument(doc);
     IndexReader ir = UninvertingReader.wrap(writer.getReader(), 
                      Collections.singletonMap("value", Type.INTEGER));
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     Sort sort = new Sort(new SortField("value", SortField.Type.INT));
@@ -520,7 +520,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     writer.addDocument(doc);
     IndexReader ir = UninvertingReader.wrap(writer.getReader(), 
                      Collections.singletonMap("value", Type.INTEGER));
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     SortField sortField = new SortField("value", SortField.Type.INT);
@@ -553,7 +553,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     writer.addDocument(doc);
     IndexReader ir = UninvertingReader.wrap(writer.getReader(), 
                      Collections.singletonMap("value", Type.INTEGER));
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     Sort sort = new Sort(new SortField("value", SortField.Type.INT, true));
@@ -584,7 +584,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     writer.addDocument(doc);
     IndexReader ir = UninvertingReader.wrap(writer.getReader(), 
                      Collections.singletonMap("value", Type.LONG));
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     Sort sort = new Sort(new SortField("value", SortField.Type.LONG));
@@ -614,7 +614,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     writer.addDocument(doc);
     IndexReader ir = UninvertingReader.wrap(writer.getReader(), 
                      Collections.singletonMap("value", Type.LONG));
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     Sort sort = new Sort(new SortField("value", SortField.Type.LONG));
@@ -644,7 +644,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     writer.addDocument(doc);
     IndexReader ir = UninvertingReader.wrap(writer.getReader(), 
                      Collections.singletonMap("value", Type.LONG));
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     SortField sortField = new SortField("value", SortField.Type.LONG);
@@ -677,7 +677,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     writer.addDocument(doc);
     IndexReader ir = UninvertingReader.wrap(writer.getReader(), 
                      Collections.singletonMap("value", Type.LONG));
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     Sort sort = new Sort(new SortField("value", SortField.Type.LONG, true));
@@ -708,7 +708,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     writer.addDocument(doc);
     IndexReader ir = UninvertingReader.wrap(writer.getReader(), 
                      Collections.singletonMap("value", Type.FLOAT));
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     Sort sort = new Sort(new SortField("value", SortField.Type.FLOAT));
@@ -738,7 +738,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     writer.addDocument(doc);
     IndexReader ir = UninvertingReader.wrap(writer.getReader(), 
                      Collections.singletonMap("value", Type.FLOAT));
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     Sort sort = new Sort(new SortField("value", SortField.Type.FLOAT));
@@ -768,7 +768,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     writer.addDocument(doc);
     IndexReader ir = UninvertingReader.wrap(writer.getReader(), 
                      Collections.singletonMap("value", Type.FLOAT));
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     SortField sortField = new SortField("value", SortField.Type.FLOAT);
@@ -801,7 +801,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     writer.addDocument(doc);
     IndexReader ir = UninvertingReader.wrap(writer.getReader(), 
                      Collections.singletonMap("value", Type.FLOAT));
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     Sort sort = new Sort(new SortField("value", SortField.Type.FLOAT, true));
@@ -835,7 +835,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     writer.addDocument(doc);
     IndexReader ir = UninvertingReader.wrap(writer.getReader(), 
                      Collections.singletonMap("value", Type.DOUBLE));
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     Sort sort = new Sort(new SortField("value", SortField.Type.DOUBLE));
@@ -865,7 +865,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     doc = new Document();
     IndexReader ir = UninvertingReader.wrap(writer.getReader(), 
                      Collections.singletonMap("value", Type.DOUBLE));
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     Sort sort = new Sort(new SortField("value", SortField.Type.DOUBLE));
@@ -902,7 +902,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     writer.addDocument(doc);
     IndexReader ir = UninvertingReader.wrap(writer.getReader(), 
                      Collections.singletonMap("value", Type.DOUBLE));
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     Sort sort = new Sort(new SortField("value", SortField.Type.DOUBLE));
@@ -936,7 +936,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     writer.addDocument(doc);
     IndexReader ir = UninvertingReader.wrap(writer.getReader(), 
                      Collections.singletonMap("value", Type.DOUBLE));
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     SortField sortField = new SortField("value", SortField.Type.DOUBLE);
@@ -973,7 +973,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     writer.addDocument(doc);
     IndexReader ir = UninvertingReader.wrap(writer.getReader(), 
                      Collections.singletonMap("value", Type.DOUBLE));
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     Sort sort = new Sort(new SortField("value", SortField.Type.DOUBLE, true));
@@ -1004,7 +1004,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
 
     IndexReader r = UninvertingReader.wrap(DirectoryReader.open(w, true), 
                     Collections.singletonMap("f", Type.SORTED));
-    w.shutdown();
+    w.close();
     IndexSearcher s = newSearcher(r);
     TopDocs hits = s.search(new TermQuery(new Term("t", "1")), null, 10, new Sort(new SortField("f", SortField.Type.STRING)));
     assertEquals(2, hits.totalHits);
@@ -1027,7 +1027,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
         writer.addDocument(doc);
     }
     writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases
-    writer.shutdown();
+    writer.close();
     Sort sort = new Sort(
         new SortField("string", SortField.Type.STRING),
         SortField.FIELD_DOC);
@@ -1045,7 +1045,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
   public void testMaxScore() throws Exception {
     Directory d = newDirectory();
     // Not RIW because we need exactly 2 segs:
-    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));
+    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));
     int id = 0;
     for(int seg=0;seg<2;seg++) {
       for(int docIDX=0;docIDX<10;docIDX++) {
@@ -1065,7 +1065,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
 
     IndexReader r = UninvertingReader.wrap(DirectoryReader.open(w, true),
                     Collections.singletonMap("id", Type.INTEGER));
-    w.shutdown();
+    w.close();
     Query q = new TermQuery(new Term("body", "text"));
     IndexSearcher s = newSearcher(r);
     float maxScore = s.search(q , 10).getMaxScore();
@@ -1117,7 +1117,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     writer.addDocument(doc);
     IndexReader ir = UninvertingReader.wrap(writer.getReader(),
                      Collections.singletonMap("value", Type.SORTED));
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     Sort sort = new Sort(new SortField("value", SortField.Type.STRING));
@@ -1139,7 +1139,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     writer.addDocument(doc);
     IndexReader ir = UninvertingReader.wrap(writer.getReader(),
                      Collections.singletonMap("value", Type.SORTED));
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     Sort sort = new Sort(new SortField("value", SortField.Type.STRING));
@@ -1172,7 +1172,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     mappings.put("value", Type.SORTED);
     
     IndexReader ir = UninvertingReader.wrap(writer.getReader(), mappings);
-    writer.shutdown();
+    writer.close();
     
     IndexSearcher searcher = newSearcher(ir);
     // tievalue, then value
@@ -1199,7 +1199,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     doc.add(newStringField("value", "foo", Field.Store.NO));
     writer.addDocument(doc);
     IndexReader ir = writer.getReader();
-    writer.shutdown();
+    writer.close();
 
     IndexSearcher searcher = newSearcher(ir);
     Sort sort = new Sort(SortField.FIELD_SCORE);
diff --git lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSortRandom.java lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSortRandom.java
index e69c417..9b7a185 100644
--- lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSortRandom.java
+++ lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSortRandom.java
@@ -132,7 +132,7 @@ public class TestFieldCacheSortRandom extends LuceneTestCase {
     mapping.put("stringdv", Type.SORTED);
     mapping.put("id", Type.INTEGER);
     final IndexReader r = UninvertingReader.wrap(writer.getReader(), mapping);
-    writer.shutdown();
+    writer.close();
     if (VERBOSE) {
       System.out.println("  reader=" + r);
     }
diff --git lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheVsDocValues.java lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheVsDocValues.java
index 378116a..8b55bd8 100644
--- lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheVsDocValues.java
+++ lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheVsDocValues.java
@@ -25,7 +25,6 @@ import java.util.List;
 
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.MockAnalyzer;
-import org.apache.lucene.codecs.Codec;
 import org.apache.lucene.codecs.lucene42.Lucene42DocValuesFormat;
 import org.apache.lucene.document.BinaryDocValuesField;
 import org.apache.lucene.document.Document;
@@ -193,7 +192,7 @@ public class TestFieldCacheVsDocValues extends LuceneTestCase {
         return;
       }
     }
-    w.shutdown();
+    w.close();
 
     AtomicReader ar = SlowCompositeReaderWrapper.wrap(r);
 
@@ -264,7 +263,7 @@ public class TestFieldCacheVsDocValues extends LuceneTestCase {
     }
     
     DirectoryReader r = DirectoryReader.open(w, true);
-    w.shutdown();
+    w.close();
 
     AtomicReader ar = SlowCompositeReaderWrapper.wrap(r);
 
@@ -318,7 +317,7 @@ public class TestFieldCacheVsDocValues extends LuceneTestCase {
       int id = random().nextInt(numDocs);
       writer.deleteDocuments(new Term("id", Integer.toString(id)));
     }
-    writer.shutdown();
+    writer.close();
     
     // compare
     DirectoryReader ir = DirectoryReader.open(dir);
@@ -334,7 +333,7 @@ public class TestFieldCacheVsDocValues extends LuceneTestCase {
   
   private void doTestSortedSetVsUninvertedField(int minLength, int maxLength) throws Exception {
     Directory dir = newDirectory();
-    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));
+    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));
     RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);
     
     // index some docs
@@ -403,7 +402,7 @@ public class TestFieldCacheVsDocValues extends LuceneTestCase {
     assertEquals(ir.maxDoc(), expected, actual);
     ir.close();
     
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
   
@@ -451,7 +450,7 @@ public class TestFieldCacheVsDocValues extends LuceneTestCase {
     // 256 values
     writer.forceMerge(numDocs / 256);
 
-    writer.shutdown();
+    writer.close();
     
     // compare
     DirectoryReader ir = DirectoryReader.open(dir);
diff --git lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheWithThreads.java lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheWithThreads.java
index 134d56e..b284471 100644
--- lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheWithThreads.java
+++ lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheWithThreads.java
@@ -69,7 +69,7 @@ public class TestFieldCacheWithThreads extends LuceneTestCase {
 
     w.forceMerge(1);
     final IndexReader r = DirectoryReader.open(w, true);
-    w.shutdown();
+    w.close();
 
     assertEquals(1, r.leaves().size());
     final AtomicReader ar = r.leaves().get(0).reader();
@@ -179,7 +179,7 @@ public class TestFieldCacheWithThreads extends LuceneTestCase {
 
     writer.forceMerge(1);
     final DirectoryReader r = writer.getReader();
-    writer.shutdown();
+    writer.close();
     
     final AtomicReader sr = getOnlySegmentReader(r);
 
diff --git lucene/misc/src/test/org/apache/lucene/uninverting/TestNumericTerms32.java lucene/misc/src/test/org/apache/lucene/uninverting/TestNumericTerms32.java
index 98c3737..99cf205 100644
--- lucene/misc/src/test/org/apache/lucene/uninverting/TestNumericTerms32.java
+++ lucene/misc/src/test/org/apache/lucene/uninverting/TestNumericTerms32.java
@@ -102,7 +102,7 @@ public class TestNumericTerms32 extends LuceneTestCase {
     map.put("field8", Type.INTEGER);
     reader = UninvertingReader.wrap(writer.getReader(), map);
     searcher=newSearcher(reader);
-    writer.shutdown();
+    writer.close();
   }
   
   @AfterClass
diff --git lucene/misc/src/test/org/apache/lucene/uninverting/TestNumericTerms64.java lucene/misc/src/test/org/apache/lucene/uninverting/TestNumericTerms64.java
index 6368e2c..4d4bf9a 100644
--- lucene/misc/src/test/org/apache/lucene/uninverting/TestNumericTerms64.java
+++ lucene/misc/src/test/org/apache/lucene/uninverting/TestNumericTerms64.java
@@ -107,7 +107,7 @@ public class TestNumericTerms64 extends LuceneTestCase {
     map.put("field8", Type.LONG);
     reader = UninvertingReader.wrap(writer.getReader(), map);
     searcher=newSearcher(reader);
-    writer.shutdown();
+    writer.close();
   }
   
   @AfterClass
diff --git lucene/misc/src/test/org/apache/lucene/uninverting/TestUninvertingReader.java lucene/misc/src/test/org/apache/lucene/uninverting/TestUninvertingReader.java
index 9952ecd..8447695 100644
--- lucene/misc/src/test/org/apache/lucene/uninverting/TestUninvertingReader.java
+++ lucene/misc/src/test/org/apache/lucene/uninverting/TestUninvertingReader.java
@@ -51,7 +51,7 @@ public class TestUninvertingReader extends LuceneTestCase {
     iw.addDocument(doc);
     
     iw.forceMerge(1);
-    iw.shutdown();
+    iw.close();
     
     DirectoryReader ir = UninvertingReader.wrap(DirectoryReader.open(dir), 
                          Collections.singletonMap("foo", Type.SORTED_SET_INTEGER));
@@ -92,7 +92,7 @@ public class TestUninvertingReader extends LuceneTestCase {
     iw.addDocument(doc);
     
     iw.forceMerge(1);
-    iw.shutdown();
+    iw.close();
     
     DirectoryReader ir = UninvertingReader.wrap(DirectoryReader.open(dir), 
                          Collections.singletonMap("foo", Type.SORTED_SET_FLOAT));
@@ -134,7 +134,7 @@ public class TestUninvertingReader extends LuceneTestCase {
     iw.addDocument(doc);
     
     iw.forceMerge(1);
-    iw.shutdown();
+    iw.close();
     
     DirectoryReader ir = UninvertingReader.wrap(DirectoryReader.open(dir), 
         Collections.singletonMap("foo", Type.SORTED_SET_LONG));
@@ -175,7 +175,7 @@ public class TestUninvertingReader extends LuceneTestCase {
     iw.addDocument(doc);
     
     iw.forceMerge(1);
-    iw.shutdown();
+    iw.close();
     
     DirectoryReader ir = UninvertingReader.wrap(DirectoryReader.open(dir), 
         Collections.singletonMap("foo", Type.SORTED_SET_DOUBLE));
diff --git lucene/queries/src/test/org/apache/lucene/queries/BooleanFilterTest.java lucene/queries/src/test/org/apache/lucene/queries/BooleanFilterTest.java
index 761d684..e225af4 100644
--- lucene/queries/src/test/org/apache/lucene/queries/BooleanFilterTest.java
+++ lucene/queries/src/test/org/apache/lucene/queries/BooleanFilterTest.java
@@ -57,7 +57,7 @@ public class BooleanFilterTest extends LuceneTestCase {
     addDoc(writer, "admin", "020", "20050101", "Maybe");
     addDoc(writer, "admin guest", "030", "20050101", "N");
     reader = SlowCompositeReaderWrapper.wrap(writer.getReader());
-    writer.shutdown();
+    writer.close();
   }
 
   @Override
diff --git lucene/queries/src/test/org/apache/lucene/queries/ChainedFilterTest.java lucene/queries/src/test/org/apache/lucene/queries/ChainedFilterTest.java
index ecd3ac8..714d2a7 100644
--- lucene/queries/src/test/org/apache/lucene/queries/ChainedFilterTest.java
+++ lucene/queries/src/test/org/apache/lucene/queries/ChainedFilterTest.java
@@ -73,7 +73,7 @@ public class ChainedFilterTest extends LuceneTestCase {
       cal.add(Calendar.DATE, 1);
     }
     reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
 
     searcher = newSearcher(reader);
 
@@ -194,7 +194,7 @@ public class ChainedFilterTest extends LuceneTestCase {
     Directory dir = newDirectory();
     RandomIndexWriter writer = new RandomIndexWriter(random(), dir);
     IndexReader reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
   
     IndexSearcher searcher = newSearcher(reader);
   
diff --git lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest.java lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest.java
index 3cb8deb..6888489 100644
--- lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest.java
+++ lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest.java
@@ -127,7 +127,7 @@ public class CommonTermsQueryTest extends LuceneTestCase {
       
     }
     r.close();
-    w.shutdown();
+    w.close();
     dir.close();
   }
   
@@ -322,7 +322,7 @@ public class CommonTermsQueryTest extends LuceneTestCase {
               r.document(search.scoreDocs[1].doc).get("id"))));
     }
     r.close();
-    w.shutdown();
+    w.close();
     dir.close();
   }
   
@@ -396,7 +396,7 @@ public class CommonTermsQueryTest extends LuceneTestCase {
       assertEquals("0", r.document(search.scoreDocs[2].doc).get("id"));
     }
     r.close();
-    w.shutdown();
+    w.close();
     dir.close();
   }
   
@@ -498,7 +498,7 @@ public class CommonTermsQueryTest extends LuceneTestCase {
     } finally {
       reader.close();
       wrapper.close();
-      w.shutdown();
+      w.close();
       dir.close();
     }
     
diff --git lucene/queries/src/test/org/apache/lucene/queries/TermFilterTest.java lucene/queries/src/test/org/apache/lucene/queries/TermFilterTest.java
index 20925cc..41e30db 100644
--- lucene/queries/src/test/org/apache/lucene/queries/TermFilterTest.java
+++ lucene/queries/src/test/org/apache/lucene/queries/TermFilterTest.java
@@ -62,7 +62,7 @@ public class TermFilterTest extends LuceneTestCase {
     IndexReader reader = SlowCompositeReaderWrapper.wrap(w.getReader());
     assertTrue(reader.getContext() instanceof AtomicReaderContext);
     AtomicReaderContext context = (AtomicReaderContext) reader.getContext();
-    w.shutdown();
+    w.close();
 
     DocIdSet idSet = termFilter(fieldName, "value1").getDocIdSet(context, context.reader().getLiveDocs());
     assertNotNull("must not be null", idSet);
@@ -94,7 +94,7 @@ public class TermFilterTest extends LuceneTestCase {
       w.addDocument(doc);
     }
     IndexReader reader = w.getReader();
-    w.shutdown();
+    w.close();
     
     IndexSearcher searcher = newSearcher(reader);
     
diff --git lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest.java lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest.java
index b298698..36ebadd 100644
--- lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest.java
+++ lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest.java
@@ -77,7 +77,7 @@ public class TermsFilterTest extends LuceneTestCase {
     IndexReader reader = SlowCompositeReaderWrapper.wrap(w.getReader());
     assertTrue(reader.getContext() instanceof AtomicReaderContext);
     AtomicReaderContext context = (AtomicReaderContext) reader.getContext();
-    w.shutdown();
+    w.close();
 
     List<Term> terms = new ArrayList<>();
     terms.add(new Term(fieldName, "19"));
@@ -108,7 +108,7 @@ public class TermsFilterTest extends LuceneTestCase {
     doc.add(newStringField(fieldName, "content1", Field.Store.YES));
     w1.addDocument(doc);
     IndexReader reader1 = w1.getReader();
-    w1.shutdown();
+    w1.close();
     
     fieldName = "field2";
     Directory rd2 = newDirectory();
@@ -117,7 +117,7 @@ public class TermsFilterTest extends LuceneTestCase {
     doc.add(newStringField(fieldName, "content2", Field.Store.YES));
     w2.addDocument(doc);
     IndexReader reader2 = w2.getReader();
-    w2.shutdown();
+    w2.close();
     
     TermsFilter tf = new TermsFilter(new Term(fieldName, "content1"));
     MultiReader multi = new MultiReader(reader1, reader2);
@@ -155,7 +155,7 @@ public class TermsFilterTest extends LuceneTestCase {
     
     w.forceMerge(1);
     IndexReader reader = w.getReader();
-    w.shutdown();
+    w.close();
     assertEquals(1, reader.leaves().size());
     
     
@@ -194,7 +194,7 @@ public class TermsFilterTest extends LuceneTestCase {
     }
     w.forceMerge(1);
     IndexReader reader = w.getReader();
-    w.shutdown();
+    w.close();
     assertEquals(1, reader.leaves().size());
     AtomicReaderContext context = reader.leaves().get(0);
     TermsFilter tf = new TermsFilter(new ArrayList<>(terms));
@@ -220,7 +220,7 @@ public class TermsFilterTest extends LuceneTestCase {
       w.addDocument(doc);
     }
     IndexReader reader = w.getReader();
-    w.shutdown();
+    w.close();
     
     IndexSearcher searcher = newSearcher(reader);
     
diff --git lucene/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup.java lucene/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup.java
index 1f573ed..4153317 100644
--- lucene/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup.java
+++ lucene/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup.java
@@ -118,7 +118,7 @@ public abstract class FunctionTestSetup extends LuceneTestCase {
       }
       iw.forceMerge(1);
     }
-    iw.shutdown();
+    iw.close();
     if (VERBOSE) {
       System.out.println("TEST: setUp done close");
     }
diff --git lucene/queries/src/test/org/apache/lucene/queries/function/TestBoostedQuery.java lucene/queries/src/test/org/apache/lucene/queries/function/TestBoostedQuery.java
index b1cbb14..3205c5c 100644
--- lucene/queries/src/test/org/apache/lucene/queries/function/TestBoostedQuery.java
+++ lucene/queries/src/test/org/apache/lucene/queries/function/TestBoostedQuery.java
@@ -60,7 +60,7 @@ public class TestBoostedQuery extends LuceneTestCase {
     iw.addDocument(document);
     ir = iw.getReader();
     is = newSearcher(ir);
-    iw.shutdown();
+    iw.close();
   }
   
   @AfterClass
diff --git lucene/queries/src/test/org/apache/lucene/queries/function/TestDocValuesFieldSources.java lucene/queries/src/test/org/apache/lucene/queries/function/TestDocValuesFieldSources.java
index 6b98c72..24d1bb8 100644
--- lucene/queries/src/test/org/apache/lucene/queries/function/TestDocValuesFieldSources.java
+++ lucene/queries/src/test/org/apache/lucene/queries/function/TestDocValuesFieldSources.java
@@ -36,7 +36,6 @@ import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.TestUtil;
-import org.apache.lucene.util.TestUtil;
 import org.apache.lucene.util.packed.PackedInts;
 
 import com.carrotsearch.randomizedtesting.generators.RandomInts;
@@ -91,7 +90,7 @@ public class TestDocValuesFieldSources extends LuceneTestCase {
         iw.commit();
       }
     }
-    iw.shutdown();
+    iw.close();
 
     DirectoryReader rd = DirectoryReader.open(d);
     for (AtomicReaderContext leave : rd.leaves()) {
diff --git lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionQuerySort.java lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionQuerySort.java
index f9ae422..394d5bf 100644
--- lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionQuerySort.java
+++ lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionQuerySort.java
@@ -63,7 +63,7 @@ public class TestFunctionQuerySort extends LuceneTestCase {
 
     // Open index
     IndexReader reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
     IndexSearcher searcher = newSearcher(reader);
 
     // Get ValueSource from FieldCache
diff --git lucene/queries/src/test/org/apache/lucene/queries/function/TestLongNormValueSource.java lucene/queries/src/test/org/apache/lucene/queries/function/TestLongNormValueSource.java
index 8f201ad..cb91ff2 100644
--- lucene/queries/src/test/org/apache/lucene/queries/function/TestLongNormValueSource.java
+++ lucene/queries/src/test/org/apache/lucene/queries/function/TestLongNormValueSource.java
@@ -66,7 +66,7 @@ public class TestLongNormValueSource extends LuceneTestCase {
 
     reader = iw.getReader();
     searcher = newSearcher(reader);
-    iw.shutdown();
+    iw.close();
   }
 
   @AfterClass
diff --git lucene/queries/src/test/org/apache/lucene/queries/function/TestSortedSetFieldSource.java lucene/queries/src/test/org/apache/lucene/queries/function/TestSortedSetFieldSource.java
index 791621c..c016aa6 100644
--- lucene/queries/src/test/org/apache/lucene/queries/function/TestSortedSetFieldSource.java
+++ lucene/queries/src/test/org/apache/lucene/queries/function/TestSortedSetFieldSource.java
@@ -46,7 +46,7 @@ public class TestSortedSetFieldSource extends LuceneTestCase {
     doc.add(newStringField("id", "1", Field.Store.YES));
     writer.addDocument(doc);
     writer.forceMerge(1);
-    writer.shutdown();
+    writer.close();
 
     DirectoryReader ir = DirectoryReader.open(dir);
     AtomicReader ar = getOnlySegmentReader(ir);
diff --git lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources.java lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources.java
index 719b2ae..5a80e84 100644
--- lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources.java
+++ lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources.java
@@ -147,7 +147,7 @@ public class TestValueSources extends LuceneTestCase {
     
     reader = iw.getReader();
     searcher = newSearcher(reader);
-    iw.shutdown();
+    iw.close();
   }
   
   @AfterClass
diff --git lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis.java lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis.java
index 1d09e45..ee03da5 100644
--- lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis.java
+++ lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis.java
@@ -58,7 +58,7 @@ public class TestMoreLikeThis extends LuceneTestCase {
     addDoc(writer, "apache lucene");
 
     reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
     searcher = newSearcher(reader);
   }
   
@@ -186,7 +186,7 @@ public class TestMoreLikeThis extends LuceneTestCase {
       addDoc(writer, generateStrSeq(0, i + 1));
     }
     IndexReader reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
 
     // setup MLT query
     MoreLikeThis mlt = new MoreLikeThis(reader);
diff --git lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser.java lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser.java
index 9d060f1..76324bb 100644
--- lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser.java
+++ lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser.java
@@ -18,7 +18,6 @@ package org.apache.lucene.queryparser.analyzing;
  */
 
 import java.io.IOException;
-import java.io.Reader;
 import java.util.Map;
 import java.util.TreeMap;
 
@@ -281,7 +280,7 @@ public class TestAnalyzingQueryParser extends LuceneTestCase {
     Field field = new Field(FIELD, content, fieldType);
     doc.add(field);
     writer.addDocument(doc);
-    writer.shutdown();
+    writer.close();
     DirectoryReader ir = DirectoryReader.open(ramDir);
     IndexSearcher is = new IndexSearcher(ir);
       
diff --git lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser.java lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser.java
index 80f4e3d..deac18f 100644
--- lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser.java
+++ lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser.java
@@ -290,7 +290,7 @@ public class TestMultiFieldQueryParser extends LuceneTestCase {
     Document doc = new Document();
     doc.add(newTextField("body", "blah the footest blah", Field.Store.NO));
     iw.addDocument(doc);
-    iw.shutdown();
+    iw.close();
     
     MultiFieldQueryParser mfqp = 
       new MultiFieldQueryParser(TEST_VERSION_CURRENT, new String[] {"body"}, analyzer);
diff --git lucene/queryparser/src/test/org/apache/lucene/queryparser/complexPhrase/TestComplexPhraseQuery.java lucene/queryparser/src/test/org/apache/lucene/queryparser/complexPhrase/TestComplexPhraseQuery.java
index b82748d..ffeb01c 100644
--- lucene/queryparser/src/test/org/apache/lucene/queryparser/complexPhrase/TestComplexPhraseQuery.java
+++ lucene/queryparser/src/test/org/apache/lucene/queryparser/complexPhrase/TestComplexPhraseQuery.java
@@ -27,7 +27,6 @@ import org.apache.lucene.index.DirectoryReader;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.IndexWriter;
 import org.apache.lucene.index.StoredDocument;
-import org.apache.lucene.queryparser.classic.QueryParser;
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.Query;
 import org.apache.lucene.search.ScoreDoc;
@@ -179,7 +178,7 @@ public class TestComplexPhraseQuery extends LuceneTestCase {
       doc.add(newTextField("role", docsContent[i].role, Field.Store.YES));
       w.addDocument(doc);
     }
-    w.shutdown();
+    w.close();
     reader = DirectoryReader.open(rd);
     searcher = newSearcher(reader);
   }
diff --git lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper.java lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper.java
index e57c550..e3bef9e 100644
--- lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper.java
+++ lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper.java
@@ -324,7 +324,7 @@ public class TestMultiFieldQPHelper extends LuceneTestCase {
     Document doc = new Document();
     doc.add(newTextField("body", "blah the footest blah", Field.Store.NO));
     iw.addDocument(doc);
-    iw.shutdown();
+    iw.close();
 
     StandardQueryParser mfqp = new StandardQueryParser();
 
diff --git lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestNumericQueryParser.java lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestNumericQueryParser.java
index 11bc944..5fd74e2 100644
--- lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestNumericQueryParser.java
+++ lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestNumericQueryParser.java
@@ -247,7 +247,7 @@ public class TestNumericQueryParser extends LuceneTestCase {
     
     reader = writer.getReader();
     searcher = newSearcher(reader);
-    writer.shutdown();
+    writer.close();
     
   }
   
diff --git lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper.java lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper.java
index 93dabfe..64fd81b 100644
--- lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper.java
+++ lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper.java
@@ -18,7 +18,6 @@ package org.apache.lucene.queryparser.flexible.standard;
  */
 
 import java.io.IOException;
-import java.io.Reader;
 import java.text.DateFormat;
 import java.util.Calendar;
 import java.util.Date;
@@ -1321,7 +1320,7 @@ public class TestQPHelper extends LuceneTestCase {
     assertTrue(q instanceof MultiPhraseQuery);
     assertEquals(1, s.search(q, 10).totalHits);
     r.close();
-    w.shutdown();
+    w.close();
     dir.close();
   }
 
diff --git lucene/queryparser/src/test/org/apache/lucene/queryparser/surround/query/SingleFieldTestDb.java lucene/queryparser/src/test/org/apache/lucene/queryparser/surround/query/SingleFieldTestDb.java
index 10581e5..647f503 100644
--- lucene/queryparser/src/test/org/apache/lucene/queryparser/surround/query/SingleFieldTestDb.java
+++ lucene/queryparser/src/test/org/apache/lucene/queryparser/surround/query/SingleFieldTestDb.java
@@ -23,7 +23,6 @@ import org.apache.lucene.document.Field;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.MockDirectoryWrapper;
 import org.apache.lucene.store.RAMDirectory;
-import org.apache.lucene.util.Version;
 import org.apache.lucene.analysis.MockAnalyzer;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.TextField;
@@ -40,15 +39,13 @@ public class SingleFieldTestDb {
       db = new MockDirectoryWrapper(random, new RAMDirectory());
       docs = documents;
       fieldName = fName;
-      IndexWriter writer = new IndexWriter(db, new IndexWriterConfig(
-          Version.LUCENE_CURRENT,
-          new MockAnalyzer(random)));
+      IndexWriter writer = new IndexWriter(db, new IndexWriterConfig(new MockAnalyzer(random)));
       for (int j = 0; j < docs.length; j++) {
         Document d = new Document();
         d.add(new TextField(fieldName, docs[j], Field.Store.NO));
         writer.addDocument(d);
       }
-      writer.shutdown();
+      writer.close();
     } catch (java.io.IOException ioe) {
       throw new Error(ioe);
     }
diff --git lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase.java lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase.java
index 874f488..03d932f 100644
--- lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase.java
+++ lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase.java
@@ -1094,7 +1094,7 @@ public abstract class QueryParserTestBase extends LuceneTestCase {
     doc.add(newTextField("field", "the wizard of ozzy", Field.Store.NO));
     w.addDocument(doc);
     IndexReader r = DirectoryReader.open(w, true);
-    w.shutdown();
+    w.close();
     IndexSearcher s = newSearcher(r);
     
     Query q = getQuery("\"wizard of ozzy\"",a);
diff --git lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser.java lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser.java
index 22f7cc7..9db7890 100644
--- lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser.java
+++ lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser.java
@@ -36,7 +36,6 @@ import org.apache.lucene.search.ScoreDoc;
 import org.apache.lucene.search.TopDocs;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.LuceneTestCase;
-import org.apache.lucene.util.Version;
 import org.junit.AfterClass;
 import org.junit.Assume;
 import org.junit.BeforeClass;
@@ -80,7 +79,7 @@ public class TestParser extends LuceneTestCase {
       line = d.readLine();
     }
     d.close();
-    writer.shutdown();
+    writer.close();
     reader = DirectoryReader.open(dir);
     searcher = newSearcher(reader);
 
diff --git lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestQueryTemplateManager.java lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestQueryTemplateManager.java
index 78839ed..6b2d52c 100644
--- lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestQueryTemplateManager.java
+++ lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestQueryTemplateManager.java
@@ -150,7 +150,7 @@ public class TestQueryTemplateManager extends LuceneTestCase {
       w.addDocument(getDocumentFromString(docFieldValue));
     }
     w.forceMerge(1);
-    w.shutdown();
+    w.close();
     reader = DirectoryReader.open(dir);
     searcher = newSearcher(reader);
 
diff --git lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeFilterBuilder.java lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeFilterBuilder.java
index 81baab4..516228d 100644
--- lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeFilterBuilder.java
+++ lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeFilterBuilder.java
@@ -19,7 +19,6 @@ package org.apache.lucene.queryparser.xml.builders;
 
 import org.apache.lucene.index.AtomicReader;
 import org.apache.lucene.index.DirectoryReader;
-import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.IndexWriter;
 import org.apache.lucene.index.SlowCompositeReaderWrapper;
 import org.apache.lucene.search.Filter;
@@ -76,7 +75,7 @@ public class TestNumericRangeFilterBuilder extends LuceneTestCase {
     }
     finally {
       writer.commit();
-      writer.shutdown();
+      writer.close();
       ramDir.close();
     }
   }
diff --git lucene/replicator/src/test/org/apache/lucene/replicator/IndexAndTaxonomyReplicationClientTest.java lucene/replicator/src/test/org/apache/lucene/replicator/IndexAndTaxonomyReplicationClientTest.java
index c75ca1f..3ae2719 100644
--- lucene/replicator/src/test/org/apache/lucene/replicator/IndexAndTaxonomyReplicationClientTest.java
+++ lucene/replicator/src/test/org/apache/lucene/replicator/IndexAndTaxonomyReplicationClientTest.java
@@ -209,7 +209,7 @@ public class IndexAndTaxonomyReplicationClientTest extends ReplicatorTestCase {
   @After
   @Override
   public void tearDown() throws Exception {
-    publishIndexWriter.shutdown();
+    publishIndexWriter.close();
     IOUtils.close(client, callback, publishTaxoWriter, replicator, publishIndexDir, publishTaxoDir,
             handlerIndexDir, handlerTaxoDir);
     super.tearDown();
diff --git lucene/replicator/src/test/org/apache/lucene/replicator/IndexAndTaxonomyRevisionTest.java lucene/replicator/src/test/org/apache/lucene/replicator/IndexAndTaxonomyRevisionTest.java
index c618b84..d4f96b6 100644
--- lucene/replicator/src/test/org/apache/lucene/replicator/IndexAndTaxonomyRevisionTest.java
+++ lucene/replicator/src/test/org/apache/lucene/replicator/IndexAndTaxonomyRevisionTest.java
@@ -50,7 +50,7 @@ public class IndexAndTaxonomyRevisionTest extends ReplicatorTestCase {
   @Test
   public void testNoCommit() throws Exception {
     Directory indexDir = newDirectory();
-    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, null);
+    IndexWriterConfig conf = new IndexWriterConfig(null);
     conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(conf.getIndexDeletionPolicy()));
     IndexWriter indexWriter = new IndexWriter(indexDir, conf);
     
@@ -62,7 +62,7 @@ public class IndexAndTaxonomyRevisionTest extends ReplicatorTestCase {
     } catch (IllegalStateException e) {
       // expected
     } finally {
-      indexWriter.shutdown();
+      indexWriter.close();
       IOUtils.close(taxoWriter, taxoDir, indexDir);
     }
   }
@@ -70,7 +70,7 @@ public class IndexAndTaxonomyRevisionTest extends ReplicatorTestCase {
   @Test
   public void testRevisionRelease() throws Exception {
     Directory indexDir = newDirectory();
-    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, null);
+    IndexWriterConfig conf = new IndexWriterConfig(null);
     conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(conf.getIndexDeletionPolicy()));
     IndexWriter indexWriter = new IndexWriter(indexDir, conf);
     
@@ -93,7 +93,7 @@ public class IndexAndTaxonomyRevisionTest extends ReplicatorTestCase {
       assertNotNull(new IndexAndTaxonomyRevision(indexWriter, taxoWriter));
       rev1.release(); // this release should trigger the delete of segments_1
       assertFalse(slowFileExists(indexDir, IndexFileNames.SEGMENTS + "_1"));
-      indexWriter.shutdown();
+      indexWriter.close();
     } finally {
       IOUtils.close(indexWriter, taxoWriter, taxoDir, indexDir);
     }
@@ -102,7 +102,7 @@ public class IndexAndTaxonomyRevisionTest extends ReplicatorTestCase {
   @Test
   public void testSegmentsFileLast() throws Exception {
     Directory indexDir = newDirectory();
-    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, null);
+    IndexWriterConfig conf = new IndexWriterConfig(null);
     conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(conf.getIndexDeletionPolicy()));
     IndexWriter indexWriter = new IndexWriter(indexDir, conf);
     
@@ -119,7 +119,7 @@ public class IndexAndTaxonomyRevisionTest extends ReplicatorTestCase {
         String lastFile = files.get(files.size() - 1).fileName;
         assertTrue(lastFile.startsWith(IndexFileNames.SEGMENTS) && !lastFile.equals(IndexFileNames.SEGMENTS_GEN));
       }
-      indexWriter.shutdown();
+      indexWriter.close();
     } finally {
       IOUtils.close(indexWriter, taxoWriter, taxoDir, indexDir);
     }
@@ -128,7 +128,7 @@ public class IndexAndTaxonomyRevisionTest extends ReplicatorTestCase {
   @Test
   public void testOpen() throws Exception {
     Directory indexDir = newDirectory();
-    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, null);
+    IndexWriterConfig conf = new IndexWriterConfig(null);
     conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(conf.getIndexDeletionPolicy()));
     IndexWriter indexWriter = new IndexWriter(indexDir, conf);
     
@@ -165,7 +165,7 @@ public class IndexAndTaxonomyRevisionTest extends ReplicatorTestCase {
           IOUtils.close(src, in);
         }
       }
-      indexWriter.shutdown();
+      indexWriter.close();
     } finally {
       IOUtils.close(indexWriter, taxoWriter, taxoDir, indexDir);
     }
diff --git lucene/replicator/src/test/org/apache/lucene/replicator/IndexReplicationClientTest.java lucene/replicator/src/test/org/apache/lucene/replicator/IndexReplicationClientTest.java
index 9c495b6..3f91013 100644
--- lucene/replicator/src/test/org/apache/lucene/replicator/IndexReplicationClientTest.java
+++ lucene/replicator/src/test/org/apache/lucene/replicator/IndexReplicationClientTest.java
@@ -150,7 +150,7 @@ public class IndexReplicationClientTest extends ReplicatorTestCase {
   @After
   @Override
   public void tearDown() throws Exception {
-    publishWriter.shutdown();
+    publishWriter.close();
     IOUtils.close(client, callback, replicator, publishDir, handlerDir);
     super.tearDown();
   }
diff --git lucene/replicator/src/test/org/apache/lucene/replicator/IndexRevisionTest.java lucene/replicator/src/test/org/apache/lucene/replicator/IndexRevisionTest.java
index 8eaa3a8..0e012e7 100644
--- lucene/replicator/src/test/org/apache/lucene/replicator/IndexRevisionTest.java
+++ lucene/replicator/src/test/org/apache/lucene/replicator/IndexRevisionTest.java
@@ -38,7 +38,7 @@ public class IndexRevisionTest extends ReplicatorTestCase {
   @Test
   public void testNoSnapshotDeletionPolicy() throws Exception {
     Directory dir = newDirectory();
-    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, null);
+    IndexWriterConfig conf = new IndexWriterConfig(null);
     conf.setIndexDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());
     IndexWriter writer = new IndexWriter(dir, conf);
     try {
@@ -47,7 +47,7 @@ public class IndexRevisionTest extends ReplicatorTestCase {
     } catch (IllegalArgumentException e) {
       // expected
     } finally {
-      writer.shutdown();
+      writer.close();
       IOUtils.close(dir);
     }
   }
@@ -55,7 +55,7 @@ public class IndexRevisionTest extends ReplicatorTestCase {
   @Test
   public void testNoCommit() throws Exception {
     Directory dir = newDirectory();
-    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, null);
+    IndexWriterConfig conf = new IndexWriterConfig(null);
     conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(conf.getIndexDeletionPolicy()));
     IndexWriter writer = new IndexWriter(dir, conf);
     try {
@@ -64,7 +64,7 @@ public class IndexRevisionTest extends ReplicatorTestCase {
     } catch (IllegalStateException e) {
       // expected
     } finally {
-      writer.shutdown();
+      writer.close();
       IOUtils.close(dir);
     }
   }
@@ -72,7 +72,7 @@ public class IndexRevisionTest extends ReplicatorTestCase {
   @Test
   public void testRevisionRelease() throws Exception {
     Directory dir = newDirectory();
-    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, null);
+    IndexWriterConfig conf = new IndexWriterConfig(null);
     conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(conf.getIndexDeletionPolicy()));
     IndexWriter writer = new IndexWriter(dir, conf);
     try {
@@ -89,7 +89,7 @@ public class IndexRevisionTest extends ReplicatorTestCase {
       assertNotNull(new IndexRevision(writer));
       rev1.release(); // this release should trigger the delete of segments_1
       assertFalse(slowFileExists(dir, IndexFileNames.SEGMENTS + "_1"));
-      writer.shutdown();
+      writer.close();
     } finally {
       IOUtils.close(dir);
     }
@@ -98,7 +98,7 @@ public class IndexRevisionTest extends ReplicatorTestCase {
   @Test
   public void testSegmentsFileLast() throws Exception {
     Directory dir = newDirectory();
-    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, null);
+    IndexWriterConfig conf = new IndexWriterConfig(null);
     conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(conf.getIndexDeletionPolicy()));
     IndexWriter writer = new IndexWriter(dir, conf);
     try {
@@ -111,7 +111,7 @@ public class IndexRevisionTest extends ReplicatorTestCase {
       List<RevisionFile> files = sourceFiles.values().iterator().next();
       String lastFile = files.get(files.size() - 1).fileName;
       assertTrue(lastFile.startsWith(IndexFileNames.SEGMENTS) && !lastFile.equals(IndexFileNames.SEGMENTS_GEN));
-      writer.shutdown();
+      writer.close();
     } finally {
       IOUtils.close(dir);
     }
@@ -120,7 +120,7 @@ public class IndexRevisionTest extends ReplicatorTestCase {
   @Test
   public void testOpen() throws Exception {
     Directory dir = newDirectory();
-    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, null);
+    IndexWriterConfig conf = new IndexWriterConfig(null);
     conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(conf.getIndexDeletionPolicy()));
     IndexWriter writer = new IndexWriter(dir, conf);
     try {
@@ -151,7 +151,7 @@ public class IndexRevisionTest extends ReplicatorTestCase {
         assertArrayEquals(srcBytes, inBytes);
         IOUtils.close(src, in);
       }
-      writer.shutdown();
+      writer.close();
     } finally {
       IOUtils.close(dir);
     }
diff --git lucene/replicator/src/test/org/apache/lucene/replicator/LocalReplicatorTest.java lucene/replicator/src/test/org/apache/lucene/replicator/LocalReplicatorTest.java
index 153ae22..36b1066 100644
--- lucene/replicator/src/test/org/apache/lucene/replicator/LocalReplicatorTest.java
+++ lucene/replicator/src/test/org/apache/lucene/replicator/LocalReplicatorTest.java
@@ -59,7 +59,7 @@ public class LocalReplicatorTest extends ReplicatorTestCase {
   @After
   @Override
   public void tearDown() throws Exception {
-    sourceWriter.shutdown();
+    sourceWriter.close();
     IOUtils.close(replicator, sourceDir);
     super.tearDown();
   }
diff --git lucene/replicator/src/test/org/apache/lucene/replicator/ReplicatorTestCase.java lucene/replicator/src/test/org/apache/lucene/replicator/ReplicatorTestCase.java
index aefecbd..4c613c7 100644
--- lucene/replicator/src/test/org/apache/lucene/replicator/ReplicatorTestCase.java
+++ lucene/replicator/src/test/org/apache/lucene/replicator/ReplicatorTestCase.java
@@ -147,7 +147,7 @@ public abstract class ReplicatorTestCase extends LuceneTestCase {
    * Returns a {@link HttpClientConnectionManager}.
    * <p>
    * <b>NOTE:</b> do not {@link HttpClientConnectionManager#shutdown()} this
-   * connection manager, it will be shutdown automatically after all tests have
+   * connection manager, it will be close automatically after all tests have
    * finished.
    */
   public static synchronized HttpClientConnectionManager getClientConnectionManager() {
diff --git lucene/replicator/src/test/org/apache/lucene/replicator/SessionTokenTest.java lucene/replicator/src/test/org/apache/lucene/replicator/SessionTokenTest.java
index fdc3833..7416f1c 100644
--- lucene/replicator/src/test/org/apache/lucene/replicator/SessionTokenTest.java
+++ lucene/replicator/src/test/org/apache/lucene/replicator/SessionTokenTest.java
@@ -37,7 +37,7 @@ public class SessionTokenTest extends ReplicatorTestCase {
   @Test
   public void testSerialization() throws IOException {
     Directory dir = newDirectory();
-    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, null);
+    IndexWriterConfig conf = new IndexWriterConfig(null);
     conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(conf.getIndexDeletionPolicy()));
     IndexWriter writer = new IndexWriter(dir, conf);
     writer.addDocument(new Document());
@@ -58,7 +58,7 @@ public class SessionTokenTest extends ReplicatorTestCase {
     List<RevisionFile> files2 = session2.sourceFiles.values().iterator().next();
     assertEquals(files1, files2);
 
-    writer.shutdown();
+    writer.close();
     IOUtils.close(dir);
   }
   
diff --git lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest.java lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest.java
index ca3ae5e..ffe8c34 100644
--- lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest.java
+++ lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest.java
@@ -61,7 +61,7 @@ public class DuplicateFilterTest extends LuceneTestCase {
     writer.forceMerge(1);
 
     reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
     searcher = newSearcher(reader);
 
   }
diff --git lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/FuzzyLikeThisQueryTest.java lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/FuzzyLikeThisQueryTest.java
index 41a4d95..cd47a47 100644
--- lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/FuzzyLikeThisQueryTest.java
+++ lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/FuzzyLikeThisQueryTest.java
@@ -57,7 +57,7 @@ public class FuzzyLikeThisQueryTest extends LuceneTestCase {
     addDoc(writer, "jonny smith", "5");
     addDoc(writer, "johnathon smythe", "6");
     reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
     searcher = newSearcher(reader);
   }
 
diff --git lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowCollationMethods.java lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowCollationMethods.java
index ade74c2..fe932ae 100644
--- lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowCollationMethods.java
+++ lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowCollationMethods.java
@@ -66,7 +66,7 @@ public class TestSlowCollationMethods extends LuceneTestCase {
     }
     splitDoc = TestUtil.randomUnicodeString(random());
     reader = iw.getReader();
-    iw.shutdown();
+    iw.close();
 
     searcher = newSearcher(reader);
   }
@@ -172,7 +172,7 @@ public class TestSlowCollationMethods extends LuceneTestCase {
       iw.addDocument(doc);
     }
     IndexReader reader = iw.getReader();
-    iw.shutdown();
+    iw.close();
 
     IndexSearcher searcher = newSearcher(reader);
 
diff --git lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery.java lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery.java
index d525a13..23b2d03 100644
--- lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery.java
+++ lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery.java
@@ -21,7 +21,6 @@ import java.util.List;
 import java.util.Arrays;
 import java.io.IOException;
 
-import org.apache.lucene.analysis.MockAnalyzer;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.index.IndexReader;
@@ -58,7 +57,7 @@ public class TestSlowFuzzyQuery extends LuceneTestCase {
 
     IndexReader reader = writer.getReader();
     IndexSearcher searcher = newSearcher(reader);
-    writer.shutdown();
+    writer.close();
 
     SlowFuzzyQuery query = new SlowFuzzyQuery(new Term("field", "aaaaa"), SlowFuzzyQuery.defaultMinSimilarity, 0);   
     ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;
@@ -206,7 +205,7 @@ public class TestSlowFuzzyQuery extends LuceneTestCase {
 
      IndexReader reader = writer.getReader();
      IndexSearcher searcher = newSearcher(reader);
-     writer.shutdown();
+     writer.close();
 
      SlowFuzzyQuery query;
      
@@ -229,7 +228,7 @@ public class TestSlowFuzzyQuery extends LuceneTestCase {
 
     IndexReader reader = writer.getReader();
     IndexSearcher searcher = newSearcher(reader);
-    writer.shutdown();
+    writer.close();
 
     SlowFuzzyQuery query;
     // not similar enough:
@@ -345,8 +344,8 @@ public class TestSlowFuzzyQuery extends LuceneTestCase {
     mr.close();
     ir1.close();
     ir2.close();
-    writer.shutdown();
-    writer2.shutdown();
+    writer.close();
+    writer2.close();
     directory.close();
     directory2.close(); 
   }
@@ -359,7 +358,7 @@ public class TestSlowFuzzyQuery extends LuceneTestCase {
 
     IndexReader reader = writer.getReader();
     IndexSearcher searcher = newSearcher(reader);
-    writer.shutdown();
+    writer.close();
 
     Query query;
     // term not over 10 chars, so optimization shortcuts
@@ -396,7 +395,7 @@ public class TestSlowFuzzyQuery extends LuceneTestCase {
 
     IndexReader reader = writer.getReader();
     IndexSearcher searcher = newSearcher(reader);
-    writer.shutdown();
+    writer.close();
     
     SlowFuzzyQuery query = new SlowFuzzyQuery(new Term("field", "lucene"));
     query.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(50));
@@ -433,7 +432,7 @@ public class TestSlowFuzzyQuery extends LuceneTestCase {
     addDoc("Brute willis", w);
     addDoc("B. willis", w);
     IndexReader r = w.getReader();
-    w.shutdown();
+    w.close();
 
     Query q = new SlowFuzzyQuery(new Term("field", "giga"), 0.9f);
 
@@ -454,7 +453,7 @@ public class TestSlowFuzzyQuery extends LuceneTestCase {
     addDoc("working", w);
     IndexReader reader = w.getReader();
     IndexSearcher searcher = newSearcher(reader);
-    w.shutdown();
+    w.close();
     
     SlowFuzzyQuery q = new SlowFuzzyQuery(new Term("field", "fouba"), 2);
     ScoreDoc[] hits = searcher.search(q, 10).scoreDocs;
diff --git lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery2.java lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery2.java
index 22610f8..d46e626 100644
--- lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery2.java
+++ lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery2.java
@@ -110,7 +110,7 @@ public class TestSlowFuzzyQuery2 extends LuceneTestCase {
     // otherwise scores are different!
     searcher.setSimilarity(new DefaultSimilarity());
     
-    writer.shutdown();
+    writer.close();
     String line;
     while ((line = reader.readLine()) != null) {
       String params[] = line.split(",");
diff --git lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/regex/TestRegexQuery.java lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/regex/TestRegexQuery.java
index cbe1481..a2e517b 100644
--- lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/regex/TestRegexQuery.java
+++ lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/regex/TestRegexQuery.java
@@ -50,7 +50,7 @@ public class TestRegexQuery extends LuceneTestCase {
     doc.add(newTextField(FN, "the quick brown fox jumps over the lazy dog", Field.Store.NO));
     writer.addDocument(doc);
     reader = writer.getReader();
-    writer.shutdown();
+    writer.close();
     searcher = newSearcher(reader);
   }
 
diff --git lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/regex/TestSpanRegexQuery.java lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/regex/TestSpanRegexQuery.java
index 4a21011..940fe77 100644
--- lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/regex/TestSpanRegexQuery.java
+++ lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/regex/TestSpanRegexQuery.java
@@ -65,7 +65,7 @@ public class TestSpanRegexQuery extends LuceneTestCase {
     doc.add(newTextField("field", "first auto update", Field.Store.NO));
     writer.addDocument(doc);
     writer.forceMerge(1);
-    writer.shutdown();
+    writer.close();
 
     IndexReader reader = DirectoryReader.open(directory);
     IndexSearcher searcher = newSearcher(reader);
diff --git lucene/spatial/src/test/org/apache/lucene/spatial/SpatialExample.java lucene/spatial/src/test/org/apache/lucene/spatial/SpatialExample.java
index d9fe636..668fc1b 100644
--- lucene/spatial/src/test/org/apache/lucene/spatial/SpatialExample.java
+++ lucene/spatial/src/test/org/apache/lucene/spatial/SpatialExample.java
@@ -103,7 +103,7 @@ public class SpatialExample extends LuceneTestCase {
   }
 
   private void indexPoints() throws Exception {
-    IndexWriterConfig iwConfig = new IndexWriterConfig(TEST_VERSION_CURRENT,null);
+    IndexWriterConfig iwConfig = new IndexWriterConfig(null);
     IndexWriter indexWriter = new IndexWriter(directory, iwConfig);
 
     //Spatial4j is x-y order for arguments
@@ -117,7 +117,7 @@ public class SpatialExample extends LuceneTestCase {
     indexWriter.addDocument(newSampleDocument(
         20, ctx.makePoint(0.1,0.1), ctx.makePoint(0, 0)));
 
-    indexWriter.shutdown();
+    indexWriter.close();
   }
 
   private Document newSampleDocument(int id, Shape... shapes) {
diff --git lucene/spatial/src/test/org/apache/lucene/spatial/SpatialTestCase.java lucene/spatial/src/test/org/apache/lucene/spatial/SpatialTestCase.java
index 6ae0e81..0a72298 100644
--- lucene/spatial/src/test/org/apache/lucene/spatial/SpatialTestCase.java
+++ lucene/spatial/src/test/org/apache/lucene/spatial/SpatialTestCase.java
@@ -81,7 +81,7 @@ public abstract class SpatialTestCase extends LuceneTestCase {
   }
 
   protected IndexWriterConfig newIndexWriterConfig(Random random) {
-    final IndexWriterConfig indexWriterConfig = LuceneTestCase.newIndexWriterConfig(random, LuceneTestCase.TEST_VERSION_CURRENT, new MockAnalyzer(random));
+    final IndexWriterConfig indexWriterConfig = LuceneTestCase.newIndexWriterConfig(random, new MockAnalyzer(random));
     //TODO can we randomly choose a doc-values supported format?
     if (needsDocValues())
       indexWriterConfig.setCodec( TestUtil.alwaysDocValuesFormat(new Lucene49DocValuesFormat()));;
@@ -95,7 +95,7 @@ public abstract class SpatialTestCase extends LuceneTestCase {
   @Override
   @After
   public void tearDown() throws Exception {
-    indexWriter.shutdown();
+    indexWriter.close();
     IOUtils.close(indexReader,directory);
     super.tearDown();
   }
diff --git lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker.java lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker.java
index e22f6ce..bb6eaa3 100644
--- lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker.java
+++ lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker.java
@@ -27,13 +27,11 @@ import org.apache.lucene.document.Field;
 import org.apache.lucene.document.FieldType;
 import org.apache.lucene.index.FieldInfo.IndexOptions;
 import org.apache.lucene.document.StringField;
-import org.apache.lucene.index.AtomicReader;
 import org.apache.lucene.index.AtomicReaderContext;
 import org.apache.lucene.index.DirectoryReader;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.IndexWriter;
 import org.apache.lucene.index.IndexWriterConfig;
-import org.apache.lucene.index.ReaderUtil;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.index.IndexWriterConfig.OpenMode;
 import org.apache.lucene.index.Terms;
@@ -48,7 +46,6 @@ import org.apache.lucene.store.AlreadyClosedException;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.BytesRefIterator;
-import org.apache.lucene.util.Version;
 
 /**
  * <p>
@@ -171,9 +168,8 @@ public class SpellChecker implements java.io.Closeable {
       ensureOpen();
       if (!DirectoryReader.indexExists(spellIndexDir)) {
           IndexWriter writer = new IndexWriter(spellIndexDir,
-            new IndexWriterConfig(Version.LUCENE_CURRENT,
-                null));
-          writer.shutdown();
+            new IndexWriterConfig(null));
+          writer.close();
       }
       swapSearcher(spellIndexDir);
     }
@@ -456,11 +452,9 @@ public class SpellChecker implements java.io.Closeable {
     synchronized (modifyCurrentIndexLock) {
       ensureOpen();
       final Directory dir = this.spellIndex;
-      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(
-          Version.LUCENE_CURRENT,
-          null)
+      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(null)
           .setOpenMode(OpenMode.CREATE));
-      writer.shutdown();
+      writer.close();
       swapSearcher(dir);
     }
   }
@@ -542,7 +536,7 @@ public class SpellChecker implements java.io.Closeable {
         writer.forceMerge(1);
       }
       // close writer
-      writer.shutdown();
+      writer.close();
       // TODO: this isn't that great, maybe in the future SpellChecker should take
       // IWC in its ctor / keep its writer open?
       
diff --git lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester.java lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester.java
index 9cbf841..7428bc3 100644
--- lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester.java
+++ lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester.java
@@ -70,14 +70,12 @@ import org.apache.lucene.search.TermQuery;
 import org.apache.lucene.search.TopFieldCollector;
 import org.apache.lucene.search.TopFieldDocs;
 import org.apache.lucene.search.suggest.InputIterator;
-import org.apache.lucene.search.suggest.Lookup.LookupResult; // javadocs
 import org.apache.lucene.search.suggest.Lookup;
 import org.apache.lucene.store.DataInput;
 import org.apache.lucene.store.DataOutput;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.FSDirectory;
 import org.apache.lucene.util.BytesRef;
-import org.apache.lucene.util.IOUtils;
 import org.apache.lucene.util.RamUsageEstimator;
 import org.apache.lucene.util.Version;
 
@@ -175,15 +173,15 @@ public class AnalyzingInfixSuggester extends Lookup implements Closeable {
     if (DirectoryReader.indexExists(dir)) {
       // Already built; open it:
       writer = new IndexWriter(dir,
-                               getIndexWriterConfig(matchVersion, getGramAnalyzer(), IndexWriterConfig.OpenMode.APPEND));
+                               getIndexWriterConfig(getGramAnalyzer(), IndexWriterConfig.OpenMode.APPEND));
       searcherMgr = new SearcherManager(writer, true, null);
     }
   }
 
   /** Override this to customize index settings, e.g. which
    *  codec to use. */
-  protected IndexWriterConfig getIndexWriterConfig(Version matchVersion, Analyzer indexAnalyzer, IndexWriterConfig.OpenMode openMode) {
-    IndexWriterConfig iwc = new IndexWriterConfig(matchVersion, indexAnalyzer);
+  protected IndexWriterConfig getIndexWriterConfig(Analyzer indexAnalyzer, IndexWriterConfig.OpenMode openMode) {
+    IndexWriterConfig iwc = new IndexWriterConfig(indexAnalyzer);
     iwc.setCodec(new Lucene49Codec());
     iwc.setOpenMode(openMode);
 
@@ -210,7 +208,7 @@ public class AnalyzingInfixSuggester extends Lookup implements Closeable {
     }
 
     if (writer != null) {
-      writer.shutdown();
+      writer.close();
       writer = null;
     }
 
@@ -219,7 +217,7 @@ public class AnalyzingInfixSuggester extends Lookup implements Closeable {
       // First pass: build a temporary normal Lucene index,
       // just indexing the suggestions as they iterate:
       writer = new IndexWriter(dir,
-                               getIndexWriterConfig(matchVersion, getGramAnalyzer(), IndexWriterConfig.OpenMode.CREATE));
+                               getIndexWriterConfig(getGramAnalyzer(), IndexWriterConfig.OpenMode.CREATE));
       //long t0 = System.nanoTime();
 
       // TODO: use threads?
@@ -637,7 +635,7 @@ public class AnalyzingInfixSuggester extends Lookup implements Closeable {
       searcherMgr = null;
     }
     if (writer != null) {
-      writer.shutdown();
+      writer.close();
       dir.close();
       writer = null;
     }
diff --git lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester.java lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester.java
index ed71c90..9804762 100644
--- lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester.java
+++ lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester.java
@@ -307,7 +307,7 @@ public class FreeTextSuggester extends Lookup {
 
     Directory dir = FSDirectory.open(tempIndexPath);
 
-    IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_CURRENT, indexAnalyzer);
+    IndexWriterConfig iwc = new IndexWriterConfig(indexAnalyzer);
     iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);
     iwc.setRAMBufferSizeMB(ramBufferSizeMB);
     IndexWriter writer = new IndexWriter(dir, iwc);
diff --git lucene/suggest/src/test/org/apache/lucene/search/spell/TestDirectSpellChecker.java lucene/suggest/src/test/org/apache/lucene/search/spell/TestDirectSpellChecker.java
index 24b9ba2..647e298 100644
--- lucene/suggest/src/test/org/apache/lucene/search/spell/TestDirectSpellChecker.java
+++ lucene/suggest/src/test/org/apache/lucene/search/spell/TestDirectSpellChecker.java
@@ -56,7 +56,7 @@ public class TestDirectSpellChecker extends LuceneTestCase {
     }
     
     ir.close();
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
   public void testSimpleExamples() throws Exception {
@@ -122,7 +122,7 @@ public class TestDirectSpellChecker extends LuceneTestCase {
     assertEquals("thousand", similar[0].string);
 
     ir.close();
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
   
@@ -188,7 +188,7 @@ public class TestDirectSpellChecker extends LuceneTestCase {
     assertEquals(2, similar.length);
 
     ir.close();
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
   
@@ -211,7 +211,7 @@ public class TestDirectSpellChecker extends LuceneTestCase {
         SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);
     assertEquals(0, similar.length);
     ir.close();
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
   
@@ -236,7 +236,7 @@ public class TestDirectSpellChecker extends LuceneTestCase {
     assertEquals(1, similar.length);
     assertEquals("five", similar[0].string);
     ir.close();
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
   
@@ -261,7 +261,7 @@ public class TestDirectSpellChecker extends LuceneTestCase {
     assertEquals(1, similar.length);
     assertEquals("seventeen", similar[0].string);
     ir.close();
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
 }
diff --git lucene/suggest/src/test/org/apache/lucene/search/spell/TestLuceneDictionary.java lucene/suggest/src/test/org/apache/lucene/search/spell/TestLuceneDictionary.java
index 4916d8b..169246a 100644
--- lucene/suggest/src/test/org/apache/lucene/search/spell/TestLuceneDictionary.java
+++ lucene/suggest/src/test/org/apache/lucene/search/spell/TestLuceneDictionary.java
@@ -74,7 +74,7 @@ public class TestLuceneDictionary extends LuceneTestCase {
     writer.addDocument(doc);
 
     writer.forceMerge(1);
-    writer.shutdown();
+    writer.close();
   }
 
   @Override
diff --git lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker.java lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker.java
index ab858d3..70e8306 100644
--- lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker.java
+++ lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker.java
@@ -55,8 +55,7 @@ public class TestSpellChecker extends LuceneTestCase {
     
     //create a user index
     userindex = newDirectory();
-    IndexWriter writer = new IndexWriter(userindex, new IndexWriterConfig(
-        TEST_VERSION_CURRENT, new MockAnalyzer(random())));
+    IndexWriter writer = new IndexWriter(userindex, new IndexWriterConfig(new MockAnalyzer(random())));
 
     for (int i = 0; i < 1000; i++) {
       Document doc = new Document();
@@ -87,7 +86,7 @@ public class TestSpellChecker extends LuceneTestCase {
       writer.addDocument(doc);
     }
     
-    writer.shutdown();
+    writer.close();
     searchers = Collections.synchronizedList(new ArrayList<IndexSearcher>());
     // create the spellChecker
     spellindex = newDirectory();
diff --git lucene/suggest/src/test/org/apache/lucene/search/spell/TestWordBreakSpellChecker.java lucene/suggest/src/test/org/apache/lucene/search/spell/TestWordBreakSpellChecker.java
index acd1b4a..de79db1 100644
--- lucene/suggest/src/test/org/apache/lucene/search/spell/TestWordBreakSpellChecker.java
+++ lucene/suggest/src/test/org/apache/lucene/search/spell/TestWordBreakSpellChecker.java
@@ -70,7 +70,7 @@ public class TestWordBreakSpellChecker extends LuceneTestCase {
     }
     
     writer.commit();
-    writer.shutdown();
+    writer.close();
   }
   
   @Override
@@ -300,7 +300,7 @@ public class TestWordBreakSpellChecker extends LuceneTestCase {
         writer.addDocument(doc);
       }
       writer.commit();
-      writer.shutdown();
+      writer.close();
       
       ir = DirectoryReader.open(dir);
       WordBreakSpellChecker wbsp = new WordBreakSpellChecker();
@@ -352,7 +352,7 @@ public class TestWordBreakSpellChecker extends LuceneTestCase {
         ir.close();
       } catch (Exception e1) {}
       try {
-        writer.shutdown();
+        writer.close();
       } catch (Exception e1) {}
       try {
         dir.close();
diff --git lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest.java lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest.java
index e852fc1..bcc274a 100644
--- lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest.java
+++ lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest.java
@@ -23,7 +23,6 @@ import org.apache.lucene.index.RandomIndexWriter;
 import org.apache.lucene.index.StorableField;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.search.spell.Dictionary;
-import org.apache.lucene.search.suggest.DocumentDictionary;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.LuceneTestCase;
@@ -118,7 +117,7 @@ public class DocumentDictionaryTest extends LuceneTestCase {
     // Make sure the index is created?
     RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);
     writer.commit();
-    writer.shutdown();
+    writer.close();
     IndexReader ir = DirectoryReader.open(dir);
     Dictionary dictionary = new DocumentDictionary(ir, FIELD_NAME, WEIGHT_FIELD_NAME, PAYLOAD_FIELD_NAME);
     InputIterator inputIterator = dictionary.getEntryIterator();
@@ -144,7 +143,7 @@ public class DocumentDictionaryTest extends LuceneTestCase {
       writer.addDocument(doc);
     }
     writer.commit();
-    writer.shutdown();
+    writer.close();
     IndexReader ir = DirectoryReader.open(dir);
     Dictionary dictionary = new DocumentDictionary(ir, FIELD_NAME, WEIGHT_FIELD_NAME, PAYLOAD_FIELD_NAME);
     InputIterator inputIterator = dictionary.getEntryIterator();
@@ -179,7 +178,7 @@ public class DocumentDictionaryTest extends LuceneTestCase {
       writer.addDocument(doc);
     }
     writer.commit();
-    writer.shutdown();
+    writer.close();
     IndexReader ir = DirectoryReader.open(dir);
     Dictionary dictionary = new DocumentDictionary(ir, FIELD_NAME, WEIGHT_FIELD_NAME);
     InputIterator inputIterator = dictionary.getEntryIterator();
@@ -215,7 +214,7 @@ public class DocumentDictionaryTest extends LuceneTestCase {
       writer.addDocument(doc);
     }
     writer.commit();
-    writer.shutdown();
+    writer.close();
     IndexReader ir = DirectoryReader.open(dir);
     Dictionary dictionary = new DocumentDictionary(ir, FIELD_NAME, WEIGHT_FIELD_NAME, PAYLOAD_FIELD_NAME, CONTEXT_FIELD_NAME);
     InputIterator inputIterator = dictionary.getEntryIterator();
@@ -272,7 +271,7 @@ public class DocumentDictionaryTest extends LuceneTestCase {
       writer.deleteDocuments(delTerm);  
     }
     writer.commit();
-    writer.shutdown();
+    writer.close();
     
     for(String termToDel: termsToDel) {
       assertTrue(null!=docs.remove(termToDel));
diff --git lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentValueSourceDictionaryTest.java lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentValueSourceDictionaryTest.java
index 78a3cc6..0bacfbb 100644
--- lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentValueSourceDictionaryTest.java
+++ lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentValueSourceDictionaryTest.java
@@ -89,7 +89,7 @@ public class DocumentValueSourceDictionaryTest extends LuceneTestCase {
     // Make sure the index is created?
     RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);
     writer.commit();
-    writer.shutdown();
+    writer.close();
     IndexReader ir = DirectoryReader.open(dir);
     Dictionary dictionary = new DocumentValueSourceDictionary(ir, FIELD_NAME,  new DoubleConstValueSource(10), PAYLOAD_FIELD_NAME);
     InputIterator inputIterator = dictionary.getEntryIterator();
@@ -113,7 +113,7 @@ public class DocumentValueSourceDictionaryTest extends LuceneTestCase {
       writer.addDocument(doc);
     }
     writer.commit();
-    writer.shutdown();
+    writer.close();
 
     IndexReader ir = DirectoryReader.open(dir);
     ValueSource[] toAdd = new ValueSource[] {new LongFieldSource(WEIGHT_FIELD_NAME_1), new LongFieldSource(WEIGHT_FIELD_NAME_2), new LongFieldSource(WEIGHT_FIELD_NAME_3)};
@@ -145,7 +145,7 @@ public class DocumentValueSourceDictionaryTest extends LuceneTestCase {
       writer.addDocument(doc);
     }
     writer.commit();
-    writer.shutdown();
+    writer.close();
 
     IndexReader ir = DirectoryReader.open(dir);
     ValueSource[] toAdd = new ValueSource[] {new LongFieldSource(WEIGHT_FIELD_NAME_1), new LongFieldSource(WEIGHT_FIELD_NAME_2), new LongFieldSource(WEIGHT_FIELD_NAME_3)};
@@ -182,7 +182,7 @@ public class DocumentValueSourceDictionaryTest extends LuceneTestCase {
       writer.addDocument(doc);
     }
     writer.commit();
-    writer.shutdown();
+    writer.close();
 
     IndexReader ir = DirectoryReader.open(dir);
     ValueSource[] toAdd = new ValueSource[] {new LongFieldSource(WEIGHT_FIELD_NAME_1), new LongFieldSource(WEIGHT_FIELD_NAME_2), new LongFieldSource(WEIGHT_FIELD_NAME_3)};
@@ -229,7 +229,7 @@ public class DocumentValueSourceDictionaryTest extends LuceneTestCase {
       writer.deleteDocuments(delTerm);  
     }
     writer.commit();
-    writer.shutdown();
+    writer.close();
     
     for(String termToDel: termsToDel) {
       assertTrue(null!=docs.remove(termToDel));
@@ -268,7 +268,7 @@ public class DocumentValueSourceDictionaryTest extends LuceneTestCase {
       writer.addDocument(doc);
     }
     writer.commit();
-    writer.shutdown();
+    writer.close();
 
     IndexReader ir = DirectoryReader.open(dir);
     Dictionary dictionary = new DocumentValueSourceDictionary(ir, FIELD_NAME, new DoubleConstValueSource(10), PAYLOAD_FIELD_NAME);
diff --git lucene/suggest/src/test/org/apache/lucene/search/suggest/TestHighFrequencyDictionary.java lucene/suggest/src/test/org/apache/lucene/search/suggest/TestHighFrequencyDictionary.java
index 036a0ce..122443e 100644
--- lucene/suggest/src/test/org/apache/lucene/search/suggest/TestHighFrequencyDictionary.java
+++ lucene/suggest/src/test/org/apache/lucene/search/suggest/TestHighFrequencyDictionary.java
@@ -32,7 +32,7 @@ public class TestHighFrequencyDictionary extends LuceneTestCase {
     Directory dir = newDirectory();
     IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));
     writer.commit();
-    writer.shutdown();
+    writer.close();
     IndexReader ir = DirectoryReader.open(dir);
     Dictionary dictionary = new HighFrequencyDictionary(ir, "bogus", 0.1f);
     BytesRefIterator tf = dictionary.getEntryIterator();
diff --git lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.java lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.java
index f030408..ea72c03 100644
--- lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.java
+++ lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.java
@@ -536,7 +536,7 @@ public abstract class BaseTokenStreamTestCase extends LuceneTestCase {
         }
       }
       if (iw != null) {
-        iw.shutdown();
+        iw.close();
       }
       success = true;
     } finally {
diff --git lucene/test-framework/src/java/org/apache/lucene/analysis/CollationTestBase.java lucene/test-framework/src/java/org/apache/lucene/analysis/CollationTestBase.java
index d4030b4..e4e0877 100644
--- lucene/test-framework/src/java/org/apache/lucene/analysis/CollationTestBase.java
+++ lucene/test-framework/src/java/org/apache/lucene/analysis/CollationTestBase.java
@@ -25,7 +25,6 @@ import java.util.Map;
 import org.apache.lucene.analysis.tokenattributes.TermToBytesRefAttribute;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
-import org.apache.lucene.document.FieldType;
 import org.apache.lucene.document.StringField;
 import org.apache.lucene.document.TextField;
 import org.apache.lucene.index.DirectoryReader;
@@ -39,7 +38,6 @@ import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.Query;
 import org.apache.lucene.search.ScoreDoc;
 import org.apache.lucene.search.Sort;
-import org.apache.lucene.search.SortField;
 import org.apache.lucene.search.TermQuery;
 import org.apache.lucene.search.TermRangeFilter;
 import org.apache.lucene.search.TermRangeQuery;
@@ -47,7 +45,6 @@ import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.TestUtil;
-import org.apache.lucene.util.TestUtil;
 
 /**
  * Base test class for testing Unicode collation.
@@ -64,13 +61,12 @@ public abstract class CollationTestBase extends LuceneTestCase {
                                             BytesRef firstEnd, BytesRef secondBeg,
                                             BytesRef secondEnd) throws Exception {
     Directory dir = newDirectory();
-    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(
-        TEST_VERSION_CURRENT, analyzer));
+    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(analyzer));
     Document doc = new Document();
     doc.add(new TextField("content", "\u0633\u0627\u0628", Field.Store.YES));
     doc.add(new StringField("body", "body", Field.Store.YES));
     writer.addDocument(doc);
-    writer.shutdown();
+    writer.close();
     IndexReader reader = DirectoryReader.open(dir);
     IndexSearcher searcher = new IndexSearcher(reader);
     Query query = new TermQuery(new Term("body","body"));
@@ -96,8 +92,7 @@ public abstract class CollationTestBase extends LuceneTestCase {
                                             BytesRef firstEnd, BytesRef secondBeg,
                                             BytesRef secondEnd) throws Exception {
     Directory dir = newDirectory();
-    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(
-        TEST_VERSION_CURRENT, analyzer));
+    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(analyzer));
     Document doc = new Document();
 
     // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi
@@ -106,7 +101,7 @@ public abstract class CollationTestBase extends LuceneTestCase {
     // Collator (or an Arabic one for the case when Farsi is not supported).
     doc.add(new TextField("content", "\u0633\u0627\u0628", Field.Store.YES));
     writer.addDocument(doc);
-    writer.shutdown();
+    writer.close();
     IndexReader reader = DirectoryReader.open(dir);
     IndexSearcher searcher = new IndexSearcher(reader);
 
@@ -125,13 +120,12 @@ public abstract class CollationTestBase extends LuceneTestCase {
       BytesRef firstEnd, BytesRef secondBeg, BytesRef secondEnd) throws Exception {
 
     Directory farsiIndex = newDirectory();
-    IndexWriter writer = new IndexWriter(farsiIndex, new IndexWriterConfig(
-        TEST_VERSION_CURRENT, analyzer));
+    IndexWriter writer = new IndexWriter(farsiIndex, new IndexWriterConfig(analyzer));
     Document doc = new Document();
     doc.add(new TextField("content", "\u0633\u0627\u0628", Field.Store.YES));
     doc.add(new StringField("body", "body", Field.Store.YES));
     writer.addDocument(doc);
-    writer.shutdown();
+    writer.close();
 
     IndexReader reader = DirectoryReader.open(farsiIndex);
     IndexSearcher search = newSearcher(reader);
diff --git lucene/test-framework/src/java/org/apache/lucene/index/BaseCompressingDocValuesFormatTestCase.java lucene/test-framework/src/java/org/apache/lucene/index/BaseCompressingDocValuesFormatTestCase.java
index 6a2c117..44f959c 100644
--- lucene/test-framework/src/java/org/apache/lucene/index/BaseCompressingDocValuesFormatTestCase.java
+++ lucene/test-framework/src/java/org/apache/lucene/index/BaseCompressingDocValuesFormatTestCase.java
@@ -44,7 +44,7 @@ public abstract class BaseCompressingDocValuesFormatTestCase extends BaseDocValu
 
   public void testUniqueValuesCompression() throws IOException {
     final Directory dir = new RAMDirectory();
-    final IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));
+    final IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));
     final IndexWriter iwriter = new IndexWriter(dir, iwc);
 
     final int uniqueValueCount = TestUtil.nextInt(random(), 1, 256);
@@ -78,7 +78,7 @@ public abstract class BaseCompressingDocValuesFormatTestCase extends BaseDocValu
 
   public void testDateCompression() throws IOException {
     final Directory dir = new RAMDirectory();
-    final IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));
+    final IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));
     final IndexWriter iwriter = new IndexWriter(dir, iwc);
 
     final long base = 13; // prime
@@ -105,7 +105,7 @@ public abstract class BaseCompressingDocValuesFormatTestCase extends BaseDocValu
 
   public void testSingleBigValueCompression() throws IOException {
     final Directory dir = new RAMDirectory();
-    final IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));
+    final IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));
     final IndexWriter iwriter = new IndexWriter(dir, iwc);
 
     final Document doc = new Document();
diff --git lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase.java lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase.java
index ce86f91..03cd354 100644
--- lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase.java
+++ lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase.java
@@ -98,7 +98,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
     doc.add(newTextField("fieldname", text, Field.Store.YES));
     doc.add(new NumericDocValuesField("dv", 5));
     iwriter.addDocument(doc);
-    iwriter.shutdown();
+    iwriter.close();
     
     // Now search the index:
     IndexReader ireader = DirectoryReader.open(directory); // read-only=true
@@ -130,7 +130,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
     doc.add(newTextField("fieldname", text, Field.Store.YES));
     doc.add(new FloatDocValuesField("dv", 5.7f));
     iwriter.addDocument(doc);
-    iwriter.shutdown();
+    iwriter.close();
     
     // Now search the index:
     IndexReader ireader = DirectoryReader.open(directory); // read-only=true
@@ -163,7 +163,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
     doc.add(new NumericDocValuesField("dv1", 5));
     doc.add(new NumericDocValuesField("dv2", 17));
     iwriter.addDocument(doc);
-    iwriter.shutdown();
+    iwriter.close();
     
     // Now search the index:
     IndexReader ireader = DirectoryReader.open(directory); // read-only=true
@@ -198,7 +198,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
     doc.add(new BinaryDocValuesField("dv1", new BytesRef(longTerm)));
     doc.add(new BinaryDocValuesField("dv2", new BytesRef(text)));
     iwriter.addDocument(doc);
-    iwriter.shutdown();
+    iwriter.close();
     
     // Now search the index:
     IndexReader ireader = DirectoryReader.open(directory); // read-only=true
@@ -235,7 +235,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
     doc.add(new NumericDocValuesField("dv1", 5));
     doc.add(new BinaryDocValuesField("dv2", new BytesRef("hello world")));
     iwriter.addDocument(doc);
-    iwriter.shutdown();
+    iwriter.close();
     
     // Now search the index:
     IndexReader ireader = DirectoryReader.open(directory); // read-only=true
@@ -272,7 +272,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
     doc.add(new NumericDocValuesField("dv2", 5));
     doc.add(new BinaryDocValuesField("dv3", new BytesRef("hello world")));
     iwriter.addDocument(doc);
-    iwriter.shutdown();
+    iwriter.close();
     
     // Now search the index:
     IndexReader ireader = DirectoryReader.open(directory); // read-only=true
@@ -313,7 +313,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
     doc.add(new SortedDocValuesField("dv2", new BytesRef("hello hello")));
     doc.add(new NumericDocValuesField("dv3", 5));
     iwriter.addDocument(doc);
-    iwriter.shutdown();
+    iwriter.close();
     
     // Now search the index:
     IndexReader ireader = DirectoryReader.open(directory); // read-only=true
@@ -358,7 +358,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
     doc.add(new NumericDocValuesField("dv", 2));
     iwriter.addDocument(doc);
     iwriter.forceMerge(1);
-    iwriter.shutdown();
+    iwriter.close();
     
     // Now search the index:
     IndexReader ireader = DirectoryReader.open(directory); // read-only=true
@@ -388,7 +388,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
     doc.add(new NumericDocValuesField("dv", 99));
     iwriter.addDocument(doc);
     iwriter.forceMerge(1);
-    iwriter.shutdown();
+    iwriter.close();
     
     // Now search the index:
     IndexReader ireader = DirectoryReader.open(directory); // read-only=true
@@ -423,7 +423,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
     doc.add(new NumericDocValuesField("dv", Long.MAX_VALUE));
     iwriter.addDocument(doc);
     iwriter.forceMerge(1);
-    iwriter.shutdown();
+    iwriter.close();
     
     // Now search the index:
     IndexReader ireader = DirectoryReader.open(directory); // read-only=true
@@ -450,7 +450,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
     doc.add(new NumericDocValuesField("dv", 9062230939892376225L));
     iwriter.addDocument(doc);
     iwriter.forceMerge(1);
-    iwriter.shutdown();
+    iwriter.close();
     
     // Now search the index:
     IndexReader ireader = DirectoryReader.open(directory); // read-only=true
@@ -475,7 +475,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
     doc.add(newTextField("fieldname", text, Field.Store.YES));
     doc.add(new BinaryDocValuesField("dv", new BytesRef("hello world")));
     iwriter.addDocument(doc);
-    iwriter.shutdown();
+    iwriter.close();
     
     // Now search the index:
     IndexReader ireader = DirectoryReader.open(directory); // read-only=true
@@ -516,7 +516,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
     doc.add(new BinaryDocValuesField("dv", new BytesRef("hello 2")));
     iwriter.addDocument(doc);
     iwriter.forceMerge(1);
-    iwriter.shutdown();
+    iwriter.close();
     
     // Now search the index:
     IndexReader ireader = DirectoryReader.open(directory); // read-only=true
@@ -551,7 +551,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
     doc.add(newTextField("fieldname", text, Field.Store.YES));
     doc.add(new SortedDocValuesField("dv", new BytesRef("hello world")));
     iwriter.addDocument(doc);
-    iwriter.shutdown();
+    iwriter.close();
     
     // Now search the index:
     IndexReader ireader = DirectoryReader.open(directory); // read-only=true
@@ -590,7 +590,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
     doc.add(new SortedDocValuesField("dv", new BytesRef("hello world 2")));
     iwriter.addDocument(doc);
     iwriter.forceMerge(1);
-    iwriter.shutdown();
+    iwriter.close();
     
     // Now search the index:
     IndexReader ireader = DirectoryReader.open(directory); // read-only=true
@@ -623,7 +623,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
     doc.add(new SortedDocValuesField("dv", new BytesRef("hello world 1")));
     iwriter.addDocument(doc);
     iwriter.forceMerge(1);
-    iwriter.shutdown();
+    iwriter.close();
     
     // Now search the index:
     IndexReader ireader = DirectoryReader.open(directory); // read-only=true
@@ -659,7 +659,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
     doc.add(new SortedDocValuesField("dv", new BytesRef("hello world 2")));
     iwriter.addDocument(doc);
     iwriter.forceMerge(1);
-    iwriter.shutdown();
+    iwriter.close();
     
     // Now search the index:
     IndexReader ireader = DirectoryReader.open(directory); // read-only=true
@@ -705,7 +705,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
     iwriter.forceMerge(1);
     
     DirectoryReader ireader = iwriter.getReader();
-    iwriter.shutdown();
+    iwriter.close();
     
     SortedDocValues dv = getOnlySegmentReader(ireader).getSortedDocValues("field");
     if (defaultCodecSupportsDocsWithField()) {
@@ -732,7 +732,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
     Document doc = new Document();
     doc.add(new BinaryDocValuesField("dv", new BytesRef("hello\nworld\r1")));
     iwriter.addDocument(doc);
-    iwriter.shutdown();
+    iwriter.close();
     
     // Now search the index:
     IndexReader ireader = DirectoryReader.open(directory); // read-only=true
@@ -757,7 +757,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
     iwriter.addDocument(doc);
     // 2nd doc missing the DV field
     iwriter.addDocument(new Document());
-    iwriter.shutdown();
+    iwriter.close();
     
     // Now search the index:
     IndexReader ireader = DirectoryReader.open(directory); // read-only=true
@@ -795,7 +795,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
     iwriter.forceMerge(1);
     
     DirectoryReader ireader = iwriter.getReader();
-    iwriter.shutdown();
+    iwriter.close();
 
     SortedDocValues dv = getOnlySegmentReader(ireader).getSortedDocValues("field");
     assertEquals(3, dv.getValueCount());
@@ -859,7 +859,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
     doc.add(new SortedDocValuesField("dv", new BytesRef("")));
     iwriter.addDocument(doc);
     iwriter.forceMerge(1);
-    iwriter.shutdown();
+    iwriter.close();
     
     // Now search the index:
     IndexReader ireader = DirectoryReader.open(directory); // read-only=true
@@ -888,7 +888,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
     doc.add(new BinaryDocValuesField("dv", new BytesRef("")));
     iwriter.addDocument(doc);
     iwriter.forceMerge(1);
-    iwriter.shutdown();
+    iwriter.close();
     
     // Now search the index:
     IndexReader ireader = DirectoryReader.open(directory); // read-only=true
@@ -916,7 +916,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
     random().nextBytes(bytes);
     doc.add(new BinaryDocValuesField("dv", b));
     iwriter.addDocument(doc);
-    iwriter.shutdown();
+    iwriter.close();
     
     // Now search the index:
     IndexReader ireader = DirectoryReader.open(directory); // read-only=true
@@ -942,7 +942,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
     random().nextBytes(bytes);
     doc.add(new SortedDocValuesField("dv", b));
     iwriter.addDocument(doc);
-    iwriter.shutdown();
+    iwriter.close();
     
     // Now search the index:
     IndexReader ireader = DirectoryReader.open(directory); // read-only=true
@@ -964,7 +964,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
     Document doc = new Document();
     doc.add(new BinaryDocValuesField("dv", new BytesRef("boo!")));
     iwriter.addDocument(doc);
-    iwriter.shutdown();
+    iwriter.close();
     
     // Now search the index:
     IndexReader ireader = DirectoryReader.open(directory); // read-only=true
@@ -989,7 +989,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
     Document doc = new Document();
     doc.add(new SortedDocValuesField("dv", new BytesRef("boo!")));
     iwriter.addDocument(doc);
-    iwriter.shutdown();
+    iwriter.close();
     
     // Now search the index:
     IndexReader ireader = DirectoryReader.open(directory); // read-only=true
@@ -1022,7 +1022,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
     writer.commit();
     writer.forceMerge(1, true);
 
-    writer.shutdown();
+    writer.close();
 
     DirectoryReader reader = DirectoryReader.open(dir);
     assertEquals(1, reader.leaves().size());
@@ -1129,7 +1129,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
     }
 
     reader.close();
-    w.shutdown();
+    w.close();
     dir.close();
   }
 
@@ -1185,7 +1185,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
     // 256 values
     writer.forceMerge(numDocs / 256);
 
-    writer.shutdown();
+    writer.close();
     
     // compare
     DirectoryReader ir = DirectoryReader.open(dir);
@@ -1243,7 +1243,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
     // 256 values
     writer.forceMerge(numDocs / 256);
 
-    writer.shutdown();
+    writer.close();
     
     // compare
     DirectoryReader ir = DirectoryReader.open(dir);
@@ -1364,7 +1364,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
       }
     }
     ir.close();
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
   
@@ -1448,7 +1448,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
       }
     }
     ir.close();
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
   
@@ -1477,7 +1477,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
     iwriter.addDocument(doc);
     
     DirectoryReader ireader = iwriter.getReader();
-    iwriter.shutdown();
+    iwriter.close();
     
     SortedSetDocValues dv = getOnlySegmentReader(ireader).getSortedSetDocValues("field");
     
@@ -1503,7 +1503,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
     iwriter.addDocument(doc);
     
     DirectoryReader ireader = iwriter.getReader();
-    iwriter.shutdown();
+    iwriter.close();
     
     SortedSetDocValues dv = getOnlySegmentReader(ireader).getSortedSetDocValues("field");
     
@@ -1546,7 +1546,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
     iwriter.forceMerge(1);
     
     DirectoryReader ireader = iwriter.getReader();
-    iwriter.shutdown();
+    iwriter.close();
 
     SortedSetDocValues dv = getOnlySegmentReader(ireader).getSortedSetDocValues("field");
     assertEquals(2, dv.getValueCount());
@@ -1580,7 +1580,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
     iwriter.addDocument(doc);
     
     DirectoryReader ireader = iwriter.getReader();
-    iwriter.shutdown();
+    iwriter.close();
     
     SortedSetDocValues dv = getOnlySegmentReader(ireader).getSortedSetDocValues("field");
     
@@ -1610,7 +1610,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
     iwriter.addDocument(doc);
     
     DirectoryReader ireader = iwriter.getReader();
-    iwriter.shutdown();
+    iwriter.close();
     
     SortedSetDocValues dv = getOnlySegmentReader(ireader).getSortedSetDocValues("field");
     
@@ -1650,7 +1650,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
     iwriter.forceMerge(1);
     
     DirectoryReader ireader = iwriter.getReader();
-    iwriter.shutdown();
+    iwriter.close();
 
     SortedSetDocValues dv = getOnlySegmentReader(ireader).getSortedSetDocValues("field");
     assertEquals(3, dv.getValueCount());
@@ -1694,7 +1694,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
     iwriter.addDocument(doc);
     iwriter.forceMerge(1);
     DirectoryReader ireader = iwriter.getReader();
-    iwriter.shutdown();
+    iwriter.close();
     
     SortedSetDocValues dv = getOnlySegmentReader(ireader).getSortedSetDocValues("field");
     assertEquals(1, dv.getValueCount());
@@ -1728,7 +1728,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
     iwriter.forceMerge(1);
    
     DirectoryReader ireader = iwriter.getReader();
-    iwriter.shutdown();
+    iwriter.close();
     
     SortedSetDocValues dv = getOnlySegmentReader(ireader).getSortedSetDocValues("field");
     assertEquals(1, dv.getValueCount());
@@ -1761,7 +1761,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
     
     iwriter.forceMerge(1);
     DirectoryReader ireader = iwriter.getReader();
-    iwriter.shutdown();
+    iwriter.close();
     
     SortedSetDocValues dv = getOnlySegmentReader(ireader).getSortedSetDocValues("field");
     assertEquals(1, dv.getValueCount());
@@ -1795,7 +1795,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
     iwriter.forceMerge(1);
     
     DirectoryReader ireader = iwriter.getReader();
-    iwriter.shutdown();
+    iwriter.close();
     
     SortedSetDocValues dv = getOnlySegmentReader(ireader).getSortedSetDocValues("field");
     assertEquals(1, dv.getValueCount());
@@ -1831,7 +1831,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
     iwriter.forceMerge(1);
     
     DirectoryReader ireader = iwriter.getReader();
-    iwriter.shutdown();
+    iwriter.close();
     
     SortedSetDocValues dv = getOnlySegmentReader(ireader).getSortedSetDocValues("field");
     assertEquals(0, dv.getValueCount());
@@ -1855,7 +1855,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
     iwriter.addDocument(doc);
     
     DirectoryReader ireader = iwriter.getReader();
-    iwriter.shutdown();
+    iwriter.close();
 
     SortedSetDocValues dv = getOnlySegmentReader(ireader).getSortedSetDocValues("field");
     assertEquals(3, dv.getValueCount());
@@ -1998,7 +1998,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
       }
     }
     ir.close();
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
   
@@ -2147,7 +2147,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
     doc.add(new StringField("id", "1", Field.Store.YES));
     iw.addDocument(doc);
     iw.forceMerge(1);
-    iw.shutdown();
+    iw.close();
     
     IndexReader ir = DirectoryReader.open(directory);
     assertEquals(1, ir.leaves().size());
@@ -2177,7 +2177,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
     doc.add(new StringField("id", "1", Field.Store.YES));
     iw.addDocument(doc);
     iw.forceMerge(1);
-    iw.shutdown();
+    iw.close();
     
     IndexReader ir = DirectoryReader.open(directory);
     assertEquals(1, ir.leaves().size());
@@ -2211,7 +2211,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
     doc.add(new NumericDocValuesField("dv1", 5));
     iw.addDocument(doc);
     iw.forceMerge(1);
-    iw.shutdown();
+    iw.close();
     
     IndexReader ir = DirectoryReader.open(directory);
     assertEquals(1, ir.leaves().size());
@@ -2242,7 +2242,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
     doc.add(new StringField("id", "1", Field.Store.YES));
     iw.addDocument(doc);
     iw.forceMerge(1);
-    iw.shutdown();
+    iw.close();
     
     IndexReader ir = DirectoryReader.open(directory);
     assertEquals(1, ir.leaves().size());
@@ -2274,7 +2274,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
     doc.add(new StringField("id", "1", Field.Store.YES));
     iw.addDocument(doc);
     iw.forceMerge(1);
-    iw.shutdown();
+    iw.close();
     
     IndexReader ir = DirectoryReader.open(directory);
     assertEquals(1, ir.leaves().size());
@@ -2310,7 +2310,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
     doc.add(new BinaryDocValuesField("dv1", new BytesRef("boo")));
     iw.addDocument(doc);
     iw.forceMerge(1);
-    iw.shutdown();
+    iw.close();
     
     IndexReader ir = DirectoryReader.open(directory);
     assertEquals(1, ir.leaves().size());
@@ -2374,7 +2374,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
       int id = random().nextInt(numDocs);
       writer.deleteDocuments(new Term("id", Integer.toString(id)));
     }
-    writer.shutdown();
+    writer.close();
     
     // compare
     final DirectoryReader ir = DirectoryReader.open(dir);
@@ -2488,7 +2488,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
       int id = random().nextInt(numDocs);
       writer.deleteDocuments(new Term("id", Integer.toString(id)));
     }
-    writer.shutdown();
+    writer.close();
     
     // compare
     final DirectoryReader ir = DirectoryReader.open(dir);
@@ -2615,7 +2615,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
       doc.add(new BinaryDocValuesField("field", new BytesRef()));
       w.addDocument(doc);
       IndexReader r = w.getReader();
-      w.shutdown();
+      w.close();
 
       AtomicReader ar = SlowCompositeReaderWrapper.wrap(r);
       BinaryDocValues values = ar.getBinaryDocValues("field");
@@ -2635,7 +2635,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
     Document doc = new Document();
     doc.add(new SortedNumericDocValuesField("dv", 5));
     writer.addDocument(doc);
-    writer.shutdown();
+    writer.close();
     
     // Now search the index:
     IndexReader reader = DirectoryReader.open(directory);
@@ -2652,12 +2652,12 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
   public void testOneSortedNumberOneMissing() throws IOException {
     assumeTrue("Codec does not support SORTED_NUMERIC", defaultCodecSupportsSortedNumeric());
     Directory directory = newDirectory();
-    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, null));
+    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(null));
     Document doc = new Document();
     doc.add(new SortedNumericDocValuesField("dv", 5));
     writer.addDocument(doc);
     writer.addDocument(new Document());
-    writer.shutdown();
+    writer.close();
     
     // Now search the index:
     IndexReader reader = DirectoryReader.open(directory);
@@ -2686,7 +2686,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
     doc.add(new SortedNumericDocValuesField("dv", 11));
     doc.add(new SortedNumericDocValuesField("dv", -5));
     writer.addDocument(doc);
-    writer.shutdown();
+    writer.close();
     
     // Now search the index:
     IndexReader reader = DirectoryReader.open(directory);
@@ -2704,13 +2704,13 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
   public void testTwoSortedNumberOneMissing() throws IOException {
     assumeTrue("Codec does not support SORTED_NUMERIC", defaultCodecSupportsSortedNumeric());
     Directory directory = newDirectory();
-    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, null));
+    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(null));
     Document doc = new Document();
     doc.add(new SortedNumericDocValuesField("dv", 11));
     doc.add(new SortedNumericDocValuesField("dv", -5));
     writer.addDocument(doc);
     writer.addDocument(new Document());
-    writer.shutdown();
+    writer.close();
     
     // Now search the index:
     IndexReader reader = DirectoryReader.open(directory);
@@ -2735,7 +2735,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
   public void testSortedNumberMerge() throws IOException {
     assumeTrue("Codec does not support SORTED_NUMERIC", defaultCodecSupportsSortedNumeric());
     Directory directory = newDirectory();
-    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, null);
+    IndexWriterConfig iwc = new IndexWriterConfig(null);
     iwc.setMergePolicy(newLogMergePolicy());
     IndexWriter writer = new IndexWriter(directory, iwc);
     Document doc = new Document();
@@ -2746,7 +2746,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
     doc.add(new SortedNumericDocValuesField("dv", -5));
     writer.addDocument(doc);
     writer.forceMerge(1);
-    writer.shutdown();
+    writer.close();
     
     // Now search the index:
     IndexReader reader = DirectoryReader.open(directory);
@@ -2783,7 +2783,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
     iwriter.forceMerge(1);
     
     DirectoryReader ireader = iwriter.getReader();
-    iwriter.shutdown();
+    iwriter.close();
     
     SortedNumericDocValues dv = getOnlySegmentReader(ireader).getSortedNumericDocValues("field");
     dv.setDocument(0);
diff --git lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase.java lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase.java
index 3bfff7a..91432ea 100644
--- lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase.java
+++ lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase.java
@@ -170,7 +170,7 @@ abstract class BaseIndexFileFormatTestCase extends LuceneTestCase {
     // do not use RIW which will change things up!
     MergePolicy mp = newTieredMergePolicy();
     mp.setNoCFSRatio(0);
-    IndexWriterConfig cfg = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setUseCompoundFile(false).setMergePolicy(mp);
+    IndexWriterConfig cfg = new IndexWriterConfig(new MockAnalyzer(random())).setUseCompoundFile(false).setMergePolicy(mp);
     IndexWriter w = new IndexWriter(dir, cfg);
     final int numDocs = atLeast(500);
     for (int i = 0; i < numDocs; ++i) {
@@ -186,7 +186,7 @@ abstract class BaseIndexFileFormatTestCase extends LuceneTestCase {
     Directory dir2 = newDirectory();
     mp = newTieredMergePolicy();
     mp.setNoCFSRatio(0);
-    cfg = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setUseCompoundFile(false).setMergePolicy(mp);
+    cfg = new IndexWriterConfig(new MockAnalyzer(random())).setUseCompoundFile(false).setMergePolicy(mp);
     w = new IndexWriter(dir2, cfg);
     w.addIndexes(reader);
     w.commit();
diff --git lucene/test-framework/src/java/org/apache/lucene/index/BaseMergePolicyTestCase.java lucene/test-framework/src/java/org/apache/lucene/index/BaseMergePolicyTestCase.java
index 3437a04..d94c1c3 100644
--- lucene/test-framework/src/java/org/apache/lucene/index/BaseMergePolicyTestCase.java
+++ lucene/test-framework/src/java/org/apache/lucene/index/BaseMergePolicyTestCase.java
@@ -62,7 +62,7 @@ public abstract class BaseMergePolicyTestCase extends LuceneTestCase {
       mayMerge.set(segmentCount > maxNumSegments);
       writer.forceMerge(maxNumSegments);
     }
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
   
diff --git lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase.java lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase.java
index fbad889..0295240 100644
--- lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase.java
+++ lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase.java
@@ -1430,7 +1430,7 @@ public abstract class BasePostingsFormatTestCase extends BaseIndexFileFormatTest
     assertEquals(termsEnum.term(), new BytesRef("something"));
     assertNull(termsEnum.next());
     ir.close();
-    iw.shutdown();
+    iw.close();
     dir.close();
   }
   
@@ -1455,7 +1455,7 @@ public abstract class BasePostingsFormatTestCase extends BaseIndexFileFormatTest
     assertEquals(termsEnum.term(), new BytesRef(""));
     assertNull(termsEnum.next());
     ir.close();
-    iw.shutdown();
+    iw.close();
     dir.close();
   }
   
@@ -1490,7 +1490,7 @@ public abstract class BasePostingsFormatTestCase extends BaseIndexFileFormatTest
       }
     }
     ir.close();
-    iw.shutdown();
+    iw.close();
     dir.close();
   }
 
@@ -1702,7 +1702,7 @@ public abstract class BasePostingsFormatTestCase extends BaseIndexFileFormatTest
     }
 
     IndexReader r = w.getReader();
-    w.shutdown();
+    w.close();
 
     Terms terms = MultiFields.getTerms(r, "body");
     assertEquals(sumDocFreq.get(), terms.getSumDocFreq());
diff --git lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase.java lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase.java
index 8ea4b8a..67e6886 100644
--- lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase.java
+++ lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase.java
@@ -170,7 +170,7 @@ public abstract class BaseStoredFieldsFormatTestCase extends BaseIndexFileFormat
         w.forceMerge(1);
       }
     }
-    w.shutdown();
+    w.close();
     dir.close();
   }
   
@@ -205,7 +205,7 @@ public abstract class BaseStoredFieldsFormatTestCase extends BaseIndexFileFormat
     assertEquals(f.stringValue(), "1 2 3");
     assertFalse(it.hasNext());
     r.close();
-    w.shutdown();
+    w.close();
     d.close();
   }
   
@@ -226,7 +226,7 @@ public abstract class BaseStoredFieldsFormatTestCase extends BaseIndexFileFormat
     assertEquals(17, f.binaryValue().length);
     doc.add(f);
     w.addDocument(doc);
-    w.shutdown();
+    w.close();
 
     IndexReader ir = DirectoryReader.open(dir);
     StoredDocument doc2 = ir.document(0);
@@ -293,7 +293,7 @@ public abstract class BaseStoredFieldsFormatTestCase extends BaseIndexFileFormat
       w.addDocument(doc);
     }
     final DirectoryReader r = w.getReader();
-    w.shutdown();
+    w.close();
     
     assertEquals(numDocs, r.numDocs());
 
@@ -321,7 +321,7 @@ public abstract class BaseStoredFieldsFormatTestCase extends BaseIndexFileFormat
     doc.add(new StringField("field2", "value", Field.Store.YES));
     w.addDocument(doc);
     IndexReader r = w.getReader();
-    w.shutdown();
+    w.close();
     assertFalse(r.document(0).getField("field").fieldType().indexed());
     assertTrue(r.document(0).getField("field2").fieldType().indexed());
     r.close();
@@ -377,7 +377,7 @@ public abstract class BaseStoredFieldsFormatTestCase extends BaseIndexFileFormat
       }
     }
     reader.close();
-    iw.shutdown();
+    iw.close();
     dir.close();
   }
   
@@ -402,7 +402,7 @@ public abstract class BaseStoredFieldsFormatTestCase extends BaseIndexFileFormat
     }
     rd.close();
     
-    iw.shutdown();
+    iw.close();
     dir.close();
   }
   
@@ -475,7 +475,7 @@ public abstract class BaseStoredFieldsFormatTestCase extends BaseIndexFileFormat
       throw ex.get();
     }
     
-    iw.shutdown();
+    iw.close();
     dir.close();
   }
   
@@ -530,7 +530,7 @@ public abstract class BaseStoredFieldsFormatTestCase extends BaseIndexFileFormat
       }
       iw.w.addDocument(doc);
       if (random().nextBoolean() && (i % (data.length / 10) == 0)) {
-        iw.w.shutdown();
+        iw.w.close();
         IndexWriterConfig iwConfNew = newIndexWriterConfig(new MockAnalyzer(random()));
         // test merging against a non-compressing codec
         if (iwConf.getCodec() == otherCodec) {
@@ -578,7 +578,7 @@ public abstract class BaseStoredFieldsFormatTestCase extends BaseIndexFileFormat
     iw.commit();
     iw.forceMerge(1);
     
-    iw.shutdown();
+    iw.close();
     dir.close();
   }
   
@@ -647,7 +647,7 @@ public abstract class BaseStoredFieldsFormatTestCase extends BaseIndexFileFormat
       }
     }
     rd.close();
-    iw.shutdown();
+    iw.close();
     dir.close();
   }
 
diff --git lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase.java lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase.java
index dd5d56f..ef08e9d 100644
--- lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase.java
+++ lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase.java
@@ -40,7 +40,6 @@ import org.apache.lucene.document.Field.Store;
 import org.apache.lucene.document.FieldType;
 import org.apache.lucene.document.StringField;
 import org.apache.lucene.document.TextField;
-import org.apache.lucene.index.FieldInfo.IndexOptions;
 import org.apache.lucene.index.TermsEnum.SeekStatus;
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.TermQuery;
@@ -539,7 +538,7 @@ public abstract class BaseTermVectorsFormatTestCase extends BaseIndexFileFormatT
       final Fields fields = reader.getTermVectors(docWithVectorsID);
       assertEquals(doc, fields);
       reader.close();
-      writer.shutdown();
+      writer.close();
       dir.close();
     }
   }
@@ -557,7 +556,7 @@ public abstract class BaseTermVectorsFormatTestCase extends BaseIndexFileFormatT
       final IndexReader reader = writer.getReader();
       assertEquals(doc, reader.getTermVectors(0));
       reader.close();
-      writer.shutdown();
+      writer.close();
       dir.close();
     }
   }
@@ -572,7 +571,7 @@ public abstract class BaseTermVectorsFormatTestCase extends BaseIndexFileFormatT
       final IndexReader reader = writer.getReader();
       assertEquals(doc, reader.getTermVectors(0));
       reader.close();
-      writer.shutdown();
+      writer.close();
       dir.close();
     }
   }
@@ -598,7 +597,7 @@ public abstract class BaseTermVectorsFormatTestCase extends BaseIndexFileFormatT
         final int doc2ID = docID(reader, "2");
         assertEquals(doc2, reader.getTermVectors(doc2ID));
         reader.close();
-        writer.shutdown();
+        writer.close();
         dir.close();
       }
     }
@@ -622,7 +621,7 @@ public abstract class BaseTermVectorsFormatTestCase extends BaseIndexFileFormatT
       assertEquals(docs[i], reader.getTermVectors(docID));
     }
     reader.close();
-    writer.shutdown();
+    writer.close();
     dir.close();
   }
 
@@ -660,7 +659,7 @@ public abstract class BaseTermVectorsFormatTestCase extends BaseIndexFileFormatT
         }
       }
       reader.close();
-      writer.shutdown();
+      writer.close();
       dir.close();
     }
   }
@@ -711,7 +710,7 @@ public abstract class BaseTermVectorsFormatTestCase extends BaseIndexFileFormatT
         thread.join();
       }
       reader.close();
-      writer.shutdown();
+      writer.close();
       dir.close();
       assertNull("One thread threw an exception", exception.get());
     }
diff --git lucene/test-framework/src/java/org/apache/lucene/index/DocHelper.java lucene/test-framework/src/java/org/apache/lucene/index/DocHelper.java
index 37df017..ad8ad29 100644
--- lucene/test-framework/src/java/org/apache/lucene/index/DocHelper.java
+++ lucene/test-framework/src/java/org/apache/lucene/index/DocHelper.java
@@ -37,8 +37,6 @@ import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.similarities.Similarity;
 import org.apache.lucene.store.Directory;
 
-import static org.apache.lucene.util.LuceneTestCase.TEST_VERSION_CURRENT;
-
 class DocHelper {
   
   public static final FieldType customType;
@@ -271,12 +269,12 @@ class DocHelper {
    */ 
   public static SegmentCommitInfo writeDoc(Random random, Directory dir, Analyzer analyzer, Similarity similarity, Document doc) throws IOException {
     IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig( /* LuceneTestCase.newIndexWriterConfig(random, */ 
-        TEST_VERSION_CURRENT, analyzer).setSimilarity(similarity == null ? IndexSearcher.getDefaultSimilarity() : similarity));
+        analyzer).setSimilarity(similarity == null ? IndexSearcher.getDefaultSimilarity() : similarity));
     //writer.setNoCFSRatio(0.0);
     writer.addDocument(doc);
     writer.commit();
     SegmentCommitInfo info = writer.newestSegment();
-    writer.shutdown();
+    writer.close();
     return info;
   }
 
diff --git lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter.java lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter.java
index 5a5dccf..6645dfa 100644
--- lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter.java
+++ lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter.java
@@ -33,7 +33,6 @@ import org.apache.lucene.util.InfoStream;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.NullInfoStream;
 import org.apache.lucene.util.TestUtil;
-import org.apache.lucene.util.Version;
 
 /** Silly class that randomizes the indexing experience.  EG
  *  it may swap in a different merge policy/scheduler; may
@@ -69,19 +68,14 @@ public class RandomIndexWriter implements Closeable {
     return new IndexWriter(dir, conf);
   }
 
-  /** create a RandomIndexWriter with a random config: Uses TEST_VERSION_CURRENT and MockAnalyzer */
+  /** create a RandomIndexWriter with a random config: Uses MockAnalyzer */
   public RandomIndexWriter(Random r, Directory dir) throws IOException {
-    this(r, dir, LuceneTestCase.newIndexWriterConfig(r, LuceneTestCase.TEST_VERSION_CURRENT, new MockAnalyzer(r)));
-  }
-  
-  /** create a RandomIndexWriter with a random config: Uses TEST_VERSION_CURRENT */
-  public RandomIndexWriter(Random r, Directory dir, Analyzer a) throws IOException {
-    this(r, dir, LuceneTestCase.newIndexWriterConfig(r, LuceneTestCase.TEST_VERSION_CURRENT, a));
+    this(r, dir, LuceneTestCase.newIndexWriterConfig(r, new MockAnalyzer(r)));
   }
   
   /** create a RandomIndexWriter with a random config */
-  public RandomIndexWriter(Random r, Directory dir, Version v, Analyzer a) throws IOException {
-    this(r, dir, LuceneTestCase.newIndexWriterConfig(r, v, a));
+  public RandomIndexWriter(Random r, Directory dir, Analyzer a) throws IOException {
+    this(r, dir, LuceneTestCase.newIndexWriterConfig(r, a));
   }
   
   /** create a RandomIndexWriter with the provided config */
@@ -364,27 +358,15 @@ public class RandomIndexWriter implements Closeable {
     // forceMerge since presumably they might open a reader on the dir.
     if (getReaderCalled == false && r.nextInt(8) == 2) {
       doRandomForceMerge();
-      // index may have changed, must commit the changes, or otherwise they are discarded by the call to close()
-      w.commit();
+      if (w.getConfig().getCommitOnClose() == false) {
+        // index may have changed, must commit the changes, or otherwise they are discarded by the call to close()
+        w.commit();
+      }
     }
     w.close();
   }
 
   /**
-   * Shuts down this writer
-   * @see IndexWriter#shutdown()
-   */
-  public void shutdown() throws IOException {
-    LuceneTestCase.maybeChangeLiveIndexWriterConfig(r, w.getConfig());
-    // if someone isn't using getReader() API, we want to be sure to
-    // forceMerge since presumably they might open a reader on the dir.
-    if (getReaderCalled == false && r.nextInt(8) == 2) {
-      doRandomForceMerge();
-    }
-    w.shutdown();
-  }
-
-  /**
    * Forces a forceMerge.
    * <p>
    * NOTE: this should be avoided in tests unless absolutely necessary,
diff --git lucene/test-framework/src/java/org/apache/lucene/index/ThreadedIndexingAndSearchingTestCase.java lucene/test-framework/src/java/org/apache/lucene/index/ThreadedIndexingAndSearchingTestCase.java
index d3a2ca5..6383c12 100644
--- lucene/test-framework/src/java/org/apache/lucene/index/ThreadedIndexingAndSearchingTestCase.java
+++ lucene/test-framework/src/java/org/apache/lucene/index/ThreadedIndexingAndSearchingTestCase.java
@@ -442,7 +442,7 @@ public abstract class ThreadedIndexingAndSearchingTestCase extends LuceneTestCas
     }
     MockAnalyzer analyzer = new MockAnalyzer(random());
     analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));
-    final IndexWriterConfig conf = newIndexWriterConfig(analyzer);
+    final IndexWriterConfig conf = newIndexWriterConfig(analyzer).setCommitOnClose(false);
     conf.setInfoStream(new FailOnNonBulkMergesInfoStream());
     if (conf.getMergePolicy() instanceof MockRandomMergePolicy) {
       ((MockRandomMergePolicy)conf.getMergePolicy()).setDoNonBulkMerges(false);
@@ -637,9 +637,13 @@ public abstract class ThreadedIndexingAndSearchingTestCase extends LuceneTestCas
 
     doClose();
 
-    writer.shutdown(false);
+    try {
+      writer.commit();
+    } finally {
+      writer.close();
+    }
 
-    // Cannot shutdown until after writer is closed because
+    // Cannot close until after writer is closed because
     // writer has merged segment warmer that uses IS to run
     // searches, and that IS may be using this es!
     if (es != null) {
diff --git lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils.java lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils.java
index eb1fa1c..9320af9 100644
--- lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils.java
+++ lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils.java
@@ -33,15 +33,12 @@ import org.apache.lucene.index.DirectoryReader;
 import org.apache.lucene.index.IndexWriter;
 import org.apache.lucene.index.IndexWriterConfig;
 import org.apache.lucene.index.MultiReader;
-import org.apache.lucene.index.SlowCompositeReaderWrapper;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.MockDirectoryWrapper;
 import org.apache.lucene.store.RAMDirectory;
 import org.apache.lucene.util.Bits;
 import org.apache.lucene.util.LuceneTestCase;
 
-import static org.apache.lucene.util.LuceneTestCase.TEST_VERSION_CURRENT;
-
 /**
  * Utility class for sanity-checking queries.
  */
@@ -203,12 +200,12 @@ public class QueryUtils {
     if (LuceneTestCase.VERBOSE) {
       System.out.println("NOTE: QueryUtils: now create empty index");
     }
-    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));
+    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random)));
     for (int i = 0; i < numDocs; i++) {
       w.addDocument(new Document());
     }
     w.forceMerge(1);
-    w.shutdown();
+    w.close();
     if (LuceneTestCase.VERBOSE) {
       System.out.println("NOTE: QueryUtils: done create empty index");
     }
diff --git lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase.java lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase.java
index a47dd3d..8025f52 100644
--- lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase.java
+++ lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase.java
@@ -88,7 +88,7 @@ public abstract class SearchEquivalenceTestBase extends LuceneTestCase {
     reader = iw.getReader();
     s1 = newSearcher(reader);
     s2 = newSearcher(reader);
-    iw.shutdown();
+    iw.close();
   }
   
   @AfterClass
diff --git lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.java lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.java
index 5e4c498..9bb3cd8 100644
--- lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.java
+++ lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.java
@@ -451,7 +451,7 @@ public abstract class ShardSearchingTestBase extends LuceneTestCase {
       // TODO: set warmer
       MockAnalyzer analyzer = new MockAnalyzer(random());
       analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));
-      IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer);
+      IndexWriterConfig iwc = new IndexWriterConfig(analyzer);
       iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);
       if (VERBOSE) {
         iwc.setInfoStream(new PrintStreamInfoStream(System.out));
@@ -537,7 +537,7 @@ public abstract class ShardSearchingTestBase extends LuceneTestCase {
       }
       searchers.close();
       mgr.close();
-      writer.shutdown();
+      writer.close();
       dir.close();
     }
   }
diff --git lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper.java lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper.java
index f49c3fc..8942967 100644
--- lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper.java
+++ lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper.java
@@ -700,7 +700,7 @@ public class MockDirectoryWrapper extends BaseDirectoryWrapper {
           Set<String> allFiles = new HashSet<>(Arrays.asList(listAll()));
           allFiles.removeAll(pendingDeletions);
           String[] startFiles = allFiles.toArray(new String[0]);
-          IndexWriterConfig iwc = new IndexWriterConfig(LuceneTestCase.TEST_VERSION_CURRENT, null);
+          IndexWriterConfig iwc = new IndexWriterConfig(null);
           iwc.setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE);
           new IndexWriter(in, iwc).rollback();
           String[] endFiles = in.listAll();
@@ -791,7 +791,7 @@ public class MockDirectoryWrapper extends BaseDirectoryWrapper {
           DirectoryReader ir1 = DirectoryReader.open(this);
           int numDocs1 = ir1.numDocs();
           ir1.close();
-          new IndexWriter(this, new IndexWriterConfig(LuceneTestCase.TEST_VERSION_CURRENT, null)).shutdown();
+          new IndexWriter(this, new IndexWriterConfig(null)).close();
           DirectoryReader ir2 = DirectoryReader.open(this);
           int numDocs2 = ir2.numDocs();
           ir2.close();
diff --git lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.java lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.java
index 5418a90..f1afee8 100644
--- lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.java
+++ lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.java
@@ -872,12 +872,12 @@ public abstract class LuceneTestCase extends Assert {
 
   /** create a new index writer config with random defaults */
   public static IndexWriterConfig newIndexWriterConfig(Analyzer a) {
-    return newIndexWriterConfig(random(), TEST_VERSION_CURRENT, a);
+    return newIndexWriterConfig(random(), a);
   }
   
   /** create a new index writer config with random defaults using the specified random */
-  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {
-    IndexWriterConfig c = new IndexWriterConfig(v, a);
+  public static IndexWriterConfig newIndexWriterConfig(Random r, Analyzer a) {
+    IndexWriterConfig c = new IndexWriterConfig(a);
     c.setSimilarity(classEnvRule.similarity);
     if (VERBOSE) {
       // Even though TestRuleSetupAndRestoreClassEnv calls
diff --git lucene/test-framework/src/java/org/apache/lucene/util/TestUtil.java lucene/test-framework/src/java/org/apache/lucene/util/TestUtil.java
index 1bd0451..8bef304 100644
--- lucene/test-framework/src/java/org/apache/lucene/util/TestUtil.java
+++ lucene/test-framework/src/java/org/apache/lucene/util/TestUtil.java
@@ -922,7 +922,7 @@ public final class TestUtil {
         ex.awaitTermination(1, TimeUnit.SECONDS);
       } catch (InterruptedException e) {
         // Just report it on the syserr.
-        System.err.println("Could not properly shutdown executor service.");
+        System.err.println("Could not properly close executor service.");
         e.printStackTrace(System.err);
       }
     }
diff --git solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor.java solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor.java
index 2684f72..33bb0b7 100644
--- solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor.java
+++ solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor.java
@@ -99,11 +99,11 @@ public class SolrEntityProcessor extends EntityProcessorBase {
       URL url = new URL(serverPath);
       // (wt="javabin|xml") default is javabin
       if ("xml".equals(context.getResolvedEntityAttribute(CommonParams.WT))) {
-        // TODO: it doesn't matter for this impl when passing a client currently, but we should shutdown this!
+        // TODO: it doesn't matter for this impl when passing a client currently, but we should close this!
         solrServer = new HttpSolrServer(url.toExternalForm(), client, new XMLResponseParser());
         LOG.info("using XMLResponseParser");
       } else {
-        // TODO: it doesn't matter for this impl when passing a client currently, but we should shutdown this!
+        // TODO: it doesn't matter for this impl when passing a client currently, but we should close this!
         solrServer = new HttpSolrServer(url.toExternalForm(), client);
         LOG.info("using BinaryResponseParser");
       }
diff --git solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractDIHJdbcTestCase.java solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractDIHJdbcTestCase.java
index 9cb2839..9c455d0 100644
--- solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractDIHJdbcTestCase.java
+++ solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractDIHJdbcTestCase.java
@@ -74,7 +74,7 @@ public abstract class AbstractDIHJdbcTestCase extends
   @AfterClass
   public static void afterClassDihJdbcTest() throws Exception {
     try {
-      DriverManager.getConnection("jdbc:derby:;shutdown=true;territory=en_US");
+      DriverManager.getConnection("jdbc:derby:;close=true;territory=en_US");
     } catch (SQLException e) {
       // ignore...we might not even be using derby this time...
     }
diff --git solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/TreeMergeOutputFormat.java solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/TreeMergeOutputFormat.java
index 03acf45..f1da3a0 100644
--- solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/TreeMergeOutputFormat.java
+++ solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/TreeMergeOutputFormat.java
@@ -23,7 +23,6 @@ import java.io.Writer;
 import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.List;
-import java.util.concurrent.TimeUnit;
 
 import org.apache.hadoop.fs.Path;
 import org.apache.hadoop.io.NullWritable;
@@ -39,7 +38,6 @@ import org.apache.lucene.index.MergePolicy;
 import org.apache.lucene.index.TieredMergePolicy;
 import org.apache.lucene.misc.IndexMergeTool;
 import org.apache.lucene.store.Directory;
-import org.apache.lucene.util.Version;
 import org.apache.solr.store.hdfs.HdfsDirectory;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -98,7 +96,7 @@ public class TreeMergeOutputFormat extends FileOutputFormat<Text, NullWritable>
         Directory mergedIndex = new HdfsDirectory(workDir, context.getConfiguration());
         
         // TODO: shouldn't we pull the Version from the solrconfig.xml?
-        IndexWriterConfig writerConfig = new IndexWriterConfig(Version.LUCENE_CURRENT, null)
+        IndexWriterConfig writerConfig = new IndexWriterConfig(null)
             .setOpenMode(OpenMode.CREATE).setUseCompoundFile(false)
             //.setMergePolicy(mergePolicy) // TODO: grab tuned MergePolicy from solrconfig.xml?
             //.setMergeScheduler(...) // TODO: grab tuned MergeScheduler from solrconfig.xml?
@@ -163,7 +161,7 @@ public class TreeMergeOutputFormat extends FileOutputFormat<Text, NullWritable>
         
         start = System.nanoTime();
         LOG.info("Optimizing Solr: Closing index writer");
-        writer.shutdown();
+        writer.close();
         secs = (System.nanoTime() - start) / (float)(10^9);
         LOG.info("Optimizing Solr: Done closing index writer in {} secs", secs);
         context.setStatus("Done");
diff --git solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest.java solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest.java
index ff3586f..e67904e 100644
--- solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest.java
+++ solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest.java
@@ -225,7 +225,7 @@ public class MorphlineGoLiveMiniMRTest extends AbstractFullDistribZkTestBase {
     System.clearProperty("test.cache.data");
     
     if (mrCluster != null) {
-      //mrCluster.shutdown();
+      //mrCluster.close();
       mrCluster = null;
     }
     if (dfsCluster != null) {
diff --git solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/EmbeddedTestSolrServer.java solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/EmbeddedTestSolrServer.java
index 1f747f3..39e3fda 100644
--- solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/EmbeddedTestSolrServer.java
+++ solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/EmbeddedTestSolrServer.java
@@ -24,7 +24,7 @@ import org.apache.solr.client.solrj.response.UpdateResponse;
 import org.apache.solr.core.CoreContainer;
 
 /**
- * An EmbeddedSolrServer that supresses shutdown and rollback requests as
+ * An EmbeddedSolrServer that supresses close and rollback requests as
  * necessary for testing
  */
 public class EmbeddedTestSolrServer extends EmbeddedSolrServer {
diff --git solr/core/src/java/org/apache/solr/cloud/ElectionContext.java solr/core/src/java/org/apache/solr/cloud/ElectionContext.java
index e8946b5..7cb8fea 100644
--- solr/core/src/java/org/apache/solr/cloud/ElectionContext.java
+++ solr/core/src/java/org/apache/solr/cloud/ElectionContext.java
@@ -439,7 +439,7 @@ final class ShardLeaderElectionContext extends ShardLeaderElectionContextBase {
       throws InterruptedException, KeeperException, IOException {
     // remove our ephemeral and re join the election
     if (cc.isShutDown()) {
-      log.info("Not rejoining election because CoreContainer is shutdown");
+      log.info("Not rejoining election because CoreContainer is close");
       return;
     }
     
diff --git solr/core/src/java/org/apache/solr/cloud/LeaderInitiatedRecoveryThread.java solr/core/src/java/org/apache/solr/cloud/LeaderInitiatedRecoveryThread.java
index 98f5157..cd6b736 100644
--- solr/core/src/java/org/apache/solr/cloud/LeaderInitiatedRecoveryThread.java
+++ solr/core/src/java/org/apache/solr/cloud/LeaderInitiatedRecoveryThread.java
@@ -150,7 +150,7 @@ public class LeaderInitiatedRecoveryThread extends Thread {
         
         if (coreContainer.isShutDown()) {
           log.warn("Stop trying to send recovery command to downed replica core={} coreNodeName={} on "
-              + replicaNodeName + " because my core container is shutdown.", coreNeedingRecovery, replicaCoreNodeName);
+              + replicaNodeName + " because my core container is close.", coreNeedingRecovery, replicaCoreNodeName);
           continueTrying = false;
           break;
         }
diff --git solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor.java solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor.java
index 3dee8a3..74dc666 100644
--- solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor.java
+++ solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor.java
@@ -397,7 +397,7 @@ public class OverseerCollectionProcessor implements Runnable, ClosableThread {
         try {
           tpe.awaitTermination(60, TimeUnit.SECONDS);
         } catch (InterruptedException e) {
-          log.warn("Thread interrupted while waiting for OCP threadpool shutdown.");
+          log.warn("Thread interrupted while waiting for OCP threadpool close.");
           Thread.currentThread().interrupt();
         } finally {
           if (!tpe.isShutdown())
diff --git solr/core/src/java/org/apache/solr/cloud/ZkCLI.java solr/core/src/java/org/apache/solr/cloud/ZkCLI.java
index ef5c469..5c199fe 100644
--- solr/core/src/java/org/apache/solr/cloud/ZkCLI.java
+++ solr/core/src/java/org/apache/solr/cloud/ZkCLI.java
@@ -194,7 +194,7 @@ public class ZkCLI {
 
           ZkController.bootstrapConf(zkClient, cc, solrHome);
 
-          // No need to shutdown the CoreContainer, as it wasn't started
+          // No need to close the CoreContainer, as it wasn't started
           // up in the first place...
           
         } else if (line.getOptionValue(CMD).equals(UPCONFIG)) {
diff --git solr/core/src/java/org/apache/solr/cloud/ZkController.java solr/core/src/java/org/apache/solr/cloud/ZkController.java
index 732754c..4bf0ba8 100644
--- solr/core/src/java/org/apache/solr/cloud/ZkController.java
+++ solr/core/src/java/org/apache/solr/cloud/ZkController.java
@@ -81,7 +81,7 @@ import org.slf4j.LoggerFactory;
  * notes: loads everything on init, creates what's not there - further updates
  * are prompted with Watches.
  * 
- * TODO: exceptions during shutdown on attempts to update cloud state
+ * TODO: exceptions during close on attempts to update cloud state
  * 
  */
 public final class ZkController {
@@ -708,7 +708,7 @@ public final class ZkController {
       boolean nodeDeleted = true;
       try {
         // we attempt a delete in the case of a quick server bounce -
-        // if there was not a graceful shutdown, the node may exist
+        // if there was not a graceful close, the node may exist
         // until expiration timeout - so a node won't be created here because
         // it exists, but eventually the node will be removed. So delete
         // in case it exists and create a new node.
@@ -935,7 +935,7 @@ public final class ZkController {
         Thread.sleep(1000);
       }
       if (cc.isShutDown()) {
-        throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, "CoreContainer is shutdown");
+        throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, "CoreContainer is close");
       }
     }
     throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, "Could not get leader props", exp);
diff --git solr/core/src/java/org/apache/solr/core/CoreContainer.java solr/core/src/java/org/apache/solr/core/CoreContainer.java
index d5e1ec5..b343830 100644
--- solr/core/src/java/org/apache/solr/core/CoreContainer.java
+++ solr/core/src/java/org/apache/solr/core/CoreContainer.java
@@ -320,7 +320,7 @@ public class CoreContainer {
     try {
       coreAdminHandler.shutdown();
     } catch (Exception e) {
-      log.warn("Error shutting down CoreAdminHandler. Continuing to shutdown CoreContainer.");
+      log.warn("Error shutting down CoreAdminHandler. Continuing to close CoreContainer.");
       e.printStackTrace();
     }
 
@@ -386,7 +386,7 @@ public class CoreContainer {
   protected void finalize() throws Throwable {
     try {
       if(!isShutDown){
-        log.error("CoreContainer was not shutdown prior to finalize(), indicates a bug -- POSSIBLE RESOURCE LEAK!!!  instance=" + System.identityHashCode(this));
+        log.error("CoreContainer was not close prior to finalize(), indicates a bug -- POSSIBLE RESOURCE LEAK!!!  instance=" + System.identityHashCode(this));
       }
     } finally {
       super.finalize();
@@ -420,7 +420,7 @@ public class CoreContainer {
 
     if (isShutDown) {
       core.close();
-      throw new IllegalStateException("This CoreContainer has been shutdown");
+      throw new IllegalStateException("This CoreContainer has been close");
     }
     if (cd.isTransient()) {
       old = solrCores.putTransientCore(cfg, name, core, loader);
@@ -473,7 +473,7 @@ public class CoreContainer {
   public SolrCore create(CoreDescriptor dcore, boolean publishState) {
 
     if (isShutDown) {
-      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, "Solr has shutdown.");
+      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, "Solr has close.");
     }
 
     try {
diff --git solr/core/src/java/org/apache/solr/core/DirectoryFactory.java solr/core/src/java/org/apache/solr/core/DirectoryFactory.java
index 52cd7b1..d64715a 100644
--- solr/core/src/java/org/apache/solr/core/DirectoryFactory.java
+++ solr/core/src/java/org/apache/solr/core/DirectoryFactory.java
@@ -51,7 +51,7 @@ public abstract class DirectoryFactory implements NamedListInitializedPlugin,
   
   /**
    * Indicates a Directory will no longer be used, and when it's ref count
-   * hits 0, it can be closed. On shutdown all directories will be closed
+   * hits 0, it can be closed. On close all directories will be closed
    * whether this has been called or not. This is simply to allow early cleanup.
    * 
    * @throws IOException If there is a low-level I/O error.
diff --git solr/core/src/java/org/apache/solr/core/SolrCore.java solr/core/src/java/org/apache/solr/core/SolrCore.java
index c0d2bef..6d67ef7 100644
--- solr/core/src/java/org/apache/solr/core/SolrCore.java
+++ solr/core/src/java/org/apache/solr/core/SolrCore.java
@@ -527,7 +527,7 @@ public final class SolrCore implements SolrInfoMBean, Closeable {
 
         SolrIndexWriter writer = SolrIndexWriter.create("SolrCore.initIndex", indexDir, getDirectoryFactory(), true, 
                                                         getLatestSchema(), solrConfig.indexConfig, solrDelPolicy, codec);
-        writer.shutdown();
+        writer.close();
       }
 
  
diff --git solr/core/src/java/org/apache/solr/spelling/FileBasedSpellChecker.java solr/core/src/java/org/apache/solr/spelling/FileBasedSpellChecker.java
index fb730eb..fe24a74 100644
--- solr/core/src/java/org/apache/solr/spelling/FileBasedSpellChecker.java
+++ solr/core/src/java/org/apache/solr/spelling/FileBasedSpellChecker.java
@@ -71,7 +71,7 @@ public class FileBasedSpellChecker extends AbstractLuceneSpellChecker {
     // TODO: you should be able to specify the IWC params?
     // TODO: if we enable this, codec gets angry since field won't exist in the schema
     // config.setCodec(core.getCodec());
-    spellChecker.indexDictionary(dictionary, new IndexWriterConfig(core.getSolrConfig().luceneMatchVersion, null), false);
+    spellChecker.indexDictionary(dictionary, new IndexWriterConfig(null), false);
   }
 
   /**
@@ -96,7 +96,7 @@ public class FileBasedSpellChecker extends AbstractLuceneSpellChecker {
 
         IndexWriter writer = new IndexWriter(
             ramDir,
-            new IndexWriterConfig(core.getSolrConfig().luceneMatchVersion, fieldType.getIndexAnalyzer()).
+            new IndexWriterConfig(fieldType.getIndexAnalyzer()).
                 setMaxBufferedDocs(150).
                 setMergePolicy(mp).
                 setOpenMode(IndexWriterConfig.OpenMode.CREATE)
@@ -112,7 +112,7 @@ public class FileBasedSpellChecker extends AbstractLuceneSpellChecker {
           writer.addDocument(d);
         }
         writer.forceMerge(1);
-        writer.shutdown();
+        writer.close();
 
         dictionary = new HighFrequencyDictionary(DirectoryReader.open(ramDir),
                 WORD_FIELD_NAME, 0.0f);
diff --git solr/core/src/java/org/apache/solr/spelling/IndexBasedSpellChecker.java solr/core/src/java/org/apache/solr/spelling/IndexBasedSpellChecker.java
index a33cf48..95c9d00 100644
--- solr/core/src/java/org/apache/solr/spelling/IndexBasedSpellChecker.java
+++ solr/core/src/java/org/apache/solr/spelling/IndexBasedSpellChecker.java
@@ -93,7 +93,7 @@ public class IndexBasedSpellChecker extends AbstractLuceneSpellChecker {
     // TODO: you should be able to specify the IWC params?
     // TODO: if we enable this, codec gets angry since field won't exist in the schema
     // config.setCodec(core.getCodec());
-    spellChecker.indexDictionary(dictionary, new IndexWriterConfig(core.getSolrConfig().luceneMatchVersion, null), false);
+    spellChecker.indexDictionary(dictionary, new IndexWriterConfig(null), false);
   }
 
   @Override
diff --git solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState.java solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState.java
index 358d36f..93b548b 100644
--- solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState.java
+++ solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState.java
@@ -68,11 +68,11 @@ public final class DefaultSolrCoreState extends SolrCoreState implements Recover
         closer.closeWriter(indexWriter);
       } else if (indexWriter != null) {
         log.info("closing IndexWriter...");
-        indexWriter.shutdown();
+        indexWriter.close();
       }
       indexWriter = null;
     } catch (Exception e) {
-      log.error("Error during shutdown of writer.", e);
+      log.error("Error during close of writer.", e);
     } 
   }
   
@@ -161,7 +161,7 @@ public final class DefaultSolrCoreState extends SolrCoreState implements Recover
           if (!rollback) {
             try {
               log.info("Closing old IndexWriter... core=" + coreName);
-              indexWriter.shutdown();
+              indexWriter.close();
             } catch (Exception e) {
               SolrException.log(log, "Error closing old IndexWriter. core="
                   + coreName, e);
@@ -283,14 +283,14 @@ public final class DefaultSolrCoreState extends SolrCoreState implements Recover
     
     // check before we grab the lock
     if (cc.isShutDown()) {
-      log.warn("Skipping recovery because Solr is shutdown");
+      log.warn("Skipping recovery because Solr is close");
       return;
     }
     
     synchronized (recoveryLock) {
       // to be air tight we must also check after lock
       if (cc.isShutDown()) {
-        log.warn("Skipping recovery because Solr is shutdown");
+        log.warn("Skipping recovery because Solr is close");
         return;
       }
       log.info("Running recovery - first canceling any ongoing recovery");
@@ -304,7 +304,7 @@ public final class DefaultSolrCoreState extends SolrCoreState implements Recover
         }
         // check again for those that were waiting
         if (cc.isShutDown()) {
-          log.warn("Skipping recovery because Solr is shutdown");
+          log.warn("Skipping recovery because Solr is close");
           return;
         }
         if (closed) return;
diff --git solr/core/src/java/org/apache/solr/update/HdfsUpdateLog.java solr/core/src/java/org/apache/solr/update/HdfsUpdateLog.java
index 433064c..873eb39 100644
--- solr/core/src/java/org/apache/solr/update/HdfsUpdateLog.java
+++ solr/core/src/java/org/apache/solr/update/HdfsUpdateLog.java
@@ -201,7 +201,7 @@ public class HdfsUpdateLog extends UpdateLog {
     
     // Record first two logs (oldest first) at startup for potential tlog
     // recovery.
-    // It's possible that at abnormal shutdown both "tlog" and "prevTlog" were
+    // It's possible that at abnormal close both "tlog" and "prevTlog" were
     // uncapped.
     for (TransactionLog ll : logs) {
       newestLogsOnStartup.addFirst(ll);
diff --git solr/core/src/java/org/apache/solr/update/PeerSync.java solr/core/src/java/org/apache/solr/update/PeerSync.java
index 4f7b5d2..5394f2a 100644
--- solr/core/src/java/org/apache/solr/update/PeerSync.java
+++ solr/core/src/java/org/apache/solr/update/PeerSync.java
@@ -138,7 +138,7 @@ public class PeerSync  {
     
     uhandler = core.getUpdateHandler();
     ulog = uhandler.getUpdateLog();
-    // TODO: shutdown
+    // TODO: close
     shardHandlerFactory = (HttpShardHandlerFactory) core.getCoreDescriptor().getCoreContainer().getShardHandlerFactory();
     shardHandler = shardHandlerFactory.getShardHandler(client);
   }
diff --git solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.java solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.java
index 743d971..8cbb863 100644
--- solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.java
+++ solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.java
@@ -112,7 +112,7 @@ public class SolrCmdDistributor {
         if (testing_errorHook != null) Diagnostics.call(testing_errorHook,
             err.e);
         
-        // this can happen in certain situations such as shutdown
+        // this can happen in certain situations such as close
         if (isRetry) {
           if (rspCode == 404 || rspCode == 403 || rspCode == 503) {
             doRetry = true;
diff --git solr/core/src/java/org/apache/solr/update/SolrIndexConfig.java solr/core/src/java/org/apache/solr/update/SolrIndexConfig.java
index 99f80ee..0c5d375 100644
--- solr/core/src/java/org/apache/solr/update/SolrIndexConfig.java
+++ solr/core/src/java/org/apache/solr/update/SolrIndexConfig.java
@@ -199,7 +199,7 @@ public class SolrIndexConfig {
     // for the default analyzer, and explicitly pass an analyzer on 
     // appropriate calls to IndexWriter
     
-    IndexWriterConfig iwc = new IndexWriterConfig(luceneVersion, null);
+    IndexWriterConfig iwc = new IndexWriterConfig(null);
     if (maxBufferedDocs != -1)
       iwc.setMaxBufferedDocs(maxBufferedDocs);
 
diff --git solr/core/src/java/org/apache/solr/update/SolrIndexSplitter.java solr/core/src/java/org/apache/solr/update/SolrIndexSplitter.java
index 86913b5..f48b501 100644
--- solr/core/src/java/org/apache/solr/update/SolrIndexSplitter.java
+++ solr/core/src/java/org/apache/solr/update/SolrIndexSplitter.java
@@ -138,7 +138,7 @@ public class SolrIndexSplitter {
           iwRef.decref();
         } else {
           if (success) {
-            iw.shutdown();
+            iw.close();
           } else {
             IOUtils.closeWhileHandlingException(iw);
           }
diff --git solr/core/src/java/org/apache/solr/update/UpdateLog.java solr/core/src/java/org/apache/solr/update/UpdateLog.java
index 3f5ed03..3099e21 100644
--- solr/core/src/java/org/apache/solr/update/UpdateLog.java
+++ solr/core/src/java/org/apache/solr/update/UpdateLog.java
@@ -259,7 +259,7 @@ public class UpdateLog implements PluginInfoInitialized {
     }
 
     // Record first two logs (oldest first) at startup for potential tlog recovery.
-    // It's possible that at abnormal shutdown both "tlog" and "prevTlog" were uncapped.
+    // It's possible that at abnormal close both "tlog" and "prevTlog" were uncapped.
     for (TransactionLog ll : logs) {
       newestLogsOnStartup.addFirst(ll);
       if (newestLogsOnStartup.size() >= 2) break;
diff --git solr/core/src/java/org/apache/solr/update/processor/DocExpirationUpdateProcessorFactory.java solr/core/src/java/org/apache/solr/update/processor/DocExpirationUpdateProcessorFactory.java
index d2a3a21..fa57cb5 100644
--- solr/core/src/java/org/apache/solr/update/processor/DocExpirationUpdateProcessorFactory.java
+++ solr/core/src/java/org/apache/solr/update/processor/DocExpirationUpdateProcessorFactory.java
@@ -268,12 +268,12 @@ public final class DocExpirationUpdateProcessorFactory
         // update handler is gone, hard terminiate anything that's left.
 
         if (executor.isTerminating()) {
-          log.info("Triggering hard shutdown of DocExpiration Executor");
+          log.info("Triggering hard close of DocExpiration Executor");
           executor.shutdownNow();
         }
       }
       public void preClose(SolrCore core) {
-        log.info("Triggering Graceful shutdown of DocExpiration Executor");
+        log.info("Triggering Graceful close of DocExpiration Executor");
         executor.shutdown();
       }
     });
diff --git solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest.java solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest.java
index 5adc575..66fbde6 100644
--- solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest.java
+++ solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest.java
@@ -195,7 +195,7 @@ public class LeaderElectionIntegrationTest extends SolrTestCaseJ4 {
       
       if (leaderPort == newLeaderPort) {
         zkClient.printLayoutToStdOut();
-        fail("We didn't find a new leader! " + leaderPort + " was shutdown, but it's still showing as the leader");
+        fail("We didn't find a new leader! " + leaderPort + " was close, but it's still showing as the leader");
       }
       
       assertTrue("Could not find leader " + newLeaderPort + " in " + shard1Ports, shard1Ports.contains(newLeaderPort));
diff --git solr/core/src/test/org/apache/solr/core/SolrCoreCheckLockOnStartupTest.java solr/core/src/test/org/apache/solr/core/SolrCoreCheckLockOnStartupTest.java
index 4ee186b..bfc2b36 100644
--- solr/core/src/test/org/apache/solr/core/SolrCoreCheckLockOnStartupTest.java
+++ solr/core/src/test/org/apache/solr/core/SolrCoreCheckLockOnStartupTest.java
@@ -49,7 +49,7 @@ public class SolrCoreCheckLockOnStartupTest extends SolrTestCaseJ4 {
 
     Directory directory = newFSDirectory(new File(initCoreDataDir, "index"), new SimpleFSLockFactory());
     //creates a new IndexWriter without releasing the lock yet
-    IndexWriter indexWriter = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, null));
+    IndexWriter indexWriter = new IndexWriter(directory, new IndexWriterConfig(null));
 
     ignoreException("locked");
     try {
@@ -62,7 +62,7 @@ public class SolrCoreCheckLockOnStartupTest extends SolrTestCaseJ4 {
     } finally {
       System.clearProperty("solr.tests.lockType");
       unIgnoreException("locked");
-      indexWriter.shutdown();
+      indexWriter.close();
       directory.close();
       deleteCore();
     }
@@ -75,7 +75,7 @@ public class SolrCoreCheckLockOnStartupTest extends SolrTestCaseJ4 {
     log.info("Acquiring lock on {}", indexDir.getAbsolutePath());
     Directory directory = newFSDirectory(indexDir, new NativeFSLockFactory());
     //creates a new IndexWriter without releasing the lock yet
-    IndexWriter indexWriter = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, null));
+    IndexWriter indexWriter = new IndexWriter(directory, new IndexWriterConfig(null));
 
     ignoreException("locked");
     try {
@@ -89,7 +89,7 @@ public class SolrCoreCheckLockOnStartupTest extends SolrTestCaseJ4 {
     } finally {
       System.clearProperty("solr.tests.lockType");
       unIgnoreException("locked");
-      indexWriter.shutdown();
+      indexWriter.close();
       directory.close();
       deleteCore();
     }
diff --git solr/core/src/test/org/apache/solr/core/TestArbitraryIndexDir.java solr/core/src/test/org/apache/solr/core/TestArbitraryIndexDir.java
index 7bbc46c..d1e3749 100644
--- solr/core/src/test/org/apache/solr/core/TestArbitraryIndexDir.java
+++ solr/core/src/test/org/apache/solr/core/TestArbitraryIndexDir.java
@@ -115,14 +115,14 @@ public class TestArbitraryIndexDir extends AbstractSolrTestCase{
     Directory dir = newFSDirectory(newDir);
     IndexWriter iw = new IndexWriter(
         dir,
-        new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT))
+        new IndexWriterConfig(new StandardAnalyzer(TEST_VERSION_CURRENT))
     );
     Document doc = new Document();
     doc.add(new TextField("id", "2", Field.Store.YES));
     doc.add(new TextField("name", "name2", Field.Store.YES));
     iw.addDocument(doc);
     iw.commit();
-    iw.shutdown();
+    iw.close();
 
     //commit will cause searcher to open with the new index dir
     assertU(commit());
diff --git solr/core/src/test/org/apache/solr/search/TestRecovery.java solr/core/src/test/org/apache/solr/search/TestRecovery.java
index 95f2017..a5823bc 100644
--- solr/core/src/test/org/apache/solr/search/TestRecovery.java
+++ solr/core/src/test/org/apache/solr/search/TestRecovery.java
@@ -661,7 +661,7 @@ public class TestRecovery extends SolrTestCaseJ4 {
 
   }
 
-  // make sure that log isn't needlessly replayed after a clean shutdown
+  // make sure that log isn't needlessly replayed after a clean close
   @Test
   public void testCleanShutdown() throws Exception {
     DirectUpdateHandler2.commitOnClose = true;
diff --git solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs.java solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs.java
index a371aae..65adc38 100644
--- solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs.java
+++ solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs.java
@@ -658,7 +658,7 @@ public class TestRecoveryHdfs extends SolrTestCaseJ4 {
 
   }
 
-  // make sure that log isn't needlessly replayed after a clean shutdown
+  // make sure that log isn't needlessly replayed after a clean close
   @Test
   public void testCleanShutdown() throws Exception {
     DirectUpdateHandler2.commitOnClose = true;
diff --git solr/core/src/test/org/apache/solr/search/TestSort.java solr/core/src/test/org/apache/solr/search/TestSort.java
index d1a909b..ef8c23a 100644
--- solr/core/src/test/org/apache/solr/search/TestSort.java
+++ solr/core/src/test/org/apache/solr/search/TestSort.java
@@ -44,7 +44,6 @@ import org.apache.lucene.search.FilterCollector;
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.MatchAllDocsQuery;
 import org.apache.lucene.search.ScoreDoc;
-import org.apache.lucene.search.Scorer;
 import org.apache.lucene.search.Sort;
 import org.apache.lucene.search.SortField;
 import org.apache.lucene.search.SortField.Type;
@@ -189,7 +188,7 @@ public class TestSort extends SolrTestCaseJ4 {
     for (int iterCnt = 0; iterCnt<iter; iterCnt++) {
       IndexWriter iw = new IndexWriter(
           dir,
-          new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)).
+          new IndexWriterConfig(new SimpleAnalyzer(TEST_VERSION_CURRENT)).
               setOpenMode(IndexWriterConfig.OpenMode.CREATE)
       );
       final MyDoc[] mydocs = new MyDoc[ndocs];
@@ -222,7 +221,7 @@ public class TestSort extends SolrTestCaseJ4 {
           iw.commit();
         }
       }
-      iw.shutdown();
+      iw.close();
 
       Map<String,UninvertingReader.Type> mapping = new HashMap<>();
       mapping.put("f", UninvertingReader.Type.SORTED);
diff --git solr/core/src/test/org/apache/solr/search/TestStressLucene.java solr/core/src/test/org/apache/solr/search/TestStressLucene.java
index 913db57..5c75617 100644
--- solr/core/src/test/org/apache/solr/search/TestStressLucene.java
+++ solr/core/src/test/org/apache/solr/search/TestStressLucene.java
@@ -101,7 +101,7 @@ public class TestStressLucene extends TestRTGBase {
 
 
     // RAMDirectory dir = new RAMDirectory();
-    // final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));
+    // final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));
 
     Directory dir = newDirectory();
 
@@ -368,7 +368,7 @@ public class TestStressLucene extends TestRTGBase {
       thread.join();
     }
 
-    writer.shutdown();
+    writer.close();
     reader.close();
     dir.close();
   }
diff --git solr/core/src/test/org/apache/solr/search/function/TestOrdValues.java solr/core/src/test/org/apache/solr/search/function/TestOrdValues.java
index 175db62..d7a309f 100644
--- solr/core/src/test/org/apache/solr/search/function/TestOrdValues.java
+++ solr/core/src/test/org/apache/solr/search/function/TestOrdValues.java
@@ -246,7 +246,7 @@ public class TestOrdValues extends LuceneTestCase {
       }
       iw.forceMerge(1);
     }
-    iw.shutdown();
+    iw.close();
     if (VERBOSE) {
       System.out.println("TEST: setUp done close");
     }
diff --git solr/core/src/test/org/apache/solr/spelling/IndexBasedSpellCheckerTest.java solr/core/src/test/org/apache/solr/spelling/IndexBasedSpellCheckerTest.java
index e8c7367..006ebcd 100644
--- solr/core/src/test/org/apache/solr/spelling/IndexBasedSpellCheckerTest.java
+++ solr/core/src/test/org/apache/solr/spelling/IndexBasedSpellCheckerTest.java
@@ -289,7 +289,7 @@ public class IndexBasedSpellCheckerTest extends SolrTestCaseJ4 {
     Directory dir = newFSDirectory(altIndexDir);
     IndexWriter iw = new IndexWriter(
         dir,
-        new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))
+        new IndexWriterConfig(new WhitespaceAnalyzer(TEST_VERSION_CURRENT))
     );
     for (int i = 0; i < ALT_DOCS.length; i++) {
       Document doc = new Document();
@@ -297,7 +297,7 @@ public class IndexBasedSpellCheckerTest extends SolrTestCaseJ4 {
       iw.addDocument(doc);
     }
     iw.forceMerge(1);
-    iw.shutdown();
+    iw.close();
     dir.close();
     indexDir.mkdirs();
     spellchecker.add(AbstractLuceneSpellChecker.INDEX_DIR, indexDir.getAbsolutePath());
diff --git solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests.java solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests.java
index 355e4b3..2195e3e 100644
--- solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests.java
+++ solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests.java
@@ -546,8 +546,8 @@ abstract public class SolrExampleTests extends SolrExampleTestsBase
     SolrDocumentList out = rsp.getResults();
     assertEquals(2, out.getNumFound());
     if (!(server1 instanceof EmbeddedSolrServer)) {
-      /* Do not shutdown in case of using EmbeddedSolrServer, 
-       * as that would shutdown the CoreContainer */
+      /* Do not close in case of using EmbeddedSolrServer,
+       * as that would close the CoreContainer */
       server1.shutdown();
     }
   }
diff --git solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey.java solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey.java
index 4c8b7dc..8e4579f 100644
--- solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey.java
+++ solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey.java
@@ -215,7 +215,7 @@ public class ChaosMonkey {
   private static void stopJettySolrRunner(JettySolrRunner jetty) throws Exception {
     assert(jetty != null);
     monkeyLog("stop shard! " + jetty.getLocalPort());
-    // get a clean shutdown so that no dirs are left open...
+    // get a clean close so that no dirs are left open...
     FilterHolder fh = jetty.getDispatchFilter();
     if (fh != null) {
       SolrDispatchFilter sdf = (SolrDispatchFilter) fh.getFilter();
@@ -462,7 +462,7 @@ public class ChaosMonkey {
     
     
     if (LuceneTestCase.random().nextBoolean()) {
-      monkeyLog("Jetty will not commit on shutdown");
+      monkeyLog("Jetty will not commit on close");
       DirectUpdateHandler2.commitOnClose = false;
     }
     
