diff --git lucene/src/test/org/apache/lucene/search/similarities/DFRSimilarity.java lucene/src/test/org/apache/lucene/search/similarities/DFRSimilarity.java
index ec6c420..69dffc3 100644
--- lucene/src/test/org/apache/lucene/search/similarities/DFRSimilarity.java
+++ lucene/src/test/org/apache/lucene/search/similarities/DFRSimilarity.java
@@ -78,7 +78,7 @@ public class DFRSimilarity extends EasySimilarity {
   }
   
   @Override
-  protected float score(EasyStats stats, float freq, int docLen) {
+  protected float score(EasyStats stats, float freq, float docLen) {
     float tfn = normalization.tfn(stats, freq, docLen);
     return stats.getTotalBoost() *
         basicModel.score(stats, tfn) * afterEffect.score(stats, tfn);
@@ -86,7 +86,7 @@ public class DFRSimilarity extends EasySimilarity {
 
   @Override
   protected void explain(Explanation expl,
-      EasyStats stats, int doc, float freq, int docLen) {
+      EasyStats stats, int doc, float freq, float docLen) {
     if (stats.getTotalBoost() != 1.0f) {
       expl.addDetail(new Explanation(stats.getTotalBoost(), "boost"));
     }
diff --git lucene/src/test/org/apache/lucene/search/similarities/EasySimilarity.java lucene/src/test/org/apache/lucene/search/similarities/EasySimilarity.java
index 4940017..4425ba5 100644
--- lucene/src/test/org/apache/lucene/search/similarities/EasySimilarity.java
+++ lucene/src/test/org/apache/lucene/search/similarities/EasySimilarity.java
@@ -117,7 +117,7 @@ public abstract class EasySimilarity extends Similarity {
    * @param docLen the document length.
    * @return the score.
    */
-  protected abstract float score(EasyStats stats, float freq, int docLen);
+  protected abstract float score(EasyStats stats, float freq, float docLen);
   
   /**
    * Subclasses should implement this method to explain the score. {@code expl}
@@ -133,7 +133,7 @@ public abstract class EasySimilarity extends Similarity {
    * @param docLen the document length.
    */
   protected void explain(
-      Explanation expl, EasyStats stats, int doc, float freq, int docLen) {}
+      Explanation expl, EasyStats stats, int doc, float freq, float docLen) {}
   
   /**
    * Explains the score. The implementation here provides a basic explanation
@@ -151,7 +151,7 @@ public abstract class EasySimilarity extends Similarity {
    * @return the explanation.
    */
   protected Explanation explain(
-      EasyStats stats, int doc, Explanation freq, int docLen) {
+      EasyStats stats, int doc, Explanation freq, float docLen) {
     Explanation result = new Explanation(); 
     result.setValue(score(stats, freq.getValue(), docLen));
     result.setDescription("score(" + getClass().getSimpleName() +
@@ -187,12 +187,12 @@ public abstract class EasySimilarity extends Similarity {
   // ------------------------------ Norm handling ------------------------------
   
   /** Norm -> document length map. */
-  private static final int[] NORM_TABLE = new int[256];
+  private static final float[] NORM_TABLE = new float[256];
 
   static {
     for (int i = 0; i < 256; i++) {
       float floatNorm = SmallFloat.byte315ToFloat((byte)i);
-      NORM_TABLE[i] = (int)(1.0 / (floatNorm * floatNorm));
+      NORM_TABLE[i] = 1.0f / (floatNorm * floatNorm);
     }
   }
 
@@ -210,7 +210,7 @@ public abstract class EasySimilarity extends Similarity {
   /** Decodes a normalization factor (document length) stored in an index.
    * @see #encodeNormValue(float)
    */
-  protected int decodeNormValue(byte norm) {
+  protected float decodeNormValue(byte norm) {
     return NORM_TABLE[norm & 0xFF];  // & 0xFF maps negative bytes to positive above 127
   }
   
@@ -248,13 +248,13 @@ public abstract class EasySimilarity extends Similarity {
     public float score(int doc, int freq) {
       // We have to supply something in case norms are omitted
       return EasySimilarity.this.score(stats, freq,
-          norms == null ? (int)(freq + 0.5) : decodeNormValue(norms[doc]));
+          norms == null ? freq : decodeNormValue(norms[doc]));
     }
     
     @Override
     public Explanation explain(int doc, Explanation freq) {
       return EasySimilarity.this.explain(stats, doc, freq,
-          norms == null ? (int)(freq.getValue() + 0.5) : decodeNormValue(norms[doc]));
+          norms == null ? freq.getValue() : decodeNormValue(norms[doc]));
     }
   }
   
@@ -277,12 +277,12 @@ public abstract class EasySimilarity extends Similarity {
     public float score(int doc, float freq) {
       // We have to supply something in case norms are omitted
       return EasySimilarity.this.score(stats, freq,
-          norms == null ? (int)(freq + 0.5) : decodeNormValue(norms[doc]));
+          norms == null ? freq : decodeNormValue(norms[doc]));
     }
     @Override
     public Explanation explain(int doc, Explanation freq) {
       return EasySimilarity.this.explain(stats, doc, freq,
-          norms == null ? (int)(freq.getValue() + 0.5) : decodeNormValue(norms[doc]));
+          norms == null ? freq.getValue() : decodeNormValue(norms[doc]));
     }
 
     @Override
diff --git lucene/src/test/org/apache/lucene/search/similarities/IBSimilarity.java lucene/src/test/org/apache/lucene/search/similarities/IBSimilarity.java
index 15c9de7..07d40e5 100644
--- lucene/src/test/org/apache/lucene/search/similarities/IBSimilarity.java
+++ lucene/src/test/org/apache/lucene/search/similarities/IBSimilarity.java
@@ -63,7 +63,7 @@ public class IBSimilarity extends EasySimilarity {
   }
   
   @Override
-  protected float score(EasyStats stats, float freq, int docLen) {
+  protected float score(EasyStats stats, float freq, float docLen) {
     return stats.getTotalBoost() *
         distribution.score(
             stats,
@@ -73,7 +73,7 @@ public class IBSimilarity extends EasySimilarity {
 
   @Override
   protected void explain(
-      Explanation expl, EasyStats stats, int doc, float freq, int docLen) {
+      Explanation expl, EasyStats stats, int doc, float freq, float docLen) {
     if (stats.getTotalBoost() != 1.0f) {
       expl.addDetail(new Explanation(stats.getTotalBoost(), "boost"));
     }
diff --git lucene/src/test/org/apache/lucene/search/similarities/LMDirichletSimilarity.java lucene/src/test/org/apache/lucene/search/similarities/LMDirichletSimilarity.java
index 7db0136..6c8f5f4 100644
--- lucene/src/test/org/apache/lucene/search/similarities/LMDirichletSimilarity.java
+++ lucene/src/test/org/apache/lucene/search/similarities/LMDirichletSimilarity.java
@@ -60,7 +60,7 @@ public class LMDirichletSimilarity extends LMSimilarity {
   }
   
   @Override
-  protected float score(EasyStats stats, float freq, int docLen) {
+  protected float score(EasyStats stats, float freq, float docLen) {
     float score = stats.getTotalBoost() * (float)(Math.log(1 + freq /
         (mu * ((LMStats)stats).getCollectionProbability())) +
         Math.log(mu / (docLen + mu)));
@@ -69,7 +69,7 @@ public class LMDirichletSimilarity extends LMSimilarity {
   
   @Override
   protected void explain(Explanation expl, EasyStats stats, int doc,
-      float freq, int docLen) {
+      float freq, float docLen) {
     if (stats.getTotalBoost() != 1.0f) {
       expl.addDetail(new Explanation(stats.getTotalBoost(), "boost"));
     }
diff --git lucene/src/test/org/apache/lucene/search/similarities/LMJelinekMercerSimilarity.java lucene/src/test/org/apache/lucene/search/similarities/LMJelinekMercerSimilarity.java
index b181367..32ff804 100644
--- lucene/src/test/org/apache/lucene/search/similarities/LMJelinekMercerSimilarity.java
+++ lucene/src/test/org/apache/lucene/search/similarities/LMJelinekMercerSimilarity.java
@@ -49,7 +49,7 @@ public class LMJelinekMercerSimilarity extends LMSimilarity {
   }
   
   @Override
-  protected float score(EasyStats stats, float freq, int docLen) {
+  protected float score(EasyStats stats, float freq, float docLen) {
     return stats.getTotalBoost() *
         (float)Math.log(1 +
             ((1 - lambda) * freq / docLen) /
@@ -58,7 +58,7 @@ public class LMJelinekMercerSimilarity extends LMSimilarity {
   
   @Override
   protected void explain(Explanation expl, EasyStats stats, int doc,
-      float freq, int docLen) {
+      float freq, float docLen) {
     if (stats.getTotalBoost() != 1.0f) {
       expl.addDetail(new Explanation(stats.getTotalBoost(), "boost"));
     }
diff --git lucene/src/test/org/apache/lucene/search/similarities/LMSimilarity.java lucene/src/test/org/apache/lucene/search/similarities/LMSimilarity.java
index ab8a653..2aa2e04 100644
--- lucene/src/test/org/apache/lucene/search/similarities/LMSimilarity.java
+++ lucene/src/test/org/apache/lucene/search/similarities/LMSimilarity.java
@@ -67,7 +67,7 @@ public abstract class LMSimilarity extends EasySimilarity {
 
   @Override
   protected void explain(Explanation expl, EasyStats stats, int doc,
-      float freq, int docLen) {
+      float freq, float docLen) {
     expl.addDetail(new Explanation(collectionModel.computeProbability(stats),
                                    "collection probability"));
   }
diff --git lucene/src/test/org/apache/lucene/search/similarities/Normalization.java lucene/src/test/org/apache/lucene/search/similarities/Normalization.java
index 68ae759..6a2afea 100644
--- lucene/src/test/org/apache/lucene/search/similarities/Normalization.java
+++ lucene/src/test/org/apache/lucene/search/similarities/Normalization.java
@@ -29,7 +29,7 @@ import org.apache.lucene.search.Explanation;
 public abstract class Normalization {
   /** Returns the normalized term frequency.
    * @param len the field length. */
-  public abstract float tfn(EasyStats stats, float tf, int len);
+  public abstract float tfn(EasyStats stats, float tf, float len);
   
   /** Returns an explanation for the normalized term frequency.
    * <p>The default normalization methods use the field length of the document
@@ -37,7 +37,7 @@ public abstract class Normalization {
    * This method provides a generic explanation for such methods.
    * Subclasses that use other statistics must override this method.</p>
    */
-  public Explanation explain(EasyStats stats, float tf, int len) {
+  public Explanation explain(EasyStats stats, float tf, float len) {
     Explanation result = new Explanation();
     result.setDescription(getClass().getSimpleName() + ", computed from: ");
     result.setValue(tfn(stats, tf, len));
@@ -51,12 +51,12 @@ public abstract class Normalization {
   /** Implementation used when there is no normalization. */
   public static final class NoNormalization extends Normalization {
     @Override
-    public final float tfn(EasyStats stats, float tf, int len) {
+    public final float tfn(EasyStats stats, float tf, float len) {
       return tf;
     }
 
     @Override
-    public final Explanation explain(EasyStats stats, float tf, int len) {
+    public final Explanation explain(EasyStats stats, float tf, float len) {
       return new Explanation(1, "no normalization");
     }
     
diff --git lucene/src/test/org/apache/lucene/search/similarities/NormalizationH1.java lucene/src/test/org/apache/lucene/search/similarities/NormalizationH1.java
index 4201c59..d289f61 100644
--- lucene/src/test/org/apache/lucene/search/similarities/NormalizationH1.java
+++ lucene/src/test/org/apache/lucene/search/similarities/NormalizationH1.java
@@ -22,7 +22,7 @@ package org.apache.lucene.search.similarities;
  */
 public class NormalizationH1 extends Normalization {
   @Override
-  public final float tfn(EasyStats stats, float tf, int len) {
+  public final float tfn(EasyStats stats, float tf, float len) {
     return tf * stats.getAvgFieldLength() / len;
   }
 
diff --git lucene/src/test/org/apache/lucene/search/similarities/NormalizationH2.java lucene/src/test/org/apache/lucene/search/similarities/NormalizationH2.java
index 5d24eca..c49eaf4 100644
--- lucene/src/test/org/apache/lucene/search/similarities/NormalizationH2.java
+++ lucene/src/test/org/apache/lucene/search/similarities/NormalizationH2.java
@@ -25,7 +25,7 @@ import static org.apache.lucene.search.similarities.EasySimilarity.log2;
  */
 public class NormalizationH2 extends Normalization {
   @Override
-  public final float tfn(EasyStats stats, float tf, int len) {
+  public final float tfn(EasyStats stats, float tf, float len) {
     return (float)(tf * log2(1 + stats.getAvgFieldLength() / len));
   }
 
