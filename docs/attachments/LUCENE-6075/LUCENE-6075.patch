Index: lucene/CHANGES.txt
===================================================================
--- lucene/CHANGES.txt	(revision 1640833)
+++ lucene/CHANGES.txt	(working copy)
@@ -271,6 +271,9 @@
 
 * LUCENE-6062: Pass correct fieldinfos to docvalues producer when the
   segment has updates. (Mike McCandless, Shai Erera, Robert Muir)
+
+* LUCENE-6075: Don't overflow int in SimpleRateLimiter (Boaz Leskes
+  via Mike McCandless)
   
 Documentation
 
Index: lucene/core/src/java/org/apache/lucene/store/RateLimiter.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/store/RateLimiter.java	(revision 1640833)
+++ lucene/core/src/java/org/apache/lucene/store/RateLimiter.java	(working copy)
@@ -138,7 +138,17 @@
             // NOTE: except maybe on real-time JVMs, minimum realistic sleep time
             // is 1 msec; if you pass just 1 nsec the default impl rounds
             // this up to 1 msec:
-            Thread.sleep((int) (pauseNS/1000000), (int) (pauseNS % 1000000));
+            int sleepNS;
+            int sleepMS;
+            if (pauseNS > 100000L * Integer.MAX_VALUE) {
+              // Not really practical (sleeping for 25 days) but we shouldn't overflow int:
+              sleepMS = Integer.MAX_VALUE;
+              sleepNS = 0;
+            } else {
+              sleepMS = (int) (pauseNS/1000000);
+              sleepNS = (int) (pauseNS % 1000000);
+            }
+            Thread.sleep(sleepMS, sleepNS);
           } catch (InterruptedException ie) {
             throw new ThreadInterruptedException(ie);
           }
Index: lucene/core/src/test/org/apache/lucene/store/TestRateLimiter.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/store/TestRateLimiter.java	(revision 1640833)
+++ lucene/core/src/test/org/apache/lucene/store/TestRateLimiter.java	(working copy)
@@ -44,6 +44,24 @@
     assertTrue("we should sleep at least 1 second but did only: " + convert + " millis", convert > 1000l); 
   }
 
+  // LUCENE-6075
+  public void testOverflowInt() throws Exception {
+    Thread t = new Thread() {
+        @Override
+        public void run() {
+          try {
+            new SimpleRateLimiter(1).pause((long) (1.5*Integer.MAX_VALUE*1024*1024/1000));
+            fail("should have been interrupted");
+          } catch (ThreadInterruptedException tie) {
+            // expected
+          }
+        }
+      };
+    t.start();
+    Thread.sleep(10);
+    t.interrupt();
+  }
+
   public void testThreads() throws Exception {
 
     double targetMBPerSec = 10.0 + 20 * random().nextDouble();
