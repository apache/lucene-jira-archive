Index: lucene/core/src/java/org/apache/lucene/store/ByteBufferIndexInput.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/store/ByteBufferIndexInput.java	(revision 1662963)
+++ lucene/core/src/java/org/apache/lucene/store/ByteBufferIndexInput.java	(working copy)
@@ -281,10 +281,9 @@
     }
 
     final ByteBuffer newBuffers[] = buildSlice(buffers, offset, length);
-    final String newResourceDescription = (sliceDescription == null) ? toString() : (toString() + " [slice=" + sliceDescription + "]");
     final int ofs = (int) (offset & chunkSizeMask);
     
-    final ByteBufferIndexInput clone = newCloneInstance(newResourceDescription, newBuffers, ofs, length);
+    final ByteBufferIndexInput clone = newCloneInstance(getFullSliceDescription(sliceDescription), newBuffers, ofs, length);
     clone.isClone = true;
 
     // register the new clone in our clone list to clean it up on closing:
Index: lucene/core/src/java/org/apache/lucene/store/IndexInput.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/store/IndexInput.java	(revision 1662963)
+++ lucene/core/src/java/org/apache/lucene/store/IndexInput.java	(working copy)
@@ -88,7 +88,17 @@
    * The slice is seeked to the beginning.
    */
   public abstract IndexInput slice(String sliceDescription, long offset, long length) throws IOException;
-  
+
+  /** Subclasses call this to get the String for resourceDescription of a slice of this {@code IndexInput}. */
+  protected String getFullSliceDescription(String sliceDescription) {
+    if (sliceDescription == null) {
+      // Clones pass null sliceDescription:
+      return toString();
+    } else {
+      return toString() + " [slice=" + sliceDescription + "]";
+    }
+  }
+
   /**
    * Creates a random-access slice of this index input, with the given offset and length. 
    * <p>
Index: lucene/core/src/java/org/apache/lucene/store/NIOFSDirectory.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/store/NIOFSDirectory.java	(revision 1662963)
+++ lucene/core/src/java/org/apache/lucene/store/NIOFSDirectory.java	(working copy)
@@ -137,7 +137,7 @@
       if (offset < 0 || length < 0 || offset + length > this.length()) {
         throw new IllegalArgumentException("slice() " + sliceDescription + " out of bounds: "  + this);
       }
-      return new NIOFSIndexInput(sliceDescription, channel, off + offset, length, getBufferSize());
+      return new NIOFSIndexInput(getFullSliceDescription(sliceDescription), channel, off + offset, length, getBufferSize());
     }
 
     @Override
Index: lucene/core/src/java/org/apache/lucene/store/RAMInputStream.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/store/RAMInputStream.java	(revision 1662963)
+++ lucene/core/src/java/org/apache/lucene/store/RAMInputStream.java	(working copy)
@@ -128,8 +128,7 @@
     if (offset < 0 || length < 0 || offset + length > this.length) {
       throw new IllegalArgumentException("slice() " + sliceDescription + " out of bounds: "  + this);
     }
-    final String newResourceDescription = (sliceDescription == null) ? toString() : (toString() + " [slice=" + sliceDescription + "]");
-    return new RAMInputStream(newResourceDescription, file, offset + length) {
+    return new RAMInputStream(getFullSliceDescription(sliceDescription), file, offset + length) {
       {
         seek(0L);
       }
Index: lucene/core/src/java/org/apache/lucene/store/SimpleFSDirectory.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/store/SimpleFSDirectory.java	(revision 1662963)
+++ lucene/core/src/java/org/apache/lucene/store/SimpleFSDirectory.java	(working copy)
@@ -131,7 +131,7 @@
       if (offset < 0 || length < 0 || offset + length > this.length()) {
         throw new IllegalArgumentException("slice() " + sliceDescription + " out of bounds: "  + this);
       }
-      return new SimpleFSIndexInput(sliceDescription, channel, off + offset, length, getBufferSize());
+      return new SimpleFSIndexInput(getFullSliceDescription(sliceDescription), channel, off + offset, length, getBufferSize());
     }
 
     @Override
Index: lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase.java	(revision 1662963)
+++ lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase.java	(working copy)
@@ -765,4 +765,21 @@
   public void testMergeStability() throws Exception {
     assumeTrue("test does not work with CFS", true);
   }
+
+  // LUCENE-6311: make sure the resource name inside a compound file confesses that it's inside a compound file
+  public void testResourceNameInsideCompoundFile() throws Exception {
+    Directory dir = newDirectory();
+    String subFile = "_123.xyz";
+    createSequenceFile(dir, subFile, (byte) 0, 10);
+    
+    SegmentInfo si = newSegmentInfo(dir, "_123");
+    si.setFiles(Collections.singletonList(subFile));
+    si.getCodec().compoundFormat().write(dir, si, IOContext.DEFAULT);
+    Directory cfs = si.getCodec().compoundFormat().getCompoundReader(dir, si, IOContext.DEFAULT);
+    IndexInput in = cfs.openInput(subFile, IOContext.DEFAULT);
+    String desc = in.toString();
+    assertTrue("resource description hides that it's inside a compound file: " + desc, desc.contains("[slice=" + subFile + "]"));
+    cfs.close();
+    dir.close();
+  }
 }
