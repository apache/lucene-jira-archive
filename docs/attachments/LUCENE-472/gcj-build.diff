diff -rNuwB --exclude=build --exclude='*~' lucene-2.3.0-rc3-orig/src/gcj/Makefile lucene-2.3.0-rc3/src/gcj/Makefile
--- lucene-2.3.0-rc3-orig/src/gcj/Makefile	2008-01-14 19:00:06.000000000 +0100
+++ lucene-2.3.0-rc3/src/gcj/Makefile	2008-01-19 00:04:20.000000000 +0100
@@ -8,7 +8,7 @@
 CORE=$(BUILD)/classes/java
 SRC=.
 
-CORE_OBJ:=$(subst .jar,.a,$(wildcard $(BUILD)/lucene-[0-9]*.jar))
+CORE_OBJ:=$(subst .jar,.a,$(wildcard $(BUILD)/lucene-core-[0-9]*.jar))
 CORE_JAVA:=$(shell find $(ROOT)/src/java -name '*.java')
 
 CORE_HEADERS=\
diff -rNuwB --exclude=build --exclude='*~' lucene-2.3.0-rc3-orig/src/java/org/apache/lucene/index/DocumentsWriter.java lucene-2.3.0-rc3/src/java/org/apache/lucene/index/DocumentsWriter.java
--- lucene-2.3.0-rc3-orig/src/java/org/apache/lucene/index/DocumentsWriter.java	2008-01-14 18:59:43.000000000 +0100
+++ lucene-2.3.0-rc3/src/java/org/apache/lucene/index/DocumentsWriter.java	2008-01-19 00:04:20.000000000 +0100
@@ -1836,7 +1836,10 @@
           Posting posting = vector.p;
           final int freq = posting.docFreq;
           
-          final int prefix;
+          /* We actually want to set final int prefix below, but gcj is not
+           * smart enough to understand that the two assignments in if
+           * (lastPosting == null) are mutually exclusive and complains... */
+          int temp_prefix;
           final char[] text2 = charPool.buffers[posting.textStart >> CHAR_BLOCK_SHIFT];
           final int start2 = posting.textStart & CHAR_BLOCK_MASK;
           int pos2 = start2;
@@ -1844,7 +1847,7 @@
           // Compute common prefix between last term and
           // this term
           if (lastPosting == null)
-            prefix = 0;
+            temp_prefix = 0;
           else {
             final char[] text1 = charPool.buffers[lastPosting.textStart >> CHAR_BLOCK_SHIFT];
             final int start1 = lastPosting.textStart & CHAR_BLOCK_MASK;
@@ -1853,7 +1856,7 @@
               final char c1 = text1[pos1];
               final char c2 = text2[pos2];
               if (c1 != c2 || c1 == 0xffff) {
-                prefix = pos1-start1;
+                temp_prefix = pos1-start1;
                 break;
               }
               pos1++;
@@ -1861,6 +1864,7 @@
             }
           }
           lastPosting = posting;
+          final int prefix = temp_prefix;
 
           // Compute length
           while(text2[pos2] != 0xffff)
diff -rNuwB --exclude=build --exclude='*~' lucene-2.3.0-rc3-orig/src/java/org/apache/lucene/search/BooleanScorer2.java lucene-2.3.0-rc3/src/java/org/apache/lucene/search/BooleanScorer2.java
--- lucene-2.3.0-rc3-orig/src/java/org/apache/lucene/search/BooleanScorer2.java	2008-01-14 18:59:38.000000000 +0100
+++ lucene-2.3.0-rc3/src/java/org/apache/lucene/search/BooleanScorer2.java	2008-01-19 00:15:08.000000000 +0100
@@ -19,6 +19,7 @@
 
 import java.io.IOException;
 import java.util.ArrayList;
+import java.util.Collection;
 import java.util.List;
 import java.util.Iterator;
 
@@ -192,10 +193,16 @@
 
   private static Similarity defaultSimilarity = new DefaultSimilarity();
 
-  private Scorer countingConjunctionSumScorer(List requiredScorers) throws IOException {
-    // each scorer from the list counted as a single matcher
-    final int requiredNrMatchers = requiredScorers.size();
-    return new ConjunctionScorer(defaultSimilarity, requiredScorers) {
+  /* 
+   * To work around a gcj bug we use an inner class instead of an anonymous one
+   * in countingConjunctionSumScorer() below.
+   */
+  class CountingConjunctionSumScorer_ConjunctionScorer extends ConjunctionScorer {
+    public CountingConjunctionSumScorer_ConjunctionScorer(int requiredNrMatchers, Similarity similarity, Collection scorers) throws IOException {
+      super(similarity, scorers);
+      this.requiredNrMatchers = requiredNrMatchers;
+    }
+    final int requiredNrMatchers;
       private int lastScoredDoc = -1;
 
       public float score() throws IOException {
@@ -210,6 +217,9 @@
         return super.score();
       }
     };
+  private Scorer countingConjunctionSumScorer(List requiredScorers) throws IOException {
+    // each scorer from the list counted as a single matcher
+    return new CountingConjunctionSumScorer_ConjunctionScorer(requiredScorers.size(), defaultSimilarity, requiredScorers);
   }
 
   private Scorer dualConjunctionSumScorer(Scorer req1, Scorer req2) throws IOException { // non counting.
diff -rNuwB --exclude=build --exclude='*~' lucene-2.3.0-rc3-orig/src/java/org/apache/lucene/search/ExtendedFieldCacheImpl.java lucene-2.3.0-rc3/src/java/org/apache/lucene/search/ExtendedFieldCacheImpl.java
--- lucene-2.3.0-rc3-orig/src/java/org/apache/lucene/search/ExtendedFieldCacheImpl.java	2008-01-14 18:59:38.000000000 +0100
+++ lucene-2.3.0-rc3/src/java/org/apache/lucene/search/ExtendedFieldCacheImpl.java	2008-01-19 00:04:20.000000000 +0100
@@ -13,13 +13,13 @@
  *
  **/
 class ExtendedFieldCacheImpl extends FieldCacheImpl implements ExtendedFieldCache {
-  private static final LongParser LONG_PARSER = new LongParser() {
+  private static final ExtendedFieldCache.LongParser LONG_PARSER = new ExtendedFieldCache.LongParser() {
       public long parseLong(String value) {
         return Long.parseLong(value);
       }
   };
 
-  private static final DoubleParser DOUBLE_PARSER = new DoubleParser() {
+  private static final ExtendedFieldCache.DoubleParser DOUBLE_PARSER = new ExtendedFieldCache.DoubleParser() {
       public double parseDouble(String value) {
         return Double.parseDouble(value);
       }
@@ -31,7 +31,7 @@
   }
 
   // inherit javadocs
-  public long[] getLongs(IndexReader reader, String field, LongParser parser)
+  public long[] getLongs(IndexReader reader, String field, ExtendedFieldCache.LongParser parser)
       throws IOException {
     return (long[]) longsCache.get(reader, new Entry(field, parser));
   }
@@ -42,7 +42,7 @@
         throws IOException {
       Entry entry = (Entry) entryKey;
       String field = entry.field;
-      LongParser parser = (LongParser) entry.custom;
+      ExtendedFieldCache.LongParser parser = (ExtendedFieldCache.LongParser) entry.custom;
       final long[] retArray = new long[reader.maxDoc()];
       TermDocs termDocs = reader.termDocs();
       TermEnum termEnum = reader.terms (new Term(field, ""));
@@ -71,7 +71,7 @@
   }
 
   // inherit javadocs
-  public double[] getDoubles(IndexReader reader, String field, DoubleParser parser)
+  public double[] getDoubles(IndexReader reader, String field, ExtendedFieldCache.DoubleParser parser)
       throws IOException {
     return (double[]) doublesCache.get(reader, new Entry(field, parser));
   }
@@ -82,7 +82,7 @@
         throws IOException {
       Entry entry = (Entry) entryKey;
       String field = entry.field;
-      DoubleParser parser = (DoubleParser) entry.custom;
+      ExtendedFieldCache.DoubleParser parser = (ExtendedFieldCache.DoubleParser) entry.custom;
       final double[] retArray = new double[reader.maxDoc()];
       TermDocs termDocs = reader.termDocs();
       TermEnum termEnum = reader.terms (new Term (field, ""));
diff -rNuwB --exclude=build --exclude='*~' lucene-2.3.0-rc3-orig/src/java/org/apache/lucene/search/FieldCacheImpl.java lucene-2.3.0-rc3/src/java/org/apache/lucene/search/FieldCacheImpl.java
--- lucene-2.3.0-rc3-orig/src/java/org/apache/lucene/search/FieldCacheImpl.java	2008-01-14 18:59:38.000000000 +0100
+++ lucene-2.3.0-rc3/src/java/org/apache/lucene/search/FieldCacheImpl.java	2008-01-19 00:04:20.000000000 +0100
@@ -131,26 +131,26 @@
     }
   }
 
-  private static final ByteParser BYTE_PARSER = new ByteParser() {
+  private static final FieldCache.ByteParser BYTE_PARSER = new FieldCache.ByteParser() {
     public byte parseByte(String value) {
       return Byte.parseByte(value);
     }
   };
 
-  private static final ShortParser SHORT_PARSER = new ShortParser() {
+  private static final FieldCache.ShortParser SHORT_PARSER = new FieldCache.ShortParser() {
     public short parseShort(String value) {
       return Short.parseShort(value);
     }
   };
 
-  private static final IntParser INT_PARSER = new IntParser() {
+  private static final FieldCache.IntParser INT_PARSER = new FieldCache.IntParser() {
       public int parseInt(String value) {
         return Integer.parseInt(value);
       }
   };
 
 
-  private static final FloatParser FLOAT_PARSER = new FloatParser() {
+  private static final FieldCache.FloatParser FLOAT_PARSER = new FieldCache.FloatParser() {
       public float parseFloat(String value) {
         return Float.parseFloat(value);
       }
@@ -162,7 +162,7 @@
   }
 
   // inherit javadocs
-  public byte[] getBytes(IndexReader reader, String field, ByteParser parser)
+  public byte[] getBytes(IndexReader reader, String field, FieldCache.ByteParser parser)
       throws IOException {
     return (byte[]) bytesCache.get(reader, new Entry(field, parser));
   }
@@ -173,7 +173,7 @@
         throws IOException {
       Entry entry = (Entry) entryKey;
       String field = entry.field;
-      ByteParser parser = (ByteParser) entry.custom;
+      FieldCache.ByteParser parser = (FieldCache.ByteParser) entry.custom;
       final byte[] retArray = new byte[reader.maxDoc()];
       TermDocs termDocs = reader.termDocs();
       TermEnum termEnum = reader.terms (new Term (field, ""));
@@ -201,7 +201,7 @@
   }
 
   // inherit javadocs
-  public short[] getShorts(IndexReader reader, String field, ShortParser parser)
+  public short[] getShorts(IndexReader reader, String field, FieldCache.ShortParser parser)
       throws IOException {
     return (short[]) shortsCache.get(reader, new Entry(field, parser));
   }
@@ -212,7 +212,7 @@
         throws IOException {
       Entry entry = (Entry) entryKey;
       String field = entry.field;
-      ShortParser parser = (ShortParser) entry.custom;
+      FieldCache.ShortParser parser = (FieldCache.ShortParser) entry.custom;
       final short[] retArray = new short[reader.maxDoc()];
       TermDocs termDocs = reader.termDocs();
       TermEnum termEnum = reader.terms (new Term (field, ""));
@@ -240,7 +240,7 @@
   }
 
   // inherit javadocs
-  public int[] getInts(IndexReader reader, String field, IntParser parser)
+  public int[] getInts(IndexReader reader, String field, FieldCache.IntParser parser)
       throws IOException {
     return (int[]) intsCache.get(reader, new Entry(field, parser));
   }
@@ -251,7 +251,7 @@
         throws IOException {
       Entry entry = (Entry) entryKey;
       String field = entry.field;
-      IntParser parser = (IntParser) entry.custom;
+      FieldCache.IntParser parser = (FieldCache.IntParser) entry.custom;
       final int[] retArray = new int[reader.maxDoc()];
       TermDocs termDocs = reader.termDocs();
       TermEnum termEnum = reader.terms (new Term (field, ""));
@@ -281,7 +281,7 @@
   }
 
   // inherit javadocs
-  public float[] getFloats(IndexReader reader, String field, FloatParser parser)
+  public float[] getFloats(IndexReader reader, String field, FieldCache.FloatParser parser)
       throws IOException {
     return (float[]) floatsCache.get(reader, new Entry(field, parser));
   }
@@ -292,7 +292,7 @@
         throws IOException {
       Entry entry = (Entry) entryKey;
       String field = entry.field;
-      FloatParser parser = (FloatParser) entry.custom;
+      FieldCache.FloatParser parser = (FieldCache.FloatParser) entry.custom;
       final float[] retArray = new float[reader.maxDoc()];
       TermDocs termDocs = reader.termDocs();
       TermEnum termEnum = reader.terms (new Term (field, ""));
@@ -347,9 +347,9 @@
   };
 
   // inherit javadocs
-  public StringIndex getStringIndex(IndexReader reader, String field)
+  public FieldCache.StringIndex getStringIndex(IndexReader reader, String field)
       throws IOException {
-    return (StringIndex) stringsIndexCache.get(reader, field);
+    return (FieldCache.StringIndex) stringsIndexCache.get(reader, field);
   }
 
   Cache stringsIndexCache = new Cache() {
@@ -405,7 +405,7 @@
         mterms = terms;
       }
 
-      StringIndex value = new StringIndex (retArray, mterms);
+      FieldCache.StringIndex value = new FieldCache.StringIndex (retArray, mterms);
       return value;
     }
   };
