Index: lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50StoredFieldsFormat.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50StoredFieldsFormat.java	(revision 1643679)
+++ lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50StoredFieldsFormat.java	(working copy)
@@ -48,7 +48,7 @@
  * compression ratio, it should provide interesting compression ratios
  * for redundant inputs (such as log files, HTML or plain text). For higher
  * compression, you can choose ({@link Mode#BEST_COMPRESSION BEST_COMPRESSION}), which uses 
- * the <a href="http://en.wikipedia.org/wiki/DEFLATE">DEFLATE</a> algorithm with 24KB blocks 
+ * the <a href="http://en.wikipedia.org/wiki/DEFLATE">DEFLATE</a> algorithm with 60KB blocks 
  * for a better ratio at the expense of slower performance. 
  * These two options can be configured like this: </p>
  * <pre class="prettyprint">
@@ -184,7 +184,7 @@
       case BEST_SPEED: 
         return new CompressingStoredFieldsFormat("Lucene50StoredFieldsFast", CompressionMode.FAST, 1 << 14, 128);
       case BEST_COMPRESSION: 
-        return new CompressingStoredFieldsFormat("Lucene50StoredFieldsHigh", CompressionMode.HIGH_COMPRESSION, 24576, 512);
+        return new CompressingStoredFieldsFormat("Lucene50StoredFieldsHigh", CompressionMode.HIGH_COMPRESSION, 61440, 512);
       default: throw new AssertionError();
     }
   }
Index: lucene/test-framework/src/java/org/apache/lucene/codecs/compressing/HighCompressionCompressingCodec.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/codecs/compressing/HighCompressionCompressingCodec.java	(revision 1643679)
+++ lucene/test-framework/src/java/org/apache/lucene/codecs/compressing/HighCompressionCompressingCodec.java	(working copy)
@@ -29,8 +29,8 @@
 
   /** Default constructor. */
   public HighCompressionCompressingCodec() {
-    // no need to have a higher block length than 32KB since deflate splits
-    // into blocks of 32KB anyway, and this is a lower bound (try to avoid > 32KB)
-    this(24576, 512, false);
+    // we don't worry about zlib block overhead as its
+    // not bad and try to save space instead:
+    this(61440, 512, false);
   }
 }
