diff --git a/lucene/core/src/java/org/apache/lucene/util/IOUtils.java b/lucene/core/src/java/org/apache/lucene/util/IOUtils.java
index fc675d4d723..22599904160 100644
--- a/lucene/core/src/java/org/apache/lucene/util/IOUtils.java
+++ b/lucene/core/src/java/org/apache/lucene/util/IOUtils.java
@@ -39,6 +39,7 @@ import java.util.Collection;
 import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.Objects;
+import java.util.function.Supplier;
 import org.apache.lucene.store.Directory;
 
 /**
@@ -156,6 +157,27 @@ public final class IOUtils {
     return new BufferedReader(new InputStreamReader(stream, charSetDecoder));
   }
 
+  /**
+   * Opens a Reader for the stream supplied by the provided {@link Supplier} using a {@link
+   * CharsetDecoder}. Unlike Java's defaults this reader will throw an exception if your it detects
+   * the read charset doesn't match the expected {@link Charset}.
+   *
+   * <p>Decoding readers are useful to load configuration files, stopword lists or synonym files to
+   * detect character set problems. However, it's not recommended to use as a common purpose reader.
+   *
+   * @param streamSupplier A supplier of the input stream for docoding.
+   * @param charSet the expected charset
+   * @return a reader to read the given file
+   */
+  public static Reader getDecodingReader(Supplier<InputStream> streamSupplier, Charset charSet)
+      throws IOException {
+    var is = streamSupplier.get();
+    if (is == null) {
+      throw new IOException("The input stream for decoding must not be null.");
+    }
+    return getDecodingReader(is, charSet);
+  }
+
   /**
    * Opens a Reader for the given resource using a {@link CharsetDecoder}. Unlike Java's defaults
    * this reader will throw an exception if your it detects the read charset doesn't match the
diff --git a/lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler.java b/lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler.java
index 11744ca6a68..90d10ed356c 100644
--- a/lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler.java
+++ b/lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler.java
@@ -732,8 +732,9 @@ public final class JavascriptCompiler {
       final Properties props = new Properties();
       try (Reader in =
           IOUtils.getDecodingReader(
-              JavascriptCompiler.class,
-              JavascriptCompiler.class.getSimpleName() + ".properties",
+              () ->
+                  JavascriptCompiler.class.getResourceAsStream(
+                      JavascriptCompiler.class.getSimpleName() + ".properties"),
               StandardCharsets.UTF_8)) {
         props.load(in);
       }
