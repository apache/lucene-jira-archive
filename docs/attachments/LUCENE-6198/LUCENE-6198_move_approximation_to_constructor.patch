Index: lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer.java	(revision 1668009)
+++ lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer.java	(revision )
@@ -119,15 +119,10 @@
       return null;
     }
 
-    return new TwoPhaseIterator() {
-
-      @Override
-      public DocIdSetIterator approximation() {
-        // note it is important to share the same pq as this scorer so that
-        // rebalancing the pq through the approximation will also rebalance
-        // the pq in this scorer.
+    // note it is important to share the same pq as this scorer so that
+    // rebalancing the pq through the approximation will also rebalance
+    // the pq in this scorer.
-        return new DisjunctionDISIApproximation(subScorers);
-      }
+    return new TwoPhaseIterator(new DisjunctionDISIApproximation(subScorers)) {
 
       @Override
       public boolean matches() throws IOException {
Index: lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI.java	(revision 1668009)
+++ lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI.java	(revision )
@@ -140,18 +140,12 @@
    */
   private static class TwoPhaseConjunctionDISI extends TwoPhaseIterator {
 
-    private final ConjunctionDISI approximation;
     private final TwoPhaseIterator[] twoPhaseIterators;
 
     private TwoPhaseConjunctionDISI(List<? extends DocIdSetIterator> iterators, List<TwoPhaseIterator> twoPhaseIterators) {
-      approximation = new ConjunctionDISI(iterators);
+      super(new ConjunctionDISI(iterators));
       assert twoPhaseIterators.size() > 0;
-      this.twoPhaseIterators = twoPhaseIterators.toArray(new TwoPhaseIterator[0]);
-    }
-
-    @Override
-    public DocIdSetIterator approximation() {
-      return approximation;
+      this.twoPhaseIterators = twoPhaseIterators.toArray(new TwoPhaseIterator[twoPhaseIterators.size()]);
     }
 
     @Override
Index: lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI.java	(revision 1668009)
+++ lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI.java	(revision )
@@ -28,12 +28,7 @@
 public class TestConjunctionDISI extends LuceneTestCase {
 
   private static TwoPhaseIterator approximation(final DocIdSetIterator iterator, final FixedBitSet confirmed) {
-    return new TwoPhaseIterator() {
-
-      @Override
-      public DocIdSetIterator approximation() {
-        return iterator;
-      }
+    return new TwoPhaseIterator(iterator) {
 
       @Override
       public boolean matches() throws IOException {
Index: lucene/core/src/java/org/apache/lucene/search/LRUQueryCache.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/LRUQueryCache.java	(revision 1668009)
+++ lucene/core/src/java/org/apache/lucene/search/LRUQueryCache.java	(revision )
@@ -570,17 +570,11 @@
         twoPhaseView = null;
         disi = approximation;
       } else {
-        twoPhaseView = new TwoPhaseIterator() {
-
+        twoPhaseView = new TwoPhaseIterator(approximation) {
           @Override
           public boolean matches() throws IOException {
             final int doc = approximation.docID();
             return acceptDocs.get(doc);
-          }
-
-          @Override
-          public DocIdSetIterator approximation() {
-            return approximation;
           }
         };
         disi = TwoPhaseIterator.asDocIdSetIterator(twoPhaseView);
Index: lucene/core/src/java/org/apache/lucene/search/DocValuesRangeQuery.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/DocValuesRangeQuery.java	(revision 1668009)
+++ lucene/core/src/java/org/apache/lucene/search/DocValuesRangeQuery.java	(revision )
@@ -213,25 +213,19 @@
 
   private static class TwoPhaseNumericRange extends TwoPhaseIterator {
 
-    private final DocIdSetIterator approximation;
     private final SortedNumericDocValues values;
     private final long min, max;
     private final Bits acceptDocs;
 
     TwoPhaseNumericRange(SortedNumericDocValues values, long min, long max, DocIdSetIterator approximation, Bits acceptDocs) {
+      super(approximation);
       this.values = values;
       this.min = min;
       this.max = max;
-      this.approximation = approximation;
       this.acceptDocs = acceptDocs;
     }
 
     @Override
-    public DocIdSetIterator approximation() {
-      return approximation;
-    }
-
-    @Override
     public boolean matches() throws IOException {
       final int doc = approximation.docID();
       if (acceptDocs == null || acceptDocs.get(doc)) {
@@ -251,22 +245,16 @@
 
   private static class TwoPhaseOrdRange extends TwoPhaseIterator {
 
-    private final DocIdSetIterator approximation;
     private final SortedSetDocValues values;
     private final long minOrd, maxOrd;
     private final Bits acceptDocs;
 
     TwoPhaseOrdRange(SortedSetDocValues values, long minOrd, long maxOrd, DocIdSetIterator approximation, Bits acceptDocs) {
+      super(approximation);
       this.values = values;
       this.minOrd = minOrd;
       this.maxOrd = maxOrd;
-      this.approximation = approximation;
       this.acceptDocs = acceptDocs;
-    }
-
-    @Override
-    public DocIdSetIterator approximation() {
-      return approximation;
     }
 
     @Override
Index: lucene/core/src/java/org/apache/lucene/search/ReqExclScorer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/ReqExclScorer.java	(revision 1668009)
+++ lucene/core/src/java/org/apache/lucene/search/ReqExclScorer.java	(revision )
@@ -136,12 +136,7 @@
     if (reqTwoPhaseIterator == null) {
       return null;
     }
-    return new TwoPhaseIterator() {
-
-      @Override
-      public DocIdSetIterator approximation() {
-        return reqApproximation;
-      }
+    return new TwoPhaseIterator(reqApproximation) {
 
       @Override
       public boolean matches() throws IOException {
Index: lucene/core/src/java/org/apache/lucene/search/FieldValueQuery.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/FieldValueQuery.java	(revision 1668009)
+++ lucene/core/src/java/org/apache/lucene/search/FieldValueQuery.java	(revision )
@@ -71,7 +71,7 @@
         }
 
         final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());
-        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator() {
+        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approximation) {
 
           @Override
           public boolean matches() throws IOException {
@@ -85,10 +85,6 @@
             return true;
           }
 
-          @Override
-          public DocIdSetIterator approximation() {
-            return approximation;
-          }
         };
         final DocIdSetIterator disi = TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator);
 
Index: lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer.java	(revision 1668009)
+++ lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer.java	(revision )
@@ -590,12 +590,7 @@
 
   @Override
   public TwoPhaseIterator asTwoPhaseIterator() {
-    return new TwoPhaseIterator() {
-      @Override
-      public DocIdSetIterator approximation() {
-        return conjunction;
-      }
-
+    return new TwoPhaseIterator(conjunction) {
       @Override
       public boolean matches() throws IOException {
         sloppyFreq = phraseFreq(); // check for phrase
Index: lucene/core/src/java/org/apache/lucene/search/FilteredQuery.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/FilteredQuery.java	(revision 1668009)
+++ lucene/core/src/java/org/apache/lucene/search/FilteredQuery.java	(revision )
@@ -216,12 +216,8 @@
       TwoPhaseIterator inner = scorer.asTwoPhaseIterator();
       if (inner != null) {
         // we are like a simplified conjunction here, handle the nested case:
-        return new TwoPhaseIterator() {
+        return new TwoPhaseIterator(inner.approximation()) {
           @Override
-          public DocIdSetIterator approximation() {
-            return inner.approximation();
-          }
-          @Override
           public boolean matches() throws IOException {
             // check the approximation matches first, then check bits last.
             return inner.matches() && filterBits.get(scorer.docID());
@@ -229,12 +225,7 @@
         };
       } else {
         // scorer doesnt have an approximation, just use it, to force bits applied last.
-        return new TwoPhaseIterator() {
-          @Override
-          public DocIdSetIterator approximation() {
-            return scorer;
-          }
-          
+        return new TwoPhaseIterator(scorer) {
           @Override
           public boolean matches() throws IOException {
             return filterBits.get(scorer.docID());
Index: lucene/core/src/java/org/apache/lucene/search/DocValuesTermsQuery.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/DocValuesTermsQuery.java	(revision 1668009)
+++ lucene/core/src/java/org/apache/lucene/search/DocValuesTermsQuery.java	(revision )
@@ -160,11 +160,7 @@
         }
 
         final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());
-        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator() {
-          @Override
-          public DocIdSetIterator approximation() {
-            return approximation;
-          }
+        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approximation) {
           @Override
           public boolean matches() throws IOException {
             final int doc = approximation.docID();
Index: lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer.java	(revision 1668009)
+++ lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer.java	(revision )
@@ -63,16 +63,10 @@
 
   @Override
   public TwoPhaseIterator asTwoPhaseIterator() {
-    return new TwoPhaseIterator() {
-
+    return new TwoPhaseIterator(conjunction) {
       @Override
       public boolean matches() throws IOException {
         return phraseFreq() > 0;
-      }
-
-      @Override
-      public DocIdSetIterator approximation() {
-        return conjunction;
       }
     };
   }
Index: lucene/core/src/java/org/apache/lucene/search/CachingWrapperQuery.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/CachingWrapperQuery.java	(revision 1668009)
+++ lucene/core/src/java/org/apache/lucene/search/CachingWrapperQuery.java	(revision )
@@ -151,18 +151,14 @@
           twoPhaseView = null;
           disi = approximation;
         } else {
-          twoPhaseView = new TwoPhaseIterator() {
+          twoPhaseView = new TwoPhaseIterator(approximation) {
             
             @Override
             public boolean matches() throws IOException {
               final int doc = approximation.docID();
               return acceptDocs.get(doc);
             }
-            
+
-            @Override
-            public DocIdSetIterator approximation() {
-              return approximation;
-            }
           };
           disi = TwoPhaseIterator.asDocIdSetIterator(twoPhaseView);
         }
Index: lucene/core/src/java/org/apache/lucene/search/TwoPhaseIterator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/TwoPhaseIterator.java	(revision 1668009)
+++ lucene/core/src/java/org/apache/lucene/search/TwoPhaseIterator.java	(revision )
@@ -18,9 +18,11 @@
  */
 
 import java.io.IOException;
+import java.util.Objects;
 
 /**
- * An approximation of a {@link DocIdSetIterator}. When the {@link #approximation()}'s
+ * Returned by {@link Scorer#asTwoPhaseIterator()} to expose an approximation of
+ * a {@link DocIdSetIterator}. When the {@link #approximation()}'s
  * {@link DocIdSetIterator#nextDoc()} or {@link DocIdSetIterator#advance(int)}
  * return, {@link #matches()} needs to be checked in order to know whether the
  * returned doc ID actually matches.
@@ -28,6 +30,13 @@
  */
 public abstract class TwoPhaseIterator {
 
+  protected final DocIdSetIterator approximation;
+
+  /** Takes the approximation to be returned by {@link #approximation}. Not null. */
+  protected TwoPhaseIterator(DocIdSetIterator approximation) {
+    this.approximation = Objects.requireNonNull(approximation);
+  }
+
   /** Return a {@link DocIdSetIterator} view of the provided
    *  {@link TwoPhaseIterator}. */
   public static DocIdSetIterator asDocIdSetIterator(TwoPhaseIterator twoPhaseIterator) {
@@ -70,7 +79,9 @@
   /** Return an approximation. The returned {@link DocIdSetIterator} is a
    *  superset of the matching documents, and each match needs to be confirmed
    *  with {@link #matches()} in order to know whether it matches or not. */
-  public abstract DocIdSetIterator approximation();
+  public DocIdSetIterator approximation() {
+    return approximation;
+  }
 
   /** Return whether the current doc ID that the iterator is on matches. This
    *  method should only be called when the iterator is positionned -- ie. not
Index: lucene/test-framework/src/java/org/apache/lucene/search/RandomApproximationQuery.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/search/RandomApproximationQuery.java	(revision 1668009)
+++ lucene/test-framework/src/java/org/apache/lucene/search/RandomApproximationQuery.java	(revision )
@@ -166,26 +166,20 @@
   private static class RandomTwoPhaseView extends TwoPhaseIterator {
 
     private final DocIdSetIterator disi;
-    private final RandomApproximation approximation;
     private int lastDoc = -1;
 
     RandomTwoPhaseView(Random random, DocIdSetIterator disi) {
+      super(new RandomApproximation(random, disi));
       this.disi = disi;
-      this.approximation = new RandomApproximation(random, disi);
     }
 
     @Override
-    public DocIdSetIterator approximation() {
-      return approximation;
-    }
-
-    @Override
     public boolean matches() throws IOException {
       if (approximation.docID() == -1 || approximation.docID() == DocIdSetIterator.NO_MORE_DOCS) {
-        throw new AssertionError("matches() should not be called on doc ID " + approximation.doc);
+        throw new AssertionError("matches() should not be called on doc ID " + approximation.docID());
       }
       if (lastDoc == approximation.docID()) {
-        throw new AssertionError("matches() has been called twice on doc ID " + approximation.doc);
+        throw new AssertionError("matches() has been called twice on doc ID " + approximation.docID());
       }
       lastDoc = approximation.docID();
       return approximation.docID() == disi.docID();
Index: lucene/core/src/java/org/apache/lucene/search/DocValuesRewriteMethod.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/DocValuesRewriteMethod.java	(revision 1668009)
+++ lucene/core/src/java/org/apache/lucene/search/DocValuesRewriteMethod.java	(revision )
@@ -150,11 +150,7 @@
           } while (termsEnum.next() != null);
           
           final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());
-          final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator() {
-            @Override
-            public DocIdSetIterator approximation() {
-              return approximation;
-            }
+          final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approximation) {
             @Override
             public boolean matches() throws IOException {
               final int doc = approximation.docID();
