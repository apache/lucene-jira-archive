diff --git a/lucene/queries/src/java/org/apache/lucene/queries/payloads/PayloadScoreQuery.java b/lucene/queries/src/java/org/apache/lucene/queries/payloads/PayloadScoreQuery.java
index 9fdd6be9de..72fa9379d3 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/payloads/PayloadScoreQuery.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/payloads/PayloadScoreQuery.java
@@ -235,7 +235,8 @@ public class PayloadScoreQuery extends SpanQuery {
       float payloadFactor = decoder.computePayloadFactor(docID(), in.startPosition(), in.endPosition(), payload);
       payloadScore = function.currentScore(docID(), getField(), in.startPosition(), in.endPosition(),
                                             payloadsSeen, payloadScore, payloadFactor);
-      payloadsSeen++;
+      if (payload != null)
+        payloadsSeen++;
     }

     @Override
diff --git a/lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadScoreQuery.java b/lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadScoreQuery.java
index 509246e09d..2f273052c6 100644
--- a/lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadScoreQuery.java
+++ b/lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadScoreQuery.java
@@ -107,9 +107,9 @@ public class TestPayloadScoreQuery extends LuceneTestCase {
   @Test
   public void testNearQuery() throws IOException {

-    //   2     4
+    //   2     1
     // twenty two
-    //  2     4      4     4
+    //  2     1      4     4
     // one hundred twenty two

     SpanNearQuery q = new SpanNearQuery(new SpanQuery[]{
@@ -117,8 +117,8 @@ public class TestPayloadScoreQuery extends LuceneTestCase {
                         new SpanTermQuery(new Term("field", "two"))
                       }, 0, true);

-    checkQuery(q, new MaxPayloadFunction(), new int[]{ 22, 122, 222 }, new float[]{ 4.0f, 4.0f, 4.0f });
-    checkQuery(q, new MinPayloadFunction(), new int[]{ 122, 222, 22 }, new float[]{ 4.0f, 4.0f, 2.0f });
+    checkQuery(q, new MaxPayloadFunction(), new int[]{ 122, 222, 22 }, new float[]{ 4.0f, 4.0f, 2.0f });
+    checkQuery(q, new MinPayloadFunction(), new int[]{ 122, 222, 22 }, new float[]{ 4.0f, 4.0f, 1.0f });
     checkQuery(q, new AveragePayloadFunction(), new int[] { 122, 222, 22 }, new float[] { 4.0f, 4.0f, 3.0f });

   }
@@ -127,7 +127,7 @@ public class TestPayloadScoreQuery extends LuceneTestCase {
   public void testNestedNearQuery() throws Exception {

     // (one OR hundred) NEAR (twenty two) ~ 1
-    //  2    4        4    4
+    //  2    1        4    4
     // one hundred twenty two
     // two hundred twenty two

@@ -143,11 +143,11 @@ public class TestPayloadScoreQuery extends LuceneTestCase {
     searcher.setSimilarity(new ClassicSimilarity());
     try {
       checkQuery(q, new MaxPayloadFunction(), new int[]{ 122, 222 }, new float[]{ 20.901256561279297f, 17.06580352783203f });
-      checkQuery(q, new MinPayloadFunction(), new int[]{ 222, 122 }, new float[]{ 17.06580352783203f, 10.450628280639648f });
-      checkQuery(q, new AveragePayloadFunction(), new int[] { 122, 222 }, new float[]{ 19.15948486328125f, 17.06580352783203f });
+      checkQuery(q, new MinPayloadFunction(), new int[]{ 222, 122 }, new float[]{ 17.06580352783203f, 5.225314140319824f });
+      checkQuery(q, new AveragePayloadFunction(), new int[] { 122, 222 }, new float[]{ 19.85619354248047f, 19.19902801513672f });
       checkQuery(q, new MaxPayloadFunction(), false, new int[]{122, 222}, new float[]{4.0f, 4.0f});
-      checkQuery(q, new MinPayloadFunction(), false, new int[]{222, 122}, new float[]{4.0f, 2.0f});
-      checkQuery(q, new AveragePayloadFunction(), false, new int[]{222, 122}, new float[]{4.0f, 3.666666f});
+      checkQuery(q, new MinPayloadFunction(), false, new int[]{222, 122}, new float[]{4.0f, 1.0f});
+      checkQuery(q, new AveragePayloadFunction(), false, new int[]{222, 122}, new float[]{4.5f, 3.799999952316284f});
     }
     finally {
       searcher.setSimilarity(similarity);
@@ -167,9 +167,9 @@ public class TestPayloadScoreQuery extends LuceneTestCase {
         new SpanTermQuery(new Term("field", "twenty"))
     );

-    checkQuery(q, new AveragePayloadFunction(), new int[] { 222, 122 }, new float[]{ 4.0f, 3.666666f });
+    checkQuery(q, new AveragePayloadFunction(), new int[] { 222, 122 }, new float[]{ 4.5f, 3.799999952316284f });
     checkQuery(q, new MaxPayloadFunction(), new int[]{ 122, 222 }, new float[]{ 4.0f, 4.0f });
-    checkQuery(q, new MinPayloadFunction(), new int[]{ 222, 122 }, new float[]{ 4.0f, 2.0f });
+    checkQuery(q, new MinPayloadFunction(), new int[]{ 222, 122 }, new float[]{ 4.0f, 1.0f });

   }

@@ -209,6 +209,7 @@ public class TestPayloadScoreQuery extends LuceneTestCase {
   private static JustScorePayloadSimilarity similarity = new JustScorePayloadSimilarity();
   private static byte[] payload2 = new byte[]{2};
   private static byte[] payload4 = new byte[]{4};
+  private static byte[] payload3 = new byte[]{};

   private static class PayloadAnalyzer extends Analyzer {
     @Override
@@ -234,6 +235,8 @@ public class TestPayloadScoreQuery extends LuceneTestCase {
       if (input.incrementToken()) {
         if (numSeen % 4 == 0) {
           payAtt.setPayload(new BytesRef(payload2));
-        } else {
+        } else if (numSeen % 4 == 1 ) {
+          payAtt.setPayload(new BytesRef(payload3));
+        } else {
           payAtt.setPayload(new BytesRef(payload4));
         }
