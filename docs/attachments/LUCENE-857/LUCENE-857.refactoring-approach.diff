Index: src/java/org/apache/lucene/search/CachingWrapperFilter.java
===================================================================
--- src/java/org/apache/lucene/search/CachingWrapperFilter.java	(revision 527010)
+++ src/java/org/apache/lucene/search/CachingWrapperFilter.java	(working copy)
@@ -24,10 +24,10 @@
 import java.io.IOException;
 
 /**
- * Wraps another filter's result and caches it.  The caching
- * behavior is like {@link QueryFilter}.  The purpose is to allow
+ * Wraps another filter's result and caches it.
+ * The purpose is to allow
  * filters to simply filter, and then wrap with this class to add
- * caching, keeping the two concerns decoupled yet composable.
+ * caching.
  */
 public class CachingWrapperFilter extends Filter {
   protected Filter filter;
Index: src/java/org/apache/lucene/search/QueryFilter.java
===================================================================
--- src/java/org/apache/lucene/search/QueryFilter.java	(revision 527010)
+++ src/java/org/apache/lucene/search/QueryFilter.java	(working copy)
@@ -26,63 +26,24 @@
  * query.  Results are cached, so that searches after the first on the same
  * index using this filter are much faster.
  *
- * <p> This could be used, for example, with a {@link RangeQuery} on a suitably
- * formatted date field to implement date filtering.  One could re-use a single
- * QueryFilter that matches, e.g., only documents modified within the last
- * week.  The QueryFilter and RangeQuery would only need to be reconstructed
- * once per day.
- *
  * @version $Id$
+ * @deprecated use a CachingWrapperFilter with QueryWrapperFilter
  */
-public class QueryFilter extends Filter {
-  private Query query;
-  private transient WeakHashMap cache = null;
+public class QueryFilter extends CachingWrapperFilter {
 
-  /** Constructs a filter which only matches documents matching
+  /** Constructs a cached filter which only matches documents matching
    * <code>query</code>.
    */
   public QueryFilter(Query query) {
-    this.query = query;
+    super(new QueryWrapperFilter(query));
   }
 
-  public BitSet bits(IndexReader reader) throws IOException {
-
-    if (cache == null) {
-      cache = new WeakHashMap();
-    }
-
-    synchronized (cache) {  // check cache
-      BitSet cached = (BitSet) cache.get(reader);
-      if (cached != null) {
-        return cached;
-      }
-    }
-
-    final BitSet bits = new BitSet(reader.maxDoc());
-
-    new IndexSearcher(reader).search(query, new HitCollector() {
-      public final void collect(int doc, float score) {
-        bits.set(doc);  // set bit for hit
-      }
-    });
-
-    synchronized (cache) {  // update cache
-      cache.put(reader, bits);
-    }
-
-    return bits;
-  }
-
-  public String toString() {
-    return "QueryFilter("+query+")";
-  }
-
   public boolean equals(Object o) {
     if (!(o instanceof QueryFilter)) return false;
-    return this.query.equals(((QueryFilter)o).query);
+    return super.equals((QueryFilter)o);
   }
 
   public int hashCode() {
-    return query.hashCode() ^ 0x923F64B9;  
+    return super.hashCode() ^ 0x923F64B9;  
   }
 }
Index: src/java/org/apache/lucene/search/QueryWrapperFilter.java
===================================================================
--- src/java/org/apache/lucene/search/QueryWrapperFilter.java	(revision 0)
+++ src/java/org/apache/lucene/search/QueryWrapperFilter.java	(revision 0)
@@ -0,0 +1,70 @@
+package org.apache.lucene.search;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.IOException;
+import java.util.WeakHashMap;
+import java.util.BitSet;
+import org.apache.lucene.index.IndexReader;
+
+/** 
+ * Constrains search results to only match those which also match a provided
+ * query.  
+ *
+ * <p> This could be used, for example, with a {@link RangeQuery} on a suitably
+ * formatted date field to implement date filtering.  One could re-use a single
+ * QueryFilter that matches, e.g., only documents modified within the last
+ * week.  The QueryFilter and RangeQuery would only need to be reconstructed
+ * once per day.
+ *
+ * @version $Id:$
+ */
+public class QueryWrapperFilter extends Filter {
+  private Query query;
+
+  /** Constructs a filter which only matches documents matching
+   * <code>query</code>.
+   */
+  public QueryWrapperFilter(Query query) {
+    this.query = query;
+  }
+
+  public BitSet bits(IndexReader reader) throws IOException {
+    final BitSet bits = new BitSet(reader.maxDoc());
+
+    new IndexSearcher(reader).search(query, new HitCollector() {
+      public final void collect(int doc, float score) {
+        bits.set(doc);  // set bit for hit
+      }
+    });
+    return bits;
+  }
+
+  public String toString() {
+    return "QueryWrapperFilter("+query+")";
+  }
+
+  public boolean equals(Object o) {
+    if (!(o instanceof QueryWrapperFilter)) return false;
+    return this.query.equals(((QueryWrapperFilter)o).query);
+  }
+
+  public int hashCode() {
+    return query.hashCode() ^ 0x923F64B9;
+  }
+}

Property changes on: src/java/org/apache/lucene/search/QueryWrapperFilter.java
___________________________________________________________________
Name: svn:keywords
   + Date Author Id Revision HeadURL
Name: svn:eol-style
   + native

