Index: lucene/core/src/test/org/apache/lucene/index/TestPostingsOffsets.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestPostingsOffsets.java	(revision 1348569)
+++ lucene/core/src/test/org/apache/lucene/index/TestPostingsOffsets.java	(working copy)
@@ -17,6 +17,7 @@
  * limitations under the License.
  */
 
+import java.io.IOException;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
@@ -382,7 +383,41 @@
     riw.close();
     dir.close();
   }
+  
+  // TODO: make a custom PositionIncAttImpl that doesnt check for negatives and see
+  // if we can find problems with that!
+  public void testNegativeOffsets() throws Exception {
+    checkTokens(new Token[] { 
+        makeToken("foo", 1, 1, 0)
+    });
+  }
+  
+  public void testNegativeDeltas() throws Exception {
+    checkTokens(new Token[] { 
+        makeToken("foo", 1, 0, 3),
+        makeToken("foo", 1, 4, 7),
+        makeToken("foo", 0, 3, 6)
+    });
+  }
+  // TODO: more tests with other possibilities
+  
+  private void checkTokens(Token[] tokens) throws IOException {
+    Directory dir = newDirectory();
+    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, iwc);
+    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);
+    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);
+    // store some term vectors for the checkindex cross-check
+    ft.setStoreTermVectors(true);
+    ft.setStoreTermVectorPositions(true);
+    ft.setStoreTermVectorOffsets(true);
 
+    Document doc = new Document();
+    doc.add(new Field("body", new CannedTokenStream(tokens), ft));
+    riw.addDocument(doc);
+    riw.close();
+    dir.close(); // checkindex
+  }
+
   private Token makeToken(String text, int posIncr, int startOffset, int endOffset) {
     final Token t = new Token();
     t.append(text);
