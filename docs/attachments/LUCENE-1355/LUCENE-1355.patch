Index: contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor.java
===================================================================
--- contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor.java	(revision 685020)
+++ contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor.java	(working copy)
@@ -66,6 +66,10 @@
 	        try
             {
                 int docFreq=reader.docFreq(new Term(fieldName,terms[i].term));
+                // docFreq counts deletes
+                if(totalNumDocs < docFreq) {
+                  docFreq = totalNumDocs;
+                }
                 //IDF algorithm taken from DefaultSimilarity class
                 float idf=(float)(Math.log((float)totalNumDocs/(double)(docFreq+1)) + 1.0);
                 terms[i].weight*=idf;
Index: contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor.java
===================================================================
--- contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor.java	(revision 683593)
+++ contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor.java	(working copy)
@@ -409,7 +409,10 @@
       while (it.hasNext()) {
         WeightedSpanTerm weightedSpanTerm = (WeightedSpanTerm) terms.get(it.next());
         int docFreq = reader.docFreq(new Term(fieldName, weightedSpanTerm.term));
-
+        // docFreq counts deletes
+        if(totalNumDocs < docFreq) {
+          docFreq = totalNumDocs;
+        }
         // IDF algorithm taken from DefaultSimilarity class
         float idf = (float) (Math.log((float) totalNumDocs / (double) (docFreq + 1)) + 1.0);
         weightedSpanTerm.weight *= idf;
Index: contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java
===================================================================
--- contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java	(revision 683962)
+++ contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java	(working copy)
@@ -42,9 +42,14 @@
 import org.apache.lucene.analysis.standard.StandardAnalyzer;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
+import org.apache.lucene.document.Field.Index;
+import org.apache.lucene.document.Field.Store;
+import org.apache.lucene.index.CorruptIndexException;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.IndexWriter;
 import org.apache.lucene.index.Term;
+import org.apache.lucene.index.IndexWriter.MaxFieldLength;
+import org.apache.lucene.queryParser.ParseException;
 import org.apache.lucene.queryParser.QueryParser;
 import org.apache.lucene.search.BooleanQuery;
 import org.apache.lucene.search.FilteredQuery;
@@ -63,6 +68,7 @@
 import org.apache.lucene.search.spans.SpanNotQuery;
 import org.apache.lucene.search.spans.SpanQuery;
 import org.apache.lucene.search.spans.SpanTermQuery;
+import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.RAMDirectory;
 import org.w3c.dom.Element;
 import org.w3c.dom.NodeList;
@@ -97,7 +103,7 @@
   public HighlighterTest(String arg0) {
     super(arg0);
   }
-
+  
   public void testHighlightingWithDefaultField() throws Exception {
 
     String s1 = "I call our world Flatland, not because we call it so,";
@@ -1245,6 +1251,60 @@
 
     helper.start();
   }
+  
+  private Directory dir = new RAMDirectory();
+  private Analyzer a = new WhitespaceAnalyzer();
+  
+  public void testWeightedTermsWithDeletes() throws IOException, ParseException {
+    makeIndex();
+    deleteDocument();
+    searchIndex();
+  }
+  
+  private Document doc( String f, String v ){
+    Document doc = new Document();
+    doc.add( new Field( f, v, Store.YES, Index.TOKENIZED ) );
+    return doc;
+  }
+  
+  private void makeIndex() throws IOException {
+    IndexWriter writer = new IndexWriter( dir, a, MaxFieldLength.LIMITED );
+    writer.addDocument( doc( "t_text1", "random words for highlighting tests del" ) );
+    writer.addDocument( doc( "t_text1", "more random words for second field del" ) );
+    writer.addDocument( doc( "t_text1", "random words for highlighting tests del" ) );
+    writer.addDocument( doc( "t_text1", "more random words for second field" ) );
+    writer.optimize();
+    writer.close();
+  }
+  
+  private void deleteDocument() throws IOException {
+    IndexWriter writer = new IndexWriter( dir, a, false, MaxFieldLength.LIMITED );
+    writer.deleteDocuments( new Term( "t_text1", "del" ) );
+    // To see negative idf, keep comment the following line
+    //writer.optimize();
+    writer.close();
+  }
+  
+  private void searchIndex() throws IOException, ParseException {
+    String q = "t_text1:random";
+    QueryParser parser = new QueryParser( "t_text1", a );
+    Query query = parser.parse( q );
+    IndexSearcher searcher = new IndexSearcher( dir );
+    // This scorer can return negative idf -> null fragment
+    Scorer scorer = new QueryScorer( query, searcher.getIndexReader(), "t_text1" );
+    // This scorer doesn't use idf (patch version)
+    //Scorer scorer = new QueryScorer( query, "t_text1" );
+    Highlighter h = new Highlighter( scorer );
+    // forgive me for using deprecated API :)
+    Hits hits = searcher.search( query );
+    for( int i = 0; i < hits.length(); i++ ){
+      Document doc = hits.doc( i );
+      String result = h.getBestFragment( a, "t_text1", doc.get( "t_text1" ));
+      System.out.println("result:" +  result);
+      assertEquals("more <B>random</B> words for second field", result);
+    }
+    searcher.close();
+  }
 
   /*
    * 
