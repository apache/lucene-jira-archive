Index: lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.java	(revision 1624235)
+++ lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.java	(working copy)
@@ -17,10 +17,17 @@
  * limitations under the License.
  */
 
+import java.io.BufferedReader;
 import java.io.ByteArrayOutputStream;
+import java.io.File;
+import java.io.FileInputStream;
 import java.io.IOException;
+import java.io.InputStreamReader;
 import java.io.PrintStream;
 import java.io.StringReader;
+import java.nio.charset.CharsetDecoder;
+import java.nio.charset.CodingErrorAction;
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
@@ -938,8 +945,8 @@
     volatile boolean allowInterrupt = false;
     final Random random;
     final Directory adder;
-    final ByteArrayOutputStream bytesLog = new ByteArrayOutputStream();
-    final PrintStream log = new PrintStream(bytesLog, true, IOUtils.UTF_8);
+    final File logFile = createTempFile("TestIndexWriter.IndexerThreadInterrupt", "log");
+    final PrintStream log = new PrintStream(logFile, IOUtils.UTF_8);
     final int id;
 
     IndexerThreadInterrupt(int id) throws IOException {
@@ -1006,7 +1013,7 @@
             }
             IndexWriterConfig conf = newIndexWriterConfig(random,
                                                           new MockAnalyzer(random)).setMaxBufferedDocs(2);
-            //conf.setInfoStream(log);
+            conf.setInfoStream(log);
             w = new IndexWriter(dir, conf);
 
             Document doc = new Document();
@@ -1022,7 +1029,7 @@
             doc.add(sortedDVField);
             doc.add(sortedSetDVField);
             for(int i=0;i<100;i++) {
-              //log.println("\nTEST: i=" + i);
+              log.println("\nTEST: i=" + i);
               idField.setStringValue(Integer.toString(i));
               binaryDVField.setBytesValue(new BytesRef(idField.stringValue()));
               numericDVField.setLongValue(i);
@@ -1183,7 +1190,11 @@
     t.finish = true;
     t.join();
     if (t.failed) {
-      fail(new String(t.bytesLog.toString("UTF-8")));
+      IOUtils.closeWhileHandlingException(t.log);
+      printFailLog(t.logFile);
+      fail("thread hit unexpected exceptions");
+    } else {
+      IOUtils.close(t.log);
     }
   }
   
@@ -1223,15 +1234,43 @@
     t2.finish = true;
     t1.join();
     t2.join();
+
+    if (t1.failed || t2.failed) {
+      IOUtils.closeWhileHandlingException(t1.log, t2.log);
+    } else {
+      IOUtils.close(t1.log, t2.log);
+    }
+
     if (t1.failed) {
-      System.out.println("Thread1 failed:\n" + new String(t1.bytesLog.toString("UTF-8")));
+      System.out.println("Thread1 failed:\n");
+      printFailLog(t1.logFile);
     }
     if (t2.failed) {
-      System.out.println("Thread2 failed:\n" + new String(t2.bytesLog.toString("UTF-8")));
+      System.out.println("Thread2 failed:\n");
+      printFailLog(t2.logFile);
     }
     assertFalse(t1.failed || t2.failed);
   }
 
+  /** Stream's file's contents to stdout.  It could be large, so we can't just read one giant String. */
+  private static void printFailLog(File file) throws IOException {
+    CharsetDecoder decoder = StandardCharsets.UTF_8.newDecoder()
+        .onMalformedInput(CodingErrorAction.REPORT)
+        .onUnmappableCharacter(CodingErrorAction.REPORT);
+    BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file), decoder));
+    try {
+      char[] buffer = new char[16*1024];
+      while (true) {
+        int count = reader.read(buffer, 0, buffer.length);
+        if (count == -1) {
+          break;
+        }
+        System.out.println(new String(buffer, 0, count));
+      }
+    } finally {
+      reader.close();
+    }
+  }
 
   public void testIndexStoreCombos() throws Exception {
     Directory dir = newDirectory();
