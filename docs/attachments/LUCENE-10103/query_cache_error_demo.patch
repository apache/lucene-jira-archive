diff --git a/lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache.java b/lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache.java
index 417314620e2..7496cb598f4 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache.java
@@ -66,6 +66,9 @@ import org.apache.lucene.util.IOUtils;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.RamUsageTester;
 import org.apache.lucene.util.TestUtil;
+import org.apache.lucene.util.automaton.Automaton;
+import org.apache.lucene.util.automaton.AutomatonTestUtil;
+import org.apache.lucene.util.automaton.Operations;
 
 public class TestLRUQueryCache extends LuceneTestCase {
 
@@ -867,6 +870,43 @@ public class TestLRUQueryCache extends LuceneTestCase {
     dir2.close();
   }
 
+  public void testCachingAutomatonQuery() throws IOException {
+    Directory directory = newDirectory();
+    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);
+    Document doc = new Document();
+    StringField f = new StringField("color", "red", Store.NO);
+    doc.add(f);
+    writer.addDocument(doc);
+    writer.commit();
+    IndexReader reader = DirectoryReader.open(directory);
+    IndexSearcher searcher = new IndexSearcher(reader);
+
+    long queryRamBytesUsed = 0;
+
+    int i = 0;
+    try {
+      for (i = 0; i < 1000; i++) {
+        AutomatonQuery query = new AutomatonQuery(new Term("body"), createBigAutomaton());
+        queryRamBytesUsed += query.ramBytesUsed();
+        searcher.count(query);
+      }
+    } catch (OutOfMemoryError e) {
+      System.out.println(queryRamBytesUsed);
+      System.out.println(i  + ": " + ((LRUQueryCache) searcher.getQueryCache()).ramBytesUsed());
+    }
+
+    reader.close();
+    writer.close();
+  }
+
+  private static Automaton createBigAutomaton() {
+    Automaton a = AutomatonTestUtil.randomAutomaton(random());
+    for (int i = 0; i < 19; i++) {
+      a = Operations.union(a, AutomatonTestUtil.randomAutomaton(random()));
+    }
+    return a;
+  }
+
   public void testUseRewrittenQueryAsCacheKey() throws IOException {
     final Query expectedCacheKey = new TermQuery(new Term("foo", "bar"));
     final BooleanQuery.Builder query = new BooleanQuery.Builder();
