Index: src/demo/org/apache/lucene/demo/html/HTMLParser.java
===================================================================
--- src/demo/org/apache/lucene/demo/html/HTMLParser.java	(revision 596082)
+++ src/demo/org/apache/lucene/demo/html/HTMLParser.java	(working copy)
@@ -627,9 +627,7 @@
       jj_lasttokens[jj_endpos++] = kind;
     } else if (jj_endpos != 0) {
       jj_expentry = new int[jj_endpos];
-      for (int i = 0; i < jj_endpos; i++) {
-        jj_expentry[i] = jj_lasttokens[i];
-      }
+      System.arraycopy(jj_lasttokens, 0, jj_expentry, 0, jj_endpos);
       boolean exists = false;
       for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
         int[] oldentry = (int[])(e.nextElement());
Index: src/demo/org/apache/lucene/demo/html/ParseException.java
===================================================================
--- src/demo/org/apache/lucene/demo/html/ParseException.java	(revision 596082)
+++ src/demo/org/apache/lucene/demo/html/ParseException.java	(working copy)
@@ -179,7 +179,7 @@
            default:
               if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {
                  String s = "0000" + Integer.toString(ch, 16);
-                 retval.append("\\u" + s.substring(s.length() - 4, s.length()));
+                 retval.append("\\u").append(s.substring(s.length() - 4, s.length()));
               } else {
                  retval.append(ch);
               }
Index: src/demo/org/apache/lucene/demo/html/TokenMgrError.java
===================================================================
--- src/demo/org/apache/lucene/demo/html/TokenMgrError.java	(revision 596082)
+++ src/demo/org/apache/lucene/demo/html/TokenMgrError.java	(working copy)
@@ -72,7 +72,7 @@
            default:
               if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {
                  String s = "0000" + Integer.toString(ch, 16);
-                 retval.append("\\u" + s.substring(s.length() - 4, s.length()));
+                 retval.append("\\u").append(s.substring(s.length() - 4, s.length()));
               } else {
                  retval.append(ch);
               }
Index: src/java/org/apache/lucene/analysis/PorterStemmer.java
===================================================================
--- src/java/org/apache/lucene/analysis/PorterStemmer.java	(revision 596082)
+++ src/java/org/apache/lucene/analysis/PorterStemmer.java	(working copy)
@@ -83,8 +83,7 @@
   public void add(char ch) {
     if (b.length <= i + EXTRA) {
       char[] new_b = new char[b.length+INC];
-      for (int c = 0; c < b.length; c++)
-        new_b[c] = b[c];
+      System.arraycopy(b, 0, new_b, 0, b.length);
       b = new_b;
     }
     b[i++] = ch;
@@ -454,8 +453,7 @@
       char[] new_b = new char[wordLen + EXTRA];
       b = new_b;
     }
-    for (int j=0; j<wordLen; j++)
-      b[j] = wordBuffer[offset+j];
+    System.arraycopy(wordBuffer, offset, b, 0, wordLen);
     i = wordLen;
     return stem(0);
   }
Index: src/java/org/apache/lucene/analysis/Token.java
===================================================================
--- src/java/org/apache/lucene/analysis/Token.java	(revision 596082)
+++ src/java/org/apache/lucene/analysis/Token.java	(working copy)
@@ -352,11 +352,11 @@
       sb.append("null");
     else
       sb.append(termBuffer, 0, termLength);
-    sb.append("," + startOffset + "," + endOffset);
+      sb.append(",").append(startOffset).append(",").append(endOffset);
     if (!type.equals("word"))
-      sb.append(",type="+type);
+      sb.append(",type=").append(type);
     if (positionIncrement != 1)
-      sb.append(",posIncr="+positionIncrement);
+      sb.append(",posIncr=").append(positionIncrement);
     sb.append(")");
     return sb.toString();
   }
Index: src/java/org/apache/lucene/index/MergePolicy.java
===================================================================
--- src/java/org/apache/lucene/index/MergePolicy.java	(revision 596082)
+++ src/java/org/apache/lucene/index/MergePolicy.java	(working copy)
@@ -115,7 +115,7 @@
         b.append(segments.info(i).segString(dir));
       }
       if (info != null)
-        b.append(" into " + info.name);
+        b.append(" into ").append(info.name);
       if (optimize)
         b.append(" [optimize]");
       return b.toString();
@@ -145,7 +145,7 @@
       b.append("MergeSpec:\n");
       final int count = merges.size();
       for(int i=0;i<count;i++)
-        b.append("  " + (1+i) + ": " + ((OneMerge) merges.get(i)).segString(dir));
+        b.append("  ").append(1 + i).append(": ").append(((OneMerge) merges.get(i)).segString(dir));
       return b.toString();
     }
   }
Index: src/java/org/apache/lucene/index/ParallelReader.java
===================================================================
--- src/java/org/apache/lucene/index/ParallelReader.java	(revision 596082)
+++ src/java/org/apache/lucene/index/ParallelReader.java	(working copy)
@@ -120,7 +120,7 @@
     if (incRefReaders) {
       reader.incRef();
     }
-    decrefOnClose.add(new Boolean(incRefReaders));
+    decrefOnClose.add(Boolean.valueOf(incRefReaders));
   }
 
   /**
@@ -170,7 +170,7 @@
           IndexReader oldReader = (IndexReader) readers.get(i);
           IndexReader newReader = (IndexReader) newReaders.get(i);
           if (newReader == oldReader) {
-            newDecrefOnClose.add(new Boolean(true));
+            newDecrefOnClose.add(Boolean.TRUE);
             newReader.incRef();
           } else {
             // this is a new subreader instance, so on close() we don't
@@ -175,7 +175,7 @@
           } else {
             // this is a new subreader instance, so on close() we don't
             // decRef but close it 
-            newDecrefOnClose.add(new Boolean(false));
+            newDecrefOnClose.add(Boolean.FALSE);
           }
           pr.add(newReader, !storedFieldReaders.contains(oldReader));
         }
Index: src/java/org/apache/lucene/queryParser/ParseException.java
===================================================================
--- src/java/org/apache/lucene/queryParser/ParseException.java	(revision 596082)
+++ src/java/org/apache/lucene/queryParser/ParseException.java	(working copy)
@@ -179,7 +179,7 @@
            default:
               if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {
                  String s = "0000" + Integer.toString(ch, 16);
-                 retval.append("\\u" + s.substring(s.length() - 4, s.length()));
+                 retval.append("\\u").append(s.substring(s.length() - 4, s.length()));
               } else {
                  retval.append(ch);
               }
Index: src/java/org/apache/lucene/queryParser/QueryParser.java
===================================================================
--- src/java/org/apache/lucene/queryParser/QueryParser.java	(revision 596082)
+++ src/java/org/apache/lucene/queryParser/QueryParser.java	(working copy)
@@ -1428,9 +1428,7 @@
       jj_lasttokens[jj_endpos++] = kind;
     } else if (jj_endpos != 0) {
       jj_expentry = new int[jj_endpos];
-      for (int i = 0; i < jj_endpos; i++) {
-        jj_expentry[i] = jj_lasttokens[i];
-      }
+      System.arraycopy(jj_lasttokens, 0, jj_expentry, 0, jj_endpos);
       boolean exists = false;
       for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
         int[] oldentry = (int[])(e.nextElement());
Index: src/java/org/apache/lucene/queryParser/TokenMgrError.java
===================================================================
--- src/java/org/apache/lucene/queryParser/TokenMgrError.java	(revision 596082)
+++ src/java/org/apache/lucene/queryParser/TokenMgrError.java	(working copy)
@@ -72,7 +72,7 @@
            default:
               if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {
                  String s = "0000" + Integer.toString(ch, 16);
-                 retval.append("\\u" + s.substring(s.length() - 4, s.length()));
+                 retval.append("\\u").append(s.substring(s.length() - 4, s.length()));
               } else {
                  retval.append(ch);
               }
Index: src/java/org/apache/lucene/search/SortField.java
===================================================================
--- src/java/org/apache/lucene/search/SortField.java	(revision 596082)
+++ src/java/org/apache/lucene/search/SortField.java	(working copy)
@@ -220,15 +220,16 @@
       case DOC: buffer.append("<doc>");
                 break;
 
-      case CUSTOM: buffer.append ("<custom:\"" + field + "\": "
-                                               + factory + ">");
+      case CUSTOM:
+                buffer.append("<custom:\"").append(field).append("\": ").append(factory).append(">");
                 break;
 
-      default: buffer.append("\"" + field + "\"");
+      default:
+               buffer.append("\"").append(field).append("\"");
                break;
     }
 
-    if (locale != null) buffer.append ("("+locale+")");
+    if (locale != null) buffer.append("(").append(locale).append(")");
     if (reverse) buffer.append('!');
 
     return buffer.toString();
Index: src/test/org/apache/lucene/document/TestBinaryDocument.java
===================================================================
--- src/test/org/apache/lucene/document/TestBinaryDocument.java	(revision 596082)
+++ src/test/org/apache/lucene/document/TestBinaryDocument.java	(working copy)
@@ -84,11 +84,11 @@
     assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));
     
     /** fetch the string field and compare it's content with the original one */
-    String stringFldStoredTest = new String(docFromReader.get("stringStored"));
+    String stringFldStoredTest = docFromReader.get("stringStored");
     assertTrue(stringFldStoredTest.equals(binaryValStored));
     
     /** fetch the compressed string field and compare it's content with the original one */
-    String stringFldCompressedTest = new String(docFromReader.get("stringCompressed"));
+    String stringFldCompressedTest = docFromReader.get("stringCompressed");
     assertTrue(stringFldCompressedTest.equals(binaryValCompressed));
     
     /** delete the document from index */
Index: src/test/org/apache/lucene/index/TestIndexModifier.java
===================================================================
--- src/test/org/apache/lucene/index/TestIndexModifier.java	(revision 596082)
+++ src/test/org/apache/lucene/index/TestIndexModifier.java	(working copy)
@@ -127,7 +127,7 @@
   
   private Document getDoc() {
     Document doc = new Document();
-    doc.add(new Field("body", new Integer(docCount).toString(), Field.Store.YES, Field.Index.UN_TOKENIZED));
+    doc.add(new Field("body", Integer.toString(docCount), Field.Store.YES, Field.Index.UN_TOKENIZED));
     doc.add(new Field("all", "x", Field.Store.YES, Field.Index.UN_TOKENIZED));
     docCount++;
     return doc;
@@ -269,7 +269,7 @@
   private Document getDocument() {
     Document doc = new Document();
     synchronized (getClass()) {
-      doc.add(new Field("id", new Integer(id).toString(), Field.Store.YES,
+      doc.add(new Field("id", Integer.toString(id), Field.Store.YES,
           Field.Index.UN_TOKENIZED));
       id++;
     }
@@ -274,9 +274,9 @@
       id++;
     }
     // add random stuff:
-    doc.add(new Field("content", new Integer(random.nextInt(1000)).toString(), Field.Store.YES,
+    doc.add(new Field("content", Integer.toString(random.nextInt(1000)), Field.Store.YES,
         Field.Index.TOKENIZED));
-    doc.add(new Field("content", new Integer(random.nextInt(1000)).toString(), Field.Store.YES,
+    doc.add(new Field("content", Integer.toString(random.nextInt(1000)), Field.Store.YES,
         Field.Index.TOKENIZED));
     doc.add(new Field("all", "x", Field.Store.YES, Field.Index.TOKENIZED));
     return doc;
Index: src/test/org/apache/lucene/index/TestIndexReader.java
===================================================================
--- src/test/org/apache/lucene/index/TestIndexReader.java	(revision 596082)
+++ src/test/org/apache/lucene/index/TestIndexReader.java	(working copy)
@@ -380,8 +380,8 @@
 
         File indexDir = new File(tempDir, "lucenetestnormwriter");
         Directory dir = FSDirectory.getDirectory(indexDir);
-        IndexWriter writer = null;
-        IndexReader reader = null;
+        IndexWriter writer;
+        IndexReader reader;
         Term searchTerm = new Term("content", "aaa");
 
         //  add 1 documents with term : aaa
Index: src/test/org/apache/lucene/search/CheckHits.java
===================================================================
--- src/test/org/apache/lucene/search/CheckHits.java	(revision 596082)
+++ src/test/org/apache/lucene/search/CheckHits.java	(working copy)
@@ -195,13 +195,13 @@
       end = Math.max(len1,len2);
     }
 
-    sb.append("Hits length1=" + len1 + "\tlength2="+len2);
+      sb.append("Hits length1=").append(len1).append("\tlength2=").append(len2);
 
     sb.append("\n");
     for (int i=start; i<end; i++) {
-      sb.append("hit=" + i + ":");
+        sb.append("hit=").append(i).append(":");
       if (i<len1) {
-        sb.append(" doc"+hits1.id(i) + "=" + hits1.score(i));
+          sb.append(" doc").append(hits1.id(i)).append("=").append(hits1.score(i));
       } else {
         sb.append("               ");
       }
@@ -207,7 +207,7 @@
       }
       sb.append(",\t");
       if (i<len2) {
-        sb.append(" doc"+hits2.id(i) + "=" + hits2.score(i));
+          sb.append(" doc").append(hits2.id(i)).append("=").append(hits2.score(i));
       }
       sb.append("\n");
     }
@@ -217,7 +217,7 @@
 
   public static String topdocsString(TopDocs docs, int start, int end) {
     StringBuffer sb = new StringBuffer();
-    sb.append("TopDocs totalHits="+docs.totalHits + " top="+docs.scoreDocs.length+"\n");
+      sb.append("TopDocs totalHits=").append(docs.totalHits).append(" top=").append(docs.scoreDocs.length).append("\n");
     if (end<=0) end=docs.scoreDocs.length;
     else end=Math.min(end,docs.scoreDocs.length);
     for (int i=start; i<end; i++) {
Index: src/test/org/apache/lucene/search/QueryUtils.java
===================================================================
--- src/test/org/apache/lucene/search/QueryUtils.java	(revision 596082)
+++ src/test/org/apache/lucene/search/QueryUtils.java	(working copy)
@@ -108,7 +108,7 @@
       oos.writeObject(w);
       oos.close();
       ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(bos.toByteArray()));
-      Weight w2 = (Weight) ois.readObject();
+      ois.readObject();
       ois.close();
       
       //skip rquals() test for now - most weights don't overide equals() and we won't add this just for the tests.
Index: src/test/org/apache/lucene/search/TestThreadSafe.java
===================================================================
--- src/test/org/apache/lucene/search/TestThreadSafe.java	(revision 596082)
+++ src/test/org/apache/lucene/search/TestThreadSafe.java	(working copy)
@@ -117,7 +117,7 @@
       for (int i=0; i<nFields; i++) {
         int flen = r.nextInt(maxFieldLen);
         StringBuffer sb = new StringBuffer("^ ");
-        while (sb.length() < flen) sb.append(" " + words[r.nextInt(words.length)]);
+        while (sb.length() < flen) sb.append(" ").append(words[r.nextInt(words.length)]);
         sb.append(" $");
         Field.Store store = Field.Store.YES;  // make random later
         Field.Index index = Field.Index.TOKENIZED;  // make random later
