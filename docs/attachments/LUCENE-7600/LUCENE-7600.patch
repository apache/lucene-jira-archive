diff --git a/lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer.java b/lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer.java
index ba2f2aa..3d06b51 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer.java
@@ -198,7 +198,7 @@ public abstract class DocValuesConsumer implements Closeable {
                           }
                         }
 
-                        final DocIDMerger<NumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.needsIndexSort);
+                        final DocIDMerger<NumericDocValuesSub> docIDMerger = DocIDMerger.of(subs, mergeState.needsIndexSort);
 
                         final long finalCost = cost;
                         
@@ -296,7 +296,7 @@ public abstract class DocValuesConsumer implements Closeable {
                          }
                        }
 
-                       final DocIDMerger<BinaryDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.needsIndexSort);
+                       final DocIDMerger<BinaryDocValuesSub> docIDMerger = DocIDMerger.of(subs, mergeState.needsIndexSort);
                        final long finalCost = cost;
                        
                        return new BinaryDocValues() {
@@ -397,7 +397,7 @@ public abstract class DocValuesConsumer implements Closeable {
 
                               final long finalCost = cost;
 
-                              final DocIDMerger<SortedNumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.needsIndexSort);
+                              final DocIDMerger<SortedNumericDocValuesSub> docIDMerger = DocIDMerger.of(subs, mergeState.needsIndexSort);
 
                               return new SortedNumericDocValues() {
 
@@ -555,7 +555,7 @@ public abstract class DocValuesConsumer implements Closeable {
 
                        final long finalCost = cost;
 
-                       final DocIDMerger<SortedDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.needsIndexSort);
+                       final DocIDMerger<SortedDocValuesSub> docIDMerger = DocIDMerger.of(subs, mergeState.needsIndexSort);
                        
                        return new SortedDocValues() {
                          private int docID = -1;
@@ -721,7 +721,7 @@ public abstract class DocValuesConsumer implements Closeable {
                             subs.add(new SortedSetDocValuesSub(mergeState.docMaps[i], values, map.getGlobalOrds(i)));
                           }
             
-                          final DocIDMerger<SortedSetDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.needsIndexSort);
+                          final DocIDMerger<SortedSetDocValuesSub> docIDMerger = DocIDMerger.of(subs, mergeState.needsIndexSort);
                           
                           final long finalCost = cost;
 
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/NormsConsumer.java b/lucene/core/src/java/org/apache/lucene/codecs/NormsConsumer.java
index 7ad7a7c..c21fc01 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/NormsConsumer.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/NormsConsumer.java
@@ -130,7 +130,7 @@ public abstract class NormsConsumer implements Closeable {
                           }
                         }
 
-                        final DocIDMerger<NumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.needsIndexSort);
+                        final DocIDMerger<NumericDocValuesSub> docIDMerger = DocIDMerger.of(subs, mergeState.needsIndexSort);
 
                         return new NumericDocValues() {
                           private int docID = -1;
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/StoredFieldsWriter.java b/lucene/core/src/java/org/apache/lucene/codecs/StoredFieldsWriter.java
index 80a9c49..0540f4f 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/StoredFieldsWriter.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/StoredFieldsWriter.java
@@ -117,7 +117,7 @@ public abstract class StoredFieldsWriter implements Closeable {
       subs.add(new StoredFieldsMergeSub(new MergeVisitor(mergeState, i), mergeState.docMaps[i], storedFieldsReader, mergeState.maxDocs[i]));
     }
 
-    final DocIDMerger<StoredFieldsMergeSub> docIDMerger = new DocIDMerger<>(subs, mergeState.needsIndexSort);
+    final DocIDMerger<StoredFieldsMergeSub> docIDMerger = DocIDMerger.of(subs, mergeState.needsIndexSort);
 
     int docCount = 0;
     while (true) {
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/TermVectorsWriter.java b/lucene/core/src/java/org/apache/lucene/codecs/TermVectorsWriter.java
index c8ad9f6..b84065a 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/TermVectorsWriter.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/TermVectorsWriter.java
@@ -205,7 +205,7 @@ public abstract class TermVectorsWriter implements Closeable {
       subs.add(new TermVectorsMergeSub(mergeState.docMaps[i], reader, mergeState.maxDocs[i]));
     }
 
-    final DocIDMerger<TermVectorsMergeSub> docIDMerger = new DocIDMerger<>(subs, mergeState.needsIndexSort);
+    final DocIDMerger<TermVectorsMergeSub> docIDMerger = DocIDMerger.of(subs, mergeState.needsIndexSort);
 
     int docCount = 0;
     while (true) {
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter.java b/lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter.java
index c775e1c..7ab20af 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter.java
@@ -514,7 +514,7 @@ public final class CompressingStoredFieldsWriter extends StoredFieldsWriter {
       }
 
       final DocIDMerger<CompressingStoredFieldsMergeSub> docIDMerger =
-          new DocIDMerger<>(subs, true);
+          DocIDMerger.of(subs, true);
       while (true) {
         CompressingStoredFieldsMergeSub sub = docIDMerger.next();
         if (sub == null) {
diff --git a/lucene/core/src/java/org/apache/lucene/index/DocIDMerger.java b/lucene/core/src/java/org/apache/lucene/index/DocIDMerger.java
index cd4726b..a9df641 100644
--- a/lucene/core/src/java/org/apache/lucene/index/DocIDMerger.java
+++ b/lucene/core/src/java/org/apache/lucene/index/DocIDMerger.java
@@ -29,17 +29,9 @@ import static org.apache.lucene.search.DocIdSetIterator.NO_MORE_DOCS;
  *  concatenated (unsorted) order, or by a specified index-time sort, skipping
  *  deleted documents and remapping non-deleted documents. */
 
-public class DocIDMerger<T extends DocIDMerger.Sub> {
+public abstract class DocIDMerger<T extends DocIDMerger.Sub> {
 
-  private final List<T> subs;
-
-  // Used when indexSort != null:
-  private final PriorityQueue<T> queue;
-  private boolean first;
-
-  // Used when indexIsSorted
-  private T current;
-  private int nextIndex;
+  protected final List<T> subs;
 
   /** Represents one sub-reader being merged */
   public static abstract class Sub {
@@ -58,10 +50,84 @@ public class DocIDMerger<T extends DocIDMerger.Sub> {
   }
 
   /** Construct this from the provided subs, specifying the maximum sub count */
-  public DocIDMerger(List<T> subs, int maxCount, boolean indexIsSorted) throws IOException {
+  public static <T extends DocIDMerger.Sub> DocIDMerger<T> of(List<T> subs, int maxCount, boolean indexIsSorted) throws IOException {
+    if (indexIsSorted && maxCount > 1) {
+      return new SortedDocIDMerger<>(subs, maxCount);
+    } else {
+      return new SequentialDocIDMerger<>(subs);
+    }
+  }
+
+  /** Construct this from the provided subs */
+  public static <T extends DocIDMerger.Sub> DocIDMerger<T> of(List<T> subs, boolean indexIsSorted) throws IOException {
+    return of(subs, subs.size(), indexIsSorted);
+  }
+  
+  private DocIDMerger(List<T> subs) {
     this.subs = subs;
+  }
 
-    if (indexIsSorted && maxCount > 1) {
+  /** Reuse API, currently only used by postings during merge */
+  public abstract void reset() throws IOException;
+
+  /** Returns null when done */
+  public abstract T next() throws IOException;
+
+  private static class SequentialDocIDMerger<T extends DocIDMerger.Sub> extends DocIDMerger<T> {
+
+    private T current;
+    private int nextIndex;
+
+    private SequentialDocIDMerger(List<T> subs) throws IOException {
+      super(subs);
+      reset();
+    }
+
+    @Override
+    public void reset() throws IOException {
+      if (subs.size() > 0) {
+        current = subs.get(0);
+        nextIndex = 1;
+      } else {
+        current = null;
+        nextIndex = 0;
+      }
+    }
+
+    @Override
+    public T next() throws IOException {
+      if (current == null) {
+        // NOTE: it's annoying that caller is allowed to call us again even after we returned null before
+        return null;
+      }
+      while (true) {
+        int docID = current.nextDoc();
+        if (docID == NO_MORE_DOCS) {
+          if (nextIndex == subs.size()) {
+            current = null;
+            return null;
+          }
+          current = subs.get(nextIndex);
+          nextIndex++;
+          continue;
+        }
+
+        int mappedDocID = current.docMap.get(docID);
+        if (mappedDocID != -1) {
+          current.mappedDocID = mappedDocID;
+          return current;
+        }
+      }
+    }
+
+  }
+
+  private static class SortedDocIDMerger<T extends DocIDMerger.Sub> extends DocIDMerger<T> {
+
+    private final PriorityQueue<T> queue;
+
+    private SortedDocIDMerger(List<T> subs, int maxCount) throws IOException {
+      super(subs);
       queue = new PriorityQueue<T>(maxCount) {
         @Override
         protected boolean lessThan(Sub a, Sub b) {
@@ -69,112 +135,71 @@ public class DocIDMerger<T extends DocIDMerger.Sub> {
           return a.mappedDocID < b.mappedDocID;
         }
       };
-    } else {
-      // We simply concatentate
-      queue = null;
+      reset();
     }
 
-    reset();
-  }
-
-  /** Construct this from the provided subs */
-  public DocIDMerger(List<T> subs, boolean indexIsSorted) throws IOException {
-    this(subs, subs.size(), indexIsSorted);
-  }
-
-  /** Reuse API, currently only used by postings during merge */
-  public void reset() throws IOException {
-    if (queue != null) {
+    @Override
+    public void reset() throws IOException {
       // caller may not have fully consumed the queue:
       queue.clear();
+      boolean first = true;
       for(T sub : subs) {
-        while (true) {
-          int docID = sub.nextDoc();
-          if (docID == NO_MORE_DOCS) {
-            // all docs in this sub were deleted; do not add it to the queue!
-            break;
+        if (first) {
+          // by setting mappedDocID = -1, this entry is guaranteed to be the top of the queue
+          // so the first call to next() will advance it
+          sub.mappedDocID = -1;
+          first = false;
+        } else {
+          int mappedDocID;
+          while (true) {
+            int docID = sub.nextDoc();
+            if (docID == NO_MORE_DOCS) {
+              mappedDocID = NO_MORE_DOCS;
+              break;
+            }
+            mappedDocID = sub.docMap.get(docID);
+            if (mappedDocID != -1) {
+              break;
+            }
           }
-
-          int mappedDocID = sub.docMap.get(docID);
-          if (mappedDocID == -1) {
-            // doc was deleted
+          if (mappedDocID == NO_MORE_DOCS) {
+            // all docs in this sub were deleted; do not add it to the queue!
             continue;
-          } else {
-            sub.mappedDocID = mappedDocID;
-            queue.add(sub);
-            break;
           }
+          sub.mappedDocID = mappedDocID;
         }
+        queue.add(sub);
       }
-      first = true;
-    } else if (subs.size() > 0) {
-      current = subs.get(0);
-      nextIndex = 1;
-    } else {
-      current = null;
-      nextIndex = 0;
     }
-  }
 
-  /** Returns null when done */
-  public T next() throws IOException {
-    // Loop until we find a non-deleted document
-    if (queue != null) {
+    @Override
+    public T next() throws IOException {
       T top = queue.top();
       if (top == null) {
         // NOTE: it's annoying that caller is allowed to call us again even after we returned null before
         return null;
       }
 
-      if (first == false) {
-        while (true) {
-          int docID = top.nextDoc();
-          if (docID == NO_MORE_DOCS) {
-            queue.pop();
-            top = queue.top();
-            break;
-          }
-          int mappedDocID = top.docMap.get(docID);
-          if (mappedDocID == -1) {
-            // doc was deleted
-            continue;
-          } else {
-            top.mappedDocID = mappedDocID;
-            top = queue.updateTop();
-            break;
-          }
-        }
-      }
-
-      first = false;
-
-      return top;
-
-    } else {
       while (true) {
-        if (current == null) {
-          // NOTE: it's annoying that caller is allowed to call us again even after we returned null before
-          return null;
-        }
-        int docID = current.nextDoc();
+        int docID = top.nextDoc();
         if (docID == NO_MORE_DOCS) {
-          if (nextIndex == subs.size()) {
-            current = null;
-            return null;
-          }
-          current = subs.get(nextIndex);
-          nextIndex++;
-          continue;
+          queue.pop();
+          top = queue.top();
+          break;
         }
-        int mappedDocID = current.docMap.get(docID);
+        int mappedDocID = top.docMap.get(docID);
         if (mappedDocID == -1) {
-          // doc is deleted
+          // doc was deleted
           continue;
+        } else {
+          top.mappedDocID = mappedDocID;
+          top = queue.updateTop();
+          break;
         }
-
-        current.mappedDocID = mappedDocID;
-        return current;
       }
+
+      return top;
     }
   }
+
 }
diff --git a/lucene/core/src/java/org/apache/lucene/index/MappingMultiPostingsEnum.java b/lucene/core/src/java/org/apache/lucene/index/MappingMultiPostingsEnum.java
index d93c771..6672d64 100644
--- a/lucene/core/src/java/org/apache/lucene/index/MappingMultiPostingsEnum.java
+++ b/lucene/core/src/java/org/apache/lucene/index/MappingMultiPostingsEnum.java
@@ -62,7 +62,7 @@ final class MappingMultiPostingsEnum extends PostingsEnum {
     for(int i=0;i<allSubs.length;i++) {
       allSubs[i] = new MappingPostingsSub(mergeState.docMaps[i]);
     }
-    this.docIDMerger = new DocIDMerger<MappingPostingsSub>(subs, allSubs.length, mergeState.needsIndexSort);
+    this.docIDMerger = DocIDMerger.of(subs, allSubs.length, mergeState.needsIndexSort);
   }
 
   MappingMultiPostingsEnum reset(MultiPostingsEnum postingsEnum) throws IOException {
diff --git a/lucene/core/src/test/org/apache/lucene/index/TestDocIDMerger.java b/lucene/core/src/test/org/apache/lucene/index/TestDocIDMerger.java
index d957646..5e19bbb 100644
--- a/lucene/core/src/test/org/apache/lucene/index/TestDocIDMerger.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestDocIDMerger.java
@@ -70,7 +70,7 @@ public class TestDocIDMerger extends LuceneTestCase {
       valueStart += maxDoc;
     }
 
-    DocIDMerger<TestSubUnsorted> merger = new DocIDMerger<>(subs, false);
+    DocIDMerger<TestSubUnsorted> merger = DocIDMerger.of(subs, false);
 
     int count = 0;
     while (true) {
@@ -175,7 +175,7 @@ public class TestDocIDMerger extends LuceneTestCase {
         }, docMap.length, i));
     }
 
-    DocIDMerger<TestSubSorted> merger = new DocIDMerger<>(subs, true);
+    DocIDMerger<TestSubSorted> merger = DocIDMerger.of(subs, true);
 
     int count = 0;
     while (true) {
