diff --git a/lucene/core/src/java/org/apache/lucene/search/PointInSetQuery.java b/lucene/core/src/java/org/apache/lucene/search/PointInSetQuery.java
index b7661463350..a5c196a8354 100644
--- a/lucene/core/src/java/org/apache/lucene/search/PointInSetQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/PointInSetQuery.java
@@ -31,6 +31,8 @@ import org.apache.lucene.index.PointValues.IntersectVisitor;
 import org.apache.lucene.index.PointValues.Relation;
 import org.apache.lucene.index.PrefixCodedTerms;
 import org.apache.lucene.index.PrefixCodedTerms.TermIterator;
+import org.apache.lucene.util.BitDocIdSet;
+import org.apache.lucene.util.BitSetIterator;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.BytesRefBuilder;
 import org.apache.lucene.util.BytesRefIterator;
@@ -149,7 +151,25 @@ public abstract class PointInSetQuery extends Query {
           }
         }
 
-        return new ConstantScoreScorer(this, score(), result.build().iterator());
+        // verify result set
+        DocIdSet resultSet = result.build();
+        if (resultSet instanceof BitDocIdSet) {
+          // BitDocIdSet empty
+          BitSetIterator iterator = (BitSetIterator) resultSet.iterator();
+          int previousDoc = iterator.docID();
+          if (iterator.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {
+            return null;
+          } else {
+            iterator.setDocId(previousDoc);
+          }
+        } else {
+          // IntArrayDocIdSet empty
+          if (resultSet.iterator().cost() == 0) {
+            return null;
+          }
+        }
+
+        return new ConstantScoreScorer(this, score(), resultSet.iterator());
       }
 
       @Override
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery.java b/lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery.java
index 7f373710809..0b3248f204d 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery.java
@@ -34,6 +34,7 @@ import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.MockAnalyzer;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
+import org.apache.lucene.document.LongPoint;
 import org.apache.lucene.document.TextField;
 import org.apache.lucene.index.DirectoryReader;
 import org.apache.lucene.index.IndexReader;
@@ -222,6 +223,42 @@ public class TestBooleanQuery extends LuceneTestCase {
     dir.close();
   }
 
+  public void testNullOrSubScorerLongPoint() throws Throwable {
+    Directory dir = newDirectory();
+    RandomIndexWriter w = new RandomIndexWriter(random(), dir);
+
+    long[] nums = new long[]{1, 2, 4, 5};
+    for (long num : nums) {
+      Document doc = new Document();
+      doc.add(newTextField("field", "a b c d", Field.Store.NO));
+      doc.add(new LongPoint("field_num", num));
+      w.addDocument(doc);
+    }
+
+    IndexReader r = w.getReader();
+    IndexSearcher s = newSearcher(r);
+
+    // terminate early
+    BooleanQuery.Builder q = new BooleanQuery.Builder();
+    q.add(LongPoint.newSetQuery("field_num", 3), Occur.FILTER);
+    q.add(new TermQuery(new Term("field", "a")), Occur.FILTER);
+    assertEquals(0, s.search(q.build(), 10).totalHits);
+    Weight weight = q.build().createWeight(s, true, 1);
+    assertNull(weight.scorer(s.leafContexts.get(0)));
+
+    // no termination
+    q = new BooleanQuery.Builder();
+    q.add(LongPoint.newSetQuery("field_num", 2), Occur.FILTER);
+    q.add(new TermQuery(new Term("field", "a")), Occur.FILTER);
+    assertEquals(1, s.search(q.build(), 10).totalHits);
+    weight = q.build().createWeight(s, true, 1);
+    assertNotNull(weight.scorer(s.leafContexts.get(0)));
+
+    r.close();
+    w.close();
+    dir.close();
+  }
+
   public void testDeMorgan() throws Exception {
     Directory dir1 = newDirectory();
     RandomIndexWriter iw1 = new RandomIndexWriter(random(), dir1);
