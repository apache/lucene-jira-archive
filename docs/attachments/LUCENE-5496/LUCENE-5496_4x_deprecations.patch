Index: solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase.java
===================================================================
--- solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase.java	(revision 1574978)
+++ solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase.java	(working copy)
@@ -86,6 +86,7 @@
   String defaultField;
   int phraseSlop = 0;     // default slop for phrase queries
   float fuzzyMinSim = FuzzyQuery.defaultMinSimilarity;
+  int fuzzyMaxEdits = FuzzyQuery.defaultMaxEdits;
   int fuzzyPrefixLength = FuzzyQuery.defaultPrefixLength;
 
   boolean autoGeneratePhraseQueries = false;
@@ -205,9 +206,26 @@
     this.autoGeneratePhraseQueries = value;
   }
 
+  /**
+   * Get the maximum edits for fuzzy queries.
+   */
+  public int getFuzzyMaxEdits() {
+    return fuzzyMaxEdits;
+  }
+
+  /**
+   * Set the maximum edits for fuzzy queries.
+   * Default is {@link FuzzyQuery#defaultMaxEdits}.
+   */
+  public void setFuzzyMaxEdits(int fuzzyMaxEdits) {
+    this.fuzzyMaxEdits = fuzzyMaxEdits;
+  }
+  
    /**
    * Get the minimal similarity for fuzzy queries.
+   * @deprecated use {@link #getFuzzyMaxEdits()}
    */
+  @Deprecated
   public float getFuzzyMinSim() {
       return fuzzyMinSim;
   }
@@ -215,7 +233,9 @@
   /**
    * Set the minimum similarity for fuzzy queries.
    * Default is 2f.
+   * @deprecated use {@link #setFuzzyMaxEdits(int)}
    */
+  @Deprecated
   public void setFuzzyMinSim(float fuzzyMinSim) {
       this.fuzzyMinSim = fuzzyMinSim;
   }
@@ -437,16 +457,33 @@
 
   /**
    * Builds a new FuzzyQuery instance
+   * @deprecated use {@link #newFuzzyQuery(Term, int, int)}
    * @param term Term
    * @param minimumSimilarity minimum similarity
    * @param prefixLength prefix length
    * @return new FuzzyQuery Instance
    */
+  @Deprecated
   protected Query newFuzzyQuery(Term term, float minimumSimilarity, int prefixLength) {
     // FuzzyQuery doesn't yet allow constant score rewrite
     String text = term.text();
     int numEdits = FuzzyQuery.floatToEdits(minimumSimilarity, 
         text.codePointCount(0, text.length()));
+    return newFuzzyQuery(term,numEdits,prefixLength);
+  }
+
+  /**
+   * Builds a new FuzzyQuery instance
+   * @param term Term 
+   * @param numEdits num edits allowed
+   * @param prefixLength prefix length
+   * @return new FuzzyQuery Instance
+   */
+  protected Query newFuzzyQuery(Term term, int numEdits, int prefixLength) {
+    // FuzzyQuery doesn't yet allow constant score rewrite
+    if (numEdits > getFuzzyMaxEdits()){
+      numEdits = getFuzzyMaxEdits();
+    }
     return new FuzzyQuery(term,numEdits,prefixLength);
   }
 
@@ -820,12 +857,20 @@
   }
 
   // called from parser
+  @Deprecated
   protected Query getFuzzyQuery(String field, String termStr, float minSimilarity) throws SyntaxError {
     termStr = analyzeIfMultitermTermText(field, termStr, schema.getFieldType(field));
     Term t = new Term(field, termStr);
     return newFuzzyQuery(t, minSimilarity, getFuzzyPrefixLength());
   }
 
+  
+  protected Query getFuzzyQuery(String field, String termStr, int maxEdits) throws SyntaxError {
+    termStr = analyzeIfMultitermTermText(field, termStr, schema.getFieldType(field));
+    Term t = new Term(field, termStr);
+    return newFuzzyQuery(t, maxEdits, getFuzzyPrefixLength());
+  }
+
   // called from parser
   protected Query getLocalParams(String qfield, String lparams) throws SyntaxError {
     QParser nested = parser.subQuery(lparams, null);
Index: lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase.java
===================================================================
--- lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase.java	(revision 1574978)
+++ lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase.java	(working copy)
@@ -69,6 +69,7 @@
   String field;
   int phraseSlop = 0;
   float fuzzyMinSim = FuzzyQuery.defaultMinSimilarity;
+  int fuzzyMaxEdits = FuzzyQuery.defaultMaxEdits;
   int fuzzyPrefixLength = FuzzyQuery.defaultPrefixLength;
   Locale locale = Locale.getDefault();
   TimeZone timeZone = TimeZone.getDefault();
@@ -165,10 +166,29 @@
     this.autoGeneratePhraseQueries = value;
   }
 
+  /**
+   * Get the maximum edits for fuzzy queries.
+   */
+  @Override
+  public int getFuzzyMaxEdits() {
+    return fuzzyMaxEdits;
+  }
+
+  /**
+   * Set the maximum edits for fuzzy queries.
+   * Default is {@link FuzzyQuery#defaultMaxEdits}.
+   */
+  @Override
+  public void setFuzzyMaxEdits(int fuzzyMaxEdits) {
+    this.fuzzyMaxEdits = fuzzyMaxEdits;
+  }
+
    /**
    * Get the minimal similarity for fuzzy queries.
+   * @deprecated use {@link #getFuzzyMaxEdits()}
    */
   @Override
+  @Deprecated
   public float getFuzzyMinSim() {
       return fuzzyMinSim;
   }
@@ -176,8 +196,10 @@
   /**
    * Set the minimum similarity for fuzzy queries.
    * Default is 2f.
+   * @deprecated use {@link #setFuzzyMaxEdits(int)}
    */
   @Override
+  @Deprecated
   public void setFuzzyMinSim(float fuzzyMinSim) {
       this.fuzzyMinSim = fuzzyMinSim;
   }
@@ -571,15 +593,32 @@
    * @param minimumSimilarity minimum similarity
    * @param prefixLength prefix length
    * @return new FuzzyQuery Instance
+   * @deprecated use {@link #newFuzzyQuery(Term, int, int)}
    */
+  @Deprecated
   protected Query newFuzzyQuery(Term term, float minimumSimilarity, int prefixLength) {
     // FuzzyQuery doesn't yet allow constant score rewrite
     String text = term.text();
     int numEdits = FuzzyQuery.floatToEdits(minimumSimilarity, 
         text.codePointCount(0, text.length()));
+    //FuzzyQuery.floatToEdits has a max of 2
+    //need to make sure that local fuzzyMaxEdits is heeded
+    numEdits = Math.min(numEdits, getFuzzyMaxEdits());
+
     return new FuzzyQuery(term,numEdits,prefixLength);
   }
 
+  /**
+   * Builds a new FuzzyQuery instance
+   * @param term Term 
+   * @param numEdits num edits allowed
+   * @param prefixLength prefix length
+   * @return new FuzzyQuery Instance
+   */
+  protected Query newFuzzyQuery(Term term, int numEdits, int prefixLength) {
+    // FuzzyQuery doesn't yet allow constant score rewrite
+    return new FuzzyQuery(term,numEdits,prefixLength);
+  }
   // TODO: Should this be protected instead?
   private BytesRef analyzeMultitermTerm(String field, String part) {
     return analyzeMultitermTerm(field, part, getAnalyzer());
@@ -812,7 +851,9 @@
    *
    * @return Resulting {@link org.apache.lucene.search.Query} built for the term
    * @exception org.apache.lucene.queryparser.classic.ParseException throw in overridden method to disallow
+   * @deprecated use {@link #getFuzzyQuery(String, String, int)}
    */
+  @Deprecated
   protected Query getFuzzyQuery(String field, String termStr, float minSimilarity) throws ParseException
   {
     if (lowercaseExpandedTerms) {
@@ -822,6 +863,25 @@
     return newFuzzyQuery(t, minSimilarity, fuzzyPrefixLength);
   }
 
+  /**
+   * Factory method for generating a query (similar to
+   * {@link #getWildcardQuery}). Called when parser parses
+   * an input term token that has the fuzzy suffix (~) appended.
+   *
+   * @param field Name of the field query will use.
+   * @param termStr Term token to use for building term for the query
+   * @param numEdits Number of edits allowed, default is 2.
+   * @return Resulting {@link org.apache.lucene.search.Query} built for the term
+   * @exception org.apache.lucene.queryparser.classic.ParseException throw in overridden method to disallow
+   */
+  protected Query getFuzzyQuery(String field, String termStr, int numEdits) throws ParseException
+  {
+    if (lowercaseExpandedTerms) {
+      termStr = termStr.toLowerCase(locale);
+    }
+    Term t = new Term(field, termStr);
+    return newFuzzyQuery(t, numEdits, fuzzyPrefixLength);
+  }
 
    // extracted from the .jj grammar
   Query handleBareTokenQuery(String qfield, Token term, Token fuzzySlop, boolean prefix, boolean wildcard, boolean fuzzy, boolean regexp) throws ParseException {
Index: lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/CommonQueryParserConfiguration.java
===================================================================
--- lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/CommonQueryParserConfiguration.java	(revision 1574978)
+++ lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/CommonQueryParserConfiguration.java	(working copy)
@@ -126,10 +126,17 @@
   
   /**
    * Get the minimal similarity for fuzzy queries.
+   * @deprecated use {@link #getFuzzyMaxEdits()}
    */
+  @Deprecated
   public float getFuzzyMinSim();
   
   /**
+   * Get the maximum edits for fuzzy queries.
+   */
+  public int getFuzzyMaxEdits();
+
+  /**
    * Get the prefix length for fuzzy queries.
    * 
    * @return Returns the fuzzyPrefixLength.
@@ -144,10 +151,18 @@
   /**
    * Set the minimum similarity for fuzzy queries. Default is defined on
    * {@link FuzzyQuery#defaultMinSimilarity}.
+   * @deprecated use {@link #setFuzzyMaxEdits(int)}
    */
+  @Deprecated
   public void setFuzzyMinSim(float fuzzyMinSim);
   
   /**
+   * Set the minimum similarity for fuzzy queries. Default is defined on
+   * {@link FuzzyQuery#defaultMaxEdits}.
+   */
+  public void setFuzzyMaxEdits(int fuzzyMaxEdits);
+
+  /**
    * Sets the default {@link Resolution} used for certain field when
    * no {@link Resolution} is defined for this field.
    * 
@@ -157,4 +172,4 @@
   
   
   
-}
\ No newline at end of file
+}
Index: lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/StandardQueryParser.java
===================================================================
--- lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/StandardQueryParser.java	(revision 1574978)
+++ lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/StandardQueryParser.java	(working copy)
@@ -412,8 +412,10 @@
   
   /**
    * Get the minimal similarity for fuzzy queries.
+   * @deprecated use {@link #getFuzzyMaxEdits()}
    */
   @Override
+  @Deprecated
   public float getFuzzyMinSim() {
     FuzzyConfig fuzzyConfig = getQueryConfigHandler().get(ConfigurationKeys.FUZZY_CONFIG);
     
@@ -458,8 +460,10 @@
   /**
    * Set the minimum similarity for fuzzy queries. Default is defined on
    * {@link FuzzyQuery#defaultMinSimilarity}.
+   * @deprecated use {@link #setFuzzyMaxEdits(int)}
    */
   @Override
+  @Deprecated
   public void setFuzzyMinSim(float fuzzyMinSim) {
     QueryConfigHandler config = getQueryConfigHandler();
     FuzzyConfig fuzzyConfig = config.get(ConfigurationKeys.FUZZY_CONFIG);
@@ -540,5 +544,36 @@
   public void setDateResolutionMap(Map<CharSequence, DateTools.Resolution> dateRes) {
     getQueryConfigHandler().set(ConfigurationKeys.FIELD_DATE_RESOLUTION_MAP, dateRes);
   }
-  
+
+  /**
+   * 
+   * @return maximum number of edits for a fuzzy query
+   */
+  @Override
+  public int getFuzzyMaxEdits() {
+    FuzzyConfig fuzzyConfig = getQueryConfigHandler().get(ConfigurationKeys.FUZZY_CONFIG);
+    
+    if (fuzzyConfig == null) {
+      return FuzzyQuery.defaultMaxEdits;
+    } else {
+      return fuzzyConfig.getMaxEdits();
+    }
+  }
+
+  /**
+   * 
+   * @param fuzzyMaxEdits set number of max edits for fuzzy queries
+   */
+  @Override
+  public void setFuzzyMaxEdits(int fuzzyMaxEdits) {
+    QueryConfigHandler config = getQueryConfigHandler();
+    FuzzyConfig fuzzyConfig = config.get(ConfigurationKeys.FUZZY_CONFIG);
+    
+    if (fuzzyConfig == null) {
+      fuzzyConfig = new FuzzyConfig();
+      config.set(ConfigurationKeys.FUZZY_CONFIG, fuzzyConfig);
+    }
+
+    fuzzyConfig.setMaxEdits(fuzzyMaxEdits);
+  }
 }
Index: lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/config/FuzzyConfig.java
===================================================================
--- lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/config/FuzzyConfig.java	(revision 1574978)
+++ lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/config/FuzzyConfig.java	(working copy)
@@ -27,6 +27,8 @@
   private int prefixLength = FuzzyQuery.defaultPrefixLength;
 
   private float minSimilarity = FuzzyQuery.defaultMinSimilarity;
+
+  private int maxEdits = FuzzyQuery.defaultMaxEdits;
   
   public FuzzyConfig() {}
 
@@ -38,12 +40,32 @@
     this.prefixLength = prefixLength;
   }
 
+  /**
+   * 
+   * @return minimum similarity
+   * @deprecated use {@link #getMaxEdits()}
+   */
+  @Deprecated
   public float getMinSimilarity() {
     return minSimilarity;
   }
 
+  /**
+   * 
+   * @param minSimilarity minimum similarity
+   * @deprecated use {@link #setMaxEdits(int)}
+   */
+  @Deprecated
   public void setMinSimilarity(float minSimilarity) {
     this.minSimilarity = minSimilarity;
   }
+
+  public int getMaxEdits() {
+    return maxEdits;
+  }
   
+  public void setMaxEdits(int maxEdits) {
+    this.maxEdits = maxEdits;
+  }
+  
 }
Index: lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/FuzzyQueryNodeBuilder.java
===================================================================
--- lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/FuzzyQueryNodeBuilder.java	(revision 1574978)
+++ lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/FuzzyQueryNodeBuilder.java	(working copy)
@@ -39,6 +39,8 @@
     
     int numEdits = FuzzyQuery.floatToEdits(fuzzyNode.getSimilarity(), 
         text.codePointCount(0, text.length()));
+
+    numEdits = Math.min(numEdits, fuzzyNode.getMaxEdits());
     
     return new FuzzyQuery(new Term(fuzzyNode.getFieldAsString(), fuzzyNode
         .getTextAsString()), numEdits, fuzzyNode
Index: lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/FuzzyQueryNode.java
===================================================================
--- lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/FuzzyQueryNode.java	(revision 1574978)
+++ lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/FuzzyQueryNode.java	(working copy)
@@ -18,6 +18,7 @@
  */
 
 import org.apache.lucene.queryparser.flexible.core.parser.EscapeQuerySyntax;
+import org.apache.lucene.search.FuzzyQuery;
 
 /**
  * A {@link FuzzyQueryNode} represents a element that contains
@@ -26,17 +27,12 @@
 public class FuzzyQueryNode extends FieldQueryNode {
 
   private float similarity;
-
+  private int maxEdits = FuzzyQuery.defaultMaxEdits;
   private int prefixLength;
 
   /**
+   * @deprecated use {@link #FuzzyQueryNode(CharSequence, CharSequence, int, int, int)}
    * @param field
-   *          Name of the field query will use.
-   * @param termStr
-   *          Term token to use for building term for the query
-   */
-  /**
-   * @param field
    *          - Field name
    * @param term
    *          - Value
@@ -47,6 +43,7 @@
    * @param end
    *          - position in the query string
    */
+  @Deprecated
   public FuzzyQueryNode(CharSequence field, CharSequence term,
       float minSimilarity, int begin, int end) {
     super(field, term, begin, end);
@@ -54,6 +51,26 @@
     setLeaf(true);
   }
 
+  /**
+   * @param field
+   *          - Field name
+   * @param term
+   *          - Value
+   * @param maxEdits
+   *          - maximum number of edits
+   * @param begin
+   *          - position in the query string
+   * @param end
+   *          - position in the query string
+   */
+  public FuzzyQueryNode(CharSequence field, CharSequence term,
+      int maxEdits, int begin, int end) {
+    super(field, term, begin, end);
+    this.maxEdits = maxEdits;
+    this.similarity = maxEdits;
+    setLeaf(true);
+  }
+
   public void setPrefixLength(int prefixLength) {
     this.prefixLength = prefixLength;
   }
@@ -65,18 +82,23 @@
   @Override
   public CharSequence toQueryString(EscapeQuerySyntax escaper) {
     if (isDefaultField(this.field)) {
-      return getTermEscaped(escaper) + "~" + this.similarity;
+      return getTermEscaped(escaper) + "~" + this.maxEdits;
     } else {
-      return this.field + ":" + getTermEscaped(escaper) + "~" + this.similarity;
+      return this.field + ":" + getTermEscaped(escaper) + "~" + this.maxEdits;
     }
   }
 
   @Override
   public String toString() {
-    return "<fuzzy field='" + this.field + "' similarity='" + this.similarity
+    return "<fuzzy field='" + this.field + "' similarity='" + this.maxEdits
         + "' term='" + this.text + "'/>";
   }
 
+  /**
+   * @deprecated use {@link #setMaxEdits(int)}
+   * @param similarity
+   */
+  @Deprecated
   public void setSimilarity(float similarity) {
     this.similarity = similarity;
   }
@@ -91,9 +113,26 @@
   }
 
   /**
+   * @deprecated use {@link #getMaxEdits()}
    * @return the similarity
    */
   public float getSimilarity() {
     return this.similarity;
   }
+
+  /**
+   * 
+   * @return maxEdits
+   */
+  public int getMaxEdits() {
+    return maxEdits;
+  }
+  
+  /**
+   * 
+   * @param maxEdits max number of edits
+   */
+  public void setMaxEdits(int maxEdits) {
+    this.maxEdits = maxEdits;
+  }
 }
