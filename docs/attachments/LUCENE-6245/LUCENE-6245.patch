Index: lucene/core/src/java/org/apache/lucene/search/DocTermOrdsRewriteMethod.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/DocTermOrdsRewriteMethod.java	(revision 1659866)
+++ lucene/core/src/java/org/apache/lucene/search/DocTermOrdsRewriteMethod.java	(working copy)
@@ -55,9 +55,9 @@
     }
     
     @Override
-    public String toString() {
+    public String toString(String field) {
       // query.toString should be ok for the filter, too, if the query boost is 1.0f
-      return query.toString();
+      return query.toString(field);
     }
     
     @Override
Index: lucene/core/src/java/org/apache/lucene/search/DocValuesRewriteMethod.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/DocValuesRewriteMethod.java	(revision 1659866)
+++ lucene/core/src/java/org/apache/lucene/search/DocValuesRewriteMethod.java	(working copy)
@@ -55,9 +55,9 @@
     }
     
     @Override
-    public String toString() {
+    public String toString(String field) {
       // query.toString should be ok for the filter, too, if the query boost is 1.0f
-      return query.toString();
+      return query.toString(field);
     }
     
     @Override
Index: lucene/core/src/java/org/apache/lucene/search/Filter.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/Filter.java	(revision 1659866)
+++ lucene/core/src/java/org/apache/lucene/search/Filter.java	(working copy)
@@ -76,11 +76,6 @@
   }
 
   @Override
-  public String toString(String field) {
-    return getClass().getSimpleName();
-  }
-
-  @Override
   public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
     return new Weight(this) {
 
Index: lucene/core/src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter.java	(revision 1659866)
+++ lucene/core/src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter.java	(working copy)
@@ -52,9 +52,9 @@
   }
 
   @Override
-  public String toString() {
+  public String toString(String field) {
     // query.toString should be ok for the filter, too, if the query boost is 1.0f
-    return query.toString();
+    return query.toString(field);
   }
 
   @Override
Index: lucene/core/src/java/org/apache/lucene/search/PrefixFilter.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/PrefixFilter.java	(revision 1659866)
+++ lucene/core/src/java/org/apache/lucene/search/PrefixFilter.java	(working copy)
@@ -31,9 +31,9 @@
 
   public Term getPrefix() { return query.getPrefix(); }
 
-  /** Prints a user-readable version of this query. */
+  /** Prints a user-readable version of this filter. */
   @Override
-  public String toString () {
+  public String toString(String field) {
     StringBuilder buffer = new StringBuilder();
     buffer.append("PrefixFilter(");
     buffer.append(getPrefix().toString());
Index: lucene/core/src/java/org/apache/lucene/search/Query.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/Query.java	(revision 1659866)
+++ lucene/core/src/java/org/apache/lucene/search/Query.java	(working copy)
@@ -65,7 +65,7 @@
 
   /** Prints a query to a string. */
   @Override
-  public String toString() {
+  public final String toString() {
     return toString("");
   }
 
Index: lucene/core/src/test/org/apache/lucene/search/JustCompileSearch.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/JustCompileSearch.java	(revision 1659866)
+++ lucene/core/src/test/org/apache/lucene/search/JustCompileSearch.java	(working copy)
@@ -137,6 +137,11 @@
     public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) {
       return null;
     }
+
+    @Override
+    public String toString(String field) {
+      return "JustCompileFilter";
+    }
   }
 
   static final class JustCompileFilteredDocIdSet extends FilteredDocIdSet {
Index: lucene/core/src/test/org/apache/lucene/search/MockFilter.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/MockFilter.java	(revision 1659866)
+++ lucene/core/src/test/org/apache/lucene/search/MockFilter.java	(working copy)
@@ -32,6 +32,11 @@
     return new BitDocIdSet(bits);
   }
 
+  @Override
+  public String toString(String field) {
+    return "MockFilter";
+  }
+
   public void clear() {
     wasCalled = false;
   }
Index: lucene/core/src/test/org/apache/lucene/search/SingleDocTestFilter.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/SingleDocTestFilter.java	(revision 1659866)
+++ lucene/core/src/test/org/apache/lucene/search/SingleDocTestFilter.java	(working copy)
@@ -38,4 +38,9 @@
     if (acceptDocs != null && !acceptDocs.get(doc)) bits.clear(doc);
     return new BitDocIdSet(bits);
   }
+
+  @Override
+  public String toString(String field) {
+    return "SingleDocTestFilter(" + doc + ")";
+  }
 }
Index: lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter.java	(revision 1659866)
+++ lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter.java	(working copy)
@@ -181,6 +181,10 @@
       public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) {
         return null;
       }
+      @Override
+      public String toString(String field) {
+        return "nullDocIdSetFilter";
+      }
     };
     CachingWrapperFilter cacher = new CachingWrapperFilter(filter, MAYBE_CACHE_POLICY);
 
@@ -214,6 +218,10 @@
           }
         };
       }
+      @Override
+      public String toString(String field) {
+        return "nullDocIdSetIteratorFilter";
+      }
     };
     CachingWrapperFilter cacher = new CachingWrapperFilter(filter, FilterCachingPolicy.ALWAYS_CACHE);
 
@@ -267,6 +275,10 @@
       public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) {
         return new BitDocIdSet(new FixedBitSet(context.reader().maxDoc()));
       }
+      @Override
+      public String toString(String field) {
+        return "cacheableFilter";
+      }
     }, true);
 
     reader.close();
Index: lucene/core/src/test/org/apache/lucene/search/TestDocIdSet.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestDocIdSet.java	(revision 1659866)
+++ lucene/core/src/test/org/apache/lucene/search/TestDocIdSet.java	(working copy)
@@ -127,6 +127,10 @@
       public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) {
         return null;
       }
+      @Override
+      public String toString(String field) {
+        return "nullDocIdSetFilter";
+      }
     };
     
     Assert.assertEquals(0, searcher.search(new MatchAllDocsQuery(), f, 10).totalHits);
@@ -169,6 +173,10 @@
           }
         };
       }
+      @Override
+      public String toString(String field) {
+        return "nullDocIdSetFilter";
+      }
     };
     
     Assert.assertEquals(0, searcher.search(new MatchAllDocsQuery(), f, 10).totalHits);
Index: lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery.java	(revision 1659866)
+++ lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery.java	(working copy)
@@ -113,6 +113,10 @@
         if (acceptDocs.get(3)) bitset.set(3);
         return new BitDocIdSet(bitset);
       }
+      @Override
+      public String toString(String field) {
+        return "staticFilterB";
+      }
     };
   }
 
@@ -194,6 +198,10 @@
         bitset.set(0, Math.min(5, bitset.length()));
         return new BitDocIdSet(bitset);
       }
+      @Override
+      public String toString(String field) {
+        return "staticFilterA";
+      }
     };
   }
   
@@ -480,6 +488,10 @@
               
             };
           }
+          @Override
+          public String toString(String field) {
+            return "filterField0";
+          }
         }, FilteredQuery.QUERY_FIRST_FILTER_STRATEGY);
     
     TopDocs search = searcher.search(query, 10);
@@ -559,8 +571,14 @@
             };
           }
           
+          
         };
+        
       }
+      @Override
+      public String toString(String field) {
+        return "filterField0";
+      }
         }, queryFirst ? FilteredQuery.LEAP_FROG_QUERY_FIRST_STRATEGY : random()
             .nextBoolean() ? FilteredQuery.RANDOM_ACCESS_FILTER_STRATEGY
             : FilteredQuery.LEAP_FROG_FILTER_FIRST_STRATEGY);  // if filterFirst, we can use random here since bits are null
Index: lucene/core/src/test/org/apache/lucene/search/TestFilteredSearch.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestFilteredSearch.java	(revision 1659866)
+++ lucene/core/src/test/org/apache/lucene/search/TestFilteredSearch.java	(working copy)
@@ -101,6 +101,11 @@
       }
       return set.cardinality() == 0 ? null : new BitDocIdSet(set);
     }
+
+    @Override
+    public String toString(String field) {
+      return "SimpleDocIdSetFilter";
+    }
   }
 
 }
Index: lucene/core/src/test/org/apache/lucene/search/TestLRUFilterCache.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestLRUFilterCache.java	(revision 1659866)
+++ lucene/core/src/test/org/apache/lucene/search/TestLRUFilterCache.java	(working copy)
@@ -350,6 +350,11 @@
       return null;
     }
 
+    @Override
+    public String toString(String field) {
+      return "DummyFilter";
+    }
+
   }
 
   // Test what happens when the cache contains only filters and doc id sets
Index: lucene/core/src/test/org/apache/lucene/search/TestScorerPerf.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestScorerPerf.java	(revision 1659866)
+++ lucene/core/src/test/org/apache/lucene/search/TestScorerPerf.java	(working copy)
@@ -149,6 +149,10 @@
         assertNull("acceptDocs should be null, as we have an index without deletions", acceptDocs);
         return new BitDocIdSet(rnd);
       }
+      @Override
+      public String toString(String field) {
+        return "randomBitSetFilter";
+      }
     });
     bq.add(q, BooleanClause.Occur.MUST);
     if (validate) {
Index: lucene/core/src/test/org/apache/lucene/search/TestSortRandom.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestSortRandom.java	(revision 1659866)
+++ lucene/core/src/test/org/apache/lucene/search/TestSortRandom.java	(working copy)
@@ -263,5 +263,10 @@
 
       return new BitDocIdSet(bits);
     }
+
+    @Override
+    public String toString(String field) {
+      return "RandomFilter(density=" + density + ")";
+    }
   }
 }
Index: lucene/facet/src/java/org/apache/lucene/facet/range/DoubleRange.java
===================================================================
--- lucene/facet/src/java/org/apache/lucene/facet/range/DoubleRange.java	(revision 1659866)
+++ lucene/facet/src/java/org/apache/lucene/facet/range/DoubleRange.java	(working copy)
@@ -105,7 +105,7 @@
     return new Filter() {
 
       @Override
-      public String toString() {
+      public String toString(String field) {
         return "Filter(" + DoubleRange.this.toString() + ")";
       }
 
Index: lucene/facet/src/java/org/apache/lucene/facet/range/LongRange.java
===================================================================
--- lucene/facet/src/java/org/apache/lucene/facet/range/LongRange.java	(revision 1659866)
+++ lucene/facet/src/java/org/apache/lucene/facet/range/LongRange.java	(working copy)
@@ -97,7 +97,7 @@
     return new Filter() {
 
       @Override
-      public String toString() {
+      public String toString(String field) {
         return "Filter(" + LongRange.this.toString() + ")";
       }
 
Index: lucene/facet/src/test/org/apache/lucene/facet/TestDrillSideways.java
===================================================================
--- lucene/facet/src/test/org/apache/lucene/facet/TestDrillSideways.java	(revision 1659866)
+++ lucene/facet/src/test/org/apache/lucene/facet/TestDrillSideways.java	(working copy)
@@ -660,6 +660,10 @@
               }
               return new BitDocIdSet(bits);
             }
+            @Override
+            public String toString(String field) {
+              return "drillSidewaysTestFilter";
+            }
           };
       } else {
         filter = null;
Index: lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest.java
===================================================================
--- lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest.java	(revision 1659866)
+++ lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest.java	(working copy)
@@ -943,6 +943,10 @@
           throws IOException {
         return null;
       }
+      @Override
+      public String toString(String field) {
+        return "filterToBeFlattened";
+      }
     });
     query.setBoost(boost);
     FieldQuery fq = new FieldQuery( query, true, true );
Index: lucene/join/src/java/org/apache/lucene/search/join/BitDocIdSetCachingWrapperFilter.java
===================================================================
--- lucene/join/src/java/org/apache/lucene/search/join/BitDocIdSetCachingWrapperFilter.java	(revision 1659866)
+++ lucene/join/src/java/org/apache/lucene/search/join/BitDocIdSetCachingWrapperFilter.java	(working copy)
@@ -81,7 +81,7 @@
   }
 
   @Override
-  public String toString() {
+  public String toString(String field) {
     return filter.toString();
   }
 
Index: lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSortRandom.java
===================================================================
--- lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSortRandom.java	(revision 1659866)
+++ lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSortRandom.java	(working copy)
@@ -293,5 +293,10 @@
 
       return new BitDocIdSet(bits);
     }
+
+    @Override
+    public String toString(String field) {
+      return "RandomFilter(density=" + density + ")";
+    }
   }
 }
Index: lucene/queries/src/test/org/apache/lucene/queries/BooleanFilterTest.java
===================================================================
--- lucene/queries/src/test/org/apache/lucene/queries/BooleanFilterTest.java	(revision 1659866)
+++ lucene/queries/src/test/org/apache/lucene/queries/BooleanFilterTest.java	(working copy)
@@ -96,6 +96,10 @@
       public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) {
         return new BitDocIdSet(new FixedBitSet(context.reader().maxDoc()));
       }
+      @Override
+      public String toString(String field) {
+        return "emptyFilter";
+      }
     };
   }
 
@@ -105,6 +109,10 @@
       public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) {
         return null;
       }
+      @Override
+      public String toString(String field) {
+        return "nullDISFilter";
+      }
     };
   }
 
@@ -114,6 +122,10 @@
       public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) {
         return DocIdSet.EMPTY;
       }
+      @Override
+      public String toString(String field) {
+        return "nullDISIFilter";
+      }
     };
   }
 
Index: lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/RewriteQuery.java
===================================================================
--- lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/RewriteQuery.java	(revision 1659866)
+++ lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/RewriteQuery.java	(working copy)
@@ -38,14 +38,9 @@
   abstract public Query rewrite(IndexReader reader) throws IOException;
 
   @Override
-  public String toString() {
-    return toString(null);
-  }
-
-  @Override
   public String toString(String field) {
     return getClass().getName()
-    + (field == null ? "" : "(unused: " + field + ")")
+    + (field.isEmpty() ? "" : "(unused: " + field + ")")
     + "(" + fieldName
     + ", " + srndQuery.toString()
     + ", " + qf.toString()
Index: lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/NumericRangeFilterBuilder.java
===================================================================
--- lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/NumericRangeFilterBuilder.java	(revision 1659866)
+++ lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/NumericRangeFilterBuilder.java	(working copy)
@@ -159,5 +159,10 @@
       return null;
     }
 
+
+    @Override
+    public String toString(String field) {
+      return "NoMatchFilter()";
+    }
   }
 }
Index: lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter.java
===================================================================
--- lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter.java	(revision 1659866)
+++ lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter.java	(working copy)
@@ -206,6 +206,15 @@
   }
 
   @Override
+  public String toString(String field) {
+    return "DuplicateFilter(" +
+              "fieldName=" + fieldName +"," +
+              "keepMode=" + (keepMode == KeepMode.KM_USE_FIRST_OCCURRENCE ? "first" : "last") + "," +
+              "processingMode=" + (processingMode == ProcessingMode.PM_FAST_INVALIDATION ? "fast" : "full") +
+           ")";
+  }
+
+  @Override
   public int hashCode() {
     int hash = 217;
     hash = 31 * hash + keepMode.hashCode();
Index: lucene/sandbox/src/test/org/apache/lucene/search/TestTermAutomatonQuery.java
===================================================================
--- lucene/sandbox/src/test/org/apache/lucene/search/TestTermAutomatonQuery.java	(revision 1659866)
+++ lucene/sandbox/src/test/org/apache/lucene/search/TestTermAutomatonQuery.java	(working copy)
@@ -643,5 +643,10 @@
 
       return new BitDocIdSet(bits);
     }
+
+    @Override
+    public String toString(String field) {
+      return "RandomFilter(seed=" + seed + ",density=" + density + ")";
+    }
   }
 }
Index: lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.java
===================================================================
--- lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.java	(revision 1659866)
+++ lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.java	(working copy)
@@ -75,6 +75,16 @@
   }
 
   @Override
+  public String toString(String field) {
+    return "ContainsPrefixTreeFilter(" +
+        // TODO: print something about the shape?
+        "fieldName=" + fieldName + "," +
+        "detailLevel=" + detailLevel + "," +
+        "multiOverlappingIndexedShapes=" + multiOverlappingIndexedShapes +
+        ")";
+  }
+
+  @Override
   public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {
     return new ContainsVisitor(context, acceptDocs).visit(grid.getWorldCell(), acceptDocs);
   }
Index: lucene/spatial/src/java/org/apache/lucene/spatial/prefix/IntersectsPrefixTreeFilter.java
===================================================================
--- lucene/spatial/src/java/org/apache/lucene/spatial/prefix/IntersectsPrefixTreeFilter.java	(revision 1659866)
+++ lucene/spatial/src/java/org/apache/lucene/spatial/prefix/IntersectsPrefixTreeFilter.java	(working copy)
@@ -84,4 +84,15 @@
     }.getDocIdSet();
   }
 
+  @Override
+  public String toString(String field) {
+    return "IntersectsPrefixTreeFilter(" +
+        // TODO: print something about the shape?
+        "fieldName=" + fieldName + "," +
+        "detailLevel=" + detailLevel + "," +
+        "prefixGridScanLevel=" + prefixGridScanLevel + "," +
+        "hasIndexedLeaves=" + hasIndexedLeaves +
+        ")";
+  }
+
 }
Index: lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeFacetCounter.java
===================================================================
--- lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeFacetCounter.java	(revision 1659866)
+++ lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeFacetCounter.java	(working copy)
@@ -116,6 +116,11 @@
     // traversal code.  TODO consider refactoring if/when it makes sense (more use cases than this)
     new AbstractVisitingPrefixTreeFilter(queryShape, strategy.getFieldName(), tree, facetLevel, scanLevel,
         !strategy.isPointsOnly()) {
+      
+      @Override
+      public String toString(String field) {
+        return "anonPrefixTreeFilter";
+      }
 
       @Override
       public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {
Index: lucene/spatial/src/java/org/apache/lucene/spatial/prefix/WithinPrefixTreeFilter.java
===================================================================
--- lucene/spatial/src/java/org/apache/lucene/spatial/prefix/WithinPrefixTreeFilter.java	(revision 1659866)
+++ lucene/spatial/src/java/org/apache/lucene/spatial/prefix/WithinPrefixTreeFilter.java	(working copy)
@@ -90,6 +90,17 @@
     result = 31 * result + (bufferedQueryShape != null ? bufferedQueryShape.hashCode() : 0);
     return result;
   }
+  
+  @Override
+  public String toString(String field) {
+    return "WithinPrefixTreeFilter(" +
+             // TODO: print something about the shape?
+             "fieldName=" + fieldName + "," +
+             "detailLevel=" + detailLevel + "," +
+             "prefixGridScanLevel=" + prefixGridScanLevel + "," +
+             "hasIndexedLeaves=" + hasIndexedLeaves +
+           ")";
+  }
 
   /** Returns a new shape that is larger than shape by at distErr.
    */
Index: lucene/spatial/src/java/org/apache/lucene/spatial/serialized/SerializedDVStrategy.java
===================================================================
--- lucene/spatial/src/java/org/apache/lucene/spatial/serialized/SerializedDVStrategy.java	(revision 1659866)
+++ lucene/spatial/src/java/org/apache/lucene/spatial/serialized/SerializedDVStrategy.java	(working copy)
@@ -196,6 +196,13 @@
     public int hashCode() {
       return predicateValueSource.hashCode();
     }
+    
+    @Override
+    public String toString(String field) {
+      return "PredicateValueSourceFilter(" +
+               predicateValueSource.toString() +
+             ")";
+    }
   }//PredicateValueSourceFilter
 
   /**
Index: lucene/spatial/src/java/org/apache/lucene/spatial/util/ValueSourceFilter.java
===================================================================
--- lucene/spatial/src/java/org/apache/lucene/spatial/util/ValueSourceFilter.java	(revision 1659866)
+++ lucene/spatial/src/java/org/apache/lucene/spatial/util/ValueSourceFilter.java	(working copy)
@@ -62,4 +62,14 @@
       }
     };
   }
+
+  @Override
+  public String toString(String field) {
+    return "ValueSourceFilter(" +
+             "startingFilter=" + startingFilter.toString(field) + "," +
+             "source=" + source.toString() + "," +
+             "min=" + min + "," +
+             "max=" + max +
+           ")";
+  }
 }
Index: solr/core/src/java/org/apache/solr/search/BitDocSet.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/BitDocSet.java	(revision 1659866)
+++ solr/core/src/java/org/apache/solr/search/BitDocSet.java	(working copy)
@@ -358,6 +358,10 @@
 
         }, acceptDocs2);
       }
+      @Override
+      public String toString(String field) {
+        return "BitSetDocTopFilter";
+      }
     };
   }
 }
Index: solr/core/src/java/org/apache/solr/search/DocSetBase.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/DocSetBase.java	(revision 1659866)
+++ solr/core/src/java/org/apache/solr/search/DocSetBase.java	(working copy)
@@ -229,6 +229,10 @@
 
         }, acceptDocs2);
       }
+      @Override
+      public String toString(String field) {
+        return "DocSetTopFilter";
+      }
     };
   }
 
Index: solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.java	(revision 1659866)
+++ solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.java	(working copy)
@@ -150,6 +150,7 @@
       return new ReRankCollector(reRankDocs, length, reRankQuery, reRankWeight, cmd, searcher, boostedPriority);
     }
 
+    @Override
     public String toString(String s) {
       return "{!rerank mainQuery='"+mainQuery.toString()+
              "' reRankQuery='"+reRankQuery.toString()+
@@ -157,10 +158,6 @@
              " reRankWeigh="+reRankWeight+"}";
     }
 
-    public String toString() {
-      return toString(null);
-    }
-
     public Query rewrite(IndexReader reader) throws IOException {
       return wrap(this.mainQuery.rewrite(reader));
 
Index: solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java	(revision 1659866)
+++ solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java	(working copy)
@@ -2456,6 +2456,11 @@
     return new FilterSet(sub, context);
   }
 
+  @Override
+  public String toString(String field) {
+    return "SolrFilter";
+  }
+
   private class FilterSet extends DocIdSet {
     DocIdSet docIdSet;
     LeafReaderContext context;
Index: solr/core/src/java/org/apache/solr/search/SortedIntDocSet.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/SortedIntDocSet.java	(revision 1659866)
+++ solr/core/src/java/org/apache/solr/search/SortedIntDocSet.java	(working copy)
@@ -779,6 +779,10 @@
 
         }, acceptDocs2);
       }
+      @Override
+      public String toString(String field) {
+        return "SortedIntDocSetTopFilter";
+      }
     };
   }
 
Index: solr/core/src/java/org/apache/solr/search/function/ValueSourceRangeFilter.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/function/ValueSourceRangeFilter.java	(revision 1659866)
+++ solr/core/src/java/org/apache/solr/search/function/ValueSourceRangeFilter.java	(working copy)
@@ -98,7 +98,7 @@
   }
 
   @Override
-  public String toString() {
+  public String toString(String field) {
     StringBuilder sb = new StringBuilder();
     sb.append("frange(");
     sb.append(valueSource);
Index: solr/core/src/java/org/apache/solr/search/join/IgnoreAcceptDocsQuery.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/join/IgnoreAcceptDocsQuery.java	(revision 1659866)
+++ solr/core/src/java/org/apache/solr/search/join/IgnoreAcceptDocsQuery.java	(working copy)
@@ -48,11 +48,6 @@
   }
 
   @Override
-  public String toString() {
-    return q.toString();
-  }
-
-  @Override
   public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
     Weight inner = q.createWeight(searcher, needsScores);
     return new IADWeight(inner);
Index: solr/core/src/test/org/apache/solr/search/TestRankQueryPlugin.java
===================================================================
--- solr/core/src/test/org/apache/solr/search/TestRankQueryPlugin.java	(revision 1659866)
+++ solr/core/src/test/org/apache/solr/search/TestRankQueryPlugin.java	(working copy)
@@ -126,10 +126,7 @@
       return q.getBoost();
     }
 
-    public String toString() {
-      return q.toString();
-    }
-
+    @Override
     public String toString(String field) {
       return q.toString(field);
     }
Index: solr/core/src/test/org/apache/solr/search/TestSort.java
===================================================================
--- solr/core/src/test/org/apache/solr/search/TestSort.java	(revision 1659866)
+++ solr/core/src/test/org/apache/solr/search/TestSort.java	(working copy)
@@ -239,6 +239,10 @@
           public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) {
             return BitsFilteredDocIdSet.wrap(randSet(context.reader().maxDoc()), acceptDocs);
           }
+          @Override
+          public String toString(String field) {
+            return "TestSortFilter";
+          }
         };
 
         int top = r.nextInt((ndocs>>3)+1)+1;
