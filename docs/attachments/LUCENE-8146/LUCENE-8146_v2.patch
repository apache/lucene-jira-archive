From ac29af375d140f189e2fc618dd8236ae69306f56 Mon Sep 17 00:00:00 2001
From: Julien Massenet <julien.massenet@mail.rakuten.com>
Date: Thu, 1 Feb 2018 10:12:21 +0100
Subject: [PATCH] LUCENE-8146: be more resilient to tests.seed being empty

---
 lucene/core/src/java/org/apache/lucene/util/StringHelper.java  | 10 +++++-----
 .../api/collections/OverseerCollectionMessageHandler.java      |  4 ++--
 solr/core/src/java/org/apache/solr/core/BlobRepository.java    |  4 ++--
 solr/core/src/java/org/apache/solr/servlet/HttpSolrCall.java   |  4 ++--
 4 files changed, 11 insertions(+), 11 deletions(-)

diff --git a/lucene/core/src/java/org/apache/lucene/util/StringHelper.java b/lucene/core/src/java/org/apache/lucene/util/StringHelper.java
index 6d958bace5..a72781ca93 100644
--- a/lucene/core/src/java/org/apache/lucene/util/StringHelper.java
+++ b/lucene/core/src/java/org/apache/lucene/util/StringHelper.java
@@ -153,8 +153,8 @@ public abstract class StringHelper {
   public static final int GOOD_FAST_HASH_SEED;
 
   static {
-    String prop = System.getProperty("tests.seed");
-    if (prop != null) {
+    String prop = System.getProperty("tests.seed", "");
+    if (!prop.isEmpty()) {
       // So if there is a test failure that relied on hash
       // order, we remain reproducible based on the test seed:
       GOOD_FAST_HASH_SEED = prop.hashCode();
@@ -232,14 +232,14 @@ public abstract class StringHelper {
     byte[] maskBytes128 = new byte[16];
     Arrays.fill(maskBytes128, (byte) 0xff);
     mask128 = new BigInteger(1, maskBytes128);
-    
-    String prop = System.getProperty("tests.seed");
+
+    String prop = System.getProperty("tests.seed", "");
 
     // State for xorshift128:
     long x0;
     long x1;
 
-    if (prop != null) {
+    if (!prop.isEmpty()) {
       // So if there is a test failure that somehow relied on this id,
       // we remain reproducible based on the test seed:
       if (prop.length() > 8) {
diff --git a/solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler.java b/solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler.java
index e482560be4..1c2f764b12 100644
--- a/solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler.java
+++ b/solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler.java
@@ -175,8 +175,8 @@ public class OverseerCollectionMessageHandler implements OverseerMessageHandler,
   static {
     // We try to make things reproducible in the context of our tests by initializing the random instance
     // based on the current seed
-    String seed = System.getProperty("tests.seed");
-    if (seed == null) {
+    String seed = System.getProperty("tests.seed", "");
+    if (seed.isEmpty()) {
       RANDOM = new Random();
     } else {
       RANDOM = new Random(seed.hashCode());
diff --git a/solr/core/src/java/org/apache/solr/core/BlobRepository.java b/solr/core/src/java/org/apache/solr/core/BlobRepository.java
index e4d5e04955..5dff47658a 100644
--- a/solr/core/src/java/org/apache/solr/core/BlobRepository.java
+++ b/solr/core/src/java/org/apache/solr/core/BlobRepository.java
@@ -59,8 +59,8 @@ public class BlobRepository {
   static {
     // We try to make things reproducible in the context of our tests by initializing the random instance
     // based on the current seed
-    String seed = System.getProperty("tests.seed");
-    if (seed == null) {
+    String seed = System.getProperty("tests.seed", "");
+    if (seed.isEmpty()) {
       RANDOM = new Random();
     } else {
       RANDOM = new Random(seed.hashCode());
diff --git a/solr/core/src/java/org/apache/solr/servlet/HttpSolrCall.java b/solr/core/src/java/org/apache/solr/servlet/HttpSolrCall.java
index ba4aa137ed..35104143f0 100644
--- a/solr/core/src/java/org/apache/solr/servlet/HttpSolrCall.java
+++ b/solr/core/src/java/org/apache/solr/servlet/HttpSolrCall.java
@@ -139,8 +139,8 @@ public class HttpSolrCall {
   static {
     // We try to make things reproducible in the context of our tests by initializing the random instance
     // based on the current seed
-    String seed = System.getProperty("tests.seed");
-    if (seed == null) {
+    String seed = System.getProperty("tests.seed", "");
+    if (seed.isEmpty()) {
       random = new Random();
     } else {
       random = new Random(seed.hashCode());
-- 
2.16.1

