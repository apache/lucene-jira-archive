Index: lucene/core/src/test/org/apache/lucene/index/TestSegmentMerger.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestSegmentMerger.java	(révision 1448781)
+++ lucene/core/src/test/org/apache/lucene/index/TestSegmentMerger.java	(copie de travail)
@@ -154,27 +154,33 @@
   }
 
   public void testBuildDocMap() {
-    final int maxDoc = 128;
+    final int maxDoc = _TestUtil.nextInt(random(), 1, 128);
+    final int numDocs = _TestUtil.nextInt(random(), 0, maxDoc);
+    final int numDeletedDocs = maxDoc - numDocs;
     final FixedBitSet liveDocs = new FixedBitSet(maxDoc);
+    for (int i = 0; i < numDocs; ++i) {
+      while (true) {
+        final int docID = random().nextInt(maxDoc);
+        if (!liveDocs.get(docID)) {
+          liveDocs.set(docID);
+          break;
+        }
+      }
+    }
 
-    MergeState.DocMap docMap1 = MergeState.DocMap.buildDelCountDocmap(maxDoc, maxDoc, liveDocs, PackedInts.COMPACT);
-    MergeState.DocMap docMap2 = MergeState.DocMap.buildDirectDocMap(maxDoc, 0, liveDocs, PackedInts.COMPACT);
-    assertTrue(equals(docMap1, docMap2));
-    
-    liveDocs.set(1);
-    for (int i = 7; i < 79; ++i) {
-      liveDocs.set(i);
+    final MergeState.DocMap docMap = MergeState.DocMap.build(maxDoc, liveDocs);
+
+    assertEquals(maxDoc, docMap.maxDoc());
+    assertEquals(numDocs, docMap.numDocs());
+    assertEquals(numDeletedDocs, docMap.numDeletedDocs());
+    // assert the mapping is compact
+    for (int i = 0, del = 0; i < maxDoc; ++i) {
+      if (!liveDocs.get(i)) {
+        assertEquals(-1, docMap.get(i));
+        ++del;
+      } else {
+        assertEquals(i - del, docMap.get(i));
+      }
     }
-    liveDocs.set(80);
-    liveDocs.set(88);
-    int numDocs = liveDocs.cardinality();
-    docMap1 = MergeState.DocMap.buildDelCountDocmap(maxDoc, maxDoc - numDocs, liveDocs, PackedInts.COMPACT);
-    docMap2 = MergeState.DocMap.buildDirectDocMap(maxDoc, numDocs, liveDocs, PackedInts.COMPACT);
-    assertTrue(equals(docMap1, docMap2));
-
-    liveDocs.set(0, maxDoc);
-    docMap1 = MergeState.DocMap.buildDelCountDocmap(maxDoc, 0, liveDocs, PackedInts.COMPACT);
-    docMap2 = MergeState.DocMap.buildDirectDocMap(maxDoc, maxDoc, liveDocs, PackedInts.COMPACT);
-    assertTrue(equals(docMap1, docMap2));
   }
 }
Index: lucene/core/src/java/org/apache/lucene/index/MergeState.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/MergeState.java	(révision 1448781)
+++ lucene/core/src/java/org/apache/lucene/index/MergeState.java	(copie de travail)
@@ -22,7 +22,7 @@
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.Bits;
 import org.apache.lucene.util.InfoStream;
-import org.apache.lucene.util.packed.PackedInts;
+import org.apache.lucene.util.packed.MonotonicAppendingLongBuffer;
 
 /** Holds common state used during segment merging.
  *
@@ -33,88 +33,73 @@
    * Remaps docids around deletes during merge
    */
   public static abstract class DocMap {
-    private final Bits liveDocs;
 
-    /** Sole constructor. (For invocation by subclass 
-     *  constructors, typically implicit.) */
-    protected DocMap(Bits liveDocs) {
-      this.liveDocs = liveDocs;
+    /** Returns the mapped docID corresponding to the provided one. */
+    public abstract int get(int docID);
+
+    /** Returns the total number of documents, ignoring
+     *  deletions. */
+    public abstract int maxDoc();
+
+    /** Returns the number of not-deleted documents. */
+    public final int numDocs() {
+      return maxDoc() - numDeletedDocs();
     }
 
+    /** Returns the number of deleted documents. */
+    public abstract int numDeletedDocs();
+
+    /** Returns true if there are any deletions. */
+    public boolean hasDeletions() {
+      return numDeletedDocs() > 0;
+    }
+
     /** Creates a {@link DocMap} instance appropriate for
      *  this reader. */
     public static DocMap build(AtomicReader reader) {
       final int maxDoc = reader.maxDoc();
-      final int numDeletes = reader.numDeletedDocs();
-      final int numDocs = maxDoc - numDeletes;
-      assert reader.getLiveDocs() != null || numDeletes == 0;
-      if (numDeletes == 0) {
+      if (!reader.hasDeletions()) {
         return new NoDelDocMap(maxDoc);
-      } else if (numDeletes < numDocs) {
-        return buildDelCountDocmap(maxDoc, numDeletes, reader.getLiveDocs(), PackedInts.COMPACT);
-      } else {
-        return buildDirectDocMap(maxDoc, numDocs, reader.getLiveDocs(), PackedInts.COMPACT);
       }
+      final Bits liveDocs = reader.getLiveDocs();
+      return build(maxDoc, liveDocs);
     }
 
-    static DocMap buildDelCountDocmap(int maxDoc, int numDeletes, Bits liveDocs, float acceptableOverheadRatio) {
-      PackedInts.Mutable numDeletesSoFar = PackedInts.getMutable(maxDoc,
-          PackedInts.bitsRequired(numDeletes), acceptableOverheadRatio);
+    static DocMap build(final int maxDoc, final Bits liveDocs) {
+      assert liveDocs != null;
+      final MonotonicAppendingLongBuffer docMap = new MonotonicAppendingLongBuffer();
       int del = 0;
       for (int i = 0; i < maxDoc; ++i) {
+        docMap.add(i - del);
         if (!liveDocs.get(i)) {
           ++del;
         }
-        numDeletesSoFar.set(i, del);
       }
-      assert del == numDeletes : "del=" + del + ", numdeletes=" + numDeletes;
-      return new DelCountDocMap(liveDocs, numDeletesSoFar);
-    }
+      final int numDeletedDocs = del;
+      assert docMap.size() == maxDoc;
+      return new DocMap() {
 
-    static DocMap buildDirectDocMap(int maxDoc, int numDocs, Bits liveDocs, float acceptableOverheadRatio) {
-      PackedInts.Mutable docIds = PackedInts.getMutable(maxDoc,
-          PackedInts.bitsRequired(Math.max(0, numDocs - 1)), acceptableOverheadRatio);
-      int del = 0;
-      for (int i = 0; i < maxDoc; ++i) {
-        if (liveDocs.get(i)) {
-          docIds.set(i, i - del);
-        } else {
-          ++del;
+        @Override
+        public int get(int docID) {
+          if (!liveDocs.get(docID)) {
+            return -1;
+          }
+          return (int) docMap.get(docID);
         }
-      }
-      assert numDocs + del == maxDoc : "maxDoc=" + maxDoc + ", del=" + del + ", numDocs=" + numDocs;
-      return new DirectDocMap(liveDocs, docIds, del);
-    }
 
-    /** Returns the mapped docID corresponding to the provided one. */
-    public int get(int docId) {
-      if (liveDocs == null || liveDocs.get(docId)) {
-        return remap(docId);
-      } else {
-        return -1;
-      }
-    }
+        @Override
+        public int maxDoc() {
+          return maxDoc;
+        }
 
-    /** Returns the mapped docID corresponding to the provided one. */
-    public abstract int remap(int docId);
+        @Override
+        public int numDeletedDocs() {
+          return numDeletedDocs;
+        }
 
-    /** Returns the total number of documents, ignoring
-     *  deletions. */
-    public abstract int maxDoc();
-
-    /** Returns the number of not-deleted documents. */
-    public final int numDocs() {
-      return maxDoc() - numDeletedDocs();
+      };
     }
 
-    /** Returns the number of deleted documents. */
-    public abstract int numDeletedDocs();
-
-    /** Returns true if there are any deletions. */
-    public boolean hasDeletions() {
-      return numDeletedDocs() > 0;
-    }
-
   }
 
   private static class NoDelDocMap extends DocMap {
@@ -122,13 +107,12 @@
     private final int maxDoc;
 
     private NoDelDocMap(int maxDoc) {
-      super(null);
       this.maxDoc = maxDoc;
     }
 
     @Override
-    public int remap(int docId) {
-      return docId;
+    public int get(int docID) {
+      return docID;
     }
 
     @Override
@@ -142,59 +126,6 @@
     }
   }
 
-  private static class DirectDocMap extends DocMap {
-
-    private final PackedInts.Mutable docIds;
-    private final int numDeletedDocs;
-
-    private DirectDocMap(Bits liveDocs, PackedInts.Mutable docIds, int numDeletedDocs) {
-      super(liveDocs);
-      this.docIds = docIds;
-      this.numDeletedDocs = numDeletedDocs;
-    }
-
-    @Override
-    public int remap(int docId) {
-      return (int) docIds.get(docId);
-    }
-
-    @Override
-    public int maxDoc() {
-      return docIds.size();
-    }
-
-    @Override
-    public int numDeletedDocs() {
-      return numDeletedDocs;
-    }
-  }
-
-  private static class DelCountDocMap extends DocMap {
-
-    private final PackedInts.Mutable numDeletesSoFar;
-
-    private DelCountDocMap(Bits liveDocs, PackedInts.Mutable numDeletesSoFar) {
-      super(liveDocs);
-      this.numDeletesSoFar = numDeletesSoFar;
-    }
-
-    @Override
-    public int remap(int docId) {
-      return docId - (int) numDeletesSoFar.get(docId);
-    }
-
-    @Override
-    public int maxDoc() {
-      return numDeletesSoFar.size();
-    }
-
-    @Override
-    public int numDeletedDocs() {
-      final int maxDoc = maxDoc();
-      return (int) numDeletesSoFar.get(maxDoc - 1);
-    }
-  }
-
   /** {@link SegmentInfo} of the newly merged segment. */
   public SegmentInfo segmentInfo;
 
@@ -213,13 +144,13 @@
   /** Holds the CheckAbort instance, which is invoked
    *  periodically to see if the merge has been aborted. */
   public CheckAbort checkAbort;
-  
+
   /** InfoStream for debugging messages. */
   public InfoStream infoStream;
 
   // TODO: get rid of this? it tells you which segments are 'aligned' (e.g. for bulk merging)
   // but is this really so expensive to compute again in different components, versus once in SM?
-  
+
   /** {@link SegmentReader}s that have identical field
    * name/number mapping, so their stored fields and term
    * vectors may be bulk merged. */
@@ -231,7 +162,7 @@
   /** Sole constructor. */
   MergeState() {
   }
-  
+
   /**
    * Class for recording units of work when merging segments.
    */
@@ -261,7 +192,7 @@
         workCount = 0;
       }
     }
-    
+
     /** If you use this: IW.close(false) cannot abort your merge!
      * @lucene.internal */
     static final MergeState.CheckAbort NONE = new MergeState.CheckAbort(null, null) {
