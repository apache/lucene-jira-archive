diff --git a/build.gradle b/build.gradle
index 5fc36093668..668c34548de 100644
--- a/build.gradle
+++ b/build.gradle
@@ -150,3 +150,5 @@ apply from: file('gradle/documentation/documentation.gradle')
 apply from: file('gradle/documentation/changes-to-html.gradle')
 apply from: file('gradle/documentation/markdown.gradle')
 apply from: file('gradle/render-javadoc.gradle')
+
+apply from: file('gradle/hacks/findbugs.gradle')
diff --git a/gradle/hacks/findbugs.gradle b/gradle/hacks/findbugs.gradle
new file mode 100644
index 00000000000..bdbdb7e00b4
--- /dev/null
+++ b/gradle/hacks/findbugs.gradle
@@ -0,0 +1,45 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */ 
+
+// See LUCENE-9411. This hack adds compile-time only dependencies
+// on findbugs annotations. Otherwise javac generates odd warnings about missing
+// type information.
+
+configure([project(":solr:core"),
+           project(":solr:solrj"),
+           project(":solr:contrib:prometheus-exporter")]) {
+  plugins.withType(JavaPlugin) {
+    dependencies {
+      // Use versionless variants because these libraries are in versions.lock.
+      compileOnly     'com.google.errorprone:error_prone_annotations'
+      testCompileOnly 'com.google.errorprone:error_prone_annotations'
+      compileOnly     'com.google.code.findbugs:jsr305'
+      testCompileOnly 'com.google.code.findbugs:jsr305'
+
+      // This one isn't.
+      compileOnly 'com.google.code.findbugs:annotations:3.0.1'
+      testCompileOnly 'com.google.code.findbugs:annotations:3.0.1'
+    }
+
+    // Exclude these from jar validation and license checks.
+    configurations.jarValidation {
+      exclude group: "com.google.code.findbugs", module: "jsr305"
+      exclude group: "com.google.code.findbugs", module: "annotations"
+      exclude group: "com.google.errorprone", module: "error_prone_annotations"
+    }
+  }
+}
diff --git a/gradle/validation/jar-checks.gradle b/gradle/validation/jar-checks.gradle
index b369b06dfde..61db9a1d55d 100644
--- a/gradle/validation/jar-checks.gradle
+++ b/gradle/validation/jar-checks.gradle
@@ -115,7 +115,9 @@ subprojects {
       ArrayDeque<ResolvedDependency> queue = new ArrayDeque<>()
       configurations.jarValidation.extendsFrom.each { conf ->
         if (excludeRules) {
-          conf = configurations.detachedConfiguration().extendsFrom(conf)
+          conf = conf.copyRecursive()
+          conf.canBeResolved = true
+          conf.canBeConsumed = true
           conf.excludeRules = excludeRules
         }
         if (conf.canBeResolved) {
