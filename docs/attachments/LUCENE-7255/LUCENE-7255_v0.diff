diff --git a/lucene/misc/src/test/org/apache/lucene/search/TestEarlyTerminatingSortingCollector.java b/lucene/misc/src/test/org/apache/lucene/search/TestEarlyTerminatingSortingCollector.java
index 14bd437..8ed7b8b 100644
--- a/lucene/misc/src/test/org/apache/lucene/search/TestEarlyTerminatingSortingCollector.java
+++ b/lucene/misc/src/test/org/apache/lucene/search/TestEarlyTerminatingSortingCollector.java
@@ -18,6 +18,7 @@ package org.apache.lucene.search;
 
 import java.io.IOException;
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
@@ -28,9 +29,11 @@ import org.apache.lucene.analysis.MockAnalyzer;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field.Store;
 import org.apache.lucene.document.NumericDocValuesField;
+import org.apache.lucene.document.StoredField;
 import org.apache.lucene.document.StringField;
 import org.apache.lucene.index.DirectoryReader;
 import org.apache.lucene.index.ExitableDirectoryReader;
+import org.apache.lucene.index.IndexWriter;
 import org.apache.lucene.index.LeafReaderContext;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.IndexWriterConfig;
@@ -40,6 +43,7 @@ import org.apache.lucene.index.SerialMergeScheduler;
 import org.apache.lucene.index.SortingMergePolicy;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.index.TestSortingMergePolicy;
+import org.apache.lucene.index.TieredMergePolicy;
 import org.apache.lucene.search.LeafCollector;
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.MatchAllDocsQuery;
@@ -50,6 +54,7 @@ import org.apache.lucene.search.SortField;
 import org.apache.lucene.search.TermQuery;
 import org.apache.lucene.search.TopFieldCollector;
 import org.apache.lucene.store.Directory;
+import org.apache.lucene.store.RAMDirectory;
 import org.apache.lucene.uninverting.UninvertingReader;
 import org.apache.lucene.uninverting.UninvertingReader.Type;
 import org.apache.lucene.util.LuceneTestCase;
@@ -302,4 +307,59 @@ public class TestEarlyTerminatingSortingCollector extends LuceneTestCase {
     }
   }
 
+  public void testPaginatedEarlyTermination() throws IOException {
+
+    String field = "id";
+    int pageSize = 1000;
+    int numDocs = 1000;
+
+    // Create index
+    RAMDirectory directory = new RAMDirectory();
+    Sort sort = new Sort(new SortedNumericSortField(field, SortField.Type.INT));
+    SortingMergePolicy mergePolicy = TestSortingMergePolicy.newSortingMergePolicy(sort);
+    IndexWriterConfig indexWriterConfig = new IndexWriterConfig(new MockAnalyzer(random()));
+    indexWriterConfig.setMergePolicy(mergePolicy);
+    IndexWriter indexWriter = new IndexWriter(directory, indexWriterConfig);
+
+    // Index values
+    for (int i = 1; i <= numDocs; i++) {
+      Document document = new Document();
+      document.add(new NumericDocValuesField(field, i));
+      document.add(new StoredField(field, i));
+      indexWriter.addDocument(document);
+    }
+
+    // Force index merge to ensure early termination
+    indexWriter.commit();
+    indexWriter.forceMerge(1);
+
+    // Initialize pagination state
+    int numFound = 0;
+    FieldDoc lastFound = null;
+
+    // Paginated read
+    IndexReader reader = DirectoryReader.open(directory);
+    IndexSearcher searcher = new IndexSearcher(reader);
+    while (true) {
+      Query query = new MatchAllDocsQuery();
+      TopDocsCollector tfc = TopFieldCollector.create(sort, pageSize, lastFound, true, false, false);
+      Collector collector = new EarlyTerminatingSortingCollector(tfc, sort, numFound + pageSize, sort);
+      searcher.search(query, collector);
+      ScoreDoc[] scoreDocs = tfc.topDocs().scoreDocs;
+      for (ScoreDoc scoreDoc : scoreDocs) {
+        lastFound = (FieldDoc) scoreDoc;
+        numFound++;
+        Document document = searcher.doc(scoreDoc.doc, Collections.singleton(field));
+        assertEquals(numFound, document.getField(field).numericValue());
+      }
+      if (scoreDocs.length < pageSize) break;
+    }
+    assertEquals(numDocs, numFound);
+
+    // Close
+    reader.close();
+    indexWriter.close();
+    directory.close();
+  }
+
 }
