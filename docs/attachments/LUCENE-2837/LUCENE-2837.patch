Index: lucene/src/java/org/apache/lucene/search/IndexSearcher.java
===================================================================
--- lucene/src/java/org/apache/lucene/search/IndexSearcher.java	(revision 1055638)
+++ lucene/src/java/org/apache/lucene/search/IndexSearcher.java	(working copy)
@@ -64,9 +64,10 @@
   // in the next release
   protected final ReaderContext readerContext;
   protected final AtomicReaderContext[] leafContexts;
+
+  // These are only used for multi-threaded search
+  private final ExecutorService executor;
   protected final IndexSearcher[] subSearchers;
-//  protected final int[] docStarts;
-  private final ExecutorService executor;
 
   /** The Similarity implementation used by this searcher. */
   private Similarity similarity = Similarity.getDefault();
@@ -168,12 +169,17 @@
       assert context.leaves() != null : "non-atomic top-level context must have leaves";
       this.leafContexts = context.leaves();
     }
-    subSearchers = new IndexSearcher[this.leafContexts.length];
-    for (int i = 0; i < subSearchers.length; i++) { // TODO do we need those IS if executor is null?
-      if (leafContexts[i].reader == context.reader) {
-        subSearchers[i] = this;
-      } else {
-        subSearchers[i] = new IndexSearcher(leafContexts[i].reader.getTopReaderContext()); // we need to get a TL context for sub searchers!
+
+    if (executor == null) {
+      subSearchers = null;
+    } else {
+      subSearchers = new IndexSearcher[this.leafContexts.length];
+      for (int i = 0; i < subSearchers.length; i++) {
+        if (leafContexts[i].reader == context.reader) {
+          subSearchers[i] = this;
+        } else {
+          subSearchers[i] = new IndexSearcher(leafContexts[i].reader.getTopReaderContext()); // we need to get a TL context for sub searchers!
+        }
       }
     }
   }
