diff --git a/lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery.java b/lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery.java
index 17b9e51..4fe527a 100644
--- a/lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery.java
@@ -267,8 +267,11 @@ public class SpanNearQuery extends SpanQuery implements Cloneable {
 
   @Override
   public boolean equals(Object other) {
+    if (this == other) {
+      return true;
+    }
     return sameClassAs(other) &&
-           equalsTo(getClass().cast(other));
+           equalsTo(this.getClass().cast(other));
   }
   
   private boolean equalsTo(SpanNearQuery other) {
diff --git a/lucene/core/src/java/org/apache/lucene/util/FixedBitSet.java b/lucene/core/src/java/org/apache/lucene/util/FixedBitSet.java
index 92d1878..0deb242 100644
--- a/lucene/core/src/java/org/apache/lucene/util/FixedBitSet.java
+++ b/lucene/core/src/java/org/apache/lucene/util/FixedBitSet.java
@@ -487,11 +487,11 @@ public final class FixedBitSet extends BitSet implements Bits, Accountable {
     if (this == o) {
       return true;
     }
-    if (!(o instanceof FixedBitSet)) {
+    if (o == null || getClass() != o.getClass()) {
       return false;
     }
     FixedBitSet other = (FixedBitSet) o;
-    if (numBits != other.numBits) {
+    if (this.numBits != other.numBits) {
       return false;
     }
     // Depends on the ghost bits being clear!
diff --git a/lucene/core/src/java/org/apache/lucene/util/LongBitSet.java b/lucene/core/src/java/org/apache/lucene/util/LongBitSet.java
index 89b4765..a1bd10f 100644
--- a/lucene/core/src/java/org/apache/lucene/util/LongBitSet.java
+++ b/lucene/core/src/java/org/apache/lucene/util/LongBitSet.java
@@ -405,11 +405,11 @@ public final class LongBitSet {
     if (this == o) {
       return true;
     }
-    if (!(o instanceof LongBitSet)) {
+    if (o == null || getClass() != o.getClass()) {
       return false;
     }
     LongBitSet other = (LongBitSet) o;
-    if (numBits != other.numBits) {
+    if (this.numBits != other.numBits) {
       return false;
     }
     // Depends on the ghost bits being clear!
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ConstValueSource.java b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ConstValueSource.java
index 125422f..6a842ac 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ConstValueSource.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ConstValueSource.java
@@ -16,13 +16,13 @@
  */
 package org.apache.lucene.queries.function.valuesource;
 
+import java.io.IOException;
+import java.util.Map;
+
 import org.apache.lucene.index.LeafReaderContext;
 import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.docvalues.FloatDocValues;
 
-import java.io.IOException;
-import java.util.Map;
-
 /**
  * <code>ConstValueSource</code> returns a constant for all documents
  */
@@ -81,9 +81,14 @@ public class ConstValueSource extends ConstNumberSource {
 
   @Override
   public boolean equals(Object o) {
-    if (!(o instanceof ConstValueSource)) return false;
+    if (this == o) {
+      return true;
+    }
+    if (o == null || getClass() != o.getClass()) {
+      return false;
+    }
     ConstValueSource other = (ConstValueSource)o;
-    return  this.constant == other.constant;
+    return Float.compare(this.constant, other.constant) == 0;
   }
 
   @Override
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DoubleConstValueSource.java b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DoubleConstValueSource.java
index 74a4774..f85898e 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DoubleConstValueSource.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DoubleConstValueSource.java
@@ -16,13 +16,13 @@
  */
 package org.apache.lucene.queries.function.valuesource;
 
+import java.io.IOException;
+import java.util.Map;
+
 import org.apache.lucene.index.LeafReaderContext;
 import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.docvalues.DoubleDocValues;
 
-import java.io.IOException;
-import java.util.Map;
-
 /**
  * Function that returns a constant double value for every document.
  */
@@ -90,9 +90,14 @@ public class DoubleConstValueSource extends ConstNumberSource {
 
   @Override
   public boolean equals(Object o) {
-    if (!(o instanceof DoubleConstValueSource)) return false;
+    if (this == o) {
+      return true;
+    }
+    if (o == null || getClass() != o.getClass()) {
+      return false;
+    }
     DoubleConstValueSource other = (DoubleConstValueSource) o;
-    return this.constant == other.constant;
+    return Double.compare(this.constant, other.constant) == 0 ;
   }
 
   @Override
diff --git a/solr/core/src/java/org/apache/solr/search/function/ValueSourceRangeFilter.java b/solr/core/src/java/org/apache/solr/search/function/ValueSourceRangeFilter.java
index 1fce97e..c3a07df 100644
--- a/solr/core/src/java/org/apache/solr/search/function/ValueSourceRangeFilter.java
+++ b/solr/core/src/java/org/apache/solr/search/function/ValueSourceRangeFilter.java
@@ -28,6 +28,7 @@ import org.apache.solr.search.SolrFilter;
 
 import java.io.IOException;
 import java.util.Map;
+import java.util.Objects;
 
 
 /**
@@ -116,16 +117,20 @@ public class ValueSourceRangeFilter extends SolrFilter {
 
   @Override
   public boolean equals(Object o) {
-    if (this == o) return true;
-    if (!(o instanceof ValueSourceRangeFilter)) return false;
+    if (this == o) {
+      return true;
+    }
+    if (o == null || getClass() != o.getClass()) {
+      return false;
+    }
     ValueSourceRangeFilter other = (ValueSourceRangeFilter)o;
 
-    if (!this.valueSource.equals(other.valueSource)
+    if (!Objects.equals(this.valueSource, other.valueSource) 
         || this.includeLower != other.includeLower
         || this.includeUpper != other.includeUpper
     ) { return false; }
-    if (this.lowerVal != null ? !this.lowerVal.equals(other.lowerVal) : other.lowerVal != null) return false;
-    if (this.upperVal != null ? !this.upperVal.equals(other.upperVal) : other.upperVal != null) return false;
+    if (!Objects.equals(this.lowerVal, other.lowerVal)) return false;
+    if (!Objects.equals(this.upperVal, other.upperVal)) return false;
     return true;
   }
 
diff --git a/solr/core/src/java/org/apache/solr/search/function/distance/GeohashFunction.java b/solr/core/src/java/org/apache/solr/search/function/distance/GeohashFunction.java
index 4e38843..b2f87e3 100644
--- a/solr/core/src/java/org/apache/solr/search/function/distance/GeohashFunction.java
+++ b/solr/core/src/java/org/apache/solr/search/function/distance/GeohashFunction.java
@@ -21,6 +21,7 @@ import org.apache.lucene.queries.function.ValueSource;
 import org.locationtech.spatial4j.io.GeohashUtils;
 
 import java.util.Map;
+import java.util.Objects;
 import java.io.IOException;
 
 
@@ -70,13 +71,16 @@ public class GeohashFunction extends ValueSource {
 
   @Override
   public boolean equals(Object o) {
-    if (this == o) return true;
-    if (!(o instanceof GeohashFunction)) return false;
-
+    if (this == o) {
+      return true;
+    }
+    if (o == null || getClass() != o.getClass()) {
+      return false;
+    }
     GeohashFunction that = (GeohashFunction) o;
 
-    if (!lat.equals(that.lat)) return false;
-    if (!lon.equals(that.lon)) return false;
+    if (!Objects.equals(this.lat, that.lat)) return false;
+    if (!Objects.equals(this.lon, that.lon)) return false;
 
     return true;
   }
diff --git a/solr/core/src/java/org/apache/solr/search/function/distance/StringDistanceFunction.java b/solr/core/src/java/org/apache/solr/search/function/distance/StringDistanceFunction.java
index 8bf9f1a..37b1941 100644
--- a/solr/core/src/java/org/apache/solr/search/function/distance/StringDistanceFunction.java
+++ b/solr/core/src/java/org/apache/solr/search/function/distance/StringDistanceFunction.java
@@ -24,6 +24,7 @@ import org.apache.lucene.search.spell.StringDistance;
 
 import java.io.IOException;
 import java.util.Map;
+import java.util.Objects;
 
 
 /**
@@ -87,14 +88,17 @@ public class StringDistanceFunction extends ValueSource {
 
   @Override
   public boolean equals(Object o) {
-    if (this == o) return true;
-    if (!(o instanceof StringDistanceFunction)) return false;
-
+    if (this == o) {
+      return true;
+    }
+    if (o == null || getClass() != o.getClass()) {
+      return false;
+    }
     StringDistanceFunction that = (StringDistanceFunction) o;
 
-    if (!dist.equals(that.dist)) return false;
-    if (!str1.equals(that.str1)) return false;
-    if (!str2.equals(that.str2)) return false;
+    if (!Objects.equals(this.dist, that.dist)) return false;
+    if (!Objects.equals(this.str1, that.str1)) return false;
+    if (!Objects.equals(this.str2, that.str2)) return false;
 
     return true;
   }
diff --git a/solr/core/src/java/org/apache/solr/search/function/distance/VectorDistanceFunction.java b/solr/core/src/java/org/apache/solr/search/function/distance/VectorDistanceFunction.java
index 474ece3..4350541 100644
--- a/solr/core/src/java/org/apache/solr/search/function/distance/VectorDistanceFunction.java
+++ b/solr/core/src/java/org/apache/solr/search/function/distance/VectorDistanceFunction.java
@@ -25,6 +25,7 @@ import org.apache.solr.common.SolrException;
 
 import java.io.IOException;
 import java.util.Map;
+import java.util.Objects;
 
 
 /**
@@ -184,15 +185,17 @@ public class VectorDistanceFunction extends ValueSource {
 
   @Override
   public boolean equals(Object o) {
-    if (this == o) return true;
-    if (!(o instanceof VectorDistanceFunction)) return false;
-
+    if (this == o) {
+      return true;
+    }
+    if (o == null || getClass() != o.getClass()) {
+      return false;
+    }
     VectorDistanceFunction that = (VectorDistanceFunction) o;
 
     if (Float.compare(that.power, power) != 0) return false;
-    if (!source1.equals(that.source1)) return false;
-    if (!source2.equals(that.source2)) return false;
-
+    if (!Objects.equals(this.source1, that.source1)) return false;
+    if (!Objects.equals(this.source2, that.source2)) return false;
     return true;
   }
 
