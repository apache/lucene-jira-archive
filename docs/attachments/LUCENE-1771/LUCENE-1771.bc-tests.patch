Index: src/java/org/apache/lucene/index/DocumentsWriter.java
===================================================================
--- src/java/org/apache/lucene/index/DocumentsWriter.java	(revision 800911)
+++ src/java/org/apache/lucene/index/DocumentsWriter.java	(working copy)
@@ -979,7 +979,7 @@
       Query query = (Query) entry.getKey();
       int limit = ((Integer) entry.getValue()).intValue();
       Weight weight = query.weight(searcher);
-      Scorer scorer = weight.scorer(reader);
+      Scorer scorer = weight.scorer(reader, true, false);
       while(scorer.next()) {
         final int docID = scorer.doc();
         if (docIDStart + docID >= limit)
Index: src/java/org/apache/lucene/search/BooleanQuery.java
===================================================================
--- src/java/org/apache/lucene/search/BooleanQuery.java	(revision 800911)
+++ src/java/org/apache/lucene/search/BooleanQuery.java	(working copy)
@@ -173,7 +173,7 @@
   /** Returns the list of clauses in this query. */
   public List clauses() { return clauses; }
 
-  private class BooleanWeight implements Weight {
+  private class BooleanWeight extends Weight {
     protected Similarity similarity;
     protected ArrayList weights;
 
@@ -220,7 +220,7 @@
     /** @return Returns BooleanScorer2 that uses and provides skipTo(),
      *          and scores documents in document number order.
      */
-    public Scorer scorer(IndexReader reader) throws IOException {
+    public Scorer scorer(IndexReader reader, boolean order, boolean top) throws IOException {
       BooleanScorer2 result = new BooleanScorer2(similarity,
                                                  minNrShouldMatch,
                                                  allowDocsOutOfOrder);
@@ -228,7 +228,7 @@
       for (int i = 0 ; i < weights.size(); i++) {
         BooleanClause c = (BooleanClause)clauses.get(i);
         Weight w = (Weight)weights.get(i);
-        Scorer subScorer = w.scorer(reader);
+        Scorer subScorer = w.scorer(reader, true, false);
         if (subScorer != null)
           result.add(subScorer, c.isRequired(), c.isProhibited());
         else if (c.isRequired())
Index: src/java/org/apache/lucene/search/ConstantScoreQuery.java
===================================================================
--- src/java/org/apache/lucene/search/ConstantScoreQuery.java	(revision 800911)
+++ src/java/org/apache/lucene/search/ConstantScoreQuery.java	(working copy)
@@ -50,7 +50,7 @@
     // but may not be OK for highlighting
   }
 
-  protected class ConstantWeight implements Weight {
+  protected class ConstantWeight extends Weight {
     private Similarity similarity;
     private float queryNorm;
     private float queryWeight;
@@ -77,13 +77,13 @@
       queryWeight *= this.queryNorm;
     }
 
-    public Scorer scorer(IndexReader reader) throws IOException {
+    public Scorer scorer(IndexReader reader, boolean order, boolean top) throws IOException {
       return new ConstantScorer(similarity, reader, this);
     }
 
     public Explanation explain(IndexReader reader, int doc) throws IOException {
 
-      ConstantScorer cs = (ConstantScorer)scorer(reader);
+      ConstantScorer cs = (ConstantScorer)scorer(reader, true, false);
       boolean exists = cs.docIdSetIterator.skipTo(doc) && (cs.docIdSetIterator.doc() == doc);
 
       ComplexExplanation result = new ComplexExplanation();
Index: src/java/org/apache/lucene/search/DisjunctionMaxQuery.java
===================================================================
--- src/java/org/apache/lucene/search/DisjunctionMaxQuery.java	(revision 800911)
+++ src/java/org/apache/lucene/search/DisjunctionMaxQuery.java	(working copy)
@@ -86,7 +86,7 @@
   }
 
   /* The Weight for DisjunctionMaxQuery's, used to normalize, score and explain these queries */
-  private class DisjunctionMaxWeight implements Weight {
+  private class DisjunctionMaxWeight extends Weight {
 
     private Similarity similarity;   // The similarity which we are associated.
     private ArrayList weights = new ArrayList();  // The Weight's for our subqueries, in 1-1 correspondence with disjuncts
@@ -123,11 +123,11 @@
     }
 
     /* Create the scorer used to score our associated DisjunctionMaxQuery */
-    public Scorer scorer(IndexReader reader) throws IOException {
+    public Scorer scorer(IndexReader reader, boolean order, boolean top) throws IOException {
       DisjunctionMaxScorer result = new DisjunctionMaxScorer(tieBreakerMultiplier, similarity);
       for (int i = 0 ; i < weights.size(); i++) {
         Weight w = (Weight) weights.get(i);
-        Scorer subScorer = w.scorer(reader);
+        Scorer subScorer = w.scorer(reader, true, false);
         if (subScorer == null) return null;
         result.add(subScorer);
       }
Index: src/java/org/apache/lucene/search/FilteredQuery.java
===================================================================
--- src/java/org/apache/lucene/search/FilteredQuery.java	(revision 800911)
+++ src/java/org/apache/lucene/search/FilteredQuery.java	(working copy)
@@ -99,8 +99,8 @@
       public Query getQuery() { return FilteredQuery.this; }
 
       // return a filtering scorer
-       public Scorer scorer (IndexReader indexReader) throws IOException {
-        final Scorer scorer = weight.scorer(indexReader);
+       public Scorer scorer (IndexReader indexReader, boolean order, boolean top) throws IOException {
+        final Scorer scorer = weight.scorer(indexReader, true, false);
         final DocIdSetIterator docIdSetIterator = filter.getDocIdSet(indexReader).iterator();
 
         return new Scorer(similarity) {
Index: src/java/org/apache/lucene/search/IndexSearcher.java
===================================================================
--- src/java/org/apache/lucene/search/IndexSearcher.java	(revision 800911)
+++ src/java/org/apache/lucene/search/IndexSearcher.java	(working copy)
@@ -128,7 +128,7 @@
   public void search(Weight weight, Filter filter,
                      final HitCollector results) throws IOException {
 
-    Scorer scorer = weight.scorer(reader);
+    Scorer scorer = weight.scorer(reader, true, false);
     if (scorer == null)
       return;
 
Index: src/java/org/apache/lucene/search/MatchAllDocsQuery.java
===================================================================
--- src/java/org/apache/lucene/search/MatchAllDocsQuery.java	(revision 800911)
+++ src/java/org/apache/lucene/search/MatchAllDocsQuery.java	(working copy)
@@ -81,7 +81,7 @@
 
   }
 
-  private class MatchAllDocsWeight implements Weight {
+  private class MatchAllDocsWeight extends Weight {
     private Similarity similarity;
     private float queryWeight;
     private float queryNorm;
@@ -112,7 +112,7 @@
       queryWeight *= this.queryNorm;
     }
 
-    public Scorer scorer(IndexReader reader) {
+    public Scorer scorer(IndexReader reader, boolean order, boolean top) {
       return new MatchAllScorer(reader, similarity, this);
     }
 
Index: src/java/org/apache/lucene/search/MultiPhraseQuery.java
===================================================================
--- src/java/org/apache/lucene/search/MultiPhraseQuery.java	(revision 800911)
+++ src/java/org/apache/lucene/search/MultiPhraseQuery.java	(working copy)
@@ -124,7 +124,7 @@
   }
 
 
-  private class MultiPhraseWeight implements Weight {
+  private class MultiPhraseWeight extends Weight {
     private Similarity similarity;
     private float value;
     private float idf;
@@ -159,7 +159,7 @@
       value = queryWeight * idf;                  // idf for document 
     }
 
-    public Scorer scorer(IndexReader reader) throws IOException {
+    public Scorer scorer(IndexReader reader, boolean order, boolean top) throws IOException {
       if (termArrays.size() == 0)                  // optimize zero-term case
         return null;
 
@@ -218,7 +218,7 @@
       fieldExpl.setDescription("fieldWeight("+getQuery()+" in "+doc+
                                "), product of:");
 
-      Explanation tfExpl = scorer(reader).explain(doc);
+      Explanation tfExpl = scorer(reader, true, false).explain(doc);
       fieldExpl.addDetail(tfExpl);
       fieldExpl.addDetail(idfExpl);
 
Index: src/java/org/apache/lucene/search/PhraseQuery.java
===================================================================
--- src/java/org/apache/lucene/search/PhraseQuery.java	(revision 800911)
+++ src/java/org/apache/lucene/search/PhraseQuery.java	(working copy)
@@ -106,7 +106,7 @@
       return result;
   }
 
-  private class PhraseWeight implements Weight {
+  private class PhraseWeight extends Weight {
     private Similarity similarity;
     private float value;
     private float idf;
@@ -136,7 +136,7 @@
       value = queryWeight * idf;                  // idf for document 
     }
 
-    public Scorer scorer(IndexReader reader) throws IOException {
+    public Scorer scorer(IndexReader reader, boolean order, boolean top) throws IOException {
       if (terms.size() == 0)			  // optimize zero-term case
         return null;
 
@@ -209,7 +209,7 @@
       fieldExpl.setDescription("fieldWeight("+field+":"+query+" in "+doc+
                                "), product of:");
 
-      Explanation tfExpl = scorer(reader).explain(doc);
+      Explanation tfExpl = scorer(reader, true, false).explain(doc);
       fieldExpl.addDetail(tfExpl);
       fieldExpl.addDetail(idfExpl);
 
Index: src/java/org/apache/lucene/search/QueryWrapperFilter.java
===================================================================
--- src/java/org/apache/lucene/search/QueryWrapperFilter.java	(revision 800911)
+++ src/java/org/apache/lucene/search/QueryWrapperFilter.java	(working copy)
@@ -63,7 +63,7 @@
     final Weight weight = query.weight(new IndexSearcher(reader));
     return new DocIdSet() {
       public DocIdSetIterator iterator() throws IOException {
-        return weight.scorer(reader);
+        return weight.scorer(reader, true, false);
       }
     };
   }
Index: src/java/org/apache/lucene/search/TermQuery.java
===================================================================
--- src/java/org/apache/lucene/search/TermQuery.java	(revision 800911)
+++ src/java/org/apache/lucene/search/TermQuery.java	(working copy)
@@ -31,7 +31,7 @@
 public class TermQuery extends Query {
   private Term term;
 
-  private class TermWeight implements Weight {
+  private class TermWeight extends Weight {
     private Similarity similarity;
     private float value;
     private float idf;
@@ -60,7 +60,7 @@
       value = queryWeight * idf;                  // idf for document
     }
 
-    public Scorer scorer(IndexReader reader) throws IOException {
+    public Scorer scorer(IndexReader reader, boolean order, boolean top) throws IOException {
       TermDocs termDocs = reader.termDocs(term);
 
       if (termDocs == null)
@@ -104,7 +104,7 @@
       fieldExpl.setDescription("fieldWeight("+term+" in "+doc+
                                "), product of:");
 
-      Explanation tfExpl = scorer(reader).explain(doc);
+      Explanation tfExpl = scorer(reader, true, false).explain(doc);
       fieldExpl.addDetail(tfExpl);
       fieldExpl.addDetail(idfExpl);
 
Index: src/java/org/apache/lucene/search/Weight.java
===================================================================
--- src/java/org/apache/lucene/search/Weight.java	(revision 800911)
+++ src/java/org/apache/lucene/search/Weight.java	(working copy)
@@ -41,22 +41,23 @@
  * <li>A <code>Scorer</code> is constructed by {@link #scorer(IndexReader)}.
  * </ol>
  */
-public interface Weight extends java.io.Serializable {
+public abstract class Weight implements java.io.Serializable {
   /** The query that this concerns. */
-  Query getQuery();
+  public abstract Query getQuery();
 
   /** The weight for this query. */
-  float getValue();
+  public  abstract float getValue();
 
   /** The sum of squared weights of contained query clauses. */
-  float sumOfSquaredWeights() throws IOException;
+  public abstract float sumOfSquaredWeights() throws IOException;
 
   /** Assigns the query normalization factor to this. */
-  void normalize(float norm);
+  public abstract void normalize(float norm);
 
   /** Constructs a scorer for this. */
-  Scorer scorer(IndexReader reader) throws IOException;
+  public abstract Scorer scorer(IndexReader reader, boolean scoreDocsInOrder,
+      boolean topScorer) throws IOException;
 
   /** An explanation of the score computation for the named document. */
-  Explanation explain(IndexReader reader, int doc) throws IOException;
+  public abstract Explanation explain(IndexReader reader, int doc) throws IOException;
 }
Index: src/java/org/apache/lucene/search/function/CustomScoreQuery.java
===================================================================
--- src/java/org/apache/lucene/search/function/CustomScoreQuery.java	(revision 800911)
+++ src/java/org/apache/lucene/search/function/CustomScoreQuery.java	(working copy)
@@ -271,7 +271,7 @@
 
   //=========================== W E I G H T ============================
   
-  private class CustomWeight implements Weight {
+  private class CustomWeight extends Weight {
     Similarity similarity;
     Weight subQueryWeight;
     Weight[] valSrcWeights;
@@ -326,18 +326,18 @@
     }
 
     /*(non-Javadoc) @see org.apache.lucene.search.Weight#scorer(org.apache.lucene.index.IndexReader) */
-    public Scorer scorer(IndexReader reader) throws IOException {
-      Scorer subQueryScorer = subQueryWeight.scorer(reader);
+    public Scorer scorer(IndexReader reader, boolean order, boolean top) throws IOException {
+      Scorer subQueryScorer = subQueryWeight.scorer(reader, true, false);
       Scorer[] valSrcScorers = new Scorer[valSrcWeights.length];
       for(int i = 0; i < valSrcScorers.length; i++) {
-         valSrcScorers[i] = valSrcWeights[i].scorer(reader);
+         valSrcScorers[i] = valSrcWeights[i].scorer(reader, true, false);
       }
       return new CustomScorer(similarity, reader, this, subQueryScorer, valSrcScorers);
     }
 
     /*(non-Javadoc) @see org.apache.lucene.search.Weight#explain(org.apache.lucene.index.IndexReader, int) */
     public Explanation explain(IndexReader reader, int doc) throws IOException {
-      return scorer(reader).explain(doc);
+      return scorer(reader, true, false).explain(doc);
     }
   }
 
Index: src/java/org/apache/lucene/search/function/ValueSourceQuery.java
===================================================================
--- src/java/org/apache/lucene/search/function/ValueSourceQuery.java	(revision 800911)
+++ src/java/org/apache/lucene/search/function/ValueSourceQuery.java	(working copy)
@@ -59,7 +59,7 @@
     // no terms involved here
   }
 
-  private class ValueSourceWeight implements Weight {
+  private class ValueSourceWeight extends Weight {
     Similarity similarity;
     float queryNorm;
     float queryWeight;
@@ -91,13 +91,13 @@
     }
 
     /*(non-Javadoc) @see org.apache.lucene.search.Weight#scorer(org.apache.lucene.index.IndexReader) */
-    public Scorer scorer(IndexReader reader) throws IOException {
+    public Scorer scorer(IndexReader reader, boolean order, boolean top) throws IOException {
       return new ValueSourceScorer(similarity, reader, this);
     }
 
     /*(non-Javadoc) @see org.apache.lucene.search.Weight#explain(org.apache.lucene.index.IndexReader, int) */
     public Explanation explain(IndexReader reader, int doc) throws IOException {
-      return scorer(reader).explain(doc);
+      return scorer(reader, true, false).explain(doc);
     }
   }
 
Index: src/java/org/apache/lucene/search/payloads/BoostingTermQuery.java
===================================================================
--- src/java/org/apache/lucene/search/payloads/BoostingTermQuery.java	(revision 800911)
+++ src/java/org/apache/lucene/search/payloads/BoostingTermQuery.java	(working copy)
@@ -51,7 +51,7 @@
     return new BoostingTermWeight(this, searcher);
   }
 
-  protected class BoostingTermWeight extends SpanWeight implements Weight {
+  protected class BoostingTermWeight extends SpanWeight {
 
 
     public BoostingTermWeight(BoostingTermQuery query, Searcher searcher) throws IOException {
Index: src/java/org/apache/lucene/search/spans/SpanWeight.java
===================================================================
--- src/java/org/apache/lucene/search/spans/SpanWeight.java	(revision 800911)
+++ src/java/org/apache/lucene/search/spans/SpanWeight.java	(working copy)
@@ -29,7 +29,7 @@
 /**
  * Expert-only.  Public for use by other weight implementations
  */
-public class SpanWeight implements Weight {
+public class SpanWeight extends Weight {
   protected Similarity similarity;
   protected float value;
   protected float idf;
@@ -63,7 +63,7 @@
     value = queryWeight * idf;                    // idf for document
   }
 
-  public Scorer scorer(IndexReader reader) throws IOException {
+  public Scorer scorer(IndexReader reader, boolean order, boolean top) throws IOException {
     return new SpanScorer(query.getSpans(reader), this,
                           similarity,
                           reader.norms(query.getField()));
@@ -115,7 +115,7 @@
     fieldExpl.setDescription("fieldWeight("+field+":"+query.toString(field)+
                              " in "+doc+"), product of:");
 
-    Explanation tfExpl = scorer(reader).explain(doc);
+    Explanation tfExpl = scorer(reader, true, false).explain(doc);
     fieldExpl.addDetail(tfExpl);
     fieldExpl.addDetail(idfExpl);
 
Index: src/test/org/apache/lucene/search/QueryUtils.java
===================================================================
--- src/test/org/apache/lucene/search/QueryUtils.java	(revision 800911)
+++ src/test/org/apache/lucene/search/QueryUtils.java	(working copy)
@@ -145,7 +145,7 @@
       final int opidx[] = {0};
 
       final Weight w = q.weight(s);
-      final Scorer scorer = w.scorer(s.getIndexReader());
+      final Scorer scorer = w.scorer(s.getIndexReader(), true, false);
       if (scorer == null) {
         continue;
       }
@@ -206,7 +206,7 @@
         try {
           for (int i=lastDoc[0]+1; i<=doc; i++) {
             Weight w = q.weight(s);
-            Scorer scorer = w.scorer(s.getIndexReader());
+            Scorer scorer = w.scorer(s.getIndexReader(), true, false);
             TestCase.assertTrue("query collected "+doc+" but skipTo("+i+") says no more docs!",scorer.skipTo(i));
             TestCase.assertEquals("query collected "+doc+" but skipTo("+i+") got to "+scorer.doc(),doc,scorer.doc());
             float skipToScore = scorer.score();
@@ -220,7 +220,7 @@
       }
     });
     Weight w = q.weight(s);
-    Scorer scorer = w.scorer(s.getIndexReader());
+    Scorer scorer = w.scorer(s.getIndexReader(), true, false);
     if (scorer != null) {
       boolean more = scorer.skipTo(lastDoc[0]+1);
       if (more) 
Index: src/test/org/apache/lucene/search/TestDisjunctionMaxQuery.java
===================================================================
--- src/test/org/apache/lucene/search/TestDisjunctionMaxQuery.java	(revision 800911)
+++ src/test/org/apache/lucene/search/TestDisjunctionMaxQuery.java	(working copy)
@@ -135,7 +135,7 @@
     QueryUtils.check(dq,s);
 
     final Weight dw = dq.weight(s);
-    final Scorer ds = dw.scorer(r);
+    final Scorer ds = dw.scorer(r, true, false);
     final boolean skipOk = ds.skipTo(3);
     if (skipOk) {
       fail("firsttime skipTo found a match? ... " + 
@@ -151,7 +151,7 @@
     QueryUtils.check(dq,s);
 
     final Weight dw = dq.weight(s);
-    final Scorer ds = dw.scorer(r);
+    final Scorer ds = dw.scorer(r, true, false);
     assertTrue("firsttime skipTo found no match", ds.skipTo(3));
     assertEquals("found wrong docid", "d4", r.document(ds.doc()).get("id"));
   }
Index: src/test/org/apache/lucene/search/spans/TestNearSpansOrdered.java
===================================================================
--- src/test/org/apache/lucene/search/spans/TestNearSpansOrdered.java	(revision 800911)
+++ src/test/org/apache/lucene/search/spans/TestNearSpansOrdered.java	(working copy)
@@ -164,7 +164,7 @@
   public void testSpanNearScorerSkipTo1() throws Exception {
     SpanNearQuery q = makeQuery();
     Weight w = q.createWeight(searcher);
-    Scorer s = w.scorer(searcher.getIndexReader());
+    Scorer s = w.scorer(searcher.getIndexReader(), true, false);
     assertEquals(true, s.skipTo(1));
     assertEquals(1, s.doc());
   }
@@ -175,7 +175,7 @@
   public void testSpanNearScorerExplain() throws Exception {
     SpanNearQuery q = makeQuery();
     Weight w = q.createWeight(searcher);
-    Scorer s = w.scorer(searcher.getIndexReader());
+    Scorer s = w.scorer(searcher.getIndexReader(), true, false);
     Explanation e = s.explain(1);
     assertTrue("Scorer explanation value for doc#1 isn't positive: "
                + e.toString(),
Index: src/test/org/apache/lucene/search/spans/TestSpans.java
===================================================================
--- src/test/org/apache/lucene/search/spans/TestSpans.java	(revision 800911)
+++ src/test/org/apache/lucene/search/spans/TestSpans.java	(working copy)
@@ -386,7 +386,7 @@
       }
     };
 
-    Scorer spanScorer = snq.weight(searcher).scorer(searcher.getIndexReader());
+    Scorer spanScorer = snq.weight(searcher).scorer(searcher.getIndexReader(), true, false);
 
     assertTrue("first doc", spanScorer.next());
     assertEquals("first doc number", spanScorer.doc(), 11);

