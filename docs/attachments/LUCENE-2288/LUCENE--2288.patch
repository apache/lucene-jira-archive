Index: contrib/analyzers/common/src/java/org/tartarus/snowball/Among.java
===================================================================
--- contrib/analyzers/common/src/java/org/tartarus/snowball/Among.java	(revision 917047)
+++ contrib/analyzers/common/src/java/org/tartarus/snowball/Among.java	(working copy)
@@ -34,6 +34,7 @@
 import java.lang.reflect.Method;
 
 public class Among {
+    private static final Class<?>[] EMPTY_PARAMS = new Class[0];
     public Among (String s, int substring_i, int result,
 		  String methodname, SnowballProgram methodobject) {
         this.s_size = s.length();
@@ -46,7 +47,7 @@
 	} else {
 	    try {
 		this.method = methodobject.getClass().
-		getDeclaredMethod(methodname, new Class[0]);
+		getDeclaredMethod(methodname, EMPTY_PARAMS);
 	    } catch (NoSuchMethodException e) {
 		throw new RuntimeException(e);
 	    }
Index: contrib/analyzers/common/src/java/org/tartarus/snowball/SnowballProgram.java
===================================================================
--- contrib/analyzers/common/src/java/org/tartarus/snowball/SnowballProgram.java	(revision 917047)
+++ contrib/analyzers/common/src/java/org/tartarus/snowball/SnowballProgram.java	(working copy)
@@ -46,6 +46,8 @@
  * eq_s,eq_s_b,insert,replace_s take CharSequence like eq_v and eq_v_b
  */
 public abstract class SnowballProgram {
+    private static final Object[] EMPTY_ARGS = new Object[0];
+
     protected SnowballProgram()
     {
 	current = new char[8];
@@ -337,8 +339,7 @@
 		if (w.method == null) return w.result;
 		boolean res;
 		try {
-		    Object resobj = w.method.invoke(w.methodobject,
-						    new Object[0]);
+		    Object resobj = w.method.invoke(w.methodobject, EMPTY_ARGS);
 		    res = resobj.toString().equals("true");
 		} catch (InvocationTargetException e) {
 		    res = false;
@@ -406,8 +407,7 @@
 
 		boolean res;
 		try {
-		    Object resobj = w.method.invoke(w.methodobject,
-						    new Object[0]);
+		    Object resobj = w.method.invoke(w.methodobject, EMPTY_ARGS);
 		    res = resobj.toString().equals("true");
 		} catch (InvocationTargetException e) {
 		    res = false;
