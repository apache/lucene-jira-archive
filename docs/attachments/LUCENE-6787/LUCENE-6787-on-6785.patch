commit c93f316a034185433e712af479d2246589955bd0
Author: Terry Smith <terry@shebiki.org>
Date:   Tue Sep 8 15:39:43 2015 -0400

    Teaches BooleanQuery.rewrite() how to drop duplicate non-scoring
    clauses.

diff --git a/lucene/core/src/java/org/apache/lucene/search/BooleanQuery.java b/lucene/core/src/java/org/apache/lucene/search/BooleanQuery.java
index fb5f7c8..629c7c7 100644
--- a/lucene/core/src/java/org/apache/lucene/search/BooleanQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/BooleanQuery.java
@@ -21,9 +21,11 @@ import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
+import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Objects;
+import java.util.Set;
 
 import org.apache.lucene.search.BooleanClause.Occur;
 import org.apache.lucene.search.similarities.Similarity;
@@ -210,9 +212,14 @@ public class BooleanQuery extends Query implements Iterable<BooleanClause> {
     }
 
     List<Weight> subweights = new ArrayList<>();
+    final Set<BooleanClause> nonScoring = new HashSet<>(clauses.size());
     Builder builder = new Builder();
     for (BooleanClause clause : query) {
       Weight w = searcher.createWeight(clause.getQuery(), needsScores);
+      if (!clause.isScoring() && !nonScoring.add(new BooleanClause(w.getQuery(), clause.getOccur()))) {
+        // Drop this duplicate MUST_NOT or FILTER clause
+        continue;
+      }
       subweights.add(w);
       builder.add(w.getQuery(), clause.getOccur());
     }
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery.java b/lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery.java
index ef99f5b..5000639 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery.java
@@ -763,4 +763,60 @@ public class TestBooleanQuery extends LuceneTestCase {
     searcher.createNormalizedWeight(bq, false).extractTerms(matchingTerms);
     assertEquals(new HashSet<>(Arrays.asList(a, b, c)), matchingTerms);
   }
+
+  public void testRewriteToString() throws IOException {
+    try (Directory directory = newDirectory()) {
+      try (IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(null))) {
+        // Just need an empty index so we can create an IndexSearcher below
+      }
+      try (IndexReader indexReader = DirectoryReader.open(directory)) {
+        IndexSearcher searcher = newSearcher(indexReader);
+        Query query = new BooleanQuery.Builder()
+            .add(new TermQuery(new Term("field", "a")), Occur.SHOULD)
+            .add(new TermQuery(new Term("field", "b")), Occur.MUST)
+            .add(new TermQuery(new Term("field", "c")), Occur.MUST_NOT)
+            .add(new TermQuery(new Term("field", "d")), Occur.FILTER)
+            .build();
+        assertEquals("a +b -c #d", query.createWeight(searcher, true).getQuery().toString("field"));
+      }
+    }
+  }
+
+  public void testRewriteWithDuplicatesToString() throws IOException {
+    try (Directory directory = newDirectory()) {
+      try (IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(null))) {
+        // Just need an empty index so we can create an IndexSearcher below
+      }
+      try (IndexReader indexReader = DirectoryReader.open(directory)) {
+        IndexSearcher searcher = newSearcher(indexReader);
+        Query query = new BooleanQuery.Builder()
+            .add(new TermQuery(new Term("field", "a")), Occur.SHOULD)
+            .add(new TermQuery(new Term("field", "b")), Occur.MUST)
+            .add(new TermQuery(new Term("field", "c")), Occur.MUST_NOT)
+            .add(new TermQuery(new Term("field", "d")), Occur.FILTER)
+            .add(new TermQuery(new Term("field", "a")), Occur.SHOULD)
+            .add(new TermQuery(new Term("field", "b")), Occur.MUST)
+            .add(new TermQuery(new Term("field", "c")), Occur.MUST_NOT)
+            .add(new TermQuery(new Term("field", "d")), Occur.FILTER)
+            .build();
+        assertEquals("a +b -c #d a +b", query.createWeight(searcher, true).getQuery().toString("field"));
+      }
+    }
+  }
+
+  public void testRewriteWithDuplicatesReallyOneClauseToString() throws IOException {
+    try (Directory directory = newDirectory()) {
+      try (IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(null))) {
+        // Just need an empty index so we can create an IndexSearcher below
+      }
+      try (IndexReader indexReader = DirectoryReader.open(directory)) {
+        IndexSearcher searcher = newSearcher(indexReader);
+        Query query = new BooleanQuery.Builder()
+            .add(new TermQuery(new Term("field", "a")), Occur.FILTER)
+            .add(new TermQuery(new Term("field", "a")), Occur.FILTER)
+            .build();
+        assertEquals("#a", query.createWeight(searcher, true).getQuery().toString("field"));
+      }
+    }
+  }
 }
