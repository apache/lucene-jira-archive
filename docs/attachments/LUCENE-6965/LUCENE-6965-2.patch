Index: lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler.java
===================================================================
--- lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler.java	(revision 1723636)
+++ lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler.java	(working copy)
@@ -249,7 +249,7 @@
         EVALUATE_METHOD, null, null, classWriter);
     
     // to completely hide the ANTLR visitor we use an anonymous impl:
-    JavascriptBaseVisitor<Void> visitor = new JavascriptBaseVisitor<Void>() {
+    new JavascriptBaseVisitor<Void>() {
       private final Deque<Type> typeStack = new ArrayDeque<>();
 
       @Override
@@ -295,9 +295,10 @@
           int arity = method.getParameterTypes().length;
 
           if (arguments != arity) {
-            throw new ParseRuntimeException(
-                "Expected (" + arity + ") arguments for function call (" + text + "), but found (" + arguments + ").", 
-                ctx.start.getStartIndex());
+            throwChecked(new ParseException(
+                "Invalid expression '" + sourceText + "': Expected (" + 
+                arity + ") arguments for function call (" + text + "), but found (" + arguments + ").", 
+                ctx.start.getStartIndex()));
           }
 
           typeStack.push(Type.DOUBLE_TYPE);
@@ -331,7 +332,8 @@
           gen.invokeVirtual(FUNCTION_VALUES_TYPE, DOUBLE_VAL_METHOD);
           gen.cast(Type.DOUBLE_TYPE, typeStack.peek());
         } else {
-          throw new ParseRuntimeException("Unrecognized function call (" + text + ").", ctx.start.getStartIndex());
+          throwChecked(new ParseException("Invalid expression '" + sourceText + "': Unrecognized function call (" +
+              text + ").", ctx.start.getStartIndex()));
         }
 
         return null;
@@ -622,16 +624,18 @@
             throw new IllegalStateException("Invalid expected type: " + typeStack.peek());
         }
       }
-    };
+      
+      /** Needed to throw checked ParseException in this visitor (that does not allow it). */
+      private void throwChecked(Throwable t) {
+        this.<Error>throwChecked0(t);
+      }
+      
+      @SuppressWarnings("unchecked")
+      private <T extends Throwable> void throwChecked0(Throwable t) throws T {
+        throw (T) t;
+      }
+    }.visit(parseTree);
     
-    try {
-      visitor.visit(parseTree);
-    } catch (final ParseRuntimeException e) {
-      ParseException exception = new ParseException("Invalid expression '" + sourceText + "': " + e.getMessage(), e.position);
-      exception.initCause(e);
-      throw exception;
-    }
-    
     gen.returnValue();
     gen.endMethod();
     
@@ -712,17 +716,7 @@
     }
     DEFAULT_FUNCTIONS = Collections.unmodifiableMap(map);
   }
-  
-  @SuppressWarnings("serial")
-  private final static class ParseRuntimeException extends RuntimeException {
-    final int position;
-    public ParseRuntimeException(String msg, int position) {
-      super(msg);
-      this.position = position;
-    }
     
-  }
-    
   /** Check Method signature for compatibility. */
   private static void checkFunction(Method method) {
     // check that the Method is public in some public reachable class:
Index: lucene/expressions/src/test/org/apache/lucene/expressions/js/TestCustomFunctions.java
===================================================================
--- lucene/expressions/src/test/org/apache/lucene/expressions/js/TestCustomFunctions.java	(revision 1723633)
+++ lucene/expressions/src/test/org/apache/lucene/expressions/js/TestCustomFunctions.java	(working copy)
@@ -105,7 +105,6 @@
       //expected
       assertEquals("Invalid expression 'method()': Unrecognized function call (method).", expected.getMessage());
       assertEquals(0, expected.getErrorOffset());
-      assertTrue(expected.getCause() != null && expected.getCause() != expected);
     }
 
     try {
