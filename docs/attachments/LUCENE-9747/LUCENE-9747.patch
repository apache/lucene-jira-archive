diff --git a/dev-tools/missing-doclet/src/main/java/org/apache/lucene/missingdoclet/MissingDoclet.java b/dev-tools/missing-doclet/src/main/java/org/apache/lucene/missingdoclet/MissingDoclet.java
index 89c205f0973..a1ef2a4b5d3 100644
--- a/dev-tools/missing-doclet/src/main/java/org/apache/lucene/missingdoclet/MissingDoclet.java
+++ b/dev-tools/missing-doclet/src/main/java/org/apache/lucene/missingdoclet/MissingDoclet.java
@@ -50,7 +50,7 @@ import jdk.javadoc.doclet.StandardDoclet;
 /**
  * Checks for missing javadocs, where missing also means "only whitespace" or "license header".
  * Has option --missing-level (package, class, method, parameter) so that we can improve over time.
- * Has option --missing-ignore to ignore individual elements (such as split packages). 
+ * Has option --missing-ignore to ignore individual elements (such as split packages).
  *   It isn't recursive, just ignores exactly the elements you tell it.
  *   This should be removed when packaging is fixed to no longer be split across JARs.
  * Has option --missing-method to apply "method" level to selected packages (fix one at a time).
@@ -72,7 +72,7 @@ public class MissingDoclet extends StandardDoclet {
   Elements elementUtils;
   Set<String> ignored = Collections.emptySet();
   Set<String> methodPackages = Collections.emptySet();
-  
+
   @Override
   public Set<Doclet.Option> getSupportedOptions() {
     Set<Doclet.Option> options = new HashSet<>();
@@ -207,7 +207,7 @@ public class MissingDoclet extends StandardDoclet {
 
     return super.run(docEnv);
   }
-  
+
   /**
    * Returns effective check level for this element
    */
@@ -219,8 +219,8 @@ public class MissingDoclet extends StandardDoclet {
       return level;
     }
   }
-  
-  /** 
+
+  /**
    * Check an individual element.
    * This checks packages and types from the doctrees.
    * It will recursively check methods/fields from encountered types when the level is "method"
@@ -245,9 +245,9 @@ public class MissingDoclet extends StandardDoclet {
           checkComment(element);
           for (var subElement : element.getEnclosedElements()) {
             // don't recurse into enclosed types, otherwise we'll double-check since they are already in the included docTree
-            if (subElement.getKind() == ElementKind.METHOD || 
-                subElement.getKind() == ElementKind.CONSTRUCTOR || 
-                subElement.getKind() == ElementKind.FIELD || 
+            if (subElement.getKind() == ElementKind.METHOD ||
+                subElement.getKind() == ElementKind.CONSTRUCTOR ||
+                subElement.getKind() == ElementKind.FIELD ||
                 subElement.getKind() == ElementKind.ENUM_CONSTANT) {
               check(subElement);
             }
@@ -282,7 +282,7 @@ public class MissingDoclet extends StandardDoclet {
     }
     return false;
   }
-  
+
   /**
    * Checks that an element doesn't have missing javadocs.
    * In addition to truly "missing", check that comments aren't solely whitespace (generated by some IDEs),
@@ -402,7 +402,7 @@ public class MissingDoclet extends StandardDoclet {
       }
     }
   }
-  
+
   /** logs a new error for the particular element */
   private void error(Element element, String message) {
     var fullMessage = new StringBuilder();
@@ -430,6 +430,11 @@ public class MissingDoclet extends StandardDoclet {
     fullMessage.append(element.getKind().toString().toLowerCase(Locale.ROOT));
     fullMessage.append("): ");
     fullMessage.append(message);
-    reporter.print(Diagnostic.Kind.ERROR, element, fullMessage.toString());
+    if (((element.getKind() == ElementKind.PACKAGE) && (fullMessage.toString().contains("javadocs are missing")))){
+      reporter.print(Diagnostic.Kind.ERROR, fullMessage.toString());
+    }
+    else {
+      reporter.print(Diagnostic.Kind.ERROR, element, fullMessage.toString());
+    }
   }
 }
