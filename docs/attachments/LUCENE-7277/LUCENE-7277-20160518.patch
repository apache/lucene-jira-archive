diff --git a/lucene/core/src/java/org/apache/lucene/search/BlendedTermQuery.java b/lucene/core/src/java/org/apache/lucene/search/BlendedTermQuery.java
index c0ac6bb..8437416 100644
--- a/lucene/core/src/java/org/apache/lucene/search/BlendedTermQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/BlendedTermQuery.java
@@ -225,7 +225,7 @@ public final class BlendedTermQuery extends Query {
 
   @Override
   public boolean equals(Object obj) {
-    if (super.equals(obj) == false) {
+    if (! sameClassAs(obj)) {
       return false;
     }
     BlendedTermQuery that = (BlendedTermQuery) obj;
@@ -237,7 +237,7 @@ public final class BlendedTermQuery extends Query {
 
   @Override
   public int hashCode() {
-    int h = super.hashCode();
+    int h = getClass().hashCode();
     h = 31 * h + Arrays.hashCode(terms);
     h = 31 * h + Arrays.hashCode(contexts);
     h = 31 * h + Arrays.hashCode(boosts);
diff --git a/lucene/core/src/java/org/apache/lucene/search/BooleanQuery.java b/lucene/core/src/java/org/apache/lucene/search/BooleanQuery.java
index 4699df4..3371b50 100644
--- a/lucene/core/src/java/org/apache/lucene/search/BooleanQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/BooleanQuery.java
@@ -421,17 +421,18 @@ public class BooleanQuery extends Query implements Iterable<BooleanClause> {
    */
   @Override
   public boolean equals(Object o) {
-    if (super.equals(o) == false) {
-      return false;
+    return sameClassAs(o) &&
+           equalsTo(getClass().cast(o));
   }
-    BooleanQuery that = (BooleanQuery)o;
-    return this.getMinimumNumberShouldMatch() == that.getMinimumNumberShouldMatch()
-        && this.disableCoord == that.disableCoord
-        && clauseSets.equals(that.clauseSets);
+
+  private boolean equalsTo(BooleanQuery other) {
+    return getMinimumNumberShouldMatch() == other.getMinimumNumberShouldMatch() && 
+           disableCoord == other.disableCoord &&
+           clauseSets.equals(other.clauseSets);
   }
 
   private int computeHashCode() {
-    int hashCode = 31 * super.hashCode() + Objects.hash(disableCoord, minimumNumberShouldMatch, clauseSets);
+    int hashCode = Objects.hash(disableCoord, minimumNumberShouldMatch, clauseSets);
     if (hashCode == 0) {
       hashCode = 1;
     }
@@ -443,8 +444,8 @@ public class BooleanQuery extends Query implements Iterable<BooleanClause> {
 
   @Override
   public int hashCode() {
+    // no need for synchronization, in the worst case we would just compute the hash several times.
     if (hashCode == 0) {
-      // no need for synchronization, in the worst case we would just compute the hash several times
       hashCode = computeHashCode();
       assert hashCode != 0;
     }
diff --git a/lucene/core/src/java/org/apache/lucene/search/BoostQuery.java b/lucene/core/src/java/org/apache/lucene/search/BoostQuery.java
index c7d0aea..93c739f 100644
--- a/lucene/core/src/java/org/apache/lucene/search/BoostQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/BoostQuery.java
@@ -59,7 +59,7 @@ public final class BoostQuery extends Query {
 
   @Override
   public boolean equals(Object obj) {
-    if (super.equals(obj) == false) {
+    if (! sameClassAs(obj)) {
       return false;
     }
     BoostQuery that = (BoostQuery) obj;
@@ -69,7 +69,7 @@ public final class BoostQuery extends Query {
 
   @Override
   public int hashCode() {
-    int h = super.hashCode();
+    int h = getClass().hashCode();
     h = 31 * h + query.hashCode();
     h = 31 * h + Float.floatToIntBits(boost);
     return h;
diff --git a/lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery.java b/lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery.java
index 4ca80e2..7924bcf 100644
--- a/lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery.java
@@ -163,19 +163,16 @@ public final class ConstantScoreQuery extends Query {
 
   @Override
   public boolean equals(Object o) {
-    if (this == o) return true;
-    if (!super.equals(o))
+    if (! sameClassAs(o)) {
       return false;
-    if (o instanceof ConstantScoreQuery) {
-      final ConstantScoreQuery other = (ConstantScoreQuery) o;
-      return this.query.equals(other.query);
     }
-    return false;
+    final ConstantScoreQuery other = (ConstantScoreQuery) o;
+    return query.equals(other.query);
   }
 
   @Override
   public int hashCode() {
-    return 31 * super.hashCode() + query.hashCode();
+    return 31 * getClass().hashCode() + query.hashCode();
   }
 
 }
diff --git a/lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.java b/lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.java
index 9bcd05f..7884b0b 100644
--- a/lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.java
@@ -248,7 +248,7 @@ public final class DisjunctionMaxQuery extends Query implements Iterable<Query>
   public boolean equals(Object o) {
     if (! (o instanceof DisjunctionMaxQuery) ) return false;
     DisjunctionMaxQuery other = (DisjunctionMaxQuery)o;
-    return super.equals(o)
+    return sameClassAs(o)
             && this.tieBreakerMultiplier == other.tieBreakerMultiplier
             && Arrays.equals(disjuncts, other.disjuncts);
   }
@@ -258,7 +258,7 @@ public final class DisjunctionMaxQuery extends Query implements Iterable<Query>
    */
   @Override
   public int hashCode() {
-    int h = super.hashCode();
+    int h = getClass().hashCode();
     h = 31 * h + Float.floatToIntBits(tieBreakerMultiplier);
     h = 31 * h + Arrays.hashCode(disjuncts);
     return h;
diff --git a/lucene/core/src/java/org/apache/lucene/search/DocValuesRewriteMethod.java b/lucene/core/src/java/org/apache/lucene/search/DocValuesRewriteMethod.java
index 0c544e3..77f912f 100644
--- a/lucene/core/src/java/org/apache/lucene/search/DocValuesRewriteMethod.java
+++ b/lucene/core/src/java/org/apache/lucene/search/DocValuesRewriteMethod.java
@@ -60,7 +60,7 @@ public final class DocValuesRewriteMethod extends MultiTermQuery.RewriteMethod {
     
     @Override
     public final boolean equals(final Object o) {
-      if (super.equals(o) == false) {
+      if (! sameClassAs(o)) {
         return false;
       }
       MultiTermQueryDocValuesWrapper that = (MultiTermQueryDocValuesWrapper) o;
@@ -69,7 +69,7 @@ public final class DocValuesRewriteMethod extends MultiTermQuery.RewriteMethod {
     
     @Override
     public final int hashCode() {
-      return 31 * super.hashCode() + query.hashCode();
+      return 31 * getClass().hashCode() + query.hashCode();
     }
     
     /** Returns the field name for this query */
diff --git a/lucene/core/src/java/org/apache/lucene/search/FieldValueQuery.java b/lucene/core/src/java/org/apache/lucene/search/FieldValueQuery.java
index 4bc081c..12e76b6 100644
--- a/lucene/core/src/java/org/apache/lucene/search/FieldValueQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/FieldValueQuery.java
@@ -44,7 +44,7 @@ public final class FieldValueQuery extends Query {
 
   @Override
   public boolean equals(Object obj) {
-    if (super.equals(obj) == false) {
+    if (! sameClassAs(obj)) {
       return false;
     }
     final FieldValueQuery that = (FieldValueQuery) obj;
@@ -53,7 +53,7 @@ public final class FieldValueQuery extends Query {
 
   @Override
   public int hashCode() {
-    return 31 * super.hashCode() + field.hashCode();
+    return 31 * getClass().hashCode() + field.hashCode();
   }
 
   @Override
diff --git a/lucene/core/src/java/org/apache/lucene/search/MatchAllDocsQuery.java b/lucene/core/src/java/org/apache/lucene/search/MatchAllDocsQuery.java
index 4f62f74..4069c19 100644
--- a/lucene/core/src/java/org/apache/lucene/search/MatchAllDocsQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/MatchAllDocsQuery.java
@@ -71,4 +71,14 @@ public final class MatchAllDocsQuery extends Query {
   public String toString(String field) {
     return "*:*";
   }
+
+  @Override
+  public boolean equals(Object o) {
+    return sameClassAs(o);
+  }
+
+  @Override
+  public int hashCode() {
+    return getClass().hashCode();
+  }
 }
diff --git a/lucene/core/src/java/org/apache/lucene/search/MatchNoDocsQuery.java b/lucene/core/src/java/org/apache/lucene/search/MatchNoDocsQuery.java
index d0bc18c..6c98ae2 100644
--- a/lucene/core/src/java/org/apache/lucene/search/MatchNoDocsQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/MatchNoDocsQuery.java
@@ -25,7 +25,6 @@ import org.apache.lucene.index.IndexReader;
      * A query that matches no documents.
  */
 public class MatchNoDocsQuery extends Query {
-
   @Override
   public Query rewrite(IndexReader reader) throws IOException {
     // Rewrite to an empty BooleanQuery so no Scorer or Weight is required
@@ -36,4 +35,14 @@ public class MatchNoDocsQuery extends Query {
   public String toString(String field) {
       return "";
   }
+
+  @Override
+  public boolean equals(Object o) {
+    return sameClassAs(o);
+  }
+
+  @Override
+  public int hashCode() {
+    return getClass().hashCode();
+  }
 }
diff --git a/lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.java b/lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.java
index d703ebd..debcf97 100644
--- a/lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.java
@@ -384,7 +384,7 @@ public class MultiPhraseQuery extends Query {
   /** Returns true if <code>o</code> is equal to this. */
   @Override
   public boolean equals(Object o) {
-    if (super.equals(o) == false) {
+    if (! sameClassAs(o)) {
       return false;
     }
     MultiPhraseQuery other = (MultiPhraseQuery)o;
@@ -396,7 +396,7 @@ public class MultiPhraseQuery extends Query {
   /** Returns a hash code value for this object.*/
   @Override
   public int hashCode() {
-    return super.hashCode()
+    return getClass().hashCode()
       ^ slop
       ^ termArraysHashCode() // terms equal implies field equal
       ^ Arrays.hashCode(positions);
diff --git a/lucene/core/src/java/org/apache/lucene/search/MultiTermQuery.java b/lucene/core/src/java/org/apache/lucene/search/MultiTermQuery.java
index 6b5c65f..27ba542 100644
--- a/lucene/core/src/java/org/apache/lucene/search/MultiTermQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/MultiTermQuery.java
@@ -332,27 +332,20 @@ public abstract class MultiTermQuery extends Query {
   @Override
   public int hashCode() {
     final int prime = 31;
-    int result = 1;
+    int result = getClass().hashCode();
     result = prime * result + rewriteMethod.hashCode();
-    if (field != null) result = prime * result + field.hashCode();
+    result = prime * result + field.hashCode();
     return result;
   }
 
   @Override
   public boolean equals(Object obj) {
-    if (this == obj)
-      return true;
-    if (obj == null)
-      return false;
-    if (getClass() != obj.getClass())
-      return false;
-    MultiTermQuery other = (MultiTermQuery) obj;
-    if (!super.equals(obj))
-      return false;
-    if (!rewriteMethod.equals(other.rewriteMethod)) {
+    if (! sameClassAs(obj)) {
       return false;
     }
-    return (other.field == null ? field == null : other.field.equals(field));
+    MultiTermQuery other = (MultiTermQuery) obj;
+    return rewriteMethod.equals(other.rewriteMethod)
+        && field.equals(other.field);
   }
  
 }
diff --git a/lucene/core/src/java/org/apache/lucene/search/MultiTermQueryConstantScoreWrapper.java b/lucene/core/src/java/org/apache/lucene/search/MultiTermQueryConstantScoreWrapper.java
index eb7436f..965a25e 100644
--- a/lucene/core/src/java/org/apache/lucene/search/MultiTermQueryConstantScoreWrapper.java
+++ b/lucene/core/src/java/org/apache/lucene/search/MultiTermQueryConstantScoreWrapper.java
@@ -92,7 +92,7 @@ final class MultiTermQueryConstantScoreWrapper<Q extends MultiTermQuery> extends
 
   @Override
   public final boolean equals(final Object o) {
-    if (super.equals(o) == false) {
+    if (! sameClassAs(o)) {
       return false;
     }
     final MultiTermQueryConstantScoreWrapper<?> that = (MultiTermQueryConstantScoreWrapper<?>) o;
@@ -101,7 +101,7 @@ final class MultiTermQueryConstantScoreWrapper<Q extends MultiTermQuery> extends
 
   @Override
   public final int hashCode() {
-    return 31 * super.hashCode() + query.hashCode();
+    return 31 * getClass().hashCode() + query.hashCode();
   }
 
   /** Returns the encapsulated query */
diff --git a/lucene/core/src/java/org/apache/lucene/search/NGramPhraseQuery.java b/lucene/core/src/java/org/apache/lucene/search/NGramPhraseQuery.java
index e6f085c..b6f2046 100644
--- a/lucene/core/src/java/org/apache/lucene/search/NGramPhraseQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/NGramPhraseQuery.java
@@ -79,7 +79,7 @@ public class NGramPhraseQuery extends Query {
 
   @Override
   public boolean equals(Object o) {
-    if (super.equals(o) == false) {
+    if (! sameClassAs(o)) {
       return false;
     }
     NGramPhraseQuery other = (NGramPhraseQuery) o;
@@ -88,7 +88,7 @@ public class NGramPhraseQuery extends Query {
 
   @Override
   public int hashCode() {
-    int h = super.hashCode();
+    int h = getClass().hashCode();
     h = 31 * h + phraseQuery.hashCode();
     h = 31 * h + n;
     return h;
diff --git a/lucene/core/src/java/org/apache/lucene/search/PhraseQuery.java b/lucene/core/src/java/org/apache/lucene/search/PhraseQuery.java
index 143ed17..8a9dccb 100644
--- a/lucene/core/src/java/org/apache/lucene/search/PhraseQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/PhraseQuery.java
@@ -562,7 +562,7 @@ public class PhraseQuery extends Query {
   /** Returns true iff <code>o</code> is equal to this. */
   @Override
   public boolean equals(Object o) {
-    if (super.equals(o) == false) {
+    if (! sameClassAs(o)) {
       return false;
     }
     PhraseQuery that = (PhraseQuery) o;
@@ -574,7 +574,7 @@ public class PhraseQuery extends Query {
   /** Returns a hash code value for this object.*/
   @Override
   public int hashCode() {
-    int h = super.hashCode();
+    int h = getClass().hashCode();
     h = 31 * h + slop;
     h = 31 * h + Arrays.hashCode(terms);
     h = 31 * h + Arrays.hashCode(positions);
diff --git a/lucene/core/src/java/org/apache/lucene/search/PointInSetQuery.java b/lucene/core/src/java/org/apache/lucene/search/PointInSetQuery.java
index 0549077..be34d72 100644
--- a/lucene/core/src/java/org/apache/lucene/search/PointInSetQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/PointInSetQuery.java
@@ -305,7 +305,7 @@ public abstract class PointInSetQuery extends Query {
 
   @Override
   public final int hashCode() {
-    int hash = super.hashCode();
+    int hash = getClass().hashCode();
     hash = 31 * hash + field.hashCode();
     hash = 31 * hash + sortedPackedPointsHashCode;
     hash = 31 * hash + numDims;
@@ -315,7 +315,9 @@ public abstract class PointInSetQuery extends Query {
 
   @Override
   public final boolean equals(Object other) {
-    if (super.equals(other)) {
+    if (! sameClassAs(other)) {
+      return false;
+    }
     final PointInSetQuery q = (PointInSetQuery) other;
     return q.field.equals(field) &&
       q.numDims == numDims &&
@@ -324,9 +326,6 @@ public abstract class PointInSetQuery extends Query {
       q.sortedPackedPoints.equals(sortedPackedPoints);
   }
 
-    return false;
-  }
-
   @Override
   public final String toString(String field) {
     final StringBuilder sb = new StringBuilder();
diff --git a/lucene/core/src/java/org/apache/lucene/search/PointRangeQuery.java b/lucene/core/src/java/org/apache/lucene/search/PointRangeQuery.java
index abd4cbc..5654cbd 100644
--- a/lucene/core/src/java/org/apache/lucene/search/PointRangeQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/PointRangeQuery.java
@@ -220,8 +220,7 @@ public abstract class PointRangeQuery extends Query {
 
   @Override
   public final int hashCode() {
-    int hash = super.hashCode();
-    hash = 31 * hash + field.hashCode();
+    int hash = field.hashCode();
     hash = 31 * hash + Arrays.hashCode(lowerPoint);
     hash = 31 * hash + Arrays.hashCode(upperPoint);
     hash = 31 * hash + numDims;
@@ -230,33 +229,17 @@ public abstract class PointRangeQuery extends Query {
   }
 
   @Override
-  public final boolean equals(Object other) {
-    if (super.equals(other) == false) {
-      return false;
+  public boolean equals(Object o) {
+    return sameClassAs(o) &&
+           equalsTo(getClass().cast(o));
   }
 
-    final PointRangeQuery q = (PointRangeQuery) other;
-    if (field.equals(q.field) == false) {
-      return false;
-    }
-
-    if (q.numDims != numDims) {
-      return false;
-    }
-
-    if (q.bytesPerDim != bytesPerDim) {
-      return false;
-    }
-
-    if (Arrays.equals(lowerPoint, q.lowerPoint) == false) {
-      return false;
-    }
-    
-    if (Arrays.equals(upperPoint, q.upperPoint) == false) {
-      return false;
-    }
-
-    return true;
+  private boolean equalsTo(PointRangeQuery other) {
+    return Objects.equals(field, other.field) &&
+           numDims == other.numDims &&
+           bytesPerDim == other.bytesPerDim &&
+           Arrays.equals(lowerPoint, other.lowerPoint) &&
+           Arrays.equals(upperPoint, other.upperPoint);
   }
 
   @Override
diff --git a/lucene/core/src/java/org/apache/lucene/search/Query.java b/lucene/core/src/java/org/apache/lucene/search/Query.java
index 49134ec..bf34b5c 100644
--- a/lucene/core/src/java/org/apache/lucene/search/Query.java
+++ b/lucene/core/src/java/org/apache/lucene/search/Query.java
@@ -74,15 +74,30 @@ public abstract class Query {
     return this;
   }
 
+  /**
+   * Override and implement query instance equivalence properly in a subclass. 
+   * This is required so that {@link QueryCache} works properly.
+   */
   @Override
-  public int hashCode() {
-    return getClass().hashCode();
-  }
+  public abstract int hashCode();
 
+  /**
+   * Override and implement query instance equivalence properly in a subclass. 
+   * This is required so that {@link QueryCache} works properly.
+   * 
+   * @see #sameClassAs(Object)
+   */
   @Override
-  public boolean equals(Object obj) {
-    if (obj == null)
-      return false;
-    return getClass() == obj.getClass();
+  public abstract boolean equals(Object obj);
+
+  /**
+   * Utility method to check whether <code>other</code> is not null and is exactly 
+   * of the same class as this object's class.
+   * <br> When this method is used in an implementation of {@link #equals(Object)},
+   * consider using <code>getClass().hashCode()</code> in the implementation
+   * of {@link #hashCode}.
+   */
+  protected final boolean sameClassAs(Object other) {
+    return other != null && getClass() == other.getClass();
   }  
 }
diff --git a/lucene/core/src/java/org/apache/lucene/search/SynonymQuery.java b/lucene/core/src/java/org/apache/lucene/search/SynonymQuery.java
index 4a0ca56..885f420 100644
--- a/lucene/core/src/java/org/apache/lucene/search/SynonymQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/SynonymQuery.java
@@ -89,19 +89,16 @@ public final class SynonymQuery extends Query {
   @Override
   public int hashCode() {
     final int prime = 31;
-    int result = super.hashCode();
+    int result = getClass().hashCode();
     result = prime * result + Arrays.hashCode(terms);
     return result;
   }
 
   @Override
   public boolean equals(Object obj) {
-    if (this == obj) return true;
-    if (!super.equals(obj)) return false;
-    if (getClass() != obj.getClass()) return false;
+    if (! sameClassAs(obj)) return false;
     SynonymQuery other = (SynonymQuery) obj;
-    if (!Arrays.equals(terms, other.terms)) return false;
-    return true;
+    return Arrays.equals(terms, other.terms);
   }
 
   @Override
diff --git a/lucene/core/src/java/org/apache/lucene/search/TermQuery.java b/lucene/core/src/java/org/apache/lucene/search/TermQuery.java
index b7b6d29..1ba5fac 100644
--- a/lucene/core/src/java/org/apache/lucene/search/TermQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/TermQuery.java
@@ -212,13 +212,13 @@ public class TermQuery extends Query {
   /** Returns true iff <code>o</code> is equal to this. */
   @Override
   public boolean equals(Object o) {
-    if (!(o instanceof TermQuery)) return false;
+    if (! sameClassAs(o)) return false;
     TermQuery other = (TermQuery) o;
-    return super.equals(o) && this.term.equals(other.term);
+    return term.equals(other.term);
   }
 
   @Override
   public int hashCode() {
-    return super.hashCode() ^ term.hashCode();
+    return getClass().hashCode() ^ term.hashCode();
   }
 }
diff --git a/lucene/core/src/java/org/apache/lucene/search/spans/FieldMaskingSpanQuery.java b/lucene/core/src/java/org/apache/lucene/search/spans/FieldMaskingSpanQuery.java
index 8a2dae3..3d32a24 100644
--- a/lucene/core/src/java/org/apache/lucene/search/spans/FieldMaskingSpanQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/spans/FieldMaskingSpanQuery.java
@@ -118,7 +118,7 @@ public final class FieldMaskingSpanQuery extends SpanQuery {
   
   @Override
   public boolean equals(Object o) {
-    if (! super.equals(o)) {
+    if (! sameClassAs(o)) {
       return false;
     }
     FieldMaskingSpanQuery other = (FieldMaskingSpanQuery) o;
@@ -129,7 +129,7 @@ public final class FieldMaskingSpanQuery extends SpanQuery {
   
   @Override
   public int hashCode() {
-    return super.hashCode()
+    return getClass().hashCode()
           ^ getMaskedQuery().hashCode()
           ^ getField().hashCode();
   }
diff --git a/lucene/core/src/java/org/apache/lucene/search/spans/SpanBoostQuery.java b/lucene/core/src/java/org/apache/lucene/search/spans/SpanBoostQuery.java
index 911fdc0..b7c1588 100644
--- a/lucene/core/src/java/org/apache/lucene/search/spans/SpanBoostQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/spans/SpanBoostQuery.java
@@ -64,7 +64,7 @@ public final class SpanBoostQuery extends SpanQuery {
 
   @Override
   public boolean equals(Object obj) {
-    if (super.equals(obj) == false) {
+    if (! sameClassAs(obj)) {
       return false;
     }
     SpanBoostQuery that = (SpanBoostQuery) obj;
@@ -74,7 +74,7 @@ public final class SpanBoostQuery extends SpanQuery {
 
   @Override
   public int hashCode() {
-    int h = super.hashCode();
+    int h = getClass().hashCode();
     h = 31 * h + query.hashCode();
     h = 31 * h + Float.floatToIntBits(boost);
     return h;
diff --git a/lucene/core/src/java/org/apache/lucene/search/spans/SpanContainQuery.java b/lucene/core/src/java/org/apache/lucene/search/spans/SpanContainQuery.java
index 551138d..a791e25 100644
--- a/lucene/core/src/java/org/apache/lucene/search/spans/SpanContainQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/spans/SpanContainQuery.java
@@ -130,7 +130,7 @@ abstract class SpanContainQuery extends SpanQuery implements Cloneable {
 
   @Override
   public boolean equals(Object o) {
-    if (! super.equals(o)) {
+    if (! sameClassAs(o)) {
       return false;
     }
     SpanContainQuery other = (SpanContainQuery)o;
@@ -139,7 +139,7 @@ abstract class SpanContainQuery extends SpanQuery implements Cloneable {
 
   @Override
   public int hashCode() {
-    int h = Integer.rotateLeft(super.hashCode(), 1);
+    int h = Integer.rotateLeft(getClass().hashCode(), 1);
     h ^= big.hashCode();
     h = Integer.rotateLeft(h, 1);
     h ^= little.hashCode();
diff --git a/lucene/core/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper.java b/lucene/core/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper.java
index 95b7e93..356e13c 100644
--- a/lucene/core/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper.java
+++ b/lucene/core/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper.java
@@ -124,14 +124,14 @@ public class SpanMultiTermQueryWrapper<Q extends MultiTermQuery> extends SpanQue
   @Override
   public int hashCode() {
     final int prime = 31;
-    int result = super.hashCode();
+    int result = getClass().hashCode();
     result = prime * result + query.hashCode();
     return result;
   }
 
   @Override
   public boolean equals(Object obj) {
-    if (! super.equals(obj)) {
+    if (! sameClassAs(obj)) {
       return false;
     }
     SpanMultiTermQueryWrapper<?> other = (SpanMultiTermQueryWrapper<?>) obj;
diff --git a/lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery.java b/lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery.java
index 167a7d1..a2bda2b 100644
--- a/lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery.java
@@ -253,10 +253,9 @@ public class SpanNearQuery extends SpanQuery implements Cloneable {
     return super.rewrite(reader);
   }
 
-  /** Returns true iff <code>o</code> is equal to this. */
   @Override
   public boolean equals(Object o) {
-    if (! super.equals(o)) {
+    if (! sameClassAs(o)) {
       return false;
     }
     final SpanNearQuery spanNearQuery = (SpanNearQuery) o;
@@ -268,7 +267,7 @@ public class SpanNearQuery extends SpanQuery implements Cloneable {
 
   @Override
   public int hashCode() {
-    int result = super.hashCode();
+    int result = getClass().hashCode();
     result ^= clauses.hashCode();
     result += slop;
     int fac = 1 + (inOrder ? 8 : 4);
@@ -321,6 +320,25 @@ public class SpanNearQuery extends SpanQuery implements Cloneable {
 
       }
     }
+
+    @Override
+    public boolean equals(Object o) {
+      if (! sameClassAs(o)) {
+        return false;
+      }
+      final SpanGapQuery spanGapQuery = (SpanGapQuery) o;
+
+      return (width == spanGapQuery.width)
+          && field.equals(spanGapQuery.field);
+    }
+
+    @Override
+    public int hashCode() {
+      int result = 7 * getClass().hashCode();
+      result -= 7 * width;
+      return result * 15 - field.hashCode();
+    }
+
   }
 
   static class GapSpans extends Spans {
diff --git a/lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery.java b/lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery.java
index 5b2aeac..284217e 100644
--- a/lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery.java
@@ -201,7 +201,7 @@ public final class SpanNotQuery extends SpanQuery {
     /** Returns true iff <code>o</code> is equal to this. */
   @Override
   public boolean equals(Object o) {
-    if (!super.equals(o))
+    if (! sameClassAs(o))
       return false;
 
     SpanNotQuery other = (SpanNotQuery)o;
@@ -213,7 +213,7 @@ public final class SpanNotQuery extends SpanQuery {
 
   @Override
   public int hashCode() {
-    int h = super.hashCode();
+    int h = getClass().hashCode();
     h = Integer.rotateLeft(h, 1);
     h ^= include.hashCode();
     h = Integer.rotateLeft(h, 1);
diff --git a/lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery.java b/lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery.java
index c07ec38..4728aa5 100644
--- a/lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery.java
@@ -104,7 +104,7 @@ public final class SpanOrQuery extends SpanQuery {
 
   @Override
   public boolean equals(Object o) {
-    if (! super.equals(o)) {
+    if (! sameClassAs(o)) {
       return false;
     }
     final SpanOrQuery that = (SpanOrQuery) o;
@@ -113,9 +113,7 @@ public final class SpanOrQuery extends SpanQuery {
 
   @Override
   public int hashCode() {
-    int h = super.hashCode();
-    h = (h * 7) ^ clauses.hashCode();
-    return h;
+    return getClass().hashCode() ^ clauses.hashCode();
   }
 
   @Override
diff --git a/lucene/core/src/java/org/apache/lucene/search/spans/SpanPositionCheckQuery.java b/lucene/core/src/java/org/apache/lucene/search/spans/SpanPositionCheckQuery.java
index b2166e4..fd4e87b 100644
--- a/lucene/core/src/java/org/apache/lucene/search/spans/SpanPositionCheckQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/spans/SpanPositionCheckQuery.java
@@ -123,7 +123,7 @@ public abstract class SpanPositionCheckQuery extends SpanQuery implements Clonea
   /** Returns true iff <code>o</code> is equal to this. */
   @Override
   public boolean equals(Object o) {
-    if (! super.equals(o)) {
+    if (! sameClassAs(o)) {
       return false;
     }
     SpanPositionCheckQuery spcq = (SpanPositionCheckQuery) o;
@@ -132,6 +132,6 @@ public abstract class SpanPositionCheckQuery extends SpanQuery implements Clonea
 
   @Override
   public int hashCode() {
-    return match.hashCode() ^ super.hashCode();
+    return match.hashCode() ^ getClass().hashCode();
   }
 }
diff --git a/lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery.java b/lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery.java
index bf6c6d0..e38977c 100644
--- a/lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery.java
@@ -163,15 +163,12 @@ public class SpanTermQuery extends SpanQuery {
 
   @Override
   public int hashCode() {
-    final int prime = 31;
-    int result = super.hashCode();
-    result = prime * result + term.hashCode();
-    return result;
+    return getClass().hashCode() - term.hashCode();
   }
 
   @Override
   public boolean equals(Object obj) {
-    if (! super.equals(obj)) {
+    if (! sameClassAs(obj)) {
       return false;
     }
     SpanTermQuery other = (SpanTermQuery) obj;
diff --git a/lucene/core/src/test/org/apache/lucene/search/JustCompileSearch.java b/lucene/core/src/test/org/apache/lucene/search/JustCompileSearch.java
index ca586cf..b46a46e 100644
--- a/lucene/core/src/test/org/apache/lucene/search/JustCompileSearch.java
+++ b/lucene/core/src/test/org/apache/lucene/search/JustCompileSearch.java
@@ -153,6 +153,15 @@ final class JustCompileSearch {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
+    public boolean equals(Object obj) {
+      throw new UnsupportedOperationException(UNSUPPORTED_MSG);
+    }
+
+    @Override
+    public int hashCode() {
+      throw new UnsupportedOperationException(UNSUPPORTED_MSG);
+    }
   }
 
   static final class JustCompileScorer extends Scorer {
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer.java b/lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer.java
index df1be3e..7792071 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer.java
@@ -122,6 +122,16 @@ public class TestBooleanScorer extends LuceneTestCase {
         }
       };
     }
+
+    @Override
+    public boolean equals(Object obj) {
+      return sameClassAs(obj);
+    }
+
+    @Override
+    public int hashCode() {
+      return getClass().hashCode();
+    }
   }
 
   /** Make sure BooleanScorer can embed another
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery.java b/lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery.java
index 2253294..4536b82 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery.java
@@ -149,7 +149,7 @@ public class TestConstantScoreQuery extends LuceneTestCase {
 
     @Override
     public boolean equals(Object obj) {
-      if (super.equals(obj) == false) {
+      if (! sameClassAs(obj)) {
         return false;
       }
       QueryWrapper that = (QueryWrapper) obj;
@@ -158,7 +158,7 @@ public class TestConstantScoreQuery extends LuceneTestCase {
 
     @Override
     public int hashCode() {
-      return 31 * super.hashCode() + in.hashCode();
+      return 31 * getClass().hashCode() + in.hashCode();
     }
   }
 
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache.java b/lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache.java
index 63ccdd8..80aa17b 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache.java
@@ -950,7 +950,16 @@ public class TestLRUQueryCache extends LuceneTestCase {
 
     @Override
     public int hashCode() {
-      return super.hashCode() ^ i[0];
+      return getClass().hashCode() ^ i[0];
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+      if (! sameClassAs(obj)) {
+        return false;
+      }
+      final BadQuery that = (BadQuery) obj;
+      return i[0] == that.i[0];
     }
 
   }
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestNeedsScores.java b/lucene/core/src/test/org/apache/lucene/search/TestNeedsScores.java
index fa63759..15f514e 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestNeedsScores.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestNeedsScores.java
@@ -19,6 +19,7 @@ package org.apache.lucene.search;
 
 import java.io.IOException;
 import java.util.Set;
+import java.util.Objects;
 
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
@@ -95,7 +96,7 @@ public class TestNeedsScores extends LuceneTestCase {
     final boolean value;
     
     AssertNeedsScores(Query in, boolean value) {
-      this.in = in;
+      this.in = Objects.requireNonNull(in);
       this.value = value;
     }
 
@@ -144,23 +145,20 @@ public class TestNeedsScores extends LuceneTestCase {
     @Override
     public int hashCode() {
       final int prime = 31;
-      int result = super.hashCode();
-      result = prime * result + ((in == null) ? 0 : in.hashCode());
+      int result = getClass().hashCode();
+      result = prime * result + in.hashCode();
       result = prime * result + (value ? 1231 : 1237);
       return result;
     }
 
     @Override
     public boolean equals(Object obj) {
-      if (this == obj) return true;
-      if (!super.equals(obj)) return false;
-      if (getClass() != obj.getClass()) return false;
+      if (! sameClassAs(obj)) {
+        return false;
+      }
       AssertNeedsScores other = (AssertNeedsScores) obj;
-      if (in == null) {
-        if (other.in != null) return false;
-      } else if (!in.equals(other.in)) return false;
-      if (value != other.value) return false;
-      return true;
+      return in.equals(other.in)
+          && value == other.value;
     }
 
     @Override
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.java b/lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.java
index d029e01..b3a7e89 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.java
@@ -504,13 +504,12 @@ public class TestQueryRescorer extends LuceneTestCase {
 
     @Override
     public boolean equals(Object o) {
-      if ((o instanceof FixedScoreQuery) == false) {
+      if (! sameClassAs(o)) {
         return false;
       }
       FixedScoreQuery other = (FixedScoreQuery) o;
-      return super.equals(o) &&
-        reverse == other.reverse &&
-        Arrays.equals(idToNum, other.idToNum);
+      return reverse == other.reverse
+          && Arrays.equals(idToNum, other.idToNum);
     }
 
     @Override
@@ -521,7 +520,7 @@ public class TestQueryRescorer extends LuceneTestCase {
     @Override
     public int hashCode() {
       int PRIME = 31;
-      int hash = super.hashCode();
+      int hash = getClass().hashCode();
       if (reverse) {
         hash = PRIME * hash + 3623;
       }
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestScorerPerf.java b/lucene/core/src/test/org/apache/lucene/search/TestScorerPerf.java
index 82d5e18..da89567 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestScorerPerf.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestScorerPerf.java
@@ -166,7 +166,7 @@ public class TestScorerPerf extends LuceneTestCase {
     
     @Override
     public boolean equals(Object obj) {
-      if (super.equals(obj) == false) {
+      if (! sameClassAs(obj)) {
         return false;
       }
       return docs == ((BitSetQuery) obj).docs;
@@ -174,7 +174,7 @@ public class TestScorerPerf extends LuceneTestCase {
 
     @Override
     public int hashCode() {
-      return 31 * super.hashCode() + System.identityHashCode(docs);
+      return 31 * getClass().hashCode() + System.identityHashCode(docs);
     }
   }
 
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestSortRandom.java b/lucene/core/src/test/org/apache/lucene/search/TestSortRandom.java
index c362fd6..787048c 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestSortRandom.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestSortRandom.java
@@ -258,7 +258,7 @@ public class TestSortRandom extends LuceneTestCase {
 
     @Override
     public boolean equals(Object obj) {
-      if (super.equals(obj) == false) {
+      if (! sameClassAs(obj)) {
         return false;
       }
       RandomQuery other = (RandomQuery) obj;
@@ -269,7 +269,7 @@ public class TestSortRandom extends LuceneTestCase {
     public int hashCode() {
       int h = Objects.hash(seed, density);
       h = 31 * h + System.identityHashCode(docValues);
-      h = 31 * h + super.hashCode();
+      h = 31 * h + getClass().hashCode();
       return h;
     }
   }
diff --git a/lucene/core/src/test/org/apache/lucene/search/spans/JustCompileSearchSpans.java b/lucene/core/src/test/org/apache/lucene/search/spans/JustCompileSearchSpans.java
index f844795..6e6102f 100644
--- a/lucene/core/src/test/org/apache/lucene/search/spans/JustCompileSearchSpans.java
+++ b/lucene/core/src/test/org/apache/lucene/search/spans/JustCompileSearchSpans.java
@@ -102,6 +102,16 @@ final class JustCompileSearchSpans {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
+    @Override
+    public boolean equals(Object o) {
+      throw new UnsupportedOperationException(UNSUPPORTED_MSG);
+    }
+
+    @Override
+    public int hashCode() {
+      throw new UnsupportedOperationException(UNSUPPORTED_MSG);
+    }
+
   }
 
 }
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/DrillDownQuery.java b/lucene/facet/src/java/org/apache/lucene/facet/DrillDownQuery.java
index 91d5b0f..00e3eb1 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/DrillDownQuery.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/DrillDownQuery.java
@@ -122,12 +122,12 @@ public final class DrillDownQuery extends Query {
   
   @Override
   public int hashCode() {
-    return 31 * super.hashCode() + Objects.hash(baseQuery, dimQueries);
+    return 31 * getClass().hashCode() + Objects.hash(baseQuery, dimQueries);
   }
   
   @Override
   public boolean equals(Object obj) {
-    if (super.equals(obj) == false) {
+    if (! sameClassAs(obj)) {
       return false;
     }
     DrillDownQuery other = (DrillDownQuery) obj;
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery.java b/lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery.java
index b3ffb0d..ed3a58a 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery.java
@@ -161,7 +161,7 @@ class DrillSidewaysQuery extends Query {
   @Override
   public int hashCode() {
     final int prime = 31;
-    int result = super.hashCode();
+    int result = getClass().hashCode();
     result = prime * result + ((baseQuery == null) ? 0 : baseQuery.hashCode());
     result = prime * result
         + ((drillDownCollector == null) ? 0 : drillDownCollector.hashCode());
@@ -172,9 +172,9 @@ class DrillSidewaysQuery extends Query {
 
   @Override
   public boolean equals(Object obj) {
-    if (this == obj) return true;
-    if (!super.equals(obj)) return false;
-    if (getClass() != obj.getClass()) return false;
+    if (! sameClassAs(obj)) {
+      return false;
+    }
     DrillSidewaysQuery other = (DrillSidewaysQuery) obj;
     if (baseQuery == null) {
       if (other.baseQuery != null) return false;
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/range/DoubleRange.java b/lucene/facet/src/java/org/apache/lucene/facet/range/DoubleRange.java
index 6f005ed..4e72596 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/range/DoubleRange.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/range/DoubleRange.java
@@ -105,7 +105,7 @@ public final class DoubleRange extends Range {
 
     @Override
     public boolean equals(Object obj) {
-      if (super.equals(obj) == false) {
+      if (! sameClassAs(obj)) {
         return false;
       }
       ValueSourceQuery other = (ValueSourceQuery) obj;
@@ -116,7 +116,7 @@ public final class DoubleRange extends Range {
 
     @Override
     public int hashCode() {
-      return 31 * Objects.hash(range, fastMatchQuery, valueSource) + super.hashCode();
+      return 31 * Objects.hash(range, fastMatchQuery, valueSource) + getClass().hashCode();
     }
 
     @Override
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/range/LongRange.java b/lucene/facet/src/java/org/apache/lucene/facet/range/LongRange.java
index ef789c5..1c0ca32 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/range/LongRange.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/range/LongRange.java
@@ -97,7 +97,7 @@ public final class LongRange extends Range {
 
     @Override
     public boolean equals(Object obj) {
-      if (super.equals(obj) == false) {
+      if (! sameClassAs(obj)) {
         return false;
       }
       ValueSourceQuery other = (ValueSourceQuery) obj;
@@ -108,7 +108,7 @@ public final class LongRange extends Range {
 
     @Override
     public int hashCode() {
-      return 31 * Objects.hash(range, fastMatchQuery, valueSource) + super.hashCode();
+      return 31 * Objects.hash(range, fastMatchQuery, valueSource) + getClass().hashCode();
     }
 
     @Override
diff --git a/lucene/join/src/java/org/apache/lucene/search/join/GlobalOrdinalsQuery.java b/lucene/join/src/java/org/apache/lucene/search/join/GlobalOrdinalsQuery.java
index f9b74d4..2a0fc25 100644
--- a/lucene/join/src/java/org/apache/lucene/search/join/GlobalOrdinalsQuery.java
+++ b/lucene/join/src/java/org/apache/lucene/search/join/GlobalOrdinalsQuery.java
@@ -66,9 +66,9 @@ final class GlobalOrdinalsQuery extends Query {
 
   @Override
   public boolean equals(Object o) {
-    if (this == o) return true;
-    if (o == null || getClass() != o.getClass()) return false;
-    if (!super.equals(o)) return false;
+    if (! sameClassAs(o)) {
+      return false;
+    }
 
     GlobalOrdinalsQuery that = (GlobalOrdinalsQuery) o;
 
@@ -82,7 +82,7 @@ final class GlobalOrdinalsQuery extends Query {
 
   @Override
   public int hashCode() {
-    int result = super.hashCode();
+    int result = getClass().hashCode();
     result = 31 * result + joinField.hashCode();
     result = 31 * result + toQuery.hashCode();
     result = 31 * result + fromQuery.hashCode();
diff --git a/lucene/join/src/java/org/apache/lucene/search/join/GlobalOrdinalsWithScoreQuery.java b/lucene/join/src/java/org/apache/lucene/search/join/GlobalOrdinalsWithScoreQuery.java
index f9b2064..1354da7 100644
--- a/lucene/join/src/java/org/apache/lucene/search/join/GlobalOrdinalsWithScoreQuery.java
+++ b/lucene/join/src/java/org/apache/lucene/search/join/GlobalOrdinalsWithScoreQuery.java
@@ -67,9 +67,9 @@ final class GlobalOrdinalsWithScoreQuery extends Query {
 
   @Override
   public boolean equals(Object o) {
-    if (this == o) return true;
-    if (o == null || getClass() != o.getClass()) return false;
-    if (!super.equals(o)) return false;
+    if (! sameClassAs(o)) {
+      return false;
+    }
 
     GlobalOrdinalsWithScoreQuery that = (GlobalOrdinalsWithScoreQuery) o;
 
@@ -85,7 +85,7 @@ final class GlobalOrdinalsWithScoreQuery extends Query {
 
   @Override
   public int hashCode() {
-    int result = super.hashCode();
+    int result = getClass().hashCode();
     result = 31 * result + joinField.hashCode();
     result = 31 * result + toQuery.hashCode();
     result = 31 * result + fromQuery.hashCode();
diff --git a/lucene/join/src/java/org/apache/lucene/search/join/PointInSetIncludingScoreQuery.java b/lucene/join/src/java/org/apache/lucene/search/join/PointInSetIncludingScoreQuery.java
index df6aa98..997e597 100644
--- a/lucene/join/src/java/org/apache/lucene/search/join/PointInSetIncludingScoreQuery.java
+++ b/lucene/join/src/java/org/apache/lucene/search/join/PointInSetIncludingScoreQuery.java
@@ -289,7 +289,7 @@ abstract class PointInSetIncludingScoreQuery extends Query {
 
   @Override
   public final int hashCode() {
-    int hash = super.hashCode();
+    int hash = getClass().hashCode();
     hash = 31 * hash + field.hashCode();
     hash = 31 * hash + originalQuery.hashCode();
     hash = 31 * hash + sortedPackedPointsHashCode;
@@ -299,7 +299,9 @@ abstract class PointInSetIncludingScoreQuery extends Query {
 
   @Override
   public final boolean equals(Object other) {
-    if (super.equals(other)) {
+    if (! sameClassAs(other)) {
+      return false;
+    }
     final PointInSetIncludingScoreQuery q = (PointInSetIncludingScoreQuery) other;
     return q.field.equals(field) &&
       q.originalQuery.equals(originalQuery) &&
@@ -308,9 +310,6 @@ abstract class PointInSetIncludingScoreQuery extends Query {
       q.sortedPackedPoints.equals(sortedPackedPoints);
   }
 
-    return false;
-  }
-
   @Override
   public final String toString(String field) {
     final StringBuilder sb = new StringBuilder();
diff --git a/lucene/join/src/java/org/apache/lucene/search/join/TermsIncludingScoreQuery.java b/lucene/join/src/java/org/apache/lucene/search/join/TermsIncludingScoreQuery.java
index 65ab1f0..5ad7409 100644
--- a/lucene/join/src/java/org/apache/lucene/search/join/TermsIncludingScoreQuery.java
+++ b/lucene/join/src/java/org/apache/lucene/search/join/TermsIncludingScoreQuery.java
@@ -87,11 +87,7 @@ class TermsIncludingScoreQuery extends Query {
 
   @Override
   public boolean equals(Object obj) {
-    if (this == obj) {
-      return true;
-    } if (!super.equals(obj)) {
-      return false;
-    } if (getClass() != obj.getClass()) {
+    if (! sameClassAs(obj)) {
       return false;
     }
 
@@ -108,7 +104,7 @@ class TermsIncludingScoreQuery extends Query {
   @Override
   public int hashCode() {
     final int prime = 31;
-    int result = super.hashCode();
+    int result = getClass().hashCode();
     result += prime * field.hashCode();
     result += prime * unwrittenOriginalQuery.hashCode();
     return result;
diff --git a/lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.java b/lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.java
index 237b786..9f6bf16 100644
--- a/lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.java
+++ b/lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.java
@@ -345,20 +345,18 @@ public class ToChildBlockJoinQuery extends Query {
 
   @Override
   public boolean equals(Object _other) {
-    if (_other instanceof ToChildBlockJoinQuery) {
-      final ToChildBlockJoinQuery other = (ToChildBlockJoinQuery) _other;
-      return origParentQuery.equals(other.origParentQuery) &&
-        parentsFilter.equals(other.parentsFilter) &&
-        super.equals(other);
-    } else {
+    if (! sameClassAs(_other)) {
       return false;
     }
+    final ToChildBlockJoinQuery other = (ToChildBlockJoinQuery) _other;
+    return origParentQuery.equals(other.origParentQuery) &&
+      parentsFilter.equals(other.parentsFilter);
   }
 
   @Override
   public int hashCode() {
     final int prime = 31;
-    int hash = super.hashCode();
+    int hash = getClass().hashCode();
     hash = prime * hash + origParentQuery.hashCode();
     hash = prime * hash + parentsFilter.hashCode();
     return hash;
diff --git a/lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.java b/lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.java
index 2a0ebaf..3634c3f 100644
--- a/lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.java
+++ b/lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.java
@@ -475,21 +475,19 @@ public class ToParentBlockJoinQuery extends Query {
 
   @Override
   public boolean equals(Object _other) {
-    if (_other instanceof ToParentBlockJoinQuery) {
+    if (! sameClassAs(_other)) {
+      return false;
+    }
     final ToParentBlockJoinQuery other = (ToParentBlockJoinQuery) _other;
     return origChildQuery.equals(other.origChildQuery) &&
       parentsFilter.equals(other.parentsFilter) &&
-        scoreMode == other.scoreMode && 
-        super.equals(other);
-    } else {
-      return false;
-    }
+      scoreMode == other.scoreMode;
   }
 
   @Override
   public int hashCode() {
     final int prime = 31;
-    int hash = super.hashCode();
+    int hash = getClass().hashCode();
     hash = prime * hash + origChildQuery.hashCode();
     hash = prime * hash + scoreMode.hashCode();
     hash = prime * hash + parentsFilter.hashCode();
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery.java b/lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery.java
index 0d4ff2c..acfabb1 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery.java
@@ -134,11 +134,6 @@ public class BoostingQuery extends Query {
       };
     }
 
-    @Override
-    public int hashCode() {
-      return 31 * super.hashCode() + Objects.hash(match, context, boost);
-    }
-
     public Query getMatch() {
       return match;
     }
@@ -152,8 +147,13 @@ public class BoostingQuery extends Query {
     }
 
     @Override
+    public int hashCode() {
+      return 31 * getClass().hashCode() + Objects.hash(match, context, boost);
+    }
+
+    @Override
     public boolean equals(Object obj) {
-      if (super.equals(obj) == false) {
+    if (! sameClassAs(obj)) {
         return false;
       }
       BoostingQuery that = (BoostingQuery) obj;
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery.java b/lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery.java
index c7b7e2f..cb8f7b9 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery.java
@@ -411,7 +411,7 @@ public class CommonTermsQuery extends Query {
   @Override
   public int hashCode() {
     final int prime = 31;
-    int result = super.hashCode();
+    int result = getClass().hashCode();
     result = prime * result + (disableCoord ? 1231 : 1237);
     result = prime * result + Float.floatToIntBits(highFreqBoost);
     result = prime * result
@@ -428,9 +428,9 @@ public class CommonTermsQuery extends Query {
   
   @Override
   public boolean equals(Object obj) {
-    if (this == obj) return true;
-    if (!super.equals(obj)) return false;
-    if (getClass() != obj.getClass()) return false;
+    if (! sameClassAs(obj)) {
+      return false;
+    }
     CommonTermsQuery other = (CommonTermsQuery) obj;
     if (disableCoord != other.disableCoord) return false;
     if (Float.floatToIntBits(highFreqBoost) != Float
@@ -443,9 +443,7 @@ public class CommonTermsQuery extends Query {
         .floatToIntBits(other.maxTermFrequency)) return false;
     if (lowFreqMinNrShouldMatch != other.lowFreqMinNrShouldMatch) return false;
     if (highFreqMinNrShouldMatch != other.highFreqMinNrShouldMatch) return false;
-    if (terms == null) {
-      if (other.terms != null) return false;
-    } else if (!terms.equals(other.terms)) return false;
+    if (!terms.equals(other.terms)) return false;
     return true;
   }
 
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.java b/lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.java
index ed78a03..44e8a8e 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.java
@@ -138,10 +138,9 @@ public class CustomScoreQuery extends Query implements Cloneable {
   /** Returns true if <code>o</code> is equal to this. */
   @Override
   public boolean equals(Object o) {
-    if (this == o)
-      return true;
-    if (!super.equals(o))
+    if (! sameClassAs(o)) {
       return false;
+    }
     CustomScoreQuery other = (CustomScoreQuery)o;
     if (!this.subQuery.equals(other.subQuery) ||
         this.strict != other.strict ||
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/TermsQuery.java b/lucene/queries/src/java/org/apache/lucene/queries/TermsQuery.java
index c29500b..88e14bf 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/TermsQuery.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/TermsQuery.java
@@ -174,10 +174,7 @@ public class TermsQuery extends Query implements Accountable {
 
   @Override
   public boolean equals(Object obj) {
-    if (this == obj) {
-      return true;
-    }
-    if (!super.equals(obj)) {
+    if (! sameClassAs(obj)) {
       return false;
     }
     TermsQuery that = (TermsQuery) obj;
@@ -188,7 +185,7 @@ public class TermsQuery extends Query implements Accountable {
 
   @Override
   public int hashCode() {
-    return 31 * super.hashCode() + termDataHashCode;
+    return 31 * getClass().hashCode() + termDataHashCode;
   }
 
   /** Returns the terms wrapped in a PrefixCodedTerms. */
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/BoostedQuery.java b/lucene/queries/src/java/org/apache/lucene/queries/function/BoostedQuery.java
index e42fe64..8f2a224 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/BoostedQuery.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/BoostedQuery.java
@@ -161,7 +161,9 @@ public final class BoostedQuery extends Query {
 
   @Override
   public boolean equals(Object o) {
-  if (!super.equals(o)) return false;
+    if (! sameClassAs(o)) {
+      return false;
+    }
     BoostedQuery other = (BoostedQuery)o;
     return this.q.equals(other.q)
            && this.boostVal.equals(other.boostVal);
@@ -169,7 +171,7 @@ public final class BoostedQuery extends Query {
 
   @Override
   public int hashCode() {
-    int h = super.hashCode();
+    int h = getClass().hashCode();
     h = 31 * h + q.hashCode();
     h = 31 * h + boostVal.hashCode();
     return h;
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.java b/lucene/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.java
index 85eac26..44854da 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.java
@@ -164,14 +164,15 @@ public class FunctionQuery extends Query {
   /** Returns true if <code>o</code> is equal to this. */
   @Override
   public boolean equals(Object o) {
-    if (!FunctionQuery.class.isInstance(o)) return false;
+    if (! sameClassAs(o)) {
+      return false;
+    }
     FunctionQuery other = (FunctionQuery)o;
-    return super.equals(o)
-            && this.func.equals(other.func);
+    return func.equals(other.func);
   }
 
   @Override
   public int hashCode() {
-    return super.hashCode() ^ func.hashCode();
+    return getClass().hashCode() ^ func.hashCode();
   }
 }
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/FunctionRangeQuery.java b/lucene/queries/src/java/org/apache/lucene/queries/function/FunctionRangeQuery.java
index 65215a3..89c39bc 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/FunctionRangeQuery.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/FunctionRangeQuery.java
@@ -96,9 +96,9 @@ public class FunctionRangeQuery extends Query {
 
   @Override
   public boolean equals(Object o) {
-    if (this == o) return true;
-    if (!(o instanceof FunctionRangeQuery)) return false;
-    if (!super.equals(o)) return false;
+    if (! sameClassAs(o)) {
+      return false;
+    }
     FunctionRangeQuery that = (FunctionRangeQuery) o;
     return Objects.equals(includeLower, that.includeLower) &&
         Objects.equals(includeUpper, that.includeUpper) &&
@@ -109,7 +109,7 @@ public class FunctionRangeQuery extends Query {
 
   @Override
   public int hashCode() {
-    return Objects.hash(super.hashCode(), valueSource, lowerVal, upperVal, includeLower, includeUpper);
+    return Objects.hash(getClass().hashCode(), valueSource, lowerVal, upperVal, includeLower, includeUpper);
   }
 
   @Override
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThisQuery.java b/lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThisQuery.java
index ecd3e60..b4eaca3 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThisQuery.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThisQuery.java
@@ -26,6 +26,7 @@ import java.io.IOException;
 import java.io.StringReader;
 import java.util.Arrays;
 import java.util.Set;
+import java.util.Objects;
 
 /**
  * A simple wrapper for MoreLikeThis for use in scenarios where a Query object is required eg
@@ -48,10 +49,10 @@ public class MoreLikeThisQuery extends Query {
    * @param moreLikeFields fields used for similarity measure
    */
   public MoreLikeThisQuery(String likeText, String[] moreLikeFields, Analyzer analyzer, String fieldName) {
-    this.likeText = likeText;
-    this.moreLikeFields = moreLikeFields;
-    this.analyzer = analyzer;
-    this.fieldName = fieldName;
+    this.likeText = Objects.requireNonNull(likeText);
+    this.moreLikeFields = Objects.requireNonNull(moreLikeFields);
+    this.analyzer = Objects.requireNonNull(analyzer);
+    this.fieldName = Objects.requireNonNull(fieldName);
   }
 
   @Override
@@ -152,43 +153,35 @@ public class MoreLikeThisQuery extends Query {
   @Override
   public int hashCode() {
     final int prime = 31;
-    int result = super.hashCode();
-    result = prime * result + ((analyzer == null) ? 0 : analyzer.hashCode());
-    result = prime * result + ((fieldName == null) ? 0 : fieldName.hashCode());
-    result = prime * result + ((likeText == null) ? 0 : likeText.hashCode());
+    int result = getClass().hashCode();
+    result = prime * result + analyzer.hashCode();
+    result = prime * result + fieldName.hashCode();
+    result = prime * result + likeText.hashCode();
     result = prime * result + maxQueryTerms;
     result = prime * result + minDocFreq;
     result = prime * result + minTermFrequency;
     result = prime * result + Arrays.hashCode(moreLikeFields);
     result = prime * result + Float.floatToIntBits(percentTermsToMatch);
-    result = prime * result + ((stopWords == null) ? 0 : stopWords.hashCode());
+    result = prime * result + stopWords.hashCode();
     return result;
   }
 
   @Override
   public boolean equals(Object obj) {
-    if (this == obj) return true;
-    if (!super.equals(obj)) return false;
-    if (getClass() != obj.getClass()) return false;
+    if (! sameClassAs(obj)) {
+      return false;
+    }
     MoreLikeThisQuery other = (MoreLikeThisQuery) obj;
-    if (analyzer == null) {
-      if (other.analyzer != null) return false;
-    } else if (!analyzer.equals(other.analyzer)) return false;
-    if (fieldName == null) {
-      if (other.fieldName != null) return false;
-    } else if (!fieldName.equals(other.fieldName)) return false;
-    if (likeText == null) {
-      if (other.likeText != null) return false;
-    } else if (!likeText.equals(other.likeText)) return false;
+    if (!analyzer.equals(other.analyzer)) return false;
+    if (!fieldName.equals(other.fieldName)) return false;
+    if (!likeText.equals(other.likeText)) return false;
     if (maxQueryTerms != other.maxQueryTerms) return false;
     if (minDocFreq != other.minDocFreq) return false;
     if (minTermFrequency != other.minTermFrequency) return false;
     if (!Arrays.equals(moreLikeFields, other.moreLikeFields)) return false;
     if (Float.floatToIntBits(percentTermsToMatch) != Float
         .floatToIntBits(other.percentTermsToMatch)) return false;
-    if (stopWords == null) {
-      if (other.stopWords != null) return false;
-    } else if (!stopWords.equals(other.stopWords)) return false;
+    if (!stopWords.equals(other.stopWords)) return false;
     return true;
   }
 }
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/payloads/PayloadScoreQuery.java b/lucene/queries/src/java/org/apache/lucene/queries/payloads/PayloadScoreQuery.java
index d35eb35..e2656f5 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/payloads/PayloadScoreQuery.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/payloads/PayloadScoreQuery.java
@@ -19,6 +19,7 @@ package org.apache.lucene.queries.payloads;
 import java.io.IOException;
 import java.util.Map;
 import java.util.Set;
+import java.util.Objects;
 
 import org.apache.lucene.index.LeafReaderContext;
 import org.apache.lucene.index.PostingsEnum;
@@ -60,8 +61,8 @@ public class PayloadScoreQuery extends SpanQuery {
    * @param includeSpanScore include both span score and payload score in the scoring algorithm
    */
   public PayloadScoreQuery(SpanQuery wrappedQuery, PayloadFunction function, boolean includeSpanScore) {
-    this.wrappedQuery = wrappedQuery;
-    this.function = function;
+    this.wrappedQuery = Objects.requireNonNull(wrappedQuery);
+    this.function = Objects.requireNonNull(function);
     this.includeSpanScore = includeSpanScore;
   }
 
@@ -94,20 +95,18 @@ public class PayloadScoreQuery extends SpanQuery {
 
   @Override
   public boolean equals(Object o) {
-    if (this == o) return true;
-    if (!(o instanceof PayloadScoreQuery)) return false;
-    if (!super.equals(o)) return false;
-
+    if (! sameClassAs(o)) {
+      return false;
+    }
     PayloadScoreQuery that = (PayloadScoreQuery) o;
 
-    if (wrappedQuery != null ? !wrappedQuery.equals(that.wrappedQuery) : that.wrappedQuery != null) return false;
-    return !(function != null ? !function.equals(that.function) : that.function != null);
-
+    return wrappedQuery.equals(that.wrappedQuery)
+        && function.equals(that.function);
   }
 
   @Override
   public int hashCode() {
-    int result = super.hashCode();
+    int result = getClass().hashCode();
     result = 31 * result + (wrappedQuery != null ? wrappedQuery.hashCode() : 0);
     result = 31 * result + (function != null ? function.hashCode() : 0);
     return result;
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/payloads/SpanPayloadCheckQuery.java b/lucene/queries/src/java/org/apache/lucene/queries/payloads/SpanPayloadCheckQuery.java
index 62704b4..f47790d 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/payloads/SpanPayloadCheckQuery.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/payloads/SpanPayloadCheckQuery.java
@@ -174,7 +174,7 @@ public class SpanPayloadCheckQuery extends SpanQuery {
 
   @Override
   public boolean equals(Object o) {
-    if (! super.equals(o)) {
+    if (! sameClassAs(o)) {
       return false;
     }
     SpanPayloadCheckQuery other = (SpanPayloadCheckQuery)o;
@@ -183,7 +183,7 @@ public class SpanPayloadCheckQuery extends SpanQuery {
 
   @Override
   public int hashCode() {
-    int h = super.hashCode();
+    int h = getClass().hashCode();
     h = (h * 63) ^ payloadToMatch.hashCode();
     return h;
   }
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser.java
index 1faea18..1997fd3 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser.java
@@ -20,6 +20,7 @@ import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Objects;
 
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.index.IndexReader;
@@ -221,9 +222,8 @@ public class ComplexPhraseQueryParser extends QueryParser {
 
     public ComplexPhraseQuery(String field, String phrasedQueryStringContents,
         int slopFactor, boolean inOrder) {
-      super();
-      this.field = field;
-      this.phrasedQueryStringContents = phrasedQueryStringContents;
+      this.field = Objects.requireNonNull(field);
+      this.phrasedQueryStringContents = Objects.requireNonNull(phrasedQueryStringContents);
       this.slopFactor = slopFactor;
       this.inOrder = inOrder;
     }
@@ -407,12 +407,9 @@ public class ComplexPhraseQueryParser extends QueryParser {
     @Override
     public int hashCode() {
       final int prime = 31;
-      int result = super.hashCode();
-      result = prime * result + ((field == null) ? 0 : field.hashCode());
-      result = prime
-          * result
-          + ((phrasedQueryStringContents == null) ? 0
-              : phrasedQueryStringContents.hashCode());
+      int result = getClass().hashCode();
+      result = prime * result + field.hashCode();
+      result = prime * result + phrasedQueryStringContents.hashCode();
       result = prime * result + slopFactor;
       result = prime * result + (inOrder ? 1 : 0);
       return result;
@@ -420,25 +417,13 @@ public class ComplexPhraseQueryParser extends QueryParser {
 
     @Override
     public boolean equals(Object obj) {
-      if (this == obj)
-        return true;
-      if (obj == null)
-        return false;
-      if (getClass() != obj.getClass())
-        return false;
-      if (!super.equals(obj)) {
+      if (! sameClassAs(obj)) {
         return false;
       }
       ComplexPhraseQuery other = (ComplexPhraseQuery) obj;
-      if (field == null) {
-        if (other.field != null)
-          return false;
-      } else if (!field.equals(other.field))
-        return false;
-      if (phrasedQueryStringContents == null) {
-        if (other.phrasedQueryStringContents != null)
+      if (!field.equals(other.field))
         return false;
-      } else if (!phrasedQueryStringContents
+      if (!phrasedQueryStringContents
           .equals(other.phrasedQueryStringContents))
         return false;
       if (slopFactor != other.slopFactor)
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/RewriteQuery.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/RewriteQuery.java
index 9068423..54b1ab2 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/RewriteQuery.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/RewriteQuery.java
@@ -16,6 +16,7 @@
  */
 package org.apache.lucene.queryparser.surround.query;
 import java.io.IOException;
+import java.util.Objects;
 
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.search.Query;
@@ -29,9 +30,9 @@ abstract class RewriteQuery<SQ extends SrndQuery> extends Query {
       SQ srndQuery,
       String fieldName,
       BasicQueryFactory qf) {
-    this.srndQuery = srndQuery;
-    this.fieldName = fieldName;
-    this.qf = qf;
+    this.srndQuery = Objects.requireNonNull(srndQuery);
+    this.fieldName = Objects.requireNonNull(fieldName);
+    this.qf = Objects.requireNonNull(qf);
   }
 
   @Override
@@ -49,7 +50,7 @@ abstract class RewriteQuery<SQ extends SrndQuery> extends Query {
 
   @Override
   public int hashCode() {
-    return super.hashCode()
+    return getClass().hashCode()
     ^ fieldName.hashCode()
     ^ qf.hashCode()
     ^ srndQuery.hashCode();
@@ -57,13 +58,11 @@ abstract class RewriteQuery<SQ extends SrndQuery> extends Query {
 
   @Override
   public boolean equals(Object obj) {
-    if (obj == null)
-      return false;
-    if (! getClass().equals(obj.getClass()))
+    if (! sameClassAs(obj)) {
       return false;
+    }
     @SuppressWarnings("unchecked") RewriteQuery<SQ> other = (RewriteQuery<SQ>)obj;
-    return super.equals(obj)
-      && fieldName.equals(other.fieldName)
+    return fieldName.equals(other.fieldName)
       && qf.equals(other.qf)
       && srndQuery.equals(other.srndQuery);
   }
diff --git a/lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointBoxQuery.java b/lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointBoxQuery.java
index 8d36946..28238b7 100644
--- a/lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointBoxQuery.java
+++ b/lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointBoxQuery.java
@@ -215,7 +215,7 @@ abstract class LatLonPointBoxQuery extends Query {
 
   @Override
   public final int hashCode() {
-    int hash = super.hashCode();
+    int hash = getClass().hashCode();
     hash = 31 * hash + field.hashCode();
     hash = 31 * hash + Arrays.hashCode(lowerPoint);
     hash = 31 * hash + Arrays.hashCode(upperPoint);
@@ -226,7 +226,7 @@ abstract class LatLonPointBoxQuery extends Query {
 
   @Override
   public final boolean equals(Object other) {
-    if (super.equals(other) == false) {
+    if (! sameClassAs(other)) {
       return false;
     }
 
diff --git a/lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceQuery.java b/lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceQuery.java
index f746dee..66f28ef 100644
--- a/lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceQuery.java
+++ b/lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceQuery.java
@@ -263,7 +263,7 @@ final class LatLonPointDistanceQuery extends Query {
   @Override
   public int hashCode() {
     final int prime = 31;
-    int result = super.hashCode();
+    int result = getClass().hashCode();
     result = prime * result + field.hashCode();
     long temp;
     temp = Double.doubleToLongBits(latitude);
@@ -277,9 +277,9 @@ final class LatLonPointDistanceQuery extends Query {
 
   @Override
   public boolean equals(Object obj) {
-    if (this == obj) return true;
-    if (!super.equals(obj)) return false;
-    if (getClass() != obj.getClass()) return false;
+    if (! sameClassAs(obj)) {
+      return false;
+    }
     LatLonPointDistanceQuery other = (LatLonPointDistanceQuery) obj;
     if (field.equals(other.field) == false) return false;
     if (Double.doubleToLongBits(latitude) != Double.doubleToLongBits(other.latitude)) return false;
diff --git a/lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointInPolygonQuery.java b/lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointInPolygonQuery.java
index 9c0ac77..37db3a3 100644
--- a/lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointInPolygonQuery.java
+++ b/lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointInPolygonQuery.java
@@ -169,7 +169,7 @@ final class LatLonPointInPolygonQuery extends Query {
   @Override
   public int hashCode() {
     final int prime = 31;
-    int result = super.hashCode();
+    int result = getClass().hashCode();
     result = prime * result + field.hashCode();
     result = prime * result + Arrays.hashCode(polygons);
     return result;
@@ -177,9 +177,9 @@ final class LatLonPointInPolygonQuery extends Query {
 
   @Override
   public boolean equals(Object obj) {
-    if (this == obj) return true;
-    if (!super.equals(obj)) return false;
-    if (getClass() != obj.getClass()) return false;
+    if (! sameClassAs(obj)) {
+      return false;
+    }
     LatLonPointInPolygonQuery other = (LatLonPointInPolygonQuery) obj;
     if (!field.equals(other.field)) return false;
     if (!Arrays.equals(polygons, other.polygons)) return false;
diff --git a/lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/FuzzyLikeThisQuery.java b/lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/FuzzyLikeThisQuery.java
index adfa9d3..e51880f 100644
--- a/lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/FuzzyLikeThisQuery.java
+++ b/lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/FuzzyLikeThisQuery.java
@@ -78,7 +78,7 @@ public class FuzzyLikeThisQuery extends Query
     @Override
     public int hashCode() {
       final int prime = 31;
-      int result = super.hashCode();
+      int result = getClass().hashCode();
       result = prime * result + ((analyzer == null) ? 0 : analyzer.hashCode());
       result = prime * result
           + ((fieldVals == null) ? 0 : fieldVals.hashCode());
@@ -89,13 +89,7 @@ public class FuzzyLikeThisQuery extends Query
 
     @Override
     public boolean equals(Object obj) {
-      if (this == obj)
-        return true;
-      if (obj == null)
-        return false;
-      if (getClass() != obj.getClass())
-        return false;
-      if (!super.equals(obj)) {
+      if (! sameClassAs(obj)) {
         return false;
       }
       FuzzyLikeThisQuery other = (FuzzyLikeThisQuery) obj;
diff --git a/lucene/sandbox/src/java/org/apache/lucene/search/DocValuesNumbersQuery.java b/lucene/sandbox/src/java/org/apache/lucene/search/DocValuesNumbersQuery.java
index a2ebca1..83bac08 100644
--- a/lucene/sandbox/src/java/org/apache/lucene/search/DocValuesNumbersQuery.java
+++ b/lucene/sandbox/src/java/org/apache/lucene/search/DocValuesNumbersQuery.java
@@ -59,7 +59,7 @@ public class DocValuesNumbersQuery extends Query {
 
   @Override
   public boolean equals(Object obj) {
-    if (!super.equals(obj)) {
+    if (! sameClassAs(obj)) {
       return false;
     }
     // super.equals ensures we are the same class:
@@ -72,7 +72,7 @@ public class DocValuesNumbersQuery extends Query {
 
   @Override
   public int hashCode() {
-    return 31 * super.hashCode() + Objects.hash(field, numbers);
+    return 31 * getClass().hashCode() + Objects.hash(field, numbers);
   }
 
   public String getField() {
diff --git a/lucene/sandbox/src/java/org/apache/lucene/search/DocValuesRangeQuery.java b/lucene/sandbox/src/java/org/apache/lucene/search/DocValuesRangeQuery.java
index 97b199a..a19ffd4 100644
--- a/lucene/sandbox/src/java/org/apache/lucene/search/DocValuesRangeQuery.java
+++ b/lucene/sandbox/src/java/org/apache/lucene/search/DocValuesRangeQuery.java
@@ -79,7 +79,7 @@ public final class DocValuesRangeQuery extends Query {
 
   @Override
   public boolean equals(Object obj) {
-    if (super.equals(obj) == false) {
+    if (! sameClassAs(obj)) {
       return false;
     }
     final DocValuesRangeQuery that = (DocValuesRangeQuery) obj;
@@ -87,13 +87,12 @@ public final class DocValuesRangeQuery extends Query {
         && Objects.equals(lowerVal, that.lowerVal)
         && Objects.equals(upperVal, that.upperVal)
         && includeLower == that.includeLower
-        && includeUpper == that.includeUpper
-        && super.equals(obj);
+        && includeUpper == that.includeUpper;
   }
 
   @Override
   public int hashCode() {
-    return 31 * super.hashCode() + Objects.hash(field, lowerVal, upperVal, includeLower, includeUpper);
+    return 31 * getClass().hashCode() + Objects.hash(field, lowerVal, upperVal, includeLower, includeUpper);
   }
 
   public String getField() {
diff --git a/lucene/sandbox/src/java/org/apache/lucene/search/DocValuesTermsQuery.java b/lucene/sandbox/src/java/org/apache/lucene/search/DocValuesTermsQuery.java
index 4dd13cb..7c8dc92 100644
--- a/lucene/sandbox/src/java/org/apache/lucene/search/DocValuesTermsQuery.java
+++ b/lucene/sandbox/src/java/org/apache/lucene/search/DocValuesTermsQuery.java
@@ -120,7 +120,7 @@ public class DocValuesTermsQuery extends Query {
 
   @Override
   public boolean equals(Object obj) {
-    if (super.equals(obj) == false) {
+    if (! sameClassAs(obj)) {
       return false;
     }
     DocValuesTermsQuery that = (DocValuesTermsQuery) obj;
@@ -132,7 +132,7 @@ public class DocValuesTermsQuery extends Query {
 
   @Override
   public int hashCode() {
-    return 31 * super.hashCode() + Objects.hash(field, Arrays.asList(terms));
+    return 31 * getClass().hashCode() + Objects.hash(field, Arrays.asList(terms));
   }
 
   @Override
diff --git a/lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.java b/lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.java
index e9321df..4169812 100644
--- a/lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.java
+++ b/lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.java
@@ -233,7 +233,7 @@ public class TermAutomatonQuery extends Query {
   /** Returns true iff <code>o</code> is equal to this. */
   @Override
   public boolean equals(Object o) {
-    if (!(o instanceof TermAutomatonQuery)) {
+    if (! sameClassAs(o)) {
       return false;
     }
     TermAutomatonQuery other = (TermAutomatonQuery) o;
@@ -247,8 +247,8 @@ public class TermAutomatonQuery extends Query {
 
     // NOTE: not quite correct, because if terms were added in different
     // order in each query but the language is the same, we return false:
-    return super.equals(o)
-      && this.termToID.equals(other.termToID) &&
+    return
+      termToID.equals(other.termToID) &&
       Operations.sameLanguage(det, other.det);
   }
 
@@ -258,7 +258,7 @@ public class TermAutomatonQuery extends Query {
     if (det == null) {
       throw new IllegalStateException("please call finish first");
     }
-    return super.hashCode() ^ termToID.hashCode() + det.toDot().hashCode();
+    return getClass().hashCode() ^ termToID.hashCode() + det.toDot().hashCode();
   }
 
   /** Returns the dot (graphviz) representation of this automaton.
diff --git a/lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/CompositeVerifyQuery.java b/lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/CompositeVerifyQuery.java
index 0e6ea2c..c20ef15 100644
--- a/lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/CompositeVerifyQuery.java
+++ b/lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/CompositeVerifyQuery.java
@@ -58,9 +58,9 @@ public class CompositeVerifyQuery extends Query {
 
   @Override
   public boolean equals(Object o) {
-    if (this == o) return true;
-    if (o == null || getClass() != o.getClass()) return false;
-    if (!super.equals(o)) return false;
+    if (! sameClassAs(o)) {
+      return false;
+    }
 
     CompositeVerifyQuery that = (CompositeVerifyQuery) o;
 
@@ -72,7 +72,7 @@ public class CompositeVerifyQuery extends Query {
 
   @Override
   public int hashCode() {
-    int result = super.hashCode();
+    int result = getClass().hashCode();
     result = 31 * result + indexQuery.hashCode();
     result = 31 * result + predicateValueSource.hashCode();
     return result;
diff --git a/lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery.java b/lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery.java
index ebb3ada..dc7881c 100644
--- a/lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery.java
+++ b/lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery.java
@@ -64,8 +64,9 @@ public class IntersectsRPTVerifyQuery extends Query {
 
   @Override
   public boolean equals(Object o) {
-    if (this == o) return true;
-    if (!super.equals(o)) return false;
+    if (! sameClassAs(o)) {
+      return false;
+    }
 
     IntersectsRPTVerifyQuery that = (IntersectsRPTVerifyQuery) o;
 
@@ -76,7 +77,7 @@ public class IntersectsRPTVerifyQuery extends Query {
 
   @Override
   public int hashCode() {
-    int result = super.hashCode();
+    int result = getClass().hashCode();
     result = 31 * result + intersectsDiffQuery.hashCode();
     result = 31 * result + predicateValueSource.hashCode();
     return result;
diff --git a/lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/AbstractPrefixTreeQuery.java b/lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/AbstractPrefixTreeQuery.java
index e599e79..9a77d50 100644
--- a/lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/AbstractPrefixTreeQuery.java
+++ b/lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/AbstractPrefixTreeQuery.java
@@ -56,22 +56,19 @@ public abstract class AbstractPrefixTreeQuery extends Query {
 
   @Override
   public boolean equals(Object o) {
-    if (this == o) return true;
-    if (super.equals(o) == false) return false;
-
-    AbstractPrefixTreeQuery that = (AbstractPrefixTreeQuery) o;
-
-    if (detailLevel != that.detailLevel) return false;
-    if (!fieldName.equals(that.fieldName)) return false;
-    if (!queryShape.equals(that.queryShape)) return false;
+    return sameClassAs(o) &&
+           equalsTo(getClass().cast(o));
+  }
 
-    return true;
+  private boolean equalsTo(AbstractPrefixTreeQuery other) {
+    return detailLevel == other.detailLevel &&
+           fieldName.equals(other.fieldName) &&
+           queryShape.equals(other.queryShape);
   }
 
   @Override
   public int hashCode() {
-    int result = super.hashCode();
-    result = 31 * result + queryShape.hashCode();
+    int result = queryShape.hashCode();
     result = 31 * result + fieldName.hashCode();
     result = 31 * result + detailLevel;
     return result;
diff --git a/lucene/spatial-extras/src/java/org/apache/lucene/spatial/serialized/SerializedDVStrategy.java b/lucene/spatial-extras/src/java/org/apache/lucene/spatial/serialized/SerializedDVStrategy.java
index cf2c329..5ac4969 100644
--- a/lucene/spatial-extras/src/java/org/apache/lucene/spatial/serialized/SerializedDVStrategy.java
+++ b/lucene/spatial-extras/src/java/org/apache/lucene/spatial/serialized/SerializedDVStrategy.java
@@ -157,8 +157,9 @@ public class SerializedDVStrategy extends SpatialStrategy {
 
     @Override
     public boolean equals(Object o) {
-      if (this == o) return true;
-      if (super.equals(o) == false) return false;
+      if (! sameClassAs(o)) {
+        return false;
+      }
 
       PredicateValueSourceQuery that = (PredicateValueSourceQuery) o;
 
@@ -169,7 +170,7 @@ public class SerializedDVStrategy extends SpatialStrategy {
 
     @Override
     public int hashCode() {
-      return super.hashCode() + 31 * predicateValueSource.hashCode();
+      return getClass().hashCode() + 31 * predicateValueSource.hashCode();
     }
 
     @Override
diff --git a/lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointInBBoxQuery.java b/lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointInBBoxQuery.java
index 1634d45..c87689d 100644
--- a/lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointInBBoxQuery.java
+++ b/lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointInBBoxQuery.java
@@ -133,9 +133,9 @@ public class GeoPointInBBoxQuery extends Query {
 
   @Override
   public boolean equals(Object o) {
-    if (this == o) return true;
-    if (!(o instanceof GeoPointInBBoxQuery)) return false;
-    if (!super.equals(o)) return false;
+    if (! sameClassAs(o)) {
+      return false;
+    }
 
     GeoPointInBBoxQuery that = (GeoPointInBBoxQuery) o;
 
@@ -150,7 +150,7 @@ public class GeoPointInBBoxQuery extends Query {
 
   @Override
   public int hashCode() {
-    int result = super.hashCode();
+    int result = getClass().hashCode();
     long temp;
     result = 31 * result + field.hashCode();
     temp = Double.doubleToLongBits(minLat);
diff --git a/lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointTermQueryConstantScoreWrapper.java b/lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointTermQueryConstantScoreWrapper.java
index 13ded15..6ff0316 100644
--- a/lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointTermQueryConstantScoreWrapper.java
+++ b/lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointTermQueryConstantScoreWrapper.java
@@ -65,7 +65,7 @@ final class GeoPointTermQueryConstantScoreWrapper <Q extends GeoPointMultiTermQu
 
   @Override
   public final boolean equals(final Object o) {
-    if (super.equals(o) == false) {
+    if (! sameClassAs(o)) {
       return false;
     }
     final GeoPointTermQueryConstantScoreWrapper<?> that = (GeoPointTermQueryConstantScoreWrapper<?>) o;
@@ -74,7 +74,7 @@ final class GeoPointTermQueryConstantScoreWrapper <Q extends GeoPointMultiTermQu
 
   @Override
   public final int hashCode() {
-    return 31 * super.hashCode() + query.hashCode();
+    return 31 * getClass().hashCode() + query.hashCode();
   }
 
   @Override
diff --git a/lucene/spatial3d/src/java/org/apache/lucene/spatial3d/PointInGeo3DShapeQuery.java b/lucene/spatial3d/src/java/org/apache/lucene/spatial3d/PointInGeo3DShapeQuery.java
index d5d98d1..f101f7a 100644
--- a/lucene/spatial3d/src/java/org/apache/lucene/spatial3d/PointInGeo3DShapeQuery.java
+++ b/lucene/spatial3d/src/java/org/apache/lucene/spatial3d/PointInGeo3DShapeQuery.java
@@ -117,9 +117,9 @@ final class PointInGeo3DShapeQuery extends Query {
   @Override
   @SuppressWarnings({"unchecked","rawtypes"})
   public boolean equals(Object o) {
-    if (this == o) return true;
-    if (o == null || getClass() != o.getClass()) return false;
-    if (!super.equals(o)) return false;
+    if (! sameClassAs(o)) {
+      return false;
+    }
 
     PointInGeo3DShapeQuery that = (PointInGeo3DShapeQuery) o;
     if (field.equals(that.field) == false) {
@@ -131,7 +131,7 @@ final class PointInGeo3DShapeQuery extends Query {
 
   @Override
   public int hashCode() {
-    int result = super.hashCode();
+    int result = getClass().hashCode();
     result = 31 * result + field.hashCode();
     result = 31 * result + shape.hashCode();
     return result;
diff --git a/lucene/suggest/src/java/org/apache/lucene/search/suggest/document/ContextQuery.java b/lucene/suggest/src/java/org/apache/lucene/search/suggest/document/ContextQuery.java
index d004cdb..be9f208 100644
--- a/lucene/suggest/src/java/org/apache/lucene/search/suggest/document/ContextQuery.java
+++ b/lucene/suggest/src/java/org/apache/lucene/search/suggest/document/ContextQuery.java
@@ -34,7 +34,7 @@ import org.apache.lucene.util.automaton.Operations;
 import org.apache.lucene.util.fst.Util;
 
 /**
- * A {@link CompletionQuery} that match documents specified by
+ * A {@link CompletionQuery} that matches documents specified by
  * a wrapped {@link CompletionQuery} supporting boosting and/or filtering
  * by specified contexts.
  * <p>
@@ -315,4 +315,15 @@ public class ContextQuery extends CompletionQuery {
       return currentBoost + innerWeight.boost();
     }
   }
+
+  @Override
+  public boolean equals(Object o) {
+    throw new UnsupportedOperationException();
+  }
+
+  @Override
+  public int hashCode() {
+    throw new UnsupportedOperationException();
+  }
+
 }
diff --git a/lucene/suggest/src/java/org/apache/lucene/search/suggest/document/PrefixCompletionQuery.java b/lucene/suggest/src/java/org/apache/lucene/search/suggest/document/PrefixCompletionQuery.java
index 29d8c2b..91d494b 100644
--- a/lucene/suggest/src/java/org/apache/lucene/search/suggest/document/PrefixCompletionQuery.java
+++ b/lucene/suggest/src/java/org/apache/lucene/search/suggest/document/PrefixCompletionQuery.java
@@ -77,4 +77,14 @@ public class PrefixCompletionQuery extends CompletionQuery {
   public Analyzer getAnalyzer() {
     return analyzer;
   }
+
+  @Override
+  public boolean equals(Object o) {
+    throw new UnsupportedOperationException();
+  }
+
+  @Override
+  public int hashCode() {
+    throw new UnsupportedOperationException();
+  }
 }
diff --git a/lucene/suggest/src/java/org/apache/lucene/search/suggest/document/RegexCompletionQuery.java b/lucene/suggest/src/java/org/apache/lucene/search/suggest/document/RegexCompletionQuery.java
index 72bc495..5e0c489 100644
--- a/lucene/suggest/src/java/org/apache/lucene/search/suggest/document/RegexCompletionQuery.java
+++ b/lucene/suggest/src/java/org/apache/lucene/search/suggest/document/RegexCompletionQuery.java
@@ -106,4 +106,13 @@ public class RegexCompletionQuery extends CompletionQuery {
     return maxDeterminizedStates;
   }
 
+  @Override
+  public boolean equals(Object o) {
+    throw new UnsupportedOperationException();
+  }
+
+  @Override
+  public int hashCode() {
+    throw new UnsupportedOperationException();
+  }
 }
diff --git a/lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils.java b/lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils.java
index 74a46d4..b998ae9 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils.java
@@ -67,6 +67,17 @@ public class QueryUtils {
       public String toString(String field) {
         return "My Whacky Query";
       }
+
+      @Override
+      public boolean equals(Object o) {
+        return sameClassAs(o);
+      }
+
+      @Override
+      public int hashCode() {
+        return getClass().hashCode();
+      }
+
     };
     checkUnequal(q, whacky);
 
diff --git a/lucene/test-framework/src/java/org/apache/lucene/search/RandomApproximationQuery.java b/lucene/test-framework/src/java/org/apache/lucene/search/RandomApproximationQuery.java
index f628147..e9bd8b7 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/search/RandomApproximationQuery.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/search/RandomApproximationQuery.java
@@ -50,19 +50,16 @@ public class RandomApproximationQuery extends Query {
 
   @Override
   public boolean equals(Object obj) {
-    if (super.equals(obj) == false) {
+    if (! sameClassAs(obj)) {
       return false;
     }
     final RandomApproximationQuery that = (RandomApproximationQuery) obj;
-    if (this.query.equals(that.query) == false) {
-      return false;
-    }
-    return true;
+    return query.equals(that.query);
   }
 
   @Override
   public int hashCode() {
-    return 31 * super.hashCode() + query.hashCode();
+    return 31 * getClass().hashCode() + query.hashCode();
   }
 
   @Override
diff --git a/lucene/test-framework/src/java/org/apache/lucene/search/spans/AssertingSpanQuery.java b/lucene/test-framework/src/java/org/apache/lucene/search/spans/AssertingSpanQuery.java
index bf98ba1..544a53c 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/search/spans/AssertingSpanQuery.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/search/spans/AssertingSpanQuery.java
@@ -21,6 +21,7 @@ import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.Query;
 
 import java.io.IOException;
+import java.util.Objects;
 
 /** Wraps a span query with asserts */
 public class AssertingSpanQuery extends SpanQuery {
@@ -64,22 +65,17 @@ public class AssertingSpanQuery extends SpanQuery {
   }
 
   @Override
-  public int hashCode() {
-    final int prime = 31;
-    int result = super.hashCode();
-    result = prime * result + ((in == null) ? 0 : in.hashCode());
-    return result;
+  public boolean equals(Object o) {
+    return sameClassAs(o) &&
+           equalsTo(getClass().cast(o));
+  }
+
+  private boolean equalsTo(AssertingSpanQuery other) {
+    return Objects.equals(in, other.in);
   }
 
   @Override
-  public boolean equals(Object obj) {
-    if (this == obj) return true;
-    if (!super.equals(obj)) return false;
-    if (getClass() != obj.getClass()) return false;
-    AssertingSpanQuery other = (AssertingSpanQuery) obj;
-    if (in == null) {
-      if (other.in != null) return false;
-    } else if (!in.equals(other.in)) return false;
-    return true;
+  public int hashCode() {
+    return (in == null) ? 0 : in.hashCode();
   }
 }
diff --git a/solr/core/src/java/org/apache/solr/search/QueryWrapperFilter.java b/solr/core/src/java/org/apache/solr/search/QueryWrapperFilter.java
index 264378b..4482271 100644
--- a/solr/core/src/java/org/apache/solr/search/QueryWrapperFilter.java
+++ b/solr/core/src/java/org/apache/solr/search/QueryWrapperFilter.java
@@ -89,14 +89,16 @@ public class QueryWrapperFilter extends Filter {
 
   @Override
   public boolean equals(Object o) {
-    if (super.equals(o) == false) {
-      return false;
+    return sameClassAs(o) &&
+           equalsTo(getClass().cast(o));
   }
-    return this.query.equals(((QueryWrapperFilter)o).query);
+
+  private boolean equalsTo(QueryWrapperFilter other) {
+    return other.equals(query);
   }
 
   @Override
   public int hashCode() {
-    return 31 * super.hashCode() + query.hashCode();
+    return query.hashCode();
   }
 }
