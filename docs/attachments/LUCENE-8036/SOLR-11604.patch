diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter.java
index 0775cf7..73e12af 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter.java
@@ -104,6 +104,12 @@ public final class ShingleFilter extends TokenFilter {
   private char[] fillerToken = DEFAULT_FILLER_TOKEN.toCharArray();
 
   /**
+   * When this attribute is true, the filler tokens are not inserted
+   * in the shingle (and the empty positions are not counted as a word).
+   */
+  private boolean skipFillerTokens = false;
+
+  /**
    * By default, we output unigrams (individual tokens) as well as shingles
    * (token n-grams).
    */
@@ -300,6 +306,16 @@ public final class ShingleFilter extends TokenFilter {
     this.fillerToken = null == fillerToken ? new char[0] : fillerToken.toCharArray();
   }
 
+  /**
+   * Shall the filler tokens be ignored in the shingle? (default: false)
+   *
+   * @param skipFillerTokens Whether or not to ignore filler tokens
+   */
+  public void setSkipFillerTokens(boolean skipFillerTokens) {
+    this.skipFillerTokens = skipFillerTokens;
+  }
+
+
   @Override
   public boolean incrementToken() throws IOException {
     boolean tokenAvailable = false;
@@ -398,7 +414,7 @@ public final class ShingleFilter extends TokenFilter {
         } else {
           this.copyTo(target.attSource);
         }
-        if (posIncrAtt.getPositionIncrement() > 1) {
+        if (!this.skipFillerTokens && posIncrAtt.getPositionIncrement() > 1) {
           // Each output shingle must contain at least one input token, 
           // so no more than (maxShingleSize - 1) filler tokens will be inserted.
           numFillerTokensToInsert = Math.min(posIncrAtt.getPositionIncrement() - 1, maxShingleSize - 1);
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilterFactory.java
index c6b1519..8f4f836 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilterFactory.java
@@ -40,6 +40,7 @@ public class ShingleFilterFactory extends TokenFilterFactory {
   private final boolean outputUnigramsIfNoShingles;
   private final String tokenSeparator;
   private final String fillerToken;
+  private final boolean skipFillerTokens;
 
   /** Creates a new ShingleFilterFactory */
   public ShingleFilterFactory(Map<String, String> args) {
@@ -60,6 +61,7 @@ public class ShingleFilterFactory extends TokenFilterFactory {
     outputUnigramsIfNoShingles = getBoolean(args, "outputUnigramsIfNoShingles", false);
     tokenSeparator = get(args, "tokenSeparator", ShingleFilter.DEFAULT_TOKEN_SEPARATOR);
     fillerToken = get(args, "fillerToken", ShingleFilter.DEFAULT_FILLER_TOKEN);
+    skipFillerTokens = getBoolean(args, "skipFillerTokens", false);
     if (!args.isEmpty()) {
       throw new IllegalArgumentException("Unknown parameters: " + args);
     }
@@ -72,6 +74,7 @@ public class ShingleFilterFactory extends TokenFilterFactory {
     r.setOutputUnigramsIfNoShingles(outputUnigramsIfNoShingles);
     r.setTokenSeparator(tokenSeparator);
     r.setFillerToken(fillerToken);
+    r.setSkipFillerTokens(skipFillerTokens);
     return r;
   }
 }
diff --git a/lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleFilterTest.java b/lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleFilterTest.java
index 5645900..dc891d7 100644
--- a/lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleFilterTest.java
+++ b/lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleFilterTest.java
@@ -97,6 +97,26 @@ public class ShingleFilterTest extends BaseTokenStreamTestCase {
     "word", "shingle", "shingle", "word", "shingle", "shingle", "word"
   };
 
+
+  public static final Token[] BI_GRAM_TOKENS_WITH_HOLES_SKIP_FILLER_TOKENS = new Token[] {
+    createToken("please", 0, 6),
+    createToken("please divide", 0, 13),
+    createToken("divide", 7, 13),
+    createToken("divide sentence", 7, 27),
+    createToken("sentence", 19, 27),
+    createToken("sentence shingles", 19, 39),
+    createToken("shingles", 33, 39),
+  };
+
+  public static final int[] BI_GRAM_POSITION_INCREMENTS_WITH_HOLES_SKIP_FILLER_TOKENS = new int[] {
+    1, 0, 1, 0, 1, 0, 1
+  };
+
+  private static final String[] BI_GRAM_TYPES_WITH_HOLES_SKIP_FILLER_TOKENS = {
+    "word", "shingle", 
+    "word", "shingle", "word", "shingle", "word"
+  };
+
   public static final Token[] BI_GRAM_TOKENS_WITHOUT_UNIGRAMS = new Token[] {
     createToken("please divide", 0, 13),
     createToken("divide this", 7, 18),
@@ -792,6 +812,13 @@ public class ShingleFilterTest extends BaseTokenStreamTestCase {
                            true);
   }
 
+  public void testBiGramFilterWithHolesSkipFillerTokens() throws IOException {
+    this.shingleFilterTest(2, testTokenWithHoles, BI_GRAM_TOKENS_WITH_HOLES_SKIP_FILLER_TOKENS,
+                           BI_GRAM_POSITION_INCREMENTS_WITH_HOLES_SKIP_FILLER_TOKENS, 
+                           BI_GRAM_TYPES_WITH_HOLES_SKIP_FILLER_TOKENS, 
+                           true, true);
+  }
+
   public void testBiGramFilterWithoutUnigrams() throws IOException {
     this.shingleFilterTest(2, TEST_TOKEN, BI_GRAM_TOKENS_WITHOUT_UNIGRAMS,
                            BI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS, BI_GRAM_TYPES_WITHOUT_UNIGRAMS,
@@ -1037,6 +1064,17 @@ public class ShingleFilterTest extends BaseTokenStreamTestCase {
     shingleFilterTestCommon(filter, tokensToCompare, positionIncrements, types);
   }
 
+  protected void shingleFilterTest(int maxSize, Token[] tokensToShingle, Token[] tokensToCompare,
+                                   int[] positionIncrements, String[] types,
+                                   boolean outputUnigrams, boolean skipFillerTokens)
+    throws IOException {
+
+    ShingleFilter filter = new ShingleFilter(new CannedTokenStream(tokensToShingle), maxSize);
+    filter.setOutputUnigrams(outputUnigrams);
+    filter.setSkipFillerTokens(skipFillerTokens);
+    shingleFilterTestCommon(filter, tokensToCompare, positionIncrements, types);
+  }
+
   protected void shingleFilterTest(int minSize, int maxSize, Token[] tokensToShingle, 
                                    Token[] tokensToCompare, int[] positionIncrements,
                                    String[] types, boolean outputUnigrams)
