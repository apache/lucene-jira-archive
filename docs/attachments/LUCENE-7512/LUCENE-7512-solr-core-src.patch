diff --git a/solr/core/src/java/org/apache/solr/cloud/Assign.java b/solr/core/src/java/org/apache/solr/cloud/Assign.java
index e6e08f9..faaa1f7 100644
--- a/solr/core/src/java/org/apache/solr/cloud/Assign.java
+++ b/solr/core/src/java/org/apache/solr/cloud/Assign.java
@@ -98,7 +98,7 @@
       map.put(shardId, cnt);
     }
 
-    Collections.sort(shardIdNames, (o1, o2) -> {
+    Collections.sort(shardIdNames, (String o1, String o2) -> {
       Integer one = map.get(o1);
       Integer two = map.get(o2);
       return one.compareTo(two);
diff --git a/solr/core/src/java/org/apache/solr/cloud/rule/ReplicaAssigner.java b/solr/core/src/java/org/apache/solr/cloud/rule/ReplicaAssigner.java
index 4ecda47..6a22b1a 100644
--- a/solr/core/src/java/org/apache/solr/cloud/rule/ReplicaAssigner.java
+++ b/solr/core/src/java/org/apache/solr/cloud/rule/ReplicaAssigner.java
@@ -213,7 +213,7 @@
     int startPosition = 0;
     Map<String, Map<String, Integer>> copyOfCurrentState = getDeepCopy(shardVsNodes, 2);
     List<String> sortedLiveNodes = new ArrayList<>(this.participatingLiveNodes);
-    Collections.sort(sortedLiveNodes, (n1, n2) -> {
+    Collections.sort(sortedLiveNodes, (String n1, String n2) -> {
       int result1 = 0;
       for (int i = 0; i < rulePermutation.length; i++) {
         Rule rule = rules.get(rulePermutation[i]);
diff --git a/solr/core/src/java/org/apache/solr/core/HdfsDirectoryFactory.java b/solr/core/src/java/org/apache/solr/core/HdfsDirectoryFactory.java
index b003287..d62eea8 100644
--- a/solr/core/src/java/org/apache/solr/core/HdfsDirectoryFactory.java
+++ b/solr/core/src/java/org/apache/solr/core/HdfsDirectoryFactory.java
@@ -180,6 +180,7 @@
     }
   }
 
+  @SuppressWarnings("resource")
   @Override
   protected Directory create(String path, LockFactory lockFactory, DirContext dirContext) throws IOException {
     assert params != null : "init must be called before create";
diff --git a/solr/core/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.java b/solr/core/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.java
index 0770bd4..8008d60 100644
--- a/solr/core/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.java
+++ b/solr/core/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.java
@@ -91,6 +91,7 @@
    *
    * @return NamedList containing the tokens produced by analyzing the given value
    */
+  @SuppressWarnings("resource")
   protected NamedList<? extends Object> analyzeValue(String value, AnalysisContext context) {
 
     Analyzer analyzer = context.getAnalyzer();
@@ -141,7 +142,7 @@
       listBasedTokenStream = new ListBasedTokenStream(listBasedTokenStream, tokens);
     }
 
-    return namedList;
+    return namedList; 
   }
 
   /**
diff --git a/solr/core/src/java/org/apache/solr/handler/ClassifyStream.java b/solr/core/src/java/org/apache/solr/handler/ClassifyStream.java
index 1c26685..61621cf 100644
--- a/solr/core/src/java/org/apache/solr/handler/ClassifyStream.java
+++ b/solr/core/src/java/org/apache/solr/handler/ClassifyStream.java
@@ -85,6 +85,7 @@
     if (solrCoreObj == null || !(solrCoreObj instanceof SolrCore) ) {
       throw new SolrException(SolrException.ErrorCode.INVALID_STATE, "StreamContext must have SolrCore in solr-core key");
     }
+    @SuppressWarnings("resource")
     SolrCore solrCore = (SolrCore) solrCoreObj;
     analyzer = solrCore.getLatestSchema().getFieldType(analyzerField).getIndexAnalyzer();
 
diff --git a/solr/core/src/java/org/apache/solr/handler/ReplicationHandler.java b/solr/core/src/java/org/apache/solr/handler/ReplicationHandler.java
index 84e1ba2..0389145 100644
--- a/solr/core/src/java/org/apache/solr/handler/ReplicationHandler.java
+++ b/solr/core/src/java/org/apache/solr/handler/ReplicationHandler.java
@@ -1249,6 +1249,7 @@
         replicateOnStart = true;
         RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);
         try {
+          @SuppressWarnings("resource")
           DirectoryReader reader = s==null ? null : s.get().getIndexReader();
           if (reader!=null && reader.getIndexCommit() != null && reader.getIndexCommit().getGeneration() != 1L) {
             try {
diff --git a/solr/core/src/java/org/apache/solr/handler/SQLHandler.java b/solr/core/src/java/org/apache/solr/handler/SQLHandler.java
index 3074d9b..bd8d958 100644
--- a/solr/core/src/java/org/apache/solr/handler/SQLHandler.java
+++ b/solr/core/src/java/org/apache/solr/handler/SQLHandler.java
@@ -252,6 +252,7 @@
       // Do the rollups in parallel
       // Maintain the sort of the Tuples coming from the workers.
       StreamComparator comp = bucketSortComp(buckets, sortDirection);
+      @SuppressWarnings("resource")
       ParallelStream parallelStream = new ParallelStream(workerZkHost, workerCollection, tupleStream, numWorkers, comp);
 
       StreamFactory factory = new StreamFactory()
@@ -391,6 +392,7 @@
     if(numWorkers > 1) {
       // Do the unique in parallel
       // Maintain the sort of the Tuples coming from the workers.
+      @SuppressWarnings("resource")
       ParallelStream parallelStream = new ParallelStream(workerZkHost, workerCollection, tupleStream, numWorkers, comp);
 
       StreamFactory factory = new StreamFactory()
diff --git a/solr/core/src/java/org/apache/solr/handler/component/ExpandComponent.java b/solr/core/src/java/org/apache/solr/handler/component/ExpandComponent.java
index 8274d68..a31667d 100644
--- a/solr/core/src/java/org/apache/solr/handler/component/ExpandComponent.java
+++ b/solr/core/src/java/org/apache/solr/handler/component/ExpandComponent.java
@@ -220,6 +220,7 @@
       if(CollapsingQParserPlugin.HINT_TOP_FC.equals(hint)) {
         Map<String, UninvertingReader.Type> mapping = new HashMap();
         mapping.put(field, UninvertingReader.Type.SORTED);
+        @SuppressWarnings("resource")
         UninvertingReader uninvertingReader = new UninvertingReader(new ReaderWrapper(searcher.getSlowAtomicReader(), field), mapping);
         values = uninvertingReader.getSortedDocValues(field);
       } else {
@@ -380,6 +381,7 @@
       if(CollapsingQParserPlugin.HINT_TOP_FC.equals(hint)) {
         Map<String, UninvertingReader.Type> mapping = new HashMap();
         mapping.put(field, UninvertingReader.Type.SORTED);
+        @SuppressWarnings("resource")
         UninvertingReader uninvertingReader = new UninvertingReader(new ReaderWrapper(searcher.getSlowAtomicReader(), field), mapping);
         values = uninvertingReader.getSortedDocValues(field);
       } else {
diff --git a/solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter.java b/solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter.java
index 2e31d7d..c0d0fa9 100644
--- a/solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter.java
+++ b/solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter.java
@@ -496,7 +496,7 @@
   }
 
   /** Highlights and returns the highlight object for this field -- a String[] by default. Null if none. */
-  @SuppressWarnings("unchecked")
+  @SuppressWarnings("resource")
   protected Object doHighlightingByHighlighter(Document doc, int docId, SchemaField schemaField, Query query,
                                                IndexReader reader, SolrQueryRequest req) throws IOException {
     final SolrParams params = req.getParams();
diff --git a/solr/core/src/java/org/apache/solr/request/SimpleFacets.java b/solr/core/src/java/org/apache/solr/request/SimpleFacets.java
index 93ca4fa..3f8fba7 100644
--- a/solr/core/src/java/org/apache/solr/request/SimpleFacets.java
+++ b/solr/core/src/java/org/apache/solr/request/SimpleFacets.java
@@ -838,6 +838,7 @@
    * @see FacetParams#FACET_ZEROS
    * @see FacetParams#FACET_MISSING
    */
+  @SuppressWarnings("resource")
   public NamedList<Integer> getFacetTermEnumCounts(SolrIndexSearcher searcher, DocSet docs, String field, int offset, int limit, int mincount, boolean missing, 
                                       String sort, String prefix, String contains, boolean ignoreCase, boolean intersectsCheck)
     throws IOException {
diff --git a/solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider.java b/solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider.java
index 2d16108..e3a00ce 100644
--- a/solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider.java
+++ b/solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider.java
@@ -135,6 +135,7 @@
     return rates.getRates().keySet();
   }
 
+  @SuppressWarnings("resource")
   @Override
   public boolean reload() throws SolrException {
     InputStream ratesJsonStream = null;
diff --git a/solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.java b/solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.java
index f6bc18e..ab195f3 100644
--- a/solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.java
+++ b/solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.java
@@ -1274,6 +1274,7 @@
 
           Map<String, UninvertingReader.Type> mapping = new HashMap();
           mapping.put(collapseField, UninvertingReader.Type.SORTED);
+          @SuppressWarnings("resource")
           UninvertingReader uninvertingReader = new UninvertingReader(new ReaderWrapper(searcher.getSlowAtomicReader(), collapseField), mapping);
           docValuesProducer = new EmptyDocValuesProducer() {
               @Override
diff --git a/solr/core/src/java/org/apache/solr/search/DocSlice.java b/solr/core/src/java/org/apache/solr/search/DocSlice.java
index fd9553a..39e2479 100644
--- a/solr/core/src/java/org/apache/solr/search/DocSlice.java
+++ b/solr/core/src/java/org/apache/solr/search/DocSlice.java
@@ -142,6 +142,7 @@
     if (other instanceof SortedIntDocSet || other instanceof HashDocSet) {
       return other.intersection(this);
     }
+    @SuppressWarnings("resource")
     HashDocSet h = new HashDocSet(docs,offset,len);
     return h.intersection(other);
   }
@@ -151,6 +152,7 @@
     if (other instanceof SortedIntDocSet || other instanceof HashDocSet) {
       return other.intersectionSize(this);
     }
+    @SuppressWarnings("resource")
     HashDocSet h = new HashDocSet(docs,offset,len);
     return h.intersectionSize(other);  
   }
@@ -160,6 +162,7 @@
     if (other instanceof SortedIntDocSet || other instanceof HashDocSet) {
       return other.intersects(this);
     }
+    @SuppressWarnings("resource")
     HashDocSet h = new HashDocSet(docs,offset,len);
     return h.intersects(other);
   }
diff --git a/solr/core/src/java/org/apache/solr/search/function/OrdFieldSource.java b/solr/core/src/java/org/apache/solr/search/function/OrdFieldSource.java
index 756a1a6..be07766 100644
--- a/solr/core/src/java/org/apache/solr/search/function/OrdFieldSource.java
+++ b/solr/core/src/java/org/apache/solr/search/function/OrdFieldSource.java
@@ -75,6 +75,7 @@
     final LeafReader r;
     Object o = context.get("searcher");
     if (o instanceof SolrIndexSearcher) {
+      @SuppressWarnings("resource")
       SolrIndexSearcher is = (SolrIndexSearcher) o;
       SchemaField sf = is.getSchema().getFieldOrNull(field);
       if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {
diff --git a/solr/core/src/java/org/apache/solr/search/function/ReverseOrdFieldSource.java b/solr/core/src/java/org/apache/solr/search/function/ReverseOrdFieldSource.java
index 3ed13f0..fe9751e 100644
--- a/solr/core/src/java/org/apache/solr/search/function/ReverseOrdFieldSource.java
+++ b/solr/core/src/java/org/apache/solr/search/function/ReverseOrdFieldSource.java
@@ -75,6 +75,7 @@
     final LeafReader r;
     Object o = context.get("searcher");
     if (o instanceof SolrIndexSearcher) {
+      @SuppressWarnings("resource")
       SolrIndexSearcher is = (SolrIndexSearcher) o;
       SchemaField sf = is.getSchema().getFieldOrNull(field);
       if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {
diff --git a/solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter.java b/solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter.java
index b9d3729..0a6916d 100644
--- a/solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter.java
+++ b/solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter.java
@@ -212,26 +212,29 @@
    */
   public static NodeConfig loadNodeConfig(Path solrHome, Properties nodeProperties) {
 
-    SolrResourceLoader loader = new SolrResourceLoader(solrHome, null, nodeProperties);
     if (!StringUtils.isEmpty(System.getProperty("solr.solrxml.location"))) {
       log.warn("Solr property solr.solrxml.location is no longer supported. " +
-               "Will automatically load solr.xml from ZooKeeper if it exists");
+          "Will automatically load solr.xml from ZooKeeper if it exists");
     }
 
-    String zkHost = System.getProperty("zkHost");
-    if (!StringUtils.isEmpty(zkHost)) {
-      try (SolrZkClient zkClient = new SolrZkClient(zkHost, 30000)) {
-        if (zkClient.exists("/solr.xml", true)) {
-          log.info("solr.xml found in ZooKeeper. Loading...");
-          byte[] data = zkClient.getData("/solr.xml", null, null, true);
-          return SolrXmlConfig.fromInputStream(loader, new ByteArrayInputStream(data));
+    try (SolrResourceLoader loader = new SolrResourceLoader(solrHome, null, nodeProperties)) {
+      String zkHost = System.getProperty("zkHost");
+      if (!StringUtils.isEmpty(zkHost)) {
+        try (SolrZkClient zkClient = new SolrZkClient(zkHost, 30000)) {
+          if (zkClient.exists("/solr.xml", true)) {
+            log.info("solr.xml found in ZooKeeper. Loading...");
+            byte[] data = zkClient.getData("/solr.xml", null, null, true);
+            return SolrXmlConfig.fromInputStream(loader, new ByteArrayInputStream(data));
+          }
+        } catch (Exception e) {
+          throw new SolrException(ErrorCode.SERVER_ERROR, "Error occurred while loading solr.xml from zookeeper", e);
         }
-      } catch (Exception e) {
-        throw new SolrException(ErrorCode.SERVER_ERROR, "Error occurred while loading solr.xml from zookeeper", e);
+        log.info("Loading solr.xml from SolrHome (not found in ZooKeeper)");
       }
-      log.info("Loading solr.xml from SolrHome (not found in ZooKeeper)");
+      return SolrXmlConfig.fromSolrHome(loader, loader.getInstancePath());
+    } catch (IOException e1) {
+      throw new RuntimeException(e1);
     }
-    return SolrXmlConfig.fromSolrHome(loader, loader.getInstancePath());
   }
   
   public CoreContainer getCores() {
diff --git a/solr/core/src/java/org/apache/solr/update/CdcrTransactionLog.java b/solr/core/src/java/org/apache/solr/update/CdcrTransactionLog.java
index ce99200..18376b2 100644
--- a/solr/core/src/java/org/apache/solr/update/CdcrTransactionLog.java
+++ b/solr/core/src/java/org/apache/solr/update/CdcrTransactionLog.java
@@ -93,8 +93,10 @@
         // 4 bytes for the record size, the lenght of the end message + 1 byte for its value tag,
         // and 4 bytes for the number of records
         long pos = size - 4 - END_MESSAGE.length() - 1 - 4;
-        if (pos < 0) return 0;
-
+        if (pos < 0) {
+          return 0;
+        }
+        @SuppressWarnings("resource")
         ChannelFastInputStream is = new ChannelFastInputStream(channel, pos);
         return is.readInt();
       }
diff --git a/solr/core/src/java/org/apache/solr/update/TransactionLog.java b/solr/core/src/java/org/apache/solr/update/TransactionLog.java
index 997485a..0f85d9b 100644
--- a/solr/core/src/java/org/apache/solr/update/TransactionLog.java
+++ b/solr/core/src/java/org/apache/solr/update/TransactionLog.java
@@ -223,9 +223,10 @@
     byte[] buf = new byte[ END_MESSAGE.length() ];
     long pos = size - END_MESSAGE.length() - 4;
     if (pos < 0) return false;
+    @SuppressWarnings("resource")
     ChannelFastInputStream is = new ChannelFastInputStream(channel, pos);
     is.read(buf);
-    for (int i=0; i<buf.length; i++) {
+    for (int i = 0; i < buf.length; i++) {
       if (buf[i] != END_MESSAGE.charAt(i)) return false;
     }
     return true;
diff --git a/solr/core/src/java/org/apache/solr/util/SimplePostTool.java b/solr/core/src/java/org/apache/solr/util/SimplePostTool.java
index 20e7231..71f9829 100644
--- a/solr/core/src/java/org/apache/solr/util/SimplePostTool.java
+++ b/solr/core/src/java/org/apache/solr/util/SimplePostTool.java
@@ -637,17 +637,18 @@
    * @throws IOException If there is a low-level I/O error.
    */
   public static ByteBuffer inputStreamToByteArray(InputStream is, long maxSize) throws IOException {
-    BAOS bos =  new BAOS();
-    long sz = 0;
-    int next = is.read();
-    while (next > -1) {
-      if(++sz > maxSize) throw new BufferOverflowException();
-      bos.write(next);
-      next = is.read();
+    try(BAOS bos =  new BAOS()){
+      long sz = 0;
+      int next = is.read();
+      while (next > -1) {
+        if (++sz > maxSize) throw new BufferOverflowException();
+        bos.write(next);
+        next = is.read();
+      }
+      bos.flush();
+      is.close();
+      return bos.getByteBuffer();
     }
-    bos.flush();
-    is.close();
-    return bos.getByteBuffer();
   }
 
   /**
diff --git a/solr/core/src/java/org/apache/solr/util/SolrLogLayout.java b/solr/core/src/java/org/apache/solr/util/SolrLogLayout.java
index b79ec0c..0493d60 100644
--- a/solr/core/src/java/org/apache/solr/util/SolrLogLayout.java
+++ b/solr/core/src/java/org/apache/solr/util/SolrLogLayout.java
@@ -146,6 +146,7 @@
      ***/
     
     SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();
+    @SuppressWarnings("resource")
     SolrQueryRequest req = requestInfo == null ? null : requestInfo.getReq();
     SolrCore core = req == null ? null : req.getCore();
     ZkController zkController = null;
