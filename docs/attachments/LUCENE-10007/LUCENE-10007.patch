diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsFilter.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsFilter.java
index f4c2f86c283..15ff6b068b2 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsFilter.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsFilter.java
@@ -30,6 +30,7 @@ import org.apache.lucene.analysis.tokenattributes.TypeAttribute;
  * TODO: Consider implementing https://issues.apache.org/jira/browse/LUCENE-1688 changes to stop list and associated constructors
  */
 
+// nocommit: fix examples to use underscore, not dash
 /**
  * Construct bigrams for frequently occurring terms while indexing. Single terms are still indexed
  * too, with bigrams overlaid. This is achieved through the use of {@link
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsQueryFilter.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsQueryFilter.java
index 80a638112fd..b589a2431d0 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsQueryFilter.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsQueryFilter.java
@@ -24,6 +24,7 @@ import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute;
 import org.apache.lucene.analysis.tokenattributes.PositionLengthAttribute;
 import org.apache.lucene.analysis.tokenattributes.TypeAttribute;
 
+// nocommit: fix examples to use underscore, not dash
 /**
  * Wrap a CommonGramsFilter optimizing phrase queries by only returning single words when they are
  * not a member of a bigram.
@@ -71,6 +72,7 @@ public final class CommonGramsQueryFilter extends TokenFilter {
     exhausted = false;
   }
 
+  // nocommit: fix examples to use underscore, not dash
   /**
    * Output bigrams whenever possible to optimize queries. Only output unigrams when they are not a
    * member of a bigram. Example:
diff --git a/lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/TestCommonGramsFilter.java b/lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/TestCommonGramsFilter.java
index 2ce0d3aec2e..99a53117cae 100644
--- a/lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/TestCommonGramsFilter.java
+++ b/lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/TestCommonGramsFilter.java
@@ -30,7 +30,7 @@ import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
 /** Tests CommonGrams(Query)Filter */
 public class TestCommonGramsFilter extends BaseTokenStreamTestCase {
   private static final CharArraySet commonWords =
-      new CharArraySet(Arrays.asList("s", "a", "b", "c", "d", "the", "of"), false);
+    new CharArraySet(Arrays.asList("s", "a", "b", "c", "d", "the", "of", "in"), false);
 
   public void testReset() throws Exception {
     final String input = "How the s a brown s cow d like A B thing?";
@@ -132,6 +132,10 @@ public class TestCommonGramsFilter extends BaseTokenStreamTestCase {
 
     assertAnalyzesTo(a, "s s s", new String[] {"s_s", "s_s"});
     assertAnalyzesTo(a, "of the of", new String[] {"of_the", "the_of"});
+
+    // example in javadocs
+    assertAnalyzesTo(a, "the rain in spain falls mainly", new String[] { "the_rain", "rain_in" ,"in_spain", "falls", "mainly" });
+
     a.close();
   }
 
