Index: lucene/src/test/org/apache/lucene/util/TestDoubleBarrelLRUCache.java
===================================================================
--- lucene/src/test/org/apache/lucene/util/TestDoubleBarrelLRUCache.java	(revision 1201918)
+++ lucene/src/test/org/apache/lucene/util/TestDoubleBarrelLRUCache.java	(working copy)
@@ -21,6 +21,13 @@
 
 public class TestDoubleBarrelLRUCache extends LuceneTestCase {
 
+  public void setUp() throws Exception {
+    super.setUp();
+    if (VERBOSE) {
+      System.out.println("The JRE version to run this test is >= JRE6: " + Constants.JRE_IS_MINIMUM_JAVA6);
+    }
+  }
+
   private void testCache(DoubleBarrelLRUCache<CloneableInteger,Object> cache, int n) throws Exception {
     Object dummy = new Object();
     
@@ -55,7 +62,7 @@
       assertNotNull(cache.get(new CloneableInteger(i)));
     }
   }
-    
+  
   public void testLRUCache() throws Exception {
     final int n = 100;
     testCache(new DoubleBarrelLRUCache<CloneableInteger,Object>(n), n);
Index: lucene/src/java/org/apache/lucene/util/DoubleBarrelLRUCache.java
===================================================================
--- lucene/src/java/org/apache/lucene/util/DoubleBarrelLRUCache.java	(revision 1201918)
+++ lucene/src/java/org/apache/lucene/util/DoubleBarrelLRUCache.java	(working copy)
@@ -19,6 +19,8 @@
 
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.atomic.AtomicInteger;
+import java.util.Collections;
+import java.util.HashMap;
 import java.util.Map;
 
 /**
@@ -58,8 +60,14 @@
   public DoubleBarrelLRUCache(int maxSize) {
     this.maxSize = maxSize;
     countdown = new AtomicInteger(maxSize);
-    cache1 = new ConcurrentHashMap<K,V>();
-    cache2 = new ConcurrentHashMap<K,V>();
+    if (Constants.SUN_OS && Constants.JRE_IS_MINIMUM_JAVA6 == false 
+        && Constants.BIG_ENDIAN == false && Constants.JAVA_VENDOR.startsWith("Sun")) {
+      cache1 = Collections.synchronizedMap(new HashMap<K,V>());
+      cache2 = Collections.synchronizedMap(new HashMap<K,V>());
+    } else {
+      cache1 = new ConcurrentHashMap<K,V>();
+      cache2 = new ConcurrentHashMap<K,V>();
+    }
   }
 
   @SuppressWarnings("unchecked") 
Index: lucene/src/java/org/apache/lucene/util/Constants.java
===================================================================
--- lucene/src/java/org/apache/lucene/util/Constants.java	(revision 1201918)
+++ lucene/src/java/org/apache/lucene/util/Constants.java	(working copy)
@@ -17,6 +17,8 @@
  * limitations under the License.
  */
 
+import java.nio.ByteOrder;
+
 import org.apache.lucene.LucenePackage;
 
 /**
@@ -74,6 +76,8 @@
     }
     JRE_IS_MINIMUM_JAVA7 = v7;
   }
+  
+  public static final boolean BIG_ENDIAN = ByteOrder.nativeOrder().equals(ByteOrder.BIG_ENDIAN);
 
   // this method prevents inlining the final version constant in compiled classes,
   // see: http://www.javaworld.com/community/node/3400
