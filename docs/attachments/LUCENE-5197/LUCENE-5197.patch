Index: lucene/test-framework/src/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat.java	(revision 1520629)
+++ lucene/test-framework/src/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat.java	(working copy)
@@ -50,6 +50,7 @@
 import org.apache.lucene.util.Bits;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.IOUtils;
+import org.apache.lucene.util.RamUsageEstimator;
 
 /** Stores all postings data in RAM, but writes a small
  *  token (header + single int) to identify which "slot" the
@@ -120,6 +121,15 @@
     @Override
     public void close() {
     }
+
+    @Override
+    public long ramBytesUsed() {
+      long sizeInBytes = 0;
+      for(RAMField field : fieldToTerms.values()) {
+        sizeInBytes += field.ramBytesUsed();
+      }
+      return sizeInBytes;
+    }
   } 
 
   static class RAMField extends Terms {
@@ -135,6 +145,15 @@
       this.info = info;
     }
 
+    /** Returns approximate RAM bytes used */
+    public long ramBytesUsed() {
+      long sizeInBytes = 0;
+      for(RAMTerm term : termToDocs.values()) {
+        sizeInBytes += term.ramBytesUsed();
+      }
+      return sizeInBytes;
+    }
+
     @Override
     public long size() {
       return termToDocs.size();
@@ -188,6 +207,15 @@
     public RAMTerm(String term) {
       this.term = term;
     }
+
+    /** Returns approximate RAM bytes used */
+    public long ramBytesUsed() {
+      long sizeInBytes = 0;
+      for(RAMDoc rDoc : docs) {
+        sizeInBytes += rDoc.ramBytesUsed();
+      }
+      return sizeInBytes;
+    }
   }
 
   static class RAMDoc {
@@ -199,6 +227,19 @@
       this.docID = docID;
       positions = new int[freq];
     }
+
+    /** Returns approximate RAM bytes used */
+    public long ramBytesUsed() {
+      long sizeInBytes = 0;
+      sizeInBytes +=  (positions!=null) ? RamUsageEstimator.sizeOf(positions) : 0;
+      
+      if (payloads != null) {
+        for(byte[] payload: payloads) {
+          sizeInBytes += (payload!=null) ? RamUsageEstimator.sizeOf(payload) : 0;
+        }
+      }
+      return sizeInBytes;
+    }
   }
 
   // Classes for writing to the postings state
Index: lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingTermVectorsFormat.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingTermVectorsFormat.java	(revision 1520629)
+++ lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingTermVectorsFormat.java	(working copy)
@@ -71,6 +71,11 @@
     public TermVectorsReader clone() {
       return new AssertingTermVectorsReader(in.clone());
     }
+
+    @Override
+    public long ramBytesUsed() {
+      return in.ramBytesUsed();
+    }
   }
 
   enum Status {
Index: lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingDocValuesFormat.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingDocValuesFormat.java	(revision 1520629)
+++ lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingDocValuesFormat.java	(working copy)
@@ -37,6 +37,7 @@
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.FixedBitSet;
 import org.apache.lucene.util.OpenBitSet;
+import org.apache.lucene.util.RamUsageEstimator;
 
 /**
  * Just like {@link Lucene45DocValuesFormat} but with additional asserts.
@@ -301,5 +302,10 @@
     public void close() throws IOException {
       in.close();
     }
+
+    @Override
+    public long ramBytesUsed() {
+      return in.ramBytesUsed();
+    }
   }
 }
Index: lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPostingsFormat.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPostingsFormat.java	(revision 1520629)
+++ lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPostingsFormat.java	(working copy)
@@ -86,6 +86,11 @@
     public int size() {
       return in.size();
     }
+
+    @Override
+    public long ramBytesUsed() {
+      return in.ramBytesUsed();
+    }
   }
   
   static class AssertingFieldsConsumer extends FieldsConsumer {
Index: lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingStoredFieldsFormat.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingStoredFieldsFormat.java	(revision 1520629)
+++ lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingStoredFieldsFormat.java	(working copy)
@@ -71,6 +71,11 @@
     public StoredFieldsReader clone() {
       return new AssertingStoredFieldsReader(in.clone(), maxDoc);
     }
+
+    @Override
+    public long ramBytesUsed() {
+      return in.ramBytesUsed();
+    }
   }
 
   enum Status {
Index: lucene/facet/src/java/org/apache/lucene/facet/codecs/facet42/Facet42DocValuesProducer.java
===================================================================
--- lucene/facet/src/java/org/apache/lucene/facet/codecs/facet42/Facet42DocValuesProducer.java	(revision 1520629)
+++ lucene/facet/src/java/org/apache/lucene/facet/codecs/facet42/Facet42DocValuesProducer.java	(working copy)
@@ -91,4 +91,13 @@
   @Override
   public void close() throws IOException {
   }
+
+  @Override
+  public long ramBytesUsed() {
+    long size = 0;
+    for (Facet42BinaryDocValues entry: fields.values()) {
+      size += entry.ramBytesUsed() + Integer.SIZE;
+    } 
+    return size;
+  }
 }
Index: lucene/facet/src/java/org/apache/lucene/facet/codecs/facet42/Facet42BinaryDocValues.java
===================================================================
--- lucene/facet/src/java/org/apache/lucene/facet/codecs/facet42/Facet42BinaryDocValues.java	(revision 1520629)
+++ lucene/facet/src/java/org/apache/lucene/facet/codecs/facet42/Facet42BinaryDocValues.java	(working copy)
@@ -22,6 +22,7 @@
 import org.apache.lucene.index.BinaryDocValues;
 import org.apache.lucene.store.DataInput;
 import org.apache.lucene.util.BytesRef;
+import org.apache.lucene.util.RamUsageEstimator;
 import org.apache.lucene.util.packed.PackedInts;
 
 class Facet42BinaryDocValues extends BinaryDocValues {
@@ -44,4 +45,9 @@
     ret.length = (int) (addresses.get(docID+1)-start);
   }
   
+  /** Returns approximate RAM bytes used */
+  public long ramBytesUsed() {
+    return RamUsageEstimator.sizeOf(bytes) + addresses.ramBytesUsed();
+  }
+  
 }
Index: lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReader.java	(revision 1520629)
+++ lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReader.java	(working copy)
@@ -85,4 +85,12 @@
     return (minValues == null ? 0 : minValues[block]) + subReaders[block].get(idx);
   }
 
+  /** Returns approximate RAM bytes used */
+  public long ramBytesUsed() {
+    long size = 0;
+    for (PackedInts.Reader reader : subReaders) {
+      size += reader.ramBytesUsed();
+    }
+    return size;
+  }
 }
Index: lucene/core/src/java/org/apache/lucene/util/packed/MonotonicBlockPackedReader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/packed/MonotonicBlockPackedReader.java	(revision 1520629)
+++ lucene/core/src/java/org/apache/lucene/util/packed/MonotonicBlockPackedReader.java	(working copy)
@@ -26,6 +26,7 @@
 import java.io.IOException;
 
 import org.apache.lucene.store.IndexInput;
+import org.apache.lucene.util.RamUsageEstimator;
 
 /**
  * Provides random access to a stream written with
@@ -83,5 +84,16 @@
   public long size() {
     return valueCount;
   }
+  
+  /** Returns the approximate RAM bytes used */
+  public long ramBytesUsed() {
+    long sizeInBytes = 0;
+    sizeInBytes += RamUsageEstimator.sizeOf(minValues);
+    sizeInBytes += RamUsageEstimator.sizeOf(averages);
+    for(PackedInts.Reader reader: subReaders) {
+      sizeInBytes += reader.ramBytesUsed();
+    }
+    return sizeInBytes;
+  }
 
 }
Index: lucene/core/src/java/org/apache/lucene/util/PagedBytes.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/PagedBytes.java	(revision 1520629)
+++ lucene/core/src/java/org/apache/lucene/util/PagedBytes.java	(working copy)
@@ -126,6 +126,11 @@
         assert b.length > 0;
       }
     }
+
+    /** Returns approximate RAM bytes used */
+    public long ramBytesUsed() {
+      return ((blocks!=null) ? (blockSize * blocks.length) : 0);
+    }
   }
 
   /** 1&lt;&lt;blockBits must be bigger than biggest single
Index: lucene/core/src/java/org/apache/lucene/util/FixedBitSet.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/FixedBitSet.java	(revision 1520629)
+++ lucene/core/src/java/org/apache/lucene/util/FixedBitSet.java	(working copy)
@@ -433,4 +433,9 @@
     // empty sets from returning 0, which is too common.
     return (int) ((h>>32) ^ h) + 0x98761234;
   }
+
+  /** Returns approximate RAM bytes used */
+  public long ramBytesUsed() {
+    return ((bits!=null) ? RamUsageEstimator.sizeOf(bits) : 0); 
+  }
 }
Index: lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader.java	(revision 1520629)
+++ lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader.java	(working copy)
@@ -39,6 +39,7 @@
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.IOUtils;
 import org.apache.lucene.util.PagedBytes;
+import org.apache.lucene.util.RamUsageEstimator;
 import org.apache.lucene.util.packed.PackedInts;
 
 /**
@@ -630,4 +631,9 @@
   public void close() throws IOException {
     dir.close();
   }
+
+  @Override
+  public long ramBytesUsed() {
+    return RamUsageEstimator.sizeOf(this);
+  }
 }
Index: lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader.java	(revision 1520629)
+++ lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader.java	(working copy)
@@ -244,4 +244,9 @@
 
     return fieldsStream;
   }
+
+  @Override
+  public long ramBytesUsed() {
+    return 0;
+  }
 }
Index: lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.java	(revision 1520629)
+++ lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.java	(working copy)
@@ -1195,4 +1195,10 @@
       return limit;
     }
   }
+
+  @Override
+  public long ramBytesUsed() {
+    return 0;
+  }
+
 }
Index: lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.java	(revision 1520629)
+++ lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.java	(working copy)
@@ -763,5 +763,10 @@
     
     return new Lucene40TermVectorsReader(fieldInfos, cloneTvx, cloneTvd, cloneTvf, size, numTotalDocs);
   }
+
+  @Override
+  public long ramBytesUsed() {
+    return 0;
+  }
 }
 
Index: lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.java	(revision 1520629)
+++ lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.java	(working copy)
@@ -1604,4 +1604,10 @@
       return docFreq;
     }
   }
+
+  @Override
+  public long ramBytesUsed() {
+    return 0;
+  }
+
 }
Index: lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer.java	(revision 1520629)
+++ lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer.java	(working copy)
@@ -43,6 +43,7 @@
 import org.apache.lucene.util.IOUtils;
 import org.apache.lucene.util.IntsRef;
 import org.apache.lucene.util.PagedBytes;
+import org.apache.lucene.util.RamUsageEstimator;
 import org.apache.lucene.util.fst.BytesRefFSTEnum;
 import org.apache.lucene.util.fst.BytesRefFSTEnum.InputOutput;
 import org.apache.lucene.util.fst.FST;
@@ -188,6 +189,11 @@
     return instance;
   }
   
+  @Override
+  public long ramBytesUsed() {
+    return RamUsageEstimator.sizeOf(this);
+  }
+  
   private NumericDocValues loadNumeric(FieldInfo field) throws IOException {
     NumericEntry entry = numerics.get(field.number);
     data.seek(entry.offset);
Index: lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer.java	(revision 1520629)
+++ lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer.java	(working copy)
@@ -20,7 +20,6 @@
 import static org.apache.lucene.codecs.lucene45.Lucene45DocValuesConsumer.DELTA_COMPRESSED;
 import static org.apache.lucene.codecs.lucene45.Lucene45DocValuesConsumer.GCD_COMPRESSED;
 import static org.apache.lucene.codecs.lucene45.Lucene45DocValuesConsumer.TABLE_COMPRESSED;
-
 import static org.apache.lucene.codecs.lucene45.Lucene45DocValuesConsumer.BINARY_FIXED_UNCOMPRESSED;
 import static org.apache.lucene.codecs.lucene45.Lucene45DocValuesConsumer.BINARY_VARIABLE_UNCOMPRESSED;
 import static org.apache.lucene.codecs.lucene45.Lucene45DocValuesConsumer.BINARY_PREFIX_COMPRESSED;
@@ -244,6 +243,18 @@
     return getNumeric(entry);
   }
   
+  @Override
+  public long ramBytesUsed() {
+    long sizeInBytes = 0;    
+    for(MonotonicBlockPackedReader monotonicBlockPackedReader: addressInstances.values()) {
+      sizeInBytes += Integer.SIZE + monotonicBlockPackedReader.ramBytesUsed();
+    }
+    for(MonotonicBlockPackedReader monotonicBlockPackedReader: ordIndexInstances.values()) {
+      sizeInBytes += Integer.SIZE + monotonicBlockPackedReader.ramBytesUsed();
+    }
+    return sizeInBytes;
+  }
+  
   LongNumericDocValues getNumeric(NumericEntry entry) throws IOException {
     final IndexInput data = this.data.clone();
     data.seek(entry.offset);
Index: lucene/core/src/java/org/apache/lucene/codecs/StoredFieldsReader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/StoredFieldsReader.java	(revision 1520629)
+++ lucene/core/src/java/org/apache/lucene/codecs/StoredFieldsReader.java	(working copy)
@@ -40,4 +40,7 @@
 
   @Override
   public abstract StoredFieldsReader clone();
+  
+  /** Returns approximate RAM bytes used */
+  public abstract long ramBytesUsed();
 }
Index: lucene/core/src/java/org/apache/lucene/codecs/FieldsProducer.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/FieldsProducer.java	(revision 1520629)
+++ lucene/core/src/java/org/apache/lucene/codecs/FieldsProducer.java	(working copy)
@@ -36,4 +36,7 @@
 
   @Override
   public abstract void close() throws IOException;
+  
+  /** Returns approximate RAM bytes used */
+  public abstract long ramBytesUsed();
 }
Index: lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.java	(revision 1520629)
+++ lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.java	(working copy)
@@ -547,6 +547,11 @@
       return new IntersectEnum(compiled, startTerm);
     }
     
+    /** Returns approximate RAM bytes used */
+    public long ramBytesUsed() {
+      return ((index!=null)? index.sizeInBytes() : 0);
+    }
+    
     // NOTE: cannot seek!
     private final class IntersectEnum extends TermsEnum {
       private final IndexInput in;
@@ -2929,4 +2934,13 @@
       }
     }
   }
+
+  @Override
+  public long ramBytesUsed() {
+    long sizeInByes = ((postingsReader!=null) ? postingsReader.ramBytesUsed() : 0);
+    for(FieldReader reader : fields.values()) {
+      sizeInByes += reader.ramBytesUsed();
+    }
+    return sizeInByes;
+  }
 }
Index: lucene/core/src/java/org/apache/lucene/codecs/DocValuesProducer.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/DocValuesProducer.java	(revision 1520629)
+++ lucene/core/src/java/org/apache/lucene/codecs/DocValuesProducer.java	(working copy)
@@ -64,6 +64,9 @@
    *  used by a single thread. */
   public abstract Bits getDocsWithField(FieldInfo field) throws IOException;
   
+  /** Returns approximate RAM bytes used */
+  public abstract long ramBytesUsed();
+  
   /** 
    * A simple implementation of {@link DocValuesProducer#getDocsWithField} that 
    * returns {@code true} if a document has an ordinal &gt;= 0
Index: lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.java	(revision 1520629)
+++ lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.java	(working copy)
@@ -497,4 +497,9 @@
 
   }
 
+  @Override
+  public long ramBytesUsed() {
+    return indexReader.ramBytesUsed();
+  }
+
 }
Index: lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsReader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsReader.java	(revision 1520629)
+++ lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsReader.java	(working copy)
@@ -57,6 +57,7 @@
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.IOUtils;
 import org.apache.lucene.util.LongsRef;
+import org.apache.lucene.util.RamUsageEstimator;
 import org.apache.lucene.util.packed.BlockPackedReaderIterator;
 import org.apache.lucene.util.packed.PackedInts;
 
@@ -1041,4 +1042,9 @@
     return sum;
   }
 
+  @Override
+  public long ramBytesUsed() {
+    return indexReader.ramBytesUsed();
+  }
+
 }
Index: lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader.java	(revision 1520629)
+++ lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader.java	(working copy)
@@ -24,6 +24,7 @@
 import org.apache.lucene.index.SegmentInfo;
 import org.apache.lucene.store.IndexInput;
 import org.apache.lucene.util.ArrayUtil;
+import org.apache.lucene.util.RamUsageEstimator;
 import org.apache.lucene.util.packed.PackedInts;
 
 /**
@@ -160,5 +161,23 @@
   public CompressingStoredFieldsIndexReader clone() {
     return this;
   }
+  
+  public long ramBytesUsed() {
+    long res = 0;
+    
+    for(PackedInts.Reader r : docBasesDeltas) {
+      res += r.ramBytesUsed();
+    }
+    for(PackedInts.Reader r : startPointersDeltas) {
+      res += r.ramBytesUsed();
+    }
 
+    res += RamUsageEstimator.sizeOf(docBases);
+    res += RamUsageEstimator.sizeOf(startPointers);
+    res += RamUsageEstimator.sizeOf(avgChunkDocs); 
+    res += RamUsageEstimator.sizeOf(avgChunkSizes);
+
+    return res;
+  }
+
 }
Index: lucene/core/src/java/org/apache/lucene/codecs/PostingsReaderBase.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/PostingsReaderBase.java	(revision 1520629)
+++ lucene/core/src/java/org/apache/lucene/codecs/PostingsReaderBase.java	(working copy)
@@ -73,4 +73,8 @@
    *  method should merely load the byte[] blob but not
    *  decode, which is done in {@link #nextTerm}. */
   public abstract void readTermsBlock(IndexInput termsIn, FieldInfo fieldInfo, BlockTermState termState) throws IOException;
+  
+  /** Returns approximate RAM bytes used */
+  public abstract long ramBytesUsed();
+  
 }
Index: lucene/core/src/java/org/apache/lucene/codecs/TermVectorsReader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/TermVectorsReader.java	(revision 1520629)
+++ lucene/core/src/java/org/apache/lucene/codecs/TermVectorsReader.java	(working copy)
@@ -42,6 +42,9 @@
    *  available from the {@link DocsAndPositionsEnum}. */
   public abstract Fields get(int doc) throws IOException;
 
+  /** Returns approximate RAM bytes used */
+  public abstract long ramBytesUsed();
+  
   /** Create a clone that one caller at a time may use to
    *  read term vectors. */
   @Override
Index: lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat.java	(revision 1520629)
+++ lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat.java	(working copy)
@@ -39,6 +39,7 @@
 import org.apache.lucene.util.Bits;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.IOUtils;
+import org.apache.lucene.util.RamUsageEstimator;
 
 /**
  * Enables per field docvalues support.
@@ -282,6 +283,20 @@
     public DocValuesProducer clone() {
       return new FieldsReader(this);
     }
+
+    @Override
+    public long ramBytesUsed() {
+      long size = 0;
+      for (Map.Entry<String,DocValuesProducer> entry : fields.entrySet()) {
+        size += (entry.getKey().length() * RamUsageEstimator.NUM_BYTES_CHAR) + 
+            entry.getValue().ramBytesUsed();
+      }
+      for (Map.Entry<String,DocValuesProducer> entry : formats.entrySet()) {
+        size += (entry.getKey().length() * RamUsageEstimator.NUM_BYTES_CHAR) + 
+            entry.getValue().ramBytesUsed();
+      }
+      return size;
+    }
   }
 
   @Override
Index: lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldPostingsFormat.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldPostingsFormat.java	(revision 1520629)
+++ lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldPostingsFormat.java	(working copy)
@@ -35,6 +35,7 @@
 import org.apache.lucene.index.SegmentWriteState;
 import org.apache.lucene.index.Terms;
 import org.apache.lucene.util.IOUtils;
+import org.apache.lucene.util.RamUsageEstimator;
 
 /**
  * Enables per field postings support.
@@ -225,6 +226,20 @@
     public void close() throws IOException {
       IOUtils.close(formats.values());
     }
+
+    @Override
+    public long ramBytesUsed() {
+      long sizeInBytes = 0;
+      for(Map.Entry<String,FieldsProducer> entry: fields.entrySet()) {
+        sizeInBytes += entry.getKey().length() * RamUsageEstimator.NUM_BYTES_CHAR;
+        sizeInBytes += entry.getValue().ramBytesUsed();
+      }
+      for(Map.Entry<String,FieldsProducer> entry: formats.entrySet()) {
+        sizeInBytes += entry.getKey().length() * RamUsageEstimator.NUM_BYTES_CHAR;
+        sizeInBytes += entry.getValue().ramBytesUsed();
+      }
+      return sizeInBytes;
+    }
   }
 
   @Override
Index: lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders.java	(revision 1520629)
+++ lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders.java	(working copy)
@@ -354,6 +354,14 @@
     coreClosedListeners.remove(listener);
   }
 
+  /** Returns approximate RAM bytes used */
+  public long ramBytesUsed() {
+    return ((dvProducer!=null) ? dvProducer.ramBytesUsed() : 0) + 
+        ((normsProducer!=null) ? normsProducer.ramBytesUsed() : 0) +
+        ((fields!=null) ? fields.ramBytesUsed() : 0) + 
+        ((fieldsReaderOrig!=null)? fieldsReaderOrig.ramBytesUsed() : 0) + 
+        ((termVectorsReaderOrig!=null) ? termVectorsReaderOrig.ramBytesUsed() : 0);
+  }
   @Override
   public String toString() {
     return "SegmentCoreReader(owner=" + owner + ")";
Index: lucene/core/src/java/org/apache/lucene/index/SegmentReader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/SegmentReader.java	(revision 1520629)
+++ lucene/core/src/java/org/apache/lucene/index/SegmentReader.java	(working copy)
@@ -283,4 +283,9 @@
     ensureOpen();
     core.removeCoreClosedListener(listener);
   }
+  
+  /** Returns approximate RAM Bytes used */
+  public long ramBytesUsed() {
+    return (core!=null) ? core.ramBytesUsed() : 0;
+  }
 }
Index: lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.java	(revision 1520629)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.java	(working copy)
@@ -48,6 +48,7 @@
 import org.apache.lucene.util.Bits;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.IOUtils;
+import org.apache.lucene.util.RamUsageEstimator;
 import org.apache.lucene.util.automaton.CompiledAutomaton;
 
 /**
@@ -390,6 +391,16 @@
       
       
     }
+
+    @Override
+    public long ramBytesUsed() {
+      long sizeInBytes =  ((delegateFieldsProducer!=null) ? delegateFieldsProducer.ramBytesUsed() : 0);
+      for(Map.Entry<String,FuzzySet> entry: bloomsByFieldName.entrySet()) {
+        sizeInBytes += entry.getKey().length() * RamUsageEstimator.NUM_BYTES_CHAR;
+        sizeInBytes += entry.getValue().ramBytesUsed();
+      }
+      return sizeInBytes;
+    }
     
   }
   
Index: lucene/codecs/src/java/org/apache/lucene/codecs/bloom/FuzzySet.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/bloom/FuzzySet.java	(revision 1520629)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/bloom/FuzzySet.java	(working copy)
@@ -302,4 +302,8 @@
     int numBitsSet = filter.cardinality();
     return (float) numBitsSet / (float) bloomSize;
   }
-}
\ No newline at end of file
+
+  public long ramBytesUsed() {
+    return filter.ramBytesUsed();
+  }
+}
Index: lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer.java	(revision 1520629)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer.java	(working copy)
@@ -44,6 +44,7 @@
 import org.apache.lucene.util.IOUtils;
 import org.apache.lucene.util.IntsRef;
 import org.apache.lucene.util.PagedBytes;
+import org.apache.lucene.util.RamUsageEstimator;
 import org.apache.lucene.util.fst.BytesRefFSTEnum;
 import org.apache.lucene.util.fst.BytesRefFSTEnum.InputOutput;
 import org.apache.lucene.util.fst.FST;
@@ -202,6 +203,12 @@
     return instance;
   }
   
+  @Override
+  public long ramBytesUsed() {
+    // TODO: optimize me
+    return RamUsageEstimator.sizeOf(this);
+  }
+  
   private NumericDocValues loadNumeric(FieldInfo field) throws IOException {
     NumericEntry entry = numerics.get(field.number);
     data.seek(entry.offset + entry.missingBytes);
Index: lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.java	(revision 1520629)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.java	(working copy)
@@ -21,6 +21,7 @@
 import java.util.Collections;
 import java.util.Comparator;
 import java.util.Iterator;
+import java.util.Map;
 import java.util.SortedMap;
 import java.util.TreeMap;
 
@@ -49,6 +50,7 @@
 import org.apache.lucene.util.Bits;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.IntsRef;
+import org.apache.lucene.util.RamUsageEstimator;
 import org.apache.lucene.util.fst.Builder;
 import org.apache.lucene.util.fst.ByteSequenceOutputs;
 import org.apache.lucene.util.fst.BytesRefFSTEnum;
@@ -843,6 +845,10 @@
     public boolean hasPayloads() {
       return field.hasPayloads();
     }
+
+    public long ramBytesUsed() {
+      return ((fst!=null) ? fst.sizeInBytes() : 0);
+    }
   }
 
   @Override
@@ -889,6 +895,16 @@
           termsReader.fst = null;
         }
       }
+
+      @Override
+      public long ramBytesUsed() {
+        long sizeInBytes = 0;
+        for(Map.Entry<String,TermsReader> entry: fields.entrySet()) {
+          sizeInBytes += (entry.getKey().length() * RamUsageEstimator.NUM_BYTES_CHAR);
+          sizeInBytes += entry.getValue().ramBytesUsed();
+        }
+        return sizeInBytes;
+      }
     };
   }
 }
Index: lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.java	(revision 1520629)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.java	(working copy)
@@ -44,6 +44,7 @@
 import org.apache.lucene.util.ArrayUtil;
 import org.apache.lucene.util.Bits;
 import org.apache.lucene.util.BytesRef;
+import org.apache.lucene.util.RamUsageEstimator;
 import org.apache.lucene.util.automaton.CompiledAutomaton;
 import org.apache.lucene.util.automaton.RunAutomaton;
 import org.apache.lucene.util.automaton.Transition;
@@ -147,12 +148,25 @@
     @Override
     public void close() {
     }
+
+    @Override
+    public long ramBytesUsed() {
+      long sizeInBytes = 0;
+      for(Map.Entry<String,DirectField> entry: fields.entrySet()) {
+        sizeInBytes += entry.getKey().length() * RamUsageEstimator.NUM_BYTES_CHAR;
+        sizeInBytes += entry.getValue().ramBytesUsed();
+      }
+      return sizeInBytes;
+    }
   }
 
   private final static class DirectField extends Terms {
 
     private static abstract class TermAndSkip {
       public int[] skips;
+
+      /** Returns the approximate number of RAM bytes used */
+      public abstract long ramBytesUsed();
     }
 
     private static final class LowFreqTerm extends TermAndSkip {
@@ -167,6 +181,12 @@
         this.docFreq = docFreq;
         this.totalTermFreq = totalTermFreq;
       }
+
+      @Override
+      public long ramBytesUsed() {
+        return ((postings!=null) ? RamUsageEstimator.sizeOf(postings) : 0) + 
+            ((payloads!=null) ? RamUsageEstimator.sizeOf(payloads) : 0);
+      }
     }
 
     // TODO: maybe specialize into prx/no-prx/no-frq cases?
@@ -184,6 +204,31 @@
         this.payloads = payloads;
         this.totalTermFreq = totalTermFreq;
       }
+
+      @Override
+      public long ramBytesUsed() {
+         long sizeInBytes = 0;
+         sizeInBytes += (docIDs!=null)? RamUsageEstimator.sizeOf(docIDs) : 0;
+         sizeInBytes += (freqs!=null)? RamUsageEstimator.sizeOf(freqs) : 0;
+         
+         if(positions != null) {
+           for(int[] position : positions) {
+             sizeInBytes += (position!=null) ? RamUsageEstimator.sizeOf(position) : 0;
+           }
+         }
+         
+         if (payloads != null) {
+           for(byte[][] payload : payloads) {
+             if(payload != null) {
+               for(byte[] pload : payload) {
+                 sizeInBytes += (pload!=null) ? RamUsageEstimator.sizeOf(pload) : 0; 
+               }
+             }
+           }
+         }
+         
+         return sizeInBytes;
+      }
     }
 
     private final byte[] termBytes;
@@ -444,6 +489,24 @@
       assert skipOffset == skipCount;
     }
 
+    /** Returns approximate RAM bytes used */
+    public long ramBytesUsed() {
+      long sizeInBytes = 0;
+      sizeInBytes += ((termBytes!=null) ? RamUsageEstimator.sizeOf(termBytes) : 0);
+      sizeInBytes += ((termOffsets!=null) ? RamUsageEstimator.sizeOf(termOffsets) : 0);
+      sizeInBytes += ((skips!=null) ? RamUsageEstimator.sizeOf(skips) : 0);
+      sizeInBytes += ((skipOffsets!=null) ? RamUsageEstimator.sizeOf(skipOffsets) : 0);
+      sizeInBytes += ((sameCounts!=null) ? RamUsageEstimator.sizeOf(sameCounts) : 0);
+      
+      if(terms!=null) {
+        for(TermAndSkip termAndSkip : terms) {
+          sizeInBytes += (termAndSkip!=null) ? termAndSkip.ramBytesUsed() : 0;
+        }
+      }
+      
+      return sizeInBytes;
+    }
+
     // Compares in unicode (UTF8) order:
     int compare(int ord, BytesRef other) {
       final byte[] otherBytes = other.bytes;
Index: lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader.java	(revision 1520629)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader.java	(working copy)
@@ -630,4 +630,9 @@
       // we don't want to copy any stuff over to another docsenum ever!
     }
   }
+
+  @Override
+  public long ramBytesUsed() {
+    return ((wrappedPostingsReader!=null) ? wrappedPostingsReader.ramBytesUsed(): 0);
+  }
 }
Index: lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsReader.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsReader.java	(revision 1520629)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsReader.java	(working copy)
@@ -728,4 +728,9 @@
       return docFreq;
     }
   }
+
+  @Override
+  public long ramBytesUsed() {
+    return 0;
+  }
 }
Index: lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader.java	(revision 1520629)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader.java	(working copy)
@@ -62,6 +62,7 @@
     boolean fixedLength;
     long minValue;
     long numValues;
+    
   };
 
   final int maxDoc;
@@ -464,4 +465,9 @@
   private String stripPrefix(BytesRef prefix) throws IOException {
     return new String(scratch.bytes, scratch.offset + prefix.length, scratch.length - prefix.length, "UTF-8");
   }
+
+  @Override
+  public long ramBytesUsed() {
+    return 0;
+  }
 }
Index: lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader.java	(revision 1520629)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader.java	(working copy)
@@ -192,4 +192,9 @@
     return a.length == b.length - bOffset && 
         ArrayUtil.equals(a.bytes, a.offset, b.bytes, b.offset + bOffset, b.length - bOffset);
   }
+
+  @Override
+  public long ramBytesUsed() {
+    return 0;
+  }
 }
Index: lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.java	(revision 1520629)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.java	(working copy)
@@ -574,6 +574,11 @@
       */
       //System.out.println("FST " + fst.sizeInBytes());
     }
+    
+    /** Returns approximate RAM bytes used */
+    public long ramBytesUsed() {
+      return (fst!=null) ? fst.sizeInBytes() : 0;
+    }
 
     @Override
     public TermsEnum iterator(TermsEnum reuse) throws IOException {
@@ -630,7 +635,7 @@
     return Collections.unmodifiableSet(fields.keySet()).iterator();
   }
 
-  private final Map<String,Terms> termsCache = new HashMap<String,Terms>();
+  private final Map<String,SimpleTextTerms> termsCache = new HashMap<String,SimpleTextTerms>();
 
   @Override
   synchronized public Terms terms(String field) throws IOException {
@@ -641,7 +646,7 @@
         return null;
       } else {
         terms = new SimpleTextTerms(field, fp);
-        termsCache.put(field, terms);
+        termsCache.put(field, (SimpleTextTerms) terms);
       }
     }
     return terms;
@@ -656,4 +661,13 @@
   public void close() throws IOException {
     in.close();
   }
+
+  @Override
+  public long ramBytesUsed() {
+    long sizeInBytes = 0;
+    for(SimpleTextTerms simpleTextTerms : termsCache.values()) {
+      sizeInBytes += (simpleTextTerms!=null) ? simpleTextTerms.ramBytesUsed() : 0;
+    }
+    return sizeInBytes;
+  }
 }
Index: lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader.java	(revision 1520629)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader.java	(working copy)
@@ -538,4 +538,9 @@
       return 1;
     }
   }
+
+  @Override
+  public long ramBytesUsed() {
+    return 0;
+  }
 }
Index: lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.java	(revision 1520629)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.java	(working copy)
@@ -842,4 +842,11 @@
       }
     }
   }
+
+  @Override
+  public long ramBytesUsed() {
+    long sizeInBytes = (postingsReader!=null) ? postingsReader.ramBytesUsed() : 0;
+    sizeInBytes += (indexReader!=null) ? indexReader.ramBytesUsed() : 0;
+    return sizeInBytes;
+  }
 }
Index: lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/TermsIndexReaderBase.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/TermsIndexReaderBase.java	(revision 1520629)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/TermsIndexReaderBase.java	(working copy)
@@ -70,4 +70,7 @@
     /** Only implemented if {@link TermsIndexReaderBase#supportsOrd()} returns true. */
     public abstract long ord();
   }
+
+  /** Returns approximate RAM bytes used */
+  public abstract long ramBytesUsed();
 }
Index: lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexReader.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexReader.java	(revision 1520629)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexReader.java	(working copy)
@@ -169,6 +169,11 @@
       w.close();
       */
     }
+
+    /** Returns approximate RAM bytes used */
+    public long ramBytesUsed() {
+      return fst == null ? 0 : fst.sizeInBytes();
+    }
   }
 
   @Override
@@ -191,4 +196,13 @@
     }
     input.seek(dirOffset);
   }
+
+  @Override
+  public long ramBytesUsed() {
+    long sizeInBytes = 0;
+    for(FieldIndexData entry : fields.values()) {
+      sizeInBytes += entry.ramBytesUsed();
+    }
+    return sizeInBytes;
+  }
 }
Index: lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexReader.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexReader.java	(revision 1520629)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexReader.java	(working copy)
@@ -256,6 +256,12 @@
         clone.close();
       }
     }
+    
+    /** Returns approximate RAM bytes used */
+    public long ramBytesUsed() {
+      return ((termOffsets!=null)? termOffsets.ramBytesUsed() : 0) + 
+          ((termsDictOffsets!=null)? termsDictOffsets.ramBytesUsed() : 0);
+    }
   }
 
   @Override
@@ -271,4 +277,15 @@
     dirOffset = input.readLong();
     input.seek(dirOffset);
   }
+
+  @Override
+  public long ramBytesUsed() {
+    long sizeInBytes = ((termBytes!=null) ? termBytes.ramBytesUsed() : 0) + 
+        ((termBytesReader!=null)? termBytesReader.ramBytesUsed() : 0);
+    
+    for(FieldIndexData entry : fields.values()) {
+      sizeInBytes += entry.ramBytesUsed();
+    }
+    return sizeInBytes;
+  }
 }
