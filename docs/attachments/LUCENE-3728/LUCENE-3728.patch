

diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/appending/AppendingPostingsFormat.java lucene-3728/lucene/src/java/org/apache/lucene/codecs/appending/AppendingPostingsFormat.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/appending/AppendingPostingsFormat.java	2012-01-12 13:57:22.437157289 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/codecs/appending/AppendingPostingsFormat.java	2012-01-29 08:28:34.356717850 -0500
@@ -83,9 +83,8 @@
   }
 
   @Override
-  public void files(Directory dir, SegmentInfo segmentInfo, String segmentSuffix, Set<String> files)
-          throws IOException {
-    Lucene40PostingsReader.files(dir, segmentInfo, segmentSuffix, files);
-    BlockTreeTermsReader.files(dir, segmentInfo, segmentSuffix, files);
+  public void files(SegmentInfo segmentInfo, String segmentSuffix, Set<String> files) throws IOException {
+    Lucene40PostingsReader.files(segmentInfo, segmentSuffix, files);
+    BlockTreeTermsReader.files(segmentInfo, segmentSuffix, files);
   }
 }


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/BlockTermsReader.java lucene-3728/lucene/src/java/org/apache/lucene/codecs/BlockTermsReader.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/BlockTermsReader.java	2012-01-15 22:00:26.058175850 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/codecs/BlockTermsReader.java	2012-01-29 08:47:24.724715221 -0500
@@ -186,7 +186,7 @@
     }
   }
 
-  public static void files(Directory dir, SegmentInfo segmentInfo, String segmentSuffix, Collection<String> files) {
+  public static void files(SegmentInfo segmentInfo, String segmentSuffix, Collection<String> files) {
     files.add(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, BlockTermsWriter.TERMS_EXTENSION));
   }
 


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.java lucene-3728/lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.java	2012-01-29 19:14:02.492627766 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.java	2012-01-30 12:51:10.056480229 -0500
@@ -200,7 +200,7 @@
     }
   }
 
-  public static void files(Directory dir, SegmentInfo segmentInfo, String segmentSuffix, Collection<String> files) {
+  public static void files(SegmentInfo segmentInfo, String segmentSuffix, Collection<String> files) {
     files.add(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, BlockTreeTermsWriter.TERMS_EXTENSION));
     files.add(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, BlockTreeTermsWriter.TERMS_INDEX_EXTENSION));
   }


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/Codec.java lucene-3728/lucene/src/java/org/apache/lucene/codecs/Codec.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/Codec.java	2012-01-29 06:24:14.912735201 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/codecs/Codec.java	2012-01-30 12:08:30.296486183 -0500
@@ -20,10 +20,9 @@
 import java.io.IOException;
 import java.util.Set;
 
+import org.apache.lucene.index.IndexFileNames;
 import org.apache.lucene.index.SegmentInfo;
 import org.apache.lucene.util.NamedSPILoader;
-import org.apache.lucene.store.CompoundFileDirectory;
-import org.apache.lucene.store.Directory;
 
 /**
  * Encodes/decodes an inverted index segment
@@ -47,24 +46,22 @@
   /** Populates <code>files</code> with all filenames needed for 
    * the <code>info</code> segment.
    */
-  public void files(Directory dir, SegmentInfo info, Set<String> files) throws IOException {
-    assert (dir instanceof CompoundFileDirectory) == false;
-    postingsFormat().files(dir, info, "", files);
-    storedFieldsFormat().files(dir, info, files);
-    termVectorsFormat().files(dir, info, files);
-    fieldInfosFormat().files(dir, info, files);
-    // TODO: segmentInfosFormat should be allowed to declare additional files
-    // if it wants, in addition to segments_N
-    docValuesFormat().files(dir, info, files);
-    normsFormat().files(dir, info, files);
-  }
-  
-  /** Populates <code>files</code> with any filenames that are
-   * stored outside of CFS for the <code>info</code> segment.
-   */
-  public void separateFiles(Directory dir, SegmentInfo info, Set<String> files) throws IOException {
-    liveDocsFormat().separateFiles(dir, info, files);
-    normsFormat().separateFiles(dir, info, files);
+  public void files(SegmentInfo info, Set<String> files) throws IOException {
+    if (info.getUseCompoundFile()) {
+      files.add(IndexFileNames.segmentFileName(info.name, "", IndexFileNames.COMPOUND_FILE_EXTENSION));
+      files.add(IndexFileNames.segmentFileName(info.name, "", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));
+    } else {
+      postingsFormat().files(info, "", files);
+      storedFieldsFormat().files(info, files);
+      termVectorsFormat().files(info, files);
+      fieldInfosFormat().files(info, files);
+      // TODO: segmentInfosFormat should be allowed to declare additional files
+      // if it wants, in addition to segments_N
+      docValuesFormat().files(info, files);
+      normsFormat().files(info, files);
+    }
+    // never inside CFS
+    liveDocsFormat().files(info, files);
   }
   
   /** Encodes/decodes postings */


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/DocValuesFormat.java lucene-3728/lucene/src/java/org/apache/lucene/codecs/DocValuesFormat.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/DocValuesFormat.java	2012-01-12 13:57:22.513157292 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/codecs/DocValuesFormat.java	2012-01-29 08:27:02.652718063 -0500
@@ -23,10 +23,9 @@
 import org.apache.lucene.index.PerDocWriteState;
 import org.apache.lucene.index.SegmentInfo;
 import org.apache.lucene.index.SegmentReadState;
-import org.apache.lucene.store.Directory;
 
 public abstract class DocValuesFormat {
   public abstract PerDocConsumer docsConsumer(PerDocWriteState state) throws IOException;
   public abstract PerDocProducer docsProducer(SegmentReadState state) throws IOException;
-  public abstract void files(Directory dir, SegmentInfo info, Set<String> files) throws IOException;
+  public abstract void files(SegmentInfo info, Set<String> files) throws IOException;
 }


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/FieldInfosFormat.java lucene-3728/lucene/src/java/org/apache/lucene/codecs/FieldInfosFormat.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/FieldInfosFormat.java	2012-01-12 13:57:22.513157292 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/codecs/FieldInfosFormat.java	2012-01-29 08:27:14.460718036 -0500
@@ -21,7 +21,6 @@
 import java.util.Set;
 
 import org.apache.lucene.index.SegmentInfo;
-import org.apache.lucene.store.Directory;
 
 /**
  * @lucene.experimental
@@ -29,5 +28,5 @@
 public abstract class FieldInfosFormat {
   public abstract FieldInfosReader getFieldInfosReader() throws IOException;
   public abstract FieldInfosWriter getFieldInfosWriter() throws IOException;
-  public abstract void files(Directory dir, SegmentInfo info, Set<String> files) throws IOException;
+  public abstract void files(SegmentInfo info, Set<String> files) throws IOException;
 }


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/FixedGapTermsIndexReader.java lucene-3728/lucene/src/java/org/apache/lucene/codecs/FixedGapTermsIndexReader.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/FixedGapTermsIndexReader.java	2012-01-12 13:57:22.425157290 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/codecs/FixedGapTermsIndexReader.java	2012-01-29 08:47:45.976715170 -0500
@@ -387,7 +387,7 @@
     }
   }
 
-  public static void files(Directory dir, SegmentInfo info, String segmentSuffix, Collection<String> files) {
+  public static void files(SegmentInfo info, String segmentSuffix, Collection<String> files) {
     files.add(IndexFileNames.segmentFileName(info.name, segmentSuffix, FixedGapTermsIndexWriter.TERMS_INDEX_EXTENSION));
   }
 


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/LiveDocsFormat.java lucene-3728/lucene/src/java/org/apache/lucene/codecs/LiveDocsFormat.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/LiveDocsFormat.java	2012-01-29 06:24:13.072735206 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/codecs/LiveDocsFormat.java	2012-01-30 12:07:13.752486361 -0500
@@ -37,5 +37,5 @@
   public abstract Bits readLiveDocs(Directory dir, SegmentInfo info, IOContext context) throws IOException;
   /** writes bits to a file */
   public abstract void writeLiveDocs(MutableBits bits, Directory dir, SegmentInfo info, IOContext context) throws IOException;
-  public abstract void separateFiles(Directory dir, SegmentInfo info, Set<String> files) throws IOException;
+  public abstract void files(SegmentInfo info, Set<String> files) throws IOException;
 }


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xCodec.java lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xCodec.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xCodec.java	2012-01-29 06:24:14.344735203 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xCodec.java	2012-01-30 12:25:34.312483801 -0500
@@ -24,16 +24,14 @@
 import org.apache.lucene.codecs.DocValuesFormat;
 import org.apache.lucene.codecs.FieldInfosFormat;
 import org.apache.lucene.codecs.LiveDocsFormat;
-import org.apache.lucene.codecs.NormsFormat;
 import org.apache.lucene.codecs.PerDocConsumer;
 import org.apache.lucene.codecs.PerDocProducer;
 import org.apache.lucene.codecs.PostingsFormat;
 import org.apache.lucene.codecs.SegmentInfosFormat;
 import org.apache.lucene.codecs.StoredFieldsFormat;
-import org.apache.lucene.codecs.StoredFieldsWriter;
 import org.apache.lucene.codecs.TermVectorsFormat;
 import org.apache.lucene.codecs.lucene40.Lucene40LiveDocsFormat;
-import org.apache.lucene.codecs.lucene40.Lucene40StoredFieldsFormat;
+import org.apache.lucene.index.IndexFileNames;
 import org.apache.lucene.index.PerDocWriteState;
 import org.apache.lucene.index.SegmentInfo;
 import org.apache.lucene.index.SegmentReadState;
@@ -43,7 +41,9 @@
 
 /**
  * Supports the Lucene 3.x index format (readonly)
+ * @deprecated
  */
+@Deprecated
 public class Lucene3xCodec extends Codec {
   public Lucene3xCodec() {
     super("Lucene3x");
@@ -51,13 +51,7 @@
 
   private final PostingsFormat postingsFormat = new Lucene3xPostingsFormat();
   
-  // TODO: this should really be a different impl
-  private final StoredFieldsFormat fieldsFormat = new Lucene40StoredFieldsFormat() {
-    @Override
-    public StoredFieldsWriter fieldsWriter(Directory directory, String segment, IOContext context) throws IOException {
-      throw new UnsupportedOperationException("this codec can only be used for reading");
-    }
-  };
+  private final StoredFieldsFormat fieldsFormat = new Lucene3xStoredFieldsFormat();
   
   private final TermVectorsFormat vectorsFormat = new Lucene3xTermVectorsFormat();
   
@@ -65,7 +59,10 @@
 
   private final SegmentInfosFormat infosFormat = new Lucene3xSegmentInfosFormat();
   
-  private final NormsFormat normsFormat = new Lucene3xNormsFormat();
+  private final Lucene3xNormsFormat normsFormat = new Lucene3xNormsFormat();
+  
+  /** Extension of compound file for doc store files*/
+  static final String COMPOUND_FILE_STORE_EXTENSION = "cfx";
   
   // TODO: this should really be a different impl
   private final LiveDocsFormat liveDocsFormat = new Lucene40LiveDocsFormat() {
@@ -88,7 +85,7 @@
     }
 
     @Override
-    public void files(Directory dir, SegmentInfo info, Set<String> files) throws IOException {}
+    public void files(SegmentInfo info, Set<String> files) throws IOException {}
   };
   
   @Override
@@ -122,7 +119,7 @@
   }
 
   @Override
-  public NormsFormat normsFormat() {
+  public Lucene3xNormsFormat normsFormat() {
     return normsFormat;
   }
   
@@ -130,4 +127,31 @@
   public LiveDocsFormat liveDocsFormat() {
     return liveDocsFormat;
   }
+  
+  // overrides the default implementation in codec.java to handle CFS without CFE, 
+  // shared doc stores, compound doc stores, separate norms, etc
+  @Override
+  public void files(SegmentInfo info, Set<String> files) throws IOException {
+    if (info.getUseCompoundFile()) {
+      files.add(IndexFileNames.segmentFileName(info.name, "", IndexFileNames.COMPOUND_FILE_EXTENSION));
+    } else {
+      postingsFormat().files(info, "", files);
+      storedFieldsFormat().files(info, files);
+      termVectorsFormat().files(info, files);
+      fieldInfosFormat().files(info, files);
+      // TODO: segmentInfosFormat should be allowed to declare additional files
+      // if it wants, in addition to segments_N
+      docValuesFormat().files(info, files);
+      normsFormat().files(info, files);
+    }
+    // never inside CFS
+    liveDocsFormat().files(info, files);
+    normsFormat().separateFiles(info, files);
+    
+    // shared docstores: these guys check the hair
+    if (info.getDocStoreOffset() != -1) {
+      storedFieldsFormat().files(info, files);
+      termVectorsFormat().files(info, files);
+    }
+  }  
 }


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xFieldInfosFormat.java lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xFieldInfosFormat.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xFieldInfosFormat.java	2012-01-19 13:28:40.678685692 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xFieldInfosFormat.java	2012-01-29 09:01:19.316713279 -0500
@@ -24,7 +24,6 @@
 import org.apache.lucene.codecs.FieldInfosReader;
 import org.apache.lucene.codecs.FieldInfosWriter;
 import org.apache.lucene.index.SegmentInfo;
-import org.apache.lucene.store.Directory;
 
 /**
  * Lucene3x ReadOnly FieldInfosFromat implementation
@@ -47,7 +46,7 @@
   }
 
   @Override
-  public void files(Directory dir, SegmentInfo info, Set<String> files) throws IOException {
-    Lucene3xFieldInfosReader.files(dir, info, files);
+  public void files(SegmentInfo info, Set<String> files) throws IOException {
+    Lucene3xFieldInfosReader.files(info, files);
   }
 }


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xFieldInfosReader.java lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xFieldInfosReader.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xFieldInfosReader.java	2012-01-16 18:06:56.127436483 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xFieldInfosReader.java	2012-01-29 09:09:59.608712068 -0500
@@ -34,7 +34,9 @@
 
 /**
  * @lucene.experimental
+ * @deprecated
  */
+@Deprecated
 public class Lucene3xFieldInfosReader extends FieldInfosReader {
   /** Extension of field infos */
   static final String FIELD_INFOS_EXTENSION = "fnm";
@@ -117,7 +119,7 @@
     }
   }
   
-  public static void files(Directory dir, SegmentInfo info, Set<String> files) throws IOException {
+  public static void files(SegmentInfo info, Set<String> files) throws IOException {
     files.add(IndexFileNames.segmentFileName(info.name, "", FIELD_INFOS_EXTENSION));
   }
 }


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xFields.java lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xFields.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xFields.java	2012-01-15 22:00:26.050175850 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xFields.java	2012-01-29 08:44:42.040715599 -0500
@@ -133,7 +133,7 @@
     return true;
   }
 
-  static void files(Directory dir, SegmentInfo info, Collection<String> files) throws IOException {
+  static void files(SegmentInfo info, Collection<String> files) throws IOException {
     files.add(IndexFileNames.segmentFileName(info.name, "", Lucene3xPostingsFormat.TERMS_EXTENSION));
     files.add(IndexFileNames.segmentFileName(info.name, "", Lucene3xPostingsFormat.TERMS_INDEX_EXTENSION));
     files.add(IndexFileNames.segmentFileName(info.name, "", Lucene3xPostingsFormat.FREQ_EXTENSION));
@@ -144,7 +144,7 @@
       // file, when it should have been false.  So we do the
       // extra check, here:
       final String prx = IndexFileNames.segmentFileName(info.name, "", Lucene3xPostingsFormat.PROX_EXTENSION);
-      if (dir.fileExists(prx)) {
+      if (info.dir.fileExists(prx)) {
         files.add(prx);
       }
     }


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xNormsFormat.java lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xNormsFormat.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xNormsFormat.java	2012-01-29 19:11:35.728628107 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xNormsFormat.java	2012-01-29 09:10:13.168712038 -0500
@@ -26,7 +26,6 @@
 import org.apache.lucene.index.PerDocWriteState;
 import org.apache.lucene.index.SegmentInfo;
 import org.apache.lucene.index.SegmentReadState;
-import org.apache.lucene.store.Directory;
 
 /**
  * Lucene3x ReadOnly NormsFormat implementation
@@ -39,13 +38,12 @@
 
 
   @Override
-  public void files(Directory dir, SegmentInfo info, Set<String> files) throws IOException {
-    Lucene3xNormsProducer.files(dir, info, files);
+  public void files(SegmentInfo info, Set<String> files) throws IOException {
+    Lucene3xNormsProducer.files(info, files);
   }
 
-  @Override
-  public void separateFiles(Directory dir, SegmentInfo info, Set<String> files) throws IOException {
-    Lucene3xNormsProducer.separateFiles(dir, info, files);
+  public void separateFiles(SegmentInfo info, Set<String> files) throws IOException {
+    Lucene3xNormsProducer.separateFiles(info, files);
   }
 
 
@@ -56,12 +54,6 @@
 
   @Override
   public PerDocProducer docsProducer(SegmentReadState state) throws IOException {
-    return docsProducer(state, null);
-  }
-
-  @Override
-  public PerDocProducer docsProducer(SegmentReadState state,
-      Directory separateNormsDir) throws IOException {
-    return new Lucene3xNormsProducer(state.dir, state.segmentInfo, state.fieldInfos, state.context, separateNormsDir);
+    return new Lucene3xNormsProducer(state.dir, state.segmentInfo, state.fieldInfos, state.context);
   }
 }


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xNormsProducer.java lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xNormsProducer.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xNormsProducer.java	2012-01-29 19:11:35.724628107 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xNormsProducer.java	2012-01-29 09:12:05.768711776 -0500
@@ -43,7 +43,9 @@
 /**
  * Reads Lucene 3.x norms format and exposes it via DocValues API
  * @lucene.experimental
+ * @deprecated
  */
+@Deprecated
 class Lucene3xNormsProducer extends PerDocProducer {
   
   /** norms header placeholder */
@@ -52,9 +54,7 @@
   /** Extension of norms file */
   static final String NORMS_EXTENSION = "nrm";
   
-  /** Extension of separate norms file
-   * @deprecated */
-  @Deprecated
+  /** Extension of separate norms file */
   static final String SEPARATE_NORMS_EXTENSION = "s";
   
   final Map<String,NormsDocValues> norms = new HashMap<String,NormsDocValues>();
@@ -67,7 +67,8 @@
   
   // note: just like segmentreader in 3.x, we open up all the files here (including separate norms) up front.
   // but we just don't do any seeks or reading yet.
-  public Lucene3xNormsProducer(Directory dir, SegmentInfo info, FieldInfos fields, IOContext context, Directory separateNormsDir) throws IOException {
+  public Lucene3xNormsProducer(Directory dir, SegmentInfo info, FieldInfos fields, IOContext context) throws IOException {
+    Directory separateNormsDir = info.dir; // separate norms are never inside CFS
     maxdoc = info.docCount;
     String segmentName = info.name;
     Map<Integer,Long> normGen = info.getNormGen();
@@ -192,19 +193,17 @@
     
   }
   
-  static void files(Directory dir, SegmentInfo info, Set<String> files) throws IOException {
+  static void files(SegmentInfo info, Set<String> files) throws IOException {
     // TODO: This is what SI always did... but we can do this cleaner?
     // like first FI that has norms but doesn't have separate norms?
     final String normsFileName = IndexFileNames.segmentFileName(info.name, "", NORMS_EXTENSION);
-    if (dir.fileExists(normsFileName)) {
+    if (info.dir.fileExists(normsFileName)) {
       // only needed to do this in 3x - 4x can decide if the norms are present
       files.add(normsFileName);
     }
   }
   
-  /** @deprecated */
-  @Deprecated
-  static void separateFiles(Directory dir, SegmentInfo info, Set<String> files) throws IOException {
+  static void separateFiles(SegmentInfo info, Set<String> files) throws IOException {
     Map<Integer,Long> normGen = info.getNormGen();
     if (normGen != null) {
       for (Entry<Integer,Long> entry : normGen.entrySet()) {


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xPostingsFormat.java lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xPostingsFormat.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xPostingsFormat.java	2012-01-19 13:28:40.682685692 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xPostingsFormat.java	2012-01-29 09:01:37.444713236 -0500
@@ -20,7 +20,6 @@
 import java.util.Set;
 import java.io.IOException;
 
-import org.apache.lucene.store.Directory;
 import org.apache.lucene.codecs.FieldsConsumer;
 import org.apache.lucene.codecs.FieldsProducer;
 import org.apache.lucene.codecs.PostingsFormat;
@@ -66,8 +65,8 @@
   }
 
   @Override
-  public void files(Directory dir, SegmentInfo info, String segmentSuffix, Set<String> files) throws IOException {
+  public void files(SegmentInfo info, String segmentSuffix, Set<String> files) throws IOException {
     // preflex fields have no segmentSuffix - we ignore it here
-    Lucene3xFields.files(dir, info, files);
+    Lucene3xFields.files(info, files);
   }
 }


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfosReader.java lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfosReader.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfosReader.java	2012-01-19 13:28:40.682685692 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfosReader.java	2012-01-30 11:44:27.144489540 -0500
@@ -37,7 +37,9 @@
 /**
  * Lucene 3x implementation of {@link SegmentInfosReader}.
  * @lucene.experimental
+ * @deprecated
  */
+@Deprecated
 public class Lucene3xSegmentInfosReader extends SegmentInfosReader {
 
   @Override
@@ -56,7 +58,7 @@
           if (si.getDocStoreIsCompoundFile()) {
             dir = new CompoundFileDirectory(dir, IndexFileNames.segmentFileName(
                 si.getDocStoreSegment(), "",
-                IndexFileNames.COMPOUND_FILE_STORE_EXTENSION), context, false);
+                Lucene3xCodec.COMPOUND_FILE_STORE_EXTENSION), context, false);
           }
         } else if (si.getUseCompoundFile()) {
           dir = new CompoundFileDirectory(dir, IndexFileNames.segmentFileName(
@@ -64,7 +66,7 @@
         }
 
         try {
-          Lucene40StoredFieldsReader.checkCodeVersion(dir, si.getDocStoreSegment());
+          Lucene3xStoredFieldsReader.checkCodeVersion(dir, si.getDocStoreSegment());
         } finally {
           // If we opened the directory, close it
           if (dir != directory) dir.close();
@@ -142,7 +144,7 @@
       if (docStoreOffset != -1) {
         storesSegment = docStoreSegment;
         storeIsCompoundFile = docStoreIsCompoundFile;
-        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;
+        ext = Lucene3xCodec.COMPOUND_FILE_STORE_EXTENSION;
       } else {
         storesSegment = name;
         storeIsCompoundFile = isCompoundFile;


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xStoredFieldsFormat.java lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xStoredFieldsFormat.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xStoredFieldsFormat.java	1969-12-31 19:00:00.000000000 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xStoredFieldsFormat.java	2012-01-30 09:38:35.164507106 -0500
@@ -0,0 +1,51 @@
+package org.apache.lucene.codecs.lucene3x;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.IOException;
+import java.util.Set;
+
+import org.apache.lucene.codecs.StoredFieldsFormat;
+import org.apache.lucene.codecs.StoredFieldsReader;
+import org.apache.lucene.codecs.StoredFieldsWriter;
+import org.apache.lucene.index.FieldInfos;
+import org.apache.lucene.index.SegmentInfo;
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.store.IOContext;
+
+/** @deprecated */
+@Deprecated
+public class Lucene3xStoredFieldsFormat extends StoredFieldsFormat {
+
+  @Override
+  public StoredFieldsReader fieldsReader(Directory directory, SegmentInfo si,
+      FieldInfos fn, IOContext context) throws IOException {
+    return new Lucene3xStoredFieldsReader(directory, si, fn, context);
+  }
+
+  @Override
+  public StoredFieldsWriter fieldsWriter(Directory directory, String segment,
+      IOContext context) throws IOException {
+    throw new UnsupportedOperationException("this codec can only be used for reading");
+  }
+
+  @Override
+  public void files(SegmentInfo info, Set<String> files) throws IOException {
+    Lucene3xStoredFieldsReader.files(info, files);
+  }
+}


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xStoredFieldsReader.java lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xStoredFieldsReader.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xStoredFieldsReader.java	1969-12-31 19:00:00.000000000 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xStoredFieldsReader.java	2012-01-30 12:30:11.264483157 -0500
@@ -0,0 +1,346 @@
+package org.apache.lucene.codecs.lucene3x;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.IOException;
+
+import org.apache.lucene.codecs.StoredFieldsReader;
+import org.apache.lucene.index.CorruptIndexException;
+import org.apache.lucene.index.FieldInfo;
+import org.apache.lucene.index.FieldInfos;
+import org.apache.lucene.index.IndexFileNames;
+import org.apache.lucene.index.IndexFormatTooNewException;
+import org.apache.lucene.index.IndexFormatTooOldException;
+import org.apache.lucene.index.SegmentInfo;
+import org.apache.lucene.index.StoredFieldVisitor;
+import org.apache.lucene.store.AlreadyClosedException;
+import org.apache.lucene.store.CompoundFileDirectory;
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.store.IOContext;
+import org.apache.lucene.store.IndexInput;
+import org.apache.lucene.util.IOUtils;
+
+import java.io.Closeable;
+import java.util.Set;
+
+/**
+ * Class responsible for access to stored document fields.
+ * <p/>
+ * It uses &lt;segment&gt;.fdt and &lt;segment&gt;.fdx; files.
+ * 
+ * @deprecated
+ */
+@Deprecated
+public final class Lucene3xStoredFieldsReader extends StoredFieldsReader implements Cloneable, Closeable {
+  private final static int FORMAT_SIZE = 4;
+
+  /** Extension of stored fields file */
+  public static final String FIELDS_EXTENSION = "fdt";
+  
+  /** Extension of stored fields index file */
+  public static final String FIELDS_INDEX_EXTENSION = "fdx";
+  
+  // Lucene 3.0: Removal of compressed fields
+  static final int FORMAT_LUCENE_3_0_NO_COMPRESSED_FIELDS = 2;
+
+  // Lucene 3.2: NumericFields are stored in binary format
+  static final int FORMAT_LUCENE_3_2_NUMERIC_FIELDS = 3;
+
+  // NOTE: if you introduce a new format, make it 1 higher
+  // than the current one, and always change this if you
+  // switch to a new format!
+  public static final int FORMAT_CURRENT = FORMAT_LUCENE_3_2_NUMERIC_FIELDS;
+
+  // when removing support for old versions, leave the last supported version here
+  static final int FORMAT_MINIMUM = FORMAT_LUCENE_3_0_NO_COMPRESSED_FIELDS;
+  
+  // NOTE: bit 0 is free here!  You can steal it!
+  public static final int FIELD_IS_BINARY = 1 << 1;
+
+  // the old bit 1 << 2 was compressed, is now left out
+
+  private static final int _NUMERIC_BIT_SHIFT = 3;
+  static final int FIELD_IS_NUMERIC_MASK = 0x07 << _NUMERIC_BIT_SHIFT;
+
+  public static final int FIELD_IS_NUMERIC_INT = 1 << _NUMERIC_BIT_SHIFT;
+  public static final int FIELD_IS_NUMERIC_LONG = 2 << _NUMERIC_BIT_SHIFT;
+  public static final int FIELD_IS_NUMERIC_FLOAT = 3 << _NUMERIC_BIT_SHIFT;
+  public static final int FIELD_IS_NUMERIC_DOUBLE = 4 << _NUMERIC_BIT_SHIFT;
+
+  private final FieldInfos fieldInfos;
+  private final IndexInput fieldsStream;
+  private final IndexInput indexStream;
+  private int numTotalDocs;
+  private int size;
+  private boolean closed;
+  private final int format;
+
+  // The docID offset where our docs begin in the index
+  // file.  This will be 0 if we have our own private file.
+  private int docStoreOffset;
+  
+  // when we are inside a compound share doc store (CFX),
+  // (lucene 3.0 indexes only), we privately open our own fd.
+  private final CompoundFileDirectory storeCFSReader;
+
+  /** Returns a cloned FieldsReader that shares open
+   *  IndexInputs with the original one.  It is the caller's
+   *  job not to close the original FieldsReader until all
+   *  clones are called (eg, currently SegmentReader manages
+   *  this logic). */
+  @Override
+  public Lucene3xStoredFieldsReader clone() {
+    ensureOpen();
+    return new Lucene3xStoredFieldsReader(fieldInfos, numTotalDocs, size, format, docStoreOffset, (IndexInput)fieldsStream.clone(), (IndexInput)indexStream.clone());
+  }
+
+  /** Verifies that the code version which wrote the segment is supported. */
+  public static void checkCodeVersion(Directory dir, String segment) throws IOException {
+    final String indexStreamFN = IndexFileNames.segmentFileName(segment, "", FIELDS_INDEX_EXTENSION);
+    IndexInput idxStream = dir.openInput(indexStreamFN, IOContext.DEFAULT);
+    
+    try {
+      int format = idxStream.readInt();
+      if (format < FORMAT_MINIMUM)
+        throw new IndexFormatTooOldException(idxStream, format, FORMAT_MINIMUM, FORMAT_CURRENT);
+      if (format > FORMAT_CURRENT)
+        throw new IndexFormatTooNewException(idxStream, format, FORMAT_MINIMUM, FORMAT_CURRENT);
+    } finally {
+      idxStream.close();
+    }
+  }
+  
+  // Used only by clone
+  private Lucene3xStoredFieldsReader(FieldInfos fieldInfos, int numTotalDocs, int size, int format, int docStoreOffset,
+                       IndexInput fieldsStream, IndexInput indexStream) {
+    this.fieldInfos = fieldInfos;
+    this.numTotalDocs = numTotalDocs;
+    this.size = size;
+    this.format = format;
+    this.docStoreOffset = docStoreOffset;
+    this.fieldsStream = fieldsStream;
+    this.indexStream = indexStream;
+    this.storeCFSReader = null;
+  }
+
+  public Lucene3xStoredFieldsReader(Directory d, SegmentInfo si, FieldInfos fn, IOContext context) throws IOException {
+    final String segment = si.getDocStoreSegment();
+    final int docStoreOffset = si.getDocStoreOffset();
+    final int size = si.docCount;
+    boolean success = false;
+    fieldInfos = fn;
+    try {
+      if (docStoreOffset != -1 && si.getDocStoreIsCompoundFile()) {
+        d = storeCFSReader = new CompoundFileDirectory(si.dir, 
+            IndexFileNames.segmentFileName(segment, "", Lucene3xCodec.COMPOUND_FILE_STORE_EXTENSION), context, false);
+      } else {
+        storeCFSReader = null;
+      }
+      fieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, "", FIELDS_EXTENSION), context);
+      final String indexStreamFN = IndexFileNames.segmentFileName(segment, "", FIELDS_INDEX_EXTENSION);
+      indexStream = d.openInput(indexStreamFN, context);
+      
+      format = indexStream.readInt();
+
+      if (format < FORMAT_MINIMUM)
+        throw new IndexFormatTooOldException(indexStream, format, FORMAT_MINIMUM, FORMAT_CURRENT);
+      if (format > FORMAT_CURRENT)
+        throw new IndexFormatTooNewException(indexStream, format, FORMAT_MINIMUM, FORMAT_CURRENT);
+
+      final long indexSize = indexStream.length() - FORMAT_SIZE;
+      
+      if (docStoreOffset != -1) {
+        // We read only a slice out of this shared fields file
+        this.docStoreOffset = docStoreOffset;
+        this.size = size;
+
+        // Verify the file is long enough to hold all of our
+        // docs
+        assert ((int) (indexSize / 8)) >= size + this.docStoreOffset: "indexSize=" + indexSize + " size=" + size + " docStoreOffset=" + docStoreOffset;
+      } else {
+        this.docStoreOffset = 0;
+        this.size = (int) (indexSize >> 3);
+        // Verify two sources of "maxDoc" agree:
+        if (this.size != si.docCount) {
+          throw new CorruptIndexException("doc counts differ for segment " + segment + ": fieldsReader shows " + this.size + " but segmentInfo shows " + si.docCount);
+        }
+      }
+      numTotalDocs = (int) (indexSize >> 3);
+      success = true;
+    } finally {
+      // With lock-less commits, it's entirely possible (and
+      // fine) to hit a FileNotFound exception above. In
+      // this case, we want to explicitly close any subset
+      // of things that were opened so that we don't have to
+      // wait for a GC to do so.
+      if (!success) {
+        close();
+      }
+    }
+  }
+
+  /**
+   * @throws AlreadyClosedException if this FieldsReader is closed
+   */
+  private void ensureOpen() throws AlreadyClosedException {
+    if (closed) {
+      throw new AlreadyClosedException("this FieldsReader is closed");
+    }
+  }
+
+  /**
+   * Closes the underlying {@link org.apache.lucene.store.IndexInput} streams.
+   * This means that the Fields values will not be accessible.
+   *
+   * @throws IOException
+   */
+  public final void close() throws IOException {
+    if (!closed) {
+      IOUtils.close(fieldsStream, indexStream, storeCFSReader);
+      closed = true;
+    }
+  }
+
+  public final int size() {
+    return size;
+  }
+
+  private void seekIndex(int docID) throws IOException {
+    indexStream.seek(FORMAT_SIZE + (docID + docStoreOffset) * 8L);
+  }
+
+  public final void visitDocument(int n, StoredFieldVisitor visitor) throws CorruptIndexException, IOException {
+    seekIndex(n);
+    fieldsStream.seek(indexStream.readLong());
+
+    final int numFields = fieldsStream.readVInt();
+    for (int fieldIDX = 0; fieldIDX < numFields; fieldIDX++) {
+      int fieldNumber = fieldsStream.readVInt();
+      FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);
+      
+      int bits = fieldsStream.readByte() & 0xFF;
+      assert bits <= (FIELD_IS_NUMERIC_MASK | FIELD_IS_BINARY): "bits=" + Integer.toHexString(bits);
+
+      switch(visitor.needsField(fieldInfo)) {
+        case YES:
+          readField(visitor, fieldInfo, bits);
+          break;
+        case NO: 
+          skipField(bits);
+          break;
+        case STOP: 
+          return;
+      }
+    }
+  }
+
+  private void readField(StoredFieldVisitor visitor, FieldInfo info, int bits) throws IOException {
+    final int numeric = bits & FIELD_IS_NUMERIC_MASK;
+    if (numeric != 0) {
+      switch(numeric) {
+        case FIELD_IS_NUMERIC_INT:
+          visitor.intField(info, fieldsStream.readInt());
+          return;
+        case FIELD_IS_NUMERIC_LONG:
+          visitor.longField(info, fieldsStream.readLong());
+          return;
+        case FIELD_IS_NUMERIC_FLOAT:
+          visitor.floatField(info, Float.intBitsToFloat(fieldsStream.readInt()));
+          return;
+        case FIELD_IS_NUMERIC_DOUBLE:
+          visitor.doubleField(info, Double.longBitsToDouble(fieldsStream.readLong()));
+          return;
+        default:
+          throw new CorruptIndexException("Invalid numeric type: " + Integer.toHexString(numeric));
+      }
+    } else { 
+      final int length = fieldsStream.readVInt();
+      byte bytes[] = new byte[length];
+      fieldsStream.readBytes(bytes, 0, length);
+      if ((bits & FIELD_IS_BINARY) != 0) {
+        visitor.binaryField(info, bytes, 0, bytes.length);
+      } else {
+        visitor.stringField(info, new String(bytes, 0, bytes.length, IOUtils.CHARSET_UTF_8));
+      }
+    }
+  }
+  
+  private void skipField(int bits) throws IOException {
+    final int numeric = bits & FIELD_IS_NUMERIC_MASK;
+    if (numeric != 0) {
+      switch(numeric) {
+        case FIELD_IS_NUMERIC_INT:
+        case FIELD_IS_NUMERIC_FLOAT:
+          fieldsStream.readInt();
+          return;
+        case FIELD_IS_NUMERIC_LONG:
+        case FIELD_IS_NUMERIC_DOUBLE:
+          fieldsStream.readLong();
+          return;
+        default: 
+          throw new CorruptIndexException("Invalid numeric type: " + Integer.toHexString(numeric));
+      }
+    } else {
+      final int length = fieldsStream.readVInt();
+      fieldsStream.seek(fieldsStream.getFilePointer() + length);
+    }
+  }
+
+  /** Returns the length in bytes of each raw document in a
+   *  contiguous range of length numDocs starting with
+   *  startDocID.  Returns the IndexInput (the fieldStream),
+   *  already seeked to the starting point for startDocID.*/
+  public final IndexInput rawDocs(int[] lengths, int startDocID, int numDocs) throws IOException {
+    seekIndex(startDocID);
+    long startOffset = indexStream.readLong();
+    long lastOffset = startOffset;
+    int count = 0;
+    while (count < numDocs) {
+      final long offset;
+      final int docID = docStoreOffset + startDocID + count + 1;
+      assert docID <= numTotalDocs;
+      if (docID < numTotalDocs) 
+        offset = indexStream.readLong();
+      else
+        offset = fieldsStream.length();
+      lengths[count++] = (int) (offset-lastOffset);
+      lastOffset = offset;
+    }
+
+    fieldsStream.seek(startOffset);
+
+    return fieldsStream;
+  }
+  
+  // note: if there are shared docstores, we are also called by Lucene3xCodec even in 
+  // the CFS case. so logic here must handle this.
+  public static void files(SegmentInfo info, Set<String> files) throws IOException {
+    if (info.getDocStoreOffset() != -1) {
+      assert info.getDocStoreSegment() != null;
+      if (info.getDocStoreIsCompoundFile()) {
+        files.add(IndexFileNames.segmentFileName(info.getDocStoreSegment(), "", Lucene3xCodec.COMPOUND_FILE_STORE_EXTENSION));
+      } else {
+        files.add(IndexFileNames.segmentFileName(info.getDocStoreSegment(), "", FIELDS_INDEX_EXTENSION));
+        files.add(IndexFileNames.segmentFileName(info.getDocStoreSegment(), "", FIELDS_EXTENSION));
+      }
+    } else if (!info.getUseCompoundFile()) {
+      files.add(IndexFileNames.segmentFileName(info.name, "", FIELDS_INDEX_EXTENSION));
+      files.add(IndexFileNames.segmentFileName(info.name, "", FIELDS_EXTENSION));
+    }
+  }
+}


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xTermVectorsFormat.java lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xTermVectorsFormat.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xTermVectorsFormat.java	2012-01-19 13:28:40.682685692 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xTermVectorsFormat.java	2012-01-29 08:30:13.884717619 -0500
@@ -48,8 +48,8 @@
   }
 
   @Override
-  public void files(Directory dir, SegmentInfo info, Set<String> files) throws IOException {
-    Lucene3xTermVectorsReader.files(dir, info, files);
+  public void files(SegmentInfo info, Set<String> files) throws IOException {
+    Lucene3xTermVectorsReader.files(info, files);
   }
   
 }


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xTermVectorsReader.java lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xTermVectorsReader.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xTermVectorsReader.java	2012-01-18 10:58:33.801998108 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xTermVectorsReader.java	2012-01-30 12:30:21.800483132 -0500
@@ -38,6 +38,7 @@
 import org.apache.lucene.index.SegmentInfo;
 import org.apache.lucene.index.Terms;
 import org.apache.lucene.index.TermsEnum;
+import org.apache.lucene.store.CompoundFileDirectory;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.IOContext;
 import org.apache.lucene.store.IndexInput;
@@ -45,6 +46,8 @@
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.IOUtils;
 
+/** @deprecated */
+@Deprecated
 public class Lucene3xTermVectorsReader extends TermVectorsReader {
 
   // NOTE: if you make a new format, it must be larger than
@@ -88,6 +91,12 @@
   // file.  This will be 0 if we have our own private file.
   private int docStoreOffset;
   
+  // when we are inside a compound share doc store (CFX),
+  // (lucene 3.0 indexes only), we privately open our own fd.
+  // TODO: if we are worried, maybe we could eliminate the
+  // extra fd somehow when you also have vectors...
+  private final CompoundFileDirectory storeCFSReader;
+  
   private final int format;
 
   // used by clone
@@ -100,6 +109,7 @@
     this.numTotalDocs = numTotalDocs;
     this.docStoreOffset = docStoreOffset;
     this.format = format;
+    this.storeCFSReader = null;
   }
     
   public Lucene3xTermVectorsReader(Directory d, SegmentInfo si, FieldInfos fieldInfos, IOContext context)
@@ -111,6 +121,12 @@
     boolean success = false;
 
     try {
+      if (docStoreOffset != -1 && si.getDocStoreIsCompoundFile()) {
+        d = storeCFSReader = new CompoundFileDirectory(si.dir, 
+            IndexFileNames.segmentFileName(segment, "", Lucene3xCodec.COMPOUND_FILE_STORE_EXTENSION), context, false);
+      } else {
+        storeCFSReader = null;
+      }
       String idxName = IndexFileNames.segmentFileName(segment, "", VECTORS_INDEX_EXTENSION);
       tvx = d.openInput(idxName, context);
       format = checkValidFormat(tvx);
@@ -168,7 +184,7 @@
   }
 
   public void close() throws IOException {
-    IOUtils.close(tvx, tvd, tvf);
+    IOUtils.close(tvx, tvd, tvf, storeCFSReader);
   }
 
   /**
@@ -674,16 +690,20 @@
     return new Lucene3xTermVectorsReader(fieldInfos, cloneTvx, cloneTvd, cloneTvf, size, numTotalDocs, docStoreOffset, format);
   }
   
-  public static void files(Directory dir, SegmentInfo info, Set<String> files) throws IOException {
+  // note: if there are shared docstores, we are also called by Lucene3xCodec even in 
+  // the CFS case. so logic here must handle this.
+  public static void files(SegmentInfo info, Set<String> files) throws IOException {
     if (info.getHasVectors()) {
       if (info.getDocStoreOffset() != -1) {
         assert info.getDocStoreSegment() != null;
-        if (!info.getDocStoreIsCompoundFile()) {
+        if (info.getDocStoreIsCompoundFile()) {
+          files.add(IndexFileNames.segmentFileName(info.getDocStoreSegment(), "", Lucene3xCodec.COMPOUND_FILE_STORE_EXTENSION));
+        } else {
           files.add(IndexFileNames.segmentFileName(info.getDocStoreSegment(), "", VECTORS_INDEX_EXTENSION));
           files.add(IndexFileNames.segmentFileName(info.getDocStoreSegment(), "", VECTORS_FIELDS_EXTENSION));
           files.add(IndexFileNames.segmentFileName(info.getDocStoreSegment(), "", VECTORS_DOCUMENTS_EXTENSION));
         }
-      } else {
+      } else if (!info.getUseCompoundFile()) {
         files.add(IndexFileNames.segmentFileName(info.name, "", VECTORS_INDEX_EXTENSION));
         files.add(IndexFileNames.segmentFileName(info.name, "", VECTORS_FIELDS_EXTENSION));
         files.add(IndexFileNames.segmentFileName(info.name, "", VECTORS_DOCUMENTS_EXTENSION));


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene3x/TermInfosReaderIndex.java lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene3x/TermInfosReaderIndex.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene3x/TermInfosReaderIndex.java	2012-01-12 13:57:22.477157291 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene3x/TermInfosReaderIndex.java	2012-01-29 09:11:27.640711864 -0500
@@ -36,7 +36,9 @@
  * index segment. Pairs are accessed either by Term or by ordinal position the
  * set. The Terms and TermInfo are actually serialized and stored into a byte
  * array and pointers to the position of each are stored in a int array.
+ * @deprecated
  */
+@Deprecated
 class TermInfosReaderIndex {
 
   private static final int MAX_PAGE_BITS = 18; // 256 KB block


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesConsumer.java lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesConsumer.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesConsumer.java	2012-01-12 13:57:22.381157290 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesConsumer.java	2012-01-29 08:45:35.868715474 -0500
@@ -66,14 +66,14 @@
     }
   }
 
-  public static void files(Directory dir, SegmentInfo segmentInfo, Set<String> files) throws IOException {
+  public static void files(SegmentInfo segmentInfo, Set<String> files) throws IOException {
     FieldInfos fieldInfos = segmentInfo.getFieldInfos();
     for (FieldInfo fieldInfo : fieldInfos) {
       if (fieldInfo.hasDocValues()) {
         files.add(IndexFileNames.segmentFileName(segmentInfo.name, DOC_VALUES_SEGMENT_SUFFIX, IndexFileNames.COMPOUND_FILE_EXTENSION));
         files.add(IndexFileNames.segmentFileName(segmentInfo.name, DOC_VALUES_SEGMENT_SUFFIX, IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));
-        assert dir.fileExists(IndexFileNames.segmentFileName(segmentInfo.name, DOC_VALUES_SEGMENT_SUFFIX, IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION)); 
-        assert dir.fileExists(IndexFileNames.segmentFileName(segmentInfo.name, DOC_VALUES_SEGMENT_SUFFIX, IndexFileNames.COMPOUND_FILE_EXTENSION)); 
+        assert segmentInfo.dir.fileExists(IndexFileNames.segmentFileName(segmentInfo.name, DOC_VALUES_SEGMENT_SUFFIX, IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION)); 
+        assert segmentInfo.dir.fileExists(IndexFileNames.segmentFileName(segmentInfo.name, DOC_VALUES_SEGMENT_SUFFIX, IndexFileNames.COMPOUND_FILE_EXTENSION)); 
         break;
       }
     }


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesFormat.java lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesFormat.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesFormat.java	2012-01-12 13:57:22.401157290 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesFormat.java	2012-01-29 09:01:47.204713215 -0500
@@ -26,7 +26,6 @@
 import org.apache.lucene.index.PerDocWriteState;
 import org.apache.lucene.index.SegmentInfo;
 import org.apache.lucene.index.SegmentReadState;
-import org.apache.lucene.store.Directory;
 
 public class Lucene40DocValuesFormat extends DocValuesFormat {
 
@@ -41,7 +40,7 @@
   }
 
   @Override
-  public void files(Directory dir, SegmentInfo info, Set<String> files) throws IOException {
-    Lucene40DocValuesConsumer.files(dir, info, files);
+  public void files(SegmentInfo info, Set<String> files) throws IOException {
+    Lucene40DocValuesConsumer.files(info, files);
   }
 }


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosFormat.java lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosFormat.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosFormat.java	2012-01-12 13:57:22.401157290 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosFormat.java	2012-01-29 09:01:53.740713198 -0500
@@ -24,7 +24,6 @@
 import org.apache.lucene.codecs.FieldInfosReader;
 import org.apache.lucene.codecs.FieldInfosWriter;
 import org.apache.lucene.index.SegmentInfo;
-import org.apache.lucene.store.Directory;
 
 /**
  * @lucene.experimental
@@ -44,7 +43,7 @@
   }
 
   @Override
-  public void files(Directory dir, SegmentInfo info, Set<String> files) throws IOException {
-    Lucene40FieldInfosReader.files(dir, info, files);
+  public void files(SegmentInfo info, Set<String> files) throws IOException {
+    Lucene40FieldInfosReader.files(info, files);
   }
 }


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosReader.java lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosReader.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosReader.java	2012-01-23 17:00:08.661852288 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosReader.java	2012-01-29 08:45:47.876715446 -0500
@@ -145,7 +145,7 @@
     }
   }
   
-  public static void files(Directory dir, SegmentInfo info, Set<String> files) throws IOException {
+  public static void files(SegmentInfo info, Set<String> files) throws IOException {
     files.add(IndexFileNames.segmentFileName(info.name, "", Lucene40FieldInfosWriter.FIELD_INFOS_EXTENSION));
   }
 }


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40LiveDocsFormat.java lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40LiveDocsFormat.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40LiveDocsFormat.java	2012-01-29 06:24:10.808735211 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40LiveDocsFormat.java	2012-01-30 12:07:29.056486324 -0500
@@ -48,7 +48,7 @@
   }
 
   @Override
-  public void separateFiles(Directory dir, SegmentInfo info, Set<String> files) throws IOException {
+  public void files(SegmentInfo info, Set<String> files) throws IOException {
     if (info.hasDeletions()) {
       files.add(IndexFileNames.fileNameFromGeneration(info.name, DELETES_EXTENSION, info.getDelGen()));
     }


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40NormsFormat.java lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40NormsFormat.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40NormsFormat.java	2012-01-28 11:10:17.388896253 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40NormsFormat.java	2012-01-29 09:02:00.060713185 -0500
@@ -30,7 +30,6 @@
 import org.apache.lucene.index.PerDocWriteState;
 import org.apache.lucene.index.SegmentInfo;
 import org.apache.lucene.index.SegmentReadState;
-import org.apache.lucene.store.Directory;
 
 /**
  * Norms Format for the default codec. 
@@ -50,10 +49,8 @@
   }
 
   @Override
-  public void files(Directory dir, SegmentInfo info, Set<String> files)
-      throws IOException {
-    Lucene40NormsDocValuesConsumer.files(dir, info, files);
-
+  public void files(SegmentInfo info, Set<String> files) throws IOException {
+    Lucene40NormsDocValuesConsumer.files(info, files);
   }
  
   public static class Lucene40NormsDocValuesProducer extends Lucene40DocValuesProducer {
@@ -103,7 +100,7 @@
       return info.getNormType();
     }
     
-    public static void files(Directory dir, SegmentInfo segmentInfo, Set<String> files) throws IOException {
+    public static void files(SegmentInfo segmentInfo, Set<String> files) throws IOException {
       final String normsFileName = IndexFileNames.segmentFileName(segmentInfo.name, NORMS_SEGMENT_SUFFIX, IndexFileNames.COMPOUND_FILE_EXTENSION);
       FieldInfos fieldInfos = segmentInfo.getFieldInfos();
       for (FieldInfo fieldInfo : fieldInfos) {


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsBaseFormat.java lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsBaseFormat.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsBaseFormat.java	2012-01-12 13:57:22.381157290 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsBaseFormat.java	2012-01-29 09:02:05.148713173 -0500
@@ -26,7 +26,6 @@
 import org.apache.lucene.index.SegmentInfo;
 import org.apache.lucene.index.SegmentReadState;
 import org.apache.lucene.index.SegmentWriteState;
-import org.apache.lucene.store.Directory;
 
 /** 
  * Provides a {@link PostingsReaderBase} and {@link
@@ -52,7 +51,7 @@
   }
   
   @Override
-  public void files(Directory dir, SegmentInfo segmentInfo, String segmentSuffix, Set<String> files) throws IOException {
-    Lucene40PostingsReader.files(dir, segmentInfo, segmentSuffix, files);
+  public void files(SegmentInfo segmentInfo, String segmentSuffix, Set<String> files) throws IOException {
+    Lucene40PostingsReader.files(segmentInfo, segmentSuffix, files);
   }
 }


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsFormat.java lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsFormat.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsFormat.java	2012-01-12 13:57:22.397157289 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsFormat.java	2012-01-29 09:02:10.512713160 -0500
@@ -30,7 +30,6 @@
 import org.apache.lucene.index.SegmentInfo;
 import org.apache.lucene.index.SegmentReadState;
 import org.apache.lucene.index.SegmentWriteState;
-import org.apache.lucene.store.Directory;
 
 /** Default codec. 
  *  @lucene.experimental */
@@ -106,9 +105,9 @@
   static final String PROX_EXTENSION = "prx";
 
   @Override
-  public void files(Directory dir, SegmentInfo segmentInfo, String segmentSuffix, Set<String> files) throws IOException {
-    Lucene40PostingsReader.files(dir, segmentInfo, segmentSuffix, files);
-    BlockTreeTermsReader.files(dir, segmentInfo, segmentSuffix, files);
+  public void files(SegmentInfo segmentInfo, String segmentSuffix, Set<String> files) throws IOException {
+    Lucene40PostingsReader.files(segmentInfo, segmentSuffix, files);
+    BlockTreeTermsReader.files(segmentInfo, segmentSuffix, files);
   }
 
   @Override


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.java lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.java	2012-01-24 12:31:41.701688782 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.java	2012-01-29 08:46:11.800715390 -0500
@@ -74,7 +74,7 @@
     }
   }
 
-  public static void files(Directory dir, SegmentInfo segmentInfo, String segmentSuffix, Collection<String> files) throws IOException {
+  public static void files(SegmentInfo segmentInfo, String segmentSuffix, Collection<String> files) throws IOException {
     files.add(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION));
     if (segmentInfo.getHasProx()) {
       files.add(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION));


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfosReader.java lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfosReader.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfosReader.java	2012-01-19 13:28:40.670685692 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfosReader.java	2012-01-30 10:22:48.064500934 -0500
@@ -23,7 +23,6 @@
 
 import org.apache.lucene.codecs.Codec;
 import org.apache.lucene.codecs.SegmentInfosReader;
-import org.apache.lucene.index.IndexFormatTooOldException;
 import org.apache.lucene.index.SegmentInfo;
 import org.apache.lucene.index.SegmentInfos;
 import org.apache.lucene.store.ChecksumIndexInput;


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsFormat.java lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsFormat.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsFormat.java	2012-01-12 13:57:22.377157290 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsFormat.java	2012-01-29 08:32:03.544717364 -0500
@@ -44,7 +44,7 @@
   }
 
   @Override
-  public void files(Directory dir, SegmentInfo info, Set<String> files) throws IOException {
-    Lucene40StoredFieldsReader.files(dir, info, files);
+  public void files(SegmentInfo info, Set<String> files) throws IOException {
+    Lucene40StoredFieldsReader.files(info, files);
   }
 }


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader.java lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader.java	2012-01-15 22:00:26.034175849 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader.java	2012-01-30 10:13:32.812502227 -0500
@@ -24,8 +24,6 @@
 import org.apache.lucene.index.FieldInfo;
 import org.apache.lucene.index.FieldInfos;
 import org.apache.lucene.index.IndexFileNames;
-import org.apache.lucene.index.IndexFormatTooNewException;
-import org.apache.lucene.index.IndexFormatTooOldException;
 import org.apache.lucene.index.SegmentInfo;
 import org.apache.lucene.index.StoredFieldVisitor;
 import org.apache.lucene.store.AlreadyClosedException;
@@ -35,7 +33,6 @@
 import org.apache.lucene.util.IOUtils;
 
 import java.io.Closeable;
-import java.nio.charset.Charset;
 import java.util.Set;
 
 /**
@@ -54,11 +51,6 @@
   private int numTotalDocs;
   private int size;
   private boolean closed;
-  private final int format;
-
-  // The docID offset where our docs begin in the index
-  // file.  This will be 0 if we have our own private file.
-  private int docStoreOffset;
 
   /** Returns a cloned FieldsReader that shares open
    *  IndexInputs with the original one.  It is the caller's
@@ -68,41 +60,20 @@
   @Override
   public Lucene40StoredFieldsReader clone() {
     ensureOpen();
-    return new Lucene40StoredFieldsReader(fieldInfos, numTotalDocs, size, format, docStoreOffset, (IndexInput)fieldsStream.clone(), (IndexInput)indexStream.clone());
-  }
-
-  /** Verifies that the code version which wrote the segment is supported. */
-  public static void checkCodeVersion(Directory dir, String segment) throws IOException {
-    final String indexStreamFN = IndexFileNames.segmentFileName(segment, "", Lucene40StoredFieldsWriter.FIELDS_INDEX_EXTENSION);
-    IndexInput idxStream = dir.openInput(indexStreamFN, IOContext.DEFAULT);
-    
-    try {
-      int format = idxStream.readInt();
-      if (format < Lucene40StoredFieldsWriter.FORMAT_MINIMUM)
-        throw new IndexFormatTooOldException(idxStream, format, Lucene40StoredFieldsWriter.FORMAT_MINIMUM, Lucene40StoredFieldsWriter.FORMAT_CURRENT);
-      if (format > Lucene40StoredFieldsWriter.FORMAT_CURRENT)
-        throw new IndexFormatTooNewException(idxStream, format, Lucene40StoredFieldsWriter.FORMAT_MINIMUM, Lucene40StoredFieldsWriter.FORMAT_CURRENT);
-    } finally {
-      idxStream.close();
-    }
+    return new Lucene40StoredFieldsReader(fieldInfos, numTotalDocs, size, (IndexInput)fieldsStream.clone(), (IndexInput)indexStream.clone());
   }
   
   // Used only by clone
-  private Lucene40StoredFieldsReader(FieldInfos fieldInfos, int numTotalDocs, int size, int format, int docStoreOffset,
-                       IndexInput fieldsStream, IndexInput indexStream) {
+  private Lucene40StoredFieldsReader(FieldInfos fieldInfos, int numTotalDocs, int size, IndexInput fieldsStream, IndexInput indexStream) {
     this.fieldInfos = fieldInfos;
     this.numTotalDocs = numTotalDocs;
     this.size = size;
-    this.format = format;
-    this.docStoreOffset = docStoreOffset;
     this.fieldsStream = fieldsStream;
     this.indexStream = indexStream;
   }
 
   public Lucene40StoredFieldsReader(Directory d, SegmentInfo si, FieldInfos fn, IOContext context) throws IOException {
-    final String segment = si.getDocStoreSegment();
-    final int docStoreOffset = si.getDocStoreOffset();
-    final int size = si.docCount;
+    final String segment = si.name;
     boolean success = false;
     fieldInfos = fn;
     try {
@@ -110,30 +81,17 @@
       final String indexStreamFN = IndexFileNames.segmentFileName(segment, "", Lucene40StoredFieldsWriter.FIELDS_INDEX_EXTENSION);
       indexStream = d.openInput(indexStreamFN, context);
       
-      format = indexStream.readInt();
-
-      if (format < Lucene40StoredFieldsWriter.FORMAT_MINIMUM)
-        throw new IndexFormatTooOldException(indexStream, format, Lucene40StoredFieldsWriter.FORMAT_MINIMUM, Lucene40StoredFieldsWriter.FORMAT_CURRENT);
-      if (format > Lucene40StoredFieldsWriter.FORMAT_CURRENT)
-        throw new IndexFormatTooNewException(indexStream, format, Lucene40StoredFieldsWriter.FORMAT_MINIMUM, Lucene40StoredFieldsWriter.FORMAT_CURRENT);
+      // its a 4.0 codec: so its not too-old, its corrupt.
+      // TODO: change this to CodecUtil.checkHeader
+      if (Lucene40StoredFieldsWriter.FORMAT_CURRENT != indexStream.readInt()) {
+        throw new CorruptIndexException("unexpected fdx header: " + indexStream);
+      }
 
       final long indexSize = indexStream.length() - FORMAT_SIZE;
-      
-      if (docStoreOffset != -1) {
-        // We read only a slice out of this shared fields file
-        this.docStoreOffset = docStoreOffset;
-        this.size = size;
-
-        // Verify the file is long enough to hold all of our
-        // docs
-        assert ((int) (indexSize / 8)) >= size + this.docStoreOffset: "indexSize=" + indexSize + " size=" + size + " docStoreOffset=" + docStoreOffset;
-      } else {
-        this.docStoreOffset = 0;
-        this.size = (int) (indexSize >> 3);
-        // Verify two sources of "maxDoc" agree:
-        if (this.size != si.docCount) {
-          throw new CorruptIndexException("doc counts differ for segment " + segment + ": fieldsReader shows " + this.size + " but segmentInfo shows " + si.docCount);
-        }
+      this.size = (int) (indexSize >> 3);
+      // Verify two sources of "maxDoc" agree:
+      if (this.size != si.docCount) {
+        throw new CorruptIndexException("doc counts differ for segment " + segment + ": fieldsReader shows " + this.size + " but segmentInfo shows " + si.docCount);
       }
       numTotalDocs = (int) (indexSize >> 3);
       success = true;
@@ -176,7 +134,7 @@
   }
 
   private void seekIndex(int docID) throws IOException {
-    indexStream.seek(FORMAT_SIZE + (docID + docStoreOffset) * 8L);
+    indexStream.seek(FORMAT_SIZE + docID * 8L);
   }
 
   public final void visitDocument(int n, StoredFieldVisitor visitor) throws CorruptIndexException, IOException {
@@ -203,8 +161,6 @@
       }
     }
   }
-  
-  static final Charset UTF8 = Charset.forName("UTF-8");
 
   private void readField(StoredFieldVisitor visitor, FieldInfo info, int bits) throws IOException {
     final int numeric = bits & Lucene40StoredFieldsWriter.FIELD_IS_NUMERIC_MASK;
@@ -232,7 +188,7 @@
       if ((bits & Lucene40StoredFieldsWriter.FIELD_IS_BINARY) != 0) {
         visitor.binaryField(info, bytes, 0, bytes.length);
       } else {
-        visitor.stringField(info, new String(bytes, 0, bytes.length, UTF8));
+        visitor.stringField(info, new String(bytes, 0, bytes.length, IOUtils.CHARSET_UTF_8));
       }
     }
   }
@@ -269,7 +225,7 @@
     int count = 0;
     while (count < numDocs) {
       final long offset;
-      final int docID = docStoreOffset + startDocID + count + 1;
+      final int docID = startDocID + count + 1;
       assert docID <= numTotalDocs;
       if (docID < numTotalDocs) 
         offset = indexStream.readLong();
@@ -283,19 +239,9 @@
 
     return fieldsStream;
   }
-  
-  // TODO: split into PreFlexFieldsReader so it can handle this shared docstore crap?
-  // only preflex segments refer to these?
-  public static void files(Directory dir, SegmentInfo info, Set<String> files) throws IOException {
-    if (info.getDocStoreOffset() != -1) {
-      assert info.getDocStoreSegment() != null;
-      if (!info.getDocStoreIsCompoundFile()) {
-        files.add(IndexFileNames.segmentFileName(info.getDocStoreSegment(), "", Lucene40StoredFieldsWriter.FIELDS_INDEX_EXTENSION));
-        files.add(IndexFileNames.segmentFileName(info.getDocStoreSegment(), "", Lucene40StoredFieldsWriter.FIELDS_EXTENSION));
-      }
-    } else {
-      files.add(IndexFileNames.segmentFileName(info.name, "", Lucene40StoredFieldsWriter.FIELDS_INDEX_EXTENSION));
-      files.add(IndexFileNames.segmentFileName(info.name, "", Lucene40StoredFieldsWriter.FIELDS_EXTENSION));
-    }
+
+  public static void files(SegmentInfo info, Set<String> files) throws IOException {
+    files.add(IndexFileNames.segmentFileName(info.name, "", Lucene40StoredFieldsWriter.FIELDS_INDEX_EXTENSION));
+    files.add(IndexFileNames.segmentFileName(info.name, "", Lucene40StoredFieldsWriter.FIELDS_EXTENSION));
   }
 }


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter.java lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter.java	2012-01-27 16:19:44.541054037 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter.java	2012-01-30 10:05:10.020503396 -0500
@@ -55,10 +55,7 @@
   // currently unused: static final int FIELD_IS_NUMERIC_SHORT = 5 << _NUMERIC_BIT_SHIFT;
   // currently unused: static final int FIELD_IS_NUMERIC_BYTE = 6 << _NUMERIC_BIT_SHIFT;
 
-  // Lucene 3.0: Removal of compressed fields
-  static final int FORMAT_LUCENE_3_0_NO_COMPRESSED_FIELDS = 2;
-
-  // Lucene 3.2: NumericFields are stored in binary format
+  // (Happens to be the same as for now) Lucene 3.2: NumericFields are stored in binary format
   static final int FORMAT_LUCENE_3_2_NUMERIC_FIELDS = 3;
 
   // NOTE: if you introduce a new format, make it 1 higher
@@ -67,7 +64,7 @@
   static final int FORMAT_CURRENT = FORMAT_LUCENE_3_2_NUMERIC_FIELDS;
 
   // when removing support for old versions, leave the last supported version here
-  static final int FORMAT_MINIMUM = FORMAT_LUCENE_3_0_NO_COMPRESSED_FIELDS;
+  static final int FORMAT_MINIMUM = FORMAT_LUCENE_3_2_NUMERIC_FIELDS;
 
   /** Extension of stored fields file */
   public static final String FIELDS_EXTENSION = "fdt";
@@ -211,7 +208,7 @@
       // throw an exception to prevent the corruption from
       // entering the index.  See LUCENE-1282 for
       // details.
-      throw new RuntimeException("mergeFields produced an invalid result: docCount is " + numDocs + " but fdx file size is " + indexStream.getFilePointer() + " file=" + indexStream.toString() + "; now aborting this merge to prevent index corruption");
+      throw new RuntimeException("fdx size mismatch: docCount is " + numDocs + " but fdx file size is " + indexStream.getFilePointer() + " file=" + indexStream.toString() + "; now aborting this merge to prevent index corruption");
   }
   
   @Override


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsFormat.java lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsFormat.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsFormat.java	2012-01-12 13:57:22.397157289 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsFormat.java	2012-01-29 08:32:12.548717342 -0500
@@ -41,7 +41,7 @@
   }
 
   @Override
-  public void files(Directory dir, SegmentInfo info, Set<String> files) throws IOException {
-    Lucene40TermVectorsReader.files(dir, info, files);
+  public void files(SegmentInfo info, Set<String> files) throws IOException {
+    Lucene40TermVectorsReader.files(info, files);
   }
 }


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.java lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.java	2012-01-17 15:24:37.408771497 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.java	2012-01-29 08:46:36.396715333 -0500
@@ -699,7 +699,7 @@
     return new Lucene40TermVectorsReader(fieldInfos, cloneTvx, cloneTvd, cloneTvf, size, numTotalDocs, format);
   }
   
-  public static void files(Directory dir, SegmentInfo info, Set<String> files) throws IOException {
+  public static void files(SegmentInfo info, Set<String> files) throws IOException {
     if (info.getHasVectors()) {
       files.add(IndexFileNames.segmentFileName(info.name, "", VECTORS_INDEX_EXTENSION));
       files.add(IndexFileNames.segmentFileName(info.name, "", VECTORS_FIELDS_EXTENSION));


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter.java lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter.java	2012-01-17 20:19:27.757079565 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter.java	2012-01-30 09:35:47.668507496 -0500
@@ -355,7 +355,7 @@
       // throw an exception to prevent the corruption from
       // entering the index.  See LUCENE-1282 for
       // details.
-      throw new RuntimeException("mergeVectors produced an invalid result: mergedDocs is " + numDocs + " but tvx size is " + tvx.getFilePointer() + " file=" + tvx.toString() + "; now aborting this merge to prevent index corruption");
+      throw new RuntimeException("tvx size mismatch: mergedDocs is " + numDocs + " but tvx size is " + tvx.getFilePointer() + " file=" + tvx.toString() + "; now aborting this merge to prevent index corruption");
   }
 
   /** Close all streams. */


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.java lucene-3728/lucene/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.java	2012-01-15 22:00:26.050175850 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.java	2012-01-29 09:02:22.456713133 -0500
@@ -43,7 +43,6 @@
 import org.apache.lucene.index.Terms;
 import org.apache.lucene.index.TermsEnum;
 import org.apache.lucene.store.ByteArrayDataInput;
-import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.IOContext;
 import org.apache.lucene.store.IndexInput;
 import org.apache.lucene.store.IndexOutput;
@@ -826,7 +825,7 @@
   }
 
   @Override
-  public void files(Directory dir, SegmentInfo segmentInfo, String segmentSuffix, Set<String> files) throws IOException {
+  public void files(SegmentInfo segmentInfo, String segmentSuffix, Set<String> files) throws IOException {
     files.add(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, EXTENSION));
   }
 }


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/NormsFormat.java lucene-3728/lucene/src/java/org/apache/lucene/codecs/NormsFormat.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/NormsFormat.java	2012-01-29 19:11:35.728628107 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/codecs/NormsFormat.java	2012-01-29 08:28:53.700717805 -0500
@@ -23,7 +23,6 @@
 import org.apache.lucene.index.PerDocWriteState;
 import org.apache.lucene.index.SegmentInfo;
 import org.apache.lucene.index.SegmentReadState;
-import org.apache.lucene.store.Directory;
 
 /**
  * format for normalization factors
@@ -31,21 +30,5 @@
 public abstract class NormsFormat {
   public abstract PerDocConsumer docsConsumer(PerDocWriteState state) throws IOException;
   public abstract PerDocProducer docsProducer(SegmentReadState state) throws IOException;
-  public abstract void files(Directory dir, SegmentInfo info, Set<String> files) throws IOException;
-  
-  /** 
-   * Note: this should not be overridden! 
-   * @deprecated 
-   */
-  @Deprecated
-  public void separateFiles(Directory dir, SegmentInfo info, Set<String> files) throws IOException {};
-  
-  /**
-   * Note: this should not be overridden!
-   * @deprecated
-   */
-  @Deprecated
-  public PerDocProducer docsProducer(SegmentReadState state, Directory separateNormsDir) throws IOException {
-    return docsProducer(state);
-  }
+  public abstract void files(SegmentInfo info, Set<String> files) throws IOException;
 }


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/perfield/PerFieldPostingsFormat.java lucene-3728/lucene/src/java/org/apache/lucene/codecs/perfield/PerFieldPostingsFormat.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/perfield/PerFieldPostingsFormat.java	2012-01-12 13:57:22.501157291 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/codecs/perfield/PerFieldPostingsFormat.java	2012-01-29 08:37:44.828716570 -0500
@@ -306,8 +306,8 @@
   }
 
   @Override
-  public void files(final Directory dir, final SegmentInfo info, String segmentSuffix, final Set<String> files)
-      throws IOException {
+  public void files(final SegmentInfo info, String segmentSuffix, final Set<String> files) throws IOException {
+    final Directory dir = info.dir;
 
     final String mapFileName = IndexFileNames.segmentFileName(info.name, segmentSuffix, PER_FIELD_EXTENSION);
     files.add(mapFileName);
@@ -316,7 +316,7 @@
       new VisitPerFieldFile(dir, info.name, segmentSuffix) {
         @Override
         protected void visitOneFormat(String segmentSuffix, PostingsFormat format) throws IOException {
-          format.files(dir, info, segmentSuffix, files);
+          format.files(info, segmentSuffix, files);
         }
 
         @Override


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/PostingsBaseFormat.java lucene-3728/lucene/src/java/org/apache/lucene/codecs/PostingsBaseFormat.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/PostingsBaseFormat.java	2012-01-12 13:57:22.425157290 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/codecs/PostingsBaseFormat.java	2012-01-29 09:00:55.068713336 -0500
@@ -23,7 +23,6 @@
 import org.apache.lucene.index.SegmentInfo;
 import org.apache.lucene.index.SegmentWriteState;
 import org.apache.lucene.index.SegmentReadState;
-import org.apache.lucene.store.Directory;
 
 /** 
  * Provides a {@link PostingsReaderBase} and {@link
@@ -51,5 +50,5 @@
 
   public abstract PostingsWriterBase postingsWriterBase(SegmentWriteState state) throws IOException;
 
-  public abstract void files(Directory dir, SegmentInfo segmentInfo, String segmentSuffix, Set<String> files) throws IOException;
+  public abstract void files(SegmentInfo segmentInfo, String segmentSuffix, Set<String> files) throws IOException;
 }


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/PostingsFormat.java lucene-3728/lucene/src/java/org/apache/lucene/codecs/PostingsFormat.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/PostingsFormat.java	2012-01-12 13:57:22.433157290 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/codecs/PostingsFormat.java	2012-01-29 09:01:02.020713320 -0500
@@ -25,8 +25,6 @@
 import org.apache.lucene.index.SegmentReadState;
 import org.apache.lucene.util.NamedSPILoader;
 
-import org.apache.lucene.store.Directory;
-
 /** @lucene.experimental */
 public abstract class PostingsFormat implements NamedSPILoader.NamedSPI {
 
@@ -59,12 +57,11 @@
   /**
    * Gathers files associated with this segment
    * 
-   * @param dir the {@link Directory} this segment was written to
    * @param segmentInfo the {@link SegmentInfo} for this segment 
    * @param segmentSuffix the format's suffix within this segment
    * @param files the of files to add the codec files to.
    */
-  public abstract void files(Directory dir, SegmentInfo segmentInfo, String segmentSuffix, Set<String> files) throws IOException;
+  public abstract void files(SegmentInfo segmentInfo, String segmentSuffix, Set<String> files) throws IOException;
 
   @Override
   public String toString() {


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsFormat.java lucene-3728/lucene/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsFormat.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsFormat.java	2012-01-12 13:57:22.405157290 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsFormat.java	2012-01-29 09:02:30.300713114 -0500
@@ -31,7 +31,6 @@
 import org.apache.lucene.index.SegmentInfo;
 import org.apache.lucene.index.SegmentReadState;
 import org.apache.lucene.index.SegmentWriteState;
-import org.apache.lucene.store.Directory;
 
 /** This postings format "inlines" the postings for terms that have
  *  low docFreq.  It wraps another postings format, which is used for
@@ -115,8 +114,8 @@
   }
 
   @Override
-  public void files(Directory dir, SegmentInfo segmentInfo, String segmentSuffix, Set<String> files) throws IOException {
-    wrappedPostingsBaseFormat.files(dir, segmentInfo, segmentSuffix, files);
-    BlockTreeTermsReader.files(dir, segmentInfo, segmentSuffix, files);
+  public void files(SegmentInfo segmentInfo, String segmentSuffix, Set<String> files) throws IOException {
+    wrappedPostingsBaseFormat.files(segmentInfo, segmentSuffix, files);
+    BlockTreeTermsReader.files(segmentInfo, segmentSuffix, files);
   }
 }


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/sep/SepDocValuesConsumer.java lucene-3728/lucene/src/java/org/apache/lucene/codecs/sep/SepDocValuesConsumer.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/sep/SepDocValuesConsumer.java	2012-01-12 13:57:22.485157291 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/codecs/sep/SepDocValuesConsumer.java	2012-01-29 08:51:55.284714592 -0500
@@ -38,6 +38,7 @@
 public class SepDocValuesConsumer extends DocValuesWriterBase {
   private final Directory directory;
   private final FieldInfos fieldInfos;
+
   public SepDocValuesConsumer(PerDocWriteState state) throws IOException {
     super(state);
     this.directory = state.directory;
@@ -49,9 +50,9 @@
     return directory;
   }
 
-  public static void files(Directory dir, SegmentInfo segmentInfo,
+  public static void files(SegmentInfo segmentInfo,
       Set<String> files) throws IOException {
-    files(dir, segmentInfo.getFieldInfos(), segmentInfo.name, files);
+    files(segmentInfo.dir, segmentInfo.getFieldInfos(), segmentInfo.name, files);
   }
   
   @SuppressWarnings("fallthrough")


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat.java lucene-3728/lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat.java	2012-01-12 13:57:22.425157290 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat.java	2012-01-29 09:02:39.044713094 -0500
@@ -24,7 +24,6 @@
 import org.apache.lucene.codecs.FieldInfosReader;
 import org.apache.lucene.codecs.FieldInfosWriter;
 import org.apache.lucene.index.SegmentInfo;
-import org.apache.lucene.store.Directory;
 
 /**
  * plaintext field infos format
@@ -47,7 +46,7 @@
   }
 
   @Override
-  public void files(Directory dir, SegmentInfo info, Set<String> files) throws IOException {
-    SimpleTextFieldInfosReader.files(dir, info, files);
+  public void files(SegmentInfo info, Set<String> files) throws IOException {
+    SimpleTextFieldInfosReader.files(info, files);
   }
 }


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader.java lucene-3728/lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader.java	2012-01-16 18:06:56.119436483 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader.java	2012-01-29 08:38:09.328716513 -0500
@@ -133,7 +133,7 @@
     return new String(scratch.bytes, scratch.offset+offset, scratch.length-offset, IOUtils.CHARSET_UTF_8);
   }
   
-  public static void files(Directory dir, SegmentInfo info, Set<String> files) throws IOException {
+  public static void files(SegmentInfo info, Set<String> files) throws IOException {
     files.add(IndexFileNames.segmentFileName(info.name, "", FIELD_INFOS_EXTENSION));
   }
 }


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextLiveDocsFormat.java lucene-3728/lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextLiveDocsFormat.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextLiveDocsFormat.java	2012-01-29 06:24:12.028735208 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextLiveDocsFormat.java	2012-01-30 12:07:56.088486262 -0500
@@ -138,7 +138,7 @@
   }
 
   @Override
-  public void separateFiles(Directory dir, SegmentInfo info, Set<String> files) throws IOException {
+  public void files(SegmentInfo info, Set<String> files) throws IOException {
     if (info.hasDeletions()) {
       files.add(IndexFileNames.fileNameFromGeneration(info.name, LIVEDOCS_EXTENSION, info.getDelGen()));
     }


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextNormsConsumer.java lucene-3728/lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextNormsConsumer.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextNormsConsumer.java	2012-01-16 18:06:56.119436483 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextNormsConsumer.java	2012-01-29 08:38:20.676716486 -0500
@@ -280,7 +280,7 @@
     }
   }
 
-  public static void files(Directory dir, SegmentInfo info, Set<String> files) throws IOException {
+  public static void files(SegmentInfo info, Set<String> files) throws IOException {
     FieldInfos fieldInfos = info.getFieldInfos();
     
     for (FieldInfo fieldInfo : fieldInfos) {


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextNormsFormat.java lucene-3728/lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextNormsFormat.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextNormsFormat.java	2012-01-28 11:10:48.372896181 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextNormsFormat.java	2012-01-29 09:02:45.004713080 -0500
@@ -26,7 +26,6 @@
 import org.apache.lucene.index.PerDocWriteState;
 import org.apache.lucene.index.SegmentInfo;
 import org.apache.lucene.index.SegmentReadState;
-import org.apache.lucene.store.Directory;
 
 /**
  * plain-text norms format
@@ -47,9 +46,7 @@
   }
 
   @Override
-  public void files(Directory dir, SegmentInfo info, Set<String> files)
-      throws IOException {
-    SimpleTextNormsConsumer.files(dir, info, files);
-
+  public void files(SegmentInfo info, Set<String> files) throws IOException {
+    SimpleTextNormsConsumer.files(info, files);
   }   
 }


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPostingsFormat.java lucene-3728/lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPostingsFormat.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPostingsFormat.java	2012-01-12 13:57:22.429157290 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPostingsFormat.java	2012-01-29 08:37:01.956716668 -0500
@@ -27,7 +27,6 @@
 import org.apache.lucene.index.SegmentWriteState;
 import org.apache.lucene.index.SegmentReadState;
 import org.apache.lucene.index.IndexFileNames;
-import org.apache.lucene.store.Directory;
 
 /** For debugging, curiosity, transparency only!!  Do not
  *  use this codec in production.
@@ -61,7 +60,7 @@
   }
 
   @Override
-  public void files(Directory dir, SegmentInfo segmentInfo, String segmentSuffix, Set<String> files) throws IOException {
+  public void files(SegmentInfo segmentInfo, String segmentSuffix, Set<String> files) throws IOException {
     files.add(getPostingsFileName(segmentInfo.name, segmentSuffix));
   }
 }


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsFormat.java lucene-3728/lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsFormat.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsFormat.java	2012-01-12 13:57:22.425157290 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsFormat.java	2012-01-29 08:37:11.808716647 -0500
@@ -47,7 +47,7 @@
   }
 
   @Override
-  public void files(Directory dir, SegmentInfo info, Set<String> files) throws IOException {
-    SimpleTextStoredFieldsReader.files(dir, info, files);
+  public void files(SegmentInfo info, Set<String> files) throws IOException {
+    SimpleTextStoredFieldsReader.files(info, files);
   }
 }


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader.java lucene-3728/lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader.java	2012-01-12 13:57:22.429157290 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader.java	2012-01-29 08:38:59.432716396 -0500
@@ -178,7 +178,7 @@
     }
   }
   
-  public static void files(Directory dir, SegmentInfo info, Set<String> files) throws IOException {
+  public static void files(SegmentInfo info, Set<String> files) throws IOException {
     files.add(IndexFileNames.segmentFileName(info.name, "", SimpleTextStoredFieldsWriter.FIELDS_EXTENSION));
   }
   


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsFormat.java lucene-3728/lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsFormat.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsFormat.java	2012-01-15 22:00:26.046175850 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsFormat.java	2012-01-29 08:37:56.192716543 -0500
@@ -47,7 +47,7 @@
   }
 
   @Override
-  public void files(Directory dir, SegmentInfo info, Set<String> files) throws IOException {
-    SimpleTextTermVectorsReader.files(dir, info, files);
+  public void files(SegmentInfo info, Set<String> files) throws IOException {
+    SimpleTextTermVectorsReader.files(info, files);
   }
 }


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader.java lucene-3728/lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader.java	2012-01-15 22:00:26.046175850 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader.java	2012-01-29 08:39:20.856716346 -0500
@@ -201,7 +201,7 @@
     }
   }
   
-  public static void files(Directory dir, SegmentInfo info, Set<String> files) throws IOException {
+  public static void files(SegmentInfo info, Set<String> files) throws IOException {
     if (info.getHasVectors()) {
       files.add(IndexFileNames.segmentFileName(info.name, "", VECTORS_EXTENSION));
     }


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/StoredFieldsFormat.java lucene-3728/lucene/src/java/org/apache/lucene/codecs/StoredFieldsFormat.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/StoredFieldsFormat.java	2012-01-12 13:57:22.401157290 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/codecs/StoredFieldsFormat.java	2012-01-29 08:28:00.648717929 -0500
@@ -31,5 +31,5 @@
 public abstract class StoredFieldsFormat {
   public abstract StoredFieldsReader fieldsReader(Directory directory, SegmentInfo si, FieldInfos fn, IOContext context) throws IOException;
   public abstract StoredFieldsWriter fieldsWriter(Directory directory, String segment, IOContext context) throws IOException;
-  public abstract void files(Directory dir, SegmentInfo info, Set<String> files) throws IOException;
+  public abstract void files(SegmentInfo info, Set<String> files) throws IOException;
 }


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/TermVectorsFormat.java lucene-3728/lucene/src/java/org/apache/lucene/codecs/TermVectorsFormat.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/TermVectorsFormat.java	2012-01-12 13:57:22.441157290 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/codecs/TermVectorsFormat.java	2012-01-29 08:28:07.372717913 -0500
@@ -31,5 +31,5 @@
 public abstract class TermVectorsFormat {
   public abstract TermVectorsReader vectorsReader(Directory directory, SegmentInfo segmentInfo, FieldInfos fieldInfos, IOContext context) throws IOException;
   public abstract TermVectorsWriter vectorsWriter(Directory directory, String segment, IOContext context) throws IOException;
-  public abstract void files(Directory dir, SegmentInfo info, Set<String> files) throws IOException;
+  public abstract void files(SegmentInfo info, Set<String> files) throws IOException;
 }


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/VariableGapTermsIndexReader.java lucene-3728/lucene/src/java/org/apache/lucene/codecs/VariableGapTermsIndexReader.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/codecs/VariableGapTermsIndexReader.java	2012-01-15 22:00:26.062175850 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/codecs/VariableGapTermsIndexReader.java	2012-01-29 08:47:59.552715140 -0500
@@ -217,7 +217,7 @@
     }
   }
 
-  public static void files(Directory dir, SegmentInfo info, String segmentSuffix, Collection<String> files) {
+  public static void files(SegmentInfo info, String segmentSuffix, Collection<String> files) {
     files.add(IndexFileNames.segmentFileName(info.name, segmentSuffix, VariableGapTermsIndexWriter.TERMS_INDEX_EXTENSION));
   }
 


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread.java lucene-3728/lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread.java	2012-01-29 06:24:20.584735188 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread.java	2012-01-30 12:49:49.504480416 -0500
@@ -494,14 +494,12 @@
       }
 
       if (infoStream.isEnabled("DWPT")) {
-        final double newSegmentSizeNoStore = newSegment.sizeInBytes(false)/1024./1024.;
-        final double newSegmentSize = newSegment.sizeInBytes(true)/1024./1024.;
+        final double newSegmentSize = newSegment.sizeInBytes()/1024./1024.;
         infoStream.message("DWPT", "flushed: segment=" + newSegment + 
                 " ramUsed=" + nf.format(startMBUsed) + " MB" +
-                " newFlushedSize=" + nf.format(newSegmentSize) + " MB" +
-                " (" + nf.format(newSegmentSizeNoStore) + " MB w/o doc stores)" +
+                " newFlushedSize(includes docstores)=" + nf.format(newSegmentSize) + " MB" +
                 " docs/MB=" + nf.format(flushedDocCount / newSegmentSize) +
-                " new/old=" + nf.format(100.0 * newSegmentSizeNoStore / startMBUsed) + "%");
+                " new/old=" + nf.format(100.0 * newSegmentSize / startMBUsed) + "%");
       }
       doAfterFlush();
       success = true;


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/index/IndexFileNames.java lucene-3728/lucene/src/java/org/apache/lucene/index/IndexFileNames.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/index/IndexFileNames.java	2012-01-29 06:24:20.288735189 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/index/IndexFileNames.java	2012-01-30 11:50:52.672488643 -0500
@@ -54,9 +54,6 @@
   /** Extension of compound file entries */
   public static final String COMPOUND_FILE_ENTRIES_EXTENSION = "cfe";
 
-  /** Extension of compound file for doc store files*/
-  public static final String COMPOUND_FILE_STORE_EXTENSION = "cfx";
-
   /**
    * This array contains all filename extensions used by
    * Lucene's index files, with one exception, namely the
@@ -68,7 +65,6 @@
     COMPOUND_FILE_EXTENSION,
     COMPOUND_FILE_ENTRIES_EXTENSION,
     GEN_EXTENSION,
-    COMPOUND_FILE_STORE_EXTENSION,
   };
 
   /**


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/index/IndexWriter.java lucene-3728/lucene/src/java/org/apache/lucene/index/IndexWriter.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/index/IndexWriter.java	2012-01-29 06:24:23.280735182 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/index/IndexWriter.java	2012-01-30 12:36:44.552482242 -0500
@@ -2545,27 +2545,27 @@
     // only relevant for segments that share doc store with others,
     // because the DS might have been copied already, in which case we
     // just want to update the DS name of this SegmentInfo.
-    // NOTE: pre-3x segments include a null DSName if they don't share doc
-    // store. The following code ensures we don't accidentally insert
-    // 'null' to the map.
     String dsName = info.getDocStoreSegment();
+    assert dsName != null;
     final String newDsName;
-    if (dsName != null) {
-      if (dsNames.containsKey(dsName)) {
-        newDsName = dsNames.get(dsName);
-      } else {
-        dsNames.put(dsName, segName);
-        newDsName = segName;
-      }
+    if (dsNames.containsKey(dsName)) {
+      newDsName = dsNames.get(dsName);
     } else {
+      dsNames.put(dsName, segName);
       newDsName = segName;
     }
     
-    Set<String> codecDocStoreFiles = info.codecDocStoreFiles();
+    Set<String> codecDocStoreFiles = new HashSet<String>();
+    if (info.getDocStoreOffset() != -1) {
+      // only violate the codec this way if its preflex
+      codec.storedFieldsFormat().files(info, codecDocStoreFiles);
+      codec.termVectorsFormat().files(info, codecDocStoreFiles);
+    }
+    
     // Copy the segment files
     for (String file: info.files()) {
       final String newFileName;
-      if (codecDocStoreFiles.contains(file) || file.endsWith(IndexFileNames.COMPOUND_FILE_STORE_EXTENSION)) {
+      if (codecDocStoreFiles.contains(file)) {
         newFileName = newDsName + IndexFileNames.stripSegmentName(file);
         if (dsFilesCopied.contains(newFileName)) {
           continue;
@@ -4070,12 +4070,11 @@
    */
   static final Collection<String> createCompoundFile(Directory directory, String fileName, CheckAbort checkAbort, final SegmentInfo info, IOContext context)
           throws IOException {
-
+    assert info.getDocStoreOffset() == -1;
     // Now merge all added files
     Collection<String> files = info.files();
     CompoundFileDirectory cfsDir = new CompoundFileDirectory(directory, fileName, context, true);
     try {
-      assert assertNoSeparateFiles(files, directory, info);
       for (String file : files) {
         directory.copy(cfsDir, file, file, context);
         checkAbort.work(directory.fileLength(file));
@@ -4086,20 +4085,4 @@
 
     return files;
   }
-  
-  
-  /**
-   * used only by assert: checks that filenames about to be put in cfs belong.
-   */
-  private static boolean assertNoSeparateFiles(Collection<String> files, 
-      Directory dir, SegmentInfo info) throws IOException {
-    // maybe this is overkill, but codec naming clashes would be bad.
-    Set<String> separateFiles = new HashSet<String>();
-    info.getCodec().separateFiles(dir, info, separateFiles);
-    
-    for (String file : files) {
-      assert !separateFiles.contains(file) : file + " should not go in CFS!";
-    }
-    return true;
-  }
 }


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/index/SegmentCoreReaders.java lucene-3728/lucene/src/java/org/apache/lucene/index/SegmentCoreReaders.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/index/SegmentCoreReaders.java	2012-01-29 19:11:35.744628107 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/index/SegmentCoreReaders.java	2012-01-30 11:40:44.988490057 -0500
@@ -48,16 +48,12 @@
   // SegmentReaders:
   private final AtomicInteger ref = new AtomicInteger(1);
   
-  final String segment;
   final FieldInfos fieldInfos;
   
   final FieldsProducer fields;
   final PerDocProducer perDocProducer;
   final PerDocProducer norms;
 
-  final Directory dir;
-  final Directory cfsDir;
-  final IOContext context;
   final int termsIndexDivisor;
   
   private final SegmentReader owner;
@@ -65,7 +61,6 @@
   final StoredFieldsReader fieldsReaderOrig;
   final TermVectorsReader termVectorsReaderOrig;
   final CompoundFileDirectory cfsReader;
-  final CompoundFileDirectory storeCFSReader;
 
   final CloseableThreadLocal<StoredFieldsReader> fieldsReaderLocal = new CloseableThreadLocal<StoredFieldsReader>() {
     @Override
@@ -91,22 +86,18 @@
       throw new IllegalArgumentException("indexDivisor must be < 0 (don't load terms index) or greater than 0 (got 0)");
     }
     
-    segment = si.name;
     final Codec codec = si.getCodec();
-    this.context = context;
-    this.dir = dir;
-    
+    final Directory cfsDir; // confusing name: if (cfs) its the cfsdir, otherwise its the segment's directory.
+
     boolean success = false;
     
     try {
-      Directory dir0 = dir;
       if (si.getUseCompoundFile()) {
-        cfsReader = new CompoundFileDirectory(dir, IndexFileNames.segmentFileName(segment, "", IndexFileNames.COMPOUND_FILE_EXTENSION), context, false);
-        dir0 = cfsReader;
+        cfsDir = cfsReader = new CompoundFileDirectory(dir, IndexFileNames.segmentFileName(si.name, "", IndexFileNames.COMPOUND_FILE_EXTENSION), context, false);
       } else {
         cfsReader = null;
+        cfsDir = dir;
       }
-      cfsDir = dir0;
       si.loadFieldInfos(cfsDir, false); // prevent opening the CFS to load fieldInfos
       fieldInfos = si.getFieldInfos();
       
@@ -119,36 +110,13 @@
       // ask codec for its Norms: 
       // TODO: since we don't write any norms file if there are no norms,
       // kinda jaky to assume the codec handles the case of no norms file at all gracefully?!
-      norms = codec.normsFormat().docsProducer(segmentReadState, dir);
+      norms = codec.normsFormat().docsProducer(segmentReadState);
       perDocProducer = codec.docValuesFormat().docsProducer(segmentReadState);
-
-      final Directory storeDir;
-      if (si.getDocStoreOffset() != -1) {
-        if (si.getDocStoreIsCompoundFile()) {
-          storeCFSReader = new CompoundFileDirectory(dir,
-              IndexFileNames.segmentFileName(si.getDocStoreSegment(), "", IndexFileNames.COMPOUND_FILE_STORE_EXTENSION),
-              context, false);
-          storeDir = storeCFSReader;
-          assert storeDir != null;
-        } else {
-          storeCFSReader = null;
-          storeDir = dir;
-          assert storeDir != null;
-        }
-      } else if (si.getUseCompoundFile()) {
-        storeDir = cfsReader;
-        storeCFSReader = null;
-        assert storeDir != null;
-      } else {
-        storeDir = dir;
-        storeCFSReader = null;
-        assert storeDir != null;
-      }
-      
-      fieldsReaderOrig = si.getCodec().storedFieldsFormat().fieldsReader(storeDir, si, fieldInfos, context);
+  
+      fieldsReaderOrig = si.getCodec().storedFieldsFormat().fieldsReader(cfsDir, si, fieldInfos, context);
  
       if (si.getHasVectors()) { // open term vector files only as needed
-        termVectorsReaderOrig = si.getCodec().termVectorsFormat().vectorsReader(storeDir, si, fieldInfos, context);
+        termVectorsReaderOrig = si.getCodec().termVectorsFormat().vectorsReader(cfsDir, si, fieldInfos, context);
       } else {
         termVectorsReaderOrig = null;
       }
@@ -175,7 +143,7 @@
     //System.out.println("core.decRef seg=" + owner.getSegmentInfo() + " rc=" + ref);
     if (ref.decrementAndGet() == 0) {
       IOUtils.close(termVectorsLocal, fieldsReaderLocal, fields, perDocProducer,
-        termVectorsReaderOrig, fieldsReaderOrig, cfsReader, storeCFSReader, norms);
+        termVectorsReaderOrig, fieldsReaderOrig, cfsReader, norms);
       notifyCoreClosedListeners();
     }
   }


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/index/SegmentInfo.java lucene-3728/lucene/src/java/org/apache/lucene/index/SegmentInfo.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/index/SegmentInfo.java	2012-01-29 06:24:21.464735186 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/index/SegmentInfo.java	2012-01-30 12:05:09.092486651 -0500
@@ -33,7 +33,6 @@
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.IOContext;
 import org.apache.lucene.util.Constants;
-import org.apache.lucene.util.StringHelper;
 
 /**
  * Information about a segment such as it's name, directory, and files related
@@ -74,8 +73,7 @@
   private volatile List<String> files;                     // cached list of files that this segment uses
                                                   // in the Directory
 
-  private volatile long sizeInBytesNoStore = -1;           // total byte size of all but the store files (computed on demand)
-  private volatile long sizeInBytesWithStore = -1;         // total byte size of all of our files (computed on demand)
+  private volatile long sizeInBytes = -1;           // total byte size of all files (computed on demand)
 
   //TODO: LUCENE-2555: remove once we don't need to support shared doc stores (pre 4.0)
   private int docStoreOffset;                     // if this segment shares stored fields & vectors, this
@@ -213,63 +211,12 @@
    * Returns total size in bytes of all of files used by this segment
    */
   public long sizeInBytes() throws IOException {
-    return sizeInBytes(true);
-  }
-  
-  /**
-   * Returns total size in bytes of all of files used by this segment (if
-   * {@code includeDocStores} is true), or the size of all files except the
-   * store files otherwise.
-   * <p>
-   * NOTE: includeDocStores=false should only be used for debugging.
-   * Theoretically a codec could combine its files however it wants (after-
-   * the-fact or something), and this calculation is not particularly
-   * efficient.
-   */
-  long sizeInBytes(boolean includeDocStores) throws IOException {
-    // TODO: based on how this is used, can't we just forget about all this docstore crap?
-    // its really an abstraction violation into the codec
-    if (includeDocStores) {
-      if (sizeInBytesWithStore != -1) {
-        return sizeInBytesWithStore;
-      }
       long sum = 0;
       for (final String fileName : files()) {
-        // We don't count bytes used by a shared doc store
-        // against this segment
-        if (docStoreOffset == -1 || !isDocStoreFile(fileName)) {
-          sum += dir.fileLength(fileName);
-        }
-      }
-      sizeInBytesWithStore = sum;
-      return sizeInBytesWithStore;
-    } else {
-      if (sizeInBytesNoStore != -1) {
-        return sizeInBytesNoStore;
-      }
-      long sum = 0;
-      for (final String fileName : files()) {
-        if (isDocStoreFile(fileName)) {
-          continue;
-        }
         sum += dir.fileLength(fileName);
       }
-      sizeInBytesNoStore = sum;
-      return sizeInBytesNoStore;
-    }
-  }
-  
-  Set<String> codecDocStoreFiles() throws IOException {
-    Set<String> docStoreFiles = new HashSet<String>();
-    codec.storedFieldsFormat().files(dir, this, docStoreFiles);
-    codec.termVectorsFormat().files(dir, this, docStoreFiles);
-    return docStoreFiles;
-  }
-
-  // TODO: a little messy, but sizeInBytes above that uses this is the real problem.
-  private boolean isDocStoreFile(String fileName) throws IOException {
-    Set<String> docStoreFiles = codecDocStoreFiles();
-    return fileName.endsWith(IndexFileNames.COMPOUND_FILE_STORE_EXTENSION) || docStoreFiles.contains(fileName);
+      sizeInBytes = sum;
+      return sizeInBytes;
   }
 
   public boolean getHasVectors() throws IOException {
@@ -473,30 +420,7 @@
     }
     final Set<String> fileSet = new HashSet<String>();
 
-    boolean useCompoundFile = getUseCompoundFile();
-
-    if (useCompoundFile) {
-      fileSet.add(IndexFileNames.segmentFileName(name, "", IndexFileNames.COMPOUND_FILE_EXTENSION));
-      if (version != null && StringHelper.getVersionComparator().compare("4.0", version) <= 0) {
-        fileSet.add(IndexFileNames.segmentFileName(name, "",
-            IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));
-      }
-    } else {
-      codec.files(dir, this, fileSet);
-    }
-    
-    // regardless of compound file setting: these files are always in the directory
-    codec.separateFiles(dir, this, fileSet);
-
-    if (docStoreOffset != -1) {
-      // We are sharing doc stores (stored fields, term
-      // vectors) with other segments
-      assert docStoreSegment != null;
-      // TODO: push this out into preflex fieldsFormat?
-      if (docStoreIsCompoundFile) {
-        fileSet.add(IndexFileNames.segmentFileName(docStoreSegment, "", IndexFileNames.COMPOUND_FILE_STORE_EXTENSION));
-      }
-    }
+    codec.files(this, fileSet);
 
     files = new ArrayList<String>(fileSet);
 
@@ -507,8 +431,7 @@
    * files this segment has. */
   private void clearFilesCache() {
     files = null;
-    sizeInBytesNoStore = -1;
-    sizeInBytesWithStore = -1;
+    sizeInBytes = -1;
   }
 
   /** {@inheritDoc} */


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/java/org/apache/lucene/index/SegmentReader.java lucene-3728/lucene/src/java/org/apache/lucene/index/SegmentReader.java
--- lucene-clean-trunk/lucene/src/java/org/apache/lucene/index/SegmentReader.java	2012-01-29 06:24:21.748735186 -0500
+++ lucene-3728/lucene/src/java/org/apache/lucene/index/SegmentReader.java	2012-01-30 11:34:23.536490944 -0500
@@ -183,7 +183,7 @@
   public String toString() {
     // SegmentInfo.toString takes dir and number of
     // *pending* deletions; so we reverse compute that here:
-    return si.toString(core.dir, si.docCount - numDocs - si.getDelCount());
+    return si.toString(si.dir, si.docCount - numDocs - si.getDelCount());
   }
   
   @Override
@@ -196,7 +196,7 @@
    * Return the name of the segment this reader is reading.
    */
   public String getSegmentName() {
-    return core.segment;
+    return si.name;
   }
   
   /**
@@ -212,7 +212,7 @@
     // Don't ensureOpen here -- in certain cases, when a
     // cloned/reopened reader needs to commit, it may call
     // this method on the closed original reader
-    return core.dir;
+    return si.dir;
   }
 
   // This is necessary so that cloned SegmentReaders (which


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/test/org/apache/lucene/index/TestIndexWriter.java lucene-3728/lucene/src/test/org/apache/lucene/index/TestIndexWriter.java
--- lucene-clean-trunk/lucene/src/test/org/apache/lucene/index/TestIndexWriter.java	2012-01-17 10:21:11.128454445 -0500
+++ lucene-3728/lucene/src/test/org/apache/lucene/index/TestIndexWriter.java	2012-01-29 08:53:25.104714383 -0500
@@ -1548,7 +1548,7 @@
       SegmentInfo s = ((SegmentReader) r).getSegmentInfo();
       assertFalse(s.getHasVectors());
       Set<String> files = new HashSet<String>();
-      s.getCodec().termVectorsFormat().files(dir, s, files);
+      s.getCodec().termVectorsFormat().files(s, files);
       assertTrue(files.isEmpty());
     }
     


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/test/org/apache/lucene/index/TestSegmentInfo.java lucene-3728/lucene/src/test/org/apache/lucene/index/TestSegmentInfo.java
--- lucene-clean-trunk/lucene/src/test/org/apache/lucene/index/TestSegmentInfo.java	2012-01-12 13:57:22.277157288 -0500
+++ lucene-3728/lucene/src/test/org/apache/lucene/index/TestSegmentInfo.java	1969-12-31 19:00:00.000000000 -0500
@@ -1,47 +0,0 @@
-package org.apache.lucene.index;
-
-import org.apache.lucene.analysis.MockAnalyzer;
-import org.apache.lucene.document.Document;
-import org.apache.lucene.document.Field;
-import org.apache.lucene.document.TextField;
-import org.apache.lucene.store.Directory;
-import org.apache.lucene.util.LuceneTestCase;
-
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-public class TestSegmentInfo extends LuceneTestCase {
-
-  public void testSizeInBytesCache() throws Exception {
-    Directory dir = newDirectory();
-    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy());
-    IndexWriter writer = new IndexWriter(dir, conf);
-    Document doc = new Document();
-    doc.add(new Field("a", "value", TextField.TYPE_STORED));
-    writer.addDocument(doc);
-    writer.close();
-    
-    SegmentInfos sis = new SegmentInfos();
-    sis.read(dir);
-    SegmentInfo si = sis.info(0);
-    long sizeInBytesNoStore = si.sizeInBytes(false);
-    long sizeInBytesWithStore = si.sizeInBytes(true);
-    assertTrue("sizeInBytesNoStore=" + sizeInBytesNoStore + " sizeInBytesWithStore=" + sizeInBytesWithStore, sizeInBytesWithStore > sizeInBytesNoStore);
-    dir.close();
-  }
-  
-}


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/test/org/apache/lucene/index/TestSegmentMerger.java lucene-3728/lucene/src/test/org/apache/lucene/index/TestSegmentMerger.java
--- lucene-clean-trunk/lucene/src/test/org/apache/lucene/index/TestSegmentMerger.java	2012-01-12 13:57:22.265157286 -0500
+++ lucene-3728/lucene/src/test/org/apache/lucene/index/TestSegmentMerger.java	2012-01-30 12:31:55.796482914 -0500
@@ -135,34 +135,4 @@
     TestSegmentReader.checkNorms(mergedReader);
     mergedReader.close();
   }
-  
-  // LUCENE-3143
-  public void testInvalidFilesToCreateCompound() throws Exception {
-    Directory dir = newDirectory();
-    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));
-    IndexWriter w = new IndexWriter(dir, iwc);
-    
-    // Create an index w/ .del file
-    w.addDocument(new Document());
-    Document doc = new Document();
-    doc.add(new TextField("c", "test"));
-    w.addDocument(doc);
-    w.commit();
-    w.deleteDocuments(new Term("c", "test"));
-    w.close();
-    
-    // Assert that SM fails if .del exists
-    SegmentMerger sm = new SegmentMerger(InfoStream.getDefault(), dir, 1, "a", MergeState.CheckAbort.NONE, null, null, Codec.getDefault(), newIOContext(random));
-    boolean doFail = false;
-    try {
-      IndexWriter.createCompoundFile(dir, "b1", MergeState.CheckAbort.NONE, w.segmentInfos.info(0), newIOContext(random));
-      doFail = true; // should never get here
-    } catch (AssertionError e) {
-      // expected
-    }
-    assertFalse("should not have been able to create a .cfs with .del and .s* files", doFail);
-    
-    dir.close();
-  }
-
 }


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/test/org/apache/lucene/index/TestTermVectorsReader.java lucene-3728/lucene/src/test/org/apache/lucene/index/TestTermVectorsReader.java
--- lucene-clean-trunk/lucene/src/test/org/apache/lucene/index/TestTermVectorsReader.java	2012-01-15 22:00:26.014175849 -0500
+++ lucene-3728/lucene/src/test/org/apache/lucene/index/TestTermVectorsReader.java	2012-01-29 08:53:46.372714333 -0500
@@ -189,7 +189,7 @@
       SegmentInfo s = ((SegmentReader) r).getSegmentInfo();
       assertTrue(s.getHasVectors());
       Set<String> files = new HashSet<String>();
-      s.getCodec().termVectorsFormat().files(dir, s, files);
+      s.getCodec().termVectorsFormat().files(s, files);
       assertFalse(files.isEmpty());
       for (String file : files) {
         assertTrue(dir.fileExists(file));


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/test-framework/java/org/apache/lucene/codecs/lucene40ords/Lucene40WithOrds.java lucene-3728/lucene/src/test-framework/java/org/apache/lucene/codecs/lucene40ords/Lucene40WithOrds.java
--- lucene-clean-trunk/lucene/src/test-framework/java/org/apache/lucene/codecs/lucene40ords/Lucene40WithOrds.java	2012-01-12 13:57:23.349157306 -0500
+++ lucene-3728/lucene/src/test-framework/java/org/apache/lucene/codecs/lucene40ords/Lucene40WithOrds.java	2012-01-29 09:03:37.844712957 -0500
@@ -36,7 +36,6 @@
 import org.apache.lucene.index.SegmentInfo;
 import org.apache.lucene.index.SegmentReadState;
 import org.apache.lucene.index.SegmentWriteState;
-import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.BytesRef;
 
 // TODO: we could make separate base class that can wrapp
@@ -137,9 +136,9 @@
   static final String PROX_EXTENSION = "prx";
 
   @Override
-  public void files(Directory dir, SegmentInfo segmentInfo, String segmentSuffix, Set<String> files) throws IOException {
-    Lucene40PostingsReader.files(dir, segmentInfo, segmentSuffix, files);
-    BlockTermsReader.files(dir, segmentInfo, segmentSuffix, files);
-    FixedGapTermsIndexReader.files(dir, segmentInfo, segmentSuffix, files);
+  public void files(SegmentInfo segmentInfo, String segmentSuffix, Set<String> files) throws IOException {
+    Lucene40PostingsReader.files(segmentInfo, segmentSuffix, files);
+    BlockTermsReader.files(segmentInfo, segmentSuffix, files);
+    FixedGapTermsIndexReader.files(segmentInfo, segmentSuffix, files);
   }
 }


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/test-framework/java/org/apache/lucene/codecs/mockintblock/MockFixedIntBlockPostingsFormat.java lucene-3728/lucene/src/test-framework/java/org/apache/lucene/codecs/mockintblock/MockFixedIntBlockPostingsFormat.java
--- lucene-clean-trunk/lucene/src/test-framework/java/org/apache/lucene/codecs/mockintblock/MockFixedIntBlockPostingsFormat.java	2012-01-12 13:57:23.345157306 -0500
+++ lucene-3728/lucene/src/test-framework/java/org/apache/lucene/codecs/mockintblock/MockFixedIntBlockPostingsFormat.java	2012-01-29 08:48:23.132715085 -0500
@@ -202,9 +202,9 @@
   }
 
   @Override
-  public void files(Directory dir, SegmentInfo segmentInfo, String segmentSuffix, Set<String> files) throws IOException {
+  public void files(SegmentInfo segmentInfo, String segmentSuffix, Set<String> files) throws IOException {
     SepPostingsReader.files(segmentInfo, segmentSuffix, files);
-    BlockTermsReader.files(dir, segmentInfo, segmentSuffix, files);
-    FixedGapTermsIndexReader.files(dir, segmentInfo, segmentSuffix, files);
+    BlockTermsReader.files(segmentInfo, segmentSuffix, files);
+    FixedGapTermsIndexReader.files(segmentInfo, segmentSuffix, files);
   }
 }


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/test-framework/java/org/apache/lucene/codecs/mockintblock/MockVariableIntBlockPostingsFormat.java lucene-3728/lucene/src/test-framework/java/org/apache/lucene/codecs/mockintblock/MockVariableIntBlockPostingsFormat.java
--- lucene-clean-trunk/lucene/src/test-framework/java/org/apache/lucene/codecs/mockintblock/MockVariableIntBlockPostingsFormat.java	2012-01-12 13:57:23.345157306 -0500
+++ lucene-3728/lucene/src/test-framework/java/org/apache/lucene/codecs/mockintblock/MockVariableIntBlockPostingsFormat.java	2012-01-29 08:48:36.456715054 -0500
@@ -225,9 +225,9 @@
   }
 
   @Override
-  public void files(Directory dir, SegmentInfo segmentInfo, String segmentSuffix, Set<String> files) throws IOException {
+  public void files(SegmentInfo segmentInfo, String segmentSuffix, Set<String> files) throws IOException {
     SepPostingsReader.files(segmentInfo, segmentSuffix, files);
-    BlockTermsReader.files(dir, segmentInfo, segmentSuffix, files);
-    FixedGapTermsIndexReader.files(dir, segmentInfo, segmentSuffix, files);
+    BlockTermsReader.files(segmentInfo, segmentSuffix, files);
+    FixedGapTermsIndexReader.files(segmentInfo, segmentSuffix, files);
   }
 }


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/test-framework/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat.java lucene-3728/lucene/src/test-framework/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat.java
--- lucene-clean-trunk/lucene/src/test-framework/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat.java	2012-01-12 13:57:23.349157306 -0500
+++ lucene-3728/lucene/src/test-framework/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat.java	2012-01-29 08:49:05.976714985 -0500
@@ -413,20 +413,20 @@
   }
 
   @Override
-  public void files(Directory dir, SegmentInfo segmentInfo, String segmentSuffix, Set<String> files) throws IOException {
+  public void files(SegmentInfo segmentInfo, String segmentSuffix, Set<String> files) throws IOException {
     final String seedFileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, SEED_EXT);    
     files.add(seedFileName);
     SepPostingsReader.files(segmentInfo, segmentSuffix, files);
-    Lucene40PostingsReader.files(dir, segmentInfo, segmentSuffix, files);
-    BlockTermsReader.files(dir, segmentInfo, segmentSuffix, files);
-    BlockTreeTermsReader.files(dir, segmentInfo, segmentSuffix, files);
-    FixedGapTermsIndexReader.files(dir, segmentInfo, segmentSuffix, files);
-    VariableGapTermsIndexReader.files(dir, segmentInfo, segmentSuffix, files);
+    Lucene40PostingsReader.files(segmentInfo, segmentSuffix, files);
+    BlockTermsReader.files(segmentInfo, segmentSuffix, files);
+    BlockTreeTermsReader.files(segmentInfo, segmentSuffix, files);
+    FixedGapTermsIndexReader.files(segmentInfo, segmentSuffix, files);
+    VariableGapTermsIndexReader.files(segmentInfo, segmentSuffix, files);
     // hackish!
     Iterator<String> it = files.iterator();
     while(it.hasNext()) {
       final String file = it.next();
-      if (!dir.fileExists(file)) {
+      if (!segmentInfo.dir.fileExists(file)) {
         it.remove();
       }
     }


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/test-framework/java/org/apache/lucene/codecs/mocksep/MockSepDocValuesFormat.java lucene-3728/lucene/src/test-framework/java/org/apache/lucene/codecs/mocksep/MockSepDocValuesFormat.java
--- lucene-clean-trunk/lucene/src/test-framework/java/org/apache/lucene/codecs/mocksep/MockSepDocValuesFormat.java	2012-01-12 13:57:23.345157306 -0500
+++ lucene-3728/lucene/src/test-framework/java/org/apache/lucene/codecs/mocksep/MockSepDocValuesFormat.java	2012-01-29 09:03:20.756712997 -0500
@@ -28,7 +28,6 @@
 import org.apache.lucene.index.PerDocWriteState;
 import org.apache.lucene.index.SegmentInfo;
 import org.apache.lucene.index.SegmentReadState;
-import org.apache.lucene.store.Directory;
 
 /**
  * Separate-file docvalues implementation
@@ -48,7 +47,7 @@
   }
 
   @Override
-  public void files(Directory dir, SegmentInfo info, Set<String> files) throws IOException {
-    SepDocValuesConsumer.files(dir, info, files);
+  public void files(SegmentInfo info, Set<String> files) throws IOException {
+    SepDocValuesConsumer.files(info, files);
   }
 }


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/test-framework/java/org/apache/lucene/codecs/mocksep/MockSepPostingsFormat.java lucene-3728/lucene/src/test-framework/java/org/apache/lucene/codecs/mocksep/MockSepPostingsFormat.java
--- lucene-clean-trunk/lucene/src/test-framework/java/org/apache/lucene/codecs/mocksep/MockSepPostingsFormat.java	2012-01-12 13:57:23.345157306 -0500
+++ lucene-3728/lucene/src/test-framework/java/org/apache/lucene/codecs/mocksep/MockSepPostingsFormat.java	2012-01-29 09:03:26.820712983 -0500
@@ -37,7 +37,6 @@
 import org.apache.lucene.index.SegmentInfo;
 import org.apache.lucene.index.SegmentWriteState;
 import org.apache.lucene.index.SegmentReadState;
-import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.BytesRef;
 
 /**
@@ -130,9 +129,9 @@
   }
 
   @Override
-  public void files(Directory dir, SegmentInfo segmentInfo, String segmentSuffix, Set<String> files) throws IOException {
+  public void files(SegmentInfo segmentInfo, String segmentSuffix, Set<String> files) throws IOException {
     SepPostingsReader.files(segmentInfo, segmentSuffix, files);
-    BlockTermsReader.files(dir, segmentInfo, segmentSuffix, files);
-    FixedGapTermsIndexReader.files(dir, segmentInfo, segmentSuffix, files);
+    BlockTermsReader.files(segmentInfo, segmentSuffix, files);
+    FixedGapTermsIndexReader.files(segmentInfo, segmentSuffix, files);
   }
 }


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/test-framework/java/org/apache/lucene/codecs/nestedpulsing/NestedPulsingPostingsFormat.java lucene-3728/lucene/src/test-framework/java/org/apache/lucene/codecs/nestedpulsing/NestedPulsingPostingsFormat.java
--- lucene-clean-trunk/lucene/src/test-framework/java/org/apache/lucene/codecs/nestedpulsing/NestedPulsingPostingsFormat.java	2012-01-12 13:57:23.349157306 -0500
+++ lucene-3728/lucene/src/test-framework/java/org/apache/lucene/codecs/nestedpulsing/NestedPulsingPostingsFormat.java	2012-01-29 08:52:16.196714543 -0500
@@ -34,7 +34,6 @@
 import org.apache.lucene.index.SegmentInfo;
 import org.apache.lucene.index.SegmentReadState;
 import org.apache.lucene.index.SegmentWriteState;
-import org.apache.lucene.store.Directory;
 
 /**
  * Pulsing(1, Pulsing(2, Lucene40))
@@ -92,8 +91,8 @@
   }
 
   @Override
-  public void files(Directory dir, SegmentInfo segmentInfo, String segmentSuffix, Set<String> files) throws IOException {
-    Lucene40PostingsReader.files(dir, segmentInfo, segmentSuffix, files);
-    BlockTreeTermsReader.files(dir, segmentInfo, segmentSuffix, files);
+  public void files(SegmentInfo segmentInfo, String segmentSuffix, Set<String> files) throws IOException {
+    Lucene40PostingsReader.files(segmentInfo, segmentSuffix, files);
+    BlockTreeTermsReader.files(segmentInfo, segmentSuffix, files);
   }
 }


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWCodec.java lucene-3728/lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWCodec.java
--- lucene-clean-trunk/lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWCodec.java	2012-01-29 06:24:27.588735172 -0500
+++ lucene-3728/lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWCodec.java	2012-01-30 12:17:06.820484980 -0500
@@ -17,17 +17,23 @@
  * limitations under the License.
  */
 
+import java.io.IOException;
+import java.util.Set;
+
 import org.apache.lucene.codecs.FieldInfosFormat;
 import org.apache.lucene.codecs.LiveDocsFormat;
-import org.apache.lucene.codecs.NormsFormat;
 import org.apache.lucene.codecs.PostingsFormat;
 import org.apache.lucene.codecs.SegmentInfosFormat;
 import org.apache.lucene.codecs.StoredFieldsFormat;
 import org.apache.lucene.codecs.TermVectorsFormat;
 import org.apache.lucene.codecs.lucene3x.Lucene3xCodec;
+import org.apache.lucene.codecs.lucene3x.Lucene3xNormsFormat;
 import org.apache.lucene.codecs.lucene40.Lucene40LiveDocsFormat;
 import org.apache.lucene.codecs.lucene40.Lucene40StoredFieldsFormat;
+import org.apache.lucene.index.IndexFileNames;
+import org.apache.lucene.index.SegmentInfo;
 import org.apache.lucene.util.LuceneTestCase;
+import org.apache.lucene.util.StringHelper;
 
 /**
  * Writes 3.x-like indexes (not perfect emulation yet) for testing only!
@@ -35,14 +41,13 @@
  */
 public class PreFlexRWCodec extends Lucene3xCodec {
   private final PostingsFormat postings = new PreFlexRWPostingsFormat();
-  private final NormsFormat norms = new PreFlexRWNormsFormat();
+  private final Lucene3xNormsFormat norms = new PreFlexRWNormsFormat();
   private final FieldInfosFormat fieldInfos = new PreFlexRWFieldInfosFormat();
   private final TermVectorsFormat termVectors = new PreFlexRWTermVectorsFormat();
   private final SegmentInfosFormat segmentInfos = new PreFlexRWSegmentInfosFormat();
+  private final StoredFieldsFormat storedFields = new PreFlexRWStoredFieldsFormat();
   // TODO: this should really be a different impl
   private final LiveDocsFormat liveDocs = new Lucene40LiveDocsFormat();
-  // TODO: this should really be a different impl
-  private final StoredFieldsFormat storedFields = new Lucene40StoredFieldsFormat();
   
   @Override
   public PostingsFormat postingsFormat() {
@@ -54,7 +59,7 @@
   }
 
   @Override
-  public NormsFormat normsFormat() {
+  public Lucene3xNormsFormat normsFormat() {
     if (LuceneTestCase.PREFLEX_IMPERSONATION_IS_ACTIVE) {
       return norms;
     } else {
@@ -106,4 +111,19 @@
       return super.storedFieldsFormat();
     }
   }
+
+  @Override
+  public void files(SegmentInfo info, Set<String> files) throws IOException {
+    if (info.getUseCompoundFile() && LuceneTestCase.PREFLEX_IMPERSONATION_IS_ACTIVE) {
+      // because we don't fully emulate 3.x codec, PreFlexRW actually writes 4.x format CFS files.
+      // so we must check segment version here to see if its a "real" 3.x segment or a "fake"
+      // one that we wrote with a 4.x-format CFS+CFE, in this case we must add the .CFE
+      String version = info.getVersion();
+      if (version != null && StringHelper.getVersionComparator().compare("4.0", version) <= 0) {
+        files.add(IndexFileNames.segmentFileName(info.name, "", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));
+      }
+    }
+    
+    super.files(info, files);
+  }
 }


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWStoredFieldsFormat.java lucene-3728/lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWStoredFieldsFormat.java
--- lucene-clean-trunk/lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWStoredFieldsFormat.java	1969-12-31 19:00:00.000000000 -0500
+++ lucene-3728/lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWStoredFieldsFormat.java	2012-01-30 09:55:45.328504710 -0500
@@ -0,0 +1,17 @@
+package org.apache.lucene.codecs.preflexrw;
+
+import java.io.IOException;
+
+import org.apache.lucene.codecs.StoredFieldsWriter;
+import org.apache.lucene.codecs.lucene3x.Lucene3xStoredFieldsFormat;
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.store.IOContext;
+
+public class PreFlexRWStoredFieldsFormat extends Lucene3xStoredFieldsFormat {
+
+  @Override
+  public StoredFieldsWriter fieldsWriter(Directory directory, String segment, IOContext context) throws IOException {
+    return new PreFlexRWStoredFieldsWriter(directory, segment, context);
+  }
+  
+}


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWStoredFieldsWriter.java lucene-3728/lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWStoredFieldsWriter.java
--- lucene-clean-trunk/lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWStoredFieldsWriter.java	1969-12-31 19:00:00.000000000 -0500
+++ lucene-3728/lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWStoredFieldsWriter.java	2012-01-30 09:49:57.420505519 -0500
@@ -0,0 +1,156 @@
+package org.apache.lucene.codecs.preflexrw;
+
+/**
+ * Copyright 2004 The Apache Software Foundation
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+import java.io.IOException;
+
+import org.apache.lucene.codecs.StoredFieldsWriter;
+import org.apache.lucene.codecs.lucene3x.Lucene3xStoredFieldsReader;
+import org.apache.lucene.index.FieldInfo;
+import org.apache.lucene.index.IndexFileNames;
+import org.apache.lucene.index.IndexableField;
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.store.IOContext;
+import org.apache.lucene.store.IndexOutput;
+import org.apache.lucene.util.BytesRef;
+import org.apache.lucene.util.IOUtils;
+
+/** @lucene.experimental */
+public final class PreFlexRWStoredFieldsWriter extends StoredFieldsWriter {
+  private final Directory directory;
+  private final String segment;
+  private IndexOutput fieldsStream;
+  private IndexOutput indexStream;
+
+  public PreFlexRWStoredFieldsWriter(Directory directory, String segment, IOContext context) throws IOException {
+    assert directory != null;
+    this.directory = directory;
+    this.segment = segment;
+
+    boolean success = false;
+    try {
+      fieldsStream = directory.createOutput(IndexFileNames.segmentFileName(segment, "", Lucene3xStoredFieldsReader.FIELDS_EXTENSION), context);
+      indexStream = directory.createOutput(IndexFileNames.segmentFileName(segment, "", Lucene3xStoredFieldsReader.FIELDS_INDEX_EXTENSION), context);
+
+      fieldsStream.writeInt(Lucene3xStoredFieldsReader.FORMAT_CURRENT);
+      indexStream.writeInt(Lucene3xStoredFieldsReader.FORMAT_CURRENT);
+
+      success = true;
+    } finally {
+      if (!success) {
+        abort();
+      }
+    }
+  }
+
+  // Writes the contents of buffer into the fields stream
+  // and adds a new entry for this document into the index
+  // stream.  This assumes the buffer was already written
+  // in the correct fields format.
+  public void startDocument(int numStoredFields) throws IOException {
+    indexStream.writeLong(fieldsStream.getFilePointer());
+    fieldsStream.writeVInt(numStoredFields);
+  }
+
+  public void close() throws IOException {
+    try {
+      IOUtils.close(fieldsStream, indexStream);
+    } finally {
+      fieldsStream = indexStream = null;
+    }
+  }
+
+  public void abort() {
+    try {
+      close();
+    } catch (IOException ignored) {}
+    IOUtils.deleteFilesIgnoringExceptions(directory,
+        IndexFileNames.segmentFileName(segment, "", Lucene3xStoredFieldsReader.FIELDS_EXTENSION),
+        IndexFileNames.segmentFileName(segment, "", Lucene3xStoredFieldsReader.FIELDS_INDEX_EXTENSION));
+  }
+
+  public void writeField(FieldInfo info, IndexableField field) throws IOException {
+    fieldsStream.writeVInt(info.number);
+    int bits = 0;
+    final BytesRef bytes;
+    final String string;
+    // TODO: maybe a field should serialize itself?
+    // this way we don't bake into indexer all these
+    // specific encodings for different fields?  and apps
+    // can customize...
+
+    Number number = field.numericValue();
+    if (number != null) {
+      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {
+        bits |= Lucene3xStoredFieldsReader.FIELD_IS_NUMERIC_INT;
+      } else if (number instanceof Long) {
+        bits |= Lucene3xStoredFieldsReader.FIELD_IS_NUMERIC_LONG;
+      } else if (number instanceof Float) {
+        bits |= Lucene3xStoredFieldsReader.FIELD_IS_NUMERIC_FLOAT;
+      } else if (number instanceof Double) {
+        bits |= Lucene3xStoredFieldsReader.FIELD_IS_NUMERIC_DOUBLE;
+      } else {
+        throw new IllegalArgumentException("cannot store numeric type " + number.getClass());
+      }
+      string = null;
+      bytes = null;
+    } else {
+      bytes = field.binaryValue();
+      if (bytes != null) {
+        bits |= Lucene3xStoredFieldsReader.FIELD_IS_BINARY;
+        string = null;
+      } else {
+        string = field.stringValue();
+        if (string == null) {
+          throw new IllegalArgumentException("field " + field.name() + " is stored but does not have binaryValue, stringValue nor numericValue");
+        }
+      }
+    }
+
+    fieldsStream.writeByte((byte) bits);
+
+    if (bytes != null) {
+      fieldsStream.writeVInt(bytes.length);
+      fieldsStream.writeBytes(bytes.bytes, bytes.offset, bytes.length);
+    } else if (string != null) {
+      fieldsStream.writeString(field.stringValue());
+    } else {
+      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {
+        fieldsStream.writeInt(number.intValue());
+      } else if (number instanceof Long) {
+        fieldsStream.writeLong(number.longValue());
+      } else if (number instanceof Float) {
+        fieldsStream.writeInt(Float.floatToIntBits(number.floatValue()));
+      } else if (number instanceof Double) {
+        fieldsStream.writeLong(Double.doubleToLongBits(number.doubleValue()));
+      } else {
+        assert false;
+      }
+    }
+  }
+
+  @Override
+  public void finish(int numDocs) throws IOException {
+    if (4+((long) numDocs)*8 != indexStream.getFilePointer())
+      // This is most likely a bug in Sun JRE 1.6.0_04/_05;
+      // we detect that the bug has struck, here, and
+      // throw an exception to prevent the corruption from
+      // entering the index.  See LUCENE-1282 for
+      // details.
+      throw new RuntimeException("fdx size mismatch: docCount is " + numDocs + " but fdx file size is " + indexStream.getFilePointer() + " file=" + indexStream.toString() + "; now aborting this merge to prevent index corruption");
+  }
+}


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWTermVectorsWriter.java lucene-3728/lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWTermVectorsWriter.java
--- lucene-clean-trunk/lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWTermVectorsWriter.java	2012-01-18 10:59:05.993998669 -0500
+++ lucene-3728/lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWTermVectorsWriter.java	2012-01-30 09:36:22.420507415 -0500
@@ -202,7 +202,7 @@
       // throw an exception to prevent the corruption from
       // entering the index.  See LUCENE-1282 for
       // details.
-      throw new RuntimeException("mergeVectors produced an invalid result: mergedDocs is " + numDocs + " but tvx size is " + tvx.getFilePointer() + " file=" + tvx.toString() + "; now aborting this merge to prevent index corruption");
+      throw new RuntimeException("tvx size mismatch: mergedDocs is " + numDocs + " but tvx size is " + tvx.getFilePointer() + " file=" + tvx.toString() + "; now aborting this merge to prevent index corruption");
   }
 
   /** Close all streams. */


diff -ruN -x .svn -x build lucene-clean-trunk/lucene/src/test-framework/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat.java lucene-3728/lucene/src/test-framework/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat.java
--- lucene-clean-trunk/lucene/src/test-framework/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat.java	2012-01-15 22:00:26.102175850 -0500
+++ lucene-3728/lucene/src/test-framework/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat.java	2012-01-29 08:53:00.916714439 -0500
@@ -46,7 +46,6 @@
 import org.apache.lucene.index.SegmentWriteState;
 import org.apache.lucene.index.Terms;
 import org.apache.lucene.index.TermsEnum;
-import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.IndexInput;
 import org.apache.lucene.store.IndexOutput;
 import org.apache.lucene.util.Bits;
@@ -592,7 +591,7 @@
   }
 
   @Override
-  public void files(Directory dir, SegmentInfo segmentInfo, String segmentSuffix, Set<String> files) {
+  public void files(SegmentInfo segmentInfo, String segmentSuffix, Set<String> files) {
     final String idFileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, ID_EXTENSION);
     files.add(idFileName);
   }


diff -ruN -x .svn -x build lucene-clean-trunk/solr/core/src/java/org/apache/solr/core/RequestHandlers.java lucene-3728/solr/core/src/java/org/apache/solr/core/RequestHandlers.java
--- lucene-clean-trunk/solr/core/src/java/org/apache/solr/core/RequestHandlers.java	2012-01-29 06:22:46.300735407 -0500
+++ lucene-3728/solr/core/src/java/org/apache/solr/core/RequestHandlers.java	2012-01-29 07:23:39.064726911 -0500
@@ -293,7 +293,7 @@
     }
 
     public String getSource() {
-      String rev = "$URL: https://svn.apache.org/repos/asf/lucene/dev/trunk/solr/core/src/java/org/apache/solr/core/RequestHandlers.java $";
+      String rev = "$URL: https://svn.apache.org/repos/asf/lucene/dev/branches/lucene3661/solr/core/src/java/org/apache/solr/core/RequestHandlers.java $";
       if( _handler != null ) {
         rev += "\n" + _handler.getSource();
       }


diff -ruN -x .svn -x build lucene-clean-trunk/solr/core/src/java/org/apache/solr/core/SolrCore.java lucene-3728/solr/core/src/java/org/apache/solr/core/SolrCore.java
--- lucene-clean-trunk/solr/core/src/java/org/apache/solr/core/SolrCore.java	2012-01-29 06:22:46.904735406 -0500
+++ lucene-3728/solr/core/src/java/org/apache/solr/core/SolrCore.java	2012-01-29 07:23:39.064726911 -0500
@@ -1882,7 +1882,7 @@
   }
 
   public String getSource() {
-    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/trunk/solr/core/src/java/org/apache/solr/core/SolrCore.java $";
+    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/branches/lucene3661/solr/core/src/java/org/apache/solr/core/SolrCore.java $";
   }
 
   public URL[] getDocs() {


diff -ruN -x .svn -x build lucene-clean-trunk/solr/core/src/java/org/apache/solr/handler/admin/AdminHandlers.java lucene-3728/solr/core/src/java/org/apache/solr/handler/admin/AdminHandlers.java
--- lucene-clean-trunk/solr/core/src/java/org/apache/solr/handler/admin/AdminHandlers.java	2012-01-12 13:56:26.429156317 -0500
+++ lucene-3728/solr/core/src/java/org/apache/solr/handler/admin/AdminHandlers.java	2011-09-11 11:01:09.366123944 -0400
@@ -121,7 +121,7 @@
   }
 
   public String getSource() {
-    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/admin/AdminHandlers.java $";
+    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/branches/flexscoring/solr/core/src/java/org/apache/solr/handler/admin/AdminHandlers.java $";
   }
 
   public Category getCategory() {


diff -ruN -x .svn -x build lucene-clean-trunk/solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler.java lucene-3728/solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler.java
--- lucene-clean-trunk/solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler.java	2012-01-29 06:22:48.988735401 -0500
+++ lucene-3728/solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler.java	2012-01-29 07:23:39.072726911 -0500
@@ -789,6 +789,6 @@
 
   @Override
   public String getSource() {
-    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler.java $";
+    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/branches/lucene3661/solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler.java $";
   }
 }


diff -ruN -x .svn -x build lucene-clean-trunk/solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler.java lucene-3728/solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler.java
--- lucene-clean-trunk/solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler.java	2012-01-29 19:14:01.392627767 -0500
+++ lucene-3728/solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler.java	2012-01-30 12:56:47.908479443 -0500
@@ -578,17 +578,17 @@
 
   @Override
   public String getVersion() {
-    return "$Revision: 1237497 $";
+    return "$Revision: 1237850 $";
   }
 
   @Override
   public String getSourceId() {
-    return "$Id: LukeRequestHandler.java 1237497 2012-01-29 22:38:32Z mikemccand $";
+    return "$Id: LukeRequestHandler.java 1237850 2012-01-30 17:56:40Z rmuir $";
   }
 
   @Override
   public String getSource() {
-    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler.java $";
+    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/branches/lucene3661/solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler.java $";
   }
 
   @Override


diff -ruN -x .svn -x build lucene-clean-trunk/solr/core/src/java/org/apache/solr/handler/admin/PluginInfoHandler.java lucene-3728/solr/core/src/java/org/apache/solr/handler/admin/PluginInfoHandler.java
--- lucene-clean-trunk/solr/core/src/java/org/apache/solr/handler/admin/PluginInfoHandler.java	2012-01-12 13:56:26.429156317 -0500
+++ lucene-3728/solr/core/src/java/org/apache/solr/handler/admin/PluginInfoHandler.java	2011-09-11 11:01:09.366123944 -0400
@@ -111,6 +111,6 @@
 
   @Override
   public String getSource() {
-    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/admin/PluginInfoHandler.java $";
+    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/branches/flexscoring/solr/core/src/java/org/apache/solr/handler/admin/PluginInfoHandler.java $";
   }
 }


diff -ruN -x .svn -x build lucene-clean-trunk/solr/core/src/java/org/apache/solr/handler/admin/PropertiesRequestHandler.java lucene-3728/solr/core/src/java/org/apache/solr/handler/admin/PropertiesRequestHandler.java
--- lucene-clean-trunk/solr/core/src/java/org/apache/solr/handler/admin/PropertiesRequestHandler.java	2012-01-12 13:56:26.429156317 -0500
+++ lucene-3728/solr/core/src/java/org/apache/solr/handler/admin/PropertiesRequestHandler.java	2011-09-11 11:01:09.366123944 -0400
@@ -66,6 +66,6 @@
 
   @Override
   public String getSource() {
-    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/admin/PropertiesRequestHandler.java $";
+    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/branches/flexscoring/solr/core/src/java/org/apache/solr/handler/admin/PropertiesRequestHandler.java $";
   }
 }


diff -ruN -x .svn -x build lucene-clean-trunk/solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler.java lucene-3728/solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler.java
--- lucene-clean-trunk/solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler.java	2012-01-29 06:22:49.288735401 -0500
+++ lucene-3728/solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler.java	2012-01-29 07:23:39.072726911 -0500
@@ -324,6 +324,6 @@
 
   @Override
   public String getSource() {
-    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler.java $";
+    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/branches/lucene3661/solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler.java $";
   }
 }


diff -ruN -x .svn -x build lucene-clean-trunk/solr/core/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler.java lucene-3728/solr/core/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler.java
--- lucene-clean-trunk/solr/core/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler.java	2012-01-12 13:56:26.433156316 -0500
+++ lucene-3728/solr/core/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler.java	2011-09-11 11:01:09.366123944 -0400
@@ -107,7 +107,7 @@
 
   @Override
   public String getSource() {
-    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler.java $";
+    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/branches/flexscoring/solr/core/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler.java $";
   }
 
   @Override


diff -ruN -x .svn -x build lucene-clean-trunk/solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler.java lucene-3728/solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler.java
--- lucene-clean-trunk/solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler.java	2012-01-12 13:56:26.433156316 -0500
+++ lucene-3728/solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler.java	2011-09-11 11:01:09.366123944 -0400
@@ -292,7 +292,7 @@
 
   @Override
   public String getSource() {
-    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler.java $";
+    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/branches/flexscoring/solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler.java $";
   }
   
   private static final long ONE_KB = 1024;


diff -ruN -x .svn -x build lucene-clean-trunk/solr/core/src/java/org/apache/solr/handler/admin/ThreadDumpHandler.java lucene-3728/solr/core/src/java/org/apache/solr/handler/admin/ThreadDumpHandler.java
--- lucene-clean-trunk/solr/core/src/java/org/apache/solr/handler/admin/ThreadDumpHandler.java	2012-01-12 13:56:26.433156316 -0500
+++ lucene-3728/solr/core/src/java/org/apache/solr/handler/admin/ThreadDumpHandler.java	2011-09-11 11:01:09.366123944 -0400
@@ -144,6 +144,6 @@
 
   @Override
   public String getSource() {
-    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/admin/ThreadDumpHandler.java $";
+    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/branches/flexscoring/solr/core/src/java/org/apache/solr/handler/admin/ThreadDumpHandler.java $";
   }
 }


diff -ruN -x .svn -x build lucene-clean-trunk/solr/core/src/java/org/apache/solr/handler/BinaryUpdateRequestHandler.java lucene-3728/solr/core/src/java/org/apache/solr/handler/BinaryUpdateRequestHandler.java
--- lucene-clean-trunk/solr/core/src/java/org/apache/solr/handler/BinaryUpdateRequestHandler.java	2012-01-29 06:22:52.308735394 -0500
+++ lucene-3728/solr/core/src/java/org/apache/solr/handler/BinaryUpdateRequestHandler.java	2012-01-29 07:23:39.084726911 -0500
@@ -153,7 +153,7 @@
 
   @Override
   public String getSource() {
-    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/BinaryUpdateRequestHandler.java $";
+    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/branches/lucene3661/solr/core/src/java/org/apache/solr/handler/BinaryUpdateRequestHandler.java $";
   }
 
   @Override


diff -ruN -x .svn -x build lucene-clean-trunk/solr/core/src/java/org/apache/solr/handler/component/DebugComponent.java lucene-3728/solr/core/src/java/org/apache/solr/handler/component/DebugComponent.java
--- lucene-clean-trunk/solr/core/src/java/org/apache/solr/handler/component/DebugComponent.java	2012-01-12 13:56:26.449156315 -0500
+++ lucene-3728/solr/core/src/java/org/apache/solr/handler/component/DebugComponent.java	2011-09-11 11:01:09.366123944 -0400
@@ -260,7 +260,7 @@
 
   @Override
   public String getSource() {
-    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/component/DebugComponent.java $";
+    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/branches/flexscoring/solr/core/src/java/org/apache/solr/handler/component/DebugComponent.java $";
   }
 
   @Override


diff -ruN -x .svn -x build lucene-clean-trunk/solr/core/src/java/org/apache/solr/handler/component/FacetComponent.java lucene-3728/solr/core/src/java/org/apache/solr/handler/component/FacetComponent.java
--- lucene-clean-trunk/solr/core/src/java/org/apache/solr/handler/component/FacetComponent.java	2012-01-12 13:56:26.449156315 -0500
+++ lucene-3728/solr/core/src/java/org/apache/solr/handler/component/FacetComponent.java	2011-09-11 11:01:09.366123944 -0400
@@ -593,17 +593,17 @@
 
   @Override
   public String getVersion() {
-    return "$Revision: 1152530 $";
+    return "$Revision: 1160700 $";
   }
 
   @Override
   public String getSourceId() {
-    return "$Id: FacetComponent.java 1152530 2011-07-31 00:30:19Z koji $";
+    return "$Id: FacetComponent.java 1160700 2011-08-23 14:06:58Z rmuir $";
   }
 
   @Override
   public String getSource() {
-    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/component/FacetComponent.java $";
+    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/branches/flexscoring/solr/core/src/java/org/apache/solr/handler/component/FacetComponent.java $";
   }
 
   @Override


diff -ruN -x .svn -x build lucene-clean-trunk/solr/core/src/java/org/apache/solr/handler/component/HighlightComponent.java lucene-3728/solr/core/src/java/org/apache/solr/handler/component/HighlightComponent.java
--- lucene-clean-trunk/solr/core/src/java/org/apache/solr/handler/component/HighlightComponent.java	2012-01-12 13:56:26.453156316 -0500
+++ lucene-3728/solr/core/src/java/org/apache/solr/handler/component/HighlightComponent.java	2011-11-09 10:42:02.804271391 -0500
@@ -214,7 +214,7 @@
   
   @Override
   public String getSource() {
-    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/component/HighlightComponent.java $";
+    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/branches/lucene2621/solr/core/src/java/org/apache/solr/handler/component/HighlightComponent.java $";
   }
   
   @Override


diff -ruN -x .svn -x build lucene-clean-trunk/solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent.java lucene-3728/solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent.java
--- lucene-clean-trunk/solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent.java	2012-01-12 13:56:26.453156316 -0500
+++ lucene-3728/solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent.java	2011-09-11 11:01:09.366123944 -0400
@@ -128,7 +128,7 @@
 
   @Override
   public String getSource() {
-    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent.java $";
+    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/branches/flexscoring/solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent.java $";
   }
 
   @Override


diff -ruN -x .svn -x build lucene-clean-trunk/solr/core/src/java/org/apache/solr/handler/component/PivotFacetHelper.java lucene-3728/solr/core/src/java/org/apache/solr/handler/component/PivotFacetHelper.java
--- lucene-clean-trunk/solr/core/src/java/org/apache/solr/handler/component/PivotFacetHelper.java	2012-01-12 13:56:26.449156315 -0500
+++ lucene-3728/solr/core/src/java/org/apache/solr/handler/component/PivotFacetHelper.java	2011-09-11 11:01:09.366123944 -0400
@@ -249,7 +249,7 @@
 //  }
 //
 //  public String getSource() {
-//    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/component/PivotFacetHelper.java $";
+//    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/branches/flexscoring/solr/core/src/java/org/apache/solr/handler/component/PivotFacetHelper.java $";
 //  }
 //
 //  public String getVersion() {


diff -ruN -x .svn -x build lucene-clean-trunk/solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java lucene-3728/solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java
--- lucene-clean-trunk/solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java	2012-01-29 06:22:51.428735395 -0500
+++ lucene-3728/solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java	2012-01-29 07:23:39.080726911 -0500
@@ -1091,7 +1091,7 @@
 
   @Override
   public String getSource() {
-    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java $";
+    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/branches/lucene3661/solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java $";
   }
 
   @Override


diff -ruN -x .svn -x build lucene-clean-trunk/solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent.java lucene-3728/solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent.java
--- lucene-clean-trunk/solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent.java	2012-01-29 06:22:50.540735398 -0500
+++ lucene-3728/solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent.java	2012-01-29 07:23:39.080726911 -0500
@@ -251,7 +251,7 @@
 
   @Override
   public String getSource() {
-    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent.java $";
+    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/branches/lucene3661/solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent.java $";
   }
 
   @Override


diff -ruN -x .svn -x build lucene-clean-trunk/solr/core/src/java/org/apache/solr/handler/component/SearchHandler.java lucene-3728/solr/core/src/java/org/apache/solr/handler/component/SearchHandler.java
--- lucene-clean-trunk/solr/core/src/java/org/apache/solr/handler/component/SearchHandler.java	2012-01-29 06:22:50.248735398 -0500
+++ lucene-3728/solr/core/src/java/org/apache/solr/handler/component/SearchHandler.java	2012-01-29 07:23:39.080726911 -0500
@@ -339,7 +339,7 @@
 
   @Override
   public String getSource() {
-    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/component/SearchHandler.java $";
+    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/branches/lucene3661/solr/core/src/java/org/apache/solr/handler/component/SearchHandler.java $";
   }
 }
 


diff -ruN -x .svn -x build lucene-clean-trunk/solr/core/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler.java lucene-3728/solr/core/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler.java
--- lucene-clean-trunk/solr/core/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler.java	2012-01-12 13:56:26.457156316 -0500
+++ lucene-3728/solr/core/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler.java	2011-11-06 07:27:12.236410948 -0500
@@ -132,7 +132,7 @@
 
   @Override
   public String getSource() {
-    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler.java $";
+    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/branches/lucene2621/solr/core/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler.java $";
   }
 
 


diff -ruN -x .svn -x build lucene-clean-trunk/solr/core/src/java/org/apache/solr/handler/DumpRequestHandler.java lucene-3728/solr/core/src/java/org/apache/solr/handler/DumpRequestHandler.java
--- lucene-clean-trunk/solr/core/src/java/org/apache/solr/handler/DumpRequestHandler.java	2012-01-12 13:56:26.449156315 -0500
+++ lucene-3728/solr/core/src/java/org/apache/solr/handler/DumpRequestHandler.java	2011-09-11 11:01:09.376123944 -0400
@@ -79,6 +79,6 @@
 
   @Override
   public String getSource() {
-    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/DumpRequestHandler.java $";
+    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/branches/flexscoring/solr/core/src/java/org/apache/solr/handler/DumpRequestHandler.java $";
   }
 }


diff -ruN -x .svn -x build lucene-clean-trunk/solr/core/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler.java lucene-3728/solr/core/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler.java
--- lucene-clean-trunk/solr/core/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler.java	2012-01-12 13:56:26.461156314 -0500
+++ lucene-3728/solr/core/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler.java	2011-09-11 11:01:09.376123944 -0400
@@ -118,7 +118,7 @@
 
   @Override
   public String getSource() {
-    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler.java $";
+    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/branches/flexscoring/solr/core/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler.java $";
   }
 
   // ================================================= Helper methods ================================================


diff -ruN -x .svn -x build lucene-clean-trunk/solr/core/src/java/org/apache/solr/handler/JsonUpdateRequestHandler.java lucene-3728/solr/core/src/java/org/apache/solr/handler/JsonUpdateRequestHandler.java
--- lucene-clean-trunk/solr/core/src/java/org/apache/solr/handler/JsonUpdateRequestHandler.java	2012-01-12 13:56:26.457156316 -0500
+++ lucene-3728/solr/core/src/java/org/apache/solr/handler/JsonUpdateRequestHandler.java	2011-09-11 11:01:09.376123944 -0400
@@ -59,7 +59,7 @@
 
   @Override
   public String getSource() {
-    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/JsonUpdateRequestHandler.java $";
+    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/branches/flexscoring/solr/core/src/java/org/apache/solr/handler/JsonUpdateRequestHandler.java $";
   }
 }
 


diff -ruN -x .svn -x build lucene-clean-trunk/solr/core/src/java/org/apache/solr/handler/ReplicationHandler.java lucene-3728/solr/core/src/java/org/apache/solr/handler/ReplicationHandler.java
--- lucene-clean-trunk/solr/core/src/java/org/apache/solr/handler/ReplicationHandler.java	2012-01-29 19:14:01.392627767 -0500
+++ lucene-3728/solr/core/src/java/org/apache/solr/handler/ReplicationHandler.java	2012-01-30 12:56:47.908479443 -0500
@@ -471,17 +471,17 @@
 
   @Override
   public String getSourceId() {
-    return "$Id: ReplicationHandler.java 1237497 2012-01-29 22:38:32Z mikemccand $";
+    return "$Id: ReplicationHandler.java 1237850 2012-01-30 17:56:40Z rmuir $";
   }
 
   @Override
   public String getSource() {
-    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/ReplicationHandler.java $";
+    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/branches/lucene3661/solr/core/src/java/org/apache/solr/handler/ReplicationHandler.java $";
   }
 
   @Override
   public String getVersion() {
-    return "$Revision: 1237497 $";
+    return "$Revision: 1237850 $";
   }
 
   private long[] getIndexVersion() {


diff -ruN -x .svn -x build lucene-clean-trunk/solr/core/src/java/org/apache/solr/handler/StandardRequestHandler.java lucene-3728/solr/core/src/java/org/apache/solr/handler/StandardRequestHandler.java
--- lucene-clean-trunk/solr/core/src/java/org/apache/solr/handler/StandardRequestHandler.java	2012-01-12 13:56:26.429156317 -0500
+++ lucene-3728/solr/core/src/java/org/apache/solr/handler/StandardRequestHandler.java	2011-09-11 11:01:09.376123944 -0400
@@ -62,7 +62,7 @@
 
   @Override
   public String getSource() {
-    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/StandardRequestHandler.java $";
+    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/branches/flexscoring/solr/core/src/java/org/apache/solr/handler/StandardRequestHandler.java $";
   }
 
   @Override


diff -ruN -x .svn -x build lucene-clean-trunk/solr/core/src/java/org/apache/solr/handler/XmlUpdateRequestHandler.java lucene-3728/solr/core/src/java/org/apache/solr/handler/XmlUpdateRequestHandler.java
--- lucene-clean-trunk/solr/core/src/java/org/apache/solr/handler/XmlUpdateRequestHandler.java	2012-01-29 06:22:49.576735400 -0500
+++ lucene-3728/solr/core/src/java/org/apache/solr/handler/XmlUpdateRequestHandler.java	2012-01-29 07:23:39.080726911 -0500
@@ -99,7 +99,7 @@
 
   @Override
   public String getSource() {
-    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/trunk/solr/core/src/java/org/apache/solr/handler/XmlUpdateRequestHandler.java $";
+    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/branches/lucene3661/solr/core/src/java/org/apache/solr/handler/XmlUpdateRequestHandler.java $";
   }
 }
 


diff -ruN -x .svn -x build lucene-clean-trunk/solr/core/src/java/org/apache/solr/highlight/DefaultEncoder.java lucene-3728/solr/core/src/java/org/apache/solr/highlight/DefaultEncoder.java
--- lucene-clean-trunk/solr/core/src/java/org/apache/solr/highlight/DefaultEncoder.java	2012-01-12 13:56:26.241156312 -0500
+++ lucene-3728/solr/core/src/java/org/apache/solr/highlight/DefaultEncoder.java	2011-09-11 11:01:09.386123944 -0400
@@ -42,7 +42,7 @@
 
   @Override
   public String getSource() {
-    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/trunk/solr/core/src/java/org/apache/solr/highlight/DefaultEncoder.java $";
+    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/branches/flexscoring/solr/core/src/java/org/apache/solr/highlight/DefaultEncoder.java $";
   }
 
   @Override


diff -ruN -x .svn -x build lucene-clean-trunk/solr/core/src/java/org/apache/solr/highlight/HtmlEncoder.java lucene-3728/solr/core/src/java/org/apache/solr/highlight/HtmlEncoder.java
--- lucene-clean-trunk/solr/core/src/java/org/apache/solr/highlight/HtmlEncoder.java	2012-01-12 13:56:26.237156312 -0500
+++ lucene-3728/solr/core/src/java/org/apache/solr/highlight/HtmlEncoder.java	2011-09-11 11:01:09.386123944 -0400
@@ -42,7 +42,7 @@
 
   @Override
   public String getSource() {
-    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/trunk/solr/core/src/java/org/apache/solr/highlight/HtmlEncoder.java $";
+    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/branches/flexscoring/solr/core/src/java/org/apache/solr/highlight/HtmlEncoder.java $";
   }
 
   @Override


diff -ruN -x .svn -x build lucene-clean-trunk/solr/core/src/java/org/apache/solr/search/LRUCache.java lucene-3728/solr/core/src/java/org/apache/solr/search/LRUCache.java
--- lucene-clean-trunk/solr/core/src/java/org/apache/solr/search/LRUCache.java	2012-01-12 13:56:26.205156311 -0500
+++ lucene-3728/solr/core/src/java/org/apache/solr/search/LRUCache.java	2011-09-11 11:01:09.386123944 -0400
@@ -231,7 +231,7 @@
   }
 
   public String getSource() {
-    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/trunk/solr/core/src/java/org/apache/solr/search/LRUCache.java $";
+    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/branches/flexscoring/solr/core/src/java/org/apache/solr/search/LRUCache.java $";
   }
 
   public URL[] getDocs() {


diff -ruN -x .svn -x build lucene-clean-trunk/solr/core/src/java/org/apache/solr/search/SolrFieldCacheMBean.java lucene-3728/solr/core/src/java/org/apache/solr/search/SolrFieldCacheMBean.java
--- lucene-clean-trunk/solr/core/src/java/org/apache/solr/search/SolrFieldCacheMBean.java	2012-01-12 13:56:26.129156310 -0500
+++ lucene-3728/solr/core/src/java/org/apache/solr/search/SolrFieldCacheMBean.java	2011-09-11 11:01:09.396123944 -0400
@@ -50,7 +50,7 @@
     return "$Id: SolrFieldCacheMBean.java 1144761 2011-07-09 23:01:53Z sarowe $"; 
   }
   public String getSource() { 
-    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/trunk/solr/core/src/java/org/apache/solr/search/SolrFieldCacheMBean.java $";
+    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/branches/flexscoring/solr/core/src/java/org/apache/solr/search/SolrFieldCacheMBean.java $";
   }
   public URL[] getDocs() {
     return null;


diff -ruN -x .svn -x build lucene-clean-trunk/solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java lucene-3728/solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java
--- lucene-clean-trunk/solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java	2012-01-29 06:22:42.640735416 -0500
+++ lucene-3728/solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java	2012-01-29 07:23:39.056726911 -0500
@@ -1962,7 +1962,7 @@
   }
 
   public String getSource() {
-    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/trunk/solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java $";
+    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/branches/lucene3661/solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java $";
   }
 
   public URL[] getDocs() {


diff -ruN -x .svn -x build lucene-clean-trunk/solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2.java lucene-3728/solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2.java
--- lucene-clean-trunk/solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2.java	2012-01-29 19:14:01.380627767 -0500
+++ lucene-3728/solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2.java	2012-01-30 12:56:47.908479443 -0500
@@ -572,11 +572,11 @@
   }
 
   public String getSourceId() {
-    return "$Id: DirectUpdateHandler2.java 1237497 2012-01-29 22:38:32Z mikemccand $";
+    return "$Id: DirectUpdateHandler2.java 1237850 2012-01-30 17:56:40Z rmuir $";
   }
 
   public String getSource() {
-    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/trunk/solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2.java $";
+    return "$URL: https://svn.apache.org/repos/asf/lucene/dev/branches/lucene3661/solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2.java $";
   }
 
   public URL[] getDocs() {


diff -ruN -x .svn -x build lucene-clean-trunk/solr/solrj/src/test-files/solrj/solr/conf/schema-replication1.xml lucene-3728/solr/solrj/src/test-files/solrj/solr/conf/schema-replication1.xml
--- lucene-clean-trunk/solr/solrj/src/test-files/solrj/solr/conf/schema-replication1.xml	2012-01-12 13:56:26.689156320 -0500
+++ lucene-3728/solr/solrj/src/test-files/solrj/solr/conf/schema-replication1.xml	2011-09-11 11:01:09.406123944 -0400
@@ -23,7 +23,7 @@
      kitchen sink thrown in. See example/solr/conf/schema.xml for a 
      more concise example.
 
-     $Id: schema-replication1.xml 1144761 2011-07-09 23:01:53Z sarowe $
+     $Id: schema-replication1.xml 1160700 2011-08-23 14:06:58Z rmuir $
      $Source$
      $Name$
   -->
