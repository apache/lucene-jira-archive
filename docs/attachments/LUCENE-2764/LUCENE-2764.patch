Index: lucene/common-build.xml
--- lucene/common-build.xml	Thu Nov 18 16:12:12 2010 -0500
+++ lucene/common-build.xml	Fri Nov 19 14:03:29 2010 -0500
@@ -64,7 +64,7 @@
     </or>
   </condition>
   <property name="tests.multiplier" value="1" />
-  <property name="tests.codec" value="random" />
+  <property name="tests.codec" value="randomPerField" />
   <property name="tests.locale" value="random" />
   <property name="tests.timezone" value="random" />
   <property name="tests.directory" value="random" />
Index: lucene/src/java/org/apache/lucene/index/IndexWriterConfig.java
--- lucene/src/java/org/apache/lucene/index/IndexWriterConfig.java	Thu Nov 18 16:12:12 2010 -0500
+++ lucene/src/java/org/apache/lucene/index/IndexWriterConfig.java	Fri Nov 19 14:03:29 2010 -0500
@@ -79,9 +79,6 @@
    */
   public static long WRITE_LOCK_TIMEOUT = 1000;
 
-  /** Default {@link CodecProvider}. */
-  public final static CodecProvider DEFAULT_CODEC_PROVIDER = CodecProvider.getDefault();
-
   /** The maximum number of simultaneous threads that may be
    *  indexing documents at once in IndexWriter; if more
    *  than this many threads arrive they will wait for
@@ -158,7 +155,7 @@
     maxBufferedDocs = DEFAULT_MAX_BUFFERED_DOCS;
     indexingChain = DocumentsWriter.defaultIndexingChain;
     mergedSegmentWarmer = null;
-    codecProvider = DEFAULT_CODEC_PROVIDER;
+    codecProvider = CodecProvider.getDefault();
     mergePolicy = new LogByteSizeMergePolicy();
     maxThreadStates = DEFAULT_MAX_THREAD_STATES;
     readerPooling = DEFAULT_READER_POOLING;
Index: lucene/src/java/org/apache/lucene/index/codecs/CodecProvider.java
--- lucene/src/java/org/apache/lucene/index/codecs/CodecProvider.java	Thu Nov 18 16:12:12 2010 -0500
+++ lucene/src/java/org/apache/lucene/index/codecs/CodecProvider.java	Fri Nov 19 14:03:29 2010 -0500
@@ -96,11 +96,17 @@
     return infosReader;
   }
 
-  static private final CodecProvider defaultCodecs = new DefaultCodecProvider();
+  static private CodecProvider defaultCodecs = new DefaultCodecProvider();
 
   public static CodecProvider getDefault() {
     return defaultCodecs;
   }
+
+  /** For testing only
+   *  @lucene.internal */
+  public static void setDefault(CodecProvider cp) {
+    defaultCodecs = cp;
+  }
   
   /**
    * Sets the {@link Codec} for a given field. Not that setting a fields code is
Index: lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig.java
--- lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig.java	Thu Nov 18 16:12:12 2010 -0500
+++ lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig.java	Fri Nov 19 14:03:29 2010 -0500
@@ -30,7 +30,6 @@
 import org.apache.lucene.index.DocumentsWriter.IndexingChain;
 import org.apache.lucene.index.IndexWriter.IndexReaderWarmer;
 import org.apache.lucene.index.IndexWriterConfig.OpenMode;
-import org.apache.lucene.index.codecs.CodecProvider;
 import org.apache.lucene.search.DefaultSimilarity;
 import org.apache.lucene.search.Similarity;
 import org.apache.lucene.store.Directory;
@@ -81,7 +80,6 @@
     assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());
     assertTrue(DocumentsWriter.defaultIndexingChain == conf.getIndexingChain());
     assertNull(conf.getMergedSegmentWarmer());
-    assertEquals(IndexWriterConfig.DEFAULT_CODEC_PROVIDER, CodecProvider.getDefault());
     assertEquals(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES, conf.getMaxThreadStates());
     assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());
     assertEquals(LogByteSizeMergePolicy.class, conf.getMergePolicy().getClass());
Index: lucene/src/test/org/apache/lucene/util/LuceneTestCase.java
--- lucene/src/test/org/apache/lucene/util/LuceneTestCase.java	Thu Nov 18 16:12:12 2010 -0500
+++ lucene/src/test/org/apache/lucene/util/LuceneTestCase.java	Fri Nov 19 14:03:29 2010 -0500
@@ -35,6 +35,8 @@
 import org.apache.lucene.index.codecs.preflex.PreFlexCodec;
 import org.apache.lucene.index.codecs.preflexrw.PreFlexRWCodec;
 import org.apache.lucene.index.codecs.pulsing.PulsingCodec;
+import org.apache.lucene.index.codecs.simpletext.SimpleTextCodec;
+import org.apache.lucene.index.codecs.standard.StandardCodec;
 import org.apache.lucene.search.BooleanQuery;
 import org.apache.lucene.search.FieldCache;
 import org.apache.lucene.search.FieldCache.CacheEntry;
@@ -73,6 +75,7 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
+import java.util.HashMap;
 import java.util.IdentityHashMap;
 import java.util.Iterator;
 import java.util.List;
@@ -145,7 +148,7 @@
   // each test case (non-J4 tests) and each test class (J4
   // tests)
   /** Gets the codec to run tests with. */
-  static final String TEST_CODEC = System.getProperty("tests.codec", "random");
+  static final String TEST_CODEC = System.getProperty("tests.codec", "randomPerField");
   /** Gets the locale to run tests with */
   static final String TEST_LOCALE = System.getProperty("tests.locale", "random");
   /** Gets the timezone to run tests with */
@@ -187,7 +190,10 @@
   
   // saves default codec: we do this statically as many build indexes in @beforeClass
   private static String savedDefaultCodec;
+  // default codec: not set when we use a per-field provider.
   private static Codec codec;
+  // default codec provider
+  private static CodecProvider savedCodecProvider;
   
   private static Locale locale;
   private static Locale savedLocale;
@@ -198,8 +204,7 @@
   
   private static final String[] TEST_CODECS = new String[] {"MockSep", "MockFixedIntBlock", "MockVariableIntBlock"};
 
-  private static void swapCodec(Codec c) {
-    final CodecProvider cp = CodecProvider.getDefault();
+  private static void swapCodec(Codec c, CodecProvider cp) {
     Codec prior = null;
     try {
       prior = cp.lookup(c.name);
@@ -212,15 +217,16 @@
   }
 
   // returns current default codec
-  static Codec installTestCodecs() {
-    final CodecProvider cp = CodecProvider.getDefault();
-
+  static Codec installTestCodecs(String codec, CodecProvider cp) {
     savedDefaultCodec = cp.getDefaultFieldCodec();
-    String codec = TEST_CODEC;
 
     final boolean codecHasParam;
     int codecParam = 0;
-    if (codec.equals("random")) {
+    if (codec.equals("randomPerField")) {
+      // lie
+      codec = "Standard";
+      codecHasParam = false;
+    } else if (codec.equals("random")) {
       codec = pickRandomCodec(random);
       codecHasParam = false;
     } else {
@@ -241,21 +247,20 @@
       // If we're running w/ PreFlex codec we must swap in the
       // test-only PreFlexRW codec (since core PreFlex can
       // only read segments):
-      swapCodec(new PreFlexRWCodec());
+      swapCodec(new PreFlexRWCodec(), cp);
     }
 
-    swapCodec(new MockSepCodec());
-    swapCodec(new PulsingCodec(codecHasParam && "Pulsing".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 20)));
-    swapCodec(new MockFixedIntBlockCodec(codecHasParam && "MockFixedIntBlock".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)));
+    swapCodec(new MockSepCodec(), cp);
+    swapCodec(new PulsingCodec(codecHasParam && "Pulsing".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 20)), cp);
+    swapCodec(new MockFixedIntBlockCodec(codecHasParam && "MockFixedIntBlock".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)), cp);
     // baseBlockSize cannot be over 127:
-    swapCodec(new MockVariableIntBlockCodec(codecHasParam && "MockVariableIntBlock".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)));
+    swapCodec(new MockVariableIntBlockCodec(codecHasParam && "MockVariableIntBlock".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)), cp);
 
     return cp.lookup(codec);
   }
 
   // returns current PreFlex codec
-  static void removeTestCodecs(Codec codec) {
-    final CodecProvider cp = CodecProvider.getDefault();
+  static void removeTestCodecs(Codec codec, CodecProvider cp) {
     if (codec.name.equals("PreFlex")) {
       final Codec preFlex = cp.lookup("PreFlex");
       if (preFlex != null) {
@@ -266,7 +271,7 @@
     cp.unregister(cp.lookup("MockSep"));
     cp.unregister(cp.lookup("MockFixedIntBlock"));
     cp.unregister(cp.lookup("MockVariableIntBlock"));
-    swapCodec(new PulsingCodec(1));
+    swapCodec(new PulsingCodec(1), cp);
     cp.setDefaultFieldCodec(savedDefaultCodec);
 
   }
@@ -312,7 +317,17 @@
     staticSeed = "random".equals(TEST_SEED) ? seedRand.nextLong() : TwoLongs.fromString(TEST_SEED).l1;
     random.setSeed(staticSeed);
     stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());
-    codec = installTestCodecs();
+    savedCodecProvider = CodecProvider.getDefault();
+    if ("randomPerField".equals(TEST_CODEC)) {
+      if (random.nextInt(4) == 0) { // preflex-only setup
+        codec = installTestCodecs("PreFlex", CodecProvider.getDefault());
+      } else { // per-field setup
+        CodecProvider.setDefault(new RandomCodecProvider());
+        codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());
+      }
+    } else { // ordinary setup
+      codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());
+    }
     savedLocale = Locale.getDefault();
     locale = TEST_LOCALE.equals("random") ? randomLocale(random) : localeForName(TEST_LOCALE);
     Locale.setDefault(locale);
@@ -324,7 +339,21 @@
   
   @AfterClass
   public static void afterClassLuceneTestCaseJ4() {
-    removeTestCodecs(codec);
+    String codecDescription;
+    CodecProvider cp = CodecProvider.getDefault();
+
+    if ("randomPerField".equals(TEST_CODEC)) {
+      if (cp instanceof RandomCodecProvider)
+        codecDescription = cp.toString();
+      else 
+        codecDescription = "PreFlex";
+    } else {
+      codecDescription = codec.toString();
+    }
+    
+    if (CodecProvider.getDefault() == savedCodecProvider)
+      removeTestCodecs(codec, CodecProvider.getDefault());
+    CodecProvider.setDefault(savedCodecProvider);
     Locale.setDefault(savedLocale);
     TimeZone.setDefault(savedTimeZone);
     System.clearProperty("solr.solr.home");
@@ -341,7 +370,7 @@
     stores = null;
     // if tests failed, report some information back
     if (testsFailed)
-      System.out.println("NOTE: test params are: codec=" + codec + 
+      System.out.println("NOTE: test params are: codec=" + codecDescription + 
         ", locale=" + locale + 
         ", timezone=" + (timeZone == null ? "(null)" : timeZone.getID()));
     if (testsFailed) {
@@ -942,6 +971,42 @@
     }
   }
   
+  private static class RandomCodecProvider extends CodecProvider {
+    private List<Codec> knownCodecs = new ArrayList<Codec>();
+    private Map<String,Codec> previousMappings = new HashMap<String,Codec>();
+    
+    RandomCodecProvider() {
+      register(new StandardCodec());
+      register(new PreFlexCodec());
+      register(new PulsingCodec(1));
+      register(new SimpleTextCodec());
+    }
+
+    public synchronized void register(Codec codec) {
+      if (!codec.name.equals("PreFlex"))
+        knownCodecs.add(codec);
+      super.register(codec);
+    }
+
+    public synchronized void unregister(Codec codec) {
+      knownCodecs.remove(codec);
+      super.unregister(codec);
+    }
+
+    public synchronized String getFieldCodec(String name) {
+      Codec codec = previousMappings.get(name);
+      if (codec == null) {
+        codec = knownCodecs.get(random.nextInt(knownCodecs.size()));
+        previousMappings.put(name, codec);
+      }
+      return codec.name;
+    }
+    
+    public String toString() {
+      return "RandomCodecProvider: " + previousMappings.toString();
+    }
+  }
+  
   @Ignore("just a hack")
   public final void alwaysIgnoredTestMethod() {}
 }
Index: solr/common-build.xml
--- solr/common-build.xml	Thu Nov 18 16:12:12 2010 -0500
+++ solr/common-build.xml	Fri Nov 19 14:03:29 2010 -0500
@@ -56,7 +56,7 @@
   </condition>
 
   <property name="tests.multiplier" value="1" />
-  <property name="tests.codec" value="random" />
+  <property name="tests.codec" value="randomPerField" />
   <property name="tests.locale" value="random" />
   <property name="tests.timezone" value="random" />
   <property name="tests.iter" value="1" />
