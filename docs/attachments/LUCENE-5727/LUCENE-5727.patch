Index: lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xFields.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xFields.java	(revision 1599280)
+++ lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xFields.java	(working copy)
@@ -82,7 +82,7 @@
     
     boolean success = false;
     try {
-      TermInfosReader r = new TermInfosReader(dir, info.name, fieldInfos, context, indexDivisor);    
+      TermInfosReader r = newTermInfosReader(dir, info.name, fieldInfos, context, indexDivisor);    
       if (indexDivisor == -1) {
         tisNoIndex = r;
       } else {
@@ -133,6 +133,11 @@
   protected boolean sortTermsByUnicode() {
     return true;
   }
+  
+  // only overridden during testing
+  protected TermInfosReader newTermInfosReader(Directory dir, String name, FieldInfos fieldInfos, IOContext context, int indexDivisor) throws IOException {
+    return new TermInfosReader(dir, name, fieldInfos, context, indexDivisor);    
+  }
 
   @Override
   public Iterator<String> iterator() {
Index: lucene/core/src/java/org/apache/lucene/codecs/lucene3x/SegmentTermEnum.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/lucene3x/SegmentTermEnum.java	(revision 1599280)
+++ lucene/core/src/java/org/apache/lucene/codecs/lucene3x/SegmentTermEnum.java	(working copy)
@@ -32,7 +32,7 @@
  * @lucene.experimental */
 
 @Deprecated
-final class SegmentTermEnum implements Cloneable,Closeable {
+class SegmentTermEnum implements Cloneable,Closeable {
   private IndexInput input;
   FieldInfos fieldInfos;
   long size;
@@ -90,7 +90,7 @@
       if (format < FORMAT_CURRENT)
         throw new IndexFormatTooNewException(input, format, FORMAT_MINIMUM, FORMAT_CURRENT);
 
-      size = input.readLong();                    // read the size
+      size = readSize(input);                    // read the size
       
       indexInterval = input.readInt();
       skipInterval = input.readInt();
@@ -99,6 +99,11 @@
       assert skipInterval > 0: "skipInterval=" + skipInterval + " is negative; must be > 0";
     }
   }
+  
+  // only overridden for testing
+  protected long readSize(IndexInput input) throws IOException {
+    return input.readLong();
+  }
 
   @Override
   protected SegmentTermEnum clone() {
Index: lucene/core/src/java/org/apache/lucene/codecs/lucene3x/TermInfosReader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/lucene3x/TermInfosReader.java	(revision 1599280)
+++ lucene/core/src/java/org/apache/lucene/codecs/lucene3x/TermInfosReader.java	(working copy)
@@ -27,6 +27,7 @@
 import org.apache.lucene.index.Term;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.IOContext;
+import org.apache.lucene.store.IndexInput;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.CloseableThreadLocal;
 import org.apache.lucene.util.DoubleBarrelLRUCache;
@@ -40,7 +41,7 @@
  * @lucene.experimental
  */
 @Deprecated
-final class TermInfosReader implements Closeable {
+class TermInfosReader implements Closeable {
   private final Directory directory;
   private final String segment;
   private final FieldInfos fieldInfos;
@@ -111,7 +112,7 @@
       segment = seg;
       fieldInfos = fis;
 
-      origEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, "", Lucene3xPostingsFormat.TERMS_EXTENSION),
+      origEnum = newSegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, "", Lucene3xPostingsFormat.TERMS_EXTENSION),
                                                          context), fieldInfos, false);
       size = origEnum.size;
 
@@ -121,7 +122,7 @@
         totalIndexInterval = origEnum.indexInterval * indexDivisor;
 
         final String indexFileName = IndexFileNames.segmentFileName(segment, "", Lucene3xPostingsFormat.TERMS_INDEX_EXTENSION);
-        final SegmentTermEnum indexEnum = new SegmentTermEnum(directory.openInput(indexFileName,
+        final SegmentTermEnum indexEnum = newSegmentTermEnum(directory.openInput(indexFileName,
                                                                                    context), fieldInfos, true);
 
         try {
@@ -148,6 +149,11 @@
       }
     }
   }
+  
+  // only overridden for testing
+  protected SegmentTermEnum newSegmentTermEnum(IndexInput input, FieldInfos fieldInfos, boolean isIndex) throws IOException {
+    return new SegmentTermEnum(input, fieldInfos, isIndex);
+  }
 
   public int getSkipInterval() {
     return origEnum.skipInterval;
Index: lucene/core/src/java/org/apache/lucene/store/BufferedIndexOutput.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/store/BufferedIndexOutput.java	(revision 1599280)
+++ lucene/core/src/java/org/apache/lucene/store/BufferedIndexOutput.java	(working copy)
@@ -136,12 +136,6 @@
   }
 
   @Override
-  public void seek(long pos) throws IOException {
-    flush();
-    bufferStart = pos;
-  }
-
-  @Override
   public abstract long length() throws IOException;
   
   /**
Index: lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter.java	(revision 1599280)
+++ lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter.java	(working copy)
@@ -340,12 +340,6 @@
     }
 
     @Override
-    public void seek(long pos) throws IOException {
-      assert !closed;
-      delegate.seek(offset + pos);
-    }
-
-    @Override
     public long length() throws IOException {
       assert !closed;
       return delegate.length() - offset;
Index: lucene/core/src/java/org/apache/lucene/store/FSDirectory.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/store/FSDirectory.java	(revision 1599280)
+++ lucene/core/src/java/org/apache/lucene/store/FSDirectory.java	(working copy)
@@ -427,14 +427,7 @@
       }
     }
 
-    /** Random-access methods */
     @Override
-    public void seek(long pos) throws IOException {
-      super.seek(pos);
-      file.seek(pos);
-    }
-
-    @Override
     public long length() throws IOException {
       return file.length();
     }
Index: lucene/core/src/java/org/apache/lucene/store/IndexOutput.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/store/IndexOutput.java	(revision 1599280)
+++ lucene/core/src/java/org/apache/lucene/store/IndexOutput.java	(working copy)
@@ -43,17 +43,9 @@
 
   /** Returns the current position in this file, where the next write will
    * occur.
-   * @see #seek(long)
    */
   public abstract long getFilePointer();
 
-  /** Sets current position in this file, where the next write will occur.
-   * @see #getFilePointer()
-   * @deprecated (4.1) This method will be removed in Lucene 5.0
-   */
-  @Deprecated
-  public abstract void seek(long pos) throws IOException;
-
   /** Returns the current checksum of bytes written so far */
   public abstract long getChecksum() throws IOException;
 
Index: lucene/core/src/java/org/apache/lucene/store/RAMOutputStream.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/store/RAMOutputStream.java	(revision 1599280)
+++ lucene/core/src/java/org/apache/lucene/store/RAMOutputStream.java	(working copy)
@@ -117,19 +117,6 @@
   }
 
   @Override
-  public void seek(long pos) throws IOException {
-    // set the file length in case we seek back
-    // and flush() has not been called yet
-    setFileLength();
-    if (pos < bufferStart || pos >= bufferStart + bufferLength) {
-      currentBufferIndex = (int) (pos / BUFFER_SIZE);
-      switchCurrentBuffer();
-    }
-
-    bufferPosition = (int) (pos % BUFFER_SIZE);
-  }
-
-  @Override
   public long length() {
     return file.length;
   }
Index: lucene/core/src/java/org/apache/lucene/store/RateLimitedIndexOutput.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/store/RateLimitedIndexOutput.java	(revision 1599280)
+++ lucene/core/src/java/org/apache/lucene/store/RateLimitedIndexOutput.java	(working copy)
@@ -64,13 +64,6 @@
   }
 
   @Override
-  public void seek(long pos) throws IOException {
-    flush();
-    delegate.seek(pos);
-  }
-
-
-  @Override
   public void flush() throws IOException {
     try {
       super.flush();
Index: lucene/core/src/test/org/apache/lucene/codecs/lucene3x/TestTermInfosReaderIndex.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/codecs/lucene3x/TestTermInfosReaderIndex.java	(revision 1599280)
+++ lucene/core/src/test/org/apache/lucene/codecs/lucene3x/TestTermInfosReaderIndex.java	(working copy)
@@ -102,10 +102,10 @@
     String segmentFileName = IndexFileNames.segmentFileName(segment, "", Lucene3xPostingsFormat.TERMS_INDEX_EXTENSION);
     long tiiFileLength = directory.fileLength(segmentFileName);
     IndexInput input = directory.openInput(segmentFileName, newIOContext(random()));
-    termEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, "", Lucene3xPostingsFormat.TERMS_EXTENSION), newIOContext(random())), fieldInfos, false);
+    termEnum = new PreflexRWSegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, "", Lucene3xPostingsFormat.TERMS_EXTENSION), newIOContext(random())), fieldInfos, false);
     int totalIndexInterval = termEnum.indexInterval * indexDivisor;
     
-    SegmentTermEnum indexEnum = new SegmentTermEnum(input, fieldInfos, true);
+    SegmentTermEnum indexEnum = new PreflexRWSegmentTermEnum(input, fieldInfos, true);
     index = new TermInfosReaderIndex(indexEnum, indexDivisor, tiiFileLength, totalIndexInterval);
     indexEnum.close();
     input.close();
Index: lucene/facet/src/test/org/apache/lucene/facet/SlowRAMDirectory.java
===================================================================
--- lucene/facet/src/test/org/apache/lucene/facet/SlowRAMDirectory.java	(revision 1599280)
+++ lucene/facet/src/test/org/apache/lucene/facet/SlowRAMDirectory.java	(working copy)
@@ -167,7 +167,6 @@
       io.writeBytes(b, offset, length);
     }
     
-    @Deprecated @Override public void seek(long pos) throws IOException { io.seek(pos); }
     @Override public void close() throws IOException { io.close(); }
     @Override public void flush() throws IOException { io.flush(); }
     @Override public long getFilePointer() { return io.getFilePointer(); }
Index: lucene/misc/src/java/org/apache/lucene/store/NativeUnixDirectory.java
===================================================================
--- lucene/misc/src/java/org/apache/lucene/store/NativeUnixDirectory.java	(revision 1599280)
+++ lucene/misc/src/java/org/apache/lucene/store/NativeUnixDirectory.java	(working copy)
@@ -236,27 +236,7 @@
       return filePos + bufferPos;
     }
 
-    // TODO: seek is fragile at best; it can only properly
-    // handle seek & then change bytes that fit entirely
-    // within one buffer
     @Override
-    public void seek(long pos) throws IOException {
-      if (pos != getFilePointer()) {
-        dump();
-        final long alignedPos = pos & ALIGN_NOT_MASK;
-        filePos = alignedPos;
-        int n = (int) NativePosixUtil.pread(fos.getFD(), filePos, buffer);
-        if (n < bufferSize) {
-          buffer.limit(n);
-        }
-        //System.out.println("seek refill=" + n);
-        final int delta = (int) (pos - alignedPos);
-        buffer.position(delta);
-        bufferPos = delta;
-      }
-    }
-
-    @Override
     public long length() {
       return fileLength + bufferPos;
     }
Index: lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/PreFlexRWPostingsFormat.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/PreFlexRWPostingsFormat.java	(revision 1599280)
+++ lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/PreFlexRWPostingsFormat.java	(working copy)
@@ -21,8 +21,12 @@
 
 import org.apache.lucene.codecs.FieldsConsumer;
 import org.apache.lucene.codecs.FieldsProducer;
+import org.apache.lucene.index.FieldInfos;
 import org.apache.lucene.index.SegmentWriteState;
 import org.apache.lucene.index.SegmentReadState;
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.store.IOContext;
+import org.apache.lucene.store.IndexInput;
 import org.apache.lucene.util.LuceneTestCase;
 
 /** Codec, only for testing, that can write and read the
@@ -69,6 +73,17 @@
 
         return unicodeSortOrder;
       }
+
+      // we don't seek-on-write when testing
+      @Override
+      protected TermInfosReader newTermInfosReader(Directory dir, String name, FieldInfos fieldInfos, IOContext context, int indexDivisor) throws IOException {
+        return new TermInfosReader(dir, name, fieldInfos, context, indexDivisor) {
+          @Override
+          protected SegmentTermEnum newSegmentTermEnum(IndexInput input, FieldInfos fieldInfos, boolean isIndex) throws IOException {
+            return new PreflexRWSegmentTermEnum(input, fieldInfos, isIndex);
+          }
+        };
+      }
     };
   }
 }
Index: lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/PreflexRWSegmentTermsEnum.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/PreflexRWSegmentTermsEnum.java	(revision 0)
+++ lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/PreflexRWSegmentTermsEnum.java	(working copy)
@@ -0,0 +1,40 @@
+package org.apache.lucene.codecs.lucene3x;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.IOException;
+
+import org.apache.lucene.index.CorruptIndexException;
+import org.apache.lucene.index.FieldInfos;
+import org.apache.lucene.store.IndexInput;
+
+// not an anonymous class so TestTermInfosReaderIndex can instantiate directly
+class PreflexRWSegmentTermEnum extends SegmentTermEnum {
+  PreflexRWSegmentTermEnum(IndexInput i, FieldInfos fis, boolean isi) throws CorruptIndexException, IOException {
+    super(i, fis, isi);
+  }
+  
+  @Override
+  protected long readSize(IndexInput input) throws IOException {
+    long savedPosition = input.getFilePointer();
+    input.seek(input.length() - 8);
+    long size = input.readLong();
+    input.seek(savedPosition + 8); // we still left the 'hole'
+    return size;
+  }
+}

Property changes on: lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/PreflexRWSegmentTermsEnum.java
___________________________________________________________________
Added: svn:eol-style
## -0,0 +1 ##
+native
\ No newline at end of property
Index: lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/TermInfosWriter.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/TermInfosWriter.java	(revision 1599280)
+++ lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/TermInfosWriter.java	(working copy)
@@ -270,7 +270,8 @@
   /** Called to complete TermInfos creation. */
   public void close() throws IOException {
     try {
-      output.seek(4);          // write size after format
+      // the "real" 3.x seeked back to offset 4, and wrote 8 bytes there.
+      // we write 8 bytes at the end of the file
       output.writeLong(size);
     } finally {
       try {
Index: lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper.java	(revision 1599280)
+++ lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper.java	(working copy)
@@ -973,12 +973,6 @@
     }
 
     @Override
-    public void seek(long pos) throws IOException {
-      flush();
-      io.seek(pos);
-    }
-
-    @Override
     public void flush() throws IOException {
       try {
         super.flush();
Index: lucene/test-framework/src/java/org/apache/lucene/store/MockIndexOutputWrapper.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/store/MockIndexOutputWrapper.java	(revision 1599280)
+++ lucene/test-framework/src/java/org/apache/lucene/store/MockIndexOutputWrapper.java	(working copy)
@@ -147,11 +147,6 @@
   }
 
   @Override
-  public void seek(long pos) throws IOException {
-    delegate.seek(pos);
-  }
-
-  @Override
   public long length() throws IOException {
     return delegate.length();
   }
Index: lucene/test-framework/src/java/org/apache/lucene/util/ThrottledIndexOutput.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/util/ThrottledIndexOutput.java	(revision 1599280)
+++ lucene/test-framework/src/java/org/apache/lucene/util/ThrottledIndexOutput.java	(working copy)
@@ -89,12 +89,6 @@
   }
 
   @Override
-  public void seek(long pos) throws IOException {
-    sleep(seekDelayMillis);
-    delegate.seek(pos);
-  }
-
-  @Override
   public long length() throws IOException {
     return delegate.length();
   }
Index: solr/core/src/java/org/apache/solr/store/blockcache/ReusedBufferedIndexOutput.java
===================================================================
--- solr/core/src/java/org/apache/solr/store/blockcache/ReusedBufferedIndexOutput.java	(revision 1599280)
+++ solr/core/src/java/org/apache/solr/store/blockcache/ReusedBufferedIndexOutput.java	(working copy)
@@ -98,23 +98,6 @@
   protected abstract void seekInternal(long pos) throws IOException;
   
   @Override
-  public void seek(long pos) throws IOException {
-    if (pos > fileLength) {
-      fileLength = pos;
-    }
-
-    if (pos >= bufferStart && pos < (bufferStart + bufferLength))
-      bufferPosition = (int)(pos - bufferStart);  // seek within buffer
-    else {
-      flushBufferToCache();
-      bufferStart = pos;
-      bufferPosition = 0;
-      bufferLength = 0;
-      seekInternal(pos);
-    }
-  }
-  
-  @Override
   public long length() throws IOException {
     return fileLength;
   }
Index: solr/core/src/java/org/apache/solr/store/hdfs/NullIndexOutput.java
===================================================================
--- solr/core/src/java/org/apache/solr/store/hdfs/NullIndexOutput.java	(revision 1599280)
+++ solr/core/src/java/org/apache/solr/store/hdfs/NullIndexOutput.java	(working copy)
@@ -49,13 +49,7 @@
     return length;
   }
   
-
   @Override
-  public void seek(long pos) throws IOException {
-    this.pos = pos;
-  }
-  
-  @Override
   public void writeByte(byte b) throws IOException {
     pos++;
     updateLength();
