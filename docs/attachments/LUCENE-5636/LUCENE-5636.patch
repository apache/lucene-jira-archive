Index: lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates.java	(revision 1591725)
+++ lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates.java	(working copy)
@@ -1260,31 +1260,34 @@
   public void testDeleteUnusedUpdatesFiles() throws Exception {
     Directory dir = newDirectory();
     IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));
+    conf.setUseCompoundFile(true);
+    conf.setMergePolicy(NoMergePolicy.INSTANCE);
+    conf.setCodec(new Lucene46Codec()); // fix Codec so we can assert on file names
     IndexWriter writer = new IndexWriter(dir, conf);
+    ReaderManager manager = new ReaderManager(writer, true);
     
     Document doc = new Document();
     doc.add(new StringField("id", "d0", Store.NO));
-    doc.add(new NumericDocValuesField("f", 1L));
+    doc.add(new NumericDocValuesField("f1", 1L));
+    doc.add(new NumericDocValuesField("f2", 1L));
     writer.addDocument(doc);
 
+    manager.maybeRefresh(); // flush
+    
     // create first gen of update files
-    writer.updateNumericDocValue(new Term("id", "d0"), "f", 2L);
-    writer.commit();
-    int numFiles = dir.listAll().length;
-
-    DirectoryReader r = DirectoryReader.open(dir);
-    assertEquals(2L, r.leaves().get(0).reader().getNumericDocValues("f").get(0));
-    r.close();
+    writer.updateNumericDocValue(new Term("id", "d0"), "f1", 2L);
+    manager.maybeRefresh(); // flush
+    Set<String> files = new HashSet<>(Arrays.asList(dir.listAll()));
+    assertTrue(files.contains("_0_1.fnm"));
     
     // create second gen of update files, first gen should be deleted
-    writer.updateNumericDocValue(new Term("id", "d0"), "f", 5L);
-    writer.commit();
-    assertEquals(numFiles, dir.listAll().length);
+    writer.updateNumericDocValue(new Term("id", "d0"), "f2", 5L);
+    manager.maybeRefresh();
+    files = new HashSet<>(Arrays.asList(dir.listAll()));
+    assertTrue(files.contains("_0_2.fnm"));
+    assertFalse(files.contains("_0_1.fnm"));
 
-    r = DirectoryReader.open(dir);
-    assertEquals(5L, r.leaves().get(0).reader().getNumericDocValues("f").get(0));
-    r.close();
-
+    manager.close();
     writer.shutdown();
     dir.close();
   }
