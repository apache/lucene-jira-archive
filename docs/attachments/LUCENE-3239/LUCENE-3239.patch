Index: lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack.java
===================================================================
--- lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack.java	(revision 1141392)
+++ lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack.java	(working copy)
@@ -115,8 +115,7 @@
    * @param termInfo the TermInfo object to be put on the top of the stack
    */
   public void push( TermInfo termInfo ){
-    // termList.push( termInfo );  // avoid Java 1.6 feature
-    termList.addFirst( termInfo );
+    termList.push( termInfo );
   }
 
   /**
Index: lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManager.java
===================================================================
--- lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManager.java	(revision 1141392)
+++ lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManager.java	(working copy)
@@ -351,7 +351,7 @@
   }
 
   /** NOTE: caller must separately close the writer. */
-  // @Override -- not until Java 1.6
+  @Override
   public void close() throws IOException {
     swapSearcher(null, indexingGen.getAndIncrement(), true);
   }
Index: lucene/src/java/org/apache/lucene/index/BufferedDeletes.java
===================================================================
--- lucene/src/java/org/apache/lucene/index/BufferedDeletes.java	(revision 1141392)
+++ lucene/src/java/org/apache/lucene/index/BufferedDeletes.java	(working copy)
@@ -196,7 +196,7 @@
 
   public Iterable<Term> termsIterable() {
     return new Iterable<Term>() {
-      // @Override -- not until Java 1.6
+      @Override
       public Iterator<Term> iterator() {
         return terms.keySet().iterator();
       }
@@ -206,23 +206,23 @@
   public Iterable<QueryAndLimit> queriesIterable() {
     return new Iterable<QueryAndLimit>() {
       
-      // @Override -- not until Java 1.6
+      @Override
       public Iterator<QueryAndLimit> iterator() {
         return new Iterator<QueryAndLimit>() {
           private final Iterator<Map.Entry<Query,Integer>> iter = queries.entrySet().iterator();
 
-          // @Override -- not until Java 1.6
+          @Override
           public boolean hasNext() {
             return iter.hasNext();
           }
 
-          // @Override -- not until Java 1.6
+          @Override
           public QueryAndLimit next() {
             final Map.Entry<Query,Integer> ent = iter.next();
             return new QueryAndLimit(ent.getKey(), ent.getValue());
           }
 
-          // @Override -- not until Java 1.6
+          @Override
           public void remove() {
             throw new UnsupportedOperationException();
           }
Index: lucene/src/java/org/apache/lucene/index/BufferedDeletesStream.java
===================================================================
--- lucene/src/java/org/apache/lucene/index/BufferedDeletesStream.java	(revision 1141392)
+++ lucene/src/java/org/apache/lucene/index/BufferedDeletesStream.java	(working copy)
@@ -143,7 +143,7 @@
 
   // Sorts SegmentInfos from smallest to biggest bufferedDelGen:
   private static final Comparator<SegmentInfo> sortSegInfoByDelGen = new Comparator<SegmentInfo>() {
-    // @Override -- not until Java 1.6
+    @Override
     public int compare(SegmentInfo si1, SegmentInfo si2) {
       final long cmp = si1.getBufferedDeletesGen() - si2.getBufferedDeletesGen();
       if (cmp > 0) {
Index: lucene/src/java/org/apache/lucene/index/FrozenBufferedDeletes.java
===================================================================
--- lucene/src/java/org/apache/lucene/index/FrozenBufferedDeletes.java	(revision 1141392)
+++ lucene/src/java/org/apache/lucene/index/FrozenBufferedDeletes.java	(working copy)
@@ -93,22 +93,22 @@
 
   public Iterable<Term> termsIterable() {
     return new Iterable<Term>() {
-      // @Override -- not until Java 1.6
+      @Override
       public Iterator<Term> iterator() {
         return new Iterator<Term>() {
           private int upto;
 
-          // @Override -- not until Java 1.6
+          @Override
           public boolean hasNext() {
             return upto < terms.length;
           }
 
-          // @Override -- not until Java 1.6
+          @Override
           public Term next() {
             return terms[upto++];
           }
 
-          // @Override -- not until Java 1.6
+          @Override
           public void remove() {
             throw new UnsupportedOperationException();
           }
@@ -119,24 +119,24 @@
 
   public Iterable<QueryAndLimit> queriesIterable() {
     return new Iterable<QueryAndLimit>() {
-      // @Override -- not until Java 1.6
+      @Override
       public Iterator<QueryAndLimit> iterator() {
         return new Iterator<QueryAndLimit>() {
           private int upto;
 
-          // @Override -- not until Java 1.6
+          @Override
           public boolean hasNext() {
             return upto < queries.length;
           }
 
-          // @Override -- not until Java 1.6
+          @Override
           public QueryAndLimit next() {
             QueryAndLimit ret = new QueryAndLimit(queries[upto], queryLimits[upto]);
             upto++;
             return ret;
           }
 
-          // @Override -- not until Java 1.6
+          @Override
           public void remove() {
             throw new UnsupportedOperationException();
           }
Index: lucene/src/java/org/apache/lucene/index/ParallelReader.java
===================================================================
--- lucene/src/java/org/apache/lucene/index/ParallelReader.java	(revision 1141392)
+++ lucene/src/java/org/apache/lucene/index/ParallelReader.java	(working copy)
@@ -584,7 +584,7 @@
       fields.put(field, perDocs.docValues(field));
     }
 
-    //@Override -- not until Java 1.6
+    @Override
     public void close() throws IOException {
       // nothing to do here
     }
Index: lucene/src/java/org/apache/lucene/search/FieldCacheImpl.java
===================================================================
--- lucene/src/java/org/apache/lucene/search/FieldCacheImpl.java	(revision 1141392)
+++ lucene/src/java/org/apache/lucene/search/FieldCacheImpl.java	(working copy)
@@ -137,7 +137,7 @@
   }
 
   final static IndexReader.ReaderFinishedListener purgeReader = new IndexReader.ReaderFinishedListener() {
-    // @Override -- not until Java 1.6
+    @Override
     public void finished(IndexReader reader) {
       FieldCache.DEFAULT.purge(reader);
     }
Index: lucene/src/java/org/apache/lucene/store/InputStreamDataInput.java
===================================================================
--- lucene/src/java/org/apache/lucene/store/InputStreamDataInput.java	(revision 1141392)
+++ lucene/src/java/org/apache/lucene/store/InputStreamDataInput.java	(working copy)
@@ -51,7 +51,7 @@
     }
   }
 
-  //@Override -- not until Java 1.6
+  @Override
   public void close() throws IOException {
     is.close();
   }
Index: lucene/src/java/org/apache/lucene/store/OutputStreamDataOutput.java
===================================================================
--- lucene/src/java/org/apache/lucene/store/OutputStreamDataOutput.java	(revision 1141392)
+++ lucene/src/java/org/apache/lucene/store/OutputStreamDataOutput.java	(working copy)
@@ -39,7 +39,7 @@
     os.write(b, offset, length);
   }
 
-  // @Override -- not until Java 1.6
+  @Override
   public void close() throws IOException {
     os.close();
   }
Index: lucene/src/java/org/apache/lucene/util/BitVector.java
===================================================================
--- lucene/src/java/org/apache/lucene/util/BitVector.java	(revision 1141392)
+++ lucene/src/java/org/apache/lucene/util/BitVector.java	(working copy)
@@ -120,7 +120,7 @@
     return size;
   }
 
-  // @Override -- not until Java 1.6
+  @Override
   public int length() {
     return size;
   }
Index: lucene/src/java/org/apache/lucene/util/OpenBitSet.java
===================================================================
--- lucene/src/java/org/apache/lucene/util/OpenBitSet.java	(revision 1141392)
+++ lucene/src/java/org/apache/lucene/util/OpenBitSet.java	(working copy)
@@ -136,7 +136,7 @@
       return capacity();
   }
 
-  // @Override -- not until Java 1.6
+  @Override
   public int length() {
     return bits.length << 6;
   }
Index: lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter.java
===================================================================
--- lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter.java	(revision 1141392)
+++ lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter.java	(working copy)
@@ -133,22 +133,22 @@
       // addDocuments?  Would be better testing.
       w.addDocuments(new Iterable<Document>() {
 
-        // @Override -- not until Java 1.6
+        @Override
         public Iterator<Document> iterator() {
           return new Iterator<Document>() {
             boolean done;
             
-            // @Override -- not until Java 1.6
+            @Override
             public boolean hasNext() {
               return !done;
             }
 
-            // @Override -- not until Java 1.6
+            @Override
             public void remove() {
               throw new UnsupportedOperationException();
             }
 
-            // @Override -- not until Java 1.6
+            @Override
             public Document next() {
               if (done) {
                 throw new IllegalStateException();
@@ -259,22 +259,22 @@
     if (r.nextInt(5) == 3) {
       w.updateDocuments(t, new Iterable<Document>() {
 
-        // @Override -- not until Java 1.6
+        @Override
         public Iterator<Document> iterator() {
           return new Iterator<Document>() {
             boolean done;
             
-            // @Override -- not until Java 1.6
+            @Override
             public boolean hasNext() {
               return !done;
             }
 
-            // @Override -- not until Java 1.6
+            @Override
             public void remove() {
               throw new UnsupportedOperationException();
             }
 
-            // @Override -- not until Java 1.6
+            @Override
             public Document next() {
               if (done) {
                 throw new IllegalStateException();
Index: lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java
===================================================================
--- lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java	(revision 1141392)
+++ lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java	(working copy)
@@ -59,23 +59,23 @@
       this.doc = doc;
     }
 
-    // @Override -- not until Java 1.6
+    @Override
     public Iterator<Document> iterator() {
       return new Iterator<Document>() {
         int upto;
 
-        // @Override -- not until Java 1.6
+        @Override
         public boolean hasNext() {
           return upto < count;
         }
 
-        // @Override -- not until Java 1.6
+        @Override
         public Document next() {
           upto++;
           return doc;
         }
 
-        // @Override -- not until Java 1.6
+        @Override
         public void remove() {
           throw new UnsupportedOperationException();
         }
Index: modules/facet/src/java/org/apache/lucene/util/UnsafeByteArrayOutputStream.java
===================================================================
--- modules/facet/src/java/org/apache/lucene/util/UnsafeByteArrayOutputStream.java	(revision 1141392)
+++ modules/facet/src/java/org/apache/lucene/util/UnsafeByteArrayOutputStream.java	(working copy)
@@ -2,6 +2,7 @@
 
 import java.io.IOException;
 import java.io.OutputStream;
+import java.util.Arrays;
 
 /**
  * Licensed to the Apache Software Foundation (ASF) under one or more
@@ -71,11 +72,7 @@
   }
 
   private void grow(int newLength) {
-    // It actually should be: (Java 1.6)
-    // buffer = Arrays.copyOf(buffer, newLength);
-    byte[] newBuffer = new byte[newLength];
-    System.arraycopy(buffer, 0, newBuffer, 0, buffer.length);
-    buffer = newBuffer;
+    buffer = Arrays.copyOf(buffer, newLength);
   }
 
   /**
Index: modules/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup.java
===================================================================
--- modules/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup.java	(revision 1141392)
+++ modules/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup.java	(working copy)
@@ -171,7 +171,7 @@
   private static class GroupMerger<T> {
 
     private final GroupComparator<T> groupComp;
-    private final SortedSet<MergedGroup<T>> queue;
+    private final NavigableSet<MergedGroup<T>> queue;
     private final Map<T,MergedGroup<T>> groupsSeen;
 
     public GroupMerger(Sort groupSort) throws IOException {
@@ -242,10 +242,8 @@
 
       // Prune un-competitive groups:
       while(queue.size() > topN) {
-        // TODO java 1.6: .pollLast
-        final MergedGroup<T> group = queue.last();
+        final MergedGroup<T> group = queue.pollLast();
         //System.out.println("PRUNE: " + group);
-        queue.remove(group);
         group.inQueue = false;
       }
     }
@@ -270,9 +268,7 @@
       int count = 0;
 
       while(queue.size() != 0) {
-        // TODO Java 1.6: pollFirst()
-        final MergedGroup<T> group = queue.first();
-        queue.remove(group);
+        final MergedGroup<T> group = queue.pollFirst();
         group.processed = true;
         //System.out.println("  pop: shards=" + group.shards + " group=" + (group.groupValue == null ? "null" : (((BytesRef) group.groupValue).utf8ToString())) + " sortValues=" + Arrays.toString(group.topValues));
         if (count++ >= offset) {
Index: modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping.java
===================================================================
--- modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping.java	(revision 1141392)
+++ modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping.java	(working copy)
@@ -193,7 +193,7 @@
   private Comparator<GroupDoc> getComparator(Sort sort) {
     final SortField[] sortFields = sort.getSort();
     return new Comparator<GroupDoc>() {
-      // @Override -- Not until Java 1.6
+      @Override
       public int compare(GroupDoc d1, GroupDoc d2) {
         for(SortField sf : sortFields) {
           final int cmp;
Index: solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestScriptTransformer.java
===================================================================
--- solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestScriptTransformer.java	(revision 1141392)
+++ solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestScriptTransformer.java	(working copy)
@@ -34,8 +34,6 @@
  * Test for ScriptTransformer
  * </p>
  * <p/>
- * All tests in this have been ignored because script support is only available
- * in Java 1.6+
  *
  *
  * @since solr 1.3
