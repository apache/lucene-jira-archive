Index: lucene/core/src/java/org/apache/lucene/index/IndexWriter.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/IndexWriter.java	(revision 1685193)
+++ lucene/core/src/java/org/apache/lucene/index/IndexWriter.java	(working copy)
@@ -59,6 +59,7 @@
 import org.apache.lucene.store.LockObtainFailedException;
 import org.apache.lucene.store.MergeInfo;
 import org.apache.lucene.store.RateLimitedIndexOutput;
+import org.apache.lucene.store.SleepingLockWrapper;
 import org.apache.lucene.store.TrackingDirectoryWrapper;
 import org.apache.lucene.store.LockValidatingDirectoryWrapper;
 import org.apache.lucene.util.Accountable;
Index: lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig.java	(revision 1685193)
+++ lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig.java	(working copy)
@@ -24,6 +24,7 @@
 import org.apache.lucene.index.DocumentsWriterPerThread.IndexingChain;
 import org.apache.lucene.index.IndexWriter.IndexReaderWarmer;
 import org.apache.lucene.search.similarities.Similarity;
+import org.apache.lucene.store.SleepingLockWrapper;
 import org.apache.lucene.util.InfoStream;
 import org.apache.lucene.util.PrintStreamInfoStream;
 import org.apache.lucene.util.SetOnce;
@@ -87,11 +88,11 @@
   public final static double DEFAULT_RAM_BUFFER_SIZE_MB = 16.0;
 
   /**
-   * Default value for the write lock timeout (1,000 ms).
-   *
-   * @see #setDefaultWriteLockTimeout(long)
+   * Default value for the write lock timeout (0 ms: no sleeping).
+   * @deprecated Use {@link SleepingLockWrapper} if you want sleeping.
    */
-  public static long WRITE_LOCK_TIMEOUT = 1000;
+  @Deprecated
+  public static final long WRITE_LOCK_TIMEOUT = 0;
 
   /** Default setting for {@link #setReaderPooling}. */
   public final static boolean DEFAULT_READER_POOLING = false;
@@ -113,24 +114,6 @@
   /** Default value for whether calls to {@link IndexWriter#close()} include a commit. */
   public final static boolean DEFAULT_COMMIT_ON_CLOSE = true;
   
-  /**
-   * Sets the default (for any instance) maximum time to wait for a write lock
-   * (in milliseconds).
-   */
-  public static void setDefaultWriteLockTimeout(long writeLockTimeout) {
-    WRITE_LOCK_TIMEOUT = writeLockTimeout;
-  }
-
-  /**
-   * Returns the default write lock timeout for newly instantiated
-   * IndexWriterConfigs.
-   *
-   * @see #setDefaultWriteLockTimeout(long)
-   */
-  public static long getDefaultWriteLockTimeout() {
-    return WRITE_LOCK_TIMEOUT;
-  }
-
   // indicates whether this config instance is already attached to a writer.
   // not final so that it can be cloned properly.
   private SetOnce<IndexWriter> writer = new SetOnce<>();
@@ -264,11 +247,12 @@
 
   /**
    * Sets the maximum time to wait for a write lock (in milliseconds) for this
-   * instance. You can change the default value for all instances by calling
-   * {@link #setDefaultWriteLockTimeout(long)}. Note that the value can be zero,
-   * for no sleep/retry behavior.
+   * instance. Note that the value can be zero, for no sleep/retry behavior.
    *
-   * <p>Only takes effect when IndexWriter is first created. */
+   * <p>Only takes effect when IndexWriter is first created.
+   * @deprecated Use {@link SleepingLockWrapper} if you want sleeping.
+   */
+  @Deprecated
   public IndexWriterConfig setWriteLockTimeout(long writeLockTimeout) {
     this.writeLockTimeout = writeLockTimeout;
     return this;
Index: lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig.java	(revision 1685193)
+++ lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig.java	(working copy)
@@ -24,6 +24,7 @@
 import org.apache.lucene.index.IndexWriterConfig.OpenMode;
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.similarities.Similarity;
+import org.apache.lucene.store.SleepingLockWrapper;
 import org.apache.lucene.util.InfoStream;
 
 /**
@@ -60,7 +61,11 @@
   /** {@link MergeScheduler} to use for running merges. */
   protected volatile MergeScheduler mergeScheduler;
 
-  /** Timeout when trying to obtain the write lock on init. */
+  /** 
+   * Timeout when trying to obtain the write lock on init. 
+   * @deprecated Use {@link SleepingLockWrapper} if you want sleeping.
+   */
+  @Deprecated
   protected volatile long writeLockTimeout;
 
   /** {@link IndexingChain} that determines how documents are
@@ -355,7 +360,9 @@
    * Returns allowed timeout when acquiring the write lock.
    *
    * @see IndexWriterConfig#setWriteLockTimeout(long)
+   * @deprecated Use {@link SleepingLockWrapper} if you want sleeping.
    */
+  @Deprecated
   public long getWriteLockTimeout() {
     return writeLockTimeout;
   }
Index: lucene/core/src/java/org/apache/lucene/index/SleepingLockWrapper.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/SleepingLockWrapper.java	(revision 1685193)
+++ lucene/core/src/java/org/apache/lucene/index/SleepingLockWrapper.java	(working copy)
@@ -1,113 +0,0 @@
-package org.apache.lucene.index;
-
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import java.io.IOException;
-
-import org.apache.lucene.store.Directory;
-import org.apache.lucene.store.FilterDirectory;
-import org.apache.lucene.store.Lock;
-import org.apache.lucene.store.LockObtainFailedException;
-import org.apache.lucene.util.ThreadInterruptedException;
-
-/** 
- * Directory that wraps another, and that sleeps and retries
- * if obtaining the lock fails.
- * <p>
- * This is not a good idea.
- */
-final class SleepingLockWrapper extends FilterDirectory {
- 
-  /** 
-   * Pass this lockWaitTimeout to try forever to obtain the lock. 
-   */
-  public static final long LOCK_OBTAIN_WAIT_FOREVER = -1;
-  
-  /** 
-   * How long {@link #obtainLock} waits, in milliseconds,
-   * in between attempts to acquire the lock. 
-   */
-  public static long DEFAULT_POLL_INTERVAL = 1000;
-  
-  private final long lockWaitTimeout;
-  private final long pollInterval;
-  
-  /**
-   * Create a new SleepingLockFactory
-   * @param delegate        underlying directory to wrap
-   * @param lockWaitTimeout length of time to wait in milliseconds 
-   *                        or {@link #LOCK_OBTAIN_WAIT_FOREVER} to retry forever.
-   */
-  public SleepingLockWrapper(Directory delegate, long lockWaitTimeout) {
-    this(delegate, lockWaitTimeout, DEFAULT_POLL_INTERVAL);
-  }
-  
-  /**
-   * Create a new SleepingLockFactory
-   * @param delegate        underlying directory to wrap
-   * @param lockWaitTimeout length of time to wait in milliseconds 
-   *                        or {@link #LOCK_OBTAIN_WAIT_FOREVER} to retry forever.
-   * @param pollInterval    poll once per this interval in milliseconds until
-   *                        {@code lockWaitTimeout} is exceeded.
-   */
-  public SleepingLockWrapper(Directory delegate, long lockWaitTimeout, long pollInterval) {
-    super(delegate);
-    this.lockWaitTimeout = lockWaitTimeout;
-    this.pollInterval = pollInterval;
-    if (lockWaitTimeout < 0 && lockWaitTimeout != LOCK_OBTAIN_WAIT_FOREVER) {
-      throw new IllegalArgumentException("lockWaitTimeout should be LOCK_OBTAIN_WAIT_FOREVER or a non-negative number (got " + lockWaitTimeout + ")");
-    }
-    if (pollInterval < 0) {
-      throw new IllegalArgumentException("pollInterval must be a non-negative number (got " + pollInterval + ")");
-    }
-  }
-
-  @Override
-  public Lock obtainLock(String lockName) throws IOException {
-    LockObtainFailedException failureReason = null;
-    long maxSleepCount = lockWaitTimeout / pollInterval;
-    long sleepCount = 0;
-    
-    do {
-      try {
-        return in.obtainLock(lockName);
-      } catch (LockObtainFailedException failed) {
-        if (failureReason == null) {
-          failureReason = failed;
-        }
-      }
-      try {
-        Thread.sleep(pollInterval);
-      } catch (InterruptedException ie) {
-        throw new ThreadInterruptedException(ie);
-      }
-    } while (sleepCount++ < maxSleepCount || lockWaitTimeout == LOCK_OBTAIN_WAIT_FOREVER);
-    
-    // we failed to obtain the lock in the required time
-    String reason = "Lock obtain timed out: " + this.toString();
-    if (failureReason != null) {
-      reason += ": " + failureReason;
-    }
-    throw new LockObtainFailedException(reason, failureReason);
-  }
-
-  @Override
-  public String toString() {
-    return "SleepingLockWrapper(" + in + ")";
-  }
-}
Index: lucene/core/src/java/org/apache/lucene/store/SleepingLockWrapper.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/store/SleepingLockWrapper.java	(revision 1685193)
+++ lucene/core/src/java/org/apache/lucene/store/SleepingLockWrapper.java	(working copy)
@@ -1,4 +1,4 @@
-package org.apache.lucene.index;
+package org.apache.lucene.store;
 
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
@@ -19,10 +19,6 @@
 
 import java.io.IOException;
 
-import org.apache.lucene.store.Directory;
-import org.apache.lucene.store.FilterDirectory;
-import org.apache.lucene.store.Lock;
-import org.apache.lucene.store.LockObtainFailedException;
 import org.apache.lucene.util.ThreadInterruptedException;
 
 /** 
@@ -31,7 +27,7 @@
  * <p>
  * This is not a good idea.
  */
-final class SleepingLockWrapper extends FilterDirectory {
+public final class SleepingLockWrapper extends FilterDirectory {
  
   /** 
    * Pass this lockWaitTimeout to try forever to obtain the lock. 
Index: lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig.java	(revision 1685193)
+++ lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig.java	(working copy)
@@ -63,8 +63,7 @@
     assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());
     // we don't need to assert this, it should be unspecified
     assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());
-    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());
-    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());
+    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.WRITE_LOCK_TIMEOUT);
     assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());
     assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);
     assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());
@@ -179,7 +178,7 @@
   @Test
   public void testConstants() throws Exception {
     // Tests that the values of the constants does not change
-    assertEquals(1000, IndexWriterConfig.WRITE_LOCK_TIMEOUT);
+    assertEquals(0, IndexWriterConfig.WRITE_LOCK_TIMEOUT);
     assertEquals(-1, IndexWriterConfig.DISABLE_AUTO_FLUSH);
     assertEquals(IndexWriterConfig.DISABLE_AUTO_FLUSH, IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS);
     assertEquals(IndexWriterConfig.DISABLE_AUTO_FLUSH, IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS);
Index: lucene/core/src/test/org/apache/lucene/index/TestSleepingLockWrapper.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestSleepingLockWrapper.java	(revision 1685193)
+++ lucene/core/src/test/org/apache/lucene/index/TestSleepingLockWrapper.java	(working copy)
@@ -1,49 +0,0 @@
-package org.apache.lucene.index;
-
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import java.io.IOException;
-import java.nio.file.Path;
-
-import org.apache.lucene.index.SleepingLockWrapper;
-import org.apache.lucene.store.BaseLockFactoryTestCase;
-import org.apache.lucene.store.Directory;
-import org.apache.lucene.store.SingleInstanceLockFactory;
-import org.apache.lucene.util.TestUtil;
-
-/** Simple tests for SleepingLockWrapper */
-public class TestSleepingLockWrapper extends BaseLockFactoryTestCase {
-
-  @Override
-  protected Directory getDirectory(Path path) throws IOException {
-    long lockWaitTimeout = TestUtil.nextLong(random(), 20, 100);
-    long pollInterval = TestUtil.nextLong(random(), 2, 10);
-    
-    int which = random().nextInt(3);
-    switch (which) {
-      case 0:
-        return new SleepingLockWrapper(newDirectory(random(), new SingleInstanceLockFactory()), lockWaitTimeout, pollInterval);
-      case 1:
-        return new SleepingLockWrapper(newFSDirectory(path), lockWaitTimeout, pollInterval);
-      default:
-        return new SleepingLockWrapper(newFSDirectory(path), lockWaitTimeout, pollInterval);
-    }
-  }
-  
-  // TODO: specific tests to this impl
-}
Index: lucene/core/src/test/org/apache/lucene/store/TestSleepingLockWrapper.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/store/TestSleepingLockWrapper.java	(revision 1685193)
+++ lucene/core/src/test/org/apache/lucene/store/TestSleepingLockWrapper.java	(working copy)
@@ -1,4 +1,4 @@
-package org.apache.lucene.index;
+package org.apache.lucene.store;
 
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
@@ -20,10 +20,10 @@
 import java.io.IOException;
 import java.nio.file.Path;
 
-import org.apache.lucene.index.SleepingLockWrapper;
 import org.apache.lucene.store.BaseLockFactoryTestCase;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.SingleInstanceLockFactory;
+import org.apache.lucene.store.SleepingLockWrapper;
 import org.apache.lucene.util.TestUtil;
 
 /** Simple tests for SleepingLockWrapper */
