Index: lucene/core/src/java/org/apache/lucene/document/FieldType.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/document/FieldType.java	(revision 1673766)
+++ lucene/core/src/java/org/apache/lucene/document/FieldType.java	(working copy)
@@ -68,8 +68,9 @@
     this.storeTermVectorPayloads = ref.storeTermVectorPayloads();
     this.omitNorms = ref.omitNorms();
     this.indexOptions = ref.indexOptions();
+    this.numericType = ref.numericType();
+    this.numericPrecisionStep = ref.numericPrecisionStep();
     this.docValuesType = ref.docValuesType();
-    this.numericType = ref.numericType();
     // Do not copy frozen!
   }
   
Index: lucene/core/src/test/org/apache/lucene/document/TestFieldType.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/document/TestFieldType.java	(revision 1673766)
+++ lucene/core/src/test/org/apache/lucene/document/TestFieldType.java	(working copy)
@@ -17,11 +17,16 @@
  * limitations under the License.
  */
 
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+
 import org.apache.lucene.document.FieldType.NumericType;
 import org.apache.lucene.index.DocValuesType;
 import org.apache.lucene.index.IndexOptions;
 import org.apache.lucene.util.LuceneTestCase;
 
+import com.carrotsearch.randomizedtesting.generators.RandomPicks;
+
 /** simple testcases for concrete impl of IndexableFieldType */
 public class TestFieldType extends LuceneTestCase {
   
@@ -65,6 +70,40 @@
     FieldType ft10 = new FieldType();
     ft10.setStoreTermVectors(true);
     assertFalse(ft10.equals(ft));
+  }
 
+  private static Object randomValue(Class<?> clazz) {
+    if (clazz.isEnum()) {
+      return RandomPicks.randomFrom(random(), clazz.getEnumConstants());
+    } else if (clazz == boolean.class) {
+      return random().nextBoolean();
+    } else if (clazz == int.class) {
+      return 1 + random().nextInt(100);
+    }
+    throw new AssertionError("Don't know how to generate a " + clazz);
   }
+
+  private static FieldType randomFieldType() throws Exception {
+    FieldType ft = new FieldType();
+    for (Method method : FieldType.class.getMethods()) {
+      if ((method.getModifiers() & Modifier.PUBLIC) != 0 && method.getName().startsWith("set")) {
+        final Class<?>[] parameterTypes = method.getParameterTypes();
+        final Object[] args = new Object[parameterTypes.length];
+        for (int i = 0; i < args.length; ++i) {
+          args[i] = randomValue(parameterTypes[i]);
+        }
+        method.invoke(ft, args);
+      }
+    }
+    return ft;
+  }
+
+  public void testCopyConstructor() throws Exception {
+    final int iters = 10;
+      for (int iter = 0; iter < iters; ++iter) {
+      FieldType ft = randomFieldType();
+      FieldType ft2 = new FieldType(ft);
+      assertEquals(ft, ft2);
+    }
+  }
 }
