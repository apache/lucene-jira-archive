# This patch file was generated by NetBeans IDE
# Following Index: paths are relative to: /data/home/hlavki/develop/workspaces/lucene/dev
# This patch can be applied using context Tools: Patch action on respective folder.
# It uses platform neutral UTF-8 encoding and \n newlines.
# Above lines and this line are ignored by the patching process.
Index: .gitignore
MIME: application/octet-stream; encoding: Base64; length: 7284
IyBoZGZzCi9zb2xyL2V4YW1wbGUvaGRmcwoqLmphcgoKIyAuCi9lY2xpcHNl
LWJ1aWxkCi9jbGFzc2VzCi9idWlsZAovaWRlYS1idWlsZAovZGlzdAovKn4K
L3ZlbG9jaXR5LmxvZwovYnVpbGQucHJvcGVydGllcwovLmlkZWEKKi5pbWwK
LyouaXByCi8qLml3cwovLnByb2plY3QKLy5jbGFzc3BhdGgKLy5zZXR0aW5n
cwovLmNhY2hlcwovcHJqLmVsCi9iaW4KL2Jpbi4qCi9wb20ueG1sCi9uYnBy
b2plY3QKL25iLWJ1aWxkCgoKIyAuL2x1Y2VuZQovbHVjZW5lL2J1aWxkCi9s
dWNlbmUvZGlzdAovbHVjZW5lLyp+Ci9sdWNlbmUvdmVsb2NpdHkubG9nCi9s
dWNlbmUvYnVpbGQucHJvcGVydGllcwovbHVjZW5lLy5pZGVhCi9sdWNlbmUv
Ki5pbWwKL2x1Y2VuZS8qLmlwcgovbHVjZW5lLyouaXdzCi9sdWNlbmUvLnBy
b2plY3QKL2x1Y2VuZS8uY2xhc3NwYXRoCi9sdWNlbmUvLnNldHRpbmdzCi9s
dWNlbmUvcHJqLmVsCi9sdWNlbmUvcG9tLnhtbAoKCiMgLi9sdWNlbmUvY29y
ZQovbHVjZW5lL2NvcmUvKi5pbWwKL2x1Y2VuZS9jb3JlL3BvbS54bWwKCgoj
IC4vbHVjZW5lL2NvcmUvc3JjL2phdmEvb3JnL2FwYWNoZS9sdWNlbmUvdXRp
bC9hdXRvbWF0b24KL2x1Y2VuZS9jb3JlL3NyYy9qYXZhL29yZy9hcGFjaGUv
bHVjZW5lL3V0aWwvYXV0b21hdG9uL21vbWFuCgoKIyAuL2x1Y2VuZS90ZXN0
LWZyYW1ld29yawovbHVjZW5lL3Rlc3QtZnJhbWV3b3JrLyouaW1sCi9sdWNl
bmUvdGVzdC1mcmFtZXdvcmsvcG9tLnhtbAoKCiMgLi9sdWNlbmUvY29udHJp
YgovbHVjZW5lL2NvbnRyaWIvYnVpbGQKL2x1Y2VuZS9jb250cmliL2Rpc3QK
L2x1Y2VuZS9jb250cmliL3BvbS54bWwKCgojIC4vbHVjZW5lL2NvbnRyaWIv
bWlzYwovbHVjZW5lL2NvbnRyaWIvbWlzYy8qLmltbAovbHVjZW5lL2NvbnRy
aWIvbWlzYy9wb20ueG1sCgoKIyAuL2x1Y2VuZS9jb250cmliL21lbW9yeQov
bHVjZW5lL2NvbnRyaWIvbWVtb3J5LyouaW1sCi9sdWNlbmUvY29udHJpYi9t
ZW1vcnkvcG9tLnhtbAoKCiMgLi9sdWNlbmUvY29udHJpYi9zcGF0aWFsCi9s
dWNlbmUvY29udHJpYi9zcGF0aWFsLyouaW1sCi9sdWNlbmUvY29udHJpYi9z
cGF0aWFsL3BvbS54bWwKCgojIC4vbHVjZW5lL2NvbnRyaWIvc2FuZGJveAov
bHVjZW5lL2NvbnRyaWIvc2FuZGJveC9wb20ueG1sCi9sdWNlbmUvY29udHJp
Yi9zYW5kYm94LyouaW1sCgoKIyAuL2x1Y2VuZS9jb250cmliL2hpZ2hsaWdo
dGVyCi9sdWNlbmUvY29udHJpYi9oaWdobGlnaHRlci8qLmltbAovbHVjZW5l
L2NvbnRyaWIvaGlnaGxpZ2h0ZXIvcG9tLnhtbAoKCiMgLi9sdWNlbmUvY29u
dHJpYi9kZW1vCi9sdWNlbmUvY29udHJpYi9kZW1vLyouaW1sCi9sdWNlbmUv
Y29udHJpYi9kZW1vL3BvbS54bWwKCgojIC4vc29scgovc29sci9idWlsZAov
c29sci9kaXN0Ci9zb2xyLy5wcm9qZWN0Ci9zb2xyLy5jbGFzc3BhdGgKL3Nv
bHIvLnNldHRpbmdzCi9zb2xyL2Jpbgovc29sci90YXJnZXQKL3NvbHIvbHVr
ZQovc29sci9sdWNlbmUtbGlicwovc29sci9idWlsZC5wcm9wZXJ0aWVzCi9z
b2xyLyouaW1sCi9zb2xyL3BvbS54bWwKL3NvbHIvcGFja2FnZQoKCiMgLi9z
b2xyL3NvbHJqCi9zb2xyL3NvbHJqL3BvbS54bWwKCgojIC4vc29sci9zb2xy
ai9zcmMvamF2YQovc29sci9zb2xyai9zcmMvamF2YS9wb20ueG1sCgoKIyAu
L3NvbHIvY29yZQovc29sci9jb3JlL3BvbS54bWwKCgojIC4vc29sci9jb3Jl
L3NyYy90ZXN0LWZpbGVzL3NvbHIKL3NvbHIvY29yZS9zcmMvdGVzdC1maWxl
cy9zb2xyL2RhdGEKCgojIC4vc29sci9leGFtcGxlL3dlYmFwcHMKL3NvbHIv
ZXhhbXBsZS93ZWJhcHBzLyoKCgojIC4vc29sci9leGFtcGxlL2xvZ3MKL3Nv
bHIvZXhhbXBsZS9sb2dzLyoubG9nCgoKIyAuL3NvbHIvZXhhbXBsZS9zb2xy
Ci9zb2xyL2V4YW1wbGUvc29sci9kYXRhCi9zb2xyL2V4YW1wbGUvc29sci9s
aWIKL3NvbHIvZXhhbXBsZS9zb2xyL2xvZ3MKL3NvbHIvZXhhbXBsZS9zb2xy
L3pvb19kYXRhCgoKIyAuL3NvbHIvZXhhbXBsZS9zb2xyL2Jpbgovc29sci9l
eGFtcGxlL3NvbHIvYmluLyoKCgojIC4vc29sci9leGFtcGxlL3dvcmsKL3Nv
bHIvZXhhbXBsZS93b3JrLyoKCgojIC4vc29sci9leGFtcGxlL2V4YW1wbGVk
b2NzCi9zb2xyL2V4YW1wbGUvZXhhbXBsZWRvY3MvcG9zdC5qYXIKCgojIC4v
c29sci9leGFtcGxlL211bHRpY29yZS9jb3JlMQovc29sci9leGFtcGxlL211
bHRpY29yZS9jb3JlMS9kYXRhCgoKIyAuL3NvbHIvZXhhbXBsZS9tdWx0aWNv
cmUvY29yZTAKL3NvbHIvZXhhbXBsZS9tdWx0aWNvcmUvY29yZTAvZGF0YQoK
CiMgLi9zb2xyL2V4YW1wbGUvZXhhbXBsZS1ESUgvc29sci9yc3MKL3NvbHIv
ZXhhbXBsZS9leGFtcGxlLURJSC9zb2xyL3Jzcy9kYXRhCgoKIyAuL3NvbHIv
ZXhhbXBsZS9leGFtcGxlLURJSC9zb2xyL3Jzcy9jb25mCi9zb2xyL2V4YW1w
bGUvZXhhbXBsZS1ESUgvc29sci9yc3MvY29uZi9kYXRhaW1wb3J0LnByb3Bl
cnRpZXMKCgojIC4vc29sci9leGFtcGxlL2V4YW1wbGUtRElIL3NvbHIvbWFp
bAovc29sci9leGFtcGxlL2V4YW1wbGUtRElIL3NvbHIvbWFpbC9kYXRhCgoK
IyAuL3NvbHIvZXhhbXBsZS9leGFtcGxlLURJSC9zb2xyL21haWwvbGliCi9z
b2xyL2V4YW1wbGUvZXhhbXBsZS1ESUgvc29sci9tYWlsL2xpYi8qLmphcgoK
CiMgLi9zb2xyL2V4YW1wbGUvZXhhbXBsZS1ESUgvc29sci9kYgovc29sci9l
eGFtcGxlL2V4YW1wbGUtRElIL3NvbHIvZGIvZGF0YQoKCiMgLi9zb2xyL2V4
YW1wbGUvZXhhbXBsZS1ESUgvc29sci9kYi9jb25mCi9zb2xyL2V4YW1wbGUv
ZXhhbXBsZS1ESUgvc29sci9kYi9jb25mL2RhdGFpbXBvcnQucHJvcGVydGll
cwoKCiMgLi9zb2xyL2V4YW1wbGUvZXhhbXBsZS1ESUgvc29sci90aWthCi9z
b2xyL2V4YW1wbGUvZXhhbXBsZS1ESUgvc29sci90aWthL2RhdGEKCgojIC4v
c29sci9zaXRlLXNyYwovc29sci9zaXRlLXNyYy9idWlsZAoKCiMgLi9zb2xy
L3dlYmFwcAovc29sci93ZWJhcHAvcG9tLnhtbAoKCiMgLi9zb2xyL3Rlc3Qt
ZnJhbWV3b3JrCi9zb2xyL3Rlc3QtZnJhbWV3b3JrL3BvbS54bWwKCgojIC4v
c29sci9jb250cmliCi9zb2xyL2NvbnRyaWIvcG9tLnhtbAoKCiMgLi9zb2xy
L2NvbnRyaWIvY2x1c3RlcmluZwovc29sci9jb250cmliL2NsdXN0ZXJpbmcv
YnVpbGQKL3NvbHIvY29udHJpYi9jbHVzdGVyaW5nLyouaW1sCi9zb2xyL2Nv
bnRyaWIvY2x1c3RlcmluZy9wb20ueG1sCgoKIyAuL3NvbHIvY29udHJpYi9j
bHVzdGVyaW5nL2xpYgovc29sci9jb250cmliL2NsdXN0ZXJpbmcvbGliL3Bj
ai0qCi9zb2xyL2NvbnRyaWIvY2x1c3RlcmluZy9saWIvc2ltcGxlLXhtbC0q
Ci9zb2xyL2NvbnRyaWIvY2x1c3RlcmluZy9saWIvY29sdC0qCi9zb2xyL2Nv
bnRyaWIvY2x1c3RlcmluZy9saWIvbm5pLSoKL3NvbHIvY29udHJpYi9jbHVz
dGVyaW5nL2xpYi9kb3dubG9hZHMKCgojIC4vc29sci9jb250cmliL3VpbWEK
L3NvbHIvY29udHJpYi91aW1hL2J1aWxkCi9zb2xyL2NvbnRyaWIvdWltYS8q
LmltbAovc29sci9jb250cmliL3VpbWEvcG9tLnhtbAoKCiMgLi9zb2xyL2Nv
bnRyaWIvdmVsb2NpdHkKL3NvbHIvY29udHJpYi92ZWxvY2l0eS8qLmltbAov
c29sci9jb250cmliL3ZlbG9jaXR5L3BvbS54bWwKCgojIC4vc29sci9jb250
cmliL2V4dHJhY3Rpb24KL3NvbHIvY29udHJpYi9leHRyYWN0aW9uL2J1aWxk
Ci9zb2xyL2NvbnRyaWIvZXh0cmFjdGlvbi8qLmltbAovc29sci9jb250cmli
L2V4dHJhY3Rpb24vcG9tLnhtbAoKCiMgLi9zb2xyL2NvbnRyaWIvYW5hbHlz
aXMtZXh0cmFzCi9zb2xyL2NvbnRyaWIvYW5hbHlzaXMtZXh0cmFzL2J1aWxk
Ci9zb2xyL2NvbnRyaWIvYW5hbHlzaXMtZXh0cmFzL2x1Y2VuZS1saWJzCi9z
b2xyL2NvbnRyaWIvYW5hbHlzaXMtZXh0cmFzLyouaW1sCi9zb2xyL2NvbnRy
aWIvYW5hbHlzaXMtZXh0cmFzL3BvbS54bWwKCgojIC4vc29sci9jb250cmli
L2xhbmdpZAovc29sci9jb250cmliL2xhbmdpZC8qLmltbAovc29sci9jb250
cmliL2xhbmdpZC9wb20ueG1sCgoKIyAuL3NvbHIvY29udHJpYi9kYXRhaW1w
b3J0aGFuZGxlci1leHRyYXMKL3NvbHIvY29udHJpYi9kYXRhaW1wb3J0aGFu
ZGxlci1leHRyYXMvKi5pbWwKL3NvbHIvY29udHJpYi9kYXRhaW1wb3J0aGFu
ZGxlci1leHRyYXMvcG9tLnhtbAoKCiMgLi9zb2xyL2NvbnRyaWIvZGF0YWlt
cG9ydGhhbmRsZXItZXh0cmFzL3NyYy90ZXN0LWZpbGVzL2RpaGV4dHJhcy9z
b2xyL2NvbmYKL3NvbHIvY29udHJpYi9kYXRhaW1wb3J0aGFuZGxlci1leHRy
YXMvc3JjL3Rlc3QtZmlsZXMvZGloZXh0cmFzL3NvbHIvY29uZi9kYXRhaW1w
b3J0LnByb3BlcnRpZXMKCgojIC4vc29sci9jb250cmliL2RhdGFpbXBvcnRo
YW5kbGVyCi9zb2xyL2NvbnRyaWIvZGF0YWltcG9ydGhhbmRsZXIvdGFyZ2V0
Ci9zb2xyL2NvbnRyaWIvZGF0YWltcG9ydGhhbmRsZXIvKi5pbWwKL3NvbHIv
Y29udHJpYi9kYXRhaW1wb3J0aGFuZGxlci9wb20ueG1sCgoKIyAuL3NvbHIv
Y29udHJpYi9kYXRhaW1wb3J0aGFuZGxlci9zcmMKL3NvbHIvY29udHJpYi9k
YXRhaW1wb3J0aGFuZGxlci9zcmMvcG9tLnhtbAoKCiMgLi9zb2xyL2NvbnRy
aWIvZGF0YWltcG9ydGhhbmRsZXIvc3JjL3Rlc3QtZmlsZXMKL3NvbHIvY29u
dHJpYi9kYXRhaW1wb3J0aGFuZGxlci9zcmMvdGVzdC1maWxlcy9kYXRhaW1w
b3J0LnByb3BlcnRpZXMKCgojIC4vc29sci9jb250cmliL2RhdGFpbXBvcnRo
YW5kbGVyL3NyYy90ZXN0LWZpbGVzL2RpaC9zb2xyL2NvbmYKL3NvbHIvY29u
dHJpYi9kYXRhaW1wb3J0aGFuZGxlci9zcmMvdGVzdC1maWxlcy9kaWgvc29s
ci9jb25mL2RhdGFpbXBvcnQucHJvcGVydGllcwoKCiMgLi9tb2R1bGVzCi9t
b2R1bGVzL2J1aWxkCi9tb2R1bGVzL2Rpc3QKL21vZHVsZXMvcG9tLnhtbAoK
CiMgLi9tb2R1bGVzL2ZhY2V0Ci9tb2R1bGVzL2ZhY2V0L2J1aWxkCi9tb2R1
bGVzL2ZhY2V0L2Rpc3QKL21vZHVsZXMvZmFjZXQvKi5pbWwKL21vZHVsZXMv
ZmFjZXQvcG9tLnhtbAoKCiMgLi9tb2R1bGVzL2JlbmNobWFyawovbW9kdWxl
cy9iZW5jaG1hcmsvdGVtcAovbW9kdWxlcy9iZW5jaG1hcmsvd29yawovbW9k
dWxlcy9iZW5jaG1hcmsvYnVpbGQKL21vZHVsZXMvYmVuY2htYXJrLyouaW1s
Ci9tb2R1bGVzL2JlbmNobWFyay9wb20ueG1sCgoKIyAuL21vZHVsZXMvZ3Jv
dXBpbmcKL21vZHVsZXMvZ3JvdXBpbmcvYnVpbGQKL21vZHVsZXMvZ3JvdXBp
bmcvZGlzdAovbW9kdWxlcy9ncm91cGluZy8qLmltbAovbW9kdWxlcy9ncm91
cGluZy9wb20ueG1sCgoKIyAuL21vZHVsZXMvc3BhdGlhbAovbW9kdWxlcy9z
cGF0aWFsL2J1aWxkCi9tb2R1bGVzL3NwYXRpYWwvcG9tLnhtbAovbW9kdWxl
cy9zcGF0aWFsLyouaW1sCgoKIyAuL21vZHVsZXMvYW5hbHlzaXMKL21vZHVs
ZXMvYW5hbHlzaXMvYnVpbGQKL21vZHVsZXMvYW5hbHlzaXMvcG9tLnhtbAoK
CiMgLi9tb2R1bGVzL2FuYWx5c2lzL2ljdQovbW9kdWxlcy9hbmFseXNpcy9p
Y3UvKi5pbWwKL21vZHVsZXMvYW5hbHlzaXMvaWN1L3BvbS54bWwKCgojIC4v
bW9kdWxlcy9hbmFseXNpcy91aW1hCi9tb2R1bGVzL2FuYWx5c2lzL3VpbWEv
Ki5pbWwKL21vZHVsZXMvYW5hbHlzaXMvdWltYS9wb20ueG1sCgoKIyAuL21v
ZHVsZXMvYW5hbHlzaXMvbW9yZm9sb2dpawovbW9kdWxlcy9hbmFseXNpcy9t
b3Jmb2xvZ2lrLyouaW1sCi9tb2R1bGVzL2FuYWx5c2lzL21vcmZvbG9naWsv
cG9tLnhtbAoKCiMgLi9tb2R1bGVzL2FuYWx5c2lzL2NvbW1vbgovbW9kdWxl
cy9hbmFseXNpcy9jb21tb24vKi5pbWwKL21vZHVsZXMvYW5hbHlzaXMvY29t
bW9uL3BvbS54bWwKCgojIC4vbW9kdWxlcy9hbmFseXNpcy9jb21tb24vc3Jj
L2phdmEvb3JnL2FwYWNoZS9sdWNlbmUvYW5hbHlzaXMvc3RhbmRhcmQKL21v
ZHVsZXMvYW5hbHlzaXMvY29tbW9uL3NyYy9qYXZhL29yZy9hcGFjaGUvbHVj
ZW5lL2FuYWx5c2lzL3N0YW5kYXJkL1Rva2VuLmphdmEKL21vZHVsZXMvYW5h
bHlzaXMvY29tbW9uL3NyYy9qYXZhL29yZy9hcGFjaGUvbHVjZW5lL2FuYWx5
c2lzL3N0YW5kYXJkL1N0YW5kYXJkVG9rZW5pemVyLmphdmEKL21vZHVsZXMv
YW5hbHlzaXMvY29tbW9uL3NyYy9qYXZhL29yZy9hcGFjaGUvbHVjZW5lL2Fu
YWx5c2lzL3N0YW5kYXJkL1N0YW5kYXJkVG9rZW5pemVyVG9rZW5NYW5hZ2Vy
LmphdmEKL21vZHVsZXMvYW5hbHlzaXMvY29tbW9uL3NyYy9qYXZhL29yZy9h
cGFjaGUvbHVjZW5lL2FuYWx5c2lzL3N0YW5kYXJkL1Rva2VuTWdyRXJyb3Iu
amF2YQovbW9kdWxlcy9hbmFseXNpcy9jb21tb24vc3JjL2phdmEvb3JnL2Fw
YWNoZS9sdWNlbmUvYW5hbHlzaXMvc3RhbmRhcmQvQ2hhclN0cmVhbS5qYXZh
Ci9tb2R1bGVzL2FuYWx5c2lzL2NvbW1vbi9zcmMvamF2YS9vcmcvYXBhY2hl
L2x1Y2VuZS9hbmFseXNpcy9zdGFuZGFyZC9TdGFuZGFyZFRva2VuaXplckNv
bnN0YW50cy5qYXZhCgoKIyAuL21vZHVsZXMvYW5hbHlzaXMvc3RlbXBlbAov
bW9kdWxlcy9hbmFseXNpcy9zdGVtcGVsLyouaW1sCi9tb2R1bGVzL2FuYWx5
c2lzL3N0ZW1wZWwvcG9tLnhtbAoKCiMgLi9tb2R1bGVzL2FuYWx5c2lzL3Bo
b25ldGljCi9tb2R1bGVzL2FuYWx5c2lzL3Bob25ldGljLyouaW1sCi9tb2R1
bGVzL2FuYWx5c2lzL3Bob25ldGljL3BvbS54bWwKCgojIC4vbW9kdWxlcy9h
bmFseXNpcy9zbWFydGNuCi9tb2R1bGVzL2FuYWx5c2lzL3NtYXJ0Y24vKi5p
bWwKL21vZHVsZXMvYW5hbHlzaXMvc21hcnRjbi9wb20ueG1sCgoKIyAuL21v
ZHVsZXMvYW5hbHlzaXMva3Vyb21vamkKL21vZHVsZXMvYW5hbHlzaXMva3Vy
b21vamkvKi5pbWwKL21vZHVsZXMvYW5hbHlzaXMva3Vyb21vamkvcG9tLnht
bAoKCiMgLi9tb2R1bGVzL3F1ZXJpZXMKL21vZHVsZXMvcXVlcmllcy9idWls
ZAovbW9kdWxlcy9xdWVyaWVzL3BvbS54bWwKL21vZHVsZXMvcXVlcmllcy8q
LmltbAoKCiMgLi9tb2R1bGVzL2pvaW4KL21vZHVsZXMvam9pbi9idWlsZAov
bW9kdWxlcy9qb2luL2Rpc3QKL21vZHVsZXMvam9pbi8qLmltbAovbW9kdWxl
cy9qb2luL3BvbS54bWwKCgojIC4vbW9kdWxlcy9xdWVyeXBhcnNlcgovbW9k
dWxlcy9xdWVyeXBhcnNlci9wb20ueG1sCi9tb2R1bGVzL3F1ZXJ5cGFyc2Vy
LyouaW1sCi9tb2R1bGVzL3F1ZXJ5cGFyc2VyL2J1aWxkCgoKIyAuL21vZHVs
ZXMvc3VnZ2VzdAovbW9kdWxlcy9zdWdnZXN0L2J1aWxkCi9tb2R1bGVzL3N1
Z2dlc3QvKi5pbWwKL21vZHVsZXMvc3VnZ2VzdC9wb20ueG1sCi9tb2R1bGVz
L3N1Z2dlc3QvZGlzdAoKL21vZHVsZXMvc3BhdGlhbC9idWlsZC8K
Index: build.xml
--- build.xml Base (BASE)
+++ build.xml Locally Modified (Based On LOCAL)
@@ -191,6 +191,47 @@
     </delete>
   </target>
 
+  <target name="netbeans" depends="resolve" description="Setup Netbeans configuration">
+    <pathconvert property="netbeans.fileset.sourcefolders" pathsep="|" dirsep="/">
+      <dirset dir="${basedir}/lucene" includes="**/src/java, **/src/examples" excludes="tools/**, build/**, backwards/**" />
+      <dirset dir="${basedir}/solr" includes="**/src/java, **/src/examples" excludes="build/**" />
+      <map from="${basedir}/" to=""/>
+    </pathconvert>
+    <pathconvert property="netbeans.fileset.testfolders" pathsep="|" dirsep="/">
+      <dirset dir="${basedir}/lucene" includes="**/src/test" excludes="tools/**, build/**, backwards/**" />
+      <dirset dir="${basedir}/solr" includes="**/src/test" excludes="build/**" />
+      <map from="${basedir}/" to=""/>
+    </pathconvert>
+    <pathconvert property="netbeans.fileset.resourcefolders" pathsep="|" dirsep="/">
+      <dirset dir="${basedir}/lucene" includes="**/src/resources" excludes="tools/**, build/**, backwards/**" />
+      <dirset dir="${basedir}/solr" includes="**/src/resources" excludes="build/**" />
+      <map from="${basedir}/" to=""/>
+    </pathconvert>
+
+      <pathconvert property="netbeans.fileset.libs" pathsep="|" dirsep="/">
+      <fileset dir="${basedir}/lucene" includes="**/lib/*.jar" excludes="**/*servlet-api*.jar, analysis/uima/**, tools/**, build/**"/>
+      <fileset dir="${basedir}/solr" includes="**/test-lib/*.jar,**/lib/*.jar" excludes="core/test-lib/*servlet-api*.jar, contrib/analysis-extras/**, test-framework/lib/junit*, test-framework/lib/ant*, test-framework/lib/randomizedtesting*, build/**, dist/**, package/**" />
+      <map from="${basedir}/" to=""/>
+    </pathconvert>
+      
+    <mkdir dir="nbproject"/>
+    <xslt in="${ant.file}" out="nbproject/project.xml" style="dev-tools/netbeans/nb-project.xsl" force="true">
+      <outputproperty name="indent" value="yes"/>
+      <param name="netbeans.fileset.sourcefolders" expression="${netbeans.fileset.sourcefolders}"/>
+      <param name="netbeans.fileset.testfolders" expression="${netbeans.fileset.testfolders}"/>
+      <param name="netbeans.fileset.resourcefolders" expression="${netbeans.fileset.resourcefolders}"/>
+      <param name="netbeans.fileset.libs" expression="${netbeans.fileset.libs}"/>
+    </xslt>
+  </target>
+
+  <target name="clean-netbeans" description="Removes all Netbeans configuration files">
+    <delete dir="nbproject" failonerror="true"/>
+    <delete failonerror="true">
+      <fileset dir="." includes=".classpath,.project"/>
+    </delete>
+    <delete dir="nb-build" failonerror="true"/>
+  </target>
+
   <target name="eclipse" depends="resolve" description="Setup Eclipse configuration">
     <basename file="${basedir}" property="eclipseprojectname"/>
       <copy file="dev-tools/eclipse/dot.project" tofile=".project" overwrite="false" encoding="UTF-8">
Index: dev-tools/netbeans/nb-project.xsl
--- dev-tools/netbeans/nb-project.xsl No Base Revision
+++ dev-tools/netbeans/nb-project.xsl Locally New
@@ -0,0 +1,280 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+  Licensed to the Apache Software Foundation (ASF) under one or more
+  contributor license agreements.  See the NOTICE file distributed with
+  this work for additional information regarding copyright ownership.
+  The ASF licenses this file to You under the Apache License, Version 2.0
+  (the "License"); you may not use this file except in compliance with
+  the License.  You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+  Unless required by applicable law or agreed to in writing, software
+  distributed under the License is distributed on an "AS IS" BASIS,
+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  See the License for the specific language governing permissions and
+  limitations under the License.
+-->
+<xsl:stylesheet version="1.0" 
+                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
+                xmlns:str="http://exslt.org/strings"
+                extension-element-prefixes="str">
+    <xsl:param name="netbeans.fileset.sourcefolders"/>
+    <xsl:param name="netbeans.fileset.testfolders"/>
+    <xsl:param name="netbeans.fileset.resourcefolders"/>
+    <xsl:param name="netbeans.fileset.libs"/>
+  
+
+    <!--
+      NOTE: This template matches the root element of any given input XML document!
+      The XSL input file is ignored completely.
+    --> 
+    <xsl:template match="/">
+        <project xmlns="http://www.netbeans.org/ns/project/1">
+            <type>org.netbeans.modules.ant.freeform</type>
+            <configuration>
+                <general-data xmlns="http://www.netbeans.org/ns/freeform-project/1">
+                    <name>lucene</name>
+                    <properties/>
+                    <folders>
+                        <xsl:for-each select="str:split($netbeans.fileset.sourcefolders,'|')">
+                            <!-- hack to sort the list, starts-with() returns "true" which sorts before "false" if descending: -->
+                            <xsl:sort select="string(starts-with(text(), 'lucene/core/'))" order="descending" lang="en"/>
+                            <xsl:sort select="string(starts-with(text(), 'lucene/test-framework/'))" order="descending" lang="en"/>
+                            <xsl:sort select="string(starts-with(text(), 'lucene/'))" order="descending" lang="en"/>
+                            <xsl:sort select="string(starts-with(text(), 'solr/core/'))" order="descending" lang="en"/>
+                            <xsl:sort select="string(starts-with(text(), 'solr/solrj/'))" order="descending" lang="en"/>
+                            <xsl:sort select="string(starts-with(text(), 'solr/test-framework/'))" order="descending" lang="en"/>
+                            <xsl:sort select="string(starts-with(text(), 'solr/'))" order="descending" lang="en"/>
+                            <!-- all others in one group above are sorted by path name: -->
+                            <xsl:sort select="text()" order="ascending" lang="en"/>
+                            <source-folder>
+                                <label>
+                                    <xsl:value-of select="."/>
+                                </label>
+                                <type>java</type>
+                                <location>
+                                    <xsl:value-of select="."/>
+                                </location>
+                            </source-folder>
+                        </xsl:for-each>
+                        <xsl:for-each select="str:split($netbeans.fileset.testfolders,'|')">
+                            <!-- hack to sort the list, starts-with() returns "true" which sorts before "false" if descending: -->
+                            <xsl:sort select="string(starts-with(text(), 'lucene/core/'))" order="descending" lang="en"/>
+                            <xsl:sort select="string(starts-with(text(), 'lucene/test-framework/'))" order="descending" lang="en"/>
+                            <xsl:sort select="string(starts-with(text(), 'lucene/'))" order="descending" lang="en"/>
+                            <xsl:sort select="string(starts-with(text(), 'solr/core/'))" order="descending" lang="en"/>
+                            <xsl:sort select="string(starts-with(text(), 'solr/solrj/'))" order="descending" lang="en"/>
+                            <xsl:sort select="string(starts-with(text(), 'solr/test-framework/'))" order="descending" lang="en"/>
+                            <xsl:sort select="string(starts-with(text(), 'solr/'))" order="descending" lang="en"/>
+                            <!-- all others in one group above are sorted by path name: -->
+                            <xsl:sort select="text()" order="ascending" lang="en"/>
+                            <source-folder>
+                                <label>
+                                    <xsl:value-of select="."/>
+                                </label>
+                                <type>java</type>
+                                <location>
+                                    <xsl:value-of select="."/>
+                                </location>
+                            </source-folder>
+                        </xsl:for-each>
+                        <xsl:for-each select="str:split($netbeans.fileset.resourcefolders,'|')">
+                            <!-- hack to sort the list, starts-with() returns "true" which sorts before "false" if descending: -->
+                            <xsl:sort select="string(starts-with(text(), 'lucene/core/'))" order="descending" lang="en"/>
+                            <xsl:sort select="string(starts-with(text(), 'lucene/test-framework/'))" order="descending" lang="en"/>
+                            <xsl:sort select="string(starts-with(text(), 'lucene/'))" order="descending" lang="en"/>
+                            <xsl:sort select="string(starts-with(text(), 'solr/core/'))" order="descending" lang="en"/>
+                            <xsl:sort select="string(starts-with(text(), 'solr/solrj/'))" order="descending" lang="en"/>
+                            <xsl:sort select="string(starts-with(text(), 'solr/test-framework/'))" order="descending" lang="en"/>
+                            <xsl:sort select="string(starts-with(text(), 'solr/'))" order="descending" lang="en"/>
+                            <!-- all others in one group above are sorted by path name: -->
+                            <xsl:sort select="text()" order="ascending" lang="en"/>
+                            <source-folder>
+                                <label>
+                                    <xsl:value-of select="."/>
+                                </label>
+                                <location>
+                                    <xsl:value-of select="."/>
+                                </location>
+                            </source-folder>
+                        </xsl:for-each>
+                    </folders>
+                    <ide-actions>
+                        <action name="build">
+                            <target>compile</target>
+                        </action>
+                        <action name="clean">
+                            <target>clean</target>
+                        </action>
+                        <action name="javadoc">
+                            <target>documentation</target>
+                        </action>
+                        <action name="test">
+                            <target>test</target>
+                        </action>
+                        <action name="rebuild">
+                            <target>clean</target>
+                            <target>compile</target>
+                        </action>
+                    </ide-actions>
+                    <view>
+                        <items>
+                            <xsl:for-each select="str:split($netbeans.fileset.sourcefolders,'|')">
+                                <!-- hack to sort the list, starts-with() returns "true" which sorts before "false" if descending: -->
+                                <xsl:sort select="string(starts-with(text(), 'lucene/core/'))" order="descending" lang="en"/>
+                                <xsl:sort select="string(starts-with(text(), 'lucene/test-framework/'))" order="descending" lang="en"/>
+                                <xsl:sort select="string(starts-with(text(), 'lucene/'))" order="descending" lang="en"/>
+                                <xsl:sort select="string(starts-with(text(), 'solr/core/'))" order="descending" lang="en"/>
+                                <xsl:sort select="string(starts-with(text(), 'solr/solrj/'))" order="descending" lang="en"/>
+                                <xsl:sort select="string(starts-with(text(), 'solr/test-framework/'))" order="descending" lang="en"/>
+                                <xsl:sort select="string(starts-with(text(), 'solr/'))" order="descending" lang="en"/>
+                                <!-- all others in one group above are sorted by path name: -->
+                                <xsl:sort select="text()" order="ascending" lang="en"/>
+                                <source-folder style="packages">
+                                    <label>
+                                        <xsl:value-of select="."/>
+                                    </label>
+                                    <location>
+                                        <xsl:value-of select="."/>
+                                    </location>
+                                </source-folder>
+                            </xsl:for-each>
+                            <xsl:for-each select="str:split($netbeans.fileset.testfolders,'|')">
+                                <!-- hack to sort the list, starts-with() returns "true" which sorts before "false" if descending: -->
+                                <xsl:sort select="string(starts-with(text(), 'lucene/core/'))" order="descending" lang="en"/>
+                                <xsl:sort select="string(starts-with(text(), 'lucene/test-framework/'))" order="descending" lang="en"/>
+                                <xsl:sort select="string(starts-with(text(), 'lucene/'))" order="descending" lang="en"/>
+                                <xsl:sort select="string(starts-with(text(), 'solr/core/'))" order="descending" lang="en"/>
+                                <xsl:sort select="string(starts-with(text(), 'solr/solrj/'))" order="descending" lang="en"/>
+                                <xsl:sort select="string(starts-with(text(), 'solr/test-framework/'))" order="descending" lang="en"/>
+                                <xsl:sort select="string(starts-with(text(), 'solr/'))" order="descending" lang="en"/>
+                                <!-- all others in one group above are sorted by path name: -->
+                                <xsl:sort select="text()" order="ascending" lang="en"/>
+                                <source-folder style="packages">
+                                    <label>
+                                        <xsl:value-of select="."/>
+                                    </label>
+                                    <location>
+                                        <xsl:value-of select="."/>
+                                    </location>
+                                </source-folder>
+                            </xsl:for-each>
+                            <xsl:for-each select="str:split($netbeans.fileset.resourcefolders,'|')">
+                                <!-- hack to sort the list, starts-with() returns "true" which sorts before "false" if descending: -->
+                                <xsl:sort select="string(starts-with(text(), 'lucene/core/'))" order="descending" lang="en"/>
+                                <xsl:sort select="string(starts-with(text(), 'lucene/test-framework/'))" order="descending" lang="en"/>
+                                <xsl:sort select="string(starts-with(text(), 'lucene/'))" order="descending" lang="en"/>
+                                <xsl:sort select="string(starts-with(text(), 'solr/core/'))" order="descending" lang="en"/>
+                                <xsl:sort select="string(starts-with(text(), 'solr/solrj/'))" order="descending" lang="en"/>
+                                <xsl:sort select="string(starts-with(text(), 'solr/test-framework/'))" order="descending" lang="en"/>
+                                <xsl:sort select="string(starts-with(text(), 'solr/'))" order="descending" lang="en"/>
+                                <!-- all others in one group above are sorted by path name: -->
+                                <xsl:sort select="text()" order="ascending" lang="en"/>
+                                <source-folder style="tree">
+                                    <label>
+                                        <xsl:value-of select="."/>
+                                    </label>
+                                    <location>
+                                        <xsl:value-of select="."/>
+                                    </location>
+                                </source-folder>
+                            </xsl:for-each>
+                            <source-file>
+                                <label>Project Build Script</label>
+                                <location>build.xml</location>
+                            </source-file>
+                        </items>
+                        <context-menu>
+                            <ide-action name="build"/>
+                            <ide-action name="rebuild"/>
+                            <ide-action name="clean"/>
+                            <ide-action name="javadoc"/>
+                            <ide-action name="test"/>
+                        </context-menu>
+                    </view>
+                    <subprojects/>
+                </general-data>
+                <java-data xmlns="http://www.netbeans.org/ns/freeform-project-java/3">
+                    <compilation-unit>
+                        <xsl:for-each select="str:split($netbeans.fileset.sourcefolders,'|')">
+                            <!-- hack to sort the list, starts-with() returns "true" which sorts before "false" if descending: -->
+                            <xsl:sort select="string(starts-with(text(), 'lucene/core/'))" order="descending" lang="en"/>
+                            <xsl:sort select="string(starts-with(text(), 'lucene/test-framework/'))" order="descending" lang="en"/>
+                            <xsl:sort select="string(starts-with(text(), 'lucene/'))" order="descending" lang="en"/>
+                            <xsl:sort select="string(starts-with(text(), 'solr/core/'))" order="descending" lang="en"/>
+                            <xsl:sort select="string(starts-with(text(), 'solr/solrj/'))" order="descending" lang="en"/>
+                            <xsl:sort select="string(starts-with(text(), 'solr/test-framework/'))" order="descending" lang="en"/>
+                            <xsl:sort select="string(starts-with(text(), 'solr/'))" order="descending" lang="en"/>
+                            <!-- all others in one group above are sorted by path name: -->
+                            <xsl:sort select="text()" order="ascending" lang="en"/>
+                            <package-root>
+                                <xsl:value-of select="."/>
+                            </package-root>
+                        </xsl:for-each>
+                        <classpath mode="compile">
+                            <xsl:for-each select="str:split($netbeans.fileset.libs,'|')">
+                                <!-- sort the jars by path name: -->
+                                <xsl:sort select="text()" order="ascending" lang="en"/>
+                                <xsl:value-of select="."/>
+                                <xsl:if test="not(position() = last())">
+                                    <xsl:text>:</xsl:text>
+                                </xsl:if>
+                            </xsl:for-each>
+                            <xsl:text>:</xsl:text>
+                            <xsl:for-each select="str:split($netbeans.fileset.sourcefolders,'|')">
+                                <!-- sort the jars by path name: -->
+                                <xsl:sort select="text()" order="ascending" lang="en"/>
+                                <xsl:value-of select="."/>
+                                <xsl:if test="not(position() = last())">
+                                    <xsl:text>:</xsl:text>
+                                </xsl:if>
+                            </xsl:for-each>
+                        </classpath>
+                        <built-to>nb-build/classes</built-to>
+                        <source-level>1.7</source-level>
+                    </compilation-unit>
+                    <compilation-unit>
+                        <xsl:for-each select="str:split($netbeans.fileset.testfolders,'|')">
+                            <!-- hack to sort the list, starts-with() returns "true" which sorts before "false" if descending: -->
+                            <xsl:sort select="string(starts-with(text(), 'lucene/core/'))" order="descending" lang="en"/>
+                            <xsl:sort select="string(starts-with(text(), 'lucene/test-framework/'))" order="descending" lang="en"/>
+                            <xsl:sort select="string(starts-with(text(), 'lucene/'))" order="descending" lang="en"/>
+                            <xsl:sort select="string(starts-with(text(), 'solr/core/'))" order="descending" lang="en"/>
+                            <xsl:sort select="string(starts-with(text(), 'solr/solrj/'))" order="descending" lang="en"/>
+                            <xsl:sort select="string(starts-with(text(), 'solr/test-framework/'))" order="descending" lang="en"/>
+                            <xsl:sort select="string(starts-with(text(), 'solr/'))" order="descending" lang="en"/>
+                            <!-- all others in one group above are sorted by path name: -->
+                            <xsl:sort select="text()" order="ascending" lang="en"/>
+                            <package-root>
+                                <xsl:value-of select="."/>
+                            </package-root>
+                        </xsl:for-each>
+                        <unit-tests/>
+                        <classpath mode="compile">
+                            <xsl:for-each select="str:split($netbeans.fileset.libs,'|')">
+                                <!-- sort the jars by path name: -->
+                                <xsl:sort select="text()" order="ascending" lang="en"/>
+                                <xsl:value-of select="."/>
+                                <xsl:if test="not(position() = last())">
+                                    <xsl:text>:</xsl:text>
+                                </xsl:if>
+                            </xsl:for-each>
+                            <xsl:text>:</xsl:text>
+                            <xsl:for-each select="str:split($netbeans.fileset.sourcefolders,'|')">
+                                <!-- sort the jars by path name: -->
+                                <xsl:sort select="text()" order="ascending" lang="en"/>
+                                <xsl:value-of select="."/>
+                                <xsl:if test="not(position() = last())">
+                                    <xsl:text>:</xsl:text>
+                                </xsl:if>
+                            </xsl:for-each>
+                        </classpath>
+                        <built-to>nb-build/test-classes</built-to>
+                        <source-level>1.7</source-level>
+                    </compilation-unit>
+                </java-data>
+            </configuration>
+        </project>
+    </xsl:template>
+</xsl:stylesheet>
