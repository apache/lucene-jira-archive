Index: lucene/analysis/common/src/java/org/apache/lucene/analysis/sinks/CapturedAttribute.java
===================================================================
--- lucene/analysis/common/src/java/org/apache/lucene/analysis/sinks/CapturedAttribute.java	(revision 0)
+++ lucene/analysis/common/src/java/org/apache/lucene/analysis/sinks/CapturedAttribute.java	(working copy)
@@ -0,0 +1,47 @@
+package org.apache.lucene.analysis.sinks;
+
+import org.apache.lucene.util.Attribute;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/** 
+ * Captures the previous state at another point in time in the stream 
+ * @lucene.internal NOT a public class, NOT for extension. only public because of how lucene's attributes work .*/
+public interface CapturedAttribute extends Attribute {
+  
+  /** Returns true if there is currently anything captured */
+  public boolean isEmpty();
+  
+  /** Gets the saved term text */
+  public char[] getBuffer();
+  
+  /** Gets the saved term length */
+  public int getLength();
+  
+  /** Sets the saved term text */
+  public void setBuffer(char text[], int length);
+
+  /** Gets the saved position increment */
+  public int getPositionIncrement();
+  
+  /** Set the saved position increment. */
+  public void setPositionIncrement(int positionIncrement);
+  
+  /** Clears all state */
+  public void clear();
+}
Index: lucene/analysis/common/src/java/org/apache/lucene/analysis/sinks/CapturedAttributeImpl.java
===================================================================
--- lucene/analysis/common/src/java/org/apache/lucene/analysis/sinks/CapturedAttributeImpl.java	(revision 0)
+++ lucene/analysis/common/src/java/org/apache/lucene/analysis/sinks/CapturedAttributeImpl.java	(working copy)
@@ -0,0 +1,90 @@
+package org.apache.lucene.analysis.sinks;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.util.ArrayUtil;
+import org.apache.lucene.util.AttributeImpl;
+import org.apache.lucene.util.AttributeReflector;
+
+/** 
+ * Simple implementation of CapturedAttribute 
+ * @lucene.internal NOT a public class, NOT for extension. only public because of how lucene's attributes work .*/
+public class CapturedAttributeImpl extends AttributeImpl implements CapturedAttribute {
+  private boolean empty = true;
+  private char buffer[] = new char[8];
+  private int bufferLength = 0;
+  private int positionIncrement = -1;
+  
+  @Override
+  public boolean isEmpty() {
+    return empty;
+  }
+
+  @Override
+  public char[] getBuffer() {
+    return buffer;
+  }
+
+  @Override
+  public int getLength() {
+    return bufferLength;
+  }
+
+  @Override
+  public void setBuffer(char[] text, int length) {
+    buffer = ArrayUtil.grow(buffer, length);
+    bufferLength = length;
+    System.arraycopy(text, 0, buffer, 0, length);
+    empty = false;
+  }
+
+  @Override
+  public int getPositionIncrement() {
+    return positionIncrement;
+  }
+
+  @Override
+  public void setPositionIncrement(int positionIncrement) {
+    this.positionIncrement = positionIncrement;
+  }
+
+  @Override
+  public void clear() {
+    empty = true;
+    positionIncrement = -1;
+  }
+
+  @Override
+  public void copyTo(AttributeImpl target) {
+    CapturedAttributeImpl t = (CapturedAttributeImpl) target;
+    t.setBuffer(buffer, bufferLength);
+    t.setPositionIncrement(positionIncrement);
+    t.empty = empty;
+  }
+
+  @Override
+  public void reflectWith(AttributeReflector reflector) {
+    if (isEmpty()) {
+      reflector.reflect(CapturedAttribute.class, "empty", true);
+    } else {
+      reflector.reflect(CapturedAttribute.class, "empty", false);
+      reflector.reflect(CapturedAttribute.class, "term", new String(buffer, 0, bufferLength));
+      reflector.reflect(CapturedAttribute.class, "posInc", positionIncrement);
+    }
+  }  
+}
Index: lucene/analysis/common/src/java/org/apache/lucene/analysis/sinks/PreserveCaptureFilter.java
===================================================================
--- lucene/analysis/common/src/java/org/apache/lucene/analysis/sinks/PreserveCaptureFilter.java	(revision 0)
+++ lucene/analysis/common/src/java/org/apache/lucene/analysis/sinks/PreserveCaptureFilter.java	(working copy)
@@ -0,0 +1,52 @@
+package org.apache.lucene.analysis.sinks;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.IOException;
+
+import org.apache.lucene.analysis.TokenFilter;
+import org.apache.lucene.analysis.TokenStream;
+import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
+import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute;
+
+/** 
+ * Captures the term text at this point in the chain, to optionally
+ * later restore and add as a synonym if the token was changed
+ * @see PreserveRestoreFilter
+ */
+public final class PreserveCaptureFilter extends TokenFilter {
+  private final CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);
+  private final PositionIncrementAttribute posIncAtt = addAttribute(PositionIncrementAttribute.class);
+  private final CapturedAttribute captureAtt = addAttribute(CapturedAttribute.class);
+  
+  /** Create a new PreserveCaptureFilter */
+  public PreserveCaptureFilter(TokenStream input) {
+    super(input);
+  }
+
+  @Override
+  public boolean incrementToken() throws IOException {
+    if (input.incrementToken()) {
+      captureAtt.setBuffer(termAtt.buffer(), termAtt.length());
+      captureAtt.setPositionIncrement(posIncAtt.getPositionIncrement());
+      return true;
+    } else {
+      return false;
+    }
+  }
+}
Index: lucene/analysis/common/src/java/org/apache/lucene/analysis/sinks/PreserveRestoreFilter.java
===================================================================
--- lucene/analysis/common/src/java/org/apache/lucene/analysis/sinks/PreserveRestoreFilter.java	(revision 0)
+++ lucene/analysis/common/src/java/org/apache/lucene/analysis/sinks/PreserveRestoreFilter.java	(working copy)
@@ -0,0 +1,87 @@
+package org.apache.lucene.analysis.sinks;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.IOException;
+
+import org.apache.lucene.analysis.TokenFilter;
+import org.apache.lucene.analysis.TokenStream;
+import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
+import org.apache.lucene.analysis.tokenattributes.OffsetAttribute;
+import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute;
+import org.apache.lucene.util.ArrayUtil;
+
+/** 
+ * Restores the term text from a previous point in the chain,
+ * and adds it as a synonym, only if it changed in between.
+ * 
+ * @see PreserveCaptureFilter
+ */
+public final class PreserveRestoreFilter extends TokenFilter {
+  private final CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);
+  private final PositionIncrementAttribute posIncAtt = addAttribute(PositionIncrementAttribute.class);
+  private final OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);
+  private final CapturedAttribute captureAtt = addAttribute(CapturedAttribute.class);
+  
+  private char savedText[] = new char[8];
+  private int savedLength;
+  private int savedStartOffset;
+  private int savedEndOffset;
+  private boolean hasSaved;
+  
+  /** Creates a new PreserveRestoreFilter */
+  public PreserveRestoreFilter(TokenStream input) {
+    super(input);
+  }
+
+  @Override
+  public boolean incrementToken() throws IOException {
+    if (hasSaved) {
+      clearAttributes();
+      termAtt.copyBuffer(savedText, 0, savedLength);
+      offsetAtt.setOffset(savedStartOffset, savedEndOffset);
+      posIncAtt.setPositionIncrement(0);
+      hasSaved = false;
+      return true;
+    }
+    
+    if (input.incrementToken()) {
+      if (!captureAtt.isEmpty() 
+          && captureAtt.getPositionIncrement() == posIncAtt.getPositionIncrement()
+          && (captureAtt.getLength() != termAtt.length()
+              || !ArrayUtil.equals(captureAtt.getBuffer(), 0, termAtt.buffer(), 0, captureAtt.getLength()))) {
+        savedLength = captureAtt.getLength();
+        savedText = ArrayUtil.grow(savedText, savedLength);
+        System.arraycopy(captureAtt.getBuffer(), 0, savedText, 0, savedLength);
+        savedStartOffset = offsetAtt.startOffset();
+        savedEndOffset = offsetAtt.endOffset();
+        hasSaved = true;
+      }
+      captureAtt.clear();
+      return true;
+    } else {
+      return false;
+    }
+  }
+
+  @Override
+  public void reset() throws IOException {
+    super.reset();
+    hasSaved = false;
+  }
+}
Index: lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestPreserveSaveRestore.java
===================================================================
--- lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestPreserveSaveRestore.java	(revision 0)
+++ lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestPreserveSaveRestore.java	(working copy)
@@ -0,0 +1,54 @@
+package org.apache.lucene.analysis.sinks;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.analysis.Analyzer;
+import org.apache.lucene.analysis.BaseTokenStreamTestCase;
+import org.apache.lucene.analysis.MockTokenizer;
+import org.apache.lucene.analysis.TokenStream;
+import org.apache.lucene.analysis.Tokenizer;
+import org.apache.lucene.analysis.core.LowerCaseFilter;
+
+/** Simple tests for PreserveCaptureFilter and PreserveRestoreFilter */
+public class TestPreserveSaveRestore extends BaseTokenStreamTestCase {
+  
+  public void testLowerCase() throws Exception {
+    Analyzer a = new Analyzer() {
+      @Override
+      protected TokenStreamComponents createComponents(String fieldName) {
+        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);
+        TokenStream stream = new PreserveCaptureFilter(tokenizer);
+        stream = new LowerCaseFilter(TEST_VERSION_CURRENT, stream);
+        stream = new PreserveRestoreFilter(stream);
+        return new TokenStreamComponents(tokenizer, stream);
+      }
+    };
+
+    assertAnalyzesTo(a, "foo bar baz",
+        new String[] { "foo", "bar", "baz" },
+        new int[] { 0, 4, 8 },
+        new int[] { 3, 7, 11 },
+        new int[] { 1, 1, 1 });
+    
+    assertAnalyzesTo(a, "foo BAR baz",
+        new String[] { "foo", "bar", "BAR", "baz" },
+        new int[] { 0, 4, 4, 8 },
+        new int[] { 3, 7, 7, 11 },
+        new int[] { 1, 1, 0, 1 });
+  }
+}
