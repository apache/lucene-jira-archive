Index: lucene/replicator/src/test/org/apache/lucene/replicator/http/HttpReplicatorTest.java
===================================================================
--- lucene/replicator/src/test/org/apache/lucene/replicator/http/HttpReplicatorTest.java	(revision 1586590)
+++ lucene/replicator/src/test/org/apache/lucene/replicator/http/HttpReplicatorTest.java	(working copy)
@@ -21,6 +21,7 @@
 import java.io.IOException;
 import java.util.Collections;
 
+import org.apache.http.impl.conn.BasicClientConnectionManager;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.index.DirectoryReader;
 import org.apache.lucene.index.IndexWriter;
@@ -52,11 +53,13 @@
   private int port;
   private String host;
   private Directory serverIndexDir, handlerIndexDir;
+  private ReplicationServlet replicationServlet;
   
   private void startServer() throws Exception {
     ServletHandler replicationHandler = new ServletHandler();
     ReplicationService service = new ReplicationService(Collections.singletonMap("s1", serverReplicator));
-    ServletHolder servlet = new ServletHolder(new ReplicationServlet(service));
+    this.replicationServlet = new ReplicationServlet(service);
+    ServletHolder servlet = new ServletHolder(replicationServlet);
     replicationHandler.addServletWithMapping(servlet, ReplicationService.REPLICATION_CONTEXT + "/*");
     server = newHttpServer(replicationHandler);
     port = serverPort(server);
@@ -120,6 +123,42 @@
     client.updateNow();
     reopenReader();
     assertEquals(2, Integer.parseInt(reader.getIndexCommit().getUserData().get("ID"), 16));
+    
+    client.close();
   }
   
+  @Test  
+  public void testTemporaryFailure() throws Exception {
+    //tests the behaviour of the client when the amster is temporary unable to respond
+    Replicator replicator = new HttpReplicator(host, port, ReplicationService.REPLICATION_CONTEXT + "/s1", 
+        new BasicClientConnectionManager());//must use BasicClientConnectionManager to test whether the client is closed correctly
+    ReplicationClient client = new ReplicationClient(replicator, new IndexReplicationHandler(handlerIndexDir, null), 
+        new PerSessionDirectoryFactory(clientWorkDir));
+    
+    replicationServlet.setRespondWithError(true);
+    try{
+      publishRevision(5);
+      
+      boolean exceptionThrown;
+      try{
+        client.updateNow();
+        exceptionThrown=false;
+      }
+      catch(IOException e){
+        //this exception is expected
+        exceptionThrown=true;       
+      }
+      assertTrue(exceptionThrown);
+      
+      replicationServlet.setRespondWithError(false);
+      client.updateNow(); //now it should work
+      reopenReader();
+      assertEquals(5, Integer.parseInt(reader.getIndexCommit().getUserData().get("ID"), 16));
+      
+      client.close();
+    }
+    finally{
+      replicationServlet.setRespondWithError(false);
+    }
+  }
 }
Index: lucene/replicator/src/test/org/apache/lucene/replicator/http/ReplicationServlet.java
===================================================================
--- lucene/replicator/src/test/org/apache/lucene/replicator/http/ReplicationServlet.java	(revision 1586590)
+++ lucene/replicator/src/test/org/apache/lucene/replicator/http/ReplicationServlet.java	(working copy)
@@ -27,6 +27,7 @@
 public class ReplicationServlet extends HttpServlet {
   
   private final ReplicationService service;
+  private boolean respondWithError=false;
   
   public ReplicationServlet(ReplicationService service) {
     super();
@@ -35,7 +36,13 @@
   
   @Override
   protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
-    service.perform(req, resp);
+    if(respondWithError)
+      resp.sendError(500, "Faked error");
+    else
+      service.perform(req, resp);
   }
+
+  public void setRespondWithError(boolean respondWithError) {
+    this.respondWithError = respondWithError;}
   
 }
