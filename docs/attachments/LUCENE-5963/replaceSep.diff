Index: core/src/java/org/apache/lucene/util/automaton/Automaton.java
===================================================================
--- core/src/java/org/apache/lucene/util/automaton/Automaton.java	(revision 1626158)
+++ core/src/java/org/apache/lucene/util/automaton/Automaton.java	(working copy)
@@ -334,6 +334,11 @@
     return nextState/2;
   }
 
+  /** How many transitions this automaton has. */
+  public int getNumTransitions() {
+    return nextTransition / 3;   
+  }
+  
   /** How many transitions this state has. */
   public int getNumTransitions(int state) {
     int count = states[2*state+1];
@@ -676,6 +681,20 @@
       transitions[nextTransition++] = max;
     }
 
+    /** Add a [virtual] epsilon transition between source and dest.
+     *  Dest state must already have all transitions added because this
+     *  method simply copies those same transitions over to source. */
+    public void addEpsilon(int source, int dest) {
+      for (int upto = 0; upto < nextTransition; upto += 4) {
+         if (transitions[upto] == dest) {
+            addTransition(source, transitions[upto + 1], transitions[upto + 2], transitions[upto + 3]);
+         }
+      }
+      if (isAccept(dest)) {
+        setAccept(source, true);
+      }
+    }
+
     /** Sorts transitions first then min label ascending, then
      *  max label ascending, then dest ascending */
     private final Sorter sorter = new InPlaceMergeSorter() {
@@ -797,10 +816,11 @@
     public void copy(Automaton other) {
       int offset = getNumStates();
       int otherNumStates = other.getNumStates();
-      for(int s=0;s<otherNumStates;s++) {
-        int newState = createState();
-        setAccept(newState, other.isAccept(s));
-      }
+
+      // Copy all states
+      copyStates(other);
+      
+      // Copy all transitions
       Transition t = new Transition();
       for(int s=0;s<otherNumStates;s++) {
         int count = other.initTransition(s, t);
@@ -810,5 +830,14 @@
         }
       }
     }
+
+    /** Copies over all states from other. */
+    public void copyStates(Automaton other) {
+      int otherNumStates = other.getNumStates();
+      for (int s = 0; s < otherNumStates; s++) {
+        int newState = createState();
+        setAccept(newState, other.isAccept(s));
+      }
+    }
   }
 }
Index: suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester.java
===================================================================
--- suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester.java	(revision 1626158)
+++ suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester.java	(working copy)
@@ -299,14 +299,10 @@
   // we were asked to preserve them:
   private Automaton replaceSep(Automaton a) {
 
-    Automaton result = new Automaton();
-
+    int numStates = a.getNumStates();
+    Automaton.Builder result = new Automaton.Builder(numStates, a.getNumTransitions());
     // Copy all states over
-    int numStates = a.getNumStates();
-    for(int s=0;s<numStates;s++) {
-      result.createState();
-      result.setAccept(s, a.isAccept(s));
-    }
+    result.copyStates(a);
 
     // Go in reverse topo sort so we know we only have to
     // make one pass:
@@ -342,9 +338,7 @@
       }
     }
 
-    result.finishState();
-
-    return result;
+    return result.finish();
   }
 
   /** Used by subclass to change the lookup automaton, if
