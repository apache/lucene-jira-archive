diff --git a/lucene/analysis/common/src/test/org/apache/lucene/collation/TestCollationDocValuesField.java b/lucene/analysis/common/src/test/org/apache/lucene/collation/TestCollationDocValuesField.java
index c62cee437c1..69ab63c2002 100644
--- a/lucene/analysis/common/src/test/org/apache/lucene/collation/TestCollationDocValuesField.java
+++ b/lucene/analysis/common/src/test/org/apache/lucene/collation/TestCollationDocValuesField.java
@@ -126,7 +126,7 @@ public class TestCollationDocValuesField extends LuceneTestCase {
       boolean collatorAccepts =
           collate(collator, s, startPoint) >= 0 && collate(collator, s, endPoint) <= 0;
       assertEquals(docID, dvs.nextDoc());
-      BytesRef br = dvs.binaryValue();
+      BytesRef br = dvs.lookupOrd(dvs.ordValue());
       boolean luceneAccepts = br.compareTo(startBR) >= 0 && br.compareTo(endBR) <= 0;
       assertEquals(startPoint + " <= " + s + " <= " + endPoint, collatorAccepts, luceneAccepts);
     }
diff --git a/lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/TestICUCollationDocValuesField.java b/lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/TestICUCollationDocValuesField.java
index a53a9289d70..dd6fb5ab786 100644
--- a/lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/TestICUCollationDocValuesField.java
+++ b/lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/TestICUCollationDocValuesField.java
@@ -124,7 +124,7 @@ public class TestICUCollationDocValuesField extends LuceneTestCase {
       boolean collatorAccepts =
           collator.compare(s, startPoint) >= 0 && collator.compare(s, endPoint) <= 0;
       assertEquals(docID, dvs.nextDoc());
-      BytesRef br = dvs.binaryValue();
+      BytesRef br = dvs.lookupOrd(dvs.ordValue());
       boolean luceneAccepts = br.compareTo(startBR) >= 0 && br.compareTo(endBR) <= 0;
       assertEquals(collatorAccepts, luceneAccepts);
     }
diff --git a/lucene/backward-codecs/src/test/org/apache/lucene/backward_index/TestBackwardsCompatibility.java b/lucene/backward-codecs/src/test/org/apache/lucene/backward_index/TestBackwardsCompatibility.java
index 2deced798c4..8d9d101c3a4 100644
--- a/lucene/backward-codecs/src/test/org/apache/lucene/backward_index/TestBackwardsCompatibility.java
+++ b/lucene/backward-codecs/src/test/org/apache/lucene/backward_index/TestBackwardsCompatibility.java
@@ -1143,10 +1143,10 @@ public class TestBackwardsCompatibility extends LuceneTestCase {
       term = dvBytesDerefVar.binaryValue();
       assertEquals(expectedRef, term);
       assertEquals(i, dvBytesSortedFixed.nextDoc());
-      term = dvBytesSortedFixed.binaryValue();
+      term = dvBytesSortedFixed.lookupOrd(dvBytesSortedFixed.ordValue());
       assertEquals(expectedRef, term);
       assertEquals(i, dvBytesSortedVar.nextDoc());
-      term = dvBytesSortedVar.binaryValue();
+      term = dvBytesSortedVar.lookupOrd(dvBytesSortedVar.ordValue());
       assertEquals(expectedRef, term);
       assertEquals(i, dvBytesStraightFixed.nextDoc());
       term = dvBytesStraightFixed.binaryValue();
diff --git a/lucene/core/src/java/org/apache/lucene/index/DocValues.java b/lucene/core/src/java/org/apache/lucene/index/DocValues.java
index e78a666ed94..6741ae64aae 100644
--- a/lucene/core/src/java/org/apache/lucene/index/DocValues.java
+++ b/lucene/core/src/java/org/apache/lucene/index/DocValues.java
@@ -333,17 +333,14 @@ public final class DocValues {
    *     reader.
    * @throws IllegalStateException if {@code field} exists, but was not indexed with docvalues.
    * @throws IllegalStateException if {@code field} has docvalues, but the type is not {@link
-   *     DocValuesType#BINARY} or {@link DocValuesType#SORTED}.
+   *     DocValuesType#BINARY}.
    * @throws IOException if an I/O error occurs.
    */
   public static BinaryDocValues getBinary(LeafReader reader, String field) throws IOException {
     BinaryDocValues dv = reader.getBinaryDocValues(field);
     if (dv == null) {
-      dv = reader.getSortedDocValues(field);
-      if (dv == null) {
-        checkField(reader, field, DocValuesType.BINARY, DocValuesType.SORTED);
-        return emptyBinary();
-      }
+      checkField(reader, field, DocValuesType.BINARY);
+      return emptyBinary();
     }
     return dv;
   }
diff --git a/lucene/core/src/java/org/apache/lucene/index/FilterSortedDocValues.java b/lucene/core/src/java/org/apache/lucene/index/FilterSortedDocValues.java
index 290265f1438..01c8e3edfca 100644
--- a/lucene/core/src/java/org/apache/lucene/index/FilterSortedDocValues.java
+++ b/lucene/core/src/java/org/apache/lucene/index/FilterSortedDocValues.java
@@ -48,11 +48,6 @@ public abstract class FilterSortedDocValues extends SortedDocValues {
     return in.lookupOrd(ord);
   }
 
-  @Override
-  public BytesRef binaryValue() throws IOException {
-    return in.binaryValue();
-  }
-
   @Override
   public int getValueCount() {
     return in.getValueCount();
diff --git a/lucene/core/src/java/org/apache/lucene/index/SortedDocValues.java b/lucene/core/src/java/org/apache/lucene/index/SortedDocValues.java
index 1132c429bc2..15bc16a1281 100644
--- a/lucene/core/src/java/org/apache/lucene/index/SortedDocValues.java
+++ b/lucene/core/src/java/org/apache/lucene/index/SortedDocValues.java
@@ -28,7 +28,7 @@ import org.apache.lucene.util.automaton.CompiledAutomaton;
  * dictionary of unique values. A pointer to the dictionary value (ordinal) can be retrieved for
  * each document. Ordinals are dense and in increasing sorted order.
  */
-public abstract class SortedDocValues extends BinaryDocValues {
+public abstract class SortedDocValues extends DocValuesIterator {
 
   /** Sole constructor. (For invocation by subclass constructors, typically implicit.) */
   protected SortedDocValues() {}
@@ -52,18 +52,6 @@ public abstract class SortedDocValues extends BinaryDocValues {
    */
   public abstract BytesRef lookupOrd(int ord) throws IOException;
 
-  private final BytesRef empty = new BytesRef();
-
-  @Override
-  public BytesRef binaryValue() throws IOException {
-    int ord = ordValue();
-    if (ord == -1) {
-      return empty;
-    } else {
-      return lookupOrd(ord);
-    }
-  }
-
   /**
    * Returns the number of unique values.
    *
diff --git a/lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates.java b/lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates.java
index 8e9ca761332..74658adf1e8 100644
--- a/lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates.java
@@ -358,7 +358,7 @@ public class TestBinaryDocValuesUpdates extends LuceneTestCase {
       assertEquals(i, bdv.nextDoc());
       assertEquals(17, getValue(bdv));
       assertEquals(i, sdv.nextDoc());
-      BytesRef term = sdv.binaryValue();
+      BytesRef term = sdv.lookupOrd(sdv.ordValue());
       assertEquals(new BytesRef(Integer.toString(i)), term);
       assertEquals(i, ssdv.nextDoc());
       long ord = ssdv.nextOrd();
@@ -507,7 +507,7 @@ public class TestBinaryDocValuesUpdates extends LuceneTestCase {
       assertEquals(i, bdv.nextDoc());
       assertEquals(17, getValue(bdv));
       assertEquals(i, sdv.nextDoc());
-      BytesRef term = sdv.binaryValue();
+      BytesRef term = sdv.lookupOrd(sdv.ordValue());
       assertEquals(new BytesRef("value"), term);
     }
 
diff --git a/lucene/core/src/test/org/apache/lucene/index/TestIndexSorting.java b/lucene/core/src/test/org/apache/lucene/index/TestIndexSorting.java
index db9c5877287..deb938de8b2 100644
--- a/lucene/core/src/test/org/apache/lucene/index/TestIndexSorting.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestIndexSorting.java
@@ -307,11 +307,11 @@ public class TestIndexSorting extends LuceneTestCase {
     assertEquals(3, leaf.maxDoc());
     SortedDocValues values = leaf.getSortedDocValues("foo");
     assertEquals(0, values.nextDoc());
-    assertEquals("aaa", values.binaryValue().utf8ToString());
+    assertEquals("aaa", values.lookupOrd(values.ordValue()).utf8ToString());
     assertEquals(1, values.nextDoc());
-    assertEquals("mmm", values.binaryValue().utf8ToString());
+    assertEquals("mmm", values.lookupOrd(values.ordValue()).utf8ToString());
     assertEquals(2, values.nextDoc());
-    assertEquals("zzz", values.binaryValue().utf8ToString());
+    assertEquals("zzz", values.lookupOrd(values.ordValue()).utf8ToString());
     r.close();
     w.close();
     dir.close();
@@ -392,15 +392,15 @@ public class TestIndexSorting extends LuceneTestCase {
       SortedDocValues values = leaf.getSortedDocValues("foo");
       if (reverse) {
         assertEquals(0, values.nextDoc());
-        assertEquals("zzz", values.binaryValue().utf8ToString());
+        assertEquals("zzz", values.lookupOrd(values.ordValue()).utf8ToString());
         assertEquals(1, values.nextDoc());
-        assertEquals("mmm", values.binaryValue().utf8ToString());
+        assertEquals("mmm", values.lookupOrd(values.ordValue()).utf8ToString());
       } else {
         // docID 0 is missing:
         assertEquals(1, values.nextDoc());
-        assertEquals("mmm", values.binaryValue().utf8ToString());
+        assertEquals("mmm", values.lookupOrd(values.ordValue()).utf8ToString());
         assertEquals(2, values.nextDoc());
-        assertEquals("zzz", values.binaryValue().utf8ToString());
+        assertEquals("zzz", values.lookupOrd(values.ordValue()).utf8ToString());
       }
       r.close();
       w.close();
@@ -496,14 +496,14 @@ public class TestIndexSorting extends LuceneTestCase {
       SortedDocValues values = leaf.getSortedDocValues("foo");
       if (reverse) {
         assertEquals(1, values.nextDoc());
-        assertEquals("zzz", values.binaryValue().utf8ToString());
+        assertEquals("zzz", values.lookupOrd(values.ordValue()).utf8ToString());
         assertEquals(2, values.nextDoc());
-        assertEquals("mmm", values.binaryValue().utf8ToString());
+        assertEquals("mmm", values.lookupOrd(values.ordValue()).utf8ToString());
       } else {
         assertEquals(0, values.nextDoc());
-        assertEquals("mmm", values.binaryValue().utf8ToString());
+        assertEquals("mmm", values.lookupOrd(values.ordValue()).utf8ToString());
         assertEquals(1, values.nextDoc());
-        assertEquals("zzz", values.binaryValue().utf8ToString());
+        assertEquals("zzz", values.lookupOrd(values.ordValue()).utf8ToString());
       }
       assertEquals(NO_MORE_DOCS, values.nextDoc());
       r.close();
diff --git a/lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues.java b/lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues.java
index 1ec775c5e94..0cbde112e13 100644
--- a/lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues.java
@@ -163,8 +163,8 @@ public class TestMultiDocValues extends LuceneTestCase {
       }
 
       // check value
-      final BytesRef expected = BytesRef.deepCopyOf(single.binaryValue());
-      final BytesRef actual = multi.binaryValue();
+      final BytesRef expected = BytesRef.deepCopyOf(single.lookupOrd(single.ordValue()));
+      final BytesRef actual = multi.lookupOrd(multi.ordValue());
       assertEquals(expected, actual);
 
       // check ord
@@ -216,8 +216,8 @@ public class TestMultiDocValues extends LuceneTestCase {
       // check ord
       assertEquals(single.ordValue(), multi.ordValue());
       // check ord value
-      final BytesRef expected = BytesRef.deepCopyOf(single.binaryValue());
-      final BytesRef actual = multi.binaryValue();
+      final BytesRef expected = BytesRef.deepCopyOf(single.lookupOrd(single.ordValue()));
+      final BytesRef actual = multi.lookupOrd(multi.ordValue());
       assertEquals(expected, actual);
     }
     testRandomAdvance(
diff --git a/lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates.java b/lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates.java
index c98c7b2a8bf..0d541805a9a 100644
--- a/lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates.java
@@ -456,7 +456,7 @@ public class TestNumericDocValuesUpdates extends LuceneTestCase {
       BytesRef term = bdv.binaryValue();
       assertEquals(new BytesRef(Integer.toString(i)), term);
       assertEquals(i, sdv.nextDoc());
-      term = sdv.binaryValue();
+      term = sdv.lookupOrd(sdv.ordValue());
       assertEquals(new BytesRef(Integer.toString(i)), term);
       assertEquals(i, ssdv.nextDoc());
 
@@ -615,7 +615,7 @@ public class TestNumericDocValuesUpdates extends LuceneTestCase {
       assertEquals(i, ndv.nextDoc());
       assertEquals(17, ndv.longValue());
       assertEquals(i, sdv.nextDoc());
-      final BytesRef term = sdv.binaryValue();
+      final BytesRef term = sdv.lookupOrd(sdv.ordValue());
       assertEquals(new BytesRef("value"), term);
     }
 
diff --git a/lucene/core/src/test/org/apache/lucene/index/TestSortingCodecReader.java b/lucene/core/src/test/org/apache/lucene/index/TestSortingCodecReader.java
index db1a1eef5b2..9a916eeb99f 100644
--- a/lucene/core/src/test/org/apache/lucene/index/TestSortingCodecReader.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestSortingCodecReader.java
@@ -223,7 +223,7 @@ public class TestSortingCodecReader extends LuceneTestCase {
               assertTrue(binary_sorted_dv.advanceExact(idNext));
               assertEquals(idNext, vectorValues.advance(idNext));
               assertEquals(new BytesRef(ids.longValue() + ""), binary_dv.binaryValue());
-              assertEquals(new BytesRef(ids.longValue() + ""), binary_sorted_dv.binaryValue());
+              assertEquals(new BytesRef(ids.longValue() + ""), binary_sorted_dv.lookupOrd(binary_sorted_dv.ordValue()));
               assertEquals(
                   new BytesRef(ids.longValue() + ""),
                   sorted_set_dv.lookupOrd(sorted_set_dv.nextOrd()));
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestElevationComparator.java b/lucene/core/src/test/org/apache/lucene/search/TestElevationComparator.java
index 8d0e6341efa..a5b1c75358f 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestElevationComparator.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestElevationComparator.java
@@ -174,7 +174,7 @@ class ElevationComparatorSource extends FieldComparatorSource {
           private int docVal(int doc) throws IOException {
             SortedDocValues idIndex = DocValues.getSorted(context.reader(), fieldname);
             if (idIndex.advance(doc) == doc) {
-              final BytesRef term = idIndex.binaryValue();
+              final BytesRef term = idIndex.lookupOrd(idIndex.ordValue());
               Integer prio = priority.get(term);
               return prio == null ? 0 : prio.intValue();
             } else {
diff --git a/lucene/grouping/src/java/org/apache/lucene/search/grouping/TermGroupSelector.java b/lucene/grouping/src/java/org/apache/lucene/search/grouping/TermGroupSelector.java
index 802776eb8b1..5cedebbc6bf 100644
--- a/lucene/grouping/src/java/org/apache/lucene/search/grouping/TermGroupSelector.java
+++ b/lucene/grouping/src/java/org/apache/lucene/search/grouping/TermGroupSelector.java
@@ -81,7 +81,7 @@ public class TermGroupSelector extends GroupSelector<BytesRef> {
     if (secondPass) {
       return State.SKIP;
     }
-    groupId = values.add(docValues.binaryValue());
+    groupId = values.add(docValues.lookupOrd(docValues.ordValue()));
     ordsToGroupIds.put(ord, groupId);
     return State.ACCEPT;
   }
diff --git a/lucene/luke/src/java/org/apache/lucene/luke/models/documents/DocValuesAdapter.java b/lucene/luke/src/java/org/apache/lucene/luke/models/documents/DocValuesAdapter.java
index 83245fae8d9..4676ce71019 100644
--- a/lucene/luke/src/java/org/apache/lucene/luke/models/documents/DocValuesAdapter.java
+++ b/lucene/luke/src/java/org/apache/lucene/luke/models/documents/DocValuesAdapter.java
@@ -127,7 +127,7 @@ final class DocValuesAdapter {
       DocValues dv =
           DocValues.of(
               dvType,
-              Collections.singletonList(BytesRef.deepCopyOf(svalues.binaryValue())),
+              Collections.singletonList(BytesRef.deepCopyOf(svalues.lookupOrd(svalues.ordValue()))),
               Collections.emptyList());
       return Optional.of(dv);
     }
diff --git a/lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java b/lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java
index a6273cb375d..6dcf8d04254 100644
--- a/lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java
+++ b/lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java
@@ -1268,7 +1268,42 @@ public class MemoryIndex {
 
     @Override
     public BinaryDocValues getBinaryDocValues(String field) {
-      return getSortedDocValues(field, DocValuesType.BINARY);
+      final SortedDocValues in = getSortedDocValues(field, DocValuesType.BINARY);
+      if (in == null) {
+        return null;
+      }
+      // wraps a SortedDocValues and makes it look like its binary
+      return new BinaryDocValues() {
+        @Override
+        public BytesRef binaryValue() throws IOException {
+          return in.lookupOrd(in.ordValue());
+        }
+
+        @Override
+        public boolean advanceExact(int target) throws IOException {
+          return in.advanceExact(target);
+        }
+
+        @Override
+        public int docID() {
+          return in.docID();
+        }
+
+        @Override
+        public int nextDoc() throws IOException {
+          return in.nextDoc();
+        }
+
+        @Override
+        public int advance(int target) throws IOException {
+          return in.advance(target);
+        }
+
+        @Override
+        public long cost() {
+          return in.cost();
+        }
+      };
     }
 
     @Override
diff --git a/lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex.java b/lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex.java
index fe0447f1650..25568c6863b 100644
--- a/lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex.java
+++ b/lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex.java
@@ -290,7 +290,7 @@ public class TestMemoryIndex extends LuceneTestCase {
     assertEquals(DocIdSetIterator.NO_MORE_DOCS, binaryDocValues.nextDoc());
     SortedDocValues sortedDocValues = leafReader.getSortedDocValues("sorted");
     assertEquals(0, sortedDocValues.nextDoc());
-    assertEquals("b", sortedDocValues.binaryValue().utf8ToString());
+    assertEquals("b", sortedDocValues.lookupOrd(sortedDocValues.ordValue()).utf8ToString());
     assertEquals(0, sortedDocValues.ordValue());
     assertEquals("b", sortedDocValues.lookupOrd(0).utf8ToString());
     assertEquals(DocIdSetIterator.NO_MORE_DOCS, sortedDocValues.nextDoc());
diff --git a/lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstDirectory.java b/lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstDirectory.java
index 895fe41ce0e..cea0a9d4cef 100644
--- a/lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstDirectory.java
+++ b/lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstDirectory.java
@@ -535,7 +535,6 @@ public class TestMemoryIndexAgainstDirectory extends BaseTokenStreamTestCase {
     assertEquals(controlSortedDocValues.getValueCount(), sortedDocValues.getValueCount());
     assertEquals(0, sortedDocValues.nextDoc());
     assertEquals(0, controlSortedDocValues.nextDoc());
-    assertEquals(controlSortedDocValues.binaryValue(), sortedDocValues.binaryValue());
     assertEquals(controlSortedDocValues.ordValue(), sortedDocValues.ordValue());
     assertEquals(controlSortedDocValues.lookupOrd(0), sortedDocValues.lookupOrd(0));
 
diff --git a/lucene/misc/src/java/org/apache/lucene/misc/search/DocValuesStats.java b/lucene/misc/src/java/org/apache/lucene/misc/search/DocValuesStats.java
index c7c5d192e74..55b04327b3d 100644
--- a/lucene/misc/src/java/org/apache/lucene/misc/search/DocValuesStats.java
+++ b/lucene/misc/src/java/org/apache/lucene/misc/search/DocValuesStats.java
@@ -371,7 +371,7 @@ public abstract class DocValuesStats<T> {
 
     @Override
     protected void doAccumulate(int count) throws IOException {
-      BytesRef val = sdv.binaryValue();
+      BytesRef val = sdv.lookupOrd(sdv.ordValue());
       if (max == null || val.compareTo(max) > 0) {
         max = copyFrom(val, max);
       }
diff --git a/lucene/monitor/src/java/org/apache/lucene/monitor/QueryIndex.java b/lucene/monitor/src/java/org/apache/lucene/monitor/QueryIndex.java
index 22e8cc488d4..e44ecb8dc7c 100644
--- a/lucene/monitor/src/java/org/apache/lucene/monitor/QueryIndex.java
+++ b/lucene/monitor/src/java/org/apache/lucene/monitor/QueryIndex.java
@@ -433,8 +433,8 @@ class QueryIndex implements Closeable {
     @Override
     public void collect(int doc) throws IOException {
       dataValues.advanceTo(doc);
-      BytesRef cache_id = dataValues.cacheId.binaryValue();
-      BytesRef query_id = dataValues.queryId.binaryValue();
+      BytesRef cache_id = dataValues.cacheId.lookupOrd(dataValues.cacheId.ordValue());
+      BytesRef query_id = dataValues.queryId.lookupOrd(dataValues.queryId.ordValue());
       QueryCacheEntry query = queries.get(cache_id.utf8ToString());
       matcher.matchQuery(query_id.utf8ToString(), query, dataValues);
     }
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues.java b/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues.java
index 2b35ad7bb20..adaadd2efc3 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues.java
@@ -92,7 +92,7 @@ public abstract class DocTermsIndexDocValues extends FunctionValues {
     if (getOrdForDoc(doc) == -1) {
       return false;
     } else {
-      target.copyBytes(termsIndex.binaryValue());
+      target.copyBytes(termsIndex.lookupOrd(termsIndex.ordValue()));
       return true;
     }
   }
@@ -102,7 +102,7 @@ public abstract class DocTermsIndexDocValues extends FunctionValues {
     if (getOrdForDoc(doc) == -1) {
       return null;
     }
-    final BytesRef term = termsIndex.binaryValue();
+    final BytesRef term = termsIndex.lookupOrd(termsIndex.ordValue());
     spareChars.copyUTF8Bytes(term);
     return spareChars.toString();
   }
diff --git a/lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.java b/lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.java
index 62792b15d87..74def721051 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.java
@@ -837,14 +837,6 @@ public class AssertingLeafReader extends FilterLeafReader {
       return valueCount;
     }
 
-    @Override
-    public BytesRef binaryValue() throws IOException {
-      assertThread("Sorted doc values", creationThread);
-      final BytesRef result = in.binaryValue();
-      assert result.isValid();
-      return result;
-    }
-
     @Override
     public int lookupTerm(BytesRef key) throws IOException {
       assertThread("Sorted doc values", creationThread);
diff --git a/lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase.java b/lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase.java
index db0688fba1d..82ee0a38a9f 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase.java
@@ -802,7 +802,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
     SortedDocValues dv = ireader.leaves().get(0).reader().getSortedDocValues("dv");
     assertEquals(2, dv.getValueCount()); // 2 ords
     assertEquals(0, dv.nextDoc());
-    BytesRef scratch = dv.binaryValue();
+    BytesRef scratch = dv.lookupOrd(dv.ordValue());
     assertEquals(new BytesRef("hello world 1"), scratch);
     scratch = dv.lookupOrd(1);
     assertEquals(new BytesRef("hello world 2"), scratch);
@@ -1258,7 +1258,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
       expected = new BytesRef(entry.getValue());
       docValues = MultiDocValues.getSortedValues(reader, "field");
       assertEquals(docId, docValues.advance(docId));
-      final BytesRef actual = docValues.binaryValue();
+      final BytesRef actual = docValues.lookupOrd(docValues.ordValue());
       assertEquals(expected, actual);
     }
 
@@ -2689,7 +2689,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
                     BytesRef scratch = binaries.binaryValue();
                     assertEquals(binaryValue, scratch);
                     assertEquals(j, sorted.nextDoc());
-                    scratch = sorted.binaryValue();
+                    scratch = sorted.lookupOrd(sorted.ordValue());
                     assertEquals(binaryValue, scratch);
                     String expected = r.document(j).get("storedNum");
                     assertEquals(j, numerics.nextDoc());
@@ -2810,7 +2810,7 @@ public abstract class BaseDocValuesFormatTestCase extends BaseIndexFileFormatTes
                         BytesRef scratch = binaries.binaryValue();
                         assertEquals(binaryValue, scratch);
                         assertEquals(j, sorted.nextDoc());
-                        scratch = sorted.binaryValue();
+                        scratch = sorted.lookupOrd(sorted.ordValue());
                         assertEquals(binaryValue, scratch);
                       }
                     }
diff --git a/lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.java b/lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.java
index 8e9ab9f9a41..8beed4a8120 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.java
@@ -2622,8 +2622,8 @@ public abstract class LuceneTestCase extends Assert {
           for (int docID = 0; docID < leftReader.maxDoc(); docID++) {
             assertEquals(docID, leftValues.nextDoc());
             assertEquals(docID, rightValues.nextDoc());
-            final BytesRef left = BytesRef.deepCopyOf(leftValues.binaryValue());
-            final BytesRef right = rightValues.binaryValue();
+            final BytesRef left = BytesRef.deepCopyOf(leftValues.lookupOrd(leftValues.ordValue()));
+            final BytesRef right = rightValues.lookupOrd(rightValues.ordValue());
             assertEquals(info, left, right);
           }
         } else {
