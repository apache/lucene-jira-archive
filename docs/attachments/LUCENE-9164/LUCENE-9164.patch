diff --git a/lucene/core/src/java/org/apache/lucene/index/IndexWriter.java b/lucene/core/src/java/org/apache/lucene/index/IndexWriter.java
index 14f96d4ba2f..7d1ef970609 100644
--- a/lucene/core/src/java/org/apache/lucene/index/IndexWriter.java
+++ b/lucene/core/src/java/org/apache/lucene/index/IndexWriter.java
@@ -4867,6 +4867,10 @@ public class IndexWriter implements Closeable, TwoPhaseCommit, Accountable,
     assert tragedy instanceof MergePolicy.MergeAbortedException == false;
     // How can it be a tragedy when nothing happened?
     assert tragedy != null;
+    if (tragedy instanceof AlreadyClosedException && isOpen() == false) {
+      // AlreadyClosedException should not be considered a tragedy if IndexWriter is closed.
+      return;
+    }
     if (infoStream.isEnabled("IW")) {
       infoStream.message("IW", "hit tragic " + tragedy.getClass().getSimpleName() + " inside " + location);
     }
diff --git a/lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.java b/lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.java
index 0cba64e3270..1e95d04e22e 100644
--- a/lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.java
@@ -3773,7 +3773,28 @@ public class TestIndexWriter extends LuceneTestCase {
       stopped.set(true);
       indexer.join();
       refresher.join();
+      assertNull("should not consider ACE a tragedy on a closed IW", w.getTragicException());
       IOUtils.close(sm, dir);
     }
   }
+
+  public void testIgnoreACEOnTragicEvent() throws Exception {
+    Directory dir = newDirectory();
+    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig());
+    Exception tragedy = new AlreadyClosedException("IW was closed");
+    writer.onTragicEvent(tragedy, "test");
+    assertSame("do not ignore ACE if IW is open", tragedy, writer.getTragicException());
+    writer.rollback();
+
+    writer = new IndexWriter(dir, newIndexWriterConfig());
+    writer.close();
+    writer.onTragicEvent(tragedy, "test");
+    assertNull("ignore ACE if IW is closed", writer.getTragicException());
+
+    tragedy = new IOException("file not found");
+    writer.onTragicEvent(tragedy, "test");
+    assertSame("do not ignore other exceptions", tragedy, writer.getTragicException());
+    writer.rollback();
+    dir.close();
+  }
 }
