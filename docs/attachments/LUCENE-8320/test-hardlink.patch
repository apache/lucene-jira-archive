diff --git a/lucene/misc/src/test/org/apache/lucene/store/TestHardLinkCopyDirectoryWrapper.java b/lucene/misc/src/test/org/apache/lucene/store/TestHardLinkCopyDirectoryWrapper.java
index 2422065677..0cce132958 100644
--- a/lucene/misc/src/test/org/apache/lucene/store/TestHardLinkCopyDirectoryWrapper.java
+++ b/lucene/misc/src/test/org/apache/lucene/store/TestHardLinkCopyDirectoryWrapper.java
@@ -18,12 +18,16 @@
 package org.apache.lucene.store;
 
 import java.io.IOException;
+import java.net.URI;
+import java.nio.file.FileSystem;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.attribute.BasicFileAttributes;
 import java.util.Collections;
 
 import org.apache.lucene.codecs.CodecUtil;
+import org.apache.lucene.mockfile.FilterPath;
+import org.apache.lucene.mockfile.WindowsFS;
 import org.apache.lucene.util.IOUtils;
 
 // See: https://issues.apache.org/jira/browse/SOLR-12028 Tests cannot remove files on Windows machines occasionally
@@ -87,4 +91,33 @@ public class TestHardLinkCopyDirectoryWrapper extends BaseDirectoryTestCase {
     }
 
   }
+
+  public void testRenameWithHardLink() throws Exception {
+    Path path = createTempDir();
+    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create("file:///"));
+    Directory dir1 = new SimpleFSDirectory(new FilterPath(path, fs));
+    Directory dir2 = new SimpleFSDirectory(new FilterPath(path.resolve("link"), fs));
+
+    IndexOutput target = dir1.createOutput("target.txt", IOContext.DEFAULT);
+    target.writeInt(1);
+    target.close();
+
+    HardlinkCopyDirectoryWrapper wrapper = new HardlinkCopyDirectoryWrapper(dir2);
+    wrapper.copyFrom(dir1, "target.txt", "link.txt", IOContext.DEFAULT);
+
+    IndexOutput source = dir1.createOutput("source.txt", IOContext.DEFAULT);
+    source.writeInt(2);
+    source.close();
+
+    IndexInput link = dir2.openInput("link.txt", IOContext.DEFAULT);
+    // Rename while opening a hard-link file
+    dir1.rename("source.txt", "target.txt");
+    link.close();
+
+    IndexInput in = dir1.openInput("target.txt", IOContext.DEFAULT);
+    assertEquals(2, in.readInt());
+    in.close();
+
+    IOUtils.close(dir1, dir2);
+  }
 }
