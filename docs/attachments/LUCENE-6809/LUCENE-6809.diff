Index: lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilter.java
===================================================================
--- lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilter.java	(revision 1703830)
+++ lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilter.java	(working copy)
@@ -78,19 +78,24 @@
             if(i+j>len) {
                 break;
             }
-            if(dictionary.contains(termAtt.buffer(), i, j)) {
-                if (this.onlyLongestMatch) {
-                   if (longestMatchToken!=null) {
-                     if (longestMatchToken.txt.length()<j) {
-                       longestMatchToken=new CompoundToken(i,j);
-                     }
-                   } else {
+
+            // use subwordsizes also for rest of the word
+            // be careful if word starts at beginning or end
+            if ((i == 0 || i >= minSubwordSize) && ((i+j == len) || (len - i - j) >= minSubwordSize)) {
+                if(dictionary.contains(termAtt.buffer(), i, j)) {
+                    if (this.onlyLongestMatch) {
+                       if (longestMatchToken!=null) {
+                         if (longestMatchToken.txt.length()<j) {
+                           longestMatchToken=new CompoundToken(i,j);
+                         }
+                       } else {
                      longestMatchToken=new CompoundToken(i,j);
-                   }
-                } else {
-                   tokens.add(new CompoundToken(i,j));
-                }
-            } 
+                       }
+                    } else {
+                       tokens.add(new CompoundToken(i,j));
+                    }
+                } 
+            }
         }
         if (this.onlyLongestMatch && longestMatchToken!=null) {
           tokens.add(longestMatchToken);
