Index: lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DUtil.java	(revision 2e757f6c257687ab713f88b6a07cf4a355e4cf66)
+++ lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DUtil.java	(date 1540298448000)
@@ -80,6 +80,10 @@
   /** Returns smallest double that would encode to int x. */
   // NOTE: keep this package private!!
   static double decodeValueFloor(int x) {
+    assert x <= MAX_ENCODED_VALUE && x >= MIN_ENCODED_VALUE;
+    if (x == MIN_ENCODED_VALUE) {
+      return -MAX_VALUE;
+    }
     return x * DECODE;
   }
   
@@ -105,7 +109,10 @@
   /** Returns largest double that would encode to int x. */
   // NOTE: keep this package private!!
   static double decodeValueCeil(int x) {
-    assert x < Integer.MAX_VALUE;
+    assert x <= MAX_ENCODED_VALUE && x >= MIN_ENCODED_VALUE;
+    if (x == MAX_ENCODED_VALUE) {
+      return MAX_VALUE;
+    }
     return Math.nextDown((x+1) * DECODE);
   }
   
Index: lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint.java	(revision 2e757f6c257687ab713f88b6a07cf4a355e4cf66)
+++ lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint.java	(date 1540298941000)
@@ -1204,6 +1204,40 @@
     }
   }
 
+  public void testMinValueQuantization(){
+    int encoded = Geo3DUtil.MIN_ENCODED_VALUE;
+    double minValue= -PlanetModel.WGS84.getMaximumMagnitude();
+    //Normal encoding
+    double decoded = Geo3DUtil.decodeValue(encoded);
+    assertEquals(minValue, decoded, 0d);
+    assertEquals(encoded, Geo3DUtil.encodeValue(decoded));
+    //Encoding floor
+    double decodedFloor = Geo3DUtil.decodeValueFloor(encoded);
+    assertEquals(minValue, decodedFloor, 0d);
+    assertEquals(encoded, Geo3DUtil.encodeValue(decodedFloor));
+    //Encoding ceiling
+    double decodedCeiling = Geo3DUtil.decodeValueCeil(encoded);
+    assertTrue(decodedCeiling > minValue);
+    assertEquals(encoded, Geo3DUtil.encodeValue(decodedCeiling));
+  }
+
+  public void testMaxValueQuantization(){
+    int encoded = Geo3DUtil.MAX_ENCODED_VALUE;
+    double maxValue= PlanetModel.WGS84.getMaximumMagnitude();
+    //Normal encoding
+    double decoded = Geo3DUtil.decodeValue(encoded);
+    assertEquals(maxValue, decoded, 0d);
+    assertEquals(encoded, Geo3DUtil.encodeValue(decoded));
+    //Encoding floor
+    double decodedFloor = Geo3DUtil.decodeValueFloor(encoded);
+    assertTrue(decodedFloor <  maxValue);
+    assertEquals(encoded, Geo3DUtil.encodeValue(decodedFloor));
+    //Encoding ceiling
+    double decodedCeiling = Geo3DUtil.decodeValueCeil(encoded);
+    assertEquals(maxValue, decodedCeiling, 0d);
+    assertEquals(encoded, Geo3DUtil.encodeValue(decodedCeiling));
+  }
+
   // poached from TestGeoEncodingUtils.testLatitudeQuantization:
 
   /**
@@ -1215,10 +1249,10 @@
     Random random = random();
     for (int i = 0; i < 10000; i++) {
       int encoded = random.nextInt();
-      if (encoded < Geo3DUtil.MIN_ENCODED_VALUE) {
+      if (encoded <= Geo3DUtil.MIN_ENCODED_VALUE) {
         continue;
       }
-      if (encoded > Geo3DUtil.MAX_ENCODED_VALUE) {
+      if (encoded >= Geo3DUtil.MAX_ENCODED_VALUE) {
         continue;
       }
       double min = encoded * Geo3DUtil.DECODE;
