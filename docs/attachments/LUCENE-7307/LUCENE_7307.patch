Index: lucene/core/src/java/org/apache/lucene/search/PointInSetQuery.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/PointInSetQuery.java	(revision 032247ff6e4d576f179a3db2050af6bedf9c716c)
+++ lucene/core/src/java/org/apache/lucene/search/PointInSetQuery.java	(revision )
@@ -17,7 +17,14 @@
 package org.apache.lucene.search;
 
 import java.io.IOException;
+import java.util.AbstractCollection;
+import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Set;
 
 import org.apache.lucene.document.IntPoint;
 import org.apache.lucene.index.FieldInfo;
@@ -28,6 +35,7 @@
 import org.apache.lucene.index.PointValues;
 import org.apache.lucene.index.PrefixCodedTerms.TermIterator;
 import org.apache.lucene.index.PrefixCodedTerms;
+import org.apache.lucene.index.Term;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.BytesRefBuilder;
 import org.apache.lucene.util.BytesRefIterator;
@@ -301,6 +309,49 @@
         return Relation.CELL_INSIDE_QUERY;
       }
     }
+  }
+
+  public Collection<BytesRef> getPackedPoints() {
+    return new AbstractCollection<BytesRef>() {
+
+      @Override
+      public Iterator<BytesRef> iterator() {
+        int size = (int) sortedPackedPoints.size();
+        PrefixCodedTerms.TermIterator iterator = sortedPackedPoints.iterator();
+        return new Iterator<BytesRef>() {
+
+          int upto = 0;
+
+          @Override
+          public boolean hasNext() {
+            return upto < size;
+          }
+
+          @Override
+          public BytesRef next() {
+            upto++;
+            return iterator.next();
+          }
+        };
+      }
+
+      @Override
+      public int size() {
+        return (int) sortedPackedPoints.size();
+      }
+    };
+  }
+
+  public String getField() {
+    return field;
+  }
+
+  public int getNumDims() {
+    return numDims;
+  }
+
+  public int getBytesPerDim() {
+    return bytesPerDim;
   }
 
   @Override
Index: lucene/core/src/test/org/apache/lucene/search/TestPointQueries.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestPointQueries.java	(revision 032247ff6e4d576f179a3db2050af6bedf9c716c)
+++ lucene/core/src/test/org/apache/lucene/search/TestPointQueries.java	(revision )
@@ -22,8 +22,10 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.BitSet;
+import java.util.Collection;
 import java.util.Comparator;
 import java.util.HashSet;
+import java.util.Iterator;
 import java.util.List;
 import java.util.Set;
 import java.util.concurrent.CountDownLatch;
@@ -1852,6 +1854,24 @@
 
     // binary
     assertEquals("bytes:{[12] [2a]}", BinaryPoint.newSetQuery("bytes", new byte[] {42}, new byte[] {18}).toString());
+  }
+
+  public void testPointInSetQueryGetPackedPoints() throws Exception {
+    int numValues = randomIntValue(1, 32);
+    List<byte[]> values = new ArrayList<>(numValues);
+    for (byte i = 0; i < numValues; i++) {
+      values.add(new byte[]{i});
+    }
+
+    PointInSetQuery query = (PointInSetQuery) BinaryPoint.newSetQuery("field", values.toArray(new byte[][]{}));
+    Collection<BytesRef> packedPoints = query.getPackedPoints();
+    assertEquals(numValues, packedPoints.size());
+    Iterator<BytesRef> iterator = packedPoints.iterator();
+    for (byte[] expectedValue : values) {
+      assertEquals(new BytesRef(expectedValue), iterator.next());
+    }
+    assertNull(iterator.next());
+    assertFalse(iterator.hasNext());
   }
 
   public void testRangeOptimizesIfAllPointsMatch() throws IOException {
Index: lucene/core/src/java/org/apache/lucene/search/PointRangeQuery.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/PointRangeQuery.java	(revision 032247ff6e4d576f179a3db2050af6bedf9c716c)
+++ lucene/core/src/java/org/apache/lucene/search/PointRangeQuery.java	(revision )
@@ -218,6 +218,26 @@
     };
   }
 
+  public String getField() {
+    return field;
+  }
+
+  public int getNumDims() {
+    return numDims;
+  }
+
+  public int getBytesPerDim() {
+    return bytesPerDim;
+  }
+
+  public byte[] getLowerPoint() {
+    return lowerPoint.clone();
+  }
+
+  public byte[] getUpperPoint() {
+    return upperPoint.clone();
+  }
+
   @Override
   public final int hashCode() {
     int hash = classHash();
