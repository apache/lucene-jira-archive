Index: src/java/org/apache/lucene/search/SingleTermEnum.java
===================================================================
--- src/java/org/apache/lucene/search/SingleTermEnum.java	(revision 0)
+++ src/java/org/apache/lucene/search/SingleTermEnum.java	(revision 0)
@@ -0,0 +1,67 @@
+package org.apache.lucene.search;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.IOException;
+
+import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.Term;
+
+/**
+ * Subclass of FilteredTermEnum for enumerating a single term.
+ * <p>
+ * This can be used by {@link MultiTermQuery}s that need only visit one term,
+ * but want to preserve MultiTermQuery semantics such as
+ * {@link MultiTermQuery#rewriteMethod}.
+ */
+public class SingleTermEnum extends FilteredTermEnum {
+  private Term singleTerm;
+  private boolean endEnum = false;
+  
+  /**
+   * Creates a new <code>SingleTermEnum</code>.
+   * <p>
+   * After calling the constructor the enumeration is already pointing to the term,
+   * if it exists.
+   */
+  public SingleTermEnum(IndexReader reader, Term singleTerm) throws IOException {
+    super();
+    this.singleTerm = singleTerm;
+    setEnum(reader.terms(singleTerm));
+  }
+
+  @Override
+  public float difference() {
+    return 1.0F;
+  }
+
+  @Override
+  protected boolean endEnum() {
+    return endEnum;
+  }
+
+  @Override
+  protected boolean termCompare(Term term) {
+    if (term.equals(singleTerm)) {
+      return true;
+    } else {
+      endEnum = true;
+      return false;
+    }
+  }
+}

Property changes on: src\java\org\apache\lucene\search\SingleTermEnum.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: src/java/org/apache/lucene/search/WildcardQuery.java
===================================================================
--- src/java/org/apache/lucene/search/WildcardQuery.java	(revision 822935)
+++ src/java/org/apache/lucene/search/WildcardQuery.java	(working copy)
@@ -37,16 +37,25 @@
  * @see WildcardTermEnum */
 public class WildcardQuery extends MultiTermQuery {
   private boolean termContainsWildcard;
+  private boolean termIsPrefix;
   protected Term term;
     
   public WildcardQuery(Term term) {
     super(term); //will be removed in 3.0
     this.term = term;
-    this.termContainsWildcard = (term.text().indexOf('*') != -1) || (term.text().indexOf('?') != -1);
+    String text = term.text();
+    this.termContainsWildcard = (text.indexOf('*') != -1)
+        || (text.indexOf('?') != -1);
+    this.termIsPrefix = termContainsWildcard 
+        && (text.indexOf('?') == -1) 
+        && (text.indexOf('*') == text.length() - 1);
   }
 
   protected FilteredTermEnum getEnum(IndexReader reader) throws IOException {
-    return new WildcardTermEnum(reader, getTerm());
+    if (termContainsWildcard)
+      return new WildcardTermEnum(reader, getTerm());
+    else
+      return new SingleTermEnum(reader, getTerm());
   }
   
   /**
@@ -57,10 +66,15 @@
   }
 
   public Query rewrite(IndexReader reader) throws IOException {
-    if (!termContainsWildcard)
-      return new TermQuery(getTerm());
-    else
+    if (termIsPrefix) {
+      MultiTermQuery rewritten = new PrefixQuery(term.createTerm(term.text()
+          .substring(0, term.text().indexOf('*'))));
+      rewritten.setBoost(getBoost());
+      rewritten.setRewriteMethod(getRewriteMethod());
+      return rewritten;
+    } else {
       return super.rewrite(reader);
+    }
   }
   
   /** Prints a user-readable version of this query. */
Index: src/test/org/apache/lucene/search/TestWildcard.java
===================================================================
--- src/test/org/apache/lucene/search/TestWildcard.java	(revision 822935)
+++ src/test/org/apache/lucene/search/TestWildcard.java	(working copy)
@@ -58,20 +58,94 @@
   
   /**
    * Tests if a WildcardQuery that has no wildcard in the term is rewritten to a single
-   * TermQuery.
+   * TermQuery. The boost should be preserved, and the rewrite should return
+   * a ConstantScoreQuery if the WildcardQuery had a ConstantScore rewriteMethod.
    */
   public void testTermWithoutWildcard() throws IOException {
       RAMDirectory indexStore = getIndexStore("field", new String[]{"nowildcard", "nowildcardx"});
       IndexSearcher searcher = new IndexSearcher(indexStore, true);
 
-      Query wq = new WildcardQuery(new Term("field", "nowildcard"));
+      MultiTermQuery wq = new WildcardQuery(new Term("field", "nowildcard"));
       assertMatches(searcher, wq, 1);
 
-      wq = searcher.rewrite(wq);
-      assertTrue(wq instanceof TermQuery);
+      wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);
+      wq.setBoost(0.1F);
+      Query q = searcher.rewrite(wq);
+      assertTrue(q instanceof TermQuery);
+      assertEquals(q.getBoost(), wq.getBoost());
+      
+      wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);
+      wq.setBoost(0.2F);
+      q = searcher.rewrite(wq);
+      assertTrue(q instanceof ConstantScoreQuery);
+      assertEquals(q.getBoost(), wq.getBoost());
+      
+      wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);
+      wq.setBoost(0.3F);
+      q = searcher.rewrite(wq);
+      assertTrue(q instanceof ConstantScoreQuery);
+      assertEquals(q.getBoost(), wq.getBoost());
+      
+      wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);
+      wq.setBoost(0.4F);
+      q = searcher.rewrite(wq);
+      assertTrue(q instanceof ConstantScoreQuery);
+      assertEquals(q.getBoost(), wq.getBoost());
   }
+  
+  /**
+   * Tests if a WildcardQuery with an empty term is rewritten to an empty BooleanQuery
+   */
+  public void testEmptyTerm() throws IOException {
+    RAMDirectory indexStore = getIndexStore("field", new String[]{"nowildcard", "nowildcardx"});
+    IndexSearcher searcher = new IndexSearcher(indexStore, true);
 
+    MultiTermQuery wq = new WildcardQuery(new Term("field", ""));
+    wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);
+    assertMatches(searcher, wq, 0);
+    BooleanQuery expected = new BooleanQuery();
+    assertEquals(searcher.rewrite(expected), searcher.rewrite(wq));
+  }
+  
   /**
+   * Tests if a WildcardQuery that has only a trailing * in the term is
+   * rewritten to a single PrefixQuery. The boost and rewriteMethod should be
+   * preserved.
+   */
+  public void testPrefixTerm() throws IOException {
+    RAMDirectory indexStore = getIndexStore("field", new String[]{"prefix", "prefixx"});
+    IndexSearcher searcher = new IndexSearcher(indexStore, true);
+
+    MultiTermQuery wq = new WildcardQuery(new Term("field", "prefix*"));
+    assertMatches(searcher, wq, 2);
+    
+    MultiTermQuery expected = new PrefixQuery(new Term("field", "prefix"));
+    wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);
+    wq.setBoost(0.1F);
+    expected.setRewriteMethod(wq.getRewriteMethod());
+    expected.setBoost(wq.getBoost());
+    assertEquals(searcher.rewrite(expected), searcher.rewrite(wq));
+    
+    wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);
+    wq.setBoost(0.2F);
+    expected.setRewriteMethod(wq.getRewriteMethod());
+    expected.setBoost(wq.getBoost());
+    assertEquals(searcher.rewrite(expected), searcher.rewrite(wq));
+    
+    wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);
+    wq.setBoost(0.3F);
+    expected.setRewriteMethod(wq.getRewriteMethod());
+    expected.setBoost(wq.getBoost());
+    assertEquals(searcher.rewrite(expected), searcher.rewrite(wq));
+    
+    wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);
+    wq.setBoost(0.4F);
+    expected.setRewriteMethod(wq.getRewriteMethod());
+    expected.setBoost(wq.getBoost());
+    assertEquals(searcher.rewrite(expected), searcher.rewrite(wq));
+  }
+
+  /**
    * Tests Wildcard queries with an asterisk.
    */
   public void testAsterisk()
