diff --git a/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/UserDictionary.java b/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/UserDictionary.java
index c8ab8d7..5f62139 100644
--- a/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/UserDictionary.java
+++ b/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/UserDictionary.java
@@ -109,6 +109,11 @@ public final class UserDictionary implements Dictionary {
       String[] readings = values[2].replaceAll("  *", " ").split(" ");
       String pos = values[3];
       
+      if (!values[0].equals(values[1].replaceAll("  *", ""))) {
+        throw new IllegalArgumentException("Illegal user dictionary entry " + values[0] +
+            " - tokens should be segments of the original text");
+      }
+      
       if (segmentation.length != readings.length) {
         throw new RuntimeException("Illegal user dictionary entry " + values[0] +
                                    " - the number of segmentations (" + segmentation.length + ")" +
diff --git a/lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/dict/UserDictionaryTest.java b/lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/dict/UserDictionaryTest.java
index 88a366f..e899e3d 100644
--- a/lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/dict/UserDictionaryTest.java
+++ b/lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/dict/UserDictionaryTest.java
@@ -18,6 +18,7 @@ package org.apache.lucene.analysis.ja.dict;
 
 
 import java.io.IOException;
+import java.io.StringReader;
 
 import org.apache.lucene.analysis.ja.TestJapaneseTokenizer;
 import org.apache.lucene.util.LuceneTestCase;
@@ -77,4 +78,28 @@ public class UserDictionaryTest extends LuceneTestCase {
     UserDictionary dictionary = TestJapaneseTokenizer.readDict();
     assertNotNull(dictionary);
   }
+  
+  @Test
+  public void testInvalidUserDictionary() throws Exception {
+    try {
+      UserDictionary.open(new StringReader("fg,fgh,foo1,bar"));
+      fail("Expecting exception");
+    } catch (IllegalArgumentException e) {
+      assertTrue(e.getMessage().startsWith("Illegal user dictionary entry fg -"));
+    }
+
+    try {
+      UserDictionary.open(new StringReader("ab,a b,foo1 foo2,bar\nfoo,bar,foo1,bar"));
+      fail("Expecting exception");
+    } catch (IllegalArgumentException e) {
+      assertTrue(e.getMessage().startsWith("Illegal user dictionary entry foo -"));
+    }
+    
+    try {
+      UserDictionary.open(new StringReader("foo,f oo,foo1,bar"));
+      fail("Expecting exception");
+    } catch (RuntimeException e) {
+      assertTrue(e.getMessage().startsWith("Illegal user dictionary entry foo -"));
+    }
+  }
 }
