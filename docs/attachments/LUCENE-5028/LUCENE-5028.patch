Index: lucene/misc/src/java/org/apache/lucene/util/fst/UpToTwoPositiveIntOutputs.java
===================================================================
--- lucene/misc/src/java/org/apache/lucene/util/fst/UpToTwoPositiveIntOutputs.java	(revision 1488477)
+++ lucene/misc/src/java/org/apache/lucene/util/fst/UpToTwoPositiveIntOutputs.java	(working copy)
@@ -88,17 +88,13 @@
   
   private final static Long NO_OUTPUT = new Long(0);
 
-  private final boolean doShare;
+  private final static UpToTwoPositiveIntOutputs singleton = new UpToTwoPositiveIntOutputs();
 
-  private final static UpToTwoPositiveIntOutputs singletonShare = new UpToTwoPositiveIntOutputs(true);
-  private final static UpToTwoPositiveIntOutputs singletonNoShare = new UpToTwoPositiveIntOutputs(false);
-
-  private UpToTwoPositiveIntOutputs(boolean doShare) {
-    this.doShare = doShare;
+  private UpToTwoPositiveIntOutputs() {
   }
 
-  public static UpToTwoPositiveIntOutputs getSingleton(boolean doShare) {
-    return doShare ? singletonShare : singletonNoShare;
+  public static UpToTwoPositiveIntOutputs getSingleton() {
+    return singleton;
   }
 
   public Long get(long v) {
@@ -121,14 +117,10 @@
     final Long output2 = (Long) _output2;
     if (output1 == NO_OUTPUT || output2 == NO_OUTPUT) {
       return NO_OUTPUT;
-    } else if (doShare) {
+    } else {
       assert output1 > 0;
       assert output2 > 0;
       return Math.min(output1, output2);
-    } else if (output1.equals(output2)) {
-      return output1;
-    } else {
-      return NO_OUTPUT;
     }
   }
 
Index: lucene/misc/src/test/org/apache/lucene/util/fst/TestFSTsMisc.java
===================================================================
--- lucene/misc/src/test/org/apache/lucene/util/fst/TestFSTsMisc.java	(revision 1488477)
+++ lucene/misc/src/test/org/apache/lucene/util/fst/TestFSTsMisc.java	(working copy)
@@ -86,7 +86,7 @@
       if (VERBOSE) {
         System.out.println("TEST: now test UpToTwoPositiveIntOutputs");
       }
-      final UpToTwoPositiveIntOutputs outputs = UpToTwoPositiveIntOutputs.getSingleton(true);
+      final UpToTwoPositiveIntOutputs outputs = UpToTwoPositiveIntOutputs.getSingleton();
       final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);
       long lastOutput = 0;
       for(int idx=0;idx<terms.length;idx++) {
