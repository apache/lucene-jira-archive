Index: dev-tools/scripts/archive-solr-ref-guide.sh
===================================================================
--- dev-tools/scripts/archive-solr-ref-guide.sh	(revision 1647778)
+++ dev-tools/scripts/archive-solr-ref-guide.sh	(working copy)
@@ -17,9 +17,9 @@
 
 ####
 
-# Convinience script to generates the SVN command line for you to run in order to 
-# remove old (arvhived) versions of the solr ref guide from the dist repo, and 
-# (if neccessary) clean up any old RC files.
+# Convenience script to generates the SVN command line for you to run in order to 
+# remove old (archived) versions of the solr ref guide from the dist repo, and 
+# (if necessary) clean up any old RC files.
 #
 # See: https://cwiki.apache.org/confluence/display/solr/Internal+-+How+To+Publish+This+Documentation
 
Index: lucene/CHANGES.txt
===================================================================
--- lucene/CHANGES.txt	(revision 1647778)
+++ lucene/CHANGES.txt	(working copy)
@@ -662,7 +662,7 @@
 
 * LUCENE-5818, LUCENE-5823: Fix hunspell overgeneration for short strings that also 
   match affixes, words are only stripped to a zero-length string if FULLSTRIP option
-  is specifed in the dictionary.  (Robert Muir)
+  is specified in the dictionary.  (Robert Muir)
 
 * LUCENE-5824: Fix hunspell 'long' flag handling. (Robert Muir)
 
Index: lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/TaxonomyIndexArrays.java
===================================================================
--- lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/TaxonomyIndexArrays.java	(revision 1647778)
+++ lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/TaxonomyIndexArrays.java	(working copy)
@@ -38,7 +38,7 @@
 
   private final int[] parents;
 
-  // the following two arrays are lazily intialized. note that we only keep a
+  // the following two arrays are lazily initialized. note that we only keep a
   // single boolean member as volatile, instead of declaring the arrays
   // volatile. the code guarantees that only after the boolean is set to true,
   // the arrays are returned.
Index: lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined.java
===================================================================
--- lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined.java	(revision 1647778)
+++ lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined.java	(working copy)
@@ -743,7 +743,7 @@
   private void assertConsistentYoungestChild(final FacetLabel abPath,
       final int abOrd, final int abYoungChildBase1, final int abYoungChildBase2, final int retry, int numCategories)
       throws Exception {
-    SlowRAMDirectory indexDir = new SlowRAMDirectory(-1, null); // no slowness for intialization
+    SlowRAMDirectory indexDir = new SlowRAMDirectory(-1, null); // no slowness for initialization
     TaxonomyWriter tw = new DirectoryTaxonomyWriter(indexDir);
     tw.addCategory(new FacetLabel("a", "0"));
     tw.addCategory(abPath);
Index: lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources.java
===================================================================
--- lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources.java	(revision 1647778)
+++ lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources.java	(working copy)
@@ -341,7 +341,7 @@
       ValueSource vs = new NormValueSource("byte");
       assertHits(new FunctionQuery(vs), new float[] { 0f, 0f });
 
-      // regardless of wether norms exist, value source exists == 0
+      // regardless of whether norms exist, value source exists == 0
       assertAllExist(vs);
 
       vs = new NormValueSource("text");
@@ -486,7 +486,7 @@
     assertHits(new FunctionQuery(vs), new float[] { 0f, 1f });
     assertAllExist(vs);
                
-    // regardless of wether norms exist, value source exists == 0
+    // regardless of whether norms exist, value source exists == 0
     vs = new TermFreqValueSource("bogus", "bogus", "bogus", new BytesRef("bogus"));
     assertHits(new FunctionQuery(vs), new float[] { 0F, 0F });
     assertAllExist(vs);
@@ -507,7 +507,7 @@
       assertHits(new FunctionQuery(vs), new float[] { 0f, 1f });
       assertAllExist(vs);
       
-      // regardless of wether norms exist, value source exists == 0
+      // regardless of whether norms exist, value source exists == 0
       vs = new TFValueSource("bogus", "bogus", "bogus", new BytesRef("bogus"));
       assertHits(new FunctionQuery(vs), new float[] { 0F, 0F });
       assertAllExist(vs);
Index: solr/CHANGES.txt
===================================================================
--- solr/CHANGES.txt	(revision 1647778)
+++ solr/CHANGES.txt	(working copy)
@@ -2545,7 +2545,7 @@
 * SOLR-4909: Use DirectoryReader.openIfChanged in non-NRT mode.
   (Michael Garski via Robert Muir)
 
-* SOLR-5227: Correctly fail schema initalization if a dynamicField is configured to
+* SOLR-5227: Correctly fail schema initialization if a dynamicField is configured to
   be required, or have a default value.  (hossman)
 
 * SOLR-5231: Fixed a bug with the behavior of BoolField that caused documents w/o
@@ -5900,7 +5900,7 @@
   (James Dyer, others)
   
 * SOLR-3260: DataImportHandler: ScriptTransformer gives better error messages when 
-  problems arise on initalization (no Script Engine, invalid script, etc). (James Dyer)
+  problems arise on initialization (no Script Engine, invalid script, etc). (James Dyer)
 
 * SOLR-2959: edismax now respects the magic fields '_val_' and '_query_'
   (Michael Watts, hossman)
@@ -9461,7 +9461,7 @@
     to facilitate checking for parameters that must be present.
     (Ryan McKinley, J.J. Larrea via yonik)
 
- 8. SOLR-179: By default, solr will abort after any severe initalization
+ 8. SOLR-179: By default, solr will abort after any severe initialization
     errors.  This behavior can be disabled by setting:
     <abortOnConfigurationError>false</abortOnConfigurationError>
     in solrconfig.xml (ryan)
Index: solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder.java
===================================================================
--- solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder.java	(revision 1647778)
+++ solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder.java	(working copy)
@@ -400,7 +400,7 @@
   }
 
   private void resetEntity(EntityProcessorWrapper epw) {
-    epw.setInitalized(false);
+    epw.setInitialized(false);
     for (EntityProcessorWrapper child : epw.getChildren()) {
       resetEntity(child);
     }
@@ -432,9 +432,9 @@
             pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,
             session, parentCtx, this);
     epw.init(ctx);
-    if (!epw.isInitalized()) {
+    if (!epw.isInitialized()) {
       entitiesToDestroy.add(epw);
-      epw.setInitalized(true);
+      epw.setInitialized(true);
     }
     
     if (reqParams.getStart() > 0) {
Index: solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper.java
===================================================================
--- solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper.java	(revision 1647778)
+++ solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper.java	(working copy)
@@ -45,7 +45,7 @@
   private DataSource datasource;
   private List<EntityProcessorWrapper> children = new ArrayList<>();
   private DocBuilder docBuilder;
-  private boolean initalized;
+  private boolean initialized;
   private String onError;
   private Context context;
   private VariableResolver resolver;
@@ -317,11 +317,23 @@
     this.datasource = datasource;
   }
 
+  /** @deprecated will be removed in Solr 6; use {@link #isInitialized()} */
+  @Deprecated
   public boolean isInitalized() {
-    return initalized;
+    return initialized;
   }
 
-  public void setInitalized(boolean initalized) {
-    this.initalized = initalized;
+  public boolean isInitialized() {
+    return initialized;
   }
+
+  /** @deprecated will be removed in Solr 6; use {@link #setInitialized(boolean)} */
+  @Deprecated
+  public void setInitalized(boolean initialized) {
+    this.initialized = initialized;
+  }
+  
+  public void setInitialized(boolean initialized) {
+    this.initialized = initialized;
+  }
 }
Index: solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader.java
===================================================================
--- solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader.java	(revision 1647778)
+++ solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader.java	(working copy)
@@ -566,7 +566,7 @@
       for (Node n : searchList)
         if (n.xpathName.equals(xpathName)) return n;
       // new territory! add a new node for this Xpath bitty
-      Node n = new Node(xpathName, this); // a minimal Node initalization
+      Node n = new Node(xpathName, this); // a minimal Node initialization
       Matcher m = ATTRIB_PRESENT_WITHVAL.matcher(xpathName);
       if (m.find()) {
         n.name = m.group(1);
Index: solr/contrib/dataimporthandler/src/test-files/dih/solr/collection1/conf/contentstream-solrconfig.xml
===================================================================
--- solr/contrib/dataimporthandler/src/test-files/dih/solr/collection1/conf/contentstream-solrconfig.xml	(revision 1647778)
+++ solr/contrib/dataimporthandler/src/test-files/dih/solr/collection1/conf/contentstream-solrconfig.xml	(working copy)
@@ -298,7 +298,7 @@
        
        To enable solr1.1 behavior, remove the /update handler or change its path
        
-       "update.processor.class" is the class name for the UpdateRequestProcessor.  It is initalized
+       "update.processor.class" is the class name for the UpdateRequestProcessor.  It is initialized
        only once.  This can not be changed for each request.
     -->
   <requestHandler name="/update" class="solr.UpdateRequestHandler">
Index: solr/contrib/dataimporthandler/src/test-files/dih/solr/collection1/conf/dataimport-nodatasource-solrconfig.xml
===================================================================
--- solr/contrib/dataimporthandler/src/test-files/dih/solr/collection1/conf/dataimport-nodatasource-solrconfig.xml	(revision 1647778)
+++ solr/contrib/dataimporthandler/src/test-files/dih/solr/collection1/conf/dataimport-nodatasource-solrconfig.xml	(working copy)
@@ -296,7 +296,7 @@
        
        To enable solr1.1 behavior, remove the /update handler or change its path
        
-       "update.processor.class" is the class name for the UpdateRequestProcessor.  It is initalized
+       "update.processor.class" is the class name for the UpdateRequestProcessor.  It is initialized
        only once.  This can not be changed for each request.
     -->
   <requestHandler name="/update" class="solr.UpdateRequestHandler">
Index: solr/contrib/dataimporthandler/src/test-files/dih/solr/collection1/conf/dataimport-solrconfig.xml
===================================================================
--- solr/contrib/dataimporthandler/src/test-files/dih/solr/collection1/conf/dataimport-solrconfig.xml	(revision 1647778)
+++ solr/contrib/dataimporthandler/src/test-files/dih/solr/collection1/conf/dataimport-solrconfig.xml	(working copy)
@@ -297,7 +297,7 @@
        
        To enable solr1.1 behavior, remove the /update handler or change its path
        
-       "update.processor.class" is the class name for the UpdateRequestProcessor.  It is initalized
+       "update.processor.class" is the class name for the UpdateRequestProcessor.  It is initialized
        only once.  This can not be changed for each request.
     -->
   <requestHandler name="/update" class="solr.UpdateRequestHandler" >
Index: solr/contrib/dataimporthandler-extras/src/test-files/dihextras/solr/collection1/conf/dataimport-solrconfig.xml
===================================================================
--- solr/contrib/dataimporthandler-extras/src/test-files/dihextras/solr/collection1/conf/dataimport-solrconfig.xml	(revision 1647778)
+++ solr/contrib/dataimporthandler-extras/src/test-files/dihextras/solr/collection1/conf/dataimport-solrconfig.xml	(working copy)
@@ -294,7 +294,7 @@
        
        To enable solr1.1 behavior, remove the /update handler or change its path
        
-       "update.processor.class" is the class name for the UpdateRequestProcessor.  It is initalized
+       "update.processor.class" is the class name for the UpdateRequestProcessor.  It is initialized
        only once.  This can not be changed for each request.
     -->
   <requestHandler name="/update" class="solr.UpdateRequestHandler">
Index: solr/contrib/morphlines-core/src/test-files/solr/collection1/conf/solrconfig.xml
===================================================================
--- solr/contrib/morphlines-core/src/test-files/solr/collection1/conf/solrconfig.xml	(revision 1647778)
+++ solr/contrib/morphlines-core/src/test-files/solr/collection1/conf/solrconfig.xml	(working copy)
@@ -1088,7 +1088,7 @@
 
        http://wiki.apache.org/solr/SolrReplication 
 
-       It is also neccessary for SolrCloud to function (in Cloud mode, the 
+       It is also necessary for SolrCloud to function (in Cloud mode, the
        replication handler is used to bulk transfer segments when nodes 
        are added or need to recover).
 
@@ -1097,7 +1097,7 @@
   <requestHandler name="/replication" class="solr.ReplicationHandler" > 
     <!--
        To enable simple master/slave replication, uncomment one of the 
-       sections below, depending on wether this solr instance should be 
+       sections below, depending on whether this solr instance should be
        the "master" or a "slave".  If this instance is a "slave" you will 
        also need to fill in the masterUrl to point to a real machine.
     -->
Index: solr/contrib/morphlines-core/src/test-files/solr/solrcelltest/collection1/conf/solrconfig.xml
===================================================================
--- solr/contrib/morphlines-core/src/test-files/solr/solrcelltest/collection1/conf/solrconfig.xml	(revision 1647778)
+++ solr/contrib/morphlines-core/src/test-files/solr/solrcelltest/collection1/conf/solrconfig.xml	(working copy)
@@ -1101,7 +1101,7 @@
 
        http://wiki.apache.org/solr/SolrReplication 
 
-       It is also neccessary for SolrCloud to function (in Cloud mode, the 
+       It is also necessary for SolrCloud to function (in Cloud mode, the
        replication handler is used to bulk transfer segments when nodes 
        are added or need to recover).
 
@@ -1110,7 +1110,7 @@
   <requestHandler name="/replication" class="solr.ReplicationHandler" > 
     <!--
        To enable simple master/slave replication, uncomment one of the 
-       sections below, depending on wether this solr instance should be 
+       sections below, depending on whether this solr instance should be
        the "master" or a "slave".  If this instance is a "slave" you will 
        also need to fill in the masterUrl to point to a real machine.
     -->
Index: solr/core/src/java/org/apache/solr/handler/admin/LoggingHandler.java
===================================================================
--- solr/core/src/java/org/apache/solr/handler/admin/LoggingHandler.java	(revision 1647778)
+++ solr/core/src/java/org/apache/solr/handler/admin/LoggingHandler.java	(working copy)
@@ -67,7 +67,7 @@
   public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {
     // Don't do anything if the framework is unknown
     if(watcher==null) {
-      rsp.add("error", "Logging Not Initalized");
+      rsp.add("error", "Logging Not Initialized");
       return;
     }
     rsp.add("watcher", watcher.getName());
Index: solr/core/src/java/org/apache/solr/handler/component/StatsComponent.java
===================================================================
--- solr/core/src/java/org/apache/solr/handler/component/StatsComponent.java	(revision 1647778)
+++ solr/core/src/java/org/apache/solr/handler/component/StatsComponent.java	(working copy)
@@ -138,7 +138,7 @@
 
   /**
    * Given a map of {@link StatsValues} using the appropriate response key,
-   * builds up the neccessary "stats" data structure for including in the response -- 
+   * builds up the necessary "stats" data structure for including in the response -- 
    * including the esoteric "stats_fields" wrapper.
    */
   public static NamedList<NamedList<NamedList<?>>> convertToResponse
Index: solr/core/src/java/org/apache/solr/handler/component/StatsField.java
===================================================================
--- solr/core/src/java/org/apache/solr/handler/component/StatsField.java	(revision 1647778)
+++ solr/core/src/java/org/apache/solr/handler/component/StatsField.java	(working copy)
@@ -361,7 +361,7 @@
   }
 
   /**
-   * Wether or not the effective value of the {@link StatsParams#STATS_CALC_DISTINCT} param
+   * Whether or not the effective value of the {@link StatsParams#STATS_CALC_DISTINCT} param
    * is true or false for this StatsField
    */
   public boolean getCalcDistinct() {
Index: solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory.java
===================================================================
--- solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory.java	(revision 1647778)
+++ solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory.java	(working copy)
@@ -359,7 +359,7 @@
     assert null != max : "max is null but min isn't ? ==> " + min;
 
     // we always use the double value, because that way the response Object class is 
-    // consistent regardless of wether we only have 1 value or many that we min/max
+    // consistent regardless of whether we only have 1 value or many that we min/max
     //
     // TODO: would be nice to have subclasses for each type of Number ... breaks backcompat
     double minD = min.doubleValue();
Index: solr/core/src/java/org/apache/solr/internal/csv/ExtendedBufferedReader.java
===================================================================
--- solr/core/src/java/org/apache/solr/internal/csv/ExtendedBufferedReader.java	(revision 1647778)
+++ solr/core/src/java/org/apache/solr/internal/csv/ExtendedBufferedReader.java	(working copy)
@@ -77,7 +77,7 @@
    */
   @Override
   public int read() throws IOException {
-    // initalize the lookahead
+    // initialize the lookahead
     if (lookaheadChar == UNDEFINED) {
       lookaheadChar = super.read();
     }
Index: solr/core/src/java/org/apache/solr/schema/SchemaField.java
===================================================================
--- solr/core/src/java/org/apache/solr/schema/SchemaField.java	(revision 1647778)
+++ solr/core/src/java/org/apache/solr/schema/SchemaField.java	(working copy)
@@ -78,7 +78,7 @@
     this.properties = properties;
     this.defaultValue = defaultValue;
     
-    // initalize with the required property flag
+    // initialize with the required property flag
     required = (properties & REQUIRED) !=0;
 
     type.checkSchemaField(this);
Index: solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java	(revision 1647778)
+++ solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java	(working copy)
@@ -205,7 +205,7 @@
   }
 
   /**
-   * Builds the neccessary collector chain (via delegate wrapping) and executes the query 
+   * Builds the necessary collector chain (via delegate wrapping) and executes the query 
    * against it.  This method takes into consideration both the explicitly provided collector 
    * and postFilter as well as any needed collector wrappers for dealing with options 
    * specified in the QueryCOmmand.
Index: solr/core/src/java/org/apache/solr/search/similarities/SweetSpotSimilarityFactory.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/similarities/SweetSpotSimilarityFactory.java	(revision 1647778)
+++ solr/core/src/java/org/apache/solr/search/similarities/SweetSpotSimilarityFactory.java	(working copy)
@@ -61,9 +61,9 @@
  *  <li>If any individual settings from one of the above mentioned sets 
  *      are specified, then all settings from that set must be specified.
  *  </li>
- *  <li>If Baseline TF settings are spcified, then Hyperbolic TF settings 
+ *  <li>If Baseline TF settings are specified, then Hyperbolic TF settings
  *      are not permitted, and vice versa. (The settings specified will 
- *      determine wether {@link SweetSpotSimilarity#baselineTf} or 
+ *      determine whether {@link SweetSpotSimilarity#baselineTf} or
  *      {@link SweetSpotSimilarity#hyperbolicTf} will be used.
  *  </li>
  * </ul>
@@ -139,7 +139,7 @@
       throw new SolrException(SERVER_ERROR, "Can not mix hyperbolicTf settings with baselineTf settings");
     }
 
-    // pick Similarity impl based on wether hyper tf settings are set
+    // pick Similarity impl based on whether hyper tf settings are set
     sim = (null != hyper_min) ? new HyperbolicSweetSpotSimilarity() 
       : new SweetSpotSimilarity();
     
@@ -159,7 +159,7 @@
 
   @Override
   public Similarity getSimilarity() {
-    assert sim != null : "SweetSpotSimilarityFactory was not initalized";
+    assert sim != null : "SweetSpotSimilarityFactory was not initialized";
     return sim;
   }
   
@@ -183,5 +183,5 @@
     public float tf(float freq) {
       return hyperbolicTf(freq);
     }
-  };
+  }
 }
Index: solr/core/src/java/org/apache/solr/spelling/ConjunctionSolrSpellChecker.java
===================================================================
--- solr/core/src/java/org/apache/solr/spelling/ConjunctionSolrSpellChecker.java	(revision 1647778)
+++ solr/core/src/java/org/apache/solr/spelling/ConjunctionSolrSpellChecker.java	(working copy)
@@ -47,10 +47,10 @@
   private String dictionaryName = null;
   private Analyzer queryAnalyzer = null;
   private List<SolrSpellChecker> checkers = new ArrayList<>();
-  private boolean initalized = false;
+  private boolean initialized = false;
   
   public void addChecker(SolrSpellChecker checker) {
-    if (initalized) {
+    if (initialized) {
       throw new IllegalStateException(
           "Need to add checkers before calling init()");
     }
@@ -102,7 +102,7 @@
     if (dictionaryName == null) {
       dictionaryName = DEFAULT_DICTIONARY_NAME;
     }
-    initalized = true;
+    initialized = true;
     return dictionaryName;
   }
   
Index: solr/core/src/test/org/apache/solr/SolrInfoMBeanTest.java
===================================================================
--- solr/core/src/test/org/apache/solr/SolrInfoMBeanTest.java	(revision 1647778)
+++ solr/core/src/test/org/apache/solr/SolrInfoMBeanTest.java	(working copy)
@@ -78,7 +78,7 @@
         }
         catch( InstantiationException ex ) {
           // expected...
-          //System.out.println( "unable to initalize: "+clazz );
+          //System.out.println( "unable to initialize: "+clazz );
         }
       }
     }
Index: solr/core/src/test/org/apache/solr/core/SOLR749Test.java
===================================================================
--- solr/core/src/test/org/apache/solr/core/SOLR749Test.java	(revision 1647778)
+++ solr/core/src/test/org/apache/solr/core/SOLR749Test.java	(working copy)
@@ -79,7 +79,7 @@
               "//result[@numFound=19]");
 
       // don't assume specific clause evaluation ordering.
-      // ideally this is 19, but could be as high as 20 depending on wether frange's 
+      // ideally this is 19, but could be as high as 20 depending on whether frange's
       // scorer has next() called on it before other clauses skipTo
       int count = CountUsageValueSourceParser.getAndClearCount("frange_in_bq");
       assertTrue("frange_in_bq: " + count, (19 <= count && count <= 20));
Index: solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotLargeTest.java
===================================================================
--- solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotLargeTest.java	(revision 1647778)
+++ solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotLargeTest.java	(working copy)
@@ -207,7 +207,7 @@
 
     // basic check w/ limit & index sort
     for (SolrParams facetParams : 
-           // results should be the same regardless of wether local params are used
+           // results should be the same regardless of whether local params are used
            new SolrParams[] {
              // Broken: SOLR-6193
              // params("facet.pivot","{!facet.limit=4 facet.sort=index}place_s,company_t"),
@@ -476,7 +476,7 @@
 
     // Negative facet limit
     for (SolrParams facetParams : 
-           // results should be the same regardless of wether facet.limit is global, 
+           // results should be the same regardless of whether facet.limit is global,
            // a local param, or specified as a per-field override for both fields
            new SolrParams[] {
              params(FacetParams.FACET_LIMIT, "-1",
@@ -508,7 +508,7 @@
 
     // Negative per-field facet limit (outer)
     for (SolrParams facetParams : 
-           // results should be the same regardless of wether per-field facet.limit is 
+           // results should be the same regardless of whether per-field facet.limit is
            // a global or a local param
            new SolrParams[] {
              // Broken: SOLR-6193
@@ -535,7 +535,7 @@
 
     // Negative per-field facet limit (inner)
     for (SolrParams facetParams : 
-           // results should be the same regardless of wether per-field facet.limit is 
+           // results should be the same regardless of whether per-field facet.limit is
            // a global or a local param
            new SolrParams[] {
              // Broken: SOLR-6193
Index: solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotSmallAdvancedTest.java
===================================================================
--- solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotSmallAdvancedTest.java	(revision 1647778)
+++ solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotSmallAdvancedTest.java	(working copy)
@@ -142,7 +142,7 @@
 
       if (params.getBool("facet", false)) {
         // if this was a facet request, then the top pivot constraint and pivot 
-        // stats should match what we expect - regardless of wether refine
+        // stats should match what we expect - regardless of whether refine
         // was used, or if the query was initially satisfied by the default overrequest
         
         List<PivotField> placePivots = rsp.getFacetPivot().get("place_t,company_t");
Index: solr/core/src/test/org/apache/solr/handler/component/SearchHandlerTest.java
===================================================================
--- solr/core/src/test/org/apache/solr/handler/component/SearchHandlerTest.java	(revision 1647778)
+++ solr/core/src/test/org/apache/solr/handler/component/SearchHandlerTest.java	(working copy)
@@ -37,7 +37,7 @@
   
   @SuppressWarnings("unchecked")
   @Test
-  public void testInitalization()
+  public void testInitialization()
   {
     SolrCore core = h.getCore();
     
Index: solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests.java
===================================================================
--- solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests.java	(revision 1647778)
+++ solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests.java	(working copy)
@@ -949,7 +949,7 @@
     server.commit();
     assertNumFound("*:*", 0); // make sure it got in
 
-    // results of this test should be the same regardless of wether any docs in index
+    // results of this test should be the same regardless of whether any docs in index
     if (random().nextBoolean()) {
       server.add(makeTestDoc("id", 1, "features", "aaa", "cat", "a", "inStock", true, "popularity", 12, "price", .017));
       server.commit();
