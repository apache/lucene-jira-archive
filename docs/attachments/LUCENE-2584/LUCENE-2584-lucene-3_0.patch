Index: src/java/org/apache/lucene/index/SegmentInfo.java
===================================================================
--- src/java/org/apache/lucene/index/SegmentInfo.java	(revision 832571)
+++ src/java/org/apache/lucene/index/SegmentInfo.java	(revision )
@@ -25,6 +25,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.ArrayList;
 import java.util.Collections;
 
@@ -590,16 +591,16 @@
       return files;
     }
     
-    files = new ArrayList<String>();
+    List<String> fileList = new ArrayList<String>();
     
     boolean useCompoundFile = getUseCompoundFile();
 
     if (useCompoundFile) {
-      files.add(name + "." + IndexFileNames.COMPOUND_FILE_EXTENSION);
+      fileList.add(name + "." + IndexFileNames.COMPOUND_FILE_EXTENSION);
     } else {
       final String[] exts = IndexFileNames.NON_STORE_INDEX_EXTENSIONS;
       for(int i=0;i<exts.length;i++)
-        addIfExists(files, name + "." + exts[i]);
+        addIfExists(fileList, name + "." + exts[i]);
     }
 
     if (docStoreOffset != -1) {
@@ -607,23 +608,23 @@
       // vectors) with other segments
       assert docStoreSegment != null;
       if (docStoreIsCompoundFile) {
-        files.add(docStoreSegment + "." + IndexFileNames.COMPOUND_FILE_STORE_EXTENSION);
+        fileList.add(docStoreSegment + "." + IndexFileNames.COMPOUND_FILE_STORE_EXTENSION);
       } else {
         final String[] exts = IndexFileNames.STORE_INDEX_EXTENSIONS;
         for(int i=0;i<exts.length;i++)
-          addIfExists(files, docStoreSegment + "." + exts[i]);
+          addIfExists(fileList, docStoreSegment + "." + exts[i]);
       }
     } else if (!useCompoundFile) {
       // We are not sharing, and, these files were not
       // included in the compound file
       final String[] exts = IndexFileNames.STORE_INDEX_EXTENSIONS;
       for(int i=0;i<exts.length;i++)
-        addIfExists(files, name + "." + exts[i]);
+        addIfExists(fileList, name + "." + exts[i]);
     }
 
     String delFileName = IndexFileNames.fileNameFromGeneration(name, "." + IndexFileNames.DELETES_EXTENSION, delGen);
     if (delFileName != null && (delGen >= YES || dir.fileExists(delFileName))) {
-      files.add(delFileName);
+      fileList.add(delFileName);
     }
 
     // Careful logic for norms files    
@@ -632,14 +633,14 @@
         long gen = normGen[i];
         if (gen >= YES) {
           // Definitely a separate norm file, with generation:
-          files.add(IndexFileNames.fileNameFromGeneration(name, "." + IndexFileNames.SEPARATE_NORMS_EXTENSION + i, gen));
+          fileList.add(IndexFileNames.fileNameFromGeneration(name, "." + IndexFileNames.SEPARATE_NORMS_EXTENSION + i, gen));
         } else if (NO == gen) {
           // No separate norms but maybe plain norms
           // in the non compound file case:
           if (!hasSingleNormFile && !useCompoundFile) {
             String fileName = name + "." + IndexFileNames.PLAIN_NORMS_EXTENSION + i;
             if (dir.fileExists(fileName)) {
-              files.add(fileName);
+              fileList.add(fileName);
             }
           }
         } else if (CHECK_DIR == gen) {
@@ -651,7 +652,7 @@
             fileName = name + "." + IndexFileNames.PLAIN_NORMS_EXTENSION + i;
           }
           if (fileName != null && dir.fileExists(fileName)) {
-            files.add(fileName);
+            fileList.add(fileName);
           }
         }
       }
@@ -669,10 +670,12 @@
       for(int i=0;i<allFiles.length;i++) {
         String fileName = allFiles[i];
         if (filter.accept(null, fileName) && fileName.length() > prefixLength && Character.isDigit(fileName.charAt(prefixLength)) && fileName.startsWith(prefix)) {
-          files.add(fileName);
+          fileList.add(fileName);
         }
       }
     }
+    assert new HashSet<String>(fileList).size() == fileList.size();
+    files = fileList;
     return files;
   }
 
