Index: src/java/org/apache/lucene/search/function/CustomScoreQuery.java
===================================================================
--- src/java/org/apache/lucene/search/function/CustomScoreQuery.java	(revision 582403)
+++ src/java/org/apache/lucene/search/function/CustomScoreQuery.java	(working copy)
@@ -48,7 +48,7 @@
 public class CustomScoreQuery extends Query {
 
   private Query subQuery;
-  private ValueSourceQuery valSrcQuery; // optional, can be null
+  private ValueSourceQuery[] valSrcQueries; // optional, can be null
   private boolean strict = false; // if true, valueSource part of query does not take part in weights normalization.  
   
   /**
@@ -56,7 +56,7 @@
    * @param subQuery the sub query whose scored is being customed. Must not be null. 
    */
   public CustomScoreQuery(Query subQuery) {
-    this(subQuery,null);
+    this(subQuery, new ValueSourceQuery[0]);
   }
 
   /**
@@ -68,17 +68,21 @@
    * This parameter is optional - it can be null.
    */
   public CustomScoreQuery(Query subQuery, ValueSourceQuery valSrcQuery) {
+	  this(subQuery, new ValueSourceQuery[] {valSrcQuery});
+  }
+
+  public CustomScoreQuery(Query subQuery, ValueSourceQuery valSrcQueries[]) {
     super();
     this.subQuery = subQuery;
-    this.valSrcQuery = valSrcQuery;
-    if (subQuery == null) throw new IllegalArgumentException("<subqyery> must not be null!");
+    this.valSrcQueries = valSrcQueries;
+    if (subQuery == null) throw new IllegalArgumentException("<subquery> must not be null!");
   }
 
   /*(non-Javadoc) @see org.apache.lucene.search.Query#rewrite(org.apache.lucene.index.IndexReader) */
   public Query rewrite(IndexReader reader) throws IOException {
     subQuery = subQuery.rewrite(reader);
-    if (valSrcQuery!=null) {
-      valSrcQuery = (ValueSourceQuery) valSrcQuery.rewrite(reader);
+    for(int i = 0; i < valSrcQueries.length; i++) {
+      valSrcQueries[i] = (ValueSourceQuery) valSrcQueries[i].rewrite(reader);
     }
     return this;
   }
@@ -86,8 +90,8 @@
   /*(non-Javadoc) @see org.apache.lucene.search.Query#extractTerms(java.util.Set) */
   public void extractTerms(Set terms) {
     subQuery.extractTerms(terms);
-    if (valSrcQuery!=null) {
-      valSrcQuery.extractTerms(terms);
+    for(int i = 0; i < valSrcQueries.length; i++) {
+      valSrcQueries[i].extractTerms(terms);
     }
   }
 
@@ -95,8 +99,9 @@
   public Object clone() {
     CustomScoreQuery clone = (CustomScoreQuery)super.clone();
     clone.subQuery = (Query) subQuery.clone();
-    if (valSrcQuery!=null) {
-      clone.valSrcQuery = (ValueSourceQuery) valSrcQuery.clone();
+    clone.valSrcQueries = new ValueSourceQuery[valSrcQueries.length];
+    for(int i = 0; i < valSrcQueries.length; i++) {
+      clone.valSrcQueries[i] = (ValueSourceQuery) valSrcQueries[i].clone();
     }
     return clone;
   }
@@ -105,8 +110,8 @@
   public String toString(String field) {
     StringBuffer sb = new StringBuffer(name()).append("(");
     sb.append(subQuery.toString(field));
-    if (valSrcQuery!=null) {
-      sb.append(", ").append(valSrcQuery.toString(field));
+    for(int i = 0; i < valSrcQueries.length; i++) {
+      sb.append(", ").append(valSrcQueries[i].toString(field));
     }
     sb.append(")");
     sb.append(strict?" STRICT" : "");
@@ -121,51 +126,86 @@
     CustomScoreQuery other = (CustomScoreQuery)o;
     return this.getBoost() == other.getBoost()
            && this.subQuery.equals(other.subQuery)
-           && (this.valSrcQuery==null ? other.valSrcQuery==null 
-               : this.valSrcQuery.equals(other.valSrcQuery));
+           && (this.valSrcQueries==null ? other.valSrcQueries==null 
+               : this.valSrcQueries.equals(other.valSrcQueries));
   }
 
   /** Returns a hash code value for this object. */
   public int hashCode() {
-    int valSrcHash = valSrcQuery==null ? 0 : valSrcQuery.hashCode();
+    int valSrcHash = valSrcQueries==null ? 0 : valSrcQueries.hashCode();
     return (getClass().hashCode() + subQuery.hashCode() + valSrcHash) ^ Float.floatToIntBits(getBoost());
   }  
   
   /**
-   * Compute a custom score by the subQuery score and the ValueSourceQuery score.
+   * Compute a custom score by the subQuery score and a number of 
+   * ValueSourceQuery(s) scores.
    * <p> 
-   * Subclasses can override this method to modify the custom score.
+   * Subclasses can override this method to modify the custom score.  You should only 
+   * override one of the overloaded versions of this method.
    * <p>
    * The default computation herein is:
    * <pre>
-   *     ModifiedScore = valSrcScore * subQueryScore.
+   *     ModifiedScore = valSrcScore * subQueryScore[0] * subQueryScore[1] * ...
    * </pre>
    * 
    * @param doc id of scored doc. 
    * @param subQueryScore score of that doc by the subQuery.
-   * @param valSrcScore score of that doc by the ValueSourceQuery.
+   * @param valSrcScores score of that doc by the ValueSourceQuery.
    * @return custom score.
    */
-  public float customScore(int doc, float subQueryScore, float valSrcScore) {
-    return valSrcScore * subQueryScore;
+  public float customScore(int doc, float subQueryScore, float[] valSrcScores) {
+	  if(valSrcScores.length == 1) {
+	    return customScore(doc, subQueryScore, valSrcScores[0]);
+	  } else if (valSrcScores.length == 0) {
+	    return customScore(doc, subQueryScore, 1);
+	  } else {
+	    float score = subQueryScore;
+	    for(int i = 0; i < valSrcScores.length; i++) {
+	    	score *= valSrcScores[i];
+	    }
+      return score;
+	  }
   }
 
   /**
+   * Compute a custom score by the subQuery score and the ValueSourceQuery score.
+   * <p> 
+   * Subclasses can override this method to modify the custom score.  You should only 
+   * override one of the overloaded versions of this method.
+   * <p>
+   * The default computation herein is:
+   * <pre>
+   *     ModifiedScore = valSrcScore * subQueryScore
+   * </pre>
+   * 
+   * @param doc id of scored doc. 
+   * @param subQueryScore score of that doc by the subQuery.
+   * @param valSrcScores score of that doc by the ValueSourceQuery.
+   * @return custom score.
+   */
+  private float customScore(int doc, float subQueryScore, float valSrcScore) {
+		return subQueryScore * valSrcScore;
+	}
+
+	/**
    * Explain the custom score.
    * Whenever overriding {@link #customScore(int, float, float)}, 
    * this method should also be overriden to provide the correct explanation
    * for the part of the custom scoring. 
    * @param doc doc being explained.
    * @param subQueryExpl explanation for the sub-query part.
-   * @param valSrcExpl explanation for the value source part.
+   * @param valSrcExpls explanation for the value source part.
    * @return an explanation for the custom score
    */
-  public Explanation customExplain(int doc, Explanation subQueryExpl, Explanation valSrcExpl) {
-    float valSrcScore = valSrcExpl==null ? 1 : valSrcExpl.getValue();
+  public Explanation customExplain(int doc, Explanation subQueryExpl, Explanation[] valSrcExpls) {
+    float valSrcScore = 1;
+    for(int i = 0; i < valSrcExpls.length; i++) {
+      valSrcScore *= valSrcExpls[i].getValue();
+    }
     Explanation exp = new Explanation( valSrcScore * subQueryExpl.getValue(), "custom score: product of:");
     exp.addDetail(subQueryExpl);
-    if (valSrcExpl != null) {
-      exp.addDetail(valSrcExpl);
+    for(int i = 0; i < valSrcExpls.length; i++) {
+      exp.addDetail(valSrcExpls[i]);
     }
     return exp;
   }
@@ -174,14 +214,15 @@
   private class CustomWeight implements Weight {
     Searcher searcher;
     Weight subQueryWeight;
-    Weight valSrcWeight; // optional
+    Weight[] valSrcWeights;
     boolean qStrict;
 
     public CustomWeight(Searcher searcher) throws IOException {
       this.searcher = searcher;
-      this.subQueryWeight = subQuery.weight(searcher); 
-      if (valSrcQuery!=null) {
-        this.valSrcWeight = valSrcQuery.createWeight(searcher);
+      this.subQueryWeight = subQuery.weight(searcher);
+      this.valSrcWeights = new Weight[valSrcQueries.length];
+      for(int i = 0; i < valSrcQueries.length; i++) {
+        this.valSrcWeights[i] = valSrcQueries[i].createWeight(searcher);
       }
       this.qStrict = strict;
     }
@@ -199,11 +240,11 @@
     /*(non-Javadoc) @see org.apache.lucene.search.Weight#sumOfSquaredWeights() */
     public float sumOfSquaredWeights() throws IOException {
       float sum = subQueryWeight.sumOfSquaredWeights();
-      if (valSrcWeight!=null) {
+      for(int i = 0; i < valSrcWeights.length; i++) {
         if (qStrict) {
-          valSrcWeight.sumOfSquaredWeights(); // do not include ValueSource part in the query normalization
+          valSrcWeights[i].sumOfSquaredWeights(); // do not include ValueSource part in the query normalization
         } else {
-          sum += valSrcWeight.sumOfSquaredWeights();
+          sum += valSrcWeights[i].sumOfSquaredWeights();
         }
       }
       sum *= getBoost() * getBoost(); // boost each sub-weight
@@ -214,11 +255,11 @@
     public void normalize(float norm) {
       norm *= getBoost(); // incorporate boost
       subQueryWeight.normalize(norm);
-      if (valSrcWeight!=null) {
+      for(int i = 0; i < valSrcWeights.length; i++) {
         if (qStrict) {
-          valSrcWeight.normalize(1); // do not normalize the ValueSource part
+          valSrcWeights[i].normalize(1); // do not normalize the ValueSource part
         } else {
-          valSrcWeight.normalize(norm);
+          valSrcWeights[i].normalize(norm);
         }
       }
     }
@@ -226,8 +267,11 @@
     /*(non-Javadoc) @see org.apache.lucene.search.Weight#scorer(org.apache.lucene.index.IndexReader) */
     public Scorer scorer(IndexReader reader) throws IOException {
       Scorer subQueryScorer = subQueryWeight.scorer(reader);
-      Scorer valSrcScorer = (valSrcWeight==null ? null : valSrcWeight.scorer(reader));
-      return new CustomScorer(getSimilarity(searcher), reader, this, subQueryScorer, valSrcScorer);
+      Scorer[] valSrcScorers = new Scorer[valSrcWeights.length];
+      for(int i = 0; i < valSrcScorers.length; i++) {
+         valSrcScorers[i] = valSrcWeights[i].scorer(reader);
+      }
+      return new CustomScorer(getSimilarity(searcher), reader, this, subQueryScorer, valSrcScorers);
     }
 
     /*(non-Javadoc) @see org.apache.lucene.search.Weight#explain(org.apache.lucene.index.IndexReader, int) */
@@ -246,25 +290,27 @@
     private final CustomWeight weight;
     private final float qWeight;
     private Scorer subQueryScorer;
-    private Scorer valSrcScorer; // optional
+    private Scorer[] valSrcScorers; // optional
     private IndexReader reader;
 
     // constructor
     private CustomScorer(Similarity similarity, IndexReader reader, CustomWeight w,
-        Scorer subQueryScorer, Scorer valSrcScorer) throws IOException {
+        Scorer subQueryScorer, Scorer[] valSrcScorers) throws IOException {
       super(similarity);
       this.weight = w;
       this.qWeight = w.getValue();
       this.subQueryScorer = subQueryScorer;
-      this.valSrcScorer = valSrcScorer;
+      this.valSrcScorers = valSrcScorers;
       this.reader = reader;
     }
 
     /*(non-Javadoc) @see org.apache.lucene.search.Scorer#next() */
     public boolean next() throws IOException {
       boolean hasNext = subQueryScorer.next();
-      if (valSrcScorer!=null && hasNext) {
-        valSrcScorer.skipTo(subQueryScorer.doc());
+      if(hasNext) {
+    	for(int i = 0; i < valSrcScorers.length; i++) {
+    	  valSrcScorers[i].skipTo(subQueryScorer.doc());  
+    	}
       }
       return hasNext;
     }
@@ -276,15 +322,20 @@
 
     /*(non-Javadoc) @see org.apache.lucene.search.Scorer#score() */
     public float score() throws IOException {
-      float valSrcScore = (valSrcScorer==null ? 1 : valSrcScorer.score());
-      return qWeight * customScore(subQueryScorer.doc(), subQueryScorer.score(), valSrcScore);
+      float[] valSrcScores = new float[valSrcScorers.length];
+      for(int i = 0; i < valSrcScores.length; i++) {
+    	  valSrcScores[i] = valSrcScorers[i].score();
+      }
+      return qWeight * customScore(subQueryScorer.doc(), subQueryScorer.score(), valSrcScores);
     }
 
     /*(non-Javadoc) @see org.apache.lucene.search.Scorer#skipTo(int) */
     public boolean skipTo(int target) throws IOException {
       boolean hasNext = subQueryScorer.skipTo(target);
-      if (valSrcScorer!=null && hasNext) {
-        valSrcScorer.skipTo(subQueryScorer.doc());
+      if(hasNext) {
+      	for(int i = 0; i < valSrcScorers.length; i++) {
+      	  valSrcScorers[i].skipTo(subQueryScorer.doc());
+      	}
       }
       return hasNext;
     }
@@ -296,8 +347,11 @@
         return subQueryExpl;
       }
       // match
-      Explanation valSrcExpl = valSrcScorer==null ? null : valSrcScorer.explain(doc);
-      Explanation customExp = customExplain(doc,subQueryExpl,valSrcExpl);
+      Explanation[] valSrcExpls = new Explanation[valSrcScorers.length];
+      for(int i = 0; i < valSrcScorers.length; i++) {
+        valSrcExpls[i] = valSrcScorers[i].explain(doc);
+      }
+      Explanation customExp = customExplain(doc,subQueryExpl,valSrcExpls);
       float sc = qWeight * customExp.getValue();
       Explanation res = new ComplexExplanation(
         true, sc, CustomScoreQuery.this.toString() + ", product of:");
