Index: .
===================================================================
--- .	(revision 1662966)
+++ .	(working copy)

Property changes on: .
___________________________________________________________________
Modified: svn:mergeinfo
   Merged /lucene/dev/trunk:r1658723,1658772
   Merged /lucene/dev/branches/branch_5x:r1658725,1658774
Index: dev-tools
===================================================================
--- dev-tools	(revision 1662966)
+++ dev-tools	(working copy)

Property changes on: dev-tools
___________________________________________________________________
Modified: svn:mergeinfo
   Merged /lucene/dev/branches/branch_5x/dev-tools:r1658725,1658774
   Merged /lucene/dev/trunk/dev-tools:r1658723,1658772
Index: dev-tools/scripts/smokeTestRelease.py
===================================================================
--- dev-tools/scripts/smokeTestRelease.py	(revision 1662966)
+++ dev-tools/scripts/smokeTestRelease.py	(working copy)
@@ -48,11 +48,30 @@
 cygwin = platform.system().lower().startswith('cygwin')
 cygwinWindowsRoot = os.popen('cygpath -w /').read().strip().replace('\\','/') if cygwin else ''
 
-def unshortenURL(url):
+MAX_DOWNLOAD_ATTEMPTS = 10
+TIMESTAMP_FORMAT = "[%Y-%m-%d %H:%M:%S UTC]"
+
+def resolveRedirect(url):
   parsed = urllib.parse.urlparse(url)
   if parsed[0] in ('http', 'https'):
-    h = http.client.HTTPConnection(parsed.netloc)
-    h.request('HEAD', parsed.path)
+    attemptNum = 1
+    while True:
+      try:
+        h = http.client.HTTPConnection(parsed.netloc)
+        h.request('HEAD', parsed.path)
+        break
+      except Exception as e:
+        if attemptNum < MAX_DOWNLOAD_ATTEMPTS:
+          pauseSecs = 1 << attemptNum
+          print('HEAD of url %s failed with exception %s - pausing for %i seconds between download attempts.'
+                % (url, e, pauseSecs))
+          time.sleep(pauseSecs)
+          attemptNum += 1
+          print('%s Retrying HEAD (attempt #%i) of url %s'
+                % (datetime.datetime.utcnow().strftime(TIMESTAMP_FORMAT), attemptNum, url))
+        else:
+          raise RuntimeError('Failed to HEAD url %s' % url) from e
+      
     response = h.getresponse()
     if int(response.status/100) == 3 and response.getheader('Location'):
       return response.getheader('Location')
@@ -104,19 +123,15 @@
 
   # Deref any redirects
   while True:
-    url = urllib.parse.urlparse(urlString)
-    h = http.client.HTTPConnection(url.netloc)
-    h.request('GET', url.path)
-    r = h.getresponse()
-    newLoc = r.getheader('location')
-    if newLoc is not None:
-      urlString = newLoc
+    url = resolveRedirect(urlString)
+    if url != urlString:                                   
+      urlString = url
     else:
       break
 
   links = []
   try:
-    html = urllib.request.urlopen(urlString).read().decode('UTF-8')
+    html = load(urlString)
   except:
     print('\nFAILED to open url %s' % urlString)
     traceback.print_exc()
@@ -134,33 +149,64 @@
     if not quiet and fileName.find('.asc') == -1:
       print('    already done: %.1f MB' % (os.path.getsize(fileName)/1024./1024.))
     return
-  try:
-    fIn = urllib.request.urlopen(urlString)
-    fOut = open(fileName, 'wb')
-    success = False
+  attemptNum = 1
+  while True:
     try:
-      while True:
-        s = fIn.read(65536)
-        if s == b'':
-          break
-        fOut.write(s)
-      fOut.close()
-      fIn.close()
-      success = True
-    finally:
-      fIn.close()
-      fOut.close()
-      if not success:
-        os.remove(fileName)
-    if not quiet and fileName.find('.asc') == -1:
-      t = time.time()-startTime
-      sizeMB = os.path.getsize(fileName)/1024./1024.
-      print('    %.1f MB in %.2f sec (%.1f MB/sec)' % (sizeMB, t, sizeMB/t))
-  except Exception as e:
-    raise RuntimeError('failed to download url "%s"' % urlString) from e
+      attemptDownload(urlString, fileName)
+      break
+    except Exception as e:
+      if attemptNum < MAX_DOWNLOAD_ATTEMPTS:
+        pauseSecs = 1 << attemptNum
+        print('Download of url %s failed with exception %s - pausing for %i seconds between download attempts.'
+              % (urlString, e, pauseSecs))
+        time.sleep(pauseSecs)
+        attemptNum += 1
+        print('%s Retrying download (attempt #%i) of url %s' 
+              % (datetime.datetime.utcnow().strftime(TIMESTAMP_FORMAT), attemptNum, urlString))
+      else:
+        raise RuntimeError('Failed to download url %s' % urlString) from e
+  if not quiet and fileName.find('.asc') == -1:
+    t = time.time()-startTime
+    sizeMB = os.path.getsize(fileName)/1024./1024.
+    print('    %.1f MB in %.2f sec (%.1f MB/sec)' % (sizeMB, t, sizeMB/t))
   
+def attemptDownload(urlString, fileName):
+  fIn = urllib.request.urlopen(urlString)
+  fOut = open(fileName, 'wb')
+  success = False
+  try:
+    while True:
+      s = fIn.read(65536)
+      if s == b'':
+        break
+      fOut.write(s)
+    fOut.close()
+    fIn.close()
+    success = True
+  finally:
+    fIn.close()
+    fOut.close()
+    if not success:
+      os.remove(fileName)
+
 def load(urlString):
-  return urllib.request.urlopen(urlString).read().decode('utf-8')
+  attemptNum = 1
+  while True:
+    try:
+      content = urllib.request.urlopen(urlString).read().decode('utf-8')
+      break
+    except Exception as e:
+      if attemptNum < MAX_DOWNLOAD_ATTEMPTS:
+        pauseSecs = 1 << attemptNum
+        print('Download of url %s failed with exception %s - pausing for %i seconds between download attempts.'
+              % (urlString, e, pauseSecs))
+        time.sleep(pauseSecs)
+        attemptNum += 1
+        print('%s Retrying download (attempt #%i) of url %s'
+              % (datetime.datetime.utcnow().strftime(TIMESTAMP_FORMAT), attemptNum, urlString))
+      else:
+        raise RuntimeError('Failed to download url %s' % urlString) from e
+  return content
 
 def noJavaPackageClasses(desc, file):
   with zipfile.ZipFile(file) as z2:
@@ -869,7 +915,7 @@
     print('      index example docs...')
     run('sh ./exampledocs/post.sh ./exampledocs/*.xml', 'post-example-docs.log')
     print('      run query...')
-    s = urllib.request.urlopen('http://localhost:8983/solr/select/?q=video').read().decode('UTF-8')
+    s = load('http://localhost:8983/solr/select/?q=video')
     if s.find('<result name="response" numFound="3" start="0">') == -1:
       print('FAILED: response is:\n%s' % s)
       raise RuntimeError('query on solr example instance failed')
@@ -1311,7 +1357,7 @@
 reVersion2 = re.compile(r'-(\d+)\.(\d+)\.(\d+)(-alpha|-beta)?\.', re.IGNORECASE)
 
 def getAllLuceneReleases():
-  s = urllib.request.urlopen('https://archive.apache.org/dist/lucene/java').read().decode('UTF-8')
+  s = load('https://archive.apache.org/dist/lucene/java')
 
   releases = set()
   for r in reVersion1, reVersion2:
@@ -1429,7 +1475,7 @@
   solrPath = None
   print()
   print('Load release URL "%s"...' % baseURL)
-  newBaseURL = unshortenURL(baseURL)
+  newBaseURL = resolveRedirect(baseURL)
   if newBaseURL != baseURL:
     print('  unshortened: %s' % newBaseURL)
     baseURL = newBaseURL
