Index: dev-tools/scripts/smokeTestRelease.py
===================================================================
--- dev-tools/scripts/smokeTestRelease.py	(revision 1660464)
+++ dev-tools/scripts/smokeTestRelease.py	(working copy)
@@ -43,6 +43,7 @@
 import codecs
 import textwrap
 from collections import namedtuple
+import traceback
 
 # This tool expects to find /lucene and /solr off the base URL.  You
 # must have a working gpg, tar, unzip in your path.  This has been
@@ -51,11 +52,30 @@
 cygwin = platform.system().lower().startswith('cygwin')
 cygwinWindowsRoot = os.popen('cygpath -w /').read().strip().replace('\\','/') if cygwin else ''
 
-def unshortenURL(url):
+MAX_DOWNLOAD_ATTEMPTS = 10
+TIMESTAMP_FORMAT = "[%Y-%m-%d %H:%M:%S UTC]"
+
+def resolveRedirect(url):
   parsed = urllib.parse.urlparse(url)
   if parsed[0] in ('http', 'https'):
-    h = http.client.HTTPConnection(parsed.netloc)
-    h.request('HEAD', parsed.path)
+    attemptNum = 1
+    while True:
+      try:
+        h = http.client.HTTPConnection(parsed.netloc)
+        h.request('HEAD', parsed.path)
+        break
+      except Exception as e:
+        if attemptNum < MAX_DOWNLOAD_ATTEMPTS:
+          pauseSecs = 1 << attemptNum
+          print('HEAD of url %s failed with exception %s - pausing for %i seconds between download attempts.'
+                % (url, e, pauseSecs))
+          time.sleep(pauseSecs)
+          attemptNum += 1
+          print('%s Retrying HEAD (attempt #%i) of url %s'
+                % (datetime.datetime.utcnow().strftime(TIMESTAMP_FORMAT), attemptNum, url))
+        else:
+          raise RuntimeError('Failed to HEAD url %s' % url) from e
+      
     response = h.getresponse()
     if int(response.status/100) == 3 and response.getheader('Location'):
       return response.getheader('Location')
@@ -83,13 +103,9 @@
 
   # Deref any redirects
   while True:
-    url = urllib.parse.urlparse(urlString)
-    h = http.client.HTTPConnection(url.netloc)
-    h.request('GET', url.path)
-    r = h.getresponse()
-    newLoc = r.getheader('location')
-    if newLoc is not None:
-      urlString = newLoc
+    url = resolveRedirect(urlString)
+    if url != urlString:                                   
+      urlString = url
     else:
       break
 
@@ -113,14 +129,22 @@
     if not quiet and fileName.find('.asc') == -1:
       print('    already done: %.1f MB' % (os.path.getsize(fileName)/1024./1024.))
     return
-  try:
-    attemptDownload(urlString, fileName)
-  except Exception as e:
-    print('Retrying download of url %s after exception: %s' % (urlString, e))
+  attemptNum = 1
+  while True:
     try:
       attemptDownload(urlString, fileName)
+      break
     except Exception as e:
-      raise RuntimeError('failed to download url "%s"' % urlString) from e
+      if attemptNum < MAX_DOWNLOAD_ATTEMPTS:
+        pauseSecs = 1 << attemptNum
+        print('Download of url %s failed with exception %s - pausing for %i seconds between download attempts.'
+              % (urlString, e, pauseSecs))
+        time.sleep(pauseSecs)
+        attemptNum += 1
+        print('%s Retrying download (attempt #%i) of url %s' 
+              % (datetime.datetime.utcnow().strftime(TIMESTAMP_FORMAT), attemptNum, urlString))
+      else:
+        raise RuntimeError('Failed to download url %s' % urlString) from e
   if not quiet and fileName.find('.asc') == -1:
     t = time.time()-startTime
     sizeMB = os.path.getsize(fileName)/1024./1024.
@@ -146,11 +170,22 @@
       os.remove(fileName)
 
 def load(urlString):
-  try:
-    content = urllib.request.urlopen(urlString).read().decode('utf-8')
-  except Exception as e:
-    print('Retrying download of url %s after exception: %s' % (urlString, e))
-    content = urllib.request.urlopen(urlString).read().decode('utf-8')
+  attemptNum = 1
+  while True:
+    try:
+      content = urllib.request.urlopen(urlString).read().decode('utf-8')
+      break
+    except Exception as e:
+      if attemptNum < MAX_DOWNLOAD_ATTEMPTS:
+        pauseSecs = 1 << attemptNum
+        print('Download of url %s failed with exception %s - pausing for %i seconds between download attempts.'
+              % (urlString, e, pauseSecs))
+        time.sleep(pauseSecs)
+        attemptNum += 1
+        print('%s Retrying download (attempt #%i) of url %s'
+              % (datetime.datetime.utcnow().strftime(TIMESTAMP_FORMAT), attemptNum, urlString))
+      else:
+        raise RuntimeError('Failed to download url %s' % urlString) from e
   return content
 
 def noJavaPackageClasses(desc, file):
@@ -1457,7 +1492,7 @@
   solrPath = None
   print()
   print('Load release URL "%s"...' % baseURL)
-  newBaseURL = unshortenURL(baseURL)
+  newBaseURL = resolveRedirect(baseURL)
   if newBaseURL != baseURL:
     print('  unshortened: %s' % newBaseURL)
     baseURL = newBaseURL
@@ -1498,4 +1533,6 @@
     main()
   except KeyboardInterrupt:
     print('Keyboard interrupt...exiting')
+  except:
+    traceback.print_exc()
 
