Index: lucene/src/java/org/apache/lucene/document2/Document.java
===================================================================
--- lucene/src/java/org/apache/lucene/document2/Document.java	(revision 1146761)
+++ lucene/src/java/org/apache/lucene/document2/Document.java	(working copy)
@@ -27,12 +27,12 @@
 /** Documents are the unit of indexing and search.
  *
  * A Document is a set of fields.  Each field has a name and a textual value.
- * A field may be {@link Fieldable#isStored() stored} with the document, in which
+ * A field may be {@link IndexableField#stored() stored} with the document, in which
  * case it is returned with search hits on the document.  Thus each document
  * should typically contain one or more stored fields which uniquely identify
  * it.
  *
- * <p>Note that fields which are <i>not</i> {@link Fieldable#stored() stored} are
+ * <p>Note that fields which are <i>not</i> {@link IndexableField#stored() stored} are
  * <i>not</i> available in documents retrieved from the index, e.g. with {@link
  * ScoreDoc#doc} or {@link IndexReader#document(int)}.
  */
Index: lucene/src/java/org/apache/lucene/document2/NumericField.java
===================================================================
--- lucene/src/java/org/apache/lucene/document2/NumericField.java	(revision 1146761)
+++ lucene/src/java/org/apache/lucene/document2/NumericField.java	(working copy)
@@ -77,8 +77,8 @@
  * <p>
  * By default, a <code>NumericField</code>'s value is not stored but is indexed
  * for range filtering and sorting. You can use the
- * {@link #NumericField(String,Field.Store,boolean)} constructor if you need to
- * change these defaults.
+ * {@link #NumericField(String,FieldType)} constructor if you need to
+ * change these defaults, and alter the default field type (set it to stored).
  * </p>
  * 
  * <p>
@@ -193,11 +193,11 @@
    * 
    * @param name
    *          the field name
-   * @param store
-   *          if the field should be stored, {@link Document#getFieldable} then
-   *          returns {@code NumericField} instances on search results.
-   * @param index
-   *          if the field should be indexed using {@link NumericTokenStream}
+   * @param type
+   *          if the defualt field should be altered, e.g. stored, 
+   *          {@link Document#getField} then returns {@code NumericField} 
+   *          instances on search results, or indexed using 
+   *          {@link NumericTokenStream}
    */
   public NumericField(String name, FieldType type) {
     this(name, NumericUtils.PRECISION_STEP_DEFAULT, type);
@@ -233,11 +233,11 @@
    *          the used <a
    *          href="../search/NumericRangeQuery.html#precisionStepDesc"
    *          >precision step</a>
-   * @param store
-   *          if the field should be stored, {@link Document#getFieldable} then
-   *          returns {@code NumericField} instances on search results.
-   * @param index
-   *          if the field should be indexed using {@link NumericTokenStream}
+   * @param type
+   *          if the defualt field should be altered, e.g. stored, 
+   *          {@link Document#getField} then returns {@code NumericField} 
+   *          instances on search results, or indexed using 
+   *          {@link NumericTokenStream}
    */
   public NumericField(String name, int precisionStep, FieldType type) {
     super(name, type);
@@ -283,10 +283,9 @@
   }
   
   /**
-   * Returns the numeric value as a string. This format is also returned if you
-   * call {@link Document#get(String)} on search results. It is recommended to
-   * use {@link Document#getFieldable} instead that returns {@code NumericField}
-   * instances. You can then use {@link #getNumericValue} to return the stored
+   * Returns the numeric value as a string. It is recommended to
+   * use {@link Document#getField} instead that returns {@code NumericField}
+   * instances. You can then use {@link #numericValue} to return the stored
    * value.
    */
   @Override
