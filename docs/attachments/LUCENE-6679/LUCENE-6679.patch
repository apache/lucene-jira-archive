diff --git a/lucene/core/src/test/org/apache/lucene/index/TestForTooMuchCloning.java b/lucene/core/src/test/org/apache/lucene/index/TestForTooMuchCloning.java
index 46c3e2c..b3004bd 100644
--- a/lucene/core/src/test/org/apache/lucene/index/TestForTooMuchCloning.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestForTooMuchCloning.java
@@ -27,8 +27,10 @@ import org.apache.lucene.search.TopDocs;
 import org.apache.lucene.store.MockDirectoryWrapper;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.LuceneTestCase;
+import org.apache.lucene.util.LuceneTestCase.SuppressExplainChecks;
 import org.apache.lucene.util.TestUtil;
 
+@SuppressExplainChecks
 public class TestForTooMuchCloning extends LuceneTestCase {
 
   // Make sure we don't clone IndexInputs too frequently
diff --git a/lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping.java b/lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping.java
index 5f15ab1..2ed9786 100644
--- a/lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping.java
@@ -32,12 +32,14 @@ import org.apache.lucene.store.MockDirectoryWrapper;
 import org.apache.lucene.store.RAMDirectory;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.BytesRef;
+import org.apache.lucene.util.LuceneTestCase.SuppressExplainChecks;
 import org.apache.lucene.util.TestUtil;
 
 /**
  * Tests lazy skipping on the proximity file.
  *
  */
+@SuppressExplainChecks
 public class TestLazyProxSkipping extends LuceneTestCase {
     private IndexSearcher searcher;
     private int seeksCounter = 0;
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestSortRandom.java b/lucene/core/src/test/org/apache/lucene/search/TestSortRandom.java
index d6b93d0..984085e 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestSortRandom.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestSortRandom.java
@@ -42,8 +42,10 @@ import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.FixedBitSet;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.TestUtil;
+import org.apache.lucene.util.LuceneTestCase.SuppressExplainChecks;
 
 /** random sorting tests */
+@SuppressExplainChecks
 public class TestSortRandom extends LuceneTestCase {
 
   public void testRandomStringSort() throws Exception {
diff --git a/lucene/facet/src/test/org/apache/lucene/facet/TestDrillSideways.java b/lucene/facet/src/test/org/apache/lucene/facet/TestDrillSideways.java
index 7027269..dbaaba1 100644
--- a/lucene/facet/src/test/org/apache/lucene/facet/TestDrillSideways.java
+++ b/lucene/facet/src/test/org/apache/lucene/facet/TestDrillSideways.java
@@ -65,7 +65,9 @@ import org.apache.lucene.util.IOUtils;
 import org.apache.lucene.util.InPlaceMergeSorter;
 import org.apache.lucene.util.InfoStream;
 import org.apache.lucene.util.TestUtil;
+import org.apache.lucene.util.LuceneTestCase.SuppressExplainChecks;
 
+@SuppressExplainChecks
 public class TestDrillSideways extends FacetTestCase {
 
   public void testBasic() throws Exception {
diff --git a/lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts.java b/lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts.java
index e46348b..9c39ced 100644
--- a/lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts.java
+++ b/lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts.java
@@ -66,8 +66,9 @@ import org.apache.lucene.search.Weight;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.IOUtils;
 import org.apache.lucene.util.TestUtil;
+import org.apache.lucene.util.LuceneTestCase.SuppressExplainChecks;
 
-
+@SuppressExplainChecks
 public class TestRangeFacetCounts extends FacetTestCase {
 
   public void testBasicLong() throws Exception {
diff --git a/lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil.java b/lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil.java
index 53d7ed6..67769b6 100644
--- a/lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil.java
+++ b/lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil.java
@@ -74,6 +74,7 @@ import org.apache.lucene.util.Bits;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.FixedBitSet;
 import org.apache.lucene.util.LuceneTestCase;
+import org.apache.lucene.util.LuceneTestCase.SuppressExplainChecks;
 import org.apache.lucene.util.TestUtil;
 import org.apache.lucene.util.packed.PackedInts;
 import org.junit.Test;
@@ -91,6 +92,7 @@ import java.util.Set;
 import java.util.SortedSet;
 import java.util.TreeSet;
 
+@SuppressExplainChecks
 public class TestJoinUtil extends LuceneTestCase {
 
   public void testSimple() throws Exception {
diff --git a/lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSortRandom.java b/lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSortRandom.java
index 1c9b7d7..cb035e3 100644
--- a/lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSortRandom.java
+++ b/lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSortRandom.java
@@ -55,9 +55,11 @@ import org.apache.lucene.util.BitSetIterator;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.FixedBitSet;
 import org.apache.lucene.util.LuceneTestCase;
+import org.apache.lucene.util.LuceneTestCase.SuppressExplainChecks;
 import org.apache.lucene.util.TestUtil;
 
 /** random sorting tests with uninversion */
+@SuppressExplainChecks
 public class TestFieldCacheSortRandom extends LuceneTestCase {
 
   public void testRandomStringSort() throws Exception {
diff --git a/lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreExplanations.java b/lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreExplanations.java
index b579ec9..1cb54fa 100644
--- a/lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreExplanations.java
+++ b/lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreExplanations.java
@@ -27,7 +27,9 @@ import org.apache.lucene.search.BoostQuery;
 import org.apache.lucene.search.MatchAllDocsQuery;
 import org.apache.lucene.search.Query;
 import org.apache.lucene.search.TermQuery;
+import org.apache.lucene.util.LuceneTestCase.SuppressExplainChecks;
 
+@SuppressExplainChecks
 public class TestCustomScoreExplanations extends BaseExplanationTestCase {
   public void testOneTerm() throws Exception {
     Query q = new TermQuery(new Term(FIELD, "w1"));
diff --git a/lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery.java b/lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery.java
index 9df2b3c..9281338 100644
--- a/lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery.java
+++ b/lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery.java
@@ -43,12 +43,15 @@ import org.apache.lucene.search.QueryUtils;
 import org.apache.lucene.search.TermQuery;
 import org.apache.lucene.search.TermRangeQuery;
 import org.apache.lucene.search.TopDocs;
+import org.apache.lucene.util.LuceneTestCase.SuppressExplainChecks;
 import org.junit.BeforeClass;
 import org.junit.Test;
 
+
 /**
  * Test CustomScoreQuery search.
  */
+@SuppressExplainChecks
 public class TestCustomScoreQuery extends FunctionTestSetup {
 
   @BeforeClass
diff --git a/lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionQueryExplanations.java b/lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionQueryExplanations.java
index 34dcc59..0384058 100644
--- a/lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionQueryExplanations.java
+++ b/lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionQueryExplanations.java
@@ -21,7 +21,9 @@ import org.apache.lucene.queries.function.valuesource.ConstValueSource;
 import org.apache.lucene.search.BaseExplanationTestCase;
 import org.apache.lucene.search.BoostQuery;
 import org.apache.lucene.search.Query;
+import org.apache.lucene.util.LuceneTestCase.SuppressExplainChecks;
 
+@SuppressExplainChecks
 public class TestFunctionQueryExplanations extends BaseExplanationTestCase {
   
   public void testSimple() throws Exception {
diff --git a/lucene/sandbox/src/test/org/apache/lucene/search/TestTermAutomatonQuery.java b/lucene/sandbox/src/test/org/apache/lucene/search/TestTermAutomatonQuery.java
index 6b1538c..7089b37 100644
--- a/lucene/sandbox/src/test/org/apache/lucene/search/TestTermAutomatonQuery.java
+++ b/lucene/sandbox/src/test/org/apache/lucene/search/TestTermAutomatonQuery.java
@@ -53,11 +53,13 @@ import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.FixedBitSet;
 import org.apache.lucene.util.IOUtils;
 import org.apache.lucene.util.LuceneTestCase;
+import org.apache.lucene.util.LuceneTestCase.SuppressExplainChecks;
 import org.apache.lucene.util.TestUtil;
 import org.apache.lucene.util.automaton.Automata;
 import org.apache.lucene.util.automaton.Automaton;
 import org.apache.lucene.util.automaton.Transition;
 
+@SuppressExplainChecks
 public class TestTermAutomatonQuery extends LuceneTestCase {
   // "comes * sun"
   public void testBasic1() throws Exception {
diff --git a/lucene/test-framework/src/java/org/apache/lucene/search/AssertingBulkScorer.java b/lucene/test-framework/src/java/org/apache/lucene/search/AssertingBulkScorer.java
index 07cdd9d..a878f7c 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/search/AssertingBulkScorer.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/search/AssertingBulkScorer.java
@@ -20,7 +20,7 @@ package org.apache.lucene.search;
 import java.io.IOException;
 import java.util.Random;
 
-import org.apache.lucene.index.PostingsEnum;
+import org.apache.lucene.index.LeafReaderContext;
 import org.apache.lucene.util.Bits;
 
 import com.carrotsearch.randomizedtesting.generators.RandomInts;
@@ -28,22 +28,26 @@ import com.carrotsearch.randomizedtesting.generators.RandomInts;
 /** Wraps a Scorer with additional checks */
 final class AssertingBulkScorer extends BulkScorer {
 
-  public static BulkScorer wrap(Random random, BulkScorer other, int maxDoc) {
+  public static BulkScorer wrap(Random random, LeafReaderContext context, Weight weight, BulkScorer other, boolean needsScores) {
     if (other == null || other instanceof AssertingBulkScorer) {
       return other;
     }
-    return new AssertingBulkScorer(random, other, maxDoc);
+    return new AssertingBulkScorer(random, context, weight, other, needsScores);
   }
 
   final Random random;
+  final LeafReaderContext context;
+  final Weight weight;
   final BulkScorer in;
-  final int maxDoc;
+  final boolean needsScores;
   int max = 0;
 
-  private AssertingBulkScorer(Random random, BulkScorer in, int maxDoc) {
+  private AssertingBulkScorer(Random random, LeafReaderContext context, Weight weight, BulkScorer in, boolean needsScores) {
     this.random = random;
+    this.context = context;
+    this.weight = weight;
     this.in = in;
-    this.maxDoc = maxDoc;
+    this.needsScores = needsScores;
   }
 
   public BulkScorer getIn() {
@@ -56,29 +60,32 @@ final class AssertingBulkScorer extends BulkScorer {
   }
 
   @Override
-  public void score(LeafCollector collector, Bits acceptDocs) throws IOException {
-    assert max == 0;
-    collector = new AssertingLeafCollector(random, collector, 0, PostingsEnum.NO_MORE_DOCS);
+  public void score(LeafCollector origCollector, Bits acceptDocs) throws IOException {
     if (random.nextBoolean()) {
       try {
-        final int next = score(collector, acceptDocs, 0, PostingsEnum.NO_MORE_DOCS);
+        final int next = score(origCollector, acceptDocs, 0, DocIdSetIterator.NO_MORE_DOCS);
         assert next == DocIdSetIterator.NO_MORE_DOCS;
+        return;
       } catch (UnsupportedOperationException e) {
-        in.score(collector, acceptDocs);
+        // Drop through
       }
-    } else {
-      in.score(collector, acceptDocs);
     }
+    assert max == 0;
+    AssertingLeafCollector collector = new AssertingLeafCollector(random, context, weight, origCollector, 0, DocIdSetIterator.NO_MORE_DOCS, needsScores, true, acceptDocs);
+    in.score(collector, acceptDocs);
+    collector.testExplainMisses(DocIdSetIterator.NO_MORE_DOCS);
   }
 
   @Override
-  public int score(LeafCollector collector, Bits acceptDocs, int min, final int max) throws IOException {
+  public int score(LeafCollector origCollector, Bits acceptDocs, int min, final int max) throws IOException {
     assert min >= this.max: "Scoring backward: min=" + min + " while previous max was max=" + this.max;
     assert min <= max : "max must be greater than min, got min=" + min + ", and max=" + max;
     this.max = max;
-    collector = new AssertingLeafCollector(random, collector, min, max);
+    AssertingLeafCollector collector = new AssertingLeafCollector(random, context, weight, origCollector, min, max, needsScores, true, acceptDocs);
     final int next = in.score(collector, acceptDocs, min, max);
+    collector.testExplainMisses(max);
     assert next >= max;
+    final int maxDoc = context.reader().maxDoc();
     if (max >= maxDoc || next >= maxDoc) {
       assert next == DocIdSetIterator.NO_MORE_DOCS;
       return DocIdSetIterator.NO_MORE_DOCS;
@@ -91,5 +98,4 @@ final class AssertingBulkScorer extends BulkScorer {
   public String toString() {
     return "AssertingBulkScorer(" + in + ")";
   }
-
 }
diff --git a/lucene/test-framework/src/java/org/apache/lucene/search/AssertingCollector.java b/lucene/test-framework/src/java/org/apache/lucene/search/AssertingCollector.java
index 838c85e..6de7daa 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/search/AssertingCollector.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/search/AssertingCollector.java
@@ -28,26 +28,28 @@ import org.apache.lucene.index.LeafReaderContext;
 class AssertingCollector extends FilterCollector {
 
   private final Random random;
+  private final Weight weight;
   private int maxDoc = -1;
 
   /** Wrap the given collector in order to add assertions. */
-  public static Collector wrap(Random random, Collector in) {
+  public static Collector wrap(Random random, Weight weight, Collector in) {
     if (in instanceof AssertingCollector) {
       return in;
     }
-    return new AssertingCollector(random, in);
+    return new AssertingCollector(random, weight, in);
   }
 
-  private AssertingCollector(Random random, Collector in) {
+  private AssertingCollector(Random random, Weight weight, Collector in) {
     super(in);
     this.random = random;
+    this.weight = weight;
   }
 
   @Override
   public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {
     final LeafCollector in = super.getLeafCollector(context);
     final int docBase = context.docBase;
-    return new AssertingLeafCollector(random, in, 0, DocIdSetIterator.NO_MORE_DOCS) {
+    return new AssertingLeafCollector(random, context, weight, in, 0, DocIdSetIterator.NO_MORE_DOCS, needsScores()) {
       @Override
       public void collect(int doc) throws IOException {
         // check that documents are scored in order globally,
diff --git a/lucene/test-framework/src/java/org/apache/lucene/search/AssertingIndexSearcher.java b/lucene/test-framework/src/java/org/apache/lucene/search/AssertingIndexSearcher.java
index 43d07d6..9fd4637 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/search/AssertingIndexSearcher.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/search/AssertingIndexSearcher.java
@@ -89,7 +89,7 @@ public class AssertingIndexSearcher extends IndexSearcher {
   @Override
   protected void search(List<LeafReaderContext> leaves, Weight weight, Collector collector) throws IOException {
     assert weight instanceof AssertingWeight;
-    super.search(leaves, weight, AssertingCollector.wrap(random, collector));
+    super.search(leaves, weight, AssertingCollector.wrap(random, weight, collector));
   }
 
   @Override
diff --git a/lucene/test-framework/src/java/org/apache/lucene/search/AssertingLeafCollector.java b/lucene/test-framework/src/java/org/apache/lucene/search/AssertingLeafCollector.java
index 621e812..ada1201 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/search/AssertingLeafCollector.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/search/AssertingLeafCollector.java
@@ -20,28 +20,54 @@ package org.apache.lucene.search;
 import java.io.IOException;
 import java.util.Random;
 
+import org.apache.lucene.index.LeafReaderContext;
+import org.apache.lucene.util.Bits;
+import org.apache.lucene.util.TestUtil;
+import org.apache.lucene.util.LuceneTestCase.SuppressExplainChecks;
+
+import com.carrotsearch.randomizedtesting.RandomizedContext;
+
 /** Wraps another Collector and checks that
  *  order is respected. */
 class AssertingLeafCollector extends FilterLeafCollector {
 
   private final Random random;
+  private final LeafReaderContext context;
+  private final Weight weight;
   private final int min;
   private final int max;
+  private final boolean needsScores;
 
   private Scorer scorer;
   private int lastCollected = -1;
+  private int explainHitLimit;
+  private int explainHitCount;
+  private int explainMissLimit;
+  private Bits explainMissAcceptDocs;
+  private int explainMissCount;
+
+  AssertingLeafCollector(Random random, LeafReaderContext context, Weight weight, LeafCollector collector, int min, int max, boolean needsScores) {
+    this(random, context, weight, collector, min, max, needsScores, false, null);
+  }
 
-  AssertingLeafCollector(Random random, LeafCollector collector, int min, int max) {
+  AssertingLeafCollector(Random random, LeafReaderContext context, Weight weight, LeafCollector collector, int min, int max, boolean needsScores, boolean explainMisses, Bits acceptDocs) {
     super(collector);
     this.random = random;
+    this.context = context;
+    this.weight = weight;
     this.min = min;
     this.max = max;
+    this.needsScores = needsScores;
+    final boolean supressExplainChecks = RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressExplainChecks.class);
+    explainHitLimit = supressExplainChecks ? 0 : Math.min(TestUtil.nextInt(random, 0, 10), context.reader().maxDoc());
+    explainMissLimit = supressExplainChecks || !explainMisses ? 0 : Math.min(TestUtil.nextInt(random, 0, 10), context.reader().maxDoc());
+    explainMissAcceptDocs = acceptDocs;
   }
 
   @Override
   public void setScorer(Scorer scorer) throws IOException {
     this.scorer = scorer;
-    super.setScorer(AssertingScorer.wrap(random, scorer, true));
+    super.setScorer(AssertingScorer.wrap(random, scorer, needsScores));
   }
 
   @Override
@@ -52,7 +78,44 @@ class AssertingLeafCollector extends FilterLeafCollector {
     assert scorer.docID() == doc : "Collected: " + doc + " but scorer: " + scorer.docID();
     in.collect(doc);
     lastCollected = doc;
+    testExplainHit(doc);
+    testExplainMisses(doc);
   }
 
+  private void testExplainHit(int doc) throws IOException {
+    if (explainHitCount < explainHitLimit) {
+      explainHitCount += 1;
+      final Explanation explanation = weight.explain(context, doc);
+      if (explanation != null) {
+        assert explanation.isMatch() : "Match on doc " + doc + " explains as a miss\n\n" + explanation.toString();
+        if (needsScores) {
+          final float score = scorer.score();
+          assert Math.abs(score - explanation.getValue()) < 0.001f : "Match on doc " + doc + " has different explain score: expected=" + score + " actual=" + explanation.getValue() + "\n\n" + explanation.toString();
+        }
+      }
+    }
+  }
+
+  void testExplainMisses(final int max) throws IOException {
+    if (explainMissCount < explainMissLimit) {
+      assert max <= this.max;
+      final int minDoc = Math.max(lastCollected + 1, min);
+      final int maxDoc = Math.min(context.reader().maxDoc(), max);
+      for (int doc = minDoc; doc < maxDoc; doc++) {
+        if (explainMissCount >= explainMissLimit) {
+          break;
+        }
+        if (explainMissAcceptDocs != null && !explainMissAcceptDocs.get(doc)) {
+          continue;
+        }
+        explainMissCount += 1;
+        final Explanation explanation = weight.explain(context, doc);
+        if (explanation != null) {
+          assert !explanation.isMatch() : "Miss on doc " + doc + " explains as a match\n\n" + explanation.toString();
+          assert explanation.getValue() == 0 : "Miss on doc " + doc + " has a non zero explain score: " + explanation.getValue();
+        }
+      }
+    }
+  }
 }
 
diff --git a/lucene/test-framework/src/java/org/apache/lucene/search/AssertingWeight.java b/lucene/test-framework/src/java/org/apache/lucene/search/AssertingWeight.java
index 6ab520d..f3073c6 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/search/AssertingWeight.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/search/AssertingWeight.java
@@ -71,6 +71,6 @@ class AssertingWeight extends Weight {
       return null;
     }
 
-    return AssertingBulkScorer.wrap(new Random(random.nextLong()), inScorer, context.reader().maxDoc());
+    return AssertingBulkScorer.wrap(new Random(random.nextLong()), context, this, inScorer, needsScores);
   }
 }
diff --git a/lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.java b/lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.java
index 40ee8bf..51abbdd 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.java
@@ -374,6 +374,19 @@ public abstract class LuceneTestCase extends Assert {
   @Target(ElementType.TYPE)
   public @interface SuppressReproduceLine {}
   
+  /**
+   * Annotation for test classes that should not perform any extra
+   * checks of the explain ouput when performing a search.
+   * <p>
+   * This can be useful, for tests that can't afford the extra cost
+   * or have side effects in their custom Weights.
+   */
+  @Documented
+  @Inherited
+  @Retention(RetentionPolicy.RUNTIME)
+  @Target(ElementType.TYPE)
+  public @interface SuppressExplainChecks {}
+
   // -----------------------------------------------------------------
   // Truly immutable fields and constants, initialized once and valid 
   // for all suites ever since.
