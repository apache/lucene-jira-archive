diff --git a/lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader.java b/lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader.java
index e120435..a2d8cdd 100644
--- a/lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader.java
+++ b/lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader.java
@@ -579,7 +579,7 @@ public final class BKDReader extends PointValues implements Accountable {
 
     // How many points are stored in this leaf cell:
     int count = in.readVInt();
-    visitor.grow(count);
+    // No need to call grow(), it has been called up-front
 
     if (version < BKDWriter.VERSION_COMPRESSED_DOC_IDS) {
       DocIdsWriter.readInts32(in, count, visitor);
@@ -687,6 +687,8 @@ public final class BKDReader extends PointValues implements Accountable {
       // This cell is fully outside of the query shape: stop recursing
     } else if (r == Relation.CELL_INSIDE_QUERY) {
       // This cell is fully inside of the query shape: recursively add all points in this cell without filtering
+      final long maxPointCount = (long) maxPointsInLeafNode * state.index.getNumLeaves();
+      state.visitor.grow((int) Math.min(Integer.MAX_VALUE, maxPointCount));
       addAll(state);
       // The cell crosses the shape boundary, or the cell fully contains the query, so we fall through and do full filtering:
     } else if (state.index.isLeafNode()) {
