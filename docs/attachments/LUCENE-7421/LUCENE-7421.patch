diff --git a/lucene/core/src/java/org/apache/lucene/search/DisiPriorityQueue.java b/lucene/core/src/java/org/apache/lucene/search/DisiPriorityQueue.java
index 0692a7b..058a43a 100644
--- a/lucene/core/src/java/org/apache/lucene/search/DisiPriorityQueue.java
+++ b/lucene/core/src/java/org/apache/lucene/search/DisiPriorityQueue.java
@@ -58,6 +58,19 @@ public final class DisiPriorityQueue implements Iterable<DisiWrapper> {
     return heap[0];
   }
 
+  /** Return the 2nd least entry of the PQ, or {@code null} if the PQ contains
+   *  less than 2 entries. */
+  DisiWrapper top2() {
+    if (size >= 3) {
+      return heap[1].doc <= heap[2].doc ? heap[1] : heap[2];
+    } else if (size == 2) {
+      return heap[1];
+    } else {
+      assert size == 0 || size == 1;
+      return null;
+    }
+  }
+
   /** Get the list of scorers which are on the current doc. */
   public DisiWrapper topList() {
     final DisiWrapper[] heap = this.heap;
diff --git a/lucene/core/src/java/org/apache/lucene/search/DisjunctionDISIApproximation.java b/lucene/core/src/java/org/apache/lucene/search/DisjunctionDISIApproximation.java
index 395c152..f160b60 100644
--- a/lucene/core/src/java/org/apache/lucene/search/DisjunctionDISIApproximation.java
+++ b/lucene/core/src/java/org/apache/lucene/search/DisjunctionDISIApproximation.java
@@ -27,14 +27,22 @@ public class DisjunctionDISIApproximation extends DocIdSetIterator {
 
   final DisiPriorityQueue subIterators;
   final long cost;
+  DisiWrapper top;
+  int top2Doc;
 
   public DisjunctionDISIApproximation(DisiPriorityQueue subIterators) {
+    if (subIterators.size() < 2) {
+      throw new IllegalStateException("Cannot create a disjunction over less than 2 iterators");
+    }
     this.subIterators = subIterators;
     long cost = 0;
     for (DisiWrapper w : subIterators) {
       cost += w.cost;
     }
     this.cost = cost;
+
+    top = subIterators.top();
+    top2Doc = subIterators.top2().doc;
   }
 
   @Override
@@ -44,16 +52,18 @@ public class DisjunctionDISIApproximation extends DocIdSetIterator {
 
   @Override
   public int docID() {
-   return subIterators.top().doc;
+   return top.doc;
   }
 
   @Override
   public int nextDoc() throws IOException {
-    DisiWrapper top = subIterators.top();
     final int doc = top.doc;
     do {
       top.doc = top.approximation.nextDoc();
-      top = subIterators.updateTop();
+      if (top.doc > top2Doc) {
+        top = subIterators.updateTop();
+        top2Doc = subIterators.top2().doc;
+      }
     } while (top.doc == doc);
 
     return top.doc;
@@ -61,10 +71,12 @@ public class DisjunctionDISIApproximation extends DocIdSetIterator {
 
   @Override
   public int advance(int target) throws IOException {
-    DisiWrapper top = subIterators.top();
     do {
       top.doc = top.approximation.advance(target);
-      top = subIterators.updateTop();
+      if (top.doc > top2Doc) {
+        top = subIterators.updateTop();
+        top2Doc = subIterators.top2().doc;
+      }
     } while (top.doc < target);
 
     return top.doc;
