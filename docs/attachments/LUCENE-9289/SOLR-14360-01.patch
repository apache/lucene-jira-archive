diff --git lucene/suggest/src/java/org/apache/lucene/search/spell/DirectSpellChecker.java lucene/suggest/src/java/org/apache/lucene/search/spell/DirectSpellChecker.java
index 3800596afd8..2e8dfff7970 100644
--- lucene/suggest/src/java/org/apache/lucene/search/spell/DirectSpellChecker.java
+++ lucene/suggest/src/java/org/apache/lucene/search/spell/DirectSpellChecker.java
@@ -455,7 +455,7 @@ public class DirectSpellChecker {
       } else {
         spare.copyUTF8Bytes(candidateTerm);
         termAsString = spare.toString();
-        score = distance.getDistance(term.text(), termAsString);
+        score = distance.getDistance(term.text(), termAsString, accuracy);
       }
       
       if (score < accuracy) {
diff --git lucene/suggest/src/java/org/apache/lucene/search/spell/JaroWinklerDistance.java lucene/suggest/src/java/org/apache/lucene/search/spell/JaroWinklerDistance.java
index 7f5d1a245f8..30cda90a522 100644
--- lucene/suggest/src/java/org/apache/lucene/search/spell/JaroWinklerDistance.java
+++ lucene/suggest/src/java/org/apache/lucene/search/spell/JaroWinklerDistance.java
@@ -92,7 +92,7 @@ public class JaroWinklerDistance implements StringDistance {
   }
 
   @Override
-  public float getDistance(String s1, String s2) {
+  public float getDistance(String s1, String s2, float threshold) {
     int[] mtp = matches(s1, s2);
     float m = mtp[0];
     if (m == 0) {
diff --git lucene/suggest/src/java/org/apache/lucene/search/spell/LevenshteinDistance.java lucene/suggest/src/java/org/apache/lucene/search/spell/LevenshteinDistance.java
index c42aeaf7bec..27bb133d4d9 100644
--- lucene/suggest/src/java/org/apache/lucene/search/spell/LevenshteinDistance.java
+++ lucene/suggest/src/java/org/apache/lucene/search/spell/LevenshteinDistance.java
@@ -28,17 +28,17 @@ public final class LevenshteinDistance implements StringDistance {
     public LevenshteinDistance () {
     }
 
-
     //*****************************
     // Compute Levenshtein distance: see org.apache.commons.lang.StringUtils#getLevenshteinDistance(String, String)
     //*****************************
-    @Override
-    public float getDistance (String target, String other) {
+
+    public float getDistance (String target, String other, float threshold) {
       char[] sa;
-      int n;
+      final int n;
       int p[]; //'previous' cost array, horizontally
       int d[]; // cost array, horizontally
       int _d[]; //placeholder to assist in swapping p and d
+      int rowMin;
       
         /*
            The difference between this impl. and the previous is that, rather
@@ -63,6 +63,7 @@ public final class LevenshteinDistance implements StringDistance {
         d = new int[n+1]; 
       
         final int m = other.length();
+        final int costThreshold = (int)Math.floor(Math.max(n, m) * (1.0f - threshold));
         if (n == 0 || m == 0) {
           if (n == m) {
             return 1;
@@ -88,13 +89,17 @@ public final class LevenshteinDistance implements StringDistance {
         for (j = 1; j<=m; j++) {
             t_j = other.charAt(j-1);
             d[0] = j;
+            rowMin = j;
 
             for (i=1; i<=n; i++) {
                 cost = sa[i-1]==t_j ? 0 : 1;
                 // minimum of cell to the left+1, to the top+1, diagonally left and up +cost
                 d[i] = Math.min(Math.min(d[i-1]+1, p[i]+1),  p[i-1]+cost);
+                rowMin = Math.min(rowMin, d[i]);
+            }
+            if (rowMin > costThreshold) {
+              return 0.0f;
             }
-
             // copy current distance counts to 'previous row' distance counts
             _d = p;
             p = d;
@@ -103,7 +108,7 @@ public final class LevenshteinDistance implements StringDistance {
 
         // our last action in the above loop was to switch d and p, so p now
         // actually has the most recent cost counts
-        return 1.0f - ((float) p[n] / Math.max(other.length(), sa.length));
+        return 1.0f - ((float) p[n] / Math.max(n, m));
     }
 
   @Override
diff --git lucene/suggest/src/java/org/apache/lucene/search/spell/LuceneLevenshteinDistance.java lucene/suggest/src/java/org/apache/lucene/search/spell/LuceneLevenshteinDistance.java
index 21ca535c1e5..84aa16cbf75 100644
--- lucene/suggest/src/java/org/apache/lucene/search/spell/LuceneLevenshteinDistance.java
+++ lucene/suggest/src/java/org/apache/lucene/search/spell/LuceneLevenshteinDistance.java
@@ -45,7 +45,7 @@ public final class LuceneLevenshteinDistance implements StringDistance {
   public LuceneLevenshteinDistance() {}
 
   @Override
-  public float getDistance(String target, String other) {
+  public float getDistance(String target, String other, float threshold) {
     IntsRef targetPoints;
     IntsRef otherPoints;
     int n;
diff --git lucene/suggest/src/java/org/apache/lucene/search/spell/NGramDistance.java lucene/suggest/src/java/org/apache/lucene/search/spell/NGramDistance.java
index 3625570f137..8d4d2c367e4 100644
--- lucene/suggest/src/java/org/apache/lucene/search/spell/NGramDistance.java
+++ lucene/suggest/src/java/org/apache/lucene/search/spell/NGramDistance.java
@@ -50,7 +50,7 @@ public class NGramDistance implements StringDistance {
   }
   
   @Override
-  public float getDistance(String source, String target) {
+  public float getDistance(String source, String target, float threshold) {
     final int sl = source.length();
     final int tl = target.length();
     
diff --git lucene/suggest/src/java/org/apache/lucene/search/spell/StringDistance.java lucene/suggest/src/java/org/apache/lucene/search/spell/StringDistance.java
index ca09288e4e5..cf1db4cbfc4 100644
--- lucene/suggest/src/java/org/apache/lucene/search/spell/StringDistance.java
+++ lucene/suggest/src/java/org/apache/lucene/search/spell/StringDistance.java
@@ -29,6 +29,25 @@ public interface StringDistance {
    * @param s2 The second string.
    * @return a float between 0 and 1 based on how similar the specified strings are to one another.
    */
-  public float getDistance(String s1,String s2);
+  default float getDistance(String s1,String s2) {
+    return getDistance(s1, s2, 0.0f);
+  }
+
+  /**
+   * Returns a float between 0 and 1 based on how similar the specified strings are to one another.
+   * Returning a value of 1 means the specified strings are identical and 0 means the
+   * string are maximally different.
+   *
+   * An optimized version of the {@link #getDistance(String, String)} method. It will return exact values only
+   * between {@code threshold} and 1. It will stop the calculation and return 0 if the exact value is lower than
+   * {@code threshold}.
+   *
+   * @param s1 The first string.
+   * @param s2 The second string.
+   * @param threshold The threshold of the distance check. The method will return exact values between threshold
+   *                  and 1, if the exact distance value is lower than the threshold, the method will return 0.
+   * @return a float between 0 and 1 based on how similar the specified strings are to one another.
+   */
+  float getDistance(String s1,String s2, float threshold);
   
 }
diff --git lucene/suggest/src/test/org/apache/lucene/search/spell/TestLevenshteinDistance.java lucene/suggest/src/test/org/apache/lucene/search/spell/TestLevenshteinDistance.java
index 88c7587e0bf..ece08d07013 100644
--- lucene/suggest/src/test/org/apache/lucene/search/spell/TestLevenshteinDistance.java
+++ lucene/suggest/src/test/org/apache/lucene/search/spell/TestLevenshteinDistance.java
@@ -17,6 +17,7 @@
 package org.apache.lucene.search.spell;
 
 import org.apache.lucene.util.LuceneTestCase;
+import org.apache.lucene.util.TestUtil;
 
 public class TestLevenshteinDistance extends LuceneTestCase {
 
@@ -44,7 +45,55 @@ public class TestLevenshteinDistance extends LuceneTestCase {
     d2 = sd.getDistance("brittney spears", "brittney startzman");
     assertTrue(d1 > d2);
   }
-  
+
+  public void testGetDistanceThreshold() {
+    float d = sd.getDistance("al", "al", 1.0f);
+    assertEquals(1.0f, d, 0.001);
+
+    d = sd.getDistance("al", "al", 0.5f);
+    assertEquals(1.0f, d, 0.001);
+
+    d = sd.getDistance("martha", "marhta", 0.2f);
+    assertEquals(0.6666, d, 0.001);
+
+    d = sd.getDistance("martha", "marhta", 0.7f);
+    assertEquals(0f, d, 0.001);
+
+    d = sd.getDistance("six", "ten", 1.0f);
+    assertEquals(0, d, 0.001);
+
+    d = sd.getDistance("six", "ten", 0.5f);
+    assertEquals(0, d, 0.001);
+
+    d = sd.getDistance("six", "ten", 0.0f);
+    assertEquals(0, d, 0.001);
+
+    d = sd.getDistance("", "al", 0.5f);
+    assertEquals(0.0f, d, 0.001);
+
+    d = sd.getDistance( "tlunttkubj", "tho", 0.5f);
+    assertEquals( 0.10f, d, 0.001);
+
+    d = sd.getDistance( "ep", "eh", 0.5f);
+    assertEquals( 0.5f, d, 0.001);
+  }
+
+  public void testGetDistanceThresholdRandom() {
+    for (int i=0; i<5000; ++i) {
+      String str1 = TestUtil.randomSimpleString(random());
+      String str2 = TestUtil.randomSimpleString(random());
+      float distanceFullLevenshtein = sd.getDistance(str1, str2);
+      float distanceQuickLevenshtein = sd.getDistance(str1, str2, 0.5f);
+      if (distanceFullLevenshtein >= 0.5f) {
+        assertEquals("Expected same Levenshtein distance with and without threshold",
+            distanceFullLevenshtein, distanceQuickLevenshtein, 0.001);
+      } else {
+        assertTrue( "Distance should be smaller than the threshold "+distanceQuickLevenshtein+" "+str1+" "+str2,
+            distanceQuickLevenshtein < 0.5f );
+      }
+    }
+  }
+
   public void testEmpty() throws Exception {
     float d = sd.getDistance("", "al");
     assertEquals(d,0.0f,0.001);
diff --git solr/core/src/java/org/apache/solr/spelling/SolrSpellChecker.java solr/core/src/java/org/apache/solr/spelling/SolrSpellChecker.java
index 5543867e03f..fc9f09b0a60 100644
--- solr/core/src/java/org/apache/solr/spelling/SolrSpellChecker.java
+++ solr/core/src/java/org/apache/solr/spelling/SolrSpellChecker.java
@@ -110,7 +110,7 @@ public abstract class SolrSpellChecker {
       SuggestWordQueue sugQueue = new SuggestWordQueue(numSug);
       for (String suggestion : suggested) {
         SuggestWord sug = mergeData.suggestedVsWord.get(suggestion);
-        sug.score = sd.getDistance(original, sug.string);
+        sug.score = sd.getDistance(original, sug.string, min);
         if (sug.score < min) continue;
         sugQueue.insertWithOverflow(sug);
         if (sugQueue.size() == numSug) {
