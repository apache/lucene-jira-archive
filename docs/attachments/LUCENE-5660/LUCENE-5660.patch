Index: lucene/core/src/java/org/apache/lucene/util/OfflineSorter.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/OfflineSorter.java	(revision 1593514)
+++ lucene/core/src/java/org/apache/lucene/util/OfflineSorter.java	(working copy)
@@ -474,9 +474,12 @@
       assert bytes != null;
       assert off >= 0 && off + len <= bytes.length;
       assert len >= 0;
+      if (len > Short.MAX_VALUE) {
+        throw new IllegalArgumentException("len must be <= " + Short.MAX_VALUE + "; got " + len);
+      }
       os.writeShort(len);
       os.write(bytes, off, len);
-    }        
+    }
     
     /**
      * Closes the provided {@link DataOutput} if it is {@link Closeable}.
Index: lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest.java
===================================================================
--- lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest.java	(revision 1593514)
+++ lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest.java	(working copy)
@@ -1200,4 +1200,27 @@
     Collections.shuffle(asList, random());
     return asList;
   }
+
+  // TODO: we need BaseSuggesterTestCase?
+  public void testTooLongSuggestion() throws Exception {
+    Analyzer a = new MockAnalyzer(random());
+    AnalyzingSuggester suggester = new AnalyzingSuggester(a);
+    String bigString = TestUtil.randomSimpleString(random(), 30000, 30000);
+    try {
+      suggester.build(new InputArrayIterator(new Input[] {
+            new Input(bigString, 7)}));
+      fail("did not hit expected exception");
+    } catch (IllegalArgumentException iae) {
+      // expected
+    }
+  }
+
+  public void testVeryLongSuggestion() throws Exception {
+    Analyzer a = new MockAnalyzer(random());
+    AnalyzingSuggester suggester = new AnalyzingSuggester(a);
+    String bigString = TestUtil.randomSimpleString(random(), 16380, 16380);
+    suggester.build(new InputArrayIterator(new Input[] {
+          new Input(bigString, 7)}));
+    assertEquals("[" + bigString + "/7]", suggester.lookup(""+bigString.charAt(0), false, 1).toString());
+  }
 }
Index: lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester.java
===================================================================
--- lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester.java	(revision 1593514)
+++ lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester.java	(working copy)
@@ -459,7 +459,6 @@
           }
 
           assert output.getPosition() == requiredLength: output.getPosition() + " vs " + requiredLength;
-
           writer.write(buffer, 0, output.getPosition());
         }
         count++;
@@ -839,8 +838,6 @@
     replaceSep(automaton);
     automaton = convertAutomaton(automaton);
 
-    assert SpecialOperations.isFinite(automaton);
-
     // Get all paths from the automaton (there can be
     // more than one path, eg if the analyzer created a
     // graph using SynFilter or WDF):
