Index: lucene/core/src/test/org/apache/lucene/mockfile/TestMockFilesystems.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/mockfile/TestMockFilesystems.java	(revision 1673867)
+++ lucene/core/src/test/org/apache/lucene/mockfile/TestMockFilesystems.java	(working copy)
@@ -341,4 +341,20 @@
       assertEquals(1, count);
     }
   }
+  
+  public void testHashCodeEquals() throws IOException {
+    Path dir = FilterPath.unwrap(createTempDir());
+    FileSystem fs = new FilterFileSystemProvider("test://", dir.getFileSystem()).getFileSystem(URI.create("file:///"));
+    Path wrapped = new FilterPath(dir, fs);
+
+    Path f1 = wrapped.resolve("file1");
+    Path f1Again = wrapped.resolve("file1");
+    Path f2 = wrapped.resolve("file2");
+    
+    assertEquals(f1, f1);
+    assertFalse(f1.equals(null));
+    assertEquals(f1, f1Again);
+    assertEquals(f1.hashCode(), f1Again.hashCode());
+    assertFalse(f1.equals(f2));
+  }
 }
Index: lucene/test-framework/src/java/org/apache/lucene/mockfile/FilterPath.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/mockfile/FilterPath.java	(revision 1673867)
+++ lucene/test-framework/src/java/org/apache/lucene/mockfile/FilterPath.java	(working copy)
@@ -234,6 +234,26 @@
     return delegate.compareTo(toDelegate(other));
   }
   
+  @Override
+  public int hashCode() {
+    return delegate.hashCode();
+  }
+
+  @Override
+  public boolean equals(Object obj) {
+    if (this == obj) return true;
+    if (obj == null) return false;
+    if (getClass() != obj.getClass()) return false;
+    FilterPath other = (FilterPath) obj;
+    if (delegate == null) {
+      if (other.delegate != null) return false;
+    } else if (!delegate.equals(other.delegate)) return false;
+    if (fileSystem == null) {
+      if (other.fileSystem != null) return false;
+    } else if (!fileSystem.equals(other.fileSystem)) return false;
+    return true;
+  }
+
   /**
    * Unwraps all {@code FilterPath}s, returning
    * the innermost {@code Path}.
