diff --git a/build.gradle b/build.gradle
index 0dc2c14f0fb..9e2ff06e008 100644
--- a/build.gradle
+++ b/build.gradle
@@ -5,6 +5,7 @@ plugins {
   id "base"
   id "com.palantir.consistent-versions" version "1.14.0"
   id 'de.thetaphi.forbiddenapis' version '2.7' apply false
+  id "de.undercouch.download" version "4.0.2" apply false
 }
 
 // Project version and main properties. Applies to all projects.
diff --git a/gradle/defaults.gradle b/gradle/defaults.gradle
index 1b676fe3a57..68f9346b22a 100644
--- a/gradle/defaults.gradle
+++ b/gradle/defaults.gradle
@@ -28,5 +28,7 @@ allprojects {
       }
       return result
     }
+    
+    filePath = { path -> file(path).getAbsolutePath() }
   }
 }
diff --git a/lucene/core/build.gradle b/lucene/core/build.gradle
index 8be3b6eacb5..f248ff51e08 100644
--- a/lucene/core/build.gradle
+++ b/lucene/core/build.gradle
@@ -1,7 +1,89 @@
-
 apply plugin: 'java-library'
+apply plugin: "de.undercouch.download"
 
 dependencies {
   testImplementation project(':lucene:codecs')
   testImplementation project(':lucene:test-framework')
 }
+
+// nocommit check this out.
+def momanCommitHash = "5c5c2a1e4dea"
+def momanUrl = "https://bitbucket.org/jpbarrette/moman/get/${momanCommitHash}.zip"
+//nocommit This is almost certainly wrong, how to include it generically?
+def python_exe = "python"
+
+// This downloads and extracts Moman
+configure(project(":lucene:core")) {
+
+  task downloadMoman(type: Download) {
+    src momanUrl
+    dest filePath("${buildDir}/moman.zip")
+    onlyIfModified true
+  }
+
+  task installMoman(dependsOn: downloadMoman) {
+    doLast {
+      ant.unzip(src: filePath("${buildDir}/moman.zip"), dest: filePath("${buildDir}/moman"), overwrite: "true") {
+        ant.cutdirsmapper(dirs: "1")
+      }
+    }
+  }
+}
+
+task createPackedIntSources {
+  group = 'Build Regenerate'
+  description = "Regenerates PackedInt src files."
+  doLast {
+    exec {
+      workingDir 'src/java/org/apache/lucene/util/packed'
+      executable "${python_exe}"
+      args = ['-B', 'gen_BulkOperation.py']
+    }
+    exec {
+      workingDir 'src/java/org/apache/lucene/util/packed'
+      executable "${python_exe}"
+      args = ['-B', 'gen_Packed64SingleBlock.py']
+    }
+    ant.fixcrlf(srcdir: 'src/java/org/apache/lucene/util/packed', includes: 'Packed64SingleBlock.java', encoding: 'UTF-8')
+    ant.fixcrlf(srcdir: 'src/java/org/apache/lucene/util/packed', includes: 'BulkOperation*.java', encoding: 'UTF-8')
+  }
+}
+
+task createLevAutomaton(dependsOn: installMoman) {
+  group = 'Build Regenerate'
+  description = "Regenerates LevAutomaton src files."
+
+  doLast {
+    exec {
+      workingDir 'src/java/org/apache/lucene/util/automaton'
+      executable "${python_exe}"
+      args = ['-B', 'createLevAutomata.py', '1', 'True']
+    }
+    exec {
+      workingDir 'src/java/org/apache/lucene/util/automaton'
+      executable "${python_exe}"
+      args = ['-B', 'createLevAutomata.py', '1', 'False']
+    }
+    exec {
+      workingDir 'src/java/org/apache/lucene/util/automaton'
+      executable "${python_exe}"
+      args = ['-B', 'createLevAutomata.py', '2', 'True']
+    }
+    exec {
+      workingDir 'src/java/org/apache/lucene/util/automaton'
+      executable "${python_exe}"
+      args = ['-B', 'createLevAutomata.py', '2', 'False']
+    }
+    ant.fixcrlf(srcdir: 'src/java/org/apache/lucene/util/automaton', includes: '*ParametricDescription.java', encoding: 'UTF-8')
+  }
+}
+
+task regenerate {
+  group = 'Build Regenerate'
+  description = "Regenerates various generated src files, automoton, packedints, jflex, javacc, etc"
+// nocommit one at a time  dependsOn cleanJflex, runJflex
+  dependsOn createPackedIntSources, createLevAutomaton
+}
+
+
+
diff --git a/lucene/core/src/java/org/apache/lucene/util/automaton/createLevAutomata.py b/lucene/core/src/java/org/apache/lucene/util/automaton/createLevAutomata.py
index bd0ab457bad..b25cc8431bf 100644
--- a/lucene/core/src/java/org/apache/lucene/util/automaton/createLevAutomata.py
+++ b/lucene/core/src/java/org/apache/lucene/util/automaton/createLevAutomata.py
@@ -21,8 +21,9 @@
 import math
 import os
 import sys
-# sys.path.insert(0, 'moman/finenight/python')
-sys.path.insert(0, '../../../../../../../../build/core/moman/finenight/python')
+#sys.path.insert(0, 'moman/finenight/python')
+#sys.path.insert(0, '../../../../../../../../build/core/moman/finenight/python')
+sys.path.insert(0, '../../../../../../../build/moman/finenight/python')
 try:
   from possibleStates import genTransitions
 except ImportError:
@@ -95,7 +96,6 @@ def charVarNumber(charVar):
   return sum
 
 def main():
-
   if len(sys.argv) != 3:
     print
     print 'Usage: python -u %s N <True/False>' % sys.argv[0]
diff --git a/lucene/queryparser/build.gradle b/lucene/queryparser/build.gradle
index cc0b2c3aa6d..500c4bc42a0 100644
--- a/lucene/queryparser/build.gradle
+++ b/lucene/queryparser/build.gradle
@@ -21,7 +21,6 @@ configure(":lucene:queryparser") {
 String lineSeparator = System.lineSeparator()
 
 task runJavaccQueryParser(type: JavaCC) {
-  outputs.upToDateWhen { false } //nocommit
   inputFile file('src/java/org/apache/lucene/queryparser/classic/QueryParser.jj')
   target file('src/java/org/apache/lucene/queryparser/classic')
   doLast {
@@ -37,13 +36,11 @@ task runJavaccQueryParser(type: JavaCC) {
 }
 
 task runJavaccSurround(type: JavaCC) {
-  outputs.upToDateWhen { false } //nocommit
   inputFile file('src/java/org/apache/lucene/queryparser/surround/parser/QueryParser.jj')
   target file('src/java/org/apache/lucene/queryparser/surround/parser')
 }
 
 task runJavaccFlexible(type: JavaCC) {
-  outputs.upToDateWhen { false } //nocommit
   inputFile file('src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser.jj')
   target file('src/java/org/apache/lucene/queryparser/flexible/standard/parser')
   doLast {
@@ -101,7 +98,6 @@ task runJavaccFlexible(type: JavaCC) {
   }
 
   task runJavacc {
-    outputs.upToDateWhen { false } //nocommit
     group = 'Build Regenerate'
     description = "Regenerates javacc generated src files."
     dependsOn runJavaccQueryParser, runJavaccSurround, runJavaccFlexible
