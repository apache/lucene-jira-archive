diff --git a/lucene/suggest/src/java/org/apache/lucene/search/spell/HighFrequencyDictionary.java b/lucene/suggest/src/java/org/apache/lucene/search/spell/HighFrequencyDictionary.java
index 657684c587..761832528c 100644
--- a/lucene/suggest/src/java/org/apache/lucene/search/spell/HighFrequencyDictionary.java
+++ b/lucene/suggest/src/java/org/apache/lucene/search/spell/HighFrequencyDictionary.java
@@ -81,7 +81,7 @@ public class HighFrequencyDictionary implements Dictionary {
     }
     
     @Override
-    public long weight() {
+    public Long weight() {
       return freq;
     }
 
diff --git a/lucene/suggest/src/java/org/apache/lucene/search/suggest/BufferedInputIterator.java b/lucene/suggest/src/java/org/apache/lucene/search/suggest/BufferedInputIterator.java
index 97bf845159..f254185d43 100644
--- a/lucene/suggest/src/java/org/apache/lucene/search/suggest/BufferedInputIterator.java
+++ b/lucene/suggest/src/java/org/apache/lucene/search/suggest/BufferedInputIterator.java
@@ -71,7 +71,7 @@ public class BufferedInputIterator implements InputIterator {
   }
 
   @Override
-  public long weight() {
+  public Long weight() {
     return freqs[curPos];
   }
 
diff --git a/lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentDictionary.java b/lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentDictionary.java
index a8dd5074a2..13e610f457 100644
--- a/lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentDictionary.java
+++ b/lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentDictionary.java
@@ -111,7 +111,7 @@ public class DocumentDictionary implements Dictionary {
     private final boolean hasContexts;
     private final Bits liveDocs;
     private int currentDocId = -1;
-    private long currentWeight = 0;
+    private Long currentWeight;
     private BytesRef currentPayload = null;
     private Set<BytesRef> currentContexts;
     private final NumericDocValues weightValues;
@@ -132,8 +132,12 @@ public class DocumentDictionary implements Dictionary {
       relevantFields = getRelevantFields(new String [] {field, weightField, payloadField, contextsField});
     }
 
+    /**
+     * The document weight is extracted from the source document 'weightField'.
+     * It can be null if the 'weightField' is missing in the source document.
+     */
     @Override
-    public long weight() {
+    public Long weight() {
       return currentWeight;
     }
 
@@ -237,12 +241,12 @@ public class DocumentDictionary implements Dictionary {
      * Returns the value of the <code>weightField</code> for the current document.
      * Retrieves the value for the <code>weightField</code> if it's stored (using <code>doc</code>)
      * or if it's indexed as {@link NumericDocValues} (using <code>docId</code>) for the document.
-     * If no value is found, then the weight is 0.
+     * If no value is found, then the weight is null.
      */
-    protected long getWeight(Document doc, int docId) throws IOException {
+    protected Long getWeight(Document doc, int docId) throws IOException {
       IndexableField weight = doc.getField(weightField);
       if (weight != null) { // found weight as stored
-        return (weight.numericValue() != null) ? weight.numericValue().longValue() : 0;
+        return weight.numericValue().longValue();
       } else if (weightValues != null) {  // found weight as NumericDocValue
         if (weightValues.docID() < docId) {
           weightValues.advance(docId);
@@ -251,10 +255,10 @@ public class DocumentDictionary implements Dictionary {
           return weightValues.longValue();
         } else {
           // missing
-          return 0;
+          return null;
         }
       } else { // fall back
-        return 0;
+        return null;
       }
     }
     
diff --git a/lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentValueSourceDictionary.java b/lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentValueSourceDictionary.java
index 9356975612..17ccdebb40 100644
--- a/lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentValueSourceDictionary.java
+++ b/lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentValueSourceDictionary.java
@@ -132,9 +132,9 @@ public class DocumentValueSourceDictionary extends DocumentDictionary {
      * by the <code>weightsValueSource</code>
      * */
     @Override
-    protected long getWeight(Document doc, int docId) throws IOException {
+    protected Long getWeight(Document doc, int docId) throws IOException {
       if (currentWeightValues == null) {
-        return 0;
+        return null;
       }
       int subIndex = ReaderUtil.subIndex(docId, starts);
       if (subIndex != currentLeafIndex) {
@@ -144,8 +144,7 @@ public class DocumentValueSourceDictionary extends DocumentDictionary {
       if (currentWeightValues.advanceExact(docId - starts[subIndex]))
         return currentWeightValues.longValue();
       else
-        return 0;
-
+        return null;
     }
 
   }
diff --git a/lucene/suggest/src/java/org/apache/lucene/search/suggest/FileDictionary.java b/lucene/suggest/src/java/org/apache/lucene/search/suggest/FileDictionary.java
index b0660a9e76..c62342a185 100644
--- a/lucene/suggest/src/java/org/apache/lucene/search/suggest/FileDictionary.java
+++ b/lucene/suggest/src/java/org/apache/lucene/search/suggest/FileDictionary.java
@@ -147,7 +147,7 @@ public class FileDictionary implements Dictionary {
     }
     
     @Override
-    public long weight() {
+    public Long weight() {
       return curWeight;
     }
 
diff --git a/lucene/suggest/src/java/org/apache/lucene/search/suggest/InputIterator.java b/lucene/suggest/src/java/org/apache/lucene/search/suggest/InputIterator.java
index d2224f9679..ae524556c2 100644
--- a/lucene/suggest/src/java/org/apache/lucene/search/suggest/InputIterator.java
+++ b/lucene/suggest/src/java/org/apache/lucene/search/suggest/InputIterator.java
@@ -33,8 +33,11 @@ import org.apache.lucene.util.BytesRefIterator;
  */
 public interface InputIterator extends BytesRefIterator {
 
-  /** A term's weight, higher numbers mean better suggestions. */
-  public long weight();
+  /**
+   * A term's weight, higher numbers mean better suggestions.
+   * It can be null as some implementations don't require a mandatory weight.
+   */
+  public Long weight();
   
   /** An arbitrary byte[] to record per suggestion.  See
    *  {@link LookupResult#payload} to retrieve the payload
@@ -73,8 +76,8 @@ public interface InputIterator extends BytesRefIterator {
     }
 
     @Override
-    public long weight() {
-      return 1;
+    public Long weight() {
+      return 1L;
     }
 
     @Override
diff --git a/lucene/suggest/src/java/org/apache/lucene/search/suggest/Lookup.java b/lucene/suggest/src/java/org/apache/lucene/search/suggest/Lookup.java
index 138042467f..ebe618f2ee 100644
--- a/lucene/suggest/src/java/org/apache/lucene/search/suggest/Lookup.java
+++ b/lucene/suggest/src/java/org/apache/lucene/search/suggest/Lookup.java
@@ -52,8 +52,12 @@ public abstract class Lookup implements Accountable {
      *  highlighted suggestion. */
     public final Object highlightKey;
 
-    /** the key's weight */
-    public final long value;
+    /**
+     * the key's weight.
+     * This is not just the dictionary weight for the suggestion.
+     * It depends on the suggester implementation.
+     */
+    public final double value;
 
     /** the key's payload (null if not present) */
     public final BytesRef payload;
@@ -71,35 +75,35 @@ public abstract class Lookup implements Accountable {
     /**
      * Create a new result from a key+weight+payload triple.
      */
-    public LookupResult(CharSequence key, long value, BytesRef payload) {
+    public LookupResult(CharSequence key, double value, BytesRef payload) {
       this(key, null, value, payload, null);
     }
     
     /**
      * Create a new result from a key+highlightKey+weight+payload triple.
      */
-    public LookupResult(CharSequence key, Object highlightKey, long value, BytesRef payload) {
+    public LookupResult(CharSequence key, Object highlightKey, double value, BytesRef payload) {
       this(key, highlightKey, value, payload, null);
     }
     
     /**
      * Create a new result from a key+weight+payload+contexts triple.
      */
-    public LookupResult(CharSequence key, long value, BytesRef payload, Set<BytesRef> contexts) {
+    public LookupResult(CharSequence key, double value, BytesRef payload, Set<BytesRef> contexts) {
       this(key, null, value, payload, contexts);
     }
 
     /**
      * Create a new result from a key+weight+contexts triple.
      */
-    public LookupResult(CharSequence key, long value, Set<BytesRef> contexts) {
+    public LookupResult(CharSequence key, double value, Set<BytesRef> contexts) {
       this(key, null, value, null, contexts);
     }
     
     /**
      * Create a new result from a key+highlightKey+weight+payload+contexts triple.
      */
-    public LookupResult(CharSequence key, Object highlightKey, long value, BytesRef payload, Set<BytesRef> contexts) {
+    public LookupResult(CharSequence key, Object highlightKey, double value, BytesRef payload, Set<BytesRef> contexts) {
       this.key = key;
       this.highlightKey = highlightKey;
       this.value = value;
diff --git a/lucene/suggest/src/java/org/apache/lucene/search/suggest/SortedInputIterator.java b/lucene/suggest/src/java/org/apache/lucene/search/suggest/SortedInputIterator.java
index 977df37132..ca727d77f5 100644
--- a/lucene/suggest/src/java/org/apache/lucene/search/suggest/SortedInputIterator.java
+++ b/lucene/suggest/src/java/org/apache/lucene/search/suggest/SortedInputIterator.java
@@ -108,7 +108,7 @@ public class SortedInputIterator implements InputIterator {
   }
   
   @Override
-  public long weight() {
+  public Long weight() {
     return weight;
   }
 
diff --git a/lucene/suggest/src/java/org/apache/lucene/search/suggest/UnsortedInputIterator.java b/lucene/suggest/src/java/org/apache/lucene/search/suggest/UnsortedInputIterator.java
index f7d1efe6af..9bc56d162d 100644
--- a/lucene/suggest/src/java/org/apache/lucene/search/suggest/UnsortedInputIterator.java
+++ b/lucene/suggest/src/java/org/apache/lucene/search/suggest/UnsortedInputIterator.java
@@ -54,7 +54,7 @@ public class UnsortedInputIterator extends BufferedInputIterator {
   }
   
   @Override
-  public long weight() {
+  public Long weight() {
     assert currentOrd == ords[curPos];
     return freqs[currentOrd];
   }
diff --git a/lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester.java b/lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester.java
index a8394e0c7a..d402f16126 100644
--- a/lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester.java
+++ b/lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester.java
@@ -120,6 +120,17 @@ public class AnalyzingInfixSuggester extends Lookup implements Closeable {
    *  StringField and a SortedSetDVField, for filtering. */
   protected final static String CONTEXTS_FIELD_NAME = "contexts";
 
+  /**
+   * Field name used for the indexed weight, as a
+   * NumeriDocValues.
+   */
+  protected final static String WEIGHT_FIELD_NAME = "weight";
+
+  /**
+   * Field name used for the indexed payload.
+   */
+  protected final static String PAYLOADS_FIELD_NAME = "payloads";
+
   /** Analyzer used at search time */
   protected final Analyzer queryAnalyzer;
   /** Analyzer used at index time */
@@ -391,7 +402,7 @@ public class AnalyzingInfixSuggester extends Lookup implements Closeable {
    *  After adding or updating a batch of new suggestions,
    *  you must call {@link #refresh} in the end in order to
    *  see the suggestions in {@link #lookup} */
-  public void add(BytesRef text, Set<BytesRef> contexts, long weight, BytesRef payload) throws IOException {
+  public void add(BytesRef text, Set<BytesRef> contexts, Long weight, BytesRef payload) throws IOException {
     ensureOpen();
     writer.addDocument(buildDocument(text, contexts, weight, payload));
   }
@@ -403,13 +414,13 @@ public class AnalyzingInfixSuggester extends Lookup implements Closeable {
    *  #add} instead.  After adding or updating a batch of
    *  new suggestions, you must call {@link #refresh} in the
    *  end in order to see the suggestions in {@link #lookup} */
-  public void update(BytesRef text, Set<BytesRef> contexts, long weight, BytesRef payload) throws IOException {
+  public void update(BytesRef text, Set<BytesRef> contexts, Long weight, BytesRef payload) throws IOException {
     ensureOpen();
     writer.updateDocument(new Term(EXACT_TEXT_FIELD_NAME, text.utf8ToString()),
                           buildDocument(text, contexts, weight, payload));
   }
 
-  private Document buildDocument(BytesRef text, Set<BytesRef> contexts, long weight, BytesRef payload) throws IOException {
+  private Document buildDocument(BytesRef text, Set<BytesRef> contexts, Long weight, BytesRef payload) throws IOException {
     String textString = text.utf8ToString();
     Document doc = new Document();
     FieldType ft = getTextFieldType();
@@ -419,9 +430,11 @@ public class AnalyzingInfixSuggester extends Lookup implements Closeable {
     }
     doc.add(new StringField(EXACT_TEXT_FIELD_NAME, textString, Field.Store.NO));
     doc.add(new BinaryDocValuesField(TEXT_FIELD_NAME, text));
-    doc.add(new NumericDocValuesField("weight", weight));
+    if (weight != null) {
+      doc.add(new NumericDocValuesField(WEIGHT_FIELD_NAME, weight));
+    }
     if (payload != null) {
-      doc.add(new BinaryDocValuesField("payloads", payload));
+      doc.add(new BinaryDocValuesField(PAYLOADS_FIELD_NAME, payload));
     }
     if (contexts != null) {
       for(BytesRef context : contexts) {
diff --git a/lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester.java b/lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester.java
index cc11fe124a..05ea7f1adf 100644
--- a/lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester.java
+++ b/lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester.java
@@ -463,7 +463,11 @@ public class AnalyzingSuggester extends Lookup implements Accountable {
 
           output.writeBytes(scratch.bytes(), 0, scratch.length());
 
-          output.writeInt(encodeWeight(iterator.weight()));
+          if (iterator.weight() != null) {
+            output.writeInt(encodeWeight(iterator.weight()));
+          } else {
+            output.writeInt(encodeWeight(0L));
+          }
 
           if (hasPayloads) {
             for(int i=0;i<surfaceForm.length;i++) {
diff --git a/lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester.java b/lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester.java
index 413d401b6a..ff2fbe230b 100644
--- a/lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester.java
+++ b/lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester.java
@@ -30,6 +30,7 @@ import org.apache.lucene.document.TextField;
 import org.apache.lucene.index.BinaryDocValues;
 import org.apache.lucene.index.IndexOptions;
 import org.apache.lucene.index.MultiDocValues;
+import org.apache.lucene.index.NumericDocValues;
 import org.apache.lucene.index.PostingsEnum;
 import org.apache.lucene.index.Terms;
 import org.apache.lucene.index.TermsEnum;
@@ -55,7 +56,6 @@ import org.apache.lucene.util.BytesRef;
  * @lucene.experimental
  */
 public class BlendedInfixSuggester extends AnalyzingInfixSuggester {
-
   /**
    * Coefficient used for linear blending
    */
@@ -187,35 +187,36 @@ public class BlendedInfixSuggester extends AnalyzingInfixSuggester {
       throws IOException {
 
     TreeSet<Lookup.LookupResult> results = new TreeSet<>(LOOKUP_COMP);
-
+    final BinaryDocValues textDV = MultiDocValues.getBinaryValues(searcher.getIndexReader(), TEXT_FIELD_NAME);
+    assert textDV != null;
+    final NumericDocValues weightDV = MultiDocValues.getNumericValues(searcher.getIndexReader(), WEIGHT_FIELD_NAME);
+    // This will just be null if app didn't pass payloads to build():
+    // TODO: maybe just stored fields?  they compress...
+    final BinaryDocValues payloadsDV = MultiDocValues.getBinaryValues(searcher.getIndexReader(), PAYLOADS_FIELD_NAME);
+    
     // we reduce the num to the one initially requested
     int actualNum = num / numFactor;
 
     for (int i = 0; i < hits.scoreDocs.length; i++) {
       FieldDoc fd = (FieldDoc) hits.scoreDocs[i];
 
-      BinaryDocValues textDV = MultiDocValues.getBinaryValues(searcher.getIndexReader(), TEXT_FIELD_NAME);
-      assert textDV != null;
-
       textDV.advance(fd.doc);
-
       final String text = textDV.binaryValue().utf8ToString();
-      long weight = (Long) fd.fields[0];
 
-      // This will just be null if app didn't pass payloads to build():
-      // TODO: maybe just stored fields?  they compress...
-      BinaryDocValues payloadsDV = MultiDocValues.getBinaryValues(searcher.getIndexReader(), "payloads");
+      Long weight = null;
+      if (weightDV != null) {
+        boolean weightPresent = weightDV.advanceExact(fd.doc);
+        if (weightPresent) weight = weightDV.longValue();
+      }
 
-      BytesRef payload;
+      BytesRef payload = null;
       if (payloadsDV != null) {
         if (payloadsDV.advance(fd.doc) == fd.doc) {
           payload = BytesRef.deepCopyOf(payloadsDV.binaryValue());
         } else {
           payload = new BytesRef(BytesRef.EMPTY_BYTES);
         }
-      } else {
-        payload = null;
-      }
+      } 
 
       double coefficient;
       if (text.startsWith(key.toString())) {
@@ -224,8 +225,10 @@ public class BlendedInfixSuggester extends AnalyzingInfixSuggester {
       } else {
         coefficient = createCoefficient(searcher, fd.doc, matchedTokens, prefixToken);
       }
-
-      long score = (long) (weight * coefficient);
+      double score = coefficient;
+      if (weight != null) {
+        score *= weight;
+      }
 
       LookupResult result;
       if (doHighlight) {
diff --git a/lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest.java b/lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest.java
index 01028a287d..2952f2b5fb 100644
--- a/lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest.java
+++ b/lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest.java
@@ -70,7 +70,7 @@ public class DocumentDictionaryTest extends LuceneTestCase {
     InputIterator inputIterator = dictionary.getEntryIterator();
 
     assertNull(inputIterator.next());
-    assertEquals(inputIterator.weight(), 0);
+    assertNull(inputIterator.weight());
     assertNull(inputIterator.payload());
     
     IOUtils.close(ir, analyzer, dir);
@@ -99,7 +99,7 @@ public class DocumentDictionaryTest extends LuceneTestCase {
       Document doc = docs.remove(f.utf8ToString());
       assertTrue(f.equals(new BytesRef(doc.get(FIELD_NAME))));
       IndexableField weightField = doc.getField(WEIGHT_FIELD_NAME);
-      assertEquals(inputIterator.weight(), (weightField != null) ? weightField.numericValue().longValue() : 0);
+      assertEquals(inputIterator.weight(), (weightField != null) ? weightField.numericValue().longValue() : null);
       IndexableField payloadField = doc.getField(PAYLOAD_FIELD_NAME);
       if (payloadField == null) assertTrue(inputIterator.payload().length == 0);
       else assertEquals(inputIterator.payload(), payloadField.binaryValue());
@@ -141,7 +141,7 @@ public class DocumentDictionaryTest extends LuceneTestCase {
     BytesRef f = inputIterator.next();
     assertTrue(f.equals(new BytesRef(doc.get(FIELD_NAME))));
     IndexableField weightField = doc.getField(WEIGHT_FIELD_NAME);
-    assertEquals(inputIterator.weight(), weightField.numericValue().longValue());
+    assertEquals(inputIterator.weight(), (Long) weightField.numericValue().longValue());
     IndexableField payloadField = doc.getField(PAYLOAD_FIELD_NAME);
     assertNull(payloadField);
     assertTrue(inputIterator.payload().length == 0);
@@ -171,7 +171,7 @@ public class DocumentDictionaryTest extends LuceneTestCase {
       Document doc = docs.remove(f.utf8ToString());
       assertTrue(f.equals(new BytesRef(doc.get(FIELD_NAME))));
       IndexableField weightField = doc.getField(WEIGHT_FIELD_NAME);
-      assertEquals(inputIterator.weight(), (weightField != null) ? weightField.numericValue().longValue() : 0);
+      assertEquals(inputIterator.weight(), (weightField != null) ? weightField.numericValue().longValue() : null);
       assertNull(inputIterator.payload());
     }
     
@@ -207,7 +207,7 @@ public class DocumentDictionaryTest extends LuceneTestCase {
       Document doc = docs.remove(f.utf8ToString());
       assertTrue(f.equals(new BytesRef(doc.get(FIELD_NAME))));
       IndexableField weightField = doc.getField(WEIGHT_FIELD_NAME);
-      assertEquals(inputIterator.weight(), (weightField != null) ? weightField.numericValue().longValue() : 0);
+      assertEquals(inputIterator.weight(), (weightField != null) ? weightField.numericValue().longValue() : null);
       IndexableField payloadField = doc.getField(PAYLOAD_FIELD_NAME);
       if (payloadField == null) assertTrue(inputIterator.payload().length == 0);
       else assertEquals(inputIterator.payload(), payloadField.binaryValue());
@@ -272,7 +272,7 @@ public class DocumentDictionaryTest extends LuceneTestCase {
       Document doc = docs.remove(f.utf8ToString());
       assertTrue(f.equals(new BytesRef(doc.get(FIELD_NAME))));
       IndexableField weightField = doc.getField(WEIGHT_FIELD_NAME);
-      assertEquals(inputIterator.weight(), (weightField != null) ? weightField.numericValue().longValue() : 0);
+      assertEquals(inputIterator.weight(), (weightField != null) ? weightField.numericValue().longValue() : null);
       assertNull(inputIterator.payload());
     }
     
@@ -304,8 +304,8 @@ public class DocumentDictionaryTest extends LuceneTestCase {
     while((f = inputIterator.next())!=null) {
       Suggestion nextSuggestion = suggestionsIter.next();
       assertTrue(f.equals(nextSuggestion.term));
-      long weight = nextSuggestion.weight;
-      assertEquals(inputIterator.weight(), (weight != -1) ? weight : 0);
+      Long weight = nextSuggestion.weight;
+      assertEquals(inputIterator.weight(), (weight != -1) ? weight : null);
       assertEquals(inputIterator.payload(), nextSuggestion.payload);
       assertTrue(inputIterator.contexts().equals(nextSuggestion.contexts));
     }
diff --git a/lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentValueSourceDictionaryTest.java b/lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentValueSourceDictionaryTest.java
index 3a2d87782a..0d384bea21 100644
--- a/lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentValueSourceDictionaryTest.java
+++ b/lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentValueSourceDictionaryTest.java
@@ -74,7 +74,7 @@ public class DocumentValueSourceDictionaryTest extends LuceneTestCase {
     InputIterator inputIterator = dictionary.getEntryIterator();
 
     assertNull(inputIterator.next());
-    assertEquals(inputIterator.weight(), 0);
+    assertNull(inputIterator.weight());
     assertNull(inputIterator.payload());
 
     IOUtils.close(ir, analyzer, dir);
@@ -95,7 +95,7 @@ public class DocumentValueSourceDictionaryTest extends LuceneTestCase {
     InputIterator inputIterator = dictionary.getEntryIterator();
 
     assertNull(inputIterator.next());
-    assertEquals(inputIterator.weight(), 0);
+    assertNull(inputIterator.weight());
     assertNull(inputIterator.payload());
 
     IOUtils.close(ir, analyzer, dir);
@@ -126,7 +126,7 @@ public class DocumentValueSourceDictionaryTest extends LuceneTestCase {
       long w2 = doc.getField(WEIGHT_FIELD_NAME_2).numericValue().longValue();
       long w3 = doc.getField(WEIGHT_FIELD_NAME_3).numericValue().longValue();
       assertTrue(f.equals(new BytesRef(doc.get(FIELD_NAME))));
-      assertEquals(inputIterator.weight(), (w1 + w2 + w3));
+      assertEquals(inputIterator.weight(), (Long) (w1 + w2 + w3));
       IndexableField payloadField = doc.getField(PAYLOAD_FIELD_NAME);
       if (payloadField == null) assertTrue(inputIterator.payload().length == 0);
       else assertEquals(inputIterator.payload(), payloadField.binaryValue());
@@ -225,7 +225,7 @@ public class DocumentValueSourceDictionaryTest extends LuceneTestCase {
       long w2 = doc.getField(WEIGHT_FIELD_NAME_2).numericValue().longValue();
       long w3 = doc.getField(WEIGHT_FIELD_NAME_3).numericValue().longValue();
       assertTrue(f.equals(new BytesRef(doc.get(FIELD_NAME))));
-      assertEquals(inputIterator.weight(), (w1 + w2 + w3));
+      assertEquals(inputIterator.weight(), (Long) (w1 + w2 + w3));
       IndexableField payloadField = doc.getField(PAYLOAD_FIELD_NAME);
       if (payloadField == null) assertTrue(inputIterator.payload().length == 0);
       else assertEquals(inputIterator.payload(), payloadField.binaryValue());
@@ -259,7 +259,7 @@ public class DocumentValueSourceDictionaryTest extends LuceneTestCase {
       long w2 = doc.getField(WEIGHT_FIELD_NAME_2).numericValue().longValue();
       long w3 = doc.getField(WEIGHT_FIELD_NAME_3).numericValue().longValue();
       assertTrue(f.equals(new BytesRef(doc.get(FIELD_NAME))));
-      assertEquals(inputIterator.weight(), (w1 + w2 + w3));
+      assertEquals(inputIterator.weight(), (Long) (w1 + w2 + w3));
       IndexableField payloadField = doc.getField(PAYLOAD_FIELD_NAME);
       if (payloadField == null) assertTrue(inputIterator.payload().length == 0);
       else assertEquals(inputIterator.payload(), payloadField.binaryValue());
@@ -298,7 +298,7 @@ public class DocumentValueSourceDictionaryTest extends LuceneTestCase {
       long w2 = doc.getField(WEIGHT_FIELD_NAME_2).numericValue().longValue();
       long w3 = doc.getField(WEIGHT_FIELD_NAME_3).numericValue().longValue();
       assertTrue(f.equals(new BytesRef(doc.get(FIELD_NAME))));
-      assertEquals(inputIterator.weight(), (w1 + w2 + w3));
+      assertEquals(inputIterator.weight(), (Long) (w1 + w2 + w3));
       IndexableField payloadField = doc.getField(PAYLOAD_FIELD_NAME);
       if (payloadField == null) assertTrue(inputIterator.payload().length == 0);
       else assertEquals(inputIterator.payload(), payloadField.binaryValue());
@@ -337,7 +337,7 @@ public class DocumentValueSourceDictionaryTest extends LuceneTestCase {
       long w2 = doc.getField(WEIGHT_FIELD_NAME_2).numericValue().longValue();
       long w3 = doc.getField(WEIGHT_FIELD_NAME_3).numericValue().longValue();
       assertTrue(f.equals(new BytesRef(doc.get(FIELD_NAME))));
-      assertEquals(inputIterator.weight(), (w1 + w2 + w3));
+      assertEquals(inputIterator.weight(), (Long) (w1 + w2 + w3));
       assertNull(inputIterator.payload());
     }
     assertTrue(docs.isEmpty());
@@ -369,7 +369,7 @@ public class DocumentValueSourceDictionaryTest extends LuceneTestCase {
       long w2 = doc.getField(WEIGHT_FIELD_NAME_2).numericValue().longValue();
       long w3 = doc.getField(WEIGHT_FIELD_NAME_3).numericValue().longValue();
       assertTrue(f.equals(new BytesRef(doc.get(FIELD_NAME))));
-      assertEquals(inputIterator.weight(), (w1 + w2 + w3));
+      assertEquals(inputIterator.weight(), (Long) (w1 + w2 + w3));
       assertNull(inputIterator.payload());
     }
     assertTrue(docs.isEmpty());
@@ -421,7 +421,7 @@ public class DocumentValueSourceDictionaryTest extends LuceneTestCase {
       long w1 = doc.getField(WEIGHT_FIELD_NAME_1).numericValue().longValue();
       long w2 = doc.getField(WEIGHT_FIELD_NAME_2).numericValue().longValue();
       assertTrue(f.equals(new BytesRef(doc.get(FIELD_NAME))));
-      assertEquals(inputIterator.weight(), w2+w1);
+      assertEquals(inputIterator.weight(), (Long) (w2 + w1));
       IndexableField payloadField = doc.getField(PAYLOAD_FIELD_NAME);
       if (payloadField == null) assertTrue(inputIterator.payload().length == 0);
       else assertEquals(inputIterator.payload(), payloadField.binaryValue());
@@ -475,7 +475,7 @@ public class DocumentValueSourceDictionaryTest extends LuceneTestCase {
       long w1 = doc.getField(WEIGHT_FIELD_NAME_1).numericValue().longValue();
       long w2 = doc.getField(WEIGHT_FIELD_NAME_2).numericValue().longValue();
       assertTrue(f.equals(new BytesRef(doc.get(FIELD_NAME))));
-      assertEquals(inputIterator.weight(), w2+w1);
+      assertEquals(inputIterator.weight(), (Long) (w2 + w1));
       IndexableField payloadField = doc.getField(PAYLOAD_FIELD_NAME);
       if (payloadField == null) assertTrue(inputIterator.payload().length == 0);
       else assertEquals(inputIterator.payload(), payloadField.binaryValue());
@@ -505,7 +505,7 @@ public class DocumentValueSourceDictionaryTest extends LuceneTestCase {
     while((f = inputIterator.next())!=null) {
       Document doc = docs.remove(f.utf8ToString());
       assertTrue(f.equals(new BytesRef(doc.get(FIELD_NAME))));
-      assertEquals(inputIterator.weight(), 10);
+      assertEquals(inputIterator.weight(), Long.valueOf(10));
       IndexableField payloadField = doc.getField(PAYLOAD_FIELD_NAME);
       if (payloadField == null) assertTrue(inputIterator.payload().length == 0);
       else assertEquals(inputIterator.payload(), payloadField.binaryValue());
@@ -535,7 +535,7 @@ public class DocumentValueSourceDictionaryTest extends LuceneTestCase {
     while((f = inputIterator.next())!=null) {
       Document doc = docs.remove(f.utf8ToString());
       assertTrue(f.equals(new BytesRef(doc.get(FIELD_NAME))));
-      assertEquals(inputIterator.weight(), 10);
+      assertEquals(inputIterator.weight(), Long.valueOf(10));
       IndexableField payloadField = doc.getField(PAYLOAD_FIELD_NAME);
       if (payloadField == null) assertTrue(inputIterator.payload().length == 0);
       else assertEquals(inputIterator.payload(), payloadField.binaryValue());
diff --git a/lucene/suggest/src/test/org/apache/lucene/search/suggest/FileDictionaryTest.java b/lucene/suggest/src/test/org/apache/lucene/search/suggest/FileDictionaryTest.java
index bf021ead8b..6417f77dba 100644
--- a/lucene/suggest/src/test/org/apache/lucene/search/suggest/FileDictionaryTest.java
+++ b/lucene/suggest/src/test/org/apache/lucene/search/suggest/FileDictionaryTest.java
@@ -85,7 +85,7 @@ public class FileDictionaryTest extends LuceneTestCase {
       List<String> entry = entries.get(count);
       assertTrue(entry.size() >= 1); // at least a term
       assertEquals(entry.get(0), term.utf8ToString());
-      assertEquals(1, inputIter.weight());
+      assertEquals(Long.valueOf(1), inputIter.weight());
       assertNull(inputIter.payload());
       count++;
     }
@@ -107,7 +107,7 @@ public class FileDictionaryTest extends LuceneTestCase {
       List<String> entry = entries.get(count);
       assertTrue(entry.size() >= 1); // at least a term
       assertEquals(entry.get(0), term.utf8ToString());
-      assertEquals((entry.size() == 2) ? Long.parseLong(entry.get(1)) : 1, inputIter.weight());
+      assertEquals((entry.size() == 2) ? (Long) Long.parseLong(entry.get(1)) : Long.valueOf(1), inputIter.weight());
       assertNull(inputIter.payload());
       count++;
     }
@@ -129,7 +129,7 @@ public class FileDictionaryTest extends LuceneTestCase {
       List<String> entry = entries.get(count);
       assertTrue(entry.size() >= 2); // at least term and weight
       assertEquals(entry.get(0), term.utf8ToString());
-      assertEquals(Long.parseLong(entry.get(1)), inputIter.weight());
+      assertEquals((Long) Long.parseLong(entry.get(1)), inputIter.weight());
       if (entry.size() == 3) {
         assertEquals(entry.get(2), inputIter.payload().utf8ToString());
       } else {
@@ -155,7 +155,7 @@ public class FileDictionaryTest extends LuceneTestCase {
       List<String> entry = entries.get(count);
       assertTrue(entry.size() >= 2); // at least term and weight
       assertEquals(entry.get(0), term.utf8ToString());
-      assertEquals(Long.parseLong(entry.get(1)), inputIter.weight());
+      assertEquals((Long) Long.parseLong(entry.get(1)), inputIter.weight());
       if (entry.size() == 3) {
         assertEquals(entry.get(2), inputIter.payload().utf8ToString());
       } else {
@@ -182,7 +182,7 @@ public class FileDictionaryTest extends LuceneTestCase {
       List<String> entry = entries.get(count);
       assertTrue(entry.size() >= 2); // at least term and weight
       assertEquals(entry.get(0), term.utf8ToString());
-      assertEquals(Long.parseLong(entry.get(1)), inputIter.weight());
+      assertEquals((Long) Long.parseLong(entry.get(1)), inputIter.weight());
       if (entry.size() == 3) {
         assertEquals(entry.get(2), inputIter.payload().utf8ToString());
       } else {
diff --git a/lucene/suggest/src/test/org/apache/lucene/search/suggest/Input.java b/lucene/suggest/src/test/org/apache/lucene/search/suggest/Input.java
index 5cb07902e0..1ae641e7e2 100644
--- a/lucene/suggest/src/test/org/apache/lucene/search/suggest/Input.java
+++ b/lucene/suggest/src/test/org/apache/lucene/search/suggest/Input.java
@@ -23,48 +23,47 @@ import org.apache.lucene.util.BytesRef;
 /** corresponds to {@link InputIterator}'s entries */
 public final class Input {
   public final BytesRef term;
-  public final long v;
+  public final Long v;
   public final BytesRef payload;
   public final boolean hasPayloads;
   public final Set<BytesRef> contexts;
   public final boolean hasContexts;
 
-  public Input(BytesRef term, long v, BytesRef payload) {
+  public Input(BytesRef term, Long v, BytesRef payload) {
     this(term, v, payload, true, null, false);
   }
-  
-  public Input(String term, long v, BytesRef payload) {
+
+  public Input(String term, Long v, BytesRef payload) {
     this(new BytesRef(term), v, payload);
   }
-  
-  public Input(BytesRef term, long v, Set<BytesRef> contexts) {
+
+  public Input(BytesRef term, Long v, Set<BytesRef> contexts) {
     this(term, v, null, false, contexts, true);
   }
-  
-  public Input(String term, long v, Set<BytesRef> contexts) {
+
+  public Input(String term, Long v, Set<BytesRef> contexts) {
     this(new BytesRef(term), v, null, false, contexts, true);
   }
-  
-  public Input(BytesRef term, long v) {
+
+  public Input(BytesRef term, Long v) {
     this(term, v, null, false, null, false);
   }
-  
-  public Input(String term, long v) {
+
+  public Input(String term, Long v) {
     this(new BytesRef(term), v, null, false, null, false);
   }
   
   public Input(String term, int v, BytesRef payload, Set<BytesRef> contexts) {
-    this(new BytesRef(term), v, payload, true, contexts, true);
+    this(new BytesRef(term), Long.valueOf(v), payload, true, contexts, true);
   }
 
-  public Input(BytesRef term, long v, BytesRef payload, Set<BytesRef> contexts) {
+  public Input(BytesRef term, Long v, BytesRef payload, Set<BytesRef> contexts) {
     this(term, v, payload, true, contexts, true);
   }
-  
 
-  
-  public Input(BytesRef term, long v, BytesRef payload, boolean hasPayloads, Set<BytesRef> contexts, 
-      boolean hasContexts) {
+
+  public Input(BytesRef term, Long v, BytesRef payload, boolean hasPayloads, Set<BytesRef> contexts,
+               boolean hasContexts) {
     this.term = term;
     this.v = v;
     this.payload = payload;
diff --git a/lucene/suggest/src/test/org/apache/lucene/search/suggest/InputArrayIterator.java b/lucene/suggest/src/test/org/apache/lucene/search/suggest/InputArrayIterator.java
index a62e887ccb..3a2959d0fc 100644
--- a/lucene/suggest/src/test/org/apache/lucene/search/suggest/InputArrayIterator.java
+++ b/lucene/suggest/src/test/org/apache/lucene/search/suggest/InputArrayIterator.java
@@ -55,7 +55,7 @@ public final class InputArrayIterator implements InputIterator {
   }
   
   @Override
-  public long weight() {
+  public Long weight() {
     return current.v;
   }
 
diff --git a/lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest.java b/lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest.java
index 12c641645e..f64faddb1e 100644
--- a/lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest.java
+++ b/lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest.java
@@ -112,7 +112,7 @@ public class LookupBenchmarkTest extends LuceneTestCase {
     while ((line = br.readLine()) != null) {
       int tab = line.indexOf('|');
       assertTrue("No | separator?: " + line, tab >= 0);
-      int weight = Integer.parseInt(line.substring(tab + 1));
+      long weight = Long.parseLong(line.substring(tab + 1));
       String key = line.substring(0, tab);
       input.add(new Input(key, weight));
     }
diff --git a/lucene/suggest/src/test/org/apache/lucene/search/suggest/PersistenceTest.java b/lucene/suggest/src/test/org/apache/lucene/search/suggest/PersistenceTest.java
index a4a9d21119..ea0b3bcd8f 100644
--- a/lucene/suggest/src/test/org/apache/lucene/search/suggest/PersistenceTest.java
+++ b/lucene/suggest/src/test/org/apache/lucene/search/suggest/PersistenceTest.java
@@ -29,6 +29,8 @@ import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.TestUtil;
 
+import static java.lang.Math.toIntExact;
+
 public class PersistenceTest extends LuceneTestCase {
   public final String[] keys = new String[] {
       "one", 
@@ -77,7 +79,7 @@ public class PersistenceTest extends LuceneTestCase {
     }
     Input[] keys = new Input[this.keys.length];
     for (int i = 0; i < keys.length; i++)
-      keys[i] = new Input(this.keys[i], i);
+      keys[i] = new Input(this.keys[i], Long.valueOf(i));
     lookup.build(new InputArrayIterator(keys));
 
     // Store the suggester.
@@ -90,15 +92,15 @@ public class PersistenceTest extends LuceneTestCase {
 
     // Assert validity.
     Random random = random();
-    long previous = Long.MIN_VALUE;
+    double previous = Long.MIN_VALUE;
     for (Input k : keys) {
       List<LookupResult> list = lookup.lookup(TestUtil.bytesToCharSequence(k.term, random), false, 1);
       assertEquals(1, list.size());
       LookupResult lookupResult = list.get(0);
       assertNotNull(k.term.utf8ToString(), lookupResult.key);
 
-      if (supportsExactWeights) { 
-        assertEquals(k.term.utf8ToString(), k.v, lookupResult.value);
+      if (supportsExactWeights) {
+        assertEquals(k.term.utf8ToString(), toIntExact(k.v), lookupResult.value, 0.01F);
       } else {
         assertTrue(lookupResult.value + ">=" + previous, lookupResult.value >= previous);
         previous = lookupResult.value;
diff --git a/lucene/suggest/src/test/org/apache/lucene/search/suggest/TestInputIterator.java b/lucene/suggest/src/test/org/apache/lucene/search/suggest/TestInputIterator.java
index ecb77bdb42..38192bafad 100644
--- a/lucene/suggest/src/test/org/apache/lucene/search/suggest/TestInputIterator.java
+++ b/lucene/suggest/src/test/org/apache/lucene/search/suggest/TestInputIterator.java
@@ -84,7 +84,7 @@ public class TestInputIterator extends LuceneTestCase {
         Map.Entry<BytesRef,SimpleEntry<Long, BytesRef>> entry = expected.next();
       
         assertEquals(entry.getKey(), wrapper.next());
-        assertEquals(entry.getValue().getKey().longValue(), wrapper.weight());
+        assertEquals((Long) entry.getValue().getKey().longValue(), wrapper.weight());
         assertEquals(entry.getValue().getValue(), wrapper.payload());
       }
       assertNull(wrapper.next());
@@ -97,7 +97,7 @@ public class TestInputIterator extends LuceneTestCase {
       while (actualEntries.hasNext()) {
         Map.Entry<BytesRef, SimpleEntry<Long, Set<BytesRef>>> entry = actualEntries.next();
         assertEquals(entry.getKey(), wrapper.next());
-        assertEquals(entry.getValue().getKey().longValue(), wrapper.weight());
+        assertEquals((Long) entry.getValue().getKey().longValue(), wrapper.weight());
         Set<BytesRef> actualCtxs = entry.getValue().getValue();
         assertEquals(actualCtxs, wrapper.contexts());
       }
@@ -111,7 +111,7 @@ public class TestInputIterator extends LuceneTestCase {
       while (expectedPayloadContextEntries.hasNext()) {
         Map.Entry<BytesRef, SimpleEntry<Long, SimpleEntry<BytesRef, Set<BytesRef>>>> entry = expectedPayloadContextEntries.next();
         assertEquals(entry.getKey(), wrapper.next());
-        assertEquals(entry.getValue().getKey().longValue(), wrapper.weight());
+        assertEquals((Long) entry.getValue().getKey().longValue(), wrapper.weight());
         Set<BytesRef> actualCtxs = entry.getValue().getValue().getValue();
         assertEquals(actualCtxs, wrapper.contexts());
         BytesRef actualPayload = entry.getValue().getValue().getKey();
@@ -139,7 +139,7 @@ public class TestInputIterator extends LuceneTestCase {
         Map.Entry<BytesRef, Long> entry = expectedWithoutPayload.next();
       
         assertEquals(entry.getKey(), wrapperWithoutPayload.next());
-        assertEquals(entry.getValue().longValue(), wrapperWithoutPayload.weight());
+        assertEquals((Long) entry.getValue().longValue(), wrapperWithoutPayload.weight());
         assertNull(wrapperWithoutPayload.payload());
       }
       assertNull(wrapperWithoutPayload.next());
diff --git a/lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest.java b/lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest.java
index 423e62a0ee..fbbf2a842d 100644
--- a/lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest.java
+++ b/lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest.java
@@ -50,12 +50,14 @@ import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.TestUtil;
 import org.junit.Test;
 
+import static java.lang.Math.toIntExact;
+
 public class AnalyzingInfixSuggesterTest extends LuceneTestCase {
 
   public void testBasic() throws Exception {
     Input keys[] = new Input[] {
-      new Input("lend me your ear", 8, new BytesRef("foobar")),
-      new Input("a penny saved is a penny earned", 10, new BytesRef("foobaz")),
+        new Input("lend me your ear", 8L, new BytesRef("foobar")),
+        new Input("a penny saved is a penny earned", 10L, new BytesRef("foobaz")),
     };
 
     Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);
@@ -66,40 +68,40 @@ public class AnalyzingInfixSuggesterTest extends LuceneTestCase {
     assertEquals(2, results.size());
     assertEquals("a penny saved is a penny earned", results.get(0).key);
     assertEquals("a penny saved is a penny <b>ear</b>ned", results.get(0).highlightKey);
-    assertEquals(10, results.get(0).value);
+    assertEquals(10, results.get(0).value, 0.01F);
     assertEquals("foobaz", results.get(0).payload.utf8ToString());
 
     assertEquals("lend me your ear", results.get(1).key);
     assertEquals("lend me your <b>ear</b>", results.get(1).highlightKey);
-    assertEquals(8, results.get(1).value);
+    assertEquals(8, results.get(1).value, 0.01F);
     assertEquals(new BytesRef("foobar"), results.get(1).payload);
 
     results = suggester.lookup(TestUtil.stringToCharSequence("ear ", random()), 10, true, true);
     assertEquals(1, results.size());
     assertEquals("lend me your ear", results.get(0).key);
     assertEquals("lend me your <b>ear</b>", results.get(0).highlightKey);
-    assertEquals(8, results.get(0).value);
+    assertEquals(8, results.get(0).value, 0.01F);
     assertEquals(new BytesRef("foobar"), results.get(0).payload);
 
     results = suggester.lookup(TestUtil.stringToCharSequence("pen", random()), 10, true, true);
     assertEquals(1, results.size());
     assertEquals("a penny saved is a penny earned", results.get(0).key);
     assertEquals("a <b>pen</b>ny saved is a <b>pen</b>ny earned", results.get(0).highlightKey);
-    assertEquals(10, results.get(0).value);
+    assertEquals(10, results.get(0).value, 0.01F);
     assertEquals(new BytesRef("foobaz"), results.get(0).payload);
 
     results = suggester.lookup(TestUtil.stringToCharSequence("p", random()), 10, true, true);
     assertEquals(1, results.size());
     assertEquals("a penny saved is a penny earned", results.get(0).key);
     assertEquals("a <b>p</b>enny saved is a <b>p</b>enny earned", results.get(0).highlightKey);
-    assertEquals(10, results.get(0).value);
+    assertEquals(10, results.get(0).value, 0.01F);
     assertEquals(new BytesRef("foobaz"), results.get(0).payload);
     
     results = suggester.lookup(TestUtil.stringToCharSequence("money penny", random()), 10, false, true);
     assertEquals(1, results.size());
     assertEquals("a penny saved is a penny earned", results.get(0).key);
     assertEquals("a <b>penny</b> saved is a <b>penny</b> earned", results.get(0).highlightKey);
-    assertEquals(10, results.get(0).value);
+    assertEquals(10, results.get(0).value, 0.01F);
     assertEquals(new BytesRef("foobaz"), results.get(0).payload);
  
     results = suggester.lookup(TestUtil.stringToCharSequence("penny ea", random()), 10, false, true);
@@ -141,8 +143,8 @@ public class AnalyzingInfixSuggesterTest extends LuceneTestCase {
 
   public void testAfterLoad() throws Exception {
     Input keys[] = new Input[] {
-      new Input("lend me your ear", 8, new BytesRef("foobar")),
-      new Input("a penny saved is a penny earned", 10, new BytesRef("foobaz")),
+        new Input("lend me your ear", 8L, new BytesRef("foobar")),
+        new Input("a penny saved is a penny earned", 10L, new BytesRef("foobaz")),
     };
 
     Path tempDir = createTempDir("AnalyzingInfixSuggesterTest");
@@ -158,7 +160,7 @@ public class AnalyzingInfixSuggesterTest extends LuceneTestCase {
     assertEquals(2, results.size());
     assertEquals("a penny saved is a penny earned", results.get(0).key);
     assertEquals("a penny saved is a penny <b>ear</b>ned", results.get(0).highlightKey);
-    assertEquals(10, results.get(0).value);
+    assertEquals(10, results.get(0).value, 0.01F);
     assertEquals(new BytesRef("foobaz"), results.get(0).payload);
     assertEquals(2, suggester.getCount());
     suggester.close();
@@ -190,7 +192,7 @@ public class AnalyzingInfixSuggesterTest extends LuceneTestCase {
   @SuppressWarnings("unchecked")
   public void testHighlightAsObject() throws Exception {
     Input keys[] = new Input[] {
-      new Input("a penny saved is a penny earned", 10, new BytesRef("foobaz")),
+        new Input("a penny saved is a penny earned", 10L, new BytesRef("foobaz")),
     };
 
     Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);
@@ -241,7 +243,7 @@ public class AnalyzingInfixSuggesterTest extends LuceneTestCase {
     List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence("ear", random()), 10, true, true);
     assertEquals(1, results.size());
     assertEquals("a penny saved is a penny <b>ear</b>ned", toString((List<LookupHighlightFragment>) results.get(0).highlightKey));
-    assertEquals(10, results.get(0).value);
+    assertEquals(10, results.get(0).value, 0.01F);
     assertEquals(new BytesRef("foobaz"), results.get(0).payload);
     suggester.close();
     a.close();
@@ -264,8 +266,8 @@ public class AnalyzingInfixSuggesterTest extends LuceneTestCase {
 
   public void testRandomMinPrefixLength() throws Exception {
     Input keys[] = new Input[] {
-      new Input("lend me your ear", 8, new BytesRef("foobar")),
-      new Input("a penny saved is a penny earned", 10, new BytesRef("foobaz")),
+        new Input("lend me your ear", 8L, new BytesRef("foobar")),
+        new Input("a penny saved is a penny earned", 10L, new BytesRef("foobaz")),
     };
     Path tempDir = createTempDir("AnalyzingInfixSuggesterTest");
 
@@ -284,13 +286,13 @@ public class AnalyzingInfixSuggesterTest extends LuceneTestCase {
         if (doHighlight) {
           assertEquals("a penny saved is a penny <b>ear</b>ned", results.get(0).highlightKey);
         }
-        assertEquals(10, results.get(0).value);
+        assertEquals(10, results.get(0).value, 0.01F);
         assertEquals("lend me your ear", results.get(1).key);
         if (doHighlight) {
           assertEquals("lend me your <b>ear</b>", results.get(1).highlightKey);
         }
         assertEquals(new BytesRef("foobaz"), results.get(0).payload);
-        assertEquals(8, results.get(1).value);
+        assertEquals(8, results.get(1).value, 0.01F);
         assertEquals(new BytesRef("foobar"), results.get(1).payload);
 
         results = suggester.lookup(TestUtil.stringToCharSequence("ear ", random()), 10, true, doHighlight);
@@ -299,7 +301,7 @@ public class AnalyzingInfixSuggesterTest extends LuceneTestCase {
         if (doHighlight) {
           assertEquals("lend me your <b>ear</b>", results.get(0).highlightKey);
         }
-        assertEquals(8, results.get(0).value);
+        assertEquals(8, results.get(0).value, 0.01F);
         assertEquals(new BytesRef("foobar"), results.get(0).payload);
 
         results = suggester.lookup(TestUtil.stringToCharSequence("pen", random()), 10, true, doHighlight);
@@ -308,7 +310,7 @@ public class AnalyzingInfixSuggesterTest extends LuceneTestCase {
         if (doHighlight) {
           assertEquals("a <b>pen</b>ny saved is a <b>pen</b>ny earned", results.get(0).highlightKey);
         }
-        assertEquals(10, results.get(0).value);
+        assertEquals(10, results.get(0).value, 0.01F);
         assertEquals(new BytesRef("foobaz"), results.get(0).payload);
 
         results = suggester.lookup(TestUtil.stringToCharSequence("p", random()), 10, true, doHighlight);
@@ -317,7 +319,7 @@ public class AnalyzingInfixSuggesterTest extends LuceneTestCase {
         if (doHighlight) {
           assertEquals("a <b>p</b>enny saved is a <b>p</b>enny earned", results.get(0).highlightKey);
         }
-        assertEquals(10, results.get(0).value);
+        assertEquals(10, results.get(0).value, 0.01F);
         assertEquals(new BytesRef("foobaz"), results.get(0).payload);
       }
 
@@ -331,7 +333,7 @@ public class AnalyzingInfixSuggesterTest extends LuceneTestCase {
 
   public void testHighlight() throws Exception {
     Input keys[] = new Input[] {
-      new Input("a penny saved is a penny earned", 10, new BytesRef("foobaz")),
+        new Input("a penny saved is a penny earned", 10L, new BytesRef("foobaz")),
     };
 
     Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);
@@ -347,7 +349,7 @@ public class AnalyzingInfixSuggesterTest extends LuceneTestCase {
 
   public void testHighlightCaseChange() throws Exception {
     Input keys[] = new Input[] {
-      new Input("a Penny saved is a penny earned", 10, new BytesRef("foobaz")),
+        new Input("a Penny saved is a penny earned", 10L, new BytesRef("foobaz")),
     };
 
     Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true);
@@ -380,7 +382,7 @@ public class AnalyzingInfixSuggesterTest extends LuceneTestCase {
 
   public void testDoubleClose() throws Exception {
     Input keys[] = new Input[] {
-      new Input("a penny saved is a penny earned", 10, new BytesRef("foobaz")),
+        new Input("a penny saved is a penny earned", 10L, new BytesRef("foobaz")),
     };
 
     Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);
@@ -414,7 +416,7 @@ public class AnalyzingInfixSuggesterTest extends LuceneTestCase {
     AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(newDirectory(), indexAnalyzer, queryAnalyzer, 3, false);
 
     Input keys[] = new Input[] {
-      new Input("a bob for apples", 10, new BytesRef("foobaz")),
+        new Input("a bob for apples", 10L, new BytesRef("foobaz")),
     };
 
     suggester.build(new InputArrayIterator(keys));
@@ -430,40 +432,40 @@ public class AnalyzingInfixSuggesterTest extends LuceneTestCase {
     Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);
     AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(newDirectory(), a, a, 3, false);
     suggester.build(new InputArrayIterator(new Input[0]));
-    suggester.add(new BytesRef("a penny saved is a penny earned"), null, 10, new BytesRef("foobaz"));
-    suggester.add(new BytesRef("lend me your ear"), null, 8, new BytesRef("foobar"));
+    suggester.add(new BytesRef("a penny saved is a penny earned"), null, 10L, new BytesRef("foobaz"));
+    suggester.add(new BytesRef("lend me your ear"), null, 8L, new BytesRef("foobar"));
     suggester.refresh();
     List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence("ear", random()), 10, true, true);
     assertEquals(2, results.size());
     assertEquals("a penny saved is a penny earned", results.get(0).key);
     assertEquals("a penny saved is a penny <b>ear</b>ned", results.get(0).highlightKey);
-    assertEquals(10, results.get(0).value);
+    assertEquals(10, results.get(0).value, 0.01F);
     assertEquals(new BytesRef("foobaz"), results.get(0).payload);
 
     assertEquals("lend me your ear", results.get(1).key);
     assertEquals("lend me your <b>ear</b>", results.get(1).highlightKey);
-    assertEquals(8, results.get(1).value);
+    assertEquals(8, results.get(1).value, 0.01F);
     assertEquals(new BytesRef("foobar"), results.get(1).payload);
 
     results = suggester.lookup(TestUtil.stringToCharSequence("ear ", random()), 10, true, true);
     assertEquals(1, results.size());
     assertEquals("lend me your ear", results.get(0).key);
     assertEquals("lend me your <b>ear</b>", results.get(0).highlightKey);
-    assertEquals(8, results.get(0).value);
+    assertEquals(8, results.get(0).value, 0.01F);
     assertEquals(new BytesRef("foobar"), results.get(0).payload);
 
     results = suggester.lookup(TestUtil.stringToCharSequence("pen", random()), 10, true, true);
     assertEquals(1, results.size());
     assertEquals("a penny saved is a penny earned", results.get(0).key);
     assertEquals("a <b>pen</b>ny saved is a <b>pen</b>ny earned", results.get(0).highlightKey);
-    assertEquals(10, results.get(0).value);
+    assertEquals(10, results.get(0).value, 0.01F);
     assertEquals(new BytesRef("foobaz"), results.get(0).payload);
 
     results = suggester.lookup(TestUtil.stringToCharSequence("p", random()), 10, true, true);
     assertEquals(1, results.size());
     assertEquals("a penny saved is a penny earned", results.get(0).key);
     assertEquals("a <b>p</b>enny saved is a <b>p</b>enny earned", results.get(0).highlightKey);
-    assertEquals(10, results.get(0).value);
+    assertEquals(10, results.get(0).value, 0.01F);
     assertEquals(new BytesRef("foobaz"), results.get(0).payload);
 
     suggester.close();
@@ -474,14 +476,14 @@ public class AnalyzingInfixSuggesterTest extends LuceneTestCase {
     Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);
     AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(newDirectory(), a, a, 3, false);
     suggester.build(new InputArrayIterator(new Input[0]));
-    suggester.add(new BytesRef("the pen is pretty"), null, 10, new BytesRef("foobaz"));
+    suggester.add(new BytesRef("the pen is pretty"), null, 10L, new BytesRef("foobaz"));
     suggester.refresh();
 
     List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence("pen p", random()), 10, true, true);
     assertEquals(1, results.size());
     assertEquals("the pen is pretty", results.get(0).key);
     assertEquals("the <b>pen</b> is <b>p</b>retty", results.get(0).highlightKey);
-    assertEquals(10, results.get(0).value);
+    assertEquals(10, results.get(0).value, 0.01F);
     assertEquals(new BytesRef("foobaz"), results.get(0).payload);
     suggester.close();
     a.close();
@@ -738,7 +740,7 @@ public class AnalyzingInfixSuggesterTest extends LuceneTestCase {
             } else {
               assertEquals(expected.get(i).term.utf8ToString(), actual.get(i).key);
             }
-            assertEquals(expected.get(i).v, actual.get(i).value);
+            assertEquals(toIntExact(expected.get(i).v), actual.get(i).value, 0.01F);
             assertEquals(expected.get(i).payload, actual.get(i).payload);
           }
         } else {
@@ -797,7 +799,7 @@ public class AnalyzingInfixSuggesterTest extends LuceneTestCase {
 
   public void testBasicNRT() throws Exception {
     Input keys[] = new Input[] {
-      new Input("lend me your ear", 8, new BytesRef("foobar")),
+        new Input("lend me your ear", 8L, new BytesRef("foobar")),
     };
 
     Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);
@@ -808,11 +810,11 @@ public class AnalyzingInfixSuggesterTest extends LuceneTestCase {
     assertEquals(1, results.size());
     assertEquals("lend me your ear", results.get(0).key);
     assertEquals("lend me your <b>ear</b>", results.get(0).highlightKey);
-    assertEquals(8, results.get(0).value);
+    assertEquals(8, results.get(0).value, 0.01F);
     assertEquals(new BytesRef("foobar"), results.get(0).payload);
 
     // Add a new suggestion:
-    suggester.add(new BytesRef("a penny saved is a penny earned"), null, 10, new BytesRef("foobaz"));
+    suggester.add(new BytesRef("a penny saved is a penny earned"), null, 10L, new BytesRef("foobaz"));
 
     // Must refresh to see any newly added suggestions:
     suggester.refresh();
@@ -821,37 +823,37 @@ public class AnalyzingInfixSuggesterTest extends LuceneTestCase {
     assertEquals(2, results.size());
     assertEquals("a penny saved is a penny earned", results.get(0).key);
     assertEquals("a penny saved is a penny <b>ear</b>ned", results.get(0).highlightKey);
-    assertEquals(10, results.get(0).value);
+    assertEquals(10, results.get(0).value, 0.01F);
     assertEquals(new BytesRef("foobaz"), results.get(0).payload);
 
     assertEquals("lend me your ear", results.get(1).key);
     assertEquals("lend me your <b>ear</b>", results.get(1).highlightKey);
-    assertEquals(8, results.get(1).value);
+    assertEquals(8, results.get(1).value, 0.01F);
     assertEquals(new BytesRef("foobar"), results.get(1).payload);
 
     results = suggester.lookup(TestUtil.stringToCharSequence("ear ", random()), 10, true, true);
     assertEquals(1, results.size());
     assertEquals("lend me your ear", results.get(0).key);
     assertEquals("lend me your <b>ear</b>", results.get(0).highlightKey);
-    assertEquals(8, results.get(0).value);
+    assertEquals(8, results.get(0).value, 0.01F);
     assertEquals(new BytesRef("foobar"), results.get(0).payload);
 
     results = suggester.lookup(TestUtil.stringToCharSequence("pen", random()), 10, true, true);
     assertEquals(1, results.size());
     assertEquals("a penny saved is a penny earned", results.get(0).key);
     assertEquals("a <b>pen</b>ny saved is a <b>pen</b>ny earned", results.get(0).highlightKey);
-    assertEquals(10, results.get(0).value);
+    assertEquals(10, results.get(0).value, 0.01F);
     assertEquals(new BytesRef("foobaz"), results.get(0).payload);
 
     results = suggester.lookup(TestUtil.stringToCharSequence("p", random()), 10, true, true);
     assertEquals(1, results.size());
     assertEquals("a penny saved is a penny earned", results.get(0).key);
     assertEquals("a <b>p</b>enny saved is a <b>p</b>enny earned", results.get(0).highlightKey);
-    assertEquals(10, results.get(0).value);
+    assertEquals(10, results.get(0).value, 0.01F);
     assertEquals(new BytesRef("foobaz"), results.get(0).payload);
 
     // Change the weight:
-    suggester.update(new BytesRef("lend me your ear"), null, 12, new BytesRef("foobox"));
+    suggester.update(new BytesRef("lend me your ear"), null, 12L, new BytesRef("foobox"));
 
     // Must refresh to see any newly added suggestions:
     suggester.refresh();
@@ -860,11 +862,11 @@ public class AnalyzingInfixSuggesterTest extends LuceneTestCase {
     assertEquals(2, results.size());
     assertEquals("lend me your ear", results.get(0).key);
     assertEquals("lend me your <b>ear</b>", results.get(0).highlightKey);
-    assertEquals(12, results.get(0).value);
+    assertEquals(12, results.get(0).value, 0.01F);
     assertEquals(new BytesRef("foobox"), results.get(0).payload);
     assertEquals("a penny saved is a penny earned", results.get(1).key);
     assertEquals("a penny saved is a penny <b>ear</b>ned", results.get(1).highlightKey);
-    assertEquals(10, results.get(1).value);
+    assertEquals(10, results.get(1).value, 0.01F);
     assertEquals(new BytesRef("foobaz"), results.get(1).payload);
     suggester.close();
     a.close();
@@ -922,7 +924,7 @@ public class AnalyzingInfixSuggesterTest extends LuceneTestCase {
     @Override
     public void run() {
       try {
-        suggester.add(new BytesRef(key), null, 10, null);
+        suggester.add(new BytesRef(key), null, 10L, null);
       } catch (IOException e) {
         fail("Could not build suggest dictionary correctly");
       }
@@ -973,7 +975,7 @@ public class AnalyzingInfixSuggesterTest extends LuceneTestCase {
       LookupResult result = results.get(0);
       assertEquals("a penny saved is a penny earned", result.key);
       assertEquals("a penny saved is a penny <b>ear</b>ned", result.highlightKey);
-      assertEquals(10, result.value);
+      assertEquals(10, result.value, 0.01F);
       assertEquals(new BytesRef("foobaz"), result.payload);
       assertNotNull(result.contexts);
       assertEquals(2, result.contexts.size());
@@ -983,7 +985,7 @@ public class AnalyzingInfixSuggesterTest extends LuceneTestCase {
       result = results.get(1);
       assertEquals("lend me your ear", result.key);
       assertEquals("lend me your <b>ear</b>", result.highlightKey);
-      assertEquals(8, result.value);
+      assertEquals(8, result.value, 0.01F);
       assertEquals(new BytesRef("foobar"), result.payload);
       assertNotNull(result.contexts);
       assertEquals(2, result.contexts.size());
@@ -997,7 +999,7 @@ public class AnalyzingInfixSuggesterTest extends LuceneTestCase {
       result = results.get(0);
       assertEquals("a penny saved is a penny earned", result.key);
       assertEquals("a penny saved is a penny <b>ear</b>ned", result.highlightKey);
-      assertEquals(10, result.value);
+      assertEquals(10, result.value, 0.01F);
       assertEquals(new BytesRef("foobaz"), result.payload);
       assertNotNull(result.contexts);
       assertEquals(2, result.contexts.size());
@@ -1007,7 +1009,7 @@ public class AnalyzingInfixSuggesterTest extends LuceneTestCase {
       result = results.get(1);
       assertEquals("lend me your ear", result.key);
       assertEquals("lend me your <b>ear</b>", result.highlightKey);
-      assertEquals(8, result.value);
+      assertEquals(8, result.value, 0.01F);
       assertEquals(new BytesRef("foobar"), result.payload);
       assertNotNull(result.contexts);
       assertEquals(2, result.contexts.size());
@@ -1021,7 +1023,7 @@ public class AnalyzingInfixSuggesterTest extends LuceneTestCase {
       result = results.get(0);
       assertEquals("lend me your ear", result.key);
       assertEquals("lend me your <b>ear</b>", result.highlightKey);
-      assertEquals(8, result.value);
+      assertEquals(8, result.value, 0.01F);
       assertEquals(new BytesRef("foobar"), result.payload);
       assertNotNull(result.contexts);
       assertEquals(2, result.contexts.size());
@@ -1043,7 +1045,7 @@ public class AnalyzingInfixSuggesterTest extends LuceneTestCase {
       result = results.get(0);
       assertEquals("a penny saved is a penny earned", result.key);
       assertEquals("a penny saved is a penny <b>ear</b>ned", result.highlightKey);
-      assertEquals(10, result.value);
+      assertEquals(10, result.value, 0.01F);
       assertEquals(new BytesRef("foobaz"), result.payload);
       assertNotNull(result.contexts);
       assertEquals(2, result.contexts.size());
@@ -1057,7 +1059,7 @@ public class AnalyzingInfixSuggesterTest extends LuceneTestCase {
       result = results.get(0);
       assertEquals("a penny saved is a penny earned", result.key);
       assertEquals("a penny saved is a penny <b>ear</b>ned", result.highlightKey);
-      assertEquals(10, result.value);
+      assertEquals(10, result.value, 0.01F);
       assertEquals(new BytesRef("foobaz"), result.payload);
       assertNotNull(result.contexts);
       assertEquals(2, result.contexts.size());
@@ -1067,7 +1069,7 @@ public class AnalyzingInfixSuggesterTest extends LuceneTestCase {
       result = results.get(1);
       assertEquals("lend me your ear", result.key);
       assertEquals("lend me your <b>ear</b>", result.highlightKey);
-      assertEquals(8, result.value);
+      assertEquals(8, result.value, 0.01F);
       assertEquals(new BytesRef("foobar"), result.payload);
       assertNotNull(result.contexts);
       assertEquals(2, result.contexts.size());
@@ -1081,7 +1083,7 @@ public class AnalyzingInfixSuggesterTest extends LuceneTestCase {
       result = results.get(0);
       assertEquals("a penny saved is a penny earned", result.key);
       assertEquals("a penny saved is a penny <b>ear</b>ned", result.highlightKey);
-      assertEquals(10, result.value);
+      assertEquals(10, result.value, 0.01F);
       assertEquals(new BytesRef("foobaz"), result.payload);
       assertNotNull(result.contexts);
       assertEquals(2, result.contexts.size());
@@ -1091,7 +1093,7 @@ public class AnalyzingInfixSuggesterTest extends LuceneTestCase {
       result = results.get(1);
       assertEquals("lend me your ear", result.key);
       assertEquals("lend me your <b>ear</b>", result.highlightKey);
-      assertEquals(8, result.value);
+      assertEquals(8, result.value, 0.01F);
       assertEquals(new BytesRef("foobar"), result.payload);
       assertNotNull(result.contexts);
       assertEquals(2, result.contexts.size());
@@ -1108,7 +1110,7 @@ public class AnalyzingInfixSuggesterTest extends LuceneTestCase {
       result = results.get(0);
       assertEquals("lend me your ear", result.key);
       assertEquals("lend me your <b>ear</b>", result.highlightKey);
-      assertEquals(8, result.value);
+      assertEquals(8, result.value, 0.01F);
       assertEquals(new BytesRef("foobar"), result.payload);
       assertNotNull(result.contexts);
       assertEquals(2, result.contexts.size());
@@ -1139,7 +1141,7 @@ public class AnalyzingInfixSuggesterTest extends LuceneTestCase {
       result = results.get(0);
       assertEquals("a penny saved is a penny earned", result.key);
       assertEquals("a penny saved is a penny <b>ear</b>ned", result.highlightKey);
-      assertEquals(10, result.value);
+      assertEquals(10, result.value, 0.01F);
       assertEquals(new BytesRef("foobaz"), result.payload);
       assertNotNull(result.contexts);
       assertEquals(2, result.contexts.size());
@@ -1149,7 +1151,7 @@ public class AnalyzingInfixSuggesterTest extends LuceneTestCase {
       result = results.get(1);
       assertEquals("lend me your ear", result.key);
       assertEquals("lend me your <b>ear</b>", result.highlightKey);
-      assertEquals(8, result.value);
+      assertEquals(8, result.value, 0.01F);
       assertEquals(new BytesRef("foobar"), result.payload);
       assertNotNull(result.contexts);
       assertEquals(2, result.contexts.size());
@@ -1166,7 +1168,7 @@ public class AnalyzingInfixSuggesterTest extends LuceneTestCase {
       result = results.get(0);
       assertEquals("a penny saved is a penny earned", result.key);
       assertEquals("a penny saved is a penny <b>ear</b>ned", result.highlightKey);
-      assertEquals(10, result.value);
+      assertEquals(10, result.value, 0.01F);
       assertEquals(new BytesRef("foobaz"), result.payload);
       assertNotNull(result.contexts);
       assertEquals(2, result.contexts.size());
@@ -1240,7 +1242,7 @@ public class AnalyzingInfixSuggesterTest extends LuceneTestCase {
       LookupResult result = results.get(0);
       assertEquals("a penny saved is a penny earned", result.key);
       assertEquals("a penny saved is a penny <b>ear</b>ned", result.highlightKey);
-      assertEquals(10, result.value);
+      assertEquals(10, result.value, 0.01F);
       assertEquals(new BytesRef("foobaz"), result.payload);
       assertNotNull(result.contexts);
       assertEquals(2, result.contexts.size());
@@ -1250,7 +1252,7 @@ public class AnalyzingInfixSuggesterTest extends LuceneTestCase {
       result = results.get(1);
       assertEquals("lend me your ear", result.key);
       assertEquals("lend me your <b>ear</b>", result.highlightKey);
-      assertEquals(8, result.value);
+      assertEquals(8, result.value, 0.01F);
       assertEquals(new BytesRef("foobar"), result.payload);
       assertNotNull(result.contexts);
       assertEquals(2, result.contexts.size());
@@ -1280,7 +1282,7 @@ public class AnalyzingInfixSuggesterTest extends LuceneTestCase {
     LookupResult result = results.get(0);
     assertEquals("a penny saved is a penny earned", result.key);
     assertEquals("a penny saved is a penny <b>ear</b>ned", result.highlightKey);
-    assertEquals(10, result.value);
+    assertEquals(10, result.value, 0.01F);
     assertEquals(new BytesRef("foobaz"), result.payload);
     assertNotNull(result.contexts);
     assertEquals(2, result.contexts.size());
@@ -1290,7 +1292,7 @@ public class AnalyzingInfixSuggesterTest extends LuceneTestCase {
     result = results.get(1);
     assertEquals("lend me your ear", result.key);
     assertEquals("lend me your <b>ear</b>", result.highlightKey);
-    assertEquals(8, result.value);
+    assertEquals(8, result.value, 0.01F);
     assertEquals(new BytesRef("foobar"), result.payload);
     assertNotNull(result.contexts);
     assertEquals(2, result.contexts.size());
@@ -1304,7 +1306,7 @@ public class AnalyzingInfixSuggesterTest extends LuceneTestCase {
     result = results.get(0);
     assertEquals("a penny saved is a penny earned", result.key);
     assertEquals("a penny saved is a penny <b>ear</b>ned", result.highlightKey);
-    assertEquals(10, result.value);
+    assertEquals(10, result.value, 0.01F);
     assertEquals(new BytesRef("foobaz"), result.payload);
     assertNotNull(result.contexts);
     assertEquals(2, result.contexts.size());
@@ -1314,7 +1316,7 @@ public class AnalyzingInfixSuggesterTest extends LuceneTestCase {
     result = results.get(1);
     assertEquals("lend me your ear", result.key);
     assertEquals("lend me your <b>ear</b>", result.highlightKey);
-    assertEquals(8, result.value);
+    assertEquals(8, result.value, 0.01F);
     assertEquals(new BytesRef("foobar"), result.payload);
     assertNotNull(result.contexts);
     assertEquals(2, result.contexts.size());
@@ -1328,7 +1330,7 @@ public class AnalyzingInfixSuggesterTest extends LuceneTestCase {
     result = results.get(0);
     assertEquals("lend me your ear", result.key);
     assertEquals("<b>len</b>d me your ear", result.highlightKey);
-    assertEquals(8, result.value);
+    assertEquals(8, result.value, 0.01F);
     assertEquals(new BytesRef("foobar"), result.payload);
     assertNotNull(result.contexts);
     assertEquals(2, result.contexts.size());
@@ -1407,8 +1409,8 @@ public class AnalyzingInfixSuggesterTest extends LuceneTestCase {
   }
 
   private Input sharedInputs[] = new Input[] {
-      new Input("lend me your ear", 8, new BytesRef("foobar")),
-      new Input("a penny saved is a penny earned", 10, new BytesRef("foobaz")),
+      new Input("lend me your ear", 8L, new BytesRef("foobar")),
+      new Input("a penny saved is a penny earned", 10L, new BytesRef("foobaz")),
   };
 
   private interface SuggesterOperation {
diff --git a/lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest.java b/lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest.java
index 7f3b8b4df9..b1698968d7 100644
--- a/lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest.java
+++ b/lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest.java
@@ -62,13 +62,13 @@ public class AnalyzingSuggesterTest extends LuceneTestCase {
   /** this is basically the WFST test ported to KeywordAnalyzer. so it acts the same */
   public void testKeyword() throws Exception {
     Iterable<Input> keys = shuffle(
-        new Input("foo", 50),
-        new Input("bar", 10),
-        new Input("barbar", 10),
-        new Input("barbar", 12),
-        new Input("barbara", 6),
-        new Input("bar", 5),
-        new Input("barbara", 1)
+        new Input("foo", 50L),
+        new Input("bar", 10L),
+        new Input("barbar", 10L),
+        new Input("barbar", 12L),
+        new Input("barbara", 6L),
+        new Input("bar", 5L),
+        new Input("barbara", 1L)
     );
 
     Directory tempDir = getDirectory();
@@ -113,12 +113,12 @@ public class AnalyzingSuggesterTest extends LuceneTestCase {
   
   public void testKeywordWithPayloads() throws Exception {
     Iterable<Input> keys = shuffle(
-      new Input("foo", 50, new BytesRef("hello")),
-      new Input("bar", 10, new BytesRef("goodbye")),
-      new Input("barbar", 12, new BytesRef("thank you")),
-      new Input("bar", 9, new BytesRef("should be deduplicated")),
-      new Input("bar", 8, new BytesRef("should also be deduplicated")),
-      new Input("barbara", 6, new BytesRef("for all the fish")));
+        new Input("foo", 50L, new BytesRef("hello")),
+        new Input("bar", 10L, new BytesRef("goodbye")),
+        new Input("barbar", 12L, new BytesRef("thank you")),
+        new Input("bar", 9L, new BytesRef("should be deduplicated")),
+        new Input("bar", 8L, new BytesRef("should also be deduplicated")),
+        new Input("barbara", 6L, new BytesRef("for all the fish")));
     
     Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);
     Directory tempDir = getDirectory();
@@ -168,19 +168,19 @@ public class AnalyzingSuggesterTest extends LuceneTestCase {
   
   public void testRandomRealisticKeys() throws IOException {
     LineFileDocs lineFile = new LineFileDocs(random());
-    Map<String, Long> mapping = new HashMap<>();
+    Map<String, Double> mapping = new HashMap<>();
     List<Input> keys = new ArrayList<>();
     
     int howMany = atLeast(100); // this might bring up duplicates
     for (int i = 0; i < howMany; i++) {
       Document nextDoc = lineFile.nextDoc();
       String title = nextDoc.getField("title").stringValue();
-      int randomWeight = random().nextInt(100);
+      long randomWeight = random().nextInt(100);
       int maxLen = Math.min(title.length(), 500);
       String prefix = title.substring(0, maxLen);
       keys.add(new Input(prefix, randomWeight));
       if (!mapping.containsKey(prefix) || mapping.get(prefix) < randomWeight) {
-        mapping.put(prefix, Long.valueOf(randomWeight));
+        mapping.put(prefix, Double.valueOf(randomWeight));
       }
     }
     Analyzer indexAnalyzer = new MockAnalyzer(random());
@@ -193,7 +193,7 @@ public class AnalyzingSuggesterTest extends LuceneTestCase {
     if (doPayloads) {
       List<Input> keysAndPayloads = new ArrayList<>();
       for (Input termFreq : keys) {
-        keysAndPayloads.add(new Input(termFreq.term, termFreq.v, new BytesRef(Long.toString(termFreq.v))));
+        keysAndPayloads.add(new Input(termFreq.term, termFreq.v, new BytesRef(Double.toString(termFreq.v))));
       }
       analyzingSuggester.build(new InputArrayIterator(keysAndPayloads));
     } else {
@@ -203,9 +203,9 @@ public class AnalyzingSuggesterTest extends LuceneTestCase {
     for (Input termFreq : keys) {
       List<LookupResult> lookup = analyzingSuggester.lookup(termFreq.term.utf8ToString(), false, keys.size());
       for (LookupResult lookupResult : lookup) {
-        assertEquals(mapping.get(lookupResult.key), Long.valueOf(lookupResult.value));
+        assertEquals(mapping.get(lookupResult.key), Double.valueOf(lookupResult.value));
         if (doPayloads) {
-          assertEquals(lookupResult.payload.utf8ToString(), Long.toString(lookupResult.value));
+          assertEquals(lookupResult.payload.utf8ToString(), Double.toString(lookupResult.value));
         } else {
           assertNull(lookupResult.payload);
         }
@@ -222,7 +222,7 @@ public class AnalyzingSuggesterTest extends LuceneTestCase {
   public void testStandard() throws Exception {
     final String input = "the ghost of christmas past the"; // trailing stopword there just to perturb possible bugs
     Input keys[] = new Input[] {
-        new Input(input, 50),
+        new Input(input, 50L),
     };
 
     Directory tempDir = getDirectory();
@@ -279,8 +279,8 @@ public class AnalyzingSuggesterTest extends LuceneTestCase {
 
   public void testNoSeps() throws Exception {
     Input[] keys = new Input[] {
-      new Input("ab cd", 0),
-      new Input("abcd", 1),
+        new Input("ab cd", 0L),
+        new Input("abcd", 1L),
     };
 
     int options = 0;
@@ -351,8 +351,8 @@ public class AnalyzingSuggesterTest extends LuceneTestCase {
     };
 
     Input keys[] = new Input[] {
-        new Input("wifi network is slow", 50),
-        new Input("wi fi network is fast", 10),
+        new Input("wifi network is slow", 50L),
+        new Input("wi fi network is fast", 10L),
     };
     //AnalyzingSuggester suggester = new AnalyzingSuggester(analyzer, AnalyzingSuggester.EXACT_FIRST, 256, -1);
     Directory tempDir = getDirectory();
@@ -364,9 +364,9 @@ public class AnalyzingSuggesterTest extends LuceneTestCase {
     }
     assertEquals(2, results.size());
     assertEquals("wifi network is slow", results.get(0).key);
-    assertEquals(50, results.get(0).value);
+    assertEquals(50, results.get(0).value, 0.01F);
     assertEquals("wi fi network is fast", results.get(1).key);
-    assertEquals(10, results.get(1).value);
+    assertEquals(10, results.get(1).value, 0.01F);
     IOUtils.close(analyzer, tempDir);
   }
 
@@ -419,8 +419,8 @@ public class AnalyzingSuggesterTest extends LuceneTestCase {
     };
 
     Input keys[] = new Input[] {
-        new Input("ab xc", 50),
-        new Input("ba xd", 50),
+        new Input("ab xc", 50L),
+        new Input("ba xd", 50L),
     };
     Directory tempDir = getDirectory();
     AnalyzingSuggester suggester = new AnalyzingSuggester(tempDir, "suggest", analyzer);
@@ -501,10 +501,10 @@ public class AnalyzingSuggesterTest extends LuceneTestCase {
     Directory tempDir = getDirectory();
     AnalyzingSuggester suggester = new AnalyzingSuggester(tempDir, "suggest", a, a, options, 256, -1, true);
     suggester.build(new InputArrayIterator(new Input[] {
-          new Input("x y", 1),
-          new Input("x y z", 3),
-          new Input("x", 2),
-          new Input("z z z", 20),
+        new Input("x y", 1L),
+        new Input("x y z", 3L),
+        new Input("x", 2L),
+        new Input("z z z", 20L),
         }));
 
     //System.out.println("ALL: " + suggester.lookup("x y", false, 6));
@@ -516,19 +516,19 @@ public class AnalyzingSuggesterTest extends LuceneTestCase {
       assertEquals(Math.min(topN, 4), results.size());
 
       assertEquals("x y", results.get(0).key);
-      assertEquals(1, results.get(0).value);
+      assertEquals(1, results.get(0).value, 0.01F);
 
       if (topN > 1) {
         assertEquals("z z z", results.get(1).key);
-        assertEquals(20, results.get(1).value);
+        assertEquals(20, results.get(1).value, 0.01F);
 
         if (topN > 2) {
           assertEquals("x y z", results.get(2).key);
-          assertEquals(3, results.get(2).value);
+          assertEquals(3, results.get(2).value, 0.01F);
 
           if (topN > 3) {
             assertEquals("x", results.get(3).key);
-            assertEquals(2, results.get(3).value);
+            assertEquals(2, results.get(3).value, 0.01F);
           }
         }
       }
@@ -543,10 +543,10 @@ public class AnalyzingSuggesterTest extends LuceneTestCase {
     AnalyzingSuggester suggester = new AnalyzingSuggester(tempDir, "suggest", a, a, AnalyzingSuggester.PRESERVE_SEP, 256, -1, true);
 
     suggester.build(new InputArrayIterator(new Input[] {
-          new Input("x y", 1),
-          new Input("x y z", 3),
-          new Input("x", 2),
-          new Input("z z z", 20),
+        new Input("x y", 1L),
+        new Input("x y z", 3L),
+        new Input("x", 2L),
+        new Input("z z z", 20L),
         }));
 
     for(int topN=1;topN<6;topN++) {
@@ -555,19 +555,19 @@ public class AnalyzingSuggesterTest extends LuceneTestCase {
       assertEquals(Math.min(topN, 4), results.size());
 
       assertEquals("z z z", results.get(0).key);
-      assertEquals(20, results.get(0).value);
+      assertEquals(20, results.get(0).value, 0.01F);
 
       if (topN > 1) {
         assertEquals("x y z", results.get(1).key);
-        assertEquals(3, results.get(1).value);
+        assertEquals(3, results.get(1).value, 0.01F);
 
         if (topN > 2) {
           assertEquals("x", results.get(2).key);
-          assertEquals(2, results.get(2).value);
+          assertEquals(2, results.get(2).value, 0.01F);
           
           if (topN > 3) {
             assertEquals("x y", results.get(3).key);
-            assertEquals(1, results.get(3).value);
+            assertEquals(1, results.get(3).value, 0.01F);
           }
         }
       }
@@ -767,7 +767,7 @@ public class AnalyzingSuggesterTest extends LuceneTestCase {
         allPrefixes.add(key.substring(0, j));
       }
       // we can probably do Integer.MAX_VALUE here, but why worry.
-      int weight = random().nextInt(1<<24);
+      long weight = random().nextInt(1 << 24);
       BytesRef payload;
       if (doPayloads) {
         byte[] bytes = new byte[random().nextInt(10)];
@@ -919,15 +919,15 @@ public class AnalyzingSuggesterTest extends LuceneTestCase {
     Analyzer a = new MockAnalyzer(random());
     Directory tempDir = getDirectory();
     AnalyzingSuggester suggester = new AnalyzingSuggester(tempDir, "suggest", a, a, 0, 2, -1, true);
-    suggester.build(new InputArrayIterator(shuffle(new Input("a", 40),
-        new Input("a ", 50), new Input(" a", 60))));
+    suggester.build(new InputArrayIterator(shuffle(new Input("a", 40L),
+        new Input("a ", 50L), new Input(" a", 60L))));
 
     List<LookupResult> results = suggester.lookup("a", false, 5);
     assertEquals(2, results.size());
     assertEquals(" a", results.get(0).key);
-    assertEquals(60, results.get(0).value);
+    assertEquals(60, results.get(0).value, 0.01F);
     assertEquals("a ", results.get(1).key);
-    assertEquals(50, results.get(1).value);
+    assertEquals(50, results.get(1).value, 0.01F);
     IOUtils.close(a, tempDir);
   }
 
@@ -937,10 +937,10 @@ public class AnalyzingSuggesterTest extends LuceneTestCase {
     AnalyzingSuggester suggester = new AnalyzingSuggester(tempDir, "suggest", a, a, AnalyzingSuggester.EXACT_FIRST, 256, -1, true);
 
     suggester.build(new InputArrayIterator(new Input[] {
-          new Input("a", 2),
-          new Input("a b c", 3),
-          new Input("a c a", 1),
-          new Input("a c b", 1),
+        new Input("a", 2L),
+        new Input("a b c", 3L),
+        new Input("a c a", 1L),
+        new Input("a c b", 1L),
         }));
 
     suggester.lookup("a", false, 4);
@@ -955,20 +955,20 @@ public class AnalyzingSuggesterTest extends LuceneTestCase {
     AnalyzingSuggester suggester = new AnalyzingSuggester(tempDir, "suggest", a, a, AnalyzingSuggester.EXACT_FIRST, 256, -1, true);
 
     suggester.build(new InputArrayIterator(new Input[] {
-          new Input("a", 5),
-          new Input("a b", 3),
-          new Input("a c", 4),
+        new Input("a", 5L),
+        new Input("a b", 3L),
+        new Input("a c", 4L),
         }));
 
     assertEquals(3, suggester.getCount());
     List<LookupResult> results = suggester.lookup("a", false, 3);
     assertEquals(3, results.size());
     assertEquals("a", results.get(0).key);
-    assertEquals(5, results.get(0).value);
+    assertEquals(5, results.get(0).value, 0.01F);
     assertEquals("a c", results.get(1).key);
-    assertEquals(4, results.get(1).value);
+    assertEquals(4, results.get(1).value, 0.01F);
     assertEquals("a b", results.get(2).key);
-    assertEquals(3, results.get(2).value);
+    assertEquals(3, results.get(2).value, 0.01F);
 
     // Try again after save/load:
     Path tmpDir = createTempDir("AnalyzingSuggesterTest");
@@ -987,11 +987,11 @@ public class AnalyzingSuggesterTest extends LuceneTestCase {
     results = suggester.lookup("a", false, 3);
     assertEquals(3, results.size());
     assertEquals("a", results.get(0).key);
-    assertEquals(5, results.get(0).value);
+    assertEquals(5, results.get(0).value, 0.01F);
     assertEquals("a c", results.get(1).key);
-    assertEquals(4, results.get(1).value);
+    assertEquals(4, results.get(1).value, 0.01F);
     assertEquals("a b", results.get(2).key);
-    assertEquals(3, results.get(2).value);
+    assertEquals(3, results.get(2).value, 0.01F);
     IOUtils.close(a, tempDir);
   }
 
@@ -1023,15 +1023,15 @@ public class AnalyzingSuggesterTest extends LuceneTestCase {
     AnalyzingSuggester suggester = new AnalyzingSuggester(tempDir, "suggest", a, a, 0, 256, -1, true);
 
     suggester.build(new InputArrayIterator(shuffle(
-          new Input("hambone", 6),
-          new Input("nellie", 5))));
+        new Input("hambone", 6L),
+        new Input("nellie", 5L))));
 
     List<LookupResult> results = suggester.lookup("nellie", false, 2);
     assertEquals(2, results.size());
     assertEquals("hambone", results.get(0).key);
-    assertEquals(6, results.get(0).value);
+    assertEquals(6, results.get(0).value, 0.01F);
     assertEquals("nellie", results.get(1).key);
-    assertEquals(5, results.get(1).value);
+    assertEquals(5, results.get(1).value, 0.01F);
 
     // Try again after save/load:
     Path tmpDir = createTempDir("AnalyzingSuggesterTest");
@@ -1049,9 +1049,9 @@ public class AnalyzingSuggesterTest extends LuceneTestCase {
     results = suggester.lookup("nellie", false, 2);
     assertEquals(2, results.size());
     assertEquals("hambone", results.get(0).key);
-    assertEquals(6, results.get(0).value);
+    assertEquals(6, results.get(0).value, 0.01F);
     assertEquals("nellie", results.get(1).key);
-    assertEquals(5, results.get(1).value);
+    assertEquals(5, results.get(1).value, 0.01F);
     IOUtils.close(a, tempDir);
   }
 
@@ -1093,16 +1093,16 @@ public class AnalyzingSuggesterTest extends LuceneTestCase {
     AnalyzingSuggester suggester = new AnalyzingSuggester(tempDir, "suggest", a, a, 0, 256, -1, true);
 
     suggester.build(new InputArrayIterator(new Input[] {
-          new Input("a", 6),
-          new Input("b", 5),
+        new Input("a", 6L),
+        new Input("b", 5L),
         }));
 
     List<LookupResult> results = suggester.lookup("a", false, 2);
     assertEquals(2, results.size());
     assertEquals("a", results.get(0).key);
-    assertEquals(6, results.get(0).value);
+    assertEquals(6, results.get(0).value, 0.01F);
     assertEquals("b", results.get(1).key);
-    assertEquals(5, results.get(1).value);
+    assertEquals(5, results.get(1).value, 0.01F);
 
     // Try again after save/load:
     Path tmpDir = createTempDir("AnalyzingSuggesterTest");
@@ -1120,9 +1120,9 @@ public class AnalyzingSuggesterTest extends LuceneTestCase {
     results = suggester.lookup("a", false, 2);
     assertEquals(2, results.size());
     assertEquals("a", results.get(0).key);
-    assertEquals(6, results.get(0).value);
+    assertEquals(6, results.get(0).value, 0.01F);
     assertEquals("b", results.get(1).key);
-    assertEquals(5, results.get(1).value);
+    assertEquals(5, results.get(1).value, 0.01F);
     IOUtils.close(a, tempDir);
   }
 
@@ -1156,7 +1156,7 @@ public class AnalyzingSuggesterTest extends LuceneTestCase {
     // make 50 inputs all with the same cost of 1, random strings
     Input[] inputs = new Input[100];
     for (int i = 0; i < inputs.length; i++) {
-      inputs[i] = new Input(TestUtil.randomSimpleString(random()), 1);
+      inputs[i] = new Input(TestUtil.randomSimpleString(random()), 1L);
     }
 
     suggester.build(new InputArrayIterator(inputs));
@@ -1227,8 +1227,8 @@ public class AnalyzingSuggesterTest extends LuceneTestCase {
     AnalyzingSuggester suggester = new AnalyzingSuggester(tempDir, "suggest", a, a, 0, 256, -1, true);
 
     suggester.build(new InputArrayIterator(new Input[] {
-          new Input("a a", 50),
-          new Input("a b", 50),
+        new Input("a a", 50L),
+        new Input("a b", 50L),
         }));
     
     IOUtils.close(a, tempDir);
@@ -1239,13 +1239,13 @@ public class AnalyzingSuggesterTest extends LuceneTestCase {
     Directory tempDir = getDirectory();
     AnalyzingSuggester suggester = new AnalyzingSuggester(tempDir, "suggest", a, a, AnalyzingSuggester.PRESERVE_SEP, 256, -1, true);
     suggester.build(new InputArrayIterator(new Input[] {
-          new Input("a a", 7),
-          new Input("a a", 7),
-          new Input("a c", 6),
-          new Input("a c", 3),
-          new Input("a b", 5),
+        new Input("a a", 7L),
+        new Input("a a", 7L),
+        new Input("a c", 6L),
+        new Input("a c", 3L),
+        new Input("a b", 5L),
         }));
-    assertEquals("[a a/7, a c/6, a b/5]", suggester.lookup("a", false, 3).toString());
+    assertEquals("[a a/7.0, a c/6.0, a b/5.0]", suggester.lookup("a", false, 3).toString());
     IOUtils.close(tempDir, a);
   }
 
@@ -1254,11 +1254,11 @@ public class AnalyzingSuggesterTest extends LuceneTestCase {
     Directory tempDir = getDirectory();
     AnalyzingSuggester suggester = new AnalyzingSuggester(tempDir, "suggest", a, a, AnalyzingSuggester.PRESERVE_SEP, 256, -1, true);
     suggester.build(new InputArrayIterator(new Input[] {
-          new Input("i love lucy", 7),
-          new Input("isla de muerta", 8),
+        new Input("i love lucy", 7L),
+        new Input("isla de muerta", 8L),
         }));
-    assertEquals("[isla de muerta/8, i love lucy/7]", suggester.lookup("i", false, 3).toString());
-    assertEquals("[i love lucy/7]", suggester.lookup("i ", false, 3).toString());
+    assertEquals("[isla de muerta/8.0, i love lucy/7.0]", suggester.lookup("i", false, 3).toString());
+    assertEquals("[i love lucy/7.0]", suggester.lookup("i ", false, 3).toString());
     IOUtils.close(a, tempDir);
   }
 
@@ -1288,8 +1288,8 @@ public class AnalyzingSuggesterTest extends LuceneTestCase {
 
     Directory tempDir = getDirectory();
     AnalyzingSuggester suggester = new AnalyzingSuggester(tempDir, "suggest", a, a, 0, 256, 1, true);
-    suggester.build(new InputArrayIterator(new Input[] {new Input("a", 1)}));
-    assertEquals("[a/1]", suggester.lookup("a", false, 1).toString());
+    suggester.build(new InputArrayIterator(new Input[]{new Input("a", 1L)}));
+    assertEquals("[a/1.0]", suggester.lookup("a", false, 1).toString());
     IOUtils.close(a, tempDir);
   }
   
@@ -1298,7 +1298,7 @@ public class AnalyzingSuggesterTest extends LuceneTestCase {
     Directory tempDir = getDirectory();
     AnalyzingSuggester suggester = new AnalyzingSuggester(tempDir, "suggest", a, a, 0, 256, -1, true);
     suggester.build(new InputArrayIterator(new Input[] {
-        new Input("а где Люси?", 7),
+        new Input("а где Люси?", 7L),
     }));
     expectThrows(IllegalArgumentException.class, () -> {
       suggester.lookup("а\u001E", false, 3);
@@ -1327,7 +1327,7 @@ public class AnalyzingSuggesterTest extends LuceneTestCase {
     String bigString = TestUtil.randomSimpleString(random(), 30000, 30000);
     try {
       suggester.build(new InputArrayIterator(new Input[] {
-            new Input(bigString, 7)}));
+          new Input(bigString, 7L)}));
       fail("did not hit expected exception");
     } catch (IllegalArgumentException iae) {
       // expected
diff --git a/lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggesterTest.java b/lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggesterTest.java
index ace4467895..5880d226d6 100644
--- a/lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggesterTest.java
+++ b/lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggesterTest.java
@@ -44,30 +44,80 @@ public class BlendedInfixSuggesterTest extends LuceneTestCase {
    * of the matching term.
    */
   public void testBlendedSort() throws IOException {
+    BytesRef payload = new BytesRef("star");
+    Input keys[] = new Input[]{
+        new Input("star wars: episode v - the empire strikes back", 8L, payload)
+    };
+    BlendedInfixSuggester suggester = getBlendedInfixSuggester(keys);
+
+    assertSuggestionsRanking(payload, suggester);
+  }
 
+  /**
+   * Test to validate the suggestions ranking according to the position coefficient,
+   * even if the weight associated to the suggestion is unitary.
+   */
+  public void testBlendedSort_fieldWeightUnitary_shouldRankSuggestionsByPositionMatch() throws IOException {
     BytesRef payload = new BytesRef("star");
+    Input keys[] = new Input[]{
+        new Input("star wars: episode v - the empire strikes back", 1L, payload)
+    };
+    BlendedInfixSuggester suggester = getBlendedInfixSuggester(keys);
+
+    assertSuggestionsRanking(payload, suggester);
+  }
 
+  /**
+   * Test to validate the suggestions ranking according to the position coefficient,
+   * even if the weight associated to the suggestion is zero.
+   */
+  public void testBlendedSort_fieldWeightNull_shouldIgnoreWeightInSuggestionScore() throws IOException {
+    BytesRef payload = new BytesRef("star");
     Input keys[] = new Input[]{
-        new Input("star wars: episode v - the empire strikes back", 8, payload)
+        new Input("star wars: episode v - the empire strikes back", null, payload)
     };
+    BlendedInfixSuggester suggester = getBlendedInfixSuggester(keys);
 
-    Path tempDir = createTempDir("BlendedInfixSuggesterTest");
+    assertSuggestionsRanking(payload, suggester);
+  }
 
-    Analyzer a = new StandardAnalyzer(CharArraySet.EMPTY_SET);
-    BlendedInfixSuggester suggester = new BlendedInfixSuggester(newFSDirectory(tempDir), a, a,
-                                                                AnalyzingInfixSuggester.DEFAULT_MIN_PREFIX_CHARS,
-                                                                BlendedInfixSuggester.BlenderType.POSITION_LINEAR,
-                                                                BlendedInfixSuggester.DEFAULT_NUM_FACTOR, false);
-    suggester.build(new InputArrayIterator(keys));
+  /**
+   * Test to validate the suggestions ranking according to the position coefficient,
+   * even if the weight associated to the suggestion is zero.
+   */
+  public void testBlendedSort_fieldWeightZero_shouldZeroTheSuggestionScore() throws IOException {
+    BytesRef payload = new BytesRef("star");
+    Input keys[] = new Input[]{
+        new Input("star wars: episode v - the empire strikes back", 0L, payload)
+    };
+    BlendedInfixSuggester suggester = getBlendedInfixSuggester(keys);
+
+    assertZeroScores(payload, suggester);
+  }
 
+  /**
+   * Test to validate the suggestions ranking according to the position coefficient,
+   * even if the weight associated to the suggestion is very big, no overflow should happen.
+   */
+  public void testBlendedSort_fieldWeightLongMax_shouldRankSuggestionsByPositionMatchWithNoOverflow() throws IOException {
+    BytesRef payload = new BytesRef("star");
+    Input keys[] = new Input[]{
+        new Input("star wars: episode v - the empire strikes back", Long.MAX_VALUE, payload)
+    };
+    BlendedInfixSuggester suggester = getBlendedInfixSuggester(keys);
+
+    assertSuggestionsRanking(payload, suggester);
+  }
+
+  private void assertSuggestionsRanking(BytesRef payload, BlendedInfixSuggester suggester) throws IOException {
     // we query for star wars and check that the weight
     // is smaller when we search for tokens that are far from the beginning
 
-    long w0 = getInResults(suggester, "star ", payload, 1);
-    long w1 = getInResults(suggester, "war", payload, 1);
-    long w2 = getInResults(suggester, "empire ba", payload, 1);
-    long w3 = getInResults(suggester, "back", payload, 1);
-    long w4 = getInResults(suggester, "bacc", payload, 1);
+    double w0 = getInResults(suggester, "star ", payload, 1);
+    double w1 = getInResults(suggester, "war", payload, 1);
+    double w2 = getInResults(suggester, "empire ba", payload, 1);
+    double w3 = getInResults(suggester, "back", payload, 1);
+    double w4 = getInResults(suggester, "bacc", payload, 1);
 
     assertTrue(w0 > w1);
     assertTrue(w1 > w2);
@@ -78,6 +128,38 @@ public class BlendedInfixSuggesterTest extends LuceneTestCase {
     suggester.close();
   }
 
+  private void assertZeroScores(BytesRef payload, BlendedInfixSuggester suggester) throws IOException {
+    // we query for star wars and check that the weight
+    // is smaller when we search for tokens that are far from the beginning
+
+    double w0 = getInResults(suggester, "star ", payload, 1);
+    double w1 = getInResults(suggester, "war", payload, 1);
+    double w2 = getInResults(suggester, "empire ba", payload, 1);
+    double w3 = getInResults(suggester, "back", payload, 1);
+    double w4 = getInResults(suggester, "bacc", payload, 1);
+
+    assertTrue(w0 == 0);
+    assertTrue(w0 == w1);
+    assertTrue(w1 == w2);
+    assertTrue(w2 == w3);
+
+    assertTrue(w4 < 0);
+
+    suggester.close();
+  }
+
+  private BlendedInfixSuggester getBlendedInfixSuggester(Input[] keys) throws IOException {
+    Path tempDir = createTempDir("BlendedInfixSuggesterTest");
+
+    Analyzer a = new StandardAnalyzer(CharArraySet.EMPTY_SET);
+    BlendedInfixSuggester suggester = new BlendedInfixSuggester(newFSDirectory(tempDir), a, a,
+        AnalyzingInfixSuggester.DEFAULT_MIN_PREFIX_CHARS,
+        BlendedInfixSuggester.BlenderType.POSITION_LINEAR,
+        BlendedInfixSuggester.DEFAULT_NUM_FACTOR, false);
+    suggester.build(new InputArrayIterator(keys));
+    return suggester;
+  }
+
   /**
    * Verify the different flavours of the blender types
    */
@@ -97,9 +179,9 @@ public class BlendedInfixSuggesterTest extends LuceneTestCase {
     BlendedInfixSuggester suggester = new BlendedInfixSuggester(newFSDirectory(tempDir), a);
     suggester.build(new InputArrayIterator(keys));
 
-    assertEquals(w, getInResults(suggester, "top", pl, 1));
-    assertEquals((int) (w * (1 - 0.10 * 2)), getInResults(suggester, "the", pl, 1));
-    assertEquals((int) (w * (1 - 0.10 * 3)), getInResults(suggester, "lake", pl, 1));
+    assertEquals(w, getInResults(suggester, "top", pl, 1), 0.01F);
+    assertEquals((int) (w * (1 - 0.10 * 2)), getInResults(suggester, "the", pl, 1), 0.01F);
+    assertEquals((int) (w * (1 - 0.10 * 3)), getInResults(suggester, "lake", pl, 1), 0.01F);
 
     suggester.close();
 
@@ -109,9 +191,9 @@ public class BlendedInfixSuggesterTest extends LuceneTestCase {
                                           BlendedInfixSuggester.BlenderType.POSITION_RECIPROCAL, 1, false);
     suggester.build(new InputArrayIterator(keys));
 
-    assertEquals(w, getInResults(suggester, "top", pl, 1));
-    assertEquals((int) (w * 1 / (1 + 2)), getInResults(suggester, "the", pl, 1));
-    assertEquals((int) (w * 1 / (1 + 3)), getInResults(suggester, "lake", pl, 1));
+    assertEquals(w, getInResults(suggester, "top", pl, 1), 0.01F);
+    assertEquals((w * (1. / (1 + 2))), getInResults(suggester, "the", pl, 1), 0.01F);
+    assertEquals((w * (1. / (1 + 3))), getInResults(suggester, "lake", pl, 1), 0.01F);
     suggester.close();
 
     // BlenderType.EXPONENTIAL_RECIPROCAL is using 1/(pow(1+p, exponent)) * w where w is weight and p the position of the word
@@ -121,9 +203,9 @@ public class BlendedInfixSuggesterTest extends LuceneTestCase {
 
     suggester.build(new InputArrayIterator(keys));
 
-    assertEquals(w, getInResults(suggester, "top", pl, 1));
-    assertEquals((int) (w * 1 / (Math.pow(1 + 2, 4.0))), getInResults(suggester, "the", pl, 1));
-    assertEquals((int) (w * 1 / (Math.pow(1 + 3, 4.0))), getInResults(suggester, "lake", pl, 1));
+    assertEquals(w, getInResults(suggester, "top", pl, 1), 0.01F);
+    assertEquals((w * 1 / (Math.pow(1 + 2, 4.0))), getInResults(suggester, "the", pl, 1), 0.01F);
+    assertEquals((w * 1 / (Math.pow(1 + 3, 4.0))), getInResults(suggester, "lake", pl, 1), 0.01F);
 
     suggester.close();
   }
@@ -139,9 +221,9 @@ public class BlendedInfixSuggesterTest extends LuceneTestCase {
     BytesRef ret = new BytesRef("ret");
 
     Input keys[] = new Input[]{
-        new Input("top of the lake", 18, lake),
-        new Input("star wars: episode v - the empire strikes back", 12, star),
-        new Input("the returned", 10, ret),
+        new Input("top of the lake", 18L, lake),
+        new Input("star wars: episode v - the empire strikes back", 12L, star),
+        new Input("the returned", 10L, ret),
     };
 
     Path tempDir = createTempDir("BlendedInfixSuggesterTest");
@@ -157,12 +239,12 @@ public class BlendedInfixSuggesterTest extends LuceneTestCase {
 
     // we don't find it for in the 2 first
     assertEquals(2, suggester.lookup("the", 2, true, false).size());
-    long w0 = getInResults(suggester, "the", ret, 2);
+    double w0 = getInResults(suggester, "the", ret, 2);
     assertTrue(w0 < 0);
 
     // but it's there if we search for 3 elements
     assertEquals(3, suggester.lookup("the", 3, true, false).size());
-    long w1 = getInResults(suggester, "the", ret, 3);
+    double w1 = getInResults(suggester, "the", ret, 3);
     assertTrue(w1 > 0);
 
     suggester.close();
@@ -174,11 +256,11 @@ public class BlendedInfixSuggesterTest extends LuceneTestCase {
     suggester.build(new InputArrayIterator(keys));
 
     // we have it
-    long w2 = getInResults(suggester, "the", ret, 2);
+    double w2 = getInResults(suggester, "the", ret, 2);
     assertTrue(w2 > 0);
 
     // but we don't have the other
-    long w3 = getInResults(suggester, "the", star, 2);
+    double w3 = getInResults(suggester, "the", star, 2);
     assertTrue(w3 < 0);
 
     suggester.close();
@@ -192,17 +274,10 @@ public class BlendedInfixSuggesterTest extends LuceneTestCase {
     BytesRef payload = new BytesRef("lake");
 
     Input keys[] = new Input[]{
-        new Input("top of the lake", 8, payload)
+        new Input("top of the lake", 8L, payload)
     };
 
-    Path tempDir = createTempDir("BlendedInfixSuggesterTest");
-
-    Analyzer a = new StandardAnalyzer(CharArraySet.EMPTY_SET);
-    BlendedInfixSuggester suggester = new BlendedInfixSuggester(newFSDirectory(tempDir), a, a,
-                                                                AnalyzingInfixSuggester.DEFAULT_MIN_PREFIX_CHARS,
-                                                                BlendedInfixSuggester.BlenderType.POSITION_LINEAR,
-                                                                BlendedInfixSuggester.DEFAULT_NUM_FACTOR, false);
-    suggester.build(new InputArrayIterator(keys));
+    BlendedInfixSuggester suggester = getBlendedInfixSuggester(keys);
 
     getInResults(suggester, "of ", payload, 1);
     getInResults(suggester, "the ", payload, 1);
@@ -215,29 +290,29 @@ public class BlendedInfixSuggesterTest extends LuceneTestCase {
 
     //exactly same inputs
     Input[] inputDocuments = new Input[] {
-        new Input("lend me your ear", 7, new BytesRef("uid1")),
-        new Input("lend me your ear", 7, new BytesRef("uid1")),
+        new Input("lend me your ear", 7L, new BytesRef("uid1")),
+        new Input("lend me your ear", 7L, new BytesRef("uid1")),
     };
     duplicateCheck(inputDocuments, 1);
 
     // inputs differ on payload
     inputDocuments = new Input[] {
-        new Input("lend me your ear", 7, new BytesRef("uid1")),
-        new Input("lend me your ear", 7, new BytesRef("uid2")),
+        new Input("lend me your ear", 7L, new BytesRef("uid1")),
+        new Input("lend me your ear", 7L, new BytesRef("uid2")),
     };
     duplicateCheck(inputDocuments, 2);
 
     //exactly same input without payloads
     inputDocuments = new Input[] {
-        new Input("lend me your ear", 7),
-        new Input("lend me your ear", 7),
+        new Input("lend me your ear", 7L),
+        new Input("lend me your ear", 7L),
     };
     duplicateCheck(inputDocuments, 1);
 
     //Same input with first has payloads, second does not
     inputDocuments = new Input[] {
-        new Input("lend me your ear", 7, new BytesRef("uid1")),
-        new Input("lend me your ear", 7),
+        new Input("lend me your ear", 7L, new BytesRef("uid1")),
+        new Input("lend me your ear", 7L),
     };
     duplicateCheck(inputDocuments, 2);
 
@@ -247,8 +322,8 @@ public class BlendedInfixSuggesterTest extends LuceneTestCase {
      * item has no payload, therefore, when ingested, none of the 2 input has payload and become 1
      */
     inputDocuments = new Input[] {
-        new Input("lend me your ear", 7),
-        new Input("lend me your ear", 7, new BytesRef("uid2")),
+        new Input("lend me your ear", 7L),
+        new Input("lend me your ear", 7L, new BytesRef("uid2")),
     };
     List<Lookup.LookupResult> results = duplicateCheck(inputDocuments, 1);
     assertNull(results.get(0).payload);
@@ -256,15 +331,15 @@ public class BlendedInfixSuggesterTest extends LuceneTestCase {
 
     //exactly same inputs but different weight
     inputDocuments = new Input[] {
-        new Input("lend me your ear", 1, new BytesRef("uid1")),
-        new Input("lend me your ear", 7, new BytesRef("uid1")),
+        new Input("lend me your ear", 1L, new BytesRef("uid1")),
+        new Input("lend me your ear", 7L, new BytesRef("uid1")),
     };
     duplicateCheck(inputDocuments, 2);
 
     //exactly same inputs but different text
     inputDocuments = new Input[] {
-        new Input("lend me your earings", 7, new BytesRef("uid1")),
-        new Input("lend me your ear", 7, new BytesRef("uid1")),
+        new Input("lend me your earings", 7L, new BytesRef("uid1")),
+        new Input("lend me your ear", 7L, new BytesRef("uid1")),
     };
     duplicateCheck(inputDocuments, 2);
 
@@ -275,8 +350,8 @@ public class BlendedInfixSuggesterTest extends LuceneTestCase {
 
 
     Input keys[] = new Input[]{
-        new Input("lend me your ears", 1),
-        new Input("as you sow so shall you reap", 1),
+        new Input("lend me your ears", 1L),
+        new Input("as you sow so shall you reap", 1L),
     };
 
     Path tempDir = createTempDir("BlendedInfixSuggesterTest");
@@ -343,9 +418,9 @@ public class BlendedInfixSuggesterTest extends LuceneTestCase {
     BytesRef ret = new BytesRef("ret");
 
     Input keys[] = new Input[]{
-        new Input("top of the lake", 15, lake),
-        new Input("star wars: episode v - the empire strikes back", 12, star),
-        new Input("the returned", 10, ret),
+        new Input("top of the lake", 15L, lake),
+        new Input("star wars: episode v - the empire strikes back", 12L, star),
+        new Input("the returned", 10L, ret),
     };
 
     Path tempDir = createTempDir("BlendedInfixSuggesterTest");
@@ -368,7 +443,7 @@ public class BlendedInfixSuggesterTest extends LuceneTestCase {
     suggester.close();
   }
 
-  private static long getInResults(BlendedInfixSuggester suggester, String prefix, BytesRef payload, int num) throws IOException {
+  private static double getInResults(BlendedInfixSuggester suggester, String prefix, BytesRef payload, int num) throws IOException {
 
     List<Lookup.LookupResult> responses = suggester.lookup(prefix, num, true, false);
 
diff --git a/lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest.java b/lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest.java
index 165c9f26e4..13de6b1731 100644
--- a/lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest.java
+++ b/lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest.java
@@ -59,9 +59,9 @@ public class FuzzySuggesterTest extends LuceneTestCase {
     List<Input> keys = new ArrayList<>();
     int numTerms = atLeast(100);
     for (int i = 0; i < numTerms; i++) {
-      keys.add(new Input("boo" + TestUtil.randomSimpleString(random()), 1 + random().nextInt(100)));
+      keys.add(new Input("boo" + TestUtil.randomSimpleString(random()), 1L + random().nextInt(100)));
     }
-    keys.add(new Input("foo bar boo far", 12));
+    keys.add(new Input("foo bar boo far", 12L));
     MockAnalyzer analyzer = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);
     Directory tempDir = getDirectory();
     FuzzySuggester suggester = new FuzzySuggester(tempDir, "fuzzy", analyzer, analyzer, FuzzySuggester.EXACT_FIRST | FuzzySuggester.PRESERVE_SEP, 256, -1, true, FuzzySuggester.DEFAULT_MAX_EDITS, FuzzySuggester.DEFAULT_TRANSPOSITIONS,
@@ -82,9 +82,9 @@ public class FuzzySuggesterTest extends LuceneTestCase {
     List<Input> keys = new ArrayList<>();
     int numTerms = atLeast(100);
     for (int i = 0; i < numTerms; i++) {
-      keys.add(new Input("буу" + TestUtil.randomSimpleString(random()), 1 + random().nextInt(100)));
+      keys.add(new Input("буу" + TestUtil.randomSimpleString(random()), 1L + random().nextInt(100)));
     }
-    keys.add(new Input("фуу бар буу фар", 12));
+    keys.add(new Input("фуу бар буу фар", 12L));
     MockAnalyzer analyzer = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);
     Directory tempDir = getDirectory();
     FuzzySuggester suggester = new FuzzySuggester(tempDir, "fuzzy",analyzer, analyzer, FuzzySuggester.EXACT_FIRST | FuzzySuggester.PRESERVE_SEP, 256, -1, true, FuzzySuggester.DEFAULT_MAX_EDITS, FuzzySuggester.DEFAULT_TRANSPOSITIONS,
@@ -104,10 +104,10 @@ public class FuzzySuggesterTest extends LuceneTestCase {
   /** this is basically the WFST test ported to KeywordAnalyzer. so it acts the same */
   public void testKeyword() throws Exception {
     Input keys[] = new Input[] {
-        new Input("foo", 50),
-        new Input("bar", 10),
-        new Input("barbar", 12),
-        new Input("barbara", 6)
+        new Input("foo", 50L),
+        new Input("bar", 10L),
+        new Input("barbar", 12L),
+        new Input("barbara", 6L)
     };
     
     Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);
@@ -183,7 +183,7 @@ public class FuzzySuggesterTest extends LuceneTestCase {
    */
   public void testStandard() throws Exception {
     Input keys[] = new Input[] {
-        new Input("the ghost of christmas past", 50),
+        new Input("the ghost of christmas past", 50L),
     };
     
     Analyzer standard = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET);
@@ -214,8 +214,8 @@ public class FuzzySuggesterTest extends LuceneTestCase {
 
   public void testNoSeps() throws Exception {
     Input[] keys = new Input[] {
-      new Input("ab cd", 0),
-      new Input("abcd", 1),
+        new Input("ab cd", 0L),
+        new Input("abcd", 1L),
     };
 
     int options = 0;
@@ -286,8 +286,8 @@ public class FuzzySuggesterTest extends LuceneTestCase {
     };
 
     Input keys[] = new Input[] {
-        new Input("wifi network is slow", 50),
-        new Input("wi fi network is fast", 10),
+        new Input("wifi network is slow", 50L),
+        new Input("wi fi network is fast", 10L),
     };
     Directory tempDir = getDirectory();
     FuzzySuggester suggester = new FuzzySuggester(tempDir, "fuzzy", analyzer);
@@ -299,9 +299,9 @@ public class FuzzySuggesterTest extends LuceneTestCase {
     }
     assertEquals(2, results.size());
     assertEquals("wifi network is slow", results.get(0).key);
-    assertEquals(50, results.get(0).value);
+    assertEquals(50, results.get(0).value, 0.01F);
     assertEquals("wi fi network is fast", results.get(1).key);
-    assertEquals(10, results.get(1).value);
+    assertEquals(10, results.get(1).value, 0.01F);
     IOUtils.close(tempDir, analyzer);
   }
 
@@ -365,8 +365,8 @@ public class FuzzySuggesterTest extends LuceneTestCase {
     };
 
     Input keys[] = new Input[] {
-        new Input("ab xc", 50),
-        new Input("ba xd", 50),
+        new Input("ab xc", 50L),
+        new Input("ba xd", 50L),
     };
     Directory tempDir = getDirectory();
     FuzzySuggester suggester = new FuzzySuggester(tempDir, "fuzzy", analyzer);
@@ -442,10 +442,10 @@ public class FuzzySuggesterTest extends LuceneTestCase {
     Directory tempDir = getDirectory();
     FuzzySuggester suggester = new FuzzySuggester(tempDir, "fuzzy", a, a, AnalyzingSuggester.EXACT_FIRST | AnalyzingSuggester.PRESERVE_SEP, 256, -1, true, 1, true, 1, 3, false);
     suggester.build(new InputArrayIterator(new Input[] {
-          new Input("x y", 1),
-          new Input("x y z", 3),
-          new Input("x", 2),
-          new Input("z z z", 20),
+        new Input("x y", 1L),
+        new Input("x y z", 3L),
+        new Input("x", 2L),
+        new Input("z z z", 20L),
         }));
 
     //System.out.println("ALL: " + suggester.lookup("x y", false, 6));
@@ -457,19 +457,19 @@ public class FuzzySuggesterTest extends LuceneTestCase {
       assertEquals(Math.min(topN, 4), results.size());
 
       assertEquals("x y", results.get(0).key);
-      assertEquals(1, results.get(0).value);
+      assertEquals(1, results.get(0).value, 0.01F);
 
       if (topN > 1) {
         assertEquals("z z z", results.get(1).key);
-        assertEquals(20, results.get(1).value);
+        assertEquals(20, results.get(1).value, 0.01F);
 
         if (topN > 2) {
           assertEquals("x y z", results.get(2).key);
-          assertEquals(3, results.get(2).value);
+          assertEquals(3, results.get(2).value, 0.01F);
 
           if (topN > 3) {
             assertEquals("x", results.get(3).key);
-            assertEquals(2, results.get(3).value);
+            assertEquals(2, results.get(3).value, 0.01F);
           }
         }
       }
@@ -484,10 +484,10 @@ public class FuzzySuggesterTest extends LuceneTestCase {
     FuzzySuggester suggester = new FuzzySuggester(tempDir, "fuzzy", a, a, AnalyzingSuggester.PRESERVE_SEP, 256, -1, true, 1, true, 1, 3, false);
 
     suggester.build(new InputArrayIterator(new Input[] {
-          new Input("x y", 1),
-          new Input("x y z", 3),
-          new Input("x", 2),
-          new Input("z z z", 20),
+        new Input("x y", 1L),
+        new Input("x y z", 3L),
+        new Input("x", 2L),
+        new Input("z z z", 20L),
         }));
 
     for(int topN=1;topN<6;topN++) {
@@ -496,19 +496,19 @@ public class FuzzySuggesterTest extends LuceneTestCase {
       assertEquals(Math.min(topN, 4), results.size());
 
       assertEquals("z z z", results.get(0).key);
-      assertEquals(20, results.get(0).value);
+      assertEquals(20, results.get(0).value, 0.01F);
 
       if (topN > 1) {
         assertEquals("x y z", results.get(1).key);
-        assertEquals(3, results.get(1).value);
+        assertEquals(3, results.get(1).value, 0.01F);
 
         if (topN > 2) {
           assertEquals("x", results.get(2).key);
-          assertEquals(2, results.get(2).value);
+          assertEquals(2, results.get(2).value, 0.01F);
           
           if (topN > 3) {
             assertEquals("x y", results.get(3).key);
-            assertEquals(1, results.get(3).value);
+            assertEquals(1, results.get(3).value, 0.01F);
           }
         }
       }
@@ -691,7 +691,7 @@ public class FuzzySuggesterTest extends LuceneTestCase {
         allPrefixes.add(key.substring(0, j));
       }
       // we can probably do Integer.MAX_VALUE here, but why worry.
-      int weight = random().nextInt(1<<24);
+      long weight = random().nextInt(1 << 24);
       keys[i] = new Input(key, weight);
 
       slowCompletor.add(new TermFreqPayload2(key, analyzedKey, weight));
@@ -815,7 +815,7 @@ public class FuzzySuggesterTest extends LuceneTestCase {
         Collections.sort(matches, new Comparator<LookupResult>() {
             @Override
             public int compare(LookupResult left, LookupResult right) {
-              int cmp = Float.compare(right.value, left.value);
+              int cmp = Double.compare(right.value, left.value);
               if (cmp == 0) {
                 return left.compareTo(right);
               } else {
@@ -857,9 +857,9 @@ public class FuzzySuggesterTest extends LuceneTestCase {
     FuzzySuggester suggester = new FuzzySuggester(tempDir, "fuzzy", a, a, 0, 2, -1, true, 1, true, 1, 3, false);
 
     List<Input> keys = Arrays.asList(new Input[] {
-        new Input("a", 40),
-        new Input("a ", 50),
-        new Input(" a", 60),
+        new Input("a", 40L),
+        new Input("a ", 50L),
+        new Input(" a", 60L),
       });
 
     Collections.shuffle(keys, random());
@@ -868,9 +868,9 @@ public class FuzzySuggesterTest extends LuceneTestCase {
     List<LookupResult> results = suggester.lookup("a", false, 5);
     assertEquals(2, results.size());
     assertEquals(" a", results.get(0).key);
-    assertEquals(60, results.get(0).value);
+    assertEquals(60, results.get(0).value, 0.01F);
     assertEquals("a ", results.get(1).key);
-    assertEquals(50, results.get(1).value);
+    assertEquals(50, results.get(1).value, 0.01F);
     IOUtils.close(a, tempDir);
   }
 
@@ -880,19 +880,19 @@ public class FuzzySuggesterTest extends LuceneTestCase {
     FuzzySuggester suggester = new FuzzySuggester(tempDir, "fuzzy", a, a, FuzzySuggester.PRESERVE_SEP, 2, -1, true, 2, true, 1, 3, false);
 
     List<Input> keys = Arrays.asList(new Input[] {
-        new Input("foo bar", 40),
-        new Input("foo bar baz", 50),
-        new Input("barbaz", 60),
-        new Input("barbazfoo", 10),
+        new Input("foo bar", 40L),
+        new Input("foo bar baz", 50L),
+        new Input("barbaz", 60L),
+        new Input("barbazfoo", 10L),
       });
 
     Collections.shuffle(keys, random());
     suggester.build(new InputArrayIterator(keys));
 
-    assertEquals("[foo bar baz/50, foo bar/40]", suggester.lookup("foobar", false, 5).toString());
-    assertEquals("[foo bar baz/50]", suggester.lookup("foobarbaz", false, 5).toString());
-    assertEquals("[barbaz/60, barbazfoo/10]", suggester.lookup("bar baz", false, 5).toString());
-    assertEquals("[barbazfoo/10]", suggester.lookup("bar baz foo", false, 5).toString());
+    assertEquals("[foo bar baz/50.0, foo bar/40.0]", suggester.lookup("foobar", false, 5).toString());
+    assertEquals("[foo bar baz/50.0]", suggester.lookup("foobarbaz", false, 5).toString());
+    assertEquals("[barbaz/60.0, barbazfoo/10.0]", suggester.lookup("bar baz", false, 5).toString());
+    assertEquals("[barbazfoo/10.0]", suggester.lookup("bar baz foo", false, 5).toString());
     IOUtils.close(a, tempDir);
   }
   
@@ -968,7 +968,7 @@ public class FuzzySuggesterTest extends LuceneTestCase {
     for(int i=0;i<NUM;i++) {
       final String s = randomSimpleString(8);
       if (!seen.contains(s)) {
-        answers.add(new Input(s, random().nextInt(1000)));
+        answers.add(new Input(s, Long.valueOf(random().nextInt(1000))));
         seen.add(s);
       }
     }
@@ -1033,7 +1033,7 @@ public class FuzzySuggesterTest extends LuceneTestCase {
                      " but got " + c1.key,
                      0,
                      CHARSEQUENCE_COMPARATOR.compare(c0.key, c1.key));
-        assertEquals(c0.value, c1.value);
+        assertEquals(c0.value, c1.value, 0.01F);
       }
       assertEquals(expected.size(), actual.size());
     }
diff --git a/lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester.java b/lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester.java
index 3e89275af8..b709b67c58 100644
--- a/lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester.java
+++ b/lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester.java
@@ -52,8 +52,8 @@ public class TestFreeTextSuggester extends LuceneTestCase {
 
   public void testBasic() throws Exception {
     Iterable<Input> keys = AnalyzingSuggesterTest.shuffle(
-        new Input("foo bar baz blah", 50),
-        new Input("boo foo bar foo bee", 20)
+        new Input("foo bar baz blah", 50L),
+        new Input("boo foo bar foo bee", 20L)
     );
 
     Analyzer a = new MockAnalyzer(random());
@@ -101,7 +101,7 @@ public class TestFreeTextSuggester extends LuceneTestCase {
     // Default separator is INFORMATION SEPARATOR TWO
     // (0x1e), so no input token is allowed to contain it
     Iterable<Input> keys = AnalyzingSuggesterTest.shuffle(
-        new Input("foo\u001ebar baz", 50)
+        new Input("foo\u001ebar baz", 50L)
     );
     Analyzer analyzer = new MockAnalyzer(random());
     FreeTextSuggester sug = new FreeTextSuggester(analyzer);
@@ -116,7 +116,7 @@ public class TestFreeTextSuggester extends LuceneTestCase {
     // Default separator is INFORMATION SEPARATOR TWO
     // (0x1e), so no input token is allowed to contain it
     Iterable<Input> keys = AnalyzingSuggesterTest.shuffle(
-        new Input("foo bar baz", 50)
+        new Input("foo bar baz", 50L)
     );
     Analyzer analyzer = new MockAnalyzer(random());
     FreeTextSuggester sug = new FreeTextSuggester(analyzer);
@@ -141,8 +141,8 @@ public class TestFreeTextSuggester extends LuceneTestCase {
         private int count;
 
         @Override
-        public long weight() {
-          return 1;
+        public Long weight() {
+          return 1L;
         }
 
         @Override
@@ -197,7 +197,7 @@ public class TestFreeTextSuggester extends LuceneTestCase {
   // Make sure you can suggest based only on unigram model:
   public void testUnigrams() throws Exception {
     Iterable<Input> keys = AnalyzingSuggesterTest.shuffle(
-        new Input("foo bar baz blah boo foo bar foo bee", 50)
+        new Input("foo bar baz blah boo foo bar foo bee", 50L)
     );
 
     Analyzer a = new MockAnalyzer(random());
@@ -212,7 +212,7 @@ public class TestFreeTextSuggester extends LuceneTestCase {
   // Make sure the last token is not duplicated
   public void testNoDupsAcrossGrams() throws Exception {
     Iterable<Input> keys = AnalyzingSuggesterTest.shuffle(
-        new Input("foo bar bar bar bar", 50)
+        new Input("foo bar bar bar bar", 50L)
     );
     Analyzer a = new MockAnalyzer(random());
     FreeTextSuggester sug = new FreeTextSuggester(a, a, 2, (byte) 0x20);
@@ -225,7 +225,7 @@ public class TestFreeTextSuggester extends LuceneTestCase {
   // Lookup of just empty string produces unicode only matches:
   public void testEmptyString() throws Exception {
     Iterable<Input> keys = AnalyzingSuggesterTest.shuffle(
-        new Input("foo bar bar bar bar", 50)
+        new Input("foo bar bar bar bar", 50L)
     );
     Analyzer a = new MockAnalyzer(random());
     FreeTextSuggester sug = new FreeTextSuggester(a, a, 2, (byte) 0x20);
@@ -251,7 +251,7 @@ public class TestFreeTextSuggester extends LuceneTestCase {
       };
 
     Iterable<Input> keys = AnalyzingSuggesterTest.shuffle(
-        new Input("wizard of oz", 50)
+        new Input("wizard of oz", 50L)
     );
     FreeTextSuggester sug = new FreeTextSuggester(a, a, 3, (byte) 0x20);
     sug.build(new InputArrayIterator(keys));
@@ -280,7 +280,7 @@ public class TestFreeTextSuggester extends LuceneTestCase {
       };
 
     Iterable<Input> keys = AnalyzingSuggesterTest.shuffle(
-        new Input("wizard of of oz", 50)
+        new Input("wizard of of oz", 50L)
     );
     FreeTextSuggester sug = new FreeTextSuggester(a, a, 3, (byte) 0x20);
     sug.build(new InputArrayIterator(keys));
@@ -363,7 +363,7 @@ public class TestFreeTextSuggester extends LuceneTestCase {
         }
 
         @Override
-        public long weight() {
+        public Long weight() {
           return random().nextLong();
         }
 
diff --git a/lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest.java b/lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest.java
index 57c3521a0b..611b563740 100644
--- a/lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest.java
+++ b/lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest.java
@@ -31,7 +31,7 @@ import org.apache.lucene.util.*;
 public class FSTCompletionTest extends LuceneTestCase {
 
   public static Input tf(String t, int v) {
-    return new Input(t, v);
+    return new Input(t, Long.valueOf(v));
   }
 
   private FSTCompletion completion;
@@ -43,7 +43,7 @@ public class FSTCompletionTest extends LuceneTestCase {
 
     FSTCompletionBuilder builder = new FSTCompletionBuilder();
     for (Input tf : evalKeys()) {
-      builder.add(tf.term, (int) tf.v);
+      builder.add(tf.term, Math.toIntExact(tf.v));
     }
     completion = builder.build();
     completionAlphabetical = new FSTCompletion(completion.getFST(), false, true);
@@ -162,7 +162,7 @@ public class FSTCompletionTest extends LuceneTestCase {
     Random r = random();
     List<Input> keys = new ArrayList<>();
     for (int i = 0; i < 5000; i++) {
-      keys.add(new Input(TestUtil.randomSimpleString(r), -1));
+      keys.add(new Input(TestUtil.randomSimpleString(r), -1L));
     }
 
     lookup.build(new InputArrayIterator(keys));
@@ -208,7 +208,7 @@ public class FSTCompletionTest extends LuceneTestCase {
     List<Input> freqs = new ArrayList<>();
     Random rnd = random();
     for (int i = 0; i < 2500 + rnd.nextInt(2500); i++) {
-      int weight = rnd.nextInt(100); 
+      long weight = rnd.nextInt(100); 
       freqs.add(new Input("" + rnd.nextLong(), weight));
     }
 
diff --git a/lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/WFSTCompletionTest.java b/lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/WFSTCompletionTest.java
index f225ef99c3..9ce6724a38 100644
--- a/lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/WFSTCompletionTest.java
+++ b/lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/WFSTCompletionTest.java
@@ -30,10 +30,10 @@ public class WFSTCompletionTest extends LuceneTestCase {
   
   public void testBasic() throws Exception {
     Input keys[] = new Input[] {
-        new Input("foo", 50),
-        new Input("bar", 10),
-        new Input("barbar", 12),
-        new Input("barbara", 6)
+        new Input("foo", 50L),
+        new Input("bar", 10L),
+        new Input("barbar", 12L),
+        new Input("barbara", 6L)
     };
     
     Random random = new Random(random().nextLong());
@@ -85,8 +85,8 @@ public class WFSTCompletionTest extends LuceneTestCase {
     WFSTCompletionLookup suggester = new WFSTCompletionLookup(tempDir, "wfst", true);
 
     suggester.build(new InputArrayIterator(new Input[] {
-          new Input("x y", 20),
-          new Input("x", 2),
+        new Input("x y", 20L),
+        new Input("x", 2L),
         }));
 
     for(int topN=1;topN<4;topN++) {
@@ -95,11 +95,11 @@ public class WFSTCompletionTest extends LuceneTestCase {
       assertEquals(Math.min(topN, 2), results.size());
 
       assertEquals("x", results.get(0).key);
-      assertEquals(2, results.get(0).value);
+      assertEquals(2, results.get(0).value, 0.01F);
 
       if (topN > 1) {
         assertEquals("x y", results.get(1).key);
-        assertEquals(20, results.get(1).value);
+        assertEquals(20, results.get(1).value, 0.01F);
       }
     }
     tempDir.close();
@@ -111,8 +111,8 @@ public class WFSTCompletionTest extends LuceneTestCase {
     WFSTCompletionLookup suggester = new WFSTCompletionLookup(tempDir, "wfst", false);
 
     suggester.build(new InputArrayIterator(new Input[] {
-          new Input("x y", 20),
-          new Input("x", 2),
+        new Input("x y", 20L),
+        new Input("x", 2L),
         }));
 
     for(int topN=1;topN<4;topN++) {
@@ -121,11 +121,11 @@ public class WFSTCompletionTest extends LuceneTestCase {
       assertEquals(Math.min(topN, 2), results.size());
 
       assertEquals("x y", results.get(0).key);
-      assertEquals(20, results.get(0).value);
+      assertEquals(20, results.get(0).value, 0.01F);
 
       if (topN > 1) {
         assertEquals("x", results.get(1).key);
-        assertEquals(2, results.get(1).value);
+        assertEquals(2, results.get(1).value, 0.01F);
       }
     }
     tempDir.close();
@@ -154,8 +154,8 @@ public class WFSTCompletionTest extends LuceneTestCase {
         allPrefixes.add(s.substring(0, j));
       }
       // we can probably do Integer.MAX_VALUE here, but why worry.
-      int weight = random().nextInt(1<<24);
-      slowCompletor.put(s, (long)weight);
+      long weight = random().nextInt(1 << 24);
+      slowCompletor.put(s, weight);
       keys[i] = new Input(s, weight);
     }
 
@@ -183,7 +183,7 @@ public class WFSTCompletionTest extends LuceneTestCase {
       Collections.sort(matches, new Comparator<LookupResult>() {
         @Override
         public int compare(LookupResult left, LookupResult right) {
-          int cmp = Float.compare(right.value, left.value);
+          int cmp = Double.compare(right.value, left.value);
           if (cmp == 0) {
             return left.compareTo(right);
           } else {
@@ -216,8 +216,8 @@ public class WFSTCompletionTest extends LuceneTestCase {
     WFSTCompletionLookup suggester = new WFSTCompletionLookup(tempDir, "wfst", false);
 
     suggester.build(new InputArrayIterator(new Input[] {
-          new Input(key1, 50),
-          new Input(key2, 50),
+        new Input(key1, 50L),
+        new Input(key2, 50L),
         }));
     tempDir.close();
   }
diff --git a/solr/core/src/java/org/apache/solr/handler/component/SuggestComponent.java b/solr/core/src/java/org/apache/solr/handler/component/SuggestComponent.java
index 2d6fdb1559..86605170ac 100644
--- a/solr/core/src/java/org/apache/solr/handler/component/SuggestComponent.java
+++ b/solr/core/src/java/org/apache/solr/handler/component/SuggestComponent.java
@@ -421,7 +421,7 @@ public class SuggestComponent extends SearchComponent implements SolrCoreAware,
         List<SimpleOrderedMap<Object>> suggestEntriesNamedList = new ArrayList<>();
         for (LookupResult lookupResult : lookupResults) {
           String suggestionString = lookupResult.key.toString();
-          long weight = lookupResult.value;
+          double weight = lookupResult.value;
           String payload = (lookupResult.payload != null) ? 
               lookupResult.payload.utf8ToString()
               : "";
diff --git a/solr/core/src/test/org/apache/solr/handler/component/SuggestComponentTest.java b/solr/core/src/test/org/apache/solr/handler/component/SuggestComponentTest.java
index b15e167aa0..f67c2cf769 100644
--- a/solr/core/src/test/org/apache/solr/handler/component/SuggestComponentTest.java
+++ b/solr/core/src/test/org/apache/solr/handler/component/SuggestComponentTest.java
@@ -79,9 +79,9 @@ public class SuggestComponentTest extends SolrTestCaseJ4 {
         SuggesterParams.SUGGEST_COUNT, "5"),
         "//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_dict']/lst[@name='exampel']/int[@name='numFound'][.='2']",
         "//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_dict']/lst[@name='exampel']/arr[@name='suggestions']/lst[1]/str[@name='term'][.='example inputdata']",
-        "//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_dict']/lst[@name='exampel']/arr[@name='suggestions']/lst[1]/long[@name='weight'][.='45']",
+        "//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_dict']/lst[@name='exampel']/arr[@name='suggestions']/lst[1]/double[@name='weight'][.='45.0']",
         "//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_dict']/lst[@name='exampel']/arr[@name='suggestions']/lst[2]/str[@name='term'][.='example data']",
-        "//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_dict']/lst[@name='exampel']/arr[@name='suggestions']/lst[2]/long[@name='weight'][.='40']"
+        "//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_dict']/lst[@name='exampel']/arr[@name='suggestions']/lst[2]/double[@name='weight'][.='40.0']"
         );
     
     assertQ(req("qt", rh, 
@@ -91,9 +91,9 @@ public class SuggestComponentTest extends SolrTestCaseJ4 {
         SuggesterParams.SUGGEST_COUNT, "5"),
         "//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_dict']/lst[@name='Rad']/int[@name='numFound'][.='2']",
         "//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_dict']/lst[@name='Rad']/arr[@name='suggestions']/lst[1]/str[@name='term'][.='Rad fox']",
-        "//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_dict']/lst[@name='Rad']/arr[@name='suggestions']/lst[1]/long[@name='weight'][.='35']",
+        "//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_dict']/lst[@name='Rad']/arr[@name='suggestions']/lst[1]/double[@name='weight'][.='35.0']",
         "//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_dict']/lst[@name='Rad']/arr[@name='suggestions']/lst[2]/str[@name='term'][.='Red fox']",
-        "//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_dict']/lst[@name='Rad']/arr[@name='suggestions']/lst[2]/long[@name='weight'][.='30']"
+        "//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_dict']/lst[@name='Rad']/arr[@name='suggestions']/lst[2]/double[@name='weight'][.='30.0']"
         );
   }
   
@@ -106,9 +106,9 @@ public class SuggestComponentTest extends SolrTestCaseJ4 {
         SuggesterParams.SUGGEST_COUNT, "5"),
         "//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_expr_dict']/lst[@name='exampel']/int[@name='numFound'][.='2']",
         "//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_expr_dict']/lst[@name='exampel']/arr[@name='suggestions']/lst[1]/str[@name='term'][.='example inputdata']",
-        "//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_expr_dict']/lst[@name='exampel']/arr[@name='suggestions']/lst[1]/long[@name='weight'][.='120']",
+        "//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_expr_dict']/lst[@name='exampel']/arr[@name='suggestions']/lst[1]/double[@name='weight'][.='120.0']",
         "//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_expr_dict']/lst[@name='exampel']/arr[@name='suggestions']/lst[2]/str[@name='term'][.='example data']",
-        "//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_expr_dict']/lst[@name='exampel']/arr[@name='suggestions']/lst[2]/long[@name='weight'][.='110']"
+        "//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_expr_dict']/lst[@name='exampel']/arr[@name='suggestions']/lst[2]/double[@name='weight'][.='110.0']"
         );
   }
   
@@ -121,9 +121,9 @@ public class SuggestComponentTest extends SolrTestCaseJ4 {
         SuggesterParams.SUGGEST_COUNT, "2"),
         "//lst[@name='suggest']/lst[@name='suggest_fuzzy_file_based']/lst[@name='chn']/int[@name='numFound'][.='2']",
         "//lst[@name='suggest']/lst[@name='suggest_fuzzy_file_based']/lst[@name='chn']/arr[@name='suggestions']/lst[1]/str[@name='term'][.='chance']",
-        "//lst[@name='suggest']/lst[@name='suggest_fuzzy_file_based']/lst[@name='chn']/arr[@name='suggestions']/lst[1]/long[@name='weight'][.='1']",
+        "//lst[@name='suggest']/lst[@name='suggest_fuzzy_file_based']/lst[@name='chn']/arr[@name='suggestions']/lst[1]/double[@name='weight'][.='1.0']",
         "//lst[@name='suggest']/lst[@name='suggest_fuzzy_file_based']/lst[@name='chn']/arr[@name='suggestions']/lst[2]/str[@name='term'][.='change']",
-        "//lst[@name='suggest']/lst[@name='suggest_fuzzy_file_based']/lst[@name='chn']/arr[@name='suggestions']/lst[2]/long[@name='weight'][.='1']"
+        "//lst[@name='suggest']/lst[@name='suggest_fuzzy_file_based']/lst[@name='chn']/arr[@name='suggestions']/lst[2]/double[@name='weight'][.='1.0']"
         );
   }
   @Test
@@ -136,14 +136,14 @@ public class SuggestComponentTest extends SolrTestCaseJ4 {
         SuggesterParams.SUGGEST_COUNT, "5"),
         "//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_dict']/lst[@name='exampel']/int[@name='numFound'][.='2']",
         "//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_dict']/lst[@name='exampel']/arr[@name='suggestions']/lst[1]/str[@name='term'][.='example inputdata']",
-        "//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_dict']/lst[@name='exampel']/arr[@name='suggestions']/lst[1]/long[@name='weight'][.='45']",
+        "//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_dict']/lst[@name='exampel']/arr[@name='suggestions']/lst[1]/double[@name='weight'][.='45.0']",
         "//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_dict']/lst[@name='exampel']/arr[@name='suggestions']/lst[2]/str[@name='term'][.='example data']",
-        "//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_dict']/lst[@name='exampel']/arr[@name='suggestions']/lst[2]/long[@name='weight'][.='40']",
+        "//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_dict']/lst[@name='exampel']/arr[@name='suggestions']/lst[2]/double[@name='weight'][.='40.0']",
         "//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_expr_dict']/lst[@name='exampel']/int[@name='numFound'][.='2']",
         "//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_expr_dict']/lst[@name='exampel']/arr[@name='suggestions']/lst[1]/str[@name='term'][.='example inputdata']",
-        "//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_expr_dict']/lst[@name='exampel']/arr[@name='suggestions']/lst[1]/long[@name='weight'][.='120']",
+        "//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_expr_dict']/lst[@name='exampel']/arr[@name='suggestions']/lst[1]/double[@name='weight'][.='120.0']",
         "//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_expr_dict']/lst[@name='exampel']/arr[@name='suggestions']/lst[2]/str[@name='term'][.='example data']",
-        "//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_expr_dict']/lst[@name='exampel']/arr[@name='suggestions']/lst[2]/long[@name='weight'][.='110']"
+        "//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_expr_dict']/lst[@name='exampel']/arr[@name='suggestions']/lst[2]/double[@name='weight'][.='110.0']"
         );
   }
   
diff --git a/solr/core/src/test/org/apache/solr/spelling/suggest/TestBlendedInfixSuggestions.java b/solr/core/src/test/org/apache/solr/spelling/suggest/TestBlendedInfixSuggestions.java
index 4dc038ffac..2618341b46 100644
--- a/solr/core/src/test/org/apache/solr/spelling/suggest/TestBlendedInfixSuggestions.java
+++ b/solr/core/src/test/org/apache/solr/spelling/suggest/TestBlendedInfixSuggestions.java
@@ -32,13 +32,13 @@ public class TestBlendedInfixSuggestions extends SolrTestCaseJ4 {
     assertQ(req("qt", URI, "q", "the", SuggesterParams.SUGGEST_COUNT, "10", SuggesterParams.SUGGEST_DICT, "blended_infix_suggest_linear"),
         "//lst[@name='suggest']/lst[@name='blended_infix_suggest_linear']/lst[@name='the']/int[@name='numFound'][.='3']",
         "//lst[@name='suggest']/lst[@name='blended_infix_suggest_linear']/lst[@name='the']/arr[@name='suggestions']/lst[1]/str[@name='term'][.='top of <b>the</b> lake']",
-        "//lst[@name='suggest']/lst[@name='blended_infix_suggest_linear']/lst[@name='the']/arr[@name='suggestions']/lst[1]/long[@name='weight'][.='14']",
+        "//lst[@name='suggest']/lst[@name='blended_infix_suggest_linear']/lst[@name='the']/arr[@name='suggestions']/lst[1]/double[@name='weight'][.='14.4']",
         "//lst[@name='suggest']/lst[@name='blended_infix_suggest_linear']/lst[@name='the']/arr[@name='suggestions']/lst[1]/str[@name='payload'][.='lake']",
         "//lst[@name='suggest']/lst[@name='blended_infix_suggest_linear']/lst[@name='the']/arr[@name='suggestions']/lst[2]/str[@name='term'][.='<b>the</b> returned']",
-        "//lst[@name='suggest']/lst[@name='blended_infix_suggest_linear']/lst[@name='the']/arr[@name='suggestions']/lst[2]/long[@name='weight'][.='10']",
+        "//lst[@name='suggest']/lst[@name='blended_infix_suggest_linear']/lst[@name='the']/arr[@name='suggestions']/lst[2]/double[@name='weight'][.='10.0']",
         "//lst[@name='suggest']/lst[@name='blended_infix_suggest_linear']/lst[@name='the']/arr[@name='suggestions']/lst[2]/str[@name='payload'][.='ret']",
         "//lst[@name='suggest']/lst[@name='blended_infix_suggest_linear']/lst[@name='the']/arr[@name='suggestions']/lst[3]/str[@name='term'][.='star wars: episode v - <b>the</b> empire strikes back']",
-        "//lst[@name='suggest']/lst[@name='blended_infix_suggest_linear']/lst[@name='the']/arr[@name='suggestions']/lst[3]/long[@name='weight'][.='7']",
+        "//lst[@name='suggest']/lst[@name='blended_infix_suggest_linear']/lst[@name='the']/arr[@name='suggestions']/lst[3]/double[@name='weight'][.='7.199999999999999']",
         "//lst[@name='suggest']/lst[@name='blended_infix_suggest_linear']/lst[@name='the']/arr[@name='suggestions']/lst[3]/str[@name='payload'][.='star']"
     );
   }
@@ -47,13 +47,13 @@ public class TestBlendedInfixSuggestions extends SolrTestCaseJ4 {
     assertQ(req("qt", URI, "q", "the", SuggesterParams.SUGGEST_COUNT, "10", SuggesterParams.SUGGEST_DICT, "blended_infix_suggest_reciprocal"),
         "//lst[@name='suggest']/lst[@name='blended_infix_suggest_reciprocal']/lst[@name='the']/int[@name='numFound'][.='3']",
         "//lst[@name='suggest']/lst[@name='blended_infix_suggest_reciprocal']/lst[@name='the']/arr[@name='suggestions']/lst[1]/str[@name='term'][.='<b>the</b> returned']",
-        "//lst[@name='suggest']/lst[@name='blended_infix_suggest_reciprocal']/lst[@name='the']/arr[@name='suggestions']/lst[1]/long[@name='weight'][.='10']",
+        "//lst[@name='suggest']/lst[@name='blended_infix_suggest_reciprocal']/lst[@name='the']/arr[@name='suggestions']/lst[1]/double[@name='weight'][.='10.0']",
         "//lst[@name='suggest']/lst[@name='blended_infix_suggest_reciprocal']/lst[@name='the']/arr[@name='suggestions']/lst[1]/str[@name='payload'][.='ret']",
         "//lst[@name='suggest']/lst[@name='blended_infix_suggest_reciprocal']/lst[@name='the']/arr[@name='suggestions']/lst[2]/str[@name='term'][.='top of <b>the</b> lake']",
-        "//lst[@name='suggest']/lst[@name='blended_infix_suggest_reciprocal']/lst[@name='the']/arr[@name='suggestions']/lst[2]/long[@name='weight'][.='6']",
+        "//lst[@name='suggest']/lst[@name='blended_infix_suggest_reciprocal']/lst[@name='the']/arr[@name='suggestions']/lst[2]/double[@name='weight'][.='6.0']",
         "//lst[@name='suggest']/lst[@name='blended_infix_suggest_reciprocal']/lst[@name='the']/arr[@name='suggestions']/lst[2]/str[@name='payload'][.='lake']",
         "//lst[@name='suggest']/lst[@name='blended_infix_suggest_reciprocal']/lst[@name='the']/arr[@name='suggestions']/lst[3]/str[@name='term'][.='star wars: episode v - <b>the</b> empire strikes back']",
-        "//lst[@name='suggest']/lst[@name='blended_infix_suggest_reciprocal']/lst[@name='the']/arr[@name='suggestions']/lst[3]/long[@name='weight'][.='2']",
+        "//lst[@name='suggest']/lst[@name='blended_infix_suggest_reciprocal']/lst[@name='the']/arr[@name='suggestions']/lst[3]/double[@name='weight'][.='2.4000000000000004']",
         "//lst[@name='suggest']/lst[@name='blended_infix_suggest_reciprocal']/lst[@name='the']/arr[@name='suggestions']/lst[3]/str[@name='payload'][.='star']"
     );
   }
@@ -62,13 +62,13 @@ public class TestBlendedInfixSuggestions extends SolrTestCaseJ4 {
     assertQ(req("qt", URI, "q", "the", SuggesterParams.SUGGEST_COUNT, "10", SuggesterParams.SUGGEST_DICT, "blended_infix_suggest_exponential_reciprocal_1"),
         "//lst[@name='suggest']/lst[@name='blended_infix_suggest_exponential_reciprocal_1']/lst[@name='the']/int[@name='numFound'][.='3']",
         "//lst[@name='suggest']/lst[@name='blended_infix_suggest_exponential_reciprocal_1']/lst[@name='the']/arr[@name='suggestions']/lst[1]/str[@name='term'][.='<b>the</b> returned']",
-        "//lst[@name='suggest']/lst[@name='blended_infix_suggest_exponential_reciprocal_1']/lst[@name='the']/arr[@name='suggestions']/lst[1]/long[@name='weight'][.='10']",
+        "//lst[@name='suggest']/lst[@name='blended_infix_suggest_exponential_reciprocal_1']/lst[@name='the']/arr[@name='suggestions']/lst[1]/double[@name='weight'][.='10.0']",
         "//lst[@name='suggest']/lst[@name='blended_infix_suggest_exponential_reciprocal_1']/lst[@name='the']/arr[@name='suggestions']/lst[1]/str[@name='payload'][.='ret']",
         "//lst[@name='suggest']/lst[@name='blended_infix_suggest_exponential_reciprocal_1']/lst[@name='the']/arr[@name='suggestions']/lst[2]/str[@name='term'][.='top of <b>the</b> lake']",
-        "//lst[@name='suggest']/lst[@name='blended_infix_suggest_exponential_reciprocal_1']/lst[@name='the']/arr[@name='suggestions']/lst[2]/long[@name='weight'][.='6']",
+        "//lst[@name='suggest']/lst[@name='blended_infix_suggest_exponential_reciprocal_1']/lst[@name='the']/arr[@name='suggestions']/lst[2]/double[@name='weight'][.='6.0']",
         "//lst[@name='suggest']/lst[@name='blended_infix_suggest_exponential_reciprocal_1']/lst[@name='the']/arr[@name='suggestions']/lst[2]/str[@name='payload'][.='lake']",
         "//lst[@name='suggest']/lst[@name='blended_infix_suggest_exponential_reciprocal_1']/lst[@name='the']/arr[@name='suggestions']/lst[3]/str[@name='term'][.='star wars: episode v - <b>the</b> empire strikes back']",
-        "//lst[@name='suggest']/lst[@name='blended_infix_suggest_exponential_reciprocal_1']/lst[@name='the']/arr[@name='suggestions']/lst[3]/long[@name='weight'][.='2']",
+        "//lst[@name='suggest']/lst[@name='blended_infix_suggest_exponential_reciprocal_1']/lst[@name='the']/arr[@name='suggestions']/lst[3]/double[@name='weight'][.='2.4000000000000004']",
         "//lst[@name='suggest']/lst[@name='blended_infix_suggest_exponential_reciprocal_1']/lst[@name='the']/arr[@name='suggestions']/lst[3]/str[@name='payload'][.='star']"
     );
   }
@@ -77,13 +77,13 @@ public class TestBlendedInfixSuggestions extends SolrTestCaseJ4 {
     assertQ(req("qt", URI, "q", "the", SuggesterParams.SUGGEST_COUNT, "10", SuggesterParams.SUGGEST_DICT, "blended_infix_suggest_exponential_reciprocal"),
         "//lst[@name='suggest']/lst[@name='blended_infix_suggest_exponential_reciprocal']/lst[@name='the']/int[@name='numFound'][.='3']",
         "//lst[@name='suggest']/lst[@name='blended_infix_suggest_exponential_reciprocal']/lst[@name='the']/arr[@name='suggestions']/lst[1]/str[@name='term'][.='<b>the</b> returned']",
-        "//lst[@name='suggest']/lst[@name='blended_infix_suggest_exponential_reciprocal']/lst[@name='the']/arr[@name='suggestions']/lst[1]/long[@name='weight'][.='10']",
+        "//lst[@name='suggest']/lst[@name='blended_infix_suggest_exponential_reciprocal']/lst[@name='the']/arr[@name='suggestions']/lst[1]/double[@name='weight'][.='10.0']",
         "//lst[@name='suggest']/lst[@name='blended_infix_suggest_exponential_reciprocal']/lst[@name='the']/arr[@name='suggestions']/lst[1]/str[@name='payload'][.='ret']",
         "//lst[@name='suggest']/lst[@name='blended_infix_suggest_exponential_reciprocal']/lst[@name='the']/arr[@name='suggestions']/lst[2]/str[@name='term'][.='top of <b>the</b> lake']",
-        "//lst[@name='suggest']/lst[@name='blended_infix_suggest_exponential_reciprocal']/lst[@name='the']/arr[@name='suggestions']/lst[2]/long[@name='weight'][.='2']",
+        "//lst[@name='suggest']/lst[@name='blended_infix_suggest_exponential_reciprocal']/lst[@name='the']/arr[@name='suggestions']/lst[2]/double[@name='weight'][.='2.0']",
         "//lst[@name='suggest']/lst[@name='blended_infix_suggest_exponential_reciprocal']/lst[@name='the']/arr[@name='suggestions']/lst[2]/str[@name='payload'][.='lake']",
         "//lst[@name='suggest']/lst[@name='blended_infix_suggest_exponential_reciprocal']/lst[@name='the']/arr[@name='suggestions']/lst[3]/str[@name='term'][.='star wars: episode v - <b>the</b> empire strikes back']",
-        "//lst[@name='suggest']/lst[@name='blended_infix_suggest_exponential_reciprocal']/lst[@name='the']/arr[@name='suggestions']/lst[3]/long[@name='weight'][.='0']",
+        "//lst[@name='suggest']/lst[@name='blended_infix_suggest_exponential_reciprocal']/lst[@name='the']/arr[@name='suggestions']/lst[3]/double[@name='weight'][.='0.48']",
         "//lst[@name='suggest']/lst[@name='blended_infix_suggest_exponential_reciprocal']/lst[@name='the']/arr[@name='suggestions']/lst[3]/str[@name='payload'][.='star']"
     );
   }
@@ -92,23 +92,23 @@ public class TestBlendedInfixSuggestions extends SolrTestCaseJ4 {
     assertQ(req("qt", URI, "q", "the", SuggesterParams.SUGGEST_COUNT, "10", SuggesterParams.SUGGEST_DICT, "blended_infix_suggest_linear", SuggesterParams.SUGGEST_DICT, "blended_infix_suggest_reciprocal"),
         "//lst[@name='suggest']/lst[@name='blended_infix_suggest_linear']/lst[@name='the']/int[@name='numFound'][.='3']",
         "//lst[@name='suggest']/lst[@name='blended_infix_suggest_linear']/lst[@name='the']/arr[@name='suggestions']/lst[1]/str[@name='term'][.='top of <b>the</b> lake']",
-        "//lst[@name='suggest']/lst[@name='blended_infix_suggest_linear']/lst[@name='the']/arr[@name='suggestions']/lst[1]/long[@name='weight'][.='14']",
+        "//lst[@name='suggest']/lst[@name='blended_infix_suggest_linear']/lst[@name='the']/arr[@name='suggestions']/lst[1]/double[@name='weight'][.='14.4']",
         "//lst[@name='suggest']/lst[@name='blended_infix_suggest_linear']/lst[@name='the']/arr[@name='suggestions']/lst[1]/str[@name='payload'][.='lake']",
         "//lst[@name='suggest']/lst[@name='blended_infix_suggest_linear']/lst[@name='the']/arr[@name='suggestions']/lst[2]/str[@name='term'][.='<b>the</b> returned']",
-        "//lst[@name='suggest']/lst[@name='blended_infix_suggest_linear']/lst[@name='the']/arr[@name='suggestions']/lst[2]/long[@name='weight'][.='10']",
+        "//lst[@name='suggest']/lst[@name='blended_infix_suggest_linear']/lst[@name='the']/arr[@name='suggestions']/lst[2]/double[@name='weight'][.='10.0']",
         "//lst[@name='suggest']/lst[@name='blended_infix_suggest_linear']/lst[@name='the']/arr[@name='suggestions']/lst[2]/str[@name='payload'][.='ret']",
         "//lst[@name='suggest']/lst[@name='blended_infix_suggest_linear']/lst[@name='the']/arr[@name='suggestions']/lst[3]/str[@name='term'][.='star wars: episode v - <b>the</b> empire strikes back']",
-        "//lst[@name='suggest']/lst[@name='blended_infix_suggest_linear']/lst[@name='the']/arr[@name='suggestions']/lst[3]/long[@name='weight'][.='7']",
+        "//lst[@name='suggest']/lst[@name='blended_infix_suggest_linear']/lst[@name='the']/arr[@name='suggestions']/lst[3]/double[@name='weight'][.='7.199999999999999']",
         "//lst[@name='suggest']/lst[@name='blended_infix_suggest_linear']/lst[@name='the']/arr[@name='suggestions']/lst[3]/str[@name='payload'][.='star']",
         "//lst[@name='suggest']/lst[@name='blended_infix_suggest_reciprocal']/lst[@name='the']/int[@name='numFound'][.='3']",
         "//lst[@name='suggest']/lst[@name='blended_infix_suggest_reciprocal']/lst[@name='the']/arr[@name='suggestions']/lst[1]/str[@name='term'][.='<b>the</b> returned']",
-        "//lst[@name='suggest']/lst[@name='blended_infix_suggest_reciprocal']/lst[@name='the']/arr[@name='suggestions']/lst[1]/long[@name='weight'][.='10']",
+        "//lst[@name='suggest']/lst[@name='blended_infix_suggest_reciprocal']/lst[@name='the']/arr[@name='suggestions']/lst[1]/double[@name='weight'][.='10.0']",
         "//lst[@name='suggest']/lst[@name='blended_infix_suggest_reciprocal']/lst[@name='the']/arr[@name='suggestions']/lst[1]/str[@name='payload'][.='ret']",
         "//lst[@name='suggest']/lst[@name='blended_infix_suggest_reciprocal']/lst[@name='the']/arr[@name='suggestions']/lst[2]/str[@name='term'][.='top of <b>the</b> lake']",
-        "//lst[@name='suggest']/lst[@name='blended_infix_suggest_reciprocal']/lst[@name='the']/arr[@name='suggestions']/lst[2]/long[@name='weight'][.='6']",
+        "//lst[@name='suggest']/lst[@name='blended_infix_suggest_reciprocal']/lst[@name='the']/arr[@name='suggestions']/lst[2]/double[@name='weight'][.='6.0']",
         "//lst[@name='suggest']/lst[@name='blended_infix_suggest_reciprocal']/lst[@name='the']/arr[@name='suggestions']/lst[2]/str[@name='payload'][.='lake']",
         "//lst[@name='suggest']/lst[@name='blended_infix_suggest_reciprocal']/lst[@name='the']/arr[@name='suggestions']/lst[3]/str[@name='term'][.='star wars: episode v - <b>the</b> empire strikes back']",
-        "//lst[@name='suggest']/lst[@name='blended_infix_suggest_reciprocal']/lst[@name='the']/arr[@name='suggestions']/lst[3]/long[@name='weight'][.='2']",
+        "//lst[@name='suggest']/lst[@name='blended_infix_suggest_reciprocal']/lst[@name='the']/arr[@name='suggestions']/lst[3]/double[@name='weight'][.='2.4000000000000004']",
         "//lst[@name='suggest']/lst[@name='blended_infix_suggest_reciprocal']/lst[@name='the']/arr[@name='suggestions']/lst[3]/str[@name='payload'][.='star']"
     );
   }
diff --git a/solr/solr-ref-guide/src/suggester.adoc b/solr/solr-ref-guide/src/suggester.adoc
index 7b141b48a3..95fde7835f 100644
--- a/solr/solr-ref-guide/src/suggester.adoc
+++ b/solr/solr-ref-guide/src/suggester.adoc
@@ -188,7 +188,7 @@ This implementation supports <<Context Filtering>>.
 
 ==== BlendedInfixLookupFactory
 
-An extension of the `AnalyzingInfixSuggester` which provides additional functionality to weight prefix matches across the matched documents. You can tell it to score higher if a hit is closer to the start of the suggestion or vice versa.
+An extension of the `AnalyzingInfixSuggester` which provides additional functionality to weight prefix matches across the matched documents. It scores higher if a hit is closer to the start of the suggestion.
 
 This implementation uses the following additional properties:
 
@@ -197,9 +197,11 @@ Used to calculate weight coefficient using the position of the first matching wo
 `position_linear`:::
 `weightFieldValue * (1 - 0.10*position)`: Matches to the start will be given a higher score. This is the default.
 `position_reciprocal`:::
-`weightFieldValue / (1 + position)`: Matches to the end will be given a higher score.
+`weightFieldValue / (1 + position)`: Matches to the start will be given a higher score. The score of matches positioned far from the start of the suggestion decays faster than linear.
+`position_exponential_reciprocal`:::
+`weightFieldValue / pow(1 + position,exponent)`: Matches to the start will be given a higher score. The score of matches positioned far from the start of the suggestion decays faster than reciprocal.
 `exponent`::::
-An optional configuration variable for `position_reciprocal` to control how fast the score will increase or decrease. Default `2.0`.
+An optional configuration variable for `position_exponential_reciprocal` to control how fast the score will decrease. Default `2.0`.
 
 `numFactor`::
 The factor to multiply the number of searched elements from which results will be pruned. Default is `10`.
diff --git a/solr/solrj/src/java/org/apache/solr/client/solrj/response/SuggesterResponse.java b/solr/solrj/src/java/org/apache/solr/client/solrj/response/SuggesterResponse.java
index e009dfe57c..d0b1c9a4a0 100644
--- a/solr/solrj/src/java/org/apache/solr/client/solrj/response/SuggesterResponse.java
+++ b/solr/solrj/src/java/org/apache/solr/client/solrj/response/SuggesterResponse.java
@@ -45,7 +45,7 @@ public class SuggesterResponse {
         suggestionListToParse = (List<SimpleOrderedMap>) suggestionsNode.get(SUGGESTIONS_NODE_NAME);
         for (SimpleOrderedMap suggestion : suggestionListToParse) {
           String term = (String) suggestion.get(TERM_NODE_NAME);
-          long weight = (long) suggestion.get(WEIGHT_NODE_NAME);
+          double weight = (double) suggestion.get(WEIGHT_NODE_NAME);
           String payload = (String) suggestion.get(PAYLOAD_NODE_NAME);
 
           Suggestion parsedSuggestion = new Suggestion(term, weight, payload);
diff --git a/solr/solrj/src/java/org/apache/solr/client/solrj/response/Suggestion.java b/solr/solrj/src/java/org/apache/solr/client/solrj/response/Suggestion.java
index 88bc5faaeb..546de4ff3b 100644
--- a/solr/solrj/src/java/org/apache/solr/client/solrj/response/Suggestion.java
+++ b/solr/solrj/src/java/org/apache/solr/client/solrj/response/Suggestion.java
@@ -21,10 +21,10 @@ package org.apache.solr.client.solrj.response;
  */
 public class Suggestion {
     private String term;
-    private long weight;
+    private double weight;
     private String payload;
 
-    public Suggestion(String term, long weight, String payload) {
+    public Suggestion(String term, double weight, String payload) {
         this.term = term;
         this.weight = weight;
         this.payload = payload;
@@ -52,7 +52,7 @@ public class Suggestion {
         return term;
     }
 
-    public long getWeight() {
+    public double getWeight() {
         return weight;
     }
 
diff --git a/solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSuggesterResponse.java b/solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSuggesterResponse.java
index 0b3cf2ce1b..1b4e50970b 100644
--- a/solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSuggesterResponse.java
+++ b/solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSuggesterResponse.java
@@ -58,10 +58,10 @@ public class TestSuggesterResponse extends SolrJettyTestBase {
 
     List<Suggestion> mySuggester = dictionary2suggestions.get("mySuggester");
     assertEquals("Computational framework", mySuggester.get(0).getTerm());
-    assertEquals(0, mySuggester.get(0).getWeight());
+    assertEquals(0, mySuggester.get(0).getWeight(), 0.01F);
     assertEquals("", mySuggester.get(0).getPayload());
     assertEquals("Computer", mySuggester.get(1).getTerm());
-    assertEquals(0, mySuggester.get(1).getWeight());
+    assertEquals(0, mySuggester.get(1).getWeight(), 0.01F);
     assertEquals("", mySuggester.get(1).getPayload());
   }
 
