Index: lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java	(revision 1301084)
+++ lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java	(working copy)
@@ -1494,4 +1494,27 @@
     uoe.doFail = false;
     d.close();
   }
+  
+  public void testIllegalPositions() throws Exception {
+    Directory dir = newDirectory();
+    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, null));
+    Document doc = new Document();
+    Token t1 = new Token("foo", 0, 3);
+    t1.setPositionIncrement(Integer.MAX_VALUE);
+    Token t2 = new Token("bar", 4, 7);
+    t2.setPositionIncrement(200);
+    TokenStream overflowingTokenStream = new CannedTokenStream(
+        new Token[] { t1, t2 }
+    );
+    Field field = new TextField("foo", overflowingTokenStream);
+    doc.add(field);
+    try {
+      iw.addDocument(doc);
+      fail();
+    } catch (IllegalArgumentException expected) {
+      // expected exception
+    }
+    iw.close();
+    dir.close();
+  }
 }
Index: lucene/core/src/java/org/apache/lucene/index/DocInverterPerField.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/DocInverterPerField.java	(revision 1301084)
+++ lucene/core/src/java/org/apache/lucene/index/DocInverterPerField.java	(working copy)
@@ -109,10 +109,16 @@
             if (!hasMoreTokens) break;
 
             final int posIncr = posIncrAttribute.getPositionIncrement();
-            fieldState.position += posIncr;
-            if (fieldState.position > 0) {
-              fieldState.position--;
+            int position = fieldState.position + posIncr;
+            if (position > 0) {
+              position--;
+            } else if (position < 0) {
+              throw new IllegalArgumentException("position overflow for field '" + field.name() + "'");
             }
+            
+            // position is legal, we can safely place it in fieldState now.
+            // not sure if anything will use fieldState after non-aborting exc...
+            fieldState.position = position;
 
             if (posIncr == 0)
               fieldState.numOverlap++;
