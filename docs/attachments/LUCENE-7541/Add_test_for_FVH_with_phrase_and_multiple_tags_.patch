Index: lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest.java	(revision 401d77485d2b0759c85ea537f545fd02c7b9b11e)
+++ lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest.java	(revision )
@@ -16,6 +16,7 @@
  */
 package org.apache.lucene.search.vectorhighlight;
 import java.io.IOException;
+import java.util.Arrays;
 import java.util.HashSet;
 import java.util.Map;
 import java.util.Set;
@@ -28,6 +29,9 @@
 import org.apache.lucene.analysis.MockTokenFilter;
 import org.apache.lucene.analysis.MockTokenizer;
 import org.apache.lucene.analysis.Token;
+import org.apache.lucene.analysis.Tokenizer;
+import org.apache.lucene.analysis.ngram.NGramTokenizer;
+import org.apache.lucene.analysis.standard.StandardAnalyzer;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.FieldType;
@@ -56,7 +60,9 @@
 import org.apache.lucene.util.automaton.CharacterRunAutomaton;
 import org.apache.lucene.util.automaton.RegExp;
 
+import static javafx.scene.input.KeyCode.F;
 
+
 public class FastVectorHighlighterTest extends LuceneTestCase {
   
   
@@ -615,7 +621,7 @@
 
   public void testPhrasesSpanningFieldValues() throws IOException {
     Directory dir = newDirectory();
-    // positionIncrementGap is 0 so the pharse is found across multiple field
+    // positionIncrementGap is 0 so the phrase is found across multiple field
     // values.
     IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));
     FieldType type = new FieldType(TextField.TYPE_STORED);
@@ -676,6 +682,54 @@
 
     reader.close();
     writer.close();
+    dir.close();
+  }
+
+  public void testPhrasesAndMultipleTags() throws IOException {
+    Directory dir = newDirectory();
+    Analyzer a = new StandardAnalyzer();
+    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(a));
+    Document doc = new Document();
+    FieldType ft = new FieldType(TextField.TYPE_STORED);
+    ft.setStoreTermVectors(true);
+    ft.setStoreTermVectorPositions(true);
+    ft.setStoreTermVectorOffsets(true);
+    doc.add(new Field("field", "aaa bbb ccc ddd bbb eee fff", ft));
+    w.addDocument(doc);
+    DirectoryReader reader = DirectoryReader.open(w);
+    w.close();
+    FastVectorHighlighter highlighter = new FastVectorHighlighter();
+    Encoder encoder = new DefaultEncoder();
+    SimpleFragListBuilder fragListBuilder = new SimpleFragListBuilder();
+    String[] preTags = new String[] {"<1>", "<2>"};
+    String[] postTags = new String[] {"</1>", "</2>"};
+    SimpleFragmentsBuilder fragsBuilder = new SimpleFragmentsBuilder(preTags, postTags);
+
+    PhraseQuery pq1 = new PhraseQuery("field", "aaa", "bbb");
+    PhraseQuery pq2 = new PhraseQuery("field", "eee", "fff");
+    Query query = new BooleanQuery.Builder()
+        .add(pq1, Occur.SHOULD)
+        .add(pq2, Occur.SHOULD)
+        .build();
+
+    FieldQuery fieldQuery = new FieldQuery(query, reader, true, true);
+    String[] frags = highlighter.getBestFragments(fieldQuery, reader, 0, "field", Integer.MAX_VALUE, Integer.MAX_VALUE,
+        fragListBuilder, fragsBuilder, preTags, postTags, encoder);
+    assertEquals(1, frags.length);
+    assertEquals("<1>aaa bbb</1> ccc ddd bbb <2>eee fff</2>", frags[0]);
+
+    PhraseQuery pq3 = new PhraseQuery("field", "bbb", "eee");
+    query = new BooleanQuery.Builder()
+        .add(pq1, Occur.SHOULD)
+        .add(pq3, Occur.SHOULD)
+        .build();
+    fieldQuery = new FieldQuery(query, reader, true, true);
+    frags = highlighter.getBestFragments(fieldQuery, reader, 0, "field", Integer.MAX_VALUE, Integer.MAX_VALUE,
+        fragListBuilder, fragsBuilder, preTags, postTags, encoder);
+    assertEquals(1, frags.length);
+    assertEquals("<1>aaa bbb</1> ccc ddd <2>bbb eee</2> fff", frags[0]);
+
+    reader.close();
     dir.close();
   }
 
