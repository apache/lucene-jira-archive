From c4cdb3a55a0c8bb795ea5638230540cefc2be1f1 Mon Sep 17 00:00:00 2001
From: Igor Motov <igor@motovs.org>
Date: Tue, 18 Dec 2018 18:08:13 -0500
Subject: [PATCH] Test demonstrating AIOB in ByteBlockPool

---
 .../TestRecursivePrefixTreeStrategy.java      | 31 +++++++++++++++++++
 1 file changed, 31 insertions(+)

diff --git a/lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy.java b/lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy.java
index f852464ca1..7c0ca7b408 100644
--- a/lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy.java
+++ b/lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy.java
@@ -16,6 +16,13 @@
  */
 package org.apache.lucene.spatial.prefix;
 
+import org.apache.lucene.document.Document;
+import org.apache.lucene.document.Field;
+import org.apache.lucene.document.TextField;
+import org.apache.lucene.util.BytesRef;
+import org.apache.lucene.util.BytesRefIterator;
+import org.apache.lucene.util.LuceneTestCase;
+import org.apache.lucene.util.TestUtil;
 import org.locationtech.spatial4j.context.SpatialContext;
 import org.locationtech.spatial4j.distance.DistanceUtils;
 import org.locationtech.spatial4j.shape.Point;
@@ -28,6 +35,7 @@ import org.apache.lucene.spatial.query.SpatialOperation;
 import org.junit.Test;
 
 import java.io.IOException;
+import java.nio.charset.StandardCharsets;
 import java.util.HashSet;
 import java.util.Set;
 
@@ -98,6 +106,29 @@ public class TestRecursivePrefixTreeStrategy extends StrategyTestCase {
     checkHits(q(qPt, 34 * KM2DEG, distErrPct), 0, null);
   }
 
+  @Test
+  public void testWayTooManyTokens() {
+    BytesRefIteratorTokenStream tokenStream = new BytesRefIteratorTokenStream();
+    tokenStream.setBytesRefIterator(new RandomSmallByteRefIterator());
+    Document doc = new Document();
+    doc.add(new TextField("id", "1", Field.Store.YES));
+    doc.add(new Field("foobar", tokenStream, PrefixTreeStrategy.FIELD_TYPE));
+    IllegalArgumentException ex = expectThrows(IllegalArgumentException.class, () -> addDocument(doc));
+  }
+
+  private class RandomSmallByteRefIterator implements BytesRefIterator {
+    BytesRef bytesRef = new BytesRef();
+
+    @Override
+    public BytesRef next() throws IOException {
+      byte[] term = TestUtil.randomUnicodeString(LuceneTestCase.random(), 10).getBytes(StandardCharsets.UTF_8);
+      bytesRef.bytes = term;
+      bytesRef.length = term.length;
+      bytesRef.offset = 0;
+      return bytesRef;
+    }
+  }
+
   private SpatialArgs q(Point pt, double distDEG, double distErrPct) {
     Shape shape = ctx.makeCircle(pt, distDEG);
     SpatialArgs args = new SpatialArgs(SpatialOperation.Intersects,shape);
-- 
2.17.2

