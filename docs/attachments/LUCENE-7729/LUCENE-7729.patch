diff --git a/lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/CustomSeparatorBreakIterator.java b/lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/CustomSeparatorBreakIterator.java
index 9a4c461..c007ad6 100644
--- a/lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/CustomSeparatorBreakIterator.java
+++ b/lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/CustomSeparatorBreakIterator.java
@@ -24,11 +24,11 @@ import java.text.CharacterIterator;
  */
 public final class CustomSeparatorBreakIterator extends BreakIterator {
 
-  private final char separator;
+  private final String separator;
   private CharacterIterator text;
   private int current;
 
-  public CustomSeparatorBreakIterator(char separator) {
+  public CustomSeparatorBreakIterator(String separator) {
     this.separator = separator;
   }
 
@@ -59,10 +59,22 @@ public final class CustomSeparatorBreakIterator extends BreakIterator {
   }
 
   private int advanceForward() {
+    int sep_index = 0;
     char c;
     while ((c = text.next()) != CharacterIterator.DONE) {
-      if (c == separator) {
-        return current = text.getIndex() + 1;
+      if (c == separator.charAt(sep_index)) {
+        if(sep_index == separator.length() - 1) {
+          return current = text.getIndex() + 1;
+        } else {
+          sep_index ++;
+        }
+      } else {
+        if (sep_index != 0) { //separator len > 0
+          sep_index = 0;
+          if (c == separator.charAt(sep_index)) { //check the current token match with first element
+            sep_index ++;
+          }
+        }
       }
     }
     assert text.getIndex() == text.getEndIndex();
@@ -96,10 +108,22 @@ public final class CustomSeparatorBreakIterator extends BreakIterator {
   }
 
   private int advanceBackward() {
+    int sep_index = separator.length()-1;
     char c;
     while ((c = text.previous()) != CharacterIterator.DONE) {
-      if (c == separator) {
-        return current = text.getIndex() + 1;
+      if (c == separator.charAt(sep_index)) {
+        if (sep_index == 0) {
+          return current = text.getIndex() + separator.length();
+        } else {
+          sep_index --;
+        }
+      }else {
+        if (sep_index != separator.length() - 1) { // separator len > 1
+          sep_index = separator.length() - 1;
+          if (c == separator.charAt(sep_index)) { //check the current token match with last element
+            sep_index --;
+          }
+        }
       }
     }
     assert text.getIndex() == text.getBeginIndex();
@@ -147,4 +171,4 @@ public final class CustomSeparatorBreakIterator extends BreakIterator {
     text = newText;
     current = text.getBeginIndex();
   }
-}
+}
\ No newline at end of file
diff --git a/lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestCustomSeparatorBreakIterator.java b/lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestCustomSeparatorBreakIterator.java
index 29e7e97..9f7334d 100644
--- a/lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestCustomSeparatorBreakIterator.java
+++ b/lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestCustomSeparatorBreakIterator.java
@@ -16,21 +16,21 @@
  */
 package org.apache.lucene.search.postingshighlight;
 
-import com.carrotsearch.randomizedtesting.generators.RandomPicks;
-import org.apache.lucene.util.LuceneTestCase;
-
 import java.text.BreakIterator;
 import java.util.Locale;
 
+import com.carrotsearch.randomizedtesting.generators.RandomPicks;
+import org.apache.lucene.util.LuceneTestCase;
+
 import static org.apache.lucene.search.postingshighlight.TestWholeBreakIterator.assertSameBreaks;
 import static org.hamcrest.CoreMatchers.equalTo;
 
 public class TestCustomSeparatorBreakIterator extends LuceneTestCase {
 
-  private static final Character[] SEPARATORS = new Character[]{' ', '\u0000', 8233};
+  private static final String[] SEPARATORS = new String[]{"8233","x","xy","yy","xx","yx","xyx","x z"};
 
   public void testBreakOnCustomSeparator() throws Exception {
-    Character separator = randomSeparator();
+    String separator = randomSeparator();
     BreakIterator bi = new CustomSeparatorBreakIterator(separator);
     String source = "this" + separator + "is" + separator + "the" + separator + "first" + separator + "sentence";
     bi.setText(source);
@@ -57,14 +57,54 @@ public class TestCustomSeparatorBreakIterator extends LuceneTestCase {
     assertThat(bi.previous(), equalTo(BreakIterator.DONE));
     assertThat(bi.current(), equalTo(0));
 
-    assertThat(source.substring(0, bi.following(9)), equalTo("this" + separator + "is" + separator + "the" + separator));
+    // Following two assertions not applicable on string len > 0
+    // '9' index for following and preceding was hardcoded for one char
 
-    assertThat(source.substring(0, bi.preceding(9)), equalTo("this" + separator + "is" + separator));
+    //assertThat(source.substring(0, bi.following(9)), equalTo("this" + separator + "is" + separator + "the" + separator));
+
+    //assertThat(source.substring(0, bi.preceding(9)), equalTo("this" + separator + "is" + separator));
 
     assertThat(bi.first(), equalTo(0));
     assertThat(source.substring(0, bi.next(3)), equalTo("this" + separator + "is" + separator + "the" + separator));
   }
 
+  public void testFollowingPrecedingBreakOnCustomSeparator() throws Exception {
+    String separator = "xs";
+    BreakIterator bi = new CustomSeparatorBreakIterator(separator);
+    String source = "this" + separator + "is" + separator + "the" + separator + "first" + separator + "sentence";
+    bi.setText(source);
+    assertThat(source.substring(0, bi.following(9)), equalTo("this" + separator + "is" + separator + "the" + separator));
+    assertThat(source.substring(0, bi.preceding(10)), equalTo("this" + separator + "is" + separator));
+
+    separator = "x";
+    bi = new CustomSeparatorBreakIterator(separator);
+    source = "this" + separator + "is" + separator + "the" + separator + "first" + separator + "sentence";
+    bi.setText(source);
+    assertThat(source.substring(0, bi.following(9)), equalTo("this" + separator + "is" + separator + "the" + separator));
+    assertThat(source.substring(0, bi.preceding(9)), equalTo("this" + separator + "is" + separator));
+
+    separator = "xyz";
+    bi = new CustomSeparatorBreakIterator(separator);
+    source = "this" + separator + "is" + separator + "the" + separator + "first" + separator + "sentence";
+    bi.setText(source);
+    assertThat(source.substring(0, bi.following(9)), equalTo("this" + separator + "is" + separator + "the" + separator));
+    assertThat(source.substring(0, bi.preceding(12)), equalTo("this" + separator + "is" + separator));
+
+    separator = "x z";
+    bi = new CustomSeparatorBreakIterator(separator);
+    source = "this" + separator + "is" + separator + "the" + separator + "first" + separator + "sentence";
+    bi.setText(source);
+    assertThat(source.substring(0, bi.following(9)), equalTo("this" + separator + "is" + separator + "the" + separator));
+    assertThat(source.substring(0, bi.preceding(12)), equalTo("this" + separator + "is" + separator));
+
+    separator = "xz";
+    bi = new CustomSeparatorBreakIterator(separator);
+    source = "to test 1 " + "xxz " + separator + " to test 2" +" xzx " + "to test 3";
+    bi.setText(source);
+    assertThat(source.substring(0, bi.following(0)), equalTo("to test 1 xxz"));
+    assertThat(source.substring(0, bi.preceding(30)), equalTo("to test 1 xxz xz to test 2 xz"));
+  }
+
   public void testSingleSentences() throws Exception {
     BreakIterator expected = BreakIterator.getSentenceInstance(Locale.ROOT);
     BreakIterator actual = new CustomSeparatorBreakIterator(randomSeparator());
@@ -108,7 +148,7 @@ public class TestCustomSeparatorBreakIterator extends LuceneTestCase {
     assertSameBreaks("000ab000", 3, 2, 4, expected, actual);
   }
 
-  private static char randomSeparator() {
+  private static String randomSeparator() {
     return RandomPicks.randomFrom(random(), SEPARATORS);
   }
 }
diff --git a/lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/LengthGoalBreakIteratorTest.java b/lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/LengthGoalBreakIteratorTest.java
index 42d2bf6..3ae4167 100644
--- a/lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/LengthGoalBreakIteratorTest.java
+++ b/lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/LengthGoalBreakIteratorTest.java
@@ -91,14 +91,14 @@ public class LengthGoalBreakIteratorTest extends LuceneTestCase {
 
   private String highlightClosestToLen(String content, Query query, int lengthGoal) throws IOException {
     UnifiedHighlighter highlighter = new UnifiedHighlighter(null, analyzer);
-    highlighter.setBreakIterator(() -> LengthGoalBreakIterator.createClosestToLength(new CustomSeparatorBreakIterator('.'), lengthGoal));
+    highlighter.setBreakIterator(() -> LengthGoalBreakIterator.createClosestToLength(new CustomSeparatorBreakIterator("."), lengthGoal));
     return highlighter.highlightWithoutSearcher(FIELD, query, content, 1).toString();
   }
 
   private String highlightMinLen(String content, Query query, int lengthGoal) throws IOException {
     // differs from above only by "createMinLength"
     UnifiedHighlighter highlighter = new UnifiedHighlighter(null, analyzer);
-    highlighter.setBreakIterator(() -> LengthGoalBreakIterator.createMinLength(new CustomSeparatorBreakIterator('.'), lengthGoal));
+    highlighter.setBreakIterator(() -> LengthGoalBreakIterator.createMinLength(new CustomSeparatorBreakIterator("."), lengthGoal));
     return highlighter.highlightWithoutSearcher(FIELD, query, content, 1).toString();
   }
 }
\ No newline at end of file
diff --git a/solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter.java b/solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter.java
index 5ea3db1..a31cb5a 100644
--- a/solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter.java
+++ b/solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter.java
@@ -245,7 +245,7 @@ public class PostingsSolrHighlighter extends SolrHighlighter implements PluginIn
       if ("WHOLE".equals(type)) {
         return new WholeBreakIterator();
       } else if ("SEPARATOR".equals(type)) {
-        char customSep = parseBiSepChar(params.getFieldParam(field, HighlightParams.BS_SEP));
+        String customSep = parseBiSepChar(params.getFieldParam(field, HighlightParams.BS_SEP));
         return new CustomSeparatorBreakIterator(customSep);
       } else {
         String language = params.getFieldParam(field, HighlightParams.BS_LANGUAGE);
@@ -259,15 +259,15 @@ public class PostingsSolrHighlighter extends SolrHighlighter implements PluginIn
     /**
      * parse custom separator char for {@link CustomSeparatorBreakIterator}
      */
-    protected char parseBiSepChar(String sepChar) {
-      if (sepChar == null) {
+    protected String parseBiSepChar(String sepString) {
+      if (sepString == null) {
         throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, HighlightParams.BS_SEP + " not passed");
       }
-      if (sepChar.length() != 1) {
+      if (sepString.length() <=0) {
         throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, HighlightParams.BS_SEP +
-            " must be a single char but got: '" + sepChar + "'");
+            " must not be empty");
       }
-      return sepChar.charAt(0);
+      return sepString;
     }
 
     @Override
diff --git a/solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter.java b/solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter.java
index e9c842c..b08c055 100644
--- a/solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter.java
+++ b/solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter.java
@@ -304,7 +304,7 @@ public class UnifiedSolrHighlighter extends SolrHighlighter implements PluginInf
       if (fragsize == 0 || "WHOLE".equals(type)) { // 0 is special value; no fragmenting
         return new WholeBreakIterator();
       } else if ("SEPARATOR".equals(type)) {
-        char customSep = parseBiSepChar(params.getFieldParam(field, HighlightParams.BS_SEP));
+        String customSep = parseBiSepChar(params.getFieldParam(field, HighlightParams.BS_SEP));
         return new CustomSeparatorBreakIterator(customSep);
       }
       String language = params.getFieldParam(field, HighlightParams.BS_LANGUAGE);
@@ -323,15 +323,15 @@ public class UnifiedSolrHighlighter extends SolrHighlighter implements PluginInf
     /**
      * parse custom separator char for {@link CustomSeparatorBreakIterator}
      */
-    protected char parseBiSepChar(String sepChar) {
-      if (sepChar == null) {
+    protected String parseBiSepChar(String sepString) {
+      if (sepString == null) {
         throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, HighlightParams.BS_SEP + " not passed");
       }
-      if (sepChar.length() != 1) {
+      if (sepString.length() <=0) {
         throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, HighlightParams.BS_SEP +
-            " must be a single char but got: '" + sepChar + "'");
+            " must not be empty");
       }
-      return sepChar.charAt(0);
+      return sepString;
     }
 
     /**
diff --git a/solr/core/src/test/org/apache/solr/highlight/TestPostingsSolrHighlighter.java b/solr/core/src/test/org/apache/solr/highlight/TestPostingsSolrHighlighter.java
index 3f25464..7a30e61 100644
--- a/solr/core/src/test/org/apache/solr/highlight/TestPostingsSolrHighlighter.java
+++ b/solr/core/src/test/org/apache/solr/highlight/TestPostingsSolrHighlighter.java
@@ -146,15 +146,19 @@ public class TestPostingsSolrHighlighter extends SolrTestCaseJ4 {
   }
   
   public void testBreakIterator3() {
-    assertU(adoc("text", "This document contains # special characters, while the other document contains the same # special character.", "id", "103"));
-    assertU(adoc("text", "While the other document contains the same # special character.", "id", "104"));
+    assertU(adoc("text", "This document contains SPECIAL string, while the other document contains the same SPECIAL string.", "id", "103"));
+    assertU(adoc("text", "While the other document contains the same SUPERSPECIAL string.", "id", "104"));
+    assertU(adoc("text", "While the other document contains the same # char.", "id", "105"));
     assertU(commit());
     assertQ("different breakiterator", 
-        req("q", "text:document", "sort", "id asc", "hl", "true", "hl.bs.type", "SEPARATOR","hl.bs.separator","#"),
-        "//lst[@name='highlighting']/lst[@name='103']/arr[@name='text']/str='This <em>document</em> contains #'");
+        req("q", "text:document", "sort", "id asc", "hl", "true", "hl.bs.type", "SEPARATOR","hl.bs.separator","SPECIAL"),
+        "//lst[@name='highlighting']/lst[@name='103']/arr[@name='text']/str='This <em>document</em> contains SPECIAL'");
     assertQ("different breakiterator", 
+        req("q", "text:document", "sort", "id asc", "hl", "true", "hl.bs.type", "SEPARATOR","hl.bs.separator","SUPERSPECIAL"),
+        "//lst[@name='highlighting']/lst[@name='104']/arr[@name='text']/str='While the other <em>document</em> contains the same SUPERSPECIAL'");
+    assertQ("different breakiterator",
         req("q", "text:document", "sort", "id asc", "hl", "true", "hl.bs.type", "SEPARATOR","hl.bs.separator","#"),
-        "//lst[@name='highlighting']/lst[@name='104']/arr[@name='text']/str='While the other <em>document</em> contains the same #'");
+        "//lst[@name='highlighting']/lst[@name='105']/arr[@name='text']/str='While the other <em>document</em> contains the same #'");
 
   }
   
diff --git a/solr/core/src/test/org/apache/solr/highlight/TestUnifiedSolrHighlighter.java b/solr/core/src/test/org/apache/solr/highlight/TestUnifiedSolrHighlighter.java
index 2f7a003..7b5e6eb 100644
--- a/solr/core/src/test/org/apache/solr/highlight/TestUnifiedSolrHighlighter.java
+++ b/solr/core/src/test/org/apache/solr/highlight/TestUnifiedSolrHighlighter.java
@@ -233,15 +233,19 @@ public class TestUnifiedSolrHighlighter extends SolrTestCaseJ4 {
   }
   
   public void testBreakIteratorCustom() {
-    assertU(adoc("text", "This document contains # special characters, while the other document contains the same # special character.", "id", "103"));
-    assertU(adoc("text", "While the other document contains the same # special character.", "id", "104"));
+    assertU(adoc("text", "This document contains SPECIAL string, while the other document contains the same SPECIAL string.", "id", "103"));
+    assertU(adoc("text", "While the other document contains the same SUPERSPECIAL string.", "id", "104"));
+    assertU(adoc("text", "While the other document contains the same # string.", "id", "105"));
     assertU(commit());
     assertQ("CUSTOM breakiterator", 
+        req("q", "text:document", "sort", "id asc", "hl", "true", "hl.bs.type", "SEPARATOR","hl.bs.separator","SPECIAL","hl.fragsize", "-1"),
+        "//lst[@name='highlighting']/lst[@name='103']/arr[@name='text']/str='This <em>document</em> contains SPECIAL'");
+    assertQ("different breakiterator",
+        req("q", "text:document", "sort", "id asc", "hl", "true", "hl.bs.type", "SEPARATOR","hl.bs.separator","SUPERSPECIAL","hl.fragsize", "-1"),
+        "//lst[@name='highlighting']/lst[@name='104']/arr[@name='text']/str='While the other <em>document</em> contains the same SUPERSPECIAL'");
+    assertQ("different breakiterator",
         req("q", "text:document", "sort", "id asc", "hl", "true", "hl.bs.type", "SEPARATOR","hl.bs.separator","#","hl.fragsize", "-1"),
-        "//lst[@name='highlighting']/lst[@name='103']/arr[@name='text']/str='This <em>document</em> contains #'");
-    assertQ("different breakiterator", 
-        req("q", "text:document", "sort", "id asc", "hl", "true", "hl.bs.type", "SEPARATOR","hl.bs.separator","#","hl.fragsize", "-1"),
-        "//lst[@name='highlighting']/lst[@name='104']/arr[@name='text']/str='While the other <em>document</em> contains the same #'");
+        "//lst[@name='highlighting']/lst[@name='105']/arr[@name='text']/str='While the other <em>document</em> contains the same #'");
 
   }
 
