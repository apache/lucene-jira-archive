Index: lucene/backwards/src/test/org/apache/lucene/search/TestWildcard.java
===================================================================
--- lucene/backwards/src/test/org/apache/lucene/search/TestWildcard.java	(revision 1139304)
+++ lucene/backwards/src/test/org/apache/lucene/search/TestWildcard.java	(working copy)
@@ -118,46 +118,6 @@
   }
   
   /**
-   * Tests if a WildcardQuery that has only a trailing * in the term is
-   * rewritten to a single PrefixQuery. The boost and rewriteMethod should be
-   * preserved.
-   */
-  public void testPrefixTerm() throws IOException {
-    Directory indexStore = getIndexStore("field", new String[]{"prefix", "prefixx"});
-    IndexSearcher searcher = new IndexSearcher(indexStore, true);
-
-    MultiTermQuery wq = new WildcardQuery(new Term("field", "prefix*"));
-    assertMatches(searcher, wq, 2);
-    
-    MultiTermQuery expected = new PrefixQuery(new Term("field", "prefix"));
-    wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);
-    wq.setBoost(0.1F);
-    expected.setRewriteMethod(wq.getRewriteMethod());
-    expected.setBoost(wq.getBoost());
-    assertEquals(searcher.rewrite(expected), searcher.rewrite(wq));
-    
-    wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);
-    wq.setBoost(0.2F);
-    expected.setRewriteMethod(wq.getRewriteMethod());
-    expected.setBoost(wq.getBoost());
-    assertEquals(searcher.rewrite(expected), searcher.rewrite(wq));
-    
-    wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);
-    wq.setBoost(0.3F);
-    expected.setRewriteMethod(wq.getRewriteMethod());
-    expected.setBoost(wq.getBoost());
-    assertEquals(searcher.rewrite(expected), searcher.rewrite(wq));
-    
-    wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);
-    wq.setBoost(0.4F);
-    expected.setRewriteMethod(wq.getRewriteMethod());
-    expected.setBoost(wq.getBoost());
-    assertEquals(searcher.rewrite(expected), searcher.rewrite(wq));
-    searcher.close();
-    indexStore.close();
-  }
-
-  /**
    * Tests Wildcard queries with an asterisk.
    */
   public void testAsterisk()
Index: lucene/CHANGES.txt
===================================================================
--- lucene/CHANGES.txt	(revision 1139304)
+++ lucene/CHANGES.txt	(working copy)
@@ -31,6 +31,13 @@
   overridden one of these methods, cut over to the non-deprecated
   implementation. (Uwe Schindler, Robert Muir, Yonik Seeley)
 
+* LUCENE-3238: Made MultiTermQuery.rewrite() final, to prevent
+  problems (such as not properly setting rewrite methods, or 
+  not working correctly with things like SpanMultiTermQueryWrapper).
+  To rewrite to a simpler form, instead return a simpler enum
+  from getEnum(IndexReader). For example, to rewrite to a single term, 
+  return a SingleTermEnum.  (ludovic Boutros, Uwe Schindler, Robert Muir)
+
 Changes in runtime behavior
 
 * LUCENE-2834: the hash used to compute the lock file name when the
@@ -83,6 +90,10 @@
   failing to measure the space required to hold the term's field and
   text character data.  (Mike McCandless)
 
+* LUCENE-3238: Fixed bug where using WildcardQuery("prefix*") inside
+  of a SpanMultiTermQueryWrapper rewrote incorrectly and returned
+  an error instead.  (ludovic Boutros, Uwe Schindler, Robert Muir)
+
 API Changes
 
 * LUCENE-3208: Renamed protected IndexSearcher.createWeight() to expert
Index: lucene/src/test/org/apache/lucene/search/spans/TestSpanMultiTermQueryWrapper.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/spans/TestSpanMultiTermQueryWrapper.java	(revision 1139304)
+++ lucene/src/test/org/apache/lucene/search/spans/TestSpanMultiTermQueryWrapper.java	(working copy)
@@ -73,6 +73,14 @@
     assertEquals(1, searcher.search(sfq, 10).totalHits);
   }
   
+  public void testPrefix() throws Exception {
+    WildcardQuery wq = new WildcardQuery(new Term("field", "extrem*"));
+    SpanQuery swq = new SpanMultiTermQueryWrapper<WildcardQuery>(wq);
+    // will only match "jumps over extremely very lazy broxn dog"
+    SpanFirstQuery sfq = new SpanFirstQuery(swq, 3);
+    assertEquals(1, searcher.search(sfq, 10).totalHits);
+  }
+  
   public void testFuzzy() throws Exception {
     FuzzyQuery fq = new FuzzyQuery(new Term("field", "broan"));
     SpanQuery sfq = new SpanMultiTermQueryWrapper<FuzzyQuery>(fq);
Index: lucene/src/test/org/apache/lucene/search/TestWildcard.java
===================================================================
--- lucene/src/test/org/apache/lucene/search/TestWildcard.java	(revision 1139304)
+++ lucene/src/test/org/apache/lucene/search/TestWildcard.java	(working copy)
@@ -128,31 +128,8 @@
 
     MultiTermQuery wq = new WildcardQuery(new Term("field", "prefix*"));
     assertMatches(searcher, wq, 2);
-    
-    MultiTermQuery expected = new PrefixQuery(new Term("field", "prefix"));
-    wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);
-    wq.setBoost(0.1F);
-    expected.setRewriteMethod(wq.getRewriteMethod());
-    expected.setBoost(wq.getBoost());
-    assertEquals(searcher.rewrite(expected), searcher.rewrite(wq));
-    
-    wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);
-    wq.setBoost(0.2F);
-    expected.setRewriteMethod(wq.getRewriteMethod());
-    expected.setBoost(wq.getBoost());
-    assertEquals(searcher.rewrite(expected), searcher.rewrite(wq));
-    
-    wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);
-    wq.setBoost(0.3F);
-    expected.setRewriteMethod(wq.getRewriteMethod());
-    expected.setBoost(wq.getBoost());
-    assertEquals(searcher.rewrite(expected), searcher.rewrite(wq));
-    
-    wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);
-    wq.setBoost(0.4F);
-    expected.setRewriteMethod(wq.getRewriteMethod());
-    expected.setBoost(wq.getBoost());
-    assertEquals(searcher.rewrite(expected), searcher.rewrite(wq));
+    assertTrue(wq.getEnum(searcher.getIndexReader()) instanceof PrefixTermEnum);
+   
     searcher.close();
     indexStore.close();
   }
Index: lucene/src/java/org/apache/lucene/search/MultiTermQuery.java
===================================================================
--- lucene/src/java/org/apache/lucene/search/MultiTermQuery.java	(revision 1139304)
+++ lucene/src/java/org/apache/lucene/search/MultiTermQuery.java	(working copy)
@@ -286,8 +286,13 @@
     numberOfTerms += inc;
   }
 
+  /**
+   * To rewrite to a simpler form, instead return a simpler
+   * enum from {@link #getEnum(IndexReader)}.  For example,
+   * to rewrite to a single term, return a {@link SingleTermEnum}
+   */
   @Override
-  public Query rewrite(IndexReader reader) throws IOException {
+  public final Query rewrite(IndexReader reader) throws IOException {
     return rewriteMethod.rewrite(reader, this);
   }
 
Index: lucene/src/java/org/apache/lucene/search/WildcardQuery.java
===================================================================
--- lucene/src/java/org/apache/lucene/search/WildcardQuery.java	(revision 1139304)
+++ lucene/src/java/org/apache/lucene/search/WildcardQuery.java	(working copy)
@@ -52,10 +52,14 @@
 
   @Override
   protected FilteredTermEnum getEnum(IndexReader reader) throws IOException {
-    if (termContainsWildcard)
+    if (termIsPrefix) {
+      return new PrefixTermEnum(reader, term.createTerm(term.text()
+          .substring(0, term.text().indexOf('*')))); 
+    } else if (termContainsWildcard) {
       return new WildcardTermEnum(reader, getTerm());
-    else
+    } else {
       return new SingleTermEnum(reader, getTerm());
+    }
   }
   
   /**
@@ -64,19 +68,6 @@
   public Term getTerm() {
     return term;
   }
-
-  @Override
-  public Query rewrite(IndexReader reader) throws IOException {
-    if (termIsPrefix) {
-      MultiTermQuery rewritten = new PrefixQuery(term.createTerm(term.text()
-          .substring(0, term.text().indexOf('*'))));
-      rewritten.setBoost(getBoost());
-      rewritten.setRewriteMethod(getRewriteMethod());
-      return rewritten;
-    } else {
-      return super.rewrite(reader);
-    }
-  }
   
   /** Prints a user-readable version of this query. */
   @Override
