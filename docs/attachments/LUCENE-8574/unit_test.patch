diff --git a/lucene/expressions/src/java/org/apache/lucene/expressions/ExpressionFunctionValues.java b/lucene/expressions/src/java/org/apache/lucene/expressions/ExpressionFunctionValues.java
index 2e6f7c4ff93..81349043bcb 100644
--- a/lucene/expressions/src/java/org/apache/lucene/expressions/ExpressionFunctionValues.java
+++ b/lucene/expressions/src/java/org/apache/lucene/expressions/ExpressionFunctionValues.java
@@ -24,6 +24,7 @@ import org.apache.lucene.search.DoubleValues;
 class ExpressionFunctionValues extends DoubleValues {
   final Expression expression;
   final DoubleValues[] functionValues;
+  private double value = Double.NaN;
   
   ExpressionFunctionValues(Expression expression, DoubleValues[] functionValues) {
     if (expression == null) {
@@ -41,11 +42,15 @@ class ExpressionFunctionValues extends DoubleValues {
     for (DoubleValues v : functionValues) {
       v.advanceExact(doc);
     }
+    value = Double.NaN;
     return true;
   }
   
   @Override
   public double doubleValue() {
+    if (Double.isNaN(value) == false) {
+      return value;
+    }
     return expression.evaluate(functionValues);
   }
 }
diff --git a/lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionValueSource.java b/lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionValueSource.java
index 3b5589b2d7e..36090416cd5 100644
--- a/lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionValueSource.java
+++ b/lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionValueSource.java
@@ -96,6 +96,32 @@ public class TestExpressionValueSource extends LuceneTestCase {
     assertEquals(4, values.doubleValue(), 0);
   }
 
+  public void testFibonacciExpr() throws Exception {
+    SimpleBindings bindings = new SimpleBindings();
+    bindings.add("f0", DoubleValuesSource.constant(0));
+    bindings.add("f1", DoubleValuesSource.constant(1));
+    for (int i = 2; i < 51; i++) {
+      bindings.add("f"+Integer.toString(i), JavascriptCompiler.compile(String.format("f%d + f%d", i - 1, i - 2)).getDoubleValuesSource(bindings));
+    }
+    DoubleValues values = bindings.getDoubleValuesSource("f50").getValues(null, null);
+
+    assertTrue(values.advanceExact(0));
+    assertEquals(fib(50), (int)values.doubleValue());
+  }
+
+  private int fib(int n) {
+    if (n == 0) {
+      return 0;
+    }
+    int prev = 0, curr = 1, tmp;
+    for (int i = 1; i < n; i++) {
+      tmp = curr;
+      curr = curr + prev;
+      prev = tmp;
+    }
+    return curr;
+  }
+
   public void testDoubleValuesSourceEquals() throws Exception {
     Expression expr = JavascriptCompiler.compile("sqrt(a) + ln(b)");
 
