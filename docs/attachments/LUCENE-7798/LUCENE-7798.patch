commit 8a4f40448ecd40fe79a62d0e593396513a21015c
Author: Mikhail Khludnev <mkhl@apache.org>
Date:   Sat Apr 22 23:56:20 2017 +0300

    LUCENE-7798: equals/hashCode for ToParentBlockJoinSortField

diff --git a/lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinSortField.java b/lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinSortField.java
index c757086..fef167e 100644
--- a/lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinSortField.java
+++ b/lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinSortField.java
@@ -207,4 +207,30 @@ public class ToParentBlockJoinSortField extends SortField {
       }
     };
   }
+
+  @Override
+  public int hashCode() {
+    final int prime = 31;
+    int result = super.hashCode();
+    result = prime * result + ((childFilter == null) ? 0 : childFilter.hashCode());
+    result = prime * result + (order ? 1231 : 1237);
+    result = prime * result + ((parentFilter == null) ? 0 : parentFilter.hashCode());
+    return result;
+  }
+
+  @Override
+  public boolean equals(Object obj) {
+    if (this == obj) return true;
+    if (!super.equals(obj)) return false;
+    if (getClass() != obj.getClass()) return false;
+    ToParentBlockJoinSortField other = (ToParentBlockJoinSortField) obj;
+    if (childFilter == null) {
+      if (other.childFilter != null) return false;
+    } else if (!childFilter.equals(other.childFilter)) return false;
+    if (order != other.order) return false;
+    if (parentFilter == null) {
+      if (other.parentFilter != null) return false;
+    } else if (!parentFilter.equals(other.parentFilter)) return false;
+    return true;
+  }
 }
diff --git a/lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinSorting.java b/lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinSorting.java
index 0d53c85..9f76f94 100644
--- a/lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinSorting.java
+++ b/lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinSorting.java
@@ -18,6 +18,7 @@ package org.apache.lucene.search.join;
 
 import java.util.ArrayList;
 import java.util.List;
+import java.util.function.Supplier;
 
 import org.apache.lucene.analysis.MockAnalyzer;
 import org.apache.lucene.document.Document;
@@ -237,9 +238,10 @@ public class TestBlockJoinSorting extends LuceneTestCase {
     assertEquals("i", ((BytesRef) ((FieldDoc) topDocs.scoreDocs[4]).fields[0]).utf8ToString());
 
     // Sort by field ascending, order last
-    sortField = new ToParentBlockJoinSortField(
+    sortField = notEqual(sortField, () ->{ return new ToParentBlockJoinSortField(
         "field2", SortField.Type.STRING, false, true, parentFilter, childFilter
-    );
+    );});
+
     sort = new Sort(sortField);
     topDocs = searcher.search(query, 5, sort);
     assertEquals(7, topDocs.totalHits);
@@ -256,9 +258,9 @@ public class TestBlockJoinSorting extends LuceneTestCase {
     assertEquals("k", ((BytesRef) ((FieldDoc) topDocs.scoreDocs[4]).fields[0]).utf8ToString());
 
     // Sort by field descending, order last
-    sortField = new ToParentBlockJoinSortField(
+    sortField = notEqual(sortField, () ->{ return new ToParentBlockJoinSortField(
         "field2", SortField.Type.STRING, true, parentFilter, childFilter
-    );
+    );});
     sort = new Sort(sortField);
     topDocs = searcher.search(query, 5, sort);
     assertEquals(topDocs.totalHits, 7);
@@ -273,17 +275,19 @@ public class TestBlockJoinSorting extends LuceneTestCase {
     assertEquals("i", ((BytesRef) ((FieldDoc) topDocs.scoreDocs[3]).fields[0]).utf8ToString());
     assertEquals(11, topDocs.scoreDocs[4].doc);
     assertEquals("g", ((BytesRef) ((FieldDoc) topDocs.scoreDocs[4]).fields[0]).utf8ToString());
-
+    
     // Sort by field descending, order last, sort filter (filter_1:T)
-    childFilter = new QueryBitSetProducer(new TermQuery((new Term("filter_1", "T"))));
+    BitSetProducer childFilter1T = new QueryBitSetProducer(new TermQuery((new Term("filter_1", "T"))));
     query = new ToParentBlockJoinQuery(
         new TermQuery((new Term("filter_1", "T"))),
         parentFilter,
         ScoreMode.None
     );
-    sortField = new ToParentBlockJoinSortField(
-        "field2", SortField.Type.STRING, true, parentFilter, childFilter
-    );
+ 
+    sortField = notEqual(sortField, () ->{ return new ToParentBlockJoinSortField(
+        "field2", SortField.Type.STRING, true, parentFilter, childFilter1T
+    );});
+    
     sort = new Sort(sortField);
     topDocs = searcher.search(query, 5, sort);
     assertEquals(6, topDocs.totalHits);
@@ -299,8 +303,27 @@ public class TestBlockJoinSorting extends LuceneTestCase {
     assertEquals(7, topDocs.scoreDocs[4].doc);
     assertEquals("e", ((BytesRef) ((FieldDoc) topDocs.scoreDocs[4]).fields[0]).utf8ToString());
 
+    sortField = notEqual(sortField, () ->{ return new ToParentBlockJoinSortField(
+        "field2", SortField.Type.STRING, true, 
+              new QueryBitSetProducer(new TermQuery(new Term("__type", "another")))
+        , childFilter1T
+    );});
+
     searcher.getIndexReader().close();
     dir.close();
   }
+ 
+  private ToParentBlockJoinSortField notEqual(ToParentBlockJoinSortField old, Supplier<ToParentBlockJoinSortField> create) {
+    final ToParentBlockJoinSortField newObj = create.get();
+    assertFalse(old.equals(newObj));
+    assertNotSame( old, newObj);
+    
+    final ToParentBlockJoinSortField bro = create.get();
+    assertEquals(newObj, bro);
+    assertEquals(newObj.hashCode(), bro.hashCode());
+    assertNotSame( bro, newObj);
 
+    assertFalse(old.equals(bro));
+    return newObj;
+  }
 }
