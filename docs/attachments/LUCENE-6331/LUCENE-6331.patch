diff --git a/lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery.java b/lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery.java
index 2b617e4..9bb237d 100644
--- a/lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery.java
@@ -35,8 +35,8 @@ import org.apache.lucene.util.PriorityQueue;
 import org.apache.lucene.util.ToStringUtils;
 import org.apache.lucene.search.Query;
 
-/** Matches the union of its clauses.*/
-public class SpanOrQuery extends SpanQuery implements Cloneable {
+/** Matches the union of its clauses. */
+@Deprecated public class SpanOrQuery extends SpanQuery implements Cloneable {
   private List<SpanQuery> clauses;
   private String field;
 
@@ -170,15 +170,19 @@ public class SpanOrQuery extends SpanQuery implements Cloneable {
       return (clauses.get(0)).getSpans(context, acceptDocs, termContexts);
 
     return new Spans() {
+        private Spans[] subSpans = new Spans[clauses.size()];
+        {
+          int ind = 0;
+          for (SpanQuery sq: clauses) {
+            subSpans[ind++] = sq.getSpans(context, acceptDocs, termContexts);
+          }
+        }
+
         private SpanQueue queue = null;
-        private long cost;
 
         private boolean initSpanQueue(int target) throws IOException {
           queue = new SpanQueue(clauses.size());
-          Iterator<SpanQuery> i = clauses.iterator();
-          while (i.hasNext()) {
-            Spans spans = i.next().getSpans(context, acceptDocs, termContexts);
-            cost += spans.cost();
+          for (Spans spans: subSpans) {
             if (   ((target == -1) && spans.next())
                 || ((target != -1) && spans.skipTo(target))) {
               queue.add(spans);
@@ -262,6 +266,10 @@ public class SpanOrQuery extends SpanQuery implements Cloneable {
 
       @Override
       public long cost() {
+        long cost = 0;
+        for (Spans spans: subSpans) {
+          cost += spans.cost();
+        }
         return cost;
       }
       
