Index: lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI.java	(revision 1687407)
+++ lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI.java	(working copy)
@@ -19,6 +19,7 @@
 
 import java.io.IOException;
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.Comparator;
 import java.util.List;
 
@@ -34,17 +35,13 @@
   /** Create a conjunction over the provided iterators, taking advantage of
    *  {@link TwoPhaseIterator}. */
   public static ConjunctionDISI intersect(List<? extends DocIdSetIterator> iterators) {
-    assert iterators.size() >= 2;
+    if (iterators.size() < 2) {
+      throw new IllegalArgumentException("Cannot make a ConjunctionDISI of less than 2 iterators");
+    }
     final List<DocIdSetIterator> allIterators = new ArrayList<>();
     final List<TwoPhaseIterator> twoPhaseIterators = new ArrayList<>();
     for (DocIdSetIterator iter : iterators) {
-      TwoPhaseIterator twoPhaseIter = TwoPhaseIterator.asTwoPhaseIterator(iter);
-      if (twoPhaseIter != null) {
-        allIterators.add(twoPhaseIter.approximation());
-        twoPhaseIterators.add(twoPhaseIter);
-      } else { // no approximation support, use the iterator as-is
-        allIterators.add(iter);
-      }
+      addIterator(iter, allIterators, twoPhaseIterators);
     }
 
     if (twoPhaseIterators.isEmpty()) {
@@ -54,6 +51,30 @@
     }
   }
 
+  /** Adds the iterator, possibly splitting up into two phases or collapsing if it is another conjunction */
+  private static void addIterator(DocIdSetIterator disi, List<DocIdSetIterator> allIterators, List<TwoPhaseIterator> twoPhaseIterators) {
+    // Check for exactly this class for collapsing. Subclasses can do their own optimizations.
+    if (disi.getClass() == ConjunctionDISI.class || disi.getClass() == TwoPhase.class) {
+      ConjunctionDISI conjunction = (ConjunctionDISI) disi;
+      // subconjuctions have already split themselves into two phase iterators and others, so we can take those
+      // iterators as they are and move them up to this conjunction
+      allIterators.add(conjunction.lead);
+      Collections.addAll(allIterators, conjunction.others);
+      if (conjunction.getClass() == TwoPhase.class) {
+        TwoPhase twoPhase = (TwoPhase) conjunction;
+        Collections.addAll(twoPhaseIterators, twoPhase.twoPhaseView.twoPhaseIterators);
+      }
+    } else {
+      TwoPhaseIterator twoPhaseIter = TwoPhaseIterator.asTwoPhaseIterator(disi);
+      if (twoPhaseIter != null) {
+        allIterators.add(twoPhaseIter.approximation());
+        twoPhaseIterators.add(twoPhaseIter);
+      } else { // no approximation support, use the iterator as-is
+        allIterators.add(disi);
+      }
+    }
+  }
+
   final DocIdSetIterator lead;
   final DocIdSetIterator[] others;
 
Index: lucene/core/src/test/org/apache/lucene/search/TestBooleanCoord.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestBooleanCoord.java	(revision 1687407)
+++ lucene/core/src/test/org/apache/lucene/search/TestBooleanCoord.java	(working copy)
@@ -514,6 +514,14 @@
     bq.add(term("B"), BooleanClause.Occur.MUST);
     assertScore(2 * 2/(2f + 1), bq.build());
   }
+
+  public void testConjunction3TermMatches() throws Exception {
+    BooleanQuery.Builder bq = new BooleanQuery.Builder();
+    bq.add(term("A"), BooleanClause.Occur.MUST);
+    bq.add(term("B"), BooleanClause.Occur.MUST);
+    bq.add(term("C"), BooleanClause.Occur.MUST);
+    assertScore(3 * 3/(3f + 1), bq.build());
+  }
   
   // conjunctions coord disabled
   
Index: lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI.java	(revision 1687407)
+++ lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI.java	(working copy)
@@ -19,6 +19,8 @@
 
 import java.io.IOException;
 import java.util.Arrays;
+import java.util.LinkedList;
+import java.util.List;
 
 import org.apache.lucene.util.BitDocIdSet;
 import org.apache.lucene.util.FixedBitSet;
@@ -244,4 +246,50 @@
     }
   }
 
+  public void testCollapseSubConjunctions() throws IOException {
+    final int iters = atLeast(100);
+    for (int iter = 0; iter < iters; ++iter) {
+      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);
+      final int numIterators = TestUtil.nextInt(random(), 5, 10);
+      final FixedBitSet[] sets = new FixedBitSet[numIterators];
+      final List<DocIdSetIterator> iterators = new LinkedList<>();
+      for (int i = 0; i < numIterators; ++i) {
+        final FixedBitSet set = randomSet(maxDoc);
+        if (random().nextBoolean()) {
+          // simple iterator
+          sets[i] = set;
+          iterators.add(new BitDocIdSet(set).iterator());
+        } else {
+          // scorer with approximation
+          final FixedBitSet confirmed = clearRandomBits(set);
+          sets[i] = confirmed;
+          final TwoPhaseIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);
+          iterators.add(scorer(approximation));
+        }
+      }
+
+      // make some sub sequences into sub conjunctions
+      final int subIters = atLeast(3);
+      for (int subIter = 0; subIter < subIters && iterators.size() > 3; ++subIter) {
+        final int subSeqStart = TestUtil.nextInt(random(), 0, iterators.size() - 2);
+        final int subSeqEnd = TestUtil.nextInt(random(), subSeqStart + 2, iterators.size());
+        System.out.println("cutting [" + subSeqStart + ":" + subSeqEnd + ") from iterators of size " + iterators.size());
+        final ConjunctionDISI subConjunction = ConjunctionDISI.intersect(iterators.subList(subSeqStart, subSeqEnd));
+        iterators.set(subSeqStart, subConjunction);
+        int toRemove = subSeqEnd - subSeqStart - 1;
+        while (toRemove-- > 0) {
+          iterators.remove(subSeqStart + 1);
+        }
+      }
+      if (iterators.size() == 1) {
+        // ConjunctionDISI needs two iterators
+        iterators.add(DocIdSetIterator.all(maxDoc));
+      }
+
+
+      final ConjunctionDISI conjunction = ConjunctionDISI.intersect(iterators);
+      assertEquals(intersect(sets), toBitSet(maxDoc, conjunction));
+    }
+  }
+
 }
