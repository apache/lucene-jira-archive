Index: lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator.java	(revision bbb9f726e0985b725429a7e05eb480dd98df02db)
+++ lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator.java	(date 1541410365000)
@@ -540,9 +540,7 @@
     Node nextNode;
     do {
       nextNode = node.next;
-      if(node.getX() != x0 && node.getY() != y0 && nextNode.getX() != x0
-          && nextNode.getY() != y0 && node.getX() != x1 && node.getY() != y1
-          && nextNode.getX() != x1 && nextNode.getY() != y1) {
+      if(isVertexEquals(node, x0, y0) == false && isVertexEquals(node, x1, y1) == false) {
         if (linesIntersect(node.getX(), node.getY(), nextNode.getX(), nextNode.getY(), x0, y0, x1, y1)) {
           return true;
         }
@@ -709,7 +707,12 @@
 
   /** Determines if two point vertices are equal. **/
   private static final boolean isVertexEquals(final Node a, final Node b) {
-    return a.getX() == b.getX() && a.getY() == b.getY();
+    return isVertexEquals(a, b.getX(), b.getY());
+  }
+
+  /** Determines if two point vertices are equal. **/
+  private static final boolean isVertexEquals(final Node a, final double x, final  double y) {
+    return a.getX() == x && a.getY() == y;
   }
 
   /** Compute signed area of triangle */
Index: lucene/sandbox/src/test/org/apache/lucene/geo/TestTessellator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/sandbox/src/test/org/apache/lucene/geo/TestTessellator.java	(revision bbb9f726e0985b725429a7e05eb480dd98df02db)
+++ lucene/sandbox/src/test/org/apache/lucene/geo/TestTessellator.java	(date 1541410407000)
@@ -96,4 +96,11 @@
     Polygon polygon = (Polygon)SimpleWKTShapeParser.parse(wkt);
     assertTrue(Tessellator.tessellate(polygon).size() == 8);
   }
+
+  public void testLUCENE8559()  throws Exception {
+    String wkt = "POLYGON((-0.1348674 51.7458255,-0.1345884 51.7455067,-0.1329898 51.745314,-0.1326358 51.745314,-0.1324105 51.744404,-0.131981 51.7444423,-0.1312196 51.7445102,-0.1310908 51.7456794,-0.1319706 51.7460713,-0.1343095 51.7465828,-0.1348674 51.7458255)," +
+        "(-0.1322388 51.7447959,-0.1322388 51.7454336,-0.1318633 51.7457126,-0.1313912 51.7456262,-0.1318985 51.7448032,-0.1322388 51.7447959))";
+    Polygon polygon = (Polygon)SimpleWKTShapeParser.parse(wkt);
+    assertTrue(Tessellator.tessellate(polygon).size() > 0);
+  }
 }
\ No newline at end of file
