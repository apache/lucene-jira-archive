Index: CHANGES.txt
===================================================================
--- CHANGES.txt	(revision 810258)
+++ CHANGES.txt	(working copy)
@@ -340,7 +340,7 @@
     a scorer(IndexReader, boolean /* scoreDocsInOrder */, boolean /*
     topScorer */) method instead of scorer(IndexReader). IndexSearcher uses 
     this method to obtain a scorer matching the capabilities of the Collector 
-    wrt orderness of docIDs. Some Scorers (like BooleanScorer) are much more
+    wrt orderedness of docIDs. Some Scorers (like BooleanScorer) are much more
     efficient if out-of-order documents scoring is allowed by a Collector.  
     Collector must now implement acceptsDocsOutOfOrder. If you write a 
     Collector which does not care about doc ID orderness, it is recommended 
@@ -438,7 +438,7 @@
 3. LUCENE-1573: Do not ignore InterruptedException (caused by
    Thread.interrupt()) nor enter deadlock/spin loop. Now, an interrupt
    will cause a RuntimeException to be thrown.  In 3.0 we will change
-   public APIs to throw InterruptedException.  (Jeremy Volkman vai
+   public APIs to throw InterruptedException.  (Jeremy Volkman via
    Mike McCandless)
 
 4. LUCENE-1590: Fixed stored-only Field instances do not change the
@@ -561,7 +561,7 @@
 
  4. LUCENE-1424: Moved constant score query rewrite capability into
     MultiTermQuery, allowing TermRangeQuery, PrefixQuery and WildcardQuery
-    to switch betwen constant-score rewriting or BooleanQuery
+    to switch between constant-score rewriting or BooleanQuery
     expansion rewriting via a new setRewriteMethod method.
     Deprecated ConstantScoreRangeQuery (Mark Miller via Mike
     McCandless)
@@ -697,7 +697,7 @@
     All standard parsers now also implement Serializable and enforce
     their singleton status.  (Uwe Schindler, Mike McCandless)
     
-29. LUCENE-1741: User configureable maximum chunk size in MMapDirectory.
+29. LUCENE-1741: User configurable maximum chunk size in MMapDirectory.
     On 32 bit platforms, the address space can be very fragmented, so
     one big ByteBuffer for the whole file may not fit into address space.
     (Eks Dev via Uwe Schindler)
@@ -834,7 +834,7 @@
 
  1. LUCENE-1791: Enhancements to the QueryUtils and CheckHits utility 
     classes to wrap IndexReaders and Searchers in MultiReaders or 
-    MultiSearcher when possible to help excercise more edge cases.
+    MultiSearcher when possible to help exercise more edge cases.
     (Chris Hostetter, Mark Miller)
 
  2. LUCENE-1852: Fix localization test failures. 
Index: contrib/CHANGES.txt
===================================================================
--- contrib/CHANGES.txt	(revision 810258)
+++ contrib/CHANGES.txt	(working copy)
@@ -19,7 +19,7 @@
 API Changes
 
  1. LUCENE-1695: Update the Highlighter to use the new TokenStream API. This issue breaks backwards
-    compatibility with some public classes. If you have implemented custom Fregmenters or Scorers, 
+    compatibility with some public classes. If you have implemented custom Fragmenters or Scorers, 
     you will need to adjust them to work with the new TokenStream API. Rather than getting passed a 
     Token at a time, you will be given a TokenStream to init your impl with - store the Attributes 
     you are interested in locally and access them on each call to the method that used to pass a new 
@@ -35,7 +35,7 @@
     for Highlighting. The SpanScorer implementation has replaced QueryScorer
     and the old term highlighting QueryScorer has been renamed to 
     QueryTermScorer. Multi-term queries are also now expanded by default. If
-    you were previously rewritting the query for multi-term query highlighting,
+    you were previously rewriting the query for multi-term query highlighting,
     you should no longer do that (unless you switch to using QueryTermScorer).
     The SpanScorer API (now QueryScorer) has also been improved to more closely
     match the API of the previous QueryScorer implementation.  (Mark Miller)  
@@ -90,8 +90,8 @@
  1. LUCENE-1531: Added support for BoostingTermQuery to XML query parser. (Karl Wettin)
 
  2. LUCENE-1435: Added contrib/collation, a CollationKeyFilter
-    allowing you to convert tokens into CollationKeys encoded usign
-    IndexableBinaryStringTools.  This allows for faster RangQuery when
+    allowing you to convert tokens into CollationKeys encoded using
+    IndexableBinaryStringTools.  This allows for faster RangeQuery when
     a field needs to use a custom Collator.  (Steven Rowe via Mike
     McCandless)
 
@@ -171,10 +171,10 @@
 
 Build
 
-1. LUCENE-1728: Splitted contrib/analyzers into common and smartcn modules. 
-   Contrib/analyzers now builds an addtional lucene-smartcn Jar file. All
+1. LUCENE-1728: Split contrib/analyzers into common and smartcn modules. 
+   Contrib/analyzers now builds an additional lucene-smartcn Jar file. All
    smartcn classes are not included in the lucene-analyzers JAR file.
-   (Robert Muri via Simon Willanuer)
+   (Robert Muir via Simon Willnauer)
  
 2. LUCENE-1829: Fix contrib query parser to properly create javacc files.
    (Jan-Pascal and Luis Alves via Michael Busch)      
