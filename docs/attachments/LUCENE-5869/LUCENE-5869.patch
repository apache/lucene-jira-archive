diff --git lucene/core/src/java/org/apache/lucene/search/FuzzyQuery.java lucene/core/src/java/org/apache/lucene/search/FuzzyQuery.java
index 87941d4..89413ce 100644
--- lucene/core/src/java/org/apache/lucene/search/FuzzyQuery.java
+++ lucene/core/src/java/org/apache/lucene/search/FuzzyQuery.java
@@ -89,8 +89,8 @@ public class FuzzyQuery extends MultiTermQuery {
     if (prefixLength < 0) {
       throw new IllegalArgumentException("prefixLength cannot be negative.");
     }
-    if (maxExpansions < 0) {
-      throw new IllegalArgumentException("maxExpansions cannot be negative.");
+    if (maxExpansions <= 0) {
+      throw new IllegalArgumentException("maxExpansions must be positive.");
     }
     
     this.term = term;
diff --git lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery.java lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery.java
index 327a003..bfb09d7 100644
--- lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery.java
+++ lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery.java
@@ -31,6 +31,7 @@ import org.apache.lucene.index.RandomIndexWriter;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.LuceneTestCase;
+import org.apache.lucene.util.automaton.LevenshteinAutomata;
 
 /**
  * Tests {@link FuzzyQuery}.
@@ -372,6 +373,43 @@ public class TestFuzzyQuery extends LuceneTestCase {
     reader.close();
     index.close();
   }
+
+  public void testValidation() {
+    try {
+      new FuzzyQuery(new Term("field", "foo"), -1, 0, 1, false);
+      fail("Expected error for illegal max edits value");
+    } catch (IllegalArgumentException e) {
+      assertTrue(e.getMessage().contains("maxEdits"));
+    }
+
+    try {
+      new FuzzyQuery(new Term("field", "foo"), LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE + 1, 0, 1, false);
+      fail("Expected error for illegal max edits value");
+    } catch (IllegalArgumentException e) {
+      assertTrue(e.getMessage().contains("maxEdits must be between"));
+    }
+
+    try {
+      new FuzzyQuery(new Term("field", "foo"), 1, -1, 1, false);
+      fail("Expected error for illegal prefix length value");
+    } catch (IllegalArgumentException e) {
+      assertTrue(e.getMessage().contains("prefixLength cannot be negative"));
+    }
+
+    try {
+      new FuzzyQuery(new Term("field", "foo"), 1, 0, -1, false);
+      fail("Expected error for illegal max expansions value");
+    } catch (IllegalArgumentException e) {
+      assertTrue(e.getMessage().contains("maxExpansions must be positive"));
+    }
+
+    try {
+      new FuzzyQuery(new Term("field", "foo"), 1, 0, -1, false);
+      fail("Expected error for illegal max expansions value");
+    } catch (IllegalArgumentException e) {
+      assertTrue(e.getMessage().contains("maxExpansions must be positive"));
+    }
+  }
   
   private void addDoc(String text, RandomIndexWriter writer) throws IOException {
     Document doc = new Document();
