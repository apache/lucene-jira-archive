Index: lucene/CHANGES.txt
===================================================================
--- lucene/CHANGES.txt	(revision 1623934)
+++ lucene/CHANGES.txt	(working copy)
@@ -113,6 +113,8 @@
 * LUCENE-5906: Use Files.delete everywhere instead of File.delete, so that
   when things go wrong, you get a real exception message why.
   (Uwe Schindler, Robert Muir)
+  
+* LUCENE-5933: Added FilterSpans for easier wrapping of Spans instance. (Shai Erera)
 
 API Changes:
 
Index: lucene/core/src/java/org/apache/lucene/search/spans/FilterSpans.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/spans/FilterSpans.java	(revision 0)
+++ lucene/core/src/java/org/apache/lucene/search/spans/FilterSpans.java	(working copy)
@@ -0,0 +1,82 @@
+package org.apache.lucene.search.spans;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.IOException;
+import java.util.Collection;
+
+/**
+ * A {@link Spans} implementation which allows wrapping another spans instance
+ * and override some selected methods.
+ */
+public class FilterSpans extends Spans {
+ 
+  /** The wrapped spans instance. */
+  protected final Spans in;
+  
+  /** Wrap the given {@link Spans}. */
+  public FilterSpans(Spans in) {
+    this.in = in;
+  }
+  
+  @Override
+  public boolean next() throws IOException {
+    return in.next();
+  }
+
+  @Override
+  public boolean skipTo(int target) throws IOException {
+    return in.skipTo(target);
+  }
+
+  @Override
+  public int doc() {
+    return in.doc();
+  }
+
+  @Override
+  public int start() {
+    return in.start();
+  }
+
+  @Override
+  public int end() {
+    return in.end();
+  }
+  
+  @Override
+  public Collection<byte[]> getPayload() throws IOException {
+    return in.getPayload();
+  }
+
+  @Override
+  public boolean isPayloadAvailable() throws IOException {
+    return in.isPayloadAvailable();
+  }
+  
+  @Override
+  public long cost() {
+    return in.cost();
+  }
+  
+  @Override
+  public String toString() {
+    return "Filter(" + in.toString() + ")";
+  }
+  
+}
Index: lucene/core/src/test/org/apache/lucene/search/spans/TestFilterSpans.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/spans/TestFilterSpans.java	(revision 0)
+++ lucene/core/src/test/org/apache/lucene/search/spans/TestFilterSpans.java	(working copy)
@@ -0,0 +1,41 @@
+package org.apache.lucene.search.spans;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements. See the NOTICE file distributed with this
+ * work for additional information regarding copyright ownership. The ASF
+ * licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+import java.lang.reflect.Method;
+import java.util.HashSet;
+import java.util.Set;
+
+import org.apache.lucene.util.LuceneTestCase;
+import org.junit.Test;
+
+public class TestFilterSpans extends LuceneTestCase {
+
+  @Test
+  public void testOverrides() throws Exception {
+    // verify that all methods of Spans are overridden by FilterSpans,
+    // except those under the 'exclude' list
+    Set<Method> exclude = new HashSet<>();
+    for (Method m : FilterSpans.class.getMethods()) {
+      if (m.getDeclaringClass() == Spans.class) {
+        assertTrue("method " + m.getName() + " not overridden!", exclude.contains(m));
+      }
+    }
+  }
+  
+}
