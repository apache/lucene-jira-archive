Index: lucene/core/src/java/org/apache/lucene/search/TimeLimitingCollector.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/TimeLimitingCollector.java	(revision 1685217)
+++ lucene/core/src/java/org/apache/lucene/search/TimeLimitingCollector.java	(working copy)
@@ -136,6 +136,10 @@
     if (Long.MIN_VALUE == t0) {
       setBaseline();
     }
+    final long time = clock.get();
+    if (time - timeout > 0L) {
+      throw new TimeExceededException(timeout - t0, time - t0, -1);
+    }
     return new FilterLeafCollector(collector.getLeafCollector(context)) {
       
       @Override
Index: lucene/core/src/test/org/apache/lucene/search/TestTimeLimitingCollector.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestTimeLimitingCollector.java	(revision 1685217)
+++ lucene/core/src/test/org/apache/lucene/search/TestTimeLimitingCollector.java	(working copy)
@@ -152,7 +152,7 @@
       e.printStackTrace();
       assertTrue("Unexpected exception: "+e, false); //==fail
     }
-    assertEquals( "Wrong number of results!", totalResults, totalTLCResults );
+    assertEquals("Wrong number of results!", totalResults, totalTLCResults);
   }
 
   private Collector createTimedCollector(MyHitCollector hc, long timeAllowed, boolean greedy) {
@@ -267,6 +267,24 @@
       counterThread.setResolution(TimerThread.DEFAULT_RESOLUTION);
     }
   }
+
+  public void testNoHits() throws IOException {
+    MyHitCollector myHc = new MyHitCollector();
+    Collector collector = createTimedCollector(myHc, -1, random().nextBoolean());
+    // search
+    TimeExceededException timoutException = null;
+    try {
+      BooleanQuery booleanQuery = new BooleanQuery(); // won't match - we only test if we check timeout when collectors are pulled
+      booleanQuery.add(new TermQuery(new Term(FIELD_NAME, "one")), BooleanClause.Occur.MUST);
+      booleanQuery.add(new TermQuery(new Term(FIELD_NAME, "blueberry")), BooleanClause.Occur.MUST);
+      searcher.search(booleanQuery, collector);
+    } catch (TimeExceededException x) {
+      timoutException = x;
+    }
+    // must get exception
+    assertNotNull("Timeout expected!", timoutException);
+    assertEquals(-1, myHc.getLastDocCollected());
+  }
   
   /** 
    * Test correctness with multiple searching threads.
