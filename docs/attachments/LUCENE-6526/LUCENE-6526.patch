Index: lucene/core/src/java/org/apache/lucene/search/BooleanQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/BooleanQuery.java	(revision 1683647)
+++ lucene/core/src/java/org/apache/lucene/search/BooleanQuery.java	(working copy)
@@ -22,10 +22,8 @@
 import java.util.Iterator;
 import java.util.List;
 import java.util.Objects;
-import java.util.Set;
 
 import org.apache.lucene.index.IndexReader;
-import org.apache.lucene.index.Term;
 import org.apache.lucene.search.BooleanClause.Occur;
 import org.apache.lucene.search.similarities.Similarity;
 import org.apache.lucene.util.ToStringUtils;
@@ -204,10 +202,8 @@
           }
         } else {
           // our single clause is a filter
-          if (query.getBoost() != 0f) {
-            query = query.clone();
-            query.setBoost(0);
-          }
+          query = new ConstantScoreQuery(query);
+          query.setBoost(0);
         }
 
         return query;
Index: lucene/core/src/java/org/apache/lucene/search/BooleanWeight.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/BooleanWeight.java	(revision 1683647)
+++ lucene/core/src/java/org/apache/lucene/search/BooleanWeight.java	(working copy)
@@ -362,12 +362,34 @@
     if (required.size() == 1) {
       Scorer req = required.get(0);
 
-      if (needsScores == false ||
-          (requiredScoring.size() == 1 && (disableCoord || maxCoord == 1))) {
+      if (needsScores == false) {
         return req;
-      } else {
-        return new BooleanTopLevelScorers.BoostedScorer(req, coord(requiredScoring.size(), maxCoord));
       }
+
+      if (requiredScoring.isEmpty()) {
+        // Scores are needed but we only have a filter clause
+        // BooleanWeight expects that calling score() is ok so we need to wrap
+        // to prevent score() from being propagated
+        return new FilterScorer(req) {
+          @Override
+          public float score() throws IOException {
+            return 0f;
+          }
+          @Override
+          public int freq() throws IOException {
+            return 0;
+          }
+        };
+      }
+      
+      float boost = 1f;
+      if (disableCoord == false) {
+        boost = coord(1, maxCoord);
+      }
+      if (boost == 1f) {
+        return req;
+      }
+      return new BooleanTopLevelScorers.BoostedScorer(req, boost);
     } else {
       return new ConjunctionScorer(this, required, requiredScoring,
                                    disableCoord ? 1.0F : coord(requiredScoring.size(), maxCoord));
Index: lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery.java	(revision 1683647)
+++ lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery.java	(working copy)
@@ -97,6 +97,10 @@
             public float score() throws IOException {
               return theScore;
             }
+            @Override
+            public int freq() throws IOException {
+              return 1;
+            }
           });
         }
       };
@@ -136,6 +140,10 @@
               return score;
             }
             @Override
+            public int freq() throws IOException {
+              return 1;
+            }
+            @Override
             public Collection<ChildScorer> getChildren() {
               return Collections.singleton(new ChildScorer(innerScorer, "constant"));
             }
Index: lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery.java	(revision 1683647)
+++ lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery.java	(working copy)
@@ -575,7 +575,7 @@
 
     // Single clauses rewrite to a term query
     final Query rewritten1 = query1.rewrite(reader);
-    assertTrue(rewritten1 instanceof TermQuery);
+    assertTrue(rewritten1 instanceof ConstantScoreQuery);
     assertEquals(0f, rewritten1.getBoost(), 0f);
 
     // When there are two clauses, we cannot rewrite, but if one of them creates
@@ -586,8 +586,9 @@
     query2.add(new TermQuery(new Term("field", "b")), Occur.SHOULD);
     final Weight weight = searcher.createNormalizedWeight(query2, true);
     final Scorer scorer = weight.scorer(reader.leaves().get(0), null);
-    assertTrue(scorer.getClass().getName(), scorer instanceof BooleanTopLevelScorers.BoostedScorer);
-    assertEquals(0, ((BooleanTopLevelScorers.BoostedScorer) scorer).boost, 0f);
+    assertEquals(0, scorer.nextDoc());
+    assertTrue(scorer.getClass().getName(), scorer instanceof FilterScorer);
+    assertEquals(0f, scorer.score(), 0f);
 
     reader.close();
     w.close();
Index: lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.java
===================================================================
--- lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.java	(revision 1683647)
+++ lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.java	(working copy)
@@ -119,7 +119,7 @@
 
   @Override
   public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
-    return new BlockJoinWeight(this, childQuery.createWeight(searcher, needsScores), parentsFilter, scoreMode);
+    return new BlockJoinWeight(this, childQuery.createWeight(searcher, needsScores), parentsFilter, needsScores ? scoreMode : ScoreMode.None);
   }
   
   /** Return our child query. */
Index: lucene/test-framework/src/java/org/apache/lucene/search/AssertingIndexSearcher.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/search/AssertingIndexSearcher.java	(revision 1683647)
+++ lucene/test-framework/src/java/org/apache/lucene/search/AssertingIndexSearcher.java	(working copy)
@@ -25,7 +25,6 @@
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.IndexReaderContext;
 import org.apache.lucene.index.LeafReaderContext;
-import org.apache.lucene.util.Bits;
 
 /**
  * Helper class that adds some extra checks to ensure correct
@@ -57,7 +56,7 @@
   @Override
   public Weight createNormalizedWeight(Query query, boolean needsScores) throws IOException {
     final Weight w = super.createNormalizedWeight(query, needsScores);
-    return new AssertingWeight(random, w) {
+    return new AssertingWeight(random, w, needsScores) {
 
       @Override
       public void normalize(float norm, float topLevelBoost) {
@@ -75,7 +74,7 @@
   @Override
   public Weight createWeight(Query query, boolean needsScores) throws IOException {
     // this adds assertions to the inner weights/scorers too
-    return new AssertingWeight(random, super.createWeight(query, needsScores));
+    return new AssertingWeight(random, super.createWeight(query, needsScores), needsScores);
   }
 
   @Override
@@ -89,8 +88,8 @@
 
   @Override
   protected void search(List<LeafReaderContext> leaves, Weight weight, Collector collector) throws IOException {
-    // TODO: shouldn't we AssertingCollector.wrap(collector) here?
-    super.search(leaves, AssertingWeight.wrap(random, weight), AssertingCollector.wrap(random, collector));
+    assert weight instanceof AssertingWeight;
+    super.search(leaves, weight, AssertingCollector.wrap(random, collector));
   }
 
   @Override
Index: lucene/test-framework/src/java/org/apache/lucene/search/AssertingLeafCollector.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/search/AssertingLeafCollector.java	(revision 1683647)
+++ lucene/test-framework/src/java/org/apache/lucene/search/AssertingLeafCollector.java	(working copy)
@@ -41,7 +41,7 @@
   @Override
   public void setScorer(Scorer scorer) throws IOException {
     this.scorer = scorer;
-    super.setScorer(AssertingScorer.wrap(random, scorer));
+    super.setScorer(AssertingScorer.wrap(random, scorer, true));
   }
 
   @Override
Index: lucene/test-framework/src/java/org/apache/lucene/search/AssertingQuery.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/search/AssertingQuery.java	(revision 1683647)
+++ lucene/test-framework/src/java/org/apache/lucene/search/AssertingQuery.java	(working copy)
@@ -19,10 +19,8 @@
 
 import java.io.IOException;
 import java.util.Random;
-import java.util.Set;
 
 import org.apache.lucene.index.IndexReader;
-import org.apache.lucene.index.Term;
 
 /** Assertion-enabled query. */
 public class AssertingQuery extends Query {
@@ -43,7 +41,7 @@
 
   @Override
   public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
-    return AssertingWeight.wrap(new Random(random.nextLong()), in.createWeight(searcher, needsScores));
+    return new AssertingWeight(new Random(random.nextLong()), in.createWeight(searcher, needsScores), needsScores);
   }
 
   @Override
Index: lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer.java	(revision 1683647)
+++ lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer.java	(working copy)
@@ -27,23 +27,25 @@
 
   static enum IteratorState { START, APPROXIMATING, ITERATING, FINISHED };
 
-  public static Scorer wrap(Random random, Scorer other) {
-    if (other == null || other instanceof AssertingScorer) {
-      return other;
+  public static Scorer wrap(Random random, Scorer other, boolean canScore) {
+    if (other == null) {
+      return null;
     }
-    return new AssertingScorer(random, other);
+    return new AssertingScorer(random, other, canScore);
   }
 
   final Random random;
   final Scorer in;
+  final boolean needsScores;
 
   IteratorState state = IteratorState.START;
   int doc = -1;
 
-  private AssertingScorer(Random random, Scorer in) {
+  private AssertingScorer(Random random, Scorer in, boolean needsScores) {
     super(in.weight);
     this.random = random;
     this.in = in;
+    this.needsScores = needsScores;
   }
 
   public Scorer getIn() {
@@ -63,6 +65,7 @@
 
   @Override
   public float score() throws IOException {
+    assert needsScores;
     assert iterating();
     final float score = in.score();
     assert !Float.isNaN(score) : "NaN score for in="+in;
@@ -80,6 +83,7 @@
 
   @Override
   public int freq() throws IOException {
+    assert needsScores;
     assert iterating();
     return in.freq();
   }
Index: lucene/test-framework/src/java/org/apache/lucene/search/AssertingWeight.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/search/AssertingWeight.java	(revision 1683647)
+++ lucene/test-framework/src/java/org/apache/lucene/search/AssertingWeight.java	(working copy)
@@ -27,17 +27,15 @@
 
 class AssertingWeight extends Weight {
 
-  static Weight wrap(Random random, Weight other) {
-    return other instanceof AssertingWeight ? other : new AssertingWeight(random, other);
-  }
-
   final Random random;
   final Weight in;
+  final boolean needsScores;
 
-  AssertingWeight(Random random, Weight in) {
+  AssertingWeight(Random random, Weight in, boolean needsScores) {
     super(in.getQuery());
     this.random = random;
     this.in = in;
+    this.needsScores = needsScores;
   }
 
   @Override
@@ -64,7 +62,7 @@
   public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {
     final Scorer inScorer = in.scorer(context, acceptDocs);
     assert inScorer == null || inScorer.docID() == -1;
-    return AssertingScorer.wrap(new Random(random.nextLong()), inScorer);
+    return AssertingScorer.wrap(new Random(random.nextLong()), inScorer, needsScores);
   }
 
   @Override
