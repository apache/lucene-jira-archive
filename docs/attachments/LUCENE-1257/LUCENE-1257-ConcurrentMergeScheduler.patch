Index: src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java
===================================================================
--- src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java	(revision 826272)
+++ src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java	(working copy)
@@ -36,7 +36,7 @@
 
   private int mergeThreadPriority = -1;
 
-  protected List mergeThreads = new ArrayList();
+  protected List<MergeThread> mergeThreads = new ArrayList<MergeThread>();
 
   // Max number of threads allowed to be merging at once
   private int maxThreadCount = 3;
@@ -363,7 +363,7 @@
       // Make sure all outstanding threads are done so we see
       // any exceptions they may produce:
       for(int i=0;i<count;i++)
-        ((ConcurrentMergeScheduler) allInstances.get(i)).sync();
+        allInstances.get(i).sync();
       boolean v = anyExceptions;
       anyExceptions = false;
       return v;
@@ -382,7 +382,7 @@
       final int size = allInstances.size();
       int upto = 0;
       for(int i=0;i<size;i++) {
-        final ConcurrentMergeScheduler other = (ConcurrentMergeScheduler) allInstances.get(i);
+        final ConcurrentMergeScheduler other = allInstances.get(i);
         if (!(other.closed && 0 == other.mergeThreadCount()))
           // Keep this one for now: it still has threads or
           // may spawn new threads
@@ -406,8 +406,8 @@
   }
 
   /** Used for testing */
-  private static List allInstances;
+  private static List<ConcurrentMergeScheduler> allInstances;
   public static void setTestMode() {
-    allInstances = new ArrayList();
+    allInstances = new ArrayList<ConcurrentMergeScheduler>();
   }
 }
