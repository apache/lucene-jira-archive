Index: src/test/org/apache/lucene/store/MockRAMDirectory.java
===================================================================
--- src/test/org/apache/lucene/store/MockRAMDirectory.java	(revision 826475)
+++ src/test/org/apache/lucene/store/MockRAMDirectory.java	(working copy)
@@ -43,19 +43,19 @@
   Random randomState;
   boolean noDeleteOpenFile = true;
   boolean preventDoubleWrite = true;
-  private Set unSyncedFiles;
-  private Set createdFiles;
+  private Set<String> unSyncedFiles;
+  private Set<String> createdFiles;
   volatile boolean crashed;
 
   // NOTE: we cannot initialize the Map here due to the
   // order in which our constructor actually does this
   // member initialization vs when it calls super.  It seems
   // like super is called, then our members are initialized:
-  Map openFiles;
+  Map<String,Integer> openFiles;
 
   private synchronized void init() {
     if (openFiles == null)
-      openFiles = new HashMap();
+      openFiles = new HashMap<String,Integer>();
     if (createdFiles == null)
       createdFiles = new HashSet();
     if (unSyncedFiles == null)
@@ -90,12 +90,12 @@
   public synchronized void crash() throws IOException {
     crashed = true;
     openFiles = new HashMap();
-    Iterator it = unSyncedFiles.iterator();
+    Iterator<String> it = unSyncedFiles.iterator();
     unSyncedFiles = new HashSet();
     int count = 0;
     while(it.hasNext()) {
-      String name = (String) it.next();
-      RAMFile file = (RAMFile) fileMap.get(name);
+      String name = it.next();
+      RAMFile file = fileMap.get(name);
       if (count % 3 == 0) {
         deleteFile(name, true);
       } else if (count % 3 == 1) {
@@ -204,7 +204,7 @@
       throw new IOException("cannot createOutput after crash");
     unSyncedFiles.add(name);
     createdFiles.add(name);
-    RAMFile existing = (RAMFile)fileMap.get(name);
+    RAMFile existing = fileMap.get(name);
     // Enforce write once:
     if (existing!=null && !name.equals("segments.gen") && preventDoubleWrite)
       throw new IOException("file " + name + " already exists");
@@ -221,7 +221,7 @@
   }
 
   public synchronized IndexInput openInput(String name) throws IOException {
-    RAMFile file = (RAMFile)fileMap.get(name);
+    RAMFile file = fileMap.get(name);
     if (file == null)
       throw new FileNotFoundException(name);
     else {
@@ -239,9 +239,9 @@
   /** Provided for testing purposes.  Use sizeInBytes() instead. */
   public synchronized final long getRecomputedSizeInBytes() {
     long size = 0;
-    Iterator it = fileMap.values().iterator();
-    while (it.hasNext())
-      size += ((RAMFile) it.next()).getSizeInBytes();
+    for(final RAMFile file: fileMap.values()) {
+      size += file.getSizeInBytes();
+    }
     return size;
   }
 
@@ -253,9 +253,8 @@
 
   public final synchronized long getRecomputedActualSizeInBytes() {
     long size = 0;
-    Iterator it = fileMap.values().iterator();
-    while (it.hasNext())
-      size += ((RAMFile) it.next()).length;
+    for (final RAMFile file : fileMap.values())
+      size += file.length;
     return size;
   }
 
Index: src/java/org/apache/lucene/store/RAMFile.java
===================================================================
--- src/java/org/apache/lucene/store/RAMFile.java	(revision 826475)
+++ src/java/org/apache/lucene/store/RAMFile.java	(working copy)
@@ -24,7 +24,7 @@
 
   private static final long serialVersionUID = 1l;
 
-  private ArrayList buffers = new ArrayList();
+  private ArrayList<byte[]> buffers = new ArrayList<byte[]>();
   long length;
   RAMDirectory directory;
   long sizeInBytes;                  // Only maintained if in a directory; updates synchronized on directory
Index: src/java/org/apache/lucene/store/MMapDirectory.java
===================================================================
--- src/java/org/apache/lucene/store/MMapDirectory.java	(revision 826475)
+++ src/java/org/apache/lucene/store/MMapDirectory.java	(working copy)
@@ -148,7 +148,7 @@
   final void cleanMapping(final ByteBuffer buffer) throws IOException {
     if (useUnmapHack) {
       try {
-        AccessController.doPrivileged(new PrivilegedExceptionAction() {
+        AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {
           public Object run() throws Exception {
             final Method getCleanerMethod = buffer.getClass()
               .getMethod("cleaner", NO_PARAM_TYPES);
Index: src/java/org/apache/lucene/store/IndexOutput.java
===================================================================
--- src/java/org/apache/lucene/store/IndexOutput.java	(revision 826475)
+++ src/java/org/apache/lucene/store/IndexOutput.java	(working copy)
@@ -19,7 +19,6 @@
 
 import java.io.IOException;
 import java.util.Map;
-import java.util.Iterator;
 import org.apache.lucene.util.UnicodeUtil;
 
 /** Abstract base class for output to a file in a Directory.  A random-access
@@ -210,17 +209,14 @@
    */
   public void setLength(long length) throws IOException {};
 
-  // map must be Map<String, String>
-  public void writeStringStringMap(Map map) throws IOException {
+  public void writeStringStringMap(Map<String,String> map) throws IOException {
     if (map == null) {
       writeInt(0);
     } else {
       writeInt(map.size());
-      final Iterator it = map.entrySet().iterator();
-      while(it.hasNext()) {
-        Map.Entry entry = (Map.Entry) it.next();
-        writeString((String) entry.getKey());
-        writeString((String) entry.getValue());
+      for(final Map.Entry<String, String> entry: map.entrySet()) {
+        writeString(entry.getKey());
+        writeString(entry.getValue());
       }
     }
   }
Index: src/java/org/apache/lucene/store/RAMDirectory.java
===================================================================
--- src/java/org/apache/lucene/store/RAMDirectory.java	(revision 826475)
+++ src/java/org/apache/lucene/store/RAMDirectory.java	(working copy)
@@ -19,10 +19,8 @@
 
 import java.io.IOException;
 import java.io.FileNotFoundException;
-import java.io.File;
 import java.io.Serializable;
 import java.util.HashMap;
-import java.util.Iterator;
 import java.util.Set;
 
 /**
@@ -34,7 +32,7 @@
 
   private static final long serialVersionUID = 1l;
 
-  HashMap fileMap = new HashMap();
+  HashMap<String,RAMFile> fileMap = new HashMap<String,RAMFile>();
   long sizeInBytes = 0;
   
   // *****
@@ -73,12 +71,11 @@
 
   public synchronized final String[] listAll() {
     ensureOpen();
-    Set fileNames = fileMap.keySet();
+    Set<String> fileNames = fileMap.keySet();
     String[] result = new String[fileNames.size()];
     int i = 0;
-    Iterator it = fileNames.iterator();
-    while (it.hasNext())
-      result[i++] = (String)it.next();
+    for(final String fileName: fileNames) 
+      result[i++] = fileName;
     return result;
   }
 
@@ -87,7 +84,7 @@
     ensureOpen();
     RAMFile file;
     synchronized (this) {
-      file = (RAMFile)fileMap.get(name);
+      file = fileMap.get(name);
     }
     return file != null;
   }
@@ -99,7 +96,7 @@
     ensureOpen();
     RAMFile file;
     synchronized (this) {
-      file = (RAMFile)fileMap.get(name);
+      file = fileMap.get(name);
     }
     if (file==null)
       throw new FileNotFoundException(name);
@@ -113,7 +110,7 @@
     ensureOpen();
     RAMFile file;
     synchronized (this) {
-      file = (RAMFile)fileMap.get(name);
+      file = fileMap.get(name);
     }
     if (file==null)
       throw new FileNotFoundException(name);
@@ -141,7 +138,7 @@
     ensureOpen();
     RAMFile file;
     synchronized (this) {
-      file = (RAMFile)fileMap.get(name);
+      file = fileMap.get(name);
     }
     if (file==null)
       throw new FileNotFoundException(name);
@@ -161,7 +158,7 @@
    */
   public synchronized void deleteFile(String name) throws IOException {
     ensureOpen();
-    RAMFile file = (RAMFile)fileMap.get(name);
+    RAMFile file = fileMap.get(name);
     if (file!=null) {
         fileMap.remove(name);
         file.directory = null;
@@ -175,7 +172,7 @@
     ensureOpen();
     RAMFile file = new RAMFile(this);
     synchronized (this) {
-      RAMFile existing = (RAMFile)fileMap.get(name);
+      RAMFile existing = fileMap.get(name);
       if (existing!=null) {
         sizeInBytes -= existing.sizeInBytes;
         existing.directory = null;
@@ -190,7 +187,7 @@
     ensureOpen();
     RAMFile file;
     synchronized (this) {
-      file = (RAMFile)fileMap.get(name);
+      file = fileMap.get(name);
     }
     if (file == null)
       throw new FileNotFoundException(name);
Index: src/java/org/apache/lucene/store/SingleInstanceLockFactory.java
===================================================================
--- src/java/org/apache/lucene/store/SingleInstanceLockFactory.java	(revision 826475)
+++ src/java/org/apache/lucene/store/SingleInstanceLockFactory.java	(working copy)
@@ -33,7 +33,7 @@
 
 public class SingleInstanceLockFactory extends LockFactory {
 
-  private HashSet locks = new HashSet();
+  private HashSet<String> locks = new HashSet<String>();
 
   public Lock makeLock(String lockName) {
     // We do not use the LockPrefix at all, because the private
@@ -54,9 +54,9 @@
 class SingleInstanceLock extends Lock {
 
   String lockName;
-  private HashSet locks;
+  private HashSet<String> locks;
 
-  public SingleInstanceLock(HashSet locks, String lockName) {
+  public SingleInstanceLock(HashSet<String> locks, String lockName) {
     this.locks = locks;
     this.lockName = lockName;
   }
Index: src/java/org/apache/lucene/store/NativeFSLockFactory.java
===================================================================
--- src/java/org/apache/lucene/store/NativeFSLockFactory.java	(revision 826475)
+++ src/java/org/apache/lucene/store/NativeFSLockFactory.java	(working copy)
@@ -164,7 +164,7 @@
    * one JVM (each with their own NativeFSLockFactory
    * instance) have set the same lock dir and lock prefix.
    */
-  private static HashSet LOCK_HELD = new HashSet();
+  private static HashSet<String> LOCK_HELD = new HashSet<String>();
 
   public NativeFSLock(File lockDir, String lockFileName) {
     this.lockDir = lockDir;
Index: src/java/org/apache/lucene/store/FileSwitchDirectory.java
===================================================================
--- src/java/org/apache/lucene/store/FileSwitchDirectory.java	(revision 826475)
+++ src/java/org/apache/lucene/store/FileSwitchDirectory.java	(working copy)
@@ -18,8 +18,7 @@
  */
 
 import java.io.IOException;
-import java.util.ArrayList;
-import java.util.List;
+
 import java.util.Set;
 
 /**
@@ -39,10 +38,10 @@
 public class FileSwitchDirectory extends Directory {
   private final Directory secondaryDir;
   private final Directory primaryDir;
-  private final Set primaryExtensions;
+  private final Set<String> primaryExtensions;
   private boolean doClose;
 
-  public FileSwitchDirectory(Set primaryExtensions, Directory primaryDir, Directory secondaryDir, boolean doClose) {
+  public FileSwitchDirectory(Set<String> primaryExtensions, Directory primaryDir, Directory secondaryDir, boolean doClose) {
     this.primaryExtensions = primaryExtensions;
     this.primaryDir = primaryDir;
     this.secondaryDir = secondaryDir;
Index: src/java/org/apache/lucene/store/FSDirectory.java
===================================================================
--- src/java/org/apache/lucene/store/FSDirectory.java	(revision 826475)
+++ src/java/org/apache/lucene/store/FSDirectory.java	(working copy)
@@ -19,14 +19,10 @@
 
 import java.io.File;
 import java.io.FilenameFilter;
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.RandomAccessFile;
 import java.security.MessageDigest;
 import java.security.NoSuchAlgorithmException;
-import java.util.HashMap;
-import java.util.Map;
 
 import org.apache.lucene.util.Constants;
 
