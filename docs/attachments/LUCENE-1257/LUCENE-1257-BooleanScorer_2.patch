Index: src/java/org/apache/lucene/search/BooleanScorer2.java
===================================================================
--- src/java/org/apache/lucene/search/BooleanScorer2.java	(revision 826193)
+++ src/java/org/apache/lucene/search/BooleanScorer2.java	(working copy)
@@ -31,9 +31,9 @@
  */
 class BooleanScorer2 extends Scorer {
   
-  private final List requiredScorers;
-  private final List optionalScorers;
-  private final List prohibitedScorers;
+  private final List<Scorer> requiredScorers;
+  private final List<Scorer> optionalScorers;
+  private final List<Scorer> prohibitedScorers;
 
   private class Coordinator {
     float[] coordFactors = null;
@@ -81,7 +81,7 @@
    *          the list of optional scorers.
    */
   public BooleanScorer2(Similarity similarity, int minNrShouldMatch,
-      List required, List prohibited, List optional) throws IOException {
+      List<Scorer> required, List<Scorer> prohibited, List<Scorer> optional) throws IOException {
     super(similarity);
     if (minNrShouldMatch < 0) {
       throw new IllegalArgumentException("Minimum number of optional scorers should not be negative");
@@ -138,7 +138,7 @@
     }
   }
 
-  private Scorer countingDisjunctionSumScorer(final List scorers,
+  private Scorer countingDisjunctionSumScorer(final List<Scorer> scorers,
       int minNrShouldMatch) throws IOException {
     // each scorer from the list counted as a single matcher
     return new DisjunctionSumScorer(scorers, minNrShouldMatch) {
@@ -162,7 +162,7 @@
 
   private static final Similarity defaultSimilarity = Similarity.getDefault();
 
-  private Scorer countingConjunctionSumScorer(List requiredScorers) throws IOException {
+  private Scorer countingConjunctionSumScorer(List<Scorer> requiredScorers) throws IOException {
     // each scorer from the list counted as a single matcher
     final int requiredNrMatchers = requiredScorers.size();
     return new ConjunctionScorer(defaultSimilarity, requiredScorers) {
@@ -220,7 +220,7 @@
 
   private Scorer makeCountingSumScorerSomeReq() throws IOException { // At least one required scorer.
     if (optionalScorers.size() == minNrShouldMatch) { // all optional scorers also required.
-      ArrayList allReq = new ArrayList(requiredScorers);
+      ArrayList<Scorer> allReq = new ArrayList<Scorer>(requiredScorers);
       allReq.addAll(optionalScorers);
       return addProhibitedScorers(countingConjunctionSumScorer(allReq));
     } else { // optionalScorers.size() > minNrShouldMatch, and at least one required scorer
Index: src/java/org/apache/lucene/search/BooleanScorer.java
===================================================================
--- src/java/org/apache/lucene/search/BooleanScorer.java	(revision 826193)
+++ src/java/org/apache/lucene/search/BooleanScorer.java	(working copy)
@@ -18,7 +18,6 @@
  */
 
 import java.io.IOException;
-import java.util.Iterator;
 import java.util.List;
 
 import org.apache.lucene.index.IndexReader;
@@ -182,13 +181,12 @@
   private int doc = -1;
 
   BooleanScorer(Similarity similarity, int minNrShouldMatch,
-      List optionalScorers, List prohibitedScorers) throws IOException {
+      List<Scorer> optionalScorers, List<Scorer> prohibitedScorers) throws IOException {
     super(similarity);
     this.minNrShouldMatch = minNrShouldMatch;
 
     if (optionalScorers != null && optionalScorers.size() > 0) {
-      for (Iterator si = optionalScorers.iterator(); si.hasNext();) {
-        Scorer scorer = (Scorer) si.next();
+      for (Scorer scorer : optionalScorers) {
         maxCoord++;
         if (scorer.nextDoc() != NO_MORE_DOCS) {
           scorers = new SubScorer(scorer, false, false, bucketTable.newCollector(0), scorers);
@@ -197,8 +195,7 @@
     }
     
     if (prohibitedScorers != null && prohibitedScorers.size() > 0) {
-      for (Iterator si = prohibitedScorers.iterator(); si.hasNext();) {
-        Scorer scorer = (Scorer) si.next();
+      for (Scorer scorer : prohibitedScorers) {
         int mask = nextMask;
         nextMask = nextMask << 1;
         prohibitedMask |= mask;                     // update prohibited mask
