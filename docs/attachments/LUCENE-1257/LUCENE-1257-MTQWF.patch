Index: src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter.java
===================================================================
--- src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter.java	(revision 826788)
+++ src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter.java	(working copy)
@@ -39,14 +39,14 @@
  * {@link MultiTermQuery#CONSTANT_SCORE_FILTER_REWRITE};
  * this is why it is not abstract.
  */
-public class MultiTermQueryWrapperFilter extends Filter {
+public class MultiTermQueryWrapperFilter<Q extends MultiTermQuery> extends Filter {
     
-  protected final MultiTermQuery query;
+  protected final Q query;
 
   /**
    * Wrap a {@link MultiTermQuery} as a Filter.
    */
-  protected MultiTermQueryWrapperFilter(MultiTermQuery query) {
+  protected MultiTermQueryWrapperFilter(Q query) {
       this.query = query;
   }
   
Index: src/java/org/apache/lucene/search/NumericRangeFilter.java
===================================================================
--- src/java/org/apache/lucene/search/NumericRangeFilter.java	(revision 826788)
+++ src/java/org/apache/lucene/search/NumericRangeFilter.java	(working copy)
@@ -45,7 +45,7 @@
  *
  * @since 2.9
  **/
-public final class NumericRangeFilter<T extends Number> extends MultiTermQueryWrapperFilter {
+public final class NumericRangeFilter<T extends Number> extends MultiTermQueryWrapperFilter<NumericRangeQuery<T>> {
 
   private NumericRangeFilter(final NumericRangeQuery<T> query) {
     super(query);
@@ -172,23 +172,18 @@
   }
   
   /** Returns the field name for this filter */
-  @SuppressWarnings("unchecked")
-  public String getField() { return ((NumericRangeQuery<T>)query).getField(); }
+  public String getField() { return query.getField(); }
 
   /** Returns <code>true</code> if the lower endpoint is inclusive */
-  @SuppressWarnings("unchecked")
-  public boolean includesMin() { return ((NumericRangeQuery<T>)query).includesMin(); }
+  public boolean includesMin() { return query.includesMin(); }
   
   /** Returns <code>true</code> if the upper endpoint is inclusive */
-  @SuppressWarnings("unchecked")
-  public boolean includesMax() { return ((NumericRangeQuery<T>)query).includesMax(); }
+  public boolean includesMax() { return query.includesMax(); }
 
   /** Returns the lower value of this range filter */
-  @SuppressWarnings("unchecked")
-  public T getMin() { return ((NumericRangeQuery<T>)query).getMin(); }
+  public T getMin() { return query.getMin(); }
 
   /** Returns the upper value of this range filter */
-  @SuppressWarnings("unchecked")
-  public T getMax() { return ((NumericRangeQuery<T>)query).getMax(); }
+  public T getMax() { return query.getMax(); }
   
 }
Index: src/java/org/apache/lucene/search/PrefixFilter.java
===================================================================
--- src/java/org/apache/lucene/search/PrefixFilter.java	(revision 826788)
+++ src/java/org/apache/lucene/search/PrefixFilter.java	(working copy)
@@ -23,13 +23,13 @@
  * A Filter that restricts search results to values that have a matching prefix in a given
  * field.
  */
-public class PrefixFilter extends MultiTermQueryWrapperFilter {
+public class PrefixFilter extends MultiTermQueryWrapperFilter<PrefixQuery> {
 
   public PrefixFilter(Term prefix) {
     super(new PrefixQuery(prefix));
   }
 
-  public Term getPrefix() { return ((PrefixQuery)query).getPrefix(); }
+  public Term getPrefix() { return query.getPrefix(); }
 
   /** Prints a user-readable version of this query. */
   public String toString () {
Index: src/java/org/apache/lucene/search/TermRangeFilter.java
===================================================================
--- src/java/org/apache/lucene/search/TermRangeFilter.java	(revision 826788)
+++ src/java/org/apache/lucene/search/TermRangeFilter.java	(working copy)
@@ -32,7 +32,7 @@
  * same field, {@link FieldCacheRangeFilter} may have significantly better performance. 
  * @since 2.9
  */
-public class TermRangeFilter extends MultiTermQueryWrapperFilter {
+public class TermRangeFilter extends MultiTermQueryWrapperFilter<TermRangeQuery> {
     
   /**
    * @param fieldName The field this range applies to
@@ -89,20 +89,20 @@
   }
 
   /** Returns the field name for this filter */
-  public String getField() { return ((TermRangeQuery) query).getField(); }
+  public String getField() { return query.getField(); }
   
   /** Returns the lower value of this range filter */
-  public String getLowerTerm() { return ((TermRangeQuery) query).getLowerTerm(); }
+  public String getLowerTerm() { return query.getLowerTerm(); }
 
   /** Returns the upper value of this range filter */
-  public String getUpperTerm() { return ((TermRangeQuery) query).getUpperTerm(); }
+  public String getUpperTerm() { return query.getUpperTerm(); }
   
   /** Returns <code>true</code> if the lower endpoint is inclusive */
-  public boolean includesLower() { return ((TermRangeQuery) query).includesLower(); }
+  public boolean includesLower() { return query.includesLower(); }
   
   /** Returns <code>true</code> if the upper endpoint is inclusive */
-  public boolean includesUpper() { return ((TermRangeQuery) query).includesUpper(); }
+  public boolean includesUpper() { return query.includesUpper(); }
 
   /** Returns the collator used to determine range inclusion, if any. */
-  public Collator getCollator() { return ((TermRangeQuery) query).getCollator(); }
+  public Collator getCollator() { return query.getCollator(); }
 }
