Index: src/test/org/apache/lucene/index/TestIndexReaderClone.java
===================================================================
--- src/test/org/apache/lucene/index/TestIndexReaderClone.java	(revision 826459)
+++ src/test/org/apache/lucene/index/TestIndexReaderClone.java	(working copy)
@@ -335,7 +335,7 @@
     origSegmentReader.close();
     assertDelDocsRefCountEquals(1, origSegmentReader);
     // check the norm refs
-    Norm norm = (Norm) clonedSegmentReader.norms.get("field1");
+    Norm norm = clonedSegmentReader.norms.get("field1");
     assertEquals(1, norm.bytesRef().refCount());
     clonedSegmentReader.close();
     dir1.close();
Index: src/test/org/apache/lucene/index/TestIndexReaderCloneNorms.java
===================================================================
--- src/test/org/apache/lucene/index/TestIndexReaderCloneNorms.java	(revision 826459)
+++ src/test/org/apache/lucene/index/TestIndexReaderCloneNorms.java	(working copy)
@@ -170,7 +170,7 @@
     TestIndexReaderReopen.createIndex(dir1, false);
     SegmentReader reader1 = SegmentReader.getOnlySegmentReader(dir1);
     reader1.norms("field1");
-    Norm r1norm = (Norm)reader1.norms.get("field1");
+    Norm r1norm = reader1.norms.get("field1");
     SegmentReader.Ref r1BytesRef = r1norm.bytesRef();
     SegmentReader reader2 = (SegmentReader)reader1.clone();
     assertEquals(2, r1norm.bytesRef().refCount());
@@ -189,14 +189,14 @@
     IndexReader reader2C = (IndexReader) reader1.clone();
     SegmentReader segmentReader2C = SegmentReader.getOnlySegmentReader(reader2C);
     segmentReader2C.norms("field1"); // load the norms for the field
-    Norm reader2CNorm = (Norm)segmentReader2C.norms.get("field1");
+    Norm reader2CNorm = segmentReader2C.norms.get("field1");
     assertTrue("reader2CNorm.bytesRef()=" + reader2CNorm.bytesRef(), reader2CNorm.bytesRef().refCount() == 2);
     
     
     
     IndexReader reader3C = (IndexReader) reader2C.clone();
     SegmentReader segmentReader3C = SegmentReader.getOnlySegmentReader(reader3C);
-    Norm reader3CCNorm = (Norm)segmentReader3C.norms.get("field1");
+    Norm reader3CCNorm = segmentReader3C.norms.get("field1");
     assertEquals(3, reader3CCNorm.bytesRef().refCount());
     
     // edit a norm and the refcount should be 1
@@ -215,13 +215,13 @@
     
     // norm values should be different 
     assertTrue(Similarity.decodeNorm(segmentReader3C.norms("field1")[5]) != Similarity.decodeNorm(segmentReader4C.norms("field1")[5]));
-    Norm reader4CCNorm = (Norm)segmentReader4C.norms.get("field1");
+    Norm reader4CCNorm = segmentReader4C.norms.get("field1");
     assertEquals(3, reader3CCNorm.bytesRef().refCount());
     assertEquals(1, reader4CCNorm.bytesRef().refCount());
         
     IndexReader reader5C = (IndexReader) reader4C.clone();
     SegmentReader segmentReader5C = SegmentReader.getOnlySegmentReader(reader5C);
-    Norm reader5CCNorm = (Norm)segmentReader5C.norms.get("field1");
+    Norm reader5CCNorm = segmentReader5C.norms.get("field1");
     reader5C.setNorm(5, "field1", 0.7f);
     assertEquals(1, reader5CCNorm.bytesRef().refCount());    
 
Index: src/java/org/apache/lucene/index/SegmentReader.java
===================================================================
--- src/java/org/apache/lucene/index/SegmentReader.java	(revision 826459)
+++ src/java/org/apache/lucene/index/SegmentReader.java	(working copy)
@@ -1031,7 +1031,7 @@
 
   // can return null if norms aren't stored
   protected synchronized byte[] getNorms(String field) throws IOException {
-    Norm norm = (Norm) norms.get(field);
+    Norm norm = norms.get(field);
     if (norm == null) return null;  // not indexed, or norms not stored
     return norm.bytes();
   }
@@ -1045,7 +1045,7 @@
 
   protected void doSetNorm(int doc, String field, byte value)
           throws IOException {
-    Norm norm = (Norm) norms.get(field);
+    Norm norm = norms.get(field);
     if (norm == null)                             // not an indexed field
       return;
 
@@ -1058,7 +1058,7 @@
     throws IOException {
 
     ensureOpen();
-    Norm norm = (Norm) norms.get(field);
+    Norm norm = norms.get(field);
     if (norm == null) {
       Arrays.fill(bytes, offset, bytes.length, DefaultSimilarity.encodeNorm(1.0f));
       return;
Index: src/java/org/apache/lucene/index/IndexFileDeleter.java
===================================================================
--- src/java/org/apache/lucene/index/IndexFileDeleter.java	(revision 826459)
+++ src/java/org/apache/lucene/index/IndexFileDeleter.java	(working copy)
@@ -24,7 +24,7 @@
 import java.io.PrintStream;
 import java.util.Map;
 import java.util.HashMap;
-import java.util.Iterator;
+
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -72,12 +72,12 @@
   /* Files that we tried to delete but failed (likely
    * because they are open and we are running on Windows),
    * so we will retry them again later: */
-  private List deletable;
+  private List<String> deletable;
 
   /* Reference count for all files in the index.  
    * Counts how many existing commits reference a file.
-   * Maps String to RefCount (class below) instances: */
-  private Map refCounts = new HashMap();
+   **/
+  private Map<String, RefCount> refCounts = new HashMap<String, RefCount>();
 
   /* Holds all commits (segments_N) currently in the index.
    * This will have just 1 commit if you are using the
@@ -88,7 +88,7 @@
 
   /* Holds files we had incref'd from the previous
    * non-commit checkpoint: */
-  private List lastFiles = new ArrayList();
+  private List<Collection<String>> lastFiles = new ArrayList<Collection<String>>();
 
   /* Commits that the IndexDeletionPolicy have decided to delete: */ 
   private List commitsToDelete = new ArrayList();
@@ -217,10 +217,9 @@
     // Now delete anything with ref count at 0.  These are
     // presumably abandoned files eg due to crash of
     // IndexWriter.
-    Iterator it = refCounts.keySet().iterator();
-    while(it.hasNext()) {
-      String fileName = (String) it.next();
-      RefCount rc = (RefCount) refCounts.get(fileName);
+    for(Map.Entry<String, RefCount> entry : refCounts.entrySet() ) {  
+      RefCount rc = entry.getValue();
+      final String fileName = entry.getKey();
       if (0 == rc.count) {
         if (infoStream != null) {
           message("init: removing unreferenced file \"" + fileName + "\"");
@@ -259,9 +258,8 @@
         if (infoStream != null) {
           message("deleteCommits: now decRef commit \"" + commit.getSegmentsFileName() + "\"");
         }
-        Iterator it = commit.files.iterator();
-        while(it.hasNext()) {
-          decRef((String) it.next());
+        for (final String file : commit.files) {
+          decRef(file);
         }
       }
       commitsToDelete.clear();
@@ -333,7 +331,7 @@
     int size = lastFiles.size();
     if (size > 0) {
       for(int i=0;i<size;i++)
-        decRef((Collection) lastFiles.get(i));
+        decRef(lastFiles.get(i));
       lastFiles.clear();
     }
 
@@ -342,13 +340,13 @@
 
   private void deletePendingFiles() throws IOException {
     if (deletable != null) {
-      List oldDeletable = deletable;
+      List<String> oldDeletable = deletable;
       deletable = null;
       int size = oldDeletable.size();
       for(int i=0;i<size;i++) {
         if (infoStream != null)
           message("delete pending file " + oldDeletable.get(i));
-        deleteFile((String) oldDeletable.get(i));
+        deleteFile(oldDeletable.get(i));
       }
     }
   }
@@ -397,7 +395,7 @@
       deleteCommits();
     } else {
 
-      final List docWriterFiles;
+      final List<String> docWriterFiles;
       if (docWriter != null) {
         docWriterFiles = docWriter.openFiles();
         if (docWriterFiles != null)
@@ -412,7 +410,7 @@
       int size = lastFiles.size();
       if (size > 0) {
         for(int i=0;i<size;i++)
-          decRef((Collection) lastFiles.get(i));
+          decRef(lastFiles.get(i));
         lastFiles.clear();
       }
 
@@ -427,16 +425,14 @@
   void incRef(SegmentInfos segmentInfos, boolean isCommit) throws IOException {
      // If this is a commit point, also incRef the
      // segments_N file:
-    Iterator it = segmentInfos.files(directory, isCommit).iterator();
-    while(it.hasNext()) {
-      incRef((String) it.next());
+    for( final String fileName: segmentInfos.files(directory, isCommit) ) {
+      incRef(fileName);
     }
   }
 
-  void incRef(List files) throws IOException {
-    int size = files.size();
-    for(int i=0;i<size;i++) {
-      incRef((String) files.get(i));
+  void incRef(List<String> files) throws IOException {
+    for(final String file : files) {
+      incRef(file);
     }
   }
 
@@ -448,10 +444,9 @@
     rc.IncRef();
   }
 
-  void decRef(Collection files) throws IOException {
-    Iterator it = files.iterator();
-    while(it.hasNext()) {
-      decRef((String) it.next());
+  void decRef(Collection<String> files) throws IOException {
+    for(final String file : files) {
+      decRef(file);
     }
   }
 
@@ -469,9 +464,8 @@
   }
 
   void decRef(SegmentInfos segmentInfos) throws IOException {
-    Iterator it = segmentInfos.files(directory, false).iterator();
-    while(it.hasNext()) {
-      decRef((String) it.next());
+    for (final String file : segmentInfos.files(directory, false)) {
+      decRef(file);
     }
   }
 
@@ -481,23 +475,20 @@
       rc = new RefCount(fileName);
       refCounts.put(fileName, rc);
     } else {
-      rc = (RefCount) refCounts.get(fileName);
+      rc = refCounts.get(fileName);
     }
     return rc;
   }
 
-  void deleteFiles(List files) throws IOException {
-    final int size = files.size();
-    for(int i=0;i<size;i++)
-      deleteFile((String) files.get(i));
+  void deleteFiles(List<String> files) throws IOException {
+    for(final String file: files)
+      deleteFile(file);
   }
 
   /** Deletes the specified files, but only if they are new
    *  (have not yet been incref'd). */
-  void deleteNewFiles(Collection files) throws IOException {
-    final Iterator it = files.iterator();
-    while(it.hasNext()) {
-      final String fileName = (String) it.next();
+  void deleteNewFiles(Collection<String> files) throws IOException {
+    for (final String fileName: files) {
       if (!refCounts.containsKey(fileName))
         deleteFile(fileName);
     }
@@ -524,7 +515,7 @@
           message("IndexFileDeleter: unable to remove file \"" + fileName + "\": " + e.toString() + "; Will re-try later.");
         }
         if (deletable == null) {
-          deletable = new ArrayList();
+          deletable = new ArrayList<String>();
         }
         deletable.add(fileName);                  // add to deletable
       }
@@ -574,13 +565,13 @@
     String segmentsFileName;
     boolean deleted;
     Directory directory;
-    Collection commitsToDelete;
+    Collection<IndexCommit> commitsToDelete;
     long version;
     long generation;
     final boolean isOptimized;
-    final Map userData;
+    final Map<String,String> userData;
 
-    public CommitPoint(Collection commitsToDelete, Directory directory, SegmentInfos segmentInfos) throws IOException {
+    public CommitPoint(Collection<IndexCommit> commitsToDelete, Directory directory, SegmentInfos segmentInfos) throws IOException {
       this.directory = directory;
       this.commitsToDelete = commitsToDelete;
       userData = segmentInfos.getUserData();
@@ -618,7 +609,7 @@
       return generation;
     }
 
-    public Map getUserData() {
+    public Map<String,String> getUserData() {
       return userData;
     }
 
Index: src/java/org/apache/lucene/index/IndexFileNameFilter.java
===================================================================
--- src/java/org/apache/lucene/index/IndexFileNameFilter.java	(revision 826459)
+++ src/java/org/apache/lucene/index/IndexFileNameFilter.java	(working copy)
@@ -27,16 +27,16 @@
 public class IndexFileNameFilter implements FilenameFilter {
 
   private static IndexFileNameFilter singleton = new IndexFileNameFilter();
-  private HashSet extensions;
-  private HashSet extensionsInCFS;
+  private HashSet<String> extensions;
+  private HashSet<String> extensionsInCFS;
 
   // Prevent instantiation.
   private IndexFileNameFilter() {
-    extensions = new HashSet();
+    extensions = new HashSet<String>();
     for (int i = 0; i < IndexFileNames.INDEX_EXTENSIONS.length; i++) {
       extensions.add(IndexFileNames.INDEX_EXTENSIONS[i]);
     }
-    extensionsInCFS = new HashSet();
+    extensionsInCFS = new HashSet<String>();
     for (int i = 0; i < IndexFileNames.INDEX_EXTENSIONS_IN_COMPOUND_FILE.length; i++) {
       extensionsInCFS.add(IndexFileNames.INDEX_EXTENSIONS_IN_COMPOUND_FILE[i]);
     }
Index: src/java/org/apache/lucene/index/NormsWriter.java
===================================================================
--- src/java/org/apache/lucene/index/NormsWriter.java	(revision 826459)
+++ src/java/org/apache/lucene/index/NormsWriter.java	(working copy)
@@ -46,7 +46,7 @@
   public void abort() {}
 
   // We only write the _X.nrm file at flush
-  void files(Collection files) {}
+  void files(Collection<String> files) {}
 
   void setFieldInfos(FieldInfos fieldInfos) {
     this.fieldInfos = fieldInfos;
