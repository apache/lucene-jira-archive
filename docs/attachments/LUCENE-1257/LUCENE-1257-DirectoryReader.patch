Index: src/java/org/apache/lucene/index/DirectoryReader.java
===================================================================
--- src/java/org/apache/lucene/index/DirectoryReader.java	(revision 826275)
+++ src/java/org/apache/lucene/index/DirectoryReader.java	(working copy)
@@ -25,7 +25,7 @@
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.HashSet;
-import java.util.Iterator;
+
 import java.util.Map;
 import java.util.Set;
 
@@ -47,7 +47,7 @@
   IndexWriter writer;
 
   private IndexDeletionPolicy deletionPolicy;
-  private final HashSet synced = new HashSet();
+  private final HashSet<String> synced = new HashSet<String>();
   private Lock writeLock;
   private SegmentInfos segmentInfos;
   private SegmentInfos segmentInfosStart;
@@ -59,7 +59,7 @@
 
   private SegmentReader[] subReaders;
   private int[] starts;                           // 1st docno for each segment
-  private Map normsCache = new HashMap();
+  private Map<String, byte[]> normsCache = new HashMap<String, byte[]>();
   private int maxDoc = 0;
   private int numDocs = -1;
   private boolean hasDeletions = false;
@@ -177,7 +177,7 @@
 
   /** This constructor is only used for {@link #reopen()} */
   DirectoryReader(Directory directory, SegmentInfos infos, SegmentReader[] oldReaders, int[] oldStarts,
-                  Map oldNormsCache, boolean readOnly, boolean doClone, int termInfosIndexDivisor) throws IOException {
+                  Map<String, byte[]> oldNormsCache, boolean readOnly, boolean doClone, int termInfosIndexDivisor) throws IOException {
     this.directory = directory;
     this.readOnly = readOnly;
     this.segmentInfos = infos;
@@ -190,7 +190,7 @@
 
     // we put the old SegmentReaders in a map, that allows us
     // to lookup a reader using its segment name
-    Map segmentReaders = new HashMap();
+    Map<String, Integer> segmentReaders = new HashMap<String, Integer>();
 
     if (oldReaders != null) {
       // create a Map SegmentName->SegmentReader
@@ -267,9 +267,7 @@
     
     // try to copy unchanged norms from the old normsCache to the new one
     if (oldNormsCache != null) {
-      Iterator it = oldNormsCache.entrySet().iterator();
-      while (it.hasNext()) {
-        Map.Entry entry = (Map.Entry) it.next();
+      for (Map.Entry<String, byte[]> entry: oldNormsCache.entrySet()) {
         String field = (String) entry.getKey();
         if (!hasNorms(field)) {
           continue;
@@ -681,7 +679,7 @@
    *
    * @throws IOException if there is a low-level IO error
    */
-  protected void doCommit(Map commitUserData) throws IOException {
+  protected void doCommit(Map<String, String> commitUserData) throws IOException {
     if (hasChanges) {
       segmentInfos.setUserData(commitUserData);
       // Default deleter (for backwards compatibility) is
@@ -700,9 +698,8 @@
           subReaders[i].commit();
 
         // Sync all files we just wrote
-        Iterator it = segmentInfos.files(directory, false).iterator();
-        while (it.hasNext()) {
-          final String fileName = (String) it.next();
+        Collection<String> files = segmentInfos.files(directory, false);
+        for (final String fileName : files) { 
           if (!synced.contains(fileName)) {
             assert directory.fileExists(fileName);
             directory.sync(fileName);
@@ -766,7 +763,7 @@
     }
   }
 
-  public Map getCommitUserData() {
+  public Map<String, String> getCommitUserData() {
     ensureOpen();
     return segmentInfos.getUserData();
   }
@@ -796,17 +793,16 @@
     if (ioe != null) throw ioe;
   }
 
-  public Collection getFieldNames (IndexReader.FieldOption fieldNames) {
+  public Collection<String> getFieldNames (IndexReader.FieldOption fieldNames) {
     ensureOpen();
     return getFieldNames(fieldNames, this.subReaders);
   }
   
-  static Collection getFieldNames (IndexReader.FieldOption fieldNames, IndexReader[] subReaders) {
+  static Collection<String> getFieldNames (IndexReader.FieldOption fieldNames, IndexReader[] subReaders) {
     // maintain a unique set of field names
-    Set fieldSet = new HashSet();
-    for (int i = 0; i < subReaders.length; i++) {
-      IndexReader reader = subReaders[i];
-      Collection names = reader.getFieldNames(fieldNames);
+    Set<String> fieldSet = new HashSet<String>();
+    for (IndexReader reader : subReaders) {
+      Collection<String> names = reader.getFieldNames(fieldNames);
       fieldSet.addAll(names);
     }
     return fieldSet;
@@ -838,10 +834,10 @@
   }
 
   /** @see org.apache.lucene.index.IndexReader#listCommits */
-  public static Collection listCommits(Directory dir) throws IOException {
+  public static Collection<IndexCommit> listCommits(Directory dir) throws IOException {
     final String[] files = dir.listAll();
 
-    Collection commits = new ArrayList();
+    Collection<IndexCommit> commits = new ArrayList<IndexCommit>();
 
     SegmentInfos latest = new SegmentInfos();
     latest.read(dir);
@@ -883,12 +879,12 @@
 
   private static final class ReaderCommit extends IndexCommit {
     private String segmentsFileName;
-    Collection files;
+    Collection<String> files;
     Directory dir;
     long generation;
     long version;
     final boolean isOptimized;
-    final Map userData;
+    final Map<String, String> userData;
 
     ReaderCommit(SegmentInfos infos, Directory dir) throws IOException {
       segmentsFileName = infos.getCurrentSegmentFileName();
@@ -908,7 +904,7 @@
       return segmentsFileName;
     }
 
-    public Collection getFileNames() {
+    public Collection<String> getFileNames() {
       return files;
     }
 
@@ -928,7 +924,7 @@
       return false;
     }
 
-    public Map getUserData() {
+    public Map<String, String> getUserData() {
       return userData;
     }
   }
Index: src/java/org/apache/lucene/index/IndexReader.java
===================================================================
--- src/java/org/apache/lucene/index/IndexReader.java	(revision 826275)
+++ src/java/org/apache/lucene/index/IndexReader.java	(working copy)
@@ -463,7 +463,7 @@
    *
    * @see #getCommitUserData()
    */
-  public static Map getCommitUserData(Directory directory) throws CorruptIndexException, IOException {
+  public static Map<String, String> getCommitUserData(Directory directory) throws CorruptIndexException, IOException {
     return SegmentInfos.readCurrentUserData(directory);
   }
 
@@ -503,7 +503,7 @@
    *
    * @see #getCommitUserData(Directory)
    */
-  public Map getCommitUserData() {
+  public Map<String, String> getCommitUserData() {
     throw new UnsupportedOperationException("This reader does not support this method.");
   }
 
@@ -944,7 +944,7 @@
    *  IndexReader#getCommitUserData}.
    * @throws IOException
    */
-  public final synchronized void flush(Map commitUserData) throws IOException {
+  public final synchronized void flush(Map<String, String> commitUserData) throws IOException {
     ensureOpen();
     commit(commitUserData);
   }
@@ -971,7 +971,7 @@
    * (transactional semantics).
    * @throws IOException if there is a low-level IO error
    */
-  protected final synchronized void commit(Map commitUserData) throws IOException {
+  protected final synchronized void commit(Map<String, String> commitUserData) throws IOException {
     if (hasChanges) {
       doCommit(commitUserData);
     }
@@ -980,7 +980,7 @@
 
   /** Implements commit.  NOTE: subclasses should override
    *  this.  In 3.0 this will become an abstract method. */
-  protected abstract void doCommit(Map commitUserData) throws IOException;
+  protected abstract void doCommit(Map<String, String> commitUserData) throws IOException;
 
   /**
    * Closes files associated with this index.
@@ -1006,7 +1006,7 @@
    * @return Collection of Strings indicating the names of the fields.
    * @see IndexReader.FieldOption
    */
-  public abstract Collection getFieldNames(FieldOption fldOption);
+  public abstract Collection<String> getFieldNames(FieldOption fldOption);
 
   /**
    * Expert: return the IndexCommit that this reader has
@@ -1111,7 +1111,7 @@
    *  java.io.IOException}.  Note that if a commit is in
    *  progress while this method is running, that commit
    *  may or may not be returned array.  */
-  public static Collection listCommits(Directory dir) throws IOException {
+  public static Collection<IndexCommit> listCommits(Directory dir) throws IOException {
     return DirectoryReader.listCommits(dir);
   }
 
