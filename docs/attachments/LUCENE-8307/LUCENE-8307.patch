diff --git a/lucene/core/src/java/org/apache/lucene/store/FileSwitchDirectory.java b/lucene/core/src/java/org/apache/lucene/store/FileSwitchDirectory.java
index b2d9452..4b59f42 100644
--- a/lucene/core/src/java/org/apache/lucene/store/FileSwitchDirectory.java
+++ b/lucene/core/src/java/org/apache/lucene/store/FileSwitchDirectory.java
@@ -205,6 +205,6 @@ public class FileSwitchDirectory extends Directory {
 
   @Override
   public boolean checkPendingDeletions() throws IOException {
-    return primaryDir.checkPendingDeletions() && secondaryDir.checkPendingDeletions();
+    return primaryDir.checkPendingDeletions() || secondaryDir.checkPendingDeletions();
   }
 }
diff --git a/lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory.java b/lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory.java
index 5c89786..fe4054d 100644
--- a/lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory.java
+++ b/lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory.java
@@ -19,6 +19,7 @@ package org.apache.lucene.store;
 
 import java.io.IOException;
 import java.nio.file.Path;
+import java.util.Collection;
 import java.util.Collections;
 import java.util.HashSet;
 import java.util.Set;
@@ -131,4 +132,91 @@ public class TestFileSwitchDirectory extends BaseDirectoryTestCase {
     }
     return newFSSwitchDirectory(extensions);
   }
+
+  private static class DummyDirectory extends Directory {
+
+    public boolean hasPendingDeletions;
+
+    void setHasPendingDeletions(boolean v) {
+      hasPendingDeletions = v;
+    }
+
+    @Override
+    public boolean checkPendingDeletions() throws IOException {
+      return hasPendingDeletions;
+    }
+
+    @Override
+    public String[] listAll() throws IOException {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public void deleteFile(String name) throws IOException {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public long fileLength(String name) throws IOException {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public IndexOutput createOutput(String name, IOContext context) throws IOException {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public IndexOutput createTempOutput(String prefix, String suffix, IOContext context) throws IOException {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public void sync(Collection<String> names) throws IOException {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public void rename(String source, String dest) throws IOException {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public void syncMetaData() throws IOException {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public IndexInput openInput(String name, IOContext context) throws IOException {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public Lock obtainLock(String name) throws IOException {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public void close() throws IOException {
+      throw new UnsupportedOperationException();
+    }
+
+  }
+
+  public void testCheckPendingDeletions() throws IOException {
+    DummyDirectory dir1 = new DummyDirectory();
+    DummyDirectory dir2 = new DummyDirectory();
+    FileSwitchDirectory dir = new FileSwitchDirectory(Collections.singleton("foo"), dir1, dir2, true);
+
+    assertFalse(dir.checkPendingDeletions());
+
+    dir1.setHasPendingDeletions(true);
+    assertTrue(dir.checkPendingDeletions());
+
+    dir2.setHasPendingDeletions(true);
+    assertTrue(dir.checkPendingDeletions());
+
+    dir1.setHasPendingDeletions(false);
+    assertTrue(dir.checkPendingDeletions());
+  }
 }
