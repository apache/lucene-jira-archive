Index: core/src/java/org/apache/lucene/util/automaton/Automaton.java
===================================================================
--- core/src/java/org/apache/lucene/util/automaton/Automaton.java	(revision 1625606)
+++ core/src/java/org/apache/lucene/util/automaton/Automaton.java	(working copy)
@@ -334,6 +334,18 @@
     }
   }
 
+  /**
+   * Grow transitions to be able to hold numTransistions.
+   *
+   * @param numTransistions
+   *           Number of transitions to hold.
+   */
+  private void growTransitions(int numTransistions) {
+    if (numTransistions*3 >= transitions.length) {
+      transitions = ArrayUtil.grow(transitions, numTransistions*3);
+    }
+  }
+
   private void growTransitions() {
     if (nextTransition+3 >= transitions.length) {
       transitions = ArrayUtil.grow(transitions, nextTransition+3);
@@ -712,22 +724,17 @@
     /** Compiles all added states and transitions into a new {@code Automaton}
      *  and returns it. */
     public Automaton finish() {
-      //System.out.println("LA.Builder.finish: count=" + (nextTransition/4));
-      // TODO: we could make this more efficient,
-      // e.g. somehow xfer the int[] to the automaton, or
-      // alloc exactly the right size from the automaton
-      //System.out.println("finish pending");
-      sorter.sort(0, nextTransition/4);
-      int upto = 0;
-      while (upto < nextTransition) {
+      int numTransitions = nextTransition/4;
+      sorter.sort(0, numTransitions);
+      a.growTransitions(numTransitions);
+      for (int upto = 0; upto < nextTransition; upto += 4) {
         a.addTransition(transitions[upto],
                         transitions[upto+1],
                         transitions[upto+2],
                         transitions[upto+3]);
-        upto += 4;
       }
+      a.finishState();
 
-      a.finishState();
       return a;
     }
 
