Index: lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase.java
===================================================================
--- lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase.java	(revision 1209643)
+++ lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase.java	(working copy)
@@ -40,6 +40,7 @@
 import org.apache.lucene.index.*;
 import org.apache.lucene.index.codecs.Codec;
 import org.apache.lucene.index.codecs.PostingsFormat;
+import org.apache.lucene.index.codecs.appending.AppendingCodec;
 import org.apache.lucene.index.codecs.lucene40.Lucene40Codec;
 import org.apache.lucene.index.codecs.preflexrw.PreFlexRWCodec;
 import org.apache.lucene.index.codecs.simpletext.SimpleTextCodec;
@@ -282,6 +283,8 @@
       PREFLEX_IMPERSONATION_IS_ACTIVE = true;
     } else if ("SimpleText".equals(TEST_CODEC) || ("random".equals(TEST_CODEC) && randomVal == 9)) {
       codec = new SimpleTextCodec();
+    } else if ("Appending".equals(TEST_CODEC) || ("random".equals(TEST_CODEC) && randomVal == 8)) {
+      codec = new AppendingCodec();
     } else if (!"random".equals(TEST_CODEC)) {
       codec = Codec.forName(TEST_CODEC);
     } else if ("random".equals(TEST_POSTINGSFORMAT)) {
Index: lucene/src/resources/META-INF/services/org.apache.lucene.index.codecs.Codec
===================================================================
--- lucene/src/resources/META-INF/services/org.apache.lucene.index.codecs.Codec	(revision 1209643)
+++ lucene/src/resources/META-INF/services/org.apache.lucene.index.codecs.Codec	(working copy)
@@ -16,3 +16,4 @@
 org.apache.lucene.index.codecs.lucene40.Lucene40Codec
 org.apache.lucene.index.codecs.lucene3x.Lucene3xCodec
 org.apache.lucene.index.codecs.simpletext.SimpleTextCodec
+org.apache.lucene.index.codecs.appending.AppendingCodec
Index: lucene/contrib/misc/src/test/org/apache/lucene/index/codecs/appending/TestAppendingCodec.java
===================================================================
--- lucene/contrib/misc/src/test/org/apache/lucene/index/codecs/appending/TestAppendingCodec.java	(revision 1209643)
+++ lucene/contrib/misc/src/test/org/apache/lucene/index/codecs/appending/TestAppendingCodec.java	(working copy)
@@ -1,165 +0,0 @@
-package org.apache.lucene.index.codecs.appending;
-
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import java.io.IOException;
-import java.util.Random;
-
-import org.apache.lucene.analysis.MockAnalyzer;
-import org.apache.lucene.document.Document;
-import org.apache.lucene.document.FieldType;
-import org.apache.lucene.document.TextField;
-import org.apache.lucene.index.DocsEnum;
-import org.apache.lucene.index.Fields;
-import org.apache.lucene.index.IndexReader;
-import org.apache.lucene.index.IndexWriter;
-import org.apache.lucene.index.IndexWriterConfig;
-import org.apache.lucene.index.TieredMergePolicy;
-import org.apache.lucene.index.MultiFields;
-import org.apache.lucene.index.Terms;
-import org.apache.lucene.index.TermsEnum;
-import org.apache.lucene.index.TermsEnum.SeekStatus;
-import org.apache.lucene.store.Directory;
-import org.apache.lucene.store.IOContext;
-import org.apache.lucene.store.IndexOutput;
-import org.apache.lucene.store.MockDirectoryWrapper;
-import org.apache.lucene.store.RAMDirectory;
-import org.apache.lucene.util.BytesRef;
-import org.apache.lucene.util.LuceneTestCase;
-import org.apache.lucene.util.Version;
-
-public class TestAppendingCodec extends LuceneTestCase {
-  
-    private static class AppendingIndexOutputWrapper extends IndexOutput {
-    IndexOutput wrapped;
-    
-    public AppendingIndexOutputWrapper(IndexOutput wrapped) {
-      this.wrapped = wrapped;
-    }
-
-    @Override
-    public void close() throws IOException {
-      wrapped.close();
-    }
-
-    @Override
-    public void flush() throws IOException {
-      wrapped.flush();
-    }
-
-    @Override
-    public long getFilePointer() {
-      return wrapped.getFilePointer();
-    }
-
-    @Override
-    public long length() throws IOException {
-      return wrapped.length();
-    }
-
-    @Override
-    public void seek(long pos) throws IOException {
-      throw new UnsupportedOperationException("seek() is unsupported");
-    }
-
-    @Override
-    public void writeByte(byte b) throws IOException {
-      wrapped.writeByte(b);
-    }
-
-    @Override
-    public void writeBytes(byte[] b, int offset, int length) throws IOException {
-      wrapped.writeBytes(b, offset, length);
-    }
-    
-  }
-  
-  @SuppressWarnings("serial")
-  private static class AppendingRAMDirectory extends MockDirectoryWrapper {
-
-    public AppendingRAMDirectory(Random random, Directory delegate) {
-      super(random, delegate);
-    }
-
-    @Override
-    public IndexOutput createOutput(String name, IOContext context) throws IOException {
-      return new AppendingIndexOutputWrapper(super.createOutput(name, context));
-    }
-    
-  }
-  
-  private static final String text = "the quick brown fox jumped over the lazy dog";
-
-  public void testCodec() throws Exception {
-    Directory dir = new AppendingRAMDirectory(random, new RAMDirectory());
-    IndexWriterConfig cfg = new IndexWriterConfig(Version.LUCENE_40, new MockAnalyzer(random));
-    
-    cfg.setCodec(new AppendingCodec());
-    ((TieredMergePolicy)cfg.getMergePolicy()).setUseCompoundFile(false);
-    IndexWriter writer = new IndexWriter(dir, cfg);
-    Document doc = new Document();
-    FieldType storedTextType = new FieldType(TextField.TYPE_STORED);
-    storedTextType.setStoreTermVectors(true);
-    storedTextType.setStoreTermVectorPositions(true);
-    storedTextType.setStoreTermVectorOffsets(true);
-    doc.add(newField("f", text, storedTextType));
-    writer.addDocument(doc);
-    writer.commit();
-    writer.addDocument(doc);
-    writer.forceMerge(1);
-    writer.close();
-    IndexReader reader = IndexReader.open(dir, null, true, 1);
-    assertEquals(2, reader.numDocs());
-    Document doc2 = reader.document(0);
-    assertEquals(text, doc2.get("f"));
-    Fields fields = MultiFields.getFields(reader);
-    Terms terms = fields.terms("f");
-    assertNotNull(terms);
-    TermsEnum te = terms.iterator(null);
-    assertEquals(SeekStatus.FOUND, te.seekCeil(new BytesRef("quick")));
-    assertEquals(SeekStatus.FOUND, te.seekCeil(new BytesRef("brown")));
-    assertEquals(SeekStatus.FOUND, te.seekCeil(new BytesRef("fox")));
-    assertEquals(SeekStatus.FOUND, te.seekCeil(new BytesRef("jumped")));
-    assertEquals(SeekStatus.FOUND, te.seekCeil(new BytesRef("over")));
-    assertEquals(SeekStatus.FOUND, te.seekCeil(new BytesRef("lazy")));
-    assertEquals(SeekStatus.FOUND, te.seekCeil(new BytesRef("dog")));
-    assertEquals(SeekStatus.FOUND, te.seekCeil(new BytesRef("the")));
-    DocsEnum de = te.docs(null, null);
-    assertTrue(de.advance(0) != DocsEnum.NO_MORE_DOCS);
-    assertEquals(2, de.freq());
-    assertTrue(de.advance(1) != DocsEnum.NO_MORE_DOCS);
-    assertTrue(de.advance(2) == DocsEnum.NO_MORE_DOCS);
-    reader.close();
-  }
-  
-  public void testCompoundFile() throws Exception {
-    Directory dir = new AppendingRAMDirectory(random, new RAMDirectory());
-    IndexWriterConfig cfg = new IndexWriterConfig(Version.LUCENE_40, new MockAnalyzer(random));
-    TieredMergePolicy mp = new TieredMergePolicy();
-    mp.setUseCompoundFile(true);
-    mp.setNoCFSRatio(1.0);
-    cfg.setMergePolicy(mp);
-    cfg.setCodec(new AppendingCodec());
-    IndexWriter writer = new IndexWriter(dir, cfg);
-    Document doc = new Document();
-    writer.addDocument(doc);
-    writer.close();
-    assertTrue(dir.fileExists("_0.cfs"));
-    dir.close();
-  }
-}
Index: lucene/contrib/misc/src/java/org/apache/lucene/index/codecs/appending/AppendingSegmentInfosFormat.java
===================================================================
--- lucene/contrib/misc/src/java/org/apache/lucene/index/codecs/appending/AppendingSegmentInfosFormat.java	(revision 1209643)
+++ lucene/contrib/misc/src/java/org/apache/lucene/index/codecs/appending/AppendingSegmentInfosFormat.java	(working copy)
@@ -1,30 +0,0 @@
-package org.apache.lucene.index.codecs.appending;
-
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import org.apache.lucene.index.codecs.SegmentInfosWriter;
-import org.apache.lucene.index.codecs.lucene40.Lucene40SegmentInfosFormat;
-
-public class AppendingSegmentInfosFormat extends Lucene40SegmentInfosFormat {
-  private final SegmentInfosWriter writer = new AppendingSegmentInfosWriter();
-
-  @Override
-  public SegmentInfosWriter getSegmentInfosWriter() {
-    return writer;
-  }
-}
Index: lucene/contrib/misc/src/java/org/apache/lucene/index/codecs/appending/AppendingTermsDictWriter.java
===================================================================
--- lucene/contrib/misc/src/java/org/apache/lucene/index/codecs/appending/AppendingTermsDictWriter.java	(revision 1209643)
+++ lucene/contrib/misc/src/java/org/apache/lucene/index/codecs/appending/AppendingTermsDictWriter.java	(working copy)
@@ -1,47 +0,0 @@
-package org.apache.lucene.index.codecs.appending;
-
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import java.io.IOException;
-
-import org.apache.lucene.index.SegmentWriteState;
-import org.apache.lucene.index.codecs.PostingsWriterBase;
-import org.apache.lucene.index.codecs.BlockTermsWriter;
-import org.apache.lucene.index.codecs.TermsIndexWriterBase;
-import org.apache.lucene.store.IndexOutput;
-import org.apache.lucene.util.CodecUtil;
-
-public class AppendingTermsDictWriter extends BlockTermsWriter {
-  final static String CODEC_NAME = "APPENDING_TERMS_DICT";
-
-  public AppendingTermsDictWriter(TermsIndexWriterBase indexWriter,
-                                  SegmentWriteState state, PostingsWriterBase postingsWriter)
-    throws IOException {
-    super(indexWriter, state, postingsWriter);
-  }
-  
-  @Override
-  protected void writeHeader(IndexOutput out) throws IOException {
-    CodecUtil.writeHeader(out, CODEC_NAME, VERSION_CURRENT); 
-  }
-
-  @Override
-  protected void writeTrailer(long dirStart) throws IOException {
-    out.writeLong(dirStart);
-  }
-}
Index: lucene/contrib/misc/src/java/org/apache/lucene/index/codecs/appending/AppendingCodec.java
===================================================================
--- lucene/contrib/misc/src/java/org/apache/lucene/index/codecs/appending/AppendingCodec.java	(revision 1209643)
+++ lucene/contrib/misc/src/java/org/apache/lucene/index/codecs/appending/AppendingCodec.java	(working copy)
@@ -1,80 +0,0 @@
-package org.apache.lucene.index.codecs.appending;
-
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import org.apache.lucene.index.codecs.Codec;
-import org.apache.lucene.index.codecs.DocValuesFormat;
-import org.apache.lucene.index.codecs.FieldInfosFormat;
-import org.apache.lucene.index.codecs.StoredFieldsFormat;
-import org.apache.lucene.index.codecs.PostingsFormat;
-import org.apache.lucene.index.codecs.SegmentInfosFormat;
-import org.apache.lucene.index.codecs.TermVectorsFormat;
-import org.apache.lucene.index.codecs.lucene40.Lucene40Codec;
-import org.apache.lucene.index.codecs.lucene40.Lucene40FieldInfosFormat;
-import org.apache.lucene.index.codecs.lucene40.Lucene40DocValuesFormat;
-import org.apache.lucene.index.codecs.lucene40.Lucene40StoredFieldsFormat;
-import org.apache.lucene.index.codecs.lucene40.Lucene40TermVectorsFormat;
-
-/**
- * This codec extends {@link Lucene40Codec} to work on append-only outputs, such
- * as plain output streams and append-only filesystems.
- * 
- * @lucene.experimental
- */
-public class AppendingCodec extends Codec {
-  public AppendingCodec() {
-    super("Appending");
-  }
-
-  private final PostingsFormat postings = new AppendingPostingsFormat();
-  private final SegmentInfosFormat infos = new AppendingSegmentInfosFormat();
-  private final StoredFieldsFormat fields = new Lucene40StoredFieldsFormat();
-  private final FieldInfosFormat fieldInfos = new Lucene40FieldInfosFormat();
-  private final TermVectorsFormat vectors = new Lucene40TermVectorsFormat();
-  private final DocValuesFormat docValues = new Lucene40DocValuesFormat();
-  
-  @Override
-  public PostingsFormat postingsFormat() {
-    return postings;
-  }
-
-  @Override
-  public StoredFieldsFormat storedFieldsFormat() {
-    return fields;
-  }
-  
-  @Override
-  public TermVectorsFormat termVectorsFormat() {
-    return vectors;
-  }
-
-  @Override
-  public DocValuesFormat docValuesFormat() {
-    return docValues;
-  }
-
-  @Override
-  public SegmentInfosFormat segmentInfosFormat() {
-    return infos;
-  }
-  
-  @Override
-  public FieldInfosFormat fieldInfosFormat() {
-    return fieldInfos;
-  }
-}
Index: lucene/contrib/misc/src/java/org/apache/lucene/index/codecs/appending/AppendingSegmentInfosWriter.java
===================================================================
--- lucene/contrib/misc/src/java/org/apache/lucene/index/codecs/appending/AppendingSegmentInfosWriter.java	(revision 1209643)
+++ lucene/contrib/misc/src/java/org/apache/lucene/index/codecs/appending/AppendingSegmentInfosWriter.java	(working copy)
@@ -1,32 +0,0 @@
-package org.apache.lucene.index.codecs.appending;
-
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import java.io.IOException;
-
-import org.apache.lucene.index.codecs.lucene40.Lucene40SegmentInfosWriter;
-import org.apache.lucene.store.IndexOutput;
-
-public class AppendingSegmentInfosWriter extends Lucene40SegmentInfosWriter {
-
-  @Override
-  public void prepareCommit(IndexOutput segmentOutput) throws IOException {
-    // noop
-  }
-
-}
Index: lucene/contrib/misc/src/java/org/apache/lucene/index/codecs/appending/AppendingTermsIndexWriter.java
===================================================================
--- lucene/contrib/misc/src/java/org/apache/lucene/index/codecs/appending/AppendingTermsIndexWriter.java	(revision 1209643)
+++ lucene/contrib/misc/src/java/org/apache/lucene/index/codecs/appending/AppendingTermsIndexWriter.java	(working copy)
@@ -1,45 +0,0 @@
-package org.apache.lucene.index.codecs.appending;
-
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import java.io.IOException;
-
-import org.apache.lucene.index.SegmentWriteState;
-import org.apache.lucene.index.codecs.FixedGapTermsIndexWriter;
-import org.apache.lucene.store.IndexOutput;
-import org.apache.lucene.util.CodecUtil;
-
-public class AppendingTermsIndexWriter extends FixedGapTermsIndexWriter {
-  final static String CODEC_NAME = "APPENDING_TERMS_INDEX";
-  final static int VERSION_START = 0;
-  final static int VERSION_CURRENT = VERSION_START;
-
-  public AppendingTermsIndexWriter(SegmentWriteState state) throws IOException {
-    super(state);
-  }
-  
-  @Override
-  protected void writeHeader(IndexOutput out) throws IOException {
-    CodecUtil.writeHeader(out, CODEC_NAME, VERSION_CURRENT);    
-  }
-
-  @Override
-  protected void writeTrailer(long dirStart) throws IOException {
-    out.writeLong(dirStart);
-  }
-}
Index: lucene/contrib/misc/src/java/org/apache/lucene/index/codecs/appending/AppendingPostingsFormat.java
===================================================================
--- lucene/contrib/misc/src/java/org/apache/lucene/index/codecs/appending/AppendingPostingsFormat.java	(revision 1209643)
+++ lucene/contrib/misc/src/java/org/apache/lucene/index/codecs/appending/AppendingPostingsFormat.java	(working copy)
@@ -1,128 +0,0 @@
-package org.apache.lucene.index.codecs.appending;
-
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import java.io.IOException;
-import java.util.Set;
-
-import org.apache.lucene.index.SegmentInfo;
-import org.apache.lucene.index.SegmentReadState;
-import org.apache.lucene.index.SegmentWriteState;
-import org.apache.lucene.index.codecs.PostingsFormat;
-import org.apache.lucene.index.codecs.FieldsConsumer;
-import org.apache.lucene.index.codecs.FieldsProducer;
-import org.apache.lucene.index.codecs.FixedGapTermsIndexReader;
-import org.apache.lucene.index.codecs.lucene40.Lucene40PostingsFormat;
-import org.apache.lucene.index.codecs.lucene40.Lucene40PostingsReader;
-import org.apache.lucene.index.codecs.lucene40.Lucene40PostingsWriter;
-import org.apache.lucene.index.codecs.PostingsReaderBase;
-import org.apache.lucene.index.codecs.PostingsWriterBase;
-import org.apache.lucene.index.codecs.BlockTermsReader;
-import org.apache.lucene.index.codecs.TermsIndexReaderBase;
-import org.apache.lucene.store.Directory;
-import org.apache.lucene.util.BytesRef;
-
-/**
- * Appending postings impl
- */
-class AppendingPostingsFormat extends PostingsFormat {
-  public static String CODEC_NAME = "Appending";
-  
-  public AppendingPostingsFormat() {
-    super(CODEC_NAME);
-  }
-
-  @Override
-  public FieldsConsumer fieldsConsumer(SegmentWriteState state)
-          throws IOException {
-    PostingsWriterBase docsWriter = new Lucene40PostingsWriter(state);
-    boolean success = false;
-    AppendingTermsIndexWriter indexWriter = null;
-    try {
-      indexWriter = new AppendingTermsIndexWriter(state);
-      success = true;
-    } finally {
-      if (!success) {
-        docsWriter.close();
-      }
-    }
-    success = false;
-    try {
-      FieldsConsumer ret = new AppendingTermsDictWriter(indexWriter, state, docsWriter);
-      success = true;
-      return ret;
-    } finally {
-      if (!success) {
-        try {
-          docsWriter.close();
-        } finally {
-          indexWriter.close();
-        }
-      }
-    }
-  }
-
-  @Override
-  public FieldsProducer fieldsProducer(SegmentReadState state)
-          throws IOException {
-    PostingsReaderBase docsReader = new Lucene40PostingsReader(state.dir, state.segmentInfo, state.context, state.segmentSuffix);
-    TermsIndexReaderBase indexReader;
-
-    boolean success = false;
-    try {
-      indexReader = new AppendingTermsIndexReader(state.dir,
-              state.fieldInfos,
-              state.segmentInfo.name,
-              state.termsIndexDivisor,
-              BytesRef.getUTF8SortedAsUnicodeComparator(),
-              state.segmentSuffix, state.context);
-      success = true;
-    } finally {
-      if (!success) {
-        docsReader.close();
-      }
-    }
-    success = false;
-    try {
-      FieldsProducer ret = new AppendingTermsDictReader(indexReader,
-              state.dir, state.fieldInfos, state.segmentInfo.name,
-              docsReader,
-              state.context,
-              Lucene40PostingsFormat.TERMS_CACHE_SIZE,
-              state.segmentSuffix);
-      success = true;
-      return ret;
-    } finally {
-      if (!success) {
-        try {
-          docsReader.close();
-        } finally {
-          indexReader.close();
-        }
-      }
-    }
-  }
-
-  @Override
-  public void files(Directory dir, SegmentInfo segmentInfo, String segmentSuffix, Set<String> files)
-          throws IOException {
-    Lucene40PostingsReader.files(dir, segmentInfo, segmentSuffix, files);
-    BlockTermsReader.files(dir, segmentInfo, segmentSuffix, files);
-    FixedGapTermsIndexReader.files(dir, segmentInfo, segmentSuffix, files);
-  }
-}
Index: lucene/contrib/misc/src/java/org/apache/lucene/index/codecs/appending/AppendingTermsDictReader.java
===================================================================
--- lucene/contrib/misc/src/java/org/apache/lucene/index/codecs/appending/AppendingTermsDictReader.java	(revision 1209643)
+++ lucene/contrib/misc/src/java/org/apache/lucene/index/codecs/appending/AppendingTermsDictReader.java	(working copy)
@@ -1,55 +0,0 @@
-package org.apache.lucene.index.codecs.appending;
-
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import java.io.IOException;
-
-import org.apache.lucene.index.FieldInfos;
-import org.apache.lucene.index.codecs.PostingsReaderBase;
-import org.apache.lucene.index.codecs.BlockTermsReader;
-import org.apache.lucene.index.codecs.BlockTermsWriter;
-import org.apache.lucene.index.codecs.TermsIndexReaderBase;
-import org.apache.lucene.store.Directory;
-import org.apache.lucene.store.IOContext;
-import org.apache.lucene.store.IndexInput;
-import org.apache.lucene.util.CodecUtil;
-
-public class AppendingTermsDictReader extends BlockTermsReader {
-
-  public AppendingTermsDictReader(TermsIndexReaderBase indexReader,
-          Directory dir, FieldInfos fieldInfos, String segment,
-          PostingsReaderBase postingsReader, IOContext context,
-          int termsCacheSize, String segmentSuffix) throws IOException {
-    super(indexReader, dir, fieldInfos, segment, postingsReader, context,
-          termsCacheSize, segmentSuffix);
-  }
-  
-  @Override
-  protected void readHeader(IndexInput in) throws IOException {
-    CodecUtil.checkHeader(in, AppendingTermsDictWriter.CODEC_NAME,
-      BlockTermsWriter.VERSION_START, BlockTermsWriter.VERSION_CURRENT);    
-  }
-
-  @Override
-  protected void seekDir(IndexInput in, long dirOffset) throws IOException {
-    in.seek(in.length() - Long.SIZE / 8);
-    long offset = in.readLong();
-    in.seek(offset);
-  }
-
-}
Index: lucene/contrib/misc/src/java/org/apache/lucene/index/codecs/appending/AppendingTermsIndexReader.java
===================================================================
--- lucene/contrib/misc/src/java/org/apache/lucene/index/codecs/appending/AppendingTermsIndexReader.java	(revision 1209643)
+++ lucene/contrib/misc/src/java/org/apache/lucene/index/codecs/appending/AppendingTermsIndexReader.java	(working copy)
@@ -1,51 +0,0 @@
-package org.apache.lucene.index.codecs.appending;
-
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import java.io.IOException;
-import java.util.Comparator;
-
-import org.apache.lucene.index.FieldInfos;
-import org.apache.lucene.index.codecs.FixedGapTermsIndexReader;
-import org.apache.lucene.store.Directory;
-import org.apache.lucene.store.IOContext;
-import org.apache.lucene.store.IndexInput;
-import org.apache.lucene.util.BytesRef;
-import org.apache.lucene.util.CodecUtil;
-
-public class AppendingTermsIndexReader extends FixedGapTermsIndexReader {
-
-  public AppendingTermsIndexReader(Directory dir, FieldInfos fieldInfos,
-          String segment, int indexDivisor, Comparator<BytesRef> termComp, String segmentSuffix, IOContext context)
-          throws IOException {
-    super(dir, fieldInfos, segment, indexDivisor, termComp, segmentSuffix, context);
-  }
-  
-  @Override
-  protected void readHeader(IndexInput input) throws IOException {
-    CodecUtil.checkHeader(input, AppendingTermsIndexWriter.CODEC_NAME,
-      AppendingTermsIndexWriter.VERSION_START, AppendingTermsIndexWriter.VERSION_START);    
-  }
-
-  @Override
-  protected void seekDir(IndexInput input, long dirOffset) throws IOException {
-    input.seek(input.length() - Long.SIZE / 8);
-    long offset = input.readLong();
-    input.seek(offset);
-  }
-}
Index: lucene/contrib/misc/src/resources/META-INF/services/org.apache.lucene.index.codecs.Codec
===================================================================
--- lucene/contrib/misc/src/resources/META-INF/services/org.apache.lucene.index.codecs.Codec	(revision 1209643)
+++ lucene/contrib/misc/src/resources/META-INF/services/org.apache.lucene.index.codecs.Codec	(working copy)
@@ -1,16 +0,0 @@
-#  Licensed to the Apache Software Foundation (ASF) under one or more
-#  contributor license agreements.  See the NOTICE file distributed with
-#  this work for additional information regarding copyright ownership.
-#  The ASF licenses this file to You under the Apache License, Version 2.0
-#  (the "License"); you may not use this file except in compliance with
-#  the License.  You may obtain a copy of the License at
-#
-#       http://www.apache.org/licenses/LICENSE-2.0
-#
-#  Unless required by applicable law or agreed to in writing, software
-#  distributed under the License is distributed on an "AS IS" BASIS,
-#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-#  See the License for the specific language governing permissions and
-#  limitations under the License.
-
-org.apache.lucene.index.codecs.appending.AppendingCodec
Index: dev-tools/eclipse/dot.classpath
===================================================================
--- dev-tools/eclipse/dot.classpath	(revision 1209643)
+++ dev-tools/eclipse/dot.classpath	(working copy)
@@ -13,7 +13,6 @@
 	<classpathentry kind="src" path="lucene/contrib/memory/src/java"/>
 	<classpathentry kind="src" path="lucene/contrib/memory/src/test"/>
 	<classpathentry kind="src" path="lucene/contrib/misc/src/java"/>
-	<classpathentry kind="src" output="bin.misc" path="lucene/contrib/misc/src/resources"/>
 	<classpathentry kind="src" path="lucene/contrib/misc/src/test"/>
 	<classpathentry kind="src" path="lucene/contrib/sandbox/src/java"/>
 	<classpathentry kind="src" path="lucene/contrib/sandbox/src/test"/>
