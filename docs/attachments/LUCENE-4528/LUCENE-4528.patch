diff --git a/lucene/core/src/java/org/apache/lucene/util/Slf4JInfoStream.java b/lucene/core/src/java/org/apache/lucene/util/Slf4JInfoStream.java
new file mode 100644
index 0000000..8251dd2
--- /dev/null
+++ b/lucene/core/src/java/org/apache/lucene/util/Slf4JInfoStream.java
@@ -0,0 +1,106 @@
+package org.apache.lucene.util;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.slf4j.Marker;
+import org.slf4j.MarkerFactory;
+
+/**
+ * Adapter class to log {@link InfoStream} messages with SLF4J.
+ */
+public class Slf4JInfoStream extends InfoStream {
+    public enum LogLevel {
+        TRACE,
+        DEBUG,
+        INFO,
+        WARN,
+        ERROR
+    }
+
+    private static final Logger logger = LoggerFactory.getLogger(Slf4JInfoStream.class);
+
+    private final LogLevel logLevel;
+
+    /**
+     * Constructs an Slf4JInfoStream logging at the debug level.
+     */
+    public Slf4JInfoStream() {
+        this(LogLevel.DEBUG);
+    }
+
+    /**
+     * Constructs an Slf4JInfoStream logging at the specified level.
+     * @param logLevel The SLF4J level to log InfoStream messages at.
+     */
+    public Slf4JInfoStream(LogLevel logLevel) {
+        this.logLevel = logLevel;
+    }
+
+    @Override
+    public void message(String component, String message) {
+        Marker marker = MarkerFactory.getMarker(component);
+        switch (logLevel) {
+            case TRACE:
+                logger.trace(marker, message);
+                break;
+            case DEBUG:
+                logger.debug(marker, message);
+                break;
+            case INFO:
+                logger.info(marker, message);
+                break;
+            case WARN:
+                logger.warn(marker, message);
+                break;
+            case ERROR:
+                logger.error(marker, message);
+                break;
+            default:
+                assert false: "Unrecognized log level, should never happen";
+        }
+    }
+
+    @Override
+    public boolean isEnabled(String component) {
+        Marker marker = MarkerFactory.getMarker(component);
+        switch (logLevel) {
+            case TRACE:
+                return logger.isTraceEnabled(marker);
+            case DEBUG:
+                return logger.isDebugEnabled(marker);
+            case INFO:
+                return logger.isInfoEnabled(marker);
+            case WARN:
+                return logger.isWarnEnabled(marker);
+            case ERROR:
+                return logger.isErrorEnabled(marker);
+            default:
+                assert false: "Unrecognized log level, should never happen";
+                return false;
+        }
+    }
+
+    /**
+     * No-op. SLF4J bindings manage their own resources.
+     */
+    @Override
+    public void close() {
+    }
+}
