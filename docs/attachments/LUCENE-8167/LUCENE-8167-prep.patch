diff --git a/lucene/core/src/java/org/apache/lucene/index/FilteredTermsEnum.java b/lucene/core/src/java/org/apache/lucene/index/FilteredTermsEnum.java
index 411b435f2d..61392c3a2c 100644
--- a/lucene/core/src/java/org/apache/lucene/index/FilteredTermsEnum.java
+++ b/lucene/core/src/java/org/apache/lucene/index/FilteredTermsEnum.java
@@ -249,7 +249,9 @@ public abstract class FilteredTermsEnum extends TermsEnum {
         case END:
           // we are supposed to end the enum
           return null;
-        // NO: we just fall through and iterate again
+        case NO:
+          // we just iterate again
+          break;
       }
     }
   }
diff --git a/lucene/queries/src/test/org/apache/lucene/queries/function/TestDocValuesFieldSources.java b/lucene/queries/src/test/org/apache/lucene/queries/function/TestDocValuesFieldSources.java
index 479ac3cd12..f3946cb6f7 100644
--- a/lucene/queries/src/test/org/apache/lucene/queries/function/TestDocValuesFieldSources.java
+++ b/lucene/queries/src/test/org/apache/lucene/queries/function/TestDocValuesFieldSources.java
@@ -92,6 +92,8 @@ public class TestDocValuesFieldSources extends LuceneTestCase {
           vals[i] = (long) random().nextInt((int) PackedInts.maxValue(bitsPerValue));
           f.setLongValue((Long) vals[i]);
           break;
+        default:
+          throw new AssertionError();
       }
       iw.addDocument(document);
       if (random().nextBoolean() && i % 10 == 9) {
@@ -150,6 +152,8 @@ public class TestDocValuesFieldSources extends LuceneTestCase {
           case SORTED_NUMERIC:
             assertEquals(((Number) expected).longValue(), values.longVal(i));
             break;
+          default:
+            throw new AssertionError();
         }
       }
     }
diff --git a/solr/core/src/java/org/apache/solr/handler/component/ExpandComponent.java b/solr/core/src/java/org/apache/solr/handler/component/ExpandComponent.java
index 574ba72805..4139a90017 100644
--- a/solr/core/src/java/org/apache/solr/handler/component/ExpandComponent.java
+++ b/solr/core/src/java/org/apache/solr/handler/component/ExpandComponent.java
@@ -739,6 +739,8 @@ public class ExpandComponent extends SearchComponent implements PluginInfoInitia
           return Float.toString(Float.intBitsToFloat((int)val));
         case DOUBLE:
           return Double.toString(Double.longBitsToDouble(val));
+        case DATE:
+          break;
       }
     }
     throw new IllegalArgumentException("FieldType must be INT,LONG,FLOAT,DOUBLE found " + fieldType);
diff --git a/solr/core/src/java/org/apache/solr/handler/component/RangeFacetProcessor.java b/solr/core/src/java/org/apache/solr/handler/component/RangeFacetProcessor.java
index f8ab7b7181..6f2fc266c7 100644
--- a/solr/core/src/java/org/apache/solr/handler/component/RangeFacetProcessor.java
+++ b/solr/core/src/java/org/apache/solr/handler/component/RangeFacetProcessor.java
@@ -196,6 +196,9 @@ public class RangeFacetProcessor extends SimpleFacets {
               intervals.set(includeBefore ? 1 : 0, new IntervalFacets.FacetInterval(sf, range.lower, range.upper,
                   range.includeLower, range.includeUpper, FacetRangeOther.BETWEEN.toString()));
               break;
+            case ALL:
+            case NONE:
+              break;
           }
         }
         continue;
diff --git a/solr/core/src/java/org/apache/solr/search/PointMerger.java b/solr/core/src/java/org/apache/solr/search/PointMerger.java
index 22ae05c7b3..59a6fb38cb 100644
--- a/solr/core/src/java/org/apache/solr/search/PointMerger.java
+++ b/solr/core/src/java/org/apache/solr/search/PointMerger.java
@@ -79,6 +79,8 @@ public class PointMerger {
           case DOUBLE:
             seg = new DoubleSeg(pv, capacity);
             break;
+          case DATE:
+            break;
         }
         int count = seg.setNextValue();
         if (count >= 0) {
diff --git a/solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter.java b/solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter.java
index 714d1270be..4d944d239b 100644
--- a/solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter.java
+++ b/solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter.java
@@ -388,6 +388,11 @@ public class SolrDispatchFilter extends BaseSolrFilter {
           case FORWARD:
             request.getRequestDispatcher(call.getPath()).forward(request, response);
             break;
+          case ADMIN:
+          case PROCESS:
+          case REMOTEQUERY:
+          case RETURN:
+            break;
         }
       } finally {
         call.destroy();
diff --git a/solr/core/src/java/org/apache/solr/uninverting/UninvertingReader.java b/solr/core/src/java/org/apache/solr/uninverting/UninvertingReader.java
index 7158e31638..967db54141 100644
--- a/solr/core/src/java/org/apache/solr/uninverting/UninvertingReader.java
+++ b/solr/core/src/java/org/apache/solr/uninverting/UninvertingReader.java
@@ -309,6 +309,14 @@ public class UninvertingReader extends FilterLeafReader {
         case LEGACY_FLOAT: return FieldCache.DEFAULT.getNumerics(in, field, FieldCache.LEGACY_FLOAT_PARSER);
         case LEGACY_LONG: return FieldCache.DEFAULT.getNumerics(in, field, FieldCache.LEGACY_LONG_PARSER);
         case LEGACY_DOUBLE: return FieldCache.DEFAULT.getNumerics(in, field, FieldCache.LEGACY_DOUBLE_PARSER);
+        case BINARY:
+        case SORTED:
+        case SORTED_SET_BINARY:
+        case SORTED_SET_DOUBLE:
+        case SORTED_SET_FLOAT:
+        case SORTED_SET_INTEGER:
+        case SORTED_SET_LONG:
+          break;
       }
     }
     return null;
@@ -359,6 +367,17 @@ public class UninvertingReader extends FilterLeafReader {
           return FieldCache.DEFAULT.getDocTermOrds(in, field, FieldCache.INT64_TERM_PREFIX);
         case SORTED_SET_BINARY:
           return FieldCache.DEFAULT.getDocTermOrds(in, field, null);
+        case BINARY:
+        case LEGACY_DOUBLE:
+        case LEGACY_FLOAT:
+        case LEGACY_INTEGER:
+        case LEGACY_LONG:
+        case DOUBLE_POINT:
+        case FLOAT_POINT:
+        case INTEGER_POINT:
+        case LONG_POINT:
+        case SORTED:
+          break;
       }
     }
     return null;
diff --git a/solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser.java b/solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser.java
index 953da6a2a9..867b2c5e52 100644
--- a/solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser.java
+++ b/solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser.java
@@ -252,6 +252,15 @@ public class XMLResponseParser extends ResponseParser
           case ARR:    nl.add( name, readArray(     parser ) ); depth--; continue;
           case RESULT: nl.add( name, readDocuments( parser ) ); depth--; continue;
           case DOC:    nl.add( name, readDocument(  parser ) ); depth--; continue;
+          case BOOL:
+          case DATE:
+          case DOUBLE:
+          case FLOAT:
+          case INT:
+          case LONG:
+          case NULL:
+          case STR:
+            break;
           }
           throw new XMLStreamException( "branch element not handled!", parser.getLocation() );
         }
@@ -316,6 +325,15 @@ public class XMLResponseParser extends ResponseParser
           case ARR:    vals.add( readArray( parser ) ); depth--; continue;
           case RESULT: vals.add( readDocuments( parser ) ); depth--; continue;
           case DOC:    vals.add( readDocument( parser ) ); depth--; continue;
+          case BOOL:
+          case DATE:
+          case DOUBLE:
+          case FLOAT:
+          case INT:
+          case LONG:
+          case NULL:
+          case STR:
+            break;
           }
           throw new XMLStreamException( "branch element not handled!", parser.getLocation() );
         }
