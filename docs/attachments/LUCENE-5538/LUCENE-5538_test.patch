Index: lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest.java
===================================================================
--- lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest.java	(revision 1579027)
+++ lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest.java	(working copy)
@@ -31,6 +31,7 @@
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.FieldType;
+import org.apache.lucene.document.StoredField;
 import org.apache.lucene.document.TextField;
 import org.apache.lucene.index.DirectoryReader;
 import org.apache.lucene.index.IndexReader;
@@ -38,6 +39,7 @@
 import org.apache.lucene.index.Term;
 import org.apache.lucene.queries.CommonTermsQuery;
 import org.apache.lucene.search.BooleanClause.Occur;
+import org.apache.lucene.search.BooleanClause;
 import org.apache.lucene.search.BooleanQuery;
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.PhraseQuery;
@@ -504,6 +506,69 @@
     writer.close();
     dir.close();
   }
+  
+  public void testBooleanPhraseWithSynonym() throws IOException {
+    Directory dir = newDirectory();
+    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));
+    Document doc = new Document();
+    FieldType type = new FieldType(TextField.TYPE_NOT_STORED);
+    type.setStoreTermVectorOffsets(true);
+    type.setStoreTermVectorPositions(true);
+    type.setStoreTermVectors(true);
+    type.freeze();
+    Token syn = new Token("httpwwwfacebookcom", 6, 29);
+    syn.setPositionIncrement(0);
+    CannedTokenStream ts = new CannedTokenStream(
+        new Token("test", 0, 4),
+        new Token("http", 6, 10),
+        syn,
+        new Token("www", 13, 16),
+        new Token("facebook", 17, 25),
+        new Token("com", 26, 29)
+    );
+    Field field = new Field("field", ts, type);
+    doc.add(field);
+    doc.add(new StoredField("field", "Test: http://www.facebook.com"));
+    writer.addDocument(doc);
+    FastVectorHighlighter highlighter = new FastVectorHighlighter();
+    
+    IndexReader reader = DirectoryReader.open(writer, true);
+    int docId = 0;
+    
+    // query1: match
+    PhraseQuery pq = new PhraseQuery();
+    pq.add(new Term("field", "test"));
+    pq.add(new Term("field", "http"));
+    pq.add(new Term("field", "www"));
+    pq.add(new Term("field", "facebook"));
+    pq.add(new Term("field", "com"));
+    FieldQuery fieldQuery  = highlighter.getFieldQuery(pq, reader);
+    String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, "field", 54, 1);
+    assertEquals("<b>Test: http://www.facebook.com</b>", bestFragments[0]);
+    
+    // query2: match
+    PhraseQuery pq2 = new PhraseQuery();
+    pq2.add(new Term("field", "test"));
+    pq2.add(new Term("field", "httpwwwfacebookcom"));
+    pq2.add(new Term("field", "www"));
+    pq2.add(new Term("field", "facebook"));
+    pq2.add(new Term("field", "com"));
+    fieldQuery  = highlighter.getFieldQuery(pq, reader);
+    bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, "field", 54, 1);
+    assertEquals("<b>Test: http://www.facebook.com</b>", bestFragments[0]);
+    
+    // query3: OR query1 and query2 together
+    BooleanQuery bq = new BooleanQuery();
+    bq.add(pq, BooleanClause.Occur.SHOULD);
+    bq.add(pq2, BooleanClause.Occur.SHOULD);
+    fieldQuery  = highlighter.getFieldQuery(bq, reader);
+    bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, "field", 54, 1);
+    assertEquals("<b>Test: http://www.facebook.com</b>", bestFragments[0]);
+    
+    reader.close();
+    writer.close();
+    dir.close();
+  }
 
   private void matchedFieldsTestCase( String fieldValue, String expected, Query... queryClauses ) throws IOException {
     matchedFieldsTestCase( true, true, fieldValue, expected, queryClauses );
