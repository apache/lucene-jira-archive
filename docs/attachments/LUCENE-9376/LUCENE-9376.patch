diff --git lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery.java lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery.java
index 99376e30305..b188612efd5 100644
--- lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery.java
+++ lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery.java
@@ -411,7 +411,6 @@ public class TestFuzzyQuery extends LuceneTestCase {
   
   public void testGiga() throws Exception {
 
-    MockAnalyzer analyzer = new MockAnalyzer(random());
     Directory index = newDirectory();
     RandomIndexWriter w = new RandomIndexWriter(random(), index);
 
@@ -443,6 +442,7 @@ public class TestFuzzyQuery extends LuceneTestCase {
     assertEquals(1, hits.length);
     assertEquals("Giga byte", searcher.doc(hits[0].doc).get("field"));
     r.close();
+    w.close();
     index.close();
   }
   
@@ -561,6 +561,7 @@ public class TestFuzzyQuery extends LuceneTestCase {
       w.addDocument(doc);
     }
     DirectoryReader r = w.getReader();
+    w.close();
     //System.out.println("TEST: reader=" + r);
     IndexSearcher s = newSearcher(r);
     int iters = atLeast(200);
@@ -638,7 +639,7 @@ public class TestFuzzyQuery extends LuceneTestCase {
       }
     }
     
-    IOUtils.close(r, w, dir);
+    IOUtils.close(r, dir);
   }
 
   private static class TermAndScore implements Comparable<TermAndScore> {
diff --git lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache.java lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache.java
index 7993beb7427..ef023752a66 100644
--- lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache.java
+++ lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache.java
@@ -181,14 +181,17 @@ public class TestLRUQueryCache extends LuceneTestCase {
       thread.join();
     }
 
-    if (error.get() != null) {
-      throw error.get();
+    try {
+      if (error.get() != null) {
+        throw error.get();
+      }
+      queryCache.assertConsistent();
+    } finally {
+      mgr.close();
+      w.close();
+      dir.close();
+      queryCache.assertConsistent();
     }
-    queryCache.assertConsistent();
-    mgr.close();
-    w.close();
-    dir.close();
-    queryCache.assertConsistent();
   }
 
   public void testLRUEviction() throws Exception {
diff --git lucene/core/src/test/org/apache/lucene/search/TestSameScoresWithThreads.java lucene/core/src/test/org/apache/lucene/search/TestSameScoresWithThreads.java
index a615a6a7fbb..4b284dfd31b 100644
--- lucene/core/src/test/org/apache/lucene/search/TestSameScoresWithThreads.java
+++ lucene/core/src/test/org/apache/lucene/search/TestSameScoresWithThreads.java
@@ -119,6 +119,7 @@ public class TestSameScoresWithThreads extends LuceneTestCase {
         thread.join();
       }
     }
+    docs.close();
     r.close();
     dir.close();
   }
diff --git lucene/core/src/test/org/apache/lucene/search/TestSearcherManager.java lucene/core/src/test/org/apache/lucene/search/TestSearcherManager.java
index b9238666916..1d8edccf092 100644
--- lucene/core/src/test/org/apache/lucene/search/TestSearcherManager.java
+++ lucene/core/src/test/org/apache/lucene/search/TestSearcherManager.java
@@ -310,6 +310,7 @@ public class TestSearcherManager extends ThreadedIndexingAndSearchingTestCase {
     Directory dir = newDirectory();
     IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(
         new MockAnalyzer(random())).setMergeScheduler(new ConcurrentMergeScheduler()));
+    @SuppressWarnings("resource")
     SearcherManager sm = new SearcherManager(writer, false, false, new SearcherFactory());
     writer.addDocument(new Document());
     writer.commit();
diff --git lucene/core/src/test/org/apache/lucene/search/TestTermQuery.java lucene/core/src/test/org/apache/lucene/search/TestTermQuery.java
index e460e26ddba..65986d96848 100644
--- lucene/core/src/test/org/apache/lucene/search/TestTermQuery.java
+++ lucene/core/src/test/org/apache/lucene/search/TestTermQuery.java
@@ -21,6 +21,7 @@ import java.io.IOException;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field.Store;
 import org.apache.lucene.document.StringField;
+import org.apache.lucene.index.CompositeReaderContext;
 import org.apache.lucene.index.DirectoryReader;
 import org.apache.lucene.index.FilterDirectoryReader;
 import org.apache.lucene.index.FilterLeafReader;
@@ -47,9 +48,13 @@ public class TestTermQuery extends LuceneTestCase {
     QueryUtils.checkUnequal(
         new TermQuery(new Term("foo", "bar")),
         new TermQuery(new Term("foo", "baz")));
+    final CompositeReaderContext context;
+    try (MultiReader multiReader = new MultiReader()) {
+      context = multiReader.getContext();
+    }
     QueryUtils.checkEqual(
         new TermQuery(new Term("foo", "bar")),
-        new TermQuery(new Term("foo", "bar"), TermStates.build(new MultiReader().getContext(), new Term("foo", "bar"), true)));
+        new TermQuery(new Term("foo", "bar"), TermStates.build(context, new Term("foo", "bar"), true)));
   }
 
   public void testCreateWeightDoesNotSeekIfScoresAreNotNeeded() throws IOException {
diff --git lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter.java lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter.java
index 74de2483b8a..5d0dc94f271 100644
--- lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter.java
+++ lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter.java
@@ -61,6 +61,7 @@ import org.apache.lucene.search.TopDocs;
 import org.apache.lucene.search.Weight;
 import org.apache.lucene.search.spans.SpanQuery;
 import org.apache.lucene.util.BytesRef;
+import org.apache.lucene.util.IOUtils;
 import org.apache.lucene.util.InPlaceMergeSorter;
 
 /**
@@ -643,6 +644,7 @@ public class UnifiedHighlighter {
 
       batchDocIdx += fieldValsByDoc.size();
     }
+    IOUtils.close(indexReaderWithTermVecCache);
     assert docIdIter.docID() == DocIdSetIterator.NO_MORE_DOCS
         || docIdIter.nextDoc() == DocIdSetIterator.NO_MORE_DOCS;
 
diff --git lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java
index 0c3a0f65d95..2e703175bd4 100644
--- lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java
+++ lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java
@@ -1362,24 +1362,25 @@ public class HighlighterTest extends BaseTokenStreamTestCase implements Formatte
       public void run() throws Exception {
         HashMap<String,String> synonyms = new HashMap<>();
         synonyms.put("football", "soccer,footie");
-        Analyzer analyzer = new SynonymAnalyzer(synonyms);
+        try (Analyzer analyzer = new SynonymAnalyzer(synonyms)) {
 
-        String s = "football-soccer in the euro 2004 footie competition";
+          String s = "football-soccer in the euro 2004 footie competition";
 
-        BooleanQuery.Builder query = new BooleanQuery.Builder();
-        query.add(new TermQuery(new Term("bookid", "football")), Occur.SHOULD);
-        query.add(new TermQuery(new Term("bookid", "soccer")), Occur.SHOULD);
-        query.add(new TermQuery(new Term("bookid", "footie")), Occur.SHOULD);
+          BooleanQuery.Builder query = new BooleanQuery.Builder();
+          query.add(new TermQuery(new Term("bookid", "football")), Occur.SHOULD);
+          query.add(new TermQuery(new Term("bookid", "soccer")), Occur.SHOULD);
+          query.add(new TermQuery(new Term("bookid", "footie")), Occur.SHOULD);
 
-        Highlighter highlighter = getHighlighter(query.build(), null, HighlighterTest.this);
+          Highlighter highlighter = getHighlighter(query.build(), null, HighlighterTest.this);
 
-        // Get 3 best fragments and separate with a "..."
-        TokenStream tokenStream = analyzer.tokenStream(null, s);
+          // Get 3 best fragments and separate with a "..."
+          TokenStream tokenStream = analyzer.tokenStream(null, s);
 
-        String result = highlighter.getBestFragments(tokenStream, s, 3, "...");
-        String expectedResult = "<B>football</B>-<B>soccer</B> in the euro 2004 <B>footie</B> competition";
-        assertTrue("overlapping analyzer should handle highlights OK, expected:" + expectedResult
-            + " actual:" + result, expectedResult.equals(result));
+          String result = highlighter.getBestFragments(tokenStream, s, 3, "...");
+          String expectedResult = "<B>football</B>-<B>soccer</B> in the euro 2004 <B>footie</B> competition";
+          assertTrue("overlapping analyzer should handle highlights OK, expected:" + expectedResult
+              + " actual:" + result, expectedResult.equals(result));
+        }
       }
 
     };
diff --git lucene/highlighter/src/test/org/apache/lucene/search/highlight/TokenSourcesTest.java lucene/highlighter/src/test/org/apache/lucene/search/highlight/TokenSourcesTest.java
index 825133c3f71..30cf7117de8 100644
--- lucene/highlighter/src/test/org/apache/lucene/search/highlight/TokenSourcesTest.java
+++ lucene/highlighter/src/test/org/apache/lucene/search/highlight/TokenSourcesTest.java
@@ -391,6 +391,7 @@ public class TokenSourcesTest extends BaseTokenStreamTestCase {
       if (startOffsets[i] == startOffsets[i-1]) {
         if (VERBOSE)
           System.out.println("Skipping test because can't easily validate random token-stream is correct.");
+        rTokenStream.close();
         return;
       }
     }
@@ -438,6 +439,7 @@ public class TokenSourcesTest extends BaseTokenStreamTestCase {
 
     reader.close();
     dir.close();
+    rTokenStream.close();
   }
 
   public void testMaxStartOffsetConsistency() throws IOException {
diff --git lucene/highlighter/src/test/org/apache/lucene/search/highlight/custom/HighlightCustomQueryTest.java lucene/highlighter/src/test/org/apache/lucene/search/highlight/custom/HighlightCustomQueryTest.java
index b8ce3dd4840..115a51a9673 100644
--- lucene/highlighter/src/test/org/apache/lucene/search/highlight/custom/HighlightCustomQueryTest.java
+++ lucene/highlighter/src/test/org/apache/lucene/search/highlight/custom/HighlightCustomQueryTest.java
@@ -105,17 +105,18 @@ public class HighlightCustomQueryTest extends LuceneTestCase {
    */
   private String highlightField(Query query, String fieldName,
       String text) throws IOException, InvalidTokenOffsetsException {
-    TokenStream tokenStream = new MockAnalyzer(random(), MockTokenizer.SIMPLE,
-        true, MockTokenFilter.ENGLISH_STOPSET).tokenStream(fieldName, text);
-    // Assuming "<B>", "</B>" used to highlight
-    SimpleHTMLFormatter formatter = new SimpleHTMLFormatter();
-    MyQueryScorer scorer = new MyQueryScorer(query, fieldName, FIELD_NAME);
-    Highlighter highlighter = new Highlighter(formatter, scorer);
-    highlighter.setTextFragmenter(new SimpleFragmenter(Integer.MAX_VALUE));
-
-    String rv = highlighter.getBestFragments(tokenStream, text, 1,
-        "(FIELD TEXT TRUNCATED)");
-    return rv.length() == 0 ? text : rv;
+    try (MockAnalyzer mockAnalyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE,true,
+        MockTokenFilter.ENGLISH_STOPSET); TokenStream tokenStream = mockAnalyzer.tokenStream(fieldName, text)) {
+      // Assuming "<B>", "</B>" used to highlight
+      SimpleHTMLFormatter formatter = new SimpleHTMLFormatter();
+      MyQueryScorer scorer = new MyQueryScorer(query, fieldName, FIELD_NAME);
+      Highlighter highlighter = new Highlighter(formatter, scorer);
+      highlighter.setTextFragmenter(new SimpleFragmenter(Integer.MAX_VALUE));
+
+      String rv = highlighter.getBestFragments(tokenStream, text, 1,
+          "(FIELD TEXT TRUNCATED)");
+      return rv.length() == 0 ? text : rv;
+    }
   }
 
   public static class MyWeightedSpanTermExtractor extends
diff --git lucene/sandbox/src/test/org/apache/lucene/search/TestTermAutomatonQuery.java lucene/sandbox/src/test/org/apache/lucene/search/TestTermAutomatonQuery.java
index 64fe4c73d97..a95f0952495 100644
--- lucene/sandbox/src/test/org/apache/lucene/search/TestTermAutomatonQuery.java
+++ lucene/sandbox/src/test/org/apache/lucene/search/TestTermAutomatonQuery.java
@@ -444,6 +444,7 @@ public class TestTermAutomatonQuery extends LuceneTestCase {
     }
 
     IndexReader r = w.getReader();
+    w.close();
     IndexSearcher s = newSearcher(r);
 
     // Used to match ANY using MultiPhraseQuery:
@@ -561,7 +562,7 @@ public class TestTermAutomatonQuery extends LuceneTestCase {
       }
     }
 
-    IOUtils.close(w, r, dir, analyzer);
+    IOUtils.close(r, dir, analyzer);
   }
 
   private Set<String> toDocIDs(IndexSearcher s, TopDocs hits) throws IOException {
diff --git lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester.java lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester.java
index 3e89275af80..530a4c3ce3e 100644
--- lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester.java
+++ lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester.java
@@ -192,6 +192,7 @@ public class TestFreeTextSuggester extends LuceneTestCase {
       }
     }
     analyzer.close();
+    lfd.close();
   }
 
   // Make sure you can suggest based only on unigram model:
diff --git lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestSuggestStopFilter.java lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestSuggestStopFilter.java
index 5ed84e0170e..4dbccdec3bf 100644
--- lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestSuggestStopFilter.java
+++ lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestSuggestStopFilter.java
@@ -50,7 +50,6 @@ public class TestSuggestStopFilter extends BaseTokenStreamTestCase {
     Tokenizer stream = new MockTokenizer();
     stream.setReader(new StringReader("go to "));
     TokenStream filter = new SuggestStopFilter(stream, stopWords);
-    filter = new SuggestStopFilter(stream, stopWords);
     assertTokenStreamContents(filter,
                               new String[] {"go"},
                               new int[] {0},
@@ -69,8 +68,6 @@ public class TestSuggestStopFilter extends BaseTokenStreamTestCase {
     Tokenizer stream = new MockTokenizer();
     stream.setReader(new StringReader("go to school"));
     TokenStream filter = new SuggestStopFilter(stream, stopWords);
-
-    filter = new SuggestStopFilter(stream, stopWords);
     assertTokenStreamContents(filter,
                               new String[] {"go", "school"},
                               new int[] {0, 6},
@@ -89,8 +86,6 @@ public class TestSuggestStopFilter extends BaseTokenStreamTestCase {
     Tokenizer stream = new MockTokenizer();
     stream.setReader(new StringReader("go to a the school"));
     TokenStream filter = new SuggestStopFilter(stream, stopWords);
-
-    filter = new SuggestStopFilter(stream, stopWords);
     assertTokenStreamContents(filter,
                               new String[] { "go", "school" },
                               new int[] {0, 12},
@@ -109,8 +104,6 @@ public class TestSuggestStopFilter extends BaseTokenStreamTestCase {
     Tokenizer stream = new MockTokenizer();
     stream.setReader(new StringReader("go to a the"));
     TokenStream filter = new SuggestStopFilter(stream, stopWords);
-
-    filter = new SuggestStopFilter(stream, stopWords);
     assertTokenStreamContents(filter,
                               new String[] { "go", "the"},
                               new int[] {0, 8},
@@ -129,8 +122,6 @@ public class TestSuggestStopFilter extends BaseTokenStreamTestCase {
     Tokenizer stream = new MockTokenizer();
     stream.setReader(new StringReader("go to a the "));
     TokenStream filter = new SuggestStopFilter(stream, stopWords);
-
-    filter = new SuggestStopFilter(stream, stopWords);
     assertTokenStreamContents(filter,
                               new String[] { "go"},
                               new int[] {0},
diff --git lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestSuggestField.java lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestSuggestField.java
index 1dbadc1224e..9d80476ec87 100644
--- lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestSuggestField.java
+++ lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestSuggestField.java
@@ -761,7 +761,7 @@ public class TestSuggestField extends LuceneTestCase {
       }
       assertTrue("at least one of the entries should have the score", matched);
     }
-
+    lineFileDocs.close();
     reader.close();
     iw.close();
   }
diff --git lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.java lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.java
index 4f01cf77067..9e21b68889f 100644
--- lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.java
+++ lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.java
@@ -576,6 +576,7 @@ public abstract class ShardSearchingTestBase extends LuceneTestCase {
             nodes[random().nextInt(nodes.length)].reopen();
           }
         }
+        docs.close();
       } catch (Throwable t) {
         System.out.println("FAILED:");
         t.printStackTrace(System.out);
