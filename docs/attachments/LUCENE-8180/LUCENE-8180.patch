diff --git a/lucene/core/src/java/org/apache/lucene/util/FixedBitSet.java b/lucene/core/src/java/org/apache/lucene/util/FixedBitSet.java
index 143b10b..be3973c 100644
--- a/lucene/core/src/java/org/apache/lucene/util/FixedBitSet.java
+++ b/lucene/core/src/java/org/apache/lucene/util/FixedBitSet.java
@@ -34,6 +34,7 @@ import org.apache.lucene.search.DocIdSetIterator;
 public final class FixedBitSet extends BitSet implements MutableBits, Accountable {
 
   private static final long BASE_RAM_BYTES_USED = RamUsageEstimator.shallowSizeOfInstance(FixedBitSet.class);
+  private static final long[] EMPTY_LONG_ARRAY = new long[16];
 
   private final long[] bits; // Array of longs holding the bits 
   private final int numBits; // The number of bits in use
@@ -230,13 +231,19 @@ public final class FixedBitSet extends BitSet implements MutableBits, Accountabl
       return index + Long.numberOfTrailingZeros(word);
     }
 
-    while(++i < numWords) {
-      word = bits[i];
-      if (word != 0) {
+    ++i;
+    while (i < numWords) {
+      final int mismatch = FutureArrays.mismatch(bits, i, numWords, EMPTY_LONG_ARRAY, 0, EMPTY_LONG_ARRAY.length);
+      if (mismatch == -1 || i + mismatch == numWords) {
+        break;
+      }
+      if (mismatch != EMPTY_LONG_ARRAY.length) {
+        i += mismatch;
+        word = bits[i];
         return (i<<6) + Long.numberOfTrailingZeros(word);
       }
+      i += EMPTY_LONG_ARRAY.length;
     }
-
     return DocIdSetIterator.NO_MORE_DOCS;
   }
 
@@ -510,4 +517,5 @@ public final class FixedBitSet extends BitSet implements MutableBits, Accountabl
     // empty sets from returning 0, which is too common.
     return (int) ((h>>32) ^ h) + 0x98761234;
   }
+
 }
diff --git a/lucene/core/src/java/org/apache/lucene/util/FutureArrays.java b/lucene/core/src/java/org/apache/lucene/util/FutureArrays.java
index 0154053..ebfe9ce 100644
--- a/lucene/core/src/java/org/apache/lucene/util/FutureArrays.java
+++ b/lucene/core/src/java/org/apache/lucene/util/FutureArrays.java
@@ -63,7 +63,7 @@ public final class FutureArrays {
         return i;
     return aLen == bLen ? -1 : len;
   }
-  
+
   /**
    * Behaves like Java 9's Arrays.compareUnsigned
    * @see <a href="http://download.java.net/java/jdk9/docs/api/java/util/Arrays.html#compareUnsigned-byte:A-int-int-byte:A-int-int-">Arrays.compareUnsigned</a>
@@ -219,7 +219,23 @@ public final class FutureArrays {
   }
   
   // long[]
-  
+
+  /**
+   * Behaves like Java 9's Arrays.mismatch
+   * @see <a href="http://download.java.net/java/jdk9/docs/api/java/util/Arrays.html#mismatch-long:A-int-int-long:A-int-int-">Arrays.mismatch</a>
+   */
+  public static int mismatch(long[] a, int aFromIndex, int aToIndex, long[] b, int bFromIndex, int bToIndex) {
+    checkFromToIndex(aFromIndex, aToIndex, a.length);
+    checkFromToIndex(bFromIndex, bToIndex, b.length);
+    int aLen = aToIndex - aFromIndex;
+    int bLen = bToIndex - bFromIndex;
+    int len = Math.min(aLen, bLen);
+    for (int i = 0; i < len; i++)
+      if (a[i+aFromIndex] != b[i+bFromIndex])
+        return i;
+    return aLen == bLen ? -1 : len;
+  }
+
   /**
    * Behaves like Java 9's Arrays.compare
    * @see <a href="http://download.java.net/java/jdk9/docs/api/java/util/Arrays.html#compare-long:A-int-int-long:A-int-int-">Arrays.compare</a>
diff --git a/lucene/core/src/test/org/apache/lucene/util/TestFutureArrays.java b/lucene/core/src/test/org/apache/lucene/util/TestFutureArrays.java
index 1c128ed..a8ffc70 100644
--- a/lucene/core/src/test/org/apache/lucene/util/TestFutureArrays.java
+++ b/lucene/core/src/test/org/apache/lucene/util/TestFutureArrays.java
@@ -71,6 +71,31 @@ public class TestFutureArrays extends LuceneTestCase {
     });
   }
   
+  public void testLongMismatch() {
+    assertEquals(1, FutureArrays.mismatch(longs("ab"), 0, 2, longs("ac"), 0, 2));
+    assertEquals(0, FutureArrays.mismatch(longs("ab"), 0, 2, longs("b"), 0, 1));
+    assertEquals(-1, FutureArrays.mismatch(longs("ab"), 0, 2, longs("ab"), 0, 2));
+    assertEquals(1, FutureArrays.mismatch(longs("ab"), 0, 2, longs("a"), 0, 1));
+    expectThrows(IllegalArgumentException.class, () -> {
+      FutureArrays.mismatch(longs("ab"), 2, 1, longs("a"), 0, 1);
+    });
+    expectThrows(IllegalArgumentException.class, () -> {
+      FutureArrays.mismatch(longs("ab"), 2, 1, longs("a"), 1, 0);
+    });
+    expectThrows(NullPointerException.class, () -> {
+      FutureArrays.mismatch(null, 0, 2, longs("a"), 0, 1);
+    });
+    expectThrows(NullPointerException.class, () -> {
+      FutureArrays.mismatch(longs("ab"), 0, 2, null, 0, 1);
+    });
+    expectThrows(IndexOutOfBoundsException.class, () -> {
+      FutureArrays.mismatch(longs("ab"), 0, 3, longs("a"), 0, 1);
+    });
+    expectThrows(IndexOutOfBoundsException.class, () -> {
+      FutureArrays.mismatch(longs("ab"), 0, 2, longs("a"), 0, 2);
+    });
+  }
+  
   public void testByteCompareUnsigned() {
     assertEquals(1, Integer.signum(FutureArrays.compareUnsigned(bytes("ab"), 0, 2, bytes("a"), 0, 1)));
     assertEquals(1, Integer.signum(FutureArrays.compareUnsigned(bytes("ab"), 0, 2, bytes("aa"), 0, 2)));
