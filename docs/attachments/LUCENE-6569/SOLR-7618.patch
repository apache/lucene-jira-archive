Index: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFunction.java
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFunction.java	(revision 1685676)
+++ lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFunction.java	(working copy)
@@ -44,12 +44,12 @@
   }
 
   /**
-   * Helper utility for {@link FunctionValues} wrapping multiple {@link FunctionValues}
+   * Helper utility for {@link FunctionValues}
    *
-   * @return true if <em>all</em> of the specified <code>values</code> 
+   * @return true if <em>all</em> of the specified <code>values</code>
    *         {@link FunctionValues#exists} for the specified doc, else false.
    */
-  public static boolean allExists(int doc, FunctionValues... values) {
+  public static boolean allExists(int doc, FunctionValues[] values) {
     for (FunctionValues v : values) {
       if ( ! v.exists(doc) ) {
         return false;
@@ -57,13 +57,14 @@
     }
     return true;
   }
+  
   /**
-   * Helper utility for {@link FunctionValues} wrapping multiple {@link FunctionValues}
+   * Helper utility for {@link FunctionValues}
    *
-   * @return true if <em>any</em> of the specified <code>values</code> 
+   * @return true if <em>any</em> of the specified <code>values</code>
    *         {@link FunctionValues#exists} for the specified doc, else false.
    */
-  public static boolean anyExists(int doc, FunctionValues... values) {
+  public static boolean anyExists(int doc, FunctionValues[] values) {
     for (FunctionValues v : values) {
       if ( v.exists(doc) ) {
         return true;
@@ -71,7 +72,31 @@
     }
     return false;
   }
-
+  
+  /**
+   * Equivilent the the {@code FunctionValues[]} method with the same name, but optimized for 
+   * dealing with exactly 2 arguments.
+   *
+   * @return true if <em>both</em> of the specified <code>values</code>
+   *         {@link FunctionValues#exists} for the specified doc, else false.
+   * @see #anyExists(int,FunctionValues[])
+   */
+  public static boolean allExists(int doc, FunctionValues values1, FunctionValues values2) {
+    return values1.exists(doc) && values2.exists(doc);
+  }
+  
+  /**
+   * Equivilent the the {@code FunctionValues[]} method with the same name, but optimized for 
+   * dealing with exactly 2 arguments.
+   *
+   * @return true if <em>either</em> of the specified <code>values</code>
+   *         {@link FunctionValues#exists} for the specified doc, else false.
+   * @see #anyExists(int,FunctionValues[])
+   */
+  public static boolean anyExists(int doc, FunctionValues values1, FunctionValues values2) {
+    return values1.exists(doc) || values2.exists(doc);
+  }
+  
   public static String description(String name, List<ValueSource> sources) {
     StringBuilder sb = new StringBuilder();
     sb.append(name).append('(');
Index: lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources.java
===================================================================
--- lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources.java	(revision 1685676)
+++ lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources.java	(working copy)
@@ -58,6 +58,7 @@
 import org.apache.lucene.queries.function.valuesource.MaxFloatFunction;
 import org.apache.lucene.queries.function.valuesource.MinFloatFunction;
 import org.apache.lucene.queries.function.valuesource.MultiFloatFunction;
+import org.apache.lucene.queries.function.valuesource.MultiFunction;
 import org.apache.lucene.queries.function.valuesource.NormValueSource;
 import org.apache.lucene.queries.function.valuesource.NumDocsValueSource;
 import org.apache.lucene.queries.function.valuesource.PowFloatFunction;
@@ -527,7 +528,57 @@
     assertHits(new FunctionQuery(vs), new float[] { 4f, 4f });
     assertAllExist(vs);
   }
-  
+
+  public void testMultiFunctionHelperEquivilence() throws IOException {
+    // the 2 arg versions of these methods should return the exact same results as
+    // the multi arg versions with a 2 element array
+    
+    // actual doc / index is not relevant for this test
+    final LeafReaderContext leaf = searcher.getIndexReader().leaves().get(0);
+    final Map context = ValueSource.newContext(searcher);
+
+    ALL_EXIST_VS.createWeight(context, searcher);
+    NONE_EXIST_VS.createWeight(context, searcher);
+
+    final FunctionValues ALL = ALL_EXIST_VS.getValues(context, leaf);
+    final FunctionValues NONE = NONE_EXIST_VS.getValues(context, leaf);
+
+    // quick sanity checks of explicit results
+    assertTrue(MultiFunction.allExists(1, ALL, ALL));
+    assertTrue(MultiFunction.allExists(1, new FunctionValues[] {ALL, ALL}));
+    assertTrue(MultiFunction.anyExists(1, ALL, NONE));
+    assertTrue(MultiFunction.anyExists(1, new FunctionValues[] {ALL, NONE}));
+    //
+    assertFalse(MultiFunction.allExists(1, ALL, NONE));
+    assertFalse(MultiFunction.allExists(1, new FunctionValues[] {ALL, NONE}));
+    assertFalse(MultiFunction.anyExists(1, NONE, NONE));
+    assertFalse(MultiFunction.anyExists(1, new FunctionValues[] {NONE, NONE}));
+
+
+    
+    // iterate all permutations and verify equivilence
+    for (FunctionValues firstArg : new FunctionValues[] {ALL, NONE}) {
+      for (FunctionValues secondArg : new FunctionValues[] {ALL, NONE}) {
+        assertEquals("allExists("+firstArg+","+secondArg+")",
+                     MultiFunction.allExists(1, firstArg,secondArg),
+                     MultiFunction.allExists(1, new FunctionValues[] { firstArg,secondArg}));
+        assertEquals("anyExists("+firstArg+","+secondArg+")",
+                     MultiFunction.anyExists(1, firstArg,secondArg),
+                     MultiFunction.anyExists(1, new FunctionValues[] { firstArg,secondArg}));
+        
+        // future proof against posibility of someone "optimizing" the array method
+        // if .length==2 ... redundent third arg should give same results as well...
+        assertEquals("allExists("+firstArg+","+secondArg+","+secondArg+")",
+                     MultiFunction.allExists(1, firstArg,secondArg),
+                     MultiFunction.allExists(1, new FunctionValues[] { firstArg,secondArg,secondArg}));
+        assertEquals("anyExists("+firstArg+","+secondArg+","+secondArg+")",
+                     MultiFunction.anyExists(1, firstArg,secondArg),
+                     MultiFunction.anyExists(1, new FunctionValues[] { firstArg,secondArg,secondArg}));
+        
+      }
+    }
+  }
+    
   /** 
    * Asserts that for every doc, the {@link FunctionValues#exists} value 
    * from the {@link ValueSource} is <b>true</b>.
