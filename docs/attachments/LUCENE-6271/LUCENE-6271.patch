diff -ruN -x .svn -x .git -x build -x .caches -x .idea -x idea-build -x eclipse-build -x .settings trunk/lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.java branch/lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.java
--- trunk/lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.java	2015-03-05 00:42:04.047522075 -0500
+++ branch/lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.java	2015-03-31 11:42:41.045290294 -0400
@@ -652,14 +652,6 @@
 
       @Override
       public PostingsEnum postings(Bits liveDocs, PostingsEnum reuse, int flags) throws IOException {
-
-        if (PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {
-          if (fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {
-            // Positions were not indexed:
-            return null;
-          }
-        }
-
         //System.out.println("BTR.docs this=" + this);
         decodeMetaData();
         //System.out.println("BTR.docs:  state.docFreq=" + state.docFreq);
diff -ruN -x .svn -x .git -x build -x .caches -x .idea -x idea-build -x eclipse-build -x .settings trunk/lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsIntersectTermsEnum.java branch/lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsIntersectTermsEnum.java
--- trunk/lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsIntersectTermsEnum.java	2015-02-23 22:45:03.623414913 -0500
+++ branch/lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsIntersectTermsEnum.java	2015-03-31 11:42:41.045290294 -0400
@@ -203,14 +203,6 @@
 
   @Override
   public PostingsEnum postings(Bits skipDocs, PostingsEnum reuse, int flags) throws IOException {
-
-    if (PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {
-      if (fr.fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {
-        // Positions were not indexed:
-        return null;
-      }
-    }
-
     currentFrame.decodeMetaData();
     return fr.parent.postingsReader.postings(fr.fieldInfo, currentFrame.termState, skipDocs, reuse, flags);
   }
diff -ruN -x .svn -x .git -x build -x .caches -x .idea -x idea-build -x eclipse-build -x .settings trunk/lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum.java branch/lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum.java
--- trunk/lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum.java	2015-02-23 22:45:03.631414912 -0500
+++ branch/lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum.java	2015-03-31 11:42:41.045290294 -0400
@@ -924,14 +924,6 @@
 
   @Override
   public PostingsEnum postings(Bits skipDocs, PostingsEnum reuse, int flags) throws IOException {
-
-    if (PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {
-      if (fr.fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {
-        // Positions were not indexed:
-        return null;
-      }
-    }
-
     assert !eof;
     //if (DEBUG) {
     //System.out.println("BTTR.docs seg=" + segment);
diff -ruN -x .svn -x .git -x build -x .caches -x .idea -x idea-build -x eclipse-build -x .settings trunk/lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.java branch/lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.java
--- trunk/lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.java	2015-02-26 00:59:37.691751228 -0500
+++ branch/lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.java	2015-03-31 14:12:01.653108793 -0400
@@ -860,19 +860,47 @@
         // TODO: implement reuse
         // it's hairy!
 
+        // TODO: the logic of which enum impl to choose should be refactored to be simpler...
         if (PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {
-          if (!hasPos) {
-            return null;
-          }
 
           if (terms[termOrd] instanceof LowFreqTerm) {
             final LowFreqTerm term = ((LowFreqTerm) terms[termOrd]);
             final int[] postings = term.postings;
+            if (hasFreq == false) {
+              LowFreqDocsEnumNoTF docsEnum;
+              if (reuse instanceof LowFreqDocsEnumNoTF) {
+                docsEnum = (LowFreqDocsEnumNoTF) reuse;
+                if (!docsEnum.canReuse(liveDocs)) {
+                  docsEnum = new LowFreqDocsEnumNoTF(liveDocs);
+                }
+              } else {
+                docsEnum = new LowFreqDocsEnumNoTF(liveDocs);
+              }
+
+              return docsEnum.reset(postings);
+              
+            } else if (hasPos == false) {
+              LowFreqDocsEnumNoPos docsEnum;
+              if (reuse instanceof LowFreqDocsEnumNoPos) {
+                docsEnum = (LowFreqDocsEnumNoPos) reuse;
+                if (!docsEnum.canReuse(liveDocs)) {
+                  docsEnum = new LowFreqDocsEnumNoPos(liveDocs);
+                }
+              } else {
+                docsEnum = new LowFreqDocsEnumNoPos(liveDocs);
+              }
+
+              return docsEnum.reset(postings);
+            }
             final byte[] payloads = term.payloads;
             return new LowFreqPostingsEnum(liveDocs, hasOffsets, hasPayloads).reset(postings, payloads);
           } else {
             final HighFreqTerm term = (HighFreqTerm) terms[termOrd];
-            return new HighFreqPostingsEnum(liveDocs, hasOffsets).reset(term.docIDs, term.freqs, term.positions, term.payloads);
+            if (hasPos == false) {
+              return new HighFreqDocsEnum(liveDocs).reset(term.docIDs, term.freqs);
+            } else {
+              return new HighFreqPostingsEnum(liveDocs, hasOffsets).reset(term.docIDs, term.freqs, term.positions, term.payloads);
+            }
           }
         }
 
@@ -1454,10 +1482,9 @@
       public PostingsEnum postings(Bits liveDocs, PostingsEnum reuse, int flags) {
         // TODO: implement reuse
         // it's hairy!
-        if (PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {
-          if (!hasPos) {
-            return null;
-          }
+
+        // TODO: the logic of which enum impl to choose should be refactored to be simpler...
+        if (hasPos && PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {
           if (terms[termOrd] instanceof LowFreqTerm) {
             final LowFreqTerm term = ((LowFreqTerm) terms[termOrd]);
             final int[] postings = term.postings;
diff -ruN -x .svn -x .git -x build -x .caches -x .idea -x idea-build -x eclipse-build -x .settings trunk/lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.java branch/lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.java
--- trunk/lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.java	2015-03-05 00:42:04.071522075 -0500
+++ branch/lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.java	2015-03-31 11:42:41.045290294 -0400
@@ -829,10 +829,9 @@
     @Override
     public PostingsEnum postings(Bits liveDocs, PostingsEnum reuse, int flags) {
 
-      if (PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {
-        if (field.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {
-          return null;
-        }
+      // TODO: the logic of which enum impl to choose should be refactored to be simpler...
+      boolean hasPositions = field.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;
+      if (hasPositions && PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {
         boolean hasOffsets = field.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;
         decodeMetaData();
         FSTPostingsEnum docsAndPositionsEnum;
diff -ruN -x .svn -x .git -x build -x .caches -x .idea -x idea-build -x eclipse-build -x .settings trunk/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.java branch/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.java
--- trunk/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.java	2015-03-05 00:42:04.043522075 -0500
+++ branch/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.java	2015-03-31 11:42:40.997290295 -0400
@@ -209,11 +209,8 @@
     @Override
     public PostingsEnum postings(Bits liveDocs, PostingsEnum reuse, int flags) throws IOException {
 
-      if (PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {
-        if (indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {
-          // Positions were not indexed
-          return null;
-        }
+      boolean hasPositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;
+      if (hasPositions && PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {
 
         SimpleTextPostingsEnum docsAndPositionsEnum;
         if (reuse != null && reuse instanceof SimpleTextPostingsEnum && ((SimpleTextPostingsEnum) reuse).canReuse(SimpleTextFieldsReader.this.in)) {
diff -ruN -x .svn -x .git -x build -x .caches -x .idea -x idea-build -x eclipse-build -x .settings trunk/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader.java branch/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader.java
--- trunk/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader.java	2015-03-05 00:42:04.087522075 -0500
+++ branch/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader.java	2015-03-31 11:42:41.001290295 -0400
@@ -388,16 +388,15 @@
 
     @Override
     public PostingsEnum postings(Bits liveDocs, PostingsEnum reuse, int flags) throws IOException {
-
+      
       if (PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {
         SimpleTVPostings postings = current.getValue();
-        if (postings.positions == null && postings.startOffsets == null) {
-          return null;
+        if (postings.positions != null || postings.startOffsets != null) {
+          // TODO: reuse
+          SimpleTVPostingsEnum e = new SimpleTVPostingsEnum();
+          e.reset(liveDocs, postings.positions, postings.startOffsets, postings.endOffsets, postings.payloads);
+          return e;
         }
-        // TODO: reuse
-        SimpleTVPostingsEnum e = new SimpleTVPostingsEnum();
-        e.reset(liveDocs, postings.positions, postings.startOffsets, postings.endOffsets, postings.payloads);
-        return e;
       }
 
       // TODO: reuse
diff -ruN -x .svn -x .git -x build -x .caches -x .idea -x idea-build -x eclipse-build -x .settings trunk/lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsReader.java branch/lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsReader.java
--- trunk/lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsReader.java	2015-03-05 00:42:03.951522077 -0500
+++ branch/lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsReader.java	2015-03-31 11:42:40.929290296 -0400
@@ -936,12 +936,6 @@
 
     @Override
     public final PostingsEnum postings(Bits liveDocs, PostingsEnum reuse, int flags) throws IOException {
-
-      if (PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {
-        if (positions == null && startOffsets == null)
-          return null;
-      }
-
       final TVPostingsEnum docsEnum;
       if (reuse != null && reuse instanceof TVPostingsEnum) {
         docsEnum = (TVPostingsEnum) reuse;
diff -ruN -x .svn -x .git -x build -x .caches -x .idea -x idea-build -x eclipse-build -x .settings trunk/lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.java branch/lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.java
--- trunk/lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.java	2015-02-26 00:59:38.043751220 -0500
+++ branch/lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.java	2015-03-31 16:49:38.752917235 -0400
@@ -193,8 +193,12 @@
     
   @Override
   public PostingsEnum postings(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, PostingsEnum reuse, int flags) throws IOException {
+    
+    boolean indexHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;
+    boolean indexHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;
+    boolean indexHasPayloads = fieldInfo.hasPayloads();
 
-    if (PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS) == false) {
+    if (indexHasPositions == false || PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS) == false) {
       BlockDocsEnum docsEnum;
       if (reuse instanceof BlockDocsEnum) {
         docsEnum = (BlockDocsEnum) reuse;
@@ -205,17 +209,8 @@
         docsEnum = new BlockDocsEnum(fieldInfo);
       }
       return docsEnum.reset(liveDocs, (IntBlockTermState) termState, flags);
-    }
-
-    boolean indexHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;
-    boolean indexHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;
-    boolean indexHasPayloads = fieldInfo.hasPayloads();
-
-    if (!indexHasPositions)
-      return null;
-
-    if ((!indexHasOffsets || PostingsEnum.featureRequested(flags, PostingsEnum.OFFSETS) == false) &&
-        (!indexHasPayloads || PostingsEnum.featureRequested(flags, PostingsEnum.PAYLOADS) == false)) {
+    } else if ((indexHasOffsets == false || PostingsEnum.featureRequested(flags, PostingsEnum.OFFSETS) == false) &&
+               (indexHasPayloads == false || PostingsEnum.featureRequested(flags, PostingsEnum.PAYLOADS) == false)) {
       BlockPostingsEnum docsAndPositionsEnum;
       if (reuse instanceof BlockPostingsEnum) {
         docsAndPositionsEnum = (BlockPostingsEnum) reuse;
diff -ruN -x .svn -x .git -x build -x .caches -x .idea -x idea-build -x eclipse-build -x .settings trunk/lucene/core/src/java/org/apache/lucene/index/CheckIndex.java branch/lucene/core/src/java/org/apache/lucene/index/CheckIndex.java
--- trunk/lucene/core/src/java/org/apache/lucene/index/CheckIndex.java	2015-03-18 00:38:18.880848638 -0400
+++ branch/lucene/core/src/java/org/apache/lucene/index/CheckIndex.java	2015-03-31 19:05:53.032751661 -0400
@@ -917,8 +917,7 @@
     
     final Status.TermIndexStatus status = new Status.TermIndexStatus();
     int computedFieldCount = 0;
-    
-    PostingsEnum docs = null;
+
     PostingsEnum postings = null;
     
     String lastField = null;
@@ -1068,8 +1067,7 @@
           throw new RuntimeException("docfreq: " + docFreq + " is out of bounds");
         }
         sumDocFreq += docFreq;
-        
-        docs = termsEnum.postings(liveDocs, docs);
+
         postings = termsEnum.postings(liveDocs, postings, PostingsEnum.ALL);
 
         if (hasFreqs == false) {
@@ -1094,18 +1092,11 @@
           }
         }
         
-        final PostingsEnum docs2;
-        if (postings != null) {
-          docs2 = postings;
-        } else {
-          docs2 = docs;
-        }
-        
         int lastDoc = -1;
         int docCount = 0;
         long totalTermFreq = 0;
         while(true) {
-          final int doc = docs2.nextDoc();
+          final int doc = postings.nextDoc();
           if (doc == DocIdSetIterator.NO_MORE_DOCS) {
             break;
           }
@@ -1113,7 +1104,7 @@
           visitedDocs.set(doc);
           int freq = -1;
           if (hasFreqs) {
-            freq = docs2.freq();
+            freq = postings.freq();
             if (freq <= 0) {
               throw new RuntimeException("term " + term + ": doc " + doc + ": freq " + freq + " is out of bounds");
             }
@@ -1123,7 +1114,7 @@
             // When a field didn't index freq, it must
             // consistently "lie" and pretend that freq was
             // 1:
-            if (docs2.freq() != 1) {
+            if (postings.freq() != 1) {
               throw new RuntimeException("term " + term + ": doc " + doc + ": freq " + freq + " != 1 when Terms.hasFreqs() is false");
             }
           }
@@ -1195,20 +1186,20 @@
         // Re-count if there are deleted docs:
         if (liveDocs != null) {
           if (hasFreqs) {
-            docs = termsEnum.postings(null, docs);
+            postings = termsEnum.postings(null, postings);
             docCount = 0;
             totalTermFreq = 0;
-            while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {
-              visitedDocs.set(docs.docID());
+            while(postings.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {
+              visitedDocs.set(postings.docID());
               docCount++;
-              totalTermFreq += docs.freq();
+              totalTermFreq += postings.freq();
             }
           } else {
-            docs = termsEnum.postings(null, docs, PostingsEnum.NONE);
+            postings = termsEnum.postings(null, postings, PostingsEnum.NONE);
             docCount = 0;
             totalTermFreq = -1;
-            while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {
-              visitedDocs.set(docs.docID());
+            while(postings.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {
+              visitedDocs.set(postings.docID());
               docCount++;
             }
           }
@@ -1295,15 +1286,15 @@
         } else {
           for(int idx=0;idx<7;idx++) {
             final int skipDocID = (int) (((idx+1)*(long) maxDoc)/8);
-            docs = termsEnum.postings(liveDocs, docs, PostingsEnum.NONE);
-            final int docID = docs.advance(skipDocID);
+            postings = termsEnum.postings(liveDocs, postings, PostingsEnum.NONE);
+            final int docID = postings.advance(skipDocID);
             if (docID == DocIdSetIterator.NO_MORE_DOCS) {
               break;
             } else {
               if (docID < skipDocID) {
                 throw new RuntimeException("term " + term + ": advance(docID=" + skipDocID + ") returned docID=" + docID);
               }
-              final int nextDocID = docs.nextDoc();
+              final int nextDocID = postings.nextDoc();
               if (nextDocID == DocIdSetIterator.NO_MORE_DOCS) {
                 break;
               }
@@ -1408,12 +1399,12 @@
                 throw new RuntimeException("seek to existing term " + seekTerms[i] + " failed");
               }
               
-              docs = termsEnum.postings(liveDocs, docs, PostingsEnum.NONE);
-              if (docs == null) {
+              postings = termsEnum.postings(liveDocs, postings, PostingsEnum.NONE);
+              if (postings == null) {
                 throw new RuntimeException("null DocsEnum from to existing term " + seekTerms[i]);
               }
-              
-              while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {
+
+              while (postings.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {
                 totDocCount++;
               }
             }
@@ -1426,12 +1417,12 @@
               }
               
               totDocFreq += termsEnum.docFreq();
-              docs = termsEnum.postings(null, docs, PostingsEnum.NONE);
-              if (docs == null) {
+              postings = termsEnum.postings(null, postings, PostingsEnum.NONE);
+              if (postings == null) {
                 throw new RuntimeException("null DocsEnum from to existing term " + seekTerms[i]);
               }
               
-              while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {
+              while(postings.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {
                 totDocCountNoDeletes++;
               }
             }
@@ -1830,12 +1821,11 @@
         infoStream.print("    test: term vectors........");
       }
 
-      PostingsEnum docs = null;
       PostingsEnum postings = null;
 
       // Only used if crossCheckTermVectors is true:
       PostingsEnum postingsDocs = null;
-      PostingsEnum postingsPostings = null;
+      PostingsEnum postingsDocs2 = null;
 
       final Bits liveDocs = reader.getLiveDocs();
 
@@ -1907,67 +1897,43 @@
                 final boolean hasProx = terms.hasOffsets() || terms.hasPositions();
                 BytesRef term = null;
                 while ((term = termsEnum.next()) != null) {
-                  
-                  if (hasProx) {
-                    postings = termsEnum.postings(null, postings, PostingsEnum.ALL);
-                    assert postings != null;
-                    docs = null;
-                  } else {
-                    docs = termsEnum.postings(null, docs);
-                    assert docs != null;
-                    postings = null;
-                  }
-                  
-                  final PostingsEnum docs2;
-                  if (hasProx) {
-                    assert postings != null;
-                    docs2 = postings;
-                  } else {
-                    assert docs != null;
-                    docs2 = docs;
-                  }
-                  
-                  final PostingsEnum postingsDocs2;
+
+                  // This is the term vectors:
+                  postings = termsEnum.postings(null, postings, PostingsEnum.ALL);
+                  assert postings != null;
+
                   if (!postingsTermsEnum.seekExact(term)) {
                     throw new RuntimeException("vector term=" + term + " field=" + field + " does not exist in postings; doc=" + j);
                   }
-                  postingsPostings = postingsTermsEnum.postings(null, postingsPostings, PostingsEnum.ALL);
-                  if (postingsPostings == null) {
-                    // Term vectors were indexed w/ pos but postings were not
-                    postingsDocs = postingsTermsEnum.postings(null, postingsDocs);
-                    if (postingsDocs == null) {
-                      throw new RuntimeException("vector term=" + term + " field=" + field + " does not exist in postings; doc=" + j);
-                    }
-                  }
-                  
-                  if (postingsPostings != null) {
-                    postingsDocs2 = postingsPostings;
-                  } else {
-                    postingsDocs2 = postingsDocs;
-                  }
+
+                  // This is the inverted index ("real" postings):
+                  postingsDocs2 = postingsTermsEnum.postings(null, postingsDocs2, PostingsEnum.ALL);
+                  assert postingsDocs2 != null;
+
                   
                   final int advanceDoc = postingsDocs2.advance(j);
                   if (advanceDoc != j) {
                     throw new RuntimeException("vector term=" + term + " field=" + field + ": doc=" + j + " was not found in postings (got: " + advanceDoc + ")");
                   }
                   
-                  final int doc = docs2.nextDoc();
+                  final int doc = postings.nextDoc();
                   
                   if (doc != 0) {
                     throw new RuntimeException("vector for doc " + j + " didn't return docID=0: got docID=" + doc);
                   }
                   
                   if (postingsHasFreq) {
-                    final int tf = docs2.freq();
+                    final int tf = postings.freq();
                     if (postingsHasFreq && postingsDocs2.freq() != tf) {
                       throw new RuntimeException("vector term=" + term + " field=" + field + " doc=" + j + ": freq=" + tf + " differs from postings freq=" + postingsDocs2.freq());
                     }
-                    
+
+                    // Term vectors has prox?
                     if (hasProx) {
                       for (int i = 0; i < tf; i++) {
                         int pos = postings.nextPosition();
-                        if (postingsPostings != null) {
-                          int postingsPos = postingsPostings.nextPosition();
+                        if (postingsTerms.hasPositions()) {
+                          int postingsPos = postingsDocs2.nextPosition();
                           if (terms.hasPositions() && pos != postingsPos) {
                             throw new RuntimeException("vector term=" + term + " field=" + field + " doc=" + j + ": pos=" + pos + " differs from postings pos=" + postingsPos);
                           }
@@ -1987,19 +1953,18 @@
                         }
                         lastStartOffset = startOffset;
                          */
-                        
-                        if (postingsPostings != null) {
-                          final int postingsStartOffset = postingsPostings.startOffset();
-                          
-                          final int postingsEndOffset = postingsPostings.endOffset();
-                          if (startOffset != -1 && postingsStartOffset != -1 && startOffset != postingsStartOffset) {
+
+                        if (startOffset != -1 && endOffset != -1 && postingsTerms.hasOffsets()) {
+                          int postingsStartOffset = postingsDocs2.startOffset();
+                          int postingsEndOffset = postingsDocs2.endOffset();
+                          if (startOffset != postingsStartOffset) {
                             throw new RuntimeException("vector term=" + term + " field=" + field + " doc=" + j + ": startOffset=" + startOffset + " differs from postings startOffset=" + postingsStartOffset);
                           }
-                          if (endOffset != -1 && postingsEndOffset != -1 && endOffset != postingsEndOffset) {
+                          if (endOffset != postingsEndOffset) {
                             throw new RuntimeException("vector term=" + term + " field=" + field + " doc=" + j + ": endOffset=" + endOffset + " differs from postings endOffset=" + postingsEndOffset);
                           }
                         }
-                        
+
                         BytesRef payload = postings.getPayload();
                         
                         if (payload != null) {
@@ -2007,21 +1972,20 @@
                         }
                         
                         if (postingsHasPayload && vectorsHasPayload) {
-                          assert postingsPostings != null;
                           
                           if (payload == null) {
                             // we have payloads, but not at this position. 
                             // postings has payloads too, it should not have one at this position
-                            if (postingsPostings.getPayload() != null) {
-                              throw new RuntimeException("vector term=" + term + " field=" + field + " doc=" + j + " has no payload but postings does: " + postingsPostings.getPayload());
+                            if (postingsDocs2.getPayload() != null) {
+                              throw new RuntimeException("vector term=" + term + " field=" + field + " doc=" + j + " has no payload but postings does: " + postingsDocs2.getPayload());
                             }
                           } else {
                             // we have payloads, and one at this position
                             // postings should also have one at this position, with the same bytes.
-                            if (postingsPostings.getPayload() == null) {
+                            if (postingsDocs2.getPayload() == null) {
                               throw new RuntimeException("vector term=" + term + " field=" + field + " doc=" + j + " has payload=" + payload + " but postings does not.");
                             }
-                            BytesRef postingsPayload = postingsPostings.getPayload();
+                            BytesRef postingsPayload = postingsDocs2.getPayload();
                             if (!payload.equals(postingsPayload)) {
                               throw new RuntimeException("vector term=" + term + " field=" + field + " doc=" + j + " has payload=" + payload + " but differs from postings payload=" + postingsPayload);
                             }
diff -ruN -x .svn -x .git -x build -x .caches -x .idea -x idea-build -x eclipse-build -x .settings trunk/lucene/core/src/java/org/apache/lucene/index/FilterLeafReader.java branch/lucene/core/src/java/org/apache/lucene/index/FilterLeafReader.java
--- trunk/lucene/core/src/java/org/apache/lucene/index/FilterLeafReader.java	2015-02-28 00:08:41.248312996 -0500
+++ branch/lucene/core/src/java/org/apache/lucene/index/FilterLeafReader.java	2015-03-31 17:09:50.084892699 -0400
@@ -222,17 +222,17 @@
   }
 
   /** Base class for filtering {@link PostingsEnum} implementations. */
-  public static class FilterDocsEnum extends PostingsEnum {
-    /** The underlying DocsEnum instance. */
+  public static class FilterPostingsEnum extends PostingsEnum {
+    /** The underlying PostingsEnum instance. */
     protected final PostingsEnum in;
 
     /**
-     * Create a new FilterDocsEnum
-     * @param in the underlying DocsEnum instance.
+     * Create a new FilterPostingsEnum
+     * @param in the underlying PostingsEnum instance.
      */
-    public FilterDocsEnum(PostingsEnum in) {
+    public FilterPostingsEnum(PostingsEnum in) {
       if (in == null) {
-        throw new NullPointerException("incoming DocsEnum cannot be null");
+        throw new NullPointerException("incoming PostingsEnum cannot be null");
       }
       this.in = in;
     }
diff -ruN -x .svn -x .git -x build -x .caches -x .idea -x idea-build -x eclipse-build -x .settings trunk/lucene/core/src/java/org/apache/lucene/index/LeafReader.java branch/lucene/core/src/java/org/apache/lucene/index/LeafReader.java
--- trunk/lucene/core/src/java/org/apache/lucene/index/LeafReader.java	2015-02-18 13:17:18.964855261 -0500
+++ branch/lucene/core/src/java/org/apache/lucene/index/LeafReader.java	2015-03-31 14:31:53.797084646 -0400
@@ -223,7 +223,14 @@
   }
 
   /** Returns {@link PostingsEnum} for the specified term
-   *  with {@link PostingsEnum#FREQS}. */
+   *  with {@link PostingsEnum#FREQS}.
+   *  <p>
+   *  Use this method if you only require documents and frequencies,
+   *  and do not need any proximity data.
+   *  This method is equivalent to 
+   *  {@link #postings(Term, int) postings(term, PostingsEnum.FREQS)}
+   *  @see #postings(Term, int)
+   */
   public final PostingsEnum postings(Term term) throws IOException {
     return postings(term, PostingsEnum.FREQS);
   }
diff -ruN -x .svn -x .git -x build -x .caches -x .idea -x idea-build -x eclipse-build -x .settings trunk/lucene/core/src/java/org/apache/lucene/index/MultiFields.java branch/lucene/core/src/java/org/apache/lucene/index/MultiFields.java
--- trunk/lucene/core/src/java/org/apache/lucene/index/MultiFields.java	2015-02-23 22:45:03.579414914 -0500
+++ branch/lucene/core/src/java/org/apache/lucene/index/MultiFields.java	2015-03-31 11:42:40.885290297 -0400
@@ -159,8 +159,7 @@
    *  required.  Some codecs may be able to optimize
    *  their implementation when offsets and/or payloads are not
    *  required. This will return null if the field or term does not
-   *  exist or positions were not indexed. See {@link
-   *  TermsEnum#postings(Bits, PostingsEnum,int)}. */
+   *  exist. See {@link TermsEnum#postings(Bits, PostingsEnum,int)}. */
   public static PostingsEnum getTermPositionsEnum(IndexReader r, Bits liveDocs, String field, BytesRef term, int flags) throws IOException {
     assert field != null;
     assert term != null;
diff -ruN -x .svn -x .git -x build -x .caches -x .idea -x idea-build -x eclipse-build -x .settings trunk/lucene/core/src/java/org/apache/lucene/index/MultiTermsEnum.java branch/lucene/core/src/java/org/apache/lucene/index/MultiTermsEnum.java
--- trunk/lucene/core/src/java/org/apache/lucene/index/MultiTermsEnum.java	2015-02-18 13:17:19.004855260 -0500
+++ branch/lucene/core/src/java/org/apache/lucene/index/MultiTermsEnum.java	2015-03-31 11:42:40.885290297 -0400
@@ -379,22 +379,14 @@
 
       assert entry.index < docsEnum.subPostingsEnums.length: entry.index + " vs " + docsEnum.subPostingsEnums.length + "; " + subs.length;
       final PostingsEnum subPostingsEnum = entry.terms.postings(b, docsEnum.subPostingsEnums[entry.index], flags);
-      if (subPostingsEnum != null) {
-        docsEnum.subPostingsEnums[entry.index] = subPostingsEnum;
-        subDocs[upto].postingsEnum = subPostingsEnum;
-        subDocs[upto].slice = entry.subSlice;
-        upto++;
-      } else {
-        // should this be an error?
-        return null;    // We can't support what is being asked for
-      }
-    }
-
-    if (upto == 0) {
-      return null;
-    } else {
-      return docsEnum.reset(subDocs, upto);
+      assert subPostingsEnum != null;
+      docsEnum.subPostingsEnums[entry.index] = subPostingsEnum;
+      subDocs[upto].postingsEnum = subPostingsEnum;
+      subDocs[upto].slice = entry.subSlice;
+      upto++;
     }
+    
+    return docsEnum.reset(subDocs, upto);
   }
 
   final static class TermsEnumWithSlice {
diff -ruN -x .svn -x .git -x build -x .caches -x .idea -x idea-build -x eclipse-build -x .settings trunk/lucene/core/src/java/org/apache/lucene/index/TermsEnum.java branch/lucene/core/src/java/org/apache/lucene/index/TermsEnum.java
--- trunk/lucene/core/src/java/org/apache/lucene/index/TermsEnum.java	2015-02-18 13:17:18.924855261 -0500
+++ branch/lucene/core/src/java/org/apache/lucene/index/TermsEnum.java	2015-03-31 14:29:07.717088010 -0400
@@ -141,10 +141,17 @@
   /** Get {@link PostingsEnum} for the current term.  Do not
    *  call this when the enum is unpositioned.  This method
    *  will not return null.
+   *  <p>
+   *  Use this method if you only require documents and frequencies,
+   *  and do not need any proximity data.
+   *  This method is equivalent to 
+   *  {@link #postings(Bits, PostingsEnum, int) postings(liveDocs, reuse, PostingsEnum.FREQS)}
    *  
    * @param liveDocs unset bits are documents that should not
    * be returned
-   * @param reuse pass a prior PostingsEnum for possible reuse */
+   * @param reuse pass a prior PostingsEnum for possible reuse 
+   * @see #postings(Bits, PostingsEnum, int)
+   */
   public final PostingsEnum postings(Bits liveDocs, PostingsEnum reuse) throws IOException {
     return postings(liveDocs, reuse, PostingsEnum.FREQS);
   }
@@ -160,7 +167,7 @@
    * @param reuse pass a prior PostingsEnum for possible reuse
    * @param flags specifies which optional per-document values
    *        you require; see {@link PostingsEnum#FREQS}
-   * @see #postings(Bits, PostingsEnum, int) */
+   */
   public abstract PostingsEnum postings(Bits liveDocs, PostingsEnum reuse, int flags) throws IOException;
 
   /**
diff -ruN -x .svn -x .git -x build -x .caches -x .idea -x idea-build -x eclipse-build -x .settings trunk/lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.java branch/lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.java
--- trunk/lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.java	2015-03-05 11:16:01.746751605 -0500
+++ branch/lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.java	2015-03-31 14:12:01.661108793 -0400
@@ -190,6 +190,11 @@
         return null;
       }
 
+      // TODO: move this check to createWeight to happen earlier to the user?
+      if (fieldTerms.hasPositions() == false) {
+        throw new IllegalStateException("field \"" + field + "\" was indexed without position data; cannot run MultiPhraseQuery (phrase=" + getQuery() + ")");
+      }
+
       // Reuse single TermsEnum below:
       final TermsEnum termsEnum = fieldTerms.iterator(null);
 
@@ -230,12 +235,6 @@
           termsEnum.seekExact(term.bytes(), termState);
           postingsEnum = termsEnum.postings(liveDocs, null, PostingsEnum.POSITIONS);
 
-          if (postingsEnum == null) {
-            // term does exist, but has no positions
-            assert termsEnum.postings(liveDocs, null, PostingsEnum.NONE) != null: "termstate found but no term exists in reader";
-            throw new IllegalStateException("field \"" + term.field() + "\" was indexed without position data; cannot run PhraseQuery (term=" + term.text() + ")");
-          }
-
           docFreq = termsEnum.docFreq();
         }
 
@@ -482,10 +481,6 @@
       }
       termsEnum.seekExact(term.bytes(), termState);
       PostingsEnum postings = termsEnum.postings(liveDocs, null, PostingsEnum.POSITIONS);
-      if (postings == null) {
-        // term does exist, but has no positions
-        throw new IllegalStateException("field \"" + term.field() + "\" was indexed without position data; cannot run PhraseQuery (term=" + term.text() + ")");
-      }
       cost += postings.cost();
       postingsEnums.add(postings);
     }
diff -ruN -x .svn -x .git -x build -x .caches -x .idea -x idea-build -x eclipse-build -x .settings trunk/lucene/core/src/java/org/apache/lucene/search/PhraseQuery.java branch/lucene/core/src/java/org/apache/lucene/search/PhraseQuery.java
--- trunk/lucene/core/src/java/org/apache/lucene/search/PhraseQuery.java	2015-03-05 11:16:01.746751605 -0500
+++ branch/lucene/core/src/java/org/apache/lucene/search/PhraseQuery.java	2015-03-31 14:12:01.653108793 -0400
@@ -297,6 +297,10 @@
         return null;
       }
 
+      if (fieldTerms.hasPositions() == false) {
+        throw new IllegalStateException("field \"" + field + "\" was indexed without position data; cannot run PhraseQuery (phrase=" + getQuery() + ")");
+      }
+
       // Reuse single TermsEnum below:
       final TermsEnum te = fieldTerms.iterator(null);
       
@@ -309,14 +313,6 @@
         }
         te.seekExact(t.bytes(), state);
         PostingsEnum postingsEnum = te.postings(liveDocs, null, PostingsEnum.POSITIONS);
-
-        // PhraseQuery on a field that did not index
-        // positions.
-        if (postingsEnum == null) {
-          assert te.seekExact(t.bytes()) : "termstate found but no term exists in reader";
-          // term does exist, but has no positions
-          throw new IllegalStateException("field \"" + t.field() + "\" was indexed without position data; cannot run PhraseQuery (term=" + t.text() + ")");
-        }
         postingsFreqs[i] = new PostingsAndFreq(postingsEnum, te.docFreq(), positions.get(i), t);
       }
 
diff -ruN -x .svn -x .git -x build -x .caches -x .idea -x idea-build -x eclipse-build -x .settings trunk/lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery.java branch/lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery.java
--- trunk/lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery.java	2015-03-31 15:06:51.761042150 -0400
+++ branch/lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery.java	2015-03-31 20:56:53.904616743 -0400
@@ -94,6 +94,10 @@
       // so we seek to the term now in this segment..., this sucks because it's ugly mostly!
       final Terms terms = context.reader().terms(term.field());
       if (terms != null) {
+        if (terms.hasPositions() == false) {
+          throw new IllegalStateException("field \"" + term.field() + "\" was indexed without position data; cannot run SpanTermQuery (term=" + term.text() + ")");
+        }
+
         final TermsEnum termsEnum = terms.iterator(null);
         if (termsEnum.seekExact(term.bytes())) {
           state = termsEnum.termState();
@@ -115,12 +119,6 @@
     termsEnum.seekExact(term.bytes(), state);
 
     final PostingsEnum postings = termsEnum.postings(acceptDocs, null, PostingsEnum.PAYLOADS);
-
-    if (postings != null) {
-      return new TermSpans(postings, term);
-    } else {
-      // term does exist, but has no positions
-      throw new IllegalStateException("field \"" + term.field() + "\" was indexed without position data; cannot run SpanTermQuery (term=" + term.text() + ")");
-    }
+    return new TermSpans(postings, term);
   }
 }
diff -ruN -x .svn -x .git -x build -x .caches -x .idea -x idea-build -x eclipse-build -x .settings trunk/lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3.java branch/lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3.java
--- trunk/lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3.java	2015-02-18 13:17:18.388855272 -0500
+++ branch/lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3.java	2015-03-31 15:57:04.996981116 -0400
@@ -172,9 +172,10 @@
     
     // NOTE: we don't assert hasOffsets/hasPositions/hasPayloads because they are allowed to be different
 
+    boolean bothHavePositions = leftTerms.hasPositions() && rightTerms.hasPositions();
     TermsEnum leftTermsEnum = leftTerms.iterator(null);
     TermsEnum rightTermsEnum = rightTerms.iterator(null);
-    assertTermsEnum(leftTermsEnum, rightTermsEnum, true);
+    assertTermsEnum(leftTermsEnum, rightTermsEnum, true, bothHavePositions);
     
     assertTermsSeeking(leftTerms, rightTerms);
     
@@ -187,7 +188,7 @@
           // TODO: test start term too
           TermsEnum leftIntersection = leftTerms.intersect(automaton, null);
           TermsEnum rightIntersection = rightTerms.intersect(automaton, null);
-          assertTermsEnum(leftIntersection, rightIntersection, rarely());
+          assertTermsEnum(leftIntersection, rightIntersection, rarely(), bothHavePositions);
         }
       }
     }
@@ -280,7 +281,7 @@
    * checks the terms enum sequentially
    * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums
    */
-  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {
+  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep, boolean hasPositions) throws Exception {
     BytesRef term;
     Bits randomBits = new RandomBits(MAXDOC, random().nextDouble(), random());
     PostingsEnum leftPositions = null;
@@ -292,56 +293,58 @@
       assertEquals(term, rightTermsEnum.next());
       assertTermStats(leftTermsEnum, rightTermsEnum);
       if (deep) {
-        // with payloads + off
-        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.ALL),
-                                   rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.ALL));
-        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.ALL),
-                                   rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.ALL));
-
-        assertPositionsSkipping(leftTermsEnum.docFreq(), 
-                                leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.ALL),
-                                rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.ALL));
-        assertPositionsSkipping(leftTermsEnum.docFreq(), 
-                                leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.ALL),
-                                rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.ALL));
-        // with payloads only
-        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.PAYLOADS),
-                                   rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.PAYLOADS));
-        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.PAYLOADS),
-                                   rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.PAYLOADS));
-
-        assertPositionsSkipping(leftTermsEnum.docFreq(), 
-                                leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.PAYLOADS),
-                                rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.PAYLOADS));
-        assertPositionsSkipping(leftTermsEnum.docFreq(), 
-                                leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.PAYLOADS),
-                                rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.PAYLOADS));
-
-        // with offsets only
-        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.OFFSETS),
-                                   rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.OFFSETS));
-        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.OFFSETS),
-                                   rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.OFFSETS));
-
-        assertPositionsSkipping(leftTermsEnum.docFreq(), 
-                                leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.OFFSETS),
-                                rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.OFFSETS));
-        assertPositionsSkipping(leftTermsEnum.docFreq(), 
-                                leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.OFFSETS),
-                                rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.OFFSETS));
-        
-        // with positions only
-        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.POSITIONS),
-                                   rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.POSITIONS));
-        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.POSITIONS),
-                                   rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.POSITIONS));
-
-        assertPositionsSkipping(leftTermsEnum.docFreq(), 
-                                leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.POSITIONS),
-                                rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.POSITIONS));
-        assertPositionsSkipping(leftTermsEnum.docFreq(), 
-                                leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.POSITIONS),
-                                rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.POSITIONS));
+        if (hasPositions) {
+          // with payloads + off
+          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.ALL),
+                                     rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.ALL));
+          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.ALL),
+                                     rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.ALL));
+
+          assertPositionsSkipping(leftTermsEnum.docFreq(),
+                                  leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.ALL),
+                                  rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.ALL));
+          assertPositionsSkipping(leftTermsEnum.docFreq(),
+                                  leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.ALL),
+                                  rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.ALL));
+          // with payloads only
+          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.PAYLOADS),
+                                     rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.PAYLOADS));
+          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.PAYLOADS),
+                                     rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.PAYLOADS));
+
+          assertPositionsSkipping(leftTermsEnum.docFreq(),
+                                  leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.PAYLOADS),
+                                  rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.PAYLOADS));
+          assertPositionsSkipping(leftTermsEnum.docFreq(),
+                                  leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.PAYLOADS),
+                                  rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.PAYLOADS));
+
+          // with offsets only
+          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.OFFSETS),
+                                     rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.OFFSETS));
+          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.OFFSETS),
+                                     rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.OFFSETS));
+
+          assertPositionsSkipping(leftTermsEnum.docFreq(),
+                                  leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.OFFSETS),
+                                  rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.OFFSETS));
+          assertPositionsSkipping(leftTermsEnum.docFreq(),
+                                  leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.OFFSETS),
+                                  rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.OFFSETS));
+
+          // with positions only
+          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.POSITIONS),
+                                     rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.POSITIONS));
+          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.POSITIONS),
+                                     rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.POSITIONS));
+
+          assertPositionsSkipping(leftTermsEnum.docFreq(),
+                                  leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.POSITIONS),
+                                  rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.POSITIONS));
+          assertPositionsSkipping(leftTermsEnum.docFreq(),
+                                  leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.POSITIONS),
+                                  rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.POSITIONS));
+        }
         
         // with freqs:
         assertDocsEnum(leftDocs = leftTermsEnum.postings(null, leftDocs),
@@ -389,11 +392,8 @@
    * checks docs + freqs + positions + payloads, sequentially
    */
   public void assertDocsAndPositionsEnum(PostingsEnum leftDocs, PostingsEnum rightDocs) throws Exception {
-    if (leftDocs == null || rightDocs == null) {
-      assertNull(leftDocs);
-      assertNull(rightDocs);
-      return;
-    }
+    assertNotNull(leftDocs);
+    assertNotNull(rightDocs);
     assertEquals(-1, leftDocs.docID());
     assertEquals(-1, rightDocs.docID());
     int docid;
diff -ruN -x .svn -x .git -x build -x .caches -x .idea -x idea-build -x eclipse-build -x .settings trunk/lucene/core/src/test/org/apache/lucene/index/TestCodecs.java branch/lucene/core/src/test/org/apache/lucene/index/TestCodecs.java
--- trunk/lucene/core/src/test/org/apache/lucene/index/TestCodecs.java	2015-03-05 00:42:03.631522084 -0500
+++ branch/lucene/core/src/test/org/apache/lucene/index/TestCodecs.java	2015-03-31 15:01:10.909049054 -0400
@@ -452,20 +452,15 @@
         do {
           term = field.terms[upto];
           if (random().nextInt(3) == 1) {
-            final PostingsEnum docs;
             final PostingsEnum postings;
             if (!field.omitTF) {
+              // TODO: we should randomize which postings features are available, but
+              // need to coordinate this with the checks below that rely on such features
               postings = termsEnum.postings(null, null, PostingsEnum.ALL);
-              if (postings != null) {
-                docs = postings;
-              } else {
-                docs = TestUtil.docs(random(), termsEnum, null, null, PostingsEnum.FREQS);
-              }
             } else {
-              postings = null;
-              docs = TestUtil.docs(random(), termsEnum, null, null, PostingsEnum.NONE);
+              postings = TestUtil.docs(random(), termsEnum, null, null, PostingsEnum.FREQS);
             }
-            assertNotNull(docs);
+            assertNotNull(postings);
             int upto2 = -1;
             boolean ended = false;
             while(upto2 < term.docs.length-1) {
@@ -476,10 +471,10 @@
                 final int inc = 1+random().nextInt(left-1);
                 upto2 += inc;
                 if (random().nextInt(2) == 1) {
-                  doc = docs.advance(term.docs[upto2]);
+                  doc = postings.advance(term.docs[upto2]);
                   assertEquals(term.docs[upto2], doc);
                 } else {
-                  doc = docs.advance(1+term.docs[upto2]);
+                  doc = postings.advance(1+term.docs[upto2]);
                   if (doc == DocIdSetIterator.NO_MORE_DOCS) {
                     // skipped past last doc
                     assert upto2 == term.docs.length-1;
@@ -494,7 +489,7 @@
                   }
                 }
               } else {
-                doc = docs.nextDoc();
+                doc = postings.nextDoc();
                 assertTrue(doc != -1);
                 upto2++;
               }
@@ -508,7 +503,7 @@
             }
 
             if (!ended) {
-              assertEquals(DocIdSetIterator.NO_MORE_DOCS, docs.nextDoc());
+              assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings.nextDoc());
             }
           }
           upto++;
diff -ruN -x .svn -x .git -x build -x .caches -x .idea -x idea-build -x eclipse-build -x .settings trunk/lucene/core/src/test/org/apache/lucene/index/TestFilterLeafReader.java branch/lucene/core/src/test/org/apache/lucene/index/TestFilterLeafReader.java
--- trunk/lucene/core/src/test/org/apache/lucene/index/TestFilterLeafReader.java	2015-02-18 13:17:18.292855274 -0500
+++ branch/lucene/core/src/test/org/apache/lucene/index/TestFilterLeafReader.java	2015-03-31 17:07:59.204894945 -0400
@@ -77,12 +77,12 @@
 
       @Override
       public PostingsEnum postings(Bits liveDocs, PostingsEnum reuse, int flags) throws IOException {
-        return new TestPositions(super.postings(liveDocs, reuse == null ? null : ((FilterDocsEnum) reuse).in, flags));
+        return new TestPositions(super.postings(liveDocs, reuse == null ? null : ((FilterPostingsEnum) reuse).in, flags));
       }
     }
 
     /** Filter that only returns odd numbered documents. */
-    private static class TestPositions extends FilterDocsEnum {
+    private static class TestPositions extends FilterPostingsEnum {
       public TestPositions(PostingsEnum in) {
         super(in);
       }
@@ -188,7 +188,7 @@
     checkOverrideMethods(FilterLeafReader.FilterFields.class);
     checkOverrideMethods(FilterLeafReader.FilterTerms.class);
     checkOverrideMethods(FilterLeafReader.FilterTermsEnum.class);
-    checkOverrideMethods(FilterLeafReader.FilterDocsEnum.class);
+    checkOverrideMethods(FilterLeafReader.FilterPostingsEnum.class);
   }
 
   public void testUnwrap() throws IOException {
diff -ruN -x .svn -x .git -x build -x .caches -x .idea -x idea-build -x eclipse-build -x .settings trunk/lucene/core/src/test/org/apache/lucene/index/TestOmitPositions.java branch/lucene/core/src/test/org/apache/lucene/index/TestOmitPositions.java
--- trunk/lucene/core/src/test/org/apache/lucene/index/TestOmitPositions.java	2015-02-18 13:17:18.296855274 -0500
+++ branch/lucene/core/src/test/org/apache/lucene/index/TestOmitPositions.java	2015-03-31 15:57:04.996981116 -0400
@@ -51,7 +51,7 @@
     IndexReader reader = w.getReader();
     w.close();
     
-    assertNull(MultiFields.getTermPositionsEnum(reader, null, "foo", new BytesRef("test")));
+    assertNotNull(MultiFields.getTermPositionsEnum(reader, null, "foo", new BytesRef("test")));
     
     PostingsEnum de = TestUtil.docs(random(), reader, "foo", new BytesRef("test"), null, null, PostingsEnum.FREQS);
     while (de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {
diff -ruN -x .svn -x .git -x build -x .caches -x .idea -x idea-build -x eclipse-build -x .settings trunk/lucene/core/src/test/org/apache/lucene/index/TestPostingsEnum.java branch/lucene/core/src/test/org/apache/lucene/index/TestPostingsEnum.java
--- trunk/lucene/core/src/test/org/apache/lucene/index/TestPostingsEnum.java	2015-02-18 13:17:18.388855272 -0500
+++ branch/lucene/core/src/test/org/apache/lucene/index/TestPostingsEnum.java	2015-03-31 13:39:00.741148917 -0400
@@ -84,19 +84,19 @@
     
     // we did not index positions
     PostingsEnum docsAndPositionsEnum = getOnlySegmentReader(reader).postings(new Term("foo", "bar"), PostingsEnum.POSITIONS);
-    assertNull(docsAndPositionsEnum);
+    assertNotNull(docsAndPositionsEnum);
     
     // we did not index positions
     docsAndPositionsEnum = getOnlySegmentReader(reader).postings(new Term("foo", "bar"), PostingsEnum.PAYLOADS);
-    assertNull(docsAndPositionsEnum);
+    assertNotNull(docsAndPositionsEnum);
     
     // we did not index positions
     docsAndPositionsEnum = getOnlySegmentReader(reader).postings(new Term("foo", "bar"), PostingsEnum.OFFSETS);
-    assertNull(docsAndPositionsEnum);
+    assertNotNull(docsAndPositionsEnum);
     
     // we did not index positions
     docsAndPositionsEnum = getOnlySegmentReader(reader).postings(new Term("foo", "bar"), PostingsEnum.ALL);
-    assertNull(docsAndPositionsEnum);
+    assertNotNull(docsAndPositionsEnum);
     
     iw.close();
     reader.close();
@@ -158,19 +158,19 @@
     
     // we did not index positions
     PostingsEnum docsAndPositionsEnum = getOnlySegmentReader(reader).postings(new Term("foo", "bar"), PostingsEnum.POSITIONS);
-    assertNull(docsAndPositionsEnum);
+    assertNotNull(docsAndPositionsEnum);
     
     // we did not index positions
     docsAndPositionsEnum = getOnlySegmentReader(reader).postings(new Term("foo", "bar"), PostingsEnum.PAYLOADS);
-    assertNull(docsAndPositionsEnum);
+    assertNotNull(docsAndPositionsEnum);
     
     // we did not index positions
     docsAndPositionsEnum = getOnlySegmentReader(reader).postings(new Term("foo", "bar"), PostingsEnum.OFFSETS);
-    assertNull(docsAndPositionsEnum);
+    assertNotNull(docsAndPositionsEnum);
     
     // we did not index positions
     docsAndPositionsEnum = getOnlySegmentReader(reader).postings(new Term("foo", "bar"), PostingsEnum.ALL);
-    assertNull(docsAndPositionsEnum);
+    assertNotNull(docsAndPositionsEnum);
     
     iw.close();
     reader.close();
diff -ruN -x .svn -x .git -x build -x .caches -x .idea -x idea-build -x eclipse-build -x .settings trunk/lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2.java branch/lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2.java
--- trunk/lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2.java	2015-02-18 13:17:18.236855275 -0500
+++ branch/lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2.java	2015-03-31 14:53:35.489058279 -0400
@@ -26,7 +26,6 @@
 import java.util.Random;
 
 import org.apache.lucene.analysis.MockAnalyzer;
-import org.apache.lucene.analysis.tokenattributes.OffsetAttribute;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.FieldType;
@@ -397,7 +396,7 @@
             while((term2 = termsEnum3.next()) != null) {
               System.out.println("      " + term2.utf8ToString() + ": freq=" + termsEnum3.totalTermFreq());
               dpEnum = termsEnum3.postings(null, dpEnum, PostingsEnum.ALL);
-              if (dpEnum != null) {
+              if (terms3.hasPositions()) {
                 assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);
                 final int freq = dpEnum.freq();
                 System.out.println("        doc=" + dpEnum.docID() + " freq=" + freq);
@@ -620,8 +619,9 @@
         
         dpEnum1 = termsEnum1.postings(null, dpEnum1, PostingsEnum.ALL);
         dpEnum2 = termsEnum2.postings(null, dpEnum2, PostingsEnum.ALL);
-        if (dpEnum1 != null) {
-          assertNotNull(dpEnum2);
+
+        if (terms1.hasPositions()) {
+          assertTrue(terms2.hasPositions());
           int docID1 = dpEnum1.nextDoc();
           dpEnum2.nextDoc();
           // docIDs are not supposed to be equal
@@ -632,24 +632,17 @@
           int freq1 = dpEnum1.freq();
           int freq2 = dpEnum2.freq();
           assertEquals(freq1, freq2);
-          OffsetAttribute offsetAtt1 = dpEnum1.attributes().getAttribute(OffsetAttribute.class);
-          OffsetAttribute offsetAtt2 = dpEnum2.attributes().getAttribute(OffsetAttribute.class);
-
-          if (offsetAtt1 != null) {
-            assertNotNull(offsetAtt2);
-          } else {
-            assertNull(offsetAtt2);
-          }
 
           for(int posUpto=0;posUpto<freq1;posUpto++) {
             int pos1 = dpEnum1.nextPosition();
             int pos2 = dpEnum2.nextPosition();
             assertEquals(pos1, pos2);
-            if (offsetAtt1 != null) {
-              assertEquals(offsetAtt1.startOffset(),
-                           offsetAtt2.startOffset());
-              assertEquals(offsetAtt1.endOffset(),
-                           offsetAtt2.endOffset());
+            if (terms1.hasOffsets()) {
+              assertTrue(terms2.hasOffsets());
+              assertEquals(dpEnum1.startOffset(),
+                           dpEnum2.startOffset());
+              assertEquals(dpEnum1.endOffset(),
+                           dpEnum2.endOffset());
             }
           }
           assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum1.nextDoc());
diff -ruN -x .svn -x .git -x build -x .caches -x .idea -x idea-build -x eclipse-build -x .settings trunk/lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader.java branch/lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader.java
--- trunk/lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader.java	2015-02-18 13:17:18.592855268 -0500
+++ branch/lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader.java	2015-03-31 15:01:10.909049054 -0400
@@ -292,7 +292,7 @@
       //System.out.println("Term: " + term);
       assertEquals(testTerms[i], term);
       assertNotNull(termsEnum.postings(null, null));
-      assertNull(termsEnum.postings(null, null, PostingsEnum.ALL)); // no pos
+      assertNotNull(termsEnum.postings(null, null, PostingsEnum.ALL));
     }
     reader.close();
   }
diff -ruN -x .svn -x .git -x build -x .caches -x .idea -x idea-build -x eclipse-build -x .settings trunk/lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter.java branch/lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter.java
--- trunk/lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter.java	2015-02-28 00:08:41.320312994 -0500
+++ branch/lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter.java	2015-03-31 14:20:58.033097928 -0400
@@ -504,6 +504,10 @@
       // if the segment has changed, we must initialize new enums.
       if (leaf != lastLeaf) {
         Terms t = r.terms(field);
+        if (!t.hasOffsets()) {
+          // no offsets available
+          throw new IllegalArgumentException("field '" + field + "' was indexed without offsets, cannot highlight");
+        }
         if (t != null) {
           termsEnum = t.iterator(null);
           postings = new PostingsEnum[terms.length];
@@ -560,10 +564,7 @@
           continue; // term not found
         }
         de = postings[i] = termsEnum.postings(null, null, PostingsEnum.OFFSETS);
-        if (de == null) {
-          // no positions available
-          throw new IllegalArgumentException("field '" + field + "' was indexed without offsets, cannot highlight");
-        }
+        assert de != null;
         pDoc = de.advance(doc);
       } else {
         pDoc = de.docID();
@@ -599,9 +600,7 @@
     while ((off = pq.poll()) != null) {
       final PostingsEnum dp = off.dp;
       int start = dp.startOffset();
-      if (start == -1) {
-        throw new IllegalArgumentException("field '" + field + "' was indexed without offsets, cannot highlight");
-      }
+      assert start >= 0;
       int end = dp.endOffset();
       // LUCENE-5166: this hit would span the content limit... however more valid 
       // hits may exist (they are sorted by start). so we pretend like we never 
diff -ruN -x .svn -x .git -x build -x .caches -x .idea -x idea-build -x eclipse-build -x .settings trunk/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack.java branch/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack.java
--- trunk/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack.java	2015-02-18 13:17:19.040855259 -0500
+++ branch/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack.java	2015-03-31 15:03:46.729045898 -0400
@@ -86,7 +86,7 @@
     }
 
     final Terms vector = vectors.terms(fieldName);
-    if (vector == null) {
+    if (vector == null || vector.hasPositions() == false) {
       // null snippet
       return;
     }
@@ -105,11 +105,6 @@
         continue;
       }
       dpEnum = termsEnum.postings(null, dpEnum, PostingsEnum.POSITIONS);
-      if (dpEnum == null) {
-        // null snippet
-        return;
-      }
-
       dpEnum.nextDoc();
       
       // For weight look here: http://lucene.apache.org/core/3_6_0/api/core/org/apache/lucene/search/DefaultSimilarity.html
diff -ruN -x .svn -x .git -x build -x .caches -x .idea -x idea-build -x eclipse-build -x .settings trunk/lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.java branch/lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.java
--- trunk/lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.java	2015-02-23 22:45:03.619414913 -0500
+++ branch/lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.java	2015-03-31 17:15:09.812886223 -0400
@@ -88,13 +88,13 @@
 
     @Override
     public TermsEnum iterator(final TermsEnum reuse) throws IOException {
-      return new SortingTermsEnum(in.iterator(reuse), docMap, indexOptions);
+      return new SortingTermsEnum(in.iterator(reuse), docMap, indexOptions, hasPositions());
     }
 
     @Override
     public TermsEnum intersect(CompiledAutomaton compiled, BytesRef startTerm)
         throws IOException {
-      return new SortingTermsEnum(in.intersect(compiled, startTerm), docMap, indexOptions);
+      return new SortingTermsEnum(in.intersect(compiled, startTerm), docMap, indexOptions, hasPositions());
     }
 
   }
@@ -103,11 +103,13 @@
 
     final Sorter.DocMap docMap; // pkg-protected to avoid synthetic accessor methods
     private final IndexOptions indexOptions;
+    private final boolean hasPositions;
 
-    public SortingTermsEnum(final TermsEnum in, Sorter.DocMap docMap, IndexOptions indexOptions) {
+    public SortingTermsEnum(final TermsEnum in, Sorter.DocMap docMap, IndexOptions indexOptions, boolean hasPositions) {
       super(in);
       this.docMap = docMap;
       this.indexOptions = indexOptions;
+      this.hasPositions = hasPositions;
     }
 
     Bits newToOld(final Bits liveDocs) {
@@ -132,7 +134,7 @@
     @Override
     public PostingsEnum postings(Bits liveDocs, PostingsEnum reuse, final int flags) throws IOException {
 
-      if (PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {
+      if (hasPositions && PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {
         final PostingsEnum inReuse;
         final SortingPostingsEnum wrapReuse;
         if (reuse != null && reuse instanceof SortingPostingsEnum) {
@@ -146,10 +148,6 @@
         }
 
         final PostingsEnum inDocsAndPositions = in.postings(newToOld(liveDocs), inReuse, flags);
-        if (inDocsAndPositions == null) {
-          return null;
-        }
-
         // we ignore the fact that offsets may be stored but not asked for,
         // since this code is expected to be used during addIndexes which will
         // ask for everything. if that assumption changes in the future, we can
@@ -328,7 +326,7 @@
     }
   }
 
-  static class SortingDocsEnum extends FilterDocsEnum {
+  static class SortingDocsEnum extends FilterPostingsEnum {
 
     private static final class DocFreqSorter extends TimSorter {
 
@@ -489,9 +487,31 @@
     PostingsEnum getWrapped() {
       return in;
     }
+    
+    // we buffer up docs/freqs only, don't forward any positions requests to underlying enum
+
+    @Override
+    public int nextPosition() throws IOException {
+      return -1;
+    }
+
+    @Override
+    public int startOffset() throws IOException {
+      return -1;
+    }
+
+    @Override
+    public int endOffset() throws IOException {
+      return -1;
+    }
+
+    @Override
+    public BytesRef getPayload() throws IOException {
+      return null;
+    }
   }
 
-  static class SortingPostingsEnum extends FilterDocsEnum {
+  static class SortingPostingsEnum extends FilterPostingsEnum {
 
     /**
      * A {@link TimSorter} which sorts two parallel arrays of doc IDs and
diff -ruN -x .svn -x .git -x build -x .caches -x .idea -x idea-build -x eclipse-build -x .settings trunk/lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.java branch/lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.java
--- trunk/lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.java	2015-02-18 13:17:19.932855241 -0500
+++ branch/lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.java	2015-03-31 17:07:59.144894946 -0400
@@ -159,9 +159,8 @@
         actualReuse = null;
       }
       PostingsEnum docs = super.postings(liveDocs, actualReuse, flags);
-      if (docs == null) {
-        return null;
-      } else if (docs == actualReuse) {
+      assert docs != null;
+      if (docs == actualReuse) {
         // codec reused, reset asserting state
         ((AssertingPostingsEnum)reuse).reset();
         return reuse;
@@ -282,7 +281,7 @@
   static enum DocsEnumState { START, ITERATING, FINISHED };
 
   /** Wraps a docsenum with additional checks */
-  public static class AssertingPostingsEnum extends FilterDocsEnum {
+  public static class AssertingPostingsEnum extends FilterPostingsEnum {
     private final Thread creationThread = Thread.currentThread();
     private DocsEnumState state = DocsEnumState.START;
     int positionCount = 0;
diff -ruN -x .svn -x .git -x build -x .caches -x .idea -x idea-build -x eclipse-build -x .settings trunk/lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase.java branch/lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase.java
--- trunk/lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase.java	2015-03-29 22:00:18.676039816 -0400
+++ branch/lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase.java	2015-04-01 11:18:25.351569709 -0400
@@ -1505,6 +1505,29 @@
     dir.close();
   }
   
+  public void testAskForPositionsWhenNotThere() throws Exception {
+    Directory dir = newDirectory();
+    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));
+    iwc.setCodec(getCodec());
+    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);
+    Document doc = new Document();
+    doc.add(newStringField("field", "value", Field.Store.NO));
+    iw.addDocument(doc);
+    iw.addDocument(doc);
+    DirectoryReader ir = iw.getReader();
+    LeafReader ar = getOnlySegmentReader(ir);
+    TermsEnum termsEnum = ar.terms("field").iterator(null);
+    assertTrue(termsEnum.seekExact(new BytesRef("value")));
+    PostingsEnum docsEnum = termsEnum.postings(null, null, PostingsEnum.POSITIONS);
+    assertEquals(0, docsEnum.nextDoc());
+    assertEquals(1, docsEnum.freq());
+    assertEquals(1, docsEnum.nextDoc());
+    assertEquals(1, docsEnum.freq());
+    ir.close();
+    iw.close();
+    dir.close();
+  }
+  
   // tests that ghost fields still work
   // TODO: can this be improved?
   public void testGhosts() throws Exception {
@@ -1620,6 +1643,7 @@
                     PostingsEnum docs = null;
                     while(termsEnum.next() != null) {
                       BytesRef term = termsEnum.term();
+                      // TODO: also sometimes ask for payloads/offsets?
                       boolean noPositions = random().nextBoolean();
                       if (noPositions) {
                         docs = termsEnum.postings(null, docs, PostingsEnum.FREQS);
@@ -1668,6 +1692,7 @@
                     // Also test seeking the TermsEnum:
                     for(String term : termFreqs.keySet()) {
                       if (termsEnum.seekExact(new BytesRef(term))) {
+                        // TODO: also sometimes ask for payloads/offsets?
                         boolean noPositions = random().nextBoolean();
                         if (noPositions) {
                           docs = termsEnum.postings(null, docs, PostingsEnum.FREQS);
diff -ruN -x .svn -x .git -x build -x .caches -x .idea -x idea-build -x eclipse-build -x .settings trunk/lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase.java branch/lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase.java
--- trunk/lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase.java	2015-02-18 13:17:19.904855241 -0500
+++ branch/lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase.java	2015-03-31 15:01:10.885049055 -0400
@@ -453,14 +453,12 @@
 
       bits.clear(0);
       PostingsEnum docsAndPositionsEnum = termsEnum.postings(bits, random().nextBoolean() ? null : this.docsEnum.get(), PostingsEnum.POSITIONS);
-      assertEquals(ft.storeTermVectorOffsets() || ft.storeTermVectorPositions(), docsAndPositionsEnum != null);
-      if (docsAndPositionsEnum != null) {
+      if (terms.hasPositions()) {
         assertEquals(PostingsEnum.NO_MORE_DOCS, docsAndPositionsEnum.nextDoc());
       }
       bits.set(0);
 
       docsAndPositionsEnum = termsEnum.postings(random().nextBoolean() ? bits : null, random().nextBoolean() ? null : docsAndPositionsEnum, PostingsEnum.POSITIONS);
-      assertEquals(ft.storeTermVectorOffsets() || ft.storeTermVectorPositions(), docsAndPositionsEnum != null);
       if (terms.hasPositions() || terms.hasOffsets()) {
         assertEquals(0, docsAndPositionsEnum.nextDoc());
         final int freq = docsAndPositionsEnum.freq();
diff -ruN -x .svn -x .git -x build -x .caches -x .idea -x idea-build -x eclipse-build -x .settings trunk/lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.java branch/lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.java
--- trunk/lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.java	2015-03-18 00:38:19.340848629 -0400
+++ branch/lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.java	2015-03-31 16:12:24.780962485 -0400
@@ -1984,11 +1984,8 @@
    * checks docs + freqs + positions + payloads, sequentially
    */
   public void assertDocsAndPositionsEnumEquals(String info, PostingsEnum leftDocs, PostingsEnum rightDocs) throws IOException {
-    if (leftDocs == null || rightDocs == null) {
-      assertNull(leftDocs);
-      assertNull(rightDocs);
-      return;
-    }
+    assertNotNull(leftDocs);
+    assertNotNull(rightDocs);
     assertEquals(info, -1, leftDocs.docID());
     assertEquals(info, -1, rightDocs.docID());
     int docid;
diff -ruN -x .svn -x .git -x build -x .caches -x .idea -x idea-build -x eclipse-build -x .settings trunk/lucene/test-framework/src/java/org/apache/lucene/util/TestUtil.java branch/lucene/test-framework/src/java/org/apache/lucene/util/TestUtil.java
--- trunk/lucene/test-framework/src/java/org/apache/lucene/util/TestUtil.java	2015-03-05 00:42:04.095522074 -0500
+++ branch/lucene/test-framework/src/java/org/apache/lucene/util/TestUtil.java	2015-03-31 15:01:10.893049055 -0400
@@ -1087,9 +1087,10 @@
     return docs(random, termsEnum, liveDocs, reuse, flags);
   }
 
-  // Returns a DocsEnum from a positioned TermsEnum, but
-  // randomly sometimes uses a DocsAndFreqsEnum, DocsAndPositionsEnum.
+  // Returns a PostingsEnum with random features available
   public static PostingsEnum docs(Random random, TermsEnum termsEnum, Bits liveDocs, PostingsEnum reuse, int flags) throws IOException {
+    // TODO: simplify this method? it would be easier to randomly either use the flags passed, or do the random selection,
+    // FREQS should be part fo the random selection instead of outside on its own?
     if (random.nextBoolean()) {
       if (random.nextBoolean()) {
         final int posFlags;
@@ -1099,10 +1100,7 @@
           case 2: posFlags = PostingsEnum.PAYLOADS; break;
           default: posFlags = PostingsEnum.ALL; break;
         }
-        PostingsEnum docsAndPositions = termsEnum.postings(liveDocs, null, posFlags);
-        if (docsAndPositions != null) {
-          return docsAndPositions;
-        }
+        return termsEnum.postings(liveDocs, null, posFlags);
       }
       flags |= PostingsEnum.FREQS;
     }
diff -ruN -x .svn -x .git -x build -x .caches -x .idea -x idea-build -x eclipse-build -x .settings trunk/solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.java branch/solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.java
--- trunk/solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.java	2015-02-18 13:17:20.428855231 -0500
+++ branch/solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.java	2015-03-31 13:39:00.757148917 -0400
@@ -693,13 +693,11 @@
           term.copyChars(id);
           if (seen.contains(id) == false  && termsEnum.seekExact(term.get())) {
             postingsEnum = termsEnum.postings(liveDocs, postingsEnum, PostingsEnum.NONE);
-            if (postingsEnum != null) {
-              int docId = postingsEnum.nextDoc();
-              if (docId == DocIdSetIterator.NO_MORE_DOCS ) continue;  // must have been deleted
-              termValues[ordSet.put(docId)] = term.toBytesRef();
-              seen.add(id);
-              assert postingsEnum.nextDoc() == DocIdSetIterator.NO_MORE_DOCS;
-            }
+            int docId = postingsEnum.nextDoc();
+            if (docId == DocIdSetIterator.NO_MORE_DOCS ) continue;  // must have been deleted
+            termValues[ordSet.put(docId)] = term.toBytesRef();
+            seen.add(id);
+            assert postingsEnum.nextDoc() == DocIdSetIterator.NO_MORE_DOCS;
           }
         }
       }
diff -ruN -x .svn -x .git -x build -x .caches -x .idea -x idea-build -x eclipse-build -x .settings trunk/solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java branch/solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java
--- trunk/solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java	2015-03-18 00:38:18.528848645 -0400
+++ branch/solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java	2015-03-31 13:39:00.753148917 -0400
@@ -801,7 +801,6 @@
       return -1;
     }
     PostingsEnum docs = termsEnum.postings(leafReader.getLiveDocs(), null, PostingsEnum.NONE);
-    if (docs == null) return -1;
     int id = docs.nextDoc();
     return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;
   }
