Index: lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedTerm.java
===================================================================
--- lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedTerm.java	(revision 1003701)
+++ lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedTerm.java	(working copy)
@@ -37,7 +37,7 @@
     }
   };
 
-  public static final Comparator termComparator = new Comparator() {
+  public static final Comparator<Object> termComparator = new Comparator<Object>() {
     public int compare(Object o, Object o1) {
       return ((InstantiatedTerm)o).getTerm().compareTo((Term)o1);
     }
Index: lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecJudge.java
===================================================================
--- lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecJudge.java	(revision 1003701)
+++ lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecJudge.java	(working copy)
@@ -113,7 +113,7 @@
 
   // inherit javadocs
   public boolean validateData(QualityQuery[] qq, PrintWriter logger) {
-    HashMap<String,QRelJudgement> missingQueries = (HashMap<String, QRelJudgement>) judgements.clone();
+    HashMap<String,QRelJudgement> missingQueries = new HashMap<String, QRelJudgement>(judgements);
     ArrayList<String> missingJudgements = new ArrayList<String>();
     for (int i=0; i<qq.length; i++) {
       String id = qq[i].getQueryID();
Index: lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor.java
===================================================================
--- lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor.java	(revision 1003701)
+++ lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor.java	(working copy)
@@ -176,6 +176,7 @@
           }
         }
 
+        @SuppressWarnings("unchecked")
         final List<SpanQuery>[] disjunctLists = new List[maxPosition + 1];
         int distinctPositions = 0;
 
@@ -506,12 +507,9 @@
   static private class PositionCheckingMap<K> extends HashMap<K,WeightedSpanTerm> {
 
     @Override
-    public void putAll(Map m) {
-      Iterator<Map.Entry<K, WeightedSpanTerm>> it = m.entrySet().iterator();
-      while (it.hasNext()) {
-        Map.Entry<K, WeightedSpanTerm> entry = it.next();
+    public void putAll(Map<? extends K,? extends WeightedSpanTerm> m) {
+      for (Map.Entry<? extends K,? extends WeightedSpanTerm> entry : m.entrySet())
         this.put(entry.getKey(), entry.getValue());
-      }
     }
 
     @Override
Index: lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java
===================================================================
--- lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java	(revision 1003701)
+++ lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java	(working copy)
@@ -202,7 +202,8 @@
    * Sorts term entries into ascending order; also works for
    * Arrays.binarySearch() and Arrays.sort()
    */
-  private static final Comparator termComparator = new Comparator() {
+  private static final Comparator<Object> termComparator = new Comparator<Object>() {
+    @SuppressWarnings("unchecked")
     public int compare(Object o1, Object o2) {
       if (o1 instanceof Map.Entry<?,?>) o1 = ((Map.Entry<?,?>) o1).getKey();
       if (o2 instanceof Map.Entry<?,?>) o2 = ((Map.Entry<?,?>) o2).getKey();
@@ -513,6 +514,7 @@
   /** returns a view of the given map's entries, sorted ascending by key */
   private static <K,V> Map.Entry<K,V>[] sort(HashMap<K,V> map) {
     int size = map.size();
+    @SuppressWarnings("unchecked")
     Map.Entry<K,V>[] entries = new Map.Entry[size];
     
     Iterator<Map.Entry<K,V>> iter = map.entrySet().iterator();
