diff --git a/lucene/tools/src/groovy/check-source-patterns.groovy b/lucene/tools/src/groovy/check-source-patterns.groovy
index c08a7a14ccf..6240cf1df95 100644
--- a/lucene/tools/src/groovy/check-source-patterns.groovy
+++ b/lucene/tools/src/groovy/check-source-patterns.groovy
@@ -60,8 +60,17 @@ def reportViolation = { f, name ->
   found++;
 }
 
+def filesWithAntiPattern = new TreeSet();
+def antiPatterns = new TreeSet();
+def reportAntiPattern = { f, name ->
+  filesWithAntiPattern.add(f.toString().substring(baseDirLen).replace(File.separatorChar, (char)'/'));
+  antiPatterns.add(name);
+}
+
 def javadocsPattern = ~$/(?sm)^\Q/**\E(.*?)\Q*/\E/$;
 def javaCommentPattern = ~$/(?sm)^\Q/*\E(.*?)\Q*/\E/$;
+def javaTestFileNameAntiPattern = ~$/\Q/Test\E/$;
+def javaTestFileNameAntiPatternDescription = 'prefer FooBarTest.java over TestFooBar.java for new tests'
 def xmlCommentPattern = ~$/(?sm)\Q<!--\E(.*?)\Q-->\E/$;
 def lineSplitter = ~$/[\r\n]+/$;
 def singleLineSplitter = ~$/\n\r?/$;
@@ -178,6 +187,9 @@ ant.fileScanner{
     checkLicenseHeaderPrecedes(f, 'package', packagePattern, javaCommentPattern, text, ratDocument);
     if (f.name.contains("Test")) {
       checkMockitoAssume(f, text);
+      if (javaTestFileNameAntiPattern.matcher(f.toString()).find()) {
+        reportAntiPattern(f, javaTestFileNameAntiPatternDescription)
+      }
     }
   }
   if (f.name.endsWith('.xml') || f.name.endsWith('.xml.template')) {
@@ -192,3 +204,9 @@ if (found) {
   throw new BuildException(String.format(Locale.ENGLISH, 'Found %d violations in source files (%s).',
     found, violations.join(', ')));
 }
+
+filesWithAntiPatternLimit = 1606
+if (filesWithAntiPatternLimit < filesWithAntiPattern.size()) {
+  throw new BuildException(String.format(Locale.ENGLISH, 'Found too many (%d > %d) anti patterns (%s).',
+    filesWithAntiPattern.size(), filesWithAntiPatternLimit, antiPatterns.join(', ')));
+}
