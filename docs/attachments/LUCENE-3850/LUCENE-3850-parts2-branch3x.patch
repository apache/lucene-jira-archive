Index: .
===================================================================
--- .	(revision 1297170)
+++ .	(working copy)

Property changes on: .
___________________________________________________________________
Modified: svn:mergeinfo
   Merged /lucene/dev/trunk:r1297162-1297168
Index: lucene
===================================================================
--- lucene	(revision 1297170)
+++ lucene	(working copy)

Property changes on: lucene
___________________________________________________________________
Modified: svn:mergeinfo
   Merged /lucene/dev/trunk/lucene:r1297162-1297168
Index: lucene/contrib/facet/src/test/org/apache/lucene/util/collections/IntHashSetTest.java
===================================================================
--- lucene/contrib/facet/src/test/org/apache/lucene/util/collections/IntHashSetTest.java	(revision 1297170)
+++ lucene/contrib/facet/src/test/org/apache/lucene/util/collections/IntHashSetTest.java	(working copy)
@@ -121,10 +121,8 @@
       }
     }
     assertEquals(set2.size(), set1.size());
-    int i = 0;
     for (int value : set2) {
       assertTrue(set1.contains(value));
-      i++;
     }
   }
 
Index: lucene/contrib/grouping/src/java/org/apache/lucene/search/grouping/BlockGroupingCollector.java
===================================================================
--- lucene/contrib/grouping/src/java/org/apache/lucene/search/grouping/BlockGroupingCollector.java	(revision 1297170)
+++ lucene/contrib/grouping/src/java/org/apache/lucene/search/grouping/BlockGroupingCollector.java	(working copy)
@@ -26,7 +26,6 @@
 import org.apache.lucene.search.DocIdSetIterator;
 import org.apache.lucene.search.FieldComparator;
 import org.apache.lucene.search.Filter;
-import org.apache.lucene.search.ScoreDoc;
 import org.apache.lucene.search.Scorer;
 import org.apache.lucene.search.Sort;
 import org.apache.lucene.search.SortField;
@@ -454,7 +453,7 @@
 
         //System.out.println("       best w/in group!");
         
-        for (FieldComparator fc : comparators) {
+        for (FieldComparator<?> fc : comparators) {
           fc.copy(bottomSlot, doc);
           // Necessary because some comparators cache
           // details of bottom slot; this forces them to
@@ -484,7 +483,7 @@
         }
       }
       groupCompetes = true;
-      for (FieldComparator fc : comparators) {
+      for (FieldComparator<?> fc : comparators) {
         fc.copy(bottomSlot, doc);
         // Necessary because some comparators cache
         // details of bottom slot; this forces them to
Index: lucene/contrib/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup.java
===================================================================
--- lucene/contrib/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup.java	(revision 1297170)
+++ lucene/contrib/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup.java	(working copy)
@@ -153,9 +153,10 @@
 
   private static class GroupComparator<T> implements Comparator<MergedGroup<T>> {
 
-    public final FieldComparator[] comparators;
+    public final FieldComparator<?>[] comparators;
     public final int[] reversed;
 
+    @SuppressWarnings({"unchecked","rawtypes"})
     public GroupComparator(Sort groupSort) throws IOException {
       final SortField[] sortFields = groupSort.getSort();
       comparators = new FieldComparator[sortFields.length];
@@ -167,7 +168,7 @@
       }
     }
 
-    @SuppressWarnings("unchecked")
+    @SuppressWarnings({"rawtypes","unchecked"})
     public int compare(MergedGroup<T> group, MergedGroup<T> other) {
       if (group == other) {
         return 0;
@@ -177,7 +178,7 @@
       final Object[] otherValues = other.topValues;
       //System.out.println("  groupValues=" + groupValues + " otherValues=" + otherValues);
       for (int compIDX = 0;compIDX < comparators.length; compIDX++) {
-        final int c = reversed[compIDX] * comparators[compIDX].compareValues(groupValues[compIDX],
+        final int c = reversed[compIDX] * ((FieldComparator) comparators[compIDX]).compareValues(groupValues[compIDX],
                                                                              otherValues[compIDX]);
         if (c != 0) {
           return c;
@@ -228,7 +229,7 @@
           //System.out.println("      old");
           boolean competes = false;
           for(int compIDX=0;compIDX<groupComp.comparators.length;compIDX++) {
-            final int cmp = groupComp.reversed[compIDX] * groupComp.comparators[compIDX].compareValues(group.sortValues[compIDX],
+            final int cmp = groupComp.reversed[compIDX] * ((FieldComparator) groupComp.comparators[compIDX]).compareValues(group.sortValues[compIDX],
                                                                                                        mergedGroup.topValues[compIDX]);
             if (cmp < 0) {
               // Definitely competes
Index: lucene/contrib/grouping/src/java/org/apache/lucene/search/grouping/TermAllGroupHeadsCollector.java
===================================================================
--- lucene/contrib/grouping/src/java/org/apache/lucene/search/grouping/TermAllGroupHeadsCollector.java	(revision 1297170)
+++ lucene/contrib/grouping/src/java/org/apache/lucene/search/grouping/TermAllGroupHeadsCollector.java	(working copy)
@@ -153,7 +153,7 @@
     public void setScorer(Scorer scorer) throws IOException {
       this.scorer = scorer;
       for (GroupHead groupHead : groups.values()) {
-        for (FieldComparator comparator : groupHead.comparators) {
+        for (FieldComparator<?> comparator : groupHead.comparators) {
           comparator.setScorer(scorer);
         }
       }
@@ -161,8 +161,9 @@
 
     class GroupHead extends AbstractAllGroupHeadsCollector.GroupHead<String> {
 
-      final FieldComparator[] comparators;
+      final FieldComparator<?>[] comparators;
 
+      @SuppressWarnings({"unchecked","rawtypes"})
       private GroupHead(String groupValue, Sort sort, int doc) throws IOException {
         super(groupValue, doc + docBase);
         final SortField[] sortFields = sort.getSort();
@@ -181,7 +182,7 @@
       }
 
       public void updateDocHead(int doc) throws IOException {
-        for (FieldComparator comparator : comparators) {
+        for (FieldComparator<?> comparator : comparators) {
           comparator.copy(0, doc);
           comparator.setBottom(0);
         }
Index: lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedTermDocumentInformation.java
===================================================================
--- lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedTermDocumentInformation.java	(revision 1297170)
+++ lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedTermDocumentInformation.java	(working copy)
@@ -55,6 +55,7 @@
     }
   };
 
+  @SuppressWarnings({"unchecked","rawtypes"})
   public static final Comparator doumentNumberIntegerComparator = new Comparator() {
     public int compare(Object o1, Object o2) {
       InstantiatedTermDocumentInformation di = (InstantiatedTermDocumentInformation) o1;
Index: lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java
===================================================================
--- lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java	(revision 1297170)
+++ lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java	(working copy)
@@ -200,7 +200,7 @@
    * Arrays.binarySearch() and Arrays.sort()
    */
   private static final Comparator<Object> termComparator = new Comparator<Object>() {
-    @SuppressWarnings("unchecked")
+    @SuppressWarnings({"unchecked","rawtypes"})
     public int compare(Object o1, Object o2) {
       if (o1 instanceof Map.Entry<?,?>) o1 = ((Map.Entry<?,?>) o1).getKey();
       if (o2 instanceof Map.Entry<?,?>) o2 = ((Map.Entry<?,?>) o2).getKey();
@@ -660,10 +660,6 @@
     
     private static final long serialVersionUID = 2282195016849084649L;  
       
-    public ArrayIntList() {
-      this(10);
-    }
-
     public ArrayIntList(int initialCapacity) {
       elements = new int[initialCapacity];
     }
@@ -1208,16 +1204,7 @@
         
     public static final int PTR = Constants.JRE_IS_64BIT ? 8 : 4;    
 
-    // bytes occupied by primitive data types
-    public static final int BOOLEAN = 1;
-    public static final int BYTE = 1;
-    public static final int CHAR = 2;
-    public static final int SHORT = 2;
     public static final int INT = 4;
-    public static final int LONG = 8;
-    public static final int FLOAT = 4;
-    public static final int DOUBLE = 8;
-    
     private static final int LOG_PTR = (int) Math.round(log2(PTR));
     
     /**
@@ -1245,28 +1232,15 @@
         return sizeOfObject(INT + PTR*len);        
     }
     
-    public static int sizeOfCharArray(int len) {
-        return sizeOfObject(INT + CHAR*len);        
-    }
-    
     public static int sizeOfIntArray(int len) {
         return sizeOfObject(INT + INT*len);        
     }
     
-    public static int sizeOfString(int len) {
-        return sizeOfObject(3*INT + PTR) + sizeOfCharArray(len);
-    }
-    
     public static int sizeOfHashMap(int len) {
         return sizeOfObject(4*PTR + 4*INT) + sizeOfObjectArray(len) 
             + len * sizeOfObject(3*PTR + INT); // entries
     }
     
-    // note: does not include referenced objects
-    public static int sizeOfArrayList(int len) {
-        return sizeOfObject(PTR + 2*INT) + sizeOfObjectArray(len); 
-    }
-    
     public static int sizeOfArrayIntList(int len) {
         return sizeOfObject(PTR + INT) + sizeOfIntArray(len);
     }
Index: lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/builders/TestNumericRangeFilterBuilder.java
===================================================================
--- lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/builders/TestNumericRangeFilterBuilder.java	(revision 1297170)
+++ lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/builders/TestNumericRangeFilterBuilder.java	(working copy)
@@ -82,6 +82,7 @@
 		}
 	}
 
+	@SuppressWarnings({"unchecked","rawtypes"})
 	public void testGetFilterInt() throws Exception {
 		NumericRangeFilterBuilder filterBuilder = new NumericRangeFilterBuilder();
 		filterBuilder.setStrictMode(true);
@@ -90,7 +91,6 @@
 		Document doc = getDocumentFromString(xml);
 		Filter filter = filterBuilder.getFilter(doc.getDocumentElement());
 		assertTrue(filter instanceof NumericRangeFilter<?>);
-		@SuppressWarnings("unchecked")
 		NumericRangeFilter<Integer> numRangeFilter = (NumericRangeFilter<Integer>) filter;
 		assertEquals(Integer.valueOf(-1), numRangeFilter.getMin());
 		assertEquals(Integer.valueOf(10), numRangeFilter.getMax());
@@ -102,7 +102,6 @@
 		Document doc2 = getDocumentFromString(xml2);
 		Filter filter2 = filterBuilder.getFilter(doc2.getDocumentElement());
 		assertTrue(filter2 instanceof NumericRangeFilter<?>);
-		@SuppressWarnings("unchecked")
 		NumericRangeFilter<Integer> numRangeFilter2 = (NumericRangeFilter<Integer>) filter2;
 		assertEquals(Integer.valueOf(-1), numRangeFilter2.getMin());
 		assertEquals(Integer.valueOf(10), numRangeFilter2.getMax());
@@ -111,6 +110,7 @@
 		assertFalse(numRangeFilter2.includesMax());
 	}
 
+	@SuppressWarnings({"unchecked","rawtypes"})
 	public void testGetFilterLong() throws Exception {
 		NumericRangeFilterBuilder filterBuilder = new NumericRangeFilterBuilder();
 		filterBuilder.setStrictMode(true);
@@ -119,7 +119,6 @@
 		Document doc = getDocumentFromString(xml);
 		Filter filter = filterBuilder.getFilter(doc.getDocumentElement());
 		assertTrue(filter instanceof NumericRangeFilter<?>);
-		@SuppressWarnings("unchecked")
 		NumericRangeFilter<Long> numRangeFilter = (NumericRangeFilter) filter;
 		assertEquals(Long.valueOf(-2321L), numRangeFilter.getMin());
 		assertEquals(Long.valueOf(60000000L), numRangeFilter.getMax());
@@ -131,7 +130,6 @@
 		Document doc2 = getDocumentFromString(xml2);
 		Filter filter2 = filterBuilder.getFilter(doc2.getDocumentElement());
 		assertTrue(filter2 instanceof NumericRangeFilter<?>);
-		@SuppressWarnings("unchecked")
 		NumericRangeFilter<Long> numRangeFilter2 = (NumericRangeFilter) filter2;
 		assertEquals(Long.valueOf(-2321L), numRangeFilter2.getMin());
 		assertEquals(Long.valueOf(60000000L), numRangeFilter2.getMax());
@@ -140,6 +138,7 @@
 		assertFalse(numRangeFilter2.includesMax());
 	}
 
+	@SuppressWarnings({"unchecked","rawtypes"})
 	public void testGetFilterDouble() throws Exception {
 		NumericRangeFilterBuilder filterBuilder = new NumericRangeFilterBuilder();
 		filterBuilder.setStrictMode(true);
@@ -149,7 +148,6 @@
 
 		Filter filter = filterBuilder.getFilter(doc.getDocumentElement());
 		assertTrue(filter instanceof NumericRangeFilter<?>);
-		@SuppressWarnings("unchecked")
 		NumericRangeFilter<Double> numRangeFilter = (NumericRangeFilter) filter;
 		assertEquals(Double.valueOf(-23.21d), numRangeFilter.getMin());
 		assertEquals(Double.valueOf(60000.00023d), numRangeFilter.getMax());
@@ -161,7 +159,6 @@
 		Document doc2 = getDocumentFromString(xml2);
 		Filter filter2 = filterBuilder.getFilter(doc2.getDocumentElement());
 		assertTrue(filter2 instanceof NumericRangeFilter<?>);
-		@SuppressWarnings("unchecked")
 		NumericRangeFilter<Double> numRangeFilter2 = (NumericRangeFilter) filter2;
 		assertEquals(Double.valueOf(-23.21d), numRangeFilter2.getMin());
 		assertEquals(Double.valueOf(60000.00023d), numRangeFilter2.getMax());
@@ -170,6 +167,7 @@
 		assertFalse(numRangeFilter2.includesMax());
 	}
 
+	@SuppressWarnings({"unchecked","rawtypes"})
 	public void testGetFilterFloat() throws Exception {
 		NumericRangeFilterBuilder filterBuilder = new NumericRangeFilterBuilder();
 		filterBuilder.setStrictMode(true);
@@ -179,7 +177,6 @@
 
 		Filter filter = filterBuilder.getFilter(doc.getDocumentElement());
 		assertTrue(filter instanceof NumericRangeFilter<?>);
-		@SuppressWarnings("unchecked")
 		NumericRangeFilter<Float> numRangeFilter = (NumericRangeFilter) filter;
 		assertEquals(Float.valueOf(-2.321432f), numRangeFilter.getMin());
 		assertEquals(Float.valueOf(32432.23f), numRangeFilter.getMax());
@@ -192,7 +189,6 @@
 
 		Filter filter2 = filterBuilder.getFilter(doc2.getDocumentElement());
 		assertTrue(filter2 instanceof NumericRangeFilter<?>);
-		@SuppressWarnings("unchecked")
 		NumericRangeFilter<Float> numRangeFilter2 = (NumericRangeFilter) filter2;
 		assertEquals(Float.valueOf(-2.321432f), numRangeFilter2.getMin());
 		assertEquals(Float.valueOf(32432.23f), numRangeFilter2.getMax());
Index: lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/builders/TestNumericRangeQueryBuilder.java
===================================================================
--- lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/builders/TestNumericRangeQueryBuilder.java	(revision 1297170)
+++ lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/builders/TestNumericRangeQueryBuilder.java	(working copy)
@@ -48,6 +48,7 @@
 		fail("Expected to throw " + ParserException.class);
 	}
 
+	@SuppressWarnings({"unchecked","rawtypes"})
 	public void testGetFilterInt() throws Exception {
 		NumericRangeQueryBuilder filterBuilder = new NumericRangeQueryBuilder();
 
@@ -55,7 +56,6 @@
 		Document doc = getDocumentFromString(xml);
 		Query filter = filterBuilder.getQuery(doc.getDocumentElement());
 		assertTrue(filter instanceof NumericRangeQuery<?>);
-		@SuppressWarnings("unchecked")
 		NumericRangeQuery<Integer> numRangeFilter = (NumericRangeQuery<Integer>) filter;
 		assertEquals(Integer.valueOf(-1), numRangeFilter.getMin());
 		assertEquals(Integer.valueOf(10), numRangeFilter.getMax());
@@ -67,7 +67,6 @@
 		Document doc2 = getDocumentFromString(xml2);
 		Query filter2 = filterBuilder.getQuery(doc2.getDocumentElement());
 		assertTrue(filter2 instanceof NumericRangeQuery<?>);
-		@SuppressWarnings("unchecked")
 		NumericRangeQuery<Integer> numRangeFilter2 = (NumericRangeQuery) filter2;
 		assertEquals(Integer.valueOf(-1), numRangeFilter2.getMin());
 		assertEquals(Integer.valueOf(10), numRangeFilter2.getMax());
@@ -76,6 +75,7 @@
 		assertFalse(numRangeFilter2.includesMax());
 	}
 
+	@SuppressWarnings({"unchecked","rawtypes"})
 	public void testGetFilterLong() throws Exception {
 		NumericRangeQueryBuilder filterBuilder = new NumericRangeQueryBuilder();
 
@@ -83,7 +83,6 @@
 		Document doc = getDocumentFromString(xml);
 		Query filter = filterBuilder.getQuery(doc.getDocumentElement());
 		assertTrue(filter instanceof NumericRangeQuery<?>);
-		@SuppressWarnings("unchecked")
 		NumericRangeQuery<Long> numRangeFilter = (NumericRangeQuery) filter;
 		assertEquals(Long.valueOf(-2321L), numRangeFilter.getMin());
 		assertEquals(Long.valueOf(60000000L), numRangeFilter.getMax());
@@ -95,7 +94,6 @@
 		Document doc2 = getDocumentFromString(xml2);
 		Query filter2 = filterBuilder.getQuery(doc2.getDocumentElement());
 		assertTrue(filter2 instanceof NumericRangeQuery<?>);
-		@SuppressWarnings("unchecked")
 		NumericRangeQuery<Long> numRangeFilter2 = (NumericRangeQuery) filter2;
 		assertEquals(Long.valueOf(-2321L), numRangeFilter2.getMin());
 		assertEquals(Long.valueOf(60000000L), numRangeFilter2.getMax());
@@ -104,6 +102,7 @@
 		assertFalse(numRangeFilter2.includesMax());
 	}
 
+	@SuppressWarnings({"unchecked","rawtypes"})
 	public void testGetFilterDouble() throws Exception {
 		NumericRangeQueryBuilder filterBuilder = new NumericRangeQueryBuilder();
 
@@ -112,7 +111,6 @@
 
 		Query filter = filterBuilder.getQuery(doc.getDocumentElement());
 		assertTrue(filter instanceof NumericRangeQuery<?>);
-		@SuppressWarnings("unchecked")
 		NumericRangeQuery<Double> numRangeFilter = (NumericRangeQuery) filter;
 		assertEquals(Double.valueOf(-23.21d), numRangeFilter.getMin());
 		assertEquals(Double.valueOf(60000.00023d), numRangeFilter.getMax());
@@ -124,7 +122,6 @@
 		Document doc2 = getDocumentFromString(xml2);
 		Query filter2 = filterBuilder.getQuery(doc2.getDocumentElement());
 		assertTrue(filter2 instanceof NumericRangeQuery<?>);
-		@SuppressWarnings("unchecked")
 		NumericRangeQuery<Double> numRangeFilter2 = (NumericRangeQuery) filter2;
 		assertEquals(Double.valueOf(-23.21d), numRangeFilter2.getMin());
 		assertEquals(Double.valueOf(60000.00023d), numRangeFilter2.getMax());
@@ -133,6 +130,7 @@
 		assertFalse(numRangeFilter2.includesMax());
 	}
 
+	@SuppressWarnings({"unchecked","rawtypes"})
 	public void testGetFilterFloat() throws Exception {
 		NumericRangeQueryBuilder filterBuilder = new NumericRangeQueryBuilder();
 
@@ -141,7 +139,6 @@
 
 		Query filter = filterBuilder.getQuery(doc.getDocumentElement());
 		assertTrue(filter instanceof NumericRangeQuery<?>);
-		@SuppressWarnings("unchecked")
 		NumericRangeQuery<Float> numRangeFilter = (NumericRangeQuery) filter;
 		assertEquals(Float.valueOf(-2.321432f), numRangeFilter.getMin());
 		assertEquals(Float.valueOf(32432.23f), numRangeFilter.getMax());
@@ -154,7 +151,6 @@
 
 		Query filter2 = filterBuilder.getQuery(doc2.getDocumentElement());
 		assertTrue(filter2 instanceof NumericRangeQuery<?>);
-		@SuppressWarnings("unchecked")
 		NumericRangeQuery<Float> numRangeFilter2 = (NumericRangeQuery) filter2;
 		assertEquals(Float.valueOf(-2.321432f), numRangeFilter2.getMin());
 		assertEquals(Float.valueOf(32432.23f), numRangeFilter2.getMax());
Index: lucene/core/src/java/org/apache/lucene/index/FieldsReader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/FieldsReader.java	(revision 1297170)
+++ lucene/core/src/java/org/apache/lucene/index/FieldsReader.java	(working copy)
@@ -568,26 +568,6 @@
       }
     }
 
-    public long getPointer() {
-      ensureOpen();
-      return pointer;
-    }
-
-    public void setPointer(long pointer) {
-      ensureOpen();
-      this.pointer = pointer;
-    }
-
-    public int getToRead() {
-      ensureOpen();
-      return toRead;
-    }
-
-    public void setToRead(int toRead) {
-      ensureOpen();
-      this.toRead = toRead;
-    }
-
     @Override
     public byte[] getBinaryValue(byte[] result) {
       ensureOpen();
Index: lucene/core/src/java/org/apache/lucene/index/ParallelReader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/ParallelReader.java	(revision 1297170)
+++ lucene/core/src/java/org/apache/lucene/index/ParallelReader.java	(working copy)
@@ -49,7 +49,6 @@
   private List<Boolean> decrefOnClose = new ArrayList<Boolean>(); // remember which subreaders to decRef on close
   boolean incRefReaders = false;
   private SortedMap<String,IndexReader> fieldToReader = new TreeMap<String,IndexReader>();
-  private Map<IndexReader,Collection<String>> readerToFields = new HashMap<IndexReader,Collection<String>>();
   private List<IndexReader> storedFieldReaders = new ArrayList<IndexReader>();
 
   private int maxDoc;
@@ -627,8 +626,7 @@
     extends ParallelTermDocs implements TermPositions {
 
     public ParallelTermPositions() {}
-    public ParallelTermPositions(Term term) throws IOException { seek(term); }
-
+    
     @Override
     public void seek(Term term) throws IOException {
       IndexReader reader = fieldToReader.get(term.field());
Index: lucene/core/src/java/org/apache/lucene/search/BooleanScorer.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/BooleanScorer.java	(revision 1297170)
+++ lucene/core/src/java/org/apache/lucene/search/BooleanScorer.java	(working copy)
@@ -200,8 +200,6 @@
   private final int minNrShouldMatch;
   private int end;
   private Bucket current;
-  private int doc = -1;
-
   // Any time a prohibited clause matches we set bit 0:
   private static final int PROHIBITED_MASK = 1;
   
Index: lucene/core/src/test/org/apache/lucene/analysis/TestCharArraySet.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/analysis/TestCharArraySet.java	(revision 1297170)
+++ lucene/core/src/test/org/apache/lucene/analysis/TestCharArraySet.java	(working copy)
@@ -327,7 +327,6 @@
     }
   }
   
-  @SuppressWarnings("deprecated")
   public void testCopyCharArraySetBWCompat() {
     CharArraySet setIngoreCase = new CharArraySet(TEST_VERSION_CURRENT, 10, true);
     CharArraySet setCaseSensitive = new CharArraySet(TEST_VERSION_CURRENT, 10, false);
Index: lucene/core/src/test/org/apache/lucene/index/TestForTooMuchCloning.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestForTooMuchCloning.java	(revision 1297170)
+++ lucene/core/src/test/org/apache/lucene/index/TestForTooMuchCloning.java	(working copy)
@@ -17,8 +17,6 @@
  * limitations under the License.
  */
 
-import java.util.*;
-
 import org.apache.lucene.analysis.MockAnalyzer;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
Index: lucene/test-framework/src/java/org/apache/lucene/search/CheckHits.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/search/CheckHits.java	(revision 1297170)
+++ lucene/test-framework/src/java/org/apache/lucene/search/CheckHits.java	(working copy)
@@ -78,7 +78,6 @@
    * @param searcher the searcher to test the query against
    * @param defaultFieldName used for displaying the query in assertion messages
    * @param results a list of documentIds that must match the query
-   * @see Searcher#search(Query,Collector)
    * @see #checkHits
    */
   public static void checkHitCollector(Random random, Query query, String defaultFieldName,
@@ -151,7 +150,6 @@
    * @param searcher the searcher to test the query against
    * @param defaultFieldName used for displaing the query in assertion messages
    * @param results a list of documentIds that must match the query
-   * @see Searcher#search(Query, int)
    * @see #checkHitCollector
    */
   public static void checkHits(
