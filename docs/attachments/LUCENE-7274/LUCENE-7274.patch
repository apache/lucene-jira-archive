diff --git a/lucene/classification/src/java/org/apache/lucene/classification/document/LogisticRegressionDocumentClassifier.java b/lucene/classification/src/java/org/apache/lucene/classification/document/LogisticRegressionDocumentClassifier.java
new file mode 100644
index 0000000..9d4eb26
--- /dev/null
+++ b/lucene/classification/src/java/org/apache/lucene/classification/document/LogisticRegressionDocumentClassifier.java
@@ -0,0 +1,90 @@
+package org.apache.lucene.classification.document;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+
+import org.apache.lucene.classification.ClassificationResult;
+import org.apache.lucene.document.Document;
+import org.apache.lucene.index.IndexableField;
+import org.apache.lucene.util.BytesRef;
+
+
+public class LogisticRegressionDocumentClassifier implements DocumentClassifier<BytesRef> {
+
+  private final String[] fields;
+  private final double[] weights;
+  private final double threshold;
+  private final BytesRef positiveLabel;
+  private final BytesRef negativeLabel;
+
+  public LogisticRegressionDocumentClassifier(String[] fields, double[] weights,
+                                              double threshold,
+                                              BytesRef positiveLabel, BytesRef negativeLabel) {
+    assert fields.length + 1 == weights.length;
+    assert fields.length > 0;
+
+    this.fields = fields;
+    this.weights = weights;
+    this.threshold = threshold;
+    this.positiveLabel = positiveLabel;
+    this.negativeLabel = negativeLabel;
+  }
+
+  @Override
+  public ClassificationResult<BytesRef> assignClass(Document document) throws IOException {
+    double sigmoid = getSigmoid(document);
+
+    if (sigmoid > threshold) return new ClassificationResult<>(positiveLabel, sigmoid);
+    else return new ClassificationResult<>(negativeLabel, 1.0 - sigmoid);
+  }
+
+  private double getSigmoid(Document document) {
+    double sum = 0.0;
+    for (int i = 0; i < fields.length; i++) {
+      IndexableField field = document.getField(fields[i]);
+      assert field != null;
+      double val = field.numericValue().doubleValue();
+      sum += val * weights[i+1];
+    }
+    sum += weights[0];
+    return 1.0 / (1+Math.exp(-sum));
+  }
+
+  @Override
+  public List<ClassificationResult<BytesRef>> getClasses(Document document) throws IOException {
+    double sigmoid = getSigmoid(document);
+
+    List<ClassificationResult<BytesRef>> assignedClasses = new ArrayList<>();
+    assignedClasses.add(new ClassificationResult<>(positiveLabel, sigmoid));
+    assignedClasses.add(new ClassificationResult<>(negativeLabel, 1.0 - sigmoid));
+
+    Collections.sort(assignedClasses);
+    return assignedClasses;
+  }
+
+  @Override
+  public List<ClassificationResult<BytesRef>> getClasses(Document document, int max) throws IOException {
+    List<ClassificationResult<BytesRef>> assignedClasses = getClasses(document);
+    return assignedClasses.subList(0, max);
+  }
+
+}
diff --git a/lucene/classification/src/test/org/apache/lucene/classification/document/LogisticRegressionDocumentClassifierTest.java b/lucene/classification/src/test/org/apache/lucene/classification/document/LogisticRegressionDocumentClassifierTest.java
new file mode 100644
index 0000000..058d302
--- /dev/null
+++ b/lucene/classification/src/test/org/apache/lucene/classification/document/LogisticRegressionDocumentClassifierTest.java
@@ -0,0 +1,71 @@
+package org.apache.lucene.classification.document;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.classification.ClassificationResult;
+import org.apache.lucene.document.Document;
+import org.apache.lucene.document.DoubleDocValuesField;
+import org.apache.lucene.document.Field;
+import org.apache.lucene.document.FloatDocValuesField;
+import org.apache.lucene.document.NumericDocValuesField;
+import org.apache.lucene.document.StringField;
+import org.apache.lucene.index.IndexWriter;
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.store.RAMDirectory;
+import org.apache.lucene.util.BytesRef;
+import org.apache.lucene.util.LuceneTestCase;
+import org.junit.Test;
+
+public class LogisticRegressionDocumentClassifierTest extends LuceneTestCase {
+
+  @Test
+  public void testBasicDocumentClassification() throws Exception {
+    Document positiveDoc = getDoc(0.01, 0.01f, 0, 1, 1, 1);
+    Document negativeDoc = getDoc(1.01, 1.01f, 1, 0 , 0 , 0);
+
+    BytesRef positiveLabel = new BytesRef("positive");
+    BytesRef negativeLabel = new BytesRef("negative");
+
+    // the weights are training with 500 positiveDoc and 500 negativeDoc
+    LogisticRegressionDocumentClassifier classifier = new LogisticRegressionDocumentClassifier(
+        new String[]{"f1","f2","f3","f4","f5","f6"},
+        new double[]{-0.57,-2.41,-2.41,-2.39,2.82,2.82,2.82},
+        0.5,
+        positiveLabel,
+        negativeLabel);
+
+    ClassificationResult<BytesRef> assignClass = classifier.assignClass(positiveDoc);
+    assertTrue("Document must be classifed as postive", positiveLabel.bytesEquals(assignClass.getAssignedClass()));
+    assertEquals(1.0, assignClass.getScore(), 0.001);
+
+    assignClass = classifier.assignClass(negativeDoc);
+    assertTrue("Document must be classifed as negative", negativeLabel.bytesEquals(assignClass.getAssignedClass()));
+    assertEquals(1.0, assignClass.getScore(), 0.001);
+  }
+
+  private Document getDoc(double f1, float f2, long f3, double f4, float f5, long f6) {
+    Document doc = new Document();
+    doc.add(new DoubleDocValuesField("f1", f1));
+    doc.add(new FloatDocValuesField("f2", f2));
+    doc.add(new NumericDocValuesField("f3", f3));
+    doc.add(new DoubleDocValuesField("f4", f4));
+    doc.add(new FloatDocValuesField("f5", f5));
+    doc.add(new NumericDocValuesField("f6", f6));
+    return doc;
+  }
+}
diff --git a/lucene/core/src/java/org/apache/lucene/document/DoubleDocValuesField.java b/lucene/core/src/java/org/apache/lucene/document/DoubleDocValuesField.java
index 3c24ca4..ed3540c 100644
--- a/lucene/core/src/java/org/apache/lucene/document/DoubleDocValuesField.java
+++ b/lucene/core/src/java/org/apache/lucene/document/DoubleDocValuesField.java
@@ -49,4 +49,9 @@ public class DoubleDocValuesField extends NumericDocValuesField {
   public void setLongValue(long value) {
     throw new IllegalArgumentException("cannot change value type from Double to Long");
   }
+
+  @Override
+  public Number numericValue() {
+    return Double.longBitsToDouble(super.numericValue().longValue());
+  }
 }
diff --git a/lucene/core/src/java/org/apache/lucene/document/FloatDocValuesField.java b/lucene/core/src/java/org/apache/lucene/document/FloatDocValuesField.java
index 3a8bdea..32a0b9c 100644
--- a/lucene/core/src/java/org/apache/lucene/document/FloatDocValuesField.java
+++ b/lucene/core/src/java/org/apache/lucene/document/FloatDocValuesField.java
@@ -49,4 +49,9 @@ public class FloatDocValuesField extends NumericDocValuesField {
   public void setLongValue(long value) {
     throw new IllegalArgumentException("cannot change value type from Float to Long");
   }
+
+  @Override
+  public Number numericValue() {
+    return Float.intBitsToFloat(super.numericValue().intValue());
+  }
 }
diff --git a/lucene/core/src/java/org/apache/lucene/document/NumericDocValuesField.java b/lucene/core/src/java/org/apache/lucene/document/NumericDocValuesField.java
index 5b6dcc8..e2ee6b6 100644
--- a/lucene/core/src/java/org/apache/lucene/document/NumericDocValuesField.java
+++ b/lucene/core/src/java/org/apache/lucene/document/NumericDocValuesField.java
@@ -54,4 +54,9 @@ public class NumericDocValuesField extends Field {
     super(name, TYPE);
     fieldsData = Long.valueOf(value);
   }
+
+  @Override
+  public Number numericValue() {
+    return super.numericValue().longValue();
+  }
 }
