Index: src/java/org/apache/lucene/search/RangeQuery.java
===================================================================
--- src/java/org/apache/lucene/search/RangeQuery.java	(revision 762186)
+++ src/java/org/apache/lucene/search/RangeQuery.java	(working copy)
@@ -204,7 +204,7 @@
     if (this.field != other.field  // interned comparison
         || this.includeLower != other.includeLower
         || this.includeUpper != other.includeUpper
-        || (this.collator != null && ! this.collator.equals(other.collator))
+        || (this.collator != null && ! this.collator.equals(other.collator) || (this.collator == null && other.collator != null))
        ) { return false; }
     String lowerVal = this.lowerTerm == null ? null : lowerTerm.text();
     String upperVal = this.upperTerm == null ? null : upperTerm.text();
Index: src/test/org/apache/lucene/search/TestRangeQuery.java
===================================================================
--- src/test/org/apache/lucene/search/TestRangeQuery.java	(revision 762186)
+++ src/test/org/apache/lucene/search/TestRangeQuery.java	(working copy)
@@ -145,6 +145,10 @@
     query = new RangeQuery("content", "A", "C", false, false);
     other = new RangeQuery("content", "A", "C", true, true);
     assertFalse("queries with different inclusive are not equal", query.equals(other));
+    
+    query = new RangeQuery("content", "A", "C", false, false);
+    other = new RangeQuery("content", "A", "C", false, false, Collator.getInstance());
+    assertFalse("a query with a collator is not equal to one without", query.equals(other));
   }
 
   public void testExclusiveCollating() throws Exception {

