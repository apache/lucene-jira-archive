Index: src/java/org/apache/lucene/index/FieldsReader.java
===================================================================
--- src/java/org/apache/lucene/index/FieldsReader.java	(revision 718148)
+++ src/java/org/apache/lucene/index/FieldsReader.java	(working copy)
@@ -220,7 +220,68 @@
 
     return doc;
   }
+  
+  public Document[] docs(int[] n, FieldSelector fieldSelector)
+      throws CorruptIndexException, IOException {
+
+    long[] positions = new long[n.length];
+    Document[] documents = new Document[n.length];
+
+    for (int x = 0; x < n.length; x++) {
+      indexStream.seek(n[x] * 8L);
+      positions[x] = indexStream.readLong();
+    }
+
+    for (int x = 0; x < n.length; x++) {
+      fieldsStream.seek(positions[x]);
+
+      Document doc = new Document();
+      int numFields = fieldsStream.readVInt();
+      for (int i = 0; i < numFields; i++) {
+        int fieldNumber = fieldsStream.readVInt();
+        FieldInfo fi = fieldInfos.fieldInfo(fieldNumber);
+        FieldSelectorResult acceptField = fieldSelector == null ? FieldSelectorResult.LOAD
+            : fieldSelector.accept(fi.name);
+
+        byte bits = fieldsStream.readByte();
+        assert bits <= FieldsWriter.FIELD_IS_COMPRESSED
+            + FieldsWriter.FIELD_IS_TOKENIZED + FieldsWriter.FIELD_IS_BINARY;
+
+        boolean compressed = (bits & FieldsWriter.FIELD_IS_COMPRESSED) != 0;
+        boolean tokenize = (bits & FieldsWriter.FIELD_IS_TOKENIZED) != 0;
+        boolean binary = (bits & FieldsWriter.FIELD_IS_BINARY) != 0;
+        // TODO: Find an alternative approach here if this list continues to
+        // grow beyond the
+        // list of 5 or 6 currently here. See Lucene 762 for discussion
+        if (acceptField.equals(FieldSelectorResult.LOAD)) {
+          addField(doc, fi, binary, compressed, tokenize);
+        } else if (acceptField.equals(FieldSelectorResult.LOAD_FOR_MERGE)) {
+          addFieldForMerge(doc, fi, binary, compressed, tokenize);
+        } else if (acceptField.equals(FieldSelectorResult.LOAD_AND_BREAK)) {
+          addField(doc, fi, binary, compressed, tokenize);
+          break;// Get out of this loop
+        } else if (acceptField.equals(FieldSelectorResult.LAZY_LOAD)) {
+          addFieldLazy(doc, fi, binary, compressed, tokenize);
+        } else if (acceptField.equals(FieldSelectorResult.SIZE)) {
+          skipField(binary, compressed, addFieldSize(doc, fi, binary,
+              compressed));
+        } else if (acceptField.equals(FieldSelectorResult.SIZE_AND_BREAK)) {
+          addFieldSize(doc, fi, binary, compressed);
+          break;
+        } else {
+          skipField(binary, compressed);
+        }
+      }
+
+      documents[x] = doc;
+
+    }
+
+    return documents;
+
+  }
 
+
   /** Returns the length in bytes of each raw document in a
    *  contiguous range of length numDocs starting with
    *  startDocID.  Returns the IndexInput (the fieldStream),
Index: src/java/org/apache/lucene/index/IndexReader.java
===================================================================
--- src/java/org/apache/lucene/index/IndexReader.java	(revision 718148)
+++ src/java/org/apache/lucene/index/IndexReader.java	(working copy)
@@ -691,6 +691,8 @@
   //When we convert to JDK 1.5 make this Set<String>
   public abstract Document document(int n, FieldSelector fieldSelector) throws CorruptIndexException, IOException;
   
+  public abstract Document[] documents(int[] n, FieldSelector fieldSelector) throws CorruptIndexException, IOException;
+
   
 
   /** Returns true if document <i>n</i> has been deleted */
Index: src/java/org/apache/lucene/index/MultiReader.java
===================================================================
--- src/java/org/apache/lucene/index/MultiReader.java	(revision 718148)
+++ src/java/org/apache/lucene/index/MultiReader.java	(working copy)
@@ -215,6 +215,71 @@
     int i = readerIndex(n);                          // find segment num
     return subReaders[i].document(n - starts[i], fieldSelector);    // dispatch to segment reader
   }
+  
+   /*
+   * (non-Javadoc)
+   * 
+   * @see org.apache.lucene.index.IndexReader#documents(int[],
+   * org.apache.lucene.document.FieldSelector)
+   */
+  public Document[] documents(int[] n, FieldSelector fieldSelector)
+      throws CorruptIndexException, IOException {
+
+    Document[] documents = new Document[n.length];
+
+    /*
+     * initialize the counts
+     */
+    int[] counts = new int[subReaders.length];
+    for (int x = 0; x < subReaders.length; x++) {
+      counts[x] = 0;
+    }
+
+    /*
+     * figure out the correct reader for each document
+     */
+    int[] readers = new int[n.length];
+    for (int x = 0; x < n.length; x++) {
+      int reader = readerIndex(n[x]);
+      counts[reader]++;
+      readers[x] = reader;
+    }
+
+    /*
+     * split up the document numbers to go to the correct sub reader
+     */
+    for (int x = 0; x < counts.length; x++) {
+
+      /*
+       * create an int array we'll send to the sub reader
+       */
+      int position = 0;
+      int[] request = new int[counts[x]];
+      for (int y = 0; y < readers.length; y++) {
+        if (readers[y] == x) {
+          request[position] = n[y] - starts[x];
+          position++;
+        }
+      }
+
+      Document[] results = subReaders[x].documents(request, fieldSelector);
+
+      /*
+       * put the results into the final document array
+       */
+      position = 0;
+      for (int y = 0; y < readers.length; y++) {
+        if (readers[y] == x) {
+          documents[y] = results[position];
+          position++;
+        }
+      }
+
+    }
+
+    return documents;
+
+  }
 
   public boolean isDeleted(int n) {
     // Don't call ensureOpen() here (it could affect performance)
Index: src/java/org/apache/lucene/index/SegmentReader.java
===================================================================
--- src/java/org/apache/lucene/index/SegmentReader.java	(revision 718148)
+++ src/java/org/apache/lucene/index/SegmentReader.java	(working copy)
@@ -728,6 +728,22 @@
               ("attempt to access a deleted document");
     return fieldsReader.doc(n, fieldSelector);
   }
+  
+     
+   /*
+   * (non-Javadoc)
+   * 
+   * @see org.apache.lucene.index.IndexReader#documents(int[],
+   * org.apache.lucene.document.FieldSelector)
+   */
+  public Document[] documents(int[] n, FieldSelector fieldSelector)
+      throws CorruptIndexException, IOException {
+    ensureOpen();
+    /* skip the business about the document being deleted - for speed */
+    return fieldsReader.docs(n, fieldSelector);
+  }
+    
+
 
   public synchronized boolean isDeleted(int n) {
     return (deletedDocs != null && deletedDocs.get(n));

