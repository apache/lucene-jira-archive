From 20ca77382aa7c81c2519ecf34028f4ad78f9c84a Mon Sep 17 00:00:00 2001
From: Namgyu Kim <namgyu@apache.org>
Date: Sun, 10 Jan 2021 01:46:54 +0900
Subject: [PATCH] deadlock test

---
 .../org/apache/lucene/index/TermsEnum.java    | 201 ++++++++++++------
 .../apache/lucene/index/TestTermsEnum.java    |  62 ++++++
 2 files changed, 203 insertions(+), 60 deletions(-)

diff --git a/lucene/core/src/java/org/apache/lucene/index/TermsEnum.java b/lucene/core/src/java/org/apache/lucene/index/TermsEnum.java
index 0f03c94a60b..7e0841d7f4f 100644
--- a/lucene/core/src/java/org/apache/lucene/index/TermsEnum.java
+++ b/lucene/core/src/java/org/apache/lucene/index/TermsEnum.java
@@ -179,64 +179,145 @@ public abstract class TermsEnum implements BytesRefIterator {
    * Attributes to it. This should not be a problem, as the enum is always empty and the existence
    * of unused Attributes does not matter.
    */
-  public static final TermsEnum EMPTY =
-      new BaseTermsEnum() {
-        @Override
-        public SeekStatus seekCeil(BytesRef term) {
-          return SeekStatus.END;
-        }
-
-        @Override
-        public void seekExact(long ord) {}
-
-        @Override
-        public BytesRef term() {
-          throw new IllegalStateException("this method should never be called");
-        }
-
-        @Override
-        public int docFreq() {
-          throw new IllegalStateException("this method should never be called");
-        }
-
-        @Override
-        public long totalTermFreq() {
-          throw new IllegalStateException("this method should never be called");
-        }
-
-        @Override
-        public long ord() {
-          throw new IllegalStateException("this method should never be called");
-        }
-
-        @Override
-        public PostingsEnum postings(PostingsEnum reuse, int flags) {
-          throw new IllegalStateException("this method should never be called");
-        }
-
-        @Override
-        public ImpactsEnum impacts(int flags) throws IOException {
-          throw new IllegalStateException("this method should never be called");
-        }
-
-        @Override
-        public BytesRef next() {
-          return null;
-        }
-
-        @Override // make it synchronized here, to prevent double lazy init
-        public synchronized AttributeSource attributes() {
-          return super.attributes();
-        }
-
-        @Override
-        public TermState termState() {
-          throw new IllegalStateException("this method should never be called");
-        }
-
-        @Override
-        public void seekExact(BytesRef term, TermState state) {
-          throw new IllegalStateException("this method should never be called");
-        }
-      };
+  public static final TermsEnum EMPTY;
+
+  static {
+    int delayMillis = 1000;
+    System.out.println(Thread.currentThread() + " Sleeping in TermsEnum static init! : " + delayMillis + " ms");
+    try {
+      Thread.sleep(delayMillis);
+    } catch (InterruptedException e) {
+      e.printStackTrace();
+    }
+    System.out.println(Thread.currentThread() + " Creating new BaseTermsEnum()");
+
+    // Current Latest Code
+    EMPTY = new BaseTermsEnum() {
+      @Override
+      public SeekStatus seekCeil(BytesRef term) {
+        return SeekStatus.END;
+      }
+
+      @Override
+      public void seekExact(long ord) {
+      }
+
+      @Override
+      public BytesRef term() {
+        throw new IllegalStateException("this method should never be called");
+      }
+
+      @Override
+      public int docFreq() {
+        throw new IllegalStateException("this method should never be called");
+      }
+
+      @Override
+      public long totalTermFreq() {
+        throw new IllegalStateException("this method should never be called");
+      }
+
+      @Override
+      public long ord() {
+        throw new IllegalStateException("this method should never be called");
+      }
+
+      @Override
+      public PostingsEnum postings(PostingsEnum reuse, int flags) {
+        throw new IllegalStateException("this method should never be called");
+      }
+
+      @Override
+      public ImpactsEnum impacts(int flags) throws IOException {
+        throw new IllegalStateException("this method should never be called");
+      }
+
+      @Override
+      public BytesRef next() {
+        return null;
+      }
+
+      @Override // make it synchronized here, to prevent double lazy init
+      public synchronized AttributeSource attributes() {
+        return super.attributes();
+      }
+
+      @Override
+      public TermState termState() {
+        throw new IllegalStateException("this method should never be called");
+      }
+
+      @Override
+      public void seekExact(BytesRef term, TermState state) {
+        throw new IllegalStateException("this method should never be called");
+      }
+    };
+//  TestTermsEnum#testDeadLock will be passed
+//
+//    EMPTY = new TermsEnum() {
+//      @Override
+//      public SeekStatus seekCeil(BytesRef term) {
+//        return SeekStatus.END;
+//      }
+//
+//      @Override
+//      public void seekExact(long ord) {
+//      }
+//
+//      @Override
+//      public BytesRef term() {
+//        throw new IllegalStateException("this method should never be called");
+//      }
+//
+//      @Override
+//      public int docFreq() {
+//        throw new IllegalStateException("this method should never be called");
+//      }
+//
+//      @Override
+//      public long totalTermFreq() {
+//        throw new IllegalStateException("this method should never be called");
+//      }
+//
+//      @Override
+//      public long ord() {
+//        throw new IllegalStateException("this method should never be called");
+//      }
+//
+//      @Override
+//      public PostingsEnum postings(PostingsEnum reuse, int flags) {
+//        throw new IllegalStateException("this method should never be called");
+//      }
+//
+//      @Override
+//      public ImpactsEnum impacts(int flags) throws IOException {
+//        throw new IllegalStateException("this method should never be called");
+//      }
+//
+//      @Override
+//      public BytesRef next() {
+//        return null;
+//      }
+//
+//      @Override // make it synchronized here, to prevent double lazy init
+//      public synchronized AttributeSource attributes() {
+//        return new AttributeSource();
+//      }
+//
+//      @Override
+//      public boolean seekExact(BytesRef text) throws IOException {
+//        return seekCeil(text) == SeekStatus.FOUND;
+//      }
+//
+//      @Override
+//      public TermState termState() {
+//        throw new IllegalStateException("this method should never be called");
+//      }
+//
+//      @Override
+//      public void seekExact(BytesRef term, TermState state) {
+//        throw new IllegalStateException("this method should never be called");
+//      }
+//    };
+  }
 }
diff --git a/lucene/core/src/test/org/apache/lucene/index/TestTermsEnum.java b/lucene/core/src/test/org/apache/lucene/index/TestTermsEnum.java
index 096782b844e..f53c952370a 100644
--- a/lucene/core/src/test/org/apache/lucene/index/TestTermsEnum.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestTermsEnum.java
@@ -47,6 +47,68 @@ import org.apache.lucene.util.automaton.RegExp;
 @SuppressCodecs({"SimpleText", "Direct"})
 public class TestTermsEnum extends LuceneTestCase {
 
+  public void testDeadlock() {
+    int delayMillis = 100;
+    new Thread(() -> System.out.println(Thread.currentThread() + " TermsEnum Created : " + TermsEnum.EMPTY)).start();
+
+    try {
+      Thread.sleep(delayMillis);
+    } catch (InterruptedException e) {
+      e.printStackTrace();
+    }
+
+    System.out.println(Thread.currentThread() + " DummyTermsEnum Creating");
+    System.out.println(Thread.currentThread() + " DummyTermsEnum Created: " + new DummyTermsEnum());
+  }
+
+  private static class DummyTermsEnum extends BaseTermsEnum {
+
+    @Override
+    public SeekStatus seekCeil(BytesRef text) throws IOException {
+      return null;
+    }
+
+    @Override
+    public void seekExact(long ord) throws IOException {
+
+    }
+
+    @Override
+    public BytesRef term() throws IOException {
+      return null;
+    }
+
+    @Override
+    public long ord() throws IOException {
+      return 0;
+    }
+
+    @Override
+    public int docFreq() throws IOException {
+      return 0;
+    }
+
+    @Override
+    public long totalTermFreq() throws IOException {
+      return 0;
+    }
+
+    @Override
+    public PostingsEnum postings(PostingsEnum reuse, int flags) throws IOException {
+      return null;
+    }
+
+    @Override
+    public ImpactsEnum impacts(int flags) throws IOException {
+      return null;
+    }
+
+    @Override
+    public BytesRef next() throws IOException {
+      return null;
+    }
+  }
+
   public void test() throws Exception {
     Random random = new Random(random().nextLong());
     final LineFileDocs docs = new LineFileDocs(random);
-- 
2.25.1.windows.1

