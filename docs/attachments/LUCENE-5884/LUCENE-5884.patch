Index: lucene/core/src/java/org/apache/lucene/util/fst/ByteSequenceOutputs.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/fst/ByteSequenceOutputs.java	(revision 1617849)
+++ lucene/core/src/java/org/apache/lucene/util/fst/ByteSequenceOutputs.java	(working copy)
@@ -151,8 +151,10 @@
     return output.toString();
   }
 
+  private static final long BASE_NUM_BYTES = RamUsageEstimator.shallowSizeOf(NO_OUTPUT);
+
   @Override
   public long ramBytesUsed(BytesRef output) {
-    return super.ramBytesUsed(output) + RamUsageEstimator.sizeOf(output.bytes);
+    return BASE_NUM_BYTES + RamUsageEstimator.sizeOf(output.bytes);
   }
 }
Index: lucene/core/src/java/org/apache/lucene/util/fst/CharSequenceOutputs.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/fst/CharSequenceOutputs.java	(revision 1617849)
+++ lucene/core/src/java/org/apache/lucene/util/fst/CharSequenceOutputs.java	(working copy)
@@ -22,6 +22,7 @@
 import org.apache.lucene.store.DataInput;
 import org.apache.lucene.store.DataOutput;
 import org.apache.lucene.util.CharsRef;
+import org.apache.lucene.util.RamUsageEstimator;
 
 /**
  * An FST {@link Outputs} implementation where each output
@@ -150,4 +151,11 @@
   public String outputToString(CharsRef output) {
     return output.toString();
   }
+
+  private static final long BASE_NUM_BYTES = RamUsageEstimator.shallowSizeOf(NO_OUTPUT);
+
+  @Override
+  public long ramBytesUsed(CharsRef output) {
+    return BASE_NUM_BYTES + RamUsageEstimator.sizeOf(output.chars);
+  }
 }
Index: lucene/core/src/java/org/apache/lucene/util/fst/FST.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/fst/FST.java	(revision 1617849)
+++ lucene/core/src/java/org/apache/lucene/util/fst/FST.java	(working copy)
@@ -428,6 +428,8 @@
     return size;
   }
 
+  private int cachedArcsBytesUsed;
+
   @Override
   public long ramBytesUsed() {
     long size = BASE_RAM_BYTES_USED;
@@ -438,8 +440,7 @@
       size += nodeAddress.ramBytesUsed();
       size += inCounts.ramBytesUsed();
     }
-    size += ramBytesUsed(cachedRootArcs);
-    size += ramBytesUsed(assertingCachedRootArcs);
+    size += cachedArcsBytesUsed;
     size += RamUsageEstimator.sizeOf(bytesPerArc);
     return size;
   }
@@ -472,6 +473,7 @@
   private void cacheRootArcs() throws IOException {
     cachedRootArcs = (Arc<T>[]) new Arc[0x80];
     readRootArcs(cachedRootArcs);
+    cachedArcsBytesUsed += ramBytesUsed(cachedRootArcs);
     
     assert setAssertingRootArcs(cachedRootArcs);
     assert assertRootArcs();
@@ -502,6 +504,7 @@
   private boolean setAssertingRootArcs(Arc<T>[] arcs) throws IOException {
     assertingCachedRootArcs = (Arc<T>[]) new Arc[arcs.length];
     readRootArcs(assertingCachedRootArcs);
+    cachedArcsBytesUsed *= 2;
     return true;
   }
   
Index: lucene/core/src/java/org/apache/lucene/util/fst/IntSequenceOutputs.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/fst/IntSequenceOutputs.java	(revision 1617849)
+++ lucene/core/src/java/org/apache/lucene/util/fst/IntSequenceOutputs.java	(working copy)
@@ -22,6 +22,7 @@
 import org.apache.lucene.store.DataInput;
 import org.apache.lucene.store.DataOutput;
 import org.apache.lucene.util.IntsRef;
+import org.apache.lucene.util.RamUsageEstimator;
 
 /**
  * An FST {@link Outputs} implementation where each output
@@ -152,4 +153,11 @@
   public String outputToString(IntsRef output) {
     return output.toString();
   }
+
+  private static final long BASE_NUM_BYTES = RamUsageEstimator.shallowSizeOf(NO_OUTPUT);
+
+  @Override
+  public long ramBytesUsed(IntsRef output) {
+    return BASE_NUM_BYTES + RamUsageEstimator.sizeOf(output.ints);
+  }
 }
Index: lucene/core/src/java/org/apache/lucene/util/fst/NoOutputs.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/fst/NoOutputs.java	(revision 1617849)
+++ lucene/core/src/java/org/apache/lucene/util/fst/NoOutputs.java	(working copy)
@@ -101,4 +101,9 @@
   public String outputToString(Object output) {
     return "";
   }
+
+  @Override
+  public long ramBytesUsed(Object output) {
+    return 0;
+  }
 }
Index: lucene/core/src/java/org/apache/lucene/util/fst/Outputs.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/fst/Outputs.java	(revision 1617849)
+++ lucene/core/src/java/org/apache/lucene/util/fst/Outputs.java	(working copy)
@@ -100,7 +100,5 @@
 
   /** Return memory usage for the provided output.
    *  @see Accountable */
-  public long ramBytesUsed(T output) {
-    return RamUsageEstimator.shallowSizeOf(output);
-  }
+  public abstract long ramBytesUsed(T output);
 }
Index: lucene/core/src/java/org/apache/lucene/util/fst/PairOutputs.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/fst/PairOutputs.java	(revision 1617849)
+++ lucene/core/src/java/org/apache/lucene/util/fst/PairOutputs.java	(working copy)
@@ -21,6 +21,7 @@
 
 import org.apache.lucene.store.DataInput;
 import org.apache.lucene.store.DataOutput;
+import org.apache.lucene.util.RamUsageEstimator;
 
 /**
  * An FST {@link Outputs} implementation, holding two other outputs.
@@ -176,9 +177,11 @@
     return "PairOutputs<" + outputs1 + "," + outputs2 + ">";
   }
 
+  private static final long BASE_NUM_BYTES = RamUsageEstimator.shallowSizeOf(new Pair<Object,Object>(null, null));
+
   @Override
   public long ramBytesUsed(Pair<A,B> output) {
-    long ramBytesUsed = super.ramBytesUsed(output);
+    long ramBytesUsed = BASE_NUM_BYTES;
     if (output.output1 != null) {
       ramBytesUsed += outputs1.ramBytesUsed(output.output1);
     }
Index: lucene/misc/src/java/org/apache/lucene/util/fst/ListOfOutputs.java
===================================================================
--- lucene/misc/src/java/org/apache/lucene/util/fst/ListOfOutputs.java	(revision 1617849)
+++ lucene/misc/src/java/org/apache/lucene/util/fst/ListOfOutputs.java	(working copy)
@@ -24,6 +24,7 @@
 import org.apache.lucene.store.DataInput;
 import org.apache.lucene.store.DataOutput;
 import org.apache.lucene.util.IntsRef; // javadocs
+import org.apache.lucene.util.RamUsageEstimator;
 
 /**
  * Wraps another Outputs implementation and encodes one or
@@ -208,4 +209,24 @@
       return (List<T>) output;
     }
   }
+
+  private static final long BASE_LIST_NUM_BYTES = RamUsageEstimator.shallowSizeOf(new ArrayList<Object>());
+
+  @Override
+  public long ramBytesUsed(Object output) {
+    long bytes = 0;
+    if (output instanceof List) {
+      bytes += BASE_LIST_NUM_BYTES;
+      List<T> outputList = (List<T>) output;
+      for(T _output : outputList) {
+        bytes += outputs.ramBytesUsed(_output);
+      }
+      // 2 * to allow for ArrayList's oversizing:
+      bytes += 2 * outputList.size() * RamUsageEstimator.NUM_BYTES_OBJECT_REF;
+    } else {
+      bytes += outputs.ramBytesUsed((T) output);
+    }
+
+    return bytes;
+  }
 }
Index: lucene/misc/src/java/org/apache/lucene/util/fst/UpToTwoPositiveIntOutputs.java
===================================================================
--- lucene/misc/src/java/org/apache/lucene/util/fst/UpToTwoPositiveIntOutputs.java	(revision 1617849)
+++ lucene/misc/src/java/org/apache/lucene/util/fst/UpToTwoPositiveIntOutputs.java	(working copy)
@@ -21,6 +21,7 @@
 
 import org.apache.lucene.store.DataInput;
 import org.apache.lucene.store.DataOutput;
+import org.apache.lucene.util.RamUsageEstimator;
 
 /**
  * An FST {@link Outputs} implementation where each output
@@ -232,4 +233,16 @@
     assert valid(second, false);
     return new TwoLongs((Long) first, (Long) second);
   }
+
+  private static final long BASE_TWO_INTS_NUM_BYTES = RamUsageEstimator.shallowSizeOf(new TwoLongs(0, 0));
+
+  @Override
+  public long ramBytesUsed(Object o) {
+    if (o instanceof Long) {
+      return RamUsageEstimator.sizeOf((Long) o);
+    } else {
+      TwoLongs tl = (TwoLongs) o;
+      return BASE_TWO_INTS_NUM_BYTES + RamUsageEstimator.sizeOf(tl.first) + RamUsageEstimator.sizeOf(tl.second);
+    }
+  }
 }
