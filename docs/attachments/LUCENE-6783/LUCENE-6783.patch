Index: lucene/CHANGES.txt
===================================================================
--- lucene/CHANGES.txt	(revision 1701749)
+++ lucene/CHANGES.txt	(working copy)
@@ -115,6 +115,9 @@
 
 * LUCENE-6781: Fixed BoostingQuery to rewrite wrapped queries. (Adrien Grand)
 
+* LUCENE-6783: Removed side effects from FuzzyLikeThisQuery.rewrite.
+  (Adrien Grand)
+
 Other
 
 * LUCENE-6174: Improve "ant eclipse" to select right JRE for building.
Index: lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/FuzzyLikeThisQuery.java
===================================================================
--- lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/FuzzyLikeThisQuery.java	(revision 1701749)
+++ lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/FuzzyLikeThisQuery.java	(working copy)
@@ -69,11 +69,9 @@
     // the rewrite method can 'average' the TermContext's term statistics (docfreq,totalTermFreq) 
     // provided to TermQuery, so that the general idea is agnostic to any scoring system...
     static TFIDFSimilarity sim=new DefaultSimilarity();
-    Query rewrittenQuery=null;
     ArrayList<FieldVals> fieldVals=new ArrayList<>();
     Analyzer analyzer;
-    
-    ScoreTermQueue q;
+
     int MAX_VARIANTS_PER_TERM=50;
     boolean ignoreTF=false;
     private int maxNumTerms;
@@ -126,7 +124,6 @@
      */
     public FuzzyLikeThisQuery(int maxNumTerms, Analyzer analyzer)
     {
-        q=new ScoreTermQueue(maxNumTerms);
         this.analyzer=analyzer;
         this.maxNumTerms = maxNumTerms;
     }
@@ -201,7 +198,7 @@
     }
 
 
-  private void addTerms(IndexReader reader, FieldVals f) throws IOException {
+  private void addTerms(IndexReader reader, FieldVals f, ScoreTermQueue q) throws IOException {
     if (f.queryString == null) return;
     final Terms terms = MultiFields.getTerms(reader, f.fieldName);
     if (terms == null) {
@@ -290,21 +287,14 @@
   @Override
     public Query rewrite(IndexReader reader) throws IOException
     {
-        if(rewrittenQuery!=null)
-        {
-            return rewrittenQuery;
-        }
+        ScoreTermQueue q = new ScoreTermQueue(maxNumTerms);
         //load up the list of possible terms
-        for (Iterator<FieldVals> iter = fieldVals.iterator(); iter.hasNext(); ) {
-          FieldVals f = iter.next();
-          addTerms(reader, f);
+        for (FieldVals f : fieldVals) {
+          addTerms(reader, f, q);
         }
-      //clear the list of fields
-        fieldVals.clear();
         
-        BooleanQuery.Builder bq=new BooleanQuery.Builder();
+        BooleanQuery.Builder bq = new BooleanQuery.Builder();
         
-        
         //create BooleanQueries to hold the variants for each token/field pair and ensure it
         // has no coord factor
         //Step 1: sort the termqueries by term/field
@@ -351,9 +341,7 @@
         }
         //TODO possible alternative step 3 - organize above booleans into a new layer of field-based
         // booleans with a minimum-should-match of NumFields-1?
-        Query q = bq.build();
-        this.rewrittenQuery=q;
-        return q;
+        return bq.build();
     }
     
     //Holds info for a fuzzy term variant - initially score is set to edit distance (for ranking best
