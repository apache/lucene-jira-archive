Index: lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.java	(revision 1585800)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.java	(working copy)
@@ -384,7 +384,7 @@
           final byte[] payloads;
           if (hasPayloads) {
             ros.flush();
-            payloads = new byte[(int) ros.length()];
+            payloads = new byte[(int) ros.getFilePointer()];
             ros.writeTo(payloads, 0);
           } else {
             payloads = null;
Index: lucene/misc/src/java/org/apache/lucene/store/NativeUnixDirectory.java
===================================================================
--- lucene/misc/src/java/org/apache/lucene/store/NativeUnixDirectory.java	(revision 1585800)
+++ lucene/misc/src/java/org/apache/lucene/store/NativeUnixDirectory.java	(working copy)
@@ -237,11 +237,6 @@
     }
 
     @Override
-    public long length() {
-      return fileLength + bufferPos;
-    }
-    
-    @Override
     public long getChecksum() throws IOException {
       throw new UnsupportedOperationException("this directory currently does not work at all!");
     }
Index: lucene/test-framework/src/java/org/apache/lucene/store/MockIndexOutputWrapper.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/store/MockIndexOutputWrapper.java	(revision 1585800)
+++ lucene/test-framework/src/java/org/apache/lucene/store/MockIndexOutputWrapper.java	(working copy)
@@ -74,7 +74,7 @@
       if (realUsage > dir.maxUsedSize) {
         dir.maxUsedSize = realUsage;
       }
-      String message = "fake disk full at " + dir.getRecomputedActualSizeInBytes() + " bytes when writing " + name + " (file length=" + delegate.length();
+      String message = "fake disk full at " + dir.getRecomputedActualSizeInBytes() + " bytes when writing " + name + " (file length=" + delegate.getFilePointer();
       if (freeSpace > 0) {
         message += "; wrote " + freeSpace + " of " + len + " bytes";
       }
@@ -147,16 +147,6 @@
   }
 
   @Override
-  public long length() throws IOException {
-    return delegate.length();
-  }
-
-  @Override
-  public void setLength(long length) throws IOException {
-    delegate.setLength(length);
-  }
-
-  @Override
   public void copyBytes(DataInput input, long numBytes) throws IOException {
     checkCrashed();
     checkDiskFull(null, 0, input, numBytes);
Index: lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper.java	(revision 1585800)
+++ lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper.java	(working copy)
@@ -294,7 +294,6 @@
         // Totally truncate the file to zero bytes
         deleteFile(name, true);
         IndexOutput out = in.createOutput(name, LuceneTestCase.newIOContext(randomState));
-        out.setLength(0);
         out.close();
       }
       if (LuceneTestCase.VERBOSE) {
@@ -980,11 +979,6 @@
     }
     
     @Override
-    public long length() throws IOException {
-      return io.length();
-    }
-    
-    @Override
     protected void flushBuffer(byte[] b, int offset, int len) throws IOException {
       io.writeBytes(b, offset, len);
     }
Index: lucene/test-framework/src/java/org/apache/lucene/util/ThrottledIndexOutput.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/util/ThrottledIndexOutput.java	(revision 1585800)
+++ lucene/test-framework/src/java/org/apache/lucene/util/ThrottledIndexOutput.java	(working copy)
@@ -89,11 +89,6 @@
   }
 
   @Override
-  public long length() throws IOException {
-    return delegate.length();
-  }
-
-  @Override
   public void writeByte(byte b) throws IOException {
     bytes[0] = b;
     writeBytes(bytes, 0, 1);
@@ -137,11 +132,6 @@
   }
   
   @Override
-  public void setLength(long length) throws IOException {
-    delegate.setLength(length);
-  }
-
-  @Override
   public void copyBytes(DataInput input, long numBytes) throws IOException {
     delegate.copyBytes(input, numBytes);
   }
Index: lucene/facet/src/test/org/apache/lucene/facet/SlowRAMDirectory.java
===================================================================
--- lucene/facet/src/test/org/apache/lucene/facet/SlowRAMDirectory.java	(revision 1585800)
+++ lucene/facet/src/test/org/apache/lucene/facet/SlowRAMDirectory.java	(working copy)
@@ -166,7 +166,6 @@
     @Override public void close() throws IOException { io.close(); }
     @Override public void flush() throws IOException { io.flush(); }
     @Override public long getFilePointer() { return io.getFilePointer(); }
-    @Override public long length() throws IOException { return io.length(); }
     @Override public long getChecksum() throws IOException { return io.getChecksum(); }
   }
   
Index: lucene/core/src/test/org/apache/lucene/store/TestHugeRamFile.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/store/TestHugeRamFile.java	(revision 1585800)
+++ lucene/core/src/test/org/apache/lucene/store/TestHugeRamFile.java	(working copy)
@@ -64,12 +64,12 @@
       b2[i] = (byte) (i & 0x0003F);
     }
     long n = 0;
-    assertEquals("output length must match",n,out.length());
+    assertEquals("output length must match",n,out.getFilePointer());
     while (n <= MAX_VALUE - b1.length) {
       out.writeBytes(b1,0,b1.length);
       out.flush();
       n += b1.length;
-      assertEquals("output length must match",n,out.length());
+      assertEquals("output length must match",n,out.getFilePointer());
     }
     //System.out.println("after writing b1's, length = "+out.length()+" (MAX_VALUE="+MAX_VALUE+")");
     int m = b2.length;
@@ -81,7 +81,7 @@
       out.writeBytes(b2,0,m);
       out.flush();
       n += m;
-      assertEquals("output length must match",n,out.length());
+      assertEquals("output length must match",n,out.getFilePointer());
     }
     out.close();
     // input part
Index: lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter.java	(revision 1585800)
+++ lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter.java	(working copy)
@@ -327,12 +327,6 @@
     }
 
     @Override
-    public long length() throws IOException {
-      assert !closed;
-      return delegate.length() - offset;
-    }
-
-    @Override
     public void writeByte(byte b) throws IOException {
       assert !closed;
       writtenBytes++;
Index: lucene/core/src/java/org/apache/lucene/store/RateLimitedIndexOutput.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/store/RateLimitedIndexOutput.java	(revision 1585800)
+++ lucene/core/src/java/org/apache/lucene/store/RateLimitedIndexOutput.java	(working copy)
@@ -52,11 +52,6 @@
   }
   
   @Override
-  public long length() throws IOException {
-    return delegate.length();
-  }
-
-  @Override
   public void flush() throws IOException {
     try {
       super.flush();
Index: lucene/core/src/java/org/apache/lucene/store/RAMOutputStream.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/store/RAMOutputStream.java	(revision 1585800)
+++ lucene/core/src/java/org/apache/lucene/store/RAMOutputStream.java	(working copy)
@@ -108,11 +108,6 @@
   }
 
   @Override
-  public long length() {
-    return file.length;
-  }
-
-  @Override
   public void writeByte(byte b) throws IOException {
     if (bufferPosition == bufferLength) {
       currentBufferIndex++;
Index: lucene/core/src/java/org/apache/lucene/store/BufferedIndexOutput.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/store/BufferedIndexOutput.java	(revision 1585800)
+++ lucene/core/src/java/org/apache/lucene/store/BufferedIndexOutput.java	(working copy)
@@ -135,9 +135,6 @@
     return bufferStart + bufferPosition;
   }
 
-  @Override
-  public abstract long length() throws IOException;
-  
   /**
    * Returns size of the used output buffer in bytes.
    * */
Index: lucene/core/src/java/org/apache/lucene/store/FSDirectory.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/store/FSDirectory.java	(revision 1585800)
+++ lucene/core/src/java/org/apache/lucene/store/FSDirectory.java	(working copy)
@@ -385,16 +385,6 @@
         }
       }
     }
-
-    @Override
-    public long length() throws IOException {
-      return file.length();
-    }
-
-    @Override
-    public void setLength(long length) throws IOException {
-      file.setLength(length);
-    }
   }
 
   protected void fsync(String name) throws IOException {
Index: lucene/core/src/java/org/apache/lucene/store/IndexOutput.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/store/IndexOutput.java	(revision 1585800)
+++ lucene/core/src/java/org/apache/lucene/store/IndexOutput.java	(working copy)
@@ -45,20 +45,4 @@
 
   /** Returns the current checksum of bytes written so far */
   public abstract long getChecksum() throws IOException;
-
-  /** The number of bytes in the file. */
-  public abstract long length() throws IOException;
-
-  /** Set the file length. By default, this method does
-   * nothing (it's optional for a Directory to implement
-   * it).  But, certain Directory implementations (for
-   * example @see FSDirectory) can use this to inform the
-   * underlying IO system to pre-allocate the file to the
-   * specified size.  If the length is longer than the
-   * current file length, the bytes added to the file are
-   * undefined.  Otherwise the file is truncated.
-   * @param length file length
-   */
-  public void setLength(long length) throws IOException {}
-
 }
Index: solr/core/src/java/org/apache/solr/store/blockcache/ReusedBufferedIndexOutput.java
===================================================================
--- solr/core/src/java/org/apache/solr/store/blockcache/ReusedBufferedIndexOutput.java	(revision 1585800)
+++ solr/core/src/java/org/apache/solr/store/blockcache/ReusedBufferedIndexOutput.java	(working copy)
@@ -98,11 +98,6 @@
   protected abstract void seekInternal(long pos) throws IOException;
   
   @Override
-  public long length() throws IOException {
-    return fileLength;
-  }
-  
-  @Override
   public void writeByte(byte b) throws IOException {
     if (bufferPosition >= bufferSize) {
       flushBufferToCache();
Index: solr/core/src/java/org/apache/solr/store/hdfs/NullIndexOutput.java
===================================================================
--- solr/core/src/java/org/apache/solr/store/hdfs/NullIndexOutput.java	(revision 1585800)
+++ solr/core/src/java/org/apache/solr/store/hdfs/NullIndexOutput.java	(working copy)
@@ -45,11 +45,6 @@
   }
   
   @Override
-  public long length() throws IOException {
-    return length;
-  }
-  
-  @Override
   public void writeByte(byte b) throws IOException {
     pos++;
     updateLength();
Index: solr/core/src/java/org/apache/solr/store/hdfs/HdfsDirectory.java
===================================================================
--- solr/core/src/java/org/apache/solr/store/hdfs/HdfsDirectory.java	(revision 1585800)
+++ solr/core/src/java/org/apache/solr/store/hdfs/HdfsDirectory.java	(working copy)
@@ -258,11 +258,6 @@
         throws IOException {
       writer.writeBytes(b, offset, len);
     }
-
-    @Override
-    public long length() throws IOException {
-      return writer.length();
-    }
   }
   
   @Override
Index: solr/core/src/test/org/apache/solr/store/hdfs/HdfsDirectoryTest.java
===================================================================
--- solr/core/src/test/org/apache/solr/store/hdfs/HdfsDirectoryTest.java	(revision 1585800)
+++ solr/core/src/test/org/apache/solr/store/hdfs/HdfsDirectoryTest.java	(working copy)
@@ -196,9 +196,7 @@
     int writes = random.nextInt(MAX_NUMBER_OF_WRITES);
     int fileLength = random.nextInt(MAX_FILE_SIZE - MIN_FILE_SIZE) + MIN_FILE_SIZE;
     IndexOutput fsOutput = fsDir.createOutput(name, new IOContext());
-    fsOutput.setLength(fileLength);
     IndexOutput hdfsOutput = hdfs.createOutput(name, new IOContext());
-    hdfsOutput.setLength(fileLength);
     for (int i = 0; i < writes; i++) {
       byte[] buf = new byte[random.nextInt(Math.min(MAX_BUFFER_SIZE - MIN_BUFFER_SIZE,fileLength)) + MIN_BUFFER_SIZE];
       random.nextBytes(buf);
