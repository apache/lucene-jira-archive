diff --git lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/UAX29URLEmailAnalyzer.java lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/UAX29URLEmailAnalyzer.java
index 53ffac2..af8bc40 100644
--- lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/UAX29URLEmailAnalyzer.java
+++ lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/UAX29URLEmailAnalyzer.java
@@ -18,11 +18,14 @@ package org.apache.lucene.analysis.standard;
  */
 
 import org.apache.lucene.analysis.TokenStream;
+import org.apache.lucene.analysis.Tokenizer;
 import org.apache.lucene.analysis.core.LowerCaseFilter;
 import org.apache.lucene.analysis.core.StopAnalyzer;
 import org.apache.lucene.analysis.core.StopFilter;
+import org.apache.lucene.analysis.standard.std40.UAX29URLEmailTokenizer40;
 import org.apache.lucene.analysis.util.CharArraySet;
 import org.apache.lucene.analysis.util.StopwordAnalyzerBase;
+import org.apache.lucene.util.Version;
 
 import java.io.IOException;
 import java.io.Reader;
@@ -84,15 +87,27 @@ public final class UAX29URLEmailAnalyzer extends StopwordAnalyzerBase {
 
   @Override
   protected TokenStreamComponents createComponents(final String fieldName) {
-    final UAX29URLEmailTokenizer src = new UAX29URLEmailTokenizer();
-    src.setMaxTokenLength(maxTokenLength);
+    final Tokenizer src;
+    if (getVersion().onOrAfter(Version.LUCENE_4_7_0)) {
+      src = new UAX29URLEmailTokenizer();
+      ((UAX29URLEmailTokenizer)src).setMaxTokenLength(maxTokenLength);
+    } else {
+      src = new UAX29URLEmailTokenizer40();
+      ((UAX29URLEmailTokenizer40)src).setMaxTokenLength(maxTokenLength);
+    }
+
     TokenStream tok = new StandardFilter(src);
     tok = new LowerCaseFilter(tok);
     tok = new StopFilter(tok, stopwords);
     return new TokenStreamComponents(src, tok) {
       @Override
       protected void setReader(final Reader reader) throws IOException {
-        src.setMaxTokenLength(UAX29URLEmailAnalyzer.this.maxTokenLength);
+        int m = UAX29URLEmailAnalyzer.this.maxTokenLength;
+        if (src instanceof UAX29URLEmailTokenizer) {
+          ((UAX29URLEmailTokenizer)src).setMaxTokenLength(m);
+        } else {
+          ((UAX29URLEmailTokenizer40)src).setMaxTokenLength(m);
+        }
         super.setReader(reader);
       }
     };
diff --git lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/UAX29URLEmailTokenizerFactory.java lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/UAX29URLEmailTokenizerFactory.java
index 485b7d3..f266dd8 100644
--- lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/UAX29URLEmailTokenizerFactory.java
+++ lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/UAX29URLEmailTokenizerFactory.java
@@ -17,10 +17,12 @@ package org.apache.lucene.analysis.standard;
  * limitations under the License.
  */
 
+import org.apache.lucene.analysis.Tokenizer;
+import org.apache.lucene.analysis.standard.std40.UAX29URLEmailTokenizer40;
 import org.apache.lucene.analysis.util.TokenizerFactory;
 import org.apache.lucene.util.AttributeFactory;
+import org.apache.lucene.util.Version;
 
-import java.io.Reader;
 import java.util.Map;
 
 /**
@@ -45,9 +47,15 @@ public class UAX29URLEmailTokenizerFactory extends TokenizerFactory {
   }
 
   @Override
-  public UAX29URLEmailTokenizer create(AttributeFactory factory) {
-    UAX29URLEmailTokenizer tokenizer = new UAX29URLEmailTokenizer(factory);
-    tokenizer.setMaxTokenLength(maxTokenLength);
-    return tokenizer;
+  public Tokenizer create(AttributeFactory factory) {
+    if (luceneMatchVersion.onOrAfter(Version.LUCENE_4_7_0)) {
+      UAX29URLEmailTokenizer tokenizer = new UAX29URLEmailTokenizer(factory);
+      tokenizer.setMaxTokenLength(maxTokenLength);
+      return tokenizer;
+    } else {
+      UAX29URLEmailTokenizer40 tokenizer40 = new UAX29URLEmailTokenizer40(factory);
+      tokenizer40.setMaxTokenLength(maxTokenLength);
+      return tokenizer40;
+    }
   }
 }
diff --git lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/std40/UAX29URLEmailTokenizer40.java lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/std40/UAX29URLEmailTokenizer40.java
new file mode 100644
index 0000000..1c3683b
--- /dev/null
+++ lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/std40/UAX29URLEmailTokenizer40.java
@@ -0,0 +1,144 @@
+package org.apache.lucene.analysis.standard.std40;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.IOException;
+
+import org.apache.lucene.analysis.Tokenizer;
+import org.apache.lucene.analysis.standard.StandardAnalyzer;
+import org.apache.lucene.analysis.tokenattributes.OffsetAttribute;
+import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute;
+import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
+import org.apache.lucene.analysis.tokenattributes.TypeAttribute;
+import org.apache.lucene.util.AttributeFactory;
+import org.apache.lucene.util.AttributeSource;
+
+/** Backcompat uax29 tokenizer for Lucene 4.0-4.6. This supports Unicode 6.1.
+ *
+ * @deprecated Use {@link org.apache.lucene.analysis.standard.UAX29URLEmailTokenizer}
+ */
+@Deprecated
+public final class UAX29URLEmailTokenizer40 extends Tokenizer {
+  /** A private instance of the JFlex-constructed scanner */
+  private final UAX29URLEmailTokenizerImpl40 scanner;
+  
+  public static final int ALPHANUM          = 0;
+  public static final int NUM               = 1;
+  public static final int SOUTHEAST_ASIAN   = 2;
+  public static final int IDEOGRAPHIC       = 3;
+  public static final int HIRAGANA          = 4;
+  public static final int KATAKANA          = 5;
+  public static final int HANGUL            = 6;
+  public static final int URL               = 7;
+  public static final int EMAIL             = 8;
+
+  /** String token types that correspond to token type int constants */
+  public static final String [] TOKEN_TYPES = new String [] {
+      StandardTokenizer40.TOKEN_TYPES[StandardTokenizer40.ALPHANUM],
+      StandardTokenizer40.TOKEN_TYPES[StandardTokenizer40.NUM],
+      StandardTokenizer40.TOKEN_TYPES[StandardTokenizer40.SOUTHEAST_ASIAN],
+      StandardTokenizer40.TOKEN_TYPES[StandardTokenizer40.IDEOGRAPHIC],
+      StandardTokenizer40.TOKEN_TYPES[StandardTokenizer40.HIRAGANA],
+      StandardTokenizer40.TOKEN_TYPES[StandardTokenizer40.KATAKANA],
+      StandardTokenizer40.TOKEN_TYPES[StandardTokenizer40.HANGUL],
+    "<URL>",
+    "<EMAIL>",
+  };
+
+  private int maxTokenLength = StandardAnalyzer.DEFAULT_MAX_TOKEN_LENGTH;
+
+  /** Set the max allowed token length.  Any token longer
+   *  than this is skipped. */
+  public void setMaxTokenLength(int length) {
+    this.maxTokenLength = length;
+  }
+
+  /** @see #setMaxTokenLength */
+  public int getMaxTokenLength() {
+    return maxTokenLength;
+  }
+
+  /**
+   * Creates a new instance of the UAX29URLEmailTokenizer.  Attaches
+   * the <code>input</code> to the newly created JFlex scanner.
+   */
+  public UAX29URLEmailTokenizer40() {
+    scanner = new UAX29URLEmailTokenizerImpl40(input);
+  }
+
+  /**
+   * Creates a new UAX29URLEmailTokenizer with a given {@link AttributeSource}. 
+   */
+  public UAX29URLEmailTokenizer40(AttributeFactory factory) {
+    super(factory);
+    scanner = new UAX29URLEmailTokenizerImpl40(input);
+  }
+
+  // this tokenizer generates three attributes:
+  // term offset, positionIncrement and type
+  private final CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);
+  private final OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);
+  private final PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);
+  private final TypeAttribute typeAtt = addAttribute(TypeAttribute.class);
+
+  @Override
+  public final boolean incrementToken() throws IOException {
+    clearAttributes();
+    int posIncr = 1;
+
+    while(true) {
+      int tokenType = scanner.getNextToken();
+
+      if (tokenType == UAX29URLEmailTokenizerImpl40.YYEOF) {
+        return false;
+      }
+
+      if (scanner.yylength() <= maxTokenLength) {
+        posIncrAtt.setPositionIncrement(posIncr);
+        scanner.getText(termAtt);
+        final int start = scanner.yychar();
+        offsetAtt.setOffset(correctOffset(start), correctOffset(start+termAtt.length()));
+        typeAtt.setType(TOKEN_TYPES[tokenType]);
+        return true;
+      } else
+        // When we skip a too-long term, we still increment the
+        // position increment
+        posIncr++;
+    }
+  }
+  
+  @Override
+  public final void end() throws IOException {
+    super.end();
+    // set final offset
+    int finalOffset = correctOffset(scanner.yychar() + scanner.yylength());
+    offsetAtt.setOffset(finalOffset, finalOffset);
+  }
+
+  @Override
+  public void close() throws IOException {
+    super.close();
+    scanner.yyreset(input);
+  }
+
+  @Override
+  public void reset() throws IOException {
+    super.reset();
+    scanner.yyreset(input);
+  }
+}
diff --git lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/std40/UAX29URLEmailTokenizerImpl40.java lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/std40/UAX29URLEmailTokenizerImpl40.java
index a5f41a6..e58462c 100644
--- lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/std40/UAX29URLEmailTokenizerImpl40.java
+++ lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/std40/UAX29URLEmailTokenizerImpl40.java
@@ -19,7 +19,6 @@ package org.apache.lucene.analysis.standard.std40;
  * limitations under the License.
  */
 
-import org.apache.lucene.analysis.standard.UAX29URLEmailTokenizer;
 import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
 
 @Deprecated
@@ -3994,10 +3993,10 @@ public final class UAX29URLEmailTokenizerImpl40 {
 
   /* user code: */
   /** Alphanumeric sequences */
-  public static final int WORD_TYPE = UAX29URLEmailTokenizer.ALPHANUM;
+  public static final int WORD_TYPE = UAX29URLEmailTokenizer40.ALPHANUM;
   
   /** Numbers */
-  public static final int NUMERIC_TYPE = UAX29URLEmailTokenizer.NUM;
+  public static final int NUMERIC_TYPE = UAX29URLEmailTokenizer40.NUM;
   
   /**
    * Chars in class \p{Line_Break = Complex_Context} are from South East Asian
@@ -4007,19 +4006,19 @@ public final class UAX29URLEmailTokenizerImpl40 {
    * <p>
    * See Unicode Line Breaking Algorithm: http://www.unicode.org/reports/tr14/#SA
    */
-  public static final int SOUTH_EAST_ASIAN_TYPE = UAX29URLEmailTokenizer.SOUTHEAST_ASIAN;
+  public static final int SOUTH_EAST_ASIAN_TYPE = UAX29URLEmailTokenizer40.SOUTHEAST_ASIAN;
   
-  public static final int IDEOGRAPHIC_TYPE = UAX29URLEmailTokenizer.IDEOGRAPHIC;
+  public static final int IDEOGRAPHIC_TYPE = UAX29URLEmailTokenizer40.IDEOGRAPHIC;
   
-  public static final int HIRAGANA_TYPE = UAX29URLEmailTokenizer.HIRAGANA;
+  public static final int HIRAGANA_TYPE = UAX29URLEmailTokenizer40.HIRAGANA;
   
-  public static final int KATAKANA_TYPE = UAX29URLEmailTokenizer.KATAKANA;
+  public static final int KATAKANA_TYPE = UAX29URLEmailTokenizer40.KATAKANA;
   
-  public static final int HANGUL_TYPE = UAX29URLEmailTokenizer.HANGUL;
+  public static final int HANGUL_TYPE = UAX29URLEmailTokenizer40.HANGUL;
   
-  public static final int EMAIL_TYPE = UAX29URLEmailTokenizer.EMAIL;
+  public static final int EMAIL_TYPE = UAX29URLEmailTokenizer40.EMAIL;
   
-  public static final int URL_TYPE = UAX29URLEmailTokenizer.URL;
+  public static final int URL_TYPE = UAX29URLEmailTokenizer40.URL;
 
   public final int yychar()
   {
diff --git lucene/analysis/common/src/test/org/apache/lucene/analysis/standard/TestUAX29URLEmailAnalyzer.java lucene/analysis/common/src/test/org/apache/lucene/analysis/standard/TestUAX29URLEmailAnalyzer.java
index 4b4da03..081bf26 100644
--- lucene/analysis/common/src/test/org/apache/lucene/analysis/standard/TestUAX29URLEmailAnalyzer.java
+++ lucene/analysis/common/src/test/org/apache/lucene/analysis/standard/TestUAX29URLEmailAnalyzer.java
@@ -19,7 +19,7 @@ package org.apache.lucene.analysis.standard;
 
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.BaseTokenStreamTestCase;
-import org.apache.lucene.analysis.standard.UAX29URLEmailAnalyzer;
+import org.apache.lucene.util.Version;
 
 import java.io.IOException;
 import java.util.Arrays;
@@ -340,9 +340,15 @@ public class TestUAX29URLEmailAnalyzer extends BaseTokenStreamTestCase {
             new String[] { "<URL>" });
   }
 
-  
   /** blast some random strings through the analyzer */
   public void testRandomStrings() throws Exception {
     checkRandomData(random(), new UAX29URLEmailAnalyzer(), 1000*RANDOM_MULTIPLIER);
   }
+
+  public void testBackcompat40() throws IOException {
+    UAX29URLEmailAnalyzer a = new UAX29URLEmailAnalyzer();
+    a.setVersion(Version.LUCENE_4_6_1);
+    // this is just a test to see the correct unicode version is being used, not actually testing hebrew
+    assertAnalyzesTo(a, "א\"א", new String[] {"א", "א"});
+  }
 }
