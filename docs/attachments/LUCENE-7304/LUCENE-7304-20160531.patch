diff --git a/lucene/core/src/java/org/apache/lucene/search/DocBlocksIterator.java b/lucene/core/src/java/org/apache/lucene/search/DocBlocksIterator.java
new file mode 100644
index 0000000..fb109e4
--- /dev/null
+++ b/lucene/core/src/java/org/apache/lucene/search/DocBlocksIterator.java
@@ -0,0 +1,39 @@
+package org.apache.lucene.search;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.IOException;
+
+/**
+ * This abstract class adds a method to {@link DocIdSetIterator}
+ * to iterate over blocks of doc Ids as done in the join module.
+ */
+public abstract class DocBlocksIterator extends DocIdSetIterator {
+  /**
+   * This method followed by a {@link #nextDoc} has the same
+   * effect as {@link #advance(int)}.
+   * <br>In other words, this method advances to (or stays at) the document
+   * that is the one before a {@link #nextDoc} that
+   * {@link #advance(int)} would advance to from the current document.
+   * <br>In case {@link #advance(int)} would return the first document,
+   * this method returns -1.
+   * <br>In case {@link #advance(int)} would return {@link #NO_MORE_DOCS},
+   * this method advances to (or stays at) the last document in the set.
+   */
+  public abstract int advanceToJustBefore(int target) throws IOException;
+}
diff --git a/lucene/core/src/java/org/apache/lucene/util/BitDocIdSet.java b/lucene/core/src/java/org/apache/lucene/util/BitDocIdSet.java
index c7387a5..ab0424d 100644
--- a/lucene/core/src/java/org/apache/lucene/util/BitDocIdSet.java
+++ b/lucene/core/src/java/org/apache/lucene/util/BitDocIdSet.java
@@ -18,7 +18,8 @@ package org.apache.lucene.util;
 
 
 import org.apache.lucene.search.DocIdSet;
-import org.apache.lucene.search.DocIdSetIterator;
+import org.apache.lucene.search.DocBlocksIterator;
+
 
 /**
  * Implementation of the {@link DocIdSet} interface on top of a {@link BitSet}.
@@ -52,7 +53,7 @@ public class BitDocIdSet extends DocIdSet {
   }
 
   @Override
-  public DocIdSetIterator iterator() {
+  public DocBlocksIterator iterator() {
     return new BitSetIterator(set, cost);
   }
 
diff --git a/lucene/core/src/java/org/apache/lucene/util/BitSetIterator.java b/lucene/core/src/java/org/apache/lucene/util/BitSetIterator.java
index 1a51d80..df2fc81 100644
--- a/lucene/core/src/java/org/apache/lucene/util/BitSetIterator.java
+++ b/lucene/core/src/java/org/apache/lucene/util/BitSetIterator.java
@@ -18,13 +18,14 @@ package org.apache.lucene.util;
 
 
 import org.apache.lucene.search.DocIdSetIterator;
+import org.apache.lucene.search.DocBlocksIterator;
 
 /**
  * A {@link DocIdSetIterator} which iterates over set bits in a
  * bit set.
  * @lucene.internal
  */
-public class BitSetIterator extends DocIdSetIterator {
+public class BitSetIterator extends DocBlocksIterator {
 
   private static <T extends BitSet> T getBitSet(DocIdSetIterator iterator, Class<? extends T> clazz) {
     if (iterator instanceof BitSetIterator) {
@@ -81,6 +82,16 @@ public class BitSetIterator extends DocIdSetIterator {
   }
 
   @Override
+  public int advanceToJustBefore(int target) {
+    assert doc <= target;
+    int advanceDoc = advance(target);
+    if (advanceDoc == NO_MORE_DOCS) {
+      return doc = NO_MORE_DOCS;
+    }
+    return doc = bits.prevSetBit(advanceDoc - 1);
+  }
+
+  @Override
   public long cost() {
     return cost;
   }
diff --git a/lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.java b/lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.java
index f3d487f..155080a 100644
--- a/lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.java
+++ b/lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.java
@@ -33,6 +33,11 @@ import org.apache.lucene.search.Scorer;
 import org.apache.lucene.search.Weight;
 import org.apache.lucene.util.BitSet;
 
+import org.apache.lucene.util.BitSetIterator;
+
+import org.apache.lucene.search.DocIdSetIterator;
+import org.apache.lucene.search.DocBlocksIterator;
+
 /**
  * Just like {@link ToParentBlockJoinQuery}, except this
  * query joins in reverse: you provide a Query matching
@@ -64,7 +69,7 @@ public class ToChildBlockJoinQuery extends Query {
    * Create a ToChildBlockJoinQuery.
    * 
    * @param parentQuery Query that matches parent documents
-   * @param parentsFilter Filter identifying the parent documents.
+   * @param parentsFilter A BitSetProducer identifying the parent documents.
    */
   public ToChildBlockJoinQuery(Query parentQuery, BitSetProducer parentsFilter) {
     super();
@@ -136,8 +141,9 @@ public class ToChildBlockJoinQuery extends Query {
         // No parents
         return null;
       }
+      DocBlocksIterator parentsDbi = new BitSetIterator(parents, parents.cardinality());
 
-      return new ToChildBlockJoinScorer(this, parentScorer, parents, doScores);
+      return new ToChildBlockJoinScorer(this, parentScorer, parentsDbi, doScores);
     }
 
     @Override
@@ -158,7 +164,8 @@ public class ToChildBlockJoinQuery extends Query {
   static class ToChildBlockJoinScorer extends Scorer {
     private final Scorer parentScorer;
     private final DocIdSetIterator parentIt;
-    private final BitSet parentBits;
+    // private final BitSet parentBits;
+    private final DocBlocksIterator parentsDbi;
     private final boolean doScores;
 
     private float parentScore;
@@ -167,10 +174,14 @@ public class ToChildBlockJoinQuery extends Query {
     private int childDoc = -1;
     private int parentDoc = 0;
 
-    public ToChildBlockJoinScorer(Weight weight, Scorer parentScorer, BitSet parentBits, boolean doScores) {
+    public ToChildBlockJoinScorer(
+        Weight weight,
+        Scorer parentScorer,
+        DocBlocksIterator parentsDbi,
+        boolean doScores) {
       super(weight);
       this.doScores = doScores;
-      this.parentBits = parentBits;
+      this.parentsDbi = parentsDbi;
       this.parentScorer = parentScorer;
       this.parentIt = parentScorer.iterator();
     }
@@ -210,8 +221,8 @@ public class ToChildBlockJoinQuery extends Query {
                   // into ctor so we can skip this if... but it's
                   // tricky because scorer must return -1 for
                   // .doc() on init...
-                  parentDoc = parentIt.nextDoc();
                   validateParentDoc();
+                  parentDoc = parentIt.nextDoc();
                 }
 
                 if (parentDoc == NO_MORE_DOCS) {
@@ -221,7 +232,9 @@ public class ToChildBlockJoinQuery extends Query {
                 }
 
                 // Go to first child for this next parentDoc:
-                childDoc = 1 + parentBits.prevSetBit(parentDoc-1);
+                int previousParentDoc = parentsDbi.advanceToJustBefore(parentDoc);
+                validateParentDoc();
+                childDoc = 1 + previousParentDoc;
 
                 if (childDoc == parentDoc) {
                   // This parent has no children; continue
@@ -256,6 +269,7 @@ public class ToChildBlockJoinQuery extends Query {
               return childDoc = parentDoc = NO_MORE_DOCS;
             }
             parentDoc = parentIt.advance(childTarget + 1);
+            int previousParentDoc = parentsDbi.advanceToJustBefore(parentDoc);
             validateParentDoc();
 
             if (parentDoc == NO_MORE_DOCS) {
@@ -264,7 +278,7 @@ public class ToChildBlockJoinQuery extends Query {
 
             // scan to the first parent that has children
             while (true) {
-              final int firstChild = parentBits.prevSetBit(parentDoc-1) + 1;
+              final int firstChild = previousParentDoc + 1;
               if (firstChild != parentDoc) {
                 // this parent has children
                 childTarget = Math.max(childTarget, firstChild);
@@ -285,7 +299,6 @@ public class ToChildBlockJoinQuery extends Query {
           }
 
           assert childTarget < parentDoc;
-          assert !parentBits.get(childTarget);
           childDoc = childTarget;
           //System.out.println("  " + childDoc);
           return childDoc;
@@ -298,10 +311,20 @@ public class ToChildBlockJoinQuery extends Query {
       };
     }
 
-    /** Detect mis-use, where provided parent query in fact
-     *  sometimes returns child documents.  */
-    private void validateParentDoc() {
-      if (parentDoc != DocIdSetIterator.NO_MORE_DOCS && !parentBits.get(parentDoc)) {
+    /** Detect mis-use, where provided parent query in fact sometimes returns child documents.
+     *  This normally advances parentsDbi.
+     */
+    private void validateParentDoc() throws IOException {
+      if (parentDoc == DocIdSetIterator.NO_MORE_DOCS) {
+        return;
+      }
+      int dbiDoc = parentsDbi.docID();
+      if (parentDoc > dbiDoc) {
+        if (parentsDbi.advance(parentDoc) != parentDoc) {
+          throw new IllegalStateException(INVALID_QUERY_MESSAGE + parentDoc);
+        }
+      }
+      else if (parentDoc != dbiDoc) {
         throw new IllegalStateException(INVALID_QUERY_MESSAGE + parentDoc);
       }
     }
