Index: lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary.java
===================================================================
--- lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary.java	(revision 1622387)
+++ lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary.java	(working copy)
@@ -54,6 +54,7 @@
 import java.nio.charset.CharsetDecoder;
 import java.nio.charset.CodingErrorAction;
 import java.nio.charset.StandardCharsets;
+import java.nio.file.Files;
 import java.text.ParseException;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -203,6 +204,7 @@
     OutputStream out = new BufferedOutputStream(new FileOutputStream(aff));
     InputStream aff1 = null;
     InputStream aff2 = null;
+    boolean success = false;
     try {
       // copy contents of affix stream to temp file
       final byte [] buffer = new byte [1024 * 8];
@@ -228,9 +230,14 @@
       words = b.finish();
       aliases = null; // no longer needed
       morphAliases = null; // no longer needed
+      success = true;
     } finally {
       IOUtils.closeWhileHandlingException(out, aff1, aff2);
-      aff.delete();
+      if (success) {
+        Files.delete(aff.toPath());
+      } else {
+        IOUtils.deleteFilesIgnoringExceptions(aff);
+      }
     }
   }
 
@@ -857,90 +864,107 @@
         }
       }
     });
-    sorter.sort(unsorted, sorted);
-    unsorted.delete();
+    boolean success = false;
+    try {
+      sorter.sort(unsorted, sorted);
+      success = true;
+    } finally {
+      if (success) {
+        Files.delete(unsorted.toPath());
+      } else {
+        IOUtils.deleteFilesIgnoringExceptions(unsorted);
+      }
+    }
     
+    boolean success2 = false;
     ByteSequencesReader reader = new ByteSequencesReader(sorted);
-    BytesRefBuilder scratchLine = new BytesRefBuilder();
+    try {
+      BytesRefBuilder scratchLine = new BytesRefBuilder();
     
-    // TODO: the flags themselves can be double-chars (long) or also numeric
-    // either way the trick is to encode them as char... but they must be parsed differently
+      // TODO: the flags themselves can be double-chars (long) or also numeric
+      // either way the trick is to encode them as char... but they must be parsed differently
     
-    String currentEntry = null;
-    IntsRefBuilder currentOrds = new IntsRefBuilder();
+      String currentEntry = null;
+      IntsRefBuilder currentOrds = new IntsRefBuilder();
     
-    String line;
-    while (reader.read(scratchLine)) {
-      line = scratchLine.get().utf8ToString();
-      String entry;
-      char wordForm[];
-      int end;
+      String line;
+      while (reader.read(scratchLine)) {
+        line = scratchLine.get().utf8ToString();
+        String entry;
+        char wordForm[];
+        int end;
 
-      int flagSep = line.indexOf(FLAG_SEPARATOR);
-      if (flagSep == -1) {
-        wordForm = NOFLAGS;
-        end = line.indexOf(MORPH_SEPARATOR);
-        entry = line.substring(0, end);
-      } else {
-        end = line.indexOf(MORPH_SEPARATOR);
-        String flagPart = line.substring(flagSep + 1, end);
-        if (aliasCount > 0) {
-          flagPart = getAliasValue(Integer.parseInt(flagPart));
-        } 
+        int flagSep = line.indexOf(FLAG_SEPARATOR);
+        if (flagSep == -1) {
+          wordForm = NOFLAGS;
+          end = line.indexOf(MORPH_SEPARATOR);
+          entry = line.substring(0, end);
+        } else {
+          end = line.indexOf(MORPH_SEPARATOR);
+          String flagPart = line.substring(flagSep + 1, end);
+          if (aliasCount > 0) {
+            flagPart = getAliasValue(Integer.parseInt(flagPart));
+          } 
         
-        wordForm = flagParsingStrategy.parseFlags(flagPart);
-        Arrays.sort(wordForm);
-        entry = line.substring(0, flagSep);
-      }
-      // we possibly have morphological data
-      int stemExceptionID = 0;
-      if (hasStemExceptions && end+1 < line.length()) {
-        String stemException = parseStemException(line.substring(end+1));
-        if (stemException != null) {
-          if (stemExceptionCount == stemExceptions.length) {
-            int newSize = ArrayUtil.oversize(stemExceptionCount+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);
-            stemExceptions = Arrays.copyOf(stemExceptions, newSize);
+          wordForm = flagParsingStrategy.parseFlags(flagPart);
+          Arrays.sort(wordForm);
+          entry = line.substring(0, flagSep);
+        }
+        // we possibly have morphological data
+        int stemExceptionID = 0;
+        if (hasStemExceptions && end+1 < line.length()) {
+          String stemException = parseStemException(line.substring(end+1));
+          if (stemException != null) {
+            if (stemExceptionCount == stemExceptions.length) {
+              int newSize = ArrayUtil.oversize(stemExceptionCount+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);
+              stemExceptions = Arrays.copyOf(stemExceptions, newSize);
+            }
+            stemExceptionID = stemExceptionCount+1; // we use '0' to indicate no exception for the form
+            stemExceptions[stemExceptionCount++] = stemException;
           }
-          stemExceptionID = stemExceptionCount+1; // we use '0' to indicate no exception for the form
-          stemExceptions[stemExceptionCount++] = stemException;
         }
-      }
 
-      int cmp = currentEntry == null ? 1 : entry.compareTo(currentEntry);
-      if (cmp < 0) {
-        throw new IllegalArgumentException("out of order: " + entry + " < " + currentEntry);
-      } else {
-        encodeFlags(flagsScratch, wordForm);
-        int ord = flagLookup.add(flagsScratch.get());
-        if (ord < 0) {
-          // already exists in our hash
-          ord = (-ord)-1;
-        }
-        // finalize current entry, and switch "current" if necessary
-        if (cmp > 0 && currentEntry != null) {
-          Util.toUTF32(currentEntry, scratchInts);
-          words.add(scratchInts.get(), currentOrds.get());
-        }
-        // swap current
-        if (cmp > 0 || currentEntry == null) {
-          currentEntry = entry;
-          currentOrds = new IntsRefBuilder(); // must be this way
-        }
-        if (hasStemExceptions) {
-          currentOrds.append(ord);
-          currentOrds.append(stemExceptionID);
+        int cmp = currentEntry == null ? 1 : entry.compareTo(currentEntry);
+        if (cmp < 0) {
+          throw new IllegalArgumentException("out of order: " + entry + " < " + currentEntry);
         } else {
-          currentOrds.append(ord);
+          encodeFlags(flagsScratch, wordForm);
+          int ord = flagLookup.add(flagsScratch.get());
+          if (ord < 0) {
+            // already exists in our hash
+            ord = (-ord)-1;
+          }
+          // finalize current entry, and switch "current" if necessary
+          if (cmp > 0 && currentEntry != null) {
+            Util.toUTF32(currentEntry, scratchInts);
+            words.add(scratchInts.get(), currentOrds.get());
+          }
+          // swap current
+          if (cmp > 0 || currentEntry == null) {
+            currentEntry = entry;
+            currentOrds = new IntsRefBuilder(); // must be this way
+          }
+          if (hasStemExceptions) {
+            currentOrds.append(ord);
+            currentOrds.append(stemExceptionID);
+          } else {
+            currentOrds.append(ord);
+          }
         }
       }
+    
+      // finalize last entry
+      Util.toUTF32(currentEntry, scratchInts);
+      words.add(scratchInts.get(), currentOrds.get());
+      success2 = true;
+    } finally {
+      IOUtils.closeWhileHandlingException(reader);
+      if (success2) {
+        Files.delete(sorted.toPath());
+      } else {
+        IOUtils.deleteFilesIgnoringExceptions(sorted);
+      }
     }
-    
-    // finalize last entry
-    Util.toUTF32(currentEntry, scratchInts);
-    words.add(scratchInts.get(), currentOrds.get());
-    
-    reader.close();
-    sorted.delete();
   }
   
   static char[] decodeFlags(BytesRef b) {
Index: lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestFilesystemResourceLoader.java
===================================================================
--- lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestFilesystemResourceLoader.java	(revision 1622387)
+++ lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestFilesystemResourceLoader.java	(working copy)
@@ -87,7 +87,7 @@
       assertClasspathDelegation(rl);
       assertNotFound(rl);
     } finally {
-      TestUtil.rm(base);
+      IOUtils.rm(base);
     }
   }
   
Index: lucene/analysis/stempel/src/test/org/egothor/stemmer/TestCompile.java
===================================================================
--- lucene/analysis/stempel/src/test/org/egothor/stemmer/TestCompile.java	(revision 1622387)
+++ lucene/analysis/stempel/src/test/org/egothor/stemmer/TestCompile.java	(working copy)
@@ -66,6 +66,7 @@
 import java.io.InputStreamReader;
 import java.io.LineNumberReader;
 import java.nio.charset.StandardCharsets;
+import java.nio.file.Files;
 import java.util.Locale;
 import java.util.StringTokenizer;
 
@@ -87,7 +88,7 @@
     Trie trie = loadTrie(compiled);
     assertTrie(trie, path, true, true);
     assertTrie(trie, path, false, true);
-    new File(compiled).delete();
+    Files.delete(new File(compiled).toPath());
   }
   
   public void testCompileBackwards() throws Exception {
@@ -103,7 +104,7 @@
     Trie trie = loadTrie(compiled);
     assertTrie(trie, path, true, true);
     assertTrie(trie, path, false, true);
-    new File(compiled).delete();
+    Files.delete(new File(compiled).toPath());
   }
   
   public void testCompileMulti() throws Exception {
@@ -119,7 +120,7 @@
     Trie trie = loadTrie(compiled);
     assertTrie(trie, path, true, true);
     assertTrie(trie, path, false, true);
-    new File(compiled).delete();
+    Files.delete(new File(compiled).toPath());
   }
   
   static Trie loadTrie(String path) throws IOException {
Index: lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility.java
===================================================================
--- lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility.java	(revision 1622387)
+++ lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility.java	(working copy)
@@ -355,7 +355,7 @@
       assertTrue(bos.toString(IOUtils.UTF_8).contains(IndexFormatTooOldException.class.getName()));
 
       dir.close();
-      TestUtil.rm(oldIndxeDir);
+      IOUtils.rm(oldIndxeDir);
     }
   }
   
@@ -666,7 +666,7 @@
   public File createIndex(String dirName, boolean doCFS, boolean fullyMerged) throws IOException {
     // we use a real directory name that is not cleaned up, because this method is only used to create backwards indexes:
     File indexDir = new File("/tmp/idx", dirName);
-    TestUtil.rm(indexDir);
+    IOUtils.rm(indexDir);
     Directory dir = newFSDirectory(indexDir);
     LogByteSizeMergePolicy mp = new LogByteSizeMergePolicy();
     mp.setNoCFSRatio(doCFS ? 1.0 : 0.0);
Index: lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData.java
===================================================================
--- lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData.java	(revision 1622387)
+++ lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData.java	(working copy)
@@ -37,7 +37,6 @@
 import org.apache.lucene.benchmark.byTask.tasks.SearchTask;
 import org.apache.lucene.benchmark.byTask.utils.AnalyzerFactory;
 import org.apache.lucene.benchmark.byTask.utils.Config;
-import org.apache.lucene.benchmark.byTask.utils.FileUtils;
 import org.apache.lucene.facet.taxonomy.TaxonomyReader;
 import org.apache.lucene.facet.taxonomy.TaxonomyWriter;
 import org.apache.lucene.index.DirectoryReader;
@@ -195,7 +194,7 @@
       File workDir = new File(config.get("work.dir","work"));
       File indexDir = new File(workDir,dirName);
       if (eraseIndex && indexDir.exists()) {
-        FileUtils.fullyDelete(indexDir);
+        IOUtils.rm(indexDir);
       }
       indexDir.mkdirs();
       return FSDirectory.open(indexDir);
Index: lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/FileUtils.java
===================================================================
--- lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/FileUtils.java	(revision 1622387)
+++ lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/FileUtils.java	(working copy)
@@ -1,54 +0,0 @@
-package org.apache.lucene.benchmark.byTask.utils;
-
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import java.io.File;
-import java.io.IOException;
-
-/**
- * File utilities.
- */
-public class FileUtils {
-
-  /**
-   * Delete files and directories, even if non-empty.
-   *
-   * @param dir file or directory
-   * @return true on success, false if no or part of files have been deleted
-   * @throws IOException If there is a low-level I/O error.
-   */
-  public static boolean fullyDelete(File dir) throws IOException {
-    if (dir == null || !dir.exists()) return false;
-    File contents[] = dir.listFiles();
-    if (contents != null) {
-      for (int i = 0; i < contents.length; i++) {
-        if (contents[i].isFile()) {
-          if (!contents[i].delete()) {
-            return false;
-          }
-        } else {
-          if (!fullyDelete(contents[i])) {
-            return false;
-          }
-        }
-      }
-    }
-    return dir.delete();
-  }
-
-}
Index: lucene/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters.java
===================================================================
--- lucene/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters.java	(revision 1622387)
+++ lucene/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters.java	(working copy)
@@ -25,6 +25,7 @@
 import java.io.InputStreamReader;
 import java.io.OutputStreamWriter;
 import java.nio.charset.StandardCharsets;
+import java.nio.file.Files;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
@@ -37,12 +38,12 @@
   private File outputDir;
   private static final String LINE_SEPARATOR = System.getProperty("line.separator");
 
-  public ExtractReuters(File reutersDir, File outputDir) {
+  public ExtractReuters(File reutersDir, File outputDir) throws IOException {
     this.reutersDir = reutersDir;
     this.outputDir = outputDir;
     System.out.println("Deleting all files in " + outputDir);
     for (File f : outputDir.listFiles()) {
-      f.delete();
+      Files.delete(f.toPath());
     }
   }
 
@@ -122,7 +123,7 @@
     }
   }
 
-  public static void main(String[] args) {
+  public static void main(String[] args) throws Exception {
     if (args.length != 2) {
       usage("Wrong number of arguments ("+args.length+")");
       return;
Index: lucene/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractWikipedia.java
===================================================================
--- lucene/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractWikipedia.java	(revision 1622387)
+++ lucene/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractWikipedia.java	(working copy)
@@ -23,6 +23,7 @@
 import java.io.OutputStreamWriter;
 import java.io.Writer;
 import java.nio.charset.StandardCharsets;
+import java.nio.file.Files;
 import java.util.Properties;
 
 import org.apache.lucene.benchmark.byTask.feeds.ContentSource;
@@ -44,13 +45,13 @@
   static final int BASE = 10;
   protected DocMaker docMaker;
 
-  public ExtractWikipedia(DocMaker docMaker, File outputDir) {
+  public ExtractWikipedia(DocMaker docMaker, File outputDir) throws IOException {
     this.outputDir = outputDir;
     this.docMaker = docMaker;
     System.out.println("Deleting all files in " + outputDir);
     File[] files = outputDir.listFiles();
     for (int i = 0; i < files.length; i++) {
-      files[i].delete();
+      Files.delete(files[i].toPath());
     }
   }
 
Index: lucene/benchmark/src/test/org/apache/lucene/benchmark/BenchmarkTestCase.java
===================================================================
--- lucene/benchmark/src/test/org/apache/lucene/benchmark/BenchmarkTestCase.java	(revision 1622387)
+++ lucene/benchmark/src/test/org/apache/lucene/benchmark/BenchmarkTestCase.java	(working copy)
@@ -38,8 +38,6 @@
   @BeforeClass
   public static void beforeClassBenchmarkTestCase() {
     WORKDIR = createTempDir("benchmark");
-    WORKDIR.delete();
-    WORKDIR.mkdirs();
   }
   
   @AfterClass
Index: lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic.java
===================================================================
--- lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic.java	(revision 1622387)
+++ lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic.java	(working copy)
@@ -22,6 +22,7 @@
 import java.io.FileInputStream;
 import java.io.InputStreamReader;
 import java.nio.charset.StandardCharsets;
+import java.nio.file.Files;
 import java.text.Collator;
 import java.util.List;
 import java.util.Locale;
@@ -444,7 +445,7 @@
     assertEquals(numLines + " lines were created but " + ir.numDocs() + " docs are in the index", numLines, ir.numDocs());
     ir.close();
 
-    lineFile.delete();
+    Files.delete(lineFile.toPath());
   }
   
   /**
Index: lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/utils/StreamUtilsTest.java
===================================================================
--- lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/utils/StreamUtilsTest.java	(revision 1622387)
+++ lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/utils/StreamUtilsTest.java	(working copy)
@@ -30,6 +30,7 @@
 
 import org.apache.commons.compress.compressors.CompressorStreamFactory;
 import org.apache.lucene.benchmark.BenchmarkTestCase;
+import org.apache.lucene.util.IOUtils;
 import org.apache.lucene.util.TestUtil;
 import org.junit.After;
 import org.junit.Before;
@@ -136,7 +137,7 @@
   public void setUp() throws Exception {
     super.setUp();
     testDir = new File(getWorkDir(),"ContentSourceTest");
-    TestUtil.rm(testDir);
+    IOUtils.rm(testDir);
     assertTrue(testDir.mkdirs());
   }
 
@@ -143,7 +144,7 @@
   @Override
   @After
   public void tearDown() throws Exception {
-    TestUtil.rm(testDir);
+    IOUtils.rm(testDir);
     super.tearDown();
   }
 
Index: lucene/core/src/java/org/apache/lucene/store/FSDirectory.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/store/FSDirectory.java	(revision 1622387)
+++ lucene/core/src/java/org/apache/lucene/store/FSDirectory.java	(working copy)
@@ -26,6 +26,7 @@
 import java.io.FilenameFilter;
 import java.io.FilterOutputStream;
 import java.io.IOException;
+import java.nio.file.Files;
 import java.util.Collection;
 import java.util.HashSet;
 import java.util.Set;
@@ -251,8 +252,7 @@
   public void deleteFile(String name) throws IOException {
     ensureOpen();
     File file = new File(directory, name);
-    if (!file.delete())
-      throw new IOException("Cannot delete " + file);
+    Files.delete(file.toPath());
     staleFiles.remove(name);
   }
 
@@ -271,8 +271,7 @@
         throw new IOException("Cannot create directory: " + directory);
 
     File file = new File(directory, name);
-    if (file.exists() && !file.delete())          // delete existing, if any
-      throw new IOException("Cannot overwrite: " + file);
+    Files.deleteIfExists(file.toPath()); // delete existing, if any
   }
 
   /**
Index: lucene/core/src/java/org/apache/lucene/store/LockReleaseFailedException.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/store/LockReleaseFailedException.java	(revision 1622387)
+++ lucene/core/src/java/org/apache/lucene/store/LockReleaseFailedException.java	(working copy)
@@ -28,4 +28,8 @@
   public LockReleaseFailedException(String message) {
     super(message);
   }
+  
+  public LockReleaseFailedException(String message, Throwable cause) {
+    super(message, cause);
+  }
 }
Index: lucene/core/src/java/org/apache/lucene/store/SimpleFSLockFactory.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/store/SimpleFSLockFactory.java	(revision 1622387)
+++ lucene/core/src/java/org/apache/lucene/store/SimpleFSLockFactory.java	(working copy)
@@ -19,6 +19,7 @@
 
 import java.io.File;
 import java.io.IOException;
+import java.nio.file.Files;
 
 /**
  * <p>Implements {@link LockFactory} using {@link
@@ -102,9 +103,7 @@
         lockName = lockPrefix + "-" + lockName;
       }
       File lockFile = new File(lockDir, lockName);
-      if (lockFile.exists() && !lockFile.delete()) {
-        throw new IOException("Cannot delete " + lockFile);
-      }
+      Files.deleteIfExists(lockFile.toPath());
     }
   }
 }
@@ -147,8 +146,11 @@
 
   @Override
   public void close() throws LockReleaseFailedException {
-    if (lockFile.exists() && !lockFile.delete()) {
-      throw new LockReleaseFailedException("failed to delete " + lockFile);
+    // TODO: wierd that clearLock() throws the raw IOException...
+    try {
+      Files.deleteIfExists(lockFile.toPath());
+    } catch (Throwable cause) {
+      throw new LockReleaseFailedException("failed to delete " + lockFile, cause);
     }
   }
 
Index: lucene/core/src/java/org/apache/lucene/util/IOUtils.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/IOUtils.java	(revision 1622387)
+++ lucene/core/src/java/org/apache/lucene/util/IOUtils.java	(working copy)
@@ -33,7 +33,11 @@
 import java.nio.charset.CharsetDecoder;
 import java.nio.charset.CodingErrorAction;
 import java.nio.charset.StandardCharsets;
+import java.nio.file.Files;
 import java.nio.file.StandardOpenOption;
+import java.util.Arrays;
+import java.util.LinkedHashMap;
+import java.util.Map;
 
 /** This class emulates the new Java 7 "Try-With-Resources" statement.
  * Remove once Lucene is on Java 7.
@@ -69,22 +73,7 @@
    *          objects to call <tt>close()</tt> on
    */
   public static void close(Closeable... objects) throws IOException {
-    Throwable th = null;
-
-    for (Closeable object : objects) {
-      try {
-        if (object != null) {
-          object.close();
-        }
-      } catch (Throwable t) {
-        addSuppressed(th, t);
-        if (th == null) {
-          th = t;
-        }
-      }
-    }
-
-    reThrow(th);
+    close(Arrays.asList(objects));
   }
   
   /**
@@ -118,14 +107,7 @@
    *          objects to call <tt>close()</tt> on
    */
   public static void closeWhileHandlingException(Closeable... objects) {
-    for (Closeable object : objects) {
-      try {
-        if (object != null) {
-          object.close();
-        }
-      } catch (Throwable t) {
-      }
-    }
+    closeWhileHandlingException(Arrays.asList(objects));
   }
   
   /**
@@ -245,8 +227,115 @@
       }
     }
   }
+  
+  /**
+   * Deletes all given files, suppressing all thrown IOExceptions.
+   * <p>
+   * Some of the files may be null, if so they are ignored.
+   */
+  public static void deleteFilesIgnoringExceptions(File... files) {
+    deleteFilesIgnoringExceptions(Arrays.asList(files));
+  }
+  
+  /**
+   * Deletes all given files, suppressing all thrown IOExceptions.
+   * <p>
+   * Some of the files may be null, if so they are ignored.
+   */
+  public static void deleteFilesIgnoringExceptions(Iterable<? extends File> files) {
+    for (File name : files) {
+      if (name != null) {
+        try {
+          Files.delete(name.toPath());
+        } catch (Throwable ignored) {
+          // ignore
+        }
+      }
+    }
+  }
+  
+  /**
+   * Deletes all given <tt>File</tt>s, if they exist.  Some of the
+   * <tt>File</tt>s may be null; they are
+   * ignored.  After everything is deleted, the method either
+   * throws the first exception it hit while deleting, or
+   * completes normally if there were no exceptions.
+   * 
+   * @param files files to delete
+   */
+  public static void deleteFilesIfExist(File... files) throws IOException {
+    deleteFilesIfExist(Arrays.asList(files));
+  }
+  
+  /**
+   * Deletes all given <tt>File</tt>s, if they exist.  Some of the
+   * <tt>File</tt>s may be null; they are
+   * ignored.  After everything is deleted, the method either
+   * throws the first exception it hit while deleting, or
+   * completes normally if there were no exceptions.
+   * 
+   * @param files files to delete
+   */
+  public static void deleteFilesIfExist(Iterable<? extends File> files) throws IOException {
+    Throwable th = null;
 
+    for (File file : files) {
+      try {
+        if (file != null) {
+          Files.deleteIfExists(file.toPath());
+        }
+      } catch (Throwable t) {
+        addSuppressed(th, t);
+        if (th == null) {
+          th = t;
+        }
+      }
+    }
+
+    reThrow(th);
+  }
+  
   /**
+   * Deletes one or more files or directories (and everything underneath it).
+   * 
+   * @throws IOException if any of the given files (or their subhierarchy files in case
+   * of directories) cannot be removed.
+   */
+  public static void rm(File... locations) throws IOException {
+    LinkedHashMap<File,Throwable> unremoved = rm(new LinkedHashMap<File,Throwable>(), locations);
+    if (!unremoved.isEmpty()) {
+      StringBuilder b = new StringBuilder("Could not remove the following files (in the order of attempts):\n");
+      for (Map.Entry<File,Throwable> kv : unremoved.entrySet()) {
+        b.append("   ")
+         .append(kv.getKey().getAbsolutePath())
+         .append(": ")
+         .append(kv.getValue())
+         .append("\n");
+      }
+      throw new IOException(b.toString());
+    }
+  }
+
+  private static LinkedHashMap<File,Throwable> rm(LinkedHashMap<File,Throwable> unremoved, File... locations) {
+    if (locations != null) {
+      for (File location : locations) {
+        if (location != null && location.exists()) {
+          if (location.isDirectory()) {
+            rm(unremoved, location.listFiles());
+          }
+  
+          try {
+            Files.delete(location.toPath());
+          } catch (Throwable cause) {
+            unremoved.put(location, cause);
+          }
+        }
+      }
+    }
+    return unremoved;
+  }
+
+  /**
    * Copy one file's contents to another file. The target will be overwritten
    * if it exists. The source must exist.
    */
Index: lucene/core/src/java/org/apache/lucene/util/OfflineSorter.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/OfflineSorter.java	(revision 1622387)
+++ lucene/core/src/java/org/apache/lucene/util/OfflineSorter.java	(working copy)
@@ -31,6 +31,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
+import java.nio.file.Files;
 import java.util.ArrayList;
 import java.util.Comparator;
 import java.util.List;
@@ -223,10 +224,10 @@
     sortInfo = new SortInfo();
     sortInfo.totalTime = System.currentTimeMillis();
 
-    output.delete();
+    Files.deleteIfExists(output.toPath());
 
     ArrayList<File> merges = new ArrayList<>();
-    boolean success2 = false;
+    boolean success3 = false;
     try {
       ByteSequencesReader is = new ByteSequencesReader(input);
       boolean success = false;
@@ -240,11 +241,15 @@
           // Handle intermediate merges.
           if (merges.size() == maxTempFiles) {
             File intermediate = File.createTempFile("sort", "intermediate", tempDirectory);
+            boolean success2 = false;
             try {
               mergePartitions(merges, intermediate);
+              success2 = true;
             } finally {
-              for (File file : merges) {
-                file.delete();
+              if (success2) {
+                IOUtils.deleteFilesIfExist(merges);
+              } else {
+                IOUtils.deleteFilesIgnoringExceptions(merges);
               }
               merges.clear();
               merges.add(intermediate);
@@ -272,14 +277,14 @@
         // otherwise merge the partitions with a priority queue.
         mergePartitions(merges, output);
       }
-      success2 = true;
+      success3 = true;
     } finally {
-      for (File file : merges) {
-        file.delete();
+      if (success3) {
+        IOUtils.deleteFilesIfExist(merges);
+      } else {
+        IOUtils.deleteFilesIgnoringExceptions(merges);
+        IOUtils.deleteFilesIgnoringExceptions(output);
       }
-      if (!success2) {
-        output.delete();
-      }
     }
 
     sortInfo.totalTime = (System.currentTimeMillis() - sortInfo.totalTime); 
Index: lucene/core/src/test/org/apache/lucene/index/TestAtomicUpdate.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestAtomicUpdate.java	(revision 1622387)
+++ lucene/core/src/test/org/apache/lucene/index/TestAtomicUpdate.java	(working copy)
@@ -178,6 +178,6 @@
     directory = newFSDirectory(dirPath);
     runTest(directory);
     directory.close();
-    TestUtil.rm(dirPath);
+    IOUtils.rm(dirPath);
   }
 }
Index: lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader.java	(revision 1622387)
+++ lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader.java	(working copy)
@@ -20,6 +20,7 @@
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.IOException;
+import java.nio.file.Files;
 import java.nio.file.NoSuchFileException;
 import java.util.Collection;
 import java.util.HashSet;
@@ -41,6 +42,7 @@
 import org.apache.lucene.store.NoSuchDirectoryException;
 import org.apache.lucene.util.Bits;
 import org.apache.lucene.util.BytesRef;
+import org.apache.lucene.util.IOUtils;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.TestUtil;
 import org.junit.Assume;
@@ -446,7 +448,7 @@
       dir.close();
 
       // Try to erase the data - this ensures that the writer closed all files
-      TestUtil.rm(dirFile);
+      IOUtils.rm(dirFile);
       dir = newFSDirectory(dirFile);
 
       // Now create the data set again, just as before
@@ -464,7 +466,7 @@
 
       // The following will fail if reader did not close
       // all files
-      TestUtil.rm(dirFile);
+      IOUtils.rm(dirFile);
   }
 
   public void testOpenReaderAfterDelete() throws IOException {
@@ -477,7 +479,7 @@
       // expected
     }
 
-    dirFile.delete();
+    Files.delete(dirFile.toPath());
 
     // Make sure we still get a CorruptIndexException (not NPE):
     try {
@@ -716,7 +718,7 @@
   // good exception
   public void testNoDir() throws Throwable {
     File tempDir = createTempDir("doesnotexist");
-    TestUtil.rm(tempDir);
+    IOUtils.rm(tempDir);
     Directory dir = newFSDirectory(tempDir);
     try {
       DirectoryReader.open(dir);
@@ -1052,7 +1054,7 @@
 
   public void testIndexExistsOnNonExistentDirectory() throws Exception {
     File tempDir = createTempDir("testIndexExistsOnNonExistentDirectory");
-    tempDir.delete();
+    Files.delete(tempDir.toPath());
     Directory dir = newFSDirectory(tempDir);
     assertFalse(DirectoryReader.indexExists(dir));
     dir.close();
Index: lucene/core/src/test/org/apache/lucene/index/TestDoc.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestDoc.java	(revision 1622387)
+++ lucene/core/src/test/org/apache/lucene/index/TestDoc.java	(working copy)
@@ -26,6 +26,7 @@
 import java.io.StringWriter;
 import java.io.Writer;
 import java.nio.charset.StandardCharsets;
+import java.nio.file.Files;
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.HashSet;
@@ -87,7 +88,7 @@
 
         try {
             File f = new File(workDir, name);
-            if (f.exists()) f.delete();
+            Files.deleteIfExists(f.toPath());
 
             fw = new OutputStreamWriter(new FileOutputStream(f), StandardCharsets.UTF_8);
             pw = new PrintWriter(fw);
Index: lucene/core/src/test/org/apache/lucene/index/TestFieldsReader.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestFieldsReader.java	(revision 1622387)
+++ lucene/core/src/test/org/apache/lucene/index/TestFieldsReader.java	(working copy)
@@ -34,6 +34,7 @@
 import org.apache.lucene.store.IOContext;
 import org.apache.lucene.store.IndexInput;
 import org.apache.lucene.store.IndexOutput;
+import org.apache.lucene.util.IOUtils;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.TestUtil;
 import org.junit.AfterClass;
@@ -249,7 +250,7 @@
       reader.close();
       dir.close();
     } finally {
-      TestUtil.rm(indexDir);
+      IOUtils.rm(indexDir);
     }
 
   }
Index: lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash.java	(revision 1622387)
+++ lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash.java	(working copy)
@@ -44,8 +44,6 @@
   public void setUp() throws Exception {
     super.setUp();
     tempDir = createTempDir("jrecrash");
-    tempDir.delete();
-    tempDir.mkdir();
   }
   
   @Override @Nightly
Index: lucene/core/src/test/org/apache/lucene/index/TestNeverDelete.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/index/TestNeverDelete.java	(revision 1622387)
+++ lucene/core/src/test/org/apache/lucene/index/TestNeverDelete.java	(working copy)
@@ -26,6 +26,7 @@
 import org.apache.lucene.document.Field;
 import org.apache.lucene.store.BaseDirectoryWrapper;
 import org.apache.lucene.store.MockDirectoryWrapper;
+import org.apache.lucene.util.IOUtils;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.TestUtil;
 
@@ -107,6 +108,6 @@
     w.close();
     d.close();
 
-    TestUtil.rm(tmpDir);
+    IOUtils.rm(tmpDir);
   }
 }
Index: lucene/core/src/test/org/apache/lucene/store/TestBufferedIndexInput.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/store/TestBufferedIndexInput.java	(revision 1622387)
+++ lucene/core/src/test/org/apache/lucene/store/TestBufferedIndexInput.java	(working copy)
@@ -38,6 +38,7 @@
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.ScoreDoc;
 import org.apache.lucene.search.TermQuery;
+import org.apache.lucene.util.IOUtils;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.TestUtil;
 import org.apache.lucene.util.ArrayUtil;
@@ -279,7 +280,7 @@
         writer.close();
         reader.close();
       } finally {
-        TestUtil.rm(indexDir);
+        IOUtils.rm(indexDir);
       }
     }
 
Index: lucene/core/src/test/org/apache/lucene/store/TestDirectory.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/store/TestDirectory.java	(revision 1622387)
+++ lucene/core/src/test/org/apache/lucene/store/TestDirectory.java	(working copy)
@@ -24,6 +24,7 @@
 import java.util.Arrays;
 import java.util.Collections;
 
+import org.apache.lucene.util.IOUtils;
 import org.apache.lucene.util.TestUtil;
 
 public class TestDirectory extends BaseDirectoryTestCase {
@@ -135,7 +136,7 @@
       assertFalse(dir.isOpen);
     }
     
-    TestUtil.rm(path);
+    IOUtils.rm(path);
   }
 
   // LUCENE-1468
@@ -147,7 +148,7 @@
       Directory fsDir = new SimpleFSDirectory(path, null);
       assertEquals(0, new RAMDirectory(fsDir, newIOContext(random())).listAll().length);
     } finally {
-      TestUtil.rm(path);
+      IOUtils.rm(path);
     }
   }
 
@@ -167,7 +168,7 @@
       }
     } finally {
       fsDir.close();
-      TestUtil.rm(path);
+      IOUtils.rm(path);
     }
   }
 }
Index: lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory.java	(revision 1622387)
+++ lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory.java	(working copy)
@@ -31,6 +31,7 @@
 import org.apache.lucene.index.IndexWriter;
 import org.apache.lucene.index.IndexWriterConfig;
 import org.apache.lucene.index.TestIndexWriterReader;
+import org.apache.lucene.util.IOUtils;
 import org.apache.lucene.util.TestUtil;
 
 public class TestFileSwitchDirectory extends BaseDirectoryTestCase {
@@ -99,8 +100,7 @@
   public void testNoDir() throws Throwable {
     File primDir = createTempDir("foo");
     File secondDir = createTempDir("bar");
-    TestUtil.rm(primDir);
-    TestUtil.rm(secondDir);
+    IOUtils.rm(primDir, secondDir);
     Directory dir = newFSSwitchDirectory(primDir, secondDir, Collections.<String>emptySet());
     try {
       DirectoryReader.open(dir);
Index: lucene/core/src/test/org/apache/lucene/store/TestLockFactory.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/store/TestLockFactory.java	(revision 1622387)
+++ lucene/core/src/test/org/apache/lucene/store/TestLockFactory.java	(working copy)
@@ -19,6 +19,7 @@
 
 import java.io.File;
 import java.io.IOException;
+import java.nio.file.Files;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.Map;
@@ -35,6 +36,7 @@
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.Query;
 import org.apache.lucene.search.TermQuery;
+import org.apache.lucene.util.IOUtils;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.TestUtil;
 
@@ -170,7 +172,7 @@
 
         dir.close();
         // Cleanup
-        TestUtil.rm(indexDir);
+        IOUtils.rm(indexDir);
     }
 
     // Verify: NativeFSLockFactory works correctly
@@ -208,9 +210,7 @@
       assertTrue("failed to obtain lock", l.obtain());
       l.close();
       assertFalse("failed to release lock", l.isLocked());
-      if (lockFile.exists()) {
-        lockFile.delete();
-      }
+      Files.deleteIfExists(lockFile.toPath());
     }
 
     // Verify: NativeFSLockFactory assigns null as lockPrefix if the lockDir is inside directory
@@ -230,8 +230,7 @@
 
       dir1.close();
       dir2.close();
-      TestUtil.rm(fdir1);
-      TestUtil.rm(fdir2);
+      IOUtils.rm(fdir1, fdir2);
     }
 
     // Verify: default LockFactory has no prefix (ie
@@ -253,7 +252,7 @@
       assertNull("Default lock prefix should be null", dir.getLockFactory().getLockPrefix());
       dir.close();
  
-      TestUtil.rm(dirName);
+      IOUtils.rm(dirName);
     }
 
     private class WriterThread extends Thread { 
Index: lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory.java	(revision 1622387)
+++ lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory.java	(working copy)
@@ -78,8 +78,8 @@
       fsDir = newFSDirectory(path);
       assertEquals(0, new RAMDirectory(fsDir, newIOContext(random())).listAll().length);
     } finally {
-      TestUtil.rm(path);
       IOUtils.close(fsDir);
+      IOUtils.rm(path);
     }
   }
 
Index: lucene/core/src/test/org/apache/lucene/store/TestWindowsMMap.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/store/TestWindowsMMap.java	(revision 1622387)
+++ lucene/core/src/test/org/apache/lucene/store/TestWindowsMMap.java	(working copy)
@@ -65,7 +65,6 @@
     // may take some time until the files are finally dereferenced. So clean the
     // directory up front, or otherwise new IndexWriter will fail.
     File dirPath = createTempDir("testLuceneMmap");
-    rmDir(dirPath);
     MMapDirectory dir = new MMapDirectory(dirPath, null);
     
     // plan to add a set of useful stopwords, consider changing some of the
@@ -88,16 +87,5 @@
     
     reader.close();
     writer.close();
-    rmDir(dirPath);
   }
-
-  private void rmDir(File dir) {
-    if (!dir.exists()) {
-      return;
-    }
-    for (File file : dir.listFiles()) {
-      file.delete();
-    }
-    dir.delete();
-  }
 }
Index: lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter.java	(revision 1622387)
+++ lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter.java	(working copy)
@@ -44,14 +44,12 @@
   public void setUp() throws Exception {
     super.setUp();
     tempDir = createTempDir("mergesort");
-    TestUtil.rm(tempDir);
-    tempDir.mkdirs();
   }
   
   @Override
   public void tearDown() throws Exception {
     if (tempDir != null)
-      TestUtil.rm(tempDir);
+      IOUtils.rm(tempDir);
     super.tearDown();
   }
 
Index: lucene/core/src/test/org/apache/lucene/util/junitcompat/TestLeaveFilesIfTestFails.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/util/junitcompat/TestLeaveFilesIfTestFails.java	(revision 1622387)
+++ lucene/core/src/test/org/apache/lucene/util/junitcompat/TestLeaveFilesIfTestFails.java	(working copy)
@@ -20,8 +20,10 @@
 import java.io.File;
 import java.io.IOException;
 import java.io.RandomAccessFile;
+import java.nio.file.Files;
 
 import org.apache.lucene.util.Constants;
+import org.apache.lucene.util.IOUtils;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.TestUtil;
 import org.junit.Assert;
@@ -45,11 +47,11 @@
   }
 
   @Test
-  public void testLeaveFilesIfTestFails() {
+  public void testLeaveFilesIfTestFails() throws IOException {
     Result r = JUnitCore.runClasses(Nested1.class);
     Assert.assertEquals(1, r.getFailureCount());
     Assert.assertTrue(Nested1.file != null && Nested1.file.exists());
-    Nested1.file.delete();
+    Files.delete(Nested1.file.toPath());
   }
   
   public static class Nested2 extends WithNestedTests.AbstractNestedTest {
@@ -75,6 +77,6 @@
     Assert.assertEquals(1, r.getFailureCount());
 
     Nested2.openFile.close();
-    TestUtil.rm(Nested2.parent);
+    IOUtils.rm(Nested2.parent);
   }  
 }
Index: lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter.java
===================================================================
--- lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter.java	(revision 1622387)
+++ lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter.java	(working copy)
@@ -9,6 +9,7 @@
 import java.io.FileNotFoundException;
 import java.io.FileOutputStream;
 import java.io.IOException;
+import java.nio.file.Files;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.concurrent.atomic.AtomicInteger;
@@ -941,9 +942,7 @@
       in.close();
 
       // Delete the temporary file, which is no longer needed.
-      if (!tmpfile.delete()) {
-        tmpfile.deleteOnExit();
-      }
+      Files.delete(tmpfile.toPath());
 
       return map;
     }
Index: lucene/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/TestCharBlockArray.java
===================================================================
--- lucene/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/TestCharBlockArray.java	(revision 1622387)
+++ lucene/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/TestCharBlockArray.java	(working copy)
@@ -96,7 +96,6 @@
     array = CharBlockArray.open(in);
     assertEqualsInternal("GrowingCharArray<->StringBuilder mismatch after flush/load.", builder, array);
     in.close();
-    f.delete();
   }
 
   private static void assertEqualsInternal(String msg, StringBuilder expected, CharBlockArray actual) {
Index: lucene/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/TestCompactLabelToOrdinal.java
===================================================================
--- lucene/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/TestCompactLabelToOrdinal.java	(revision 1622387)
+++ lucene/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/TestCompactLabelToOrdinal.java	(working copy)
@@ -5,6 +5,7 @@
 import java.nio.charset.CharsetDecoder;
 import java.nio.charset.CodingErrorAction;
 import java.nio.charset.StandardCharsets;
+import java.nio.file.Files;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Random;
@@ -76,7 +77,7 @@
       if (i > 0 && i % flushInterval == 0) {
         compact.flush(f);    
         compact = CompactLabelToOrdinal.open(f, 0.15f, 3);
-        assertTrue(f.delete());
+        Files.delete(f.toPath());
         if (flushInterval < (n / 10)) {
           flushInterval *= 10;
         }
Index: lucene/replicator/src/java/org/apache/lucene/replicator/PerSessionDirectoryFactory.java
===================================================================
--- lucene/replicator/src/java/org/apache/lucene/replicator/PerSessionDirectoryFactory.java	(revision 1622387)
+++ lucene/replicator/src/java/org/apache/lucene/replicator/PerSessionDirectoryFactory.java	(working copy)
@@ -23,6 +23,7 @@
 import org.apache.lucene.replicator.ReplicationClient.SourceDirectoryFactory;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.FSDirectory;
+import org.apache.lucene.util.IOUtils;
 
 /**
  * A {@link SourceDirectoryFactory} which returns {@link FSDirectory} under a
@@ -40,19 +41,6 @@
     this.workDir = workDir;
   }
   
-  private void rm(File file) throws IOException {
-    if (file.isDirectory()) {
-      for (File f : file.listFiles()) {
-        rm(f);
-      }
-    }
-    
-    // This should be either an empty directory, or a file
-    if (!file.delete() && file.exists()) {
-      throw new IOException("failed to delete " + file);
-    }
-  }
-  
   @Override
   public Directory getDirectory(String sessionID, String source) throws IOException {
     File sessionDir = new File(workDir, sessionID);
@@ -71,7 +59,7 @@
     if (sessionID.isEmpty()) { // protect against deleting workDir entirely!
       throw new IllegalArgumentException("sessionID cannot be empty");
     }
-    rm(new File(workDir, sessionID));
+    IOUtils.rm(new File(workDir, sessionID));
   }
   
 }
Index: lucene/suggest/src/java/org/apache/lucene/search/suggest/SortedInputIterator.java
===================================================================
--- lucene/suggest/src/java/org/apache/lucene/search/suggest/SortedInputIterator.java	(revision 1622387)
+++ lucene/suggest/src/java/org/apache/lucene/search/suggest/SortedInputIterator.java	(working copy)
@@ -202,13 +202,17 @@
   }
   
   private void close() throws IOException {
-    IOUtils.close(reader);
-    if (tempInput != null) {
-      tempInput.delete();
+    boolean success = false;
+    try {
+      IOUtils.close(reader);
+      success = true;
+    } finally {
+      if (success) {
+        IOUtils.deleteFilesIfExist(tempInput, tempSorted);
+      } else {
+        IOUtils.deleteFilesIgnoringExceptions(tempInput, tempSorted);
+      }
     }
-    if (tempSorted != null) {
-      tempSorted.delete();
-    }
   }
   
   /** encodes an entry (bytes+(contexts)+(payload)+weight) to the provided writer */
Index: lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester.java
===================================================================
--- lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester.java	(revision 1622387)
+++ lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester.java	(working copy)
@@ -19,6 +19,7 @@
 
 import java.io.File;
 import java.io.IOException;
+import java.nio.file.Files;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Comparator;
@@ -500,7 +501,7 @@
       new OfflineSorter(new AnalyzingComparator(hasPayloads)).sort(tempInput, tempSorted);
 
       // Free disk space:
-      tempInput.delete();
+      Files.delete(tempInput.toPath());
 
       reader = new OfflineSorter.ByteSequencesReader(tempSorted);
      
@@ -593,14 +594,13 @@
       
       success = true;
     } finally {
+      IOUtils.closeWhileHandlingException(reader, writer);
+      
       if (success) {
-        IOUtils.close(reader, writer);
+        IOUtils.deleteFilesIfExist(tempInput, tempSorted);
       } else {
-        IOUtils.closeWhileHandlingException(reader, writer);
+        IOUtils.deleteFilesIgnoringExceptions(tempInput, tempSorted);
       }
-      
-      tempInput.delete();
-      tempSorted.delete();
     }
   }
 
Index: lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester.java
===================================================================
--- lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester.java	(revision 1622387)
+++ lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester.java	(working copy)
@@ -376,23 +376,12 @@
     } finally {
       try {
         if (success) {
-          IOUtils.close(reader);
+          IOUtils.close(reader, dir);
         } else {
-          IOUtils.closeWhileHandlingException(reader, writer);
+          IOUtils.closeWhileHandlingException(reader, writer, dir);
         }
       } finally {
-        for(String file : dir.listAll()) {
-          File path = new File(tempIndexPath, file);
-          if (path.delete() == false) {
-            throw new IllegalStateException("failed to remove " + path);
-          }
-        }
-
-        if (tempIndexPath.delete() == false) {
-          throw new IllegalStateException("failed to remove " + tempIndexPath);
-        }
-
-        dir.close();
+        IOUtils.rm(tempIndexPath);
       }
     }
   }
Index: lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/ExternalRefSorter.java
===================================================================
--- lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/ExternalRefSorter.java	(revision 1622387)
+++ lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/ExternalRefSorter.java	(working copy)
@@ -20,6 +20,7 @@
 import java.io.Closeable;
 import java.io.File;
 import java.io.IOException;
+import java.nio.file.Files;
 import java.util.Comparator;
 
 import org.apache.lucene.util.BytesRef;
@@ -61,9 +62,18 @@
       
       sorted = File.createTempFile("RefSorter-", ".sorted",
           OfflineSorter.defaultTempDir());
-      sort.sort(input, sorted);
+      boolean success = false;
+      try {
+        sort.sort(input, sorted);
+        success = true;
+      } finally {
+        if (success) {
+          Files.delete(input.toPath());
+        } else {
+          IOUtils.deleteFilesIgnoringExceptions(input);
+        }
+      }
       
-      input.delete();
       input = null;
     }
     
@@ -82,11 +92,16 @@
    */
   @Override
   public void close() throws IOException {
+    boolean success = false;
     try {
       closeWriter();
+      success = true;
     } finally {
-      if (input != null) input.delete();
-      if (sorted != null) sorted.delete();
+      if (success) {
+        IOUtils.deleteFilesIfExist(input, sorted);
+      } else {
+        IOUtils.deleteFilesIgnoringExceptions(input, sorted);
+      }
     }
   }
   
Index: lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionLookup.java
===================================================================
--- lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionLookup.java	(revision 1622387)
+++ lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionLookup.java	(working copy)
@@ -19,6 +19,7 @@
 
 import java.io.File;
 import java.io.IOException;
+import java.nio.file.Files;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Set;
@@ -189,7 +190,7 @@
       // We don't know the distribution of scores and we need to bucket them, so we'll sort
       // and divide into equal buckets.
       SortInfo info = new OfflineSorter().sort(tempInput, tempSorted);
-      tempInput.delete();
+      Files.delete(tempInput.toPath());
       FSTCompletionBuilder builder = new FSTCompletionBuilder(
           buckets, sorter = new ExternalRefSorter(new OfflineSorter()), sharedTailLength);
 
@@ -231,13 +232,13 @@
       
       success = true;
     } finally {
-      if (success) 
-        IOUtils.close(reader, writer, sorter);
-      else 
-        IOUtils.closeWhileHandlingException(reader, writer, sorter);
+      IOUtils.closeWhileHandlingException(reader, writer, sorter);
 
-      tempInput.delete();
-      tempSorted.delete();
+      if (success) {
+        Files.delete(tempSorted.toPath());
+      } else {
+        IOUtils.deleteFilesIgnoringExceptions(tempInput, tempSorted);
+      }
     }
   }
   
Index: lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase.java	(revision 1622387)
+++ lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase.java	(working copy)
@@ -1356,7 +1356,7 @@
 
     fieldsProducer.close();
     dir.close();
-    TestUtil.rm(path);
+    IOUtils.rm(path);
   }
 
   public void testDocsOnly() throws Exception {
@@ -1405,7 +1405,7 @@
       fieldsProducer = null;
 
       dir.close();
-      TestUtil.rm(path);
+      IOUtils.rm(path);
     }
   }
   
Index: lucene/test-framework/src/java/org/apache/lucene/index/ThreadedIndexingAndSearchingTestCase.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/index/ThreadedIndexingAndSearchingTestCase.java	(revision 1622387)
+++ lucene/test-framework/src/java/org/apache/lucene/index/ThreadedIndexingAndSearchingTestCase.java	(working copy)
@@ -42,6 +42,7 @@
 import org.apache.lucene.util.Bits;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.FailOnNonBulkMergesInfoStream;
+import org.apache.lucene.util.IOUtils;
 import org.apache.lucene.util.LineFileDocs;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.NamedThreadFactory;
@@ -653,7 +654,7 @@
 
     TestUtil.checkIndex(dir);
     dir.close();
-    TestUtil.rm(tempDir);
+    IOUtils.rm(tempDir);
 
     if (VERBOSE) {
       System.out.println("TEST: done [" + (System.currentTimeMillis()-t0) + " ms]");
Index: lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase.java	(revision 1622387)
+++ lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase.java	(working copy)
@@ -21,6 +21,7 @@
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.IOException;
+import java.nio.file.Files;
 import java.nio.file.NoSuchFileException;
 import java.util.Arrays;
 import java.util.Collections;
@@ -453,7 +454,7 @@
    *  mkdir the underling directory in the filesystem. */
   public void testDontCreate() throws Throwable {
     File path = createTempDir("doesnotexist");
-    TestUtil.rm(path);
+    IOUtils.rm(path);
     assertTrue(!path.exists());
     Directory dir = getDirectory(path);
     assertTrue(!path.exists());
@@ -559,7 +560,7 @@
   // LUCENE-3382 -- make sure we get exception if the directory really does not exist.
   public void testNoDir() throws Throwable {
     File tempDir = createTempDir("doesnotexist");
-    TestUtil.rm(tempDir);
+    IOUtils.rm(tempDir);
     Directory dir = getDirectory(tempDir);
     try {
       DirectoryReader.open(dir);
@@ -767,7 +768,7 @@
     out.close();
     
     // delete it
-    assertTrue(new File(path, "afile").delete());
+    Files.delete(new File(path, "afile").toPath());
     
     // directory is empty
     assertEquals(0, fsdir.listAll().length);
Index: lucene/test-framework/src/java/org/apache/lucene/util/RemoveUponClose.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/util/RemoveUponClose.java	(revision 1622387)
+++ lucene/test-framework/src/java/org/apache/lucene/util/RemoveUponClose.java	(working copy)
@@ -46,7 +46,7 @@
     if (failureMarker.wasSuccessful()) {
       if (file.exists()) {
         try {
-          TestUtil.rm(file);
+          IOUtils.rm(file);
         } catch (IOException e) {
           throw new IOException(
               "Could not remove temporary location '" 
Index: lucene/test-framework/src/java/org/apache/lucene/util/TestRuleTemporaryFilesCleanup.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/util/TestRuleTemporaryFilesCleanup.java	(revision 1622387)
+++ lucene/test-framework/src/java/org/apache/lucene/util/TestRuleTemporaryFilesCleanup.java	(working copy)
@@ -122,7 +122,7 @@
     // and leave them there.
     if (failureMarker.wasSuccessful()) {
       try {
-        TestUtil.rm(everything);
+        IOUtils.rm(everything);
       } catch (IOException e) {
         Class<?> suiteClass = RandomizedContext.current().getTargetClass();
         if (suiteClass.isAnnotationPresent(SuppressTempFileChecks.class)) {
Index: lucene/test-framework/src/java/org/apache/lucene/util/TestUtil.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/util/TestUtil.java	(revision 1622387)
+++ lucene/test-framework/src/java/org/apache/lucene/util/TestUtil.java	(working copy)
@@ -28,10 +28,11 @@
 import java.math.BigDecimal;
 import java.math.BigInteger;
 import java.nio.CharBuffer;
+import java.nio.file.Files;
 import java.util.Arrays;
 import java.util.Enumeration;
 import java.util.HashMap;
-import java.util.LinkedHashSet;
+import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Random;
@@ -99,48 +100,12 @@
     //
   }
 
-  /**
-   * Deletes one or more files or directories (and everything underneath it).
-   * 
-   * @throws IOException if any of the given files (or their subhierarchy files in case
-   * of directories) cannot be removed.
-   */
-  public static void rm(File... locations) throws IOException {
-    LinkedHashSet<File> unremoved = rm(new LinkedHashSet<File>(), locations);
-    if (!unremoved.isEmpty()) {
-      StringBuilder b = new StringBuilder("Could not remove the following files (in the order of attempts):\n");
-      for (File f : unremoved) {
-        b.append("   ")
-         .append(f.getAbsolutePath())
-         .append("\n");
-      }
-      throw new IOException(b.toString());
-    }
-  }
-
-  private static LinkedHashSet<File> rm(LinkedHashSet<File> unremoved, File... locations) {
-    if (locations != null) {
-      for (File location : locations) {
-        if (location != null && location.exists()) {
-          if (location.isDirectory()) {
-            rm(unremoved, location.listFiles());
-          }
-  
-          if (!location.delete()) {
-            unremoved.add(location);
-          }
-        }
-      }
-    }
-    return unremoved;
-  }
-
   /** 
    * Convenience method unzipping zipName into destDir, cleaning up 
    * destDir first. 
    */
   public static void unzip(File zipName, File destDir) throws IOException {
-    rm(destDir);
+    IOUtils.rm(destDir);
     destDir.mkdir();
 
     ZipFile zipFile = new ZipFile(zipName);
Index: lucene/tools/forbiddenApis/base.txt
===================================================================
--- lucene/tools/forbiddenApis/base.txt	(revision 1622387)
+++ lucene/tools/forbiddenApis/base.txt	(working copy)
@@ -29,3 +29,5 @@
 
 java.lang.Character#codePointBefore(char[],int) @ Implicit start offset is error-prone when the char[] is a buffer and the first chars are random chars
 java.lang.Character#codePointAt(char[],int) @ Implicit end offset is error-prone when the char[] is a buffer and the last chars are random chars
+
+java.io.File#delete() @ use Files.delete for real exception, IOUtils.deleteFilesIgnoringExceptions if you dont care
Index: solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractSqlEntityProcessorTestCase.java
===================================================================
--- solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractSqlEntityProcessorTestCase.java	(revision 1622387)
+++ solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractSqlEntityProcessorTestCase.java	(working copy)
@@ -1,6 +1,7 @@
 package org.apache.solr.handler.dataimport;
 
 import java.io.File;
+import java.nio.file.Files;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
@@ -60,7 +61,7 @@
   } 
   
   @After
-  public void afterSqlEntitiyProcessorTestCase() {
+  public void afterSqlEntitiyProcessorTestCase() throws Exception {
     useSimpleCaches = false;
     countryEntity = false;
     countryCached = false;
@@ -74,8 +75,8 @@
     //If an Assume was tripped while setting up the test, 
     //the file might not ever have been created...
     if(fileLocation!=null) {
-      new File(fileLocation + File.separatorChar + fileName).delete();
-      new File(fileLocation).delete();
+      Files.deleteIfExists(new File(fileLocation + File.separatorChar + fileName).toPath());
+      Files.deleteIfExists(new File(fileLocation).toPath());
     }
   }
   
Index: solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor.java
===================================================================
--- solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor.java	(revision 1622387)
+++ solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor.java	(working copy)
@@ -24,6 +24,7 @@
 import java.io.File;
 import java.io.IOException;
 import java.nio.charset.StandardCharsets;
+import java.nio.file.Files;
 import java.text.SimpleDateFormat;
 import java.util.*;
 
@@ -65,7 +66,7 @@
   @Test
   public void testBiggerSmallerFiles() throws IOException {
     File tmpdir = File.createTempFile("test", "tmp", createTempDir());
-    tmpdir.delete();
+    Files.delete(tmpdir.toPath());
     tmpdir.mkdir();
 
     long minLength = Long.MAX_VALUE;
Index: solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestNonWritablePersistFile.java
===================================================================
--- solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestNonWritablePersistFile.java	(revision 1622387)
+++ solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestNonWritablePersistFile.java	(working copy)
@@ -17,6 +17,7 @@
 package org.apache.solr.handler.dataimport;
 
 import java.io.File;
+import java.nio.file.Files;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -69,30 +70,26 @@
     filePath += "dataimport.properties";
     File f = new File(filePath);
 
-    try {
-      // execute the test only if we are able to set file to read only mode
-      assumeTrue("No dataimport.properties file", f.exists() || f.createNewFile());
-      assumeTrue("dataimport.properties can't be set read only", f.setReadOnly());
-      assumeFalse("dataimport.properties is still writable even though " + 
-                  "marked readonly - test running as superuser?", f.canWrite());
+    // execute the test only if we are able to set file to read only mode
+    assumeTrue("No dataimport.properties file", f.exists() || f.createNewFile());
+    assumeTrue("dataimport.properties can't be set read only", f.setReadOnly());
+    assumeFalse("dataimport.properties is still writable even though " + 
+                "marked readonly - test running as superuser?", f.canWrite());
 
-      ignoreException("Properties is not writable");
+    ignoreException("Properties is not writable");
 
-      @SuppressWarnings("rawtypes")
-      List parentRow = new ArrayList();
-      parentRow.add(createMap("id", "1"));
-      MockDataSource.setIterator(FULLIMPORT_QUERY, parentRow.iterator());
+    @SuppressWarnings("rawtypes")
+    List parentRow = new ArrayList();
+    parentRow.add(createMap("id", "1"));
+    MockDataSource.setIterator(FULLIMPORT_QUERY, parentRow.iterator());
       
-      @SuppressWarnings("rawtypes")
-      List childRow = new ArrayList();
-      childRow.add(createMap("desc", "hello"));
-      MockDataSource.setIterator("select * from y where y.A='1'",
-                                 childRow.iterator());
+    @SuppressWarnings("rawtypes")
+    List childRow = new ArrayList();
+    childRow.add(createMap("desc", "hello"));
+    MockDataSource.setIterator("select * from y where y.A='1'",
+                               childRow.iterator());
       
-      runFullImport(dataConfig_delta);
-      assertQ(req("id:1"), "//*[@numFound='0']");
-    } finally {
-      f.delete();
-    }
+    runFullImport(dataConfig_delta);
+    assertQ(req("id:1"), "//*[@numFound='0']");
   }  
 }
Index: solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd.java
===================================================================
--- solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd.java	(revision 1622387)
+++ solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd.java	(working copy)
@@ -26,6 +26,7 @@
 import java.util.Map.Entry;
 
 import org.apache.commons.io.FileUtils;
+import org.apache.lucene.util.IOUtils;
 import org.apache.lucene.util.TestUtil;
 import org.apache.solr.client.solrj.SolrServerException;
 import org.apache.solr.client.solrj.embedded.JettySolrRunner;
@@ -335,7 +336,7 @@
     }
 
     public void tearDown() throws Exception {
-      TestUtil.rm(homeDir);
+      IOUtils.rm(homeDir);
     }
   }
   
Index: solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/SolrOutputFormat.java
===================================================================
--- solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/SolrOutputFormat.java	(revision 1622387)
+++ solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/SolrOutputFormat.java	(working copy)
@@ -23,6 +23,7 @@
 import java.io.InputStream;
 import java.net.URI;
 import java.nio.charset.StandardCharsets;
+import java.nio.file.Files;
 import java.util.Arrays;
 import java.util.HashSet;
 import java.util.Locale;
@@ -224,7 +225,7 @@
                                    // to store in the zip file
     }
 
-    out.delete();
+    Files.deleteIfExists(out.toPath());
     int subst = dir.toString().length();
     ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(out));
     byte[] buf = new byte[1024];
Index: solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MRUnitBase.java
===================================================================
--- solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MRUnitBase.java	(revision 1622387)
+++ solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MRUnitBase.java	(working copy)
@@ -18,6 +18,7 @@
 
 import java.io.File;
 import java.io.IOException;
+import java.nio.file.Files;
 import java.util.Locale;
 
 import org.apache.commons.io.FileUtils;
@@ -44,7 +45,7 @@
 
   @AfterClass
   public static void teardownClass() throws Exception {
-    if (solrHomeZip != null) solrHomeZip.delete();
+    if (solrHomeZip != null) Files.delete(solrHomeZip.toPath());
   }
   
   protected void setupHadoopConfig(Configuration config) throws IOException {
Index: solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/FileUtils.java
===================================================================
--- solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/FileUtils.java	(revision 1622387)
+++ solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/FileUtils.java	(working copy)
@@ -19,6 +19,7 @@
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.IOException;
+import java.nio.file.Files;
 
 
 class FileUtils {
@@ -39,11 +40,7 @@
           cleanDirectory(directory);
       }
 
-      if (!directory.delete()) {
-          String message =
-              "Unable to delete directory " + directory + ".";
-          throw new IOException(message);
-      }
+      Files.delete(directory.toPath());
   }
 
   /**
@@ -136,15 +133,7 @@
       if (file.isDirectory()) {
           deleteDirectory(file);
       } else {
-          boolean filePresent = file.exists();
-          if (!file.delete()) {
-              if (!filePresent){
-                  throw new FileNotFoundException("File does not exist: " + file);
-              }
-              String message =
-                  "Unable to delete file: " + file;
-              throw new IOException(message);
-          }
+          Files.delete(file.toPath());
       }
   }
 
Index: solr/core/src/java/org/apache/solr/handler/PingRequestHandler.java
===================================================================
--- solr/core/src/java/org/apache/solr/handler/PingRequestHandler.java	(revision 1622387)
+++ solr/core/src/java/org/apache/solr/handler/PingRequestHandler.java	(working copy)
@@ -19,6 +19,7 @@
 
 import java.io.File;
 import java.io.IOException;
+import java.nio.file.Files;
 import java.util.Date;
 import java.util.Locale;
 
@@ -280,10 +281,12 @@
                                 "Unable to write healthcheck flag file", e);
       }
     } else {
-      if (healthcheck.exists() && !healthcheck.delete()){
+      try {
+        Files.deleteIfExists(healthcheck.toPath());
+      } catch (Throwable cause) {
         throw new SolrException(SolrException.ErrorCode.NOT_FOUND,
                                 "Did not successfully delete healthcheck file: "
-                                +healthcheck.getAbsolutePath());
+                                +healthcheck.getAbsolutePath(), cause);
       }
     }
   }
Index: solr/core/src/java/org/apache/solr/handler/SnapPuller.java
===================================================================
--- solr/core/src/java/org/apache/solr/handler/SnapPuller.java	(revision 1622387)
+++ solr/core/src/java/org/apache/solr/handler/SnapPuller.java	(working copy)
@@ -27,6 +27,7 @@
 import java.nio.ByteBuffer;
 import java.nio.channels.FileChannel;
 import java.nio.charset.StandardCharsets;
+import java.nio.file.Files;
 import java.nio.file.NoSuchFileException;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
@@ -1021,28 +1022,30 @@
     return nameVsFile.isEmpty() ? Collections.EMPTY_LIST : nameVsFile.values();
   }
   
+  /** 
+   * This simulates File.delete exception-wise, since this class has some strange behavior with it.
+   * The only difference is it returns null on success, throws SecurityException on SecurityException, 
+   * otherwise returns Throwable preventing deletion (instead of false), for additional information.
+   */
+  static Throwable delete(File file) {
+    try {
+      Files.delete(file.toPath());
+      return null;
+    } catch (SecurityException e) {
+      throw e;
+    } catch (Throwable other) {
+      return other;
+    }
+  }
+  
   static boolean delTree(File dir) {
-    boolean isSuccess = true;
-    File contents[] = dir.listFiles();
-    if (contents != null) {
-      for (File file : contents) {
-        if (file.isDirectory()) {
-          boolean success = delTree(file);
-          if (!success) {
-            LOG.warn("Unable to delete directory : " + file);
-            isSuccess = false;
-          }
-        } else {
-          boolean success = file.delete();
-          if (!success) {
-            LOG.warn("Unable to delete file : " + file);
-            isSuccess = false;
-            return false;
-          }
-        }
-      }
+    try {
+      org.apache.lucene.util.IOUtils.rm(dir);
+      return true;
+    } catch (IOException e) {
+      LOG.warn("Unable to delete directory : " + dir, e);
+      return false;
     }
-    return isSuccess && dir.delete();
   }
 
   /**
@@ -1574,9 +1577,12 @@
         //if the download is not complete then
         //delete the file being downloaded
         try {
-          file.delete();
-        } catch (Exception e) {
+          Files.delete(file.toPath());
+        } catch (SecurityException e) {
           LOG.error("Error deleting file in cleanup" + e.getMessage());
+        } catch (Throwable other) {
+          // TODO: should this class care if a file couldnt be deleted?
+          // this just emulates previous behavior, where only SecurityException would be handled.
         }
         //if the failure is due to a user abort it is returned nomally else an exception is thrown
         if (!aborted)
Index: solr/core/src/java/org/apache/solr/rest/ManagedResourceStorage.java
===================================================================
--- solr/core/src/java/org/apache/solr/rest/ManagedResourceStorage.java	(revision 1622387)
+++ solr/core/src/java/org/apache/solr/rest/ManagedResourceStorage.java	(working copy)
@@ -30,6 +30,7 @@
 import java.io.Reader;
 import java.nio.charset.Charset;
 import java.nio.charset.StandardCharsets;
+import java.nio.file.Files;
 import java.util.HashMap;
 import java.util.Locale;
 import java.util.Map;
@@ -183,8 +184,22 @@
     @Override
     public boolean delete(String storedResourceId) throws IOException {
       File storedFile = new File(storageDir, storedResourceId);
-      return storedFile.isFile() ? storedFile.delete() : false;
+      return deleteIfFile(storedFile);
     }
+    
+    // TODO: this interface should probably be changed, this simulates the old behavior,
+    // only throw security exception, just return false otherwise
+    private boolean deleteIfFile(File f) {
+      if (!f.isFile()) {
+        return false;
+      }
+      try {
+        Files.delete(f.toPath());
+        return true;
+      } catch (IOException cause) {
+        return false;
+      }
+    }
 
     @Override
     public String getInfo() {
Index: solr/core/src/java/org/apache/solr/update/TransactionLog.java
===================================================================
--- solr/core/src/java/org/apache/solr/update/TransactionLog.java	(revision 1622387)
+++ solr/core/src/java/org/apache/solr/update/TransactionLog.java	(working copy)
@@ -24,6 +24,7 @@
 import java.nio.ByteBuffer;
 import java.nio.channels.Channels;
 import java.nio.channels.FileChannel;
+import java.nio.file.Files;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.HashMap;
@@ -543,7 +544,12 @@
       }
 
       if (deleteOnClose) {
-        tlogFile.delete();
+        try {
+          Files.deleteIfExists(tlogFile.toPath());
+        } catch (IOException e) {
+          // TODO: should this class care if a file couldnt be deleted?
+          // this just emulates previous behavior, where only SecurityException would be handled.
+        }
       }
     } catch (IOException e) {
       throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);
Index: solr/core/src/java/org/apache/solr/update/UpdateLog.java
===================================================================
--- solr/core/src/java/org/apache/solr/update/UpdateLog.java	(revision 1622387)
+++ solr/core/src/java/org/apache/solr/update/UpdateLog.java	(working copy)
@@ -24,6 +24,7 @@
 import java.io.FileNotFoundException;
 import java.io.FilenameFilter;
 import java.io.IOException;
+import java.nio.file.Files;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
@@ -1444,10 +1445,8 @@
   public static void deleteFile(File file) {
     boolean success = false;
     try {
-      success = file.delete();
-      if (!success) {
-        log.error("Error deleting file: " + file);
-      }
+      Files.deleteIfExists(file.toPath());
+      success = true;
     } catch (Exception e) {
       log.error("Error deleting file: " + file, e);
     }
@@ -1489,9 +1488,11 @@
       String[] files = getLogList(tlogDir);
       for (String file : files) {
         File f = new File(tlogDir, file);
-        boolean s = f.delete();
-        if (!s) {
-          log.error("Could not remove tlog file:" + f);
+        try {
+          Files.delete(f.toPath());
+        } catch (IOException cause) {
+          // NOTE: still throws SecurityException as before.
+          log.error("Could not remove tlog file:" + f, cause);
         }
       }
     }
Index: solr/core/src/java/org/apache/solr/util/VersionedFile.java
===================================================================
--- solr/core/src/java/org/apache/solr/util/VersionedFile.java	(revision 1622387)
+++ solr/core/src/java/org/apache/solr/util/VersionedFile.java	(working copy)
@@ -21,7 +21,9 @@
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
 import java.io.FilenameFilter;
+import java.io.IOException;
 import java.io.InputStream;
+import java.nio.file.Files;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
@@ -95,7 +97,12 @@
       List<File> deleted = new ArrayList<>();
       for (File df : deleteList) {
         try {
-          df.delete();
+          try {
+            Files.deleteIfExists(df.toPath());
+          } catch (IOException cause) {
+            // TODO: should this class care if a file couldnt be deleted?
+            // this just emulates previous behavior, where only SecurityException would be handled.
+          }
           // deleteList.remove(df);
           deleted.add(df);
         } catch (SecurityException e) {
Index: solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test.java
===================================================================
--- solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test.java	(revision 1622387)
+++ solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test.java	(working copy)
@@ -26,6 +26,7 @@
 
 import org.apache.http.client.methods.HttpGet;
 import org.apache.http.impl.client.BasicResponseHandler;
+import org.apache.lucene.util.IOUtils;
 import org.apache.lucene.util.TestUtil;
 import org.apache.solr.SolrTestCaseJ4.SuppressSSL;
 import org.apache.solr.client.solrj.SolrQuery;
@@ -487,7 +488,7 @@
     assertEquals(Arrays.asList(files).toString(), 1, files.length);
     File snapDir = files[0];
     
-    TestUtil.rm(snapDir);
+    IOUtils.rm(snapDir);
   }
   
   private void addNewReplica() throws Exception {
Index: solr/core/src/test/org/apache/solr/core/ResourceLoaderTest.java
===================================================================
--- solr/core/src/test/org/apache/solr/core/ResourceLoaderTest.java	(revision 1622387)
+++ solr/core/src/test/org/apache/solr/core/ResourceLoaderTest.java	(working copy)
@@ -22,6 +22,7 @@
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.core.KeywordTokenizerFactory;
 import org.apache.lucene.analysis.ngram.NGramFilterFactory;
+import org.apache.lucene.util.IOUtils;
 import org.apache.lucene.util.TestUtil;
 import org.apache.solr.SolrTestCaseJ4;
 import org.apache.solr.common.SolrException;
@@ -76,7 +77,7 @@
       }
       loader.close();
     } finally {
-      TestUtil.rm(temp);
+      IOUtils.rm(temp);
     }
   }
 
Index: solr/core/src/test/org/apache/solr/core/SolrCoreCheckLockOnStartupTest.java
===================================================================
--- solr/core/src/test/org/apache/solr/core/SolrCoreCheckLockOnStartupTest.java	(revision 1622387)
+++ solr/core/src/test/org/apache/solr/core/SolrCoreCheckLockOnStartupTest.java	(working copy)
@@ -28,6 +28,7 @@
 import org.junit.Test;
 
 import java.io.File;
+import java.nio.file.Files;
 import java.util.Map;
 
 public class SolrCoreCheckLockOnStartupTest extends SolrTestCaseJ4 {
@@ -41,7 +42,7 @@
     // test tests native and simple in the same jvm in the same exact directory:
     // the file will remain after the native test (it cannot safely be deleted without the risk of deleting another guys lock)
     // its ok, these aren't "compatible" anyway: really this test should not re-use the same directory at all.
-    new File(new File(initCoreDataDir, "index"), IndexWriter.WRITE_LOCK_NAME).delete();
+    Files.deleteIfExists(new File(new File(initCoreDataDir, "index"), IndexWriter.WRITE_LOCK_NAME).toPath());
   }
 
   @Test
Index: solr/core/src/test/org/apache/solr/core/TestArbitraryIndexDir.java
===================================================================
--- solr/core/src/test/org/apache/solr/core/TestArbitraryIndexDir.java	(revision 1622387)
+++ solr/core/src/test/org/apache/solr/core/TestArbitraryIndexDir.java	(working copy)
@@ -132,6 +132,5 @@
         "*[count(//doc)=1]"
     );
     dir.close();
-    newDir.delete();
   }
 }
Index: solr/core/src/test/org/apache/solr/handler/TestCSVLoader.java
===================================================================
--- solr/core/src/test/org/apache/solr/handler/TestCSVLoader.java	(revision 1622387)
+++ solr/core/src/test/org/apache/solr/handler/TestCSVLoader.java	(working copy)
@@ -30,6 +30,7 @@
 
 import java.io.*;
 import java.nio.charset.StandardCharsets;
+import java.nio.file.Files;
 import java.util.List;
 import java.util.ArrayList;
 
@@ -62,7 +63,7 @@
     // if you override setUp or tearDown, you better call
     // the super classes version
     super.tearDown();
-    deleteFile();
+    Files.delete(file.toPath());
   }
 
   void makeFile(String contents) {
@@ -75,10 +76,6 @@
     }
   }
 
-  void deleteFile() {
-    file.delete();
-  }
-
   void cleanup() {
     assertU(delQ("*:*"));
     assertU(commit());
Index: solr/core/src/test/org/apache/solr/handler/TestReplicationHandler.java
===================================================================
--- solr/core/src/test/org/apache/solr/handler/TestReplicationHandler.java	(revision 1622387)
+++ solr/core/src/test/org/apache/solr/handler/TestReplicationHandler.java	(working copy)
@@ -34,6 +34,7 @@
 import java.util.Date;
 import java.util.Set;
 
+import org.apache.lucene.util.IOUtils;
 import org.apache.lucene.util.LuceneTestCase.Slow;
 import org.apache.lucene.util.TestUtil;
 import org.apache.solr.BaseDistributedSearchTestCase;
@@ -1437,7 +1438,7 @@
     }
 
     public void tearDown() throws Exception {
-      TestUtil.rm(homeDir);
+      IOUtils.rm(homeDir);
     }
 
     public void copyConfigFile(String srcFile, String destFile) 
Index: solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup.java
===================================================================
--- solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup.java	(revision 1622387)
+++ solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup.java	(working copy)
@@ -214,7 +214,7 @@
 
     } finally {
       if(!namedBackup) {
-        TestUtil.rm(snapDir);
+        org.apache.lucene.util.IOUtils.rm(snapDir);
       }
     }
   }
Index: solr/core/src/test/org/apache/solr/schema/TestCollationField.java
===================================================================
--- solr/core/src/test/org/apache/solr/schema/TestCollationField.java	(revision 1622387)
+++ solr/core/src/test/org/apache/solr/schema/TestCollationField.java	(working copy)
@@ -64,8 +64,6 @@
   public static String setupSolrHome() throws Exception {
     // make a solr home underneath the test's TEMP_DIR
     File tmpFile = createTempDir("collation1");
-    tmpFile.delete();
-    tmpFile.mkdir();
     
     // make data and conf dirs
     new File(tmpFile, "data").mkdir();
Index: solr/core/src/test/org/apache/solr/schema/TestCollationFieldDocValues.java
===================================================================
--- solr/core/src/test/org/apache/solr/schema/TestCollationFieldDocValues.java	(revision 1622387)
+++ solr/core/src/test/org/apache/solr/schema/TestCollationFieldDocValues.java	(working copy)
@@ -62,8 +62,6 @@
   public static String setupSolrHome() throws Exception {
     // make a solr home underneath the test's TEMP_DIR
     File tmpFile = createTempDir("collation1");
-    tmpFile.delete();
-    tmpFile.mkdir();
     
     // make data and conf dirs
     new File(tmpFile, "data").mkdir();
Index: solr/core/src/test/org/apache/solr/schema/TestManagedSchema.java
===================================================================
--- solr/core/src/test/org/apache/solr/schema/TestManagedSchema.java	(revision 1622387)
+++ solr/core/src/test/org/apache/solr/schema/TestManagedSchema.java	(working copy)
@@ -18,6 +18,7 @@
 
 import java.io.File;
 import java.io.FileInputStream;
+import java.nio.file.Files;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.Map;
@@ -163,7 +164,7 @@
     assertSchemaResource(collection, "managed-schema");
     deleteCore();
     File managedSchemaFile = new File(tmpConfDir, "managed-schema");
-    assertTrue(managedSchemaFile.delete()); // Delete managed-schema so it won't block parsing a new schema
+    Files.delete(managedSchemaFile.toPath()); // Delete managed-schema so it won't block parsing a new schema
 
     System.setProperty("managed.schema.mutable", "true");
     initCore("solrconfig-managed-schema.xml", "schema-one-field-no-dynamic-field.xml", tmpSolrHome.getPath());
@@ -192,7 +193,7 @@
     assertSchemaResource(collection, "managed-schema");
     deleteCore();
     File managedSchemaFile = new File(tmpConfDir, "managed-schema");
-    assertTrue(managedSchemaFile.delete()); // Delete managed-schema so it won't block parsing a new schema
+    Files.delete(managedSchemaFile.toPath()); // Delete managed-schema so it won't block parsing a new schema
     System.setProperty("managed.schema.mutable", "true");
     initCore("solrconfig-managed-schema.xml", "schema-one-field-no-dynamic-field.xml", tmpSolrHome.getPath());
 
@@ -239,7 +240,7 @@
   public void testAddFieldWhenItAlreadyExists() throws Exception{
     deleteCore();
     File managedSchemaFile = new File(tmpConfDir, "managed-schema");
-    assertTrue(managedSchemaFile.delete()); // Delete managed-schema so it won't block parsing a new schema
+    Files.delete(managedSchemaFile.toPath()); // Delete managed-schema so it won't block parsing a new schema
     System.setProperty("managed.schema.mutable", "true");
     initCore("solrconfig-managed-schema.xml", "schema-one-field-no-dynamic-field.xml", tmpSolrHome.getPath());
 
@@ -272,7 +273,7 @@
   public void testAddSameFieldTwice() throws Exception{
     deleteCore();
     File managedSchemaFile = new File(tmpConfDir, "managed-schema");
-    assertTrue(managedSchemaFile.delete()); // Delete managed-schema so it won't block parsing a new schema
+    Files.delete(managedSchemaFile.toPath()); // Delete managed-schema so it won't block parsing a new schema
     System.setProperty("managed.schema.mutable", "true");
     initCore("solrconfig-managed-schema.xml", "schema-one-field-no-dynamic-field.xml", tmpSolrHome.getPath());
 
@@ -307,7 +308,7 @@
   public void testAddDynamicField() throws Exception{
     deleteCore();
     File managedSchemaFile = new File(tmpConfDir, "managed-schema");
-    assertTrue(managedSchemaFile.delete()); // Delete managed-schema so it won't block parsing a new schema
+    Files.delete(managedSchemaFile.toPath()); // Delete managed-schema so it won't block parsing a new schema
     System.setProperty("managed.schema.mutable", "true");
     initCore("solrconfig-managed-schema.xml", "schema-one-field-no-dynamic-field.xml", tmpSolrHome.getPath());
 
@@ -340,7 +341,7 @@
   public void testAddWithSchemaCodecFactory() throws Exception {
     deleteCore();
     File managedSchemaFile = new File(tmpConfDir, "managed-schema");
-    assertTrue(managedSchemaFile.delete()); // Delete managed-schema so it won't block parsing a new schema
+    Files.delete(managedSchemaFile.toPath()); // Delete managed-schema so it won't block parsing a new schema
     System.setProperty("managed.schema.mutable", "true");
     initCore("solrconfig-managed-schema.xml", "schema_codec.xml", tmpSolrHome.getPath());
 
@@ -368,7 +369,7 @@
   public void testAddWithSchemaSimilarityFactory() throws Exception {
     deleteCore();
     File managedSchemaFile = new File(tmpConfDir, "managed-schema");
-    assertTrue(managedSchemaFile.delete()); // Delete managed-schema so it won't block parsing a new schema
+    Files.delete(managedSchemaFile.toPath()); // Delete managed-schema so it won't block parsing a new schema
     System.setProperty("managed.schema.mutable", "true");
     initCore("solrconfig-managed-schema.xml", "schema-bm25.xml", tmpSolrHome.getPath());
 
@@ -397,7 +398,7 @@
     assertSchemaResource(collection, "managed-schema");
     deleteCore();
     File managedSchemaFile = new File(tmpConfDir, "managed-schema");
-    assertTrue(managedSchemaFile.delete()); // Delete managed-schema so it won't block parsing a new schema
+    Files.delete(managedSchemaFile.toPath()); // Delete managed-schema so it won't block parsing a new schema
     System.setProperty("managed.schema.mutable", "true");
     initCore("solrconfig-managed-schema.xml", "schema-one-field-no-dynamic-field-unique-key.xml", tmpSolrHome.getPath());
 
@@ -433,7 +434,7 @@
   public void testAddFieldThenReload() throws Exception {
     deleteCore();
     File managedSchemaFile = new File(tmpConfDir, "managed-schema");
-    assertTrue(managedSchemaFile.delete()); // Delete managed-schema so it won't block parsing a new schema
+    Files.delete(managedSchemaFile.toPath()); // Delete managed-schema so it won't block parsing a new schema
     System.setProperty("managed.schema.mutable", "true");
     initCore("solrconfig-managed-schema.xml", "schema-one-field-no-dynamic-field.xml", tmpSolrHome.getPath());
 
Index: solr/core/src/test/org/apache/solr/search/TestRecovery.java
===================================================================
--- solr/core/src/test/org/apache/solr/search/TestRecovery.java	(revision 1622387)
+++ solr/core/src/test/org/apache/solr/search/TestRecovery.java	(working copy)
@@ -34,6 +34,7 @@
 import java.io.File;
 import java.io.RandomAccessFile;
 import java.nio.charset.StandardCharsets;
+import java.nio.file.Files;
 import java.util.ArrayDeque;
 import java.util.Arrays;
 import java.util.Deque;
@@ -762,7 +763,7 @@
 
       String[] files = ulog.getLogList(logDir);
       for (String file : files) {
-        new File(logDir, file).delete();
+        Files.delete(new File(logDir, file).toPath());
       }
 
       assertEquals(0, ulog.getLogList(logDir).length);
@@ -1094,7 +1095,7 @@
     try {
       String[] files = ulog.getLogList(logDir);
       for (String file : files) {
-        new File(logDir, file).delete();
+        Files.delete(new File(logDir, file).toPath());
       }
 
       assertEquals(0, ulog.getLogList(logDir).length);
Index: solr/core/src/test/org/apache/solr/servlet/CacheHeaderTest.java
===================================================================
--- solr/core/src/test/org/apache/solr/servlet/CacheHeaderTest.java	(revision 1622387)
+++ solr/core/src/test/org/apache/solr/servlet/CacheHeaderTest.java	(working copy)
@@ -23,6 +23,7 @@
 import java.io.OutputStreamWriter;
 import java.io.Writer;
 import java.nio.charset.StandardCharsets;
+import java.nio.file.Files;
 import java.util.Arrays;
 import java.util.Date;
 
@@ -64,7 +65,7 @@
     HttpResponse response = getClient().execute(m);
     assertEquals(200, response.getStatusLine().getStatusCode());
     checkVetoHeaders(response, true);
-    f.delete();
+    Files.delete(f.toPath());
   }
   
   @Test
Index: solr/core/src/test/org/apache/solr/store/blockcache/BlockDirectoryTest.java
===================================================================
--- solr/core/src/test/org/apache/solr/store/blockcache/BlockDirectoryTest.java	(revision 1622387)
+++ solr/core/src/test/org/apache/solr/store/blockcache/BlockDirectoryTest.java	(working copy)
@@ -28,6 +28,7 @@
 import org.apache.lucene.store.IndexInput;
 import org.apache.lucene.store.IndexOutput;
 import org.apache.lucene.store.MergeInfo;
+import org.apache.lucene.util.IOUtils;
 import org.apache.solr.SolrTestCaseJ4;
 import org.junit.After;
 import org.junit.Before;
@@ -232,15 +233,12 @@
   }
 
   public static void rm(File file) {
-    if (!file.exists()) {
-      return;
+    try {
+      IOUtils.rm(file);
+    } catch (Throwable ignored) {
+      // TODO: should this class care if a file couldnt be deleted?
+      // this just emulates previous behavior, where only SecurityException would be handled.
     }
-    if (file.isDirectory()) {
-      for (File f : file.listFiles()) {
-        rm(f);
-      }
-    }
-    file.delete();
   }
 
   /**
Index: solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer.java
===================================================================
--- solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer.java	(revision 1622387)
+++ solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer.java	(working copy)
@@ -28,6 +28,7 @@
 
 import org.apache.commons.io.FileUtils;
 import org.apache.http.client.HttpClient;
+import org.apache.lucene.util.IOUtils;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.LuceneTestCase.Slow;
 import org.apache.lucene.util.QuickPatchThreadsFilter;
@@ -305,7 +306,7 @@
 
     public void tearDown() throws Exception {
       if (jetty != null) jetty.stop();
-      TestUtil.rm(homeDir);
+      IOUtils.rm(homeDir);
     }
 
     public void startJetty() throws Exception {
Index: solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4.java
===================================================================
--- solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4.java	(revision 1622387)
+++ solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4.java	(working copy)
@@ -1038,12 +1038,12 @@
   }
 
   /**
-   * @see TestUtil#rm(File...)
+   * @see IOUtils#rm(File...)
    */
   @Deprecated()
   public static boolean recurseDelete(File f) {
     try {
-      TestUtil.rm(f);
+      IOUtils.rm(f);
       return true;
     } catch (IOException e) {
       System.err.println(e.toString());
