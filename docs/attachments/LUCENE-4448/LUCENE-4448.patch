Index: lucene/test-framework/src/java/org/apache/lucene/util/TestRuleAssertionsRequired.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/util/TestRuleAssertionsRequired.java	(revision 1391689)
+++ lucene/test-framework/src/java/org/apache/lucene/util/TestRuleAssertionsRequired.java	(working copy)
@@ -35,7 +35,7 @@
           String msg = "Test class requires enabled assertions, enable globally (-ea)" +
               " or for Solr/Lucene subpackages only: " + description.getClassName();
           System.err.println(msg);
-          throw new Exception(msg);
+          // nocommit throw new Exception(msg);
         } catch (AssertionError e) {
           // Ok, enabled.
         }
Index: lucene/common-build.xml
===================================================================
--- lucene/common-build.xml	(revision 1391689)
+++ lucene/common-build.xml	(working copy)
@@ -819,10 +819,10 @@
             <classpath refid="clover.classpath" />
 
             <!-- Assertions. -->
-            <assertions>
+            <!-- nocommit <assertions>
               <enable package="org.apache.lucene"/>
               <enable package="org.apache.solr"/>
-            </assertions>
+            </assertions> -->
 
             <!-- JVM arguments and system properties. -->
             <jvmarg line="${args}"/>
Index: lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest.java
===================================================================
--- lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest.java	(revision 1391689)
+++ lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest.java	(working copy)
@@ -47,7 +47,7 @@
 /**
  * Benchmarks tests for implementations of {@link Lookup} interface.
  */
-@Ignore("COMMENT ME TO RUN BENCHMARKS!")
+// nocommit @Ignore("COMMENT ME TO RUN BENCHMARKS!")
 public class LookupBenchmarkTest extends LuceneTestCase {
   @SuppressWarnings("unchecked")
   private final List<Class<? extends Lookup>> benchmarkClasses = Arrays.asList(
Index: lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester.java
===================================================================
--- lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester.java	(revision 1391689)
+++ lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester.java	(working copy)
@@ -45,6 +45,7 @@
 import org.apache.lucene.util.IntsRef;
 import org.apache.lucene.util.UnicodeUtil;
 import org.apache.lucene.util.automaton.Automaton;
+import org.apache.lucene.util.automaton.BasicOperations;
 import org.apache.lucene.util.automaton.SpecialOperations;
 import org.apache.lucene.util.automaton.State;
 import org.apache.lucene.util.automaton.Transition;
@@ -246,6 +247,7 @@
             // but because we are going in reverse topo sort
             // it will not add any SEP/HOLE transitions:
             state.addEpsilon(t.getDest());
+            a.setDeterministic(false);
             t = null;
           }
         } else if (t.getMin() == TokenStreamToAutomaton.HOLE) {
@@ -263,6 +265,7 @@
           // but because we are going in reverse topo sort
           // it will not add any SEP/HOLE transitions:
           state.addEpsilon(t.getDest());
+          a.setDeterministic(false);
           t = null;
         }
         if (t != null) {
@@ -504,7 +507,7 @@
 
       // TODO: we can optimize this somewhat by determinizing
       // while we convert
-      automaton = Automaton.minimize(automaton);
+      BasicOperations.determinize(automaton);
 
       final CharsRef spare = new CharsRef();
 
Index: lucene/core/src/java/org/apache/lucene/analysis/TokenStreamToAutomaton.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/analysis/TokenStreamToAutomaton.java	(revision 1391689)
+++ lucene/core/src/java/org/apache/lucene/analysis/TokenStreamToAutomaton.java	(working copy)
@@ -83,6 +83,7 @@
    *  automaton where arcs are bytes from each term. */
   public Automaton toAutomaton(TokenStream in) throws IOException {
     final Automaton a = new Automaton();
+    boolean deterministic = true;
 
     final TermToBytesRefAttribute termBytesAtt = in.addAttribute(TermToBytesRefAttribute.class);
     final PositionIncrementAttribute posIncAtt = in.addAttribute(PositionIncrementAttribute.class);
@@ -132,6 +133,8 @@
           }
         }
         positions.freeBefore(pos);
+      } else {
+        deterministic = false;
       }
 
       final int endPos = pos + posLengthAtt.getPositionLength();
@@ -161,7 +164,7 @@
     }
 
     //toDot(a);
-
+    a.setDeterministic(deterministic);
     return a;
   }
 
