From d06eda0d8de026732e7a4194da0d0aea9eca1cab Mon Sep 17 00:00:00 2001
From: Atri Sharma <atri@apache.org>
Date: Fri, 24 May 2019 13:35:14 +0530
Subject: [PATCH] LUCENE-8810: Include Nested Disjunctions in Total Clause
 Count

---
 .../apache/lucene/search/BooleanQuery.java    | 22 ++++++-
 .../search/TestMultiTermQueryRewrites.java    | 57 ++++++++++++++++++-
 2 files changed, 77 insertions(+), 2 deletions(-)

diff --git a/lucene/core/src/java/org/apache/lucene/search/BooleanQuery.java b/lucene/core/src/java/org/apache/lucene/search/BooleanQuery.java
index 80924a9dd2..e998391a09 100644
--- a/lucene/core/src/java/org/apache/lucene/search/BooleanQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/BooleanQuery.java
@@ -77,6 +77,7 @@ public class BooleanQuery extends Query implements Iterable<BooleanClause> {
 
     private int minimumNumberShouldMatch;
     private final List<BooleanClause> clauses = new ArrayList<>();
+    private int nestedFlattenableClausesCount;
 
     /** Sole constructor. */
     public Builder() {}
@@ -110,9 +111,10 @@ public class BooleanQuery extends Query implements Iterable<BooleanClause> {
      * @throws TooManyClauses if the new number of clauses exceeds the maximum clause number
      */
     public Builder add(BooleanClause clause) {
-      if (clauses.size() >= maxClauseCount) {
+      if ((clauses.size() + nestedFlattenableClausesCount) >= maxClauseCount) {
         throw new TooManyClauses();
       }
+      checkNestedClausesLimit(clause);
       clauses.add(clause);
       return this;
     }
@@ -127,6 +129,24 @@ public class BooleanQuery extends Query implements Iterable<BooleanClause> {
       return add(new BooleanClause(query, occur));
     }
 
+    /**
+     * For nested boolean queries that will be flattened during rewrite, check for
+     * maximum number of clauses limit. This is more optimal than erroring out during
+     * rewrite
+     */
+    private void checkNestedClausesLimit(BooleanClause booleanClause) {
+      Query query = booleanClause.getQuery();
+      if (booleanClause.getOccur() == Occur.SHOULD && query instanceof BooleanQuery
+          && ((BooleanQuery) query).isPureDisjunction()) {
+        BooleanQuery booleanQuery = (BooleanQuery) query;
+        if ((booleanQuery.clauses().size() + nestedFlattenableClausesCount + clauses.size())
+            > maxClauseCount) {
+          throw new TooManyClauses();
+        }
+        nestedFlattenableClausesCount += booleanQuery.clauses().size();
+      }
+    }
+
     /** Create a new {@link BooleanQuery} based on the parameters that have
      *  been set on this builder. */
     public BooleanQuery build() {
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites.java b/lucene/core/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites.java
index e24e62b265..723760ea5d 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites.java
@@ -258,5 +258,60 @@ public class TestMultiTermQueryRewrites extends LuceneTestCase {
     checkNoMaxClauseLimitation(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(1024));
     checkNoMaxClauseLimitation(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(1024));
   }
-  
+
+  public void testFlattenInnerDisjunctionsWithMoreThan1024Terms() throws IOException {
+    IndexSearcher searcher = newSearcher(new MultiReader());
+
+    BooleanQuery.Builder builder1024 = new BooleanQuery.Builder();
+    for(int i = 0; i < 1022; i++) {
+      builder1024.add(new TermQuery(new Term("foo", "bar-" + i)), BooleanClause.Occur.SHOULD);
+    }
+    Query inner = builder1024.build();
+    Query query = new BooleanQuery.Builder()
+        .add(inner, BooleanClause.Occur.SHOULD)
+        .add(new TermQuery(new Term("foo", "baz")), BooleanClause.Occur.SHOULD)
+        .add(new TermQuery(new Term("foo", "baz")), BooleanClause.Occur.SHOULD)
+        .add(new TermQuery(new Term("foo", "baz")), BooleanClause.Occur.SHOULD)
+        .build();
+    searcher.rewrite(query);
+  }
+
+  public void testLargeTermsNestedFirst() throws IOException {
+    IndexSearcher searcher = newSearcher(new MultiReader());
+
+    BooleanQuery.Builder builder1024 = new BooleanQuery.Builder();
+    for(int i = 0; i < 600; i++) {
+      builder1024.add(new TermQuery(new Term("foo", "bar-" + i)), BooleanClause.Occur.SHOULD);
+    }
+    Query inner = builder1024.build();
+    BooleanQuery.Builder builderMixed = new BooleanQuery.Builder()
+        .add(inner, BooleanClause.Occur.SHOULD);
+
+    for (int i = 0; i < 600; i++) {
+      builderMixed.add(new TermQuery(new Term("foo", "bar")), BooleanClause.Occur.SHOULD);
+    }
+
+    Query query = builderMixed.build();
+    searcher.rewrite(query);
+  }
+
+  public void testLargeTermsNestedLast() throws IOException {
+    IndexSearcher searcher = newSearcher(new MultiReader());
+
+    BooleanQuery.Builder builder1024 = new BooleanQuery.Builder();
+    for(int i = 0; i < 600; i++) {
+      builder1024.add(new TermQuery(new Term("foo", "bar-" + i)), BooleanClause.Occur.SHOULD);
+    }
+    Query inner = builder1024.build();
+    BooleanQuery.Builder builderMixed = new BooleanQuery.Builder();
+
+    for (int i = 0; i < 600; i++) {
+      builderMixed.add(new TermQuery(new Term("foo", "bar")), BooleanClause.Occur.SHOULD);
+    }
+
+    builderMixed.add(inner, BooleanClause.Occur.SHOULD);
+
+    Query query = builderMixed.build();
+    searcher.rewrite(query);
+  }
 }
-- 
2.17.2 (Apple Git-113)

