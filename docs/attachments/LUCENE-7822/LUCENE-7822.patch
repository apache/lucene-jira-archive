diff --git a/lucene/core/src/java/org/apache/lucene/index/SegmentInfos.java b/lucene/core/src/java/org/apache/lucene/index/SegmentInfos.java
index e463259..037a649 100644
--- a/lucene/core/src/java/org/apache/lucene/index/SegmentInfos.java
+++ b/lucene/core/src/java/org/apache/lucene/index/SegmentInfos.java
@@ -44,6 +44,7 @@ import org.apache.lucene.store.DataInput;
 import org.apache.lucene.store.DataOutput;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.IOContext;
+import org.apache.lucene.store.IndexInput;
 import org.apache.lucene.store.IndexOutput;
 import org.apache.lucene.util.IOUtils;
 import org.apache.lucene.util.StringHelper;
@@ -293,6 +294,12 @@ public final class SegmentInfos implements Cloneable, Iterable<SegmentCommitInfo
         return readCommit(directory, input, generation);
       } catch (EOFException | NoSuchFileException | FileNotFoundException e) {
         throw new CorruptIndexException("Unexpected file read error while reading index.", input, e);
+      } catch (Exception e) {
+        //Exception may be caused by file corruption, do checksum on whole file.
+        try (IndexInput input2 = directory.openInput(segmentFileName, IOContext.READ)) {
+          CodecUtil.checksumEntireFile(input2);
+        }
+        throw e;
       }
     }
   }
diff --git a/lucene/core/src/test/org/apache/lucene/index/TestSegmentInfos.java b/lucene/core/src/test/org/apache/lucene/index/TestSegmentInfos.java
index 128601e..3767c3c 100644
--- a/lucene/core/src/test/org/apache/lucene/index/TestSegmentInfos.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestSegmentInfos.java
@@ -17,6 +17,14 @@
 package org.apache.lucene.index;
 
 
+import java.io.IOException;
+import java.nio.ByteBuffer;
+import java.nio.channels.SeekableByteChannel;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.StandardOpenOption;
+import java.util.Collections;
+
 import org.apache.lucene.codecs.Codec;
 import org.apache.lucene.store.BaseDirectoryWrapper;
 import org.apache.lucene.store.IOContext;
@@ -24,9 +32,6 @@ import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.StringHelper;
 import org.apache.lucene.util.Version;
 
-import java.io.IOException;
-import java.util.Collections;
-
 public class TestSegmentInfos extends LuceneTestCase {
 
   public void testIllegalCreatedVersion() {
@@ -56,8 +61,8 @@ public class TestSegmentInfos extends LuceneTestCase {
     Codec codec = Codec.getDefault();
 
     SegmentInfos sis = new SegmentInfos(Version.LATEST.major);
-    SegmentInfo info = new SegmentInfo(dir, Version.LUCENE_7_0_0, Version.LUCENE_7_0_0, "_0", 1, false, Codec.getDefault(), 
-                                       Collections.<String,String>emptyMap(), id, Collections.<String,String>emptyMap(), null);
+    SegmentInfo info = new SegmentInfo(dir, Version.LUCENE_7_0_0, Version.LUCENE_7_0_0, "_0", 1, false, Codec.getDefault(),
+        Collections.<String, String>emptyMap(), id, Collections.<String, String>emptyMap(), null);
     info.setFiles(Collections.<String>emptySet());
     codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);
     SegmentCommitInfo commitInfo = new SegmentCommitInfo(info, 0, -1, -1, -1);
@@ -78,15 +83,15 @@ public class TestSegmentInfos extends LuceneTestCase {
     Codec codec = Codec.getDefault();
 
     SegmentInfos sis = new SegmentInfos(Version.LATEST.major);
-    SegmentInfo info = new SegmentInfo(dir, Version.LUCENE_7_0_0, Version.LUCENE_7_0_0, "_0", 1, false, Codec.getDefault(), 
-                                       Collections.<String,String>emptyMap(), id, Collections.<String,String>emptyMap(), null);
+    SegmentInfo info = new SegmentInfo(dir, Version.LUCENE_7_0_0, Version.LUCENE_7_0_0, "_0", 1, false, Codec.getDefault(),
+        Collections.<String, String>emptyMap(), id, Collections.<String, String>emptyMap(), null);
     info.setFiles(Collections.<String>emptySet());
     codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);
     SegmentCommitInfo commitInfo = new SegmentCommitInfo(info, 0, -1, -1, -1);
     sis.add(commitInfo);
 
-    info = new SegmentInfo(dir, Version.LUCENE_7_0_0, Version.LUCENE_7_0_0, "_1", 1, false, Codec.getDefault(), 
-                           Collections.<String,String>emptyMap(), id, Collections.<String,String>emptyMap(), null);
+    info = new SegmentInfo(dir, Version.LUCENE_7_0_0, Version.LUCENE_7_0_0, "_1", 1, false, Codec.getDefault(),
+        Collections.<String, String>emptyMap(), id, Collections.<String, String>emptyMap(), null);
     info.setFiles(Collections.<String>emptySet());
     codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);
     commitInfo = new SegmentCommitInfo(info, 0, -1, -1, -1);
@@ -98,5 +103,54 @@ public class TestSegmentInfos extends LuceneTestCase {
     assertEquals(Version.LATEST, sis.getCommitLuceneVersion());
     dir.close();
   }
+
+  // LUCENE-7822
+  public void testSegmentInfoFileCorruption() throws IOException {
+    Path tempDir = createTempDir();
+    try (BaseDirectoryWrapper dir = newFSDirectory(tempDir)) {
+      dir.setCheckIndexOnClose(false);
+      byte id[] = StringHelper.randomId();
+      Codec codec = Codec.getDefault();
+
+      SegmentInfos sis = new SegmentInfos(Version.LATEST.major);
+      for (int i = 0; i < random().nextInt(10); i++) {
+        SegmentInfo info = new SegmentInfo(dir, Version.LATEST, Version.LATEST, "_" + i, 1, false, Codec.getDefault(),
+            Collections.<String, String>emptyMap(), id, Collections.<String, String>emptyMap(), null);
+        info.setFiles(Collections.<String>emptySet());
+        codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);
+        SegmentCommitInfo commitInfo = new SegmentCommitInfo(info, 0, -1, -1, -1);
+        sis.add(commitInfo);
+      }
+      sis.commit(dir);
+
+      corruptByteInFile(tempDir.resolve(sis.getSegmentsFileName()));
+
+      SegmentInfos.readLatestCommit(dir);
+      fail("Expecting CorruptIndexException");
+    } catch (CorruptIndexException e) {
+      // expected
+    }
+  }
+
+  /**
+   * Corrupt a random byte in the file
+   */
+  private static void corruptByteInFile(Path p) throws IOException {
+    try (SeekableByteChannel bc = Files.newByteChannel(p, StandardOpenOption.READ, StandardOpenOption.WRITE)) {
+      bc.position(random().nextInt((int) (p.toFile().length() - 2)));
+      byte[] singleByte = new byte[1];
+      ByteBuffer buffer = ByteBuffer.wrap(singleByte);
+      bc.read(buffer);
+      byte b;
+      do {
+        b = (byte) random().nextInt();
+      } while (b == singleByte[0]);
+      singleByte[0] = b;
+      bc.position(bc.position() - 1);
+      buffer.rewind();
+      bc.write(buffer);
+    }
+  }
+
 }
 
