diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/FunctionValues.java b/lucene/queries/src/java/org/apache/lucene/queries/function/FunctionValues.java
index 9b529fd..0b9408d 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/FunctionValues.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/FunctionValues.java
@@ -105,20 +105,16 @@ public abstract class FunctionValues {
 
   /** @lucene.experimental  */
   public ValueFiller getValueFiller() {
-    return new ValueFiller() {
-      private final MutableValueFloat mval = new MutableValueFloat();
-
-      @Override
-      public MutableValue getValue() {
-        return mval;
-      }
-
-      @Override
-      public void fillValue(int doc) {
-        mval.value = floatVal(doc);
-      }
-    };
+    return getValueFiller(getNewValue());
   }
+  
+  /** @lucene.experimental  */
+  public abstract ValueFiller getValueFiller(final MutableValue mval);
+
+  /** @lucene.experimental  */
+  public abstract void fillValue(int doc, MutableValue mval);
+  
+  public abstract MutableValue getNewValue();
 
   //For Functions that can work with multiple values from the same document.  This does not apply to all functions
   public void byteVal(int doc, byte [] vals) { throw new UnsupportedOperationException(); }
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/BoolDocValues.java b/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/BoolDocValues.java
index 09e9e94..1259705 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/BoolDocValues.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/BoolDocValues.java
@@ -80,12 +80,22 @@ public abstract class BoolDocValues extends FunctionValues {
   public String toString(int doc) {
     return vs.description() + '=' + strVal(doc);
   }
+  
+  @Override
+  public void fillValue(int doc, MutableValue mval) {
+    fillBool(doc, (MutableValueBool) mval);
+  }
+  
+  public void fillBool(int doc, MutableValueBool mval) {
+    mval.value = boolVal(doc);
+    mval.exists = exists(doc);
+  }
 
   @Override
-  public ValueFiller getValueFiller() {
+  public ValueFiller getValueFiller(final MutableValue use) {
     return new ValueFiller() {
-      private final MutableValueBool mval = new MutableValueBool();
-
+      MutableValueBool mval = (MutableValueBool) use;
+      
       @Override
       public MutableValue getValue() {
         return mval;
@@ -93,9 +103,13 @@ public abstract class BoolDocValues extends FunctionValues {
 
       @Override
       public void fillValue(int doc) {
-        mval.value = boolVal(doc);
-        mval.exists = exists(doc);
+        fillBool(doc, mval);
       }
     };
   }
+  
+  @Override
+  public MutableValue getNewValue() {
+    return new MutableValueBool();
+  }
 }
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/ConstDocValues.java b/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/ConstDocValues.java
new file mode 100644
index 0000000..93cf041
--- /dev/null
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/ConstDocValues.java
@@ -0,0 +1,440 @@
+package org.apache.lucene.queries.function.docvalues;
+
+import java.util.Date;
+
+import org.apache.lucene.queries.function.ValueSource;
+import org.apache.lucene.queries.function.FunctionValues.ValueFiller;
+import org.apache.lucene.util.BytesRef;
+import org.apache.lucene.util.mutable.MutableValue;
+import org.apache.lucene.util.mutable.MutableValueDate;
+import org.apache.lucene.util.mutable.MutableValueDouble;
+import org.apache.lucene.util.mutable.MutableValueFloat;
+import org.apache.lucene.util.mutable.MutableValueInt;
+import org.apache.lucene.util.mutable.MutableValueLong;
+import org.apache.lucene.util.mutable.MutableValueStr;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+public class ConstDocValues {
+  
+  public static class ConstIntDocValues extends IntDocValues {
+    final private int ival;
+    final private float fval;
+    final private double dval;
+    final private long lval;
+    final private boolean bval;
+    final private String sval;
+    final private ValueSource parent;
+
+    public ConstIntDocValues(int val, ValueSource parent) {
+      super(parent);
+      ival = val;
+      fval = val;
+      dval = val;
+      lval = val;
+      bval = val != 0;
+      sval = Integer.toString(val);
+      this.parent = parent;
+    }
+    
+    @Override
+    public boolean boolVal(int doc) {
+      return bval;
+    }
+    
+    @Override
+    public float floatVal(int doc) {
+      return fval;
+    }
+    
+    @Override
+    public int intVal(int doc) {
+      return ival;
+    }
+    
+    @Override
+    public long longVal(int doc) {
+      return lval;
+    }
+    
+    @Override
+    public double doubleVal(int doc) {
+      return dval;
+    }
+    
+    @Override
+    public String strVal(int doc) {
+      return sval;
+    }
+    
+    @Override
+    public String toString(int doc) {
+      return parent.description() + '=' + sval;
+    }
+    
+    public void fillInt(int doc, MutableValueInt mval) {
+      mval.value = ival;
+      mval.exists = true;
+    }
+
+    @Override
+    public ValueFiller getValueFiller(final MutableValue use) {
+      fillValue(0,use);
+      return new ValueFiller() {
+        
+        @Override
+        public MutableValue getValue() {
+          return use;
+        }
+
+        @Override
+        public void fillValue(int doc) { }
+      };
+    }
+  }
+  
+  public static class ConstLongDocValues extends LongDocValues {
+    final private int ival;
+    final private float fval;
+    final private double dval;
+    final private long lval;
+    final private boolean bval;
+    final private String sval;
+    final private ValueSource parent;
+
+    public ConstLongDocValues(long val, ValueSource parent) {
+      super(parent);
+      ival = (int)val;
+      fval = (float)val;
+      dval = (double)val;
+      lval = val;
+      bval = val != 0l;
+      sval = Long.toString(val);
+      this.parent = parent;
+    }
+    
+    @Override
+    public boolean boolVal(int doc) {
+      return bval;
+    }
+    @Override
+    public float floatVal(int doc) {
+      return fval;
+    }
+    @Override
+    public int intVal(int doc) {
+      return ival;
+    }
+    @Override
+    public long longVal(int doc) {
+      return lval;
+    }
+    @Override
+    public double doubleVal(int doc) {
+      return dval;
+    }
+    @Override
+    public String strVal(int doc) {
+      return sval;
+    }
+    @Override
+    public String toString(int doc) {
+      return parent.description() + '=' + sval;
+    }
+    @Override
+    public void fillLong(int doc, MutableValueLong mval) {
+      mval.value = lval;
+      mval.exists = true;
+    }
+
+    @Override
+    public ValueFiller getValueFiller(final MutableValue use) {
+      fillValue(0,use);
+      return new ValueFiller() {
+        
+        @Override
+        public MutableValue getValue() {
+          return use;
+        }
+
+        @Override
+        public void fillValue(int doc) { }
+      };
+    }
+  }
+  
+  public static class ConstFloatDocValues extends FloatDocValues {
+    final private int ival;
+    final private float fval;
+    final private double dval;
+    final private long lval;
+    final private boolean bval;
+    final private String sval;
+    final private ValueSource parent;
+
+    public ConstFloatDocValues(float val, ValueSource parent) {
+      super(parent);
+      ival = (int)val;
+      fval = val;
+      dval = (double)val;
+      lval = (long)val;
+      bval = val != 0.0f;
+      sval = Float.toString(val);
+      this.parent = parent;
+    }
+    
+    @Override
+    public boolean boolVal(int doc) {
+      return bval;
+    }
+    @Override
+    public float floatVal(int doc) {
+      return fval;
+    }
+    @Override
+    public int intVal(int doc) {
+      return ival;
+    }
+    @Override
+    public long longVal(int doc) {
+      return lval;
+    }
+    @Override
+    public double doubleVal(int doc) {
+      return dval;
+    }
+    @Override
+    public String strVal(int doc) {
+      return sval;
+    }
+    @Override
+    public String toString(int doc) {
+      return parent.description() + '=' + sval;
+    }
+    @Override
+    public void fillFloat(int doc, MutableValueFloat mval) {
+      mval.value = fval;
+      mval.exists = true;
+    }
+
+    @Override
+    public ValueFiller getValueFiller(final MutableValue use) {
+      fillValue(0,use);
+      return new ValueFiller() {
+        
+        @Override
+        public MutableValue getValue() {
+          return use;
+        }
+
+        @Override
+        public void fillValue(int doc) { }
+      };
+    }
+  }
+  
+  public static class ConstDoubleDocValues extends DoubleDocValues {
+    final private int ival;
+    final private float fval;
+    final private double dval;
+    final private long lval;
+    final private boolean bval;
+    final private String sval;
+    final private ValueSource parent;
+
+    public ConstDoubleDocValues(double val, ValueSource parent) {
+      super(parent);
+      ival = (int)val;
+      fval = (float)val;
+      dval = val;
+      lval = (long)val;
+      bval = val != 0.0d;
+      sval = Double.toString(val);
+      this.parent = parent;
+    }
+    
+    @Override
+    public boolean boolVal(int doc) {
+      return bval;
+    }
+    @Override
+    public float floatVal(int doc) {
+      return fval;
+    }
+    @Override
+    public int intVal(int doc) {
+      return ival;
+    }
+    @Override
+    public long longVal(int doc) {
+      return lval;
+    }
+    @Override
+    public double doubleVal(int doc) {
+      return dval;
+    }
+    @Override
+    public String strVal(int doc) {
+      return sval;
+    }
+    @Override
+    public String toString(int doc) {
+      return parent.description() + '=' + sval;
+    }
+    @Override
+    public void fillDouble(int doc, MutableValueDouble mval) {
+      mval.value = dval;
+      mval.exists = true;
+    }
+
+    @Override
+    public ValueFiller getValueFiller(final MutableValue use) {
+      fillValue(0,use);
+      return new ValueFiller() {
+        
+        @Override
+        public MutableValue getValue() {
+          return use;
+        }
+
+        @Override
+        public void fillValue(int doc) { }
+      };
+    }
+  }
+  
+  public static class ConstStrDocValues extends StrDocValues {
+    final private String str;
+    final private BytesRef bytesRef;
+    final private ValueSource parent; 
+
+    public ConstStrDocValues(String str, ValueSource parent) {
+      super(parent);
+      this.str = str;
+      this.bytesRef = new BytesRef(str);
+      this.parent = parent;
+    }
+
+    @Override
+    public String strVal(int doc) {
+      return str;
+    }
+    @Override
+    public boolean bytesVal(int doc, BytesRef target) {
+      target.copyBytes(bytesRef);
+      return true;
+    }
+    @Override
+    public String toString(int doc) {
+      return parent.description() + '=' + str;
+    }
+    @Override
+    public void fillStr(int doc, MutableValueStr mval) {
+      mval.exists = bytesVal(doc,mval.value);
+    }
+
+    @Override
+    public ValueFiller getValueFiller(final MutableValue use) {
+      fillValue(0,use);
+      return new ValueFiller() {
+        
+        @Override
+        public MutableValue getValue() {
+          return use;
+        }
+
+        @Override
+        public void fillValue(int doc) { }
+      };
+    }
+  }
+  
+  public static class ConstDateDocValues extends DateDocValues {
+    final private int ival;
+    final private float fval;
+    final private double dval;
+    final private long lval;
+    final private boolean bval;
+    final private String sval;
+    final private ValueSource parent;
+
+    public ConstDateDocValues(long val, ValueSource parent) {
+      super(parent);
+      ival = (int)val;
+      fval = (float)val;
+      dval = (double)val;
+      lval = val;
+      bval = val != 0l;
+      sval = dateToString(longToDate(val));
+      this.parent = parent;
+    }
+    
+    @Override
+    public boolean boolVal(int doc) {
+      return bval;
+    }
+    @Override
+    public float floatVal(int doc) {
+      return fval;
+    }
+    @Override
+    public int intVal(int doc) {
+      return ival;
+    }
+    @Override
+    public long longVal(int doc) {
+      return lval;
+    }
+    @Override
+    public double doubleVal(int doc) {
+      return dval;
+    }
+    @Override
+    public String strVal(int doc) {
+      return sval;
+    }
+    @Override
+    public String toString(int doc) {
+      return parent.description() + '=' + sval;
+    }
+    @Override
+    protected String dateToString(Date val) {
+      return val.toString();
+    }
+    @Override
+    public void fillDate(int doc, MutableValueDate mval) {
+      mval.value = lval;
+      mval.exists = true;
+    }
+
+    @Override
+    public ValueFiller getValueFiller(final MutableValue use) {
+      fillValue(0,use);
+      return new ValueFiller() {
+        
+        @Override
+        public MutableValue getValue() {
+          return use;
+        }
+
+        @Override
+        public void fillValue(int doc) { }
+      };
+    }
+  }
+}
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/DateDocValues.java b/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/DateDocValues.java
new file mode 100644
index 0000000..95edef4
--- /dev/null
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/DateDocValues.java
@@ -0,0 +1,167 @@
+package org.apache.lucene.queries.function.docvalues;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.util.Date;
+
+import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.queries.function.FunctionValues;
+import org.apache.lucene.queries.function.ValueSource;
+import org.apache.lucene.queries.function.ValueSourceScorer;
+import org.apache.lucene.util.mutable.MutableValue;
+import org.apache.lucene.util.mutable.MutableValueDate;
+
+/**
+ * Abstract {@link FunctionValues} implementation which supports retrieving long values.
+ * Implementations can control how the long values are loaded through {@link #longVal(int)}}
+ */
+public abstract class DateDocValues extends FunctionValues {
+  protected final ValueSource vs;
+
+  public DateDocValues(ValueSource vs) {
+    this.vs = vs;
+  }
+
+  @Override
+  public byte byteVal(int doc) {
+    return (byte)longVal(doc);
+  }
+
+  @Override
+  public short shortVal(int doc) {
+    return (short)longVal(doc);
+  }
+
+  @Override
+  public float floatVal(int doc) {
+    return (float)longVal(doc);
+  }
+
+  @Override
+  public int intVal(int doc) {
+    return (int)longVal(doc);
+  }
+
+  @Override
+  public abstract long longVal(int doc);
+
+  @Override
+  public double doubleVal(int doc) {
+    return (double)longVal(doc);
+  }
+
+  @Override
+  public boolean boolVal(int doc) {
+    return longVal(doc) != 0;
+  }
+
+  @Override
+  public String strVal(int doc) {
+    return dateToString(dateVal(doc));
+  }
+
+  @Override
+  public Object objectVal(int doc) {
+    return dateVal(doc);
+  }
+
+  public Date dateVal(int doc) {
+    return exists(doc) ? longToDate(longVal(doc)) : null;
+  }
+
+  @Override
+  public String toString(int doc) {
+    return vs.description() + '=' + objectVal(doc).toString();
+  }
+  
+  protected long externalToLong(String extVal) {
+    return Long.parseLong(extVal);
+  }
+
+  protected Date longToDate(long val) {
+    return new Date(val);
+  }
+  
+  protected abstract String dateToString(Date val);
+  
+  @Override
+  public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {
+    long lower,upper;
+
+    // instead of using separate comparison functions, adjust the endpoints.
+
+    if (lowerVal==null) {
+      lower = Long.MIN_VALUE;
+    } else {
+      lower = externalToLong(lowerVal);
+      if (!includeLower && lower < Long.MAX_VALUE) lower++;
+    }
+
+     if (upperVal==null) {
+      upper = Long.MAX_VALUE;
+    } else {
+      upper = externalToLong(upperVal);
+      if (!includeUpper && upper > Long.MIN_VALUE) upper--;
+    }
+
+    final long ll = lower;
+    final long uu = upper;
+
+    return new ValueSourceScorer(reader, this) {
+      @Override
+      public boolean matchesValue(int doc) {
+        long val = longVal(doc);
+        // only check for deleted if it's the default value
+        // if (val==0 && reader.isDeleted(doc)) return false;
+        return val >= ll && val <= uu;
+      }
+    };
+  }
+  
+  @Override
+  public void fillValue(int doc, MutableValue mval) {
+    fillDate(doc, (MutableValueDate) mval);
+  }
+  
+  public void fillDate(int doc, MutableValueDate mval) {
+    mval.value = longVal(doc);
+    mval.exists = exists(doc);
+  }
+
+  @Override
+  public ValueFiller getValueFiller(final MutableValue use) {
+    return new ValueFiller() {
+      MutableValueDate mval = (MutableValueDate) use;
+      
+      @Override
+      public MutableValue getValue() {
+        return mval;
+      }
+
+      @Override
+      public void fillValue(int doc) {
+        fillDate(doc, mval);
+      }
+    };
+  }
+  
+  @Override
+  public MutableValue getNewValue() {
+    return new MutableValueDate();
+  }
+}
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues.java b/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues.java
index 162bb6d..bc5ada8 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues.java
@@ -39,7 +39,6 @@ import org.apache.lucene.util.mutable.MutableValueStr;
 public abstract class DocTermsIndexDocValues extends FunctionValues {
   protected final SortedDocValues termsIndex;
   protected final ValueSource vs;
-  protected final MutableValueStr val = new MutableValueStr();
   protected final CharsRefBuilder spareCharsBuilder = new CharsRefBuilder();
   protected final CharsRef spareChars = new CharsRef();
 
@@ -137,10 +136,24 @@ public abstract class DocTermsIndexDocValues extends FunctionValues {
   }
 
   @Override
-  public ValueFiller getValueFiller() {
-    return new ValueFiller() {
-      private final MutableValueStr mval = new MutableValueStr();
+  public void fillValue(int doc, MutableValue mval) {
+    fillStr(doc, (MutableValueStr)mval);
+  }
+
+  public void fillStr(int doc, MutableValueStr mval) {
+    int ord = termsIndex.getOrd(doc);
+    mval.value.length = 0;
+    mval.exists = ord >= 0;
+    if (mval.exists) {
+      mval.value.copyBytes(termsIndex.lookupOrd(ord));
+    }
+  }
 
+  @Override
+  public ValueFiller getValueFiller(final MutableValue use) {
+    return new ValueFiller() {
+      MutableValueStr mval = (MutableValueStr) use;
+      
       @Override
       public MutableValue getValue() {
         return mval;
@@ -148,15 +161,15 @@ public abstract class DocTermsIndexDocValues extends FunctionValues {
 
       @Override
       public void fillValue(int doc) {
-        int ord = termsIndex.getOrd(doc);
-        mval.value.length = 0;
-        mval.exists = ord >= 0;
-        if (mval.exists) {
-          mval.value.copyBytes(termsIndex.lookupOrd(ord));
-        }
+        fillStr(doc, mval);
       }
     };
   }
+  
+  @Override
+  public MutableValue getNewValue() {
+    return new MutableValueStr();
+  }
 
   /**
    * Custom Exception to be thrown when the DocTermsIndex for a field cannot be generated
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/DoubleDocValues.java b/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/DoubleDocValues.java
index 2d0e127..f20d1f6 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/DoubleDocValues.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/DoubleDocValues.java
@@ -140,12 +140,22 @@ public abstract class DoubleDocValues extends FunctionValues {
       };
     }
   }
+  
+  @Override
+  public void fillValue(int doc, MutableValue mval) {
+    fillDouble(doc, (MutableValueDouble) mval);
+  }
+  
+  public void fillDouble(int doc, MutableValueDouble mval) {
+    mval.value = doubleVal(doc);
+    mval.exists = exists(doc);
+  }
 
   @Override
-  public ValueFiller getValueFiller() {
+  public ValueFiller getValueFiller(final MutableValue use) {
     return new ValueFiller() {
-      private final MutableValueDouble mval = new MutableValueDouble();
-
+      MutableValueDouble mval = (MutableValueDouble) use;
+      
       @Override
       public MutableValue getValue() {
         return mval;
@@ -153,10 +163,13 @@ public abstract class DoubleDocValues extends FunctionValues {
 
       @Override
       public void fillValue(int doc) {
-        mval.value = doubleVal(doc);
-        mval.exists = exists(doc);
+        fillDouble(doc, mval);
       }
     };
   }
-
+  
+  @Override
+  public MutableValue getNewValue() {
+    return new MutableValueDouble();
+  }
 }
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/FloatDocValues.java b/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/FloatDocValues.java
index 5e975a7..1bc6cb1 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/FloatDocValues.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/FloatDocValues.java
@@ -75,12 +75,22 @@ public abstract class FloatDocValues extends FunctionValues {
   public String toString(int doc) {
     return vs.description() + '=' + strVal(doc);
   }
+  
+  @Override
+  public void fillValue(int doc, MutableValue mval) {
+    fillFloat(doc, (MutableValueFloat) mval);
+  }
+  
+  public void fillFloat(int doc, MutableValueFloat mval) {
+    mval.value = floatVal(doc);
+    mval.exists = exists(doc);
+  }
 
   @Override
-  public ValueFiller getValueFiller() {
+  public ValueFiller getValueFiller(final MutableValue use) {
     return new ValueFiller() {
-      private final MutableValueFloat mval = new MutableValueFloat();
-
+      MutableValueFloat mval = (MutableValueFloat) use;
+      
       @Override
       public MutableValue getValue() {
         return mval;
@@ -88,9 +98,13 @@ public abstract class FloatDocValues extends FunctionValues {
 
       @Override
       public void fillValue(int doc) {
-        mval.value = floatVal(doc);
-        mval.exists = exists(doc);
+        fillFloat(doc, mval);
       }
     };
   }
+  
+  @Override
+  public MutableValue getNewValue() {
+    return new MutableValueFloat();
+  }
 }
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/IntDocValues.java b/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/IntDocValues.java
index ac861d6..670fb29 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/IntDocValues.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/IntDocValues.java
@@ -111,12 +111,22 @@ public abstract class IntDocValues extends FunctionValues {
       }
     };
   }
+  
+  @Override
+  public void fillValue(int doc, MutableValue mval) {
+    fillInt(doc, (MutableValueInt) mval);
+  }
+  
+  public void fillInt(int doc, MutableValueInt mval) {
+    mval.value = intVal(doc);
+    mval.exists = exists(doc);
+  }
 
   @Override
-  public ValueFiller getValueFiller() {
+  public ValueFiller getValueFiller(final MutableValue use) {
     return new ValueFiller() {
-      private final MutableValueInt mval = new MutableValueInt();
-
+      MutableValueInt mval = (MutableValueInt) use;
+      
       @Override
       public MutableValue getValue() {
         return mval;
@@ -124,9 +134,13 @@ public abstract class IntDocValues extends FunctionValues {
 
       @Override
       public void fillValue(int doc) {
-        mval.value = intVal(doc);
-        mval.exists = exists(doc);
+        fillInt(doc, mval);
       }
     };
   }
+  
+  @Override
+  public MutableValue getNewValue() {
+    return new MutableValueInt();
+  }
 }
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/LongDocValues.java b/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/LongDocValues.java
index 3f6a315..68b9e3b 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/LongDocValues.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/LongDocValues.java
@@ -120,12 +120,22 @@ public abstract class LongDocValues extends FunctionValues {
       }
     };
   }
+  
+  @Override
+  public void fillValue(int doc, MutableValue mval) {
+    fillLong(doc, (MutableValueLong) mval);
+  }
+  
+  public void fillLong(int doc, MutableValueLong mval) {
+    mval.value = longVal(doc);
+    mval.exists = exists(doc);
+  }
 
   @Override
-  public ValueFiller getValueFiller() {
+  public ValueFiller getValueFiller(final MutableValue use) {
     return new ValueFiller() {
-      private final MutableValueLong mval = new MutableValueLong();
-
+      MutableValueLong mval = (MutableValueLong) use;
+      
       @Override
       public MutableValue getValue() {
         return mval;
@@ -133,9 +143,13 @@ public abstract class LongDocValues extends FunctionValues {
 
       @Override
       public void fillValue(int doc) {
-        mval.value = longVal(doc);
-        mval.exists = exists(doc);
+        fillLong(doc, mval);
       }
     };
   }
+  
+  @Override
+  public MutableValue getNewValue() {
+    return new MutableValueLong();
+  }
 }
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/StrDocValues.java b/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/StrDocValues.java
index ad2e5bc..c765d0d 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/StrDocValues.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/StrDocValues.java
@@ -50,12 +50,21 @@ public abstract class StrDocValues extends FunctionValues {
   public String toString(int doc) {
     return vs.description() + "='" + strVal(doc) + "'";
   }
+  
+  @Override
+  public void fillValue(int doc, MutableValue mval) {
+    fillStr(doc, (MutableValueStr) mval);
+  }
+  
+  public void fillStr(int doc, MutableValueStr mval) {
+    mval.exists = bytesVal(doc, mval.value);
+  }
 
   @Override
-  public ValueFiller getValueFiller() {
+  public ValueFiller getValueFiller(final MutableValue use) {
     return new ValueFiller() {
-      private final MutableValueStr mval = new MutableValueStr();
-
+      MutableValueStr mval = (MutableValueStr) use;
+      
       @Override
       public MutableValue getValue() {
         return mval;
@@ -63,8 +72,13 @@ public abstract class StrDocValues extends FunctionValues {
 
       @Override
       public void fillValue(int doc) {
-        mval.exists = bytesVal(doc, mval.value);
+        fillStr(doc, mval);
       }
     };
   }
+  
+  @Override
+  public MutableValue getNewValue() {
+    return new MutableValueStr();
+  }
 }
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ByteFieldSource.java b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ByteFieldSource.java
index b7a2f37..ec320b2 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ByteFieldSource.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ByteFieldSource.java
@@ -21,6 +21,7 @@ import java.util.Map;
 
 import org.apache.lucene.index.AtomicReaderContext;
 import org.apache.lucene.queries.function.FunctionValues;
+import org.apache.lucene.queries.function.docvalues.IntDocValues;
 import org.apache.lucene.search.FieldCache;
 
 /**
@@ -53,7 +54,7 @@ public class ByteFieldSource extends FieldCacheSource {
   public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
     final FieldCache.Bytes arr = cache.getBytes(readerContext.reader(), field, parser, false);
     
-    return new FunctionValues() {
+    return new IntDocValues(this) {
       @Override
       public byte byteVal(int doc) {
         return arr.get(doc);
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/BytesRefFieldSource.java b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/BytesRefFieldSource.java
index 49b707a..d464db8 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/BytesRefFieldSource.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/BytesRefFieldSource.java
@@ -26,6 +26,7 @@ import org.apache.lucene.index.FieldInfo;
 import org.apache.lucene.index.FieldInfo.DocValuesType;
 import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.docvalues.DocTermsIndexDocValues;
+import org.apache.lucene.queries.function.docvalues.StrDocValues;
 import org.apache.lucene.search.FieldCache;
 import org.apache.lucene.util.Bits;
 import org.apache.lucene.util.BytesRef;
@@ -49,7 +50,7 @@ public class BytesRefFieldSource extends FieldCacheSource {
     if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.BINARY) {
       final BinaryDocValues binaryValues = FieldCache.DEFAULT.getTerms(readerContext.reader(), field, true);
       final Bits docsWithField = FieldCache.DEFAULT.getDocsWithField(readerContext.reader(), field);
-      return new FunctionValues() {
+      return new StrDocValues(this) {
 
         @Override
         public boolean exists(int doc) {
@@ -80,21 +81,9 @@ public class BytesRefFieldSource extends FieldCacheSource {
         }
 
         @Override
-        public ValueFiller getValueFiller() {
-          return new ValueFiller() {
-            private final MutableValueStr mval = new MutableValueStr();
-
-            @Override
-            public MutableValue getValue() {
-              return mval;
-            }
-
-            @Override
-            public void fillValue(int doc) {
-              mval.exists = docsWithField.get(doc);
-              mval.value.copyBytes(binaryValues.get(doc));
-            }
-          };
+        public void fillStr(int doc, MutableValueStr mval) {
+          mval.exists = docsWithField.get(doc);
+          mval.value.copyBytes(binaryValues.get(doc));
         }
 
       };
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ConstValueSource.java b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ConstValueSource.java
index 457a87d..83b25e0 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ConstValueSource.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ConstValueSource.java
@@ -19,7 +19,7 @@ package org.apache.lucene.queries.function.valuesource;
 
 import org.apache.lucene.index.AtomicReaderContext;
 import org.apache.lucene.queries.function.FunctionValues;
-import org.apache.lucene.queries.function.docvalues.FloatDocValues;
+import org.apache.lucene.queries.function.docvalues.ConstDocValues.ConstFloatDocValues;
 
 import java.io.IOException;
 import java.util.Map;
@@ -43,35 +43,11 @@ public class ConstValueSource extends ConstNumberSource {
 
   @Override
   public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
-    return new FloatDocValues(this) {
-      @Override
-      public float floatVal(int doc) {
-        return constant;
-      }
-      @Override
-      public int intVal(int doc) {
-        return (int)constant;
-      }
-      @Override
-      public long longVal(int doc) {
-        return (long)constant;
-      }
-      @Override
-      public double doubleVal(int doc) {
-        return dv;
-      }
+    return new ConstFloatDocValues(constant,this) {
       @Override
       public String toString(int doc) {
         return description();
       }
-      @Override
-      public Object objectVal(int doc) {
-        return constant;
-      }
-      @Override
-      public boolean boolVal(int doc) {
-        return constant != 0.0f;
-      }
     };
   }
 
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DateFieldSource.java b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DateFieldSource.java
new file mode 100644
index 0000000..4ecbf2c
--- /dev/null
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DateFieldSource.java
@@ -0,0 +1,114 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.lucene.queries.function.valuesource;
+
+import java.io.IOException;
+import java.text.ParseException;
+import java.util.Date;
+import java.util.Map;
+
+import org.apache.lucene.index.AtomicReaderContext;
+import org.apache.lucene.queries.function.FunctionValues;
+import org.apache.lucene.queries.function.docvalues.DateDocValues;
+import org.apache.lucene.search.FieldCache;
+import org.apache.lucene.util.Bits;
+import org.apache.lucene.util.BytesRef;
+
+/**
+ * Extends {@link LongFieldSource} to have a field source that takes in 
+ * and returns {@link Date} values while working with long values internally.
+ */
+public class DateFieldSource extends LongFieldSource {
+
+  public DateFieldSource(String field) throws ParseException {
+    super(field, null);
+  }
+
+  public DateFieldSource(String field, FieldCache.LongParser parser) {
+    super(field, parser);
+  }
+
+  public long externalToLong(String extVal) {
+    return parser.parseLong(new BytesRef(extVal));
+  }
+
+  public Date longToObject(long val) {
+    return new Date(val);
+  }
+
+  @SuppressWarnings("deprecation")
+  public String exportDate(Date val) {
+    return val.toString();
+  }
+
+  @Override
+  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+    final FieldCache.Longs arr = cache.getLongs(readerContext.reader(), field, parser, true);
+    final Bits valid = cache.getDocsWithField(readerContext.reader(), field);
+    return new DateDocValues(this) {
+      @Override
+      public long longVal(int doc) {
+        return arr.get(doc);
+      }
+
+      @Override
+      public boolean exists(int doc) {
+        return valid.get(doc);
+      }
+
+      @Override
+      public Object objectVal(int doc) {
+        return exists(doc) ? longToObject(arr.get(doc)) : null;
+      }
+
+      @Override
+      public String strVal(int doc) {
+        return exists(doc) ? longToString(arr.get(doc)) : null;
+      }
+
+      @Override
+      public Date longToDate(long val) {
+        return longToObject(val);
+      }
+
+      @Override
+      public String dateToString(Date val) {
+        return exportDate(val);
+      }
+    };
+  }
+
+  @Override
+  public boolean equals(Object o) {
+    if (o.getClass() != this.getClass()) return false;
+    DateFieldSource other = (DateFieldSource) o;
+    if (parser==null) {
+      return field.equals(other.field);
+    } else {
+      return field.equals(other.field) && parser.equals(other.parser);
+    }
+  }
+
+  @Override
+  public int hashCode() {
+    int h = parser == null ? this.getClass().hashCode() : parser.getClass().hashCode();
+    h += super.hashCode();
+    return h;
+  }
+
+}
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DefFunction.java b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DefFunction.java
index 9087051..8f4ae05 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DefFunction.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DefFunction.java
@@ -24,6 +24,7 @@ import org.apache.lucene.index.AtomicReaderContext;
 import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.util.BytesRef;
+import org.apache.lucene.util.mutable.MutableValue;
 
 /**
  * {@link ValueSource} implementation which only returns the values from the provided
@@ -119,11 +120,35 @@ public class DefFunction extends MultiFunction {
         }
         return false;
       }
+      
+      @Override
+      public void fillValue(int doc, MutableValue mval) {
+        fillFunc(doc, mval);
+      }
+      
+      public void fillFunc(int doc, MutableValue mval) {
+        get(doc).fillValue(doc, mval);
+      }
+      
+      @Override
+      public ValueFiller getValueFiller(final MutableValue use) {
+        return new ValueFiller() {
+          
+          @Override
+          public MutableValue getValue() {
+            return use;
+          }
+
+          @Override
+          public void fillValue(int doc) {
+            fillFunc(doc, use);
+          }
+        };
+      }
 
       @Override
-      public ValueFiller getValueFiller() {
-        // TODO: need ValueSource.type() to determine correct type
-        return super.getValueFiller();
+      public MutableValue getNewValue() {
+        return valsArr[0].getNewValue();
       }
     };
   }
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DocFreqValueSource.java b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DocFreqValueSource.java
index 3b42539..2ed444a 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DocFreqValueSource.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DocFreqValueSource.java
@@ -21,104 +21,13 @@ import org.apache.lucene.index.AtomicReaderContext;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
-import org.apache.lucene.queries.function.docvalues.DoubleDocValues;
-import org.apache.lucene.queries.function.docvalues.IntDocValues;
+import org.apache.lucene.queries.function.docvalues.ConstDocValues.ConstIntDocValues;
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.util.BytesRef;
 
 import java.io.IOException;
 import java.util.Map;
 
-
-class ConstIntDocValues extends IntDocValues {
-  final int ival;
-  final float fval;
-  final double dval;
-  final long lval;
-  final String sval;
-  final ValueSource parent;
-
-  ConstIntDocValues(int val, ValueSource parent) {
-    super(parent);
-    ival = val;
-    fval = val;
-    dval = val;
-    lval = val;
-    sval = Integer.toString(val);
-    this.parent = parent;
-  }
-
-  @Override
-  public float floatVal(int doc) {
-    return fval;
-  }
-  @Override
-  public int intVal(int doc) {
-    return ival;
-  }
-  @Override
-  public long longVal(int doc) {
-    return lval;
-  }
-  @Override
-  public double doubleVal(int doc) {
-    return dval;
-  }
-  @Override
-  public String strVal(int doc) {
-    return sval;
-  }
-  @Override
-  public String toString(int doc) {
-    return parent.description() + '=' + sval;
-  }
-}
-
-class ConstDoubleDocValues extends DoubleDocValues {
-  final int ival;
-  final float fval;
-  final double dval;
-  final long lval;
-  final String sval;
-  final ValueSource parent;
-
-  ConstDoubleDocValues(double val, ValueSource parent) {
-    super(parent);
-    ival = (int)val;
-    fval = (float)val;
-    dval = val;
-    lval = (long)val;
-    sval = Double.toString(val);
-    this.parent = parent;
-  }
-
-  @Override
-  public float floatVal(int doc) {
-    return fval;
-  }
-  @Override
-  public int intVal(int doc) {
-    return ival;
-  }
-  @Override
-  public long longVal(int doc) {
-    return lval;
-  }
-  @Override
-  public double doubleVal(int doc) {
-    return dval;
-  }
-  @Override
-  public String strVal(int doc) {
-    return sval;
-  }
-  @Override
-  public String toString(int doc) {
-    return parent.description() + '=' + sval;
-  }
-}
-
-
 /**
  * <code>DocFreqValueSource</code> returns the number of documents containing the term.
  * @lucene.internal
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DoubleConstValueSource.java b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DoubleConstValueSource.java
index a3cea88..9ac529b 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DoubleConstValueSource.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DoubleConstValueSource.java
@@ -19,7 +19,7 @@ package org.apache.lucene.queries.function.valuesource;
 
 import org.apache.lucene.index.AtomicReaderContext;
 import org.apache.lucene.queries.function.FunctionValues;
-import org.apache.lucene.queries.function.docvalues.DoubleDocValues;
+import org.apache.lucene.queries.function.docvalues.ConstDocValues.ConstDoubleDocValues;
 
 import java.io.IOException;
 import java.util.Map;
@@ -45,37 +45,7 @@ public class DoubleConstValueSource extends ConstNumberSource {
 
   @Override
   public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
-    return new DoubleDocValues(this) {
-      @Override
-      public float floatVal(int doc) {
-        return fv;
-      }
-
-      @Override
-      public int intVal(int doc) {
-        return (int) lv;
-      }
-
-      @Override
-      public long longVal(int doc) {
-        return lv;
-      }
-
-      @Override
-      public double doubleVal(int doc) {
-        return constant;
-      }
-
-      @Override
-      public String strVal(int doc) {
-        return Double.toString(constant);
-      }
-
-      @Override
-      public Object objectVal(int doc) {
-        return constant;
-      }
-
+    return new ConstDoubleDocValues(constant, this) {
       @Override
       public String toString(int doc) {
         return description();
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DoubleFieldSource.java b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DoubleFieldSource.java
index 89d4a69..5a050e9 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DoubleFieldSource.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DoubleFieldSource.java
@@ -66,28 +66,7 @@ public class DoubleFieldSource extends FieldCacheSource {
       public boolean exists(int doc) {
         return arr.get(doc) != 0 || valid.get(doc);
       }
-
-      @Override
-      public ValueFiller getValueFiller() {
-        return new ValueFiller() {
-          private final MutableValueDouble mval = new MutableValueDouble();
-
-          @Override
-          public MutableValue getValue() {
-            return mval;
-          }
-
-          @Override
-          public void fillValue(int doc) {
-            mval.value = arr.get(doc);
-            mval.exists = mval.value != 0 || valid.get(doc);
-          }
-        };
-      }
-
-
-      };
-
+    };
   }
 
   @Override
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/EnumFieldSource.java b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/EnumFieldSource.java
index cd83c94..4edd3d8 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/EnumFieldSource.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/EnumFieldSource.java
@@ -102,50 +102,22 @@ public class EnumFieldSource extends FieldCacheSource {
     final Bits valid = cache.getDocsWithField(readerContext.reader(), field);
 
     return new IntDocValues(this) {
-      final MutableValueInt val = new MutableValueInt();
-
-      @Override
-      public float floatVal(int doc) {
-        return (float) arr.get(doc);
-      }
-
       @Override
       public int intVal(int doc) {
         return arr.get(doc);
       }
 
       @Override
-      public long longVal(int doc) {
-        return (long) arr.get(doc);
-      }
-
-      @Override
-      public double doubleVal(int doc) {
-        return (double) arr.get(doc);
-      }
-
-      @Override
       public String strVal(int doc) {
         Integer intValue = arr.get(doc);
         return intValueToStringValue(intValue);
       }
 
       @Override
-      public Object objectVal(int doc) {
-        return valid.get(doc) ? arr.get(doc) : null;
-      }
-
-      @Override
       public boolean exists(int doc) {
         return valid.get(doc);
       }
-
-      @Override
-      public String toString(int doc) {
-        return description() + '=' + strVal(doc);
-      }
-
-
+      
       @Override
       public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {
         Integer lower = stringValueToIntValue(lowerVal);
@@ -178,26 +150,6 @@ public class EnumFieldSource extends FieldCacheSource {
           }
         };
       }
-
-      @Override
-      public ValueFiller getValueFiller() {
-        return new ValueFiller() {
-          private final MutableValueInt mval = new MutableValueInt();
-
-          @Override
-          public MutableValue getValue() {
-            return mval;
-          }
-
-          @Override
-          public void fillValue(int doc) {
-            mval.value = arr.get(doc);
-            mval.exists = valid.get(doc);
-          }
-        };
-      }
-
-
     };
   }
 
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/FloatFieldSource.java b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/FloatFieldSource.java
index 3c7f3b1..5d1a9a7 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/FloatFieldSource.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/FloatFieldSource.java
@@ -70,25 +70,6 @@ public class FloatFieldSource extends FieldCacheSource {
       public boolean exists(int doc) {
         return arr.get(doc) != 0 || valid.get(doc);
       }
-
-      @Override
-      public ValueFiller getValueFiller() {
-        return new ValueFiller() {
-          private final MutableValueFloat mval = new MutableValueFloat();
-
-          @Override
-          public MutableValue getValue() {
-            return mval;
-          }
-
-          @Override
-          public void fillValue(int doc) {
-            mval.value = arr.get(doc);
-            mval.exists = mval.value != 0 || valid.get(doc);
-          }
-        };
-      }
-
     };
   }
 
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IDFValueSource.java b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IDFValueSource.java
index 0c62020..74d35ec 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IDFValueSource.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IDFValueSource.java
@@ -19,6 +19,7 @@ package org.apache.lucene.queries.function.valuesource;
 
 import org.apache.lucene.index.*;
 import org.apache.lucene.queries.function.FunctionValues;
+import org.apache.lucene.queries.function.docvalues.ConstDocValues.ConstDoubleDocValues;
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.similarities.PerFieldSimilarityWrapper;
 import org.apache.lucene.search.similarities.Similarity;
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IfFunction.java b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IfFunction.java
index 3cf058e..588d9e8 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IfFunction.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IfFunction.java
@@ -25,6 +25,7 @@ import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.util.BytesRef;
+import org.apache.lucene.util.mutable.MutableValue;
 
 
 /**
@@ -104,12 +105,35 @@ public class IfFunction extends BoolFunction {
       public boolean exists(int doc) {
         return true; // TODO: flow through to any sub-sources?
       }
+      
+      @Override
+      public void fillValue(int doc, MutableValue mval) {
+        fillIf(doc,mval);
+      }
+      
+      public void fillIf(int doc, MutableValue mval) {
+        (ifVals.boolVal(doc) ? trueVals:falseVals).fillValue(doc, mval);
+      }
 
       @Override
-      public ValueFiller getValueFiller() {
-        // TODO: we need types of trueSource / falseSource to handle this
-        // for now, use float.
-        return super.getValueFiller();
+      public ValueFiller getValueFiller(final MutableValue use) {
+        return new ValueFiller() {
+
+          @Override
+          public MutableValue getValue() {
+            return use;
+          }
+
+          @Override
+          public void fillValue(int doc) {
+            fillIf(doc,use);
+          }
+        };
+      }
+      
+      @Override
+      public MutableValue getNewValue() {
+        return trueVals.getNewValue();
       }
 
       @Override
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IntFieldSource.java b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IntFieldSource.java
index a6ca74e..93ced61 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IntFieldSource.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IntFieldSource.java
@@ -58,12 +58,6 @@ public class IntFieldSource extends FieldCacheSource {
     final Bits valid = cache.getDocsWithField(readerContext.reader(), field);
     
     return new IntDocValues(this) {
-      final MutableValueInt val = new MutableValueInt();
-      
-      @Override
-      public float floatVal(int doc) {
-        return (float)arr.get(doc);
-      }
 
       @Override
       public int intVal(int doc) {
@@ -71,21 +65,6 @@ public class IntFieldSource extends FieldCacheSource {
       }
 
       @Override
-      public long longVal(int doc) {
-        return (long)arr.get(doc);
-      }
-
-      @Override
-      public double doubleVal(int doc) {
-        return (double)arr.get(doc);
-      }
-
-      @Override
-      public String strVal(int doc) {
-        return Integer.toString(arr.get(doc));
-      }
-
-      @Override
       public Object objectVal(int doc) {
         return valid.get(doc) ? arr.get(doc) : null;
       }
@@ -94,31 +73,6 @@ public class IntFieldSource extends FieldCacheSource {
       public boolean exists(int doc) {
         return arr.get(doc) != 0 || valid.get(doc);
       }
-
-      @Override
-      public String toString(int doc) {
-        return description() + '=' + intVal(doc);
-      }
-
-      @Override
-      public ValueFiller getValueFiller() {
-        return new ValueFiller() {
-          private final MutableValueInt mval = new MutableValueInt();
-
-          @Override
-          public MutableValue getValue() {
-            return mval;
-          }
-
-          @Override
-          public void fillValue(int doc) {
-            mval.value = arr.get(doc);
-            mval.exists = mval.value != 0 || valid.get(doc);
-          }
-        };
-      }
-
-      
     };
   }
 
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/LongFieldSource.java b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/LongFieldSource.java
index 6270531..2391c3a 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/LongFieldSource.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/LongFieldSource.java
@@ -94,25 +94,6 @@ public class LongFieldSource extends FieldCacheSource {
       protected long externalToLong(String extVal) {
         return LongFieldSource.this.externalToLong(extVal);
       }
-
-      @Override
-      public ValueFiller getValueFiller() {
-        return new ValueFiller() {
-          private final MutableValueLong mval = newMutableValueLong();
-
-          @Override
-          public MutableValue getValue() {
-            return mval;
-          }
-
-          @Override
-          public void fillValue(int doc) {
-            mval.value = arr.get(doc);
-            mval.exists = mval.value != 0 || valid.get(doc);
-          }
-        };
-      }
-
     };
   }
 
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MaxDocValueSource.java b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MaxDocValueSource.java
index 66c58e5..8de85f9 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MaxDocValueSource.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MaxDocValueSource.java
@@ -20,6 +20,7 @@ import org.apache.lucene.index.AtomicReaderContext;
 import org.apache.lucene.index.IndexReader; // javadocs
 import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
+import org.apache.lucene.queries.function.docvalues.ConstDocValues.ConstIntDocValues;
 import org.apache.lucene.search.IndexSearcher;
 
 import java.io.IOException;
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFunction.java b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFunction.java
index d3272a7..a572937 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFunction.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFunction.java
@@ -70,7 +70,7 @@ public abstract class MultiFunction extends ValueSource {
     return valsArr;
   }
 
-  public class Values extends FunctionValues {
+  public abstract class Values extends FunctionValues {
     final FunctionValues[] valsArr;
 
     public Values(FunctionValues[] valsArr) {
@@ -81,12 +81,6 @@ public abstract class MultiFunction extends ValueSource {
     public String toString(int doc) {
       return MultiFunction.toString(name(), valsArr, doc);
     }
-
-    @Override
-    public ValueFiller getValueFiller() {
-      // TODO: need ValueSource.type() to determine correct type
-      return super.getValueFiller();
-    }
   }
 
 
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NormValueSource.java b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NormValueSource.java
index 81e4067..2a50269 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NormValueSource.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NormValueSource.java
@@ -21,6 +21,7 @@ import org.apache.lucene.index.AtomicReaderContext;
 import org.apache.lucene.index.NumericDocValues;
 import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
+import org.apache.lucene.queries.function.docvalues.ConstDocValues.ConstDoubleDocValues;
 import org.apache.lucene.queries.function.docvalues.FloatDocValues;
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.similarities.TFIDFSimilarity;
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NumDocsValueSource.java b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NumDocsValueSource.java
index 3d874ee..b257128 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NumDocsValueSource.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NumDocsValueSource.java
@@ -21,6 +21,7 @@ import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.ReaderUtil;
 import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
+import org.apache.lucene.queries.function.docvalues.ConstDocValues.ConstIntDocValues;
 
 import java.io.IOException;
 import java.util.Map;
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/OrdFieldSource.java b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/OrdFieldSource.java
index ab937a1..e400218 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/OrdFieldSource.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/OrdFieldSource.java
@@ -93,24 +93,6 @@ public class OrdFieldSource extends ValueSource {
       public boolean exists(int doc) {
         return sindex.getOrd(doc+off) != 0;
       }
-
-      @Override
-      public ValueFiller getValueFiller() {
-        return new ValueFiller() {
-          private final MutableValueInt mval = new MutableValueInt();
-
-          @Override
-          public MutableValue getValue() {
-            return mval;
-          }
-
-          @Override
-          public void fillValue(int doc) {
-            mval.value = sindex.getOrd(doc);
-            mval.exists = mval.value!=0;
-          }
-        };
-      }
     };
   }
 
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/QueryValueSource.java b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/QueryValueSource.java
index 10a5f0d..a1161db 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/QueryValueSource.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/QueryValueSource.java
@@ -189,59 +189,47 @@ class QueryDocValues extends FloatDocValues {
      }
    }
 
+  //
+  // TODO: if we want to support more than one value-filler or a value-filler in conjunction with
+  // the FunctionValues, then members like "scorer" should be per ValueFiller instance.
+  // Or we can say that the user should just instantiate multiple FunctionValues.
+  //
   @Override
-  public ValueFiller getValueFiller() {
-    //
-    // TODO: if we want to support more than one value-filler or a value-filler in conjunction with
-    // the FunctionValues, then members like "scorer" should be per ValueFiller instance.
-    // Or we can say that the user should just instantiate multiple FunctionValues.
-    //
-    return new ValueFiller() {
-      private final MutableValueFloat mval = new MutableValueFloat();
-
-      @Override
-      public MutableValue getValue() {
-        return mval;
+  public void fillFloat(int doc, MutableValueFloat mval) {
+    try {
+      if (noMatches) {
+        mval.value = defVal;
+        mval.exists = false;
+        return;
+      }
+      scorer = weight.scorer(readerContext, acceptDocs);
+      scorerDoc = -1;
+      if (scorer==null) {
+        noMatches = true;
+        mval.value = defVal;
+        mval.exists = false;
+        return;
       }
+      lastDocRequested = doc;
 
-      @Override
-      public void fillValue(int doc) {
-        try {
-          if (noMatches) {
-            mval.value = defVal;
-            mval.exists = false;
-            return;
-          }
-          scorer = weight.scorer(readerContext, acceptDocs);
-          scorerDoc = -1;
-          if (scorer==null) {
-            noMatches = true;
-            mval.value = defVal;
-            mval.exists = false;
-            return;
-          }
-          lastDocRequested = doc;
-
-          if (scorerDoc < doc) {
-            scorerDoc = scorer.advance(doc);
-          }
-
-          if (scorerDoc > doc) {
-            // query doesn't match this document... either because we hit the
-            // end, or because the next doc is after this doc.
-            mval.value = defVal;
-            mval.exists = false;
-            return;
-          }
-
-          // a match!
-          mval.value = scorer.score();
-          mval.exists = true;
-        } catch (IOException e) {
-          throw new RuntimeException("caught exception in QueryDocVals("+q+") doc="+doc, e);
-        }
+      if (scorerDoc < doc) {
+        scorerDoc = scorer.advance(doc);
+      }
+
+      if (scorerDoc > doc) {
+        // query doesn't match this document... either because we hit the
+        // end, or because the next doc is after this doc.
+        mval.value = defVal;
+        mval.exists = false;
+        return;
       }
-    };
+
+      // a match!
+      mval.value = scorer.score();
+      mval.exists = true;
+    } catch (IOException e) {
+      throw new RuntimeException("caught exception in QueryDocVals("+q+") doc="+doc, e);
+    }
   }
 
   @Override
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ShortFieldSource.java b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ShortFieldSource.java
index 92ba439..e47d0f9 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ShortFieldSource.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ShortFieldSource.java
@@ -21,6 +21,7 @@ import java.util.Map;
 
 import org.apache.lucene.index.AtomicReaderContext;
 import org.apache.lucene.queries.function.FunctionValues;
+import org.apache.lucene.queries.function.docvalues.IntDocValues;
 import org.apache.lucene.search.FieldCache;
 
 
@@ -52,7 +53,7 @@ public class ShortFieldSource extends FieldCacheSource {
   public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
     final FieldCache.Shorts arr = cache.getShorts(readerContext.reader(), field, parser, false);
     
-    return new FunctionValues() {
+    return new IntDocValues(this) {
       @Override
       public byte byteVal(int doc) {
         return (byte) arr.get(doc);
@@ -87,12 +88,6 @@ public class ShortFieldSource extends FieldCacheSource {
       public String strVal(int doc) {
         return Short.toString(arr.get(doc));
       }
-
-      @Override
-      public String toString(int doc) {
-        return description() + '=' + shortVal(doc);
-      }
-
     };
   }
 
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/SumTotalTermFreqValueSource.java b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/SumTotalTermFreqValueSource.java
index e9ab075..55d9562 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/SumTotalTermFreqValueSource.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/SumTotalTermFreqValueSource.java
@@ -22,7 +22,7 @@ import org.apache.lucene.index.Fields;
 import org.apache.lucene.index.Terms;
 import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
-import org.apache.lucene.queries.function.docvalues.LongDocValues;
+import org.apache.lucene.queries.function.docvalues.ConstDocValues.ConstLongDocValues;
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.util.BytesRef;
 
@@ -74,12 +74,7 @@ public class SumTotalTermFreqValueSource extends ValueSource {
       }
     }
     final long ttf = sumTotalTermFreq;
-    context.put(this, new LongDocValues(this) {
-      @Override
-      public long longVal(int doc) {
-        return ttf;
-      }
-    });
+    context.put(this, new ConstLongDocValues(ttf, this));
   }
 
   @Override
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/TotalTermFreqValueSource.java b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/TotalTermFreqValueSource.java
index 90ae4e1..b795b20 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/TotalTermFreqValueSource.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/TotalTermFreqValueSource.java
@@ -21,7 +21,7 @@ import org.apache.lucene.index.AtomicReaderContext;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
-import org.apache.lucene.queries.function.docvalues.LongDocValues;
+import org.apache.lucene.queries.function.docvalues.ConstDocValues.ConstLongDocValues;
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.util.BytesRef;
 
@@ -75,12 +75,7 @@ public class TotalTermFreqValueSource extends ValueSource {
       }
     }
     final long ttf = totalTermFreq;
-    context.put(this, new LongDocValues(this) {
-      @Override
-      public long longVal(int doc) {
-        return ttf;
-      }
-    });
+    context.put(this, new ConstLongDocValues(ttf, this));
   }
 
   @Override
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/VectorValueSource.java b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/VectorValueSource.java
index 8d443b4..bca8ce2 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/VectorValueSource.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/VectorValueSource.java
@@ -20,6 +20,7 @@ import org.apache.lucene.index.AtomicReaderContext;
 import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.util.mutable.MutableValue;
 
 import java.io.IOException;
 import java.util.List;
@@ -101,6 +102,15 @@ public class VectorValueSource extends MultiValueSource {
         public String toString(int doc) {
           return name() + "(" + x.toString(doc) + "," + y.toString(doc) + ")";
         }
+
+        @Override
+        public ValueFiller getValueFiller(MutableValue mval) { throw new UnsupportedOperationException(); }
+
+        @Override
+        public void fillValue(int doc, MutableValue mval) { throw new UnsupportedOperationException(); }
+
+        @Override
+        public MutableValue getNewValue() { throw new UnsupportedOperationException(); }
       };
     }
 
@@ -176,6 +186,15 @@ public class VectorValueSource extends MultiValueSource {
         sb.append(')');
         return sb.toString();
       }
+
+      @Override
+      public ValueFiller getValueFiller(MutableValue mval) { throw new UnsupportedOperationException(); }
+
+      @Override
+      public void fillValue(int doc, MutableValue mval) { throw new UnsupportedOperationException(); }
+
+      @Override
+      public MutableValue getNewValue() { throw new UnsupportedOperationException(); }
     };
   }
 
diff --git a/lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxValueSource.java b/lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxValueSource.java
index 5e62260..663c9be 100644
--- a/lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxValueSource.java
+++ b/lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxValueSource.java
@@ -18,14 +18,17 @@ package org.apache.lucene.spatial.bbox;
  */
 
 import com.spatial4j.core.shape.Rectangle;
+
 import org.apache.lucene.index.AtomicReader;
 import org.apache.lucene.index.AtomicReaderContext;
 import org.apache.lucene.index.DocValues;
 import org.apache.lucene.index.NumericDocValues;
 import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
+import org.apache.lucene.queries.function.FunctionValues.ValueFiller;
 import org.apache.lucene.search.Explanation;
 import org.apache.lucene.util.Bits;
+import org.apache.lucene.util.mutable.MutableValue;
 
 import java.io.IOException;
 import java.util.Map;
@@ -94,6 +97,15 @@ class BBoxValueSource extends ValueSource {
       public String toString(int doc) {
         return description() + '=' + strVal(doc);
       }
+
+      @Override
+      public ValueFiller getValueFiller(MutableValue mval) { throw new UnsupportedOperationException(); }
+
+      @Override
+      public void fillValue(int doc, MutableValue mval) { throw new UnsupportedOperationException(); }
+
+      @Override
+      public MutableValue getNewValue() { throw new UnsupportedOperationException(); }
     };
   }
 
diff --git a/lucene/spatial/src/java/org/apache/lucene/spatial/serialized/SerializedDVStrategy.java b/lucene/spatial/src/java/org/apache/lucene/spatial/serialized/SerializedDVStrategy.java
index 9e0ea8d..a580d6e 100644
--- a/lucene/spatial/src/java/org/apache/lucene/spatial/serialized/SerializedDVStrategy.java
+++ b/lucene/spatial/src/java/org/apache/lucene/spatial/serialized/SerializedDVStrategy.java
@@ -21,12 +21,14 @@ import com.spatial4j.core.context.SpatialContext;
 import com.spatial4j.core.io.BinaryCodec;
 import com.spatial4j.core.shape.Point;
 import com.spatial4j.core.shape.Shape;
+
 import org.apache.lucene.document.BinaryDocValuesField;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.index.AtomicReaderContext;
 import org.apache.lucene.index.BinaryDocValues;
 import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
+import org.apache.lucene.queries.function.FunctionValues.ValueFiller;
 import org.apache.lucene.search.DocIdSet;
 import org.apache.lucene.search.DocIdSetIterator;
 import org.apache.lucene.search.Explanation;
@@ -38,6 +40,7 @@ import org.apache.lucene.spatial.util.DistanceToShapeValueSource;
 import org.apache.lucene.spatial.util.ShapePredicateValueSource;
 import org.apache.lucene.util.Bits;
 import org.apache.lucene.util.BytesRef;
+import org.apache.lucene.util.mutable.MutableValue;
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
@@ -262,6 +265,15 @@ public class SerializedDVStrategy extends SpatialStrategy {
           return description() + "=" + objectVal(doc);//TODO truncate?
         }
 
+        @Override
+        public ValueFiller getValueFiller(MutableValue mval) { throw new UnsupportedOperationException(); }
+
+        @Override
+        public void fillValue(int doc, MutableValue mval) { throw new UnsupportedOperationException(); }
+
+        @Override
+        public MutableValue getNewValue() { throw new UnsupportedOperationException(); }
+
       };
     }
 
diff --git a/lucene/spatial/src/java/org/apache/lucene/spatial/util/CachingDoubleValueSource.java b/lucene/spatial/src/java/org/apache/lucene/spatial/util/CachingDoubleValueSource.java
index dd2b411..e3e7324 100644
--- a/lucene/spatial/src/java/org/apache/lucene/spatial/util/CachingDoubleValueSource.java
+++ b/lucene/spatial/src/java/org/apache/lucene/spatial/util/CachingDoubleValueSource.java
@@ -20,6 +20,7 @@ package org.apache.lucene.spatial.util;
 import org.apache.lucene.index.AtomicReaderContext;
 import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
+import org.apache.lucene.queries.function.docvalues.DoubleDocValues;
 
 import java.io.IOException;
 import java.util.HashMap;
@@ -50,7 +51,7 @@ public class CachingDoubleValueSource extends ValueSource {
   public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
     final int base = readerContext.docBase;
     final FunctionValues vals = source.getValues(context,readerContext);
-    return new FunctionValues() {
+    return new DoubleDocValues(this) {
 
       @Override
       public double doubleVal(int doc) {
@@ -64,11 +65,6 @@ public class CachingDoubleValueSource extends ValueSource {
       }
 
       @Override
-      public float floatVal(int doc) {
-        return (float)doubleVal(doc);
-      }
-
-      @Override
       public String toString(int doc) {
         return doubleVal(doc)+"";
       }
diff --git a/lucene/spatial/src/java/org/apache/lucene/spatial/util/ShapeFieldCacheDistanceValueSource.java b/lucene/spatial/src/java/org/apache/lucene/spatial/util/ShapeFieldCacheDistanceValueSource.java
index b99e9de..10256ac 100644
--- a/lucene/spatial/src/java/org/apache/lucene/spatial/util/ShapeFieldCacheDistanceValueSource.java
+++ b/lucene/spatial/src/java/org/apache/lucene/spatial/util/ShapeFieldCacheDistanceValueSource.java
@@ -20,9 +20,11 @@ package org.apache.lucene.spatial.util;
 import com.spatial4j.core.context.SpatialContext;
 import com.spatial4j.core.distance.DistanceCalculator;
 import com.spatial4j.core.shape.Point;
+
 import org.apache.lucene.index.AtomicReaderContext;
 import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
+import org.apache.lucene.queries.function.docvalues.DoubleDocValues;
 
 import java.io.IOException;
 import java.util.List;
@@ -58,7 +60,7 @@ public class ShapeFieldCacheDistanceValueSource extends ValueSource {
 
   @Override
   public FunctionValues getValues(Map context, final AtomicReaderContext readerContext) throws IOException {
-    return new FunctionValues() {
+    return new DoubleDocValues(this) {
       private final ShapeFieldCache<Point> cache =
           provider.getCache(readerContext.reader());
       private final Point from = ShapeFieldCacheDistanceValueSource.this.from;
@@ -66,11 +68,6 @@ public class ShapeFieldCacheDistanceValueSource extends ValueSource {
       private final double nullValue = (ctx.isGeo() ? 180 * multiplier : Double.MAX_VALUE);
 
       @Override
-      public float floatVal(int doc) {
-        return (float) doubleVal(doc);
-      }
-
-      @Override
       public double doubleVal(int doc) {
 
         List<Point> vals = cache.getShapes( doc );
@@ -83,11 +80,6 @@ public class ShapeFieldCacheDistanceValueSource extends ValueSource {
         }
         return nullValue;
       }
-
-      @Override
-      public String toString(int doc) {
-        return description() + "=" + floatVal(doc);
-      }
     };
   }
 
diff --git a/lucene/spatial/src/java/org/apache/lucene/spatial/vector/DistanceValueSource.java b/lucene/spatial/src/java/org/apache/lucene/spatial/vector/DistanceValueSource.java
index ba9621d..82c9783 100644
--- a/lucene/spatial/src/java/org/apache/lucene/spatial/vector/DistanceValueSource.java
+++ b/lucene/spatial/src/java/org/apache/lucene/spatial/vector/DistanceValueSource.java
@@ -19,10 +19,12 @@ package org.apache.lucene.spatial.vector;
 
 import com.spatial4j.core.distance.DistanceCalculator;
 import com.spatial4j.core.shape.Point;
+
 import org.apache.lucene.index.AtomicReader;
 import org.apache.lucene.index.AtomicReaderContext;
 import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
+import org.apache.lucene.queries.function.docvalues.DoubleDocValues;
 import org.apache.lucene.search.FieldCache;
 import org.apache.lucene.util.Bits;
 
@@ -70,7 +72,7 @@ public class DistanceValueSource extends ValueSource {
     final Bits validX =  FieldCache.DEFAULT.getDocsWithField(reader, strategy.getFieldNameX());
     final Bits validY =  FieldCache.DEFAULT.getDocsWithField(reader, strategy.getFieldNameY());
 
-    return new FunctionValues() {
+    return new DoubleDocValues(this) {
 
       private final Point from = DistanceValueSource.this.from;
       private final DistanceCalculator calculator = strategy.getSpatialContext().getDistCalc();
@@ -78,11 +80,6 @@ public class DistanceValueSource extends ValueSource {
           (strategy.getSpatialContext().isGeo() ? 180 * multiplier : Double.MAX_VALUE);
 
       @Override
-      public float floatVal(int doc) {
-        return (float) doubleVal(doc);
-      }
-
-      @Override
       public double doubleVal(int doc) {
         // make sure it has minX and area
         if (validX.get(doc)) {
@@ -91,11 +88,6 @@ public class DistanceValueSource extends ValueSource {
         }
         return nullValue;
       }
-
-      @Override
-      public String toString(int doc) {
-        return description() + "=" + floatVal(doc);
-      }
     };
   }
 
