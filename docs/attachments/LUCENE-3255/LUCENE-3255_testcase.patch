Index: lucene/src/test/org/apache/lucene/index/TestBadSegmentsFile.java
===================================================================
--- lucene/src/test/org/apache/lucene/index/TestBadSegmentsFile.java	(revision 0)
+++ lucene/src/test/org/apache/lucene/index/TestBadSegmentsFile.java	(revision 0)
@@ -0,0 +1,57 @@
+package org.apache.lucene.index;
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+import org.apache.lucene.analysis.MockAnalyzer;
+import org.apache.lucene.document.Document;
+import org.apache.lucene.index.IndexWriterConfig.OpenMode;
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.store.IndexOutput;
+import org.apache.lucene.util.LuceneTestCase;
+
+public class TestBadSegmentsFile extends LuceneTestCase {
+
+  public void testBadSegment() throws Exception {
+    Directory dir = newDirectory();
+    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,
+        new MockAnalyzer(random));
+    config.setOpenMode(OpenMode.CREATE);
+    IndexWriter w = new IndexWriter(dir, config);
+    Document doc = new Document();
+    w.addDocument(doc);
+    w.commit();
+    w.close();
+    IndexReader r = IndexReader.open(dir, true);
+    assertEquals(r.maxDoc(), 1);
+    IndexReader[] sr = r.getSequentialSubReaders();
+    assertEquals(1, sr.length);
+    long nextGen = SegmentInfos.getCurrentSegmentGeneration(dir) + 1;
+    r.close();
+    IndexOutput out = dir.createOutput("segments_" + nextGen);
+    for (int i = 0; i < 16; i++) {
+      out.writeByte((byte) 0);
+    }
+    out.close();
+    SegmentInfos.setInfoStream(System.out);
+    r = IndexReader.open(dir, true);
+    assertEquals("The corrupt segments file " + "segments_" + nextGen
+        + "should be safely ignored and existing content remain intact", 1,
+        r.maxDoc());
+    r.close();
+    dir.close();
+  }
+
+}
