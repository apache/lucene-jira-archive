diff --git a/lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.java b/lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.java
index 53f13b6..f482f87 100644
--- a/lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.java
+++ b/lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.java
@@ -43,9 +43,10 @@
 public class ToChildBlockJoinQuery extends Query {
 
   /** Message thrown from {@link
-   *  ToChildBlockJoinScorer#validateParentDoc} on mis-use,
+   *  ToChildBlockJoinScorer#validateParentDoc} on misuse,
    *  when the parent query incorrectly returns child docs. */
-  static final String INVALID_QUERY_MESSAGE = "Parent query yields document which is not matched by parents filter, docID=";
+  static final String INVALID_QUERY_MESSAGE = "Parent query must not match any docs beside parent filter. "
+      + "Combine them as must (+) and must-not (-) clauses to find a problem doc. docID=";
   static final String ILLEGAL_ADVANCE_ON_PARENT = "Expect to be advanced on child docs only. got docID=";
 
   private final BitSetProducer parentsFilter;
diff --git a/lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.java b/lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.java
index 18a5d20..3abdeeb 100644
--- a/lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.java
+++ b/lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.java
@@ -283,9 +283,7 @@
 
           // Parent & child docs are supposed to be
           // orthogonal:
-          if (nextChildDoc == parentDoc) {
-            throw new IllegalStateException("child query must only match non-parent docs, but parent docID=" + nextChildDoc + " matched childScorer=" + childScorer.getClass());
-          }
+          checkOrthogonal(nextChildDoc, parentDoc);
 
           //System.out.println("  parentDoc=" + parentDoc);
           assert parentDoc != DocIdSetIterator.NO_MORE_DOCS;
@@ -326,9 +324,7 @@
 
           // Parent & child docs are supposed to be
           // orthogonal:
-          if (nextChildDoc == parentDoc) {
-            throw new IllegalStateException("child query must only match non-parent docs, but parent docID=" + nextChildDoc + " matched childScorer=" + childScorer.getClass());
-          }
+          checkOrthogonal(nextChildDoc, parentDoc);
 
           switch(scoreMode) {
           case Avg:
@@ -381,9 +377,7 @@
           }
 
           // Parent & child docs are supposed to be orthogonal:
-          if (nextChildDoc == prevParentDoc) {
-            throw new IllegalStateException("child query must only match non-parent docs, but parent docID=" + nextChildDoc + " matched childScorer=" + childScorer.getClass());
-          }
+          checkOrthogonal(nextChildDoc, prevParentDoc);
 
           final int nd = nextDoc();
           //System.out.println("  return nextParentDoc=" + nd);
@@ -402,6 +396,15 @@
       };
     }
 
+    private void checkOrthogonal(int childDoc, int parentDoc) {
+      if (childDoc==parentDoc) {
+        throw new IllegalStateException("Child query must not match same docs with parent filter. "
+             + "Combine them as must clauses (+) to find a problem doc. "
+             + "docId=" + nextChildDoc + ", " + childScorer.getClass());
+        
+      }
+    }
+
     @Override
     public int docID() {
       return parentDoc;
diff --git a/lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation.java b/lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation.java
index 565578c..aa68d09 100644
--- a/lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation.java
+++ b/lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation.java
@@ -84,7 +84,7 @@
     IllegalStateException expected = expectThrows(IllegalStateException.class, () -> {
       indexSearcher.search(blockJoinQuery, 1);
     });
-    assertTrue(expected.getMessage() != null && expected.getMessage().contains("child query must only match non-parent docs"));
+    assertTrue(expected.getMessage() != null && expected.getMessage().contains("Child query must not match same docs with parent filter"));
   }
 
   public void testAdvanceValidationForToParentBjq() throws Exception {
@@ -103,7 +103,7 @@
     IllegalStateException expected = expectThrows(IllegalStateException.class, () -> {
       indexSearcher.search(conjunctionQuery.build(), 1);
     });
-    assertTrue(expected.getMessage() != null && expected.getMessage().contains("child query must only match non-parent docs"));
+    assertTrue(expected.getMessage() != null && expected.getMessage().contains("Child query must not match same docs with parent filter"));
   }
 
   public void testNextDocValidationForToChildBjq() throws Exception {
