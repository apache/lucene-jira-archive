diff --git a/lucene/core/src/java/org/apache/lucene/index/CheckIndex.java b/lucene/core/src/java/org/apache/lucene/index/CheckIndex.java
index 285bed28a6a..3f2c621b99e 100644
--- a/lucene/core/src/java/org/apache/lucene/index/CheckIndex.java
+++ b/lucene/core/src/java/org/apache/lucene/index/CheckIndex.java
@@ -1287,7 +1287,13 @@ public final class CheckIndex implements Closeable {
       }
       for (FieldInfo info : reader.getFieldInfos()) {
         if (info.hasNorms()) {
-          checkNumericDocValues(info.name, normsReader.getNorms(info), normsReader.getNorms(info));
+          int expectedCount = reader.getDocCount(info.name);
+          int actualCount =
+              checkNormValues(info.name, normsReader.getNorms(info), normsReader.getNorms(info));
+          if (actualCount != expectedCount) {
+            throw new CheckIndexException(
+                "actual norm count: " + actualCount + " but expected: " + expectedCount);
+          }
           ++status.totFields;
         }
       }
@@ -3432,6 +3438,38 @@ public final class CheckIndex implements Closeable {
     }
   }
 
+  /** Similar to checkNumericDocValues, but specialized for norms checks. */
+  private static int checkNormValues(String fieldName, NumericDocValues ndv, NumericDocValues ndv2)
+      throws IOException {
+    if (ndv.docID() != -1) {
+      throw new CheckIndexException(
+          "dv iterator for field: "
+              + fieldName
+              + " should start at docID=-1, but got "
+              + ndv.docID());
+    }
+    int count = 0;
+    for (int doc = ndv.nextDoc(); doc != NO_MORE_DOCS; doc = ndv.nextDoc()) {
+      long value = ndv.longValue();
+
+      // TODO: LUCENE-10271, stop writing ghost values because elasticsearch users abuse
+      // length normalization / have wrong analysis chains
+      if (value != 0) {
+        count++;
+      }
+
+      if (ndv2.advanceExact(doc) == false) {
+        throw new CheckIndexException("advanceExact did not find matching doc ID: " + doc);
+      }
+      long value2 = ndv2.longValue();
+      if (value != value2) {
+        throw new CheckIndexException(
+            "advanceExact reports different value: " + value + " != " + value2);
+      }
+    }
+    return count;
+  }
+
   private static void checkDocValues(
       FieldInfo fi,
       DocValuesProducer dvReader,
