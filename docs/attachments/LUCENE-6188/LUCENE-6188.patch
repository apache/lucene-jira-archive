diff --git dev-tools/scripts/checkJavaDocs.py dev-tools/scripts/checkJavaDocs.py
index b8a6599..e70cd68 100644
--- dev-tools/scripts/checkJavaDocs.py
+++ dev-tools/scripts/checkJavaDocs.py
@@ -20,7 +20,6 @@ import re
 reHREF = re.compile('<a.*?>(.*?)</a>', re.IGNORECASE)
 
 reMarkup = re.compile('<.*?>')
-reDivBlock = re.compile('<div class="block">(.*?)</div>', re.IGNORECASE)
 reCaption = re.compile('<caption><span>(.*?)</span>', re.IGNORECASE)
 reTDLastNested = re.compile('^<td class="colLast"><code><strong><a href="[^>]*\.([^>]*?)\.html" title="class in[^>]*">', re.IGNORECASE)
 reTDLast = re.compile('^<td class="colLast"><code><strong><a href="[^>]*#([^>]*?)">', re.IGNORECASE)
@@ -31,128 +30,12 @@ reMethodDetail = re.compile('^<h3>Method Detail</h3>$', re.IGNORECASE)
 reMethodDetailAnchor = re.compile('^(?:</a>)?<a name="([^>]*?)">$', re.IGNORECASE)
 reMethodOverridden = re.compile('^<dt><strong>(Specified by:|Overrides:)</strong></dt>$', re.IGNORECASE)
 
-reTag = re.compile("(?i)<(\/?\w+)((\s+\w+(\s*=\s*(?:\".*?\"|'.*?'|[^'\">\s]+))?)+\s*|\s*)\/?>")
-
-def verifyHTML(s):
-
-  stack = []
-  upto = 0
-  while True:
-    m = reTag.search(s, upto)
-    if m is None:
-      break
-    tag = m.group(1)
-    upto = m.end(0)
-
-    if tag[:1] == '/':
-      justTag = tag[1:]
-    else:
-      justTag = tag
-      
-    if justTag.lower() in ('br', 'li', 'p', 'col'):
-      continue
-
-    if tag[:1] == '/':
-      if len(stack) == 0:
-        raise RuntimeError('saw closing "%s" without opening <%s...>' % (m.group(0), tag[1:]))
-      elif stack[-1][0] != tag[1:].lower():
-        raise RuntimeError('closing "%s" does not match opening "%s"' % (m.group(0), stack[-1][1]))
-      stack.pop()
-    else:
-      stack.append((tag.lower(), m.group(0)))
-
-  if len(stack) != 0:
-    raise RuntimeError('"%s" was never closed' % stack[-1][1])
-
-def cleanHTML(s):
-  s = reMarkup.sub('', s)
-  s = s.replace('&nbsp;', ' ')
-  s = s.replace('&lt;', '<')
-  s = s.replace('&gt;', '>')
-  s = s.replace('&amp;', '&')
-  return s.strip()
-
-reH3 = re.compile('^<h3>(.*?)</h3>', re.IGNORECASE | re.MULTILINE)
-reH4 = re.compile('^<h4>(.*?)</h4>', re.IGNORECASE | re.MULTILINE)
-  
-def checkClassDetails(fullPath):
-  """
-  Checks for invalid HTML in the full javadocs under each field/method.
-  """
-
-  isAttributeSource = fullPath.endswith('AttributeSource.html')
-
-  # TODO: only works with java7 generated javadocs now!
-  with open(fullPath, encoding='UTF-8') as f:
-    desc = None
-    cat = None
-    item = None
-    errors = []
-    for line in f.readlines():
-
-      if isAttributeSource:
-        # Work around Javadocs bug that fails to escape the <T> type parameter in {@link #getAttribute} and {@link #addAttribute}
-        line = line.replace('<code>getAttribute(java.lang.Class<T>)</code>', '<code>getAttribute(java.lang.Class)</code>')
-        line = line.replace('<code>addAttribute(java.lang.Class<T>)</code>', '<code>addAttribute(java.lang.Class)</code>')
-      
-      m = reH3.search(line)
-      if m is not None:
-        if desc is not None:
-          # Have to fake <ul> context because we pulled a fragment out "across" two <ul>s:
-          desc = ''.join(desc)
-          if True or cat == 'Constructor Detail':
-            idx = desc.find('</div>')
-            if idx == -1:
-              # Ctor missing javadocs ... checkClassSummaries catches it
-              desc = None
-              continue
-            desc = desc[:idx+6]
-          else:
-            desc = '<ul>%s</ul>' % ''.join(desc)
-          #print('  VERIFY %s: %s: %s' % (cat, item, desc))
-          try:
-            verifyHTML(desc)
-          except RuntimeError as re:
-            #print('    FAILED: %s' % re)
-            errors.append((cat, item, str(re)))
-          desc = None
-        cat = m.group(1)
-        continue
-
-      m = reH4.search(line)
-      if m is not None:
-        if desc is not None:
-          # Have to fake <ul> context because we pulled a fragment out "across" two <ul>s:
-          desc = '<ul>%s</ul>' % ''.join(desc)
-          #print('  VERIFY %s: %s: %s' % (cat, item, desc))
-          try:
-            verifyHTML(desc)
-          except RuntimeError as re:
-            #print('    FAILED: %s' % re)
-            errors.append((cat, item, str(re)))
-        item = m.group(1)
-        desc = []
-        continue
-
-      if desc is not None:
-        desc.append(line)
-
-  if len(errors) != 0:
-    print()
-    print(fullPath)
-    for cat, item, message in errors:
-      print('  broken details HTML: %s: %s: %s' % (cat, item, message))
-    return True
-  else:
-    return False
-
 def checkClassSummaries(fullPath):
 
   # TODO: only works with java7 generated javadocs now!
   f = open(fullPath, encoding='UTF-8')
 
   missing = []
-  broken = []
   inThing = False
   lastCaption = None
   lastItem = None
@@ -226,13 +109,6 @@ def checkClassSummaries(fullPath):
           desc.append(line)
           if line.find('</div>') != -1:
             desc = ''.join(desc)
-
-            try:
-              verifyHTML(desc)
-            except RuntimeError as e:
-              broken.append((lastCaption, lastItem, str(e)))
-              #print('FAIL: %s: %s: %s: %s' % (lastCaption, lastItem, e, desc))
-                            
             desc = desc.replace('<div class="block">', '')
             desc = desc.replace('</div>', '')
             desc = desc.strip()
@@ -240,13 +116,11 @@ def checkClassSummaries(fullPath):
 
             desc = None
   f.close()
-  if len(missing) > 0 or len(broken) > 0:
+  if len(missing) > 0:
     print()
     print(fullPath)
     for (caption, item) in missing:
       print('  missing %s: %s' % (caption, item))
-    for (caption, item, why) in broken:
-      print('  broken HTML: %s: %s: %s' % (caption, item, why))
     return True
   else:
     return False
@@ -336,7 +210,6 @@ def checkPackageSummaries(root, level='class'):
   anyMissing = False
   if not os.path.isdir(root):
     checkClassSummaries(root)
-    checkClassDetails(root)
     sys.exit(0)
     
   for dirPath, dirNames, fileNames in os.walk(root):
@@ -354,9 +227,6 @@ def checkPackageSummaries(root, level='class'):
           if level == 'method':
             if checkClassSummaries(fullPath):
               anyMissing = True
-          # always look for broken html, regardless of level supplied
-          if checkClassDetails(fullPath):
-            anyMissing = True
               
     if 'overview-summary.html' in fileNames:        
       if level != 'none' and checkSummary('%s/overview-summary.html' % dirPath):
