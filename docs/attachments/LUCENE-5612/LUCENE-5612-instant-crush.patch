Index: lucene/core/build.xml
===================================================================
--- lucene/core/build.xml	(revision 1587910)
+++ lucene/core/build.xml	(working copy)
@@ -145,5 +145,45 @@
   </target>
 
   <target name="regenerate" depends="createLevAutomata,createPackedIntSources"/>
+  
+  <target name="test-lock-factory" depends="compile-core">
+    <property name="lock.factory.impl" value="org.apache.lucene.store.NativeFSLockFactory"/>
+    <property name="lock.factory.dir" location="${build.dir}/lockfactorytest"/>
+    <property name="lock.factory.delay" value="0"/>
+    <path id="test-lock.classpath">
+      <path refid="classpath"/>
+      <pathelement location="${build.dir}/classes/java"/>
+    </path>
+    <mkdir dir="${lock.factory.dir}"/>
+    <parallel threadCount="3">
+      <sequential>
+        <java taskname="LockVerifyServer" fork="true" classpathref="test-lock.classpath" classname="org.apache.lucene.store.LockVerifyServer" failOnError="true">
+          <arg value="5000"/>
+        </java>
+      </sequential>
+      <sequential>
+        <sleep seconds="1"/>
+        <java taskname="LockStressTest1" fork="true" classpathref="test-lock.classpath" classname="org.apache.lucene.store.LockStressTest" failOnError="true"> 
+          <arg value="1"/>
+          <arg value="127.0.0.1"/>
+          <arg value="5000"/>
+          <arg value="${lock.factory.impl}"/>
+          <arg value="${lock.factory.dir}"/>
+          <arg value="${lock.factory.delay}"/>
+        </java>
+      </sequential>
+      <sequential>
+        <sleep seconds="1"/>
+        <java taskname="LockStressTest2" fork="true" classpathref="test-lock.classpath" classname="org.apache.lucene.store.LockStressTest" failOnError="true">
+          <arg value="2"/>
+          <arg value="127.0.0.1"/>
+          <arg value="5000"/>
+          <arg value="${lock.factory.impl}"/>
+          <arg value="${lock.factory.dir}"/>
+          <arg value="${lock.factory.delay}"/>
+        </java>
+      </sequential>
+    </parallel>
+  </target>
 
 </project>
Index: lucene/core/src/java/org/apache/lucene/store/LockStressTest.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/store/LockStressTest.java	(revision 1587910)
+++ lucene/core/src/java/org/apache/lucene/store/LockStressTest.java	(working copy)
@@ -90,20 +90,24 @@
 
     Lock l = verifyLF.makeLock("test.lock");
 
+    int count = 0;
     while(true) {
-
+      count++;
       boolean obtained = false;
 
       try {
         obtained = l.obtain(10);
       } catch (LockObtainFailedException e) {
-        System.out.print("x");
+        //System.out.print("x");
       }
 
       if (obtained) {
-        System.out.print("l");
+        //System.out.print("l");
         l.close();
       }
+      if (count % 10000 == 0) {
+        System.out.println(count);
+      }
       Thread.sleep(sleepTimeMS);
     }
   }
Index: lucene/core/src/java/org/apache/lucene/store/LockVerifyServer.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/store/LockVerifyServer.java	(revision 1587910)
+++ lucene/core/src/java/org/apache/lucene/store/LockVerifyServer.java	(working copy)
@@ -51,11 +51,14 @@
     ServerSocket s = new ServerSocket(port);
     s.setReuseAddress(true);
     System.out.println("\nReady on port " + port + "...");
+    System.out.flush();
 
     int lockedID = 0;
     long startTime = System.currentTimeMillis();
 
+    int count = 0;
     while(true) {
+      count++;
       Socket cs = s.accept();
       OutputStream out = cs.getOutputStream();
       InputStream in = cs.getInputStream();
@@ -69,19 +72,22 @@
         // Locked
         if (lockedID != 0) {
           err = true;
-          System.out.println(getTime(startTime) + " ERROR: id " + id + " got lock, but " + lockedID + " already holds the lock");
+          throw new IllegalStateException(getTime(startTime) + " ERROR: id " + id + " got lock, but " + lockedID + " already holds the lock");
         }
         lockedID = id;
       } else if (command == 0) {
         if (lockedID != id) {
           err = true;
-          System.out.println(getTime(startTime) + " ERROR: id " + id + " released the lock, but " + lockedID + " is the one holding the lock");
+          throw new IllegalStateException(getTime(startTime) + " ERROR: id " + id + " released the lock, but " + lockedID + " is the one holding the lock");
         }
         lockedID = 0;
       } else
         throw new RuntimeException("unrecognized command " + command);
 
-      System.out.print(".");
+      //System.out.print(".");
+      if (count % 10000 == 0) {
+        System.out.println(count);
+      }
 
       if (err)
         out.write(1);
