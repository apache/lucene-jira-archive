diff --git a/lucene/monitor/src/java/org/apache/lucene/monitor/DocumentBatch.java b/lucene/monitor/src/java/org/apache/lucene/monitor/DocumentBatch.java
index 69119ef66c5..170050217b5 100644
--- a/lucene/monitor/src/java/org/apache/lucene/monitor/DocumentBatch.java
+++ b/lucene/monitor/src/java/org/apache/lucene/monitor/DocumentBatch.java
@@ -52,8 +52,14 @@ abstract class DocumentBatch implements Closeable, Supplier<LeafReader> {
    * @param docs Collection of documents to add
    * @return the batch containing the input documents
    */
-  public static DocumentBatch of(Analyzer analyzer, Document... docs) {
-    return new MultiDocumentBatch(analyzer, docs);
+  public static DocumentBatch of(Analyzer analyzer, Document... docs) throws IllegalArgumentException {
+    if (docs.length == 0) {
+      throw new IllegalArgumentException("A DocumentBatch must contain at least one document");
+    } else if (docs.length == 1) {
+      return new SingletonDocumentBatch(analyzer, docs[0]);
+    } else {
+      return new MultiDocumentBatch(analyzer, docs);
+    }
   }
 
   // Implementation of DocumentBatch for collections of documents
@@ -63,6 +69,7 @@ abstract class DocumentBatch implements Closeable, Supplier<LeafReader> {
     private final LeafReader reader;
 
     MultiDocumentBatch(Analyzer analyzer, Document... docs) {
+      assert(docs.length > 0);
       IndexWriterConfig iwc = new IndexWriterConfig(analyzer);
       try (IndexWriter writer = new IndexWriter(directory, iwc)) {
         this.reader = build(writer, docs);
diff --git a/lucene/monitor/src/test/org/apache/lucene/monitor/TestDocumentBatch.java b/lucene/monitor/src/test/org/apache/lucene/monitor/TestDocumentBatch.java
new file mode 100644
index 00000000000..012b799c084
--- /dev/null
+++ b/lucene/monitor/src/test/org/apache/lucene/monitor/TestDocumentBatch.java
@@ -0,0 +1,59 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.lucene.monitor;
+
+import java.io.IOException;
+
+import org.apache.lucene.analysis.Analyzer;
+import org.apache.lucene.analysis.standard.StandardAnalyzer;
+import org.apache.lucene.document.Document;
+import org.apache.lucene.util.LuceneTestCase;
+import org.junit.Test;
+
+public class TestDocumentBatch extends LuceneTestCase {
+
+  public static final Analyzer ANALYZER = new StandardAnalyzer();
+
+  @Test(expected = IllegalArgumentException.class)
+  public void testDocumentBatchThrowsIllegalArgumentExceptionUponZeroDocument() throws IOException {
+    DocumentBatch.of(ANALYZER);
+  }
+
+  public void testSingleDocumentAndArrayOfOneDocumentResultInSameDocumentBatch() throws IOException {
+    Document doc = new Document();
+    try (DocumentBatch batchDoc = DocumentBatch.of(ANALYZER, doc);
+         DocumentBatch batchArr = DocumentBatch.of(ANALYZER, new Document[] {doc})) {
+      assertTrue(batchDoc instanceof DocumentBatch);
+      assertTrue(batchArr instanceof DocumentBatch);
+      assertEquals(batchDoc.getClass(), batchArr.getClass());
+    }
+  }
+
+  public void testDocumentBatchClassDiffersWhetherItContainsOneOrMoreDocuments() throws IOException {
+    Document doc = new Document();
+    try (DocumentBatch batch1 = DocumentBatch.of(ANALYZER, new Document[] {doc});
+         DocumentBatch batch2 = DocumentBatch.of(ANALYZER, new Document[] {doc, doc});
+         DocumentBatch batch3 = DocumentBatch.of(ANALYZER, new Document[] {doc, doc, doc})) {
+      assertTrue(batch1 instanceof DocumentBatch);
+      assertTrue(batch2 instanceof DocumentBatch);
+      assertTrue(batch3 instanceof DocumentBatch);
+      assertNotEquals(batch1.getClass(), batch2.getClass());
+      assertEquals(batch2.getClass(), batch3.getClass());
+    }
+  }
+}
