Index: lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterPhraseTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterPhraseTest.java	(date 1441890296000)
+++ lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterPhraseTest.java	(revision )
@@ -19,6 +19,7 @@
 
 import java.io.IOException;
 
+import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.MockAnalyzer;
 import org.apache.lucene.analysis.MockTokenizer;
 import org.apache.lucene.analysis.Token;
@@ -41,6 +42,7 @@
 import org.apache.lucene.search.SimpleCollector;
 import org.apache.lucene.search.TopDocs;
 import org.apache.lucene.search.spans.SpanNearQuery;
+import org.apache.lucene.search.spans.SpanOrQuery;
 import org.apache.lucene.search.spans.SpanQuery;
 import org.apache.lucene.search.spans.SpanTermQuery;
 import org.apache.lucene.store.Directory;
@@ -266,6 +268,52 @@
       indexReader.close();
       directory.close();
     }
+  }
+
+  //LUCENE-6796: tests that child terms within a phrase don't get
+  //highlighted if the phrase doesn't match
+  public void testEmbeddedSpanNearHighlighterIssue() throws Exception {
+    String field = "f";
+    Analyzer analyzer = new MockAnalyzer(random());
+    String text = "b c d";
+
+//    SpanQueryParser p = new SpanQueryParser(field, analyzer);
+//    Query q = p.parse("\"(b [c z]) d\"~2");
+    //find "b" or the phrase "c z" within two words of "d" either direction
+
+    SpanQuery cz = new SpanNearQuery(
+        new SpanQuery[]{
+            new SpanTermQuery(new Term(field, "c")),
+            new SpanTermQuery(new Term(field, "z"))
+        }, 0, true
+    );
+    SpanQuery bcz = new SpanOrQuery(
+        new SpanTermQuery(new Term(field, "b")),
+        cz);
+    SpanQuery q = new SpanNearQuery(
+        new SpanQuery[]{
+            bcz,
+            new SpanTermQuery(new Term(field, "d"))
+        }, 2, false
+    );
+
+    QueryScorer scorer = new QueryScorer(q, field);
+    scorer.setExpandMultiTermQuery(true);
+
+    Fragmenter fragmenter = new SimpleFragmenter(1000);
+
+    Highlighter highlighter = new Highlighter(
+        new SimpleHTMLFormatter(),
+        new SimpleHTMLEncoder(),
+        scorer);
+    highlighter.setTextFragmenter(fragmenter);
+
+    String[] snippets = highlighter.getBestFragments(analyzer,
+        field, text,
+        3);
+    assertEquals(1, snippets.length);
+    assertFalse(snippets[0].contains("<B>c</B>"));
+    assertEquals("<B>b</B> c <B>d</B>", snippets[0]);
   }
 
   private static final class TokenStreamSparse extends TokenStream {
