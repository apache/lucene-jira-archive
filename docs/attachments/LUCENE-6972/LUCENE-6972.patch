Index: lucene/core/src/java/org/apache/lucene/util/QueryBuilder.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/QueryBuilder.java	(revision 1724136)
+++ lucene/core/src/java/org/apache/lucene/util/QueryBuilder.java	(working copy)
@@ -127,13 +127,13 @@
       throw new IllegalArgumentException("fraction should be >= 0 and <= 1");
     }
     
-    // TODO: wierd that BQ equals/rewrite/scorer doesn't handle this?
+    // TODO: weird that BQ equals/rewrite/scorer doesn't handle this?
     if (fraction == 1) {
       return createBooleanQuery(field, queryText, BooleanClause.Occur.MUST);
     }
     
     Query query = createFieldQuery(analyzer, BooleanClause.Occur.SHOULD, field, queryText, false, 0);
-    if (query instanceof BooleanQuery) {
+    if (query instanceof BooleanQuery && !((BooleanQuery) query).isCoordDisabled()) {
       BooleanQuery bq = (BooleanQuery) query;
       BooleanQuery.Builder builder = new BooleanQuery.Builder();
       builder.setDisableCoord(bq.isCoordDisabled());
Index: lucene/core/src/test/org/apache/lucene/util/TestQueryBuilder.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/util/TestQueryBuilder.java	(revision 1724136)
+++ lucene/core/src/test/org/apache/lucene/util/TestQueryBuilder.java	(working copy)
@@ -174,6 +174,21 @@
     assertEquals(expected, builder.createPhraseQuery("field", "dogs"));
   }
   
+  /** simple synonyms test with minimum-should-match */
+  public void testSynonymsMinShouldMatch() throws Exception {
+    BooleanQuery.Builder expectedB = new BooleanQuery.Builder();
+    expectedB.setDisableCoord(true);
+    expectedB.add(new TermQuery(new Term("field", "dogs")), BooleanClause.Occur.SHOULD);
+    expectedB.add(new TermQuery(new Term("field", "dog")), BooleanClause.Occur.SHOULD);
+    Query expected = expectedB.build();
+    QueryBuilder builder = new QueryBuilder(new MockSynonymAnalyzer());
+    assertEquals(expected, builder.createMinShouldMatchQuery("field", "dogs", 1.0f));
+    assertEquals(expected, builder.createMinShouldMatchQuery("field", "dogs", 0.9f));
+    assertEquals(expected, builder.createMinShouldMatchQuery("field", "dogs", 0.5f));
+    assertEquals(expected, builder.createMinShouldMatchQuery("field", "dogs", 0.25f));
+    assertEquals(expected, builder.createMinShouldMatchQuery("field", "dogs", 0.0f));
+  }
+  
   /** forms multiphrase query */
   public void testSynonymsPhrase() throws Exception {
     MultiPhraseQuery expected = new MultiPhraseQuery();
@@ -291,6 +306,21 @@
     assertEquals(expected.build(), builder.createBooleanQuery("field", "国", BooleanClause.Occur.MUST));
   }
   
+  /** simple CJK synonyms test with minimum-should-match */
+  public void testCJKSynonymsMinShouldMatch() throws Exception {
+    BooleanQuery.Builder expectedB = new BooleanQuery.Builder();
+    expectedB.setDisableCoord(true);
+    expectedB.add(new TermQuery(new Term("field", "国")), BooleanClause.Occur.SHOULD);
+    expectedB.add(new TermQuery(new Term("field", "國")), BooleanClause.Occur.SHOULD);
+    Query expected = expectedB.build();
+    QueryBuilder builder = new QueryBuilder(new MockCJKSynonymAnalyzer());
+    assertEquals(expected, builder.createMinShouldMatchQuery("field", "国", 1.0f));
+    assertEquals(expected, builder.createMinShouldMatchQuery("field", "国", 0.9f));
+    assertEquals(expected, builder.createMinShouldMatchQuery("field", "国", 0.5f));
+    assertEquals(expected, builder.createMinShouldMatchQuery("field", "国", 0.25f));
+    assertEquals(expected, builder.createMinShouldMatchQuery("field", "国", 0.0f));
+  }
+  
   /** synonyms with default OR operator */
   public void testCJKSynonymsOR() throws Exception {
     BooleanQuery.Builder expected = new BooleanQuery.Builder();
