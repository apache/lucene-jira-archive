Index: lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader.java	(revision 1585968)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader.java	(working copy)
@@ -129,7 +129,7 @@
         infos[i].setDocValuesGen(dvGen);
       }
 
-      SimpleTextUtil.checkFooter(input, CHECKSUM);
+      SimpleTextUtil.checkFooter(input);
       
       FieldInfos fieldInfos = new FieldInfos(infos);
       success = true;
Index: lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsWriter.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsWriter.java	(revision 1585968)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsWriter.java	(working copy)
@@ -37,7 +37,6 @@
  */
 public class SimpleTextTermVectorsWriter extends TermVectorsWriter {
   
-  static final BytesRef CHECKSUM           = new BytesRef("checksum ");
   static final BytesRef END                = new BytesRef("END");
   static final BytesRef DOC                = new BytesRef("doc ");
   static final BytesRef NUMFIELDS          = new BytesRef("  numfields ");
@@ -178,10 +177,7 @@
     }
     write(END);
     newLine();
-    String checksum = Long.toString(out.getChecksum());
-    write(CHECKSUM);
-    write(checksum);
-    newLine();
+    SimpleTextUtil.writeChecksum(out, scratch);
   }
   
   @Override
Index: lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader.java	(revision 1585968)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader.java	(working copy)
@@ -91,7 +91,7 @@
         upto++;
       }
     }
-    SimpleTextUtil.checkFooter(input, CHECKSUM);
+    SimpleTextUtil.checkFooter(input);
     assert upto == offsets.length;
   }
   
Index: lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoWriter.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoWriter.java	(revision 1585968)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoWriter.java	(working copy)
@@ -47,7 +47,6 @@
   final static BytesRef SI_DIAG_VALUE       = new BytesRef("      value ");
   final static BytesRef SI_NUM_FILES        = new BytesRef("    files ");
   final static BytesRef SI_FILE             = new BytesRef("      file ");
-  final static BytesRef SI_CHECKSUM         = new BytesRef("    checksum ");
   
   @Override
   public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {
@@ -105,10 +104,7 @@
         }
       }
       
-      String checksum = Long.toString(output.getChecksum());
-      SimpleTextUtil.write(output, SI_CHECKSUM);
-      SimpleTextUtil.write(output, checksum, scratch);
-      SimpleTextUtil.writeNewline(output);
+      SimpleTextUtil.writeChecksum(output, scratch);
       success = true;
     } finally {
       if (!success) {
Index: lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosWriter.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosWriter.java	(revision 1585968)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosWriter.java	(working copy)
@@ -58,7 +58,6 @@
   static final BytesRef NUM_ATTS        =  new BytesRef("  attributes ");
   final static BytesRef ATT_KEY         =  new BytesRef("    key ");
   final static BytesRef ATT_VALUE       =  new BytesRef("    value ");
-  final static BytesRef CHECKSUM        =  new BytesRef("checksum ");
   
   @Override
   public void write(Directory directory, String segmentName, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {
@@ -133,10 +132,7 @@
           }
         }
       }
-      String checksum = Long.toString(out.getChecksum());
-      SimpleTextUtil.write(out, CHECKSUM);
-      SimpleTextUtil.write(out, checksum, scratch);
-      SimpleTextUtil.writeNewline(out);
+      SimpleTextUtil.writeChecksum(out, scratch);
       success = true;
     } finally {
       if (success) {
Index: lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextLiveDocsFormat.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextLiveDocsFormat.java	(revision 1585968)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextLiveDocsFormat.java	(working copy)
@@ -50,7 +50,6 @@
   final static BytesRef SIZE             = new BytesRef("size ");
   final static BytesRef DOC              = new BytesRef("  doc ");
   final static BytesRef END              = new BytesRef("END");
-  final static BytesRef CHECKSUM         = new BytesRef("checksum ");
   
   @Override
   public MutableBits newLiveDocs(int size) throws IOException {
@@ -89,7 +88,7 @@
         SimpleTextUtil.readLine(in, scratch);
       }
       
-      SimpleTextUtil.checkFooter(in, CHECKSUM);
+      SimpleTextUtil.checkFooter(in);
       
       success = true;
       return new SimpleTextBits(bits, size);
@@ -130,10 +129,7 @@
       
       SimpleTextUtil.write(out, END);
       SimpleTextUtil.writeNewline(out);
-      String checksum = Long.toString(out.getChecksum());
-      SimpleTextUtil.write(out, CHECKSUM);
-      SimpleTextUtil.write(out, checksum, scratch);
-      SimpleTextUtil.writeNewline(out);
+      SimpleTextUtil.writeChecksum(out, scratch);
       success = true;
     } finally {
       if (success) {
Index: lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsWriter.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsWriter.java	(revision 1585968)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsWriter.java	(working copy)
@@ -51,7 +51,6 @@
   final static BytesRef TYPE_FLOAT  = new BytesRef("float");
   final static BytesRef TYPE_DOUBLE = new BytesRef("double");
 
-  final static BytesRef CHECKSUM = new BytesRef("checksum ");
   final static BytesRef END      = new BytesRef("END");
   final static BytesRef DOC      = new BytesRef("doc ");
   final static BytesRef NUM      = new BytesRef("  numfields ");
@@ -172,10 +171,7 @@
     }
     write(END);
     newLine();
-    String checksum = Long.toString(out.getChecksum());
-    write(CHECKSUM);
-    write(checksum);
-    newLine();
+    SimpleTextUtil.writeChecksum(out, scratch);
   }
 
   @Override
Index: lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.java	(revision 1585968)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.java	(working copy)
@@ -53,7 +53,6 @@
 import org.apache.lucene.util.fst.PositiveIntOutputs;
 import org.apache.lucene.util.fst.Util;
 
-import static org.apache.lucene.codecs.simpletext.SimpleTextFieldsWriter.CHECKSUM;
 import static org.apache.lucene.codecs.simpletext.SimpleTextFieldsWriter.END;
 import static org.apache.lucene.codecs.simpletext.SimpleTextFieldsWriter.FIELD;
 import static org.apache.lucene.codecs.simpletext.SimpleTextFieldsWriter.TERM;
@@ -93,7 +92,7 @@
     while (true) {
       SimpleTextUtil.readLine(input, scratch);
       if (scratch.equals(END)) {
-        SimpleTextUtil.checkFooter(input, CHECKSUM);
+        SimpleTextUtil.checkFooter(input);
         return fields;
       } else if (StringHelper.startsWith(scratch, FIELD)) {
         String fieldName = new String(scratch.bytes, scratch.offset + FIELD.length, scratch.length - FIELD.length, StandardCharsets.UTF_8);
Index: lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsWriter.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsWriter.java	(revision 1585968)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsWriter.java	(working copy)
@@ -39,7 +39,6 @@
   private final BytesRef scratch = new BytesRef(10);
   private final SegmentWriteState writeState;
 
-  final static BytesRef CHECKSUM     = new BytesRef("checksum ");
   final static BytesRef END          = new BytesRef("END");
   final static BytesRef FIELD        = new BytesRef("field ");
   final static BytesRef TERM         = new BytesRef("  term ");
@@ -220,10 +219,7 @@
       try {
         write(END);
         newline();
-        String checksum = Long.toString(out.getChecksum());
-        write(CHECKSUM);
-        write(checksum);
-        newline();
+        SimpleTextUtil.writeChecksum(out, scratch);
       } finally {
         out.close();
         out = null;
Index: lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader.java	(revision 1585968)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader.java	(working copy)
@@ -17,7 +17,6 @@
  * limitations under the License.
  */
 
-import static org.apache.lucene.codecs.simpletext.SimpleTextDocValuesWriter.CHECKSUM;
 import static org.apache.lucene.codecs.simpletext.SimpleTextDocValuesWriter.END;
 import static org.apache.lucene.codecs.simpletext.SimpleTextDocValuesWriter.FIELD;
 import static org.apache.lucene.codecs.simpletext.SimpleTextDocValuesWriter.LENGTH;
@@ -481,7 +480,7 @@
     while(true) {
       SimpleTextUtil.readLine(input, scratch);
       if (scratch.equals(END)) {
-        SimpleTextUtil.checkFooter(input, CHECKSUM);
+        SimpleTextUtil.checkFooter(input);
         break;
       }
     }
Index: lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextUtil.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextUtil.java	(revision 1585968)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextUtil.java	(working copy)
@@ -17,14 +17,14 @@
  * limitations under the License.
  */
 
-import static org.apache.lucene.codecs.simpletext.SimpleTextStoredFieldsWriter.CHECKSUM;
-
 import java.io.IOException;
+import java.util.Locale;
 
 import org.apache.lucene.index.CorruptIndexException;
 import org.apache.lucene.store.ChecksumIndexInput;
 import org.apache.lucene.store.DataInput;
 import org.apache.lucene.store.DataOutput;
+import org.apache.lucene.store.IndexOutput;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.StringHelper;
 import org.apache.lucene.util.UnicodeUtil;
@@ -32,6 +32,7 @@
 class SimpleTextUtil {
   public final static byte NEWLINE = 10;
   public final static byte ESCAPE = 92;
+  final static BytesRef CHECKSUM = new BytesRef("checksum ");
   
   public static void write(DataOutput out, String s, BytesRef scratch) throws IOException {
     UnicodeUtil.UTF16toUTF8(s, 0, s.length(), scratch);
@@ -72,13 +73,26 @@
     scratch.offset = 0;
     scratch.length = upto;
   }
+
+  public static void writeChecksum(IndexOutput out, BytesRef scratch) throws IOException {
+    // Pad with space so different checksum values use the
+    // same number of bytes
+    // (BaseIndexFileFormatTestCase.testMergeStability cares):
+    String checksum = String.format(Locale.ROOT, "%020d", out.getChecksum());
+    SimpleTextUtil.write(out, CHECKSUM);
+    SimpleTextUtil.write(out, checksum, scratch);
+    SimpleTextUtil.writeNewline(out);
+  }
   
-  public static void checkFooter(ChecksumIndexInput input, BytesRef prefix) throws IOException {
+  public static void checkFooter(ChecksumIndexInput input) throws IOException {
     BytesRef scratch = new BytesRef();
-    String expectedChecksum = Long.toString(input.getChecksum());
+    String expectedChecksum = String.format(Locale.ROOT, "%020d", input.getChecksum());
     SimpleTextUtil.readLine(input, scratch);
-    assert StringHelper.startsWith(scratch, prefix);
-    String actualChecksum = new BytesRef(scratch.bytes, prefix.length, scratch.length - prefix.length).utf8ToString();
+    if (StringHelper.startsWith(scratch, CHECKSUM) == false) {
+      throw new CorruptIndexException("SimpleText failure: expected checksum line but got " + scratch.utf8ToString() + " (resource=" + input + ")");
+    }
+    // Must trim because we may have padded with space when writing:
+    String actualChecksum = new BytesRef(scratch.bytes, CHECKSUM.length, scratch.length - CHECKSUM.length).utf8ToString();
     if (!expectedChecksum.equals(actualChecksum)) {
       throw new CorruptIndexException("SimpleText checksum failure: " + actualChecksum + " != " + expectedChecksum + " (resource=" + input + ")");
     }
Index: lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter.java	(revision 1585968)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter.java	(working copy)
@@ -36,7 +36,6 @@
 import org.apache.lucene.util.IOUtils;
 
 class SimpleTextDocValuesWriter extends DocValuesConsumer {
-  final static BytesRef CHECKSUM = new BytesRef("checksum ");
   final static BytesRef END     = new BytesRef("END");
   final static BytesRef FIELD   = new BytesRef("field ");
   final static BytesRef TYPE    = new BytesRef("  type ");
@@ -397,10 +396,7 @@
         // TODO: sheisty to do this here?
         SimpleTextUtil.write(data, END);
         SimpleTextUtil.writeNewline(data);
-        String checksum = Long.toString(data.getChecksum());
-        SimpleTextUtil.write(data, CHECKSUM);
-        SimpleTextUtil.write(data, checksum, scratch);
-        SimpleTextUtil.writeNewline(data);
+        SimpleTextUtil.writeChecksum(data, scratch);
         success = true;
       } finally {
         if (success) {
Index: lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader.java	(revision 1585968)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader.java	(working copy)
@@ -94,7 +94,7 @@
         upto++;
       }
     }
-    SimpleTextUtil.checkFooter(input, CHECKSUM);
+    SimpleTextUtil.checkFooter(input);
     assert upto == offsets.length;
   }
   
Index: lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoReader.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoReader.java	(revision 1585968)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoReader.java	(working copy)
@@ -17,7 +17,6 @@
  * limitations under the License.
  */
 
-import static org.apache.lucene.codecs.simpletext.SimpleTextSegmentInfoWriter.SI_CHECKSUM;
 import static org.apache.lucene.codecs.simpletext.SimpleTextSegmentInfoWriter.SI_DIAG_KEY;
 import static org.apache.lucene.codecs.simpletext.SimpleTextSegmentInfoWriter.SI_DIAG_VALUE;
 import static org.apache.lucene.codecs.simpletext.SimpleTextSegmentInfoWriter.SI_DOCCOUNT;
@@ -99,7 +98,7 @@
         files.add(fileName);
       }
       
-      SimpleTextUtil.checkFooter(input, SI_CHECKSUM);
+      SimpleTextUtil.checkFooter(input);
 
       SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount, 
                                          isCompoundFile, null, diagnostics);
