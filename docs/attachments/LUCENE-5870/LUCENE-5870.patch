Index: lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader.java
===================================================================
--- lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader.java	(revision 1615878)
+++ lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader.java	(working copy)
@@ -159,16 +159,16 @@
       visitor.binaryField(fieldInfo, copy);
     } else if (type == TYPE_INT) {
       UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);
-      visitor.intField(fieldInfo, Integer.parseInt(scratchUTF16.toString()));
+      visitor.numericField(fieldInfo, Integer.parseInt(scratchUTF16.toString()));
     } else if (type == TYPE_LONG) {
       UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);
-      visitor.longField(fieldInfo, Long.parseLong(scratchUTF16.toString()));
+      visitor.numericField(fieldInfo, Long.parseLong(scratchUTF16.toString()));
     } else if (type == TYPE_FLOAT) {
       UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);
-      visitor.floatField(fieldInfo, Float.parseFloat(scratchUTF16.toString()));
+      visitor.numericField(fieldInfo, Float.parseFloat(scratchUTF16.toString()));
     } else if (type == TYPE_DOUBLE) {
       UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);
-      visitor.doubleField(fieldInfo, Double.parseDouble(scratchUTF16.toString()));
+      visitor.numericField(fieldInfo, Double.parseDouble(scratchUTF16.toString()));
     }
   }
 
Index: lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.java	(revision 1615878)
+++ lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.java	(working copy)
@@ -205,16 +205,16 @@
         visitor.stringField(info, new String(data, StandardCharsets.UTF_8));
         break;
       case NUMERIC_INT:
-        visitor.intField(info, in.readInt());
+        visitor.numericField(info, in.readInt());
         break;
       case NUMERIC_FLOAT:
-        visitor.floatField(info, Float.intBitsToFloat(in.readInt()));
+        visitor.numericField(info, Float.intBitsToFloat(in.readInt()));
         break;
       case NUMERIC_LONG:
-        visitor.longField(info, in.readLong());
+        visitor.numericField(info, in.readLong());
         break;
       case NUMERIC_DOUBLE:
-        visitor.doubleField(info, Double.longBitsToDouble(in.readLong()));
+        visitor.numericField(info, Double.longBitsToDouble(in.readLong()));
         break;
       default:
         throw new AssertionError("Unknown type flag: " + Integer.toHexString(bits));
Index: lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader.java	(revision 1615878)
+++ lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader.java	(working copy)
@@ -177,16 +177,16 @@
     if (numeric != 0) {
       switch(numeric) {
         case FIELD_IS_NUMERIC_INT:
-          visitor.intField(info, fieldsStream.readInt());
+          visitor.numericField(info, fieldsStream.readInt());
           return;
         case FIELD_IS_NUMERIC_LONG:
-          visitor.longField(info, fieldsStream.readLong());
+          visitor.numericField(info, fieldsStream.readLong());
           return;
         case FIELD_IS_NUMERIC_FLOAT:
-          visitor.floatField(info, Float.intBitsToFloat(fieldsStream.readInt()));
+          visitor.numericField(info, Float.intBitsToFloat(fieldsStream.readInt()));
           return;
         case FIELD_IS_NUMERIC_DOUBLE:
-          visitor.doubleField(info, Double.longBitsToDouble(fieldsStream.readLong()));
+          visitor.numericField(info, Double.longBitsToDouble(fieldsStream.readLong()));
           return;
         default:
           throw new CorruptIndexException("Invalid numeric type: " + Integer.toHexString(numeric));
Index: lucene/core/src/java/org/apache/lucene/document/DocumentStoredFieldVisitor.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/document/DocumentStoredFieldVisitor.java	(revision 1615878)
+++ lucene/core/src/java/org/apache/lucene/document/DocumentStoredFieldVisitor.java	(working copy)
@@ -76,26 +76,11 @@
   }
 
   @Override
-  public void intField(FieldInfo fieldInfo, int value) {
+  public void numericField(FieldInfo fieldInfo, Number value) {
     doc.add(new StoredField(fieldInfo.name, value));
   }
 
   @Override
-  public void longField(FieldInfo fieldInfo, long value) {
-    doc.add(new StoredField(fieldInfo.name, value));
-  }
-
-  @Override
-  public void floatField(FieldInfo fieldInfo, float value) {
-    doc.add(new StoredField(fieldInfo.name, value));
-  }
-
-  @Override
-  public void doubleField(FieldInfo fieldInfo, double value) {
-    doc.add(new StoredField(fieldInfo.name, value));
-  }
-
-  @Override
   public Status needsField(FieldInfo fieldInfo) throws IOException {
     return fieldsToAdd == null || fieldsToAdd.contains(fieldInfo.name) ? Status.YES : Status.NO;
   }
Index: lucene/core/src/java/org/apache/lucene/document/StoredField.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/document/StoredField.java	(revision 1615878)
+++ lucene/core/src/java/org/apache/lucene/document/StoredField.java	(working copy)
@@ -1,7 +1,6 @@
 package org.apache.lucene.document;
 
 import org.apache.lucene.index.IndexReader; // javadocs
-import org.apache.lucene.index.StorableField;
 import org.apache.lucene.search.IndexSearcher; // javadocs
 import org.apache.lucene.util.BytesRef;
 
@@ -129,41 +128,8 @@
    * @param value integer value
    * @throws IllegalArgumentException if the field name is null.
    */
-  public StoredField(String name, int value) {
+  public StoredField(String name, Number value) {
     super(name, TYPE);
     fieldsData = value;
   }
-
-  /**
-   * Create a stored-only field with the given float value.
-   * @param name field name
-   * @param value float value
-   * @throws IllegalArgumentException if the field name is null.
-   */
-  public StoredField(String name, float value) {
-    super(name, TYPE);
-    fieldsData = value;
-  }
-
-  /**
-   * Create a stored-only field with the given long value.
-   * @param name field name
-   * @param value long value
-   * @throws IllegalArgumentException if the field name is null.
-   */
-  public StoredField(String name, long value) {
-    super(name, TYPE);
-    fieldsData = value;
-  }
-
-  /**
-   * Create a stored-only field with the given double value.
-   * @param name field name
-   * @param value double value
-   * @throws IllegalArgumentException if the field name is null.
-   */
-  public StoredField(String name, double value) {
-    super(name, TYPE);
-    fieldsData = value;
-  }
 }
Index: lucene/core/src/java/org/apache/lucene/index/StoredFieldVisitor.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/StoredFieldVisitor.java	(revision 1615878)
+++ lucene/core/src/java/org/apache/lucene/index/StoredFieldVisitor.java	(working copy)
@@ -57,21 +57,9 @@
   public void stringField(FieldInfo fieldInfo, String value) throws IOException {
   }
 
-  /** Process a int numeric field. */
-  public void intField(FieldInfo fieldInfo, int value) throws IOException {
+  /** Process a numeric field. */
+  public void numericField(FieldInfo fieldInfo, Number value) throws IOException {
   }
-
-  /** Process a long numeric field. */
-  public void longField(FieldInfo fieldInfo, long value) throws IOException {
-  }
-
-  /** Process a float numeric field. */
-  public void floatField(FieldInfo fieldInfo, float value) throws IOException {
-  }
-
-  /** Process a double numeric field. */
-  public void doubleField(FieldInfo fieldInfo, double value) throws IOException {
-  }
   
   /**
    * Hook before processing a field.
Index: lucene/test-framework/src/java/org/apache/lucene/index/FieldFilterAtomicReader.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/index/FieldFilterAtomicReader.java	(revision 1615878)
+++ lucene/test-framework/src/java/org/apache/lucene/index/FieldFilterAtomicReader.java	(working copy)
@@ -83,26 +83,11 @@
       }
 
       @Override
-      public void intField(FieldInfo fieldInfo, int value) throws IOException {
-        visitor.intField(fieldInfo, value);
+      public void numericField(FieldInfo fieldInfo, Number value) throws IOException {
+        visitor.numericField(fieldInfo, value);
       }
 
       @Override
-      public void longField(FieldInfo fieldInfo, long value) throws IOException {
-        visitor.longField(fieldInfo, value);
-      }
-
-      @Override
-      public void floatField(FieldInfo fieldInfo, float value) throws IOException {
-        visitor.floatField(fieldInfo, value);
-      }
-
-      @Override
-      public void doubleField(FieldInfo fieldInfo, double value) throws IOException {
-        visitor.doubleField(fieldInfo, value);
-      }
-
-      @Override
       public Status needsField(FieldInfo fieldInfo) throws IOException {
         return hasField(fieldInfo.name) ? visitor.needsField(fieldInfo) : Status.NO;
       }
Index: solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent.java
===================================================================
--- solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent.java	(revision 1615878)
+++ solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent.java	(working copy)
@@ -272,15 +272,10 @@
       }
 
       @Override 
-      public void intField(FieldInfo fieldInfo, int value) {
-        uniqValues.add(Integer.toString(value));
+      public void numericField(FieldInfo fieldInfo, Number value) {
+        uniqValues.add(value.toString());
       }
 
-      @Override 
-      public void longField(FieldInfo fieldInfo, long value) {
-        uniqValues.add(Long.toString(value));
-      }
-
       @Override
       public Status needsField(FieldInfo fieldInfo) {
         return (fieldInfo.name.equals(finalUniqFieldName)) ? Status.YES : Status.NO;
Index: solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java
===================================================================
--- solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java	(revision 1615878)
+++ solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java	(working copy)
@@ -597,45 +597,13 @@
 
     @Override
     public void stringField(FieldInfo fieldInfo, String value) throws IOException {
-      final FieldType ft = new FieldType(TextField.TYPE_STORED);
-      ft.setStoreTermVectors(fieldInfo.hasVectors());
-      ft.setIndexed(fieldInfo.isIndexed());
-      ft.setOmitNorms(fieldInfo.omitsNorms());
-      ft.setIndexOptions(fieldInfo.getIndexOptions());
-      doc.add(new Field(fieldInfo.name, value, ft));
+      doc.add(new StoredField(fieldInfo.name, value));
     }
 
     @Override
-    public void intField(FieldInfo fieldInfo, int value) {
-      FieldType ft = new FieldType(IntField.TYPE_NOT_STORED);
-      ft.setStored(true);
-      ft.setIndexed(fieldInfo.isIndexed());
-      doc.add(new IntField(fieldInfo.name, value, ft));
+    public void numericField(FieldInfo fieldInfo, Number value) {
+      doc.add(new StoredField(fieldInfo.name, value));
     }
-
-    @Override
-    public void longField(FieldInfo fieldInfo, long value) {
-      FieldType ft = new FieldType(LongField.TYPE_NOT_STORED);
-      ft.setStored(true);
-      ft.setIndexed(fieldInfo.isIndexed());
-      doc.add(new LongField(fieldInfo.name, value, ft));
-    }
-
-    @Override
-    public void floatField(FieldInfo fieldInfo, float value) {
-      FieldType ft = new FieldType(FloatField.TYPE_NOT_STORED);
-      ft.setStored(true);
-      ft.setIndexed(fieldInfo.isIndexed());
-      doc.add(new FloatField(fieldInfo.name, value, ft));
-    }
-
-    @Override
-    public void doubleField(FieldInfo fieldInfo, double value) {
-      FieldType ft = new FieldType(DoubleField.TYPE_NOT_STORED);
-      ft.setStored(true);
-      ft.setIndexed(fieldInfo.isIndexed());
-      doc.add(new DoubleField(fieldInfo.name, value, ft));
-    }
   }
 
   /**
@@ -674,18 +642,7 @@
             System.arraycopy(binaryValue.bytes, binaryValue.offset, copy, 0, copy.length);
             visitor.binaryField(info, copy);
           } else if (f.numericValue() != null) {
-            Number numericValue = f.numericValue();
-            if (numericValue instanceof Double) {
-              visitor.doubleField(info, numericValue.doubleValue());
-            } else if (numericValue instanceof Integer) {
-              visitor.intField(info, numericValue.intValue());
-            } else if (numericValue instanceof Float) {
-              visitor.floatField(info, numericValue.floatValue());
-            } else if (numericValue instanceof Long) {
-              visitor.longField(info, numericValue.longValue());
-            } else {
-              throw new AssertionError();
-            }
+            visitor.numericField(info, f.numericValue());
           } else {
             visitor.stringField(info, f.stringValue());
           }
