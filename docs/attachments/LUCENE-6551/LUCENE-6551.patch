Index: lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java	(revision 1684931)
+++ lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java	(working copy)
@@ -214,6 +214,11 @@
     updateMergeThreads();
   }
 
+  /** Returns true if auto IO throttling is currently enabled. */
+  public synchronized boolean getAutoIOThrottle() {
+    return doAutoIOThrottle;
+  }
+
   /** Returns the currently set per-merge IO writes rate limit, if {@link #enableAutoIOThrottle}
    *  was called, else {@code Double.POSITIVE_INFINITY}. */
   public synchronized double getIORateLimitMBPerSec() {
Index: lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.java
===================================================================
--- lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.java	(revision 1684931)
+++ lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.java	(working copy)
@@ -915,6 +915,7 @@
       cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);
       if (random().nextBoolean()) {
         cms.disableAutoIOThrottle();
+        assertFalse(cms.getAutoIOThrottle());
       }
       cms.setForceMergeMBPerSec(10 + 10*random().nextDouble());
       c.setMergeScheduler(cms);
@@ -1180,11 +1181,19 @@
       // change CMS merge parameters
       MergeScheduler ms = c.getMergeScheduler();
       if (ms instanceof ConcurrentMergeScheduler) {
+        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) ms;
         int maxThreadCount = TestUtil.nextInt(r, 1, 4);
         int maxMergeCount = TestUtil.nextInt(r, maxThreadCount, maxThreadCount + 4);
-        ((ConcurrentMergeScheduler)ms).setMaxMergesAndThreads(maxMergeCount, maxThreadCount);
+        boolean enableAutoIOThrottle = random().nextBoolean();
+        if (enableAutoIOThrottle) {
+          cms.enableAutoIOThrottle();
+        } else {
+          cms.disableAutoIOThrottle();
+        }
+        assertEquals(enableAutoIOThrottle, cms.getAutoIOThrottle());
+        cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);
+        didChange = true;
       }
-      didChange = true;
     }
     
     if (rarely(r)) {
