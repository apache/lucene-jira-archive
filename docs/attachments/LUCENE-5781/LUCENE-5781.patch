Index: lucene/core/src/java/org/apache/lucene/util/automaton/LevenshteinAutomata.java
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/automaton/LevenshteinAutomata.java	(revision 1604270)
+++ lucene/core/src/java/org/apache/lucene/util/automaton/LevenshteinAutomata.java	(working copy)
@@ -17,6 +17,7 @@
  * limitations under the License.
  */
 
+import java.util.Arrays;
 import java.util.Iterator;
 import java.util.SortedSet;
 import java.util.TreeSet;
@@ -157,6 +158,9 @@
     // the number of states is based on the length of the word and n
     int numStates = description.size();
 
+    int[] states = new int[numStates];
+    Arrays.fill(states, -1);
+
     Automaton a = new Automaton();
     int lastState;
     if (prefix != null) {
@@ -172,15 +176,10 @@
       lastState = a.createState();
     }
 
-    int stateOffset = lastState;
+    states[0] = lastState;
+
     a.setAccept(lastState, description.isAccept(0));
 
-    // create all states, and mark as accept states if appropriate
-    for (int i = 1; i < numStates; i++) {
-      int state = a.createState();
-      a.setAccept(state, description.isAccept(i));
-    }
-
     // TODO: this creates bogus states/transitions (states are final, have self loops, and can't be reached from an init state)
 
     // create transitions from state to state
@@ -195,17 +194,22 @@
         // get the characteristic vector at this position wrt ch
         final int cvec = getVector(ch, xpos, end);
         int dest = description.transition(k, xpos, cvec);
-        if (dest >= 0) {
-          a.addTransition(stateOffset+k, stateOffset+dest, ch);
+        if (dest >= 0 && dest != k) {
+          a.addTransition(getState(description, a, states, k),
+                          getState(description, a, states, dest),
+                          ch);
         }
       }
       // add transitions for all other chars in unicode
       // by definition, their characteristic vectors are always 0,
       // because they do not exist in the input string.
       int dest = description.transition(k, xpos, 0); // by definition
-      if (dest >= 0) {
+      if (dest >= 0 && dest != k) {
         for (int r = 0; r < numRanges; r++) {
-          a.addTransition(stateOffset+k, stateOffset+dest, rangeLower[r], rangeUpper[r]);
+          a.addTransition(getState(description, a, states, k),
+                          getState(description, a, states, dest),
+                          rangeLower[r],
+                          rangeUpper[r]);
         }
       }
     }
@@ -215,6 +219,19 @@
     return a;
   }
 
+  private static int getState(ParametricDescription description, Automaton a, int[] states, int index) {
+    int state = states[index];
+    if (state == -1) {
+      // Lazy init to avoid creating strange dead states that
+      // /have cycles only to themselves: 
+      state = a.createState();
+      states[index] = state;
+      a.setAccept(state, description.isAccept(index));
+    }
+
+    return state;
+  }
+
   /**
    * Get the characteristic vector <code>X(x, V)</code> 
    * where V is <code>substring(pos, end)</code>
