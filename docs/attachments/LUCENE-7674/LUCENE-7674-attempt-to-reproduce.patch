diff --git a/lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation.java b/lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation.java
index cb3762c..2f2a9e2 100644
--- a/lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation.java
+++ b/lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation.java
@@ -28,6 +28,7 @@
 import org.apache.lucene.index.IndexWriterConfig;
 import org.apache.lucene.index.LeafReaderContext;
 import org.apache.lucene.index.Term;
+import org.apache.lucene.queryparser.classic.QueryParser;
 import org.apache.lucene.search.BooleanClause;
 import org.apache.lucene.search.BooleanQuery;
 import org.apache.lucene.search.IndexSearcher;
@@ -120,6 +121,30 @@
     assertTrue(expected.getMessage() != null && expected.getMessage().contains(ToChildBlockJoinQuery.INVALID_QUERY_MESSAGE));
   }
 
+  public void testBrokenParentFilter() throws Exception {
+    List<LeafReaderContext> segments = indexSearcher.getIndexReader().leaves();
+    final LeafReaderContext segment = segments.get(random().nextInt(segments.size()));
+    
+    QueryParser qp = new QueryParser("id", new MockAnalyzer(random()));
+    int theLastParent = segment.docBaseInParent+segment.reader().maxDoc()-1;
+    Document theLastDoc = indexSearcher.doc(theLastParent);
+    String parentId = theLastDoc.get("id");
+    
+    QueryBitSetProducer brokenParentsFilter = new QueryBitSetProducer(qp.parse("parent:[* TO *] -id:"+parentId));
+    try {
+    CheckJoinIndex.check(indexSearcher.getIndexReader(), brokenParentsFilter);
+    fail();
+    }catch(Exception e) {
+      System.out.println(e.getMessage());
+      System.out.println(segment);
+      System.out.println(theLastParent+" "+parentId+theLastDoc);
+    }
+    indexSearcher.search(new ToParentBlockJoinQuery(
+        qp.parse("id:"+indexSearcher.doc(theLastParent-1).get("id")), 
+        brokenParentsFilter
+          , ScoreMode.None),10);
+  }  
+  
   private static List<Document> createDocsForSegment(int segmentNumber) {
     List<List<Document>> blocks = new ArrayList<>(AMOUNT_OF_PARENT_DOCS);
     for (int i = 0; i < AMOUNT_OF_PARENT_DOCS; i++) {
