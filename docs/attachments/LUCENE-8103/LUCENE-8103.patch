Index: lucene/core/src/java/org/apache/lucene/search/DoubleValuesSource.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/core/src/java/org/apache/lucene/search/DoubleValuesSource.java	(revision 193e4a64234b2f76036d8f018a7478d61e5a0fab)
+++ lucene/core/src/java/org/apache/lucene/search/DoubleValuesSource.java	(revision 07a49fcafc8be0457ed87cd061a72601844f0633)
@@ -604,8 +604,13 @@
       Scorer scorer = weight.scorer(ctx);
       if (scorer == null)
         return DoubleValues.EMPTY;
-      DocIdSetIterator it = scorer.iterator();
+      TwoPhaseIterator tpi = scorer.twoPhaseIterator();
+      DocIdSetIterator it = (tpi == null) ? scorer.iterator() : tpi.approximation();
+
       return new DoubleValues() {
+        int scorerDoc = it.docID();
+        boolean scorerMatch = tpi == null || (scorerDoc != -1 && tpi.matches());
+
         @Override
         public double doubleValue() throws IOException {
           return scorer.score();
@@ -613,9 +618,11 @@
 
         @Override
         public boolean advanceExact(int doc) throws IOException {
-          if (it.docID() > doc)
-            return false;
-          return it.docID() == doc || it.advance(doc) == doc;
+          if (scorerDoc < doc) {
+            scorerDoc = it.advance(doc);
+            scorerMatch = tpi==null || tpi.matches();
+          }
+          return scorerDoc == doc && (tpi == null  || scorerMatch);
         }
       };
     }
Index: lucene/core/src/test/org/apache/lucene/search/TestDoubleValuesSource.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestDoubleValuesSource.java	(revision 193e4a64234b2f76036d8f018a7478d61e5a0fab)
+++ lucene/core/src/test/org/apache/lucene/search/TestDoubleValuesSource.java	(revision 07a49fcafc8be0457ed87cd061a72601844f0633)
@@ -274,7 +274,17 @@
   }
 
   public void testQueryDoubleValuesSource() throws Exception {
-    Query q = new TermQuery(new Term("english", "two"));
+    Query iteratingQuery = new TermQuery(new Term("english", "two"));
+    Query approximatingQuery = new PhraseQuery.Builder()
+      .add(new Term("english", "hundred"), 0)
+      .add(new Term("english", "one"), 1)
+      .build();
+
+    doTestQueryDoubleValuesSources(iteratingQuery);
+    doTestQueryDoubleValuesSources(approximatingQuery);
+  }
+
+  private void doTestQueryDoubleValuesSources(Query q) throws Exception {
     DoubleValuesSource vs = DoubleValuesSource.fromQuery(q).rewrite(searcher);
     searcher.search(q, new SimpleCollector() {
 
Index: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/QueryValueSource.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/QueryValueSource.java	(revision 193e4a64234b2f76036d8f018a7478d61e5a0fab)
+++ lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/QueryValueSource.java	(revision 07a49fcafc8be0457ed87cd061a72601844f0633)
@@ -29,6 +29,7 @@
 import org.apache.lucene.search.Query;
 import org.apache.lucene.search.ScoreMode;
 import org.apache.lucene.search.Scorer;
+import org.apache.lucene.search.TwoPhaseIterator;
 import org.apache.lucene.search.Weight;
 import org.apache.lucene.util.mutable.MutableValue;
 import org.apache.lucene.util.mutable.MutableValueFloat;
@@ -88,7 +89,9 @@
 
   Scorer scorer;
   DocIdSetIterator it;
+  TwoPhaseIterator tpi;
   int scorerDoc; // the document the scorer is on
+  boolean scorerMatch=false; // whether the tpi matches on scorerDoc
   boolean noMatches=false;
 
   // the last document requested... start off with high value
@@ -124,30 +127,7 @@
   @Override
   public float floatVal(int doc) {
     try {
-      if (doc < lastDocRequested) {
-        if (noMatches) return defVal;
-        scorer = weight.scorer(readerContext);
-        if (scorer==null) {
-          noMatches = true;
-          return defVal;
-        }
-        it = scorer.iterator();
-        scorerDoc = -1;
-      }
-      lastDocRequested = doc;
-
-      if (scorerDoc < doc) {
-        scorerDoc = it.advance(doc);
-      }
-
-      if (scorerDoc > doc) {
-        // query doesn't match this document... either because we hit the
-        // end, or because the next doc is after this doc.
-        return defVal;
-      }
-
-      // a match!
-      return scorer.score();
+      return exists(doc) ? scorer.score() : defVal;
     } catch (IOException e) {
       throw new RuntimeException("caught exception in QueryDocVals("+q+") doc="+doc, e);
     }
@@ -164,22 +144,18 @@
           noMatches = true;
           return false;
         }
-        it = scorer.iterator();
+        tpi = scorer.twoPhaseIterator();
+        it = tpi==null ? scorer.iterator() : tpi.approximation();
       }
       lastDocRequested = doc;
 
       if (scorerDoc < doc) {
         scorerDoc = it.advance(doc);
-      }
-
-      if (scorerDoc > doc) {
-        // query doesn't match this document... either because we hit the
-        // end, or because the next doc is after this doc.
-        return false;
+        scorerMatch = tpi == null || tpi.matches();
       }
 
       // a match!
-      return true;
+      return scorerDoc == doc && scorerMatch;
     } catch (IOException e) {
       throw new RuntimeException("caught exception in QueryDocVals("+q+") doc="+doc, e);
     }
@@ -187,11 +163,7 @@
 
    @Override
   public Object objectVal(int doc) {
-     try {
-       return exists(doc) ? scorer.score() : null;
-     } catch (IOException e) {
-       throw new RuntimeException("caught exception in QueryDocVals("+q+") doc="+doc, e);
-     }
+     return floatVal(doc);
    }
 
   @Override
@@ -212,37 +184,13 @@
       @Override
       public void fillValue(int doc) {
         try {
-          if (noMatches) {
-            mval.value = defVal;
-            mval.exists = false;
-            return;
-          }
-          scorer = weight.scorer(readerContext);
-          scorerDoc = -1;
-          if (scorer==null) {
-            noMatches = true;
+          if (exists(doc)) {
+            mval.value = scorer.score();
+            mval.exists = true;
+          } else {
             mval.value = defVal;
             mval.exists = false;
-            return;
-          }
-          it = scorer.iterator();
-          lastDocRequested = doc;
-
-          if (scorerDoc < doc) {
-            scorerDoc = it.advance(doc);
           }
-
-          if (scorerDoc > doc) {
-            // query doesn't match this document... either because we hit the
-            // end, or because the next doc is after this doc.
-            mval.value = defVal;
-            mval.exists = false;
-            return;
-          }
-
-          // a match!
-          mval.value = scorer.score();
-          mval.exists = true;
         } catch (IOException e) {
           throw new RuntimeException("caught exception in QueryDocVals("+q+") doc="+doc, e);
         }
Index: lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources.java	(revision 193e4a64234b2f76036d8f018a7478d61e5a0fab)
+++ lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources.java	(revision 07a49fcafc8be0457ed87cd061a72601844f0633)
@@ -379,6 +379,10 @@
     ValueSource vs = new QueryValueSource(new FunctionQuery(new ConstValueSource(2f)), 0f);
     assertHits(new FunctionQuery(vs), new float[] { 2f, 2f });
     assertAllExist(vs);
+
+    vs = new QueryValueSource(new FunctionRangeQuery(new IntFieldSource("int"), Integer.MIN_VALUE, Integer.MAX_VALUE, true, true), 0f);
+    assertHits(new FunctionQuery(vs), new float[] { 35f, 54f });
+    assertAllExist(vs);
   }
 
   public void testQuery() throws Exception {
