diff --git a/lucene/core/src/java/org/apache/lucene/index/BaseCompositeReader.java b/lucene/core/src/java/org/apache/lucene/index/BaseCompositeReader.java
index 7bb165f..d2f1ec1 100644
--- a/lucene/core/src/java/org/apache/lucene/index/BaseCompositeReader.java
+++ b/lucene/core/src/java/org/apache/lucene/index/BaseCompositeReader.java
@@ -22,6 +22,8 @@ import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
 
+import org.apache.lucene.util.BytesRef;
+
 /** Base class for implementing {@link CompositeReader}s based on an array
  * of sub-readers. The implementing class has to add code for
  * correctly refcounting and closing the sub-readers.
@@ -196,4 +198,40 @@ public abstract class BaseCompositeReader<R extends IndexReader> extends Composi
   protected final List<? extends R> getSequentialSubReaders() {
     return subReadersList;
   }
+  
+  public NumericDocValues getNumericDocValues(final String field) throws IOException {
+    ensureOpen();
+    final NumericDocValues[] subValues = new NumericDocValues[subReaders.length];
+    for (int i = 0; i < subValues.length; ++i) {
+      subValues[i] = subReaders[i].getNumericDocValues(field);
+    }
+
+    return new NumericDocValues() {
+
+      @Override
+      public long get(int docID) {
+        int i = readerIndex(docID);
+        int docbase = readerBase(i);
+        return subValues[i].get(docID - docbase);
+      }
+    };
+  }
+
+  public BinaryDocValues getBinaryDocValues(String field) throws IOException {
+    ensureOpen();
+    final BinaryDocValues[] subValues = new BinaryDocValues[subReaders.length];
+    for (int i = 0; i < subValues.length; ++i) {
+      subValues[i] = subReaders[i].getBinaryDocValues(field);
+    }
+
+    return new BinaryDocValues() {
+
+      @Override
+      public void get(int docID, BytesRef result) {
+        int i = readerIndex(docID);
+        int docbase = readerBase(i);
+        subValues[i].get(docID - docbase, result);
+      }
+    };
+  }
 }
diff --git a/lucene/core/src/java/org/apache/lucene/index/CompositeReader.java b/lucene/core/src/java/org/apache/lucene/index/CompositeReader.java
index 8265da7..9d2a30c 100644
--- a/lucene/core/src/java/org/apache/lucene/index/CompositeReader.java
+++ b/lucene/core/src/java/org/apache/lucene/index/CompositeReader.java
@@ -17,10 +17,11 @@ package org.apache.lucene.index;
  * limitations under the License.
  */
 
+import java.io.IOException;
 import java.util.List;
 
-import org.apache.lucene.search.SearcherManager; // javadocs
-import org.apache.lucene.store.*;
+import org.apache.lucene.store.Directory;
+// javadocs
 
 /**
  Instances of this reader type can only
@@ -107,4 +108,8 @@ public abstract class CompositeReader extends IndexReader {
     }
     return readerContext;
   }
+  
+  public abstract NumericDocValues getNumericDocValues(String field) throws IOException;
+
+  public abstract BinaryDocValues getBinaryDocValues(String field) throws IOException;
 }
diff --git a/lucene/core/src/java/org/apache/lucene/index/IndexReader.java b/lucene/core/src/java/org/apache/lucene/index/IndexReader.java
index fed2151..2424b82 100644
--- a/lucene/core/src/java/org/apache/lucene/index/IndexReader.java
+++ b/lucene/core/src/java/org/apache/lucene/index/IndexReader.java
@@ -564,5 +564,17 @@ public abstract class IndexReader implements Closeable {
    * @see Terms#getSumTotalTermFreq()
    */
   public abstract long getSumTotalTermFreq(String field) throws IOException;
+  
+  /** Returns {@link NumericDocValues} for this field, or
+   *  null if no {@link NumericDocValues} were indexed for
+   *  this field.  The returned instance should only be
+   *  used by a single thread. */
+  public abstract NumericDocValues getNumericDocValues(String field) throws IOException;
+
+  /** Returns {@link BinaryDocValues} for this field, or
+   *  null if no {@link BinaryDocValues} were indexed for
+   *  this field.  The returned instance should only be
+   *  used by a single thread. */
+  public abstract BinaryDocValues getBinaryDocValues(String field) throws IOException;
 
 }
diff --git a/lucene/core/src/java/org/apache/lucene/search/IndexSearcher.java b/lucene/core/src/java/org/apache/lucene/search/IndexSearcher.java
index 925544e..fd64f4c 100644
--- a/lucene/core/src/java/org/apache/lucene/search/IndexSearcher.java
+++ b/lucene/core/src/java/org/apache/lucene/search/IndexSearcher.java
@@ -34,10 +34,12 @@ import java.util.concurrent.locks.ReentrantLock;
 
 import org.apache.lucene.document.Document;
 import org.apache.lucene.index.AtomicReaderContext;
+import org.apache.lucene.index.BinaryDocValues;
 import org.apache.lucene.index.DirectoryReader; // javadocs
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.MultiFields;
 import org.apache.lucene.index.IndexReaderContext;
+import org.apache.lucene.index.NumericDocValues;
 import org.apache.lucene.index.ReaderUtil;
 import org.apache.lucene.index.StoredFieldVisitor;
 import org.apache.lucene.index.Term;
@@ -959,4 +961,20 @@ public class IndexSearcher {
     }
     return new CollectionStatistics(field, reader.maxDoc(), docCount, sumTotalTermFreq, sumDocFreq);
   }
+  
+  /** Returns {@link NumericDocValues} for this field, or
+   *  null if no {@link NumericDocValues} were indexed for
+   *  this field.  The returned instance should only be
+   *  used by a single thread. */
+  public NumericDocValues getNumericDocValues(String field) throws IOException {
+    return reader.getNumericDocValues(field);
+  }
+
+  /** Returns {@link BinaryDocValues} for this field, or
+   *  null if no {@link BinaryDocValues} were indexed for
+   *  this field.  The returned instance should only be
+   *  used by a single thread. */
+  public BinaryDocValues getBinaryDocValues(String field) throws IOException {
+    return reader.getBinaryDocValues(field);
+  }
 }
