Index: lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestStemmerOverrideFilter.java
===================================================================
--- lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestStemmerOverrideFilter.java	(revision 1719942)
+++ lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestStemmerOverrideFilter.java	(working copy)
@@ -23,6 +23,7 @@
 import java.util.List;
 import java.util.Map.Entry;
 import java.util.Map;
+import java.util.Random;
 import java.util.Set;
 
 import org.apache.lucene.analysis.BaseTokenStreamTestCase;
@@ -175,4 +176,82 @@
       }
     }
   }
+  
+  
+  
+  private static final Random RANDOM = new Random();
+  public void testCrappyInputFailure() throws IOException {
+    Map<String,String> stemMap = new HashMap<String,String>();
+    Map<String,String> resultMap = new HashMap<String,String>();
+    
+    for (int i = 0; i < 50000; i++) {
+        String suffix = random(10, 0, 0, false, false, null, RANDOM);
+        System.out.println(suffix);
+        stemMap.put(suffix, "stuff");
+        resultMap.put(suffix, "stuff");
+    }
+    
+    testResultMap(resultMap, buildStemMap(stemMap), false);
+  }  
+  
+  protected void testResultMap(Map<String,String> resultMap, StemmerOverrideMap build, boolean stem) throws IOException {
+    for (Entry<String,String> entry : resultMap.entrySet()) {
+      Tokenizer tokenizer = new KeywordTokenizer();
+      tokenizer.setReader(new StringReader(entry.getKey()));
+      TokenStream stream;
+      
+      stream = new StemmerOverrideFilter(tokenizer, build);    
+          
+      assertTokenStreamContents(stream, new String[] {entry.getValue()});
+    }
+  }
+  
+  protected StemmerOverrideMap buildStemMap(Map<String,String> stemMap) throws IOException {
+    StemmerOverrideFilter.Builder builder = new StemmerOverrideFilter.Builder(false);
+    Set<Entry<String,String>> entrySet = stemMap.entrySet();
+    
+    for (Entry<String,String> entry : entrySet) {
+      builder.add(entry.getKey(), entry.getValue());
+    }
+    
+    return builder.build();
+  }
+  
+  public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] chars, Random random) {
+      if (count == 0) {
+          return "";
+      } else if (count < 0) {
+          throw new IllegalArgumentException("Requested random string length " + count + " is less than 0.");
+      }
+      if ((start == 0) && (end == 0)) {
+          end = 'z' + 1;
+          start = ' ';
+          if (!letters && !numbers) {
+              start = 0;
+              end = Integer.MAX_VALUE;
+          }
+      }
+
+      StringBuffer buffer = new StringBuffer();
+      int gap = end - start;
+
+      while (count-- != 0) {
+          char ch;
+          if (chars == null) {
+              ch = (char) (random.nextInt(gap) + start);
+          } else {
+              ch = chars[random.nextInt(gap) + start];
+          }
+          if ((letters && numbers && Character.isLetterOrDigit(ch))
+              || (letters && Character.isLetter(ch))
+              || (numbers && Character.isDigit(ch))
+              || (!letters && !numbers)) {
+              buffer.append(ch);
+          } else {
+              count++;
+          }
+      }
+      return buffer.toString();
+  }
+
 }
