Index: java/org/apache/lucene/search/BooleanQuery.java
===================================================================
RCS file: /home/cvspublic/jakarta-lucene/src/java/org/apache/lucene/search/BooleanQuery.java,v
retrieving revision 1.18
diff -u -r1.18 BooleanQuery.java
--- java/org/apache/lucene/search/BooleanQuery.java	15 Jan 2004 22:42:32 -0000	1.18
+++ java/org/apache/lucene/search/BooleanQuery.java	6 Feb 2004 10:46:26 -0000
@@ -176,7 +176,7 @@
 
       if (allRequired && noneBoolean) {           // ConjunctionScorer is okay
         ConjunctionScorer result =
-          new ConjunctionScorer(searcher.getSimilarity());
+          new ConjunctionScorer(getSimilarity(searcher));
         for (int i = 0 ; i < weights.size(); i++) {
           BooleanClause c = (BooleanClause)clauses.elementAt(i);
           Weight w = (Weight)weights.elementAt(i);
@@ -189,7 +189,7 @@
       }
 
       // Use good-old BooleanScorer instead.
-      BooleanScorer result = new BooleanScorer(searcher.getSimilarity());
+      BooleanScorer result = new BooleanScorer(getSimilarity(searcher));
 
       for (int i = 0 ; i < weights.size(); i++) {
         BooleanClause c = (BooleanClause)clauses.elementAt(i);
@@ -233,7 +233,7 @@
       if (coord == 1)                               // only one clause matched
         sumExpl = sumExpl.getDetails()[0];          // eliminate wrapper
 
-      float coordFactor = searcher.getSimilarity().coord(coord, maxCoord);
+      float coordFactor = getSimilarity(searcher).coord(coord, maxCoord);
       if (coordFactor == 1.0f)                      // coord is no-op
         return sumExpl;                             // eliminate wrapper
       else {
Index: java/org/apache/lucene/search/PhrasePrefixQuery.java
===================================================================
RCS file: /home/cvspublic/jakarta-lucene/src/java/org/apache/lucene/search/PhrasePrefixQuery.java,v
retrieving revision 1.10
diff -u -r1.10 PhrasePrefixQuery.java
--- java/org/apache/lucene/search/PhrasePrefixQuery.java	15 Dec 2003 22:26:13 -0000	1.10
+++ java/org/apache/lucene/search/PhrasePrefixQuery.java	6 Feb 2004 10:46:26 -0000
@@ -135,7 +135,7 @@
       while (i.hasNext()) {
         Term[] terms = (Term[])i.next();
         for (int j=0; j<terms.length; j++)
-          idf += searcher.getSimilarity().idf(terms[j], searcher);
+          idf += getSimilarity(searcher).idf(terms[j], searcher);
       }
 
       queryWeight = idf * getBoost();             // compute query weight
@@ -169,10 +169,10 @@
       }
     
       if (slop == 0)
-        return new ExactPhraseScorer(this, tps, searcher.getSimilarity(),
+        return new ExactPhraseScorer(this, tps, getSimilarity(searcher),
                                      reader.norms(field));
       else
-        return new SloppyPhraseScorer(this, tps, searcher.getSimilarity(),
+        return new SloppyPhraseScorer(this, tps, getSimilarity(searcher),
                                       slop, reader.norms(field));
     }
     
Index: java/org/apache/lucene/search/PhraseQuery.java
===================================================================
RCS file: /home/cvspublic/jakarta-lucene/src/java/org/apache/lucene/search/PhraseQuery.java,v
retrieving revision 1.12
diff -u -r1.12 PhraseQuery.java
--- java/org/apache/lucene/search/PhraseQuery.java	15 Dec 2003 22:26:13 -0000	1.12
+++ java/org/apache/lucene/search/PhraseQuery.java	6 Feb 2004 10:46:26 -0000
@@ -121,7 +121,7 @@
     public float getValue() { return value; }
 
     public float sumOfSquaredWeights() throws IOException {
-      idf = searcher.getSimilarity().idf(terms, searcher);
+      idf = getSimilarity(searcher).idf(terms, searcher);
       queryWeight = idf * getBoost();             // compute query weight
       return queryWeight * queryWeight;           // square it
     }
@@ -145,11 +145,11 @@
       }
 
       if (slop == 0)				  // optimize exact case
-        return new ExactPhraseScorer(this, tps, searcher.getSimilarity(),
+        return new ExactPhraseScorer(this, tps, getSimilarity(searcher),
                                      reader.norms(field));
       else
         return
-          new SloppyPhraseScorer(this, tps, searcher.getSimilarity(), slop,
+          new SloppyPhraseScorer(this, tps, getSimilarity(searcher), slop,
                                  reader.norms(field));
       
     }
Index: java/org/apache/lucene/search/Query.java
===================================================================
RCS file: /home/cvspublic/jakarta-lucene/src/java/org/apache/lucene/search/Query.java,v
retrieving revision 1.13
diff -u -r1.13 Query.java
--- java/org/apache/lucene/search/Query.java	3 Oct 2003 03:05:28 -0000	1.13
+++ java/org/apache/lucene/search/Query.java	6 Feb 2004 10:46:27 -0000
@@ -120,7 +120,7 @@
     Query query = searcher.rewrite(this);
     Weight weight = query.createWeight(searcher);
     float sum = weight.sumOfSquaredWeights();
-    float norm = searcher.getSimilarity().queryNorm(sum);
+    float norm = getSimilarity(searcher).queryNorm(sum);
     weight.normalize(norm);
     return weight;
   }
@@ -161,6 +161,16 @@
     }
     return result;
   }
+
+	/** Returns the Similarity implementation to be used. 
+	This permits one to subclass a Query class so
+	that it can specify it's own Similarity implementation, perhaps one that
+	delegates through that of the Searcher.
+	 */
+	public Similarity getSimilarity(Searcher searcher) {
+		 return searcher.getSimilarity();
+	}
+
 
 
   /** Returns a clone of this query. */
Index: java/org/apache/lucene/search/TermQuery.java
===================================================================
RCS file: /home/cvspublic/jakarta-lucene/src/java/org/apache/lucene/search/TermQuery.java,v
retrieving revision 1.8
diff -u -r1.8 TermQuery.java
--- java/org/apache/lucene/search/TermQuery.java	15 Dec 2003 22:26:13 -0000	1.8
+++ java/org/apache/lucene/search/TermQuery.java	6 Feb 2004 10:46:27 -0000
@@ -80,7 +80,7 @@
     public float getValue() { return value; }
 
     public float sumOfSquaredWeights() throws IOException {
-      idf = searcher.getSimilarity().idf(term, searcher); // compute idf
+      idf = getSimilarity(searcher).idf(term, searcher); // compute idf
       queryWeight = idf * getBoost();             // compute query weight
       return queryWeight * queryWeight;           // square it
     }
@@ -97,7 +97,7 @@
       if (termDocs == null)
         return null;
       
-      return new TermScorer(this, termDocs, searcher.getSimilarity(),
+      return new TermScorer(this, termDocs, getSimilarity(searcher),
                             reader.norms(term.field()));
     }
 
Index: java/org/apache/lucene/search/spans/SpanWeight.java
===================================================================
RCS file: /home/cvspublic/jakarta-lucene/src/java/org/apache/lucene/search/spans/SpanWeight.java,v
retrieving revision 1.2
diff -u -r1.2 SpanWeight.java
--- java/org/apache/lucene/search/spans/SpanWeight.java	2 Feb 2004 13:27:52 -0000	1.2
+++ java/org/apache/lucene/search/spans/SpanWeight.java	6 Feb 2004 10:46:27 -0000
@@ -51,7 +51,7 @@
   public float getValue() { return value; }
 
   public float sumOfSquaredWeights() throws IOException {
-    idf = searcher.getSimilarity().idf(terms, searcher);
+    idf = this.query.getSimilarity(searcher).idf(terms, searcher);
     queryWeight = idf * query.getBoost();         // compute query weight
     return queryWeight * queryWeight;             // square it
   }
@@ -64,7 +64,7 @@
 
   public Scorer scorer(IndexReader reader) throws IOException {
     return new SpanScorer(query.getSpans(reader), this,
-                          searcher.getSimilarity(),
+                          query.getSimilarity(searcher),
                           reader.norms(query.getField()));
   }
 
