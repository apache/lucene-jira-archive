diff --git a/lucene/facet/src/java/org/apache/lucene/facet/collections/ArrayHashMap.java b/lucene/facet/src/java/org/apache/lucene/facet/collections/ArrayHashMap.java
index 93fe9e1..2867558 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/collections/ArrayHashMap.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/collections/ArrayHashMap.java
@@ -508,7 +508,7 @@ public class ArrayHashMap<K,V> implements Iterable<V> {
 
   @Override
   public String toString() {
-    StringBuffer sb = new StringBuffer();
+    StringBuilder sb = new StringBuilder();
     sb.append('{');
     Iterator<K> keyIterator = keyIterator();
     while (keyIterator.hasNext()) {
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/collections/FloatToObjectMap.java b/lucene/facet/src/java/org/apache/lucene/facet/collections/FloatToObjectMap.java
index da5c4f8..d271b78 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/collections/FloatToObjectMap.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/collections/FloatToObjectMap.java
@@ -584,7 +584,7 @@ public class FloatToObjectMap<T> implements Iterable<T> {
 
   @Override
   public String toString() {
-    StringBuffer sb = new StringBuffer();
+    StringBuilder sb = new StringBuilder();
     sb.append('{');
     FloatIterator keyIterator = keyIterator();
     while (keyIterator.hasNext()) {
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/collections/IntArray.java b/lucene/facet/src/java/org/apache/lucene/facet/collections/IntArray.java
index 9cb6e1c..bfba1c2 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/collections/IntArray.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/collections/IntArray.java
@@ -232,11 +232,22 @@ public class IntArray {
    */
   @Override
   public String toString() {
-    String s = "(" + size + ") ";
-    for (int i = 0; i < size; ++i) {
-      s += "" + data[i] + ", ";
+    // 2 parenthesis, size ints, 1 comma and space for size - 1 numbers
+    // The maximum string length is Integer.MIN_VALUE = 11 chars
+    StringBuilder sb = new StringBuilder(2 + 2 * (size - 1) + size * 11);
+    sb.append("(");
+
+    if(size > 0) {
+      sb.append(data[0]);
     }
-    return s;
+
+    for(int i = 1; i < size; i++) {
+      sb.append(", ");
+      sb.append(data[i]);
+    }
+    sb.append(")");
+
+    return sb.toString();
   }
 
   /**
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/collections/IntHashSet.java b/lucene/facet/src/java/org/apache/lucene/facet/collections/IntHashSet.java
index 3d5a817..c7db549 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/collections/IntHashSet.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/collections/IntHashSet.java
@@ -511,7 +511,7 @@ public class IntHashSet {
    */
   @Override
   public String toString() {
-    StringBuffer sb = new StringBuffer();
+    StringBuilder sb = new StringBuilder();
     sb.append('{');
     IntIterator iterator = iterator();
     while (iterator.hasNext()) {
@@ -527,10 +527,10 @@ public class IntHashSet {
 
   public String toHashString() {
     String string = "\n";
-    StringBuffer sb = new StringBuffer();
+    StringBuilder sb = new StringBuilder();
 
     for (int i = 0; i < this.baseHash.length; i++) {
-      StringBuffer sb2 = new StringBuffer();
+      StringBuilder sb2 = new StringBuilder();
       boolean shouldAppend = false;
       sb2.append(i + ".\t");
       for (int index = baseHash[i]; index != 0; index = next[index]) {
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/collections/IntToDoubleMap.java b/lucene/facet/src/java/org/apache/lucene/facet/collections/IntToDoubleMap.java
index b787ab6..1c0ecdf 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/collections/IntToDoubleMap.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/collections/IntToDoubleMap.java
@@ -584,7 +584,7 @@ public class IntToDoubleMap {
 
   @Override
   public String toString() {
-    StringBuffer sb = new StringBuffer();
+    StringBuilder sb = new StringBuilder();
     sb.append('{');
     IntIterator keyIterator = keyIterator();
     while (keyIterator.hasNext()) {
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/collections/IntToFloatMap.java b/lucene/facet/src/java/org/apache/lucene/facet/collections/IntToFloatMap.java
index 3e9d7ae..65401d8 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/collections/IntToFloatMap.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/collections/IntToFloatMap.java
@@ -584,7 +584,7 @@ public class IntToFloatMap {
 
   @Override
   public String toString() {
-    StringBuffer sb = new StringBuffer();
+    StringBuilder sb = new StringBuilder();
     sb.append('{');
     IntIterator keyIterator = keyIterator();
     while (keyIterator.hasNext()) {
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/collections/IntToIntMap.java b/lucene/facet/src/java/org/apache/lucene/facet/collections/IntToIntMap.java
index f2f27fc..e4922c5 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/collections/IntToIntMap.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/collections/IntToIntMap.java
@@ -574,7 +574,7 @@ public class IntToIntMap {
 
   @Override
   public String toString() {
-    StringBuffer sb = new StringBuffer();
+    StringBuilder sb = new StringBuilder();
     sb.append('{');
     IntIterator keyIterator = keyIterator();
     while (keyIterator.hasNext()) {
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/collections/IntToObjectMap.java b/lucene/facet/src/java/org/apache/lucene/facet/collections/IntToObjectMap.java
index 9db16ec..58c692d 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/collections/IntToObjectMap.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/collections/IntToObjectMap.java
@@ -584,7 +584,7 @@ public class IntToObjectMap<T> implements Iterable<T> {
 
   @Override
   public String toString() {
-    StringBuffer sb = new StringBuffer();
+    StringBuilder sb = new StringBuilder();
     sb.append('{');
     IntIterator keyIterator = keyIterator();
     while (keyIterator.hasNext()) {
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/collections/ObjectToFloatMap.java b/lucene/facet/src/java/org/apache/lucene/facet/collections/ObjectToFloatMap.java
index 7c7a95c..0e82f91 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/collections/ObjectToFloatMap.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/collections/ObjectToFloatMap.java
@@ -579,7 +579,7 @@ public class ObjectToFloatMap<K> {
 
   @Override
   public String toString() {
-    StringBuffer sb = new StringBuffer();
+    StringBuilder sb = new StringBuilder();
     sb.append('{');
     Iterator<K> keyIterator = keyIterator();
     while (keyIterator.hasNext()) {
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/collections/ObjectToIntMap.java b/lucene/facet/src/java/org/apache/lucene/facet/collections/ObjectToIntMap.java
index a7ce7a6..1e9cf5b 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/collections/ObjectToIntMap.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/collections/ObjectToIntMap.java
@@ -578,7 +578,7 @@ public class ObjectToIntMap<K> {
 
   @Override
   public String toString() {
-    StringBuffer sb = new StringBuffer();
+    StringBuilder sb = new StringBuilder();
     sb.append('{');
     Iterator<K> keyIterator = keyIterator();
     while (keyIterator.hasNext()) {
