Index: src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory.java	(date 1521244495000)
+++ src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory.java	(revision )
@@ -165,7 +165,7 @@
     }
 
     //First approximation to find a point
-    final GeoPoint centerOfMass = getCenterOfMass(filteredPointList);
+    final GeoPoint centerOfMass = getCenterOfMass(planetModel, filteredPointList);
     final Boolean isCenterOfMassInside = isInsidePolygon(centerOfMass, filteredPointList);
     if (isCenterOfMassInside != null) {
       return generateGeoPolygon(planetModel, filteredPointList, holes, centerOfMass, isCenterOfMassInside);
@@ -192,7 +192,7 @@
     throw new IllegalArgumentException("cannot find a point that is inside the polygon "+filteredPointList);
   }
 
-  private static GeoPoint getCenterOfMass(List<GeoPoint> points) {
+  private static GeoPoint getCenterOfMass(PlanetModel planetModel, List<GeoPoint> points) {
     double x = 0;
     double y = 0;
     double z = 0;
@@ -202,7 +202,7 @@
       y += point.y;
       z += point.z;
     }
-    return new GeoPoint(x / points.size(), y / points.size(), z / points.size());
+    return planetModel.createSurfacePoint(x / points.size(), y / points.size(), z / points.size());
   }
   
   /** Use this class to specify a polygon with associated holes.
@@ -268,6 +268,16 @@
     if (testPointShape == null) {
       throw new IllegalArgumentException("couldn't find a non-degenerate polygon for in-set determination");
     }
+
+    final GeoPoint centerOfMass = getCenterOfMass(planetModel, testPointShape.points);
+    final Boolean isCenterOfMassInside = isInsidePolygon(centerOfMass, testPointShape.points);
+    if (isCenterOfMassInside != null) {
+      if (isCenterOfMassInside == testPointShape.poleMustBeInside) {
+        return new GeoComplexPolygon(planetModel, pointsList, centerOfMass, isCenterOfMassInside);
+      } else {
+        return new GeoComplexPolygon(planetModel, pointsList, new GeoPoint(-centerOfMass.x, -centerOfMass.y, -centerOfMass.z), !isCenterOfMassInside);
+      }
+    }
     
     // Create a random number generator.  Effectively this furnishes us with a repeatable sequence
     // of points to use for poles.
