diff --git a/lucene/misc/src/test/org/apache/lucene/index/TestSortingMergePolicy.java b/lucene/misc/src/test/org/apache/lucene/index/TestSortingMergePolicy.java
index bf319fd..4689d48 100644
--- a/lucene/misc/src/test/org/apache/lucene/index/TestSortingMergePolicy.java
+++ b/lucene/misc/src/test/org/apache/lucene/index/TestSortingMergePolicy.java
@@ -79,13 +79,13 @@ public class TestSortingMergePolicy extends BaseMergePolicyTestCase {
   }
 
   @Override
-  public void testForceMergeNotNeeded() throws IOException {
-    // This is a no-op until we figure out why the (super class) test fails.
-    // https://issues.apache.org/jira/browse/LUCENE-7008
+  protected MergePolicy mergePolicy() {
+    return newSortingMergePolicy(sort);
   }
 
-  public MergePolicy mergePolicy() {
-    return newSortingMergePolicy(sort);
+  @Override
+  protected void setNoCFSRatio(MergePolicy mp, double noCFSRatio) {
+    ((SortingMergePolicy) mp).in.setNoCFSRatio(noCFSRatio);
   }
 
   public static SortingMergePolicy newSortingMergePolicy(Sort sort) {
diff --git a/lucene/test-framework/src/java/org/apache/lucene/index/BaseMergePolicyTestCase.java b/lucene/test-framework/src/java/org/apache/lucene/index/BaseMergePolicyTestCase.java
index d94c1c3..999c1fc 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/index/BaseMergePolicyTestCase.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/index/BaseMergePolicyTestCase.java
@@ -19,6 +19,7 @@ package org.apache.lucene.index;
 
 import org.apache.lucene.analysis.MockAnalyzer;
 import org.apache.lucene.document.Document;
+import org.apache.lucene.index.MergePolicy.OneMerge;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.TestUtil;
@@ -34,20 +35,27 @@ public abstract class BaseMergePolicyTestCase extends LuceneTestCase {
   /** Create a new {@link MergePolicy} instance. */
   protected abstract MergePolicy mergePolicy();
 
+  protected void setNoCFSRatio(MergePolicy mp, double noCFSRatio) {
+    mp.setNoCFSRatio(noCFSRatio);
+  }
+
   public void testForceMergeNotNeeded() throws IOException {
     Directory dir = newDirectory();
     final AtomicBoolean mayMerge = new AtomicBoolean(true);
     final MergeScheduler mergeScheduler = new SerialMergeScheduler() {
       @Override
       synchronized public void merge(IndexWriter writer, MergeTrigger trigger, boolean newMergesFound) throws IOException {
-        if (!mayMerge.get() && writer.getNextMerge() != null) {
-          throw new AssertionError();
+        if (!mayMerge.get()) {
+          final OneMerge merge = writer.getNextMerge();
+          if (merge != null) {
+            throw new AssertionError("Unexpected merge: " + merge);
+          }
         }
         super.merge(writer, trigger, newMergesFound);
       }
     };
     IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())).setMergeScheduler(mergeScheduler).setMergePolicy(mergePolicy()));
-    writer.getConfig().getMergePolicy().setNoCFSRatio(random().nextBoolean() ? 0 : 1);
+    setNoCFSRatio(writer.getConfig().getMergePolicy(), random().nextBoolean() ? 0 : 1);
     final int numSegments = TestUtil.nextInt(random(), 2, 20);
     for (int i = 0; i < numSegments; ++i) {
       final int numDocs = TestUtil.nextInt(random(), 1, 5);
