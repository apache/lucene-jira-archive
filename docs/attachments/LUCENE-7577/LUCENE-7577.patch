diff --git a/lucene/core/src/java/org/apache/lucene/index/PrefixCodedTerms.java b/lucene/core/src/java/org/apache/lucene/index/PrefixCodedTerms.java
index 3dca3db..2f572ba 100644
--- a/lucene/core/src/java/org/apache/lucene/index/PrefixCodedTerms.java
+++ b/lucene/core/src/java/org/apache/lucene/index/PrefixCodedTerms.java
@@ -185,11 +185,19 @@ public class PrefixCodedTerms implements Accountable {
     return size;
   }
 
+  private int bufferHashCode; // cached hash code of the buffer, computed lazily
+
   @Override
   public int hashCode() {
-    int h = buffer.hashCode();
-    h = 31 * h + (int) (delGen ^ (delGen >>> 32));
-    return h;
+    int bufferHashCode = this.bufferHashCode;
+    if (bufferHashCode == 0) { // 0 is used to indicate the hashcode is not computed yet
+      bufferHashCode = buffer.hashCode();
+      if (bufferHashCode == 0) {
+        bufferHashCode = 1; // any non-zero value would work
+      }
+      this.bufferHashCode = bufferHashCode;
+    }
+    return 31 * bufferHashCode + Long.hashCode(delGen);
   }
 
   @Override
@@ -198,6 +206,9 @@ public class PrefixCodedTerms implements Accountable {
     if (obj == null) return false;
     if (getClass() != obj.getClass()) return false;
     PrefixCodedTerms other = (PrefixCodedTerms) obj;
-    return buffer.equals(other.buffer) && delGen == other.delGen;
+    // size is not required for equality but can help fail faster
+    return size == other.size
+        && delGen == other.delGen
+        && buffer.equals(other.buffer);
   }
 }
diff --git a/lucene/core/src/java/org/apache/lucene/search/PointInSetQuery.java b/lucene/core/src/java/org/apache/lucene/search/PointInSetQuery.java
index f37d21d..db6ef34 100644
--- a/lucene/core/src/java/org/apache/lucene/search/PointInSetQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/PointInSetQuery.java
@@ -51,7 +51,6 @@ import org.apache.lucene.util.StringHelper;
 public abstract class PointInSetQuery extends Query {
   // A little bit overkill for us, since all of our "terms" are always in the same field:
   final PrefixCodedTerms sortedPackedPoints;
-  final int sortedPackedPointsHashCode;
   final String field;
   final int numDims;
   final int bytesPerDim;
@@ -101,7 +100,6 @@ public abstract class PointInSetQuery extends Query {
       previous.copyBytes(current);
     }
     sortedPackedPoints = builder.finish();
-    sortedPackedPointsHashCode = sortedPackedPoints.hashCode();
   }
 
   @Override
@@ -354,7 +352,7 @@ public abstract class PointInSetQuery extends Query {
   public final int hashCode() {
     int hash = classHash();
     hash = 31 * hash + field.hashCode();
-    hash = 31 * hash + sortedPackedPointsHashCode;
+    hash = 31 * hash + sortedPackedPoints.hashCode();
     hash = 31 * hash + numDims;
     hash = 31 * hash + bytesPerDim;
     return hash;
@@ -370,7 +368,6 @@ public abstract class PointInSetQuery extends Query {
     return other.field.equals(field) &&
            other.numDims == numDims &&
            other.bytesPerDim == bytesPerDim &&
-           other.sortedPackedPointsHashCode == sortedPackedPointsHashCode &&
            other.sortedPackedPoints.equals(sortedPackedPoints);
   }
 
diff --git a/lucene/core/src/test/org/apache/lucene/index/TestPrefixCodedTerms.java b/lucene/core/src/test/org/apache/lucene/index/TestPrefixCodedTerms.java
index 89d4ad1..348ce8c 100644
--- a/lucene/core/src/test/org/apache/lucene/index/TestPrefixCodedTerms.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestPrefixCodedTerms.java
@@ -146,4 +146,33 @@ public class TestPrefixCodedTerms extends LuceneTestCase {
 
     assertFalse(expected.hasNext());
   }
+
+  public void testEquals() {
+    PrefixCodedTerms.Builder builder = new PrefixCodedTerms.Builder();
+    builder.add(new Term("bar", "quux"));
+    builder.add(new Term("foo", "bar"));
+    builder.add(new Term("foo", "baz"));
+    PrefixCodedTerms terms1 = builder.finish();
+
+    builder = new PrefixCodedTerms.Builder();
+    builder.add(new Term("bar", "quux"));
+    builder.add(new Term("foo", "bar"));
+    builder.add(new Term("foo", "baz"));
+    PrefixCodedTerms terms2 = builder.finish();
+
+    assertEquals(terms1, terms2);
+    assertEquals(terms1.hashCode(), terms2.hashCode());
+
+    terms2.setDelGen(42);
+    assertFalse(terms1.equals(terms2));
+    assertFalse(terms1.hashCode() == terms2.hashCode());
+
+    builder = new PrefixCodedTerms.Builder();
+    builder.add(new Term("foo", "bar"));
+    builder.add(new Term("foo", "baz"));
+    PrefixCodedTerms terms3 = builder.finish();
+
+    assertFalse(terms1.equals(terms3));
+    assertFalse(terms1.hashCode() == terms3.hashCode());
+  }
 }
diff --git a/lucene/join/src/java/org/apache/lucene/search/join/PointInSetIncludingScoreQuery.java b/lucene/join/src/java/org/apache/lucene/search/join/PointInSetIncludingScoreQuery.java
index 70c28d5..875de61 100644
--- a/lucene/join/src/java/org/apache/lucene/search/join/PointInSetIncludingScoreQuery.java
+++ b/lucene/join/src/java/org/apache/lucene/search/join/PointInSetIncludingScoreQuery.java
@@ -69,7 +69,6 @@ abstract class PointInSetIncludingScoreQuery extends Query {
   final Query originalQuery;
   final boolean multipleValuesPerDocument;
   final PrefixCodedTerms sortedPackedPoints;
-  final int sortedPackedPointsHashCode;
   final String field;
   final int bytesPerDim;
 
@@ -114,7 +113,6 @@ abstract class PointInSetIncludingScoreQuery extends Query {
       previous.copyBytes(current);
     }
     sortedPackedPoints = builder.finish();
-    sortedPackedPointsHashCode = sortedPackedPoints.hashCode();
   }
 
   @Override
@@ -278,7 +276,7 @@ abstract class PointInSetIncludingScoreQuery extends Query {
     int hash = classHash();
     hash = 31 * hash + field.hashCode();
     hash = 31 * hash + originalQuery.hashCode();
-    hash = 31 * hash + sortedPackedPointsHashCode;
+    hash = 31 * hash + sortedPackedPoints.hashCode();
     hash = 31 * hash + bytesPerDim;
     return hash;
   }
@@ -293,7 +291,6 @@ abstract class PointInSetIncludingScoreQuery extends Query {
     return other.field.equals(field) &&
            other.originalQuery.equals(originalQuery) &&
            other.bytesPerDim == bytesPerDim &&
-           other.sortedPackedPointsHashCode == sortedPackedPointsHashCode &&
            other.sortedPackedPoints.equals(sortedPackedPoints);
   }
 
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/TermsQuery.java b/lucene/queries/src/java/org/apache/lucene/queries/TermsQuery.java
index 7b7f094..383abf8 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/TermsQuery.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/TermsQuery.java
@@ -87,7 +87,6 @@ public class TermsQuery extends Query implements Accountable {
 
   private final boolean singleField; // whether all terms are from the same field
   private final PrefixCodedTerms termData;
-  private final int termDataHashCode; // cached hashcode of termData
 
   /**
    * Creates a new {@link TermsQuery} from the given collection. It
@@ -112,7 +111,6 @@ public class TermsQuery extends Query implements Accountable {
     }
     singleField = fields.size() == 1;
     termData = builder.finish();
-    termDataHashCode = termData.hashCode();
   }
   
   /**
@@ -139,7 +137,6 @@ public class TermsQuery extends Query implements Accountable {
     }
     singleField = true;
     termData = builder.finish();
-    termDataHashCode = termData.hashCode();
   }
 
   /**
@@ -180,13 +177,12 @@ public class TermsQuery extends Query implements Accountable {
 
   private boolean equalsTo(TermsQuery other) {
     // termData might be heavy to compare so check the hash code first
-    return termDataHashCode == other.termDataHashCode && 
-           termData.equals(other.termData);
+    return termData.equals(other.termData);
   }
 
   @Override
   public int hashCode() {
-    return 31 * classHash() + termDataHashCode;
+    return 31 * classHash() + termData.hashCode();
   }
 
   /** Returns the terms wrapped in a PrefixCodedTerms. */
