Index: lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.java	(revision cc75be53f9b3b86ec59cb93896c4fd5a9a5926b2)
+++ lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.java	(revision )
@@ -103,7 +103,9 @@
     }
 
     @Override
-    public void extractTerms(Set<Term> terms) {}
+    public void extractTerms(Set<Term> terms) {
+      parentWeight.extractTerms(terms);
+    }
 
     @Override
     public float getValueForNormalization() throws IOException {
Index: lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.java	(revision cc75be53f9b3b86ec59cb93896c4fd5a9a5926b2)
+++ lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.java	(revision )
@@ -125,21 +125,21 @@
   }
 
   private static class BlockJoinWeight extends Weight {
-    private final Query joinQuery;
     private final Weight childWeight;
     private final BitSetProducer parentsFilter;
     private final ScoreMode scoreMode;
 
     public BlockJoinWeight(Query joinQuery, Weight childWeight, BitSetProducer parentsFilter, ScoreMode scoreMode) {
       super(joinQuery);
-      this.joinQuery = joinQuery;
       this.childWeight = childWeight;
       this.parentsFilter = parentsFilter;
       this.scoreMode = scoreMode;
     }
 
     @Override
-    public void extractTerms(Set<Term> terms) {}
+    public void extractTerms(Set<Term> terms) {
+      childWeight.extractTerms(terms);
+    }
 
     @Override
     public float getValueForNormalization() throws IOException {
Index: lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java	(revision cc75be53f9b3b86ec59cb93896c4fd5a9a5926b2)
+++ lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java	(revision )
@@ -20,8 +20,10 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
+import java.util.HashSet;
 import java.util.List;
 import java.util.Locale;
+import java.util.Set;
 
 import org.apache.lucene.analysis.MockAnalyzer;
 import org.apache.lucene.document.Document;
@@ -100,8 +102,36 @@
     job.add(newStringField("qualification", qualification, Field.Store.YES));
     job.add(new IntPoint("year", year));
     return job;
+  }
+
+  public void testExtractTerms() throws Exception {
+    TermQuery termQuery = new TermQuery(new Term("field", "value"));
+    QueryBitSetProducer bitSetProducer = new QueryBitSetProducer(new MatchNoDocsQuery());
+    ToParentBlockJoinQuery toParentBlockJoinQuery = new ToParentBlockJoinQuery(termQuery, bitSetProducer, ScoreMode.None);
+    ToChildBlockJoinQuery toChildBlockJoinQuery = new ToChildBlockJoinQuery(toParentBlockJoinQuery, bitSetProducer);
+
+    Directory directory = newDirectory();
+    final IndexWriter w = new IndexWriter(directory, new IndexWriterConfig(new MockAnalyzer(random())));
+    w.close();
+    IndexReader indexReader = DirectoryReader.open(directory);
+    IndexSearcher indexSearcher = new IndexSearcher(indexReader);
+
+    Weight weight = toParentBlockJoinQuery.createWeight(indexSearcher, false);
+    Set<Term> terms = new HashSet<>();
+    weight.extractTerms(terms);
+    Term[] termArr =terms.toArray(new Term[0]);
+    assertEquals(1, termArr.length);
+
+    weight = toChildBlockJoinQuery.createWeight(indexSearcher, false);
+    terms = new HashSet<>();
+    weight.extractTerms(terms);
+    termArr =terms.toArray(new Term[0]);
+    assertEquals(1, termArr.length);
+
+    indexReader.close();
+    directory.close();
   }
-  
+
   public void testEmptyChildFilter() throws Exception {
     final Directory dir = newDirectory();
     final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));
