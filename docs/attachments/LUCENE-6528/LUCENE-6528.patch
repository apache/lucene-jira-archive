Index: lucene/core/src/test/org/apache/lucene/search/TestSort.java
===================================================================
--- lucene/core/src/test/org/apache/lucene/search/TestSort.java	(revision 1683775)
+++ lucene/core/src/test/org/apache/lucene/search/TestSort.java	(working copy)
@@ -28,6 +28,7 @@
 import org.apache.lucene.document.SortedDocValuesField;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.RandomIndexWriter;
+import org.apache.lucene.index.Term;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.LuceneTestCase;
@@ -657,7 +658,7 @@
     doc.add(new DoubleDocValuesField("value", -0D));
     doc.add(newStringField("value", "-0", Field.Store.YES));
     writer.addDocument(doc);
-    doc = new Document();
+
     IndexReader ir = writer.getReader();
     writer.close();
     
@@ -844,4 +845,48 @@
     ir.close();
     dir.close();
   }
+  
+  /**
+   * Tests sorting by document score (relevance).
+   * Sorting by SortField.FIELD_SCORE should return the same results as without a sort criteria.
+   */
+  public void testScore() throws IOException {
+    Directory dir = newDirectory();
+    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);
+
+    String[] docs = new String[]{
+        "this is the end of the world right",
+        "is this it or maybe not",
+        "this is the end of the universe as we know it",
+        "there is the famous restaurant at the end of the universe"};
+
+    for (String s : docs) {
+      Document doc = new Document();
+      doc.add(newTextField("value", s, Field.Store.YES));
+      writer.addDocument(doc);
+    }
+
+    IndexReader ir = writer.getReader();
+    writer.close();
+
+    IndexSearcher searcher = newSearcher(ir);
+    Sort sort = new Sort(SortField.FIELD_SCORE);
+    Query query = new TermQuery(new Term("value", "is"));
+
+    TopDocs td = searcher.search(query, 10, sort);
+    assertEquals(4, td.totalHits);
+
+    TopDocs ns = searcher.search(query, 10);
+    assertEquals(4, ns.totalHits);
+
+    // Sorting by SortField.FIELD_SCORE should return the same results as calling
+    // Searcher#search() without a sort criteria, only with slightly more overhead.
+    for (int i = 0; i < 4; i++) {
+      assertEquals(ns.scoreDocs[i].doc, td.scoreDocs[i].doc);
+      assertEquals(ns.scoreDocs[i].score, td.scoreDocs[i].score, 0);
+    }
+
+    ir.close();
+    dir.close();
+  }
 }
