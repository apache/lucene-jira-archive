Index: lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50FieldInfosFormat.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50FieldInfosFormat.java	(revision ec007c4bf27ea4e9ff7d77ae6c79a846b9f6a1a4)
+++ lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50FieldInfosFormat.java	(date 1595605249543)
@@ -149,7 +149,6 @@
           try {
             infos[i] = new FieldInfo(name, fieldNumber, storeTermVector, omitNorms, storePayloads, 
                                      indexOptions, docValuesType, dvGen, attributes, 0, 0, 0, false);
-            infos[i].checkConsistency();
           } catch (IllegalStateException e) {
             throw new CorruptIndexException("invalid fieldinfo for field: " + name + ", fieldNumber=" + fieldNumber, input, e);
           }
Index: lucene/core/src/java/org/apache/lucene/index/FieldInfo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/core/src/java/org/apache/lucene/index/FieldInfo.java	(revision ec007c4bf27ea4e9ff7d77ae6c79a846b9f6a1a4)
+++ lucene/core/src/java/org/apache/lucene/index/FieldInfo.java	(date 1595605551210)
@@ -84,7 +84,7 @@
     this.pointIndexDimensionCount = pointIndexDimensionCount;
     this.pointNumBytes = pointNumBytes;
     this.softDeletesField = softDeletesField;
-    assert checkConsistency();
+    this.checkConsistency();
   }
 
   /** 
@@ -179,7 +179,7 @@
     if (attributes != null) {
       this.attributes.putAll(attributes);
     }
-    assert checkConsistency();
+    this.checkConsistency();
   }
 
   /** Record that this field is indexed with points, with the
@@ -214,7 +214,7 @@
     pointIndexDimensionCount = indexDimensionCount;
     pointNumBytes = numBytes;
 
-    assert checkConsistency();
+    this.checkConsistency();
   }
 
   /** Return point data dimension count */
@@ -241,7 +241,7 @@
       throw new IllegalArgumentException("cannot change DocValues type from " + docValuesType + " to " + type + " for field \"" + name + "\"");
     }
     docValuesType = type;
-    assert checkConsistency();
+    this.checkConsistency();
   }
   
   /** Returns IndexOptions for the field, or IndexOptions.NONE if the field is not indexed */
@@ -276,7 +276,7 @@
   /** Sets the docValues generation of this field. */
   void setDocValuesGen(long dvGen) {
     this.dvGen = dvGen;
-    assert checkConsistency();
+    this.checkConsistency();
   }
   
   /**
@@ -289,14 +289,14 @@
   
   void setStoreTermVectors() {
     storeTermVector = true;
-    assert checkConsistency();
+    this.checkConsistency();
   }
   
   void setStorePayloads() {
     if (indexOptions != IndexOptions.NONE && indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0) {
       storePayloads = true;
     }
-    assert checkConsistency();
+    this.checkConsistency();
   }
 
   /**
Index: lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60FieldInfosFormat.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60FieldInfosFormat.java	(revision ec007c4bf27ea4e9ff7d77ae6c79a846b9f6a1a4)
+++ lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60FieldInfosFormat.java	(date 1595605551193)
@@ -165,7 +165,6 @@
             infos[i] = new FieldInfo(name, fieldNumber, storeTermVector, omitNorms, storePayloads, 
                                      indexOptions, docValuesType, dvGen, attributes,
                                      pointDataDimensionCount, pointIndexDimensionCount, pointNumBytes, isSoftDeletesField);
-            infos[i].checkConsistency();
           } catch (IllegalStateException e) {
             throw new CorruptIndexException("invalid fieldinfo for field: " + name + ", fieldNumber=" + fieldNumber, input, e);
           }
Index: lucene/CHANGES.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/CHANGES.txt	(revision ec007c4bf27ea4e9ff7d77ae6c79a846b9f6a1a4)
+++ lucene/CHANGES.txt	(date 1595605739411)
@@ -60,6 +60,9 @@
 
 Improvements
 
+* LUCENE-9440: FieldInfo#checkConsistency called twice from Lucene50(60)FieldInfosFormat#read;
+               Removed the (redundant?) assert and do these checks for real.
+
 * LUCENE-9370: RegExp query is no longer lenient about inappropriate backslashes and
   follows the Java Pattern policy for rejecting illegal syntax.  (Mark Harwood)
 
