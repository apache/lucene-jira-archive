Index: lucene/core/src/java/org/apache/lucene/util/automaton/ByteRunAutomaton.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/automaton/ByteRunAutomaton.java	(revision 099680a062bda5747ada44944e97a6f5e274314c)
+++ lucene/core/src/java/org/apache/lucene/util/automaton/ByteRunAutomaton.java	(revision )
@@ -36,12 +36,12 @@
    * Returns true if the given byte array is accepted by this automaton
    */
   public boolean run(byte[] s, int offset, int length) {
-    int p = initial;
+    int p = getInitialState();
     int l = offset + length;
     for (int i = offset; i < l; i++) {
       p = step(p, s[i] & 0xFF);
       if (p == -1) return false;
     }
-    return accept[p];
+    return isAccept(p);
   }
 }
Index: lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton.java	(revision 099680a062bda5747ada44944e97a6f5e274314c)
+++ lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton.java	(revision )
@@ -37,15 +37,15 @@
  * @lucene.experimental
  */
 public abstract class RunAutomaton {
-  final Automaton automaton;
-  final int maxInterval;
-  final int size;
-  final boolean[] accept;
-  final int initial;
-  final int[] transitions; // delta(state,c) = transitions[state*points.length +
+  private final Automaton automaton;
+  private final int maxInterval;
+  private final int size;
+  private final boolean[] accept;
+  private final int initial;
+  private final int[] transitions; // delta(state,c) = transitions[state*points.length +
                      // getCharClass(c)]
-  final int[] points; // char interval start points
-  final int[] classmap; // map from char number to class class
+  private final int[] points; // char interval start points
+  private final int[] classmap; // map from char number to class class
   
   /**
    * Returns a string representation of this automaton.
@@ -76,8 +76,14 @@
       }
     }
     return b.toString();
+  }
+
+  /** The automata this was constructed from, after being determinized via
+   * {@link Operations#determinize(Automaton, int)}. */
+  public Automaton getAutomaton() {
+    return automaton;
   }
-  
+
   /**
    * Returns number of states in automaton.
    */
Index: lucene/core/src/java/org/apache/lucene/util/automaton/CharacterRunAutomaton.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/automaton/CharacterRunAutomaton.java	(revision 099680a062bda5747ada44944e97a6f5e274314c)
+++ lucene/core/src/java/org/apache/lucene/util/automaton/CharacterRunAutomaton.java	(revision )
@@ -43,25 +43,25 @@
    * Returns true if the given string is accepted by this automaton.
    */
   public boolean run(String s) {
-    int p = initial;
+    int p = getInitialState();
     int l = s.length();
     for (int i = 0, cp = 0; i < l; i += Character.charCount(cp)) {
       p = step(p, cp = s.codePointAt(i));
       if (p == -1) return false;
     }
-    return accept[p];
+    return isAccept(p);
   }
   
   /**
    * Returns true if the given string is accepted by this automaton
    */
   public boolean run(char[] s, int offset, int length) {
-    int p = initial;
+    int p = getInitialState();
     int l = offset + length;
     for (int i = offset, cp = 0; i < l; i += Character.charCount(cp)) {
       p = step(p, cp = Character.codePointAt(s, i, l));
       if (p == -1) return false;
     }
-    return accept[p];
+    return isAccept(p);
   }
 }
Index: lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton.java	(revision 099680a062bda5747ada44944e97a6f5e274314c)
+++ lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton.java	(revision )
@@ -246,7 +246,7 @@
     // This will determinize the binary automaton for us:
     runAutomaton = new ByteRunAutomaton(binary, true, maxDeterminizedStates);
 
-    this.automaton = runAutomaton.automaton;
+    this.automaton = runAutomaton.getAutomaton();
 
     // TODO: this is a bit fragile because if the automaton is not minimized there could be more than 1 sink state but auto-prefix will fail
     // to run for those:
