Index: lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/util/UnescapedCharSequence.java
===================================================================
--- lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/util/UnescapedCharSequence.java	(revision 1664292)
+++ lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/util/UnescapedCharSequence.java	(working copy)
@@ -144,8 +144,27 @@
   
   public static CharSequence toLowerCase(CharSequence text, Locale locale) {
     if (text instanceof UnescapedCharSequence) {
-      char[] chars = text.toString().toLowerCase(locale).toCharArray();
-      boolean[] wasEscaped = ((UnescapedCharSequence)text).wasEscaped;
+      String lowerCase = text.toString().toLowerCase(locale);
+      char[] chars;
+      boolean[] wasEscaped;
+      if (lowerCase.length() != text.length()) {
+        // lowercasing changes the length of the string, so we need the inefficient implementation
+        chars = new char[lowerCase.length()];
+        wasEscaped = new boolean[lowerCase.length()];
+        
+        int pos = 0;
+        for (int i = 0; i < text.length(); i++) {
+          String lowerCaseChar = text.subSequence(i, i+1).toString().toLowerCase(locale); // this string may be longer than one character
+          for (int j = 0; j < lowerCaseChar.length(); j++) {
+            chars[j + pos] = lowerCaseChar.charAt(j);
+            wasEscaped[j + pos] = ((UnescapedCharSequence)text).wasEscaped[i];
+          }
+          pos += lowerCaseChar.length();
+        }
+      } else {
+        chars = lowerCase.toCharArray();
+        wasEscaped = ((UnescapedCharSequence)text).wasEscaped;
+      }
       return new UnescapedCharSequence(chars, wasEscaped, 0, chars.length);
     } else 
       return new UnescapedCharSequence(text.toString().toLowerCase(locale));
