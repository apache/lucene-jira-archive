diff --git a/lucene/core/src/java/org/apache/lucene/search/LinearScoringIndexSearcher.java b/lucene/core/src/java/org/apache/lucene/search/LinearScoringIndexSearcher.java
new file mode 100644
index 0000000..490f52c
--- /dev/null
+++ b/lucene/core/src/java/org/apache/lucene/search/LinearScoringIndexSearcher.java
@@ -0,0 +1,70 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.lucene.search;
+
+import java.io.IOException;
+import java.util.Set;
+
+import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.LeafReaderContext;
+import org.apache.lucene.index.Term;
+
+/**
+ * IndexSearcher that forces linear scoring.
+ *
+ * This is useful for searching across very small indexes, where the up-front
+ * cost of allocating BulkScorers is significant.
+ */
+public class LinearScoringIndexSearcher extends IndexSearcher {
+
+  public LinearScoringIndexSearcher(IndexReader r) {
+    super(r);
+  }
+
+  @Override
+  public Weight createNormalizedWeight(Query query, boolean needsScores) throws IOException {
+    final Weight innerWeight = super.createNormalizedWeight(query, needsScores);
+    return new Weight(query) {
+      @Override
+      public void extractTerms(Set<Term> set) {
+        innerWeight.extractTerms(set);
+      }
+
+      @Override
+      public Explanation explain(LeafReaderContext leafReaderContext, int i) throws IOException {
+        return innerWeight.explain(leafReaderContext, i);
+      }
+
+      @Override
+      public float getValueForNormalization() throws IOException {
+        return innerWeight.getValueForNormalization();
+      }
+
+      @Override
+      public void normalize(float v, float v1) {
+        innerWeight.normalize(v, v1);
+      }
+
+      @Override
+      public Scorer scorer(LeafReaderContext leafReaderContext) throws IOException {
+        return innerWeight.scorer(leafReaderContext);
+      }
+    };
+  }
+
+}
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestLinearScoringIndexSearcher.java b/lucene/core/src/test/org/apache/lucene/search/TestLinearScoringIndexSearcher.java
new file mode 100644
index 0000000..4280afc
--- /dev/null
+++ b/lucene/core/src/test/org/apache/lucene/search/TestLinearScoringIndexSearcher.java
@@ -0,0 +1,85 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.lucene.search;
+
+import java.io.IOException;
+
+import org.apache.lucene.document.Document;
+import org.apache.lucene.document.Field;
+import org.apache.lucene.document.TextField;
+import org.apache.lucene.index.DirectoryReader;
+import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.IndexWriter;
+import org.apache.lucene.index.Term;
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.util.LuceneTestCase;
+import org.junit.Test;
+
+public class TestLinearScoringIndexSearcher extends LuceneTestCase {
+
+  @Test
+  public void testForceNoBulkScores() throws IOException {
+
+    Directory dir = newDirectory();
+    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());
+
+    Document doc = new Document();
+    doc.add(new TextField("field", "this is some text", Field.Store.NO));
+    w.addDocument(doc);
+
+    w.close();
+
+    IndexReader reader = DirectoryReader.open(dir);
+    IndexSearcher searcher = new IndexSearcher(reader);
+    searcher.setQueryCache(null);
+
+    BooleanQuery bq = new BooleanQuery.Builder()
+        .add(new TermQuery(new Term("field", "some")), BooleanClause.Occur.SHOULD)
+        .add(new TermQuery(new Term("field", "text")), BooleanClause.Occur.SHOULD)
+        .build();
+
+    checkScorerType(searcher, bq, "FakeScorer");
+
+    IndexSearcher linearSearcher = new LinearScoringIndexSearcher(reader);
+    linearSearcher.setQueryCache(null);
+    checkScorerType(linearSearcher, bq, "DisjunctionSumScorer");
+
+    reader.close();
+    dir.close();
+  }
+
+  private static void checkScorerType(IndexSearcher searcher, Query query, String scorerType) throws IOException {
+    searcher.search(query, new SimpleCollector() {
+
+      @Override
+      public void setScorer(Scorer scorer) throws IOException {
+        assertEquals(scorer.getClass().getSimpleName(), scorerType);
+      }
+
+      @Override
+      public void collect(int doc) throws IOException {
+
+      }
+
+      @Override
+      public boolean needsScores() {
+        return false;
+      }
+    });
+  }
+}
diff --git a/lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java b/lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java
index cde20e5..df38f51 100644
--- a/lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java
+++ b/lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java
@@ -37,6 +37,7 @@ import org.apache.lucene.analysis.tokenattributes.TermToBytesRefAttribute;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.index.*;
 import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.LinearScoringIndexSearcher;
 import org.apache.lucene.search.Query;
 import org.apache.lucene.search.Scorer;
 import org.apache.lucene.search.SimpleCollector;
@@ -665,7 +666,7 @@ public class MemoryIndex {
    */
   public IndexSearcher createSearcher() {
     MemoryIndexReader reader = new MemoryIndexReader();
-    IndexSearcher searcher = new IndexSearcher(reader); // ensures no auto-close !!
+    IndexSearcher searcher = new LinearScoringIndexSearcher(reader); // ensures no auto-close !!
     searcher.setSimilarity(normSimilarity);
     searcher.setQueryCache(null);
     return searcher;
